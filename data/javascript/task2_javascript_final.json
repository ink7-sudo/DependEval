[
    {
        "files": [
            "'cypress-plugin-snapshots/src/utils/text/applyReplace.js'",
            "'cypress-plugin-snapshots/src/tasks/index.js'",
            "'cypress-plugin-snapshots/src/tasks/matchTextSnapshot.js'"
        ],
        "content": "'cypress-plugin-snapshots/src/utils/text/applyReplace.js'\n:\nfunction applyReplace(expected, replace) {\n  if (typeof expected !== 'object' || !replace) {\n    return expected;\n  }\n\n  if (typeof replace === 'object') {\n    const jsonString = Object.keys(replace)\n      .reduce((result, key) => result.replace(\n        new RegExp(`\\\\$\\\\{${key}\\\\}`, 'g'),\n        replace[key]\n      ), JSON.stringify(expected));\n    return JSON.parse(jsonString);\n  }\n\n  return expected;\n}\n\nmodule.exports = applyReplace;\n\n'cypress-plugin-snapshots/src/tasks/index.js'\n:const {\n  GET_FILE,\n  MATCH_IMAGE,\n  MATCH_TEXT\n} = require('./taskNames');\nconst getFile = require('./getFile');\nconst matchImageSnapshot = require('./matchImageSnapshot');\nconst matchTextSnapshot = require('./matchTextSnapshot');\n\nmodule.exports = {\n  [GET_FILE]: getFile,\n  [MATCH_IMAGE]: matchImageSnapshot,\n  [MATCH_TEXT]: matchTextSnapshot,\n}\n\n'cypress-plugin-snapshots/src/tasks/matchTextSnapshot.js'\n:const {\n  merge,\n  cloneDeep\n} = require('lodash');\nconst applyReplace = require('../utils/text/applyReplace');\nconst {\n  createDiff,\n  formatDiff,\n  getSnapshot,\n  subjectToSnapshot,\n  updateSnapshot,\n} = require('../utils/tasks/textSnapshots');\nconst getSnapshotFilename = require('../utils/text/getSnapshotFilename');\nconst keepKeysFromExpected = require('../utils/text/keepKeysFromExpected');\nconst {\n  getConfig\n} = require('../config');\n\nfunction matchTextSnapshot({\n  commandName,\n  dataType,\n  options,\n  snapshotTitle,\n  subject,\n  testFile,\n} = {}) {\n  const config = merge({}, cloneDeep(getConfig()), options);\n  const snapshotFile = getSnapshotFilename(testFile);\n  const expectedRaw = getSnapshot(snapshotFile, snapshotTitle, dataType);\n  let expected = applyReplace(expectedRaw, config.replace);\n  const actual = keepKeysFromExpected(subjectToSnapshot(subject, dataType, config), expected, config);\n\n  const exists = expected !== false;\n\n  const autoPassed = (config.autopassNewSnapshots && expected === false);\n  const passed = (expected && formatDiff(expected) === formatDiff(actual));\n  const diff = createDiff(expected, actual, snapshotTitle);\n\n  let updated = false;\n\n  if ((config.updateSnapshots && !passed) || expected === false) {\n    updateSnapshot(snapshotFile, snapshotTitle, actual, dataType);\n    updated = true;\n  }\n\n  if (autoPassed) {\n    expected = actual;\n  }\n\n  const result = {\n    actual,\n    commandName,\n    dataType,\n    diff,\n    exists,\n    expected,\n    passed: passed || autoPassed,\n    snapshotFile,\n    snapshotTitle,\n    subject,\n    updated,\n  };\n\n  return result;\n}\n\nmodule.exports = matchTextSnapshot;\n",
        "gt": [
            "'cypress-plugin-snapshots/src/utils/text/applyReplace.js'",
            "'cypress-plugin-snapshots/src/tasks/matchTextSnapshot.js'",
            "'cypress-plugin-snapshots/src/tasks/index.js'"
        ]
    },
    {
        "files": [
            "'cypress-plugin-snapshots/src/server/initServer.js'",
            "'cypress-plugin-snapshots/src/utils/tasks/imageSnapshots.js'",
            "'cypress-plugin-snapshots/src/constants.js'",
            "'cypress-plugin-snapshots/__tests__/plugin.test.js'",
            "'cypress-plugin-snapshots/src/utils/image/getSnapshotFilename.js'",
            "'cypress-plugin-snapshots/plugin.js'"
        ],
        "content": "'cypress-plugin-snapshots/src/server/initServer.js'\n:const http = require('http');\nconst socketio = require('socket.io');\nconst { SAVE_TEXT, SAVE_IMAGE } = require('./actions');\nconst saveTextSnapshot = require('../save/saveTextSnapshot');\nconst { saveImageSnapshot } = require('../utils/tasks/imageSnapshots');\n\nfunction initServer(config) {\n  const server = http.createServer();\n  const io = socketio(server);\n\n  io.on('connection', (client) => {\n    const { token } = client.handshake.query;\n\n    if (config.serverEnabled) {\n      client.on(SAVE_IMAGE, (data) => {\n        if (token === config.token) {\n          saveImageSnapshot(data);\n        }\n      });\n\n      client.on(SAVE_TEXT, (data) => {\n        if (token === config.token) {\n          saveTextSnapshot(data);\n        }\n      });\n    }\n  });\n\n  if (config.serverEnabled) {\n    server.listen(config.serverPort, config.serverHost);\n  }\n}\n\nmodule.exports = initServer;\n\n'cypress-plugin-snapshots/src/utils/tasks/imageSnapshots.js'\n:const { createHash } = require('crypto');\nconst { PNG } = require('pngjs');\nconst fs = require('fs-extra');\nconst pixelmatch = require('pixelmatch');\nconst { merge } = require('lodash');\nconst rimraf = require('rimraf').sync;\nconst getSnapshotFilename = require('../image/getSnapshotFilename');\nconst getImageData = require('../image/getImageData');\nconst { IMAGE_TYPE_ACTUAL } = require('../../constants');\nconst { DEFAULT_IMAGE_CONFIG } = require('../../config');\n\nfunction moveActualImageToSnapshotsDirectory({image, snapshotTitle, testFile} = {}) {\n  if (image && image.path) {\n    const filename = getSnapshotFilename(testFile, snapshotTitle, IMAGE_TYPE_ACTUAL);\n    rimraf(filename);\n    if (fs.existsSync(image.path)) {\n      fs.moveSync(image.path, filename);\n    }\n    image.path = filename;\n  }\n}\n\nfunction createDiffObject(filename) {\n  const imageObject = getImageObject(filename, false);\n  return getImageData(imageObject);\n}\n\n\nfunction getImageObject(filename, addHash = true) {\n  const exists = fs.existsSync(filename);\n  const size = exists ? fs.statSync(filename).size : 0;\n\n  if (size > 0) {\n    const image = PNG.sync.read(fs.readFileSync(filename));\n    const hash = addHash !== false ?\n      createHash('sha1').update(image.data).digest('base64') : undefined;\n\n    return {\n      path: filename,\n      image,\n      hash,\n      height: image.height,\n      width: image.width,\n    };\n  }\n\n  return false;\n}\n\nfunction createCompareCanvas(width, height, source) {\n  const canvas = new PNG({\n    width,\n    height,\n    colorType: 6,\n    bgColor: {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 0,\n    }\n  });\n  PNG.bitblt(source, canvas, 0, 0, source.width, source.height, 0, 0);\n  return canvas;\n}\n\n\nfunction makeImagesEqualSize(expected, actual) {\n  const height = Math.max(expected.height, actual.height);\n  const width = Math.max(expected.width, actual.width);\n  actual.image = createCompareCanvas(width, height, actual.image);\n  expected.image = createCompareCanvas(width, height, expected.image);\n}\n\nfunction compareImageSizes(expected, actual) {\n  return expected.width === actual.width &&\n    actual.height === expected.height;\n}\n\nfunction compareImages(expected, actual, diffFilename, config) {\n  let passed = false;\n  rimraf(diffFilename);\n\n  if (actual !== false) {\n    const hashMatches = expected.hash === actual.hash;\n    if (hashMatches) {\n      return true;\n    }\n\n    const sizeMatch = compareImageSizes(expected, actual);\n    if (!sizeMatch) {\n      makeImagesEqualSize(expected, actual);\n    }\n\n    const imageConfig = merge({}, DEFAULT_IMAGE_CONFIG, config);\n    const pixelmatchConfig = {\n      threshold: 0.01,\n    };\n\n    const imageWidth = actual.image.width;\n    const imageHeight = actual.image.height;\n\n    const diffImage = config.createDiffImage ? new PNG({\n      height: imageHeight,\n      width: imageWidth,\n    }) : null;\n\n    const totalPixels = imageWidth * imageHeight;\n    const diffPixelCount = pixelmatch(\n      actual.image.data,\n      expected.image.data,\n      diffImage ? diffImage.data : null,\n      imageWidth,\n      imageHeight,\n      pixelmatchConfig\n    );\n\n    if (imageConfig.thresholdType === 'pixel') {\n      passed = diffPixelCount <= imageConfig.threshold;\n    } else if (imageConfig.thresholdType === 'percent') {\n      const diffRatio = diffPixelCount / totalPixels;\n      passed = diffRatio <= imageConfig.threshold;\n    } else {\n      throw new Error(`Unknown imageConfig.thresholdType: ${imageConfig.thresholdType}. `+\n        `Valid options are \"pixel\" or \"percent\".`);\n    }\n\n    if (!passed && diffImage) {\n\n\n      const pngBuffer = PNG.sync.write(diffImage, {\n        filterType: 4\n      });\n      fs.writeFileSync(diffFilename, pngBuffer);\n    }\n  }\n\n  return passed;\n}\n\nfunction saveImageSnapshot(data) {\n  rimraf(data.expected.path);\n  rimraf(data.diff.path);\n  fs.moveSync(data.actual.path, data.expected.path);\n}\n\nmodule.exports = {\n  compareImages,\n  createDiffObject,\n  getImageObject,\n  saveImageSnapshot,\n  moveActualImageToSnapshotsDirectory\n};\n\n'cypress-plugin-snapshots/src/constants.js'\n:module.exports = {\n  DIR_IMAGE_SNAPSHOTS: '__image_snapshots__',\n  DIR_SNAPSHOTS: '__snapshots__',\n  IMAGE_TYPE_DIFF: 'diff',\n  IMAGE_TYPE_ACTUAL: 'actual',\n  NO_LOG: { log: false },\n  URL_PREFIX: '#cypress-plugin-snapshot-',\n}\n\n'cypress-plugin-snapshots/__tests__/plugin.test.js'\n:\nconst configModule = require('../src/config');\n\njest.mock(\"../src/config.js\");\n\njest.spyOn(configModule, 'initConfig')\n  .mockImplementation((config) => config);\n\nglobal.Cypress = {\n  env: () => {},\n  config: () => {},\n  Commands: {\n    add: jest.fn(),\n  },\n};\n\nglobal.cy = {};\n\ndescribe('plugin', () => {\n  it('initPlugin', () => {\n    const globalConfig = {\n      env: {\n        \"cypress-plugin-snapshots\": {\n          \"serverEnabled\": false,\n        }\n      }\n    };\n    jest.spyOn(configModule, 'getConfig')\n      .mockImplementation(() => globalConfig.env['cypress-plugin-snapshots']);\n    const on = jest.fn();\n\n    const { initPlugin } = require('../plugin');\n\n    initPlugin(on, globalConfig);\n    expect(on).toBeCalledTimes(2);\n  });\n});\n\n'cypress-plugin-snapshots/src/utils/image/getSnapshotFilename.js'\n:const path = require('path');\nconst sanitizeFilename = require('sanitize-filename');\nconst { DIR_IMAGE_SNAPSHOTS } = require('../../constants');\n\nfunction getSnapshotFilename(testFile, snapshotTitle, type = '') {\n  const dir = path.join(path.dirname(testFile), DIR_IMAGE_SNAPSHOTS);\n  const fileType = type ? `.${type}` : '';\n  const filename = sanitizeFilename(`${snapshotTitle}${fileType}.png`);\n  return path.join(dir, filename);\n}\n\nmodule.exports = getSnapshotFilename;\n\n'cypress-plugin-snapshots/plugin.js'\n:\nconst { initConfig, CONFIG_KEY } = require('./src/config');\nconst initServer = require('./src/server/initServer');\nconst tasks = require('./src/tasks/');\n\n\nfunction initPlugin(on, globalConfig = {\n}) {\n  const config = initConfig(globalConfig.env[CONFIG_KEY]);\n  initServer(config);\n\n\n\n  globalConfig.env[CONFIG_KEY] = JSON.stringify(config);\n\n  on('before:browser:launch', (browser = {}, launchOptions) => {\n    const args = Array.isArray(launchOptions) ? launchOptions : launchOptions.args;\n\n    if (browser.name === 'chrome') {\n      args.push('--font-render-hinting=medium');\n      args.push('--enable-font-antialiasing');\n      args.push('--disable-gpu');\n    }\n\n    return launchOptions;\n  });\n\n  on('task', tasks);\n}\n\nmodule.exports = {\n  initPlugin\n};\n",
        "gt": [
            "'cypress-plugin-snapshots/src/constants.js'",
            "'cypress-plugin-snapshots/src/utils/image/getSnapshotFilename.js'",
            "'cypress-plugin-snapshots/src/utils/tasks/imageSnapshots.js'",
            "'cypress-plugin-snapshots/src/server/initServer.js'",
            "'cypress-plugin-snapshots/plugin.js'",
            "'cypress-plugin-snapshots/__tests__/plugin.test.js'"
        ]
    },
    {
        "files": [
            "'Registration-and-Login-using-MERN-stack/src/components/Registration.js'",
            "'Registration-and-Login-using-MERN-stack/src/elements/Error.js'",
            "'Registration-and-Login-using-MERN-stack/src/components/Registration.test.js'"
        ],
        "content": "'Registration-and-Login-using-MERN-stack/src/components/Registration.js'\n:import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport classNames from 'classnames';\nimport {\n  UserRegistration,\n  UsernameValidation,\n} from '../services/RegistrationService';\nimport Message from '../elements/Message';\nimport Error from '../elements/Error';\nimport {\n  REGISTRATION_FIELDS,\n  REGISTRATION_MESSAGE,\n  COMMON_FIELDS,\n  ERROR_IN_REGISTRATION,\n} from '../MessageBundle';\n\nexport default class Registration extends Component {\n  constructor (props) {\n    super (props);\n    this.state = {\n      first_name: '',\n      last_name: '',\n      user_name: '',\n      password: '',\n      register: false,\n      error: false,\n    };\n  }\n\n  handleOnChangeFirstName = e => {\n    this.setState ({\n      first_name: e.target.value,\n    });\n  };\n\n  handleOnChangeLastName = e => {\n    this.setState ({\n      last_name: e.target.value,\n    });\n  };\n\n  handleOnChangeUserName = e => {\n    this.setState ({\n      user_name: e.target.value,\n    });\n  };\n\n  handleOnChangePassword = e => {\n    this.setState ({\n      password: e.target.value,\n    });\n  };\n\n  handleOnBlur = async e => {\n    this.setState ({\n      user_name: e.target.value,\n    });\n    const data = {\n      user_name: this.state.user_name,\n    };\n    const isUsernameTaken = await UsernameValidation (data);\n\n    isUsernameTaken === 204\n      ? this.setState ({user_name_taken: true})\n      : this.setState ({user_name_taken: false});\n  };\n\n  onSubmit = async e => {\n    e.preventDefault ();\n    const data = {\n      first_name: this.state.first_name,\n      last_name: this.state.last_name,\n      user_name: this.state.user_name,\n      password: this.state.password,\n    };\n\n    const registerStatus = await UserRegistration (data);\n    if (registerStatus === 200) {\n      this.setState ({\n        first_name: '',\n        last_name: '',\n        user_name: '',\n        password: '',\n        register: true,\n        error: false,\n      });\n    } else\n      this.setState ({\n        error: true,\n        register: false,\n      });\n  };\n\n  render () {\n    const {register, error, user_name_taken} = this.state;\n\n    return (\n      <div className=\"Registration\">\n        <h1> {REGISTRATION_FIELDS.REGISTRATION_HEADING} </h1> <form\n          onSubmit={this.onSubmit}\n        >\n          <div>\n            <div className=\"fields\">\n              <p> {REGISTRATION_FIELDS.FIRST_NAME} </p>\n              {' '}\n              <input\n                type=\"text\"\n                value={this.state.first_name}\n                name=\"FirstName\"\n                onChange={this.handleOnChangeFirstName}\n              />\n              {' '}\n            </div> <div className=\"fields\">\n              <p> {REGISTRATION_FIELDS.LAST_NAME} </p>\n              {' '}\n              <input\n                type=\"text\"\n                value={this.state.last_name}\n                name=\"LastName\"\n                onChange={this.handleOnChangeLastName}\n              />\n              {' '}\n            </div> <div className=\"fields\">\n              <p> {COMMON_FIELDS.USER_NAME} </p>\n              {' '}\n              <input\n                type=\"text\"\n                className={classNames ({error: user_name_taken})}\n                value={this.state.user_name}\n                name=\"Username\"\n                onBlur={this.handleOnBlur}\n                onChange={this.handleOnChangeUserName}\n                autoComplete=\"Username\"\n                required\n              />\n            </div> <div className=\"fields\">\n              <p> {COMMON_FIELDS.PASSWORD} </p>\n              {' '}\n              <input\n                type=\"password\"\n                value={this.state.password}\n                name=\"Password\"\n                onChange={this.handleOnChangePassword}\n                autoComplete=\"password\"\n                required\n              />\n            </div> <div className=\"buttons\">\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={user_name_taken}\n              >\n                {' '}{REGISTRATION_FIELDS.REGISTER}{' '}\n              </button>\n              {' '}\n              <Link to=\"/login\"> {REGISTRATION_FIELDS.CANCEL} </Link>\n              {' '}\n            </div>{' '}\n          </div>{' '}\n        </form>\n        {' '}\n        {error && <Error message={ERROR_IN_REGISTRATION} />}\n        {' '}\n        {register && <Message message={REGISTRATION_MESSAGE} />}\n        {' '}\n      </div>\n    );\n  }\n}\n\n'Registration-and-Login-using-MERN-stack/src/elements/Error.js'\n:import React from 'react';\n\nconst Error = ({ message }) => (\n\t<div>\n\t\t<div className=\"alert alert-danger\" role=\"alert\">\n\t\t<span className=\"glyphicon glyphicon-thumbs-down\"></span>\n\t\t<span className=\"message\">{message}</span>\n\t</div>\n</div>\n);\n\nexport default Error;\n\n'Registration-and-Login-using-MERN-stack/src/components/Registration.test.js'\n:import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Registration from './Registration';\n\nit('renders without crashing', () => {\n  const div = document.createElement('div');\n  ReactDOM.render(<Registration />, div);\n  ReactDOM.unmountComponentAtNode(div);\n});\n",
        "gt": [
            "'Registration-and-Login-using-MERN-stack/src/elements/Error.js'",
            "'Registration-and-Login-using-MERN-stack/src/components/Registration.js'",
            "'Registration-and-Login-using-MERN-stack/src/components/Registration.test.js'"
        ]
    },
    {
        "files": [
            "'Ahoy/src/components/InstalledChart.jsx'",
            "'Ahoy/__tests__/enzyme.js'",
            "'Ahoy/src/components/Version.jsx'"
        ],
        "content": "'Ahoy/src/components/InstalledChart.jsx'\n:import React from 'react';\nimport {\n  Button, Table, Header, Modal, Icon, Accordion, List, Popup,\n} from 'semantic-ui-react';\nimport Version from './Version';\n\nconst util = require('util');\nconst exec = util.promisify(require('child_process').exec);\n\n\nconst InstalledChart = (props) => {\n  const {\n    chart, history, toggleHistory, doHelmChartRollBack,\n  } = props;\n  const {\n    app_version, chartName, name, namespace, revision, updated,\n  } = chart;\n\n\n  const chartDetails = [\n    {\n      key: 'detailKey',\n      title: name,\n      content: {\n        content: (\n          <div className=\"accordian-chart-details\">\n            <List>\n              <List.Item icon=\"clone\" content={`Namespace: ${namespace}`} />\n              <List.Item icon=\"at\" content={`Current App Version: ${app_version}`} />\n              <List.Item icon=\"sort numeric down\" content={`Revision: ${revision}`} />\n              <List.Item icon=\"clock outline\" content={`Last Updated: ${updated}`} />\n            </List>\n          </div>\n        ),\n      },\n    },\n  ];\n\n\n  const uninstallHelmChart = async () => {\n    const helmChart = chart.name;\n    await exec(`helm uninstall ${helmChart}`);\n    props.getDeployedCharts();\n  };\n\n\n  const versionsArray = [];\n  for (let i = 0; i < history.length; i++) {\n    versionsArray.push(\n      <Version\n        key={`key-${i}`}\n        details={history[i]}\n        release={name}\n        doHelmChartRollBack={doHelmChartRollBack}\n      />,\n    );\n  }\n\n\n\n\n  return (\n    <Table.Row>\n      <Table.Cell className=\"installed-chart-cell\">\n        <Table className=\"borderless\">\n          <Table.Body>\n            <Table.Row>\n              <Table.Cell>\n                <Accordion panels={chartDetails} />\n              </Table.Cell>\n              <Table.Cell>\n                <Button\n                  id=\"historyBtn\"\n                  className=\"button-right\"\n                  onClick={() => toggleHistory(name)}\n                  size=\"tiny\"\n                  compact\n                >\n                  History\n                </Button>\n                <Popup\n                  trigger={(\n                    <Button\n                      name=\"uninstall\"\n                      id=\"uninstallBtn\"\n                      className=\"button-right\"\n                      size=\"tiny\"\n                      compact\n                    >\n                      Uninstall\n                    </Button>\n                  )}\n                  content={(\n                    <Button\n                      id=\"uninstallBtnConfirm\"\n                      color=\"red\"\n                      content=\"Confirm Uninstall\"\n                      onClick={() => {\n                        uninstallHelmChart();\n                      }}\n                    />\n                  )}\n                  id=\"confirm\"\n                  on=\"click\"\n                  position=\"top right\"\n                />\n              </Table.Cell>\n            </Table.Row>\n            {versionsArray}\n          </Table.Body>\n        </Table>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default InstalledChart;\n\n'Ahoy/__tests__/enzyme.js'\n:import React from 'react';\nimport { configure, shallow } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport LocalChart from '../src/components/LocalChart';\nimport InstalledChart from '../src/components/InstalledChart';\n\nconfigure({ adapter: new Adapter() });\n\ndescribe('All enzyme tests', () => {\n  let wrapper;\n\n  describe('Local Chart Button Tests', () => {\n\n    const props = {\n      chart: {},\n      id: 'id',\n      key: 'keyString1',\n      dirPath: jest.fn(),\n      getDeployedCharts: jest.fn(),\n      handleOpenChartClick: jest.fn(),\n      installHelmChart: jest.fn(),\n    };\n\n    beforeAll(() => {\n      wrapper = shallow(<LocalChart {...props} />);\n    });\n\n    describe('Install Button', () => {\n      it('Should render an install button', () => {\n        expect(wrapper.find('#installBtn')).toHaveLength(1);\n      });\n    });\n    describe('Open Folder Button', () => {\n      it('Should execute passed in function when clicked', () => {\n        wrapper.find('#openChartBtn').simulate('click');\n        expect(props.handleOpenChartClick).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Installed Chart Button Tests', () => {\n    let wrapper2;\n    const props = {\n      key: {},\n      id: 'id',\n      chart: {},\n      history: {},\n      getDeployedCharts: jest.fn(),\n      toggleHistory: jest.fn(),\n      doHelmChartRollBack: jest.fn(),\n    };\n\n    beforeAll(() => {\n      wrapper = shallow(<InstalledChart {...props} />);\n    });\n\n    describe('Uninstall Popup Button', () => {\n      it('Renders a popup when pressed', () => {\n        wrapper.find('Popup').simulate('click');\n        expect(wrapper.find('#confirm').exists()).toEqual(true);\n      });\n    });\n    describe('History Button', () => {\n      it('Should execute passed in function when clicked', () => {\n        wrapper.find('#historyBtn').simulate('click');\n        expect(props.toggleHistory).toHaveBeenCalled();\n      });\n    });\n  });\n});\n\n'Ahoy/src/components/Version.jsx'\n:import React from 'react';\nimport {\n  Table, List, Icon,\n} from 'semantic-ui-react';\n\n\nfunction Version(props) {\n  const { details, release, doHelmChartRollBack } = props;\n  const {\n    app_version, chart, description, revision, status, updated,\n  } = details;\n\n  return (\n    <Table.Row className=\"installed-chart-detail\" data-testid=\"VersionRow\">\n      <Table.Cell data-testid=\"tableCell\" colSpan=\"2\" className=\"installed-chart-detail\">\n        <List data-testid=\"mainList\">\n          <List.Item>\n            <List.List data-testid=\"subList\">\n              <List.Item>\n                <div>\n                  <strong>Version:</strong>\n                  {app_version}\n                  {status === 'deployed' ? <i> current</i>\n                    : (\n                      <Icon\n                        name=\"undo\"\n                        link\n                        size=\"small\"\n                        color=\"orange\"\n                        onClick={() => doHelmChartRollBack(release, revision)}\n                      />\n                    )}\n                </div>\n              </List.Item>\n              <List.Item icon=\"chart line\" content={`Chart: ${chart}`} />\n              <List.Item icon=\"sticky note outline\" content={`Description: ${description}`} />\n              <List.Item icon=\"star\" content={`Status: ${status}`} />\n              <List.Item icon=\"sort numeric down\" content={`Revision: ${revision}`} />\n              <List.Item icon=\"clock outline\" content={`Updated: ${updated}`} />\n            </List.List>\n          </List.Item>\n        </List>\n      </Table.Cell>\n    </Table.Row>\n  );\n}\n\nexport default Version;\n",
        "gt": [
            "'Ahoy/src/components/Version.jsx'",
            "'Ahoy/src/components/InstalledChart.jsx'",
            "'Ahoy/__tests__/enzyme.js'"
        ]
    },
    {
        "files": [
            "'NFT-Marketplace-Tutorial/src/App.js'",
            "'NFT-Marketplace-Tutorial/src/App.test.js'",
            "'NFT-Marketplace-Tutorial/src/components/Marketplace.js'"
        ],
        "content": "'NFT-Marketplace-Tutorial/src/App.js'\n:import './App.css';\nimport Navbar from './components/Navbar.js';\nimport Marketplace from './components/Marketplace';\nimport Profile from './components/Profile';\nimport SellNFT from './components/SellNFT';\nimport NFTPage from './components/NFTpage';\nimport ReactDOM from \"react-dom/client\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<Marketplace />}/>\n          <Route path=\"/nftPage\" element={<NFTPage />}/>\n          <Route path=\"/profile\" element={<Profile />}/>\n          <Route path=\"/sellNFT\" element={<SellNFT />}/>\n        </Routes>\n    </div>\n  );\n}\n\nexport default App;\n\n'NFT-Marketplace-Tutorial/src/App.test.js'\n:import { render, screen } from '@testing-library/react';\nimport App from './App';\n\ntest('renders learn react link', () => {\n  render(<App />);\n  const linkElement = screen.getByText(/learn react/i);\n  expect(linkElement).toBeInTheDocument();\n});\n\n'NFT-Marketplace-Tutorial/src/components/Marketplace.js'\n:import Navbar from \"./Navbar\";\nimport NFTTile from \"./NFTTile\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\n\nexport default function Marketplace() {\nconst sampleData = [\n    {\n        \"name\": \"NFT#1\",\n        \"description\": \"Alchemy's First NFT\",\n        \"website\":\"http:\n        \"image\":\"https:\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757CB4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n    {\n        \"name\": \"NFT#2\",\n        \"description\": \"Alchemy's Second NFT\",\n        \"website\":\"http:\n        \"image\":\"https:\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n    {\n        \"name\": \"NFT#3\",\n        \"description\": \"Alchemy's Third NFT\",\n        \"website\":\"http:\n        \"image\":\"https:\n        \"price\":\"0.03ETH\",\n        \"currentlySelling\":\"True\",\n        \"address\":\"0xe81Bf5A757C4f7F82a2F23b1e59bE45c33c5b13\",\n    },\n];\nconst [data, updateData] = useState(sampleData);\nconst [dataFetched, updateFetched] = useState(false);\n\nasync function getAllNFTs() {\n    const ethers = require(\"ethers\");\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n\n    let transaction = await contract.getAllNFTs()\n\n\n    const items = await Promise.all(transaction.map(async i => {\n        var tokenURI = await contract.tokenURI(i.tokenId);\n        console.log(\"getting this tokenUri\", tokenURI);\n        tokenURI = GetIpfsUrlFromPinata(tokenURI);\n        let meta = await axios.get(tokenURI);\n        meta = meta.data;\n\n        let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n        let item = {\n            price,\n            tokenId: i.tokenId.toNumber(),\n            seller: i.seller,\n            owner: i.owner,\n            image: meta.image,\n            name: meta.name,\n            description: meta.description,\n        }\n        return item;\n    }))\n\n    updateFetched(true);\n    updateData(items);\n}\n\nif(!dataFetched)\n    getAllNFTs();\n\nreturn (\n    <div>\n        <Navbar></Navbar>\n        <div className=\"flex flex-col place-items-center mt-20\">\n            <div className=\"md:text-xl font-bold text-white\">\n                Top NFTs\n            </div>\n            <div className=\"flex mt-5 justify-between flex-wrap max-w-screen-xl text-center\">\n                {data.map((value, index) => {\n                    return <NFTTile data={value} key={index}></NFTTile>;\n                })}\n            </div>\n        </div>\n    </div>\n);\n\n}",
        "gt": [
            "'NFT-Marketplace-Tutorial/src/components/Marketplace.js'",
            "'NFT-Marketplace-Tutorial/src/App.js'",
            "'NFT-Marketplace-Tutorial/src/App.test.js'"
        ]
    },
    {
        "files": [
            "'pkglink/src/cli-options.js'",
            "'pkglink/src/constants.js'",
            "'pkglink/src/cli.js'"
        ],
        "content": "'pkglink/src/cli-options.js'\n:import chalk from 'chalk';\nimport Joi from '@hapi/joi';\nimport minimist from 'minimist';\nimport OS from 'os';\nimport Path from 'path';\nimport R from 'ramda';\nimport { safeJsonReadSync } from './util/file';\nimport { DEFAULT_CONFIG_FILE, DEFAULT_REFS_FILE } from './constants';\n\nconst minimistOpts = {\n  boolean: ['d', 'g', 'h', 'p', 'v'],\n  string: ['c', 'm', 'r'],\n  alias: {\n    c: 'config',\n    d: 'dryrun',\n    g: 'gen-ln-cmds',\n    h: 'help',\n    m: 'memory',\n    p: 'prune',\n    r: 'refs-file',\n    t: 'tree-depth',\n    v: 'verbose'\n  }\n};\n\nexport const argvSchema = Joi.object({\n  config: Joi.string(),\n  'refs-file': Joi.string(),\n  'tree-depth': Joi.number().integer().min(0)\n}).unknown(true);\n\nexport const configSchema = Joi.object({\n  refsFile: Joi.string().default(Path.resolve(OS.homedir(), DEFAULT_REFS_FILE)),\n  concurrentOps: Joi.number().integer().min(1).default(4),\n\n\n  ignoreModTime: Joi.boolean().default(OS.platform() === 'win32'),\n  memory: Joi.number().integer().min(100).default(2560),\n  minFileSize: Joi.number().integer().min(0).default(0),\n  treeDepth: Joi.number().integer().min(0).default(0),\n  refSize: Joi.number().integer().min(1).default(5),\n  consoleWidth: Joi.number().integer().min(30).default(70)\n});\n\nexport function gatherOptions(processArgv, displayHelp) {\n\n  const unvalidArgv = minimist(processArgv, minimistOpts);\n  const argvVResult = argvSchema.validate(unvalidArgv);\n  if (argvVResult.error) {\n    if (displayHelp) {\n      displayHelp();\n    }\n    console.error('');\n    console.error(chalk.red('error: invalid argument specified'));\n    argvVResult.error.details.forEach((err) => {\n      console.error(err.message);\n    });\n    process.exit(20);\n  }\n  const argv = argvVResult.value;\n  return argv;\n}\n\nexport function gatherConfig(argv, unvalidatedConfig, configPath) {\n  const configResult = configSchema.validate(unvalidatedConfig, {\n    abortEarly: false\n  });\n  if (configResult.error) {\n    console.error(chalk.red('error: invalid JSON configuration'));\n    console.error(`${chalk.bold('config file:')} ${configPath}`);\n    configResult.error.details.forEach((err) => {\n      console.error(err.message);\n    });\n    process.exit(22);\n  }\n  const config = configResult.value;\n  R.toPairs({\n\n    dryrun: argv.dryrun,\n    genLnCmds: argv['gen-ln-cmds'],\n    memory: argv.memory,\n    refsFile: argv['refs-file'],\n    treeDepth: argv['tree-depth']\n  }).forEach((p) => {\n    const k = p[0];\n    const v = p[1];\n    if (!R.isNil(v)) {\n\n      config[k] = v;\n    }\n  });\n\n  config.extraCols = config.consoleWidth - 30;\n  return config;\n}\n\nexport function gatherOptionsConfig(processArgv, displayHelp) {\n  const argv = gatherOptions(processArgv, displayHelp);\n\n  const CONFIG_PATH =\n    argv.config || Path.resolve(OS.homedir(), DEFAULT_CONFIG_FILE);\n\n  const parsedConfigJson = safeJsonReadSync(CONFIG_PATH);\n  if (parsedConfigJson instanceof Error) {\n    console.error(chalk.red('error: invalid JSON configuration'));\n    console.error(`${chalk.bold('config file:')} ${CONFIG_PATH}`);\n    console.error(parsedConfigJson);\n    process.exit(21);\n  }\n  const unvalidatedConfig = parsedConfigJson || {};\n\n  const config = gatherConfig(argv, unvalidatedConfig, CONFIG_PATH);\n\n  return {\n    argv,\n    config\n  };\n}\n\n'pkglink/src/constants.js'\n:export const DEFAULT_CONFIG_FILE = '.pkglink';\nexport const DEFAULT_REFS_FILE = '.pkglink_refs';\n\n'pkglink/src/cli.js'\n:#!/usr/bin/env node\nimport chalk from 'chalk';\nimport fs from 'fs-extra-promise';\nimport numeral from 'numeral';\nimport OS from 'os';\nimport Path from 'path';\nimport R from 'ramda';\nimport { Observable, ReplaySubject, Subject } from 'rxjs';\nimport SingleLineLog from 'single-line-log';\nimport stripAnsi from 'strip-ansi';\nimport { formatBytes, sortObjKeys } from './util/format';\nimport { outputFileStderrSync } from './util/file';\nimport defaultRTEnv from './run-env-defaults';\nimport { prune, scanAndLink } from './index';\nimport managed from './util/managed';\nimport { gatherOptionsConfig } from './cli-options';\n\nconst isTTY = process.stdout.isTTY;\nconst singleLineLog = SingleLineLog.stderr;\n\nconst rtenv = {\n\n  ...defaultRTEnv\n};\n\nconst { argv, config } = gatherOptionsConfig(\n  process.argv.slice(2),\n  displayHelp\n);\n\n\nconst isTermOut = isTTY && !argv['gen-ln-cmds'];\n\nif (argv.help || (!argv._.length && !argv.prune)) {\n\n  displayHelp();\n  process.exit(23);\n}\n\nfunction displayHelp() {\n  outputFileStderrSync(Path.join(__dirname, '..', 'usage.txt'));\n}\n\nfs.ensureFileSync(config.refsFile);\n\nconst startingDirs = argv._.map((x) => Path.resolve(x));\n\n\nrtenv.existingPackRefs =\n  fs.readJsonSync(config.refsFile, { throws: false }) || {};\n\nrtenv.cancelled$ = new ReplaySubject(1);\n\nconst singleLineLog$ = new Subject();\nsingleLineLog$\n  .filter((x) => isTermOut)\n  .distinctUntilChanged()\n  .throttleTime(100)\n  .takeUntil(rtenv.cancelled$)\n  .subscribe({\n    next: (x) => singleLineLog(x),\n    complete: () => {\n      singleLineLog('');\n      singleLineLog.clear();\n    }\n  });\nconst log = singleLineLog$.next.bind(singleLineLog$);\nlog.clear = () => {\n  if (isTermOut) {\n    singleLineLog('');\n    singleLineLog.clear();\n  }\n};\nrtenv.log = log;\n\nfunction out(str) {\n  const s = isTermOut ? str : stripAnsi(str);\n  process.stdout.write(s);\n  process.stdout.write(OS.EOL);\n}\nrtenv.out = out;\n\nconst cancel = R.once(() => {\n  rtenv.cancelled = true;\n  rtenv.cancelled$.next(true);\n  console.error('cancelling...');\n});\nconst finalTasks = R.once(() => {\n  singleLineLog$.complete();\n  if (argv.dryrun || argv['gen-ln-cmds']) {\n    out(\n      `# ${chalk.blue('pkgs:')} ${numeral(rtenv.packageCount).format(\n        '0,0'\n      )} ${chalk.yellow('would save:')} ${chalk.bold(\n        formatBytes(rtenv.savedByteCount)\n      )}`\n    );\n    managed.shutdown();\n    return;\n  }\n  if (argv.prune || Object.keys(rtenv.updatedPackRefs).length) {\n    const sortedExistingPackRefs = sortObjKeys(\n      R.merge(rtenv.existingPackRefs, rtenv.updatedPackRefs)\n    );\n    fs.outputJsonSync(config.refsFile, sortedExistingPackRefs);\n\n    if (argv.prune || !rtenv.savedByteCount) {\n      out(`updated ${config.refsFile}`);\n    }\n  }\n  out(\n    `${chalk.blue('pkgs:')} ${numeral(rtenv.packageCount).format(\n      '0,0'\n    )} ${chalk.green('saved:')} ${chalk.bold(\n      formatBytes(rtenv.savedByteCount)\n    )}`\n  );\n  managed.shutdown();\n});\n\nmanaged.onInterrupt(cancel);\nprocess.once('SIGTERM', cancel).once('EXIT', finalTasks);\n\nif (argv.verbose) {\n  console.log('argv', argv);\n  console.log('config', config);\n}\n\nout('');\n\n\nconst arrTaskObs = [];\nif (argv.prune) {\n  arrTaskObs.push(\n    Observable.defer(() => {\n      log(`${chalk.bold('pruning...')}`);\n      return prune(config, rtenv.existingPackRefs);\n    }).do((newShares) => {\n      rtenv.existingPackRefs = newShares;\n    })\n  );\n}\nif (startingDirs.length) {\n  arrTaskObs.push(\n    Observable.defer(() => scanAndLink(config, rtenv, startingDirs))\n  );\n}\n\n\nif (arrTaskObs.length) {\n  Observable.concat(...arrTaskObs).subscribe({\n    error: (err) => console.error(err),\n    complete: () => finalTasks()\n  });\n}\n",
        "gt": [
            "'pkglink/src/constants.js'",
            "'pkglink/src/cli-options.js'",
            "'pkglink/src/cli.js'"
        ]
    },
    {
        "files": [
            "'ruui/cli/addons/ssr/src/server/index.js'",
            "'ruui/cli/addons/ssr/src/index.js'",
            "'ruui/cli/addons/ssr/src/store/action/app.js'",
            "'ruui/cli/addons/ssr/src/welcome.js'",
            "'ruui/cli/addons/ssr/src/store/actions.js'"
        ],
        "content": "'ruui/cli/addons/ssr/src/server/index.js'\n:import React from 'react';\nimport { Router } from 'express';\nimport { AppRegistry } from 'react-native';\nimport reactDom from 'react-dom/server';\nimport { ServerContainer, } from '@react-navigation/native';\nimport { configs as cliConfigs, ssrUtils } from 'react-universal-ui/cli';\nimport App from '../index';\nimport routes from '../routes';\n\nconst router = Router();\nAppRegistry.registerComponent(cliConfigs.appJson.name, () => App);\n\n\nrouter.use('*', (req, res, next) => {\n\tconst { ruui, paths, appJson, ruuiJson, } = cliConfigs;\n\tconst env = ruui.env();\n\tconst isProduction = env === 'production';\n\tconst publicPath = ruui.publicPath(env);\n\tconst location = new URL(req.baseUrl, 'http:\n\tconst initialProps = { ssrLocation: req.baseUrl, ssrContext: {} };\n\tconst ref = React.createRef();\n\tconst { element, getStyleElement, } = AppRegistry.getApplication(appJson.name, { initialProps, rootTag: 'root' });\n\tconst wrappedElement = <ServerContainer ref={ref} location={location}>{element}</ServerContainer>;\n\tconst initialHtml = reactDom.renderToString(wrappedElement);\n\tconst initialStyles = reactDom.renderToStaticMarkup(getStyleElement());\n\tconst pageTemplate = paths.getEjsTemplate();\n\tconst options = ref.current?.getCurrentOptions();\n\n\tres.render(pageTemplate, {\n\t\tssrContext: {\n\t\t\tinitialHtml,\n\t\t\tinitialStyles,\n\t\t\tserverSide: true,\n\t\t\tappName: options.title || appJson.displayName || appJson.name,\n\t\t\tpublicPath,\n\t\t\tbuildId: ruuiJson.buildId,\n\t\t\tisProduction, ...ruui.ejsTemplate,\n\t\t},\n\t});\n});\n\nmodule.exports = {\n\trouter,\n\thydrate: () => ssrUtils.hydrate(AppRegistry, reactDom, routes),\n};\n\n'ruui/cli/addons/ssr/src/index.js'\n:import React from 'react';\nimport { View, StyleSheet, } from 'react-native';\nimport { RuuiProvider, Tooltip } from 'react-universal-ui';\nimport { Provider, } from 'react-redux';\nimport { NavigationContainer, } from '@react-navigation/native';\nimport { createStackNavigator, } from '@react-navigation/stack';\n\nimport { ruuiStore, appStore } from 'store';\nimport WelcomeScreen from './welcome';\nimport HomeScreen from './home';\nimport { routeConfig, } from './routes';\n\nconst Stack = createStackNavigator();\nconst linking = { config: routeConfig, };\n\ntype Props = {\n\n};\n\nconst App = (props: Props) => {\n\treturn <NavigationContainer linking={linking}>\n\t\t<Stack.Navigator headerMode=\"none\">\n\t\t\t<Stack.Screen name=\"Welcome\" component={WelcomeScreen}/>\n\t\t\t<Stack.Screen name=\"Home\" component={HomeScreen}/>\n\t\t</Stack.Navigator>\n\t</NavigationContainer>;\n};\n\nconst AppContainer = (props) => {\n\treturn <RuuiProvider store={ruuiStore}>\n\t\t<Provider store={appStore}>\n\t\t\t<App/>\n\t\t\t<Tooltip/>\n\t\t</Provider>\n\t</RuuiProvider>;\n}\n\nexport default AppContainer;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n});\n\n'ruui/cli/addons/ssr/src/store/action/app.js'\n:import * as Actions from '../actions';\n\nexport function increaseCounter(volume = 1) {\n\treturn { type: Actions.IncreaseCounter, volume };\n}\n\n'ruui/cli/addons/ssr/src/welcome.js'\n:import React, { useState, } from 'react';\nimport { View, Text, StyleSheet, Platform } from 'react-native';\nimport { Button, } from 'react-universal-ui';\nimport { useSelector, useDispatch, } from 'react-redux';\n\nimport type { INavigation, IRoute, } from './typeDefinitions';\nimport * as appActions from 'store/action/app';\n\nconst instructions = Platform.select({\n\tios: 'Press Cmd+R to reload,\\n'\n\t\t+ 'Cmd+D or shake for dev menu',\n\tandroid: 'Double tap R on your keyboard to reload,\\n'\n\t\t+ 'Shake or press menu button for dev menu',\n\tweb: 'Command/Control+R to reload your browser :p\\n'\n\t\t+ '\\nAnd in Browser, we have great advantage\\nwhen using Chrome Developer Tool\\ncompare to the poor native-dev-menu!',\n});\n\ntype Props = {\n\tnavigation?: INavigation,\n\troute?: IRoute,\n};\n\nconst Welcome = (props: Props) => {\n\tconst { navigation, route, } = props;\n\tconst dispatch = useDispatch();\n\tconst counter = useSelector(({ app }) => app.counter);\n\n\treturn <View style={styles.container}>\n\t\t<Text style={styles.welcome}>\n\t\t\tWelcome to Universal Ui\n\t\t</Text>\n\t\t<Text style={styles.instructions}>\n\t\t\tTo get started, edit src/welcome.js\n\t\t</Text>\n\t\t<Text style={styles.instructions}>\n\t\t\t{instructions}\n\t\t</Text>\n\t\t<Button\n\t\t\twrapperStyle={styles.buttonWrapper}\n\t\t\ttitle={`Increase counter [${counter}]`}\n\t\t\ttooltip=\"Increase counter..\"\n\t\t\ttooltipDirection=\"top\"\n\t\t\tonPress={() => dispatch(appActions.increaseCounter())}/>\n\t\t<Text style={styles.link} onPress={() => navigation.navigate('Home')}>go to Home</Text>\n\t</View>;\n};\n\nexport default Welcome;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n\twelcome: {\n\t\tfontSize: 20,\n\t\ttextAlign: 'center',\n\t\tmargin: 10,\n\t},\n\tinstructions: {\n\t\ttextAlign: 'center',\n\t\tcolor: '#333333',\n\t\tmarginBottom: 5,\n\t},\n\tbuttonWrapper: {\n\t\tbackgroundColor: '#00bcd4',\n\t\tmarginTop: 20,\n\t},\n\tbuttonIcon: {\n\t\tfontSize: 28,\n\t\tcolor: '#ffffff',\n\t},\n\tlink: {\n\t\tmarginTop: 18,\n\t\tcolor: '#00bcd4',\n\t\ttextDecorationLine: 'underline',\n\t\tcursor: 'pointer',\n\t},\n});\n\n'ruui/cli/addons/ssr/src/store/actions.js'\n:export const IncreaseCounter                = '@APP:INCREASE-COUNTER';\n",
        "gt": [
            "'ruui/cli/addons/ssr/src/store/actions.js'",
            "'ruui/cli/addons/ssr/src/store/action/app.js'",
            "'ruui/cli/addons/ssr/src/welcome.js'",
            "'ruui/cli/addons/ssr/src/index.js'",
            "'ruui/cli/addons/ssr/src/server/index.js'"
        ]
    },
    {
        "files": [
            "'place-to-stay/client/src/index.js'",
            "'place-to-stay/client/src/App.js'",
            "'place-to-stay/client/src/components/rooms/Rooms.js'",
            "'place-to-stay/client/src/components/BottomNav.js'",
            "'place-to-stay/client/src/pages/Home.js'"
        ],
        "content": "'place-to-stay/client/src/index.js'\n:import { createRoot } from 'react-dom/client';\nimport App from './App';\nimport ContextProvider from './context/ContextProvider';\n\ncreateRoot(document.getElementById('root')).render(\n  <ContextProvider>\n    <App />\n  </ContextProvider>\n);\n\n'place-to-stay/client/src/App.js'\n:import { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport Dashboard from './pages/dashboard/Dashboard';\nimport Home from './pages/Home';\nimport Loading from './components/Loading';\nimport Notification from './components/Notification';\nimport Room from './components/rooms/Room';\n\nconst App = () => {\n  return (\n    <>\n      <Loading />\n      <Notification />\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"dashboard/*\" element={<Dashboard />} />\n          <Route path=\"*\" element={<Home />} />\n        </Routes>\n      </BrowserRouter>\n      <Room />\n    </>\n  );\n};\n\nexport default App;\n\n'place-to-stay/client/src/components/rooms/Rooms.js'\n:import {\n  Avatar,\n  Card,\n  Container,\n  ImageList,\n  ImageListItem,\n  ImageListItemBar,\n  Rating,\n  Tooltip,\n} from '@mui/material';\nimport { useValue } from '../../context/ContextProvider';\nimport { StarBorder } from '@mui/icons-material';\n\nconst Rooms = () => {\n  const {\n    state: { filteredRooms },\n    dispatch,\n  } = useValue();\n  return (\n    <Container>\n      <ImageList\n        gap={12}\n        sx={{\n          mb: 8,\n          gridTemplateColumns:\n            'repeat(auto-fill, minmax(280px, 1fr))!important',\n        }}\n      >\n        {filteredRooms.map((room) => (\n          <Card key={room._id} sx={{ maxHeight: 350 }}>\n            <ImageListItem sx={{ height: '100% !important' }}>\n              <ImageListItemBar\n                sx={{\n                  background:\n                    'linear-gradient(to bottom, rgba(0,0,0,0.7)0%, rgba(0,0,0,0.3)70%, rgba(0,0,0,0)100%)',\n                }}\n                title={room.price === 0 ? 'Free Stay' : '$' + room.price}\n                actionIcon={\n                  <Tooltip title={room.uName} sx={{ mr: '5px' }}>\n                    <Avatar src={room.uPhoto} />\n                  </Tooltip>\n                }\n                position=\"top\"\n              />\n              <img\n                src={room.images[0]}\n                alt={room.title}\n                loading=\"lazy\"\n                style={{ cursor: 'pointer' }}\n                onClick={() => dispatch({ type: 'UPDATE_ROOM', payload: room })}\n              />\n              <ImageListItemBar\n                title={room.title}\n                actionIcon={\n                  <Rating\n                    sx={{ color: 'rgba(255,255,255, 0.8)', mr: '5px' }}\n                    name=\"room-rating\"\n                    defaultValue={3.5}\n                    precision={0.5}\n                    emptyIcon={\n                      <StarBorder sx={{ color: 'rgba(255,255,255, 0.8)' }} />\n                    }\n                  />\n                }\n              />\n            </ImageListItem>\n          </Card>\n        ))}\n      </ImageList>\n    </Container>\n  );\n};\n\nexport default Rooms;\n\n'place-to-stay/client/src/components/BottomNav.js'\n:import {\n  BottomNavigation,\n  BottomNavigationAction,\n  Box,\n  Paper,\n} from '@mui/material';\nimport { AddLocationAlt, Bed, LocationOn } from '@mui/icons-material';\nimport { useEffect, useRef, useState } from 'react';\nimport ClusterMap from './map/ClusterMap';\nimport Rooms from './rooms/Rooms';\nimport AddRoom from './addRoom/AddRoom';\nimport Protected from './protected/Protected';\nimport { useValue } from '../context/ContextProvider';\n\nconst BottomNav = () => {\n  const {\n    state: { section },\n    dispatch,\n  } = useValue();\n  const ref = useRef();\n  useEffect(() => {\n    ref.current.ownerDocument.body.scrollTop = 0;\n  }, [section]);\n  return (\n    <Box ref={ref}>\n      {\n        {\n          0: <ClusterMap />,\n          1: <Rooms />,\n          2: (\n            <Protected>\n              <AddRoom />\n            </Protected>\n          ),\n        }[section]\n      }\n      <Paper\n        elevation={3}\n        sx={{ position: 'fixed', bottom: 0, left: 0, right: 0, zIndex: 2 }}\n      >\n        <BottomNavigation\n          showLabels\n          value={section}\n          onChange={(e, newValue) =>\n            dispatch({ type: 'UPDATE_SECTION', payload: newValue })\n          }\n        >\n          <BottomNavigationAction label=\"Map\" icon={<LocationOn />} />\n          <BottomNavigationAction label=\"Rooms\" icon={<Bed />} />\n          <BottomNavigationAction label=\"Add\" icon={<AddLocationAlt />} />\n        </BottomNavigation>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default BottomNav;\n\n'place-to-stay/client/src/pages/Home.js'\n:import BottomNav from '../components/BottomNav';\nimport NavBar from '../components/NavBar';\nimport Login from '../components/user/Login';\n\nconst Home = () => {\n  return (\n    <>\n      <Login />\n      <NavBar />\n      <BottomNav />\n    </>\n  );\n};\n\nexport default Home;\n",
        "gt": [
            "'place-to-stay/client/src/components/rooms/Rooms.js'",
            "'place-to-stay/client/src/components/BottomNav.js'",
            "'place-to-stay/client/src/pages/Home.js'",
            "'place-to-stay/client/src/App.js'",
            "'place-to-stay/client/src/index.js'"
        ]
    },
    {
        "files": [
            "'cls-rtracer/samples/express.pino.js'",
            "'cls-rtracer/src/rtracer.js'",
            "'cls-rtracer/index.js'",
            "'cls-rtracer/src/util.js'"
        ],
        "content": "'cls-rtracer/samples/express.pino.js'\n:'use strict'\n\nconst rTracer = require('../index')\n\n\n\nconst logger = require('pino')({\n  mixin () {\n    return { requestId: rTracer.id() }\n  }\n})\n\n\n\nconst express = require('express')\n\nconst app = express()\napp.use(rTracer.expressMiddleware())\n\napp.get('/', function (req, res) {\n  logger.info('Starting request handling')\n  fakeDbAccess()\n    .then((result) => res.json(result))\n})\n\nasync function fakeDbAccess () {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      logger.info('Logs from fakeDbAccess')\n      resolve({ message: 'Hello from cls-rtracer Express example' })\n    }, 0)\n  })\n}\n\napp.listen(3000, (err) => {\n  if (err) {\n    logger.error('The app could not start')\n  }\n  logger.info('The app is listening on 3000')\n})\n\n'cls-rtracer/src/rtracer.js'\n:'use strict'\n\nconst { wrapEmitter } = require('./util')\nconst { v1: uuidv1 } = require('uuid')\nconst { AsyncLocalStorage, AsyncResource } = require('async_hooks')\n\nconst pluginName = 'cls-rtracer'\n\nconst als = new AsyncLocalStorage()\n\nconst wrapHttpEmitters = (req, res) => {\n  const asyncResource = new AsyncResource('cls-rtracer')\n  wrapEmitter(req, asyncResource)\n  wrapEmitter(res, asyncResource)\n}\n\nconst expressSetResHeaderFn = (res, headerName, requestId) => {\n  res.set(headerName, requestId)\n}\nconst fastifySetResHeaderFn = (res, headerName, requestId) => {\n  res.setHeader(headerName, requestId)\n}\n\n\nconst expressMiddleware = (setResHeaderFn) => {\n\n  return ({\n    useHeader = false,\n    headerName = 'X-Request-Id',\n    requestIdFactory = uuidv1,\n    echoHeader = false\n  } = {}) => {\n    return (req, res, next) => {\n      let requestId\n      if (useHeader) {\n        requestId = req.headers[headerName.toLowerCase()]\n      }\n      requestId = requestId || requestIdFactory(req)\n\n      if (echoHeader) {\n        setResHeaderFn(res, headerName, requestId)\n      }\n\n      als.run(requestId, () => {\n        wrapHttpEmitters(req, res)\n        next()\n      })\n    }\n  }\n}\n\n\nconst fastifyPlugin = (fastify, options, next) => {\n  const {\n    useHeader = false,\n    headerName = 'X-Request-Id',\n    useFastifyRequestId = false,\n    requestIdFactory = uuidv1,\n    echoHeader = false\n  } = options\n\n  fastify.addHook('onRequest', (request, reply, done) => {\n    let requestId\n    if (useHeader) {\n      requestId = request.headers[headerName.toLowerCase()]\n    }\n    if (useFastifyRequestId) {\n      requestId = requestId || request.id\n    }\n    requestId = requestId || requestIdFactory(request)\n\n    if (echoHeader) {\n      reply.header(headerName, requestId)\n    }\n\n    als.run(requestId, () => {\n      wrapHttpEmitters(request.raw, reply.raw || reply.res)\n      done()\n    })\n  })\n  next()\n}\n\nfastifyPlugin[Symbol.for('skip-override')] = true\nfastifyPlugin[Symbol.for('fastify.display-name')] = pluginName\n\n\nconst koaMiddleware = ({\n  useHeader = false,\n  headerName = 'X-Request-Id',\n  requestIdFactory = uuidv1,\n  echoHeader = false\n} = {}) => {\n  return (ctx, next) => {\n    let requestId\n    if (useHeader) {\n      requestId = ctx.request.headers[headerName.toLowerCase()]\n    }\n    requestId = requestId || requestIdFactory(ctx.request)\n\n    if (echoHeader) {\n      ctx.set(headerName, requestId)\n    }\n\n    return als.run(requestId, () => {\n      wrapHttpEmitters(ctx.req, ctx.res)\n      return next()\n    })\n  }\n}\n\n\nconst koaV1Middleware = ({\n  useHeader = false,\n  headerName = 'X-Request-Id',\n  requestIdFactory = uuidv1,\n  echoHeader = false\n} = {}) => {\n  return function * (next) {\n    let requestId\n    if (useHeader) {\n      requestId = this.request.headers[headerName.toLowerCase()]\n    }\n    requestId = requestId || requestIdFactory(this.request)\n\n    if (echoHeader) {\n      this.response.set(headerName, requestId)\n    }\n\n    als.enterWith(requestId)\n    try {\n      wrapHttpEmitters(this.req, this.res)\n      yield next\n    } finally {\n      als.enterWith(undefined)\n    }\n  }\n}\n\n\nconst hapiPlugin = ({\n  name: pluginName,\n  once: true,\n  register: async (server, options) => {\n    const {\n      useHeader = false,\n      headerName = 'X-Request-Id',\n      requestIdFactory = uuidv1,\n      echoHeader = false\n    } = options\n\n    server.ext('onRequest', (request, h) => {\n      let requestId\n      if (useHeader) {\n        requestId = request.headers[headerName.toLowerCase()]\n      }\n      requestId = requestId || requestIdFactory(request)\n\n      als.enterWith(requestId)\n      wrapHttpEmitters(request.raw.req, request.raw.res)\n\n      return h.continue\n    })\n\n    if (echoHeader) {\n      server.ext('onPreResponse', async (request, h) => {\n        if (request.response.output) {\n          request.response.output.headers[headerName] = id()\n        } else {\n          request.response.header(headerName, id())\n        }\n        return h.continue\n      })\n    }\n\n    server.events.on('response', () => {\n      als.enterWith(undefined)\n    })\n  }\n})\n\n\nconst runWithId = (fn, id) => {\n  id = id || uuidv1()\n  return als.run(id, fn)\n}\n\n\nconst id = () => als.getStore()\n\nmodule.exports = {\n  expressMiddleware: expressMiddleware(expressSetResHeaderFn),\n  fastifyPlugin,\n  fastifyMiddleware: expressMiddleware(fastifySetResHeaderFn),\n  koaMiddleware,\n  koaV1Middleware,\n  hapiPlugin,\n  runWithId,\n  id\n}\n\n'cls-rtracer/index.js'\n:'use strict'\n\nconst {\n  expressMiddleware,\n  fastifyPlugin,\n  fastifyMiddleware,\n  koaMiddleware,\n  koaV1Middleware,\n  hapiPlugin,\n  runWithId,\n  id\n} = require('./src/rtracer')\n\nmodule.exports = {\n  expressMiddleware,\n  fastifyPlugin,\n  fastifyMiddleware,\n  koaMiddleware,\n  koaV1Middleware,\n  hapiPlugin,\n  runWithId,\n  id\n}\n\n'cls-rtracer/src/util.js'\n:'use strict'\n\nconst isWrappedSymbol = Symbol('cls-rtracer-is-wrapped')\nconst wrappedSymbol = Symbol('cls-rtracer-wrapped-function')\n\nfunction wrapEmitterMethod (emitter, method, wrapper) {\n  if (emitter[method][isWrappedSymbol]) {\n    return\n  }\n\n  const original = emitter[method]\n  const wrapped = wrapper(original)\n  wrapped[isWrappedSymbol] = true\n  emitter[method] = wrapped\n\n  return wrapped\n}\n\nconst addMethods = [\n  'on',\n  'addListener',\n  'prependListener'\n]\n\nconst removeMethods = [\n  'off',\n  'removeListener'\n]\n\n\nfunction wrapEmitter (emitter, asyncResource) {\n  for (const method of addMethods) {\n    wrapEmitterMethod(emitter, method, (original) => function (event, handler) {\n      let wrapped = emitter[wrappedSymbol]\n      if (wrapped === undefined) {\n        wrapped = {}\n        emitter[wrappedSymbol] = wrapped\n      }\n      const wrappedHandler = asyncResource.runInAsyncScope.bind(asyncResource, handler, emitter)\n      const existing = wrapped[event]\n      if (existing === undefined) {\n        wrapped[event] = wrappedHandler\n      } else if (typeof existing === 'function') {\n        wrapped[event] = [existing, wrappedHandler]\n      } else {\n        wrapped[event].push(wrappedHandler)\n      }\n      return original.call(this, event, wrappedHandler)\n    })\n  }\n\n  for (const method of removeMethods) {\n    wrapEmitterMethod(emitter, method, (original) => function (event, handler) {\n      let wrappedHandler\n      const wrapped = emitter[wrappedSymbol]\n      if (wrapped !== undefined) {\n        const existing = wrapped[event]\n        if (existing !== undefined) {\n          if (typeof existing === 'function') {\n            wrappedHandler = existing\n            delete wrapped[event]\n          } else {\n            wrappedHandler = existing.pop()\n          }\n        }\n      }\n      return original.call(this, event, wrappedHandler || handler)\n    })\n  }\n}\n\nmodule.exports = {\n  wrapEmitter\n}\n",
        "gt": [
            "'cls-rtracer/src/util.js'",
            "'cls-rtracer/src/rtracer.js'",
            "'cls-rtracer/index.js'",
            "'cls-rtracer/samples/express.pino.js'"
        ]
    },
    {
        "files": [
            "'kong-dashboard/lib/request.js'",
            "'kong-dashboard/tests/cases/upstreams/list-upstreams.spec.js'",
            "'kong-dashboard/tests/util/KongClient.js'"
        ],
        "content": "'kong-dashboard/lib/request.js'\n:var request = require('request');\n\nvar Request = {\n\n  send: function(opts) {\n    return new Promise((resolve, reject) => {\n      request(opts, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(response);\n        }\n      })\n    })\n  },\n\n  get: function(url, opts) {\n    opts = opts || {};\n    opts.method = 'GET';\n    opts.url = url;\n    return this.send(opts);\n  },\n\n  delete: function(url, opts) {\n    opts = opts || {};\n    opts.method = 'DELETE';\n    opts.url = url;\n    return this.send(opts);\n  },\n\n  put: function(url, data, opts) {\n    opts = opts || {};\n    opts.method = 'PUT';\n    opts.url = url;\n    opts.json = true;\n    opts.body = data;\n    return this.send(opts);\n  },\n\n  post: function(url, data, opts) {\n    opts = opts || {};\n    opts.method = 'POST';\n    opts.url = url;\n    opts.json = true;\n    opts.body = data;\n    return this.send(opts);\n  }\n\n};\n\nmodule.exports = Request;\n\n\n'kong-dashboard/tests/cases/upstreams/list-upstreams.spec.js'\n:var HomePage = require('../../util/HomePage');\nvar Sidebar = require('../../util/Sidebar');\nvar ListUpstreamsPage = require('../../util/ListUpstreamsPage');\nvar KongDashboard = require('../../util/KongDashboard');\nvar Kong = require('../../util/KongClient');\nvar semver = require('semver');\n\nvar kd = new KongDashboard();\n\ndescribe('Upstreams listing page testing', () => {\n\n  if (semver.satisfies(process.env.KONG_VERSION, '0.9.x')) {\n\n    return\n  }\n\n  beforeAll((done) => {\n    kd.start({'--kong-url': 'http:\n  });\n\n  afterAll((done) => {\n    kd.stop(done);\n  });\n\n  beforeEach((done) => {\n    Kong.deleteAllUpstreams().then(done);\n  });\n\n\n  it('should be possible to delete an upstream', (done) => {\n    var upstream;\n    Kong.createUpstream('foo.bar').then((u) => {\n      upstream = u;\n      HomePage.visit();\n      Sidebar.clickOn('Upstreams');\n      ListUpstreamsPage.clickDelete(0);\n      return element(by.css('.modal h5')).getText();\n    }).then((message) => {\n      expect(message).toEqual('Do you really want to delete the Upstream \"foo.bar\"?');\n      return ListUpstreamsPage.confirmDeletion();\n    }).then(() => {\n      expect(element(by.css('.modal')).isDisplayed()).toBeFalsy();\n      return Kong.getUpstreamById(upstream.id);\n    }).then((response) => {\n      expect(response.message).toEqual('Not found');\n      expect(ListUpstreamsPage.getRows().count()).toEqual(0);\n      done();\n    });\n  });\n});\n\n'kong-dashboard/tests/util/KongClient.js'\n:var request = require('../../lib/request');\nvar semver = require('semver');\n\nvar Kong = {\n\n\n  deleteAllServices: function() {\n    if (semver.lt(process.env.KONG_VERSION, '0.13.0')) {\n      return Promise.resolve(0);\n    }\n\n    return this.deleteAllRoutes().then(() => {\n      return this.deleteAllObjectsOfType('services');\n    });\n  },\n\n\n  deleteAllRoutes: function() {\n    if (semver.lt(process.env.KONG_VERSION, '0.13.0')) {\n      return Promise.resolve(0);\n    }\n    return this.deleteAllObjectsOfType('routes');\n  },\n\n\n  deleteAllAPIs: function() {\n    if (semver.gte(process.env.KONG_VERSION, '0.15.0')) {\n      return Promise.resolve(0);\n    }\n    return this.deleteAllObjectsOfType('apis');\n  },\n\n\n  deleteAllPlugins: function() {\n    return this.deleteAllObjectsOfType('plugins');\n  },\n\n\n  deleteAllConsumers: function() {\n    return this.deleteAllObjectsOfType('consumers');\n  },\n\n\n  deleteAllCertificates: function() {\n    return this.deleteAllObjectsOfType('certificates');\n  },\n\n\n  deleteAllUpstreams: function() {\n    return this.deleteAllObjectsOfType('upstreams');\n  },\n\n\n  deleteAllObjectsOfType: function(objectType) {\n    return request.get('http:\n      var body = JSON.parse(response.body);\n      var promise = new Promise((resolve, reject) => {\n        resolve();\n      });\n      body.data.forEach((object) => {\n        promise = promise.then(() => {\n          return request.delete('http:\n        });\n      });\n\n      if (body.total > body.data.length) {\n        promise = promise.then(() => {\n          return this.deleteAllObjectsOfType(objectType);\n        });\n      }\n\n      return promise;\n    });\n  },\n\n\n  getFirstService: () => {\n    return request.get('http:\n      var services = JSON.parse(response.body).data;\n      return services.length > 0 ? services[0] : null;\n    });\n  },\n\n\n  getFirstAPI: () => {\n    return request.get('http:\n      var apis = JSON.parse(response.body).data;\n      return apis.length > 0 ? apis[0] : null;\n    });\n  },\n\n\n  getFirstCertificate: () => {\n    return request.get('http:\n      var certificates = JSON.parse(response.body).data;\n      return certificates.length > 0 ? certificates[0] : null;\n    });\n  },\n\n\n  getFirstPlugin: () => {\n    return request.get('http:\n      var plugins = JSON.parse(response.body).data;\n      return plugins.length > 0 ? plugins[0] : null;\n    });\n  },\n\n\n  getPluginById: (id) => {\n    return request.get('http:\n      return JSON.parse(response.body);\n    });\n  },\n\n\n  getServiceById: (id) => {\n    return request.get('http:\n      return JSON.parse(response.body);\n    });\n  },\n\n\n  getUpstreamById: (id) => {\n    return request.get('http:\n      return JSON.parse(response.body);\n    });\n  },\n\n\n  createPlugin: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createConsumer: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createService: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createRoute: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createAPI: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createBasicAuthCreds: (consumer, username, password) => {\n     return request.post('http:\n       username: username,\n       password: password\n     }).then((response) => {\n      return response.body;\n    });\n  },\n\n\n  createKeyAuthCreds: (consumer, key) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createUpstream: (name) => {\n    return request.post('http:\n      return response.body;\n    });\n  }\n};\n\nmodule.exports = Kong;\n",
        "gt": [
            "'kong-dashboard/lib/request.js'",
            "'kong-dashboard/tests/util/KongClient.js'",
            "'kong-dashboard/tests/cases/upstreams/list-upstreams.spec.js'"
        ]
    },
    {
        "files": [
            "'Next-GraphQL-Blog/client/context.js'",
            "'Next-GraphQL-Blog/client/pages/profile.js'",
            "'Next-GraphQL-Blog/client/lib/withUser.js'"
        ],
        "content": "'Next-GraphQL-Blog/client/context.js'\n:import React, { Component } from 'react'\n\nexport const Context = React.createContext()\n\nclass ContextProvider extends Component {\n  state = {\n    user: {\n      _id: '',\n      email: '',\n      name: '',\n      googleId: ''\n    }\n  }\n\n  componentDidMount() {\n    const user = JSON.parse(localStorage.getItem('user'))\n    this.setState(prevState => ({\n      user: { ...prevState.user, ...user }\n    }))\n  }\n\n  setUser = user => {\n    this.setState(prevState => ({\n      user: { ...prevState.user, ...user }\n    }))\n  }\n\n  clearUser = () => {\n    this.setState({\n      user: {\n        _id: '',\n        email: '',\n        name: '',\n        googleId: ''\n      }\n    })\n  }\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          state: this.state,\n          actions: { setUser: this.setUser, clearUser: this.clearUser }\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    )\n  }\n}\n\nexport default ContextProvider\n\n'Next-GraphQL-Blog/client/pages/profile.js'\n:import React, { Component } from 'react'\nimport { Query, Mutation } from 'react-apollo'\nimport styled from 'styled-components'\n\nimport { Form, Header, Input, Button, Loader, Message } from 'semantic-ui-react'\n\nimport privatePage from '../lib/privatePage'\nimport withUser from '../lib/withUser'\nimport { showSuccessAlert } from '../lib/alerts'\n\nimport { UPDATE_USER } from '../api/mutations/user/updateUser'\nimport { GET_CURRENT_USER } from '../api/queries/user/getCurrentUser'\n\nclass Profile extends Component {\n  state = {\n    name: '',\n    email: '',\n    password: '',\n    newPassword: ''\n  }\n\n  handleSubmit = async (e, updateUser) => {\n    e.preventDefault()\n    try {\n      const { data } = await updateUser()\n\n      localStorage.setItem(\n        'user',\n        JSON.stringify({\n          _id: data.updateUser._id,\n          email: data.updateUser.email,\n          name: data.updateUser.name,\n          googleId: data.updateUser.googleId\n        })\n      )\n\n      this.props.setUser({\n        _id: data.updateUser._id,\n        email: data.updateUser.email,\n        name: data.updateUser.name,\n        googleId: data.updateUser.googleId\n      })\n\n      this.setState({\n        name: data.updateUser.name,\n        email: data.updateUser.email,\n        password: '',\n        newPassword: ''\n      })\n      showSuccessAlert('Your new profile settings were saved!')\n    } catch (error) {\n      console.log(error)\n      this.setState({\n        password: '',\n        newPassword: ''\n      })\n    }\n  }\n\n  handleChange = event => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  render() {\n    const { name, email, password, newPassword } = this.state\n\n    return (\n      <Mutation\n        mutation={UPDATE_USER}\n        variables={{ name, email, password, newPassword }}\n      >\n        {(updateUser, { loading, error }) => (\n          <Query query={GET_CURRENT_USER}>\n            {({ data: { currentUser } }) => (\n              <Container>\n                <Form\n                  error={!!error}\n                  onSubmit={e => this.handleSubmit(e, updateUser)}\n                >\n                  <Header size=\"large\">Profile</Header>\n                  <Form.Field>\n                    <label>Name</label>\n                    <Input\n                      name=\"name\"\n                      onChange={this.handleChange}\n                      placeholder=\"What is your name?\"\n                      autoComplete=\"name\"\n                      value={currentUser ? name || currentUser.name : name}\n                    />\n                  </Form.Field>\n                  <Form.Field>\n                    <label>Email</label>\n                    <Input\n                      name=\"email\"\n                      onChange={this.handleChange}\n                      placeholder=\"What is your email?\"\n                      autoComplete=\"email\"\n                      value={currentUser ? email || currentUser.email : email}\n                    />\n                  </Form.Field>\n                  {currentUser ? (\n                    currentUser.googleId ? (\n                      <Header size=\"small\">\n                        You are logged in with a Google Account\n                      </Header>\n                    ) : (\n                      <>\n                        <Header size=\"medium\">Change password</Header>\n\n                        <Form.Field>\n                          <label>Current password</label>\n                          <Input\n                            type=\"password\"\n                            name=\"password\"\n                            onChange={this.handleChange}\n                            placeholder=\"Write your current password here...\"\n                            autoComplete=\"password\"\n                            value={password}\n                          />\n                        </Form.Field>\n                        <Form.Field>\n                          <label>New password</label>\n                          <Input\n                            type=\"password\"\n                            name=\"newPassword\"\n                            onChange={this.handleChange}\n                            placeholder=\"Write your new password here...\"\n                            autoComplete=\"password\"\n                            value={newPassword}\n                          />\n                        </Form.Field>\n                      </>\n                    )\n                  ) : null}\n\n                  {error && (\n                    <Message error header=\"Ooops!\" content={error.message} />\n                  )}\n                  {loading ? (\n                    <Loader active inline />\n                  ) : (\n                    <Button type=\"submit\">Save</Button>\n                  )}\n                </Form>\n              </Container>\n            )}\n          </Query>\n        )}\n      </Mutation>\n    )\n  }\n}\n\nconst Container = styled.div`\n  padding: 5% 10%;\n`\n\nexport default privatePage(withUser(Profile))\n\n'Next-GraphQL-Blog/client/lib/withUser.js'\n:import React from 'react'\n\nimport { Context } from '../context'\n\nexport default Page =>\n  class BaseComponent extends React.Component {\n    static async getInitialProps(ctx) {\n      const props = {}\n\n      if (Page.getInitialProps) {\n        Object.assign(props, (await Page.getInitialProps(ctx)) || {})\n      }\n      return props\n    }\n\n    render() {\n      return (\n        <Context.Consumer>\n          {context => {\n            return (\n              <Page\n                {...this.props}\n                user={context ? context.state.user : ''}\n                setUser={context ? context.actions.setUser : ''}\n                clearUser={context ? context.actions.clearUser : ''}\n              />\n            )\n          }}\n        </Context.Consumer>\n      )\n    }\n  }\n",
        "gt": [
            "'Next-GraphQL-Blog/client/context.js'",
            "'Next-GraphQL-Blog/client/lib/withUser.js'",
            "'Next-GraphQL-Blog/client/pages/profile.js'"
        ]
    },
    {
        "files": [
            "'ruui/examples/basic/store/actions.js'",
            "'ruui/examples/basic/index.js'",
            "'ruui/examples/basic/store/action/app.js'",
            "'ruui/examples/basic/router.js'",
            "'ruui/examples/basic/scenes/welcome.js'"
        ],
        "content": "'ruui/examples/basic/store/actions.js'\n:export const IncreaseCounter                = 'APP:INCREASE-COUNTER';\n'ruui/examples/basic/index.js'\n:import React, { Component } from 'react';\nimport { StatusBar, View, Text, StyleSheet } from 'react-native';\nimport { connect, Provider } from 'react-redux';\nimport Drawer from 'react-native-drawer';\n\nimport { Snackbar, Modal, utils } from '../../src';\nimport Router from './router';\nimport Menu from './share/Menu';\nimport * as appActions from './store/action/app';\n\nconst { isIos, isAndroid } = utils;\n\ntype ContainerProps = {\n\tstore?: any,\n};\n\nexport default function AppContainer(props: ContainerProps) {\n\tconst { store } = props;\n\treturn <Provider store={store}>\n\t\t<App/>\n\t</Provider>;\n}\n\ntype Props = {\n\tdispatch?: Function,\n\trouter?: any,\n};\n\n@connect(({ router, app }) => {\n\treturn {\n\t\trouter,\n\t\tcounter: app.counter,\n\t};\n})\n\nexport class App extends Component {\n\tprops: Props;\n\n\tasync componentWillMount() {\n\t\tif (isIos) {\n\t\t\tStatusBar.setBarStyle('light-content', true);\n\t\t} else if (isAndroid) {\n\t\t\tStatusBar.setBackgroundColor('transparent');\n\t\t\tStatusBar.setTranslucent(true);\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.interval);\n\t}\n\n\trender() {\n\t\treturn <Drawer\n\t\t\ttype=\"overlay\"\n\t\t\tside=\"right\"\n\t\t\tnegotiatePan tapToClose\n\t\t\tpanOpenMask={0.2}\n\t\t\topenDrawerOffset={0.2}\n\t\t\tcontent={<Menu/>}\n\t\t\ttweenHandler={drawerTween}>\n\n\t\t\t<Router/>\n\t\t\t<Modal/>\n\t\t\t<Snackbar/>\n\t\t</Drawer>;\n\t}\n}\n\nfunction drawerTween(ratio, side = 'left') {\n\tconst androidStyle = isAndroid ? {\n\t\televation: ratio * 50,\n\t} : {};\n\n\treturn {\n\t\tmain: { opacity: (2 - ratio) / 1.2 },\n\t\tdrawer: {\n\t\t\tshadowColor: '#000000',\n\t\t\tshadowOpacity: 0.1 + (ratio * 0.3),\n\t\t\tshadowRadius: ratio * 60,\n\t\t\t...androidStyle,\n\t\t}\n\t};\n}\n\nconst styles = StyleSheet.create({\n\tdrawer: {\n\t\tbackgroundColor: '#000',\n\t},\n\tnavigator: {\n\n\t}\n});\n'ruui/examples/basic/store/action/app.js'\n:import * as Actions from '../actions';\n\nexport function increaseCounter(volume = 1) {\n\treturn { type: Actions.IncreaseCounter, volume };\n}\n'ruui/examples/basic/router.js'\n:import React from 'react';\nimport { StackNavigator } from 'react-navigation';\n\nimport Welcome from './scenes/welcome';\nimport Login from './scenes/login';\nimport { colors } from './utils';\n\nconst backIcon = require('./images/white-back.png');\n\nexport default StackNavigator({\n\tIndex: {\n\t\tscreen: Login,\n\t\tnavigationOptions: {\n\t\t\ttitle: 'Home'\n\t\t},\n\t},\n\tWelcome: {\n\t\tscreen: Login,\n\t},\n}, {\n\tnavigationOptions: {\n\t\tgesturesEnabled: true,\n\t\theaderBackButtonAsset: backIcon,\n\t\theaderTintColor: '#ffffff',\n\t\theaderStyle: {\n\t\t\tbackgroundColor: colors.main,\n\t\t},\n\t},\n\tcardStyle: {\n\t\tshadowColor: 'transparent',\n\t},\n});\n'ruui/examples/basic/scenes/welcome.js'\n:import React, { Component } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { connect } from 'react-redux';\nimport Icon from 'universal-vector-icons/Ionicons';\nimport { Button, Input } from '../../../src';\nimport * as appActions from '../store/action/app';\n\ntype Props = {\n\tnavigation?: Object,\n};\n\n@connect(({ app }) => {\n\treturn {\n\t\tcounter: app.counter,\n\t};\n})\n\nexport default class app extends Component {\n\tprops: Props;\n\n\tstatic navigationOptions = ({ navigation }) => ({\n\t\ttitle: 'Page title',\n\t});\n\n\trender() {\n\t\treturn <View style={styles.container}>\n\t\t\t<Text style={styles.welcome}>\n\t\t\t\tWelcome to React Native!!\n\t\t\t</Text>\n\t\t\t<Text style={styles.instructions}>\n\t\t\t\tTo get started, edit src/app.js\n\t\t\t</Text>\n\t\t\t<Text style={styles.instructions}>\n\t\t\t\tPress Cmd+R to reload,{'\\n'}\n\t\t\t\tCmd+D or shake for dev menu\n\t\t\t</Text>\n\t\t\t<Button\n\t\t\t\twrapperStyle={{ backgroundColor: '#00bcd4', width: 120 }}\n\t\t\t\ttooltip=\"Yay!\"\n\t\t\t\ttitle=\"Click me!\"\n\t\t\t\ticon={<Icon name=\"ios-beer-outline\" size={28}/>}\n\t\t\t\tonPress={() => {\n\t\t\t\t\tthis.props.navigation.navigate('Welcome');\n\t\t\t\t}}/>\n\t\t</View>;\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n\twelcome: {\n\t\tfontSize: 20,\n\t\ttextAlign: 'center',\n\t\tmargin: 10,\n\t},\n\tinstructions: {\n\t\ttextAlign: 'center',\n\t\tcolor: '#333333',\n\t\tmarginBottom: 5,\n\t},\n});",
        "gt": [
            "'ruui/examples/basic/store/actions.js'",
            "'ruui/examples/basic/store/action/app.js'",
            "'ruui/examples/basic/scenes/welcome.js'",
            "'ruui/examples/basic/router.js'",
            "'ruui/examples/basic/index.js'"
        ]
    },
    {
        "files": [
            "'pkglink/src/scan.js'",
            "'pkglink/src/find-packages.js'",
            "'pkglink/src/util/format.js'"
        ],
        "content": "'pkglink/src/scan.js'\n:import chalk from 'chalk';\nimport { createLogUpdate } from './util/log';\nimport { genModuleLinks, handleModuleLinking, determineLinks } from './link';\nimport { determinePackLinkSrcDst } from './pack-ref';\nimport findPackages from './find-packages';\n\nexport default function scanAndLink(config, rtenv, rootDirs) {\n  const logUpdate = createLogUpdate(config, rtenv);\n\n  const outputSrcDstForDryrun = config.dryrun\n    ? (lnkSrcDst) => {\n        const { devNameVer: dnv, src, dst } = lnkSrcDst;\n        rtenv.log.clear();\n        rtenv.out(chalk.bold(dnv.split(':')[0]));\n        rtenv.out(`  ${src}`);\n        rtenv.out(`  ${dst}`);\n        rtenv.out('');\n      }\n    : () => {};\n\n  return findPackages(config, rtenv, rootDirs, logUpdate)\n    .takeWhile(() => !rtenv.cancelled)\n    .mergeMap((eiDN) => determinePackLinkSrcDst(config, rtenv, eiDN), config.concurrentOps)\n    .takeWhile(() => !rtenv.cancelled)\n    .do((lnkSrcDst) => outputSrcDstForDryrun(lnkSrcDst))\n    .do((lnkSrcDst) => {\n      rtenv.currentPackageDir = lnkSrcDst.dst;\n      logUpdate();\n    })\n    .mergeMap((lnkSrcDst) => {\n      if (config.dryrun) {\n        return determineLinks(config, rtenv, lnkSrcDst, false);\n      } else if (config.genLnCmds) {\n        return genModuleLinks(config, rtenv, lnkSrcDst);\n      }\n      return handleModuleLinking(config, rtenv, lnkSrcDst);\n    }, config.concurrentOps)\n\n    .scan((acc, [src, dst, size]) => {\n      acc += size;\n      return acc;\n    }, 0)\n    .do((savedBytes) => {\n      rtenv.savedByteCount = savedBytes;\n    })\n    .do((savedBytes) => logUpdate());\n}\n\n'pkglink/src/find-packages.js'\n:import fs from 'fs-extra-promise';\nimport Path from 'path';\nimport R from 'ramda';\nimport readdirp from 'readdirp';\nimport { Observable } from 'rxjs';\nimport { formatDevNameVersion } from './util/format';\n\n\nconst ENDS_NODE_MOD_RE = /[\\\\/]node_modules$/;\n\n\nfunction filterDirsNodeModPacks(ei) {\n  const eiName = ei.name;\n  if (eiName.charAt(0) === '.') {\n    return false;\n  }\n  if (eiName === 'node_modules') {\n    return true;\n  }\n  const eiFullParentDir = ei.fullParentDir;\n  if (eiFullParentDir.indexOf('node_modules') !== -1) {\n\n\n    return Path.basename(eiFullParentDir) === 'node_modules';\n  }\n  return true;\n}\n\nexport default function findPackages(config, rtenv, rootDirs, logUpdate) {\n\n  return (\n    Observable.from(rootDirs)\n\n      .mergeMap((startDir) => {\n        const readdirpOptions = {\n          root: startDir,\n          entryType: 'files',\n          lstat: true,\n          fileFilter: ['package.json'],\n          directoryFilter: filterDirsNodeModPacks\n        };\n        if (config.treeDepth) {\n          readdirpOptions.depth = config.treeDepth;\n        }\n        const fstream = readdirp(readdirpOptions);\n        rtenv.cancelled$.subscribe(() => fstream.destroy());\n        return Observable.fromEvent(fstream, 'data')\n          .takeWhile(() => !rtenv.cancelled)\n          .takeUntil(Observable.fromEvent(fstream, 'close'))\n          .takeUntil(Observable.fromEvent(fstream, 'end'));\n      }, config.concurrentOps)\n\n      .filter((ei) => ENDS_NODE_MOD_RE.test(Path.dirname(ei.fullParentDir)))\n\n      .mergeMap(\n        (ei) =>\n          Observable.from(fs.readJsonAsync(ei.fullPath, { throws: false })),\n        (ei, pack) => ({\n\n          entryInfo: truncEI(ei),\n          devNameVer:\n            pack && pack.name && pack.version\n              ? formatDevNameVersion(ei.stat.dev, pack.name, pack.version)\n              : null\n        }),\n        config.concurrentOps\n      )\n      .filter((obj) => obj.devNameVer)\n      .do((obj) => {\n        rtenv.packageCount += 1;\n        rtenv.currentPackageDir = obj.entryInfo.fullParentDir;\n      })\n      .do((obj) => {\n        logUpdate();\n      })\n  );\n}\n\n\nfunction truncEI(ei) {\n  return R.pick(['fullParentDir', 'stat'], ei);\n}\n\n'pkglink/src/util/format.js'\n:import numeral from 'numeral';\nimport truncate from 'cli-truncate';\n\nexport function formatBytes(bytes) {\n  return numeral(bytes).format('0.[00]b');\n}\n\nexport function formatDevNameVersion(dev, name, version) {\n\n  return `${name}-${version}:${dev}`;\n}\n\nexport function sortObjKeys(obj) {\n  return Object.keys(obj)\n    .sort()\n    .reduce((acc, k) => {\n      acc[k] = obj[k];\n      return acc;\n    }, {});\n}\n\nexport function trunc(size, str) {\n  return truncate(str, size, { position: 'middle' });\n}\n",
        "gt": [
            "'pkglink/src/util/format.js'",
            "'pkglink/src/find-packages.js'",
            "'pkglink/src/scan.js'"
        ]
    },
    {
        "files": [
            "'ruui/cli/addons/redux/src/store/action/app.js'",
            "'ruui/cli/addons/redux/src/index.js'",
            "'ruui/cli/addons/redux/src/welcome.js'"
        ],
        "content": "'ruui/cli/addons/redux/src/store/action/app.js'\n:import * as Actions from '../actions';\n\nexport function increaseCounter(volume = 1) {\n\treturn { type: Actions.IncreaseCounter, volume };\n}\n\n'ruui/cli/addons/redux/src/index.js'\n:import React from 'react';\nimport { View, StyleSheet, } from 'react-native';\nimport { RuuiProvider, Tooltip } from 'react-universal-ui';\nimport { Provider, } from 'react-redux';\n\nimport { ruuiStore, appStore } from 'store';\nimport Welcome from './welcome';\n\ntype Props = {\n\n};\n\nconst App = (props: Props) => {\n\treturn <View style={styles.container}>\n\t\t<Welcome/>\n\t</View>;\n};\n\nconst AppContainer = (props) => {\n\treturn <RuuiProvider store={ruuiStore}>\n\t\t<Provider store={appStore}>\n\t\t\t<App/>\n\t\t\t<Tooltip/>\n\t\t</Provider>\n\t</RuuiProvider>;\n}\n\nexport default AppContainer;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n});\n\n'ruui/cli/addons/redux/src/welcome.js'\n:import React, { useState, } from 'react';\nimport { View, Text, StyleSheet, Platform } from 'react-native';\nimport { Button, } from 'react-universal-ui';\nimport { useSelector, useDispatch, } from 'react-redux';\n\nimport * as appActions from 'store/action/app';\n\nconst instructions = Platform.select({\n\tios: 'Press Cmd+R to reload,\\n'\n\t\t+ 'Cmd+D or shake for dev menu',\n\tandroid: 'Double tap R on your keyboard to reload,\\n'\n\t\t+ 'Shake or press menu button for dev menu',\n\tweb: 'Command/Control+R to reload your browser :p\\n'\n\t\t+ '\\nAnd in Browser, we have great advantage\\nwhen using Chrome Developer Tool\\ncompare to the poor native-dev-menu!',\n});\n\ntype Props = {\n\n};\n\nconst Welcome = (props: Props) => {\n\tconst dispatch = useDispatch();\n\tconst counter = useSelector(({ app }) => app.counter);\n\n\treturn <View style={styles.container}>\n\t\t<Text style={styles.welcome}>\n\t\t\tWelcome to Universal Ui\n\t\t</Text>\n\t\t<Text style={styles.instructions}>\n\t\t\tTo get started, edit src/welcome.js\n\t\t</Text>\n\t\t<Text style={styles.instructions}>\n\t\t\t{instructions}\n\t\t</Text>\n\t\t<Button\n\t\t\twrapperStyle={styles.buttonWrapper}\n\t\t\ttitle={`Increase counter [${counter}]`}\n\t\t\ttooltip=\"Increase counter..\"\n\t\t\ttooltipDirection=\"top\"\n\t\t\tonPress={() => dispatch(appActions.increaseCounter())}/>\n\t</View>;\n};\n\nexport default Welcome;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n\twelcome: {\n\t\tfontSize: 20,\n\t\ttextAlign: 'center',\n\t\tmargin: 10,\n\t},\n\tinstructions: {\n\t\ttextAlign: 'center',\n\t\tcolor: '#333333',\n\t\tmarginBottom: 5,\n\t},\n\tbuttonWrapper: {\n\t\tbackgroundColor: '#00bcd4',\n\t\tmarginTop: 20,\n\t},\n\tbuttonIcon: {\n\t\tfontSize: 28,\n\t\tcolor: '#ffffff',\n\t},\n});\n",
        "gt": [
            "'ruui/cli/addons/redux/src/store/action/app.js'",
            "'ruui/cli/addons/redux/src/welcome.js'",
            "'ruui/cli/addons/redux/src/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/typeDefinition.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/components/provider.js'"
        ],
        "content": "'ruui/src/typeDefinition.js'\n:import React from 'react';\n\nexport type Action = {\n\taction: String,\n}\n\nexport type Element = React.Element<*>;\n\nexport type Style =\n\t| { [key: string]: any }\n\t| number\n\t| false\n\t| null\n\t| void\n\t| Array<Style>;\n\nexport type Layout = {\n\tx: number,\n\ty: number,\n\twidth: number,\n\theight: number,\n};\n\nexport type LayoutEvent = {\n\tnativeEvent: {\n\t\tlayout: Layout,\n\t},\n};\n\nexport type Dimension = {\n\twidth?: Number,\n\theight?: Number,\n\tscale?: Number,\n\tfontScale?: Number,\n};\n\nexport type Dimensions = {\n\twindow?: Dimension,\n\tscreen?: Dimension,\n};\n\nexport type AccessibilityTrait =\n\t'none' |\n\t'button' |\n\t'link' |\n\t'header' |\n\t'search' |\n\t'image' |\n\t'selected' |\n\t'plays' |\n\t'key' |\n\t'text' |\n\t'summary' |\n\t'disabled' |\n\t'frequentUpdates' |\n\t'startsMedia' |\n\t'adjustable' |\n\t'allowsDirectInteraction' |\n\t'pageTurn';\n\nexport type AccessibilityComponentType =\n\t'none' |\n\t'button' |\n\t'radiobutton_checked' |\n\t'radiobutton_unchecked';\n\nexport type Corners = {\n\ttop: number,\n\tleft: number,\n\tbottom: number,\n\tright: number\n};\n\nexport type SnappingDirection = 'top' | 'left' | 'bottom' | 'right' | 'top-left' | 'left-top' | 'top-right' | 'right-top' | 'bottom-left' | 'left-bottom' | 'bottom-right' | 'right-bottom' | 'center';\n\nexport type PositionOffset = {\n\ttop: Number,\n\tleft: Number,\n};\n\nexport type DropdownConfigs = {\n\tcomponent?: any,\n\twrapperStyle?: Style,\n\tcontainerLayout?: Layout,\n\tdirection: SnappingDirection,\n\toffset?: PositionOffset,\n\tanimatedDirection: SnappingDirection,\n\tshowArrow?: Boolean,\n\tarrowSize?: Number,\n\tarrowOffset?: PositionOffset,\n\tspacing?: number,\n\tcontext?: Object,\n\tonClose ?: Function,\n\ttapToClose?: boolean,\n\tmaskPointerEvents?: string,\n};\n\nexport type RuuiConfigs = {\n\tbutton?: {\n\t\tstyles?: Object,\n\t},\n\tmodal?: {\n\t\tstyles?: Object,\n\t\tmaskProps?: Function,\n\t\tcontainerProps?: Function,\n\t},\n};\n\nexport type TooltipConfigs = {\n\ttargetLayout: Layout,\n\tdirection: String,\n\tpositionSpacing?: Number,\n\tpositionOffset?: PositionOffset,\n\twrapperStyle?: Style,\n\tinnerStyle?: Style,\n\tcontent?: String | Element,\n};\n\nexport type ModalOptions = {\n\tid?: String,\n\ttype: \"modal\" | \"dropdown\",\n\tactive?: Boolean,\n\tconfigs?: {\n\t\tzIndex?: Number,\n\t\ttapToClose?: Boolean,\n\t\tcomponent?: Function | Element,\n\t},\n};\n\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/components/provider.js'\n:import React from 'react';\nimport { StyleSheet, View, Text, } from 'react-native';\n\nimport { RuuiContext, ruuiStore, } from '../utils/context';\nimport type { Element, } from '../typeDefinition';\n\ntype Props = {\n\tstore?: Object,\n\tchildren?: Element,\n};\n\nfunction Provider(props: Props) {\n\tconst { children, store, } = props;\n\tconst safeStore = store || ruuiStore;\n\n\treturn <RuuiContext.Provider value={safeStore}>\n\t\t{children}\n\t</RuuiContext.Provider>;\n}\n\nexport default Provider;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\n\t},\n});\n",
        "gt": [
            "'ruui/src/typeDefinition.js'",
            "'ruui/src/components/provider.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/index.js'",
            "'react-modal/src/helpers/focusManager.js'",
            "'react-modal/specs/Modal.testability.spec.js'"
        ],
        "content": "'react-modal/specs/helper.js'\n:import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Modal, { bodyOpenClassName } from \"../src/components/Modal\";\nimport TestUtils from \"react-dom/test-utils\";\nimport { log as classListLog } from \"../src/helpers/classList\";\nimport { log as focusManagerLog } from \"../src/helpers/focusManager\";\nimport { log as ariaAppLog } from \"../src/helpers/ariaAppHider\";\nimport { log as bodyTrapLog } from \"../src/helpers/bodyTrap\";\nimport { log as portalInstancesLog } from \"../src/helpers/portalOpenInstances\";\n\nconst debug = false;\n\nlet i = 0;\n\n\nexport function log(label, spaces) {\n  if (!debug) return;\n\n  console.log(`${label} -----------------`);\n  console.log(document.body.children.length);\n  const logChildren = c => console.log(c.nodeName, c.className, c.id);\n  document.body.children.forEach(logChildren);\n\n  ariaAppLog();\n  bodyTrapLog();\n  classListLog();\n  focusManagerLog();\n  portalInstancesLog();\n\n  console.log(`end ${label} -----------------` + (!spaces ? '' : `\n\n\n`));\n}\n\nlet elementPool = [];\n\n\nexport function createHTMLElement(name) {\n  const e = document.createElement(name);\n  elementPool[elementPool.length - 1].push(e);\n  e.className = `element_pool_${name}-${++i}`;\n  return e;\n}\n\n\nexport function drainPool(pool) {\n  pool.forEach(e => e.parentNode && e.parentNode.removeChild(e));\n}\n\n\nexport function withElementCollector(work) {\n  let r;\n  let poolIndex = elementPool.length;\n  elementPool[poolIndex] = [];\n  try {\n    r = work();\n  } finally {\n    drainPool(elementPool[poolIndex]);\n    elementPool = elementPool.slice(\n      0, poolIndex\n    );\n  }\n  return r;\n}\n\n\nif (!String.prototype.includes) {\n  String.prototype.includes = function(search, start) {\n    if (typeof start !== \"number\") {\n      start = 0;\n    }\n\n    if (start + search.length > this.length) {\n      return false;\n    }\n\n    return this.indexOf(search, start) !== -1;\n  };\n}\n\n\nexport const documentClassList = () => document.body.classList;\n\n\nexport const isDocumentWithReactModalOpenClass = (\n  bodyClass = bodyOpenClassName\n) => document.body.className.includes(bodyClass);\n\n\nexport const htmlClassList = () =>\n  document.getElementsByTagName(\"html\")[0].classList;\n\n\nexport const isHtmlWithReactModalOpenClass = htmlClass =>\n  htmlClassList().contains(htmlClass);\n\n\nexport const findDOMWithClass = TestUtils.findRenderedDOMComponentWithClass;\n\n\nconst getModalAttribute = component => (instance, attr) =>\n  modalComponent(component)(instance).getAttribute(attr);\n\n\nconst modalComponent = component => instance => instance.portal[component];\n\n\nexport const mcontent = modalComponent(\"content\");\n\n\nexport const moverlay = modalComponent(\"overlay\");\n\n\nexport const contentAttribute = getModalAttribute(\"content\");\n\n\nexport const overlayAttribute = getModalAttribute(\"overlay\");\n\nconst Simulate = TestUtils.Simulate;\n\nconst dispatchMockEvent = eventCtor => (key, code) => (element, opts) =>\n  eventCtor(\n    element,\n    Object.assign(\n      {},\n      {\n        key: key,\n        which: code\n      },\n      code,\n      opts\n    )\n  );\n\nconst dispatchMockKeyDownEvent = dispatchMockEvent(Simulate.keyDown);\n\n\nexport const escKeyDown = dispatchMockKeyDownEvent(\"ESC\", { keyCode: 27 });\n\nexport const escKeyDownWithCode = dispatchMockKeyDownEvent(\"ESC\", {\n  code: \"Escape\"\n});\n\nexport const tabKeyDown = dispatchMockKeyDownEvent(\"TAB\", { keyCode: 9 });\n\nexport const tabKeyDownWithCode = dispatchMockKeyDownEvent(\"TAB\", {\n  code: \"Tab\"\n});\n\nexport const clickAt = Simulate.click;\n\nexport const mouseUpAt = Simulate.mouseUp;\n\nexport const mouseDownAt = Simulate.mouseDown;\n\nexport const noop = () => {};\n\n\nexport const withModal = function(props, children, test = noop) {\n  return withElementCollector(() => {\n    const node = createHTMLElement();\n    const modalProps = { ariaHideApp: false, ...props };\n    let modal;\n    try {\n      ReactDOM.render(\n        <Modal ref={m => (modal = m)} {...modalProps}>\n          {children}\n        </Modal>,\n        node\n      );\n      test(modal);\n    } finally {\n      ReactDOM.unmountComponentAtNode(node);\n    }\n  });\n};\n\n'react-modal/specs/index.js'\n:\n\nimport ModalState from \"./Modal.spec\";\nimport ModalEvents from \"./Modal.events.spec\";\nimport ModalStyle from \"./Modal.style.spec\";\nimport ModalHelpers from \"./Modal.helpers.spec\";\nimport ModalTestability from \"./Modal.testability.spec\";\n\ndescribe(\"State\", ModalState);\ndescribe(\"Style\", ModalStyle);\ndescribe(\"Events\", ModalEvents);\ndescribe(\"Helpers\", ModalHelpers);\ndescribe(\"Testability\", ModalTestability);\n\n'react-modal/src/helpers/focusManager.js'\n:import findTabbable from \"../helpers/tabbable\";\n\nlet focusLaterElements = [];\nlet modalElement = null;\nlet needToFocus = false;\n\n\n\nexport function resetState() {\n  focusLaterElements = [];\n}\n\n\nexport function log() {\n  if (process.env.NODE_ENV !== \"production\") {\n    console.log(\"focusManager ----------\");\n    focusLaterElements.forEach(f => {\n      const check = f || {};\n      console.log(check.nodeName, check.className, check.id);\n    });\n    console.log(\"end focusManager ----------\");\n  }\n}\n\n\nexport function handleBlur() {\n  needToFocus = true;\n}\n\nexport function handleFocus() {\n  if (needToFocus) {\n    needToFocus = false;\n    if (!modalElement) {\n      return;\n    }\n\n\n\n\n\n    setTimeout(() => {\n      if (modalElement.contains(document.activeElement)) {\n        return;\n      }\n      const el = findTabbable(modalElement)[0] || modalElement;\n      el.focus();\n    }, 0);\n  }\n}\n\nexport function markForFocusLater() {\n  focusLaterElements.push(document.activeElement);\n}\n\n\nexport function returnFocus(preventScroll = false) {\n  let toFocus = null;\n  try {\n    if (focusLaterElements.length !== 0) {\n      toFocus = focusLaterElements.pop();\n      toFocus.focus({ preventScroll });\n    }\n    return;\n  } catch (e) {\n    console.warn(\n      [\n        \"You tried to return focus to\",\n        toFocus,\n        \"but it is not in the DOM anymore\"\n      ].join(\" \")\n    );\n  }\n}\n\n\nexport function popWithoutFocus() {\n  focusLaterElements.length > 0 && focusLaterElements.pop();\n}\n\nexport function setupScopedFocus(element) {\n  modalElement = element;\n\n  if (window.addEventListener) {\n    window.addEventListener(\"blur\", handleBlur, false);\n    document.addEventListener(\"focus\", handleFocus, true);\n  } else {\n    window.attachEvent(\"onBlur\", handleBlur);\n    document.attachEvent(\"onFocus\", handleFocus);\n  }\n}\n\nexport function teardownScopedFocus() {\n  modalElement = null;\n\n  if (window.addEventListener) {\n    window.removeEventListener(\"blur\", handleBlur);\n    document.removeEventListener(\"focus\", handleFocus);\n  } else {\n    window.detachEvent(\"onBlur\", handleBlur);\n    document.detachEvent(\"onFocus\", handleFocus);\n  }\n}\n\n'react-modal/specs/Modal.testability.spec.js'\n:\nimport ReactDOM from \"react-dom\";\nimport sinon from \"sinon\";\nimport { withModal } from \"./helper\";\n\nexport default () => {\n  it(\"allows ReactDOM.createPortal to be overridden in real-time\", () => {\n    const createPortalSpy = sinon.spy(ReactDOM, \"createPortal\");\n    const props = { isOpen: true };\n    withModal(props, \"hello\");\n    createPortalSpy.called.should.be.ok();\n    ReactDOM.createPortal.restore();\n  });\n};\n",
        "gt": [
            "'react-modal/src/helpers/focusManager.js'",
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/specs/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/cli/addons/redux/src/index.js'",
            "'ruui/cli/addons/redux/src/store/action/app.js'",
            "'ruui/cli/addons/redux/src/store/actions.js'",
            "'ruui/cli/addons/redux/src/welcome.js'"
        ],
        "content": "'ruui/cli/addons/redux/src/index.js'\n:import React from 'react';\nimport { View, StyleSheet, } from 'react-native';\nimport { RuuiProvider, Tooltip } from 'react-universal-ui';\nimport { Provider, } from 'react-redux';\n\nimport { ruuiStore, appStore } from 'store';\nimport Welcome from './welcome';\n\ntype Props = {\n\n};\n\nconst App = (props: Props) => {\n\treturn <View style={styles.container}>\n\t\t<Welcome/>\n\t</View>;\n};\n\nconst AppContainer = (props) => {\n\treturn <RuuiProvider store={ruuiStore}>\n\t\t<Provider store={appStore}>\n\t\t\t<App/>\n\t\t\t<Tooltip/>\n\t\t</Provider>\n\t</RuuiProvider>;\n}\n\nexport default AppContainer;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n});\n\n'ruui/cli/addons/redux/src/store/action/app.js'\n:import * as Actions from '../actions';\n\nexport function increaseCounter(volume = 1) {\n\treturn { type: Actions.IncreaseCounter, volume };\n}\n\n'ruui/cli/addons/redux/src/store/actions.js'\n:export const IncreaseCounter                = '@APP:INCREASE-COUNTER';\n\n'ruui/cli/addons/redux/src/welcome.js'\n:import React, { useState, } from 'react';\nimport { View, Text, StyleSheet, Platform } from 'react-native';\nimport { Button, } from 'react-universal-ui';\nimport { useSelector, useDispatch, } from 'react-redux';\n\nimport * as appActions from 'store/action/app';\n\nconst instructions = Platform.select({\n\tios: 'Press Cmd+R to reload,\\n'\n\t\t+ 'Cmd+D or shake for dev menu',\n\tandroid: 'Double tap R on your keyboard to reload,\\n'\n\t\t+ 'Shake or press menu button for dev menu',\n\tweb: 'Command/Control+R to reload your browser :p\\n'\n\t\t+ '\\nAnd in Browser, we have great advantage\\nwhen using Chrome Developer Tool\\ncompare to the poor native-dev-menu!',\n});\n\ntype Props = {\n\n};\n\nconst Welcome = (props: Props) => {\n\tconst dispatch = useDispatch();\n\tconst counter = useSelector(({ app }) => app.counter);\n\n\treturn <View style={styles.container}>\n\t\t<Text style={styles.welcome}>\n\t\t\tWelcome to Universal Ui\n\t\t</Text>\n\t\t<Text style={styles.instructions}>\n\t\t\tTo get started, edit src/welcome.js\n\t\t</Text>\n\t\t<Text style={styles.instructions}>\n\t\t\t{instructions}\n\t\t</Text>\n\t\t<Button\n\t\t\twrapperStyle={styles.buttonWrapper}\n\t\t\ttitle={`Increase counter [${counter}]`}\n\t\t\ttooltip=\"Increase counter..\"\n\t\t\ttooltipDirection=\"top\"\n\t\t\tonPress={() => dispatch(appActions.increaseCounter())}/>\n\t</View>;\n};\n\nexport default Welcome;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n\twelcome: {\n\t\tfontSize: 20,\n\t\ttextAlign: 'center',\n\t\tmargin: 10,\n\t},\n\tinstructions: {\n\t\ttextAlign: 'center',\n\t\tcolor: '#333333',\n\t\tmarginBottom: 5,\n\t},\n\tbuttonWrapper: {\n\t\tbackgroundColor: '#00bcd4',\n\t\tmarginTop: 20,\n\t},\n\tbuttonIcon: {\n\t\tfontSize: 28,\n\t\tcolor: '#ffffff',\n\t},\n});\n",
        "gt": [
            "'ruui/cli/addons/redux/src/store/actions.js'",
            "'ruui/cli/addons/redux/src/store/action/app.js'",
            "'ruui/cli/addons/redux/src/welcome.js'",
            "'ruui/cli/addons/redux/src/index.js'"
        ]
    },
    {
        "files": [
            "'cypress-plugin-snapshots/src/commands/index.js'",
            "'cypress-plugin-snapshots/__tests__/commands.test.js'",
            "'cypress-plugin-snapshots/src/commands/toMatchImageSnapshot.js'",
            "'cypress-plugin-snapshots/commands.js'"
        ],
        "content": "'cypress-plugin-snapshots/src/commands/index.js'\n:const toMatchSnapshot = require('./toMatchSnapshot');\nconst toMatchImageSnapshot = require('./toMatchImageSnapshot');\n\nmodule.exports = {\n  toMatchSnapshot,\n  toMatchImageSnapshot,\n}\n\n'cypress-plugin-snapshots/__tests__/commands.test.js'\n:const { initCommands } = require('../commands');\n\nglobal.Cypress = {\n  env: () => ({}),\n  config: () => {},\n  Commands: { add: jest.fn(), },\n  on: () => ({}),\n};\n\nglobal.cy = {};\n\ndescribe('commands', () => {\n  it('initCommands', () => {\n    global.before = jest.fn();\n    global.after = jest.fn();\n    global.cy.task = jest.fn().mockResolvedValue({ passed: true });\n\n    initCommands();\n\n    expect(global.Cypress.Commands.add).toBeCalled();\n    expect(global.Cypress.Commands.add.mock.calls.length).toEqual(2);\n    expect(global.Cypress.Commands.add.mock.calls[0][0]).toEqual('toMatchSnapshot');\n    expect(global.after).toBeCalled();\n    expect(global.before).toBeCalled();\n  });\n});\n\n'cypress-plugin-snapshots/src/commands/toMatchImageSnapshot.js'\n:\n\nconst { MATCH_IMAGE } = require('../tasks/taskNames');\nconst getTaskData = require('../utils/commands/getTaskData');\nconst logMessage = require('../utils/commands/logMessage');\nconst { NO_LOG } = require('../constants');\nconst { COMMAND_MATCH_IMAGE_SNAPSHOT: commandName } = require('./commandNames');\nconst getImageData = require('../utils/image/getImageData');\nconst { getImageConfig, getScreenshotConfig, getCustomName, getCustomSeparator } = require('../config');\n\nfunction afterScreenshot(taskData) {\n  return ($el, props) => {\n\n\n    const win = $el.get(0).ownerDocument.defaultView;\n    taskData.image = getImageData(props, win.devicePixelRatio);\n    taskData.isImage = true;\n    delete taskData.subject;\n  };\n}\n\nasync function toMatchImageSnapshot(subject, commandOptions) {\n  const options = getImageConfig(commandOptions);\n  const customName = getCustomName(commandOptions);\n  const customSeparator = getCustomSeparator(commandOptions);\n\n  const taskData = await getTaskData({\n    commandName,\n    options,\n    customName,\n    customSeparator,\n    subject,\n  });\n\n  const screenShotConfig = getScreenshotConfig(commandOptions);\n  const afterScreenshotFn = afterScreenshot(taskData);\n  if (screenShotConfig.onAfterScreenshot) {\n    const afterScreenshotCallback = screenShotConfig.onAfterScreenshot;\n    screenShotConfig.onAfterScreenshot = (...args) => {\n      afterScreenshotFn.apply(this, args);\n      afterScreenshotCallback.apply(this, args);\n    }\n  } else {\n    screenShotConfig.onAfterScreenshot = afterScreenshotFn;\n  }\n\n  return cy.wrap(subject, NO_LOG)\n    .screenshot(taskData.snapshotTitle, screenShotConfig)\n    .then(() => cy.task(\n        MATCH_IMAGE,\n        taskData,\n        NO_LOG\n      ).then(logMessage)\n    );\n}\n\nmodule.exports = toMatchImageSnapshot;\n\n'cypress-plugin-snapshots/commands.js'\n:\n\nconst {\n  merge,\n  cloneDeep\n} = require('lodash');\nconst { initUi } = require('./src/ui');\nconst commands = require('./src/commands/index');\nconst cleanUpSnapshots = require('./src/utils/commands/cleanupSnapshots');\nconst getConfig = require('./src/utils/commands/getConfig');\nconst { NO_LOG } = require('./src/constants');\n\nfunction addCommand(commandName, method) {\n  Cypress.Commands.add(commandName, {\n    prevSubject: true\n  }, (commandSubject, taskOptions) => {\n    if (!commandSubject) {\n      return commandSubject;\n    }\n\n    const options = merge({}, cloneDeep(getConfig()), taskOptions);\n    return cy.wrap(commandSubject, NO_LOG)\n      .then((subject) => method(subject, options));\n  });\n}\n\nfunction initCommands() {\n\n  getConfig();\n\n\n  before(() => {\n    initUi();\n  });\n\n  function closeSnapshotModal() {\n    try {\n      if (window.top.closeSnapshotModal) {\n        window.top.closeSnapshotModal();\n      }\n    } catch(ex) {\n      window.console.error(ex);\n    }\n  }\n\n  function clearFileCache() {\n    Cypress.__readFileCache__ = {};\n  }\n\n\n  Cypress.on('window:before:unload', () => {\n    closeSnapshotModal()\n    clearFileCache()\n  });\n\n\n  after(() => {\n    cleanUpSnapshots();\n  });\n\n\n  Object.keys(commands).forEach(key => addCommand(key, commands[key]));\n}\n\nmodule.exports = {\n  initCommands,\n};\n\nif (!process.env.JEST_WORKER_ID) {\n  initCommands();\n}\n",
        "gt": [
            "'cypress-plugin-snapshots/src/commands/toMatchImageSnapshot.js'",
            "'cypress-plugin-snapshots/src/commands/index.js'",
            "'cypress-plugin-snapshots/commands.js'",
            "'cypress-plugin-snapshots/__tests__/commands.test.js'"
        ]
    },
    {
        "files": [
            "'Chatire/chatire-frontend/config/dev.env.js'",
            "'Chatire/chatire-frontend/build/webpack.prod.conf.js'",
            "'Chatire/chatire-frontend/config/prod.env.js'",
            "'Chatire/chatire-frontend/test/e2e/runner.js'",
            "'Chatire/chatire-frontend/config/test.env.js'"
        ],
        "content": "'Chatire/chatire-frontend/config/dev.env.js'\n:'use strict'\nconst merge = require('webpack-merge')\nconst prodEnv = require('./prod.env')\n\nmodule.exports = merge(prodEnv, {\n  NODE_ENV: '\"development\"'\n})\n\n'Chatire/chatire-frontend/build/webpack.prod.conf.js'\n:'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst webpack = require('webpack')\nconst config = require('../config')\nconst merge = require('webpack-merge')\nconst baseWebpackConfig = require('./webpack.base.conf')\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nconst env = process.env.NODE_ENV === 'testing'\n  ? require('../config/test.env')\n  : require('../config/prod.env')\n\nconst webpackConfig = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({\n      sourceMap: config.build.productionSourceMap,\n      extract: true,\n      usePostCSS: true\n    })\n  },\n  devtool: config.build.productionSourceMap ? config.build.devtool : false,\n  output: {\n    path: config.build.assetsRoot,\n    filename: utils.assetsPath('js/[name].[chunkhash].js'),\n    chunkFilename: utils.assetsPath('js/[id].[chunkhash].js')\n  },\n  plugins: [\n\n    new webpack.DefinePlugin({\n      'process.env': env\n    }),\n    new UglifyJsPlugin({\n      uglifyOptions: {\n        compress: {\n          warnings: false\n        }\n      },\n      sourceMap: config.build.productionSourceMap,\n      parallel: true\n    }),\n\n    new ExtractTextPlugin({\n      filename: utils.assetsPath('css/[name].[contenthash].css'),\n\n\n\n\n      allChunks: true,\n    }),\n\n\n    new OptimizeCSSPlugin({\n      cssProcessorOptions: config.build.productionSourceMap\n        ? { safe: true, map: { inline: false } }\n        : { safe: true }\n    }),\n\n\n\n    new HtmlWebpackPlugin({\n      filename: process.env.NODE_ENV === 'testing'\n        ? 'index.html'\n        : config.build.index,\n      template: 'index.html',\n      inject: true,\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeAttributeQuotes: true\n\n\n      },\n\n      chunksSortMode: 'dependency'\n    }),\n\n    new webpack.HashedModuleIdsPlugin(),\n\n    new webpack.optimize.ModuleConcatenationPlugin(),\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks (module) {\n\n        return (\n          module.resource &&\n          /\\.js$/.test(module.resource) &&\n          module.resource.indexOf(\n            path.join(__dirname, '../node_modules')\n          ) === 0\n        )\n      }\n    }),\n\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest',\n      minChunks: Infinity\n    }),\n\n\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'app',\n      async: 'vendor-async',\n      children: true,\n      minChunks: 3\n    }),\n\n\n    new CopyWebpackPlugin([\n      {\n        from: path.resolve(__dirname, '../static'),\n        to: config.build.assetsSubDirectory,\n        ignore: ['.*']\n      }\n    ])\n  ]\n})\n\nif (config.build.productionGzip) {\n  const CompressionWebpackPlugin = require('compression-webpack-plugin')\n\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      asset: '[path].gz[query]',\n      algorithm: 'gzip',\n      test: new RegExp(\n        '\\\\.(' +\n        config.build.productionGzipExtensions.join('|') +\n        ')$'\n      ),\n      threshold: 10240,\n      minRatio: 0.8\n    })\n  )\n}\n\nif (config.build.bundleAnalyzerReport) {\n  const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin\n  webpackConfig.plugins.push(new BundleAnalyzerPlugin())\n}\n\nmodule.exports = webpackConfig\n\n'Chatire/chatire-frontend/config/prod.env.js'\n:'use strict'\nmodule.exports = {\n  NODE_ENV: '\"production\"'\n}\n\n'Chatire/chatire-frontend/test/e2e/runner.js'\n:\nprocess.env.NODE_ENV = 'testing'\n\nconst webpack = require('webpack')\nconst DevServer = require('webpack-dev-server')\n\nconst webpackConfig = require('../../build/webpack.prod.conf')\nconst devConfigPromise = require('../../build/webpack.dev.conf')\n\nlet server\n\ndevConfigPromise.then(devConfig => {\n  const devServerOptions = devConfig.devServer\n  const compiler = webpack(webpackConfig)\n  server = new DevServer(compiler, devServerOptions)\n  const port = devServerOptions.port\n  const host = devServerOptions.host\n  return server.listen(port, host)\n})\n.then(() => {\n\n\n\n\n\n\n\n  let opts = process.argv.slice(2)\n  if (opts.indexOf('--config') === -1) {\n    opts = opts.concat(['--config', 'test/e2e/nightwatch.conf.js'])\n  }\n  if (opts.indexOf('--env') === -1) {\n    opts = opts.concat(['--env', 'chrome'])\n  }\n\n  const spawn = require('cross-spawn')\n  const runner = spawn('./node_modules/.bin/nightwatch', opts, { stdio: 'inherit' })\n\n  runner.on('exit', function (code) {\n    server.close()\n    process.exit(code)\n  })\n\n  runner.on('error', function (err) {\n    server.close()\n    throw err\n  })\n})\n\n'Chatire/chatire-frontend/config/test.env.js'\n:'use strict'\nconst merge = require('webpack-merge')\nconst devEnv = require('./dev.env')\n\nmodule.exports = merge(devEnv, {\n  NODE_ENV: '\"testing\"'\n})\n",
        "gt": [
            "'Chatire/chatire-frontend/config/prod.env.js'",
            "'Chatire/chatire-frontend/config/dev.env.js'",
            "'Chatire/chatire-frontend/config/test.env.js'",
            "'Chatire/chatire-frontend/build/webpack.prod.conf.js'",
            "'Chatire/chatire-frontend/test/e2e/runner.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/components/select.js'"
        ],
        "content": "'ruui/src/utils/store/appAction.js'\n:import * as Actions from './actions';\nimport { uuid } from '../helpers';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function updateThemeConfigs(configs = {}) {\n\treturn { type: Actions.UpdateThemeConfigs, configs };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/components/select.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { TouchableOpacity, Image, View, Text, StyleSheet } from 'react-native';\n\nimport { base64Icons, } from '../utils';\nimport { Style } from '../typeDefinition';\nimport * as appAction from '../utils/store/appAction';\n\nconst defaultIcon = { uri: base64Icons.downArrow };\nconst defaultTitleGet = item => item && item.title;\n\ntype Props = {\n\tfloatingLabel?: string,\n\tcancelText?: string,\n\toptions?: Array<any>,\n\tvalue?: any,\n\tgetTitle?: Function,\n\tonSelect?: Function,\n\tonChange?: Function,\n\tonCancel?: Function,\n\ticonSource?: any,\n\ticonStyle?: Style,\n\ttapToClose?: boolean,\n};\n\nexport default class RuuiSelect extends Component<any, Props, any> {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiStore: PropTypes.object,\n\t};\n\n\tstatic defaultProps = {\n\t\tfloatingLabel: 'Select',\n\t\tcancelText: 'Cancel',\n\t\toptions: [{ title: 'Missing options param' }],\n\t\ttapToClose: true,\n\t\tgetTitle: defaultTitleGet,\n\t};\n\n\tconstructor(props, context) {\n\t\tsuper(props);\n\t\tthis.store = context.ruuiStore;\n\t}\n\n\trender() {\n\t\tconst { iconSource = defaultIcon, floatingLabel, iconStyle } = this.props;\n\n\t\treturn <TouchableOpacity\n\t\t\tonPress={this.activateSelector}\n\t\t\tstyle={styles.container}\n\t\t\tactiveOpacity={0.8}>\n\t\t\t<View style={styles.contentWrapper}>\n\t\t\t\t<Text style={styles.floatingLabel}>{floatingLabel}</Text>\n\t\t\t\t{this.renderValue()}\n\t\t\t</View>\n\t\t\t<View style={styles.iconWrapper}>\n\t\t\t\t<Image\n\t\t\t\t\tstyle={[styles.downIcon, iconStyle]}\n\t\t\t\t\tresizeMode=\"contain\"\n\t\t\t\t\tsource={iconSource}/>\n\t\t\t</View>\n\t\t</TouchableOpacity>;\n\t}\n\n\trenderValue() {\n\t\tconst { value, getTitle, } = this.props,\n\t\t\tvalueText = getTitle(value) || 'Missing value option';\n\n\t\treturn <Text style={styles.valueText}>{valueText}</Text>;\n\t}\n\n\tactivateSelector = () => {\n\t\tconst { floatingLabel, value, ...otherProps } = this.props;\n\n\t\tthis.store.dispatch(appAction.toggleSelector(true, {\n\t\t\tselectText: floatingLabel,\n\t\t\tactiveOption: value,\n\t\t\tvalue,\n\t\t\t...otherProps\n\t\t}));\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflexDirection: 'row',\n\t\tborderBottomWidth: 1,\n\t\tborderColor: '#f5f5f5',\n\t},\n\tcontentWrapper: {\n\t\tflex: 1,\n\t},\n\tfloatingLabel: {\n\t\tcolor: '#888888',\n\t\tfontSize: 12,\n\t\tpaddingLeft: 8, paddingRight: 8,\n\t\tpaddingTop: 5,\n\t},\n\tvalueText: {\n\t\tpadding: 8,\n\t\tpaddingTop: 8, paddingBottom: 5,\n\t\tcolor: '#444444',\n\t\tfontSize: 16,\n\t},\n\ticonWrapper: {\n\t\twidth: 50,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n\tdownIcon: {\n\t\twidth: 16, height: 16,\n\t},\n});\n",
        "gt": [
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/select.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'cypress-plugin-snapshots/src/server/initServer.js'",
            "'cypress-plugin-snapshots/src/utils/tasks/imageSnapshots.js'",
            "'cypress-plugin-snapshots/src/constants.js'",
            "'cypress-plugin-snapshots/__tests__/plugin.test.js'",
            "'cypress-plugin-snapshots/src/utils/image/getSnapshotFilename.js'",
            "'cypress-plugin-snapshots/plugin.js'"
        ],
        "content": "'cypress-plugin-snapshots/src/server/initServer.js'\n:const http = require('http');\nconst socketio = require('socket.io');\nconst { SAVE_TEXT, SAVE_IMAGE } = require('./actions');\nconst saveTextSnapshot = require('../save/saveTextSnapshot');\nconst { saveImageSnapshot } = require('../utils/tasks/imageSnapshots');\n\nfunction initServer(config) {\n  const server = http.createServer();\n  const io = socketio(server);\n\n  io.on('connection', (client) => {\n    const { token } = client.handshake.query;\n\n    if (config.serverEnabled) {\n      client.on(SAVE_IMAGE, (data) => {\n        if (token === config.token) {\n          saveImageSnapshot(data);\n        }\n      });\n\n      client.on(SAVE_TEXT, (data) => {\n        if (token === config.token) {\n          saveTextSnapshot(data);\n        }\n      });\n    }\n  });\n\n  if (config.serverEnabled) {\n    server.listen(config.serverPort, config.serverHost);\n  }\n}\n\nmodule.exports = initServer;\n\n'cypress-plugin-snapshots/src/utils/tasks/imageSnapshots.js'\n:const { createHash } = require('crypto');\nconst { PNG } = require('pngjs');\nconst fs = require('fs-extra');\nconst pixelmatch = require('pixelmatch');\nconst { merge } = require('lodash');\nconst rimraf = require('rimraf').sync;\nconst getSnapshotFilename = require('../image/getSnapshotFilename');\nconst getImageData = require('../image/getImageData');\nconst { IMAGE_TYPE_ACTUAL } = require('../../constants');\nconst { DEFAULT_IMAGE_CONFIG } = require('../../config');\n\nfunction moveActualImageToSnapshotsDirectory({image, snapshotTitle, testFile} = {}) {\n  if (image && image.path) {\n    const filename = getSnapshotFilename(testFile, snapshotTitle, IMAGE_TYPE_ACTUAL);\n    rimraf(filename);\n    if (fs.existsSync(image.path)) {\n      fs.moveSync(image.path, filename);\n    }\n    image.path = filename;\n  }\n}\n\nfunction createDiffObject(filename) {\n  const imageObject = getImageObject(filename, false);\n  return getImageData(imageObject);\n}\n\n\nfunction getImageObject(filename, addHash = true) {\n  const exists = fs.existsSync(filename);\n  const size = exists ? fs.statSync(filename).size : 0;\n\n  if (size > 0) {\n    const image = PNG.sync.read(fs.readFileSync(filename));\n    const hash = addHash !== false ?\n      createHash('sha1').update(image.data).digest('base64') : undefined;\n\n    return {\n      path: filename,\n      image,\n      hash,\n      height: image.height,\n      width: image.width,\n    };\n  }\n\n  return false;\n}\n\nfunction createCompareCanvas(width, height, source) {\n  const canvas = new PNG({\n    width,\n    height,\n    colorType: 6,\n    bgColor: {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 0,\n    }\n  });\n  PNG.bitblt(source, canvas, 0, 0, source.width, source.height, 0, 0);\n  return canvas;\n}\n\n\nfunction makeImagesEqualSize(expected, actual) {\n  const height = Math.max(expected.height, actual.height);\n  const width = Math.max(expected.width, actual.width);\n  actual.image = createCompareCanvas(width, height, actual.image);\n  expected.image = createCompareCanvas(width, height, expected.image);\n}\n\nfunction compareImageSizes(expected, actual) {\n  return expected.width === actual.width &&\n    actual.height === expected.height;\n}\n\nfunction compareImages(expected, actual, diffFilename, config) {\n  let passed = false;\n  rimraf(diffFilename);\n\n  if (actual !== false) {\n    const hashMatches = expected.hash === actual.hash;\n    if (hashMatches) {\n      return true;\n    }\n\n    const sizeMatch = compareImageSizes(expected, actual);\n    if (!sizeMatch) {\n      makeImagesEqualSize(expected, actual);\n    }\n\n    const imageConfig = merge({}, DEFAULT_IMAGE_CONFIG, config);\n    const pixelmatchConfig = {\n      threshold: 0.01,\n    };\n\n    const imageWidth = actual.image.width;\n    const imageHeight = actual.image.height;\n\n    const diffImage = config.createDiffImage ? new PNG({\n      height: imageHeight,\n      width: imageWidth,\n    }) : null;\n\n    const totalPixels = imageWidth * imageHeight;\n    const diffPixelCount = pixelmatch(\n      actual.image.data,\n      expected.image.data,\n      diffImage ? diffImage.data : null,\n      imageWidth,\n      imageHeight,\n      pixelmatchConfig\n    );\n\n    if (imageConfig.thresholdType === 'pixel') {\n      passed = diffPixelCount <= imageConfig.threshold;\n    } else if (imageConfig.thresholdType === 'percent') {\n      const diffRatio = diffPixelCount / totalPixels;\n      passed = diffRatio <= imageConfig.threshold;\n    } else {\n      throw new Error(`Unknown imageConfig.thresholdType: ${imageConfig.thresholdType}. `+\n        `Valid options are \"pixel\" or \"percent\".`);\n    }\n\n    if (!passed && diffImage) {\n\n\n      const pngBuffer = PNG.sync.write(diffImage, {\n        filterType: 4\n      });\n      fs.writeFileSync(diffFilename, pngBuffer);\n    }\n  }\n\n  return passed;\n}\n\nfunction saveImageSnapshot(data) {\n  rimraf(data.expected.path);\n  rimraf(data.diff.path);\n  fs.moveSync(data.actual.path, data.expected.path);\n}\n\nmodule.exports = {\n  compareImages,\n  createDiffObject,\n  getImageObject,\n  saveImageSnapshot,\n  moveActualImageToSnapshotsDirectory\n};\n\n'cypress-plugin-snapshots/src/constants.js'\n:module.exports = {\n  DIR_IMAGE_SNAPSHOTS: '__image_snapshots__',\n  DIR_SNAPSHOTS: '__snapshots__',\n  IMAGE_TYPE_DIFF: 'diff',\n  IMAGE_TYPE_ACTUAL: 'actual',\n  NO_LOG: { log: false },\n  URL_PREFIX: '#cypress-plugin-snapshot-',\n}\n\n'cypress-plugin-snapshots/__tests__/plugin.test.js'\n:\nconst configModule = require('../src/config');\n\njest.mock(\"../src/config.js\");\n\njest.spyOn(configModule, 'initConfig')\n  .mockImplementation((config) => config);\n\nglobal.Cypress = {\n  env: () => {},\n  config: () => {},\n  Commands: {\n    add: jest.fn(),\n  },\n};\n\nglobal.cy = {};\n\ndescribe('plugin', () => {\n  it('initPlugin', () => {\n    const globalConfig = {\n      env: {\n        \"cypress-plugin-snapshots\": {\n          \"serverEnabled\": false,\n        }\n      }\n    };\n    jest.spyOn(configModule, 'getConfig')\n      .mockImplementation(() => globalConfig.env['cypress-plugin-snapshots']);\n    const on = jest.fn();\n\n    const { initPlugin } = require('../plugin');\n\n    initPlugin(on, globalConfig);\n    expect(on).toBeCalledTimes(2);\n  });\n});\n\n'cypress-plugin-snapshots/src/utils/image/getSnapshotFilename.js'\n:const path = require('path');\nconst sanitizeFilename = require('sanitize-filename');\nconst { DIR_IMAGE_SNAPSHOTS } = require('../../constants');\n\nfunction getSnapshotFilename(testFile, snapshotTitle, type = '') {\n  const dir = path.join(path.dirname(testFile), DIR_IMAGE_SNAPSHOTS);\n  const fileType = type ? `.${type}` : '';\n  const filename = sanitizeFilename(`${snapshotTitle}${fileType}.png`);\n  return path.join(dir, filename);\n}\n\nmodule.exports = getSnapshotFilename;\n\n'cypress-plugin-snapshots/plugin.js'\n:\nconst { initConfig, CONFIG_KEY } = require('./src/config');\nconst initServer = require('./src/server/initServer');\nconst tasks = require('./src/tasks/');\n\n\nfunction initPlugin(on, globalConfig = {\n}) {\n  const config = initConfig(globalConfig.env[CONFIG_KEY]);\n  initServer(config);\n\n\n\n  globalConfig.env[CONFIG_KEY] = JSON.stringify(config);\n\n  on('before:browser:launch', (browser = {}, launchOptions) => {\n    const args = Array.isArray(launchOptions) ? launchOptions : launchOptions.args;\n\n    if (browser.name === 'chrome') {\n      args.push('--font-render-hinting=medium');\n      args.push('--enable-font-antialiasing');\n      args.push('--disable-gpu');\n    }\n\n    return launchOptions;\n  });\n\n  on('task', tasks);\n}\n\nmodule.exports = {\n  initPlugin\n};\n",
        "gt": [
            "'cypress-plugin-snapshots/src/constants.js'",
            "'cypress-plugin-snapshots/src/utils/image/getSnapshotFilename.js'",
            "'cypress-plugin-snapshots/src/utils/tasks/imageSnapshots.js'",
            "'cypress-plugin-snapshots/src/server/initServer.js'",
            "'cypress-plugin-snapshots/plugin.js'",
            "'cypress-plugin-snapshots/__tests__/plugin.test.js'"
        ]
    },
    {
        "files": [
            "'cypress-plugin-snapshots/src/utils/commands/getTaskData.js'",
            "'cypress-plugin-snapshots/src/commands/index.js'",
            "'cypress-plugin-snapshots/__tests__/commands.test.js'",
            "'cypress-plugin-snapshots/commands.js'",
            "'cypress-plugin-snapshots/src/commands/toMatchImageSnapshot.js'"
        ],
        "content": "'cypress-plugin-snapshots/src/utils/commands/getTaskData.js'\n:const getTestTitle = require('../getTestTitle');\nconst { getSnapshotTitle } = require('../snapshotTitles');\nconst getSpec = require('./getSpec');\nconst {\n  getTestForTask,\n  getSubject,\n  isHtml,\n} = require('./index');\nconst { COMMAND_MATCH_IMAGE_SNAPSHOT } = require('../../commands/commandNames');\nconst { TYPE_IMAGE, TYPE_JSON, TYPE_HTML } = require('../../dataTypes');\n\nfunction isImage(commandName) {\n  return commandName === COMMAND_MATCH_IMAGE_SNAPSHOT;\n}\n\nfunction getDataType({commandName, subject}) {\n  if (isImage(commandName)) {\n    return TYPE_IMAGE;\n  }\n\n  return isHtml(subject) ? TYPE_HTML : TYPE_JSON;\n}\n\nasync function getTaskData({\n    commandName,\n    options,\n    customName,\n    customSeparator,\n    subject: testSubject\n  } = {}) {\n  const subjectIsImage = isImage(commandName);\n  const test = getTestForTask();\n  const testTitle = getTestTitle(test);\n  const spec = await getSpec();\n  const testFile = spec.absolute;\n  const snapshotTitle = getSnapshotTitle(test, customName, customSeparator, subjectIsImage);\n  const subject = subjectIsImage ? testSubject : getSubject(testSubject);\n  const dataType = getDataType({commandName, subject: testSubject});\n\n  return {\n    commandName,\n    dataType,\n    options,\n    snapshotTitle,\n    subject,\n    testFile,\n    testTitle,\n  };\n}\n\nmodule.exports = getTaskData;\n\n'cypress-plugin-snapshots/src/commands/index.js'\n:const toMatchSnapshot = require('./toMatchSnapshot');\nconst toMatchImageSnapshot = require('./toMatchImageSnapshot');\n\nmodule.exports = {\n  toMatchSnapshot,\n  toMatchImageSnapshot,\n}\n\n'cypress-plugin-snapshots/__tests__/commands.test.js'\n:const { initCommands } = require('../commands');\n\nglobal.Cypress = {\n  env: () => ({}),\n  config: () => {},\n  Commands: { add: jest.fn(), },\n  on: () => ({}),\n};\n\nglobal.cy = {};\n\ndescribe('commands', () => {\n  it('initCommands', () => {\n    global.before = jest.fn();\n    global.after = jest.fn();\n    global.cy.task = jest.fn().mockResolvedValue({ passed: true });\n\n    initCommands();\n\n    expect(global.Cypress.Commands.add).toBeCalled();\n    expect(global.Cypress.Commands.add.mock.calls.length).toEqual(2);\n    expect(global.Cypress.Commands.add.mock.calls[0][0]).toEqual('toMatchSnapshot');\n    expect(global.after).toBeCalled();\n    expect(global.before).toBeCalled();\n  });\n});\n\n'cypress-plugin-snapshots/commands.js'\n:\n\nconst {\n  merge,\n  cloneDeep\n} = require('lodash');\nconst { initUi } = require('./src/ui');\nconst commands = require('./src/commands/index');\nconst cleanUpSnapshots = require('./src/utils/commands/cleanupSnapshots');\nconst getConfig = require('./src/utils/commands/getConfig');\nconst { NO_LOG } = require('./src/constants');\n\nfunction addCommand(commandName, method) {\n  Cypress.Commands.add(commandName, {\n    prevSubject: true\n  }, (commandSubject, taskOptions) => {\n    if (!commandSubject) {\n      return commandSubject;\n    }\n\n    const options = merge({}, cloneDeep(getConfig()), taskOptions);\n    return cy.wrap(commandSubject, NO_LOG)\n      .then((subject) => method(subject, options));\n  });\n}\n\nfunction initCommands() {\n\n  getConfig();\n\n\n  before(() => {\n    initUi();\n  });\n\n  function closeSnapshotModal() {\n    try {\n      if (window.top.closeSnapshotModal) {\n        window.top.closeSnapshotModal();\n      }\n    } catch(ex) {\n      window.console.error(ex);\n    }\n  }\n\n  function clearFileCache() {\n    Cypress.__readFileCache__ = {};\n  }\n\n\n  Cypress.on('window:before:unload', () => {\n    closeSnapshotModal()\n    clearFileCache()\n  });\n\n\n  after(() => {\n    cleanUpSnapshots();\n  });\n\n\n  Object.keys(commands).forEach(key => addCommand(key, commands[key]));\n}\n\nmodule.exports = {\n  initCommands,\n};\n\nif (!process.env.JEST_WORKER_ID) {\n  initCommands();\n}\n\n'cypress-plugin-snapshots/src/commands/toMatchImageSnapshot.js'\n:\n\nconst { MATCH_IMAGE } = require('../tasks/taskNames');\nconst getTaskData = require('../utils/commands/getTaskData');\nconst logMessage = require('../utils/commands/logMessage');\nconst { NO_LOG } = require('../constants');\nconst { COMMAND_MATCH_IMAGE_SNAPSHOT: commandName } = require('./commandNames');\nconst getImageData = require('../utils/image/getImageData');\nconst { getImageConfig, getScreenshotConfig, getCustomName, getCustomSeparator } = require('../config');\n\nfunction afterScreenshot(taskData) {\n  return ($el, props) => {\n\n\n    const win = $el.get(0).ownerDocument.defaultView;\n    taskData.image = getImageData(props, win.devicePixelRatio);\n    taskData.isImage = true;\n    delete taskData.subject;\n  };\n}\n\nasync function toMatchImageSnapshot(subject, commandOptions) {\n  const options = getImageConfig(commandOptions);\n  const customName = getCustomName(commandOptions);\n  const customSeparator = getCustomSeparator(commandOptions);\n\n  const taskData = await getTaskData({\n    commandName,\n    options,\n    customName,\n    customSeparator,\n    subject,\n  });\n\n  const screenShotConfig = getScreenshotConfig(commandOptions);\n  const afterScreenshotFn = afterScreenshot(taskData);\n  if (screenShotConfig.onAfterScreenshot) {\n    const afterScreenshotCallback = screenShotConfig.onAfterScreenshot;\n    screenShotConfig.onAfterScreenshot = (...args) => {\n      afterScreenshotFn.apply(this, args);\n      afterScreenshotCallback.apply(this, args);\n    }\n  } else {\n    screenShotConfig.onAfterScreenshot = afterScreenshotFn;\n  }\n\n  return cy.wrap(subject, NO_LOG)\n    .screenshot(taskData.snapshotTitle, screenShotConfig)\n    .then(() => cy.task(\n        MATCH_IMAGE,\n        taskData,\n        NO_LOG\n      ).then(logMessage)\n    );\n}\n\nmodule.exports = toMatchImageSnapshot;\n",
        "gt": [
            "'cypress-plugin-snapshots/src/utils/commands/getTaskData.js'",
            "'cypress-plugin-snapshots/src/commands/toMatchImageSnapshot.js'",
            "'cypress-plugin-snapshots/src/commands/index.js'",
            "'cypress-plugin-snapshots/commands.js'",
            "'cypress-plugin-snapshots/__tests__/commands.test.js'"
        ]
    },
    {
        "files": [
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/specs/index.js'",
            "'react-modal/src/helpers/classList.js'",
            "'react-modal/specs/helper.js'"
        ],
        "content": "'react-modal/specs/Modal.testability.spec.js'\n:\nimport ReactDOM from \"react-dom\";\nimport sinon from \"sinon\";\nimport { withModal } from \"./helper\";\n\nexport default () => {\n  it(\"allows ReactDOM.createPortal to be overridden in real-time\", () => {\n    const createPortalSpy = sinon.spy(ReactDOM, \"createPortal\");\n    const props = { isOpen: true };\n    withModal(props, \"hello\");\n    createPortalSpy.called.should.be.ok();\n    ReactDOM.createPortal.restore();\n  });\n};\n\n'react-modal/specs/index.js'\n:\n\nimport ModalState from \"./Modal.spec\";\nimport ModalEvents from \"./Modal.events.spec\";\nimport ModalStyle from \"./Modal.style.spec\";\nimport ModalHelpers from \"./Modal.helpers.spec\";\nimport ModalTestability from \"./Modal.testability.spec\";\n\ndescribe(\"State\", ModalState);\ndescribe(\"Style\", ModalStyle);\ndescribe(\"Events\", ModalEvents);\ndescribe(\"Helpers\", ModalHelpers);\ndescribe(\"Testability\", ModalTestability);\n\n'react-modal/src/helpers/classList.js'\n:let htmlClassList = {};\nlet docBodyClassList = {};\n\n\n\nfunction removeClass(at, cls) {\n  at.classList.remove(cls);\n}\n\n\nexport function resetState() {\n  const htmlElement = document.getElementsByTagName(\"html\")[0];\n  for (let cls in htmlClassList) {\n    removeClass(htmlElement, htmlClassList[cls]);\n  }\n\n  const body = document.body;\n  for (let cls in docBodyClassList) {\n    removeClass(body, docBodyClassList[cls]);\n  }\n\n  htmlClassList = {};\n  docBodyClassList = {};\n}\n\n\nexport function log() {\n  if (process.env.NODE_ENV !== \"production\") {\n    let classes = document.getElementsByTagName(\"html\")[0].className;\n    let buffer = \"Show tracked classes:\\n\\n\";\n\n    buffer += `<html /> (${classes}):\n  `;\n    for (let x in htmlClassList) {\n      buffer += `  ${x} ${htmlClassList[x]}\n  `;\n    }\n\n    classes = document.body.className;\n\n    buffer += `\\n\\ndoc.body (${classes}):\n  `;\n    for (let x in docBodyClassList) {\n      buffer += `  ${x} ${docBodyClassList[x]}\n  `;\n    }\n\n    buffer += \"\\n\";\n\n    console.log(buffer);\n  }\n}\n\n\n\nconst incrementReference = (poll, className) => {\n  if (!poll[className]) {\n    poll[className] = 0;\n  }\n  poll[className] += 1;\n  return className;\n};\n\n\nconst decrementReference = (poll, className) => {\n  if (poll[className]) {\n    poll[className] -= 1;\n  }\n  return className;\n};\n\n\nconst trackClass = (classListRef, poll, classes) => {\n  classes.forEach(className => {\n    incrementReference(poll, className);\n    classListRef.add(className);\n  });\n};\n\n\nconst untrackClass = (classListRef, poll, classes) => {\n  classes.forEach(className => {\n    decrementReference(poll, className);\n    poll[className] === 0 && classListRef.remove(className);\n  });\n};\n\n\nexport const add = (element, classString) =>\n  trackClass(\n    element.classList,\n    element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList,\n    classString.split(\" \")\n  );\n\n\nexport const remove = (element, classString) =>\n  untrackClass(\n    element.classList,\n    element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList,\n    classString.split(\" \")\n  );\n\n'react-modal/specs/helper.js'\n:import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Modal, { bodyOpenClassName } from \"../src/components/Modal\";\nimport TestUtils from \"react-dom/test-utils\";\nimport { log as classListLog } from \"../src/helpers/classList\";\nimport { log as focusManagerLog } from \"../src/helpers/focusManager\";\nimport { log as ariaAppLog } from \"../src/helpers/ariaAppHider\";\nimport { log as bodyTrapLog } from \"../src/helpers/bodyTrap\";\nimport { log as portalInstancesLog } from \"../src/helpers/portalOpenInstances\";\n\nconst debug = false;\n\nlet i = 0;\n\n\nexport function log(label, spaces) {\n  if (!debug) return;\n\n  console.log(`${label} -----------------`);\n  console.log(document.body.children.length);\n  const logChildren = c => console.log(c.nodeName, c.className, c.id);\n  document.body.children.forEach(logChildren);\n\n  ariaAppLog();\n  bodyTrapLog();\n  classListLog();\n  focusManagerLog();\n  portalInstancesLog();\n\n  console.log(`end ${label} -----------------` + (!spaces ? '' : `\n\n\n`));\n}\n\nlet elementPool = [];\n\n\nexport function createHTMLElement(name) {\n  const e = document.createElement(name);\n  elementPool[elementPool.length - 1].push(e);\n  e.className = `element_pool_${name}-${++i}`;\n  return e;\n}\n\n\nexport function drainPool(pool) {\n  pool.forEach(e => e.parentNode && e.parentNode.removeChild(e));\n}\n\n\nexport function withElementCollector(work) {\n  let r;\n  let poolIndex = elementPool.length;\n  elementPool[poolIndex] = [];\n  try {\n    r = work();\n  } finally {\n    drainPool(elementPool[poolIndex]);\n    elementPool = elementPool.slice(\n      0, poolIndex\n    );\n  }\n  return r;\n}\n\n\nif (!String.prototype.includes) {\n  String.prototype.includes = function(search, start) {\n    if (typeof start !== \"number\") {\n      start = 0;\n    }\n\n    if (start + search.length > this.length) {\n      return false;\n    }\n\n    return this.indexOf(search, start) !== -1;\n  };\n}\n\n\nexport const documentClassList = () => document.body.classList;\n\n\nexport const isDocumentWithReactModalOpenClass = (\n  bodyClass = bodyOpenClassName\n) => document.body.className.includes(bodyClass);\n\n\nexport const htmlClassList = () =>\n  document.getElementsByTagName(\"html\")[0].classList;\n\n\nexport const isHtmlWithReactModalOpenClass = htmlClass =>\n  htmlClassList().contains(htmlClass);\n\n\nexport const findDOMWithClass = TestUtils.findRenderedDOMComponentWithClass;\n\n\nconst getModalAttribute = component => (instance, attr) =>\n  modalComponent(component)(instance).getAttribute(attr);\n\n\nconst modalComponent = component => instance => instance.portal[component];\n\n\nexport const mcontent = modalComponent(\"content\");\n\n\nexport const moverlay = modalComponent(\"overlay\");\n\n\nexport const contentAttribute = getModalAttribute(\"content\");\n\n\nexport const overlayAttribute = getModalAttribute(\"overlay\");\n\nconst Simulate = TestUtils.Simulate;\n\nconst dispatchMockEvent = eventCtor => (key, code) => (element, opts) =>\n  eventCtor(\n    element,\n    Object.assign(\n      {},\n      {\n        key: key,\n        which: code\n      },\n      code,\n      opts\n    )\n  );\n\nconst dispatchMockKeyDownEvent = dispatchMockEvent(Simulate.keyDown);\n\n\nexport const escKeyDown = dispatchMockKeyDownEvent(\"ESC\", { keyCode: 27 });\n\nexport const escKeyDownWithCode = dispatchMockKeyDownEvent(\"ESC\", {\n  code: \"Escape\"\n});\n\nexport const tabKeyDown = dispatchMockKeyDownEvent(\"TAB\", { keyCode: 9 });\n\nexport const tabKeyDownWithCode = dispatchMockKeyDownEvent(\"TAB\", {\n  code: \"Tab\"\n});\n\nexport const clickAt = Simulate.click;\n\nexport const mouseUpAt = Simulate.mouseUp;\n\nexport const mouseDownAt = Simulate.mouseDown;\n\nexport const noop = () => {};\n\n\nexport const withModal = function(props, children, test = noop) {\n  return withElementCollector(() => {\n    const node = createHTMLElement();\n    const modalProps = { ariaHideApp: false, ...props };\n    let modal;\n    try {\n      ReactDOM.render(\n        <Modal ref={m => (modal = m)} {...modalProps}>\n          {children}\n        </Modal>,\n        node\n      );\n      test(modal);\n    } finally {\n      ReactDOM.unmountComponentAtNode(node);\n    }\n  });\n};\n",
        "gt": [
            "'react-modal/src/helpers/classList.js'",
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/specs/index.js'"
        ]
    },
    {
        "files": [
            "'cls-rtracer/samples/express.pino.js'",
            "'cls-rtracer/src/rtracer.js'",
            "'cls-rtracer/index.js'",
            "'cls-rtracer/src/util.js'"
        ],
        "content": "'cls-rtracer/samples/express.pino.js'\n:'use strict'\n\nconst rTracer = require('../index')\n\n\n\nconst logger = require('pino')({\n  mixin () {\n    return { requestId: rTracer.id() }\n  }\n})\n\n\n\nconst express = require('express')\n\nconst app = express()\napp.use(rTracer.expressMiddleware())\n\napp.get('/', function (req, res) {\n  logger.info('Starting request handling')\n  fakeDbAccess()\n    .then((result) => res.json(result))\n})\n\nasync function fakeDbAccess () {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      logger.info('Logs from fakeDbAccess')\n      resolve({ message: 'Hello from cls-rtracer Express example' })\n    }, 0)\n  })\n}\n\napp.listen(3000, (err) => {\n  if (err) {\n    logger.error('The app could not start')\n  }\n  logger.info('The app is listening on 3000')\n})\n\n'cls-rtracer/src/rtracer.js'\n:'use strict'\n\nconst { wrapEmitter } = require('./util')\nconst { v1: uuidv1 } = require('uuid')\nconst { AsyncLocalStorage, AsyncResource } = require('async_hooks')\n\nconst pluginName = 'cls-rtracer'\n\nconst als = new AsyncLocalStorage()\n\nconst wrapHttpEmitters = (req, res) => {\n  const asyncResource = new AsyncResource('cls-rtracer')\n  wrapEmitter(req, asyncResource)\n  wrapEmitter(res, asyncResource)\n}\n\nconst expressSetResHeaderFn = (res, headerName, requestId) => {\n  res.set(headerName, requestId)\n}\nconst fastifySetResHeaderFn = (res, headerName, requestId) => {\n  res.setHeader(headerName, requestId)\n}\n\n\nconst expressMiddleware = (setResHeaderFn) => {\n\n  return ({\n    useHeader = false,\n    headerName = 'X-Request-Id',\n    requestIdFactory = uuidv1,\n    echoHeader = false\n  } = {}) => {\n    return (req, res, next) => {\n      let requestId\n      if (useHeader) {\n        requestId = req.headers[headerName.toLowerCase()]\n      }\n      requestId = requestId || requestIdFactory(req)\n\n      if (echoHeader) {\n        setResHeaderFn(res, headerName, requestId)\n      }\n\n      als.run(requestId, () => {\n        wrapHttpEmitters(req, res)\n        next()\n      })\n    }\n  }\n}\n\n\nconst fastifyPlugin = (fastify, options, next) => {\n  const {\n    useHeader = false,\n    headerName = 'X-Request-Id',\n    useFastifyRequestId = false,\n    requestIdFactory = uuidv1,\n    echoHeader = false\n  } = options\n\n  fastify.addHook('onRequest', (request, reply, done) => {\n    let requestId\n    if (useHeader) {\n      requestId = request.headers[headerName.toLowerCase()]\n    }\n    if (useFastifyRequestId) {\n      requestId = requestId || request.id\n    }\n    requestId = requestId || requestIdFactory(request)\n\n    if (echoHeader) {\n      reply.header(headerName, requestId)\n    }\n\n    als.run(requestId, () => {\n      wrapHttpEmitters(request.raw, reply.raw || reply.res)\n      done()\n    })\n  })\n  next()\n}\n\nfastifyPlugin[Symbol.for('skip-override')] = true\nfastifyPlugin[Symbol.for('fastify.display-name')] = pluginName\n\n\nconst koaMiddleware = ({\n  useHeader = false,\n  headerName = 'X-Request-Id',\n  requestIdFactory = uuidv1,\n  echoHeader = false\n} = {}) => {\n  return (ctx, next) => {\n    let requestId\n    if (useHeader) {\n      requestId = ctx.request.headers[headerName.toLowerCase()]\n    }\n    requestId = requestId || requestIdFactory(ctx.request)\n\n    if (echoHeader) {\n      ctx.set(headerName, requestId)\n    }\n\n    return als.run(requestId, () => {\n      wrapHttpEmitters(ctx.req, ctx.res)\n      return next()\n    })\n  }\n}\n\n\nconst koaV1Middleware = ({\n  useHeader = false,\n  headerName = 'X-Request-Id',\n  requestIdFactory = uuidv1,\n  echoHeader = false\n} = {}) => {\n  return function * (next) {\n    let requestId\n    if (useHeader) {\n      requestId = this.request.headers[headerName.toLowerCase()]\n    }\n    requestId = requestId || requestIdFactory(this.request)\n\n    if (echoHeader) {\n      this.response.set(headerName, requestId)\n    }\n\n    als.enterWith(requestId)\n    try {\n      wrapHttpEmitters(this.req, this.res)\n      yield next\n    } finally {\n      als.enterWith(undefined)\n    }\n  }\n}\n\n\nconst hapiPlugin = ({\n  name: pluginName,\n  once: true,\n  register: async (server, options) => {\n    const {\n      useHeader = false,\n      headerName = 'X-Request-Id',\n      requestIdFactory = uuidv1,\n      echoHeader = false\n    } = options\n\n    server.ext('onRequest', (request, h) => {\n      let requestId\n      if (useHeader) {\n        requestId = request.headers[headerName.toLowerCase()]\n      }\n      requestId = requestId || requestIdFactory(request)\n\n      als.enterWith(requestId)\n      wrapHttpEmitters(request.raw.req, request.raw.res)\n\n      return h.continue\n    })\n\n    if (echoHeader) {\n      server.ext('onPreResponse', async (request, h) => {\n        if (request.response.output) {\n          request.response.output.headers[headerName] = id()\n        } else {\n          request.response.header(headerName, id())\n        }\n        return h.continue\n      })\n    }\n\n    server.events.on('response', () => {\n      als.enterWith(undefined)\n    })\n  }\n})\n\n\nconst runWithId = (fn, id) => {\n  id = id || uuidv1()\n  return als.run(id, fn)\n}\n\n\nconst id = () => als.getStore()\n\nmodule.exports = {\n  expressMiddleware: expressMiddleware(expressSetResHeaderFn),\n  fastifyPlugin,\n  fastifyMiddleware: expressMiddleware(fastifySetResHeaderFn),\n  koaMiddleware,\n  koaV1Middleware,\n  hapiPlugin,\n  runWithId,\n  id\n}\n\n'cls-rtracer/index.js'\n:'use strict'\n\nconst {\n  expressMiddleware,\n  fastifyPlugin,\n  fastifyMiddleware,\n  koaMiddleware,\n  koaV1Middleware,\n  hapiPlugin,\n  runWithId,\n  id\n} = require('./src/rtracer')\n\nmodule.exports = {\n  expressMiddleware,\n  fastifyPlugin,\n  fastifyMiddleware,\n  koaMiddleware,\n  koaV1Middleware,\n  hapiPlugin,\n  runWithId,\n  id\n}\n\n'cls-rtracer/src/util.js'\n:'use strict'\n\nconst isWrappedSymbol = Symbol('cls-rtracer-is-wrapped')\nconst wrappedSymbol = Symbol('cls-rtracer-wrapped-function')\n\nfunction wrapEmitterMethod (emitter, method, wrapper) {\n  if (emitter[method][isWrappedSymbol]) {\n    return\n  }\n\n  const original = emitter[method]\n  const wrapped = wrapper(original)\n  wrapped[isWrappedSymbol] = true\n  emitter[method] = wrapped\n\n  return wrapped\n}\n\nconst addMethods = [\n  'on',\n  'addListener',\n  'prependListener'\n]\n\nconst removeMethods = [\n  'off',\n  'removeListener'\n]\n\n\nfunction wrapEmitter (emitter, asyncResource) {\n  for (const method of addMethods) {\n    wrapEmitterMethod(emitter, method, (original) => function (event, handler) {\n      let wrapped = emitter[wrappedSymbol]\n      if (wrapped === undefined) {\n        wrapped = {}\n        emitter[wrappedSymbol] = wrapped\n      }\n      const wrappedHandler = asyncResource.runInAsyncScope.bind(asyncResource, handler, emitter)\n      const existing = wrapped[event]\n      if (existing === undefined) {\n        wrapped[event] = wrappedHandler\n      } else if (typeof existing === 'function') {\n        wrapped[event] = [existing, wrappedHandler]\n      } else {\n        wrapped[event].push(wrappedHandler)\n      }\n      return original.call(this, event, wrappedHandler)\n    })\n  }\n\n  for (const method of removeMethods) {\n    wrapEmitterMethod(emitter, method, (original) => function (event, handler) {\n      let wrappedHandler\n      const wrapped = emitter[wrappedSymbol]\n      if (wrapped !== undefined) {\n        const existing = wrapped[event]\n        if (existing !== undefined) {\n          if (typeof existing === 'function') {\n            wrappedHandler = existing\n            delete wrapped[event]\n          } else {\n            wrappedHandler = existing.pop()\n          }\n        }\n      }\n      return original.call(this, event, wrappedHandler || handler)\n    })\n  }\n}\n\nmodule.exports = {\n  wrapEmitter\n}\n",
        "gt": [
            "'cls-rtracer/src/util.js'",
            "'cls-rtracer/src/rtracer.js'",
            "'cls-rtracer/index.js'",
            "'cls-rtracer/samples/express.pino.js'"
        ]
    },
    {
        "files": [
            "'ruui/examples/legacy/routes.js'",
            "'ruui/examples/legacy/scenes/welcome.js'",
            "'ruui/examples/legacy/store/reducers/index.js'",
            "'ruui/examples/legacy/store/action/app.js'"
        ],
        "content": "'ruui/examples/legacy/routes.js'\n:import Intro from './scenes/intro';\nimport Welcome from './scenes/welcome';\nimport Login from './scenes/login';\n\nexport default {\n\tIndex: {\n\t\tcomponent: Welcome,\n\t},\n\tWelcome: {\n\t\tcomponent: Intro,\n\t},\n\tLogin: {\n\t\tcomponent: Login,\n\t},\n};\n'ruui/examples/legacy/scenes/welcome.js'\n:import React, { Component } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { connect } from 'react-redux';\nimport Icon from 'universal-vector-icons/Ionicons';\n\nimport { DropdownContainer, Button, Input, Select, Slider, appAction, routeAction } from '../../../src';\nimport GreetingModal from '../modal/greeting';\nimport GoodByeModal from '../modal/goodbye';\nimport ContextMenu from '../modal/contextMenu';\nimport * as appActions from '../store/action/app';\n\ntype Props = {\n\tdispatch?: Function,\n\tcounter?: number,\n\tnetInfo?: Object,\n\tdimensions?: Object,\n};\n\n@connect(({ app }) => {\n\treturn {\n\t\tcounter: app.counter,\n\t\tnetInfo: app.netInfo,\n\t\tdimensions: app.dimensions,\n\t};\n})\n\nexport default class app extends Component {\n\tprops: Props;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactiveSelect: selects[0],\n\t\t\tsliderValue: 0.5,\n\t\t\tbuttonLayout: {},\n\t\t};\n\t}\n\n\trender() {\n\t\treturn <View style={styles.container}>\n\t\t\t<View style={{ flexDirection: 'row', }}>\n\t\t\t\t<View style={{ flex: 1, flexBasis: 0, }}>\n\t\t\t\t\t<Input forceFloating floatingLabel=\"Hello\"/>\n\t\t\t\t</View>\n\t\t\t\t<View style={{ flex: 1, flexBasis: 0, }}>\n\t\t\t\t\t<Select\n\t\t\t\t\t\toptions={selects}\n\t\t\t\t\t\tvalue={this.state.activeSelect}\n\t\t\t\t\t\tonSelect={next => this.setState({ activeSelect: next })}/>\n\t\t\t\t</View>\n\t\t\t</View>\n\n\t\t\t<View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\n\t\t\t\t<Text style={styles.welcome}>\n\t\t\t\t\tWelcome to React Native!!\n\t\t\t\t</Text>\n\t\t\t\t<Text style={styles.instructions}>\n\t\t\t\t\tTo get started, edit src/app.js\n\t\t\t\t</Text>\n\t\t\t\t<Text style={styles.instructions}>\n\t\t\t\t\tPress Cmd+R to reload,{'\\n'}\n\t\t\t\t\tCmd+D or shake for dev menu{'\\n'}\n\t\t\t\t\t{JSON.stringify(this.props.dimensions)}\n\t\t\t\t</Text>\n\t\t\t\t<View\n\t\t\t\t\tonLayout={({ nativeEvent }) => { this.setState({ buttonLayout: nativeEvent.layout }); }}\n\t\t\t\t\tstyle={{ width: 200, height: 50, }}>\n\t\t\t\t\t<Slider\n\t\t\t\t\t\tvalue={this.state.sliderValue}\n\t\t\t\t\t\tonValueChange={value => this.setState({ sliderValue: value })} />\n\t\t\t\t</View>\n\t\t\t\t<Button\n\t\t\t\t\twrapperStyle={{ backgroundColor: '#00bcd4', width: 120, }}\n\t\t\t\t\ttooltip=\"Welcome to tooltip world, this is a very very very very very very very long content..\"\n\t\t\t\t\ttooltipDirection=\"top-left\"\n\t\t\t\t\ttitle=\"Click me!\" onLongPress={() => {\n\n\t\t\t\t\t\tthis.props.dispatch(appAction.insertSnackBar({\n\t\t\t\t\t\t\tmessage: 'Snackbar content..',\n\t\t\t\t\t\t}));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t\t\t}}/>\n\t\t\t\t<DropdownContainer\n\t\t\t\t\tdropdownWrapperStyle={{ width: 200, borderRadius: 5, }}\n\t\t\t\t\tdropdownComponent={ContextMenu}\n\t\t\t\t\tdropdownDirection=\"left-top\"\n\t\t\t\t\tdropdownContext={{ name: 'Cloud' }}>\n\t\t\t\t\t<Text>Drop</Text>\n\t\t\t\t</DropdownContainer>\n\t\t\t</View>\n\t\t</View>;\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\n\n\t},\n\twelcome: {\n\t\tfontSize: 20,\n\t\ttextAlign: 'center',\n\t\tmargin: 10,\n\t},\n\tinstructions: {\n\t\ttextAlign: 'center',\n\t\tcolor: '#333333',\n\t\tmarginBottom: 5,\n\t},\n});\n\nconst selects = [{\n\ttitle: 'Selection 1',\n}, {\n\ttitle: 'Selection 2',\n}, {\n\ttitle: 'Selection 3',\n}, {\n\ttitle: 'Selection 4',\n}];\n\n'ruui/examples/legacy/store/reducers/index.js'\n:import { combineReducers } from 'redux';\n\nimport appReducer from './app';\nimport { routeReducer } from '../../../../src';\nimport routeConfigs from '../../routes';\n\nconst initialRouterState = {\n\n};\n\nconst routerReducer = routeReducer(\n\trouteConfigs,\n\t(state = initialRouterState, action) => {\n\t\tswitch (action.type) {\n\t\tdefault:\n\t\t\treturn state;\n\t\t}\n\t}\n);\n\nexport default combineReducers({\n\tapp: appReducer,\n\trouter: routerReducer,\n});\n'ruui/examples/legacy/store/action/app.js'\n:import * as Actions from '../actions';\n\nexport function increaseCounter(volume = 1) {\n\treturn { type: Actions.IncreaseCounter, volume };\n}",
        "gt": [
            "'ruui/examples/legacy/store/action/app.js'",
            "'ruui/examples/legacy/scenes/welcome.js'",
            "'ruui/examples/legacy/routes.js'",
            "'ruui/examples/legacy/store/reducers/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/cli/addons/ssr/src/server/index.js'",
            "'ruui/cli/addons/ssr/src/index.js'",
            "'ruui/cli/addons/ssr/src/routes.js'"
        ],
        "content": "'ruui/cli/addons/ssr/src/server/index.js'\n:import React from 'react';\nimport { Router } from 'express';\nimport { AppRegistry } from 'react-native';\nimport reactDom from 'react-dom/server';\nimport { ServerContainer, } from '@react-navigation/native';\nimport { configs as cliConfigs, ssrUtils } from 'react-universal-ui/cli';\nimport App from '../index';\nimport routes from '../routes';\n\nconst router = Router();\nAppRegistry.registerComponent(cliConfigs.appJson.name, () => App);\n\n\nrouter.use('*', (req, res, next) => {\n\tconst { ruui, paths, appJson, ruuiJson, } = cliConfigs;\n\tconst env = ruui.env();\n\tconst isProduction = env === 'production';\n\tconst publicPath = ruui.publicPath(env);\n\tconst location = new URL(req.baseUrl, 'http:\n\tconst initialProps = { ssrLocation: req.baseUrl, ssrContext: {} };\n\tconst ref = React.createRef();\n\tconst { element, getStyleElement, } = AppRegistry.getApplication(appJson.name, { initialProps, rootTag: 'root' });\n\tconst wrappedElement = <ServerContainer ref={ref} location={location}>{element}</ServerContainer>;\n\tconst initialHtml = reactDom.renderToString(wrappedElement);\n\tconst initialStyles = reactDom.renderToStaticMarkup(getStyleElement());\n\tconst pageTemplate = paths.getEjsTemplate();\n\tconst options = ref.current?.getCurrentOptions();\n\n\tres.render(pageTemplate, {\n\t\tssrContext: {\n\t\t\tinitialHtml,\n\t\t\tinitialStyles,\n\t\t\tserverSide: true,\n\t\t\tappName: options.title || appJson.displayName || appJson.name,\n\t\t\tpublicPath,\n\t\t\tbuildId: ruuiJson.buildId,\n\t\t\tisProduction, ...ruui.ejsTemplate,\n\t\t},\n\t});\n});\n\nmodule.exports = {\n\trouter,\n\thydrate: () => ssrUtils.hydrate(AppRegistry, reactDom, routes),\n};\n\n'ruui/cli/addons/ssr/src/index.js'\n:import React from 'react';\nimport { View, StyleSheet, } from 'react-native';\nimport { RuuiProvider, Tooltip } from 'react-universal-ui';\nimport { Provider, } from 'react-redux';\nimport { NavigationContainer, } from '@react-navigation/native';\nimport { createStackNavigator, } from '@react-navigation/stack';\n\nimport { ruuiStore, appStore } from 'store';\nimport WelcomeScreen from './welcome';\nimport HomeScreen from './home';\nimport { routeConfig, } from './routes';\n\nconst Stack = createStackNavigator();\nconst linking = { config: routeConfig, };\n\ntype Props = {\n\n};\n\nconst App = (props: Props) => {\n\treturn <NavigationContainer linking={linking}>\n\t\t<Stack.Navigator headerMode=\"none\">\n\t\t\t<Stack.Screen name=\"Welcome\" component={WelcomeScreen}/>\n\t\t\t<Stack.Screen name=\"Home\" component={HomeScreen}/>\n\t\t</Stack.Navigator>\n\t</NavigationContainer>;\n};\n\nconst AppContainer = (props) => {\n\treturn <RuuiProvider store={ruuiStore}>\n\t\t<Provider store={appStore}>\n\t\t\t<App/>\n\t\t\t<Tooltip/>\n\t\t</Provider>\n\t</RuuiProvider>;\n}\n\nexport default AppContainer;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n});\n\n'ruui/cli/addons/ssr/src/routes.js'\n:export const routeConfig = {\n\tscreens: {\n\t\tWelcome: '/',\n\t\tHome: 'home',\n\t\tnf: '*',\n\t},\n};\n",
        "gt": [
            "'ruui/cli/addons/ssr/src/routes.js'",
            "'ruui/cli/addons/ssr/src/index.js'",
            "'ruui/cli/addons/ssr/src/server/index.js'"
        ]
    },
    {
        "files": [
            "'cypress-plugin-snapshots/src/commands/toMatchSnapshot.js'",
            "'cypress-plugin-snapshots/src/commands/index.js'",
            "'cypress-plugin-snapshots/commands.js'",
            "'cypress-plugin-snapshots/__tests__/commands.test.js'",
            "'cypress-plugin-snapshots/src/utils/commands/logMessage.js'"
        ],
        "content": "'cypress-plugin-snapshots/src/commands/toMatchSnapshot.js'\n:\n\nconst { MATCH_TEXT } = require('../tasks/taskNames');\nconst getTaskData = require('../utils/commands/getTaskData');\nconst logMessage = require('../utils/commands/logMessage');\nconst { NO_LOG } = require('../constants');\nconst { COMMAND_MATCH_SNAPSHOT: commandName } = require('./commandNames');\n\nfunction toMatchSnapshot(subject, options) {\n  return getTaskData({\n      commandName,\n      options,\n      subject,\n    }).then(taskData => cy.task(\n        MATCH_TEXT,\n        taskData,\n        NO_LOG\n      ).then(logMessage)\n    );\n}\n\nmodule.exports = toMatchSnapshot;\n\n'cypress-plugin-snapshots/src/commands/index.js'\n:const toMatchSnapshot = require('./toMatchSnapshot');\nconst toMatchImageSnapshot = require('./toMatchImageSnapshot');\n\nmodule.exports = {\n  toMatchSnapshot,\n  toMatchImageSnapshot,\n}\n\n'cypress-plugin-snapshots/commands.js'\n:\n\nconst {\n  merge,\n  cloneDeep\n} = require('lodash');\nconst { initUi } = require('./src/ui');\nconst commands = require('./src/commands/index');\nconst cleanUpSnapshots = require('./src/utils/commands/cleanupSnapshots');\nconst getConfig = require('./src/utils/commands/getConfig');\nconst { NO_LOG } = require('./src/constants');\n\nfunction addCommand(commandName, method) {\n  Cypress.Commands.add(commandName, {\n    prevSubject: true\n  }, (commandSubject, taskOptions) => {\n    if (!commandSubject) {\n      return commandSubject;\n    }\n\n    const options = merge({}, cloneDeep(getConfig()), taskOptions);\n    return cy.wrap(commandSubject, NO_LOG)\n      .then((subject) => method(subject, options));\n  });\n}\n\nfunction initCommands() {\n\n  getConfig();\n\n\n  before(() => {\n    initUi();\n  });\n\n  function closeSnapshotModal() {\n    try {\n      if (window.top.closeSnapshotModal) {\n        window.top.closeSnapshotModal();\n      }\n    } catch(ex) {\n      window.console.error(ex);\n    }\n  }\n\n  function clearFileCache() {\n    Cypress.__readFileCache__ = {};\n  }\n\n\n  Cypress.on('window:before:unload', () => {\n    closeSnapshotModal()\n    clearFileCache()\n  });\n\n\n  after(() => {\n    cleanUpSnapshots();\n  });\n\n\n  Object.keys(commands).forEach(key => addCommand(key, commands[key]));\n}\n\nmodule.exports = {\n  initCommands,\n};\n\nif (!process.env.JEST_WORKER_ID) {\n  initCommands();\n}\n\n'cypress-plugin-snapshots/__tests__/commands.test.js'\n:const { initCommands } = require('../commands');\n\nglobal.Cypress = {\n  env: () => ({}),\n  config: () => {},\n  Commands: { add: jest.fn(), },\n  on: () => ({}),\n};\n\nglobal.cy = {};\n\ndescribe('commands', () => {\n  it('initCommands', () => {\n    global.before = jest.fn();\n    global.after = jest.fn();\n    global.cy.task = jest.fn().mockResolvedValue({ passed: true });\n\n    initCommands();\n\n    expect(global.Cypress.Commands.add).toBeCalled();\n    expect(global.Cypress.Commands.add.mock.calls.length).toEqual(2);\n    expect(global.Cypress.Commands.add.mock.calls[0][0]).toEqual('toMatchSnapshot');\n    expect(global.after).toBeCalled();\n    expect(global.before).toBeCalled();\n  });\n});\n\n'cypress-plugin-snapshots/src/utils/commands/logMessage.js'\n:const { Base64 } = require('js-base64');\nconst { cloneDeep } = require('lodash');\nconst { URL_PREFIX } = require('../../constants');\nconst { TYPE_IMAGE } = require('../../dataTypes');\n\nfunction getErrorMessage(result) {\n  if (result.dataType === TYPE_IMAGE) {\n    return `Snapshot images do not match.`;\n  }\n\n  return `Snapshots do not match:\\n${result.diff}`;\n}\n\nfunction cleanupImage(image) {\n  if (image) {\n    image.path = image.relativePath;\n    delete image.relativePath;\n  }\n}\n\nfunction getLogMessage(result) {\n  const linkResult = cloneDeep(result);\n  if (linkResult.isImage) {\n    cleanupImage(linkResult.actual);\n    cleanupImage(linkResult.expected);\n    cleanupImage(linkResult.diff);\n  }\n\n  const args = Base64.encode(JSON.stringify(linkResult));\n  const expectedMessage = result.expected ? 'Snapshots match' : 'Snapshot created, autopassed';\n  const passedMessage = result.updated ? 'Snapshot updated' : expectedMessage;\n  const message = result.passed || result.updated ?\n    `[${passedMessage}](${URL_PREFIX}${args})` :\n    `[compare snapshot](${URL_PREFIX}${args})`;\n\n  return message;\n}\n\nfunction logMessage(result) {\n  const { subject } = result;\n  const message = getLogMessage(result);\n  const log = Cypress.log({\n    $el: subject,\n    name: result.commandName,\n    displayName: 'snapshot',\n    message,\n    consoleProps: () => result,\n  });\n\n  if (!result.passed) {\n    const updated = result.updated === true;\n\n    if (updated) {\n      log.set('state', 'pending');\n      log.set('ended', true);\n    } else {\n      log.set('state', 'failed');\n\n      const errorMessage = getErrorMessage(result);\n      throw new Error(errorMessage);\n    }\n  }\n\n  return subject;\n}\n\nmodule.exports = logMessage;\n",
        "gt": [
            "'cypress-plugin-snapshots/src/utils/commands/logMessage.js'",
            "'cypress-plugin-snapshots/src/commands/toMatchSnapshot.js'",
            "'cypress-plugin-snapshots/src/commands/index.js'",
            "'cypress-plugin-snapshots/commands.js'",
            "'cypress-plugin-snapshots/__tests__/commands.test.js'"
        ]
    },
    {
        "files": [
            "'ruui/cli/addons/ssr/src/home.js'",
            "'ruui/cli/addons/ssr/src/server/index.js'",
            "'ruui/cli/addons/ssr/src/index.js'"
        ],
        "content": "'ruui/cli/addons/ssr/src/home.js'\n:import React from 'react';\nimport { StyleSheet, View, Text, } from 'react-native';\n\nimport { INavigation, IRoute, } from 'typeDefinitions';\n\ntype Props = {\n\tnavigation?: INavigation,\n\troute?: IRoute,\n};\n\nconst Home = (props: Props) => {\n\tconst { navigation, route, } = props;\n\n\treturn <View style={styles.container}>\n\t\t<Text style={styles.welcome}>Universal Navigation powered</Text>\n\t\t<Text style={styles.instructions}>\n\t\t\tedit src/home.js to update this screen\n\t\t</Text>\n\t\t<Text\n\t\t\tstyle={styles.link}\n\t\t\tonPress={() => navigation.navigate('Welcome')}>\n\t\t\tback to Welcome\n\t\t</Text>\n\t</View>;\n};\n\nexport default Home;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\twelcome: {\n\t\tfontSize: 20,\n\t\ttextAlign: 'center',\n\t\tmargin: 10,\n\t},\n\tinstructions: {\n\t\ttextAlign: 'center',\n\t\tcolor: '#333333',\n\t\tmarginBottom: 5,\n\t},\n\tlink: {\n\t\tmarginTop: 18,\n\t\tcolor: '#00bcd4',\n\t\ttextDecorationLine: 'underline',\n\t\tcursor: 'pointer',\n\t},\n});\n\n'ruui/cli/addons/ssr/src/server/index.js'\n:import React from 'react';\nimport { Router } from 'express';\nimport { AppRegistry } from 'react-native';\nimport reactDom from 'react-dom/server';\nimport { ServerContainer, } from '@react-navigation/native';\nimport { configs as cliConfigs, ssrUtils } from 'react-universal-ui/cli';\nimport App from '../index';\nimport routes from '../routes';\n\nconst router = Router();\nAppRegistry.registerComponent(cliConfigs.appJson.name, () => App);\n\n\nrouter.use('*', (req, res, next) => {\n\tconst { ruui, paths, appJson, ruuiJson, } = cliConfigs;\n\tconst env = ruui.env();\n\tconst isProduction = env === 'production';\n\tconst publicPath = ruui.publicPath(env);\n\tconst location = new URL(req.baseUrl, 'http:\n\tconst initialProps = { ssrLocation: req.baseUrl, ssrContext: {} };\n\tconst ref = React.createRef();\n\tconst { element, getStyleElement, } = AppRegistry.getApplication(appJson.name, { initialProps, rootTag: 'root' });\n\tconst wrappedElement = <ServerContainer ref={ref} location={location}>{element}</ServerContainer>;\n\tconst initialHtml = reactDom.renderToString(wrappedElement);\n\tconst initialStyles = reactDom.renderToStaticMarkup(getStyleElement());\n\tconst pageTemplate = paths.getEjsTemplate();\n\tconst options = ref.current?.getCurrentOptions();\n\n\tres.render(pageTemplate, {\n\t\tssrContext: {\n\t\t\tinitialHtml,\n\t\t\tinitialStyles,\n\t\t\tserverSide: true,\n\t\t\tappName: options.title || appJson.displayName || appJson.name,\n\t\t\tpublicPath,\n\t\t\tbuildId: ruuiJson.buildId,\n\t\t\tisProduction, ...ruui.ejsTemplate,\n\t\t},\n\t});\n});\n\nmodule.exports = {\n\trouter,\n\thydrate: () => ssrUtils.hydrate(AppRegistry, reactDom, routes),\n};\n\n'ruui/cli/addons/ssr/src/index.js'\n:import React from 'react';\nimport { View, StyleSheet, } from 'react-native';\nimport { RuuiProvider, Tooltip } from 'react-universal-ui';\nimport { Provider, } from 'react-redux';\nimport { NavigationContainer, } from '@react-navigation/native';\nimport { createStackNavigator, } from '@react-navigation/stack';\n\nimport { ruuiStore, appStore } from 'store';\nimport WelcomeScreen from './welcome';\nimport HomeScreen from './home';\nimport { routeConfig, } from './routes';\n\nconst Stack = createStackNavigator();\nconst linking = { config: routeConfig, };\n\ntype Props = {\n\n};\n\nconst App = (props: Props) => {\n\treturn <NavigationContainer linking={linking}>\n\t\t<Stack.Navigator headerMode=\"none\">\n\t\t\t<Stack.Screen name=\"Welcome\" component={WelcomeScreen}/>\n\t\t\t<Stack.Screen name=\"Home\" component={HomeScreen}/>\n\t\t</Stack.Navigator>\n\t</NavigationContainer>;\n};\n\nconst AppContainer = (props) => {\n\treturn <RuuiProvider store={ruuiStore}>\n\t\t<Provider store={appStore}>\n\t\t\t<App/>\n\t\t\t<Tooltip/>\n\t\t</Provider>\n\t</RuuiProvider>;\n}\n\nexport default AppContainer;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n});\n",
        "gt": [
            "'ruui/cli/addons/ssr/src/home.js'",
            "'ruui/cli/addons/ssr/src/index.js'",
            "'ruui/cli/addons/ssr/src/server/index.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/common/migrate.js'",
            "'better-onetab/src/background/init.js'"
        ],
        "content": "'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/common/migrate.js'\n:import _ from 'lodash'\nimport {normalizeList} from './list'\nimport logger from './logger'\nimport {genObjectId, compareVersion} from './utils'\nimport listManager from './listManager'\nimport browser from 'webextension-polyfill'\nlistManager.init()\n\nconst migrations = {\n  '1.4.0': async () => {\n\n    const {lists} = await browser.storage.local.get('lists')\n    if (lists) {\n      const {0: listsWithoutId, 1: listsWithId} = _.groupBy(lists.map(normalizeList), list => +!!list._id)\n      if (listsWithId) await browser.storage.local.set({lists: listsWithId})\n\n      for (const list of listsWithoutId.reverse()) {\n        list._id = genObjectId()\n        await listManager.addList(list)\n      }\n    }\n\n    await browser.storage.local.remove(['conflict'])\n  }\n}\n\nconst migrate = async () => {\n  const {version: dataVersion} = await browser.storage.local.get('version')\n  const {version: currentVersion} = browser.runtime.getManifest()\n  if (dataVersion === currentVersion) return\n  const sorted = Object.keys(migrations).sort(compareVersion)\n  for (const v of sorted) {\n    if (compareVersion(currentVersion, v) > 0) continue\n    try {\n      console.debug('[migrate] migrating:', v)\n      await migrations[v]()\n      await browser.storage.local.set({version: v})\n      console.debug('[migrate] migrated to:', v)\n    } catch (err) {\n      logger.error('[migrate] migrate failed')\n      logger.error(err)\n      throw err\n    }\n  }\n}\n\nexport default migrate\n\n'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n",
        "gt": [
            "'better-onetab/src/common/migrate.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/cli/templates/electron/src/store/actions.js'",
            "'ruui/cli/templates/electron/src/store/reducers/index.js'",
            "'ruui/cli/templates/electron/src/store/reducers/app.js'"
        ],
        "content": "'ruui/cli/templates/electron/src/store/actions.js'\n:export const IncreaseCounter                = '@APP:INCREASE-COUNTER';\n\n'ruui/cli/templates/electron/src/store/reducers/index.js'\n:import { combineReducers } from 'redux';\nimport appReducer from './app';\n\nexport default combineReducers({\n\tapp: appReducer\n});\n'ruui/cli/templates/electron/src/store/reducers/app.js'\n:import * as Actions from '../actions';\n\nconst initialState = {\n\tcounter: 0,\n};\n\nexport default (state = initialState, action) => {\n\tswitch (action.type) {\n\tcase Actions.IncreaseCounter:\n\t\treturn { ...state, counter: state.counter + action.volume };\n\tdefault:\n\t\treturn state;\n\t}\n};",
        "gt": [
            "'ruui/cli/templates/electron/src/store/actions.js'",
            "'ruui/cli/templates/electron/src/store/reducers/app.js'",
            "'ruui/cli/templates/electron/src/store/reducers/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/cli/addons/ssr/src/server/index.js'",
            "'ruui/cli/addons/ssr/src/index.js'",
            "'ruui/cli/addons/ssr/src/routes.js'"
        ],
        "content": "'ruui/cli/addons/ssr/src/server/index.js'\n:import React from 'react';\nimport { Router } from 'express';\nimport { AppRegistry } from 'react-native';\nimport reactDom from 'react-dom/server';\nimport { ServerContainer, } from '@react-navigation/native';\nimport { configs as cliConfigs, ssrUtils } from 'react-universal-ui/cli';\nimport App from '../index';\nimport routes from '../routes';\n\nconst router = Router();\nAppRegistry.registerComponent(cliConfigs.appJson.name, () => App);\n\n\nrouter.use('*', (req, res, next) => {\n\tconst { ruui, paths, appJson, ruuiJson, } = cliConfigs;\n\tconst env = ruui.env();\n\tconst isProduction = env === 'production';\n\tconst publicPath = ruui.publicPath(env);\n\tconst location = new URL(req.baseUrl, 'http:\n\tconst initialProps = { ssrLocation: req.baseUrl, ssrContext: {} };\n\tconst ref = React.createRef();\n\tconst { element, getStyleElement, } = AppRegistry.getApplication(appJson.name, { initialProps, rootTag: 'root' });\n\tconst wrappedElement = <ServerContainer ref={ref} location={location}>{element}</ServerContainer>;\n\tconst initialHtml = reactDom.renderToString(wrappedElement);\n\tconst initialStyles = reactDom.renderToStaticMarkup(getStyleElement());\n\tconst pageTemplate = paths.getEjsTemplate();\n\tconst options = ref.current?.getCurrentOptions();\n\n\tres.render(pageTemplate, {\n\t\tssrContext: {\n\t\t\tinitialHtml,\n\t\t\tinitialStyles,\n\t\t\tserverSide: true,\n\t\t\tappName: options.title || appJson.displayName || appJson.name,\n\t\t\tpublicPath,\n\t\t\tbuildId: ruuiJson.buildId,\n\t\t\tisProduction, ...ruui.ejsTemplate,\n\t\t},\n\t});\n});\n\nmodule.exports = {\n\trouter,\n\thydrate: () => ssrUtils.hydrate(AppRegistry, reactDom, routes),\n};\n\n'ruui/cli/addons/ssr/src/index.js'\n:import React from 'react';\nimport { View, StyleSheet, } from 'react-native';\nimport { RuuiProvider, Tooltip } from 'react-universal-ui';\nimport { Provider, } from 'react-redux';\nimport { NavigationContainer, } from '@react-navigation/native';\nimport { createStackNavigator, } from '@react-navigation/stack';\n\nimport { ruuiStore, appStore } from 'store';\nimport WelcomeScreen from './welcome';\nimport HomeScreen from './home';\nimport { routeConfig, } from './routes';\n\nconst Stack = createStackNavigator();\nconst linking = { config: routeConfig, };\n\ntype Props = {\n\n};\n\nconst App = (props: Props) => {\n\treturn <NavigationContainer linking={linking}>\n\t\t<Stack.Navigator headerMode=\"none\">\n\t\t\t<Stack.Screen name=\"Welcome\" component={WelcomeScreen}/>\n\t\t\t<Stack.Screen name=\"Home\" component={HomeScreen}/>\n\t\t</Stack.Navigator>\n\t</NavigationContainer>;\n};\n\nconst AppContainer = (props) => {\n\treturn <RuuiProvider store={ruuiStore}>\n\t\t<Provider store={appStore}>\n\t\t\t<App/>\n\t\t\t<Tooltip/>\n\t\t</Provider>\n\t</RuuiProvider>;\n}\n\nexport default AppContainer;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n});\n\n'ruui/cli/addons/ssr/src/routes.js'\n:export const routeConfig = {\n\tscreens: {\n\t\tWelcome: '/',\n\t\tHome: 'home',\n\t\tnf: '*',\n\t},\n};\n",
        "gt": [
            "'ruui/cli/addons/ssr/src/routes.js'",
            "'ruui/cli/addons/ssr/src/index.js'",
            "'ruui/cli/addons/ssr/src/server/index.js'"
        ]
    },
    {
        "files": [
            "'three.bas/src/timeline/TimelineSegment.js'",
            "'three.bas/src/timeline/Timeline.js'",
            "'three.bas/src/timeline/RotationSegment.js'"
        ],
        "content": "'three.bas/src/timeline/TimelineSegment.js'\n:\nfunction TimelineSegment(key, start, duration, transition, compiler) {\n  this.key = key;\n  this.start = start;\n  this.duration = duration;\n  this.transition = transition;\n  this.compiler = compiler;\n\n  this.trail = 0;\n}\n\nTimelineSegment.prototype.compile = function() {\n  return this.compiler(this);\n};\n\nObject.defineProperty(TimelineSegment.prototype, 'end', {\n  get: function() {\n    return this.start + this.duration;\n  }\n});\n\nexport { TimelineSegment };\n\n'three.bas/src/timeline/Timeline.js'\n:import { TimelineSegment } from './TimelineSegment';\n\n\nfunction Timeline() {\n\n  this.duration = 0;\n\n\n  this.timeKey = 'tTime';\n\n  this.segments = {};\n  this.__key = 0;\n}\n\n\nTimeline.segmentDefinitions = {};\n\n\nTimeline.register = function(key, definition) {\n  Timeline.segmentDefinitions[key] = definition;\n\n  return definition;\n};\n\n\nTimeline.prototype.add = function(duration, transitions, positionOffset) {\n\n  const _eval = eval;\n\n  let start = this.duration;\n\n  if (positionOffset !== undefined) {\n    if (typeof positionOffset === 'number') {\n      start = positionOffset;\n    }\n    else if (typeof positionOffset === 'string') {\n      _eval('start' + positionOffset);\n    }\n\n    this.duration = Math.max(this.duration, start + duration);\n  }\n  else {\n    this.duration += duration;\n  }\n\n  let keys = Object.keys(transitions), key;\n\n  for (let i = 0; i < keys.length; i++) {\n    key = keys[i];\n\n    this.processTransition(key, transitions[key], start, duration);\n  }\n};\n\nTimeline.prototype.processTransition = function(key, transition, start, duration) {\n  const definition = Timeline.segmentDefinitions[key];\n\n  let segments = this.segments[key];\n  if (!segments) segments = this.segments[key] = [];\n\n  if (transition.from === undefined) {\n    if (segments.length === 0) {\n      transition.from = definition.defaultFrom;\n    }\n    else {\n      transition.from = segments[segments.length - 1].transition.to;\n    }\n  }\n\n  segments.push(new TimelineSegment((this.__key++).toString(), start, duration, transition, definition.compiler));\n};\n\n\nTimeline.prototype.compile = function() {\n  const c = [];\n\n  const keys = Object.keys(this.segments);\n  let segments;\n\n  for (let i = 0; i < keys.length; i++) {\n    segments = this.segments[keys[i]];\n\n    this.fillGaps(segments);\n\n    segments.forEach(function(s) {\n      c.push(s.compile());\n    });\n  }\n\n  return c;\n};\nTimeline.prototype.fillGaps = function(segments) {\n  if (segments.length === 0) return;\n\n  let s0, s1;\n\n  for (let i = 0; i < segments.length - 1; i++) {\n    s0 = segments[i];\n    s1 = segments[i + 1];\n\n    s0.trail = s1.start - s0.end;\n  }\n\n\n  s0 = segments[segments.length - 1];\n  s0.trail = this.duration - s0.end;\n};\n\n\nTimeline.prototype.getTransformCalls = function(key) {\n  let t = this.timeKey;\n\n  return this.segments[key] ?  this.segments[key].map(function(s) {\n    return `applyTransform${s.key}(${t}, transformed);`;\n  }).join('\\n') : '';\n};\n\nexport { Timeline }\n\n'three.bas/src/timeline/RotationSegment.js'\n:import { Timeline } from './Timeline';\nimport { TimelineChunks } from './TimelineChunks';\nimport { Vector3, Vector4 } from 'three';\n\nconst RotationSegment = {\n  compiler(segment) {\n    const fromAxisAngle = new Vector4(\n      segment.transition.from.axis.x,\n      segment.transition.from.axis.y,\n      segment.transition.from.axis.z,\n      segment.transition.from.angle\n    );\n\n    const toAxis = segment.transition.to.axis || segment.transition.from.axis;\n    const toAxisAngle = new Vector4(\n      toAxis.x,\n      toAxis.y,\n      toAxis.z,\n      segment.transition.to.angle\n    );\n\n    const origin = segment.transition.origin;\n\n    return `\n    ${TimelineChunks.delayDuration(segment)}\n    ${TimelineChunks.vec4(`cRotationFrom${segment.key}`, fromAxisAngle, 8)}\n    ${TimelineChunks.vec4(`cRotationTo${segment.key}`, toAxisAngle, 8)}\n    ${origin ? TimelineChunks.vec3(`cOrigin${segment.key}`, origin, 2) : ''}\n\n    void applyTransform${segment.key}(float time, inout vec3 v) {\n      ${TimelineChunks.renderCheck(segment)}\n      ${TimelineChunks.progress(segment)}\n\n      ${origin ? `v -= cOrigin${segment.key};` : ''}\n      vec3 axis = normalize(mix(cRotationFrom${segment.key}.xyz, cRotationTo${segment.key}.xyz, progress));\n      float angle = mix(cRotationFrom${segment.key}.w, cRotationTo${segment.key}.w, progress);\n      vec4 q = quatFromAxisAngle(axis, angle);\n      v = rotateVector(q, v);\n      ${origin ? `v += cOrigin${segment.key};` : ''}\n    }\n    `;\n  },\n  defaultFrom: {axis: new Vector3(), angle: 0}\n};\n\nTimeline.register('rotate', RotationSegment);\n\nexport { RotationSegment };\n",
        "gt": [
            "'three.bas/src/timeline/TimelineSegment.js'",
            "'three.bas/src/timeline/Timeline.js'",
            "'three.bas/src/timeline/RotationSegment.js'"
        ]
    },
    {
        "files": [
            "'tile-reduce/src/remote.js'",
            "'tile-reduce/test/test.remote.js'",
            "'tile-reduce/src/vt.js'"
        ],
        "content": "'tile-reduce/src/remote.js'\n:'use strict';\n\nvar request = require('request');\nvar parseVT = require('./vt');\nvar rateLimit = require('function-rate-limit');\n\nmodule.exports = remoteVT;\n\nfunction remoteVT(source, ready) {\n  var getTile = function(tile, done) {\n    var url = source.url\n      .replace('{x}', tile[0])\n      .replace('{y}', tile[1])\n      .replace('{z}', tile[2]);\n\n    request({url: url, gzip: true, encoding: null}, function(err, res, body) {\n      if (err) return done(err);\n      else if (res.statusCode === 200) return done(null, parseVT(body, tile, source));\n      else if (res.statusCode === 401) return done();\n      else return done(new Error('Server responded with status code ' + res.statusCode));\n    });\n  };\n\n  if (source.maxrate) getTile = rateLimit(source.maxrate, 1000, getTile);\n  ready(null, getTile);\n}\n\n'tile-reduce/test/test.remote.js'\n:'use strict';\n\nvar test = require('tap').test;\nvar remote = require('../src/remote');\nvar queue = require('queue-async');\n\ntest('remote - raw parse', function(t) {\n  var osmUrl = 'https:\n  var source = {\n    name: 'osm',\n    url: osmUrl,\n    raw: true\n  };\n  remote(source, function(err, getTile) {\n    t.notOk(err, 'remote initialized without error');\n    getTile([5276, 12757, 15], function(err, layers) {\n      t.notOk(err, 'remote VT unpacked without error');\n      t.ok(layers, 'layers parsed from remote source');\n      t.equal(layers.buildings.length, 264, 'layers have correct number of buildings');\n      t.equal(layers.roads.length, 384, 'layers have correct number of roads');\n      t.end();\n    });\n  });\n});\n\ntest('remote - full GeoJSON parse', function(t) {\n  var osmUrl = 'https:\n  var source = {\n    name: 'osm',\n    url: osmUrl\n  };\n  remote(source, function(err, getTile) {\n    t.notOk(err, 'remote initialized without error');\n    getTile([5276, 12757, 15], function(err, layers) {\n      t.notOk(err, 'remote unpacked without error');\n      t.ok(layers, 'layers parsed from remote');\n      t.equal(layers.buildings.features.length, 264, 'layers have correct number of buildings');\n      t.equal(layers.buildings.type, 'FeatureCollection', 'buildings decoded as GeoJSON FeatureCollection');\n      t.equal(layers.buildings.features[0].geometry.type, 'Polygon', 'building decoded as GeoJSON Polygon');\n      t.equal(layers.roads.features.length, 384, 'layers have correct number of roads');\n      t.equal(layers.roads.type, 'FeatureCollection', 'roads decoded as GeoJSON FeatureCollection');\n      t.equal(layers.roads.features[0].geometry.type, 'LineString', 'road decoded as GeoJSON LineString');\n      t.end();\n    });\n  });\n});\n\ntest('remote - sparse GeoJSON parse', function(t) {\n  var osmUrl = 'https:\n  var source = {\n    name: 'osm',\n    url: osmUrl,\n    layers: ['buildings']\n  };\n  remote(source, function(err, getTile) {\n    t.notOk(err, 'remote initialized without error');\n    getTile([5276, 12757, 15], function(err, layers) {\n      t.notOk(err, 'remote unpacked without error');\n      t.ok(layers, 'layers parsed from remote');\n      t.equal(layers.buildings.features.length, 264, 'layers have correct number of buildings');\n      t.notOk(layers.roads);\n      t.end();\n    });\n  });\n});\n\ntest('remote - init', function(t) {\n  var osmUrl = 'https:\n  var source = {name: 'osm', url: osmUrl};\n\n  remote(source, function(err, getTile) {\n    t.notOk(err, 'remote getTile init without error');\n    t.ok(typeof getTile === 'function', 'remote getTile is a function');\n    t.end();\n  });\n});\n\ntest('remote - raw invalid url - 401', function(t) {\n  var badUrl = 'https:\n  var source = {name: 'osm', url: badUrl};\n  remote(source, function(err, getTile) {\n    t.notOk(err, 'remote initialized without error');\n    getTile([5276, 12757, 15], function(err, layers) {\n      t.notOk(err, 'does not return an error with a missing tile remote url');\n      t.notOk(layers, 'does not return layers with a missing tile remote url');\n      t.end();\n    });\n  });\n});\n\ntest('remote - raw invalid url - no server', function(t) {\n  var badUrl = 'https:\n  var source = {name: 'osm', url: badUrl};\n  remote(source, function(err, getTile) {\n    t.notOk(err, 'remote initialized without error');\n    getTile([5276, 12757, 15], function(err, layers) {\n      t.ok(err, 'returns an error with a bad remote url');\n      t.ok(err.message.indexOf('getaddrinfo ENOTFOUND') === 0, 'HTTP address not found');\n      t.notOk(layers, 'does not return layers with a bad remote url');\n      t.end();\n    });\n  });\n});\n\ntest('remote - throttle', function(t) {\n  var url = 'https:\n  var maxrate = 5;\n  var tile = [5276, 12757, 15];\n  var source = {name: 'osm', url: url, maxrate: maxrate};\n  var intervals = {};\n  var q = queue(100);\n\n  remote(source, function(err, getTile) {\n    t.notOk(err, 'remote initialized without error');\n\n    for (var i = 0; i < 100; i++) {\n      q.defer(request);\n    }\n\n    q.awaitAll(function() {\n      Object.keys(intervals).forEach(function(interval) {\n        if (intervals[interval] > maxrate * 3)\n          t.fail(intervals[interval] + ' ops/sec detected; should be ' + maxrate + ' ops/sec');\n        else t.pass(intervals[interval] + ' ops/sec detected');\n      });\n      t.end();\n    });\n\n    function request(cb) {\n      getTile(tile, function(err) {\n        if (err) t.error(err);\n\n        var now = new Date();\n        var time = now.getMinutes() + ':' + now.getSeconds();\n        if (!intervals[time]) intervals[time] = 1;\n        else intervals[time]++;\n        cb();\n      });\n    }\n  });\n});\n\n'tile-reduce/src/vt.js'\n:'use strict';\n\nvar VectorTile = require('@mapbox/vector-tile').VectorTile;\nvar Pbf = require('pbf');\n\nmodule.exports = parseData;\n\nfunction parseData(data, tile, source) {\n  var layers = new VectorTile(new Pbf(data)).layers;\n  return source.raw ? layers : toGeoJSON(layers, tile, source);\n}\n\nfunction toGeoJSON(layers, tile, source) {\n  var collections = {};\n\n  for (var layerId in layers) {\n    if (source.layers && source.layers.indexOf(layerId) === -1) continue;\n\n    collections[layerId] = {\n      type: 'FeatureCollection',\n      features: []\n    };\n    for (var k = 0; k < layers[layerId].length; k++) {\n      collections[layerId].features.push(\n        layers[layerId].feature(k).toGeoJSON(tile[0], tile[1], tile[2])\n      );\n    }\n  }\n  return collections;\n}\n",
        "gt": [
            "'tile-reduce/src/vt.js'",
            "'tile-reduce/src/remote.js'",
            "'tile-reduce/test/test.remote.js'"
        ]
    },
    {
        "files": [
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/main.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/components/light.js'"
        ],
        "content": "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/main.js'\n:\nimport * as THREE from 'three';\nimport TWEEN from '@tweenjs/tween.js';\n\n\n\nimport Renderer from './components/renderer';\nimport Camera from './components/camera';\nimport Light from './components/light';\nimport Controls from './components/controls';\nimport Geometry from './components/geometry';\n\n\nimport Stats from './helpers/stats';\nimport MeshHelper from './helpers/meshHelper';\n\n\nimport Texture from './model/texture';\nimport Model from './model/model';\n\n\nimport Interaction from './managers/interaction';\nimport DatGUI from './managers/datGUI';\n\n\nimport Config from './../data/config';\n\n\n\nexport default class Main {\n  constructor(container) {\n\n    this.container = container;\n\n\n    this.clock = new THREE.Clock();\n\n\n    this.scene = new THREE.Scene();\n    this.scene.fog = new THREE.FogExp2(Config.fog.color, Config.fog.near);\n\n\n    if(window.devicePixelRatio) {\n      Config.dpr = window.devicePixelRatio;\n    }\n\n\n    this.renderer = new Renderer(this.scene, container);\n\n\n    this.camera = new Camera(this.renderer.threeRenderer);\n    this.controls = new Controls(this.camera.threeCamera, container);\n    this.light = new Light(this.scene);\n\n\n    const lights = ['ambient', 'directional', 'point', 'hemi'];\n    lights.forEach((light) => this.light.place(light));\n\n\n    this.geometry = new Geometry(this.scene);\n    this.geometry.make('plane')(150, 150, 10, 10);\n    this.geometry.place([0, -20, 0], [Math.PI / 2, 0, 0]);\n\n\n    if(Config.isDev && Config.isShowingStats) {\n      this.stats = new Stats(this.renderer);\n      this.stats.setUp();\n    }\n\n\n    if (Config.isDev) {\n      this.gui = new DatGUI(this)\n    }\n\n\n    this.texture = new Texture();\n\n\n    this.texture.load().then(() => {\n      this.manager = new THREE.LoadingManager();\n\n\n      this.model = new Model(this.scene, this.manager, this.texture.textures);\n      this.model.load(Config.models[Config.model.selected].type);\n\n\n      this.manager.onProgress = (item, loaded, total) => {\n        console.log(`${item}: ${loaded} ${total}`);\n      };\n\n\n      this.manager.onLoad = () => {\n\n        new Interaction(this.renderer.threeRenderer, this.scene, this.camera.threeCamera, this.controls.threeControls);\n\n\n        if(Config.isDev) {\n          this.meshHelper = new MeshHelper(this.scene, this.model.obj);\n          if (Config.mesh.enableHelper) this.meshHelper.enable();\n\n          this.gui.load(this, this.model.obj);\n        }\n\n\n        Config.isLoaded = true;\n        this.container.querySelector('#loading').style.display = 'none';\n      };\n    });\n\n\n    this.render();\n  }\n\n  render() {\n\n    if(Config.isDev && Config.isShowingStats) {\n      Stats.start();\n    }\n\n\n    this.renderer.render(this.scene, this.camera.threeCamera);\n\n\n    if(Config.isDev && Config.isShowingStats) {\n      Stats.end();\n    }\n\n\n\n\n\n    TWEEN.update();\n    this.controls.threeControls.update();\n\n\n    requestAnimationFrame(this.render.bind(this));\n  }\n}\n\n'ThreeJS-Webpack-ES6-Boilerplate/src/js/app.js'\n:import Config from './data/config';\nimport Detector from './utils/detector';\nimport Main from './app/main';\n\n\nimport './../css/app.scss';\n\n\nif(__ENV__ === 'dev') {\n  console.log('----- RUNNING IN DEV ENVIRONMENT! -----');\n\n  Config.isDev = true;\n}\n\nfunction init() {\n\n  if(!Detector.webgl) {\n    Detector.addGetWebGLMessage();\n  } else {\n    const container = document.getElementById('appContainer');\n    new Main(container);\n  }\n}\n\ninit();\n\n'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/components/light.js'\n:import * as THREE from 'three';\n\nimport Config from '../../data/config';\n\n\nexport default class Light {\n  constructor(scene) {\n    this.scene = scene;\n\n    this.init();\n  }\n\n  init() {\n\n    this.ambientLight = new THREE.AmbientLight(Config.ambientLight.color);\n    this.ambientLight.visible = Config.ambientLight.enabled;\n\n\n    this.pointLight = new THREE.PointLight(Config.pointLight.color, Config.pointLight.intensity, Config.pointLight.distance);\n    this.pointLight.position.set(Config.pointLight.x, Config.pointLight.y, Config.pointLight.z);\n    this.pointLight.visible = Config.pointLight.enabled;\n\n\n    this.directionalLight = new THREE.DirectionalLight(Config.directionalLight.color, Config.directionalLight.intensity);\n    this.directionalLight.position.set(Config.directionalLight.x, Config.directionalLight.y, Config.directionalLight.z);\n    this.directionalLight.visible = Config.directionalLight.enabled;\n\n\n    this.directionalLight.castShadow = Config.shadow.enabled;\n    this.directionalLight.shadow.bias = Config.shadow.bias;\n    this.directionalLight.shadow.camera.near = Config.shadow.near;\n    this.directionalLight.shadow.camera.far = Config.shadow.far;\n    this.directionalLight.shadow.camera.left = Config.shadow.left;\n    this.directionalLight.shadow.camera.right = Config.shadow.right;\n    this.directionalLight.shadow.camera.top = Config.shadow.top;\n    this.directionalLight.shadow.camera.bottom = Config.shadow.bottom;\n    this.directionalLight.shadow.mapSize.width = Config.shadow.mapWidth;\n    this.directionalLight.shadow.mapSize.height = Config.shadow.mapHeight;\n\n\n    if(Config.isDev) {\n      this.directionalLightHelper = new THREE.CameraHelper(this.directionalLight.shadow.camera);\n      this.directionalLightHelper.visible = Config.shadow.helperEnabled;\n    }\n\n    this.hemiLight = new THREE.HemisphereLight(Config.hemiLight.color, Config.hemiLight.groundColor, Config.hemiLight.intensity);\n    this.hemiLight.position.set(Config.hemiLight.x, Config.hemiLight.y, Config.hemiLight.z);\n    this.hemiLight.visible = Config.hemiLight.enabled;\n  }\n\n  place(lightName) {\n    switch(lightName) {\n      case 'ambient':\n        this.scene.add(this.ambientLight);\n        break;\n\n      case 'directional':\n        this.scene.add(this.directionalLight);\n        if(Config.isDev) {\n          this.scene.add(this.directionalLightHelper);\n        }\n        break;\n\n      case 'point':\n        this.scene.add(this.pointLight);\n        break;\n\n      case 'hemi':\n        this.scene.add(this.hemiLight);\n        break;\n    }\n  }\n}\n",
        "gt": [
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/components/light.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/main.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app.js'"
        ]
    },
    {
        "files": [
            "'ruui/cli/addons/redux/src/store/action/app.js'",
            "'ruui/cli/addons/redux/src/index.js'",
            "'ruui/cli/addons/redux/src/welcome.js'"
        ],
        "content": "'ruui/cli/addons/redux/src/store/action/app.js'\n:import * as Actions from '../actions';\n\nexport function increaseCounter(volume = 1) {\n\treturn { type: Actions.IncreaseCounter, volume };\n}\n\n'ruui/cli/addons/redux/src/index.js'\n:import React from 'react';\nimport { View, StyleSheet, } from 'react-native';\nimport { RuuiProvider, Tooltip } from 'react-universal-ui';\nimport { Provider, } from 'react-redux';\n\nimport { ruuiStore, appStore } from 'store';\nimport Welcome from './welcome';\n\ntype Props = {\n\n};\n\nconst App = (props: Props) => {\n\treturn <View style={styles.container}>\n\t\t<Welcome/>\n\t</View>;\n};\n\nconst AppContainer = (props) => {\n\treturn <RuuiProvider store={ruuiStore}>\n\t\t<Provider store={appStore}>\n\t\t\t<App/>\n\t\t\t<Tooltip/>\n\t\t</Provider>\n\t</RuuiProvider>;\n}\n\nexport default AppContainer;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n});\n\n'ruui/cli/addons/redux/src/welcome.js'\n:import React, { useState, } from 'react';\nimport { View, Text, StyleSheet, Platform } from 'react-native';\nimport { Button, } from 'react-universal-ui';\nimport { useSelector, useDispatch, } from 'react-redux';\n\nimport * as appActions from 'store/action/app';\n\nconst instructions = Platform.select({\n\tios: 'Press Cmd+R to reload,\\n'\n\t\t+ 'Cmd+D or shake for dev menu',\n\tandroid: 'Double tap R on your keyboard to reload,\\n'\n\t\t+ 'Shake or press menu button for dev menu',\n\tweb: 'Command/Control+R to reload your browser :p\\n'\n\t\t+ '\\nAnd in Browser, we have great advantage\\nwhen using Chrome Developer Tool\\ncompare to the poor native-dev-menu!',\n});\n\ntype Props = {\n\n};\n\nconst Welcome = (props: Props) => {\n\tconst dispatch = useDispatch();\n\tconst counter = useSelector(({ app }) => app.counter);\n\n\treturn <View style={styles.container}>\n\t\t<Text style={styles.welcome}>\n\t\t\tWelcome to Universal Ui\n\t\t</Text>\n\t\t<Text style={styles.instructions}>\n\t\t\tTo get started, edit src/welcome.js\n\t\t</Text>\n\t\t<Text style={styles.instructions}>\n\t\t\t{instructions}\n\t\t</Text>\n\t\t<Button\n\t\t\twrapperStyle={styles.buttonWrapper}\n\t\t\ttitle={`Increase counter [${counter}]`}\n\t\t\ttooltip=\"Increase counter..\"\n\t\t\ttooltipDirection=\"top\"\n\t\t\tonPress={() => dispatch(appActions.increaseCounter())}/>\n\t</View>;\n};\n\nexport default Welcome;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n\twelcome: {\n\t\tfontSize: 20,\n\t\ttextAlign: 'center',\n\t\tmargin: 10,\n\t},\n\tinstructions: {\n\t\ttextAlign: 'center',\n\t\tcolor: '#333333',\n\t\tmarginBottom: 5,\n\t},\n\tbuttonWrapper: {\n\t\tbackgroundColor: '#00bcd4',\n\t\tmarginTop: 20,\n\t},\n\tbuttonIcon: {\n\t\tfontSize: 28,\n\t\tcolor: '#ffffff',\n\t},\n});\n",
        "gt": [
            "'ruui/cli/addons/redux/src/store/action/app.js'",
            "'ruui/cli/addons/redux/src/welcome.js'",
            "'ruui/cli/addons/redux/src/index.js'"
        ]
    },
    {
        "files": [
            "'Registration-and-Login-using-MERN-stack/api/server.js'",
            "'Registration-and-Login-using-MERN-stack/api/app.js'",
            "'Registration-and-Login-using-MERN-stack/api/constants/constants.js'",
            "'Registration-and-Login-using-MERN-stack/api/route.js'"
        ],
        "content": "'Registration-and-Login-using-MERN-stack/api/server.js'\n:const express = require('express');\nconst app = express();\nconst bodyParser = require('body-parser');\nconst PORT = 4000;\nconst cors = require('cors');\nconst mongoose = require('mongoose');\nconst config = require('./DB.js');\nconst registrationRoutes = require('./route');\n\nmongoose.Promise = global.Promise;\nmongoose.connect(config.DB, { useNewUrlParser: true }).then(\n    () => { console.log('Database is connected') },\n    err => { console.log('Can not connect to the database' + err) }\n);\n\napp.use(cors());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(\"./schema/User\", registrationRoutes);\n\n\nmodule.exports = app\n'Registration-and-Login-using-MERN-stack/api/app.js'\n:var app = require(\"./server\");\nconst PORT = 4000;\n\n\napp.listen(PORT, function() {\n    console.log('Server is running on Port:', PORT);\n});\n'Registration-and-Login-using-MERN-stack/api/constants/constants.js'\n:const RouteNames = {\n    register: '/register',\n    login: '/login',\n    data: '/allData',\n    validate: '/validateUsername'\n\n};\n\nmodule.exports = RouteNames;\n'Registration-and-Login-using-MERN-stack/api/route.js'\n:const express = require('express');\nconst registrationRoutes = express.Router();\nconst bcrypt = require('bcryptjs');\nlet Registration = require('./schema/User');\nlet RouteNames = require(\"./constants/constants\");\n\nregistrationRoutes.route(RouteNames.register).post(function(req, res) {\n    let register = new Registration(req.body);\n    register.save()\n        .then(reg => {\n            res.sendStatus(200);\n        })\n        .catch(err => {\n            res.status(400).send(\"Failed to store to database\");\n        });\n});\n\n\nregistrationRoutes.route(RouteNames.login).post(function(req, res) {\n    Registration.findOne({ user_name: req.body.user_name })\n        .then(user => {\n            console.log(\"User from login\", user)\n            if (!user) res.sendStatus(204);\n            else {\n                bcrypt.compare(req.body.password, user.password)\n                    .then(passwordMatch => passwordMatch ? res.sendStatus(200) : res.sendStatus(204))\n            }\n        });\n});\n\n\nregistrationRoutes.route(RouteNames.validate)\n    .post(function(req, res) {\n        Registration.findOne({ user_name: req.body.user_name })\n            .then(user => user ? res.sendStatus(204) : res.sendStatus(200))\n    });\n\n\nregistrationRoutes.route(RouteNames.data).get(function(req, res) {\n    Registration.find((err, data) => err ? res.status(400).send(\"Error occured\") : res.json(data));\n});\n\nmodule.exports = registrationRoutes;",
        "gt": [
            "'Registration-and-Login-using-MERN-stack/api/constants/constants.js'",
            "'Registration-and-Login-using-MERN-stack/api/route.js'",
            "'Registration-and-Login-using-MERN-stack/api/server.js'",
            "'Registration-and-Login-using-MERN-stack/api/app.js'"
        ]
    },
    {
        "files": [
            "'Registration-and-Login-using-MERN-stack/src/components/App.js'",
            "'Registration-and-Login-using-MERN-stack/src/elements/Error.js'",
            "'Registration-and-Login-using-MERN-stack/src/components/Registration.js'",
            "'Registration-and-Login-using-MERN-stack/src/index.js'"
        ],
        "content": "'Registration-and-Login-using-MERN-stack/src/components/App.js'\n:import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\nimport Login from './Login';\nimport Registration from './Registration';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t\t<Router>\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/register\" component={Registration} />\n\t\t\t\t\t\t<Route exact path=\"/login\" component={Login} />\n\t\t\t\t\t\t<Redirect from=\"/\" to=\"login\" />\n\t\t\t\t\t</Switch>\n\t\t\t\t\t</div>\n\t\t\t\t</Router>\n\t\t);\n\t}\n}\nexport default App;\n\n'Registration-and-Login-using-MERN-stack/src/elements/Error.js'\n:import React from 'react';\n\nconst Error = ({ message }) => (\n\t<div>\n\t\t<div className=\"alert alert-danger\" role=\"alert\">\n\t\t<span className=\"glyphicon glyphicon-thumbs-down\"></span>\n\t\t<span className=\"message\">{message}</span>\n\t</div>\n</div>\n);\n\nexport default Error;\n\n'Registration-and-Login-using-MERN-stack/src/components/Registration.js'\n:import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport classNames from 'classnames';\nimport {\n  UserRegistration,\n  UsernameValidation,\n} from '../services/RegistrationService';\nimport Message from '../elements/Message';\nimport Error from '../elements/Error';\nimport {\n  REGISTRATION_FIELDS,\n  REGISTRATION_MESSAGE,\n  COMMON_FIELDS,\n  ERROR_IN_REGISTRATION,\n} from '../MessageBundle';\n\nexport default class Registration extends Component {\n  constructor (props) {\n    super (props);\n    this.state = {\n      first_name: '',\n      last_name: '',\n      user_name: '',\n      password: '',\n      register: false,\n      error: false,\n    };\n  }\n\n  handleOnChangeFirstName = e => {\n    this.setState ({\n      first_name: e.target.value,\n    });\n  };\n\n  handleOnChangeLastName = e => {\n    this.setState ({\n      last_name: e.target.value,\n    });\n  };\n\n  handleOnChangeUserName = e => {\n    this.setState ({\n      user_name: e.target.value,\n    });\n  };\n\n  handleOnChangePassword = e => {\n    this.setState ({\n      password: e.target.value,\n    });\n  };\n\n  handleOnBlur = async e => {\n    this.setState ({\n      user_name: e.target.value,\n    });\n    const data = {\n      user_name: this.state.user_name,\n    };\n    const isUsernameTaken = await UsernameValidation (data);\n\n    isUsernameTaken === 204\n      ? this.setState ({user_name_taken: true})\n      : this.setState ({user_name_taken: false});\n  };\n\n  onSubmit = async e => {\n    e.preventDefault ();\n    const data = {\n      first_name: this.state.first_name,\n      last_name: this.state.last_name,\n      user_name: this.state.user_name,\n      password: this.state.password,\n    };\n\n    const registerStatus = await UserRegistration (data);\n    if (registerStatus === 200) {\n      this.setState ({\n        first_name: '',\n        last_name: '',\n        user_name: '',\n        password: '',\n        register: true,\n        error: false,\n      });\n    } else\n      this.setState ({\n        error: true,\n        register: false,\n      });\n  };\n\n  render () {\n    const {register, error, user_name_taken} = this.state;\n\n    return (\n      <div className=\"Registration\">\n        <h1> {REGISTRATION_FIELDS.REGISTRATION_HEADING} </h1> <form\n          onSubmit={this.onSubmit}\n        >\n          <div>\n            <div className=\"fields\">\n              <p> {REGISTRATION_FIELDS.FIRST_NAME} </p>\n              {' '}\n              <input\n                type=\"text\"\n                value={this.state.first_name}\n                name=\"FirstName\"\n                onChange={this.handleOnChangeFirstName}\n              />\n              {' '}\n            </div> <div className=\"fields\">\n              <p> {REGISTRATION_FIELDS.LAST_NAME} </p>\n              {' '}\n              <input\n                type=\"text\"\n                value={this.state.last_name}\n                name=\"LastName\"\n                onChange={this.handleOnChangeLastName}\n              />\n              {' '}\n            </div> <div className=\"fields\">\n              <p> {COMMON_FIELDS.USER_NAME} </p>\n              {' '}\n              <input\n                type=\"text\"\n                className={classNames ({error: user_name_taken})}\n                value={this.state.user_name}\n                name=\"Username\"\n                onBlur={this.handleOnBlur}\n                onChange={this.handleOnChangeUserName}\n                autoComplete=\"Username\"\n                required\n              />\n            </div> <div className=\"fields\">\n              <p> {COMMON_FIELDS.PASSWORD} </p>\n              {' '}\n              <input\n                type=\"password\"\n                value={this.state.password}\n                name=\"Password\"\n                onChange={this.handleOnChangePassword}\n                autoComplete=\"password\"\n                required\n              />\n            </div> <div className=\"buttons\">\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={user_name_taken}\n              >\n                {' '}{REGISTRATION_FIELDS.REGISTER}{' '}\n              </button>\n              {' '}\n              <Link to=\"/login\"> {REGISTRATION_FIELDS.CANCEL} </Link>\n              {' '}\n            </div>{' '}\n          </div>{' '}\n        </form>\n        {' '}\n        {error && <Error message={ERROR_IN_REGISTRATION} />}\n        {' '}\n        {register && <Message message={REGISTRATION_MESSAGE} />}\n        {' '}\n      </div>\n    );\n  }\n}\n\n'Registration-and-Login-using-MERN-stack/src/index.js'\n:import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n",
        "gt": [
            "'Registration-and-Login-using-MERN-stack/src/elements/Error.js'",
            "'Registration-and-Login-using-MERN-stack/src/components/Registration.js'",
            "'Registration-and-Login-using-MERN-stack/src/components/App.js'",
            "'Registration-and-Login-using-MERN-stack/src/index.js'"
        ]
    },
    {
        "files": [
            "'cypress-plugin-snapshots/src/commands/index.js'",
            "'cypress-plugin-snapshots/commands.js'",
            "'cypress-plugin-snapshots/src/utils/commands/getTaskData.js'",
            "'cypress-plugin-snapshots/src/dataTypes.js'",
            "'cypress-plugin-snapshots/__tests__/commands.test.js'",
            "'cypress-plugin-snapshots/src/commands/toMatchImageSnapshot.js'"
        ],
        "content": "'cypress-plugin-snapshots/src/commands/index.js'\n:const toMatchSnapshot = require('./toMatchSnapshot');\nconst toMatchImageSnapshot = require('./toMatchImageSnapshot');\n\nmodule.exports = {\n  toMatchSnapshot,\n  toMatchImageSnapshot,\n}\n\n'cypress-plugin-snapshots/commands.js'\n:\n\nconst {\n  merge,\n  cloneDeep\n} = require('lodash');\nconst { initUi } = require('./src/ui');\nconst commands = require('./src/commands/index');\nconst cleanUpSnapshots = require('./src/utils/commands/cleanupSnapshots');\nconst getConfig = require('./src/utils/commands/getConfig');\nconst { NO_LOG } = require('./src/constants');\n\nfunction addCommand(commandName, method) {\n  Cypress.Commands.add(commandName, {\n    prevSubject: true\n  }, (commandSubject, taskOptions) => {\n    if (!commandSubject) {\n      return commandSubject;\n    }\n\n    const options = merge({}, cloneDeep(getConfig()), taskOptions);\n    return cy.wrap(commandSubject, NO_LOG)\n      .then((subject) => method(subject, options));\n  });\n}\n\nfunction initCommands() {\n\n  getConfig();\n\n\n  before(() => {\n    initUi();\n  });\n\n  function closeSnapshotModal() {\n    try {\n      if (window.top.closeSnapshotModal) {\n        window.top.closeSnapshotModal();\n      }\n    } catch(ex) {\n      window.console.error(ex);\n    }\n  }\n\n  function clearFileCache() {\n    Cypress.__readFileCache__ = {};\n  }\n\n\n  Cypress.on('window:before:unload', () => {\n    closeSnapshotModal()\n    clearFileCache()\n  });\n\n\n  after(() => {\n    cleanUpSnapshots();\n  });\n\n\n  Object.keys(commands).forEach(key => addCommand(key, commands[key]));\n}\n\nmodule.exports = {\n  initCommands,\n};\n\nif (!process.env.JEST_WORKER_ID) {\n  initCommands();\n}\n\n'cypress-plugin-snapshots/src/utils/commands/getTaskData.js'\n:const getTestTitle = require('../getTestTitle');\nconst { getSnapshotTitle } = require('../snapshotTitles');\nconst getSpec = require('./getSpec');\nconst {\n  getTestForTask,\n  getSubject,\n  isHtml,\n} = require('./index');\nconst { COMMAND_MATCH_IMAGE_SNAPSHOT } = require('../../commands/commandNames');\nconst { TYPE_IMAGE, TYPE_JSON, TYPE_HTML } = require('../../dataTypes');\n\nfunction isImage(commandName) {\n  return commandName === COMMAND_MATCH_IMAGE_SNAPSHOT;\n}\n\nfunction getDataType({commandName, subject}) {\n  if (isImage(commandName)) {\n    return TYPE_IMAGE;\n  }\n\n  return isHtml(subject) ? TYPE_HTML : TYPE_JSON;\n}\n\nasync function getTaskData({\n    commandName,\n    options,\n    customName,\n    customSeparator,\n    subject: testSubject\n  } = {}) {\n  const subjectIsImage = isImage(commandName);\n  const test = getTestForTask();\n  const testTitle = getTestTitle(test);\n  const spec = await getSpec();\n  const testFile = spec.absolute;\n  const snapshotTitle = getSnapshotTitle(test, customName, customSeparator, subjectIsImage);\n  const subject = subjectIsImage ? testSubject : getSubject(testSubject);\n  const dataType = getDataType({commandName, subject: testSubject});\n\n  return {\n    commandName,\n    dataType,\n    options,\n    snapshotTitle,\n    subject,\n    testFile,\n    testTitle,\n  };\n}\n\nmodule.exports = getTaskData;\n\n'cypress-plugin-snapshots/src/dataTypes.js'\n:module.exports = {\n  TYPE_HTML: 'html',\n  TYPE_IMAGE: 'image',\n  TYPE_JSON: 'json',\n};\n\n'cypress-plugin-snapshots/__tests__/commands.test.js'\n:const { initCommands } = require('../commands');\n\nglobal.Cypress = {\n  env: () => ({}),\n  config: () => {},\n  Commands: { add: jest.fn(), },\n  on: () => ({}),\n};\n\nglobal.cy = {};\n\ndescribe('commands', () => {\n  it('initCommands', () => {\n    global.before = jest.fn();\n    global.after = jest.fn();\n    global.cy.task = jest.fn().mockResolvedValue({ passed: true });\n\n    initCommands();\n\n    expect(global.Cypress.Commands.add).toBeCalled();\n    expect(global.Cypress.Commands.add.mock.calls.length).toEqual(2);\n    expect(global.Cypress.Commands.add.mock.calls[0][0]).toEqual('toMatchSnapshot');\n    expect(global.after).toBeCalled();\n    expect(global.before).toBeCalled();\n  });\n});\n\n'cypress-plugin-snapshots/src/commands/toMatchImageSnapshot.js'\n:\n\nconst { MATCH_IMAGE } = require('../tasks/taskNames');\nconst getTaskData = require('../utils/commands/getTaskData');\nconst logMessage = require('../utils/commands/logMessage');\nconst { NO_LOG } = require('../constants');\nconst { COMMAND_MATCH_IMAGE_SNAPSHOT: commandName } = require('./commandNames');\nconst getImageData = require('../utils/image/getImageData');\nconst { getImageConfig, getScreenshotConfig, getCustomName, getCustomSeparator } = require('../config');\n\nfunction afterScreenshot(taskData) {\n  return ($el, props) => {\n\n\n    const win = $el.get(0).ownerDocument.defaultView;\n    taskData.image = getImageData(props, win.devicePixelRatio);\n    taskData.isImage = true;\n    delete taskData.subject;\n  };\n}\n\nasync function toMatchImageSnapshot(subject, commandOptions) {\n  const options = getImageConfig(commandOptions);\n  const customName = getCustomName(commandOptions);\n  const customSeparator = getCustomSeparator(commandOptions);\n\n  const taskData = await getTaskData({\n    commandName,\n    options,\n    customName,\n    customSeparator,\n    subject,\n  });\n\n  const screenShotConfig = getScreenshotConfig(commandOptions);\n  const afterScreenshotFn = afterScreenshot(taskData);\n  if (screenShotConfig.onAfterScreenshot) {\n    const afterScreenshotCallback = screenShotConfig.onAfterScreenshot;\n    screenShotConfig.onAfterScreenshot = (...args) => {\n      afterScreenshotFn.apply(this, args);\n      afterScreenshotCallback.apply(this, args);\n    }\n  } else {\n    screenShotConfig.onAfterScreenshot = afterScreenshotFn;\n  }\n\n  return cy.wrap(subject, NO_LOG)\n    .screenshot(taskData.snapshotTitle, screenShotConfig)\n    .then(() => cy.task(\n        MATCH_IMAGE,\n        taskData,\n        NO_LOG\n      ).then(logMessage)\n    );\n}\n\nmodule.exports = toMatchImageSnapshot;\n",
        "gt": [
            "'cypress-plugin-snapshots/src/dataTypes.js'",
            "'cypress-plugin-snapshots/src/utils/commands/getTaskData.js'",
            "'cypress-plugin-snapshots/src/commands/toMatchImageSnapshot.js'",
            "'cypress-plugin-snapshots/src/commands/index.js'",
            "'cypress-plugin-snapshots/commands.js'",
            "'cypress-plugin-snapshots/__tests__/commands.test.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/ruuiProvider.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/store/action/app.js'"
        ],
        "content": "'ruui/src/components/ruuiProvider.js'\n:import React, { Component } from 'react';\nimport { NetInfo, Dimensions } from 'react-native';\nimport PropTypes from 'prop-types';\nimport { merge } from 'lodash';\n\nimport coreConfigs from '../configs/core';\nimport { isServer } from '../utils';\nimport { createStore } from '../utils/ruuiStore';\nimport appReducer from '../store/appReducer';\nimport * as appActions from '../store/action/app';\nimport { Element, RuuiConfigs } from '../typeDefinition';\n\ntype Props = {\n\tchildren?: Element,\n\tstore?: Object,\n\tconfigs?: RuuiConfigs,\n\tsubscribeNetInfo?: Boolean,\n\tsubscribeDimension?: Boolean,\n};\n\nconst navigator = global.navigator || {},\n\tconnectionModule = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n\nclass RuuiProvider extends Component {\n\tstatic props: Props;\n\n\tstatic defaultProps = {\n\t\tconfigs: {},\n\t\tsubscribeNetInfo: false,\n\t\tsubscribeDimension: true,\n\t\tstore: createStore(appReducer),\n\t};\n\n\tstatic childContextTypes = {\n\t\truuiStore: PropTypes.object,\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.store = props.store;\n\t\tthis.configs = merge({}, coreConfigs, props.configs);\n\t}\n\n\tgetChildContext() {\n\t\treturn {\n\t\t\truuiStore: this.store,\n\t\t\truuiConfigs: this.configs,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { store, subscribeDimension, subscribeNetInfo } = this.props;\n\n\t\tif (isServer || !store) return;\n\t\tif (subscribeDimension) this.subscribeAndUpdateDimensions();\n\t\tif (subscribeNetInfo && connectionModule) this.subscribeAndUpdateNetworkInfo();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tconst { store, subscribeDimension, subscribeNetInfo } = this.props;\n\n\t\tif (isServer || !store) return;\n\n\t\tif (subscribeDimension) {\n\t\t\tDimensions.removeEventListener('change', this.handleDimensionChange);\n\t\t}\n\n\t\tif (subscribeNetInfo && connectionModule) {\n\t\t\tNetInfo.removeEventListener('connectionChange', this.handleConnectionTypeChange);\n\t\t\tNetInfo.isConnected.removeEventListener('connectionChange', this.handleIsConnectedChange);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { children } = this.props;\n\t\treturn children;\n\t}\n\n\tsubscribeAndUpdateDimensions = () => {\n\t\tthis.handleDimensionChange({\n\t\t\twindow: Dimensions.get('window'),\n\t\t\tscreen: Dimensions.get('screen'),\n\t\t});\n\n\t\tDimensions.addEventListener('change', this.handleDimensionChange);\n\t};\n\n\thandleDimensionChange = (data) => {\n\t\tthis.store.dispatch(appActions.updateDimensionsInfo(data));\n\t};\n\n\tsubscribeAndUpdateNetworkInfo = () => {\n\t\tNetInfo.getConnectionInfo && NetInfo.getConnectionInfo()\n\t\t\t.then(connectionInfo => this.handleConnectionTypeChange(connectionInfo));\n\n\t\tNetInfo.isConnected.getConnectionInfo && NetInfo.isConnected.getConnectionInfo()\n\t\t\t.then(isConnected => this.handleIsConnectedChange(isConnected));\n\n\t\tNetInfo.addEventListener('connectionChange', this.handleConnectionTypeChange);\n\t\tNetInfo.isConnected.addEventListener('connectionChange', this.handleIsConnectedChange);\n\t};\n\n\thandleConnectionTypeChange = (connectionType) => {\n\t\tthis.store.dispatch(appActions.updateNetInfo({ connectionType, }));\n\t};\n\n\thandleIsConnectedChange = (isConnected) => {\n\t\tthis.store.dispatch(appActions.updateNetInfo({ isConnected, }));\n\t};\n}\n\nexport default RuuiProvider;\n\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/store/action/app.js'\n:import * as Actions from '../actions';\nimport { uuid } from '../../utils';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function reduxSync(state = {}) {\n\treturn { type: Actions.ReduxSync, state };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function toggleTooltip(flag, configs = {}) {\n\treturn { type: Actions.ToggleTooltip, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}\n",
        "gt": [
            "'ruui/src/store/action/app.js'",
            "'ruui/src/components/ruuiProvider.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'spa/listings/apx0B/c.1/lib/routes.js'",
            "'spa/listings/apx0B/c.1/lib/chat.js'",
            "'spa/listings/apx0B/c.1/app.js'"
        ],
        "content": "'spa/listings/apx0B/c.1/lib/routes.js'\n:\n\n\n\n\n\n'use strict';\nvar\n  configRoutes,\n  crud        = require( './crud' ),\n  chat        = require( './chat' ),\n  makeMongoId = crud.makeMongoId;\n\n\n\nconfigRoutes = function ( app, server ) {\n  app.get( '/', function ( request, response ) {\n    response.redirect( '/spa.html' );\n  });\n\n  app.all( '/:obj_type\n\n\n\n\n\n'use strict';\nvar\n  emitUserList, signIn, signOut, chatObj,\n  socket = require( 'socket.io' ),\n  crud   = require( './crud'    ),\n\n  makeMongoId = crud.makeMongoId,\n  chatterMap  = {};\n\n\n\n\n\nemitUserList = function ( io ) {\n  crud.read(\n    'user',\n    { is_online : true },\n    {},\n    function ( result_list ) {\n      io\n        .of( '/chat' )\n        .emit( 'listchange', result_list );\n    }\n  );\n};\n\n\n\nsignIn = function ( io, user_map, socket ) {\n  crud.update(\n    'user',\n    { '_id'     : user_map._id },\n    { is_online : true         },\n    function ( result_map ) {\n      emitUserList( io );\n      user_map.is_online = true;\n      socket.emit( 'userupdate', user_map );\n    }\n  );\n\n  chatterMap[ user_map._id ] = socket;\n  socket.user_id = user_map._id;\n};\n\n\n\nsignOut = function ( io, user_id ) {\n  crud.update(\n    'user',\n    { '_id'     : user_id },\n    { is_online : false   },\n    function ( result_list ) { emitUserList( io ); }\n  );\n  delete chatterMap[ user_id ];\n};\n\n\n\nchatObj = {\n  connect : function ( server ) {\n    var io = socket.listen( server );\n\n\n    io\n      .set( 'blacklist' , [] )\n      .of( '/chat' )\n      .on( 'connection', function ( socket ) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        socket.on( 'adduser', function ( user_map ) {\n          crud.read(\n            'user',\n            { name : user_map.name },\n            {},\n            function ( result_list ) {\n              var\n                result_map,\n                cid = user_map.cid;\n\n              delete user_map.cid;\n\n\n              if ( result_list.length > 0 ) {\n                result_map     = result_list[ 0 ];\n                result_map.cid = cid;\n                signIn( io, result_map, socket );\n              }\n\n\n              else {\n                user_map.is_online = true;\n                crud.construct(\n                  'user',\n                  user_map,\n                  function ( result_list ) {\n                    result_map     = result_list[ 0 ];\n                    result_map.cid = cid;\n                    chatterMap[ result_map._id ] = socket;\n                    socket.user_id = result_map._id;\n                    socket.emit( 'userupdate', result_map );\n                    emitUserList( io );\n                  }\n                );\n              }\n            }\n          );\n        });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        socket.on( 'updatechat', function ( chat_map ) {\n          if ( chatterMap.hasOwnProperty( chat_map.dest_id ) ) {\n            chatterMap[ chat_map.dest_id ]\n              .emit( 'updatechat', chat_map );\n          }\n          else {\n            socket.emit( 'updatechat', {\n              sender_id : chat_map.sender_id,\n              msg_text  : chat_map.dest_name + ' has gone offline.'\n            });\n          }\n        });\n\n\n\n        socket.on( 'leavechat', function () {\n          console.log(\n            '** user %s logged out **', socket.user_id\n          );\n          signOut( io, socket.user_id );\n        });\n\n        socket.on( 'disconnect', function () {\n          console.log(\n            '** user %s closed browser window or tab **',\n            socket.user_id\n          );\n          signOut( io, socket.user_id );\n        });\n\n\n\n\n\n\n\n\n\n\n\n\n\n        socket.on( 'updateavatar', function ( avtr_map ) {\n          crud.update(\n            'user',\n            { '_id'   : makeMongoId( avtr_map.person_id ) },\n            { css_map : avtr_map.css_map },\n            function ( result_list ) { emitUserList( io ); }\n          );\n        });\n\n      }\n    );\n\n\n    return io;\n  }\n};\n\nmodule.exports = chatObj;\n\n\n'spa/listings/apx0B/c.1/app.js'\n:\n\n\n\n\n\n'use strict';\nvar\n  http    = require( 'http'         ),\n  express = require( 'express'      ),\n  routes  = require( './lib/routes' ),\n\n  app     = express(),\n  server  = http.createServer( app );\n\n\n\napp.configure( function () {\n  app.use( express.bodyParser() );\n  app.use( express.methodOverride() );\n  app.use( express.static( __dirname + '/public' ) );\n  app.use( app.router );\n});\n\napp.configure( 'development', function () {\n  app.use( express.logger() );\n  app.use( express.errorHandler({\n    dumpExceptions : true,\n    showStack      : true\n  }) );\n});\n\napp.configure( 'production', function () {\n  app.use( express.errorHandler() );\n});\n\nroutes.configRoutes( app, server );\n\n\n\nserver.listen( 3000 );\nconsole.log(\n  'Express server listening on port %d in %s mode',\n   server.address().port, app.settings.env\n);\n\n",
        "gt": [
            "'spa/listings/apx0B/c.1/lib/chat.js'",
            "'spa/listings/apx0B/c.1/lib/routes.js'",
            "'spa/listings/apx0B/c.1/app.js'"
        ]
    },
    {
        "files": [
            "'ruui/cli/templates/default/src/store/actions.js'",
            "'ruui/cli/templates/default/src/store/reducers/index.js'",
            "'ruui/cli/templates/default/src/store/reducers/app.js'"
        ],
        "content": "'ruui/cli/templates/default/src/store/actions.js'\n:export const IncreaseCounter                = '@APP:INCREASE-COUNTER';\n\n'ruui/cli/templates/default/src/store/reducers/index.js'\n:import { combineReducers } from 'redux';\nimport appReducer from './app';\n\nexport default combineReducers({\n\tapp: appReducer\n});\n'ruui/cli/templates/default/src/store/reducers/app.js'\n:import * as Actions from '../actions';\n\nconst initialState = {\n\tcounter: 0,\n};\n\nexport default (state = initialState, action) => {\n\tswitch (action.type) {\n\tcase Actions.IncreaseCounter:\n\t\treturn { ...state, counter: state.counter + action.volume };\n\tdefault:\n\t\treturn state;\n\t}\n};",
        "gt": [
            "'ruui/cli/templates/default/src/store/actions.js'",
            "'ruui/cli/templates/default/src/store/reducers/app.js'",
            "'ruui/cli/templates/default/src/store/reducers/index.js'"
        ]
    },
    {
        "files": [
            "'nohost/src/content-type.js'",
            "'nohost/src/nohost-sw.js'",
            "'nohost/src/html-formatter.js'"
        ],
        "content": "'nohost/src/content-type.js'\n:'use strict';\n\nconst mime = require('browser-mime');\n\nfunction getMimeType(path) {\n  return mime.lookup(path) || 'application/octet-stream';\n}\n\n\nfunction isMedia(path) {\n  let mimeType = mime.lookup(path);\n  if(!mimeType) {\n    return false;\n  }\n\n  mimeType = mimeType.toLowerCase();\n\n\n  if(mimeType === 'application/ogg') {\n    return true;\n  }\n\n\n  return mimeType.startsWith('audio/') || mimeType.startsWith('video/');\n}\n\n\nfunction isImage(path) {\n  const mimeType = mime.lookup(path);\n  if(!mimeType) {\n    return false;\n  }\n\n  return mimeType.toLowerCase().startsWith('image/');\n}\n\nmodule.exports = {\n  isMedia,\n  isImage,\n  getMimeType\n};\n\n'nohost/src/nohost-sw.js'\n:const jsonFormatter = require('./json-formatter');\nconst htmlFormatter = require('./html-formatter');\nconst { serve } = require('./webserver');\nconst { debug, route } = require('./config');\n\n\n\nimportScripts('https:\n\nworkbox.setConfig({ debug });\n\n\nconst wwwRegex = new RegExp(`${route}(/.*)`);\n\nconst wwwPartialRegex = new RegExp(`${route}$`);\n\nworkbox.routing.registerRoute(\n  wwwRegex,\n  ({ url }) => {\n\n    let path = url.pathname.match(wwwRegex)[1];\n\n    path = decodeURI(path);\n\n\n    const formatter =\n      url.searchParams.get('json') !== null\n        ? jsonFormatter\n        : htmlFormatter;\n\n\n    const download =\n      url.searchParams.get('download') !== null ||\n      url.searchParams.get('dl') !== null;\n\n    return serve(path, formatter, download);\n  },\n  'GET'\n);\n\n\nworkbox.routing.registerRoute(\n  wwwPartialRegex,\n  ({ url }) => {\n    url.pathname = `${route}/`;\n    return Promise.resolve(Response.redirect(url, 302));\n  },\n  'GET'\n);\n\nworkbox.core.skipWaiting();\nworkbox.core.clientsClaim();\n\n'nohost/src/html-formatter.js'\n:'use strict';\n\nconst { isMedia, isImage, getMimeType } = require('./content-type');\nconst { path } = require('filer');\nconst { back, blank, folder, image2, movie, text, unknown } = require('../icons/icons');\n\n\nconst formatDate = d => {\n  const day = d.getDate();\n  const month = d.toLocaleString('en-us', { month: 'short' });\n  const year = d.getFullYear();\n  const hours = d.getHours();\n  const mins = d.getMinutes();\n  return `${day}-${month}-${year} ${hours}:${mins}`;\n};\n\nconst formatSize = s => {\n  const units = ['', 'K', 'M'];\n  if (!s) {\n    return '-';\n  }\n  const i = Math.floor(Math.log(s) / Math.log(1024)) | 0;\n  return Math.round(s / Math.pow(1024, i), 2) + units[i];\n};\n\nconst formatRow = (\n  icon,\n  alt = '[   ]',\n  href,\n  name,\n  modified,\n  size\n) => `<tr><td valign='top'><img src='${icon || unknown}' alt='${alt}'></td><td>\n      <a href='${href}'>${name}</a></td>\n      <td align='right'>${formatDate(new Date(modified))}</td>\n      <td align='right'>${formatSize(size)}</td><td>&nbsp;</td></tr>`;\n\nconst footerClose = '<address>nohost (Web Browser Server)</address></body></html>';\n\n\nfunction format404(url) {\n  const body = `\n    <!DOCTYPE html>\n    <html><head>\n    <title>404 Not Found</title>\n    </head><body>\n    <h1>Not Found</h1>\n    <p>The requested URL ${url} was not found on this server.</p>\n    <hr>${footerClose}`;\n\n  return {\n    body,\n    config: {\n      status: 404,\n      statusText: 'Not Found',\n      headers: { 'Content-Type': 'text/html' }\n    }\n  };\n}\n\n\nfunction format500(path, err) {\n  const body = `\n    <!DOCTYPE html>\n    <html><head>\n    <title>500 Internal Server Error</title>\n    </head><body>\n    <h1>Internal Server Error</h1>\n    <p>The server encountered an internal error while attempting to access ${path}.</p>\n    <p>The error was: ${err.message}.</p>\n    <hr>${footerClose}`;\n\n  return {\n    body,\n    config: {\n      status: 500,\n      statusText: 'Internal Error',\n      headers: { 'Content-Type': 'text/html' }\n    }\n  };\n}\n\n\nfunction formatDir(route, dirPath, entries) {\n  const parent = path.dirname(dirPath) || '/';\n\n  const url = encodeURI(route + parent);\n  const header = `\n    <!DOCTYPE html>\n    <html><head><title>Index of ${dirPath}</title></head>\n    <body><h1>Index of ${dirPath}</h1>\n    <table><tr><th><img src='${blank}' alt='[ICO]'></th>\n    <th><b>Name</b></th><th><b>Last modified</b></th>\n    <th><b>Size</b></th><th><b>Description</b></th></tr>\n    <tr><th colspan='5'><hr></th></tr>\n    <tr><td valign='top'><img src='${back}' alt='[DIR]'></td>\n    <td><a href='${url}'>Parent Directory</a></td><td>&nbsp;</td>\n    <td align='right'>  - </td><td>&nbsp;</td></tr>`;\n  const footer = `<tr><th colspan='5'><hr></th></tr></table>${footerClose}`;\n\n  const rows = entries.map(entry => {\n    const ext = path.extname(entry.name);\n\n    const href = encodeURI(`${route}${path.join(dirPath, entry.name)}`);\n    let icon;\n    let alt;\n\n\n    if (entry.type === 'DIRECTORY') {\n      icon = folder;\n      alt = '[DIR]';\n    } else {\n      if (isImage(ext)) {\n        icon = image2;\n        alt = '[IMG]';\n      } else if (isMedia(ext)) {\n        icon = movie;\n        alt = '[MOV]';\n      } else {\n        icon = text;\n        alt = '[TXT]';\n      }\n    }\n\n    return formatRow(icon, alt, href, entry.name, entry.mtime, entry.size);\n  }).join('\\n');\n\n  return {\n    body: header + rows + footer,\n    config: {\n      status: 200,\n      statusText: 'OK',\n      headers: { 'Content-Type': 'text/html' }\n    }\n  };\n}\n\nfunction formatFile(path, content) {\n  return {\n    body: content,\n    config: {\n      status: 200,\n      statusText: 'OK',\n      headers: { 'Content-Type': getMimeType(path) }\n    }\n  };\n}\n\nmodule.exports = {\n  format404,\n  format500,\n  formatDir,\n  formatFile\n};\n",
        "gt": [
            "'nohost/src/content-type.js'",
            "'nohost/src/html-formatter.js'",
            "'nohost/src/nohost-sw.js'"
        ]
    },
    {
        "files": [
            "'wp-optionskit/build/webpack.dev.conf.js'",
            "'wp-optionskit/build/utils.js'",
            "'wp-optionskit/build/webpack.base.conf.js'"
        ],
        "content": "'wp-optionskit/build/webpack.dev.conf.js'\n:'use strict'\nconst utils = require('./utils')\nconst webpack = require('webpack')\nconst config = require('../config')\nconst merge = require('webpack-merge')\nconst path = require('path')\nconst baseWebpackConfig = require('./webpack.base.conf')\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst FriendlyErrorsPlugin = require('friendly-errors-webpack-plugin')\nconst portfinder = require('portfinder')\n\nconst HOST = process.env.HOST\nconst PORT = process.env.PORT && Number(process.env.PORT)\n\nconst devWebpackConfig = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({ sourceMap: config.dev.cssSourceMap, usePostCSS: true })\n  },\n\n  devtool: config.dev.devtool,\n\n\n  devServer: {\n    clientLogLevel: 'warning',\n    historyApiFallback: {\n      rewrites: [\n        { from: /.*/, to: path.posix.join(config.dev.assetsPublicPath, 'index.html') },\n      ],\n    },\n    hot: true,\n    contentBase: false,\n    compress: true,\n    host: HOST || config.dev.host,\n    port: PORT || config.dev.port,\n    open: config.dev.autoOpenBrowser,\n    overlay: config.dev.errorOverlay\n      ? { warnings: false, errors: true }\n      : false,\n    publicPath: config.dev.assetsPublicPath,\n    proxy: config.dev.proxyTable,\n    quiet: true,\n    watchOptions: {\n      poll: config.dev.poll,\n    }\n  },\n  plugins: [\n    new webpack.DefinePlugin({\n      'process.env': require('../config/dev.env')\n    }),\n    new webpack.HotModuleReplacementPlugin(),\n    new webpack.NamedModulesPlugin(),\n    new webpack.NoEmitOnErrorsPlugin(),\n\n    new HtmlWebpackPlugin({\n      filename: 'index.html',\n      template: 'index.html',\n      inject: true\n    }),\n\n    new CopyWebpackPlugin([\n      {\n        from: path.resolve(__dirname, '../static'),\n        to: config.dev.assetsSubDirectory,\n        ignore: ['.*']\n      }\n    ])\n  ]\n})\n\nmodule.exports = new Promise((resolve, reject) => {\n  portfinder.basePort = process.env.PORT || config.dev.port\n  portfinder.getPort((err, port) => {\n    if (err) {\n      reject(err)\n    } else {\n\n      process.env.PORT = port\n\n      devWebpackConfig.devServer.port = port\n\n\n      devWebpackConfig.plugins.push(new FriendlyErrorsPlugin({\n        compilationSuccessInfo: {\n          messages: [`Your application is running here: http:\n        },\n        onErrors: config.dev.notifyOnErrors\n        ? utils.createNotifierCallback()\n        : undefined\n      }))\n\n      resolve(devWebpackConfig)\n    }\n  })\n})\n\n'wp-optionskit/build/utils.js'\n:'use strict'\nconst path = require('path')\nconst config = require('../config')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst packageConfig = require('../package.json')\n\nexports.assetsPath = function (_path) {\n  const assetsSubDirectory = process.env.NODE_ENV === 'production'\n    ? config.build.assetsSubDirectory\n    : config.dev.assetsSubDirectory\n\n  return path.posix.join(assetsSubDirectory, _path)\n}\n\nexports.cssLoaders = function (options) {\n  options = options || {}\n\n  const cssLoader = {\n    loader: 'css-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n  const postcssLoader = {\n    loader: 'postcss-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n\n  function generateLoaders (loader, loaderOptions) {\n    const loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]\n\n    if (loader) {\n      loaders.push({\n        loader: loader + '-loader',\n        options: Object.assign({}, loaderOptions, {\n          sourceMap: options.sourceMap\n        })\n      })\n    }\n\n\n\n    if (options.extract) {\n      return ExtractTextPlugin.extract({\n        use: loaders,\n        fallback: 'vue-style-loader'\n      })\n    } else {\n      return ['vue-style-loader'].concat(loaders)\n    }\n  }\n\n\n  return {\n    css: generateLoaders(),\n    postcss: generateLoaders(),\n    less: generateLoaders('less'),\n    sass: generateLoaders('sass', { indentedSyntax: true }),\n    scss: generateLoaders('sass'),\n    stylus: generateLoaders('stylus'),\n    styl: generateLoaders('stylus')\n  }\n}\n\n\nexports.styleLoaders = function (options) {\n  const output = []\n  const loaders = exports.cssLoaders(options)\n\n  for (const extension in loaders) {\n    const loader = loaders[extension]\n    output.push({\n      test: new RegExp('\\\\.' + extension + '$'),\n      use: loader\n    })\n  }\n\n  return output\n}\n\nexports.createNotifierCallback = () => {\n  const notifier = require('node-notifier')\n\n  return (severity, errors) => {\n    if (severity !== 'error') return\n\n    const error = errors[0]\n    const filename = error.file && error.file.split('!').pop()\n\n    notifier.notify({\n      title: packageConfig.name,\n      message: severity + ': ' + error.name,\n      subtitle: filename || '',\n      icon: path.join(__dirname, 'logo.png')\n    })\n  }\n}\n\n'wp-optionskit/build/webpack.base.conf.js'\n:'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst config = require('../config')\nconst vueLoaderConfig = require('./vue-loader.conf')\n\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\n\n\nmodule.exports = {\n  context: path.resolve(__dirname, '../'),\n  entry: {\n    app: './src/main.js'\n  },\n  output: {\n    path: config.build.assetsRoot,\n\t  jsonpFunction: 'wpJsonpFlightsWidget',\n    filename: '[name].js',\n    publicPath: process.env.NODE_ENV === 'production'\n      ? config.build.assetsPublicPath\n      : config.dev.assetsPublicPath\n  },\n  resolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src'),\n    }\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test'), resolve('node_modules/webpack-dev-server/client')]\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('media/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  },\n  node: {\n\n\n    setImmediate: false,\n\n\n    dgram: 'empty',\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty',\n    child_process: 'empty'\n  }\n}\n",
        "gt": [
            "'wp-optionskit/build/utils.js'",
            "'wp-optionskit/build/webpack.base.conf.js'",
            "'wp-optionskit/build/webpack.dev.conf.js'"
        ]
    },
    {
        "files": [
            "'Ahoy/src/components/InstalledChart.jsx'",
            "'Ahoy/__tests__/enzyme.js'",
            "'Ahoy/src/components/Version.jsx'"
        ],
        "content": "'Ahoy/src/components/InstalledChart.jsx'\n:import React from 'react';\nimport {\n  Button, Table, Header, Modal, Icon, Accordion, List, Popup,\n} from 'semantic-ui-react';\nimport Version from './Version';\n\nconst util = require('util');\nconst exec = util.promisify(require('child_process').exec);\n\n\nconst InstalledChart = (props) => {\n  const {\n    chart, history, toggleHistory, doHelmChartRollBack,\n  } = props;\n  const {\n    app_version, chartName, name, namespace, revision, updated,\n  } = chart;\n\n\n  const chartDetails = [\n    {\n      key: 'detailKey',\n      title: name,\n      content: {\n        content: (\n          <div className=\"accordian-chart-details\">\n            <List>\n              <List.Item icon=\"clone\" content={`Namespace: ${namespace}`} />\n              <List.Item icon=\"at\" content={`Current App Version: ${app_version}`} />\n              <List.Item icon=\"sort numeric down\" content={`Revision: ${revision}`} />\n              <List.Item icon=\"clock outline\" content={`Last Updated: ${updated}`} />\n            </List>\n          </div>\n        ),\n      },\n    },\n  ];\n\n\n  const uninstallHelmChart = async () => {\n    const helmChart = chart.name;\n    await exec(`helm uninstall ${helmChart}`);\n    props.getDeployedCharts();\n  };\n\n\n  const versionsArray = [];\n  for (let i = 0; i < history.length; i++) {\n    versionsArray.push(\n      <Version\n        key={`key-${i}`}\n        details={history[i]}\n        release={name}\n        doHelmChartRollBack={doHelmChartRollBack}\n      />,\n    );\n  }\n\n\n\n\n  return (\n    <Table.Row>\n      <Table.Cell className=\"installed-chart-cell\">\n        <Table className=\"borderless\">\n          <Table.Body>\n            <Table.Row>\n              <Table.Cell>\n                <Accordion panels={chartDetails} />\n              </Table.Cell>\n              <Table.Cell>\n                <Button\n                  id=\"historyBtn\"\n                  className=\"button-right\"\n                  onClick={() => toggleHistory(name)}\n                  size=\"tiny\"\n                  compact\n                >\n                  History\n                </Button>\n                <Popup\n                  trigger={(\n                    <Button\n                      name=\"uninstall\"\n                      id=\"uninstallBtn\"\n                      className=\"button-right\"\n                      size=\"tiny\"\n                      compact\n                    >\n                      Uninstall\n                    </Button>\n                  )}\n                  content={(\n                    <Button\n                      id=\"uninstallBtnConfirm\"\n                      color=\"red\"\n                      content=\"Confirm Uninstall\"\n                      onClick={() => {\n                        uninstallHelmChart();\n                      }}\n                    />\n                  )}\n                  id=\"confirm\"\n                  on=\"click\"\n                  position=\"top right\"\n                />\n              </Table.Cell>\n            </Table.Row>\n            {versionsArray}\n          </Table.Body>\n        </Table>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default InstalledChart;\n\n'Ahoy/__tests__/enzyme.js'\n:import React from 'react';\nimport { configure, shallow } from 'enzyme';\nimport Adapter from 'enzyme-adapter-react-16';\nimport LocalChart from '../src/components/LocalChart';\nimport InstalledChart from '../src/components/InstalledChart';\n\nconfigure({ adapter: new Adapter() });\n\ndescribe('All enzyme tests', () => {\n  let wrapper;\n\n  describe('Local Chart Button Tests', () => {\n\n    const props = {\n      chart: {},\n      id: 'id',\n      key: 'keyString1',\n      dirPath: jest.fn(),\n      getDeployedCharts: jest.fn(),\n      handleOpenChartClick: jest.fn(),\n      installHelmChart: jest.fn(),\n    };\n\n    beforeAll(() => {\n      wrapper = shallow(<LocalChart {...props} />);\n    });\n\n    describe('Install Button', () => {\n      it('Should render an install button', () => {\n        expect(wrapper.find('#installBtn')).toHaveLength(1);\n      });\n    });\n    describe('Open Folder Button', () => {\n      it('Should execute passed in function when clicked', () => {\n        wrapper.find('#openChartBtn').simulate('click');\n        expect(props.handleOpenChartClick).toHaveBeenCalled();\n      });\n    });\n  });\n\n  describe('Installed Chart Button Tests', () => {\n    let wrapper2;\n    const props = {\n      key: {},\n      id: 'id',\n      chart: {},\n      history: {},\n      getDeployedCharts: jest.fn(),\n      toggleHistory: jest.fn(),\n      doHelmChartRollBack: jest.fn(),\n    };\n\n    beforeAll(() => {\n      wrapper = shallow(<InstalledChart {...props} />);\n    });\n\n    describe('Uninstall Popup Button', () => {\n      it('Renders a popup when pressed', () => {\n        wrapper.find('Popup').simulate('click');\n        expect(wrapper.find('#confirm').exists()).toEqual(true);\n      });\n    });\n    describe('History Button', () => {\n      it('Should execute passed in function when clicked', () => {\n        wrapper.find('#historyBtn').simulate('click');\n        expect(props.toggleHistory).toHaveBeenCalled();\n      });\n    });\n  });\n});\n\n'Ahoy/src/components/Version.jsx'\n:import React from 'react';\nimport {\n  Table, List, Icon,\n} from 'semantic-ui-react';\n\n\nfunction Version(props) {\n  const { details, release, doHelmChartRollBack } = props;\n  const {\n    app_version, chart, description, revision, status, updated,\n  } = details;\n\n  return (\n    <Table.Row className=\"installed-chart-detail\" data-testid=\"VersionRow\">\n      <Table.Cell data-testid=\"tableCell\" colSpan=\"2\" className=\"installed-chart-detail\">\n        <List data-testid=\"mainList\">\n          <List.Item>\n            <List.List data-testid=\"subList\">\n              <List.Item>\n                <div>\n                  <strong>Version:</strong>\n                  {app_version}\n                  {status === 'deployed' ? <i> current</i>\n                    : (\n                      <Icon\n                        name=\"undo\"\n                        link\n                        size=\"small\"\n                        color=\"orange\"\n                        onClick={() => doHelmChartRollBack(release, revision)}\n                      />\n                    )}\n                </div>\n              </List.Item>\n              <List.Item icon=\"chart line\" content={`Chart: ${chart}`} />\n              <List.Item icon=\"sticky note outline\" content={`Description: ${description}`} />\n              <List.Item icon=\"star\" content={`Status: ${status}`} />\n              <List.Item icon=\"sort numeric down\" content={`Revision: ${revision}`} />\n              <List.Item icon=\"clock outline\" content={`Updated: ${updated}`} />\n            </List.List>\n          </List.Item>\n        </List>\n      </Table.Cell>\n    </Table.Row>\n  );\n}\n\nexport default Version;\n",
        "gt": [
            "'Ahoy/src/components/Version.jsx'",
            "'Ahoy/src/components/InstalledChart.jsx'",
            "'Ahoy/__tests__/enzyme.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/ruuiProvider.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/store/action/app.js'"
        ],
        "content": "'ruui/src/components/ruuiProvider.js'\n:import React, { Component } from 'react';\nimport { NetInfo, Dimensions } from 'react-native';\nimport PropTypes from 'prop-types';\nimport { merge } from 'lodash';\n\nimport coreConfigs from '../configs/core';\nimport { isServer } from '../utils';\nimport { createStore } from '../utils/ruuiStore';\nimport appReducer from '../store/appReducer';\nimport * as appActions from '../store/action/app';\nimport { Element, RuuiConfigs } from '../typeDefinition';\n\ntype Props = {\n\tchildren?: Element,\n\tstore?: Object,\n\tconfigs?: RuuiConfigs,\n\tsubscribeNetInfo?: Boolean,\n\tsubscribeDimension?: Boolean,\n};\n\nconst navigator = global.navigator || {},\n\tconnectionModule = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n\nclass RuuiProvider extends Component {\n\tstatic props: Props;\n\n\tstatic defaultProps = {\n\t\tconfigs: {},\n\t\tsubscribeNetInfo: false,\n\t\tsubscribeDimension: true,\n\t\tstore: createStore(appReducer),\n\t};\n\n\tstatic childContextTypes = {\n\t\truuiStore: PropTypes.object,\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.store = props.store;\n\t\tthis.configs = merge({}, coreConfigs, props.configs);\n\t}\n\n\tgetChildContext() {\n\t\treturn {\n\t\t\truuiStore: this.store,\n\t\t\truuiConfigs: this.configs,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { store, subscribeDimension, subscribeNetInfo } = this.props;\n\n\t\tif (isServer || !store) return;\n\t\tif (subscribeDimension) this.subscribeAndUpdateDimensions();\n\t\tif (subscribeNetInfo && connectionModule) this.subscribeAndUpdateNetworkInfo();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tconst { store, subscribeDimension, subscribeNetInfo } = this.props;\n\n\t\tif (isServer || !store) return;\n\n\t\tif (subscribeDimension) {\n\t\t\tDimensions.removeEventListener('change', this.handleDimensionChange);\n\t\t}\n\n\t\tif (subscribeNetInfo && connectionModule) {\n\t\t\tNetInfo.removeEventListener('connectionChange', this.handleConnectionTypeChange);\n\t\t\tNetInfo.isConnected.removeEventListener('connectionChange', this.handleIsConnectedChange);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { children } = this.props;\n\t\treturn children;\n\t}\n\n\tsubscribeAndUpdateDimensions = () => {\n\t\tthis.handleDimensionChange({\n\t\t\twindow: Dimensions.get('window'),\n\t\t\tscreen: Dimensions.get('screen'),\n\t\t});\n\n\t\tDimensions.addEventListener('change', this.handleDimensionChange);\n\t};\n\n\thandleDimensionChange = (data) => {\n\t\tthis.store.dispatch(appActions.updateDimensionsInfo(data));\n\t};\n\n\tsubscribeAndUpdateNetworkInfo = () => {\n\t\tNetInfo.getConnectionInfo && NetInfo.getConnectionInfo()\n\t\t\t.then(connectionInfo => this.handleConnectionTypeChange(connectionInfo));\n\n\t\tNetInfo.isConnected.getConnectionInfo && NetInfo.isConnected.getConnectionInfo()\n\t\t\t.then(isConnected => this.handleIsConnectedChange(isConnected));\n\n\t\tNetInfo.addEventListener('connectionChange', this.handleConnectionTypeChange);\n\t\tNetInfo.isConnected.addEventListener('connectionChange', this.handleIsConnectedChange);\n\t};\n\n\thandleConnectionTypeChange = (connectionType) => {\n\t\tthis.store.dispatch(appActions.updateNetInfo({ connectionType, }));\n\t};\n\n\thandleIsConnectedChange = (isConnected) => {\n\t\tthis.store.dispatch(appActions.updateNetInfo({ isConnected, }));\n\t};\n}\n\nexport default RuuiProvider;\n\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/store/action/app.js'\n:import * as Actions from '../actions';\nimport { uuid } from '../../utils';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function reduxSync(state = {}) {\n\treturn { type: Actions.ReduxSync, state };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function toggleTooltip(flag, configs = {}) {\n\treturn { type: Actions.ToggleTooltip, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}\n",
        "gt": [
            "'ruui/src/store/action/app.js'",
            "'ruui/src/components/ruuiProvider.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/cli/addons/ssr/src/store/reducers/app.js'",
            "'ruui/cli/addons/ssr/src/store/reducers/index.js'",
            "'ruui/cli/addons/ssr/src/store/actions.js'"
        ],
        "content": "'ruui/cli/addons/ssr/src/store/reducers/app.js'\n:import * as Actions from '../actions';\n\nconst initialState = {\n\tcounter: 0,\n};\n\nexport default (state = initialState, action) => {\n\tswitch (action.type) {\n\tcase Actions.IncreaseCounter:\n\t\treturn { ...state, counter: state.counter + action.volume };\n\tdefault:\n\t\treturn state;\n\t}\n};\n'ruui/cli/addons/ssr/src/store/reducers/index.js'\n:import { combineReducers } from 'redux';\nimport appReducer from './app';\n\nexport default combineReducers({\n\tapp: appReducer\n});\n'ruui/cli/addons/ssr/src/store/actions.js'\n:export const IncreaseCounter                = '@APP:INCREASE-COUNTER';\n",
        "gt": [
            "'ruui/cli/addons/ssr/src/store/actions.js'",
            "'ruui/cli/addons/ssr/src/store/reducers/app.js'",
            "'ruui/cli/addons/ssr/src/store/reducers/index.js'"
        ]
    },
    {
        "files": [
            "'react-html-document/test/client.spec.js'",
            "'react-html-document/src/client.js'",
            "'react-html-document/test/utils.js'",
            "'react-html-document/src/index.js'"
        ],
        "content": "'react-html-document/test/client.spec.js'\n:import { expect } from 'chai';\n\nimport { getUniversalStateFromScript } from '../src/client';\nimport { STATE_SCRIPT_ID, ERRORS } from '../src/constants';\nimport { renderAndGetQuerySelector } from './utils';\n\n\ndescribe('Client', () => {\n  it('getUniversalStateFromScript grabs state from dom', () => {\n    const props = {\n      universalState: { myState: true }\n    };\n    const qs = renderAndGetQuerySelector(props);\n    const stateScript = qs(`script#${STATE_SCRIPT_ID}`);\n    const parser = script => JSON.parse(script.text());\n    const state = getUniversalStateFromScript(stateScript, parser);\n    expect(state).to.deep.equal(props.universalState);\n  });\n\n  it('getUniversalStateFromScript throws helpful error if there\\'s no state on the document', () => {\n    const props = {};\n    const qs = renderAndGetQuerySelector(props);\n    const script = qs(`script#${STATE_SCRIPT_ID}`).html();\n    expect(getUniversalStateFromScript.bind(null, script)).to.throw(new RegExp(ERRORS.STATE_NOT_FOUND));\n  });\n});\n\n'react-html-document/src/client.js'\n:import { STATE_SCRIPT_ID, ERRORS } from './constants';\n\n\nconst defaultStateParser = script => JSON.parse(script.textContent);\n\nexport function getUniversalStateFromScript(script, parser = defaultStateParser) {\n  if ( !script ) {\n    throw new Error(ERRORS.STATE_NOT_FOUND);\n  }\n  return parser(script);\n}\n\nexport default function getUniversalState() {\n  const script = document.getElementById(STATE_SCRIPT_ID);\n  return getUniversalStateFromScript(script);\n}\n\n'react-html-document/test/utils.js'\n:import React from 'react';\nimport cheerio from 'cheerio';\nimport HTMLDocument from '../src/index';\nimport { renderToStaticMarkup } from 'react-dom/server';\n\n\nexport function renderAndGetQuerySelector(props, children) {\n  const htmlDocumentEl = <HTMLDocument {...props}>{children}</HTMLDocument>;\n  const markup = renderToStaticMarkup(htmlDocumentEl);\n  return cheerio.load(markup);\n}\n\n'react-html-document/src/index.js'\n:import HTMLDocument from './HTMLDocument';\nimport getUniversalState from './client';\nexport { getUniversalState, HTMLDocument as default };\n",
        "gt": [
            "'react-html-document/src/client.js'",
            "'react-html-document/src/index.js'",
            "'react-html-document/test/utils.js'",
            "'react-html-document/test/client.spec.js'"
        ]
    },
    {
        "files": [
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/specs/index.js'",
            "'react-modal/src/helpers/classList.js'",
            "'react-modal/specs/helper.js'"
        ],
        "content": "'react-modal/specs/Modal.testability.spec.js'\n:\nimport ReactDOM from \"react-dom\";\nimport sinon from \"sinon\";\nimport { withModal } from \"./helper\";\n\nexport default () => {\n  it(\"allows ReactDOM.createPortal to be overridden in real-time\", () => {\n    const createPortalSpy = sinon.spy(ReactDOM, \"createPortal\");\n    const props = { isOpen: true };\n    withModal(props, \"hello\");\n    createPortalSpy.called.should.be.ok();\n    ReactDOM.createPortal.restore();\n  });\n};\n\n'react-modal/specs/index.js'\n:\n\nimport ModalState from \"./Modal.spec\";\nimport ModalEvents from \"./Modal.events.spec\";\nimport ModalStyle from \"./Modal.style.spec\";\nimport ModalHelpers from \"./Modal.helpers.spec\";\nimport ModalTestability from \"./Modal.testability.spec\";\n\ndescribe(\"State\", ModalState);\ndescribe(\"Style\", ModalStyle);\ndescribe(\"Events\", ModalEvents);\ndescribe(\"Helpers\", ModalHelpers);\ndescribe(\"Testability\", ModalTestability);\n\n'react-modal/src/helpers/classList.js'\n:let htmlClassList = {};\nlet docBodyClassList = {};\n\n\n\nfunction removeClass(at, cls) {\n  at.classList.remove(cls);\n}\n\n\nexport function resetState() {\n  const htmlElement = document.getElementsByTagName(\"html\")[0];\n  for (let cls in htmlClassList) {\n    removeClass(htmlElement, htmlClassList[cls]);\n  }\n\n  const body = document.body;\n  for (let cls in docBodyClassList) {\n    removeClass(body, docBodyClassList[cls]);\n  }\n\n  htmlClassList = {};\n  docBodyClassList = {};\n}\n\n\nexport function log() {\n  if (process.env.NODE_ENV !== \"production\") {\n    let classes = document.getElementsByTagName(\"html\")[0].className;\n    let buffer = \"Show tracked classes:\\n\\n\";\n\n    buffer += `<html /> (${classes}):\n  `;\n    for (let x in htmlClassList) {\n      buffer += `  ${x} ${htmlClassList[x]}\n  `;\n    }\n\n    classes = document.body.className;\n\n    buffer += `\\n\\ndoc.body (${classes}):\n  `;\n    for (let x in docBodyClassList) {\n      buffer += `  ${x} ${docBodyClassList[x]}\n  `;\n    }\n\n    buffer += \"\\n\";\n\n    console.log(buffer);\n  }\n}\n\n\n\nconst incrementReference = (poll, className) => {\n  if (!poll[className]) {\n    poll[className] = 0;\n  }\n  poll[className] += 1;\n  return className;\n};\n\n\nconst decrementReference = (poll, className) => {\n  if (poll[className]) {\n    poll[className] -= 1;\n  }\n  return className;\n};\n\n\nconst trackClass = (classListRef, poll, classes) => {\n  classes.forEach(className => {\n    incrementReference(poll, className);\n    classListRef.add(className);\n  });\n};\n\n\nconst untrackClass = (classListRef, poll, classes) => {\n  classes.forEach(className => {\n    decrementReference(poll, className);\n    poll[className] === 0 && classListRef.remove(className);\n  });\n};\n\n\nexport const add = (element, classString) =>\n  trackClass(\n    element.classList,\n    element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList,\n    classString.split(\" \")\n  );\n\n\nexport const remove = (element, classString) =>\n  untrackClass(\n    element.classList,\n    element.nodeName.toLowerCase() == \"html\" ? htmlClassList : docBodyClassList,\n    classString.split(\" \")\n  );\n\n'react-modal/specs/helper.js'\n:import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Modal, { bodyOpenClassName } from \"../src/components/Modal\";\nimport TestUtils from \"react-dom/test-utils\";\nimport { log as classListLog } from \"../src/helpers/classList\";\nimport { log as focusManagerLog } from \"../src/helpers/focusManager\";\nimport { log as ariaAppLog } from \"../src/helpers/ariaAppHider\";\nimport { log as bodyTrapLog } from \"../src/helpers/bodyTrap\";\nimport { log as portalInstancesLog } from \"../src/helpers/portalOpenInstances\";\n\nconst debug = false;\n\nlet i = 0;\n\n\nexport function log(label, spaces) {\n  if (!debug) return;\n\n  console.log(`${label} -----------------`);\n  console.log(document.body.children.length);\n  const logChildren = c => console.log(c.nodeName, c.className, c.id);\n  document.body.children.forEach(logChildren);\n\n  ariaAppLog();\n  bodyTrapLog();\n  classListLog();\n  focusManagerLog();\n  portalInstancesLog();\n\n  console.log(`end ${label} -----------------` + (!spaces ? '' : `\n\n\n`));\n}\n\nlet elementPool = [];\n\n\nexport function createHTMLElement(name) {\n  const e = document.createElement(name);\n  elementPool[elementPool.length - 1].push(e);\n  e.className = `element_pool_${name}-${++i}`;\n  return e;\n}\n\n\nexport function drainPool(pool) {\n  pool.forEach(e => e.parentNode && e.parentNode.removeChild(e));\n}\n\n\nexport function withElementCollector(work) {\n  let r;\n  let poolIndex = elementPool.length;\n  elementPool[poolIndex] = [];\n  try {\n    r = work();\n  } finally {\n    drainPool(elementPool[poolIndex]);\n    elementPool = elementPool.slice(\n      0, poolIndex\n    );\n  }\n  return r;\n}\n\n\nif (!String.prototype.includes) {\n  String.prototype.includes = function(search, start) {\n    if (typeof start !== \"number\") {\n      start = 0;\n    }\n\n    if (start + search.length > this.length) {\n      return false;\n    }\n\n    return this.indexOf(search, start) !== -1;\n  };\n}\n\n\nexport const documentClassList = () => document.body.classList;\n\n\nexport const isDocumentWithReactModalOpenClass = (\n  bodyClass = bodyOpenClassName\n) => document.body.className.includes(bodyClass);\n\n\nexport const htmlClassList = () =>\n  document.getElementsByTagName(\"html\")[0].classList;\n\n\nexport const isHtmlWithReactModalOpenClass = htmlClass =>\n  htmlClassList().contains(htmlClass);\n\n\nexport const findDOMWithClass = TestUtils.findRenderedDOMComponentWithClass;\n\n\nconst getModalAttribute = component => (instance, attr) =>\n  modalComponent(component)(instance).getAttribute(attr);\n\n\nconst modalComponent = component => instance => instance.portal[component];\n\n\nexport const mcontent = modalComponent(\"content\");\n\n\nexport const moverlay = modalComponent(\"overlay\");\n\n\nexport const contentAttribute = getModalAttribute(\"content\");\n\n\nexport const overlayAttribute = getModalAttribute(\"overlay\");\n\nconst Simulate = TestUtils.Simulate;\n\nconst dispatchMockEvent = eventCtor => (key, code) => (element, opts) =>\n  eventCtor(\n    element,\n    Object.assign(\n      {},\n      {\n        key: key,\n        which: code\n      },\n      code,\n      opts\n    )\n  );\n\nconst dispatchMockKeyDownEvent = dispatchMockEvent(Simulate.keyDown);\n\n\nexport const escKeyDown = dispatchMockKeyDownEvent(\"ESC\", { keyCode: 27 });\n\nexport const escKeyDownWithCode = dispatchMockKeyDownEvent(\"ESC\", {\n  code: \"Escape\"\n});\n\nexport const tabKeyDown = dispatchMockKeyDownEvent(\"TAB\", { keyCode: 9 });\n\nexport const tabKeyDownWithCode = dispatchMockKeyDownEvent(\"TAB\", {\n  code: \"Tab\"\n});\n\nexport const clickAt = Simulate.click;\n\nexport const mouseUpAt = Simulate.mouseUp;\n\nexport const mouseDownAt = Simulate.mouseDown;\n\nexport const noop = () => {};\n\n\nexport const withModal = function(props, children, test = noop) {\n  return withElementCollector(() => {\n    const node = createHTMLElement();\n    const modalProps = { ariaHideApp: false, ...props };\n    let modal;\n    try {\n      ReactDOM.render(\n        <Modal ref={m => (modal = m)} {...modalProps}>\n          {children}\n        </Modal>,\n        node\n      );\n      test(modal);\n    } finally {\n      ReactDOM.unmountComponentAtNode(node);\n    }\n  });\n};\n",
        "gt": [
            "'react-modal/src/helpers/classList.js'",
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/specs/index.js'"
        ]
    },
    {
        "files": [
            "'spa/listings/apx0B/base-8.6.5/app.js'",
            "'spa/listings/apx0B/base-8.6.5/lib/routes.js'",
            "'spa/listings/apx0B/base-8.6.5/lib/chat.js'"
        ],
        "content": "'spa/listings/apx0B/base-8.6.5/app.js'\n:\n\n\n\n\n\n'use strict';\nvar\n  http    = require( 'http'         ),\n  express = require( 'express'      ),\n  routes  = require( './lib/routes' ),\n\n  app     = express(),\n  server  = http.createServer( app );\n\n\n\napp.configure( function () {\n  app.use( express.bodyParser() );\n  app.use( express.methodOverride() );\n  app.use( express.static( __dirname + '/public' ) );\n  app.use( app.router );\n});\n\napp.configure( 'development', function () {\n  app.use( express.logger() );\n  app.use( express.errorHandler({\n    dumpExceptions : true,\n    showStack      : true\n  }) );\n});\n\napp.configure( 'production', function () {\n  app.use( express.errorHandler() );\n});\n\nroutes.configRoutes( app, server );\n\n\n\nserver.listen( 3000 );\nconsole.log(\n  'Express server listening on port %d in %s mode',\n   server.address().port, app.settings.env\n);\n\n\n'spa/listings/apx0B/base-8.6.5/lib/routes.js'\n:\n\n\n\n\n\n'use strict';\nvar\n  configRoutes,\n  crud        = require( './crud' ),\n  chat        = require( './chat' ),\n  makeMongoId = crud.makeMongoId;\n\n\n\nconfigRoutes = function ( app, server ) {\n  app.get( '/', function ( request, response ) {\n    response.redirect( '/spa.html' );\n  });\n\n  app.all( '/:obj_type\n\n\n\n\n\n'use strict';\nvar\n  emitUserList, signIn, signOut, chatObj,\n  socket = require( 'socket.io' ),\n  crud   = require( './crud'    ),\n\n  makeMongoId = crud.makeMongoId,\n  chatterMap  = {};\n\n\n\n\n\nemitUserList = function ( io ) {\n  crud.read(\n    'user',\n    { is_online : true },\n    {},\n    function ( result_list ) {\n      io\n        .of( '/chat' )\n        .emit( 'listchange', result_list );\n    }\n  );\n};\n\n\n\nsignIn = function ( io, user_map, socket ) {\n  crud.update(\n    'user',\n    { '_id'     : user_map._id },\n    { is_online : true         },\n    function ( result_map ) {\n      emitUserList( io );\n      user_map.is_online = true;\n      socket.emit( 'userupdate', user_map );\n    }\n  );\n\n  chatterMap[ user_map._id ] = socket;\n  socket.user_id = user_map._id;\n};\n\n\n\nsignOut = function ( io, user_id ) {\n  crud.update(\n    'user',\n    { '_id'     : user_id },\n    { is_online : false   },\n    function ( result_list ) { emitUserList( io ); }\n  );\n  delete chatterMap[ user_id ];\n};\n\n\n\nchatObj = {\n  connect : function ( server ) {\n    var io = socket.listen( server );\n\n\n    io\n      .set( 'blacklist' , [] )\n      .of( '/chat' )\n      .on( 'connection', function ( socket ) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        socket.on( 'adduser', function ( user_map ) {\n          crud.read(\n            'user',\n            { name : user_map.name },\n            {},\n            function ( result_list ) {\n              var\n                result_map,\n                cid = user_map.cid;\n\n              delete user_map.cid;\n\n\n              if ( result_list.length > 0 ) {\n                result_map     = result_list[ 0 ];\n                result_map.cid = cid;\n                signIn( io, result_map, socket );\n              }\n\n\n              else {\n                user_map.is_online = true;\n                crud.construct(\n                  'user',\n                  user_map,\n                  function ( result_list ) {\n                    result_map     = result_list[ 0 ];\n                    result_map.cid = cid;\n                    chatterMap[ result_map._id ] = socket;\n                    socket.user_id = result_map._id;\n                    socket.emit( 'userupdate', result_map );\n                    emitUserList( io );\n                  }\n                );\n              }\n            }\n          );\n        });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        socket.on( 'updatechat', function ( chat_map ) {\n          if ( chatterMap.hasOwnProperty( chat_map.dest_id ) ) {\n            chatterMap[ chat_map.dest_id ]\n              .emit( 'updatechat', chat_map );\n          }\n          else {\n            socket.emit( 'updatechat', {\n              sender_id : chat_map.sender_id,\n              msg_text  : chat_map.dest_name + ' has gone offline.'\n            });\n          }\n        });\n\n\n\n        socket.on( 'leavechat', function () {\n          console.log(\n            '** user %s logged out **', socket.user_id\n          );\n          signOut( io, socket.user_id );\n        });\n\n        socket.on( 'disconnect', function () {\n          console.log(\n            '** user %s closed browser window or tab **',\n            socket.user_id\n          );\n          signOut( io, socket.user_id );\n        });\n\n\n\n\n\n\n\n\n\n\n\n\n\n        socket.on( 'updateavatar', function ( avtr_map ) {\n          crud.update(\n            'user',\n            { '_id'   : makeMongoId( avtr_map.person_id ) },\n            { css_map : avtr_map.css_map },\n            function ( result_list ) { emitUserList( io ); }\n          );\n        });\n\n      }\n    );\n\n\n    return io;\n  }\n};\n\nmodule.exports = chatObj;\n\n",
        "gt": [
            "'spa/listings/apx0B/base-8.6.5/lib/chat.js'",
            "'spa/listings/apx0B/base-8.6.5/lib/routes.js'",
            "'spa/listings/apx0B/base-8.6.5/app.js'"
        ]
    },
    {
        "files": [
            "'shopify-react-astro/src/components/CartTable.jsx'",
            "'shopify-react-astro/src/components/Cart.jsx'",
            "'shopify-react-astro/src/utilityFunctions.js'"
        ],
        "content": "'shopify-react-astro/src/components/CartTable.jsx'\n:import React from 'react';\nimport { formatPrice, itemTotal } from '../utilityFunctions';\n\nexport default function CartTable({ cartItems, cartId, removeItem }) {\n  let removeItemFromCart = (itemId) => {\n    fetch(\n      `${import.meta.env.NETLIFY_URL}/.netlify/functions/remove-from-cart`,\n      {\n        method: 'POST',\n        body: JSON.stringify({\n          cartId: cartId,\n          lineId: itemId,\n        }),\n      }\n    )\n      .then((response) => response.json())\n      .then((response) => {\n        console.log('--- Item deleted ---');\n\n        removeItem(response.lines.edges);\n        return response;\n      });\n  };\n\n  return (\n    <table className=\"cart-table\">\n      <thead>\n        <tr>\n          <th className=\"cart-table-heading\">Item</th>\n          <th className=\"cart-table-heading\">Price</th>\n          <th className=\"cart-table-heading\">Quantity</th>\n          <th className=\"cart-table-heading\">Total</th>\n          <th className=\"cart-table-heading\">Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {cartItems.map((item, index) => {\n          item = item.node;\n\n          let merchandiseTitle =\n            item.merchandise.title === 'Default Title'\n              ? ''\n              : `(${item.merchandise.title})`;\n          return (\n            <tr className=\"cart-table-row\" key={`cartItem${index}`}>\n              <td className=\"cart-table-cell\">\n                {item.merchandise.product.title} {merchandiseTitle}\n              </td>\n              <td className=\"cart-table-cell\">\n                {formatPrice(\n                  item.merchandise.priceV2.amount,\n                  item.merchandise.priceV2.currencyCode\n                )}\n              </td>\n              <td className=\"cart-table-cell\">{item.quantity}</td>\n              <td className=\"cart-table-cell\">\n                {itemTotal(item.merchandise.priceV2, item.quantity)}\n              </td>\n              <td className=\"cart-table-cell\">\n                <button\n                  onClick={() => {\n                    removeItemFromCart(item.id);\n                  }}\n                >\n                  Remove Item\n                </button>\n              </td>\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n\n'shopify-react-astro/src/components/Cart.jsx'\n:import React, { useState, useEffect } from 'react';\nimport CartTable from './CartTable';\nimport CartTotal from './CartTotal';\n\nexport default function Cart() {\n  const [showProducts, setShowProducts] = useState(true);\n  const [products, setProducts] = useState([]);\n  const [cost, setCost] = useState({});\n  const [cartId, setCartId] = useState(null);\n\n  useEffect(() => {\n    const localCart = window.localStorage.getItem('astroCartId');\n\n    let data;\n\n    if (localCart === null) {\n      setShowProducts(false);\n    } else {\n      setCartId(localCart);\n      data = fetch(\n        `${import.meta.env.NETLIFY_URL}/.netlify/functions/get-cart`,\n        {\n          method: 'post',\n          body: JSON.stringify({\n            cartId: localCart,\n          }),\n          headers: { 'Content-Type': 'application/json' },\n        }\n      )\n        .then((res) => res.json())\n        .then((response) => {\n          setProducts(response.cart.lines.edges);\n          setCost(response.cart.estimatedCost);\n          return response;\n        });\n    }\n  }, []);\n\n  return (\n    <div>\n      {showProducts && products.length > 0 ? (\n        <div>\n          <CartTable\n            cartItems={products}\n            cartId={cartId}\n            removeItem={setProducts}\n          />\n          <CartTotal cost={cost} />\n        </div>\n      ) : (\n        <div className=\"cart-page-message\">\n          No products to show! Get shopping!\n        </div>\n      )}\n    </div>\n  );\n}\n\n'shopify-react-astro/src/utilityFunctions.js'\n:export function formatPrice(num, currency) {\n  return parseFloat(num).toLocaleString('en-US', {\n    style: 'currency',\n    currency: currency || 'USD',\n  });\n}\n\nexport function formatPriceWithDefault(num, currency) {\n  if (num === null) {\n    return '$0.00';\n  }\n  return parseFloat(num).toLocaleString('en-US', {\n    style: 'currency',\n    currency: currency || 'USD',\n  });\n}\n\nexport function itemTotal(price, quantity) {\n  const totalPrice = parseFloat(price.amount) * parseInt(quantity);\n\n  return formatPrice(totalPrice, price.currencyCode);\n}\n\nexport default { formatPrice, itemTotal };\n",
        "gt": [
            "'shopify-react-astro/src/utilityFunctions.js'",
            "'shopify-react-astro/src/components/CartTable.jsx'",
            "'shopify-react-astro/src/components/Cart.jsx'"
        ]
    },
    {
        "files": [
            "'cypress-plugin-snapshots/src/utils/text/removeExcludedFields.js'",
            "'cypress-plugin-snapshots/src/server/initServer.js'",
            "'cypress-plugin-snapshots/__tests__/plugin.test.js'",
            "'cypress-plugin-snapshots/plugin.js'",
            "'cypress-plugin-snapshots/src/save/saveTextSnapshot.js'",
            "'cypress-plugin-snapshots/src/utils/tasks/textSnapshots.js'"
        ],
        "content": "'cypress-plugin-snapshots/src/utils/text/removeExcludedFields.js'\n:function removeExcludedFields(subject, excludedFields) {\n  if (excludedFields) {\n    if (Array.isArray(subject)) {\n      return subject.map(item => removeExcludedFields(item, excludedFields));\n    }\n\n    if (typeof subject === 'object' && subject !== null) {\n      return Object.keys(subject)\n        .filter(key => excludedFields.indexOf(key) === -1)\n        .reduce((result, key) => {\n          result[key] = removeExcludedFields(subject[key], excludedFields);\n          return result;\n        }, {});\n    }\n  }\n\n  return subject;\n}\n\nmodule.exports = removeExcludedFields;\n\n'cypress-plugin-snapshots/src/server/initServer.js'\n:const http = require('http');\nconst socketio = require('socket.io');\nconst { SAVE_TEXT, SAVE_IMAGE } = require('./actions');\nconst saveTextSnapshot = require('../save/saveTextSnapshot');\nconst { saveImageSnapshot } = require('../utils/tasks/imageSnapshots');\n\nfunction initServer(config) {\n  const server = http.createServer();\n  const io = socketio(server);\n\n  io.on('connection', (client) => {\n    const { token } = client.handshake.query;\n\n    if (config.serverEnabled) {\n      client.on(SAVE_IMAGE, (data) => {\n        if (token === config.token) {\n          saveImageSnapshot(data);\n        }\n      });\n\n      client.on(SAVE_TEXT, (data) => {\n        if (token === config.token) {\n          saveTextSnapshot(data);\n        }\n      });\n    }\n  });\n\n  if (config.serverEnabled) {\n    server.listen(config.serverPort, config.serverHost);\n  }\n}\n\nmodule.exports = initServer;\n\n'cypress-plugin-snapshots/__tests__/plugin.test.js'\n:\nconst configModule = require('../src/config');\n\njest.mock(\"../src/config.js\");\n\njest.spyOn(configModule, 'initConfig')\n  .mockImplementation((config) => config);\n\nglobal.Cypress = {\n  env: () => {},\n  config: () => {},\n  Commands: {\n    add: jest.fn(),\n  },\n};\n\nglobal.cy = {};\n\ndescribe('plugin', () => {\n  it('initPlugin', () => {\n    const globalConfig = {\n      env: {\n        \"cypress-plugin-snapshots\": {\n          \"serverEnabled\": false,\n        }\n      }\n    };\n    jest.spyOn(configModule, 'getConfig')\n      .mockImplementation(() => globalConfig.env['cypress-plugin-snapshots']);\n    const on = jest.fn();\n\n    const { initPlugin } = require('../plugin');\n\n    initPlugin(on, globalConfig);\n    expect(on).toBeCalledTimes(2);\n  });\n});\n\n'cypress-plugin-snapshots/plugin.js'\n:\nconst { initConfig, CONFIG_KEY } = require('./src/config');\nconst initServer = require('./src/server/initServer');\nconst tasks = require('./src/tasks/');\n\n\nfunction initPlugin(on, globalConfig = {\n}) {\n  const config = initConfig(globalConfig.env[CONFIG_KEY]);\n  initServer(config);\n\n\n\n  globalConfig.env[CONFIG_KEY] = JSON.stringify(config);\n\n  on('before:browser:launch', (browser = {}, launchOptions) => {\n    const args = Array.isArray(launchOptions) ? launchOptions : launchOptions.args;\n\n    if (browser.name === 'chrome') {\n      args.push('--font-render-hinting=medium');\n      args.push('--enable-font-antialiasing');\n      args.push('--disable-gpu');\n    }\n\n    return launchOptions;\n  });\n\n  on('task', tasks);\n}\n\nmodule.exports = {\n  initPlugin\n};\n\n'cypress-plugin-snapshots/src/save/saveTextSnapshot.js'\n:const { merge } = require('lodash');\nconst { updateSnapshot } = require('../utils/tasks/textSnapshots');\n\nfunction saveTextSnapshot(data) {\n  const {\n    snapshotFile,\n    snapshotTitle,\n    actual,\n    dataType,\n  } = data;\n  updateSnapshot(snapshotFile, snapshotTitle, actual, dataType);\n  return merge({}, data, {\n    saved: true\n  });\n}\n\nmodule.exports = saveTextSnapshot;\n\n'cypress-plugin-snapshots/src/utils/tasks/textSnapshots.js'\n:const path = require('path');\nconst fs = require('fs-extra');\nconst unidiff = require('unidiff');\nconst prettier = require('prettier');\nconst { TYPE_JSON } = require('../../dataTypes');\nconst {\n  getConfig,\n  shouldNormalize,\n  getPrettierConfig\n} = require('../../config');\nconst removeExcludedFields = require('../text/removeExcludedFields');\nconst { formatJson, normalizeObject } = require('../json');\n\nfunction subjectToSnapshot(subject, dataType = TYPE_JSON, config = {}) {\n  let result = subject;\n\n  if (typeof subject === 'object' && shouldNormalize(dataType, config)) {\n    result = normalizeObject(subject);\n  }\n\n  if (dataType === TYPE_JSON && config && config.excludeFields) {\n    result = removeExcludedFields(result, config.excludeFields);\n  }\n\n  const prettierConfig = getPrettierConfig(dataType, config);\n  if (prettierConfig) {\n    try {\n      if (typeof result === 'object') {\n        result = formatJson(result, undefined, 2);\n      }\n\n      result = prettier.format(result.trim(), prettierConfig).trim();\n    } catch(err) {\n      throw new Error(`Cannot format subject: ${result}`);\n    }\n  } else if(dataType === TYPE_JSON && config.formatJson) {\n    result = formatJson(result);\n  }\n\n  return result;\n}\n\nfunction formatDiff(subject) {\n  if (typeof subject === 'object') {\n    return formatJson(subject);\n  }\n  return String(subject || '');\n}\n\nfunction createDiff(expected, actual, snapshotTitle) {\n  return unidiff.diffAsText(formatDiff(expected), formatDiff(actual), {\n    aname: snapshotTitle,\n    bname: snapshotTitle,\n    context: getConfig().diffLines,\n  });\n}\n\nfunction getSnapshot(filename, snapshotTitle, dataType = TYPE_JSON) {\n  fs.ensureDirSync(path.dirname(filename));\n\n  if (fs.existsSync(filename)) {\n    const snapshots = readFile(filename);\n    if (snapshots[snapshotTitle]) {\n      return subjectToSnapshot(snapshots[snapshotTitle], dataType);\n    }\n  } else {\n    fs.writeFileSync(filename, '{}');\n  }\n\n  return false;\n}\n\nfunction readFile(filename) {\n  if (fs.existsSync(filename)) {\n    let content;\n    try {\n      delete require.cache[filename];\n      content = require(filename);\n    } catch(ex) {\n\n      console.warn(`Cannot read snapshot file \"${filename}\" as javascript, falling back to JSON parser:`, ex);\n      const fileContents = fs.readFileSync(filename, 'utf8');\n\n      if (!fileContents || !fileContents.trim() || fileContents.trim().slice(0,1) !== '{') {\n        throw new Error(`Cannot load snapshot file. File \"${filename} does not contain valid JSON or javascript`);\n      }\n\n      try {\n        content = JSON.parse(fileContents);\n      } catch(jsonEx) {\n        throw new Error(`Cannot read snapshot \"${filename}\" as JSON: ${jsonEx}`);\n      }\n    }\n\n    return content;\n  }\n\n  return {};\n}\n\nfunction updateSnapshot(filename, snapshotTitle, subject, dataType = TYPE_JSON) {\n  const store = readFile(filename);\n  if (dataType === TYPE_JSON) {\n    store[snapshotTitle] = JSON.parse(subject);\n  } else {\n    store[snapshotTitle] = subject;\n  }\n\n\n\n  const saveResult = Object.keys(store).reduce((result, key) => {\n    let value = store[key];\n    if (typeof value === 'string') {\n      value = ` \\`\\n${value.trim().replace(/\\\\/g, '\\\\\\\\').replace(/`/g, '\\\\`')}\\n\\``;\n    } else {\n      value = `\\n${formatJson(value)}`;\n    }\n    result += `exports[\\`${key}\\`] =${value}`;\n    result += \";\\n\\n\";\n\n    return result;\n  }, '');\n\n  fs.writeFileSync(filename, `${saveResult.trim()}\\n`);\n}\n\nmodule.exports = {\n  createDiff,\n  formatDiff,\n  getSnapshot,\n  subjectToSnapshot,\n  updateSnapshot,\n};\n",
        "gt": [
            "'cypress-plugin-snapshots/src/utils/text/removeExcludedFields.js'",
            "'cypress-plugin-snapshots/src/utils/tasks/textSnapshots.js'",
            "'cypress-plugin-snapshots/src/save/saveTextSnapshot.js'",
            "'cypress-plugin-snapshots/src/server/initServer.js'",
            "'cypress-plugin-snapshots/plugin.js'",
            "'cypress-plugin-snapshots/__tests__/plugin.test.js'"
        ]
    },
    {
        "files": [
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/main.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/model/model.js'"
        ],
        "content": "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/main.js'\n:\nimport * as THREE from 'three';\nimport TWEEN from '@tweenjs/tween.js';\n\n\n\nimport Renderer from './components/renderer';\nimport Camera from './components/camera';\nimport Light from './components/light';\nimport Controls from './components/controls';\nimport Geometry from './components/geometry';\n\n\nimport Stats from './helpers/stats';\nimport MeshHelper from './helpers/meshHelper';\n\n\nimport Texture from './model/texture';\nimport Model from './model/model';\n\n\nimport Interaction from './managers/interaction';\nimport DatGUI from './managers/datGUI';\n\n\nimport Config from './../data/config';\n\n\n\nexport default class Main {\n  constructor(container) {\n\n    this.container = container;\n\n\n    this.clock = new THREE.Clock();\n\n\n    this.scene = new THREE.Scene();\n    this.scene.fog = new THREE.FogExp2(Config.fog.color, Config.fog.near);\n\n\n    if(window.devicePixelRatio) {\n      Config.dpr = window.devicePixelRatio;\n    }\n\n\n    this.renderer = new Renderer(this.scene, container);\n\n\n    this.camera = new Camera(this.renderer.threeRenderer);\n    this.controls = new Controls(this.camera.threeCamera, container);\n    this.light = new Light(this.scene);\n\n\n    const lights = ['ambient', 'directional', 'point', 'hemi'];\n    lights.forEach((light) => this.light.place(light));\n\n\n    this.geometry = new Geometry(this.scene);\n    this.geometry.make('plane')(150, 150, 10, 10);\n    this.geometry.place([0, -20, 0], [Math.PI / 2, 0, 0]);\n\n\n    if(Config.isDev && Config.isShowingStats) {\n      this.stats = new Stats(this.renderer);\n      this.stats.setUp();\n    }\n\n\n    if (Config.isDev) {\n      this.gui = new DatGUI(this)\n    }\n\n\n    this.texture = new Texture();\n\n\n    this.texture.load().then(() => {\n      this.manager = new THREE.LoadingManager();\n\n\n      this.model = new Model(this.scene, this.manager, this.texture.textures);\n      this.model.load(Config.models[Config.model.selected].type);\n\n\n      this.manager.onProgress = (item, loaded, total) => {\n        console.log(`${item}: ${loaded} ${total}`);\n      };\n\n\n      this.manager.onLoad = () => {\n\n        new Interaction(this.renderer.threeRenderer, this.scene, this.camera.threeCamera, this.controls.threeControls);\n\n\n        if(Config.isDev) {\n          this.meshHelper = new MeshHelper(this.scene, this.model.obj);\n          if (Config.mesh.enableHelper) this.meshHelper.enable();\n\n          this.gui.load(this, this.model.obj);\n        }\n\n\n        Config.isLoaded = true;\n        this.container.querySelector('#loading').style.display = 'none';\n      };\n    });\n\n\n    this.render();\n  }\n\n  render() {\n\n    if(Config.isDev && Config.isShowingStats) {\n      Stats.start();\n    }\n\n\n    this.renderer.render(this.scene, this.camera.threeCamera);\n\n\n    if(Config.isDev && Config.isShowingStats) {\n      Stats.end();\n    }\n\n\n\n\n\n    TWEEN.update();\n    this.controls.threeControls.update();\n\n\n    requestAnimationFrame(this.render.bind(this));\n  }\n}\n\n'ThreeJS-Webpack-ES6-Boilerplate/src/js/app.js'\n:import Config from './data/config';\nimport Detector from './utils/detector';\nimport Main from './app/main';\n\n\nimport './../css/app.scss';\n\n\nif(__ENV__ === 'dev') {\n  console.log('----- RUNNING IN DEV ENVIRONMENT! -----');\n\n  Config.isDev = true;\n}\n\nfunction init() {\n\n  if(!Detector.webgl) {\n    Detector.addGetWebGLMessage();\n  } else {\n    const container = document.getElementById('appContainer');\n    new Main(container);\n  }\n}\n\ninit();\n\n'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/model/model.js'\n:import * as THREE from 'three';\n\nimport Material from '../components/material';\nimport Helpers from '../../utils/helpers';\nimport { BufferGeometryUtils } from '../../utils/bufferGeometryUtils';\nimport { GLTFLoader } from '../loaders/GLTFLoader';\nimport Config from '../../data/config';\n\n\nexport default class Model {\n  constructor(scene, manager, textures) {\n    this.scene = scene;\n    this.textures = textures;\n    this.manager = manager;\n\n    this.obj = null;\n    this.ref = null;\n  }\n\n  load(type) {\n\n\n    switch (type) {\n      case 'gltf':\n\n        new GLTFLoader(this.manager).load(\n          Config.models[Config.model.selected].path,\n          (gltf) => {\n            const scene = gltf.scene;\n            let mesh;\n\n            if (Config.shadow.enabled) {\n              scene.traverse(function(node) {\n                if (node.isMesh || node.isLight) node.castShadow = true;\n                if (node.isMesh) {\n                  node.material.wireframe = Config.mesh.wireframe;\n                  mesh = node;\n                }\n              });\n            }\n\n            this.obj = mesh;\n\n            BufferGeometryUtils.computeTangents(mesh.geometry);\n\n            var group = new THREE.Group();\n            group.scale.multiplyScalar(0.25);\n            this.scene.add( group );\n\n            this.ref = group;\n\n\n            group.updateMatrixWorld(true);\n            group.add(mesh);\n\n\n            this.scene.add(scene);\n          },\n          Helpers.logProgress(),\n          Helpers.logError()\n        );\n        break;\n\n      case 'object':\n\n        new THREE.ObjectLoader(this.manager).load(\n          Config.models[Config.model.selected].path,\n          obj => {\n            obj.traverse(child => {\n              if(child instanceof THREE.Mesh) {\n\n                const material = new Material(0xffffff).standard;\n                material.map = this.textures.UV;\n                child.material = material;\n\n\n                if(Config.shadow.enabled) {\n                  child.receiveShadow = true;\n                  child.castShadow = true;\n                }\n              }\n            });\n\n\n            this.obj = obj;\n            this.ref = obj;\n\n            obj.scale.multiplyScalar(Config.models[Config.model.selected].scale);\n            this.scene.add(obj);\n          },\n          Helpers.logProgress(),\n          Helpers.logError()\n        );\n        break;\n    }\n  }\n\n  unload() {\n    this.scene.remove(this.ref);\n  }\n}\n",
        "gt": [
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/model/model.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/main.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/common/i18n.js'",
            "'better-onetab/src/background/installedEventHandler.js'"
        ],
        "content": "'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n\n'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/common/i18n.js'\n:export default (...args) => chrome.i18n.getMessage(...args)\n\n'better-onetab/src/background/installedEventHandler.js'\n:import __ from '../common/i18n'\nimport browser from 'webextension-polyfill'\n\nconst installedEventHandler = detail => {\n  if (DEBUG) return\n  if (detail.reason === chrome.runtime.OnInstalledReason.UPDATE) {\n    const updatedNotificationId = 'updated'\n    browser.notifications.onClicked.addListener(id => {\n      if (id === updatedNotificationId) {\n        browser.tabs.create({ url: 'https:\n      }\n    })\n    browser.notifications.create(updatedNotificationId, {\n      type: 'basic',\n      iconUrl: 'assets/icons/icon_128.png',\n      title: __('ui_updated_to_ver') + ' v' + browser.runtime.getManifest().version,\n      message: __('ui_click_view_changelog'),\n    })\n    setTimeout(() => {\n      browser.notifications.clear(updatedNotificationId)\n    }, 5000)\n  }\n}\n\nexport default installedEventHandler\n",
        "gt": [
            "'better-onetab/src/common/i18n.js'",
            "'better-onetab/src/background/installedEventHandler.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'butter-toast/src/Tray/index.js'",
            "'butter-toast/src/Tray/styles.js'",
            "'butter-toast/src/ButterToast/styles.js'"
        ],
        "content": "'butter-toast/src/Tray/index.js'\n:import React, { Component } from 'react';\nimport { generateId } from '../lib';\nimport { Ul, Li } from './styles';\nimport { POS_BOTTOM } from '../ButterToast/styles';\nimport Toast from '../Toast';\nimport { CUSTOM_EVENT_NAME } from '../ButterToast';\nimport { ulStyle, liStyle } from './styles';\n\nclass Tray extends Component {\n\n    constructor(props) {\n        super(props);\n        this.onButterToast = this.onButterToast.bind(this);\n    }\n\n    state = {\n        toasts: []\n    }\n\n    componentDidMount() {\n        window.addEventListener(CUSTOM_EVENT_NAME, this.onButterToast);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(CUSTOM_EVENT_NAME, this.onButterToast);\n    }\n\n    id = generateId('tray')\n    toasts = {}\n\n    onButterToast({detail} = {}) {\n\n        const { namespace, dismissBy, ...payload } = detail;\n\n        if (namespace && namespace !== this.props.namespace) {\n            return;\n        }\n\n        if (!dismissBy) {\n            return setTimeout(() => this.push(payload));\n        }\n\n        dismissBy === 'all' ? this.dismissAll() : this.dismiss(dismissBy);\n    }\n\n    createToastRef = (id, ref) => {\n        if (!id) {\n            return;\n        }\n\n        if (!ref) {\n            delete this.toasts[id];\n            return;\n        }\n\n        this.toasts[id] = ref;\n    }\n\n    push = (payload = {}) => {\n        const timeout = this.props.timeout;\n\n        this.setState((prevState) => {\n            const nextState = Object.assign({}, prevState);\n            nextState.toasts = [{\n                timeout, ...payload\n            }].concat(nextState.toasts);\n            return nextState;\n        });\n    }\n\n    remove = (id) => {\n        this.setState((prevState) => {\n            const nextState = Object.assign({}, prevState);\n            nextState.toasts = nextState.toasts.filter((toast) => toast.id !== id);\n            return nextState;\n        });\n    }\n\n    dismiss = (id) => {\n        if (this.toasts[id] && this.toasts[id].close) {\n            this.toasts[id].close();\n        }\n    }\n\n    dismissAll = () => {\n        for (const toast in this.toasts) {\n            this.dismiss(toast);\n        }\n    }\n\n    setHeight = (id, height) => {\n        this.setState((prevState) => {\n            const nextState = Object.assign({}, prevState);\n            const index = nextState.toasts.findIndex((toast) => toast.id === id);\n            nextState.toasts[index].height = height;\n            return nextState;\n        });\n    }\n\n    render() {\n        const { toasts } = this.state;\n        const { position, spacing } = this.props;\n        let offset = 0;\n\n        return (\n            <ul style={ulStyle}>\n                {toasts.map((toast, index) => {\n                    if (!toast) { return null; }\n\n                    const height = toast.height || 0;\n                    let currentOffset;\n\n                    currentOffset = offset;\n                    offset += height + spacing;\n\n                    if (position && position.vertical === POS_BOTTOM) {\n                        currentOffset = -currentOffset - height;\n                    }\n\n                    const style = liStyle({ offset: currentOffset, spacing, position, height: toast.height, index });\n\n                    return (\n                        <li key={toast.id} style={style}>\n                            <Toast dismiss={() => this.dismiss(toast.id)}\n                                remove={() => this.remove(toast.id)}\n                                setHeight={this.setHeight}\n                                position={position}\n                                ref={(ref) => this.createToastRef(toast.id, ref)}\n                                toast={toast}/>\n                        </li>\n                    );\n                })}\n            </ul>\n        );\n    }\n}\n\nexport default Tray;\n\n'butter-toast/src/Tray/styles.js'\n:import { POS_RIGHT, POS_CENTER, POS_TOP } from '../ButterToast/styles';\n\nconst ulStyle = {\n    position: 'relative',\n    padding: 0,\n    margin: 0,\n    listStyleType: 'none'\n};\n\nconst liStyle = ({ position = { vertical: POS_TOP, horizontal: POS_CENTER }, spacing, offset, height, index = 0 }) => {\n    const base = {\n        position: 'absolute',\n        transition: 'transform .3s',\n        'transitionDelay': `${index * .02}s`\n    };\n\n    let translateY;\n    if (offset === 0 && !height && (position.vertical === POS_TOP)) {\n        translateY = 'translateY(-100%)';\n    } else {\n        translateY = `translateY(${offset}px)`;\n    }\n\n    switch (position.horizontal) {\n        case POS_RIGHT:\n            base.right = `${spacing}px`;\n            base.transform= translateY;\n            break;\n        case POS_CENTER:\n            base.transform = `translateX(-50%) ${translateY}`;\n            break;\n        default:\n            base.left = `${spacing}px`;\n            base.transform = translateY;\n            break;\n    }\n\n    return base;\n}\n\nexport {\n    ulStyle,\n    liStyle\n};\n\n'butter-toast/src/ButterToast/styles.js'\n:export const POS_TOP = 'POS_TOP';\nexport const POS_BOTTOM = 'POS_BOTTOM';\nexport const POS_LEFT = 'POS_LEFT';\nexport const POS_RIGHT = 'POS_RIGHT';\nexport const POS_CENTER = 'POS_CENTER';\n\nconst styleRight = {\n    right: 0\n};\n\nconst styleLeft = {\n    left: 0\n};\n\nconst styleCenter = {\n    left: '50%'\n};\n\nconst styleBottom = {\n    bottom: '10px'\n};\n\nconst styleTop = {\n    top: '10px'\n};\n\nconst styleBase = {\n    position: 'fixed',\n    zIndex: 99999\n};\n\nexport default function styles(position = {}, spacing = 0) {\n\n    if (position === null) {\n        return {};\n    }\n\n    let { vertical, horizontal } = position;\n\n    return Object.assign({}, styleBase,\n        vertical === POS_BOTTOM ? {bottom: `${spacing}px`} : {top: `${spacing}px`},\n        horizontal === POS_CENTER ? styleCenter : {},\n        horizontal === POS_LEFT ? styleLeft : {},\n        horizontal === POS_RIGHT ? styleRight : {}\n    );\n}\n",
        "gt": [
            "'butter-toast/src/ButterToast/styles.js'",
            "'butter-toast/src/Tray/styles.js'",
            "'butter-toast/src/Tray/index.js'"
        ]
    },
    {
        "files": [
            "'cypress-plugin-snapshots/__tests__/plugin.test.js'",
            "'cypress-plugin-snapshots/src/server/initServer.js'",
            "'cypress-plugin-snapshots/plugin.js'",
            "'cypress-plugin-snapshots/src/server/actions.js'"
        ],
        "content": "'cypress-plugin-snapshots/__tests__/plugin.test.js'\n:\nconst configModule = require('../src/config');\n\njest.mock(\"../src/config.js\");\n\njest.spyOn(configModule, 'initConfig')\n  .mockImplementation((config) => config);\n\nglobal.Cypress = {\n  env: () => {},\n  config: () => {},\n  Commands: {\n    add: jest.fn(),\n  },\n};\n\nglobal.cy = {};\n\ndescribe('plugin', () => {\n  it('initPlugin', () => {\n    const globalConfig = {\n      env: {\n        \"cypress-plugin-snapshots\": {\n          \"serverEnabled\": false,\n        }\n      }\n    };\n    jest.spyOn(configModule, 'getConfig')\n      .mockImplementation(() => globalConfig.env['cypress-plugin-snapshots']);\n    const on = jest.fn();\n\n    const { initPlugin } = require('../plugin');\n\n    initPlugin(on, globalConfig);\n    expect(on).toBeCalledTimes(2);\n  });\n});\n\n'cypress-plugin-snapshots/src/server/initServer.js'\n:const http = require('http');\nconst socketio = require('socket.io');\nconst { SAVE_TEXT, SAVE_IMAGE } = require('./actions');\nconst saveTextSnapshot = require('../save/saveTextSnapshot');\nconst { saveImageSnapshot } = require('../utils/tasks/imageSnapshots');\n\nfunction initServer(config) {\n  const server = http.createServer();\n  const io = socketio(server);\n\n  io.on('connection', (client) => {\n    const { token } = client.handshake.query;\n\n    if (config.serverEnabled) {\n      client.on(SAVE_IMAGE, (data) => {\n        if (token === config.token) {\n          saveImageSnapshot(data);\n        }\n      });\n\n      client.on(SAVE_TEXT, (data) => {\n        if (token === config.token) {\n          saveTextSnapshot(data);\n        }\n      });\n    }\n  });\n\n  if (config.serverEnabled) {\n    server.listen(config.serverPort, config.serverHost);\n  }\n}\n\nmodule.exports = initServer;\n\n'cypress-plugin-snapshots/plugin.js'\n:\nconst { initConfig, CONFIG_KEY } = require('./src/config');\nconst initServer = require('./src/server/initServer');\nconst tasks = require('./src/tasks/');\n\n\nfunction initPlugin(on, globalConfig = {\n}) {\n  const config = initConfig(globalConfig.env[CONFIG_KEY]);\n  initServer(config);\n\n\n\n  globalConfig.env[CONFIG_KEY] = JSON.stringify(config);\n\n  on('before:browser:launch', (browser = {}, launchOptions) => {\n    const args = Array.isArray(launchOptions) ? launchOptions : launchOptions.args;\n\n    if (browser.name === 'chrome') {\n      args.push('--font-render-hinting=medium');\n      args.push('--enable-font-antialiasing');\n      args.push('--disable-gpu');\n    }\n\n    return launchOptions;\n  });\n\n  on('task', tasks);\n}\n\nmodule.exports = {\n  initPlugin\n};\n\n'cypress-plugin-snapshots/src/server/actions.js'\n:module.exports = {\n  SAVE_IMAGE: 'cypress-plugin-snapshot:saveImage',\n  SAVE_TEXT: 'cypress-plugin-snapshot:saveText',\n};\n",
        "gt": [
            "'cypress-plugin-snapshots/src/server/actions.js'",
            "'cypress-plugin-snapshots/src/server/initServer.js'",
            "'cypress-plugin-snapshots/plugin.js'",
            "'cypress-plugin-snapshots/__tests__/plugin.test.js'"
        ]
    },
    {
        "files": [
            "'Registration-and-Login-using-MERN-stack/src/components/App.js'",
            "'Registration-and-Login-using-MERN-stack/src/elements/Error.js'",
            "'Registration-and-Login-using-MERN-stack/src/components/Registration.js'",
            "'Registration-and-Login-using-MERN-stack/src/index.js'"
        ],
        "content": "'Registration-and-Login-using-MERN-stack/src/components/App.js'\n:import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\";\nimport Login from './Login';\nimport Registration from './Registration';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t\t<Router>\n\t\t\t\t\t<div className=\"App\">\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/register\" component={Registration} />\n\t\t\t\t\t\t<Route exact path=\"/login\" component={Login} />\n\t\t\t\t\t\t<Redirect from=\"/\" to=\"login\" />\n\t\t\t\t\t</Switch>\n\t\t\t\t\t</div>\n\t\t\t\t</Router>\n\t\t);\n\t}\n}\nexport default App;\n\n'Registration-and-Login-using-MERN-stack/src/elements/Error.js'\n:import React from 'react';\n\nconst Error = ({ message }) => (\n\t<div>\n\t\t<div className=\"alert alert-danger\" role=\"alert\">\n\t\t<span className=\"glyphicon glyphicon-thumbs-down\"></span>\n\t\t<span className=\"message\">{message}</span>\n\t</div>\n</div>\n);\n\nexport default Error;\n\n'Registration-and-Login-using-MERN-stack/src/components/Registration.js'\n:import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\nimport classNames from 'classnames';\nimport {\n  UserRegistration,\n  UsernameValidation,\n} from '../services/RegistrationService';\nimport Message from '../elements/Message';\nimport Error from '../elements/Error';\nimport {\n  REGISTRATION_FIELDS,\n  REGISTRATION_MESSAGE,\n  COMMON_FIELDS,\n  ERROR_IN_REGISTRATION,\n} from '../MessageBundle';\n\nexport default class Registration extends Component {\n  constructor (props) {\n    super (props);\n    this.state = {\n      first_name: '',\n      last_name: '',\n      user_name: '',\n      password: '',\n      register: false,\n      error: false,\n    };\n  }\n\n  handleOnChangeFirstName = e => {\n    this.setState ({\n      first_name: e.target.value,\n    });\n  };\n\n  handleOnChangeLastName = e => {\n    this.setState ({\n      last_name: e.target.value,\n    });\n  };\n\n  handleOnChangeUserName = e => {\n    this.setState ({\n      user_name: e.target.value,\n    });\n  };\n\n  handleOnChangePassword = e => {\n    this.setState ({\n      password: e.target.value,\n    });\n  };\n\n  handleOnBlur = async e => {\n    this.setState ({\n      user_name: e.target.value,\n    });\n    const data = {\n      user_name: this.state.user_name,\n    };\n    const isUsernameTaken = await UsernameValidation (data);\n\n    isUsernameTaken === 204\n      ? this.setState ({user_name_taken: true})\n      : this.setState ({user_name_taken: false});\n  };\n\n  onSubmit = async e => {\n    e.preventDefault ();\n    const data = {\n      first_name: this.state.first_name,\n      last_name: this.state.last_name,\n      user_name: this.state.user_name,\n      password: this.state.password,\n    };\n\n    const registerStatus = await UserRegistration (data);\n    if (registerStatus === 200) {\n      this.setState ({\n        first_name: '',\n        last_name: '',\n        user_name: '',\n        password: '',\n        register: true,\n        error: false,\n      });\n    } else\n      this.setState ({\n        error: true,\n        register: false,\n      });\n  };\n\n  render () {\n    const {register, error, user_name_taken} = this.state;\n\n    return (\n      <div className=\"Registration\">\n        <h1> {REGISTRATION_FIELDS.REGISTRATION_HEADING} </h1> <form\n          onSubmit={this.onSubmit}\n        >\n          <div>\n            <div className=\"fields\">\n              <p> {REGISTRATION_FIELDS.FIRST_NAME} </p>\n              {' '}\n              <input\n                type=\"text\"\n                value={this.state.first_name}\n                name=\"FirstName\"\n                onChange={this.handleOnChangeFirstName}\n              />\n              {' '}\n            </div> <div className=\"fields\">\n              <p> {REGISTRATION_FIELDS.LAST_NAME} </p>\n              {' '}\n              <input\n                type=\"text\"\n                value={this.state.last_name}\n                name=\"LastName\"\n                onChange={this.handleOnChangeLastName}\n              />\n              {' '}\n            </div> <div className=\"fields\">\n              <p> {COMMON_FIELDS.USER_NAME} </p>\n              {' '}\n              <input\n                type=\"text\"\n                className={classNames ({error: user_name_taken})}\n                value={this.state.user_name}\n                name=\"Username\"\n                onBlur={this.handleOnBlur}\n                onChange={this.handleOnChangeUserName}\n                autoComplete=\"Username\"\n                required\n              />\n            </div> <div className=\"fields\">\n              <p> {COMMON_FIELDS.PASSWORD} </p>\n              {' '}\n              <input\n                type=\"password\"\n                value={this.state.password}\n                name=\"Password\"\n                onChange={this.handleOnChangePassword}\n                autoComplete=\"password\"\n                required\n              />\n            </div> <div className=\"buttons\">\n              <button\n                type=\"submit\"\n                className=\"btn btn-primary\"\n                disabled={user_name_taken}\n              >\n                {' '}{REGISTRATION_FIELDS.REGISTER}{' '}\n              </button>\n              {' '}\n              <Link to=\"/login\"> {REGISTRATION_FIELDS.CANCEL} </Link>\n              {' '}\n            </div>{' '}\n          </div>{' '}\n        </form>\n        {' '}\n        {error && <Error message={ERROR_IN_REGISTRATION} />}\n        {' '}\n        {register && <Message message={REGISTRATION_MESSAGE} />}\n        {' '}\n      </div>\n    );\n  }\n}\n\n'Registration-and-Login-using-MERN-stack/src/index.js'\n:import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n",
        "gt": [
            "'Registration-and-Login-using-MERN-stack/src/elements/Error.js'",
            "'Registration-and-Login-using-MERN-stack/src/components/Registration.js'",
            "'Registration-and-Login-using-MERN-stack/src/components/App.js'",
            "'Registration-and-Login-using-MERN-stack/src/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/configs/core/index.js'",
            "'ruui/src/components/loadingMask.js'",
            "'ruui/src/configs/core/modal.js'",
            "'ruui/src/components/modal.js'"
        ],
        "content": "'ruui/src/configs/core/index.js'\n:import button from './button';\nimport modal from './modal';\n\nexport default {\n\tbutton,\n\tmodal,\n};\n'ruui/src/components/loadingMask.js'\n:import React, { Component } from 'react';\nimport { ActivityIndicator, View, TouchableOpacity, StyleSheet } from 'react-native';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tconfigs?: Object,\n\tdispatch?: Function,\n};\n\nclass RuuiLoadingModal extends Component<any, Props, any> {\n\tprops: Props;\n\n\trender() {\n\t\tconst { configs = {} } = this.props,\n\t\t\tindicatorColor = configs.indicatorColor || '#ffffff',\n\t\t\tindicatorSize = configs.indicatorSize || 'small';\n\n\t\treturn <View style={styles.container}>\n\t\t\t<TouchableOpacity onPress={this.onMaskPress}>\n\t\t\t\t<ActivityIndicator color={indicatorColor} size={indicatorSize}/>\n\t\t\t</TouchableOpacity>\n\t\t</View>;\n\t}\n\n\tonMaskPress = () => {\n\t\tconst { dispatch, configs } = this.props;\n\n\t\tif (configs.tapToClose) {\n\t\t\tdispatch(appActions.toggleLoading(false));\n\t\t}\n\t}\n}\n\nexport default RuuiLoadingModal;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t\talignItems: 'center', justifyContent: 'center',\n\t},\n});\n\n'ruui/src/configs/core/modal.js'\n:import { defaultMaskPropsGenerator } from '../../components/modal';\nimport { defaultContainerPropsGenerator } from '../../components/closeableModal';\n\nexport default {\n\tmaskProps: defaultMaskPropsGenerator,\n\tcontainerProps: defaultContainerPropsGenerator,\n};\n'ruui/src/components/modal.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, View, StyleSheet } from 'react-native';\n\nimport Selector from './selector';\nimport LoadingMask from './loadingMask';\nimport CloseableModal from './closeableModal';\nimport { valueAt } from '../utils';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tactive?: any,\n\ttype?: string,\n\tconfigs?: Object,\n\tmodalCount?: number,\n\tdispatch?: Function,\n\tanimationDelay?: Number,\n};\n\nexport default class RuuiModal extends Component {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactive: props.active,\n\t\t};\n\t\tthis.enterAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { active, animationDelay, } = this.props;\n\t\tsetTimeout(() => this.playTransition(active), animationDelay);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { active } = this.props;\n\t\tif (prevProps.active !== active) {\n\t\t\tthis.playTransition(active);\n\t\t}\n\t}\n\n\tplayTransition(active) {\n\t\tconst { configs = {}, } = this.props;\n\t\tconst nextValue = active ? 1 : 0;\n\n\t\tif (!active) {\n\t\t\tif (configs.instantClose) {\n\t\t\t\tthis.setState({ active: null });\n\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t} else {\n\t\t\t\tthis.playAnimation(nextValue, () => {\n\t\t\t\t\tthis.setState({ active: null });\n\t\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState({ active });\n\t\t\tthis.playAnimation(nextValue);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { configs = {}, modalCount, type: modalType } = this.props,\n\t\t\t{ active } = this.state,\n\t\t\tglobalConfigs = valueAt(this, 'context.ruuiConfigs.modal'),\n\t\t\tcontainerPropsGenerator = configs.maskProps || globalConfigs.maskProps,\n\t\t\tcontainerProps = containerPropsGenerator(this.enterAnimation, configs, modalCount, modalType);\n\n\t\tif (configs.maskProps && !containerProps.style) {\n\t\t\tcontainerProps.style = globalConfigs.maskProps(\n\t\t\t\tthis.enterAnimation, configs, modalCount, modalType\n\t\t\t).style;\n\t\t}\n\n\t\treturn active ? <Animated.View {...containerProps}>\n\t\t\t<View style={styles.innerTouchable}>\n\t\t\t\t{this.renderModalInner()}\n\t\t\t</View>\n\t\t</Animated.View> : <View/>;\n\t}\n\n\trenderModalInner() {\n\t\tconst { dispatch, type: modalType, active, configs: modalConfigs } = this.props;\n\n\t\tswitch (modalType) {\n\t\tcase 'select':\n\t\t\treturn <Selector\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleSelector(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'modal':\n\t\t\treturn <CloseableModal\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleModal(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'loading':\n\t\t\treturn <LoadingMask\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tdefault:\n\t\t\treturn <View/>;\n\t\t}\n\t}\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: false,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport function defaultMaskPropsGenerator(animation, configs, modalCount, modalType) {\n\tconst averageOpacity = (0.8 / modalCount) + (modalCount * 0.1),\n\t\tbackgroundColor = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: ['rgba(0, 0, 0, 0)', `rgba(0, 0, 0, ${averageOpacity})`],\n\t\t}),\n\t\tstyle = [styles.container, {\n\t\t\tzIndex: configs.zIndex,\n\t\t\tbackgroundColor,\n\t\t}];\n\n\treturn { style, };\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n\tinnerTouchable: {\n\t\tflex: 1,\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n});\n",
        "gt": [
            "'ruui/src/components/loadingMask.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/configs/core/modal.js'",
            "'ruui/src/configs/core/index.js'"
        ]
    },
    {
        "files": [
            "'cypress-plugin-snapshots/src/commands/index.js'",
            "'cypress-plugin-snapshots/src/utils/commands/index.js'",
            "'cypress-plugin-snapshots/src/commands/toMatchSnapshot.js'",
            "'cypress-plugin-snapshots/__tests__/commands.test.js'",
            "'cypress-plugin-snapshots/src/utils/commands/getTaskData.js'",
            "'cypress-plugin-snapshots/commands.js'"
        ],
        "content": "'cypress-plugin-snapshots/src/commands/index.js'\n:const toMatchSnapshot = require('./toMatchSnapshot');\nconst toMatchImageSnapshot = require('./toMatchImageSnapshot');\n\nmodule.exports = {\n  toMatchSnapshot,\n  toMatchImageSnapshot,\n}\n\n'cypress-plugin-snapshots/src/utils/commands/index.js'\n:\n\nfunction getTest() {\n  return Cypress.mocha.getRunner().test;\n}\n\nfunction getTestForTask(test) {\n  if (!test) {\n    test = getTest();\n  }\n  return {\n    id: test.id,\n    title: test.title,\n    parent: test.parent && test.parent.title ? getTestForTask(test.parent) : null,\n  };\n}\n\nfunction isElement(obj) {\n  return obj && (obj instanceof Element || (obj.nodeType && obj.nodeType === 1));\n}\n\nfunction isCollection(obj) {\n  return obj && (\n    obj instanceof NodeList ||\n    obj instanceof HTMLCollection\n  );\n}\n\nfunction getSubject(testSubject) {\n  if (testSubject) {\n    if (isJQuery(testSubject)) {\n      if (testSubject.length === 1) {\n        return getSubject(testSubject.get(0));\n      }\n\n      if (testSubject.length > 1) {\n        return getSubject(Array.from(testSubject));\n      }\n\n      return undefined;\n    }\n\n    if (isCollection(testSubject)) {\n      return getSubject(Array.from(testSubject));\n    }\n\n    const isArray = !isJQuery && Array.isArray(testSubject);\n    if (isArray && testSubject.length && isElement(testSubject[0])) {\n      return testSubject.map(getSubject);\n    }\n\n    if (isElement(testSubject)) {\n      return testSubject.outerHTML;\n    }\n  }\n\n  return testSubject;\n}\n\nfunction isJQuery(subject) {\n  return subject && (\n    subject.constructor.name === 'jQuery' ||\n    subject.constructor.prototype.jquery\n  );\n}\n\nfunction isHtml(subject) {\n  return isJQuery(subject) ||\n          (Array.isArray(subject) && subject.length && isElement(subject[0])) ||\n          isCollection(subject) ||\n          isElement(subject);\n}\n\nmodule.exports = {\n  getSubject,\n  getTest,\n  getTestForTask,\n  isHtml\n}\n\n'cypress-plugin-snapshots/src/commands/toMatchSnapshot.js'\n:\n\nconst { MATCH_TEXT } = require('../tasks/taskNames');\nconst getTaskData = require('../utils/commands/getTaskData');\nconst logMessage = require('../utils/commands/logMessage');\nconst { NO_LOG } = require('../constants');\nconst { COMMAND_MATCH_SNAPSHOT: commandName } = require('./commandNames');\n\nfunction toMatchSnapshot(subject, options) {\n  return getTaskData({\n      commandName,\n      options,\n      subject,\n    }).then(taskData => cy.task(\n        MATCH_TEXT,\n        taskData,\n        NO_LOG\n      ).then(logMessage)\n    );\n}\n\nmodule.exports = toMatchSnapshot;\n\n'cypress-plugin-snapshots/__tests__/commands.test.js'\n:const { initCommands } = require('../commands');\n\nglobal.Cypress = {\n  env: () => ({}),\n  config: () => {},\n  Commands: { add: jest.fn(), },\n  on: () => ({}),\n};\n\nglobal.cy = {};\n\ndescribe('commands', () => {\n  it('initCommands', () => {\n    global.before = jest.fn();\n    global.after = jest.fn();\n    global.cy.task = jest.fn().mockResolvedValue({ passed: true });\n\n    initCommands();\n\n    expect(global.Cypress.Commands.add).toBeCalled();\n    expect(global.Cypress.Commands.add.mock.calls.length).toEqual(2);\n    expect(global.Cypress.Commands.add.mock.calls[0][0]).toEqual('toMatchSnapshot');\n    expect(global.after).toBeCalled();\n    expect(global.before).toBeCalled();\n  });\n});\n\n'cypress-plugin-snapshots/src/utils/commands/getTaskData.js'\n:const getTestTitle = require('../getTestTitle');\nconst { getSnapshotTitle } = require('../snapshotTitles');\nconst getSpec = require('./getSpec');\nconst {\n  getTestForTask,\n  getSubject,\n  isHtml,\n} = require('./index');\nconst { COMMAND_MATCH_IMAGE_SNAPSHOT } = require('../../commands/commandNames');\nconst { TYPE_IMAGE, TYPE_JSON, TYPE_HTML } = require('../../dataTypes');\n\nfunction isImage(commandName) {\n  return commandName === COMMAND_MATCH_IMAGE_SNAPSHOT;\n}\n\nfunction getDataType({commandName, subject}) {\n  if (isImage(commandName)) {\n    return TYPE_IMAGE;\n  }\n\n  return isHtml(subject) ? TYPE_HTML : TYPE_JSON;\n}\n\nasync function getTaskData({\n    commandName,\n    options,\n    customName,\n    customSeparator,\n    subject: testSubject\n  } = {}) {\n  const subjectIsImage = isImage(commandName);\n  const test = getTestForTask();\n  const testTitle = getTestTitle(test);\n  const spec = await getSpec();\n  const testFile = spec.absolute;\n  const snapshotTitle = getSnapshotTitle(test, customName, customSeparator, subjectIsImage);\n  const subject = subjectIsImage ? testSubject : getSubject(testSubject);\n  const dataType = getDataType({commandName, subject: testSubject});\n\n  return {\n    commandName,\n    dataType,\n    options,\n    snapshotTitle,\n    subject,\n    testFile,\n    testTitle,\n  };\n}\n\nmodule.exports = getTaskData;\n\n'cypress-plugin-snapshots/commands.js'\n:\n\nconst {\n  merge,\n  cloneDeep\n} = require('lodash');\nconst { initUi } = require('./src/ui');\nconst commands = require('./src/commands/index');\nconst cleanUpSnapshots = require('./src/utils/commands/cleanupSnapshots');\nconst getConfig = require('./src/utils/commands/getConfig');\nconst { NO_LOG } = require('./src/constants');\n\nfunction addCommand(commandName, method) {\n  Cypress.Commands.add(commandName, {\n    prevSubject: true\n  }, (commandSubject, taskOptions) => {\n    if (!commandSubject) {\n      return commandSubject;\n    }\n\n    const options = merge({}, cloneDeep(getConfig()), taskOptions);\n    return cy.wrap(commandSubject, NO_LOG)\n      .then((subject) => method(subject, options));\n  });\n}\n\nfunction initCommands() {\n\n  getConfig();\n\n\n  before(() => {\n    initUi();\n  });\n\n  function closeSnapshotModal() {\n    try {\n      if (window.top.closeSnapshotModal) {\n        window.top.closeSnapshotModal();\n      }\n    } catch(ex) {\n      window.console.error(ex);\n    }\n  }\n\n  function clearFileCache() {\n    Cypress.__readFileCache__ = {};\n  }\n\n\n  Cypress.on('window:before:unload', () => {\n    closeSnapshotModal()\n    clearFileCache()\n  });\n\n\n  after(() => {\n    cleanUpSnapshots();\n  });\n\n\n  Object.keys(commands).forEach(key => addCommand(key, commands[key]));\n}\n\nmodule.exports = {\n  initCommands,\n};\n\nif (!process.env.JEST_WORKER_ID) {\n  initCommands();\n}\n",
        "gt": [
            "'cypress-plugin-snapshots/src/utils/commands/index.js'",
            "'cypress-plugin-snapshots/src/utils/commands/getTaskData.js'",
            "'cypress-plugin-snapshots/src/commands/toMatchSnapshot.js'",
            "'cypress-plugin-snapshots/src/commands/index.js'",
            "'cypress-plugin-snapshots/commands.js'",
            "'cypress-plugin-snapshots/__tests__/commands.test.js'"
        ]
    },
    {
        "files": [
            "'ruui/cli/templates/default/src/store/actions.js'",
            "'ruui/cli/templates/default/src/store/reducers/index.js'",
            "'ruui/cli/templates/default/src/store/reducers/app.js'"
        ],
        "content": "'ruui/cli/templates/default/src/store/actions.js'\n:export const IncreaseCounter                = '@APP:INCREASE-COUNTER';\n\n'ruui/cli/templates/default/src/store/reducers/index.js'\n:import { combineReducers } from 'redux';\nimport appReducer from './app';\n\nexport default combineReducers({\n\tapp: appReducer\n});\n'ruui/cli/templates/default/src/store/reducers/app.js'\n:import * as Actions from '../actions';\n\nconst initialState = {\n\tcounter: 0,\n};\n\nexport default (state = initialState, action) => {\n\tswitch (action.type) {\n\tcase Actions.IncreaseCounter:\n\t\treturn { ...state, counter: state.counter + action.volume };\n\tdefault:\n\t\treturn state;\n\t}\n};",
        "gt": [
            "'ruui/cli/templates/default/src/store/actions.js'",
            "'ruui/cli/templates/default/src/store/reducers/app.js'",
            "'ruui/cli/templates/default/src/store/reducers/index.js'"
        ]
    },
    {
        "files": [
            "'cypress-plugin-snapshots/__tests__/commands.test.js'",
            "'cypress-plugin-snapshots/src/commands/index.js'",
            "'cypress-plugin-snapshots/commands.js'",
            "'cypress-plugin-snapshots/src/config.js'",
            "'cypress-plugin-snapshots/src/commands/toMatchImageSnapshot.js'"
        ],
        "content": "'cypress-plugin-snapshots/__tests__/commands.test.js'\n:const { initCommands } = require('../commands');\n\nglobal.Cypress = {\n  env: () => ({}),\n  config: () => {},\n  Commands: { add: jest.fn(), },\n  on: () => ({}),\n};\n\nglobal.cy = {};\n\ndescribe('commands', () => {\n  it('initCommands', () => {\n    global.before = jest.fn();\n    global.after = jest.fn();\n    global.cy.task = jest.fn().mockResolvedValue({ passed: true });\n\n    initCommands();\n\n    expect(global.Cypress.Commands.add).toBeCalled();\n    expect(global.Cypress.Commands.add.mock.calls.length).toEqual(2);\n    expect(global.Cypress.Commands.add.mock.calls[0][0]).toEqual('toMatchSnapshot');\n    expect(global.after).toBeCalled();\n    expect(global.before).toBeCalled();\n  });\n});\n\n'cypress-plugin-snapshots/src/commands/index.js'\n:const toMatchSnapshot = require('./toMatchSnapshot');\nconst toMatchImageSnapshot = require('./toMatchImageSnapshot');\n\nmodule.exports = {\n  toMatchSnapshot,\n  toMatchImageSnapshot,\n}\n\n'cypress-plugin-snapshots/commands.js'\n:\n\nconst {\n  merge,\n  cloneDeep\n} = require('lodash');\nconst { initUi } = require('./src/ui');\nconst commands = require('./src/commands/index');\nconst cleanUpSnapshots = require('./src/utils/commands/cleanupSnapshots');\nconst getConfig = require('./src/utils/commands/getConfig');\nconst { NO_LOG } = require('./src/constants');\n\nfunction addCommand(commandName, method) {\n  Cypress.Commands.add(commandName, {\n    prevSubject: true\n  }, (commandSubject, taskOptions) => {\n    if (!commandSubject) {\n      return commandSubject;\n    }\n\n    const options = merge({}, cloneDeep(getConfig()), taskOptions);\n    return cy.wrap(commandSubject, NO_LOG)\n      .then((subject) => method(subject, options));\n  });\n}\n\nfunction initCommands() {\n\n  getConfig();\n\n\n  before(() => {\n    initUi();\n  });\n\n  function closeSnapshotModal() {\n    try {\n      if (window.top.closeSnapshotModal) {\n        window.top.closeSnapshotModal();\n      }\n    } catch(ex) {\n      window.console.error(ex);\n    }\n  }\n\n  function clearFileCache() {\n    Cypress.__readFileCache__ = {};\n  }\n\n\n  Cypress.on('window:before:unload', () => {\n    closeSnapshotModal()\n    clearFileCache()\n  });\n\n\n  after(() => {\n    cleanUpSnapshots();\n  });\n\n\n  Object.keys(commands).forEach(key => addCommand(key, commands[key]));\n}\n\nmodule.exports = {\n  initCommands,\n};\n\nif (!process.env.JEST_WORKER_ID) {\n  initCommands();\n}\n\n'cypress-plugin-snapshots/src/config.js'\n:const randtoken = require('rand-token');\nconst { merge, cloneDeep, clone } = require('lodash');\nconst { TYPE_JSON } = require('./dataTypes');\n\nfunction createToken() {\n  return randtoken.generate(128);\n}\n\nconst DEFAULT_SCREENSHOT_CONFIG = Object.freeze({\n  blackout: [],\n  capture: 'fullPage',\n  clip: null,\n  padding: null,\n  disableTimersAndAnimations: true,\n  log: false,\n  scale: false,\n  timeout: 30000,\n});\n\nconst DEFAULT_IMAGE_CONFIG = Object.freeze({\n  createDiffImage: true,\n  resizeDevicePixelRatio: true,\n  threshold: 0.1,\n  thresholdType: 'percent',\n});\n\nconst DEFAULT_CONFIG = Object.freeze({\n  autoCleanUp: false,\n  autopassNewSnapshots: true,\n  diffLines: 3,\n  excludeFields: [],\n  formatJson: true,\n  ignoreExtraArrayItems: false,\n  ignoreExtraFields: false,\n  imageConfig: clone(DEFAULT_IMAGE_CONFIG),\n  normalizeJson: true,\n  prettier: true,\n  prettierConfig: {\n    html: {\n      parser: 'html',\n      tabWidth: 2,\n      endOfLine: 'lf'\n    },\n  },\n  screenshotConfig: clone(DEFAULT_SCREENSHOT_CONFIG),\n  serverEnabled: true,\n  serverHost: 'localhost',\n  serverPort: 2121,\n  token: createToken(),\n  updateSnapshots: false,\n  backgroundBlend: 'difference',\n  name: '',\n});\n\nconst CONFIG_KEY = 'cypress-plugin-snapshots';\n\nlet config = cloneDeep(DEFAULT_CONFIG);\n\nfunction initConfig(initialConfig) {\n  if (initialConfig) {\n    config = merge(config, initialConfig);\n  }\n  return config;\n}\n\nfunction getConfig() {\n  return config;\n}\n\nfunction getImageConfig(options = {}) {\n  return Object.keys(DEFAULT_IMAGE_CONFIG)\n    .filter((key) => options.imageConfig && options.imageConfig[key] !== undefined)\n    .reduce(\n      (imageConfig, key) => {\n        imageConfig[key] = options.imageConfig[key];\n        return imageConfig;\n      },\n      merge({}, DEFAULT_IMAGE_CONFIG, getConfig().imageConfig)\n    );\n}\n\n\nfunction getScreenshotConfig(options = {}) {\n  const screenshotConfig = Object.keys(DEFAULT_SCREENSHOT_CONFIG)\n    .filter((key) => options.screenshotConfig && options.screenshotConfig[key] !== undefined)\n    .reduce(\n      (currentConfig, key) => {\n        currentConfig[key] = options.screenshotConfig[key];\n        return currentConfig;\n      },\n      merge({}, DEFAULT_SCREENSHOT_CONFIG, getConfig().screenshotConfig)\n    );\n\n  screenshotConfig.blackout = (screenshotConfig.blackout || []);\n  screenshotConfig.blackout.push('.snapshot-diff');\n  return screenshotConfig;\n}\n\nfunction getCustomName(suppliedConfig) {\n  const cfg = suppliedConfig || getConfig();\n  return cfg.name;\n}\n\nfunction getCustomSeparator(suppliedConfig) {\n  const cfg = suppliedConfig || getConfig();\n  return cfg.separator;\n}\n\nfunction getServerUrl(suppliedConfig) {\n  const cfg = suppliedConfig || getConfig();\n  return `http:\n}\n\nfunction shouldNormalize(dataType, suppliedConfig) {\n  const cfg = suppliedConfig && suppliedConfig.normalizeJson !== undefined ?\n    suppliedConfig : getConfig();\n  return dataType === TYPE_JSON && cfg.normalizeJson;\n}\n\nfunction getPrettierConfig(dataType, suppliedConfig) {\n  const cfg = suppliedConfig && suppliedConfig.prettierConfig ?\n    suppliedConfig : getConfig();\n  return cfg.prettier && cfg.prettierConfig ? cfg.prettierConfig[dataType] : undefined;\n}\n\nmodule.exports = {\n  CONFIG_KEY,\n  DEFAULT_IMAGE_CONFIG,\n  DEFAULT_SCREENSHOT_CONFIG,\n  createToken,\n  getConfig,\n  getImageConfig,\n  getPrettierConfig,\n  getScreenshotConfig,\n  getCustomName,\n  getCustomSeparator,\n  getServerUrl,\n  initConfig,\n  shouldNormalize,\n};\n\n'cypress-plugin-snapshots/src/commands/toMatchImageSnapshot.js'\n:\n\nconst { MATCH_IMAGE } = require('../tasks/taskNames');\nconst getTaskData = require('../utils/commands/getTaskData');\nconst logMessage = require('../utils/commands/logMessage');\nconst { NO_LOG } = require('../constants');\nconst { COMMAND_MATCH_IMAGE_SNAPSHOT: commandName } = require('./commandNames');\nconst getImageData = require('../utils/image/getImageData');\nconst { getImageConfig, getScreenshotConfig, getCustomName, getCustomSeparator } = require('../config');\n\nfunction afterScreenshot(taskData) {\n  return ($el, props) => {\n\n\n    const win = $el.get(0).ownerDocument.defaultView;\n    taskData.image = getImageData(props, win.devicePixelRatio);\n    taskData.isImage = true;\n    delete taskData.subject;\n  };\n}\n\nasync function toMatchImageSnapshot(subject, commandOptions) {\n  const options = getImageConfig(commandOptions);\n  const customName = getCustomName(commandOptions);\n  const customSeparator = getCustomSeparator(commandOptions);\n\n  const taskData = await getTaskData({\n    commandName,\n    options,\n    customName,\n    customSeparator,\n    subject,\n  });\n\n  const screenShotConfig = getScreenshotConfig(commandOptions);\n  const afterScreenshotFn = afterScreenshot(taskData);\n  if (screenShotConfig.onAfterScreenshot) {\n    const afterScreenshotCallback = screenShotConfig.onAfterScreenshot;\n    screenShotConfig.onAfterScreenshot = (...args) => {\n      afterScreenshotFn.apply(this, args);\n      afterScreenshotCallback.apply(this, args);\n    }\n  } else {\n    screenShotConfig.onAfterScreenshot = afterScreenshotFn;\n  }\n\n  return cy.wrap(subject, NO_LOG)\n    .screenshot(taskData.snapshotTitle, screenShotConfig)\n    .then(() => cy.task(\n        MATCH_IMAGE,\n        taskData,\n        NO_LOG\n      ).then(logMessage)\n    );\n}\n\nmodule.exports = toMatchImageSnapshot;\n",
        "gt": [
            "'cypress-plugin-snapshots/src/config.js'",
            "'cypress-plugin-snapshots/src/commands/toMatchImageSnapshot.js'",
            "'cypress-plugin-snapshots/src/commands/index.js'",
            "'cypress-plugin-snapshots/commands.js'",
            "'cypress-plugin-snapshots/__tests__/commands.test.js'"
        ]
    },
    {
        "files": [
            "'neode/test/Services/FindAll.spec.js'",
            "'neode/src/Services/Create.js'",
            "'neode/src/Services/GenerateDefaultValues.js'"
        ],
        "content": "'neode/test/Services/FindAll.spec.js'\n:import {assert, expect} from 'chai';\nimport FindAll from '../../src/Services/FindAll';\nimport Create from '../../src/Services/Create';\nimport Node from '../../src/Node';\n\nconst TIMEOUT = 10000;\n\ndescribe('Services/FindAll.js', () => {\n    let instance;\n    let model;\n\n    const other_label = 'FindAllEager';\n    const label = 'FindAllTest';\n    const schema = {\n        uuid: {\n            type: 'uuid',\n            primary: true,\n        },\n        name: {\n            type: 'string',\n            required: true,\n        },\n        relationshipsToModel: {\n            type: 'relationship',\n            relationship: 'RELATIONSHIP_TO_MODEL',\n            target: label,\n            direction: 'out',\n            alias: 'node',\n            properties: {\n                since: {\n                    type: 'int',\n                    default: Date.now\n                }\n            },\n        },\n        relationshipToOther: {\n            type: 'relationship',\n            relationship: 'RELATIONSHIP_TO_OTHER',\n            target: other_label,\n            direction: 'out',\n            eager: true,\n            alias: 'node',\n            properties: {\n                since: {\n                    type: 'int',\n                    default: Date.now\n                }\n            },\n        },\n        forArray: {\n            type: 'node',\n            relationship: 'FOR_ARRAY',\n            target: label,\n            direction: 'out',\n        },\n        nodeToOther: {\n            type: 'node',\n            relationship: 'RELATIONSHIP_TO_OTHER',\n            target: other_label,\n            direction: 'out',\n            eager: true,\n        },\n        arrayOfRelationships: {\n            type: 'nodes',\n            relationship: [ 'RELATIONSHIP_TO_MODEL', 'FOR_ARRAY' ],\n\n            direction: 'out',\n            eager: true,\n        },\n    };\n\n    before(() => {\n        instance = require('../instance')();\n        instance.model(other_label, {id: 'number'});\n        model = instance.model(label, schema);\n    });\n\n    afterEach(done => {\n        instance.deleteAll(label)\n\n\n\n            .then(() => done());\n    });\n\n    after(() => instance.close());\n\n    it('should find nodes filtered by properties', done => {\n        const name = 'Filtered Node';\n        const eager_name = 'Eager Node';\n        const other_id = 1;\n        Create(instance, model, {\n            name,\n            relationshipsToModel: {\n                since: 100,\n                node: {\n                    name: eager_name,\n                },\n            },\n            nodeToOther: {\n                id: other_id,\n            },\n            forArray: {\n                name: 'For Array'\n            },\n        })\n            .then(() => {\n                return FindAll(instance, model, { name })\n                    .then(collection => {\n                        expect(collection.length).to.equal(1);\n\n                        const first = collection.first();\n\n                        expect(first).to.be.an.instanceOf(Node);\n                        expect(first.get('name')).to.equal(name);\n\n\n                        expect( first._eager.get('nodeToOther').get('id') ).to.equal(other_id);\n                        expect( first._eager.get('relationshipToOther').otherNode().get('id') ).to.equal(other_id);\n                        expect( first._eager.get('arrayOfRelationships').length ).to.equal(2);\n                    });\n            })\n            .then(() => done())\n            .catch(e => {\n                console.log(e)\n                done(e)\n            });\n    });\n\n    it('should apply the alias to an order', done => {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        done()\n    });\n\n    it('should apply the alias to a map of orders', done => {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        done()\n    });\n\n});\n'neode/src/Services/Create.js'\n:import GenerateDefaultValues from './GenerateDefaultValues';\nimport Validator from './Validator';\nimport Builder, {mode} from '../Query/Builder';\nimport { eagerNode, } from '../Query/EagerUtils';\nimport { addNodeToStatement, ORIGINAL_ALIAS } from './WriteUtils';\n\nexport default function Create(neode, model, properties) {\n    return GenerateDefaultValues(neode, model, properties)\n        .then(properties => Validator(neode, model, properties))\n        .then(properties => {\n            const alias = ORIGINAL_ALIAS;\n\n            const builder = new Builder(neode);\n\n            addNodeToStatement(neode, builder, alias, model, properties, [ alias ]);\n\n\n            const output = eagerNode(neode, 1, alias, model);\n\n            return builder.return(output)\n                .execute(mode.WRITE)\n                .then(res => neode.hydrateFirst(res, alias));\n        });\n}\n\n'neode/src/Services/GenerateDefaultValues.js'\n:import uuid from 'uuid';\nimport ValidationError from '../ValidationError';\nimport CleanValue from './CleanValue';\n\nfunction GenerateDefaultValuesAsync(neode, model, properties) {\n    const schema = model.schema();\n    const output = {};\n\n    if ( !(properties instanceof Object )) {\n        throw new ValidationError('`properties` must be an object.', properties);\n    }\n\n\n    Object.keys(schema).forEach(key => {\n        const config = typeof schema[ key ] == 'string' ? {type: schema[ key ]} : schema[ key ];\n\n        switch (config.type) {\n            case 'uuid':\n                config.default = uuid.v4;\n                break;\n        }\n\n        if (properties.hasOwnProperty(key)) {\n            output[ key ] = properties[ key ];\n        }\n\n\n        else if (typeof config.default !== \"undefined\") {\n            output[ key ] = typeof config.default == 'function' ? config.default() : config.default;\n        }\n\n\n        if (output[ key ]) {\n            output[ key ] = CleanValue(config, output[ key ]);\n        }\n    });\n\n    return output;\n}\n\n\nfunction GenerateDefaultValues(neode, model, properties) {\n    const output = GenerateDefaultValuesAsync(neode, model, properties);\n\n    return Promise.resolve(output);\n}\n\nGenerateDefaultValues.async = GenerateDefaultValuesAsync;\n\nexport default GenerateDefaultValues;\n",
        "gt": [
            "'neode/src/Services/GenerateDefaultValues.js'",
            "'neode/src/Services/Create.js'",
            "'neode/test/Services/FindAll.spec.js'"
        ]
    },
    {
        "files": [
            "'butter-toast/src/Tray/index.js'",
            "'butter-toast/src/Tray/styles.js'",
            "'butter-toast/src/ButterToast/styles.js'"
        ],
        "content": "'butter-toast/src/Tray/index.js'\n:import React, { Component } from 'react';\nimport { generateId } from '../lib';\nimport { Ul, Li } from './styles';\nimport { POS_BOTTOM } from '../ButterToast/styles';\nimport Toast from '../Toast';\nimport { CUSTOM_EVENT_NAME } from '../ButterToast';\nimport { ulStyle, liStyle } from './styles';\n\nclass Tray extends Component {\n\n    constructor(props) {\n        super(props);\n        this.onButterToast = this.onButterToast.bind(this);\n    }\n\n    state = {\n        toasts: []\n    }\n\n    componentDidMount() {\n        window.addEventListener(CUSTOM_EVENT_NAME, this.onButterToast);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(CUSTOM_EVENT_NAME, this.onButterToast);\n    }\n\n    id = generateId('tray')\n    toasts = {}\n\n    onButterToast({detail} = {}) {\n\n        const { namespace, dismissBy, ...payload } = detail;\n\n        if (namespace && namespace !== this.props.namespace) {\n            return;\n        }\n\n        if (!dismissBy) {\n            return setTimeout(() => this.push(payload));\n        }\n\n        dismissBy === 'all' ? this.dismissAll() : this.dismiss(dismissBy);\n    }\n\n    createToastRef = (id, ref) => {\n        if (!id) {\n            return;\n        }\n\n        if (!ref) {\n            delete this.toasts[id];\n            return;\n        }\n\n        this.toasts[id] = ref;\n    }\n\n    push = (payload = {}) => {\n        const timeout = this.props.timeout;\n\n        this.setState((prevState) => {\n            const nextState = Object.assign({}, prevState);\n            nextState.toasts = [{\n                timeout, ...payload\n            }].concat(nextState.toasts);\n            return nextState;\n        });\n    }\n\n    remove = (id) => {\n        this.setState((prevState) => {\n            const nextState = Object.assign({}, prevState);\n            nextState.toasts = nextState.toasts.filter((toast) => toast.id !== id);\n            return nextState;\n        });\n    }\n\n    dismiss = (id) => {\n        if (this.toasts[id] && this.toasts[id].close) {\n            this.toasts[id].close();\n        }\n    }\n\n    dismissAll = () => {\n        for (const toast in this.toasts) {\n            this.dismiss(toast);\n        }\n    }\n\n    setHeight = (id, height) => {\n        this.setState((prevState) => {\n            const nextState = Object.assign({}, prevState);\n            const index = nextState.toasts.findIndex((toast) => toast.id === id);\n            nextState.toasts[index].height = height;\n            return nextState;\n        });\n    }\n\n    render() {\n        const { toasts } = this.state;\n        const { position, spacing } = this.props;\n        let offset = 0;\n\n        return (\n            <ul style={ulStyle}>\n                {toasts.map((toast, index) => {\n                    if (!toast) { return null; }\n\n                    const height = toast.height || 0;\n                    let currentOffset;\n\n                    currentOffset = offset;\n                    offset += height + spacing;\n\n                    if (position && position.vertical === POS_BOTTOM) {\n                        currentOffset = -currentOffset - height;\n                    }\n\n                    const style = liStyle({ offset: currentOffset, spacing, position, height: toast.height, index });\n\n                    return (\n                        <li key={toast.id} style={style}>\n                            <Toast dismiss={() => this.dismiss(toast.id)}\n                                remove={() => this.remove(toast.id)}\n                                setHeight={this.setHeight}\n                                position={position}\n                                ref={(ref) => this.createToastRef(toast.id, ref)}\n                                toast={toast}/>\n                        </li>\n                    );\n                })}\n            </ul>\n        );\n    }\n}\n\nexport default Tray;\n\n'butter-toast/src/Tray/styles.js'\n:import { POS_RIGHT, POS_CENTER, POS_TOP } from '../ButterToast/styles';\n\nconst ulStyle = {\n    position: 'relative',\n    padding: 0,\n    margin: 0,\n    listStyleType: 'none'\n};\n\nconst liStyle = ({ position = { vertical: POS_TOP, horizontal: POS_CENTER }, spacing, offset, height, index = 0 }) => {\n    const base = {\n        position: 'absolute',\n        transition: 'transform .3s',\n        'transitionDelay': `${index * .02}s`\n    };\n\n    let translateY;\n    if (offset === 0 && !height && (position.vertical === POS_TOP)) {\n        translateY = 'translateY(-100%)';\n    } else {\n        translateY = `translateY(${offset}px)`;\n    }\n\n    switch (position.horizontal) {\n        case POS_RIGHT:\n            base.right = `${spacing}px`;\n            base.transform= translateY;\n            break;\n        case POS_CENTER:\n            base.transform = `translateX(-50%) ${translateY}`;\n            break;\n        default:\n            base.left = `${spacing}px`;\n            base.transform = translateY;\n            break;\n    }\n\n    return base;\n}\n\nexport {\n    ulStyle,\n    liStyle\n};\n\n'butter-toast/src/ButterToast/styles.js'\n:export const POS_TOP = 'POS_TOP';\nexport const POS_BOTTOM = 'POS_BOTTOM';\nexport const POS_LEFT = 'POS_LEFT';\nexport const POS_RIGHT = 'POS_RIGHT';\nexport const POS_CENTER = 'POS_CENTER';\n\nconst styleRight = {\n    right: 0\n};\n\nconst styleLeft = {\n    left: 0\n};\n\nconst styleCenter = {\n    left: '50%'\n};\n\nconst styleBottom = {\n    bottom: '10px'\n};\n\nconst styleTop = {\n    top: '10px'\n};\n\nconst styleBase = {\n    position: 'fixed',\n    zIndex: 99999\n};\n\nexport default function styles(position = {}, spacing = 0) {\n\n    if (position === null) {\n        return {};\n    }\n\n    let { vertical, horizontal } = position;\n\n    return Object.assign({}, styleBase,\n        vertical === POS_BOTTOM ? {bottom: `${spacing}px`} : {top: `${spacing}px`},\n        horizontal === POS_CENTER ? styleCenter : {},\n        horizontal === POS_LEFT ? styleLeft : {},\n        horizontal === POS_RIGHT ? styleRight : {}\n    );\n}\n",
        "gt": [
            "'butter-toast/src/ButterToast/styles.js'",
            "'butter-toast/src/Tray/styles.js'",
            "'butter-toast/src/Tray/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/index.js'",
            "'ruui/src/typeDefinition.js'",
            "'ruui/src/components/connectionMask.js'"
        ],
        "content": "'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/typeDefinition.js'\n:import React from 'react';\n\nexport type Action = {\n\taction: String,\n}\n\nexport type Element = React.Element<*>;\n\nexport type Style =\n\t| { [key: string]: any }\n\t| number\n\t| false\n\t| null\n\t| void\n\t| Array<Style>;\n\nexport type Layout = {\n\tx: number,\n\ty: number,\n\twidth: number,\n\theight: number,\n};\n\nexport type LayoutEvent = {\n\tnativeEvent: {\n\t\tlayout: Layout,\n\t},\n};\n\nexport type Dimension = {\n\twidth?: Number,\n\theight?: Number,\n\tscale?: Number,\n\tfontScale?: Number,\n};\n\nexport type Dimensions = {\n\twindow?: Dimension,\n\tscreen?: Dimension,\n};\n\nexport type AccessibilityTrait =\n\t'none' |\n\t'button' |\n\t'link' |\n\t'header' |\n\t'search' |\n\t'image' |\n\t'selected' |\n\t'plays' |\n\t'key' |\n\t'text' |\n\t'summary' |\n\t'disabled' |\n\t'frequentUpdates' |\n\t'startsMedia' |\n\t'adjustable' |\n\t'allowsDirectInteraction' |\n\t'pageTurn';\n\nexport type AccessibilityComponentType =\n\t'none' |\n\t'button' |\n\t'radiobutton_checked' |\n\t'radiobutton_unchecked';\n\nexport type Corners = {\n\ttop: number,\n\tleft: number,\n\tbottom: number,\n\tright: number\n};\n\nexport type SnappingDirection = 'top' | 'left' | 'bottom' | 'right' | 'top-left' | 'left-top' | 'top-right' | 'right-top' | 'bottom-left' | 'left-bottom' | 'bottom-right' | 'right-bottom' | 'center';\n\nexport type PositionOffset = {\n\ttop: Number,\n\tleft: Number,\n};\n\nexport type DropdownConfigs = {\n\tcomponent?: any,\n\twrapperStyle?: Style,\n\tcontainerLayout?: Layout,\n\tdirection: SnappingDirection,\n\toffset?: PositionOffset,\n\tanimatedDirection: SnappingDirection,\n\tshowArrow?: Boolean,\n\tarrowSize?: Number,\n\tarrowOffset?: PositionOffset,\n\tspacing?: number,\n\tcontext?: Object,\n\tonClose ?: Function,\n\ttapToClose?: boolean,\n\tmaskPointerEvents?: string,\n};\n\nexport type RuuiConfigs = {\n\tbutton?: {\n\t\tstyles?: Object,\n\t},\n\tmodal?: {\n\t\tstyles?: Object,\n\t\tmaskProps?: Function,\n\t\tcontainerProps?: Function,\n\t},\n};\n\nexport type TooltipConfigs = {\n\ttargetLayout: Layout,\n\tdirection: String,\n\tpositionSpacing?: Number,\n\tpositionOffset?: PositionOffset,\n\twrapperStyle?: Style,\n\tinnerStyle?: Style,\n\tcontent?: String | Element,\n};\n\nexport type ModalOptions = {\n\tid?: String,\n\ttype: \"modal\" | \"dropdown\",\n\tactive?: Boolean,\n\tconfigs?: {\n\t\tzIndex?: Number,\n\t\ttapToClose?: Boolean,\n\t\tcomponent?: Function | Element,\n\t},\n};\n\n'ruui/src/components/connectionMask.js'\n:import React, { Component } from 'react';\nimport { Animated, Easing, NetInfo, ActivityIndicator, View, Text, StyleSheet } from 'react-native';\n\nimport Button from './button';\nimport { connect } from '../utils';\nimport * as appActions from '../utils/store/appAction';\nimport type { Style, Element } from '../typeDefinition';\n\ntype Props = {\n\tdispatch?: Function,\n\tnetInfo?: Object,\n\twrapperStyle?: Style,\n\tcontentRenderer?: Function,\n\tmessage?: Element,\n\tretryButtonCaption?: string,\n\tretryButtonIcon?: Element,\n\tretryButtonRightIcon?: Element,\n\tretryButtonWrapperStyle?: Style,\n\tretryButtonInnerStyle?: Style,\n};\n\nclass RuuiConnectionMask extends Component {\n\tprops: Props;\n\n\tstatic defaultProps = {\n\t\tmessage: <Text\n\t\t\tstyle={{\n\t\t\t\tcolor: '#ffffff',\n\t\t\t\tfontSize: 20, textAlign: 'center',\n\t\t\t}}>App need internet connection, waiting for reconnect..</Text>,\n\t\tretryButtonCaption: 'Retry',\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tenterAnimation: new Animated.Value(0),\n\t\t};\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { netInfo } = this.props;\n\n\t\tif (prevProps.netInfo.isConnected !== netInfo.isConnected) {\n\t\t\tthis.playAnimation(netInfo.isConnected ? 0 : 1);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst pointerEvents = this.props.netInfo.isConnected ? 'none' : 'auto',\n\t\t\topacity = this.state.enterAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\t}),\n\t\t\tcontainerStyle = { opacity, };\n\n\t\treturn <Animated.View\n\t\t\tpointerEvents={pointerEvents}\n\t\t\tstyle={[styles.container, this.props.wrapperStyle, containerStyle]}>\n\t\t\t{this.props.contentRenderer\n\t\t\t\t? this.props.contentRenderer(this.props.netInfo)\n\t\t\t\t: <View style={styles.innerContainer}>\n\t\t\t\t\t{this.props.message}\n\t\t\t\t\t<ActivityIndicator color=\"#ffffff\" style={styles.activityIndicator}/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttitle={this.props.retryButtonCaption}\n\t\t\t\t\t\ticon={this.props.retryButtonIcon}\n\t\t\t\t\t\trightIcon={this.props.retryButtonRightIcon}\n\t\t\t\t\t\twrapperStyle={this.props.retryButtonWrapperStyle}\n\t\t\t\t\t\tinnerStyle={this.props.retryButtonInnerStyle}\n\t\t\t\t\t\tonPress={this.retry}/>\n\t\t\t\t</View>}\n\t\t</Animated.View>;\n\t}\n\n\tretry = () => {\n\t\tNetInfo.isConnected.fetch().then((isConnected) => {\n\t\t\tthis.props.dispatch(appActions.updateNetInfo({ isConnected }));\n\t\t});\n\t};\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.state.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: true,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport default connect(({ netInfo }) => {\n\treturn {\n\t\tnetInfo,\n\t};\n})(RuuiConnectionMask);\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute', top: 0, left: 0, right: 0, bottom: 0,\n\t\tbackgroundColor: 'rgba(0, 0, 0, 0.7)',\n\t},\n\tinnerContainer: {\n\t\tposition: 'absolute', top: 0, left: 0, right: 0, bottom: 0,\n\t\tjustifyContent: 'center', alignItems: 'center',\n\t\tpaddingHorizontal: 28,\n\t},\n\tactivityIndicator: {\n\t\tmarginVertical: 20,\n\t},\n});\n",
        "gt": [
            "'ruui/src/typeDefinition.js'",
            "'ruui/src/components/connectionMask.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'Chatire/chatire-frontend/config/test.env.js'",
            "'Chatire/chatire-frontend/build/webpack.prod.conf.js'",
            "'Chatire/chatire-frontend/test/e2e/runner.js'"
        ],
        "content": "'Chatire/chatire-frontend/config/test.env.js'\n:'use strict'\nconst merge = require('webpack-merge')\nconst devEnv = require('./dev.env')\n\nmodule.exports = merge(devEnv, {\n  NODE_ENV: '\"testing\"'\n})\n\n'Chatire/chatire-frontend/build/webpack.prod.conf.js'\n:'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst webpack = require('webpack')\nconst config = require('../config')\nconst merge = require('webpack-merge')\nconst baseWebpackConfig = require('./webpack.base.conf')\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nconst env = process.env.NODE_ENV === 'testing'\n  ? require('../config/test.env')\n  : require('../config/prod.env')\n\nconst webpackConfig = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({\n      sourceMap: config.build.productionSourceMap,\n      extract: true,\n      usePostCSS: true\n    })\n  },\n  devtool: config.build.productionSourceMap ? config.build.devtool : false,\n  output: {\n    path: config.build.assetsRoot,\n    filename: utils.assetsPath('js/[name].[chunkhash].js'),\n    chunkFilename: utils.assetsPath('js/[id].[chunkhash].js')\n  },\n  plugins: [\n\n    new webpack.DefinePlugin({\n      'process.env': env\n    }),\n    new UglifyJsPlugin({\n      uglifyOptions: {\n        compress: {\n          warnings: false\n        }\n      },\n      sourceMap: config.build.productionSourceMap,\n      parallel: true\n    }),\n\n    new ExtractTextPlugin({\n      filename: utils.assetsPath('css/[name].[contenthash].css'),\n\n\n\n\n      allChunks: true,\n    }),\n\n\n    new OptimizeCSSPlugin({\n      cssProcessorOptions: config.build.productionSourceMap\n        ? { safe: true, map: { inline: false } }\n        : { safe: true }\n    }),\n\n\n\n    new HtmlWebpackPlugin({\n      filename: process.env.NODE_ENV === 'testing'\n        ? 'index.html'\n        : config.build.index,\n      template: 'index.html',\n      inject: true,\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeAttributeQuotes: true\n\n\n      },\n\n      chunksSortMode: 'dependency'\n    }),\n\n    new webpack.HashedModuleIdsPlugin(),\n\n    new webpack.optimize.ModuleConcatenationPlugin(),\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks (module) {\n\n        return (\n          module.resource &&\n          /\\.js$/.test(module.resource) &&\n          module.resource.indexOf(\n            path.join(__dirname, '../node_modules')\n          ) === 0\n        )\n      }\n    }),\n\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest',\n      minChunks: Infinity\n    }),\n\n\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'app',\n      async: 'vendor-async',\n      children: true,\n      minChunks: 3\n    }),\n\n\n    new CopyWebpackPlugin([\n      {\n        from: path.resolve(__dirname, '../static'),\n        to: config.build.assetsSubDirectory,\n        ignore: ['.*']\n      }\n    ])\n  ]\n})\n\nif (config.build.productionGzip) {\n  const CompressionWebpackPlugin = require('compression-webpack-plugin')\n\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      asset: '[path].gz[query]',\n      algorithm: 'gzip',\n      test: new RegExp(\n        '\\\\.(' +\n        config.build.productionGzipExtensions.join('|') +\n        ')$'\n      ),\n      threshold: 10240,\n      minRatio: 0.8\n    })\n  )\n}\n\nif (config.build.bundleAnalyzerReport) {\n  const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin\n  webpackConfig.plugins.push(new BundleAnalyzerPlugin())\n}\n\nmodule.exports = webpackConfig\n\n'Chatire/chatire-frontend/test/e2e/runner.js'\n:\nprocess.env.NODE_ENV = 'testing'\n\nconst webpack = require('webpack')\nconst DevServer = require('webpack-dev-server')\n\nconst webpackConfig = require('../../build/webpack.prod.conf')\nconst devConfigPromise = require('../../build/webpack.dev.conf')\n\nlet server\n\ndevConfigPromise.then(devConfig => {\n  const devServerOptions = devConfig.devServer\n  const compiler = webpack(webpackConfig)\n  server = new DevServer(compiler, devServerOptions)\n  const port = devServerOptions.port\n  const host = devServerOptions.host\n  return server.listen(port, host)\n})\n.then(() => {\n\n\n\n\n\n\n\n  let opts = process.argv.slice(2)\n  if (opts.indexOf('--config') === -1) {\n    opts = opts.concat(['--config', 'test/e2e/nightwatch.conf.js'])\n  }\n  if (opts.indexOf('--env') === -1) {\n    opts = opts.concat(['--env', 'chrome'])\n  }\n\n  const spawn = require('cross-spawn')\n  const runner = spawn('./node_modules/.bin/nightwatch', opts, { stdio: 'inherit' })\n\n  runner.on('exit', function (code) {\n    server.close()\n    process.exit(code)\n  })\n\n  runner.on('error', function (err) {\n    server.close()\n    throw err\n  })\n})\n",
        "gt": [
            "'Chatire/chatire-frontend/config/test.env.js'",
            "'Chatire/chatire-frontend/build/webpack.prod.conf.js'",
            "'Chatire/chatire-frontend/test/e2e/runner.js'"
        ]
    },
    {
        "files": [
            "'kong-dashboard/lib/request.js'",
            "'kong-dashboard/tests/util/KongClient.js'",
            "'kong-dashboard/tests/cases/cli.spec.js'"
        ],
        "content": "'kong-dashboard/lib/request.js'\n:var request = require('request');\n\nvar Request = {\n\n  send: function(opts) {\n    return new Promise((resolve, reject) => {\n      request(opts, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(response);\n        }\n      })\n    })\n  },\n\n  get: function(url, opts) {\n    opts = opts || {};\n    opts.method = 'GET';\n    opts.url = url;\n    return this.send(opts);\n  },\n\n  delete: function(url, opts) {\n    opts = opts || {};\n    opts.method = 'DELETE';\n    opts.url = url;\n    return this.send(opts);\n  },\n\n  put: function(url, data, opts) {\n    opts = opts || {};\n    opts.method = 'PUT';\n    opts.url = url;\n    opts.json = true;\n    opts.body = data;\n    return this.send(opts);\n  },\n\n  post: function(url, data, opts) {\n    opts = opts || {};\n    opts.method = 'POST';\n    opts.url = url;\n    opts.json = true;\n    opts.body = data;\n    return this.send(opts);\n  }\n\n};\n\nmodule.exports = Request;\n\n\n'kong-dashboard/tests/util/KongClient.js'\n:var request = require('../../lib/request');\nvar semver = require('semver');\n\nvar Kong = {\n\n\n  deleteAllServices: function() {\n    if (semver.lt(process.env.KONG_VERSION, '0.13.0')) {\n      return Promise.resolve(0);\n    }\n\n    return this.deleteAllRoutes().then(() => {\n      return this.deleteAllObjectsOfType('services');\n    });\n  },\n\n\n  deleteAllRoutes: function() {\n    if (semver.lt(process.env.KONG_VERSION, '0.13.0')) {\n      return Promise.resolve(0);\n    }\n    return this.deleteAllObjectsOfType('routes');\n  },\n\n\n  deleteAllAPIs: function() {\n    if (semver.gte(process.env.KONG_VERSION, '0.15.0')) {\n      return Promise.resolve(0);\n    }\n    return this.deleteAllObjectsOfType('apis');\n  },\n\n\n  deleteAllPlugins: function() {\n    return this.deleteAllObjectsOfType('plugins');\n  },\n\n\n  deleteAllConsumers: function() {\n    return this.deleteAllObjectsOfType('consumers');\n  },\n\n\n  deleteAllCertificates: function() {\n    return this.deleteAllObjectsOfType('certificates');\n  },\n\n\n  deleteAllUpstreams: function() {\n    return this.deleteAllObjectsOfType('upstreams');\n  },\n\n\n  deleteAllObjectsOfType: function(objectType) {\n    return request.get('http:\n      var body = JSON.parse(response.body);\n      var promise = new Promise((resolve, reject) => {\n        resolve();\n      });\n      body.data.forEach((object) => {\n        promise = promise.then(() => {\n          return request.delete('http:\n        });\n      });\n\n      if (body.total > body.data.length) {\n        promise = promise.then(() => {\n          return this.deleteAllObjectsOfType(objectType);\n        });\n      }\n\n      return promise;\n    });\n  },\n\n\n  getFirstService: () => {\n    return request.get('http:\n      var services = JSON.parse(response.body).data;\n      return services.length > 0 ? services[0] : null;\n    });\n  },\n\n\n  getFirstAPI: () => {\n    return request.get('http:\n      var apis = JSON.parse(response.body).data;\n      return apis.length > 0 ? apis[0] : null;\n    });\n  },\n\n\n  getFirstCertificate: () => {\n    return request.get('http:\n      var certificates = JSON.parse(response.body).data;\n      return certificates.length > 0 ? certificates[0] : null;\n    });\n  },\n\n\n  getFirstPlugin: () => {\n    return request.get('http:\n      var plugins = JSON.parse(response.body).data;\n      return plugins.length > 0 ? plugins[0] : null;\n    });\n  },\n\n\n  getPluginById: (id) => {\n    return request.get('http:\n      return JSON.parse(response.body);\n    });\n  },\n\n\n  getServiceById: (id) => {\n    return request.get('http:\n      return JSON.parse(response.body);\n    });\n  },\n\n\n  getUpstreamById: (id) => {\n    return request.get('http:\n      return JSON.parse(response.body);\n    });\n  },\n\n\n  createPlugin: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createConsumer: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createService: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createRoute: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createAPI: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createBasicAuthCreds: (consumer, username, password) => {\n     return request.post('http:\n       username: username,\n       password: password\n     }).then((response) => {\n      return response.body;\n    });\n  },\n\n\n  createKeyAuthCreds: (consumer, key) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createUpstream: (name) => {\n    return request.post('http:\n      return response.body;\n    });\n  }\n};\n\nmodule.exports = Kong;\n\n'kong-dashboard/tests/cases/cli.spec.js'\n:var request = require('../../lib/request');\nvar KongDashboard = require('../util/KongDashboard');\nvar Kong = require('../util/KongClient');\nvar semver = require('semver');\n\nvar kd = new KongDashboard();\n\ndescribe('Starting Kong-dashboard', function () {\n\n  beforeAll((done) => {\n    Promise.all([\n      Kong.deleteAllAPIs(),\n      Kong.deleteAllServices(),\n      Kong.deleteAllPlugins()\n    ]).then(() => {\n      return Promise.all([\n        createBasicAuthProtectedKongAPI(),\n        createKeyAuthProtectedKongAPI(),\n        createBasicAuthProtectedKongServiceAndRoute(),\n        createKeyAuthProtectedKongServiceAndRoute(),\n        createConsumer()\n      ]);\n    }).then(done);\n  });\n\n  afterEach((done) => {\n    kd.stop(() => {\n      kd.clean();\n      done();\n    });\n  });\n\n  it(\"should error if required kong_url parameter is missing\", (done) => {\n    kd.start({}, () => {}, (code) => {\n      expect(code).toBe(1);\n      expect(kd.stderr).toContain('Missing required argument: kong-url');\n      done();\n    });\n  });\n\n  it(\"should error if kong isn't reachable\", (done) => {\n    kd.start({'--kong-url': 'http:\n      expect(code).toBe(1);\n      expect(kd.stderr).toContain('Could not reach Kong on http:\n      done();\n    });\n  });\n\n  it(\"should error if kong-url doesn't not point to a Kong admin API\", (done) => {\n    kd.start({'--kong-url': 'http:\n      expect(code).toBe(1);\n      expect(kd.stderr).toContain(\"What\\'s on http:\n      done();\n    });\n  });\n\n  it(\"should successfully start on a custom port\", (done) => {\n    kd.start({'--kong-url': 'http:\n      expect(kd.stdout).toContain(\"Kong Dashboard has started on port 8082\");\n      done();\n    });\n  });\n\n  it(\"should successfully start with basic auth\", (done) => {\n    kd.start({\n      '--kong-url': 'http:\n      '--basic-auth': 'user user2=password2'\n    }, kongStarted);\n\n    function kongStarted() {\n      expect(kd.stdout).toContain('Invalid value \"user\" for --basic-auth option. Ignoring.');\n      expect(kd.stdout).toContain(\"Kong Dashboard has started on port 8081\");\n\n      var opts = {auth: {user: 'user2', pass: 'password2', sendImmediately: true}};\n\n      request.get('http:\n        .then((response) => {\n          expect(response.statusCode).toBe(200);\n          return request.get('http:\n        })\n        .then((response) => {\n          expect(response.statusCode).toBe(200);\n          return request.get('http:\n        })\n        .then((response) => {\n          expect(response.statusCode).toBe(401);\n          return request.get('http:\n        })\n        .then((response) => {\n          expect(response.statusCode).toBe(401);\n          done();\n        });\n    }\n  });\n\n  describe('When Kong is protected with the basic-auth-credential plugin', function () {\n\n    it(\"should successfully start when valid basic-auth-credential creds are provided\", (done) => {\n      kd.start({\n        '-u': 'http:\n        '--kong-username': 'test-user',\n        '--kong-password': 'password',\n        '--insecure': ''\n      }, () => {\n        expect(kd.stdout).toContain(\"Kong Dashboard has started on port 8081\");\n        request.get('http:\n          expect(response.statusCode).toBe(200);\n          done();\n        });\n      }, (code) => {\n\n        expect(kd.stderr).toBe(\"\");\n        expect(code).toBeFalsy();\n        done();\n      });\n    });\n\n    it(\"should error if basic auth credentials aren't set\", (done) => {\n      kd.start({'--kong-url': 'http:\n        expect(code).toBe(1);\n        expect(kd.stderr).toContain(\"Can\\'t connect to Kong: authentication required\");\n        done();\n      });\n    });\n\n    it(\"should error if basic auth credentials aren't correct\", (done) => {\n      kd.start({\n        '-u': 'http:\n        '--kong-username': 'test-user',\n        '--kong-password': 'wrong',\n        '--insecure': ''\n      }, () => {\n      }, (code) => {\n        expect(code).toBe(1);\n        expect(kd.stderr).toContain(\"Can't connect to Kong: invalid authentication credentials\");\n        done();\n      });\n    });\n\n    it(\"should error if Kong is protected with basic auth using http\", (done) => {\n      kd.start({\n        '-u': 'http:\n        '--kong-username': 'test-user',\n        '--kong-password': 'whatever'\n      }, () => {\n      }, (code) => {\n        expect(code).toBe(1);\n        expect(kd.stderr).toContain(\"You should not connect to Kong admin API using credentials over an unsecured protocol (http)\");\n        done();\n      });\n    });\n  });\n\n  describe('When Kong is protected with the auth-key plugin', function () {\n\n    it(\"should error if no keys are provided\", (done) => {\n      kd.start({\n        '-u': 'http:\n      }, () => {}, (code) => {\n        expect(code).toBe(1);\n        expect(kd.stderr).toContain(\"Can't connect to Kong: authentication required\");\n        done();\n      });\n    });\n\n    it(\"should error if the provided key is invalid\", (done) => {\n      kd.start({\n        '-u': 'http:\n        '--api-key': '123',\n        '--insecure': '',\n      }, () => {}, (code) => {\n        expect(code).toBe(1);\n        expect(kd.stderr).toContain(\"Can't connect to Kong: invalid authentication credentials\");\n        done();\n      });\n    });\n\n    it(\"should successfully start if the provided key is valid\", (done) => {\n      kd.start({\n        '-u': 'http:\n        '--api-key': 'abcdefghi',\n        '--insecure': '',\n      }, () => {\n        expect(kd.stdout).toContain(\"Kong Dashboard has started on port 8081\");\n        request.get('http:\n          expect(response.statusCode).toBe(200);\n          done();\n        });\n      }, (code) => {\n\n        expect(kd.stderr).toBe(\"\");\n        expect(code).toBeFalsy();\n        done();\n      });\n    });\n  });\n});\n\nfunction createBasicAuthProtectedKongAPI() {\n  var apiPromise;\n\n  if (semver.satisfies(process.env.KONG_VERSION, '0.9.x')) {\n    apiPromise = Kong.createAPI({\n      name: 'KongWithBasicAuth',\n      upstream_url: 'http:\n      request_path: '/kong_with_basic_auth',\n      strip_request_path: true\n    });\n  }\n  else if (semver.satisfies(process.env.KONG_VERSION, '>=0.10.0 < 0.15.0')) {\n    apiPromise = Kong.createAPI({\n      name: 'KongWithBasicAuth',\n      upstream_url: 'http:\n      uris: ['/kong_with_basic_auth'],\n      strip_uri: true\n    });\n  }\n  else if (semver.gte(process.env.KONG_VERSION, '0.15.0')) {\n    return Promise.resolve(0);\n  }\n\n  else {\n    throw new Error('Kong version not supported in unit tests: ' + process.env.KONG_VERSION)\n  }\n\n  return apiPromise.then((api) => {\n    return Kong.createPlugin({\n      api_id: api.id,\n      name: 'basic-auth'\n    });\n  })\n}\n\nfunction createBasicAuthProtectedKongServiceAndRoute() {\n  if (semver.lt(process.env.KONG_VERSION, '0.15.0')) {\n    return Promise.resolve(0);\n  }\n\n  var service;\n  var route;\n\n  var servicePromise =  Kong.createService({\n    name: 'KongWithBasicAuth',\n    protocol: `http`,\n    host: `localhost`,\n    port: 8001\n  });\n\n  var routePromise =  servicePromise.then((svc) => {\n    service = svc;\n\n    return Kong.createRoute({\n      service: { id: svc.id },\n      name: 'KongWithBasicAuth',\n      protocols: ['http', 'https'],\n      paths: ['/kong_with_basic_auth'],\n      strip_path: true\n    })\n  });\n\n  return routePromise.then((rt) => {\n    route = rt;\n\n    return Kong.createPlugin({\n      name: 'basic-auth',\n      run_on: `first`,\n      route: {id: route.id},\n      service: {id: service.id}\n    });\n  })\n}\n\nfunction createKeyAuthProtectedKongAPI() {\n  let promise;\n\n  if (semver.satisfies(process.env.KONG_VERSION, '0.9.x')) {\n    promise = Kong.createAPI({\n      name: 'KongWithKey',\n      upstream_url: 'http:\n      request_path: '/kong_with_key_auth',\n      strip_request_path: true\n    });\n  }\n  else if (semver.satisfies(process.env.KONG_VERSION, '>=0.10.0 < 0.15.0')) {\n    promise = Kong.createAPI({\n      name: 'KongWithKey',\n      upstream_url: 'http:\n      uris: ['/kong_with_key_auth'],\n      strip_uri: true\n    });\n  }\n  else if (semver.gte(process.env.KONG_VERSION, '0.15.0')) {\n    return Promise.resolve(0);\n  }\n\n  else {\n    throw new Error('Kong version not supported in unit tests: ' + process.env.KONG_VERSION)\n  }\n\n  return promise.then((api) => {\n    return Kong.createPlugin({\n      api_id: api.id,\n      name: 'key-auth',\n      config: {\n        key_names: ['apikey']\n      }\n    });\n  })\n}\n\nfunction createKeyAuthProtectedKongServiceAndRoute() {\n  if (semver.lt(process.env.KONG_VERSION, '0.15.0')) {\n    return Promise.resolve(0);\n  }\n\n  var service;\n  var route;\n\n  var servicePromise =  Kong.createService({\n    name: 'KongWithKey',\n    protocol: `http`,\n    host: `localhost`,\n    port: 8001\n  });\n\n  var routePromise =  servicePromise.then((svc) => {\n    service = svc;\n\n    return Kong.createRoute({\n      service: { id: svc.id },\n      name: 'KongWithKey',\n      protocols: ['http', 'https'],\n      paths: ['/kong_with_key_auth'],\n      strip_path: true\n    })\n  });\n\n  return routePromise.then((rt) => {\n    route = rt;\n\n    return Kong.createPlugin({\n      name: 'key-auth',\n      run_on: `first`,\n      route: {id: route.id},\n      service: {id: service.id},\n      config: {key_names: ['apikey']}\n    });\n  })\n}\n\nfunction createConsumer() {\n  return Kong.createConsumer({\n    custom_id: Date.now().toString()\n  }).then((consumer) => {\n    return Promise.all([\n      Kong.createBasicAuthCreds(consumer, 'test-user', 'password'),\n      Kong.createKeyAuthCreds(consumer, 'abcdefghi')\n    ]);\n  });\n}\n",
        "gt": [
            "'kong-dashboard/lib/request.js'",
            "'kong-dashboard/tests/util/KongClient.js'",
            "'kong-dashboard/tests/cases/cli.spec.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/common/service/boss.js'",
            "'better-onetab/src/common/logger.js'",
            "'better-onetab/src/background/messageHandler.js'",
            "'better-onetab/src/background/init.js'"
        ],
        "content": "'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/common/service/boss.js'\n:import {\n  TOKEN_KEY,\n  AUTH_HEADER,\n  SYNC_SERVICE_URL,\n  SYNC_MAX_INTERVAL,\n  SYNC_MIN_INTERVAL,\n} from '../constants'\nimport _ from 'lodash'\nimport storage from '../storage'\nimport listManager from '../listManager'\nimport {isBackground, timeout, sendMessage} from '../utils'\nimport browser from 'webextension-polyfill'\nimport io from 'socket.io-client'\nimport logger from '../logger'\n\nconst hasToken = async () => TOKEN_KEY in await browser.storage.local.get(TOKEN_KEY)\n\nconst getToken = async () => {\n  const {token: localToken} = await browser.storage.local.get(TOKEN_KEY)\n  if (localToken) return localToken\n  const {token: remoteToken} = await browser.storage.sync.get(TOKEN_KEY)\n  if (remoteToken) return remoteToken\n}\n\nconst setToken = async token => {\n  await browser.storage.local.set({[TOKEN_KEY]: token, tokenIssued: Date.now()})\n  await browser.storage.sync.set({[TOKEN_KEY]: token})\n}\n\nconst removeToken = async () => {\n  await browser.storage.local.remove(TOKEN_KEY)\n  await browser.storage.sync.remove(TOKEN_KEY)\n}\n\nconst fetchData = async (uri = '', method = 'GET', data = {}) => {\n  const headers = new Headers()\n  const token = await getToken()\n  if (token) headers.append(AUTH_HEADER, token)\n  const option = {\n    headers,\n    method,\n    mode: 'cors',\n  }\n\n  if (['POST', 'PUT', 'PATCH'].includes(method)) {\n    headers.append('Content-Type', 'application/json')\n    option.body = JSON.stringify(data)\n  } else {\n    uri += '?' + Object.keys(data).map(key => {\n      if (typeof data[key] === 'object') data[key] = JSON.stringify(data[key])\n      return key + '=' + encodeURIComponent(data[key])\n    }).filter(i => i).join('&')\n  }\n\n  const res = await fetch(SYNC_SERVICE_URL + uri, option)\n  if (res.headers.has(AUTH_HEADER)) {\n    const newToken = res.headers.get(AUTH_HEADER)\n    console.debug('[boss]: got new token', newToken)\n    await setToken(newToken)\n  }\n  if (res.ok) return res.json()\n  if (res.status === 401) await removeToken()\n  const err = await res.json()\n  throw new Error(err.message)\n}\n\nconst getInfo = () => fetchData('/api/info').then(info => {\n  info.optsUpdatedAt = Date.parse(info.optsUpdatedAt) || 0\n  info.listsUpdatedAt = Date.parse(info.listsUpdatedAt) || 0\n  return info\n})\n\nconst setWSToken = token => {\n  if (!window._socket) return\n  window._socket.io.opts.query = {\n    [AUTH_HEADER]: token,\n  }\n}\n\nconst _socketEmitTimeout = (socket, event, arg) => timeout(new Promise((resolve, reject) => {\n  const cb = result => result && result.err ? reject(result.err) : resolve(result)\n  if (arg) socket.emit(event, arg, cb)\n  else socket.emit(event, cb)\n}), 5000)\n\nconst uploadOpsViaWS = async () => {\n  const socket = window._socket\n  if (!socket || !socket.connected) throw new Error('socket not connected')\n  const {ops} = await browser.storage.local.get('ops')\n  if (ops) {\n    const changes = ops.sort((a, b) => a.time - b.time)\n    while (changes && changes.length) {\n      const change = changes.shift()\n      await _socketEmitTimeout(socket, 'list.update', change)\n    }\n  }\n  await browser.storage.local.remove('ops')\n}\n\nconst downloadRemoteLists = async () => {\n  const socket = window._socket\n  if (!socket || !socket.connected) throw new Error('socket not connected')\n  const remoteTime = await _socketEmitTimeout(socket, 'list.time')\n  const {listsUpdatedAt: localTime} = await browser.storage.local.get('listsUpdatedAt')\n  if (remoteTime === localTime) return\n  const remoteLists = await _socketEmitTimeout(socket, 'list.all')\n  const localLists = _.keyBy(await storage.getLists(), list => list._id)\n  const finallyLists = []\n  const fetching = {}\n  remoteLists.forEach(list => {\n    if (!(list._id in localLists) || localLists.updatedAt < list.updatedAt) {\n      fetching[list._id] = _socketEmitTimeout(socket, 'list.get', list._id)\n      finallyLists.push(list._id)\n    } else {\n      finallyLists.push(localLists[list._id])\n    }\n  })\n  console.log(finallyLists)\n  await Promise.all(Object.values(fetching))\n  for (let i = 0; i < finallyLists.length; i += 1) {\n    if (typeof finallyLists[i] === 'string') {\n      finallyLists[i] = await fetching[finallyLists[i]]\n    }\n  }\n  console.log(finallyLists)\n  await storage.setLists(finallyLists)\n  await browser.storage.local.set({listsUpdatedAt: remoteTime})\n}\n\nconst syncLists = async () => {\n  const unlock = await listManager.RWLock.lock()\n  try {\n    await uploadOpsViaWS()\n    await downloadRemoteLists()\n  } catch (error) {\n    throw error\n  } finally {\n    await unlock()\n  }\n}\n\nconst getRemoteOptionsUpdatedTimeViaWS = () => _socketEmitTimeout(window._socket, 'opts.time')\n\nconst getRemoteOptions = () => _socketEmitTimeout(window._socket, 'opts.all')\n\nconst setRemoteOptions = (opts, time) => _socketEmitTimeout(window._socket, 'opts.set', { opts, time })\n\nconst syncOptions = async () => {\n  const remoteTime = await getRemoteOptionsUpdatedTimeViaWS()\n  const {optsUpdatedAt: localTime} = await browser.storage.local.get('optsUpdatedAt')\n  if (remoteTime > localTime) {\n    const opts = await getRemoteOptions()\n    await browser.storage.local.set({opts, optsUpdatedAt: remoteTime})\n  } else if (remoteTime < localTime) {\n    const opts = await storage.getOptions()\n    await setRemoteOptions(opts, localTime)\n  }\n}\n\n\nlet _refreshing = false\nconst refresh = async () => {\n  if (_refreshing || !(await hasToken())) return\n\n  _refreshing = true\n  await sendMessage({refreshing: true})\n  try {\n    await timeout(Promise.all([syncOptions(), syncLists()]), 20000)\n    await sendMessage({refreshed: {success: true}})\n  } catch (err) {\n    logger.error(err)\n    await sendMessage({refreshed: {success: false}})\n  } finally {\n    _refreshing = false\n  }\n}\n\nconst login = async token => {\n  if (await hasToken()) return\n  await setToken(token)\n  const {uid} = await getInfo()\n  await sendMessage({logged: {uid}})\n  const loginNotificationId = 'login'\n  browser.notifications.create(loginNotificationId, {\n    type: 'basic',\n    iconUrl: 'assets/icons/icon_128.png',\n    title: 'you have login to boss successfully',\n    message: '',\n  })\n  setTimeout(() => {\n    browser.notifications.clear(loginNotificationId)\n  }, 5000)\n  await refresh()\n}\n\nconst initTimer = async () => {\n  if (window._syncTimer || !(await isBackground())) return\n\n  const _nextTimer = time => {\n    window._syncTimer = setTimeout(async () => {\n      if (await hasToken()) {\n        getInfo()\n        if (window._socket && window._socket.connected) {\n          refresh()\n          return _nextTimer(time)\n        }\n      }\n      _nextTimer(Math.min(time * 2, SYNC_MAX_INTERVAL))\n    }, time)\n  }\n\n  const _refreshTimer = time => {\n    clearTimeout(window._syncTimer)\n    _nextTimer(time)\n  }\n\n  window.addEventListener('offline', () => _refreshTimer(SYNC_MAX_INTERVAL))\n  window.addEventListener('online', () => _refreshTimer(SYNC_MIN_INTERVAL))\n  browser.runtime.onMessage.addListener(({login, refreshed}) => {\n    if (login || refreshed && refreshed.success) window._nextSyncInterval = SYNC_MIN_INTERVAL\n  })\n  _nextTimer(SYNC_MIN_INTERVAL)\n}\n\nconst init = async () => {\n  if (window._socket || !await isBackground()) return\n  const socket = window._socket = io(SYNC_SERVICE_URL, {path: '/ws', autoConnect: false})\n  setWSToken(await getToken())\n  await listManager.init()\n  socket.on('list.update', ({method, args}) => {\n    listManager[method](...args)\n  })\n  socket.on('opts.set', async ({changes, time}) => {\n    const {opts} = await browser.storage.local.get('opts')\n    for (const [k, v] of Object.entries(changes)) {\n      opts[k] = v\n    }\n    await browser.storage.local.set({opts, optsUpdatedAt: time})\n  })\n  socket.on('connect', () => refresh())\n  socket.open()\n  initTimer()\n}\n\nexport default {\n  getInfo,\n  removeToken,\n  hasToken,\n  login,\n  init,\n  refresh,\n}\n\n'better-onetab/src/common/logger.js'\n:import * as Sentry from '@sentry/browser'\nimport * as Integrations from '@sentry/integrations'\nimport {SENTRY_DSN} from './constants'\nimport {isBackground} from './utils'\nimport manifest from '../manifest.json'\n\nconst logger = {}\n\nconst genMethods = () => {\n  for (const method in window.console) {\n    if (typeof window.console[method] !== 'function') continue\n    logger[method] = (...args) => {\n      window.console[method](...args)\n      args.forEach(arg => {\n        if (arg instanceof Error) Sentry.captureException(arg)\n        else Sentry.addBreadcrumb({data: arg, level: method})\n      })\n    }\n  }\n}\n\nlogger.init = (opts = {}) => {\n  genMethods()\n  if (DEBUG) {\n    window.Sentry = Sentry\n    return\n  }\n\n  const {Vue} = opts\n  const integrations = Sentry.defaultIntegrations\n  if (Vue) integrations.push(new Integrations.Vue({Vue}))\n  Sentry.init({\n    environment: DEBUG ? 'dev' : 'production',\n    release: 'v' + manifest.version,\n    dsn: SENTRY_DSN,\n    debug: DEBUG,\n    integrations,\n  })\n\n  Sentry.configureScope(async scope => {\n    scope.setTag('background', await isBackground())\n  })\n}\n\nexport default logger\n\n'better-onetab/src/background/messageHandler.js'\n:import tabs from '../common/tabs'\nimport storage from '../common/storage'\nimport boss from '../common/service/boss'\nimport {sendMessage} from '../common/utils'\nimport listManager from '../common/listManager'\nimport {setupContextMenus} from './contextMenus'\nimport {updateBrowserAction} from './browserAction'\n\nconst messageHandler = async msg => {\n  console.debug('received', msg)\n  if (msg.optionsChanged) {\n    const changes = msg.optionsChanged\n    console.debug('options changed', changes)\n    Object.assign(window.opts, changes)\n    if (changes.browserAction) updateBrowserAction(changes.browserAction)\n    if (['pageContext', 'allContext', 'disableDynamicMenu'].some(k => k in changes)) await setupContextMenus(changes)\n    await sendMessage({optionsChangeHandledStatus: 'success'})\n    if (PRODUCTION) Object.keys(changes).map(key => ga('send', 'event', 'Options changed', key, changes[key]))\n  }\n  if (msg.restoreList) {\n    const {restoreList} = msg\n    const listIndex = restoreList.index\n    const lists = await storage.getLists()\n    const list = lists[listIndex]\n    if (restoreList.newWindow) {\n      tabs.restoreListInNewWindow(list)\n    } else {\n      tabs.restoreList(list)\n    }\n    if (!list.pinned) {\n      listManager.removeListById(list._id)\n    }\n    if (PRODUCTION) ga('send', 'event', 'Popup item clicked')\n  }\n  if (msg.storeInto) {\n    tabs.storeSelectedTabs(msg.storeInto.index)\n  }\n  if (msg.login) {\n    boss.login(msg.login.token)\n  }\n  if (msg.refresh) {\n    boss.refresh()\n  }\n  if (msg.import) {\n    const {lists} = msg.import\n    lists.forEach(list => listManager.addList(list))\n  }\n}\n\nexport default messageHandler\n\n'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n",
        "gt": [
            "'better-onetab/src/common/logger.js'",
            "'better-onetab/src/common/service/boss.js'",
            "'better-onetab/src/background/messageHandler.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'neode/test/Collection.spec.js'",
            "'neode/src/Node.js'",
            "'neode/src/Entity.js'"
        ],
        "content": "'neode/test/Collection.spec.js'\n:import {assert, expect} from 'chai';\nimport Node from '../src/Node';\nimport Collection from '../src/Collection';\n\ndescribe('Collection.js', () => {\n    const neode = '__neode__';\n    const values = [1, 2, 3, 4];\n\n    const collection = new Collection(neode, values);\n\n    describe('::constructor', () => {\n        it('should construct', () => {\n            expect(collection._neode).to.equal(neode);\n            expect(collection._values).to.equal(values);\n        });\n\n        it('should construct with an empty array', () => {\n            const collection = new Collection(neode);\n            expect(collection._neode).to.equal(neode);\n            expect(collection._values).to.deep.equal([]);\n        });\n    });\n\n    describe('::length', () => {\n        it('should return the length', () => {\n            expect(collection.length).to.equal(values.length);\n        });\n    });\n\n    describe('::get', () => {\n        it('should get an item from the internal values', () => {\n            values.forEach((value, index) => {\n                expect( collection.get(index) ).to.equal(value);\n            })\n        });\n    });\n\n    describe('::[Symbol.iterator]', () => {\n        it('should be iterable', () => {\n            const output = [];\n\n            for ( let value of values ) {\n                output.push(value);\n            }\n\n            expect( output ).to.deep.equal( values );\n        });\n    });\n\n    describe('::first', () => {\n        it('should get the first item in the collection', () => {\n            expect(collection.first()).to.equal(values[0]);\n        });\n    });\n\n    describe('::map', () => {\n        it('should apply a map function to the values', () => {\n            const output = collection.map(value => value * value);\n\n            expect(output).to.deep.equal([1, 4, 9, 16]);\n        });\n    });\n\n    describe('::forEach', () => {\n        it('should apply a foreach function to the values', () => {\n            let total = 0;\n\n            collection.forEach(value => total += value);\n\n            expect(total).to.equal(10);\n        });\n    });\n\n    describe('::toJson', () => {\n        class TestItem {\n            constructor(value) {\n                this.value = value;\n            }\n\n            toJson() {\n                return this.value;\n            }\n        }\n\n        const jsonTest = new Collection(null, [\n            new TestItem(1),\n            new TestItem(2),\n            new TestItem(3),\n            new TestItem(4),\n        ]);\n\n        it('should run the toJson() function to all values', done => {\n            jsonTest.toJson()\n                .then(res => {\n                    expect(res).to.deep.equal([1, 2, 3, 4]);\n                })\n                .then(() => done())\n                .catch(e => done(e));\n        });\n    });\n\n\n});\n'neode/src/Node.js'\n:import neo4j from 'neo4j-driver';\nimport Entity from './Entity';\nimport UpdateNode from './Services/UpdateNode';\nimport DeleteNode from './Services/DeleteNode';\nimport RelateTo from './Services/RelateTo';\nimport DetachFrom from './Services/DetachFrom';\nimport RelationshipType from './RelationshipType';\n\n\nexport default class Node extends Entity {\n\n\n    constructor(neode, model, identity, labels, properties, eager) {\n        super();\n\n        this._neode = neode;\n        this._model = model;\n        this._identity = identity;\n        this._labels = labels;\n        this._properties = properties || new Map;\n\n        this._eager = eager || new Map;\n\n        this._deleted = false;\n    }\n\n\n    model() {\n        return this._model;\n    }\n\n\n    labels() {\n        return this._labels;\n    }\n\n\n    setEager(key, value) {\n        this._eager.set(key, value);\n\n        return this;\n    }\n\n\n    delete(to_depth) {\n        return DeleteNode(this._neode, this._identity, this._model, to_depth)\n            .then(() => {\n                this._deleted = true;\n\n                return this;\n            });\n    }\n\n\n    relateTo(node, type, properties = {}, force_create = false) {\n        const relationship = this._model.relationships().get(type);\n\n        if ( !(relationship instanceof RelationshipType) ) {\n            return Promise.reject( new Error(`Cannot find relationship with type ${type}`) );\n        }\n\n        return RelateTo(this._neode, this, node, relationship, properties, force_create)\n            .then(rel => {\n                this._eager.delete(type);\n\n                return rel;\n            });\n    }\n\n\n    detachFrom(other) {\n        if (!(other instanceof Node)) {\n            return Promise.reject(new Error(`Cannot find node with type ${other}`));\n        }\n\n        return DetachFrom(this._neode, this, other);\n    }\n\n\n    toJson() {\n        const output = {\n            _id: this.id(),\n            _labels: this.labels(),\n        };\n\n\n        this._model.properties().forEach((property, key) => {\n            if ( property.hidden() ) {\n                return;\n            }\n\n            if ( this._properties.has(key) ) {\n                output[ key ] = this.valueToJson(property, this._properties.get( key ));\n            }\n            else if (neo4j.temporal.isDateTime(output[key])) {\n                output[key] = new Date(output[key].toString());\n            }\n            else if (neo4j.spatial.isPoint(output[key])) {\n                switch (output[key].srid.toString()) {\n\n                    case '4326':\n                        output[key] = {longitude: output[key].x, latitude: output[key].y};\n                        break;\n\n                    case '4979':\n                        output[key] = {longitude: output[key].x, latitude: output[key].y, height: output[key].z};\n                        break;\n\n                    case '7203':\n                        output[key] = {x: output[key].x, y: output[key].y};\n                        break;\n\n                    case '9157':\n                        output[key] = {x: output[key].x, y: output[key].y, z: output[key].z};\n                        break;\n                }\n            }\n        });\n\n\n        return Promise.all( this._model.eager().map((rel) => {\n            const key = rel.name();\n\n            if ( this._eager.has( rel.name() ) ) {\n\n                return this._eager.get( rel.name() ).toJson()\n                    .then(value => {\n                        return { key, value };\n                    });\n            }\n        }) )\n\n            .then(eager => eager.filter( e => !!e ))\n\n\n            .then(eager => {\n                eager.forEach(({ key, value }) => output[ key ] = value);\n\n                return output;\n            });\n    }\n\n\n    update(properties) {\n\n\n\n        this._model.properties().forEach(property => {\n            const name = property.name();\n\n            if ( property.required() && !properties.hasOwnProperty(name) ) {\n                properties[ name ] = this._properties.get( name );\n            }\n        });\n\n        return UpdateNode(this._neode, this._model, this._identity, properties)\n            .then(properties => {\n                properties.map(({ key, value }) => {\n                    this._properties.set(key, value)\n                })\n            })\n            .then(() => {\n                return this;\n            });\n    }\n\n}\n'neode/src/Entity.js'\n:\nimport neo4j from 'neo4j-driver';\n\n\nexport function valueToJson(property, value) {\n   if ( neo4j.isInt(value) ) {\n       return value.toNumber();\n   }\n   else if (\n        neo4j.temporal.isDate(value)\n        || neo4j.temporal.isDateTime(value)\n        || neo4j.temporal.isTime(value)\n        || neo4j.temporal.isLocalDateTime(value)\n        || neo4j.temporal.isLocalTime(value)\n        || neo4j.temporal.isDuration(value)\n   ) {\n       return value.toString();\n   }\n   else if ( neo4j.spatial.isPoint(value) ) {\n       switch (value.srid.toString()) {\n\n           case '4326':\n               return { longitude: value.x, latitude: value.y };\n\n           case '4979':\n               return { longitude: value.x, latitude: value.y, height: value.z };\n\n           case '7203':\n               return { x: value.x, y: value.y};\n\n           case '9157':\n               return { x: value.x, y: value.y, z: value.z };\n       }\n   }\n\n   return value;\n}\n\n\nexport function valueToCypher(property, value) {\n    if ( property.convertToInteger() && value !== null && value !== undefined ) {\n        value = neo4j.int(value);\n    }\n\n    return value;\n}\n\nexport default class Entity {\n\n\n    id() {\n        return this._identity.toNumber();\n    }\n\n\n    identity() {\n        return this._identity;\n    }\n\n\n    properties() {\n        const output = {};\n\n        const model = this._model || this._definition;\n\n        model.properties().forEach((property, key) => {\n            if ( !property.hidden() && this._properties.has(key) ) {\n                output[ key ] = this.valueToJson(property, this._properties.get( key ));\n            }\n        });\n\n        return output;\n    }\n\n\n    get(property, or = null) {\n\n        if ( this._properties.has(property) ) {\n            return this._properties.get(property);\n        }\n\n        else if ( this._eager && this._eager.has(property) ) {\n            return this._eager.get(property);\n        }\n\n        return or;\n    }\n\n\n    valueToJson(property, value) {\n        return valueToJson(property, value);\n    }\n}",
        "gt": [
            "'neode/src/Entity.js'",
            "'neode/src/Node.js'",
            "'neode/test/Collection.spec.js'"
        ]
    },
    {
        "files": [
            "'three.bas/src/geometry/ModelBufferGeometry.js'",
            "'three.bas/src/Utils.js'",
            "'three.bas/src/materials/DistanceAnimationMaterial.js'"
        ],
        "content": "'three.bas/src/geometry/ModelBufferGeometry.js'\n:import { BufferGeometry, BufferAttribute } from 'three';\nimport { Utils } from '../Utils';\n\nclass ModelBufferGeometry extends BufferGeometry {\n\n  constructor (model, options) {\n    super();\n\n\n    this.modelGeometry = model;\n\n\n    this.faceCount = this.modelGeometry.faces.length;\n\n\n    this.vertexCount = this.modelGeometry.vertices.length;\n\n    options = options || {};\n    options.computeCentroids && this.computeCentroids();\n\n    this.bufferIndices();\n    this.bufferPositions(options.localizeFaces);\n  }\n\n\n  computeCentroids () {\n\n    this.centroids = [];\n\n    for (let i = 0; i < this.faceCount; i++) {\n      this.centroids[i] = Utils.computeCentroid(this.modelGeometry, this.modelGeometry.faces[i]);\n    }\n  }\n\n  bufferIndices () {\n    const indexBuffer = new Uint32Array(this.faceCount * 3);\n\n    this.setIndex(new BufferAttribute(indexBuffer, 1));\n\n    for (let i = 0, offset = 0; i < this.faceCount; i++, offset += 3) {\n      const face = this.modelGeometry.faces[i];\n\n      indexBuffer[offset    ] = face.a;\n      indexBuffer[offset + 1] = face.b;\n      indexBuffer[offset + 2] = face.c;\n    }\n  }\n\n  bufferPositions (localizeFaces) {\n    const positionBuffer = this.createAttribute('position', 3).array;\n    let i, offset;\n\n    if (localizeFaces === true) {\n      for (i = 0; i < this.faceCount; i++) {\n        const face = this.modelGeometry.faces[i];\n        const centroid = this.centroids ? this.centroids[i] : Utils.computeCentroid(this.modelGeometry, face);\n\n        const a = this.modelGeometry.vertices[face.a];\n        const b = this.modelGeometry.vertices[face.b];\n        const c = this.modelGeometry.vertices[face.c];\n\n        positionBuffer[face.a * 3]     = a.x - centroid.x;\n        positionBuffer[face.a * 3 + 1] = a.y - centroid.y;\n        positionBuffer[face.a * 3 + 2] = a.z - centroid.z;\n\n        positionBuffer[face.b * 3]     = b.x - centroid.x;\n        positionBuffer[face.b * 3 + 1] = b.y - centroid.y;\n        positionBuffer[face.b * 3 + 2] = b.z - centroid.z;\n\n        positionBuffer[face.c * 3]     = c.x - centroid.x;\n        positionBuffer[face.c * 3 + 1] = c.y - centroid.y;\n        positionBuffer[face.c * 3 + 2] = c.z - centroid.z;\n      }\n    }\n    else {\n      for (i = 0, offset = 0; i < this.vertexCount; i++, offset += 3) {\n        const vertex = this.modelGeometry.vertices[i];\n\n        positionBuffer[offset    ] = vertex.x;\n        positionBuffer[offset + 1] = vertex.y;\n        positionBuffer[offset + 2] = vertex.z;\n      }\n    }\n  }\n\n\n  bufferUvs () {\n    const uvBuffer = this.createAttribute('uv', 2).array;\n\n    for (let i = 0; i < this.faceCount; i++) {\n\n      const face = this.modelGeometry.faces[i];\n      let uv;\n\n      uv = this.modelGeometry.faceVertexUvs[0][i][0];\n      uvBuffer[face.a * 2]     = uv.x;\n      uvBuffer[face.a * 2 + 1] = uv.y;\n\n      uv = this.modelGeometry.faceVertexUvs[0][i][1];\n      uvBuffer[face.b * 2]     = uv.x;\n      uvBuffer[face.b * 2 + 1] = uv.y;\n\n      uv = this.modelGeometry.faceVertexUvs[0][i][2];\n      uvBuffer[face.c * 2]     = uv.x;\n      uvBuffer[face.c * 2 + 1] = uv.y;\n    }\n  }\n\n\n  bufferSkinning () {\n    const skinIndexBuffer = this.createAttribute('skinIndex', 4).array;\n    const skinWeightBuffer = this.createAttribute('skinWeight', 4).array;\n\n    for (let i = 0; i < this.vertexCount; i++) {\n      const skinIndex = this.modelGeometry.skinIndices[i];\n      const skinWeight = this.modelGeometry.skinWeights[i];\n\n      skinIndexBuffer[i * 4    ] = skinIndex.x;\n      skinIndexBuffer[i * 4 + 1] = skinIndex.y;\n      skinIndexBuffer[i * 4 + 2] = skinIndex.z;\n      skinIndexBuffer[i * 4 + 3] = skinIndex.w;\n\n      skinWeightBuffer[i * 4    ] = skinWeight.x;\n      skinWeightBuffer[i * 4 + 1] = skinWeight.y;\n      skinWeightBuffer[i * 4 + 2] = skinWeight.z;\n      skinWeightBuffer[i * 4 + 3] = skinWeight.w;\n    }\n  }\n\n\n  createAttribute (name, itemSize, factory) {\n    const buffer = new Float32Array(this.vertexCount * itemSize);\n    const attribute = new BufferAttribute(buffer, itemSize);\n\n    this.setAttribute(name, attribute);\n\n    if (factory) {\n      const data = [];\n\n      for (let i = 0; i < this.faceCount; i++) {\n        factory(data, i, this.faceCount);\n        this.setFaceData(attribute, i, data);\n      }\n    }\n\n    return attribute;\n  }\n\n\n  setFaceData (attribute, faceIndex, data) {\n    attribute = (typeof attribute === 'string') ? this.attributes[attribute] : attribute;\n\n    let offset = faceIndex * 3 * attribute.itemSize;\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < attribute.itemSize; j++) {\n        attribute.array[offset++] = data[j];\n      }\n    }\n  }\n}\n\nexport { ModelBufferGeometry };\n\n'three.bas/src/Utils.js'\n:import { MathUtils, Vector3 } from 'three';\nimport { DepthAnimationMaterial } from './materials/DepthAnimationMaterial';\nimport { DistanceAnimationMaterial } from './materials/DistanceAnimationMaterial';\n\n\nconst Utils = {\n\n  separateFaces: function (geometry) {\n    let vertices = [];\n\n    for (let i = 0, il = geometry.faces.length; i < il; i++) {\n      let n = vertices.length;\n      let face = geometry.faces[i];\n\n      let a = face.a;\n      let b = face.b;\n      let c = face.c;\n\n      let va = geometry.vertices[a];\n      let vb = geometry.vertices[b];\n      let vc = geometry.vertices[c];\n\n      vertices.push(va.clone());\n      vertices.push(vb.clone());\n      vertices.push(vc.clone());\n\n      face.a = n;\n      face.b = n + 1;\n      face.c = n + 2;\n    }\n\n    geometry.vertices = vertices;\n  },\n\n\n  computeCentroid: function(geometry, face, v) {\n    let a = geometry.vertices[face.a];\n    let b = geometry.vertices[face.b];\n    let c = geometry.vertices[face.c];\n\n    v = v || new Vector3();\n\n    v.x = (a.x + b.x + c.x) / 3;\n    v.y = (a.y + b.y + c.y) / 3;\n    v.z = (a.z + b.z + c.z) / 3;\n\n    return v;\n  },\n\n\n  randomInBox: function(box, v) {\n    v = v || new Vector3();\n\n    v.x = MathUtils.randFloat(box.min.x, box.max.x);\n    v.y = MathUtils.randFloat(box.min.y, box.max.y);\n    v.z = MathUtils.randFloat(box.min.z, box.max.z);\n\n    return v;\n  },\n\n\n  randomAxis: function(v) {\n    v = v || new Vector3();\n\n    v.x = MathUtils.randFloatSpread(2.0);\n    v.y = MathUtils.randFloatSpread(2.0);\n    v.z = MathUtils.randFloatSpread(2.0);\n    v.normalize();\n\n    return v;\n  },\n\n\n  createDepthAnimationMaterial: function(sourceMaterial) {\n    return new DepthAnimationMaterial({\n      uniforms: sourceMaterial.uniforms,\n      defines: sourceMaterial.defines,\n      vertexFunctions: sourceMaterial.vertexFunctions,\n      vertexParameters: sourceMaterial.vertexParameters,\n      vertexInit: sourceMaterial.vertexInit,\n      vertexPosition: sourceMaterial.vertexPosition\n    });\n  },\n\n\n  createDistanceAnimationMaterial: function(sourceMaterial) {\n    return new DistanceAnimationMaterial({\n      uniforms: sourceMaterial.uniforms,\n      defines: sourceMaterial.defines,\n      vertexFunctions: sourceMaterial.vertexFunctions,\n      vertexParameters: sourceMaterial.vertexParameters,\n      vertexInit: sourceMaterial.vertexInit,\n      vertexPosition: sourceMaterial.vertexPosition\n    });\n  }\n};\n\nexport { Utils };\n\n'three.bas/src/materials/DistanceAnimationMaterial.js'\n:import { ShaderLib, RGBADepthPacking } from 'three';\nimport BaseAnimationMaterial from './BaseAnimationMaterial';\n\nclass DistanceAnimationMaterial extends BaseAnimationMaterial {\n  constructor (parameters) {\n    super(parameters, ShaderLib['distanceRGBA'].uniforms);\n\n    this.depthPacking = RGBADepthPacking;\n    this.clipping = true;\n    this.vertexShader = this.concatVertexShader();\n    this.fragmentShader = ShaderLib['distanceRGBA'].fragmentShader;\n  }\n\n  concatVertexShader () {\n    return ShaderLib.distanceRGBA.vertexShader\n      .replace(\n        'void main() {',\n        `\n        ${this.stringifyChunk('vertexParameters')}\n        ${this.stringifyChunk('vertexFunctions')}\n\n        void main() {\n          ${this.stringifyChunk('vertexInit')}\n        `\n      )\n      .replace(\n        '#include <begin_vertex>',\n        `\n        #include <begin_vertex>\n\n        ${this.stringifyChunk('vertexPosition')}\n        `\n      )\n      .replace(\n        '#include <morphtarget_vertex>',\n        `\n        #include <morphtarget_vertex>\n\n        ${this.stringifyChunk('vertexPostMorph')}\n        `\n      )\n      .replace(\n        '#include <skinning_vertex>',\n        `\n        #include <skinning_vertex>\n\n        ${this.stringifyChunk('vertexPostSkinning')}\n        `\n      )\n  }\n}\n\nexport { DistanceAnimationMaterial };\n",
        "gt": [
            "'three.bas/src/materials/DistanceAnimationMaterial.js'",
            "'three.bas/src/Utils.js'",
            "'three.bas/src/geometry/ModelBufferGeometry.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/browserAction.js'",
            "'better-onetab/src/background/messageHandler.js'",
            "'better-onetab/src/common/options.js'"
        ],
        "content": "'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n\n'better-onetab/src/background/browserAction.js'\n:import _ from 'lodash'\nimport tabs from '../common/tabs'\nimport options from '../common/options'\nimport browser from 'webextension-polyfill'\n\nconst actions = {\n  'store-selected': tabs.storeSelectedTabs,\n  'show-list': tabs.openTabLists,\n  'store-all': tabs.storeAllTabs,\n  'store-all-in-all-windows': tabs.storeAllTabInAllWindows,\n}\n\nconst getBrowserActionHandler = action => {\n  return actions[action] || new Function()\n}\n\nexport const updateBrowserAction = async (action, tmp = false) => {\n  if (!tmp) window.currentBrowserAction = action\n\n  if (!window.coverBrowserAction) window.coverBrowserAction = () => {}\n  const {items} = _.find(options.optionsList, {name: 'browserAction'})\n  const {label} = _.find(items, {value: action})\n  console.log('action is: ', action, 'set title as: ', label)\n  await browser.browserAction.setTitle({title: label})\n\n  window.coverBrowserAction = () => {}\n  if (action === 'popup') {\n    await browser.browserAction.setPopup({popup: 'index.html#/popup'})\n  } else {\n    await browser.browserAction.setPopup({popup: ''})\n    window.browswerActionClickedHandler = getBrowserActionHandler(action)\n    if (!window.opts.openTabListWhenNewTab) return\n    window.coverBrowserAction = async activeInfo => {\n      const tab = await browser.tabs.get(activeInfo.tabId)\n      if (['about:home', 'about:newtab', 'chrome:\n        return updateBrowserAction('show-list', true)\n      } else {\n        return updateBrowserAction(window.currentBrowserAction)\n      }\n    }\n  }\n}\n\n'better-onetab/src/background/messageHandler.js'\n:import tabs from '../common/tabs'\nimport storage from '../common/storage'\nimport boss from '../common/service/boss'\nimport {sendMessage} from '../common/utils'\nimport listManager from '../common/listManager'\nimport {setupContextMenus} from './contextMenus'\nimport {updateBrowserAction} from './browserAction'\n\nconst messageHandler = async msg => {\n  console.debug('received', msg)\n  if (msg.optionsChanged) {\n    const changes = msg.optionsChanged\n    console.debug('options changed', changes)\n    Object.assign(window.opts, changes)\n    if (changes.browserAction) updateBrowserAction(changes.browserAction)\n    if (['pageContext', 'allContext', 'disableDynamicMenu'].some(k => k in changes)) await setupContextMenus(changes)\n    await sendMessage({optionsChangeHandledStatus: 'success'})\n    if (PRODUCTION) Object.keys(changes).map(key => ga('send', 'event', 'Options changed', key, changes[key]))\n  }\n  if (msg.restoreList) {\n    const {restoreList} = msg\n    const listIndex = restoreList.index\n    const lists = await storage.getLists()\n    const list = lists[listIndex]\n    if (restoreList.newWindow) {\n      tabs.restoreListInNewWindow(list)\n    } else {\n      tabs.restoreList(list)\n    }\n    if (!list.pinned) {\n      listManager.removeListById(list._id)\n    }\n    if (PRODUCTION) ga('send', 'event', 'Popup item clicked')\n  }\n  if (msg.storeInto) {\n    tabs.storeSelectedTabs(msg.storeInto.index)\n  }\n  if (msg.login) {\n    boss.login(msg.login.token)\n  }\n  if (msg.refresh) {\n    boss.refresh()\n  }\n  if (msg.import) {\n    const {lists} = msg.import\n    lists.forEach(list => listManager.addList(list))\n  }\n}\n\nexport default messageHandler\n\n'better-onetab/src/common/options.js'\n:import _ from 'lodash'\nimport __ from '@/common/i18n'\n\nconst cate = {\n  BEHAVIOUR: 'behaviour',\n  APPEARANCE: 'appearance',\n  PERFOREMANCE: 'performance',\n}\n\nexport const optionsList = [\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'browserAction',\n    type: String,\n    default: 'show-list',\n    items: [\n      {\n        value: 'popup',\n        label: __('opt_label_popup'),\n      },\n      {\n        value: 'store-selected',\n        label: __('opt_label_store_selected'),\n      },\n      {\n        value: 'store-all',\n        label: __('opt_label_store_all'),\n      },\n      {\n        value: 'show-list',\n        label: __('opt_label_show_list'),\n      },\n      {\n        value: 'none',\n        label: __('opt_label_none'),\n      },\n    ],\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'itemClickAction',\n    type: String,\n    default: 'open-and-remove',\n    items: [\n      {\n        value: 'open-and-remove',\n        label: __('opt_label_open_and_remove'),\n      },\n      {\n        value: 'open',\n        label: __('opt_label_open'),\n      },\n      {\n        value: 'none',\n        label: __('opt_label_none'),\n      },\n    ],\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'popupItemClickAction',\n    type: String,\n    default: 'restore',\n    items: [\n      {\n        value: 'restore',\n        label: __('opt_label_restore'),\n      },\n      {\n        value: 'restore-new-window',\n        label: __('opt_label_restore_new_window'),\n      },\n      {\n        value: 'none',\n        label: __('opt_label_none'),\n      },\n    ],\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'removeItemBtnPos',\n    type: String,\n    default: 'left',\n    items: [\n      {\n        value: 'left',\n        label: __('opt_label_left'),\n      },\n      {\n        value: 'right',\n        label: __('opt_label_right'),\n      },\n    ],\n    deprecated: '1.4',\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'defaultNightMode',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'itemDisplay',\n    type: String,\n    default: 'title-and-url',\n    items: [\n      {\n        value: 'title-and-url',\n        label: __('opt_label_title_and_url'),\n      },\n      {\n        value: 'title',\n        label: __('opt_label_title'),\n      },\n      {\n        value: 'url',\n        label: __('opt_label_url'),\n      },\n    ],\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'hideFavicon',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'fixedToolbar',\n    type: Boolean,\n    default: false,\n    deprecated: '1.4',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'addHistory',\n    type: Boolean,\n    default: true,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'ignorePinned',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'pinNewList',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'pageContext',\n    type: Boolean,\n    default: true,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'allContext',\n    type: Boolean,\n    default: false,\n    deps: ({pageContext}) => pageContext,\n    new: '1.3.6',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'openTabListWhenNewTab',\n    desc: true,\n    deps: ({disableDynamicMenu}) => !disableDynamicMenu,\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'alertRemoveList',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'excludeIllegalURL',\n    type: Boolean,\n    default: true,\n    new: '1.3.6',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'removeDuplicate',\n    type: Boolean,\n    default: false,\n    new: '1.3.6',\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'enableSearch',\n    type: Boolean,\n    default: true,\n    new: '1.3.7',\n    deprecated: '1.4',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'openEnd',\n    type: Boolean,\n    default: true,\n    new: '1.3.9',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'openTabListNoTab',\n    type: Boolean,\n    default: true,\n    new: '1.4.0',\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'listsPerPage',\n    type: String,\n    default: 10,\n    items: [\n      {\n        value: 5,\n        label: 5,\n      },\n      {\n        value: 10,\n        label: 10,\n      },\n      {\n        value: 15,\n        label: 15,\n      },\n    ],\n    new: '1.4.0',\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'titleFontSize',\n    type: String,\n    default: '12px',\n    items: [\n      {\n        value: '12px',\n        label: '12px',\n      },\n      {\n        value: '18px',\n        label: '18px',\n      },\n      {\n        value: '24px',\n        label: '24px',\n      },\n    ],\n    new: '1.4.0',\n  },\n  {\n    cate: cate.PERFOREMANCE,\n    name: 'disableDynamicMenu',\n    type: Boolean,\n    default: false,\n    new: '1.4.0',\n  },\n  {\n    cate: cate.PERFOREMANCE,\n    name: 'disableExpansion',\n    type: Boolean,\n    default: false,\n    new: '1.4.0',\n  },\n  {\n    cate: cate.PERFOREMANCE,\n    name: 'disableTransition',\n    type: Boolean,\n    default: false,\n    new: '1.4.0',\n  },\n  {\n    cate: cate.PERFOREMANCE,\n    name: 'disableSearch',\n    type: Boolean,\n    default: false,\n    new: '1.4.0',\n  },\n]\n\nconst availableOptionsList = optionsList.filter(i => !i.deprecated)\n\nif (DEBUG) {\n  console.debug('current options number', availableOptionsList.length)\n  window.printOptionsMap = () => console.debug(availableOptionsList.map(i => i.name + ': ' + i.type.name + ',').join('\\n'))\n}\n\nconst _defaultOptions = _.mapValues(_.keyBy(availableOptionsList, 'name'), i => i.default)\nconst getDefaultOptions = () => _defaultOptions\n\nexport default {getDefaultOptions, optionsList: availableOptionsList}\n",
        "gt": [
            "'better-onetab/src/common/options.js'",
            "'better-onetab/src/background/browserAction.js'",
            "'better-onetab/src/background/messageHandler.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/src/components/Modal.js'",
            "'react-modal/specs/index.js'"
        ],
        "content": "'react-modal/specs/helper.js'\n:import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Modal, { bodyOpenClassName } from \"../src/components/Modal\";\nimport TestUtils from \"react-dom/test-utils\";\nimport { log as classListLog } from \"../src/helpers/classList\";\nimport { log as focusManagerLog } from \"../src/helpers/focusManager\";\nimport { log as ariaAppLog } from \"../src/helpers/ariaAppHider\";\nimport { log as bodyTrapLog } from \"../src/helpers/bodyTrap\";\nimport { log as portalInstancesLog } from \"../src/helpers/portalOpenInstances\";\n\nconst debug = false;\n\nlet i = 0;\n\n\nexport function log(label, spaces) {\n  if (!debug) return;\n\n  console.log(`${label} -----------------`);\n  console.log(document.body.children.length);\n  const logChildren = c => console.log(c.nodeName, c.className, c.id);\n  document.body.children.forEach(logChildren);\n\n  ariaAppLog();\n  bodyTrapLog();\n  classListLog();\n  focusManagerLog();\n  portalInstancesLog();\n\n  console.log(`end ${label} -----------------` + (!spaces ? '' : `\n\n\n`));\n}\n\nlet elementPool = [];\n\n\nexport function createHTMLElement(name) {\n  const e = document.createElement(name);\n  elementPool[elementPool.length - 1].push(e);\n  e.className = `element_pool_${name}-${++i}`;\n  return e;\n}\n\n\nexport function drainPool(pool) {\n  pool.forEach(e => e.parentNode && e.parentNode.removeChild(e));\n}\n\n\nexport function withElementCollector(work) {\n  let r;\n  let poolIndex = elementPool.length;\n  elementPool[poolIndex] = [];\n  try {\n    r = work();\n  } finally {\n    drainPool(elementPool[poolIndex]);\n    elementPool = elementPool.slice(\n      0, poolIndex\n    );\n  }\n  return r;\n}\n\n\nif (!String.prototype.includes) {\n  String.prototype.includes = function(search, start) {\n    if (typeof start !== \"number\") {\n      start = 0;\n    }\n\n    if (start + search.length > this.length) {\n      return false;\n    }\n\n    return this.indexOf(search, start) !== -1;\n  };\n}\n\n\nexport const documentClassList = () => document.body.classList;\n\n\nexport const isDocumentWithReactModalOpenClass = (\n  bodyClass = bodyOpenClassName\n) => document.body.className.includes(bodyClass);\n\n\nexport const htmlClassList = () =>\n  document.getElementsByTagName(\"html\")[0].classList;\n\n\nexport const isHtmlWithReactModalOpenClass = htmlClass =>\n  htmlClassList().contains(htmlClass);\n\n\nexport const findDOMWithClass = TestUtils.findRenderedDOMComponentWithClass;\n\n\nconst getModalAttribute = component => (instance, attr) =>\n  modalComponent(component)(instance).getAttribute(attr);\n\n\nconst modalComponent = component => instance => instance.portal[component];\n\n\nexport const mcontent = modalComponent(\"content\");\n\n\nexport const moverlay = modalComponent(\"overlay\");\n\n\nexport const contentAttribute = getModalAttribute(\"content\");\n\n\nexport const overlayAttribute = getModalAttribute(\"overlay\");\n\nconst Simulate = TestUtils.Simulate;\n\nconst dispatchMockEvent = eventCtor => (key, code) => (element, opts) =>\n  eventCtor(\n    element,\n    Object.assign(\n      {},\n      {\n        key: key,\n        which: code\n      },\n      code,\n      opts\n    )\n  );\n\nconst dispatchMockKeyDownEvent = dispatchMockEvent(Simulate.keyDown);\n\n\nexport const escKeyDown = dispatchMockKeyDownEvent(\"ESC\", { keyCode: 27 });\n\nexport const escKeyDownWithCode = dispatchMockKeyDownEvent(\"ESC\", {\n  code: \"Escape\"\n});\n\nexport const tabKeyDown = dispatchMockKeyDownEvent(\"TAB\", { keyCode: 9 });\n\nexport const tabKeyDownWithCode = dispatchMockKeyDownEvent(\"TAB\", {\n  code: \"Tab\"\n});\n\nexport const clickAt = Simulate.click;\n\nexport const mouseUpAt = Simulate.mouseUp;\n\nexport const mouseDownAt = Simulate.mouseDown;\n\nexport const noop = () => {};\n\n\nexport const withModal = function(props, children, test = noop) {\n  return withElementCollector(() => {\n    const node = createHTMLElement();\n    const modalProps = { ariaHideApp: false, ...props };\n    let modal;\n    try {\n      ReactDOM.render(\n        <Modal ref={m => (modal = m)} {...modalProps}>\n          {children}\n        </Modal>,\n        node\n      );\n      test(modal);\n    } finally {\n      ReactDOM.unmountComponentAtNode(node);\n    }\n  });\n};\n\n'react-modal/specs/Modal.testability.spec.js'\n:\nimport ReactDOM from \"react-dom\";\nimport sinon from \"sinon\";\nimport { withModal } from \"./helper\";\n\nexport default () => {\n  it(\"allows ReactDOM.createPortal to be overridden in real-time\", () => {\n    const createPortalSpy = sinon.spy(ReactDOM, \"createPortal\");\n    const props = { isOpen: true };\n    withModal(props, \"hello\");\n    createPortalSpy.called.should.be.ok();\n    ReactDOM.createPortal.restore();\n  });\n};\n\n'react-modal/src/components/Modal.js'\n:import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport ModalPortal from \"./ModalPortal\";\nimport * as ariaAppHider from \"../helpers/ariaAppHider\";\nimport SafeHTMLElement, {\n  SafeNodeList,\n  SafeHTMLCollection,\n  canUseDOM\n} from \"../helpers/safeHTMLElement\";\n\nimport { polyfill } from \"react-lifecycles-compat\";\n\nexport const portalClassName = \"ReactModalPortal\";\nexport const bodyOpenClassName = \"ReactModal__Body--open\";\n\nconst isReact16 = canUseDOM && ReactDOM.createPortal !== undefined;\n\nlet createHTMLElement = name => document.createElement(name);\n\nconst getCreatePortal = () =>\n  isReact16\n    ? ReactDOM.createPortal\n    : ReactDOM.unstable_renderSubtreeIntoContainer;\n\nfunction getParentElement(parentSelector) {\n  return parentSelector();\n}\n\nclass Modal extends Component {\n  static setAppElement(element) {\n    ariaAppHider.setElement(element);\n  }\n\n\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    style: PropTypes.shape({\n      content: PropTypes.object,\n      overlay: PropTypes.object\n    }),\n    portalClassName: PropTypes.string,\n    bodyOpenClassName: PropTypes.string,\n    htmlOpenClassName: PropTypes.string,\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        base: PropTypes.string.isRequired,\n        afterOpen: PropTypes.string.isRequired,\n        beforeClose: PropTypes.string.isRequired\n      })\n    ]),\n    overlayClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        base: PropTypes.string.isRequired,\n        afterOpen: PropTypes.string.isRequired,\n        beforeClose: PropTypes.string.isRequired\n      })\n    ]),\n    appElement: PropTypes.oneOfType([\n      PropTypes.instanceOf(SafeHTMLElement),\n      PropTypes.instanceOf(SafeHTMLCollection),\n      PropTypes.instanceOf(SafeNodeList),\n      PropTypes.arrayOf(PropTypes.instanceOf(SafeHTMLElement))\n    ]),\n    onAfterOpen: PropTypes.func,\n    onRequestClose: PropTypes.func,\n    closeTimeoutMS: PropTypes.number,\n    ariaHideApp: PropTypes.bool,\n    shouldFocusAfterRender: PropTypes.bool,\n    shouldCloseOnOverlayClick: PropTypes.bool,\n    shouldReturnFocusAfterClose: PropTypes.bool,\n    preventScroll: PropTypes.bool,\n    parentSelector: PropTypes.func,\n    aria: PropTypes.object,\n    data: PropTypes.object,\n    role: PropTypes.string,\n    contentLabel: PropTypes.string,\n    shouldCloseOnEsc: PropTypes.bool,\n    overlayRef: PropTypes.func,\n    contentRef: PropTypes.func,\n    id: PropTypes.string,\n    overlayElement: PropTypes.func,\n    contentElement: PropTypes.func\n  };\n\n\n  static defaultProps = {\n    isOpen: false,\n    portalClassName,\n    bodyOpenClassName,\n    role: \"dialog\",\n    ariaHideApp: true,\n    closeTimeoutMS: 0,\n    shouldFocusAfterRender: true,\n    shouldCloseOnEsc: true,\n    shouldCloseOnOverlayClick: true,\n    shouldReturnFocusAfterClose: true,\n    preventScroll: false,\n    parentSelector: () => document.body,\n    overlayElement: (props, contentEl) => <div {...props}>{contentEl}</div>,\n    contentElement: (props, children) => <div {...props}>{children}</div>\n  };\n\n  static defaultStyles = {\n    overlay: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: \"rgba(255, 255, 255, 0.75)\"\n    },\n    content: {\n      position: \"absolute\",\n      top: \"40px\",\n      left: \"40px\",\n      right: \"40px\",\n      bottom: \"40px\",\n      border: \"1px solid #ccc\",\n      background: \"#fff\",\n      overflow: \"auto\",\n      WebkitOverflowScrolling: \"touch\",\n      borderRadius: \"4px\",\n      outline: \"none\",\n      padding: \"20px\"\n    }\n  };\n\n  componentDidMount() {\n    if (!canUseDOM) return;\n\n    if (!isReact16) {\n      this.node = createHTMLElement(\"div\");\n    }\n    this.node.className = this.props.portalClassName;\n\n    const parent = getParentElement(this.props.parentSelector);\n    parent.appendChild(this.node);\n\n    !isReact16 && this.renderPortal(this.props);\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    const prevParent = getParentElement(prevProps.parentSelector);\n    const nextParent = getParentElement(this.props.parentSelector);\n    return { prevParent, nextParent };\n  }\n\n  componentDidUpdate(prevProps, _, snapshot) {\n    if (!canUseDOM) return;\n    const { isOpen, portalClassName } = this.props;\n\n    if (prevProps.portalClassName !== portalClassName) {\n      this.node.className = portalClassName;\n    }\n\n    const { prevParent, nextParent } = snapshot;\n    if (nextParent !== prevParent) {\n      prevParent.removeChild(this.node);\n      nextParent.appendChild(this.node);\n    }\n\n\n    if (!prevProps.isOpen && !isOpen) return;\n\n    !isReact16 && this.renderPortal(this.props);\n  }\n\n  componentWillUnmount() {\n    if (!canUseDOM || !this.node || !this.portal) return;\n\n    const state = this.portal.state;\n    const now = Date.now();\n    const closesAt =\n      state.isOpen &&\n      this.props.closeTimeoutMS &&\n      (state.closesAt || now + this.props.closeTimeoutMS);\n\n    if (closesAt) {\n      if (!state.beforeClose) {\n        this.portal.closeWithTimeout();\n      }\n\n      setTimeout(this.removePortal, closesAt - now);\n    } else {\n      this.removePortal();\n    }\n  }\n\n  removePortal = () => {\n    !isReact16 && ReactDOM.unmountComponentAtNode(this.node);\n    const parent = getParentElement(this.props.parentSelector);\n    if (parent && parent.contains(this.node)) {\n      parent.removeChild(this.node);\n    } else {\n\n      console.warn(\n        'React-Modal: \"parentSelector\" prop did not returned any DOM ' +\n          \"element. Make sure that the parent element is unmounted to \" +\n          \"avoid any memory leaks.\"\n      );\n    }\n  };\n\n  portalRef = ref => {\n    this.portal = ref;\n  };\n\n  renderPortal = props => {\n    const createPortal = getCreatePortal();\n    const portal = createPortal(\n      this,\n      <ModalPortal defaultStyles={Modal.defaultStyles} {...props} />,\n      this.node\n    );\n    this.portalRef(portal);\n  };\n\n  render() {\n    if (!canUseDOM || !isReact16) {\n      return null;\n    }\n\n    if (!this.node && isReact16) {\n      this.node = createHTMLElement(\"div\");\n    }\n\n    const createPortal = getCreatePortal();\n    return createPortal(\n      <ModalPortal\n        ref={this.portalRef}\n        defaultStyles={Modal.defaultStyles}\n        {...this.props}\n      />,\n      this.node\n    );\n  }\n}\n\npolyfill(Modal);\n\nif (process.env.NODE_ENV !== \"production\") {\n  Modal.setCreateHTMLElement = fn => (createHTMLElement = fn);\n}\n\nexport default Modal;\n\n'react-modal/specs/index.js'\n:\n\nimport ModalState from \"./Modal.spec\";\nimport ModalEvents from \"./Modal.events.spec\";\nimport ModalStyle from \"./Modal.style.spec\";\nimport ModalHelpers from \"./Modal.helpers.spec\";\nimport ModalTestability from \"./Modal.testability.spec\";\n\ndescribe(\"State\", ModalState);\ndescribe(\"Style\", ModalStyle);\ndescribe(\"Events\", ModalEvents);\ndescribe(\"Helpers\", ModalHelpers);\ndescribe(\"Testability\", ModalTestability);\n",
        "gt": [
            "'react-modal/src/components/Modal.js'",
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/specs/index.js'"
        ]
    },
    {
        "files": [
            "'Next-GraphQL-Blog/client/components/CommentList.js'",
            "'Next-GraphQL-Blog/client/components/PostCard.js'",
            "'Next-GraphQL-Blog/client/components/FeedList.js'",
            "'Next-GraphQL-Blog/client/pages/index.js'"
        ],
        "content": "'Next-GraphQL-Blog/client/components/CommentList.js'\n:import React, { Component } from 'react'\nimport { Comment, Input } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport { Mutation, Query } from 'react-apollo'\nimport ReactDOM from 'react-dom'\n\nimport withUser from '../lib/withUser'\nimport { showErrorAlert } from '../lib/alerts'\nimport parseError from '../lib/parseError'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport {\n  COMMENT_POST,\n  commentPostOptions\n} from '../api/mutations/comment/commentPost'\n\nclass CommentList extends Component {\n  state = {\n    input: ''\n  }\n\n  componentDidMount() {\n    this.scrollToBottom()\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom()\n  }\n\n  writeComment = (e, commentPost) => {\n    e.preventDefault()\n    const { input } = this.state\n    if (!input) return\n\n    commentPost(commentPostOptions(this.props, input)).catch(e =>\n      showErrorAlert(parseError(e.message))\n    )\n\n    this.setState({\n      input: ''\n    })\n  }\n\n  handleChange = e => {\n    this.setState({\n      input: e.target.value\n    })\n  }\n\n  scrollToBottom = () => {\n    const messagesContainer = ReactDOM.findDOMNode(this.messageList)\n    messagesContainer.scrollTop = messagesContainer.scrollHeight\n  }\n\n  render() {\n    const { postId, user, comments } = this.props\n    return (\n      <Mutation\n        mutation={COMMENT_POST}\n        variables={{ postId: postId, text: this.state.input }}\n      >\n        {(commentPost, { loading, error, data }) => (\n          <CommentContainer>\n            <StyledList\n              ref={node => {\n                this.messageList = node\n              }}\n            >\n              {comments.map(comment => {\n                return (\n                  <Comment key={comment._id}>\n                    <Comment.Content>\n                      <Comment.Author as=\"a\">\n                        {comment.commentedBy.name}\n                      </Comment.Author>\n                      <Comment.Metadata>\n                        <div>\n                          {moment(new Date(comment.createdAt)).fromNow()}\n                        </div>\n                      </Comment.Metadata>\n                      <Comment.Text>{comment.text}</Comment.Text>\n                    </Comment.Content>\n                  </Comment>\n                )\n              })}\n              <div\n                style={{ float: 'left', clear: 'both' }}\n                ref={el => {\n                  this.messagesEnd = el\n                }}\n              />\n            </StyledList>\n\n            <form onSubmit={e => this.writeComment(e, commentPost)}>\n              <Input\n                action=\"Comment\"\n                value={this.state.input}\n                onChange={this.handleChange}\n                placeholder=\"Write a comment...\"\n              />\n            </form>\n          </CommentContainer>\n        )}\n      </Mutation>\n    )\n  }\n}\n\nexport default withUser(CommentList)\n\nconst CommentContainer = styled(Comment.Group)`\n  &&& {\n    padding: 14px;\n    margin: 0;\n    position: absolute;\n    background: #ffffff;\n    border-radius: 5px;\n    border-radius: 5px;\n    box-shadow: 0px 7px 8px 0px #00000047;\n    top: 100%;\n    z-index: 10;\n  }\n`\n\nconst StyledList = styled.div`\n  overflow-y: auto;\n  max-height: 180px;\n`\n\n'Next-GraphQL-Blog/client/components/PostCard.js'\n:import React, { Component } from 'react'\nimport { Card, Icon, Image, Divider } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { Query, Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport { LIKE_POST, likePostOptions } from '../api/mutations/like/likePost'\nimport {\n  DELETE_POST,\n  deletePostOptions\n} from '../api/mutations/post/deletePost'\n\nimport withUser from '../lib/withUser'\nimport parseError from '../lib/parseError'\nimport { showSuccessAlert, showErrorAlert } from '../lib/alerts'\n\nimport CommentList from './CommentList'\n\nclass PostCard extends Component {\n  state = {\n    showComments: false\n  }\n\n  toggleComments = () => {\n    this.setState({\n      showComments: !this.state.showComments\n    })\n  }\n\n  render() {\n    const { showComments } = this.state\n    const {\n      _id,\n      name,\n      content,\n      postedBy,\n      likes,\n      comments,\n      createdAt,\n      image,\n      user\n    } = this.props\n\n    return (\n      <Mutation mutation={LIKE_POST} variables={{ postId: _id }}>\n        {likePost => (\n          <Mutation mutation={DELETE_POST} variables={{ _id: _id }}>\n            {deletePost => (\n              <StyledCard props={{ showComments }}>\n                {user &&\n                  user._id === postedBy._id && (\n                    <RemoveIcon\n                      name=\"remove\"\n                      onClick={() => {\n                        deletePost(deletePostOptions(this.props)).then(() =>\n                          showSuccessAlert('Post was deleted!')\n                        )\n                      }}\n                    />\n                  )}\n\n                <StyledImage\n                  src={image ? image : '/static/blog-placeholder.jpg'}\n                />\n\n                <Card.Content>\n                  <Card.Header style={ellipsisStyle}>{name}</Card.Header>\n                  <Card.Meta style={ellipsisStyle}>\n                    By {postedBy.name}\n                  </Card.Meta>\n                  <Card.Description style={ellipsisStyle}>\n                    {content}\n                  </Card.Description>\n                </Card.Content>\n\n                <BottomSection extra>\n                  <a onClick={this.toggleComments}>\n                    <Icon name=\"comment\" />\n                    {comments.length} Comments\n                  </a>\n                  <a\n                    onClick={() => {\n                      likePost(likePostOptions(this.props))\n                        .then(() => showSuccessAlert('You liked a Post!'))\n                        .catch(e => showErrorAlert(parseError(e.message)))\n                    }}\n                  >\n                    <Icon name=\"like\" />\n                    {likes.length} Likes\n                  </a>\n                </BottomSection>\n\n                {showComments && (\n                  <CommentList comments={comments} postId={_id} />\n                )}\n              </StyledCard>\n            )}\n          </Mutation>\n        )}\n      </Mutation>\n    )\n  }\n}\n\nconst StyledCard = styled(Card)`\n  &&& {\n    height: ${props => (props.props.showComments ? 'auto' : '325px')};\n    box-shadow: 0px 3px 25px 2px #00000014;\n    border-bottom-left-radius: 0px;\n    border-bottom-right-radius: 0px;\n  }\n`\n\nconst BottomSection = styled(Card.Content)`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst RemoveIcon = styled(Icon)`\n  &&& {\n    font-size: 18px;\n    position: absolute;\n    top: 5px;\n    z-index: 9;\n    right: 0;\n    cursor: pointer;\n    transition: 0.2s all ease;\n    &:hover {\n      font-size: 22px;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  &&& {\n    height: 191px;\n    object-fit: cover;\n  }\n`\n\nconst ellipsisStyle = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden'\n}\n\nexport default withUser(PostCard)\n\n'Next-GraphQL-Blog/client/components/FeedList.js'\n:import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport FlipMove from 'react-flip-move'\n\nimport PostCard from './PostCard'\n\nclass FeedList extends Component {\n  componentDidMount() {\n    this.props.subscribeToNewLikes()\n    this.props.subscribeToNewComments()\n    this.props.subscribeToNewPosts()\n  }\n\n  render() {\n    const { posts, fetchMore, hasMorePosts, isFromServer } = this.props\n    return (\n      <Container>\n        <InfiniteScroll\n          dataLength={posts.length}\n          next={fetchMore}\n          hasMore={hasMorePosts}\n          style={{ overflow: 'visible' }}\n        >\n          <FlipMove\n            duration={500}\n            easing=\"ease-in-out\"\n            appearAnimation={isFromServer ? 'none' : 'fade'}\n            enterAnimation=\"accordionHorizontal\"\n            leaveAnimation=\"accordionHorizontal\"\n            typeName=\"ul\"\n            style={{\n              position: 'relative',\n              padding: 0,\n              display: 'flex',\n              flexWrap: 'wrap',\n              justifyContent: 'center'\n            }}\n          >\n            {!!posts.length ? (\n              posts.map((post, index) => (\n                <li key={post._id} style={{ display: 'inline-block' }}>\n                  <PostCard key={post._id} index={index} {...post} />\n                </li>\n              ))\n            ) : (\n              <div>No Posts here... :(</div>\n            )}\n          </FlipMove>\n        </InfiniteScroll>\n      </Container>\n    )\n  }\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1;\n  .ui.card {\n    margin: 15px;\n    width: 310px;\n  }\n  .ui.card:first-child {\n    margin-top: 15px;\n  }\n  .ui.card:last-child {\n    margin-bottom: 15px;\n  }\n`\nexport default FeedList\n\n'Next-GraphQL-Blog/client/pages/index.js'\n:import React, { Component } from 'react'\nimport { Query } from 'react-apollo'\nimport { Transition, animated } from 'react-spring'\n\nimport FeedList from '../components/FeedList'\nimport SearchForm from '../components/SearchForm'\nimport LoadPendingButton from '../components/LoadPendingButton'\nimport FeedLoader from '../components/FeedLoader'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport { NEW_LIKE_SUB, newLikeUpdate } from '../api/subscriptions/newLike'\nimport {\n  NEW_COMMENT_SUB,\n  newCommentUpdate\n} from '../api/subscriptions/newComment'\nimport { NEW_POST_SUB } from '../api/subscriptions/newPost'\n\nimport { POSTS_LIMIT } from '../api/constants'\n\nclass Home extends Component {\n  static async getInitialProps(ctx) {\n    const isFromServer = !!ctx.req\n\n    return {\n      isFromServer\n    }\n  }\n  state = {\n    newPosts: []\n  }\n\n  subscribeToNewLikes = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_LIKE_SUB,\n      updateQuery: (prev, result) => newLikeUpdate(prev, result)\n    })\n\n  subscribeToNewComments = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_COMMENT_SUB,\n      updateQuery: (prev, result) => newCommentUpdate(prev, result)\n    })\n\n  subscribeToNewPosts = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_POST_SUB,\n\n\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev\n\n        const newPost = { ...subscriptionData.data.newPost }\n        newPost.likes = []\n        newPost.comments = []\n\n        this.setState(prevState => {\n          return {\n            newPosts: [newPost, ...prevState.newPosts]\n          }\n        })\n      }\n    })\n\n  fetchMorePosts = (fetchMore, offset) =>\n    fetchMore({\n      variables: { offset },\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prev\n        const newPosts = [\n          ...prev.allPosts.posts,\n          ...fetchMoreResult.allPosts.posts\n        ]\n\n\n\n        const updatedPosts = newPosts.filter(\n          (post, index, self) =>\n            index === self.findIndex(t => t._id === post._id)\n        )\n\n        return {\n          ...prev,\n          allPosts: {\n            __typename: 'PostFeed',\n            count: prev.allPosts.count,\n            posts: updatedPosts\n          }\n        }\n      }\n    })\n\n  loadPendingPosts = () => {\n\n\n\n    const { allPosts } = this.props.client.readQuery({\n      query: ALL_POSTS,\n      variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' }\n    })\n\n    const newPostslength = this.state.newPosts.length\n    allPosts.posts.unshift(...this.state.newPosts)\n\n    this.props.client.writeQuery({\n      query: ALL_POSTS,\n      variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' },\n      data: {\n        allPosts: {\n          __typename: 'PostFeed',\n          count: allPosts.count + newPostslength,\n          posts: [...allPosts.posts]\n        }\n      }\n    })\n    window.scroll(0, 0)\n    this.setState({\n      newPosts: []\n    })\n  }\n\n  render() {\n    return (\n      <Query\n        query={ALL_POSTS}\n        variables={{ sort: '-createdAt', limit: POSTS_LIMIT, offset: 0 }}\n        fetchPolicy=\"cache-and-network\"\n        notifyOnNetworkStatusChange\n      >\n        {({ loading, subscribeToMore, fetchMore, data: { allPosts } }) => {\n          const postLength = allPosts.posts.length\n          const pendingPostLength = this.state.newPosts.length\n          return (\n            <>\n              <Transition\n                from={{ top: '-50px' }}\n                enter={{ top: '50px' }}\n                leave={{ top: '-50px' }}\n              >\n                {!!pendingPostLength &&\n                  (style => (\n                    <LoadPendingButton\n                      style={{ ...style }}\n                      onClick={this.loadPendingPosts}\n                    >\n                      Load {pendingPostLength} new post...\n                    </LoadPendingButton>\n                  ))}\n              </Transition>\n\n              <SearchForm client={this.props.client} />\n\n              <FeedList\n                posts={allPosts.posts}\n                isFromServer={this.props.isFromServer}\n                subscribeToNewLikes={() =>\n                  this.subscribeToNewLikes(subscribeToMore)\n                }\n                subscribeToNewComments={() =>\n                  this.subscribeToNewComments(subscribeToMore)\n                }\n                subscribeToNewPosts={() =>\n                  this.subscribeToNewPosts(subscribeToMore)\n                }\n                hasMorePosts={allPosts.count !== postLength}\n                fetchMore={() => this.fetchMorePosts(fetchMore, postLength)}\n              />\n\n              {loading && <FeedLoader />}\n            </>\n          )\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default Home\n",
        "gt": [
            "'Next-GraphQL-Blog/client/components/CommentList.js'",
            "'Next-GraphQL-Blog/client/components/PostCard.js'",
            "'Next-GraphQL-Blog/client/components/FeedList.js'",
            "'Next-GraphQL-Blog/client/pages/index.js'"
        ]
    },
    {
        "files": [
            "'budo/lib/parse-args.js'",
            "'budo/index.js'",
            "'budo/lib/budo.js'"
        ],
        "content": "'budo/lib/parse-args.js'\n:var subarg = require('subarg')\nvar xtend = require('xtend')\n\nmodule.exports = parseArgs\nfunction parseArgs (args, opt) {\n\n  var bundlerFlags = []\n  var stopIndex = args.indexOf('--')\n  if (stopIndex >= 0) {\n    bundlerFlags = args.slice(stopIndex + 1)\n    args = args.slice(0, stopIndex)\n  }\n  var argv = subarg(args, {\n    boolean: [\n      'stream',\n      'debug',\n      'errorHandler',\n      'forceDefaultIndex',\n      'open',\n      'portfind',\n      'ndjson',\n      'verbose',\n      'cors',\n      'ssl'\n    ],\n    string: [\n      'host',\n      'port',\n      'dir',\n      'onupdate',\n      'serve',\n      'title',\n      'watchGlob',\n      'cert',\n      'key'\n    ],\n    default: module.exports.defaults,\n    alias: {\n      port: 'p',\n      ssl: 'S',\n      serve: 's',\n      cert: 'C',\n      key: 'K',\n      verbose: 'v',\n      help: 'h',\n      host: 'H',\n      dir: 'd',\n      live: 'l',\n      open: 'o',\n      staticOptions: [ 'static-options' ],\n      watchGlob: [ 'wg', 'watch-glob' ],\n      errorHandler: 'error-handler',\n      forceDefaultIndex: 'force-default-index',\n      pushstate: 'P'\n    },\n    '--': true\n  })\n\n  argv['--'] = bundlerFlags\n  return xtend(argv, opt)\n}\n\nmodule.exports.defaults = {\n  title: 'budo',\n  port: 9966,\n  debug: true,\n  stream: true,\n  errorHandler: true,\n  portfind: true\n}\n\n'budo/index.js'\n:var parseArgs = require('./lib/parse-args')\nvar budo = require('./lib/budo')\nvar color = require('term-color')\nvar stdoutStream = require('stdout-stream')\nvar exec = require('child_process').exec\n\nmodule.exports = budo\nmodule.exports.cli = budoCLI\n\nfunction budoCLI (args, opts) {\n  var argv = parseArgs(args, opts)\n\n\n  if (argv.stream !== false) {\n    argv.stream = /^win/.test(process.platform) ? process.stdout : stdoutStream\n  }\n\n  var entries = argv._\n  delete argv._\n\n  argv.browserifyArgs = argv['--']\n  delete argv['--']\n\n  if (argv.version) {\n    console.log('budo v' + require('./package.json').version)\n    console.log('browserify v' + require('browserify/package.json').version)\n    console.log('watchify v' + require('watchify-middleware').getWatchifyVersion())\n    return null\n  }\n\n  if (argv.help) {\n    var help = require('path').join(__dirname, 'bin', 'help.txt')\n    require('fs').createReadStream(help)\n      .pipe(process.stdout)\n    return null\n  }\n\n  if (argv.outfile) {\n    console.error(color.yellow('WARNING'), '--outfile has been removed in budo@3.0')\n  }\n\n  if (typeof argv.pushstate === 'string') {\n\n\n    var newEntry = argv.pushstate\n    argv.pushstate = argv.P = true\n    entries.unshift(newEntry)\n    console.error(color.yellow('WARNING'), '\\nAs of budo@10.x, --pushstate should come ' +\n        'after your JS entries.\\nExample:\\n' +\n        '  budo index.js:bundle.js --pushstate')\n  }\n\n  if (typeof argv.port === 'string') {\n    argv.port = parseInt(argv.port, 10)\n  }\n  if (typeof argv.livePort === 'string') {\n    argv.livePort = parseInt(argv.livePort, 10)\n  }\n\n\n  if (typeof argv.live === 'string' && /(true|false)/.test(argv.live)) {\n    argv.live = argv.live === 'true'\n  }\n\n\n  var instance = budo(entries, argv).on('error', exit)\n  var onUpdates = [].concat(argv.onupdate).filter(Boolean)\n  onUpdates.forEach(function (cmd) {\n    instance.on('update', execFunc(cmd))\n  })\n\n  return instance\n}\n\nfunction execFunc (cmd) {\n  return function run () {\n    var p = exec(cmd)\n    p.stderr.pipe(process.stderr)\n    p.stdout.pipe(process.stdout)\n  }\n}\n\nfunction exit (err) {\n  console.log(color.red('ERROR'), err.message)\n  process.exit(1)\n}\n\n'budo/lib/budo.js'\n:var bole = require('bole')\nvar xtend = require('xtend')\nvar once = require('once')\nvar path = require('path')\nvar EventEmitter = require('events').EventEmitter\nvar isMatch = require('micromatch')\nvar openUrl = require('opn')\nvar internalIp = require('internal-ip')\nvar garnish = require('garnish')\n\nvar defaults = require('./parse-args').defaults\nvar getPorts = require('./get-ports')\nvar createServer = require('./server')\nvar createBundler = require('./bundler')\nvar createFileWatch = require('./file-watch')\nvar createReloadServer = require('./reload/server')\nvar mapEntry = require('./map-entry')\n\nvar noop = function () {}\n\nmodule.exports = createBudo\nfunction createBudo (entries, opts) {\n  var log = bole('budo')\n\n\n  if (entries && !Array.isArray(entries) && typeof entries === 'object') {\n    opts = entries\n    entries = []\n  }\n\n\n  opts = xtend({}, defaults, { stream: false }, opts)\n  entries = entries || []\n\n\n  opts.cwd = process.cwd()\n\n\n  if (opts.stream) {\n\n    if (!opts.ndjson) {\n      var pretty = garnish({\n        level: opts.verbose ? 'debug' : 'info',\n        name: 'budo'\n      })\n      pretty.pipe(opts.stream)\n      opts.stream = pretty\n    }\n\n    bole.output({\n      stream: opts.stream,\n      level: 'debug'\n    })\n  }\n\n\n  entries = [].concat(entries).filter(Boolean)\n\n  var entryObjects = entries.map(mapEntry)\n  var entryFiles = entryObjects.map(function (entry) {\n    return entry.from\n  })\n\n  if (opts.serve && typeof opts.serve !== 'string') {\n    throw new TypeError('opts.serve must be a string or undefined')\n  } else if (!opts.serve && entries.length > 0) {\n    opts.serve = entryObjects[0].url\n  }\n\n\n  if (!opts.dir || opts.dir.length === 0) {\n    opts.dir = opts.cwd\n  }\n\n  var emitter = new EventEmitter()\n  var bundler, middleware\n\n  if (entries.length > 0 || (opts.browserify && opts.browserify.entries)) {\n    bundler = createBundler(entryFiles, opts)\n    middleware = bundler.middleware\n\n    bundler.on('log', function (ev) {\n      if (ev.type === 'bundle') {\n        var time = ev.elapsed\n        ev.elapsed = time\n        ev.name = 'browserify'\n        ev.type = undefined\n        ev.colors = {\n          elapsed: time > 1000 ? 'yellow' : 'dim',\n          message: 'dim '\n        }\n        log.info(ev)\n      }\n    })\n\n\n\n    bundler.on('error', function (err) {\n      console.error('Error:', err.message ? err.message : err)\n    })\n    bundler.on('bundle-error', emitter.emit.bind(emitter, 'bundle-error'))\n    bundler.on('update', emitter.emit.bind(emitter, 'update'))\n    bundler.on('pending', emitter.emit.bind(emitter, 'pending'))\n\n    emitter.on('update', function (contents, deps) {\n      if (deps.length > 1) {\n        log.debug({\n          name: 'browserify',\n          message: deps.length + ' files changed'\n        })\n      }\n    })\n  }\n\n  var defaultInternalIp = internalIp.v4.sync()\n  var defaultWatchGlob = opts.watchGlob || '**/*.{html,css}'\n  var server = null\n  var closed = false\n  var started = false\n  var fileWatcher = null\n  var reloader = null\n  var deferredWatch = noop\n  var deferredLive = noop\n\n\n  emitter.close = once(close)\n  emitter.reload = reload\n  emitter.error = errorPopup\n  emitter.live = live\n  emitter.watch = watch\n\n\n  if (opts.live) {\n    var initialLiveOpts = typeof opts.live === 'object' ? opts.live : undefined\n    var initialLiveMatch = typeof opts.live === 'string' ? opts.live : undefined\n    if (initialLiveMatch) {\n      emitter.once('connect', function () {\n        log.info({ message: 'LiveReload filtering filenames with glob:', url: initialLiveMatch })\n        if (entryObjects.length === 0) {\n          log.info({ message: '\\nNOTE: It looks like you are using budo without a JavaScript entry.\\n' +\n            '  This is fine, but if you were trying to bundle the \"' + initialLiveMatch + '\" file,\\n  you should re-arrange' +\n            ' your arguments like so:\\n\\n' +\n            '      budo ' + initialLiveMatch + ' --live' })\n        }\n      })\n    }\n    emitter\n      .watch()\n      .live(initialLiveOpts)\n      .on('watch', function (ev, file) {\n        if (ev !== 'change' && ev !== 'add') {\n          return\n        }\n        defaultFileEvent(file)\n      })\n      .on('pending', function () {\n        defaultFileEvent(opts.serve)\n      })\n  }\n\n\n  createServer(middleware, xtend(opts, { ip: defaultInternalIp }), function (err, serverInstance) {\n    if (err) {\n      emitter.emit('error', err)\n      return\n    }\n\n    server = serverInstance\n\n\n    getPorts(opts, handlePorts)\n  })\n\n  return emitter\n\n  function defaultFileEvent (file) {\n    var filename = path.basename(file)\n    if ((Array.isArray(opts.live) || typeof opts.live === 'string') &&\n        isMatch(filename, opts.live).length === 0) {\n      return\n    }\n    emitter.reload(file)\n  }\n\n  function reload (file) {\n    process.nextTick(emitter.emit.bind(emitter, 'reload', file))\n    if (reloader) {\n      reloader.reload(file)\n    }\n  }\n\n  function errorPopup (message) {\n    if (reloader) {\n      reloader.errorPopup(message)\n    }\n  }\n\n\n  function watch (glob, watchOpt) {\n    if (!started) {\n      deferredWatch = emitter.watch.bind(null, glob, watchOpt)\n    } else {\n\n      if (fileWatcher) fileWatcher.close()\n      glob = glob && glob.length > 0 ? glob : defaultWatchGlob\n      glob = Array.isArray(glob) ? glob : [ glob ]\n      watchOpt = xtend({ poll: opts.poll }, watchOpt)\n\n      fileWatcher = createFileWatch(glob, watchOpt)\n      fileWatcher.on('watch', emitter.emit.bind(emitter, 'watch'))\n    }\n    return emitter\n  }\n\n\n  function live (liveOpts) {\n    if (!started) {\n      deferredLive = emitter.live.bind(null, liveOpts)\n    } else {\n\n      if (reloader) reloader.close()\n\n\n      server.setLiveOptions(xtend(liveOpts))\n\n\n      reloader = createReloadServer(server, opts)\n    }\n    return emitter\n  }\n\n  function getHostAddress (host) {\n\n\n    if (!host) {\n      host = server.address().address\n      if (host === '0.0.0.0') {\n\n\n        host = '::'\n      }\n    }\n    if (host === '::') {\n      host = defaultInternalIp\n    }\n    if (!host) {\n      host = '127.0.0.1'\n    }\n    return host\n  }\n\n  function handlePorts (err, result) {\n    if (closed) return\n    if (err) {\n      emitter.emit('error', err)\n      return\n    }\n\n    opts.port = result.port\n\n\n    server.on('error', function (err) {\n      if (err.code === 'EADDRINUSE') {\n        err.message = 'port ' + opts.port + ' is in use'\n        emitter.emit('error', err)\n      } else {\n        emitter.emit('error', err)\n      }\n    })\n\n\n\n    server.listen(opts.port, opts.host || undefined, connect)\n  }\n\n  function connect () {\n    if (closed) return\n    started = true\n\n\n    opts.host = getHostAddress(opts.host)\n\n    var port = opts.port\n    var protocol = opts.ssl ? 'https' : 'http'\n    var uri = protocol + ':\n\n    log.info({ message: 'Server running at', url: uri, type: 'connect' })\n\n\n    deferredWatch()\n    deferredLive()\n\n\n    emitter.emit('connect', {\n      uri: uri,\n      port: port,\n      host: opts.host,\n      serve: opts.serve,\n      entries: entryFiles,\n      server: server,\n      webSocketServer: reloader ? reloader.webSocketServer : undefined,\n      dir: opts.dir\n    })\n\n\n\n    if (bundler) bundler.bundle()\n\n\n    if (opts.open) {\n      openUrl(uri)\n    }\n  }\n\n  function close () {\n    var next = emitter.emit.bind(emitter, 'exit')\n    if (started) {\n      server.once('close', next)\n    } else {\n      process.nextTick(next)\n    }\n\n    if (started) bole.reset()\n    if (started) server.close()\n    if (reloader) reloader.close()\n    if (bundler) bundler.close()\n    if (fileWatcher) fileWatcher.close()\n    closed = true\n    started = false\n  }\n}\n",
        "gt": [
            "'budo/lib/parse-args.js'",
            "'budo/lib/budo.js'",
            "'budo/index.js'"
        ]
    },
    {
        "files": [
            "'Next-GraphQL-Blog/client/pages/index.js'",
            "'Next-GraphQL-Blog/client/components/FeedList.js'",
            "'Next-GraphQL-Blog/client/components/PostCard.js'"
        ],
        "content": "'Next-GraphQL-Blog/client/pages/index.js'\n:import React, { Component } from 'react'\nimport { Query } from 'react-apollo'\nimport { Transition, animated } from 'react-spring'\n\nimport FeedList from '../components/FeedList'\nimport SearchForm from '../components/SearchForm'\nimport LoadPendingButton from '../components/LoadPendingButton'\nimport FeedLoader from '../components/FeedLoader'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport { NEW_LIKE_SUB, newLikeUpdate } from '../api/subscriptions/newLike'\nimport {\n  NEW_COMMENT_SUB,\n  newCommentUpdate\n} from '../api/subscriptions/newComment'\nimport { NEW_POST_SUB } from '../api/subscriptions/newPost'\n\nimport { POSTS_LIMIT } from '../api/constants'\n\nclass Home extends Component {\n  static async getInitialProps(ctx) {\n    const isFromServer = !!ctx.req\n\n    return {\n      isFromServer\n    }\n  }\n  state = {\n    newPosts: []\n  }\n\n  subscribeToNewLikes = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_LIKE_SUB,\n      updateQuery: (prev, result) => newLikeUpdate(prev, result)\n    })\n\n  subscribeToNewComments = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_COMMENT_SUB,\n      updateQuery: (prev, result) => newCommentUpdate(prev, result)\n    })\n\n  subscribeToNewPosts = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_POST_SUB,\n\n\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev\n\n        const newPost = { ...subscriptionData.data.newPost }\n        newPost.likes = []\n        newPost.comments = []\n\n        this.setState(prevState => {\n          return {\n            newPosts: [newPost, ...prevState.newPosts]\n          }\n        })\n      }\n    })\n\n  fetchMorePosts = (fetchMore, offset) =>\n    fetchMore({\n      variables: { offset },\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prev\n        const newPosts = [\n          ...prev.allPosts.posts,\n          ...fetchMoreResult.allPosts.posts\n        ]\n\n\n\n        const updatedPosts = newPosts.filter(\n          (post, index, self) =>\n            index === self.findIndex(t => t._id === post._id)\n        )\n\n        return {\n          ...prev,\n          allPosts: {\n            __typename: 'PostFeed',\n            count: prev.allPosts.count,\n            posts: updatedPosts\n          }\n        }\n      }\n    })\n\n  loadPendingPosts = () => {\n\n\n\n    const { allPosts } = this.props.client.readQuery({\n      query: ALL_POSTS,\n      variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' }\n    })\n\n    const newPostslength = this.state.newPosts.length\n    allPosts.posts.unshift(...this.state.newPosts)\n\n    this.props.client.writeQuery({\n      query: ALL_POSTS,\n      variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' },\n      data: {\n        allPosts: {\n          __typename: 'PostFeed',\n          count: allPosts.count + newPostslength,\n          posts: [...allPosts.posts]\n        }\n      }\n    })\n    window.scroll(0, 0)\n    this.setState({\n      newPosts: []\n    })\n  }\n\n  render() {\n    return (\n      <Query\n        query={ALL_POSTS}\n        variables={{ sort: '-createdAt', limit: POSTS_LIMIT, offset: 0 }}\n        fetchPolicy=\"cache-and-network\"\n        notifyOnNetworkStatusChange\n      >\n        {({ loading, subscribeToMore, fetchMore, data: { allPosts } }) => {\n          const postLength = allPosts.posts.length\n          const pendingPostLength = this.state.newPosts.length\n          return (\n            <>\n              <Transition\n                from={{ top: '-50px' }}\n                enter={{ top: '50px' }}\n                leave={{ top: '-50px' }}\n              >\n                {!!pendingPostLength &&\n                  (style => (\n                    <LoadPendingButton\n                      style={{ ...style }}\n                      onClick={this.loadPendingPosts}\n                    >\n                      Load {pendingPostLength} new post...\n                    </LoadPendingButton>\n                  ))}\n              </Transition>\n\n              <SearchForm client={this.props.client} />\n\n              <FeedList\n                posts={allPosts.posts}\n                isFromServer={this.props.isFromServer}\n                subscribeToNewLikes={() =>\n                  this.subscribeToNewLikes(subscribeToMore)\n                }\n                subscribeToNewComments={() =>\n                  this.subscribeToNewComments(subscribeToMore)\n                }\n                subscribeToNewPosts={() =>\n                  this.subscribeToNewPosts(subscribeToMore)\n                }\n                hasMorePosts={allPosts.count !== postLength}\n                fetchMore={() => this.fetchMorePosts(fetchMore, postLength)}\n              />\n\n              {loading && <FeedLoader />}\n            </>\n          )\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default Home\n\n'Next-GraphQL-Blog/client/components/FeedList.js'\n:import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport FlipMove from 'react-flip-move'\n\nimport PostCard from './PostCard'\n\nclass FeedList extends Component {\n  componentDidMount() {\n    this.props.subscribeToNewLikes()\n    this.props.subscribeToNewComments()\n    this.props.subscribeToNewPosts()\n  }\n\n  render() {\n    const { posts, fetchMore, hasMorePosts, isFromServer } = this.props\n    return (\n      <Container>\n        <InfiniteScroll\n          dataLength={posts.length}\n          next={fetchMore}\n          hasMore={hasMorePosts}\n          style={{ overflow: 'visible' }}\n        >\n          <FlipMove\n            duration={500}\n            easing=\"ease-in-out\"\n            appearAnimation={isFromServer ? 'none' : 'fade'}\n            enterAnimation=\"accordionHorizontal\"\n            leaveAnimation=\"accordionHorizontal\"\n            typeName=\"ul\"\n            style={{\n              position: 'relative',\n              padding: 0,\n              display: 'flex',\n              flexWrap: 'wrap',\n              justifyContent: 'center'\n            }}\n          >\n            {!!posts.length ? (\n              posts.map((post, index) => (\n                <li key={post._id} style={{ display: 'inline-block' }}>\n                  <PostCard key={post._id} index={index} {...post} />\n                </li>\n              ))\n            ) : (\n              <div>No Posts here... :(</div>\n            )}\n          </FlipMove>\n        </InfiniteScroll>\n      </Container>\n    )\n  }\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1;\n  .ui.card {\n    margin: 15px;\n    width: 310px;\n  }\n  .ui.card:first-child {\n    margin-top: 15px;\n  }\n  .ui.card:last-child {\n    margin-bottom: 15px;\n  }\n`\nexport default FeedList\n\n'Next-GraphQL-Blog/client/components/PostCard.js'\n:import React, { Component } from 'react'\nimport { Card, Icon, Image, Divider } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { Query, Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport { LIKE_POST, likePostOptions } from '../api/mutations/like/likePost'\nimport {\n  DELETE_POST,\n  deletePostOptions\n} from '../api/mutations/post/deletePost'\n\nimport withUser from '../lib/withUser'\nimport parseError from '../lib/parseError'\nimport { showSuccessAlert, showErrorAlert } from '../lib/alerts'\n\nimport CommentList from './CommentList'\n\nclass PostCard extends Component {\n  state = {\n    showComments: false\n  }\n\n  toggleComments = () => {\n    this.setState({\n      showComments: !this.state.showComments\n    })\n  }\n\n  render() {\n    const { showComments } = this.state\n    const {\n      _id,\n      name,\n      content,\n      postedBy,\n      likes,\n      comments,\n      createdAt,\n      image,\n      user\n    } = this.props\n\n    return (\n      <Mutation mutation={LIKE_POST} variables={{ postId: _id }}>\n        {likePost => (\n          <Mutation mutation={DELETE_POST} variables={{ _id: _id }}>\n            {deletePost => (\n              <StyledCard props={{ showComments }}>\n                {user &&\n                  user._id === postedBy._id && (\n                    <RemoveIcon\n                      name=\"remove\"\n                      onClick={() => {\n                        deletePost(deletePostOptions(this.props)).then(() =>\n                          showSuccessAlert('Post was deleted!')\n                        )\n                      }}\n                    />\n                  )}\n\n                <StyledImage\n                  src={image ? image : '/static/blog-placeholder.jpg'}\n                />\n\n                <Card.Content>\n                  <Card.Header style={ellipsisStyle}>{name}</Card.Header>\n                  <Card.Meta style={ellipsisStyle}>\n                    By {postedBy.name}\n                  </Card.Meta>\n                  <Card.Description style={ellipsisStyle}>\n                    {content}\n                  </Card.Description>\n                </Card.Content>\n\n                <BottomSection extra>\n                  <a onClick={this.toggleComments}>\n                    <Icon name=\"comment\" />\n                    {comments.length} Comments\n                  </a>\n                  <a\n                    onClick={() => {\n                      likePost(likePostOptions(this.props))\n                        .then(() => showSuccessAlert('You liked a Post!'))\n                        .catch(e => showErrorAlert(parseError(e.message)))\n                    }}\n                  >\n                    <Icon name=\"like\" />\n                    {likes.length} Likes\n                  </a>\n                </BottomSection>\n\n                {showComments && (\n                  <CommentList comments={comments} postId={_id} />\n                )}\n              </StyledCard>\n            )}\n          </Mutation>\n        )}\n      </Mutation>\n    )\n  }\n}\n\nconst StyledCard = styled(Card)`\n  &&& {\n    height: ${props => (props.props.showComments ? 'auto' : '325px')};\n    box-shadow: 0px 3px 25px 2px #00000014;\n    border-bottom-left-radius: 0px;\n    border-bottom-right-radius: 0px;\n  }\n`\n\nconst BottomSection = styled(Card.Content)`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst RemoveIcon = styled(Icon)`\n  &&& {\n    font-size: 18px;\n    position: absolute;\n    top: 5px;\n    z-index: 9;\n    right: 0;\n    cursor: pointer;\n    transition: 0.2s all ease;\n    &:hover {\n      font-size: 22px;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  &&& {\n    height: 191px;\n    object-fit: cover;\n  }\n`\n\nconst ellipsisStyle = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden'\n}\n\nexport default withUser(PostCard)\n",
        "gt": [
            "'Next-GraphQL-Blog/client/components/PostCard.js'",
            "'Next-GraphQL-Blog/client/components/FeedList.js'",
            "'Next-GraphQL-Blog/client/pages/index.js'"
        ]
    },
    {
        "files": [
            "'react-modal/src/helpers/safeHTMLElement.js'",
            "'react-modal/src/components/Modal.js'",
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/specs/index.js'",
            "'react-modal/src/helpers/ariaAppHider.js'"
        ],
        "content": "'react-modal/src/helpers/safeHTMLElement.js'\n:import ExecutionEnvironment from \"exenv\";\n\nconst EE = ExecutionEnvironment;\n\nconst SafeHTMLElement = EE.canUseDOM ? window.HTMLElement : {};\n\nexport const SafeHTMLCollection = EE.canUseDOM ? window.HTMLCollection : {};\n\nexport const SafeNodeList = EE.canUseDOM ? window.NodeList : {};\n\nexport const canUseDOM = EE.canUseDOM;\n\nexport default SafeHTMLElement;\n\n'react-modal/src/components/Modal.js'\n:import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport ModalPortal from \"./ModalPortal\";\nimport * as ariaAppHider from \"../helpers/ariaAppHider\";\nimport SafeHTMLElement, {\n  SafeNodeList,\n  SafeHTMLCollection,\n  canUseDOM\n} from \"../helpers/safeHTMLElement\";\n\nimport { polyfill } from \"react-lifecycles-compat\";\n\nexport const portalClassName = \"ReactModalPortal\";\nexport const bodyOpenClassName = \"ReactModal__Body--open\";\n\nconst isReact16 = canUseDOM && ReactDOM.createPortal !== undefined;\n\nlet createHTMLElement = name => document.createElement(name);\n\nconst getCreatePortal = () =>\n  isReact16\n    ? ReactDOM.createPortal\n    : ReactDOM.unstable_renderSubtreeIntoContainer;\n\nfunction getParentElement(parentSelector) {\n  return parentSelector();\n}\n\nclass Modal extends Component {\n  static setAppElement(element) {\n    ariaAppHider.setElement(element);\n  }\n\n\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    style: PropTypes.shape({\n      content: PropTypes.object,\n      overlay: PropTypes.object\n    }),\n    portalClassName: PropTypes.string,\n    bodyOpenClassName: PropTypes.string,\n    htmlOpenClassName: PropTypes.string,\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        base: PropTypes.string.isRequired,\n        afterOpen: PropTypes.string.isRequired,\n        beforeClose: PropTypes.string.isRequired\n      })\n    ]),\n    overlayClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        base: PropTypes.string.isRequired,\n        afterOpen: PropTypes.string.isRequired,\n        beforeClose: PropTypes.string.isRequired\n      })\n    ]),\n    appElement: PropTypes.oneOfType([\n      PropTypes.instanceOf(SafeHTMLElement),\n      PropTypes.instanceOf(SafeHTMLCollection),\n      PropTypes.instanceOf(SafeNodeList),\n      PropTypes.arrayOf(PropTypes.instanceOf(SafeHTMLElement))\n    ]),\n    onAfterOpen: PropTypes.func,\n    onRequestClose: PropTypes.func,\n    closeTimeoutMS: PropTypes.number,\n    ariaHideApp: PropTypes.bool,\n    shouldFocusAfterRender: PropTypes.bool,\n    shouldCloseOnOverlayClick: PropTypes.bool,\n    shouldReturnFocusAfterClose: PropTypes.bool,\n    preventScroll: PropTypes.bool,\n    parentSelector: PropTypes.func,\n    aria: PropTypes.object,\n    data: PropTypes.object,\n    role: PropTypes.string,\n    contentLabel: PropTypes.string,\n    shouldCloseOnEsc: PropTypes.bool,\n    overlayRef: PropTypes.func,\n    contentRef: PropTypes.func,\n    id: PropTypes.string,\n    overlayElement: PropTypes.func,\n    contentElement: PropTypes.func\n  };\n\n\n  static defaultProps = {\n    isOpen: false,\n    portalClassName,\n    bodyOpenClassName,\n    role: \"dialog\",\n    ariaHideApp: true,\n    closeTimeoutMS: 0,\n    shouldFocusAfterRender: true,\n    shouldCloseOnEsc: true,\n    shouldCloseOnOverlayClick: true,\n    shouldReturnFocusAfterClose: true,\n    preventScroll: false,\n    parentSelector: () => document.body,\n    overlayElement: (props, contentEl) => <div {...props}>{contentEl}</div>,\n    contentElement: (props, children) => <div {...props}>{children}</div>\n  };\n\n  static defaultStyles = {\n    overlay: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: \"rgba(255, 255, 255, 0.75)\"\n    },\n    content: {\n      position: \"absolute\",\n      top: \"40px\",\n      left: \"40px\",\n      right: \"40px\",\n      bottom: \"40px\",\n      border: \"1px solid #ccc\",\n      background: \"#fff\",\n      overflow: \"auto\",\n      WebkitOverflowScrolling: \"touch\",\n      borderRadius: \"4px\",\n      outline: \"none\",\n      padding: \"20px\"\n    }\n  };\n\n  componentDidMount() {\n    if (!canUseDOM) return;\n\n    if (!isReact16) {\n      this.node = createHTMLElement(\"div\");\n    }\n    this.node.className = this.props.portalClassName;\n\n    const parent = getParentElement(this.props.parentSelector);\n    parent.appendChild(this.node);\n\n    !isReact16 && this.renderPortal(this.props);\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    const prevParent = getParentElement(prevProps.parentSelector);\n    const nextParent = getParentElement(this.props.parentSelector);\n    return { prevParent, nextParent };\n  }\n\n  componentDidUpdate(prevProps, _, snapshot) {\n    if (!canUseDOM) return;\n    const { isOpen, portalClassName } = this.props;\n\n    if (prevProps.portalClassName !== portalClassName) {\n      this.node.className = portalClassName;\n    }\n\n    const { prevParent, nextParent } = snapshot;\n    if (nextParent !== prevParent) {\n      prevParent.removeChild(this.node);\n      nextParent.appendChild(this.node);\n    }\n\n\n    if (!prevProps.isOpen && !isOpen) return;\n\n    !isReact16 && this.renderPortal(this.props);\n  }\n\n  componentWillUnmount() {\n    if (!canUseDOM || !this.node || !this.portal) return;\n\n    const state = this.portal.state;\n    const now = Date.now();\n    const closesAt =\n      state.isOpen &&\n      this.props.closeTimeoutMS &&\n      (state.closesAt || now + this.props.closeTimeoutMS);\n\n    if (closesAt) {\n      if (!state.beforeClose) {\n        this.portal.closeWithTimeout();\n      }\n\n      setTimeout(this.removePortal, closesAt - now);\n    } else {\n      this.removePortal();\n    }\n  }\n\n  removePortal = () => {\n    !isReact16 && ReactDOM.unmountComponentAtNode(this.node);\n    const parent = getParentElement(this.props.parentSelector);\n    if (parent && parent.contains(this.node)) {\n      parent.removeChild(this.node);\n    } else {\n\n      console.warn(\n        'React-Modal: \"parentSelector\" prop did not returned any DOM ' +\n          \"element. Make sure that the parent element is unmounted to \" +\n          \"avoid any memory leaks.\"\n      );\n    }\n  };\n\n  portalRef = ref => {\n    this.portal = ref;\n  };\n\n  renderPortal = props => {\n    const createPortal = getCreatePortal();\n    const portal = createPortal(\n      this,\n      <ModalPortal defaultStyles={Modal.defaultStyles} {...props} />,\n      this.node\n    );\n    this.portalRef(portal);\n  };\n\n  render() {\n    if (!canUseDOM || !isReact16) {\n      return null;\n    }\n\n    if (!this.node && isReact16) {\n      this.node = createHTMLElement(\"div\");\n    }\n\n    const createPortal = getCreatePortal();\n    return createPortal(\n      <ModalPortal\n        ref={this.portalRef}\n        defaultStyles={Modal.defaultStyles}\n        {...this.props}\n      />,\n      this.node\n    );\n  }\n}\n\npolyfill(Modal);\n\nif (process.env.NODE_ENV !== \"production\") {\n  Modal.setCreateHTMLElement = fn => (createHTMLElement = fn);\n}\n\nexport default Modal;\n\n'react-modal/specs/helper.js'\n:import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Modal, { bodyOpenClassName } from \"../src/components/Modal\";\nimport TestUtils from \"react-dom/test-utils\";\nimport { log as classListLog } from \"../src/helpers/classList\";\nimport { log as focusManagerLog } from \"../src/helpers/focusManager\";\nimport { log as ariaAppLog } from \"../src/helpers/ariaAppHider\";\nimport { log as bodyTrapLog } from \"../src/helpers/bodyTrap\";\nimport { log as portalInstancesLog } from \"../src/helpers/portalOpenInstances\";\n\nconst debug = false;\n\nlet i = 0;\n\n\nexport function log(label, spaces) {\n  if (!debug) return;\n\n  console.log(`${label} -----------------`);\n  console.log(document.body.children.length);\n  const logChildren = c => console.log(c.nodeName, c.className, c.id);\n  document.body.children.forEach(logChildren);\n\n  ariaAppLog();\n  bodyTrapLog();\n  classListLog();\n  focusManagerLog();\n  portalInstancesLog();\n\n  console.log(`end ${label} -----------------` + (!spaces ? '' : `\n\n\n`));\n}\n\nlet elementPool = [];\n\n\nexport function createHTMLElement(name) {\n  const e = document.createElement(name);\n  elementPool[elementPool.length - 1].push(e);\n  e.className = `element_pool_${name}-${++i}`;\n  return e;\n}\n\n\nexport function drainPool(pool) {\n  pool.forEach(e => e.parentNode && e.parentNode.removeChild(e));\n}\n\n\nexport function withElementCollector(work) {\n  let r;\n  let poolIndex = elementPool.length;\n  elementPool[poolIndex] = [];\n  try {\n    r = work();\n  } finally {\n    drainPool(elementPool[poolIndex]);\n    elementPool = elementPool.slice(\n      0, poolIndex\n    );\n  }\n  return r;\n}\n\n\nif (!String.prototype.includes) {\n  String.prototype.includes = function(search, start) {\n    if (typeof start !== \"number\") {\n      start = 0;\n    }\n\n    if (start + search.length > this.length) {\n      return false;\n    }\n\n    return this.indexOf(search, start) !== -1;\n  };\n}\n\n\nexport const documentClassList = () => document.body.classList;\n\n\nexport const isDocumentWithReactModalOpenClass = (\n  bodyClass = bodyOpenClassName\n) => document.body.className.includes(bodyClass);\n\n\nexport const htmlClassList = () =>\n  document.getElementsByTagName(\"html\")[0].classList;\n\n\nexport const isHtmlWithReactModalOpenClass = htmlClass =>\n  htmlClassList().contains(htmlClass);\n\n\nexport const findDOMWithClass = TestUtils.findRenderedDOMComponentWithClass;\n\n\nconst getModalAttribute = component => (instance, attr) =>\n  modalComponent(component)(instance).getAttribute(attr);\n\n\nconst modalComponent = component => instance => instance.portal[component];\n\n\nexport const mcontent = modalComponent(\"content\");\n\n\nexport const moverlay = modalComponent(\"overlay\");\n\n\nexport const contentAttribute = getModalAttribute(\"content\");\n\n\nexport const overlayAttribute = getModalAttribute(\"overlay\");\n\nconst Simulate = TestUtils.Simulate;\n\nconst dispatchMockEvent = eventCtor => (key, code) => (element, opts) =>\n  eventCtor(\n    element,\n    Object.assign(\n      {},\n      {\n        key: key,\n        which: code\n      },\n      code,\n      opts\n    )\n  );\n\nconst dispatchMockKeyDownEvent = dispatchMockEvent(Simulate.keyDown);\n\n\nexport const escKeyDown = dispatchMockKeyDownEvent(\"ESC\", { keyCode: 27 });\n\nexport const escKeyDownWithCode = dispatchMockKeyDownEvent(\"ESC\", {\n  code: \"Escape\"\n});\n\nexport const tabKeyDown = dispatchMockKeyDownEvent(\"TAB\", { keyCode: 9 });\n\nexport const tabKeyDownWithCode = dispatchMockKeyDownEvent(\"TAB\", {\n  code: \"Tab\"\n});\n\nexport const clickAt = Simulate.click;\n\nexport const mouseUpAt = Simulate.mouseUp;\n\nexport const mouseDownAt = Simulate.mouseDown;\n\nexport const noop = () => {};\n\n\nexport const withModal = function(props, children, test = noop) {\n  return withElementCollector(() => {\n    const node = createHTMLElement();\n    const modalProps = { ariaHideApp: false, ...props };\n    let modal;\n    try {\n      ReactDOM.render(\n        <Modal ref={m => (modal = m)} {...modalProps}>\n          {children}\n        </Modal>,\n        node\n      );\n      test(modal);\n    } finally {\n      ReactDOM.unmountComponentAtNode(node);\n    }\n  });\n};\n\n'react-modal/specs/Modal.testability.spec.js'\n:\nimport ReactDOM from \"react-dom\";\nimport sinon from \"sinon\";\nimport { withModal } from \"./helper\";\n\nexport default () => {\n  it(\"allows ReactDOM.createPortal to be overridden in real-time\", () => {\n    const createPortalSpy = sinon.spy(ReactDOM, \"createPortal\");\n    const props = { isOpen: true };\n    withModal(props, \"hello\");\n    createPortalSpy.called.should.be.ok();\n    ReactDOM.createPortal.restore();\n  });\n};\n\n'react-modal/specs/index.js'\n:\n\nimport ModalState from \"./Modal.spec\";\nimport ModalEvents from \"./Modal.events.spec\";\nimport ModalStyle from \"./Modal.style.spec\";\nimport ModalHelpers from \"./Modal.helpers.spec\";\nimport ModalTestability from \"./Modal.testability.spec\";\n\ndescribe(\"State\", ModalState);\ndescribe(\"Style\", ModalStyle);\ndescribe(\"Events\", ModalEvents);\ndescribe(\"Helpers\", ModalHelpers);\ndescribe(\"Testability\", ModalTestability);\n\n'react-modal/src/helpers/ariaAppHider.js'\n:import warning from \"warning\";\nimport { canUseDOM } from \"./safeHTMLElement\";\n\nlet globalElement = null;\n\n\n\nexport function resetState() {\n  if (globalElement) {\n    if (globalElement.removeAttribute) {\n      globalElement.removeAttribute(\"aria-hidden\");\n    } else if (globalElement.length != null) {\n      globalElement.forEach(element => element.removeAttribute(\"aria-hidden\"));\n    } else {\n      document\n        .querySelectorAll(globalElement)\n        .forEach(element => element.removeAttribute(\"aria-hidden\"));\n    }\n  }\n  globalElement = null;\n}\n\n\nexport function log() {\n  if (process.env.NODE_ENV !== \"production\") {\n    var check = globalElement || {};\n    console.log(\"ariaAppHider ----------\");\n    console.log(check.nodeName, check.className, check.id);\n    console.log(\"end ariaAppHider ----------\");\n  }\n}\n\n\nexport function assertNodeList(nodeList, selector) {\n  if (!nodeList || !nodeList.length) {\n    throw new Error(\n      `react-modal: No elements were found for selector ${selector}.`\n    );\n  }\n}\n\nexport function setElement(element) {\n  let useElement = element;\n  if (typeof useElement === \"string\" && canUseDOM) {\n    const el = document.querySelectorAll(useElement);\n    assertNodeList(el, useElement);\n    useElement = el;\n  }\n  globalElement = useElement || globalElement;\n  return globalElement;\n}\n\nexport function validateElement(appElement) {\n  const el = appElement || globalElement;\n  if (el) {\n    return Array.isArray(el) ||\n      el instanceof HTMLCollection ||\n      el instanceof NodeList\n      ? el\n      : [el];\n  } else {\n    warning(\n      false,\n      [\n        \"react-modal: App element is not defined.\",\n        \"Please use `Modal.setAppElement(el)` or set `appElement={el}`.\",\n        \"This is needed so screen readers don't see main content\",\n        \"when modal is opened. It is not recommended, but you can opt-out\",\n        \"by setting `ariaHideApp={false}`.\"\n      ].join(\" \")\n    );\n\n    return [];\n  }\n}\n\nexport function hide(appElement) {\n  for (let el of validateElement(appElement)) {\n    el.setAttribute(\"aria-hidden\", \"true\");\n  }\n}\n\nexport function show(appElement) {\n  for (let el of validateElement(appElement)) {\n    el.removeAttribute(\"aria-hidden\");\n  }\n}\n\nexport function documentNotReadyOrSSRTesting() {\n  globalElement = null;\n}\n",
        "gt": [
            "'react-modal/src/helpers/safeHTMLElement.js'",
            "'react-modal/src/helpers/ariaAppHider.js'",
            "'react-modal/src/components/Modal.js'",
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/specs/index.js'"
        ]
    },
    {
        "files": [
            "'wifi-card/src/components/Settings.js'",
            "'wifi-card/src/index.js'",
            "'wifi-card/src/App.js'"
        ],
        "content": "'wifi-card/src/components/Settings.js'\n:import {\n  Checkbox,\n  Pane,\n  RadioGroup,\n  SelectField,\n  TextInputField,\n} from 'evergreen-ui';\nimport { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport i18n from '../i18n';\nimport { Translations } from '../translations';\nimport './style.css';\n\nexport const Settings = (props) => {\n  const { t } = useTranslation();\n  const encryptionModes = [\n    { label: t('wifi.password.encryption.none'), value: '' },\n    { label: 'WPA/WPA2/WPA3', value: 'WPA' },\n    { label: 'WPA2-EAP', value: 'WPA2-EAP' },\n    { label: 'WEP', value: 'WEP' },\n  ];\n  const eapMethods = [{ label: 'PWD', value: 'PWD' }];\n  const langSelectDefaultValue = () => {\n    const t = Translations.filter((t) => t.id === i18n.language);\n    if (t.length !== 1) {\n      return 'en-US';\n    }\n    return t[0].id;\n  };\n\n  useEffect(() => {\n    if (props.firstLoad.current && window.innerWidth < 500) {\n      props.onFirstLoad();\n      props.onOrientationChange(true);\n    }\n  });\n\n  return (\n    <Pane id=\"settings\" maxWidth={props.settings.portrait ? '350px' : '100%'}>\n      <SelectField\n        width={300}\n        inputHeight={38}\n        label={t('select')}\n        onChange={(e) => props.onLanguageChange(e.target.value)}\n        defaultValue={langSelectDefaultValue()}\n      >\n        {Translations.map((t) => (\n          <option key={t.id} value={t.id}>\n            {t.name}\n          </option>\n        ))}\n      </SelectField>\n\n      <Checkbox\n        label={t('button.rotate')}\n        checked={props.settings.portrait}\n        onChange={() => props.onOrientationChange(!props.settings.portrait)}\n      />\n      <Checkbox\n        label={t('wifi.password.hide')}\n        checked={props.settings.hidePassword}\n        onChange={() =>\n          props.onHidePasswordChange(!props.settings.hidePassword)\n        }\n      />\n      <Checkbox\n        label={t('wifi.name.hiddenSSID')}\n        checked={props.settings.hiddenSSID}\n        onChange={() => props.onHiddenSSIDChange(!props.settings.hiddenSSID)}\n      />\n\n      <Checkbox\n        label={t('cards.tip.hide')}\n        checked={props.settings.hideTip}\n        onChange={() => props.onHideTipChange(!props.settings.hideTip)}\n      />\n      <TextInputField\n        type=\"number\"\n        width={300}\n        label={t('cards.additional')}\n        value={props.settings.additionalCards}\n        onChange={(e) => props.onAdditionalCardsChange(e.target.value)}\n      />\n      <RadioGroup\n        label={t('wifi.password.encryption')}\n        size={16}\n        value={props.settings.encryptionMode}\n        options={encryptionModes}\n        onChange={(e) => props.onEncryptionModeChange(e.target.value)}\n      />\n      <RadioGroup\n        label={t('wifi.encryption.eapMethod')}\n        size={16}\n        value={props.settings.eapMethod}\n        options={eapMethods}\n        className={`\n          ${props.settings.encryptionMode !== 'WPA2-EAP' && 'hidden'}\n        `}\n        onChange={(e) => props.onEapMethodChange(e.target.value)}\n      />\n    </Pane>\n  );\n};\n\n'wifi-card/src/index.js'\n:import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n'wifi-card/src/App.js'\n:import { Button, Heading, Link, Pane, Paragraph } from 'evergreen-ui';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport logo from '../src/images/wifi.png';\nimport { Settings } from './components/Settings';\nimport { WifiCard } from './components/WifiCard';\nimport './style.css';\nimport { Translations } from './translations';\n\nfunction App() {\n  const html = document.querySelector('html');\n  const { t, i18n } = useTranslation();\n  const firstLoad = useRef(true);\n  const [settings, setSettings] = useState({\n\n    ssid: '',\n\n    password: '',\n\n    encryptionMode: 'WPA',\n\n    eapMethod: 'PWD',\n\n    eapIdentity: '',\n\n    hidePassword: false,\n\n    hiddenSSID: false,\n\n    portrait: false,\n\n    additionalCards: 0,\n\n    hideTip: false,\n  });\n  const [errors, setErrors] = useState({\n    ssidError: '',\n    passwordError: '',\n    eapIdentityError: '',\n  });\n\n  const htmlDirection = (languageID) => {\n    languageID = languageID || i18n.language;\n    const rtl = Translations.filter((t) => t.id === languageID)[0]?.rtl;\n    return rtl ? 'rtl' : 'ltr';\n  };\n\n  const onChangeLanguage = (language) => {\n    html.style.direction = htmlDirection(language);\n    i18n.changeLanguage(language);\n  };\n\n  const onPrint = () => {\n    if (!settings.ssid.length) {\n      setErrors({\n        ...errors,\n        ssidError: t('wifi.alert.name'),\n      });\n      return;\n    }\n    if (settings.password.length < 8 && settings.encryptionMode === 'WPA') {\n      setErrors({\n        ...errors,\n        passwordError: t('wifi.alert.password.length.8'),\n      });\n      return;\n    }\n    if (settings.password.length < 5 && settings.encryptionMode === 'WEP') {\n      setErrors({\n        ...errors,\n        passwordError: t('wifi.alert.password.length.5'),\n      });\n      return;\n    }\n    if (\n      settings.password.length < 1 &&\n      settings.encryptionMode === 'WPA2-EAP'\n    ) {\n      setErrors({\n        ...errors,\n        passwordError: t('wifi.alert.password'),\n      });\n      return;\n    }\n    if (\n      settings.eapIdentity.length < 1 &&\n      settings.encryptionMode === 'WPA2-EAP'\n    ) {\n      setErrors({\n        ...errors,\n        eapIdentityError: t('wifi.alert.eapIdentity'),\n      });\n      return;\n    }\n    document.title = 'WiFi Card - ' + settings.ssid;\n    window.print();\n  };\n\n  const onSSIDChange = (ssid) => {\n    setErrors({ ...errors, ssidError: '' });\n    setSettings({ ...settings, ssid });\n  };\n  const onPasswordChange = (password) => {\n    setErrors({ ...errors, passwordError: '' });\n    setSettings({ ...settings, password });\n  };\n  const onEncryptionModeChange = (encryptionMode) => {\n    setErrors({ ...errors, passwordError: '' });\n    setSettings({ ...settings, encryptionMode });\n  };\n  const onEapMethodChange = (eapMethod) => {\n    setSettings({ ...settings, eapMethod });\n  };\n  const onEapIdentityChange = (eapIdentity) => {\n    setErrors({ ...errors, eapIdentityError: '' });\n    setSettings({ ...settings, eapIdentity });\n  };\n  const onOrientationChange = (portrait) => {\n    setSettings({ ...settings, portrait });\n  };\n  const onHidePasswordChange = (hidePassword) => {\n    setSettings({ ...settings, hidePassword });\n  };\n  const onHiddenSSIDChange = (hiddenSSID) => {\n    setSettings({ ...settings, hiddenSSID });\n  };\n  const onAdditionalCardsChange = (additionalCardsStr) => {\n    const amount = parseInt(additionalCardsStr);\n    amount >= 0 && setSettings({ ...settings, additionalCards: amount });\n  };\n  const onHideTipChange = (hideTip) => {\n    setSettings({ ...settings, hideTip });\n  };\n  const onFirstLoad = () => {\n    html.style.direction = htmlDirection();\n    firstLoad.current = false;\n  };\n\n  useEffect(() => {\n\n    if (htmlDirection() === 'rtl') {\n      html.style.direction = 'rtl';\n    }\n  });\n\n  return (\n    <Pane>\n      <Pane display=\"flex\">\n        <img alt=\"icon\" src={logo} width=\"32\" height=\"32\" />\n        <Heading size={900} paddingRight={16} paddingLeft={16}>\n          {t('title')}\n        </Heading>\n      </Pane>\n\n      <Pane>\n        <Paragraph marginTop={12}>{t('desc.use')}</Paragraph>\n\n        <Paragraph marginTop={12}>\n          {t('desc.privacy')}{' '}\n          <Link href=\"https:\n            {t('desc.source')}\n          </Link>\n          .\n        </Paragraph>\n      </Pane>\n\n      <Pane>\n        <WifiCard\n          settings={settings}\n          ssidError={errors.ssidError}\n          passwordError={errors.passwordError}\n          eapIdentityError={errors.eapIdentityError}\n          onSSIDChange={onSSIDChange}\n          onEapIdentityChange={onEapIdentityChange}\n          onPasswordChange={onPasswordChange}\n        />\n      </Pane>\n\n      <Settings\n        settings={settings}\n        firstLoad={firstLoad}\n        onFirstLoad={onFirstLoad}\n        onLanguageChange={onChangeLanguage}\n        onEncryptionModeChange={onEncryptionModeChange}\n        onEapMethodChange={onEapMethodChange}\n        onOrientationChange={onOrientationChange}\n        onHidePasswordChange={onHidePasswordChange}\n        onHiddenSSIDChange={onHiddenSSIDChange}\n        onAdditionalCardsChange={onAdditionalCardsChange}\n        onHideTipChange={onHideTipChange}\n      />\n\n      <Button\n        id=\"print\"\n        appearance=\"primary\"\n        height={40}\n        marginRight={16}\n        onClick={onPrint}\n      >\n        {t('button.print')}\n      </Button>\n      <Pane id=\"print-area\">\n        {settings.additionalCards >= 0 &&\n          [...Array(settings.additionalCards + 1)].map((el, idx) => (\n            <WifiCard\n              key={`card-nr-${idx}`}\n              settings={settings}\n              ssidError={errors.ssidError}\n              passwordError={errors.passwordError}\n              eapIdentityError={errors.eapIdentityError}\n              onSSIDChange={onSSIDChange}\n              onEapIdentityChange={onEapIdentityChange}\n              onPasswordChange={onPasswordChange}\n            />\n          ))}\n      </Pane>\n    </Pane>\n  );\n}\n\nexport default App;\n",
        "gt": [
            "'wifi-card/src/components/Settings.js'",
            "'wifi-card/src/App.js'",
            "'wifi-card/src/index.js'"
        ]
    },
    {
        "files": [
            "'Instagram/components/FeedList.js'",
            "'Instagram/components/ItemHeader.js'",
            "'Instagram/components/Item.js'"
        ],
        "content": "'Instagram/components/FeedList.js'\n:import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Animated, FlatList, StyleSheet, View } from 'react-native';\n\nimport { Stories } from '../constants/Posts';\nimport FeedListFooter from './FeedListFooter';\nimport Item from './Item';\nimport StorySlider from './StorySlider';\n\nexport const profileImageSize = 32;\n\nexport default class FeedList extends React.Component {\n  static defaultProps = {\n    ListHeaderComponent: props => <StorySlider stories={Stories} />,\n  };\n\n  _scrollValue = new Animated.Value(0);\n  _scaleValue = new Animated.Value(1);\n  _gesturePosition = new Animated.ValueXY();\n  state = {\n    isDragging: false,\n  };\n\n  static childContextTypes = {\n    gesturePosition: PropTypes.object,\n    getScrollPosition: PropTypes.func,\n    scaleValue: PropTypes.object,\n  };\n\n  state = {\n    isDragging: false,\n  };\n\n  getChildContext() {\n    return {\n      gesturePosition: this._gesturePosition,\n      scaleValue: this._scaleValue,\n      getScrollPosition: () => {\n        return this._scrollValue.__getValue();\n      },\n    };\n  }\n\n  render() {\n    const { onPressFooter, ...props } = this.props;\n\n    let { isDragging, selectedPhoto } = this.state;\n    let onScroll = Animated.event([\n      { nativeEvent: { contentOffset: { y: this._scrollValue } } },\n    ]);\n\n    return (\n      <React.Fragment>\n        <FlatList\n          showsVerticalScrollIndicator={false}\n          style={{ backgroundColor: 'transparent' }}\n          ref={ref => (this.list = ref)}\n          scrollEventThrottle={16}\n          onScroll={onScroll}\n          scrollEnabled={!isDragging}\n          zoomScale={1}\n          bouncesZoom={false}\n          maximumZoomScale={1}\n          minimumZoomScale={1}\n          renderItem={({ item }) => (\n            <Item\n              isLarge={props.isLarge}\n              getParent={() => this.list}\n              isDragging={isDragging}\n              onGestureStart={selectedPhoto => {\n                this.setState({\n                  selectedPhoto,\n                  isDragging: true,\n                });\n              }}\n              onGestureRelease={() => this.setState({ isDragging: false })}\n              item={item}\n            />\n          )}\n          ListFooterComponent={props => (\n            <FeedListFooter {...props} onPress={onPressFooter} />\n          )}\n          keyExtractor={(item, index) => item.key + ' ' + index}\n          {...props}\n        />\n        {isDragging ? (\n          <SelectedPhoto\n            key={selectedPhoto ? selectedPhoto.photoURI : ''}\n            selectedPhoto={selectedPhoto}\n          />\n        ) : null}\n      </React.Fragment>\n    );\n  }\n}\n\nclass SelectedPhoto extends React.Component {\n  state = { isLoaded: false };\n\n  static contextTypes = {\n    gesturePosition: PropTypes.object,\n    scrollValue: PropTypes.object,\n    scaleValue: PropTypes.object,\n  };\n\n  render() {\n    let { selectedPhoto } = this.props;\n    let { isLoaded } = this.state;\n\n    let { gesturePosition, scaleValue } = this.context;\n\n    let animatedStyle = {\n      transform: gesturePosition.getTranslateTransform(),\n    };\n    animatedStyle.transform.push({\n      scale: scaleValue,\n    });\n\n    let imageStyle = [\n      {\n        position: 'absolute',\n        zIndex: 10,\n        width: selectedPhoto.measurement.w,\n        height: selectedPhoto.measurement.h,\n        opacity: isLoaded ? 1 : 0,\n      },\n      animatedStyle,\n    ];\n\n    let backgroundOpacityValue = scaleValue.interpolate({\n      inputRange: [1.0, 1.1, 2.0],\n      outputRange: [0.0, 0.15, 0.75],\n      extrapolate: 'clamp',\n    });\n\n    return (\n      <BodyPortal>\n        <View style={styles.root}>\n          <Animated.View\n            style={[\n              styles.background,\n              {\n                opacity: backgroundOpacityValue,\n              },\n            ]}\n          />\n          <Animated.Image\n            style={imageStyle}\n            onLoad={() => {\n              setTimeout(() => {\n                this.setState({ isLoaded: true });\n              });\n            }}\n            source={selectedPhoto.source}\n          />\n        </View>\n      </BodyPortal>\n    );\n  }\n}\n\nimport ReactDOM from 'react-dom';\n\nexport class BodyPortal extends React.PureComponent {\n  render() {\n    return ReactDOM.createPortal(this.props.children, global.document.body);\n  }\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n  },\n  background: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    backgroundColor: 'black',\n  },\n});\n\n'Instagram/components/ItemHeader.js'\n:import { connectActionSheet } from '@expo/react-native-action-sheet';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nimport InstaHeaderButton from './InstaHeaderButton';\nimport { profileImageSize } from './FeedList';\nimport ProfileImage from './ProfileImage';\n\nclass ItemHeader extends React.Component {\n  render() {\n    const { item } = this.props;\n    const { account, location } = item;\n    return (\n      <View\n        style={{\n          flexDirection: 'row',\n          paddingLeft: 16,\n          paddingRight: 4,\n          paddingVertical: 14,\n          justifyContent: 'space-between',\n          alignItems: 'center',\n        }}\n      >\n        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n          <ProfileImage\n            style={{\n              aspectRatio: 1,\n              minHeight: profileImageSize,\n              height: profileImageSize,\n              backgroundColor: '#d8d8d8',\n              width: profileImageSize,\n              borderRadius: profileImageSize / 2,\n              marginRight: 12,\n              resizeMode: 'cover',\n            }}\n            account={account}\n          />\n          <View>\n            <Text style={{ fontSize: 14, color: '#262626', fontWeight: '600' }}>\n              {account}\n            </Text>\n            <Text style={{ fontSize: 12, color: '#262626' }}>\n              {location || 'Legoland'}\n            </Text>\n          </View>\n        </View>\n        <InstaHeaderButton\n          name=\"more\"\n          size={30}\n          color={'black'}\n          onPress={() => {\n            const options = [\n              'Copy Link',\n              'Turn On Post Notifications',\n              'Report',\n              'Mute',\n              'Unfollow',\n              'Cancel',\n            ];\n\n            const destructiveButtonIndex = options.length - 2;\n            const cancelButtonIndex = options.length - 1;\n\n            this.props.showActionSheetWithOptions(\n              {\n                options,\n                cancelButtonIndex,\n                destructiveButtonIndex,\n\n\n\n\n\n\n\n\n              },\n              buttonIndex => {\n\n\n              },\n            );\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nexport default connectActionSheet(ItemHeader);\n\n'Instagram/components/Item.js'\n:import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Animated,\n  Easing,\n  findNodeHandle,\n  PanResponder,\n  UIManager,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nimport DisableBodyScrollingView from './DisableScrolling';\nimport ItemFooter from './ItemFooter';\nimport ItemHeader from './ItemHeader';\nimport ItemImage from './ItemImage';\n\nexport function pow2abs(a, b) {\n  return Math.pow(Math.abs(a - b), 2);\n}\n\nexport function getDistance(touches) {\n  const [a, b] = touches;\n  if (a == null || b == null) {\n    return 0;\n  }\n  return Math.sqrt(pow2abs(a.pageX, b.pageX) + pow2abs(a.pageY, b.pageY));\n}\n\nexport function getPosition(touches) {\n  const [a, b] = touches;\n  if (a == null || b == null) {\n    return { x: 0, y: 0 };\n  }\n  return { x: a.pageX, y: a.pageY };\n}\n\nexport function getDeltaTranslation(position, initial) {\n  return { x: position.x - initial.x, y: position.y - initial.y };\n}\n\nconst SCALE_MULTIPLIER = 1;\n\nexport function getScale(currentDistance, initialDistance) {\n  return (currentDistance / initialDistance) * SCALE_MULTIPLIER;\n}\n\nexport function measureNode(node, parent) {\n  return new Promise((resolve, reject) => {\n    UIManager.measureLayout(\n      node,\n      parent || (node && node.parentNode),\n      e => reject(e),\n      (x, y, w, h, l, t) => {\n        resolve({ x, y, w, h });\n      },\n    );\n  });\n}\nconst RESTORE_ANIMATION_DURATION = 200;\nclass Item extends React.PureComponent {\n  _opacity = new Animated.Value(1);\n  _initialTouches = [];\n\n  static contextTypes = {\n    gesturePosition: PropTypes.object,\n    scaleValue: PropTypes.object,\n    getScrollPosition: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n    this._generatePanHandlers();\n  }\n\n  _generatePanHandlers = () => {\n    this._gestureHandler = PanResponder.create({\n      onStartShouldSetResponderCapture: () => true,\n      onStartShouldSetPanResponderCapture: ({ nativeEvent }) => {\n        return nativeEvent.touches.length === 2;\n      },\n      onMoveShouldSetResponderCapture: () => true,\n      onMoveShouldSetPanResponderCapture: ({ nativeEvent }) => {\n        return nativeEvent.touches.length === 2;\n      },\n      onPanResponderGrant: this._startGesture,\n      onPanResponderMove: this._onGestureMove,\n      onPanResponderRelease: this._onGestureRelease,\n      onPanResponderTerminationRequest: () => {\n        return this._gestureInProgress == null;\n      },\n      onPanResponderTerminate: (event, gestureState) => {\n        return this._onGestureRelease(event, gestureState);\n      },\n    });\n  };\n\n  _startGesture = async (event, gestureState) => {\n\n    if (this._gestureInProgress) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    this._gestureInProgress = gestureState.stateID;\n    let { item, onGestureStart } = this.props;\n    let { gesturePosition, getScrollPosition } = this.context;\n    let { touches } = event.nativeEvent;\n\n    this._initialTouches = touches;\n\n    let selectedPhotoMeasurement = await this._measureSelectedPhoto();\n    this._selectedPhotoMeasurement = selectedPhotoMeasurement;\n    onGestureStart({\n      source: item.source,\n      measurement: selectedPhotoMeasurement,\n    });\n\n    gesturePosition.setValue({\n      x: 0,\n      y: 0,\n    });\n\n    gesturePosition.setOffset({\n      x: 0,\n      y: selectedPhotoMeasurement.y,\n    });\n\n    Animated.timing(this._opacity, {\n      toValue: 0,\n      duration: 200,\n    }).start();\n  };\n\n  _onGestureMove = (event, gestureState) => {\n    let { touches } = event.nativeEvent;\n    if (!this._gestureInProgress) {\n      return;\n    }\n\n    if (touches.length < 2) {\n\n      this._onGestureRelease(event, gestureState);\n      return;\n    }\n\n\n    let { gesturePosition, scaleValue } = this.context;\n    let { dx, dy } = gestureState;\n    let currentPosition = getPosition(touches);\n    let initialPosition = getPosition(this._initialTouches);\n\n    const { x, y } = getDeltaTranslation(currentPosition, initialPosition);\n    gesturePosition.x.setValue(x);\n    gesturePosition.y.setValue(y);\n\n\n    let currentDistance = getDistance(touches);\n    let initialDistance = getDistance(this._initialTouches);\n    let newScale = getScale(currentDistance, initialDistance);\n    scaleValue.setValue(Math.max(newScale, 1));\n  };\n\n  _onGestureRelease = (event, gestureState) => {\n    if (this._gestureInProgress !== gestureState.stateID) {\n      return;\n    }\n\n\n    this._gestureInProgress = null;\n    this._initialTouches = [];\n    let { onGestureRelease } = this.props;\n    let { gesturePosition, scaleValue, getScrollPosition } = this.context;\n\n    Animated.parallel([\n      Animated.timing(gesturePosition.x, {\n        toValue: 0,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n      Animated.timing(gesturePosition.y, {\n        toValue: 0,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n      Animated.timing(scaleValue, {\n        toValue: 1,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n    ]).start(() => {\n      gesturePosition.setOffset({\n        x: 0,\n        y:\n          (this._selectedPhotoMeasurement &&\n            this._selectedPhotoMeasurement.y) ||\n          0 - getScrollPosition(),\n      });\n\n      this._opacity.setValue(1);\n\n      requestAnimationFrame(() => {\n        onGestureRelease();\n      });\n    });\n  };\n\n  _measureSelectedPhoto = async () => {\n    let parent = findNodeHandle(this._parent);\n    let photoComponent = findNodeHandle(this._photoComponent);\n\n    try {\n      const photoMeasurement = await measureNode(photoComponent, parent);\n      const bodyRect = document.body.getBoundingClientRect();\n      const elemRect = photoComponent.getBoundingClientRect();\n      const offset = elemRect.top + window.scrollY;\n\n      return {\n        x: photoMeasurement.x,\n        y: offset,\n        w: photoMeasurement.w,\n        h: photoMeasurement.h,\n      };\n    } catch (error) {\n      console.log('ERROR', error);\n    }\n    return {};\n  };\n\n  render() {\n    const { imageWidth, imageHeight, item, isLarge } = this.props;\n\n    return (\n      <View\n        style={[\n          { backgroundColor: 'white' },\n          isLarge && {\n            borderColor: '#e6e6e6',\n            borderRadius: 3,\n            borderWidth: StyleSheet.hairlineWidth,\n            marginBottom: 15,\n          },\n        ]}\n        ref={parentNode => (this._parent = parentNode)}\n      >\n        <ItemHeader item={item} />\n        <DisableBodyScrollingView>\n          <Animated.View\n            {...this._gestureHandler.panHandlers}\n            testID=\"webkit-disable-touches\"\n            style={{\n              opacity: this._opacity,\n            }}\n          >\n            <ItemImage\n              ref={node => (this._photoComponent = node)}\n              imageWidth={imageWidth}\n              imageHeight={imageHeight}\n              source={item.source}\n            />\n          </Animated.View>\n        </DisableBodyScrollingView>\n\n        <ItemFooter item={item} />\n      </View>\n    );\n  }\n}\nexport default Item;\n",
        "gt": [
            "'Instagram/components/ItemHeader.js'",
            "'Instagram/components/Item.js'",
            "'Instagram/components/FeedList.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/common/listManager.js'"
        ],
        "content": "'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n\n'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/common/listManager.js'\n:import browser from 'webextension-polyfill'\nimport {\n  SYNCED_LIST_PROPS,\n  END_FRONT,\n  END_BACKGROUND,\n  ADD_LIST,\n  UPDATE_LIST_BY_ID,\n  REMOVE_LIST_BY_ID,\n  CHANGE_LIST_ORDER,\n} from './constants'\nimport {isBackground, sendMessage, Mutex} from './utils'\n\nconst cache = { lists: null, ops: null }\nconst RWLock = new Mutex()\nconst getStorage = async () => {\n  const unlockRW = await RWLock.lock()\n  if (cache.lists && cache.ops) return cache\n  const {lists, ops} = await browser.storage.local.get(['lists', 'ops'])\n  cache.lists = lists || []\n  cache.ops = ops || []\n  await unlockRW()\n  return cache\n}\nconst compressOps = ops => {\n  console.debug('[listManager] compress ops: (before)', ops)\n  const removed = []\n  const updated = {}\n  const finalOps = []\n  for (let i = ops.length - 1; i > -1; i -= 1) {\n    const op = ops[i]\n\n    if (op.args && op.args[0] && removed.includes(op.args[0]._id)\n      || typeof op.args[0] === 'string' && removed.includes(op.args[0])) continue\n\n    if (op.method === 'removeListById') {\n      removed.push(op.args[0])\n      finalOps.unshift(op)\n    } else if (op.method === 'updateListById') {\n\n      const [listId, newList, time] = op.args\n      if (updated[listId]) {\n        for (const key in newList) {\n          if (key in updated[listId]) continue\n          updated[listId][key] = newList[key]\n        }\n        continue\n      } else {\n        updated[listId] = Object.assign({}, newList)\n        finalOps.unshift({method: 'updateListById', args: [listId, updated[listId], time]})\n      }\n    } else if (op.method === 'changeListOrderRelatively') {\n\n      if (i > 0 && ops[i - 1].method === 'changeListOrderRelatively' && op.args[0] === ops[i - 1].args[0]) {\n        ops[i - 1].args[1] += ops[i].args[1]\n      } else finalOps.unshift(op)\n    } else {\n\n      finalOps.unshift(op)\n    }\n  }\n  console.debug('[listManager] compress ops: (after)', finalOps)\n  return finalOps\n}\n\nconst manager = {}\n\nmanager.modifiers = {\n  [ADD_LIST](lists, [list]) {\n    if (~lists.findIndex(i => i._id === list._id)) return\n    lists.unshift(list)\n    return [list]\n  },\n  [UPDATE_LIST_BY_ID](lists, [listId, newList, time = Date.now()]) {\n    const normal = Object.keys(newList).some(k => SYNCED_LIST_PROPS.includes(k))\n    for (let i = 0; i < lists.length; i += 1) {\n      if (lists[i]._id !== listId) continue\n      const list = lists[i]\n      for (const [k, v] of Object.entries(newList)) {\n        list[k] = v\n      }\n      if (normal) list.updatedAt = time\n      return normal ? [listId, newList, time] : null\n    }\n  },\n  [REMOVE_LIST_BY_ID](lists, [listId]) {\n    const index = lists.findIndex(list => list._id === listId)\n    lists.splice(index, 1)\n    return [listId]\n  },\n  [CHANGE_LIST_ORDER](lists, [listId, diff]) {\n    const index = lists.findIndex(list => list._id === listId)\n    const [list] = lists.splice(index, 1)\n    lists.splice(index + diff, 0, list)\n    return [listId, diff]\n  },\n}\n\n\n\nconst saveStorage = async (lists, ops) => {\n  const unlock = await RWLock.lock()\n  const data = {\n    lists,\n    ops: compressOps(ops)\n  }\n  await browser.storage.local.set(data)\n  cache.lists = cache.ops = null\n  await sendMessage({refresh: true})\n  await unlock()\n}\n\nconst _modifyQueue = []\nconst _startModifyWork = (lists, ops) => new Promise(resolve => {\n  while (_modifyQueue.length) {\n    const [method, args] = _modifyQueue.shift()\n    const opArgs = manager.modifiers[method](lists, args)\n    if (opArgs) ops.push({method, args: opArgs, time: Date.now()})\n  }\n  setTimeout(() => {\n    if (_modifyQueue.length) _startModifyWork(lists, ops).then(resolve)\n    else resolve()\n  }, 100)\n})\n\nlet _working = false\nconst applyChangesToStorage = async (method, args) => {\n  _modifyQueue.push([method, args])\n\n  if (_working) return\n  _working = true\n  const {lists, ops} = await getStorage()\n  await _startModifyWork(lists, ops)\n\n  _working = false\n  await saveStorage(lists, ops)\n}\nconst addEventListener = (receiveFrom, callback) => browser.runtime.onMessage.addListener(({listModifed, from}) => {\n  if (receiveFrom !== from || !listModifed) return\n  const {method, args} = listModifed\n  return callback(method, args)\n})\nconst genMethods = isBackground => {\n  Object.keys(manager.modifiers).forEach(method => {\n    manager[method] = isBackground ? async (...args) => {\n      console.debug('[list manager] modify list:', method, ...args)\n      await sendMessage({listModifed: {method, args}, from: END_BACKGROUND})\n\n      applyChangesToStorage(method, args)\n    } : async (...args) => {\n      console.debug('[list manager] call to modify list:', name, ...args)\n      await sendMessage({listModifed: {method, args}, from: END_FRONT})\n    }\n  })\n}\nmanager.init = async () => {\n  if (manager.inited) return\n  manager.inited = true\n  const _isBackground = await isBackground()\n  if (_isBackground) await addEventListener(END_FRONT, applyChangesToStorage)\n  genMethods(_isBackground)\n}\nmanager.mapMutations = () => {\n  const mutations = {}\n  Object.entries(manager.modifiers).forEach(([method, fn]) => {\n    mutations[method] = (state, payload) => fn(state.lists, payload)\n  })\n  mutations.receiveData = (state, {method, args}) => {\n    manager.modifiers[method](state.lists, args)\n  }\n  return mutations\n}\nmanager.createVuexPlugin = () => store => {\n  addEventListener(END_BACKGROUND, (method, args) => {\n    store.commit('receiveData', {method, args})\n  })\n  browser.runtime.onMessage.addListener(({refreshed}) => {\n    if (refreshed && refreshed.success) store.dispatch('getLists')\n  })\n  store.subscribe(({type, payload}) => {\n    if (type in manager.modifiers) {\n      manager[type](...payload)\n    }\n  })\n}\nmanager.RWLock = RWLock\nmanager.isWorking = () => _working\nexport default manager\n",
        "gt": [
            "'better-onetab/src/common/listManager.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'reddit-clone/frontend/src/actions/post.js'",
            "'reddit-clone/frontend/src/axios-config.js'",
            "'reddit-clone/frontend/src/components/CreatePostPage.js'",
            "'reddit-clone/frontend/src/index.js'",
            "'reddit-clone/frontend/src/App.js'",
            "'reddit-clone/frontend/src/store/configureStore.js'"
        ],
        "content": "'reddit-clone/frontend/src/actions/post.js'\n:import axios from '../axios-config';\n\n\n\nexport const setPost = (post) => ({\n\n  type: 'SET_POST',\n\n  post,\n\n});\n\n\n\nexport const editPost = (id, updates) => ({\n\n  type: 'EDIT_POST',\n\n  id,\n\n  updates,\n\n});\n\n\n\nexport const deletePost = (id) => ({\n\n  type: 'DELETE_POST',\n\n  id,\n\n});\n\n\n\nexport const submitPost = (postDetails) => async (dispatch) => {\n\n  const { type, title, body, subreddit } = postDetails;\n\n  try {\n\n    dispatch({ type: 'SUBMIT_POST_REQUEST' });\n\n    const response = await axios.post('/posts', {\n\n      type,\n\n      title,\n\n      body,\n\n      subreddit,\n\n    });\n\n    dispatch({ type: 'SUBMIT_POST_SUCCESS' });\n\n    return response.data;\n\n  } catch (e) {\n\n    dispatch({\n\n      type: 'SUBMIT_POST_FAILURE',\n\n      message: e.message,\n\n      respones: e.response,\n\n    });\n\n  }\n\n};\n\n\n'reddit-clone/frontend/src/axios-config.js'\n:import axios from 'axios';\n\nimport store from './store/configureStore';\n\nimport { tokenSelector } from './selectors';\n\n\n\nconst instance = axios.create({\n\n  baseURL: process.env.REACT_APP_BACKEND_URL,\n\n});\n\n\n\ninstance.interceptors.request.use((config) => {\n\n  const token = tokenSelector(store.getState());\n\n  config.headers.Authorization = token;\n\n  return config;\n\n});\n\n\n\nexport default instance;\n\n\n'reddit-clone/frontend/src/components/CreatePostPage.js'\n:import React from 'react';\n\nimport { connect } from 'react-redux';\n\nimport { withRouter } from 'react-router-dom';\n\nimport {\n\n  Box,\n\n  Stack,\n\n  FormControl,\n\n  FormErrorMessage,\n\n  Input,\n\n  Textarea,\n\n  RadioGroup,\n\n  Radio,\n\n  Select,\n\n  Button,\n\n  Alert,\n\n  AlertIcon,\n\n} from '@chakra-ui/react';\n\nimport {\n\n  createLoadingAndErrorSelector,\n\n  subredditsSelector,\n\n} from '../selectors';\n\nimport { getSubreddits } from '../actions/subreddits';\n\nimport { submitPost } from '../actions/post';\n\n\n\nclass CreatePostPage extends React.Component {\n\n  constructor(props) {\n\n    super(props);\n\n\n\n    this.state = {\n\n      postType: 'text',\n\n      title: '',\n\n      body: '',\n\n      url: '',\n\n      subreddit: '',\n\n    };\n\n  }\n\n\n\n  componentDidMount() {\n\n    const { getSubreddits } = this.props;\n\n    getSubreddits();\n\n  }\n\n\n\n  handleSubmit = async (e) => {\n\n    try {\n\n      e.preventDefault();\n\n      const { postType, title, body, url, subreddit } = this.state;\n\n      const { submitPost, history } = this.props;\n\n      const { id } = await submitPost({\n\n        type: postType,\n\n        title,\n\n        body: postType === 'text' ? body : url,\n\n        subreddit,\n\n      });\n\n      history.push(`/r/${subreddit}/comments/${id}`);\n\n    } catch (err) {}\n\n  };\n\n\n\n  render() {\n\n    const { postType, title, body, url, subreddit } = this.state;\n\n    const {\n\n      srIsLoading,\n\n      srError,\n\n      submitIsLoading,\n\n      submitError,\n\n      subreddits,\n\n    } = this.props;\n\n    return (\n\n      <Box w={['100%', '90%', '80%', '70%']} m=\"auto\">\n\n        {submitError && (\n\n          <Alert status=\"error\" mb={4}>\n\n            <AlertIcon />\n\n            {submitError}\n\n          </Alert>\n\n        )}\n\n        <form onSubmit={this.handleSubmit}>\n\n          <Stack spacing={3}>\n\n            <FormControl>\n\n              <RadioGroup\n\n                value={postType}\n\n                onChange={(postType) => this.setState({ postType })}\n\n              >\n\n                <Stack direction=\"row\" spacing={3}>\n\n                  <Radio value=\"text\">text post</Radio>\n\n                  <Radio value=\"link\">link</Radio>\n\n                </Stack>\n\n              </RadioGroup>\n\n            </FormControl>\n\n            <FormControl>\n\n              <Input\n\n                value={title}\n\n                onChange={(e) => this.setState({ title: e.target.value })}\n\n                type=\"text\"\n\n                variant=\"filled\"\n\n                placeholder=\"title\"\n\n                isRequired\n\n              />\n\n            </FormControl>\n\n            <FormControl>\n\n              {postType === 'text' ? (\n\n                <Textarea\n\n                  value={body}\n\n                  onChange={(e) => this.setState({ body: e.target.value })}\n\n                  variant=\"filled\"\n\n                  placeholder=\"text (optional)\"\n\n                  rows={10}\n\n                />\n\n              ) : (\n\n                <Input\n\n                  value={url}\n\n                  onChange={(e) => this.setState({ url: e.target.value })}\n\n                  type=\"url\"\n\n                  variant=\"filled\"\n\n                  placeholder=\"url\"\n\n                  required\n\n                />\n\n              )}\n\n            </FormControl>\n\n            <FormControl isInvalid={srError}>\n\n              <Select\n\n                value={subreddit}\n\n                onChange={(e) => this.setState({ subreddit: e.target.value })}\n\n                variant=\"filled\"\n\n                placeholder={srIsLoading ? 'loading...' : 'choose a subreddit'}\n\n                isRequired\n\n              >\n\n                {subreddits.map(({ name }) => (\n\n                  <option key={name} value={name}>\n\n                    {name}\n\n                  </option>\n\n                ))}\n\n              </Select>\n\n              <FormErrorMessage>Could not load subreddits</FormErrorMessage>\n\n            </FormControl>\n\n            <Button\n\n              type=\"submit\"\n\n              isLoading={srIsLoading || submitIsLoading || null}\n\n            >\n\n              Submit\n\n            </Button>\n\n          </Stack>\n\n        </form>\n\n      </Box>\n\n    );\n\n  }\n\n}\n\n\n\nconst {\n\n  loadingSelector: srLoadingSelector,\n\n  errorSelector: srErrorSelector,\n\n} = createLoadingAndErrorSelector(['GET_SUBREDDITS']);\n\n\n\nconst {\n\n  loadingSelector: submitLoadingSelector,\n\n  errorSelector: submitErrorSelector,\n\n} = createLoadingAndErrorSelector(['SUBMIT_POST'], false);\n\n\n\nconst mapStateToProps = (state) => ({\n\n  srIsLoading: srLoadingSelector(state),\n\n  srError: srErrorSelector(state),\n\n  submitIsLoading: submitLoadingSelector(state),\n\n  submitError: submitErrorSelector(state),\n\n  subreddits: subredditsSelector(state),\n\n});\n\n\n\nconst mapDispatchToProps = (dispatch) => ({\n\n  getSubreddits: () => dispatch(getSubreddits()),\n\n  submitPost: (postDetails) => dispatch(submitPost(postDetails)),\n\n});\n\n\n\nexport default withRouter(\n\n  connect(mapStateToProps, mapDispatchToProps)(CreatePostPage)\n\n);\n\n\n'reddit-clone/frontend/src/index.js'\n:import { Provider } from 'react-redux';\nimport { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\nimport store from './store/configureStore';\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n      <App />\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\nserviceWorker.unregister();\n\n\n\n\nreportWebVitals();\n\n'reddit-clone/frontend/src/App.js'\n:import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ChakraProvider, Box, Flex } from '@chakra-ui/react';\nimport theme from './theme';\nimport PublicRoute from './components/PublicRoute';\nimport PrivateRoute from './components/PrivateRoute';\nimport Navbar from './components/Navbar';\nimport CommentsPage from './components/CommentsPage';\nimport LoginPage from './components/LoginPage';\nimport RegisterPage from './components/RegisterPage';\nimport CreatePostPage from './components/CreatePostPage';\nimport PostList from './components/PostList';\nimport ThemedBox from './components/ThemedBox';\nimport CreateSubredditPage from './components/CreateSubredditPage';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Router>\n        <ThemedBox minHeight=\"100vh\" light=\"gray.300\" dark=\"gray.800\">\n          <Navbar />\n          <Flex justifyContent=\"center\">\n            <Box width={['95%', '80%', '70%', '60%']} mb={10}>\n              <Switch>\n                <Route path=\"/r/:subreddit/comments/:id\">\n                  <CommentsPage />\n                </Route>\n                <PublicRoute path=\"/login\">\n                  <LoginPage />\n                </PublicRoute>\n                <PublicRoute path=\"/register\">\n                  <RegisterPage />\n                </PublicRoute>\n                <PrivateRoute path=\"/submit\">\n                  <CreatePostPage />\n                </PrivateRoute>\n                <PrivateRoute path=\"/subreddits/create\">\n                  <CreateSubredditPage />\n                </PrivateRoute>\n                <Route path=\"/r/:subreddit\">\n                  <PostList />\n                </Route>\n                <Route path=\"/\">\n                  <PostList />\n                </Route>\n              </Switch>\n            </Box>\n          </Flex>\n        </ThemedBox>\n      </Router>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n\n'reddit-clone/frontend/src/store/configureStore.js'\n:import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\n\nimport thunk from 'redux-thunk';\n\nimport authReducer from '../reducers/auth';\n\nimport loadingReducer from '../reducers/loading';\n\nimport errorReducer from '../reducers/error';\n\nimport postReducer from '../reducers/post';\n\nimport postListReducer from '../reducers/postList';\n\nimport commentsReducer from '../reducers/comments';\n\nimport { saveState } from '../localStorage';\n\nimport subredditsReducer from '../reducers/subreddits';\n\n\n\nconst composeEnhancers =\n\n  (typeof window !== 'undefined' &&\n\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ||\n\n  compose;\n\n\n\nconst configureStore = () => {\n\n  const rootReducer = combineReducers({\n\n    auth: authReducer,\n\n    loading: loadingReducer,\n\n    error: errorReducer,\n\n    post: postReducer,\n\n    postList: postListReducer,\n\n    comments: commentsReducer,\n\n    subreddits: subredditsReducer,\n\n  });\n\n\n\n  const store = createStore(\n\n    rootReducer,\n\n    composeEnhancers(applyMiddleware(thunk))\n\n  );\n\n\n\n  store.subscribe(() => {\n\n    saveState(store.getState().auth, 'authState');\n\n  });\n\n\n\n  return store;\n\n};\n\n\n\nconst store = configureStore();\n\n\n\nexport default store;\n\n",
        "gt": [
            "'reddit-clone/frontend/src/store/configureStore.js'",
            "'reddit-clone/frontend/src/axios-config.js'",
            "'reddit-clone/frontend/src/actions/post.js'",
            "'reddit-clone/frontend/src/components/CreatePostPage.js'",
            "'reddit-clone/frontend/src/App.js'",
            "'reddit-clone/frontend/src/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/utils/context.js'",
            "'ruui/src/components/provider.js'",
            "'ruui/src/store/actions.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/store/appReducer.js'"
        ],
        "content": "'ruui/src/utils/context.js'\n:import React from 'react';\n\nimport appReducer from '../store/appReducer';\nimport { createStore } from './ruuiStore';\n\nexport const ruuiStore = createStore(appReducer);\nexport const RuuiContext = React.createContext(ruuiStore);\n\n'ruui/src/components/provider.js'\n:import React from 'react';\nimport { StyleSheet, View, Text, } from 'react-native';\n\nimport { RuuiContext, ruuiStore, } from '../utils/context';\nimport type { Element, } from '../typeDefinition';\n\ntype Props = {\n\tstore?: Object,\n\tchildren?: Element,\n};\n\nfunction Provider(props: Props) {\n\tconst { children, store, } = props;\n\tconst safeStore = store || ruuiStore;\n\n\treturn <RuuiContext.Provider value={safeStore}>\n\t\t{children}\n\t</RuuiContext.Provider>;\n}\n\nexport default Provider;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\n\t},\n});\n\n'ruui/src/store/actions.js'\n:export const ReduxInit\t\t\t\t\t\t\t\t\t\t\t= '@@redux/INIT';\n\nexport const ResetState\t\t\t\t\t\t\t\t\t\t\t= '@RUUI:RESET-STATE';\nexport const ReduxSync\t\t\t\t\t\t\t\t\t\t\t= '@RUUI:REDUX-SYNC';\nexport const UpdateDimensionInfo\t\t\t\t\t\t= '@RUUI:UPDATE-DIMENSIONS-INFO';\nexport const UpdateNetInfo\t\t\t\t\t\t\t\t\t= '@RUUI:UPDATE-NET-INFO';\nexport const ToggleSelect\t\t\t\t\t\t\t\t\t\t= '@RUUI:TOGGLE-SELECT';\nexport const ToggleModal\t\t\t\t\t\t\t\t\t\t= '@RUUI:TOGGLE-MODAL';\nexport const ToggleDropdown\t\t\t\t\t\t\t\t\t= '@RUUI-TOGGLE-DROPDOWN';\nexport const ToggleLoading\t\t\t\t\t\t\t\t\t= '@RUUI:TOGGLE-LOADING';\nexport const ToggleTooltip\t\t\t\t\t\t\t\t\t= '@RUUI:TOGGLE-TOOLTIP';\nexport const RouterPush\t\t\t\t\t\t\t\t\t\t\t= '@ROUTER:PUSH';\nexport const InsertSnackBar\t\t\t\t\t\t\t\t\t= '@RUUI-INSERT-SNACK-BAR';\nexport const StartDestroySnackBar\t\t\t\t\t\t= '@RUUI-START-DESTROY-SNACK-BAR';\nexport const DestroySnackBar\t\t\t\t\t\t\t\t= '@RUUI-DESTROY-SNACK-BAR';\nexport const RouterReplace\t\t\t\t\t\t\t\t\t= '@ROUTER:REPLACE';\nexport const RouterPop\t\t\t\t\t\t\t\t\t\t\t= '@ROUTER:POP';\nexport const RouterReset\t\t\t\t\t\t\t\t\t\t= '@ROUTER:RESET';\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/store/appReducer.js'\n:import * as Actions from './actions';\nimport { collectionDestroy, collectionInsert, collectionMutate, maxBy, } from '../utils';\n\nconst initialSize = { width: 0, height: 0, };\nconst defaultSelectorConfigs = {\n\tselectText: 'Select',\n\tcancelText: 'Cancel',\n\toptions: [{ title: 'Option 1' }, { title: 'Option 2' }],\n};\n\nexport const initialState = {\n\tcounter: 0,\n\tactiveModals: {\n\t\tdefaultSelector: null,\n\t\tdefaultModal: null,\n\t\tloading: null,\n\t},\n\tactiveDropdown: {\n\t\tactive: false,\n\t\tconfigs: {\n\t\t\ttapToClose: true,\n\t\t},\n\t},\n\ttooltip: {\n\t\tactive: false,\n\t\tconfigs: {}\n\t},\n\tsnackBars: [],\n\tnetInfo: {},\n\tdimensions: { screen: initialSize, window: initialSize },\n};\n\nexport default function (state = initialState, action) {\n\tswitch (action.type) {\n\tcase '@APP:INCREASE-COUNTER':\n\t\treturn { ...state, counter: state.counter + 1 };\n\tcase Actions.ToggleSelect:\n\t\treturn handleToggleSelect(state, action);\n\tcase Actions.ToggleModal:\n\t\treturn handleToggleModal(state, action);\n\tcase Actions.ToggleDropdown:\n\t\treturn handleToggleDropdown(state, action);\n\tcase Actions.ToggleLoading:\n\t\treturn handleToggleLoading(state, action);\n\tcase Actions.ToggleTooltip:\n\t\treturn handleToggleTooltip(state, action);\n\tcase Actions.InsertSnackBar:\n\t\treturn { ...state, snackBars: collectionInsert(state.snackBars, action.configs, true) };\n\tcase Actions.StartDestroySnackBar:\n\t\treturn { ...state, snackBars: collectionMutate(state.snackBars, {\n\t\t\tid: action.configs.id, destroying: true,\n\t\t}) };\n\tcase Actions.DestroySnackBar:\n\t\treturn { ...state, snackBars: collectionDestroy(state.snackBars, action.configs) };\n\tcase Actions.UpdateDimensionInfo:\n\t\treturn { ...state, dimensions: { ...state.dimensions, ...action.info } };\n\tcase Actions.UpdateNetInfo:\n\t\treturn { ...state, netInfo: { ...state.netInfo, ...action.info } };\n\tcase Actions.ResetState:\n\t\treturn { ...initialState, netInfo: state.netInfo, dimensions: state.dimensions };\n\tdefault:\n\t\treturn state;\n\t}\n}\n\n\nfunction handleToggleSelect(state, action) {\n\tconst selectorName = action.configs.id || 'default';\n\tconst isToggleOn = action.flag === true;\n\tconst layerProp = extractLayerDepthProp(state.activeModals, isToggleOn);\n\tconst selectorConfigs = {\n\t\ttype: 'select',\n\t\tactive: action.flag === true,\n\t\tconfigs: action.flag === true ? {\n\t\t\t...defaultSelectorConfigs,\n\t\t\t...layerProp,\n\t\t\t...action.configs\n\t\t} : state.activeModals[`${selectorName}Selector`].configs,\n\t};\n\n\treturn {\n\t\t...state,\n\t\tactiveModals: {\n\t\t\t...state.activeModals,\n\t\t\t[`${selectorName}Selector`]: selectorConfigs,\n\t\t},\n\t};\n}\n\nfunction handleToggleModal(state, action) {\n\tconst modalName = action.configs.id || 'default';\n\tconst currentModal = state.activeModals[modalName] || {};\n\tconst isToggleOn = action.flag === true;\n\tconst layerProp = extractLayerDepthProp(state.activeModals, isToggleOn);\n\tconst modalConfigs = {\n\t\ttype: 'modal',\n\t\tactive: isToggleOn,\n\t\tconfigs: action.flag === true ? {\n\t\t\t...layerProp,\n\t\t\t...action.configs,\n\t\t} : currentModal.configs,\n\t};\n\n\treturn {\n\t\t...state,\n\t\tactiveModals: {\n\t\t\t...state.activeModals,\n\t\t\t[modalName]: modalConfigs,\n\t\t},\n\t};\n}\n\nfunction handleToggleLoading(state, action) {\n\treturn {\n\t\t...state,\n\t\tactiveModals: {\n\t\t\t...state.activeModals,\n\t\t\tloading: action.flag === true ? {\n\t\t\t\ttype: 'loading',\n\t\t\t\tactive: action.flag === true,\n\t\t\t\tconfigs: action.flag ? {\n\t\t\t\t\tzIndex: 9999,\n\t\t\t\t\t...action.configs,\n\t\t\t\t} : {},\n\t\t\t} : null,\n\t\t},\n\t};\n}\n\nfunction handleToggleDropdown(state, action) {\n\tconst dropdownName = action.configs.id || 'default_dropdown';\n\tconst currentDropdown = state.activeModals[dropdownName] || {},\n\t\tisToggleOn = action.flag === true;\n\tif (!isToggleOn) {\n\t\tconst activeModals = { ...state.activeModals };\n\t\tdelete activeModals[dropdownName];\n\t\treturn {\n\t\t\t...state,\n\t\t\tactiveModals,\n\t\t};\n\t}\n\tconst layerProp = extractLayerDepthProp(state.activeModals, isToggleOn);\n\tconst dropdownConfigs = {\n\t\ttype: 'dropdown',\n\t\tactive: isToggleOn,\n\t\tconfigs: action.flag === true ? {\n\t\t\ttapToClose: true,\n\t\t\tshowArrow: action.configs.direction !== 'center',\n\t\t\t...layerProp,\n\t\t\t...action.configs,\n\t\t} : currentDropdown.configs,\n\t};\n\n\treturn {\n\t\t...state,\n\t\tactiveModals: {\n\t\t\t...state.activeModals,\n\t\t\t[dropdownName]: dropdownConfigs,\n\t\t},\n\t};\n}\n\nfunction handleToggleTooltip(state, action) {\n\treturn {\n\t\t...state,\n\t\ttooltip: {\n\t\t\tactive: action.flag === true,\n\t\t\tconfigs: action.flag === true ? action.configs : state.tooltip.configs,\n\t\t},\n\t};\n}\n\nfunction suggestLayerDepth(modalMap) {\n\tconst modalArray = Object.values(modalMap);\n\tconst extractIndex = item => item && item.configs && item.configs.zIndex;\n\tconst indexArray = modalArray.map(extractIndex).filter(item => item >= 0 && item < 9000);\n\treturn maxBy(indexArray) + 1;\n}\n\nfunction extractLayerDepthProp(modalMap, isToggleOn) {\n\tconst nextLayerDepth = suggestLayerDepth(modalMap);\n\treturn isToggleOn ? { zIndex: Number.isNaN(nextLayerDepth) ? 0 : nextLayerDepth } : {};\n}\n",
        "gt": [
            "'ruui/src/store/actions.js'",
            "'ruui/src/store/appReducer.js'",
            "'ruui/src/utils/context.js'",
            "'ruui/src/components/provider.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/utils/context.js'",
            "'ruui/src/components/provider.js'",
            "'ruui/src/store/actions.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/store/appReducer.js'"
        ],
        "content": "'ruui/src/utils/context.js'\n:import React from 'react';\n\nimport appReducer from '../store/appReducer';\nimport { createStore } from './ruuiStore';\n\nexport const ruuiStore = createStore(appReducer);\nexport const RuuiContext = React.createContext(ruuiStore);\n\n'ruui/src/components/provider.js'\n:import React from 'react';\nimport { StyleSheet, View, Text, } from 'react-native';\n\nimport { RuuiContext, ruuiStore, } from '../utils/context';\nimport type { Element, } from '../typeDefinition';\n\ntype Props = {\n\tstore?: Object,\n\tchildren?: Element,\n};\n\nfunction Provider(props: Props) {\n\tconst { children, store, } = props;\n\tconst safeStore = store || ruuiStore;\n\n\treturn <RuuiContext.Provider value={safeStore}>\n\t\t{children}\n\t</RuuiContext.Provider>;\n}\n\nexport default Provider;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\n\t},\n});\n\n'ruui/src/store/actions.js'\n:export const ReduxInit\t\t\t\t\t\t\t\t\t\t\t= '@@redux/INIT';\n\nexport const ResetState\t\t\t\t\t\t\t\t\t\t\t= '@RUUI:RESET-STATE';\nexport const ReduxSync\t\t\t\t\t\t\t\t\t\t\t= '@RUUI:REDUX-SYNC';\nexport const UpdateDimensionInfo\t\t\t\t\t\t= '@RUUI:UPDATE-DIMENSIONS-INFO';\nexport const UpdateNetInfo\t\t\t\t\t\t\t\t\t= '@RUUI:UPDATE-NET-INFO';\nexport const ToggleSelect\t\t\t\t\t\t\t\t\t\t= '@RUUI:TOGGLE-SELECT';\nexport const ToggleModal\t\t\t\t\t\t\t\t\t\t= '@RUUI:TOGGLE-MODAL';\nexport const ToggleDropdown\t\t\t\t\t\t\t\t\t= '@RUUI-TOGGLE-DROPDOWN';\nexport const ToggleLoading\t\t\t\t\t\t\t\t\t= '@RUUI:TOGGLE-LOADING';\nexport const ToggleTooltip\t\t\t\t\t\t\t\t\t= '@RUUI:TOGGLE-TOOLTIP';\nexport const RouterPush\t\t\t\t\t\t\t\t\t\t\t= '@ROUTER:PUSH';\nexport const InsertSnackBar\t\t\t\t\t\t\t\t\t= '@RUUI-INSERT-SNACK-BAR';\nexport const StartDestroySnackBar\t\t\t\t\t\t= '@RUUI-START-DESTROY-SNACK-BAR';\nexport const DestroySnackBar\t\t\t\t\t\t\t\t= '@RUUI-DESTROY-SNACK-BAR';\nexport const RouterReplace\t\t\t\t\t\t\t\t\t= '@ROUTER:REPLACE';\nexport const RouterPop\t\t\t\t\t\t\t\t\t\t\t= '@ROUTER:POP';\nexport const RouterReset\t\t\t\t\t\t\t\t\t\t= '@ROUTER:RESET';\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/store/appReducer.js'\n:import * as Actions from './actions';\nimport { collectionDestroy, collectionInsert, collectionMutate, maxBy, } from '../utils';\n\nconst initialSize = { width: 0, height: 0, };\nconst defaultSelectorConfigs = {\n\tselectText: 'Select',\n\tcancelText: 'Cancel',\n\toptions: [{ title: 'Option 1' }, { title: 'Option 2' }],\n};\n\nexport const initialState = {\n\tcounter: 0,\n\tactiveModals: {\n\t\tdefaultSelector: null,\n\t\tdefaultModal: null,\n\t\tloading: null,\n\t},\n\tactiveDropdown: {\n\t\tactive: false,\n\t\tconfigs: {\n\t\t\ttapToClose: true,\n\t\t},\n\t},\n\ttooltip: {\n\t\tactive: false,\n\t\tconfigs: {}\n\t},\n\tsnackBars: [],\n\tnetInfo: {},\n\tdimensions: { screen: initialSize, window: initialSize },\n};\n\nexport default function (state = initialState, action) {\n\tswitch (action.type) {\n\tcase '@APP:INCREASE-COUNTER':\n\t\treturn { ...state, counter: state.counter + 1 };\n\tcase Actions.ToggleSelect:\n\t\treturn handleToggleSelect(state, action);\n\tcase Actions.ToggleModal:\n\t\treturn handleToggleModal(state, action);\n\tcase Actions.ToggleDropdown:\n\t\treturn handleToggleDropdown(state, action);\n\tcase Actions.ToggleLoading:\n\t\treturn handleToggleLoading(state, action);\n\tcase Actions.ToggleTooltip:\n\t\treturn handleToggleTooltip(state, action);\n\tcase Actions.InsertSnackBar:\n\t\treturn { ...state, snackBars: collectionInsert(state.snackBars, action.configs, true) };\n\tcase Actions.StartDestroySnackBar:\n\t\treturn { ...state, snackBars: collectionMutate(state.snackBars, {\n\t\t\tid: action.configs.id, destroying: true,\n\t\t}) };\n\tcase Actions.DestroySnackBar:\n\t\treturn { ...state, snackBars: collectionDestroy(state.snackBars, action.configs) };\n\tcase Actions.UpdateDimensionInfo:\n\t\treturn { ...state, dimensions: { ...state.dimensions, ...action.info } };\n\tcase Actions.UpdateNetInfo:\n\t\treturn { ...state, netInfo: { ...state.netInfo, ...action.info } };\n\tcase Actions.ResetState:\n\t\treturn { ...initialState, netInfo: state.netInfo, dimensions: state.dimensions };\n\tdefault:\n\t\treturn state;\n\t}\n}\n\n\nfunction handleToggleSelect(state, action) {\n\tconst selectorName = action.configs.id || 'default';\n\tconst isToggleOn = action.flag === true;\n\tconst layerProp = extractLayerDepthProp(state.activeModals, isToggleOn);\n\tconst selectorConfigs = {\n\t\ttype: 'select',\n\t\tactive: action.flag === true,\n\t\tconfigs: action.flag === true ? {\n\t\t\t...defaultSelectorConfigs,\n\t\t\t...layerProp,\n\t\t\t...action.configs\n\t\t} : state.activeModals[`${selectorName}Selector`].configs,\n\t};\n\n\treturn {\n\t\t...state,\n\t\tactiveModals: {\n\t\t\t...state.activeModals,\n\t\t\t[`${selectorName}Selector`]: selectorConfigs,\n\t\t},\n\t};\n}\n\nfunction handleToggleModal(state, action) {\n\tconst modalName = action.configs.id || 'default';\n\tconst currentModal = state.activeModals[modalName] || {};\n\tconst isToggleOn = action.flag === true;\n\tconst layerProp = extractLayerDepthProp(state.activeModals, isToggleOn);\n\tconst modalConfigs = {\n\t\ttype: 'modal',\n\t\tactive: isToggleOn,\n\t\tconfigs: action.flag === true ? {\n\t\t\t...layerProp,\n\t\t\t...action.configs,\n\t\t} : currentModal.configs,\n\t};\n\n\treturn {\n\t\t...state,\n\t\tactiveModals: {\n\t\t\t...state.activeModals,\n\t\t\t[modalName]: modalConfigs,\n\t\t},\n\t};\n}\n\nfunction handleToggleLoading(state, action) {\n\treturn {\n\t\t...state,\n\t\tactiveModals: {\n\t\t\t...state.activeModals,\n\t\t\tloading: action.flag === true ? {\n\t\t\t\ttype: 'loading',\n\t\t\t\tactive: action.flag === true,\n\t\t\t\tconfigs: action.flag ? {\n\t\t\t\t\tzIndex: 9999,\n\t\t\t\t\t...action.configs,\n\t\t\t\t} : {},\n\t\t\t} : null,\n\t\t},\n\t};\n}\n\nfunction handleToggleDropdown(state, action) {\n\tconst dropdownName = action.configs.id || 'default_dropdown';\n\tconst currentDropdown = state.activeModals[dropdownName] || {},\n\t\tisToggleOn = action.flag === true;\n\tif (!isToggleOn) {\n\t\tconst activeModals = { ...state.activeModals };\n\t\tdelete activeModals[dropdownName];\n\t\treturn {\n\t\t\t...state,\n\t\t\tactiveModals,\n\t\t};\n\t}\n\tconst layerProp = extractLayerDepthProp(state.activeModals, isToggleOn);\n\tconst dropdownConfigs = {\n\t\ttype: 'dropdown',\n\t\tactive: isToggleOn,\n\t\tconfigs: action.flag === true ? {\n\t\t\ttapToClose: true,\n\t\t\tshowArrow: action.configs.direction !== 'center',\n\t\t\t...layerProp,\n\t\t\t...action.configs,\n\t\t} : currentDropdown.configs,\n\t};\n\n\treturn {\n\t\t...state,\n\t\tactiveModals: {\n\t\t\t...state.activeModals,\n\t\t\t[dropdownName]: dropdownConfigs,\n\t\t},\n\t};\n}\n\nfunction handleToggleTooltip(state, action) {\n\treturn {\n\t\t...state,\n\t\ttooltip: {\n\t\t\tactive: action.flag === true,\n\t\t\tconfigs: action.flag === true ? action.configs : state.tooltip.configs,\n\t\t},\n\t};\n}\n\nfunction suggestLayerDepth(modalMap) {\n\tconst modalArray = Object.values(modalMap);\n\tconst extractIndex = item => item && item.configs && item.configs.zIndex;\n\tconst indexArray = modalArray.map(extractIndex).filter(item => item >= 0 && item < 9000);\n\treturn maxBy(indexArray) + 1;\n}\n\nfunction extractLayerDepthProp(modalMap, isToggleOn) {\n\tconst nextLayerDepth = suggestLayerDepth(modalMap);\n\treturn isToggleOn ? { zIndex: Number.isNaN(nextLayerDepth) ? 0 : nextLayerDepth } : {};\n}\n",
        "gt": [
            "'ruui/src/store/actions.js'",
            "'ruui/src/store/appReducer.js'",
            "'ruui/src/utils/context.js'",
            "'ruui/src/components/provider.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/index.js'"
        ],
        "content": "'ruui/src/utils/helpers.js'\n:import { Dimensions } from 'react-native';\nimport type { SnappingDirection } from '../typeDefinition';\n\nexport function debounce(fn, duration) {\n\tlet timeout;\n\treturn function () {\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = null;\n\t\t\tfn.apply(this, arguments);\n\t\t}, duration);\n\t};\n}\n\nexport function uuid() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t\tconst r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\nexport function instantInterval(\n\tfunc: Function,\n\tinterval: Number,\n\ttrigger: Boolean = true,\n) {\n\tif (trigger) func.call(this);\n\treturn setInterval(func, interval);\n}\n\nexport function minGuard(value: Number, gap: Number = 0) {\n\treturn value < gap ? gap : value;\n}\n\nexport function maxGuard(value: Number, gap: Number) {\n\treturn value > gap ? gap : value;\n}\n\nconst defaultIteratee = item => item;\n\nexport function maxBy(array, iteratee = defaultIteratee) {\n\tlet result;\n\tif (array == null) return result;\n\n\tlet computed;\n\tfor (const value of array) {\n\t\tconst current = iteratee(value);\n\n\t\tif (current != null && (computed === undefined ? current === current : current > computed)) {\n\t\t\tcomputed = current;\n\t\t\tresult = value;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function clamp(value: Number, min: Number, max: Number) {\n\treturn min < max\n\t\t? (value < min ? min : value > max ? max : value)\n\t\t: (value < max ? max : value > min ? min : value);\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n\tif (x === y) {\n\t\treturn x !== 0 || y !== 0 || 1 / x === 1 / y;\n\t} else {\n\t\treturn x !== x && y !== y;\n\t}\n}\n\nexport function shallowEqual(objA, objB) {\n\tif (is(objA, objB)) return true;\n\n\tif (typeof objA !== 'object' || objA === null\n\t\t|| typeof objB !== 'object' || objB === null) {\n\t\treturn false;\n\t}\n\n\tconst keysA = Object.keys(objA);\n\tconst keysB = Object.keys(objB);\n\n\tif (keysA.length !== keysB.length) return false;\n\n\tfor (let i = 0; i < keysA.length; i += 1) {\n\t\tif (!hasOwn.call(objB, keysA[i])\n\t\t\t|| !is(objA[keysA[i]], objB[keysA[i]])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function valueAt(root = {}, path, defaultValue) {\n\tlet currentLevel = root;\n\tconst paths = path.split('.');\n\n\tfor (let i = 0; i < paths.length; i += 1) {\n\t\tif (i === paths.length - 1) {\n\t\t\treturn currentLevel[paths[i]] || defaultValue;\n\t\t} else {\n\t\t\tcurrentLevel = currentLevel[paths[i]];\n\t\t\tif (!currentLevel) return defaultValue;\n\t\t}\n\t}\n\n\treturn defaultValue;\n}\n\nfunction rawDirectionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n) {\n\tswitch (position) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tdefault:\n\t\treturn { top: 0, left: 0 };\n\t}\n}\n\n\nfunction screenGuard(position, componentSize, screenPadding = 5, moddedScreenSize = {}) {\n\tconst screenSize = { ...Dimensions.get('window'), ...moddedScreenSize },\n\t\t{ top, left, } = position;\n\tlet guardedTop = top, guardedLeft = left;\n\n\tif (top < 5) {\n\t\tguardedTop = 5;\n\t} else if (top + componentSize.height > screenSize.height - screenPadding) {\n\t\tguardedTop = screenSize.height - componentSize.height - screenPadding;\n\t}\n\n\tif (left < 5) {\n\t\tguardedLeft = 5;\n\t} else if (left + componentSize.width > screenSize.width - screenPadding) {\n\t\tguardedLeft = screenSize.width - componentSize.width - screenPadding;\n\t}\n\n\treturn { top: guardedTop, left: guardedLeft, };\n}\n\nexport function directionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n\tscreenSize,\n) {\n\treturn screenGuard(\n\t\trawDirectionSnap(top, left, width1, height1, width2, height2, position, spacing),\n\t\t{ width: width2, height: height2, }, 5, screenSize\n\t);\n}\n\nexport function arrowSnap(width, height, arrowSize, parentPosition: SnappingDirection, padding = 15) {\n\tswitch (parentPosition) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop: padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t\topacity: 0,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tleft: -arrowSize,\n\t\t\ttop: padding,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tdefault:\n\t\treturn {};\n\t}\n}\n\nexport function directionAnimatedConfigs(\n\tdirection, translateDistance, animation, finalBorderRadius = 3\n) {\n\tconst borderRadius = animation.interpolate({\n\t\t\tinputRange: [0, 0.5, 1], outputRange: [50, 15, finalBorderRadius],\n\t\t}),\n\t\topacity = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\textrapolate: 'clamp',\n\t\t});\n\n\tswitch (direction) {\n\tcase 'top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\tborderRadius: { borderRadius, },\n\t\t\ttransform: [],\n\t\t\topacity,\n\t\t};\n\tdefault:\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\t}\n}\n\n'ruui/src/utils/store/appAction.js'\n:import * as Actions from './actions';\nimport { uuid } from '../helpers';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function updateThemeConfigs(configs = {}) {\n\treturn { type: Actions.UpdateThemeConfigs, configs };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}\n'ruui/src/index.js'\n:import * as utilsImport from './utils';\nimport * as actionsImport from './utils/store/actions';\nimport * as appActionImport from './utils/store/appAction';\nimport * as routeActionImport from './utils/store/routeAction';\n\nimport coreConfigs from './configs/core';\nimport appReducer from './store/appReducer';\nimport { createStore } from './utils/ruuiStore';\n\nexport { RuuiContext } from './utils/context';\nexport { ruuiMiddleware, ruuiReducer } from './store';\nexport { connect } from './utils/ruuiStore';\n\nexport function createRuuiStore() {\n\treturn createStore(appReducer);\n}\n\nexport * from './components';\nexport * from './decorators';\nexport * from './utils/store/appReducer';\nexport * from './utils/store/routeReducer';\nexport * from './utils/collection';\n\nexport const utils = utilsImport;\nexport const actions = actionsImport;\nexport const appAction = appActionImport;\nexport const ruuiActions = appActionImport;\nexport const routeActions = routeActionImport;\nexport const routeAction = routeActionImport;\nexport const defaultConfigs = coreConfigs;\n",
        "gt": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/index.js'"
        ]
    },
    {
        "files": [
            "'reddit-clone/frontend/src/components/Navbar.js'",
            "'reddit-clone/frontend/src/App.js'",
            "'reddit-clone/frontend/src/index.js'",
            "'reddit-clone/frontend/src/axios-config.js'",
            "'reddit-clone/frontend/src/actions/auth.js'"
        ],
        "content": "'reddit-clone/frontend/src/components/Navbar.js'\n:import { useEffect } from 'react';\n\nimport { connect } from 'react-redux';\n\nimport { Link, useLocation } from 'react-router-dom';\n\nimport {\n\n  Box,\n\n  Flex,\n\n  Heading,\n\n  Spacer,\n\n  HStack,\n\n  Button,\n\n  Menu,\n\n  MenuButton,\n\n  MenuList,\n\n  MenuItem,\n\n  MenuDivider,\n\n  Alert,\n\n  AlertIcon,\n\n  CircularProgress,\n\n} from '@chakra-ui/react';\n\nimport { ChevronDownIcon } from '@chakra-ui/icons';\n\nimport { ColorModeSwitcher } from '../ColorModeSwitcher';\n\nimport ThemedBox from './ThemedBox';\n\nimport {\n\n  userSelector,\n\n  subredditsSelector,\n\n  createLoadingAndErrorSelector,\n\n} from '../selectors';\n\nimport { startLogout } from '../actions/auth';\n\nimport { getSubreddits } from '../actions/subreddits';\n\nimport LoginAndRegisterButtons from './LoginAndRegisterButtons';\n\n\n\nconst Navbar = ({\n\n  user,\n\n  subreddits,\n\n  isLoading,\n\n  error,\n\n  startLogout,\n\n  getSubreddits,\n\n}) => {\n\n  const location = useLocation();\n\n  const subredditName = location.pathname.match(/r\\/[^\\/]+/);\n\n\n\n  useEffect(() => {\n\n    getSubreddits();\n\n  }, []);\n\n\n\n  return (\n\n    <ThemedBox\n\n      py={2}\n\n      px={[0, 0, 10, 10]}\n\n      display=\"flex\"\n\n      justifyContent=\"flex-start\"\n\n      alignItems=\"center\"\n\n      mb={7}\n\n    >\n\n      <Heading\n\n        ml={[2, 4]}\n\n        display={user ? 'block' : ['none', 'block']}\n\n        fontSize={['1.3rem', '2.25rem']}\n\n      >\n\n        weddit\n\n      </Heading>\n\n      <HStack>\n\n        <Menu>\n\n          <MenuButton mx={2} as={Button} rightIcon={<ChevronDownIcon />}>\n\n            {subredditName || 'Home'}\n\n          </MenuButton>\n\n          <MenuList>\n\n            <MenuItem as={Link} to=\"/\">\n\n              Home\n\n            </MenuItem>\n\n            <MenuDivider />\n\n            {subreddits.map(({ name }) => (\n\n              <MenuItem\n\n                key={name}\n\n                as={Link}\n\n                to={`/r/${name}`}\n\n              >{`r/${name}`}</MenuItem>\n\n            ))}\n\n            {error && (\n\n              <Alert status=\"error\">\n\n                <AlertIcon />\n\n                Error fetching subreddits\n\n              </Alert>\n\n            )}\n\n            {isLoading && (\n\n              <Flex justifyContent=\"center\">\n\n                <CircularProgress isIndeterminate />\n\n              </Flex>\n\n            )}\n\n          </MenuList>\n\n        </Menu>\n\n        {user && (\n\n          <Button display={['none', 'flex']} as={Link} to=\"/submit\">\n\n            Submit\n\n          </Button>\n\n        )}\n\n      </HStack>\n\n      <Spacer />\n\n\n\n      {user ? (\n\n        <Menu>\n\n          <MenuButton as={Button} rightIcon={<ChevronDownIcon />}>\n\n            {user.username}\n\n          </MenuButton>\n\n          <MenuList>\n\n            <MenuItem display={['block', 'none']} as={Link} to=\"/submit\">\n\n              Submit post\n\n            </MenuItem>\n\n            <MenuItem as={Link} to=\"/subreddits/create\">\n\n              Create subreddit\n\n            </MenuItem>\n\n            <MenuItem\n\n              onClick={async () => {\n\n                await startLogout();\n\n              }}\n\n            >\n\n              Logout\n\n            </MenuItem>\n\n          </MenuList>\n\n        </Menu>\n\n      ) : (\n\n        <LoginAndRegisterButtons />\n\n      )}\n\n      <ColorModeSwitcher />\n\n    </ThemedBox>\n\n  );\n\n};\n\n\n\nconst { loadingSelector, errorSelector } = createLoadingAndErrorSelector([\n\n  'GET_SUBREDDITS',\n\n]);\n\n\n\nconst mapStateToProps = (state) => ({\n\n  isLoading: loadingSelector(state),\n\n  error: errorSelector(state),\n\n  subreddits: subredditsSelector(state),\n\n  user: userSelector(state),\n\n});\n\n\n\nconst mapDispatchToProps = (dispatch) => ({\n\n  startLogout: () => dispatch(startLogout()),\n\n  getSubreddits: () => dispatch(getSubreddits()),\n\n});\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navbar);\n\n\n'reddit-clone/frontend/src/App.js'\n:import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { ChakraProvider, Box, Flex } from '@chakra-ui/react';\nimport theme from './theme';\nimport PublicRoute from './components/PublicRoute';\nimport PrivateRoute from './components/PrivateRoute';\nimport Navbar from './components/Navbar';\nimport CommentsPage from './components/CommentsPage';\nimport LoginPage from './components/LoginPage';\nimport RegisterPage from './components/RegisterPage';\nimport CreatePostPage from './components/CreatePostPage';\nimport PostList from './components/PostList';\nimport ThemedBox from './components/ThemedBox';\nimport CreateSubredditPage from './components/CreateSubredditPage';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Router>\n        <ThemedBox minHeight=\"100vh\" light=\"gray.300\" dark=\"gray.800\">\n          <Navbar />\n          <Flex justifyContent=\"center\">\n            <Box width={['95%', '80%', '70%', '60%']} mb={10}>\n              <Switch>\n                <Route path=\"/r/:subreddit/comments/:id\">\n                  <CommentsPage />\n                </Route>\n                <PublicRoute path=\"/login\">\n                  <LoginPage />\n                </PublicRoute>\n                <PublicRoute path=\"/register\">\n                  <RegisterPage />\n                </PublicRoute>\n                <PrivateRoute path=\"/submit\">\n                  <CreatePostPage />\n                </PrivateRoute>\n                <PrivateRoute path=\"/subreddits/create\">\n                  <CreateSubredditPage />\n                </PrivateRoute>\n                <Route path=\"/r/:subreddit\">\n                  <PostList />\n                </Route>\n                <Route path=\"/\">\n                  <PostList />\n                </Route>\n              </Switch>\n            </Box>\n          </Flex>\n        </ThemedBox>\n      </Router>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n\n'reddit-clone/frontend/src/index.js'\n:import { Provider } from 'react-redux';\nimport { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport theme from './theme';\nimport store from './store/configureStore';\n\nReactDOM.render(\n  <StrictMode>\n    <Provider store={store}>\n      <ColorModeScript initialColorMode={theme.config.initialColorMode} />\n      <App />\n    </Provider>\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n\nserviceWorker.unregister();\n\n\n\n\nreportWebVitals();\n\n'reddit-clone/frontend/src/axios-config.js'\n:import axios from 'axios';\n\nimport store from './store/configureStore';\n\nimport { tokenSelector } from './selectors';\n\n\n\nconst instance = axios.create({\n\n  baseURL: process.env.REACT_APP_BACKEND_URL,\n\n});\n\n\n\ninstance.interceptors.request.use((config) => {\n\n  const token = tokenSelector(store.getState());\n\n  config.headers.Authorization = token;\n\n  return config;\n\n});\n\n\n\nexport default instance;\n\n\n'reddit-clone/frontend/src/actions/auth.js'\n:import axios from '../axios-config';\n\nimport { editPost } from './post';\n\nimport { setPostList } from './postList';\n\nimport { setComments } from './comments';\n\nimport { commentsSelector, postListSelector } from '../selectors';\n\n\n\nexport const login = (user, token) => ({\n\n  type: 'LOGIN',\n\n  user,\n\n  token,\n\n});\n\n\n\nexport const logout = () => ({ type: 'LOGOUT' });\n\n\n\nexport const startLogin = (username, password) => async (dispatch) => {\n\n  try {\n\n    dispatch({ type: 'LOGIN_REQUEST' });\n\n    const response = await axios.post('/users/login', {\n\n      username,\n\n      password,\n\n    });\n\n    const { user, token } = response.data;\n\n    dispatch(login(user, token));\n\n    dispatch({ type: 'LOGIN_SUCCESS' });\n\n  } catch (e) {\n\n    dispatch({\n\n      type: 'LOGIN_FAILURE',\n\n      message: e.message,\n\n      response: e.response,\n\n    });\n\n  }\n\n};\n\n\n\nexport const startLogout = () => async (dispatch, getState) => {\n\n  try {\n\n    dispatch({ type: 'LOGOUT_REQUEST' });\n\n    await axios.post('/users/logout');\n\n    dispatch(logout());\n\n    dispatch(editPost(1, { has_voted: null }));\n\n    dispatch(\n\n      setPostList(\n\n        postListSelector(getState()).map((post) => ({\n\n          ...post,\n\n          has_voted: null,\n\n        }))\n\n      )\n\n    );\n\n    dispatch(\n\n      setComments(\n\n        commentsSelector(getState()).map((comment) => ({\n\n          ...comment,\n\n          has_voted: null,\n\n        }))\n\n      )\n\n    );\n\n    dispatch({ type: 'LOGOUT_SUCCESS' });\n\n  } catch (e) {\n\n    dispatch({\n\n      type: 'LOGOUT_FAILURE',\n\n      message: e.message,\n\n      response: e.response,\n\n    });\n\n  }\n\n};\n\n\n\nexport const startRegister = (username, password) => async (dispatch) => {\n\n  try {\n\n    dispatch({ type: 'REGISTER_REQUEST' });\n\n    const response = await axios.post('/users', {\n\n      username,\n\n      password,\n\n    });\n\n    const { user, token } = response.data;\n\n    dispatch(login(user, token));\n\n    dispatch({ type: 'REGISTER_SUCCESS' });\n\n  } catch (e) {\n\n    dispatch({\n\n      type: 'REGISTER_FAILURE',\n\n      message: e.message,\n\n      response: e.response,\n\n    });\n\n  }\n\n};\n\n",
        "gt": [
            "'reddit-clone/frontend/src/axios-config.js'",
            "'reddit-clone/frontend/src/actions/auth.js'",
            "'reddit-clone/frontend/src/components/Navbar.js'",
            "'reddit-clone/frontend/src/App.js'",
            "'reddit-clone/frontend/src/index.js'"
        ]
    },
    {
        "files": [
            "'react-native-collapsible-tabview/src/CollapsibleTabView.js'",
            "'react-native-collapsible-tabview/__tests__/App-test.js'",
            "'react-native-collapsible-tabview/App.js'"
        ],
        "content": "'react-native-collapsible-tabview/src/CollapsibleTabView.js'\n:import React, {useState, useEffect, useRef} from 'react';\nimport {\n  SafeAreaView,\n  StyleSheet,\n  View,\n  Text,\n  Dimensions,\n  Animated,\n} from 'react-native';\nimport {TabView, TabBar} from 'react-native-tab-view';\n\nconst TabBarHeight = 48;\nconst HeaderHeight = 300;\nconst tab1ItemSize = (Dimensions.get('window').width - 30) / 2;\nconst tab2ItemSize = (Dimensions.get('window').width - 40) / 3;\n\nconst TabScene = ({\n  numCols,\n  data,\n  renderItem,\n  onGetRef,\n  scrollY,\n  onScrollEndDrag,\n  onMomentumScrollEnd,\n  onMomentumScrollBegin,\n}) => {\n  const windowHeight = Dimensions.get('window').height;\n\n  return (\n    <Animated.FlatList\n      scrollToOverflowEnabled={true}\n      numColumns={numCols}\n      ref={onGetRef}\n      scrollEventThrottle={16}\n      onScroll={Animated.event([{nativeEvent: {contentOffset: {y: scrollY}}}], {\n        useNativeDriver: true,\n      })}\n      onMomentumScrollBegin={onMomentumScrollBegin}\n      onScrollEndDrag={onScrollEndDrag}\n      onMomentumScrollEnd={onMomentumScrollEnd}\n      ItemSeparatorComponent={() => <View style={{height: 10}} />}\n      ListHeaderComponent={() => <View style={{height: 10}} />}\n      contentContainerStyle={{\n        paddingTop: HeaderHeight + TabBarHeight,\n        paddingHorizontal: 10,\n        minHeight: windowHeight - TabBarHeight,\n      }}\n      showsHorizontalScrollIndicator={false}\n      data={data}\n      renderItem={renderItem}\n      showsVerticalScrollIndicator={false}\n      keyExtractor={(item, index) => index.toString()}\n    />\n  );\n};\n\nconst CollapsibleTabView = () => {\n  const [tabIndex, setIndex] = useState(0);\n  const [routes] = useState([\n    {key: 'tab1', title: 'Tab1'},\n    {key: 'tab2', title: 'Tab2'},\n  ]);\n  const [tab1Data] = useState(Array(40).fill(0));\n  const [tab2Data] = useState(Array(30).fill(0));\n  const scrollY = useRef(new Animated.Value(0)).current;\n  let listRefArr = useRef([]);\n  let listOffset = useRef({});\n  let isListGliding = useRef(false);\n\n  useEffect(() => {\n    scrollY.addListener(({value}) => {\n      const curRoute = routes[tabIndex].key;\n      listOffset.current[curRoute] = value;\n    });\n    return () => {\n      scrollY.removeAllListeners();\n    };\n  }, [routes, tabIndex]);\n\n  const syncScrollOffset = () => {\n    const curRouteKey = routes[tabIndex].key;\n    listRefArr.current.forEach((item) => {\n      if (item.key !== curRouteKey) {\n        if (scrollY._value < HeaderHeight && scrollY._value >= 0) {\n          if (item.value) {\n            item.value.scrollToOffset({\n              offset: scrollY._value,\n              animated: false,\n            });\n            listOffset.current[item.key] = scrollY._value;\n          }\n        } else if (scrollY._value >= HeaderHeight) {\n          if (\n            listOffset.current[item.key] < HeaderHeight ||\n            listOffset.current[item.key] == null\n          ) {\n            if (item.value) {\n              item.value.scrollToOffset({\n                offset: HeaderHeight,\n                animated: false,\n              });\n              listOffset.current[item.key] = HeaderHeight;\n            }\n          }\n        }\n      }\n    });\n  };\n\n  const onMomentumScrollBegin = () => {\n    isListGliding.current = true;\n  };\n\n  const onMomentumScrollEnd = () => {\n    isListGliding.current = false;\n    syncScrollOffset();\n  };\n\n  const onScrollEndDrag = () => {\n    syncScrollOffset();\n  };\n\n  const renderHeader = () => {\n    const y = scrollY.interpolate({\n      inputRange: [0, HeaderHeight],\n      outputRange: [0, -HeaderHeight],\n      extrapolateRight: 'clamp',\n    });\n    return (\n      <Animated.View style={[styles.header, {transform: [{translateY: y}]}]}>\n        <Text>{'Header'}</Text>\n      </Animated.View>\n    );\n  };\n\n  const rednerTab1Item = ({item, index}) => {\n    return (\n      <View\n        style={{\n          borderRadius: 16,\n          marginLeft: index % 2 === 0 ? 0 : 10,\n          width: tab1ItemSize,\n          height: tab1ItemSize,\n          backgroundColor: '#aaa',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}>\n        <Text>{index}</Text>\n      </View>\n    );\n  };\n\n  const rednerTab2Item = ({item, index}) => {\n    return (\n      <View\n        style={{\n          marginLeft: index % 3 === 0 ? 0 : 10,\n          borderRadius: 16,\n          width: tab2ItemSize,\n          height: tab2ItemSize,\n          backgroundColor: '#aaa',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}>\n        <Text>{index}</Text>\n      </View>\n    );\n  };\n\n  const renderLabel = ({route, focused}) => {\n    return (\n      <Text style={[styles.label, {opacity: focused ? 1 : 0.5}]}>\n        {route.title}\n      </Text>\n    );\n  };\n\n  const renderScene = ({route}) => {\n    const focused = route.key === routes[tabIndex].key;\n    let numCols;\n    let data;\n    let renderItem;\n    switch (route.key) {\n      case 'tab1':\n        numCols = 2;\n        data = tab1Data;\n        renderItem = rednerTab1Item;\n        break;\n      case 'tab2':\n        numCols = 3;\n        data = tab2Data;\n        renderItem = rednerTab2Item;\n        break;\n      default:\n        return null;\n    }\n    return (\n      <TabScene\n        numCols={numCols}\n        data={data}\n        renderItem={renderItem}\n        scrollY={scrollY}\n        onMomentumScrollBegin={onMomentumScrollBegin}\n        onScrollEndDrag={onScrollEndDrag}\n        onMomentumScrollEnd={onMomentumScrollEnd}\n        onGetRef={(ref) => {\n          if (ref) {\n            const found = listRefArr.current.find((e) => e.key === route.key);\n            if (!found) {\n              listRefArr.current.push({\n                key: route.key,\n                value: ref,\n              });\n            }\n          }\n        }}\n      />\n    );\n  };\n\n  const renderTabBar = (props) => {\n    const y = scrollY.interpolate({\n      inputRange: [0, HeaderHeight],\n      outputRange: [HeaderHeight, 0],\n      extrapolateRight: 'clamp',\n    });\n    return (\n      <Animated.View\n        style={{\n          top: 0,\n          zIndex: 1,\n          position: 'absolute',\n          transform: [{translateY: y}],\n          width: '100%',\n        }}>\n        <TabBar\n          {...props}\n          onTabPress={({route, preventDefault}) => {\n            if (isListGliding.current) {\n              preventDefault();\n            }\n          }}\n          style={styles.tab}\n          renderLabel={renderLabel}\n          indicatorStyle={styles.indicator}\n        />\n      </Animated.View>\n    );\n  };\n\n  const renderTabView = () => {\n    return (\n      <TabView\n        onIndexChange={(index) => setIndex(index)}\n        navigationState={{index: tabIndex, routes}}\n        renderScene={renderScene}\n        renderTabBar={renderTabBar}\n        initialLayout={{\n          height: 0,\n          width: Dimensions.get('window').width,\n        }}\n      />\n    );\n  };\n\n  return (\n    <View style={{flex: 1}}>\n      {renderTabView()}\n      {renderHeader()}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  header: {\n    top: 0,\n    height: HeaderHeight,\n    width: '100%',\n    backgroundColor: '#40C4FF',\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n  },\n  label: {fontSize: 16, color: '#222'},\n  tab: {elevation: 0, shadowOpacity: 0, backgroundColor: '#FFCC80'},\n  indicator: {backgroundColor: '#222'},\n});\n\nexport default CollapsibleTabView;\n\n'react-native-collapsible-tabview/__tests__/App-test.js'\n:\n\nimport 'react-native';\nimport React from 'react';\nimport App from '../App';\n\n\nimport renderer from 'react-test-renderer';\n\nit('renders correctly', () => {\n  renderer.create(<App />);\n});\n\n'react-native-collapsible-tabview/App.js'\n:import React, {useState} from 'react';\nimport {\n  View,\n  SafeAreaView,\n  TouchableOpacity,\n  Text,\n  StyleSheet,\n} from 'react-native';\nimport CollapsibleTabView from './src/CollapsibleTabView';\nimport HeaderScrollableTabView from './src/HeaderScrollableTabView';\nimport PullRefreshTabView from './src/PullRefreshTabView';\n\nconst App = () => {\n  const [mode, setMode] = useState('collapsible');\n\n  const renderDemo = () => {\n    switch (mode) {\n      case 'collapsible':\n        return <CollapsibleTabView />;\n      case 'scrollable':\n        return <HeaderScrollableTabView />;\n      case 'refresh':\n        return <PullRefreshTabView />;\n    }\n  };\n\n  return (\n    <SafeAreaView style={{flex: 1}}>\n      {renderDemo()}\n      <View style={styles.container}>\n        {}\n        <TouchableOpacity\n          onPress={() => setMode('collapsible')}\n          style={{...styles.button}}>\n          <Text\n            style={{\n              textAlign: 'center',\n              color: mode === 'collapsible' ? 'red' : 'black',\n            }}>\n            Collapsible\n          </Text>\n        </TouchableOpacity>\n        {}\n        <TouchableOpacity\n          onPress={() => setMode('scrollable')}\n          style={{...styles.button}}>\n          <Text\n            style={{\n              textAlign: 'center',\n              color: mode === 'scrollable' ? 'red' : 'black',\n            }}>\n            Header Scrollable\n          </Text>\n        </TouchableOpacity>\n        {}\n        <TouchableOpacity\n          onPress={() => setMode('refresh')}\n          style={{...styles.button}}>\n          <Text\n            style={{\n              textAlign: 'center',\n              color: mode === 'refresh' ? 'red' : 'black',\n            }}>\n            pull refresh\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    padding: 16,\n  },\n  button: {\n    flex: 1,\n    height: 48,\n    backgroundColor: '#eee',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 24,\n    paddingHorizontal: 16,\n  },\n});\n\nexport default App;\n",
        "gt": [
            "'react-native-collapsible-tabview/src/CollapsibleTabView.js'",
            "'react-native-collapsible-tabview/App.js'",
            "'react-native-collapsible-tabview/__tests__/App-test.js'"
        ]
    },
    {
        "files": [
            "'neode/src/Collection.js'",
            "'neode/test/__instance.js'",
            "'neode/src/index.js'"
        ],
        "content": "'neode/src/Collection.js'\n:export default class Collection {\n\n\n    constructor(neode, values) {\n        this._neode = neode;\n        this._values = values || [];\n    }\n\n\n    get length() {\n        return this._values.length;\n    }\n\n\n    [Symbol.iterator]() {\n        return this._values.values();\n    }\n\n\n\n    get(index) {\n        return this._values[index];\n    }\n\n\n    first() {\n        return this._values[0];\n    }\n\n\n    map(fn) {\n        return this._values.map(fn);\n    }\n\n\n    find(fn) {\n        return this._values.find(fn);\n    }\n\n\n    forEach(fn) {\n        return this._values.forEach(fn);\n    }\n\n\n    toJson() {\n        return Promise.all(this._values.map(value => {\n            return value.toJson();\n        }));\n    }\n\n}\n\n'neode/test/__instance.js'\n:import Neode from '../src/index';\n\nfunction createInstance() {\n    return Neode.fromEnv();\n}\n\nmodule.exports = createInstance;\n\n\n\n'neode/src/index.js'\n:import fs from 'fs';\nimport path from 'path';\nimport neo4j from 'neo4j-driver';\nimport Factory from './Factory';\nimport Model from './Model';\nimport ModelMap from './ModelMap';\nimport Schema from './Schema';\nimport TransactionError from './TransactionError';\nimport Builder from './Query/Builder';\nimport Collection from './Collection';\n\nexport default class Neode {\n\n\n    constructor(connection_string, username, password, enterprise = false, database = undefined, config = {}) {\n        const auth = username && password ? neo4j.auth.basic(username, password) : null;\n        this.driver = new neo4j.driver(connection_string, auth, config);\n        this.models = new ModelMap(this);\n        this.schema = new Schema(this);\n        this.factory = new Factory(this);\n\n        this.database = database;\n\n        this.setEnterprise(enterprise);\n    }\n\n\n    static fromEnv() {\n        require('dotenv').config();\n\n        const connection_string = `${process.env.NEO4J_PROTOCOL}:\n        const username = process.env.NEO4J_USERNAME;\n        const password = process.env.NEO4J_PASSWORD;\n        const enterprise = process.env.NEO4J_ENTERPRISE === 'true';\n\n\n        const database = process.env.NEO4J_DATABASE || 'neo4j';\n\n\n        const config = {};\n\n        const settings = {\n            NEO4J_ENCRYPTION: 'encrypted',\n            NEO4J_TRUST: 'trust',\n            NEO4J_TRUSTED_CERTIFICATES: 'trustedCertificates',\n            NEO4J_KNOWN_HOSTS: 'knownHosts',\n\n            NEO4J_MAX_CONNECTION_POOLSIZE: 'maxConnectionPoolSize',\n            NEO4J_MAX_TRANSACTION_RETRY_TIME: 'maxTransactionRetryTime',\n            NEO4J_LOAD_BALANCING_STRATEGY: 'loadBalancingStrategy',\n            NEO4J_MAX_CONNECTION_LIFETIME: 'maxConnectionLifetime',\n            NEO4J_CONNECTION_TIMEOUT: 'connectionTimeout',\n            NEO4J_DISABLE_LOSSLESS_INTEGERS: 'disableLosslessIntegers',\n            NEO4J_LOGGING_LEVEL: 'logging',\n        };\n\n        Object.keys(settings).forEach(setting => {\n            if ( process.env.hasOwnProperty(setting) ) {\n                const key = settings[ setting ];\n                let value = process.env[ setting ];\n\n                if ( key == \"trustedCertificates\" ) {\n                    value = value.split(',');\n                }\n                else if ( key == \"disableLosslessIntegers\" ) {\n                    value = value === 'true';\n                }\n\n                config[ key ] = value;\n            }\n        });\n\n        return new Neode(connection_string, username, password, enterprise, database, config);\n    }\n\n\n    with(models) {\n        Object.keys(models).forEach(model => {\n            this.model(model, models[ model ]);\n        });\n\n        return this;\n    }\n\n\n    withDirectory(directory) {\n        const files = fs.readdirSync(directory);\n\n        files.filter(file => path.extname(file).toLowerCase() === '.js')\n            .forEach(file => {\n                const model = file.replace('.js', '');\n                const path = directory +'/'+ file;\n                const schema = require(\"\" + path);\n\n                return this.model(model, schema);\n            });\n\n        return this;\n    }\n\n\n    setDatabase(database) {\n        this.database = database;\n    }\n\n\n    setEnterprise(enterprise) {\n        this._enterprise = enterprise;\n    }\n\n\n    enterprise() {\n        return this._enterprise;\n    }\n\n\n    model(name, schema) {\n        if ( schema instanceof Object) {\n            const model = new Model(this, name, schema);\n            this.models.set(name, model);\n        }\n\n        if ( !this.models.has(name) ) {\n            const defined = this.models.keys();\n\n            let message = `Couldn't find a definition for \"${name}\".`;\n\n            if ( defined.length == 0 ) {\n                message += ' It looks like no models have been defined.';\n            }\n            else {\n                message += ` The models currently defined are [${ defined.join(', ') }]`;\n            }\n\n            throw new Error(message);\n        }\n\n        return this.models.get(name);\n    }\n\n\n    extend(model, as, using) {\n        return this.models.extend(model, as, using);\n    }\n\n\n    create(model, properties) {\n        return this.models.get(model).create(properties);\n    }\n\n\n    merge(model, properties) {\n        return this.model(model).merge(properties);\n    }\n\n\n    mergeOn(model, match, set) {\n        return this.model(model).mergeOn(match, set);\n    }\n\n\n    delete(node) {\n        return node.delete();\n    }\n\n\n    deleteAll(model) {\n        return this.models.get(model).deleteAll();\n    }\n\n\n    relate(from, to, type, properties, force_create = false) {\n        return from.relateTo(to, type, properties, force_create);\n    }\n\n\n    readCypher(query, params) {\n        const session = this.readSession();\n\n        return this.cypher(query, params, session);\n    }\n\n\n    writeCypher(query, params) {\n        const session = this.writeSession();\n\n        return this.cypher(query, params, session);\n    }\n\n\n    cypher(query, params, session = false) {\n\n        const single = !session;\n        if ( single ) {\n            session = this.session();\n        }\n\n        return session.run(query, params)\n            .then(res => {\n                if ( single ) {\n                    session.close();\n                }\n\n                return res;\n            })\n            .catch(err => {\n                if ( single ) {\n                    session.close();\n                }\n\n                err.query = query;\n                err.params = params;\n\n                throw err;\n            });\n    }\n\n\n    session(database = this.database) {\n        return this.readSession(database);\n    }\n\n\n    readSession(database = this.database) {\n        return this.driver.session({\n            database,\n            defaultAccessMode: neo4j.session.READ,\n        });\n    }\n\n\n    writeSession(database = this.database) {\n        return this.driver.session({\n            database,\n            defaultAccessMode: neo4j.session.WRITE,\n        });\n    }\n\n\n    transaction(mode = neo4j.WRITE, database = this.database) {\n        const session = this.driver.session(database);\n        const tx = session.beginTransaction(mode);\n\n\n\n        tx.success = () => {\n            return tx.commit()\n                .then(() => {\n                    session.close();\n                });\n        };\n\n        return tx;\n    }\n\n\n    batch(queries) {\n        const tx = this.transaction();\n        const output = [];\n        const errors = [];\n\n        return Promise.all(queries.map(query => {\n            const params = typeof query == 'object' ? query.params : {};\n            query = typeof query == 'object' ? query.query : query;\n\n            try {\n                return tx.run(query, params)\n                    .then(res => {\n                        output.push(res);\n                    })\n                    .catch(error => {\n                        errors.push({query, params, error});\n                    });\n            }\n            catch (error) {\n                errors.push({query, params, error});\n            }\n        }))\n            .then(() => {\n                if (errors.length) {\n                    tx.rollback();\n\n                    const error = new TransactionError(errors);\n\n                    throw error;\n                }\n\n                return tx.success()\n                    .then(() => {\n                        return output;\n                    });\n            });\n    }\n\n\n    close() {\n        this.driver.close();\n    }\n\n\n    query() {\n        return new Builder(this);\n    }\n\n\n    all(label, properties, order, limit, skip) {\n        return this.models.get(label).all(properties, order, limit, skip);\n    }\n\n\n    find(label, id) {\n        return this.models.get(label).find(id);\n    }\n\n\n    findById(label, id) {\n        return this.models.get(label).findById(id);\n    }\n\n\n    first(label, key, value) {\n        return this.models.get(label).first(key, value);\n    }\n\n\n    hydrate(res, alias, definition) {\n        return this.factory.hydrate(res, alias, definition);\n    }\n\n\n    hydrateFirst(res, alias, definition) {\n        return this.factory.hydrateFirst(res, alias, definition);\n    }\n\n\n    toCollection(array) {\n        return new Collection(this, array);\n    }\n\n}\n\nmodule.exports = Neode;\n",
        "gt": [
            "'neode/src/Collection.js'",
            "'neode/src/index.js'",
            "'neode/test/__instance.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/common/storage.js'",
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/contextMenus.js'",
            "'better-onetab/src/background/messageHandler.js'"
        ],
        "content": "'better-onetab/src/common/storage.js'\n:import _ from 'lodash'\nimport {normalizeList} from '@/common/list'\nimport browser from 'webextension-polyfill'\nimport options from './options'\n\nconst get = key => browser.storage.local.get(key)\n\nconst set = obj => browser.storage.local.set(obj)\n\nconst getLists = () => get('lists')\n  .then(({lists}) => lists || [])\n\nconst setLists = async lists => {\n  if (!Array.isArray(lists)) throw new TypeError(lists)\n  const handledLists = lists.filter(i => Array.isArray(i.tabs)).map(normalizeList)\n  const {opts} = await get('opts')\n  if (opts && opts.removeDuplicate) {\n    handledLists.forEach(list => {\n      list.tabs = _.unionBy(list.tabs, tab => tab.url)\n    })\n  }\n  return set({lists: handledLists})\n}\n\nconst getOptions = () => get('opts')\n  .then(({opts}) => opts)\n\nconst setOptions = opts => set({\n  opts: _.pick(opts, _.keys(options.getDefaultOptions())),\n  optsUpdatedAt: Date.now(),\n})\n\nexport default {\n  getLists,\n  setLists,\n  getOptions,\n  setOptions,\n}\n\n'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n\n'better-onetab/src/background/contextMenus.js'\n:import _ from 'lodash'\nimport __ from '../common/i18n'\nimport tabs from '../common/tabs'\nimport storage from '../common/storage'\nimport browser from 'webextension-polyfill'\n\nconst menus = {\n  SHOW_TAB_LIST: tabs.openTabLists,\n  STORE_SELECTED_TABS: tabs.storeSelectedTabs,\n  STORE: {\n    STORE_ALL_TABS_IN_CURRENT_WINDOW: tabs.storeAllTabs,\n    STORE_ALL_TABS_IN_ALL_WINDOWS: tabs.storeAllTabInAllWindows,\n    STORE_LEFT_TABS: tabs.storeLeftTabs,\n    STORE_RIGHT_TABS: tabs.storeRightTabs,\n    STORE_TWOSIDE_TABS: tabs.storeTwoSideTabs,\n  },\n  STORE_TO_TITLED_LIST: {\n    STORE_SELECTED_TABS: tabs.storeSelectedTabs,\n    STORE_ALL_TABS_IN_CURRENT_WINDOW: tabs.storeAllTabs,\n    STORE_LEFT_TABS: tabs.storeLeftTabs,\n    STORE_RIGHT_TABS: tabs.storeRightTabs,\n    STORE_TWOSIDE_TABS: tabs.storeTwoSideTabs,\n  }\n}\n\nexport const dynamicDisableMenu = async lists => {\n  const groupedTabs = await tabs.groupTabsInCurrentWindow()\n  const windows = await browser.windows.getAll()\n  browser.contextMenus.update('STORE.STORE_LEFT_TABS', {\n    enabled: groupedTabs.left.length !== 0,\n    title: __('menu_STORE_LEFT_TABS') + ` (${groupedTabs.left.length})`,\n  })\n  browser.contextMenus.update('STORE.STORE_RIGHT_TABS', {\n    enabled: groupedTabs.right.length !== 0,\n    title: __('menu_STORE_RIGHT_TABS') + ` (${groupedTabs.right.length})`,\n  })\n  browser.contextMenus.update('STORE.STORE_TWOSIDE_TABS', {\n    enabled: groupedTabs.twoSide.length !== 0,\n    title: __('menu_STORE_TWOSIDE_TABS') + ` (${groupedTabs.twoSide.length})`,\n  })\n  browser.contextMenus.update('STORE.STORE_ALL_TABS_IN_ALL_WINDOWS', {\n    enabled: windows.length > 1,\n  })\n  browser.contextMenus.update('STORE.STORE_ALL_TABS_IN_CURRENT_WINDOW', {\n    title: __('menu_STORE_ALL_TABS_IN_CURRENT_WINDOW') + ` (${groupedTabs.all.length})`,\n  })\n  browser.contextMenus.update('STORE_SELECTED_TABS', {\n    title: __('menu_STORE_SELECTED_TABS') + ` (${groupedTabs.inter.length})`,\n  })\n  lists = lists || await storage.getLists()\n  for (let i = 0; i < lists.length; i += 1) {\n    if (!lists[i].title) continue\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_LEFT_TABS|' + i, {\n      enabled: groupedTabs.left.length !== 0,\n      title: __('menu_STORE_LEFT_TABS') + ` (${groupedTabs.left.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_RIGHT_TABS|' + i, {\n      enabled: groupedTabs.right.length !== 0,\n      title: __('menu_STORE_RIGHT_TABS') + ` (${groupedTabs.right.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_TWOSIDE_TABS|' + i, {\n      enabled: groupedTabs.twoSide.length !== 0,\n      title: __('menu_STORE_TWOSIDE_TABS') + ` (${groupedTabs.twoSide.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_ALL_TABS_IN_CURRENT_WINDOW|' + i, {\n      title: __('menu_STORE_ALL_TABS_IN_CURRENT_WINDOW') + ` (${groupedTabs.all.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_SELECTED_TABS|' + i, {\n      title: __('menu_STORE_SELECTED_TABS') + ` (${groupedTabs.inter.length})`,\n    })\n  }\n}\n\nconst createMenus = async (obj, parent, contexts, lists) => {\n  if (obj === menus.STORE_TO_TITLED_LIST) {\n    if (window.opts.disableDynamicMenu) return\n    for (let listIndex = 0; listIndex < lists.length; listIndex += 1) {\n      if (!lists[listIndex].title) continue\n      const prop = {\n        id: 'STORE_TO_TITLED_LIST|' + listIndex,\n        title: lists[listIndex].title,\n        contexts,\n        parentId: 'STORE_TO_TITLED_LIST',\n      }\n      const id = await browser.contextMenus.create(prop)\n      console.log('context menu created: ' + id)\n      for (const key in obj) {\n        const prop = {\n          id: 'STORE_TO_TITLED_LIST.' + key + '|' + listIndex,\n          title: __('menu_' + key),\n          contexts,\n          parentId: id,\n        }\n        const childId = await browser.contextMenus.create(prop)\n        console.log('context menu created: ' + childId)\n      }\n    }\n  } else {\n    for (const key of Object.keys(obj)) {\n      const prop = {\n        id: key,\n        title: __('menu_' + key),\n        contexts,\n      }\n      if (parent) {\n        prop.id = parent + '.' + key\n        prop.parentId = parent\n      }\n      const id = await browser.contextMenus.create(prop)\n      console.log('context menu created: ' + id)\n      if (_.isObject(obj[key])) await createMenus(obj[key], key, contexts, lists)\n    }\n  }\n}\n\nexport const setupContextMenus = async ({pageContext, allContext}) => {\n  await browser.contextMenus.removeAll()\n  const contexts = [browser.contextMenus.ContextType.BROWSER_ACTION]\n  if (pageContext) {\n    contexts.push(browser.contextMenus.ContextType.PAGE)\n    if (allContext) contexts.push(browser.contextMenus.ContextType.ALL)\n  }\n  const lists = await storage.getLists()\n  window.contextMenusClickedHandler = info => {\n    console.log('context menu clicked', info.menuItemId)\n    if (info.menuItemId.startsWith('STORE_TO_TITLED_LIST')) {\n      const [key, listIndex] = info.menuItemId.split('|')\n      _.get(menus, key)(+listIndex)\n      if (PRODUCTION) ga('send', 'event', 'Menu clicked', key)\n    } else {\n      _.get(menus, info.menuItemId)()\n      if (PRODUCTION) ga('send', 'event', 'Menu clicked', info.menuItemId)\n    }\n  }\n  console.groupCollapsed('create context menu', contexts)\n  await createMenus(menus, null, contexts, lists)\n  console.groupEnd('create context menu')\n  dynamicDisableMenu(lists)\n}\n\n'better-onetab/src/background/messageHandler.js'\n:import tabs from '../common/tabs'\nimport storage from '../common/storage'\nimport boss from '../common/service/boss'\nimport {sendMessage} from '../common/utils'\nimport listManager from '../common/listManager'\nimport {setupContextMenus} from './contextMenus'\nimport {updateBrowserAction} from './browserAction'\n\nconst messageHandler = async msg => {\n  console.debug('received', msg)\n  if (msg.optionsChanged) {\n    const changes = msg.optionsChanged\n    console.debug('options changed', changes)\n    Object.assign(window.opts, changes)\n    if (changes.browserAction) updateBrowserAction(changes.browserAction)\n    if (['pageContext', 'allContext', 'disableDynamicMenu'].some(k => k in changes)) await setupContextMenus(changes)\n    await sendMessage({optionsChangeHandledStatus: 'success'})\n    if (PRODUCTION) Object.keys(changes).map(key => ga('send', 'event', 'Options changed', key, changes[key]))\n  }\n  if (msg.restoreList) {\n    const {restoreList} = msg\n    const listIndex = restoreList.index\n    const lists = await storage.getLists()\n    const list = lists[listIndex]\n    if (restoreList.newWindow) {\n      tabs.restoreListInNewWindow(list)\n    } else {\n      tabs.restoreList(list)\n    }\n    if (!list.pinned) {\n      listManager.removeListById(list._id)\n    }\n    if (PRODUCTION) ga('send', 'event', 'Popup item clicked')\n  }\n  if (msg.storeInto) {\n    tabs.storeSelectedTabs(msg.storeInto.index)\n  }\n  if (msg.login) {\n    boss.login(msg.login.token)\n  }\n  if (msg.refresh) {\n    boss.refresh()\n  }\n  if (msg.import) {\n    const {lists} = msg.import\n    lists.forEach(list => listManager.addList(list))\n  }\n}\n\nexport default messageHandler\n",
        "gt": [
            "'better-onetab/src/common/storage.js'",
            "'better-onetab/src/background/contextMenus.js'",
            "'better-onetab/src/background/messageHandler.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/messageHandler.js'",
            "'better-onetab/src/common/service/boss.js'"
        ],
        "content": "'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n\n'better-onetab/src/background/messageHandler.js'\n:import tabs from '../common/tabs'\nimport storage from '../common/storage'\nimport boss from '../common/service/boss'\nimport {sendMessage} from '../common/utils'\nimport listManager from '../common/listManager'\nimport {setupContextMenus} from './contextMenus'\nimport {updateBrowserAction} from './browserAction'\n\nconst messageHandler = async msg => {\n  console.debug('received', msg)\n  if (msg.optionsChanged) {\n    const changes = msg.optionsChanged\n    console.debug('options changed', changes)\n    Object.assign(window.opts, changes)\n    if (changes.browserAction) updateBrowserAction(changes.browserAction)\n    if (['pageContext', 'allContext', 'disableDynamicMenu'].some(k => k in changes)) await setupContextMenus(changes)\n    await sendMessage({optionsChangeHandledStatus: 'success'})\n    if (PRODUCTION) Object.keys(changes).map(key => ga('send', 'event', 'Options changed', key, changes[key]))\n  }\n  if (msg.restoreList) {\n    const {restoreList} = msg\n    const listIndex = restoreList.index\n    const lists = await storage.getLists()\n    const list = lists[listIndex]\n    if (restoreList.newWindow) {\n      tabs.restoreListInNewWindow(list)\n    } else {\n      tabs.restoreList(list)\n    }\n    if (!list.pinned) {\n      listManager.removeListById(list._id)\n    }\n    if (PRODUCTION) ga('send', 'event', 'Popup item clicked')\n  }\n  if (msg.storeInto) {\n    tabs.storeSelectedTabs(msg.storeInto.index)\n  }\n  if (msg.login) {\n    boss.login(msg.login.token)\n  }\n  if (msg.refresh) {\n    boss.refresh()\n  }\n  if (msg.import) {\n    const {lists} = msg.import\n    lists.forEach(list => listManager.addList(list))\n  }\n}\n\nexport default messageHandler\n\n'better-onetab/src/common/service/boss.js'\n:import {\n  TOKEN_KEY,\n  AUTH_HEADER,\n  SYNC_SERVICE_URL,\n  SYNC_MAX_INTERVAL,\n  SYNC_MIN_INTERVAL,\n} from '../constants'\nimport _ from 'lodash'\nimport storage from '../storage'\nimport listManager from '../listManager'\nimport {isBackground, timeout, sendMessage} from '../utils'\nimport browser from 'webextension-polyfill'\nimport io from 'socket.io-client'\nimport logger from '../logger'\n\nconst hasToken = async () => TOKEN_KEY in await browser.storage.local.get(TOKEN_KEY)\n\nconst getToken = async () => {\n  const {token: localToken} = await browser.storage.local.get(TOKEN_KEY)\n  if (localToken) return localToken\n  const {token: remoteToken} = await browser.storage.sync.get(TOKEN_KEY)\n  if (remoteToken) return remoteToken\n}\n\nconst setToken = async token => {\n  await browser.storage.local.set({[TOKEN_KEY]: token, tokenIssued: Date.now()})\n  await browser.storage.sync.set({[TOKEN_KEY]: token})\n}\n\nconst removeToken = async () => {\n  await browser.storage.local.remove(TOKEN_KEY)\n  await browser.storage.sync.remove(TOKEN_KEY)\n}\n\nconst fetchData = async (uri = '', method = 'GET', data = {}) => {\n  const headers = new Headers()\n  const token = await getToken()\n  if (token) headers.append(AUTH_HEADER, token)\n  const option = {\n    headers,\n    method,\n    mode: 'cors',\n  }\n\n  if (['POST', 'PUT', 'PATCH'].includes(method)) {\n    headers.append('Content-Type', 'application/json')\n    option.body = JSON.stringify(data)\n  } else {\n    uri += '?' + Object.keys(data).map(key => {\n      if (typeof data[key] === 'object') data[key] = JSON.stringify(data[key])\n      return key + '=' + encodeURIComponent(data[key])\n    }).filter(i => i).join('&')\n  }\n\n  const res = await fetch(SYNC_SERVICE_URL + uri, option)\n  if (res.headers.has(AUTH_HEADER)) {\n    const newToken = res.headers.get(AUTH_HEADER)\n    console.debug('[boss]: got new token', newToken)\n    await setToken(newToken)\n  }\n  if (res.ok) return res.json()\n  if (res.status === 401) await removeToken()\n  const err = await res.json()\n  throw new Error(err.message)\n}\n\nconst getInfo = () => fetchData('/api/info').then(info => {\n  info.optsUpdatedAt = Date.parse(info.optsUpdatedAt) || 0\n  info.listsUpdatedAt = Date.parse(info.listsUpdatedAt) || 0\n  return info\n})\n\nconst setWSToken = token => {\n  if (!window._socket) return\n  window._socket.io.opts.query = {\n    [AUTH_HEADER]: token,\n  }\n}\n\nconst _socketEmitTimeout = (socket, event, arg) => timeout(new Promise((resolve, reject) => {\n  const cb = result => result && result.err ? reject(result.err) : resolve(result)\n  if (arg) socket.emit(event, arg, cb)\n  else socket.emit(event, cb)\n}), 5000)\n\nconst uploadOpsViaWS = async () => {\n  const socket = window._socket\n  if (!socket || !socket.connected) throw new Error('socket not connected')\n  const {ops} = await browser.storage.local.get('ops')\n  if (ops) {\n    const changes = ops.sort((a, b) => a.time - b.time)\n    while (changes && changes.length) {\n      const change = changes.shift()\n      await _socketEmitTimeout(socket, 'list.update', change)\n    }\n  }\n  await browser.storage.local.remove('ops')\n}\n\nconst downloadRemoteLists = async () => {\n  const socket = window._socket\n  if (!socket || !socket.connected) throw new Error('socket not connected')\n  const remoteTime = await _socketEmitTimeout(socket, 'list.time')\n  const {listsUpdatedAt: localTime} = await browser.storage.local.get('listsUpdatedAt')\n  if (remoteTime === localTime) return\n  const remoteLists = await _socketEmitTimeout(socket, 'list.all')\n  const localLists = _.keyBy(await storage.getLists(), list => list._id)\n  const finallyLists = []\n  const fetching = {}\n  remoteLists.forEach(list => {\n    if (!(list._id in localLists) || localLists.updatedAt < list.updatedAt) {\n      fetching[list._id] = _socketEmitTimeout(socket, 'list.get', list._id)\n      finallyLists.push(list._id)\n    } else {\n      finallyLists.push(localLists[list._id])\n    }\n  })\n  console.log(finallyLists)\n  await Promise.all(Object.values(fetching))\n  for (let i = 0; i < finallyLists.length; i += 1) {\n    if (typeof finallyLists[i] === 'string') {\n      finallyLists[i] = await fetching[finallyLists[i]]\n    }\n  }\n  console.log(finallyLists)\n  await storage.setLists(finallyLists)\n  await browser.storage.local.set({listsUpdatedAt: remoteTime})\n}\n\nconst syncLists = async () => {\n  const unlock = await listManager.RWLock.lock()\n  try {\n    await uploadOpsViaWS()\n    await downloadRemoteLists()\n  } catch (error) {\n    throw error\n  } finally {\n    await unlock()\n  }\n}\n\nconst getRemoteOptionsUpdatedTimeViaWS = () => _socketEmitTimeout(window._socket, 'opts.time')\n\nconst getRemoteOptions = () => _socketEmitTimeout(window._socket, 'opts.all')\n\nconst setRemoteOptions = (opts, time) => _socketEmitTimeout(window._socket, 'opts.set', { opts, time })\n\nconst syncOptions = async () => {\n  const remoteTime = await getRemoteOptionsUpdatedTimeViaWS()\n  const {optsUpdatedAt: localTime} = await browser.storage.local.get('optsUpdatedAt')\n  if (remoteTime > localTime) {\n    const opts = await getRemoteOptions()\n    await browser.storage.local.set({opts, optsUpdatedAt: remoteTime})\n  } else if (remoteTime < localTime) {\n    const opts = await storage.getOptions()\n    await setRemoteOptions(opts, localTime)\n  }\n}\n\n\nlet _refreshing = false\nconst refresh = async () => {\n  if (_refreshing || !(await hasToken())) return\n\n  _refreshing = true\n  await sendMessage({refreshing: true})\n  try {\n    await timeout(Promise.all([syncOptions(), syncLists()]), 20000)\n    await sendMessage({refreshed: {success: true}})\n  } catch (err) {\n    logger.error(err)\n    await sendMessage({refreshed: {success: false}})\n  } finally {\n    _refreshing = false\n  }\n}\n\nconst login = async token => {\n  if (await hasToken()) return\n  await setToken(token)\n  const {uid} = await getInfo()\n  await sendMessage({logged: {uid}})\n  const loginNotificationId = 'login'\n  browser.notifications.create(loginNotificationId, {\n    type: 'basic',\n    iconUrl: 'assets/icons/icon_128.png',\n    title: 'you have login to boss successfully',\n    message: '',\n  })\n  setTimeout(() => {\n    browser.notifications.clear(loginNotificationId)\n  }, 5000)\n  await refresh()\n}\n\nconst initTimer = async () => {\n  if (window._syncTimer || !(await isBackground())) return\n\n  const _nextTimer = time => {\n    window._syncTimer = setTimeout(async () => {\n      if (await hasToken()) {\n        getInfo()\n        if (window._socket && window._socket.connected) {\n          refresh()\n          return _nextTimer(time)\n        }\n      }\n      _nextTimer(Math.min(time * 2, SYNC_MAX_INTERVAL))\n    }, time)\n  }\n\n  const _refreshTimer = time => {\n    clearTimeout(window._syncTimer)\n    _nextTimer(time)\n  }\n\n  window.addEventListener('offline', () => _refreshTimer(SYNC_MAX_INTERVAL))\n  window.addEventListener('online', () => _refreshTimer(SYNC_MIN_INTERVAL))\n  browser.runtime.onMessage.addListener(({login, refreshed}) => {\n    if (login || refreshed && refreshed.success) window._nextSyncInterval = SYNC_MIN_INTERVAL\n  })\n  _nextTimer(SYNC_MIN_INTERVAL)\n}\n\nconst init = async () => {\n  if (window._socket || !await isBackground()) return\n  const socket = window._socket = io(SYNC_SERVICE_URL, {path: '/ws', autoConnect: false})\n  setWSToken(await getToken())\n  await listManager.init()\n  socket.on('list.update', ({method, args}) => {\n    listManager[method](...args)\n  })\n  socket.on('opts.set', async ({changes, time}) => {\n    const {opts} = await browser.storage.local.get('opts')\n    for (const [k, v] of Object.entries(changes)) {\n      opts[k] = v\n    }\n    await browser.storage.local.set({opts, optsUpdatedAt: time})\n  })\n  socket.on('connect', () => refresh())\n  socket.open()\n  initTimer()\n}\n\nexport default {\n  getInfo,\n  removeToken,\n  hasToken,\n  login,\n  init,\n  refresh,\n}\n",
        "gt": [
            "'better-onetab/src/common/service/boss.js'",
            "'better-onetab/src/background/messageHandler.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'cypress-plugin-snapshots/src/constants.js'",
            "'cypress-plugin-snapshots/src/tasks/index.js'",
            "'cypress-plugin-snapshots/src/utils/image/getSnapshotFilename.js'",
            "'cypress-plugin-snapshots/src/tasks/matchImageSnapshot.js'",
            "'cypress-plugin-snapshots/src/utils/tasks/imageSnapshots.js'"
        ],
        "content": "'cypress-plugin-snapshots/src/constants.js'\n:module.exports = {\n  DIR_IMAGE_SNAPSHOTS: '__image_snapshots__',\n  DIR_SNAPSHOTS: '__snapshots__',\n  IMAGE_TYPE_DIFF: 'diff',\n  IMAGE_TYPE_ACTUAL: 'actual',\n  NO_LOG: { log: false },\n  URL_PREFIX: '#cypress-plugin-snapshot-',\n}\n\n'cypress-plugin-snapshots/src/tasks/index.js'\n:const {\n  GET_FILE,\n  MATCH_IMAGE,\n  MATCH_TEXT\n} = require('./taskNames');\nconst getFile = require('./getFile');\nconst matchImageSnapshot = require('./matchImageSnapshot');\nconst matchTextSnapshot = require('./matchTextSnapshot');\n\nmodule.exports = {\n  [GET_FILE]: getFile,\n  [MATCH_IMAGE]: matchImageSnapshot,\n  [MATCH_TEXT]: matchTextSnapshot,\n}\n\n'cypress-plugin-snapshots/src/utils/image/getSnapshotFilename.js'\n:const path = require('path');\nconst sanitizeFilename = require('sanitize-filename');\nconst { DIR_IMAGE_SNAPSHOTS } = require('../../constants');\n\nfunction getSnapshotFilename(testFile, snapshotTitle, type = '') {\n  const dir = path.join(path.dirname(testFile), DIR_IMAGE_SNAPSHOTS);\n  const fileType = type ? `.${type}` : '';\n  const filename = sanitizeFilename(`${snapshotTitle}${fileType}.png`);\n  return path.join(dir, filename);\n}\n\nmodule.exports = getSnapshotFilename;\n\n'cypress-plugin-snapshots/src/tasks/matchImageSnapshot.js'\n:const { merge, cloneDeep } = require('lodash');\nconst rimraf = require('rimraf').sync;\nconst path = require('path');\nconst { getConfig } = require('../config');\nconst getSnapshotFilename = require('../utils/image/getSnapshotFilename');\nconst getImageData = require('../utils/image/getImageData');\nconst saveImageSnapshot = require('../save/saveImageSnapshot');\nconst { getImageObject, compareImages, moveActualImageToSnapshotsDirectory, createDiffObject } = require('../utils/tasks/imageSnapshots');\nconst resizeImage = require('../utils/image/resizeImage');\nconst { IMAGE_TYPE_DIFF, IMAGE_TYPE_ACTUAL } = require('../constants');\n\nasync function matchImageSnapshot(data = {}) {\n  const {\n    commandName,\n    dataType,\n    image,\n    options,\n    snapshotTitle,\n    subject,\n    testFile,\n  } = data;\n  if (!image) {\n    throw new Error(`'image' not defined`);\n  } else if (!image.devicePixelRatio) {\n    throw new Error(`'image.devicePixelRatio' not defined`);\n  }\n\n  const actualFilename = getSnapshotFilename(testFile, snapshotTitle, IMAGE_TYPE_ACTUAL);\n  const diffFilename = getSnapshotFilename(testFile, snapshotTitle, IMAGE_TYPE_DIFF);\n  const config = merge({}, cloneDeep(getConfig()), options);\n  const snapshotFile = getSnapshotFilename(testFile, snapshotTitle);\n  const resized = options && options.resizeDevicePixelRatio && image.devicePixelRatio !== 1;\n  if (resized) {\n    await resizeImage(image.path, actualFilename, image.devicePixelRatio);\n  }\n  if (resized === false) {\n    moveActualImageToSnapshotsDirectory(data);\n  } else {\n    image.path = actualFilename;\n  }\n\n  const expected = getImageObject(snapshotFile);\n  const exists = expected !== false;\n  const autoPassed = (config.autopassNewSnapshots && expected === false);\n  const actual = exists || resized ? getImageObject(image.path, true) : image;\n  const passed = expected && compareImages(expected, actual, diffFilename, options);\n\n  actual.resized = resized !== false;\n\n  let updated = false;\n\n  if ((config.updateSnapshots && !passed) || expected === false) {\n    saveImageSnapshot({ testFile, snapshotTitle, actual });\n    updated = true;\n  }\n\n  if (passed && actual && actual.path) {\n    rimraf(actual.path);\n  }\n\n  const diff = passed || autoPassed || !options.createDiffImage ?\n    undefined : createDiffObject(diffFilename);\n\n  const result = {\n    actual: getImageData(actual),\n    commandName,\n    dataType,\n    diff,\n    exists,\n    expected: getImageData(expected),\n    passed: passed || autoPassed,\n    snapshotFile: path.relative(process.cwd(), snapshotFile),\n    snapshotTitle,\n    subject,\n    updated,\n    isImage: true,\n  };\n\n  return result;\n}\n\nmodule.exports = matchImageSnapshot;\n\n'cypress-plugin-snapshots/src/utils/tasks/imageSnapshots.js'\n:const { createHash } = require('crypto');\nconst { PNG } = require('pngjs');\nconst fs = require('fs-extra');\nconst pixelmatch = require('pixelmatch');\nconst { merge } = require('lodash');\nconst rimraf = require('rimraf').sync;\nconst getSnapshotFilename = require('../image/getSnapshotFilename');\nconst getImageData = require('../image/getImageData');\nconst { IMAGE_TYPE_ACTUAL } = require('../../constants');\nconst { DEFAULT_IMAGE_CONFIG } = require('../../config');\n\nfunction moveActualImageToSnapshotsDirectory({image, snapshotTitle, testFile} = {}) {\n  if (image && image.path) {\n    const filename = getSnapshotFilename(testFile, snapshotTitle, IMAGE_TYPE_ACTUAL);\n    rimraf(filename);\n    if (fs.existsSync(image.path)) {\n      fs.moveSync(image.path, filename);\n    }\n    image.path = filename;\n  }\n}\n\nfunction createDiffObject(filename) {\n  const imageObject = getImageObject(filename, false);\n  return getImageData(imageObject);\n}\n\n\nfunction getImageObject(filename, addHash = true) {\n  const exists = fs.existsSync(filename);\n  const size = exists ? fs.statSync(filename).size : 0;\n\n  if (size > 0) {\n    const image = PNG.sync.read(fs.readFileSync(filename));\n    const hash = addHash !== false ?\n      createHash('sha1').update(image.data).digest('base64') : undefined;\n\n    return {\n      path: filename,\n      image,\n      hash,\n      height: image.height,\n      width: image.width,\n    };\n  }\n\n  return false;\n}\n\nfunction createCompareCanvas(width, height, source) {\n  const canvas = new PNG({\n    width,\n    height,\n    colorType: 6,\n    bgColor: {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 0,\n    }\n  });\n  PNG.bitblt(source, canvas, 0, 0, source.width, source.height, 0, 0);\n  return canvas;\n}\n\n\nfunction makeImagesEqualSize(expected, actual) {\n  const height = Math.max(expected.height, actual.height);\n  const width = Math.max(expected.width, actual.width);\n  actual.image = createCompareCanvas(width, height, actual.image);\n  expected.image = createCompareCanvas(width, height, expected.image);\n}\n\nfunction compareImageSizes(expected, actual) {\n  return expected.width === actual.width &&\n    actual.height === expected.height;\n}\n\nfunction compareImages(expected, actual, diffFilename, config) {\n  let passed = false;\n  rimraf(diffFilename);\n\n  if (actual !== false) {\n    const hashMatches = expected.hash === actual.hash;\n    if (hashMatches) {\n      return true;\n    }\n\n    const sizeMatch = compareImageSizes(expected, actual);\n    if (!sizeMatch) {\n      makeImagesEqualSize(expected, actual);\n    }\n\n    const imageConfig = merge({}, DEFAULT_IMAGE_CONFIG, config);\n    const pixelmatchConfig = {\n      threshold: 0.01,\n    };\n\n    const imageWidth = actual.image.width;\n    const imageHeight = actual.image.height;\n\n    const diffImage = config.createDiffImage ? new PNG({\n      height: imageHeight,\n      width: imageWidth,\n    }) : null;\n\n    const totalPixels = imageWidth * imageHeight;\n    const diffPixelCount = pixelmatch(\n      actual.image.data,\n      expected.image.data,\n      diffImage ? diffImage.data : null,\n      imageWidth,\n      imageHeight,\n      pixelmatchConfig\n    );\n\n    if (imageConfig.thresholdType === 'pixel') {\n      passed = diffPixelCount <= imageConfig.threshold;\n    } else if (imageConfig.thresholdType === 'percent') {\n      const diffRatio = diffPixelCount / totalPixels;\n      passed = diffRatio <= imageConfig.threshold;\n    } else {\n      throw new Error(`Unknown imageConfig.thresholdType: ${imageConfig.thresholdType}. `+\n        `Valid options are \"pixel\" or \"percent\".`);\n    }\n\n    if (!passed && diffImage) {\n\n\n      const pngBuffer = PNG.sync.write(diffImage, {\n        filterType: 4\n      });\n      fs.writeFileSync(diffFilename, pngBuffer);\n    }\n  }\n\n  return passed;\n}\n\nfunction saveImageSnapshot(data) {\n  rimraf(data.expected.path);\n  rimraf(data.diff.path);\n  fs.moveSync(data.actual.path, data.expected.path);\n}\n\nmodule.exports = {\n  compareImages,\n  createDiffObject,\n  getImageObject,\n  saveImageSnapshot,\n  moveActualImageToSnapshotsDirectory\n};\n",
        "gt": [
            "'cypress-plugin-snapshots/src/constants.js'",
            "'cypress-plugin-snapshots/src/utils/image/getSnapshotFilename.js'",
            "'cypress-plugin-snapshots/src/utils/tasks/imageSnapshots.js'",
            "'cypress-plugin-snapshots/src/tasks/matchImageSnapshot.js'",
            "'cypress-plugin-snapshots/src/tasks/index.js'"
        ]
    },
    {
        "files": [
            "'howtocenterincss/js/components/MainComponent.js'",
            "'howtocenterincss/js/HTML.js'",
            "'howtocenterincss/js/renderedHTML.js'",
            "'howtocenterincss/js/how/methods/AbsolutePositionMethod.js'",
            "'howtocenterincss/js/how/findMethod.js'"
        ],
        "content": "'howtocenterincss/js/components/MainComponent.js'\n:\n\nvar React = require('react');\nvar OptionsComponent = require('./OptionsComponent');\nvar CodeComponent = require('./CodeComponent');\n\nvar Options = require('../how/Options');\nvar findMethod = require('../how/findMethod');\n\nclass MainComponent extends React.Component {\n  _options: OptionsComponent;\n  _code: CodeComponent;\n\n  _handleGenerateClick() {\n    var content = this._options.getContent();\n    var container = this._options.getContainer();\n    var horizontalAlignment = this._options.getHorizontalAlignment();\n    var verticalAlignment = this._options.getVerticalAlignment();\n    var browserSupport = this._options.getBrowserSupport();\n    var method = findMethod(\n      content,\n      container,\n      horizontalAlignment,\n      verticalAlignment,\n      browserSupport\n    );\n    if (method) {\n      var code = method.getCode(\n        content,\n        container,\n        horizontalAlignment,\n        verticalAlignment,\n        browserSupport\n      );\n      this._code.setMethod(method, code);\n    } else {\n      this._code.setNoMethod();\n    }\n\n    if (this.props.onOptionsChange) {\n      this.props.onOptionsChange(\n        content,\n        container,\n        horizontalAlignment,\n        verticalAlignment,\n        browserSupport\n      );\n    }\n  }\n\n  setOptions(\n    content: Options.Content,\n    container: Options.Container,\n    horizontalAlignment: Options.HorizontalAlignment,\n    verticalAlignment: Options.VerticalAlignment,\n    browserSupport: Options.BrowserSupport\n  ) {\n    this._options.setOptions(\n      content,\n      container,\n      horizontalAlignment,\n      verticalAlignment,\n      browserSupport\n    );\n  }\n\n  render(): ?ReactElement {\n    return (\n      <div>\n        <div className=\"col-group\">\n          <div className=\"header col-2\">\n            <h1 className=\"logo\">\n              How to <span className=\"logo-center\">Center</span> in CSS\n            </h1>\n\n            <form\n              method=\"post\"\n              action=\"http:\n              id=\"mc-embedded-subscribe-form\"\n              name=\"mc-embedded-subscribe-form\"\n              className=\"validate mailinglist\"\n              target=\"_blank\"\n              noValidate>\n              <div id=\"mc_embed_signup_scroll\">\n                <label htmlFor=\"mce-EMAIL\" className=\"label\">\n                  Get HTML & CSS Tips In Your Inbox.\n                </label>\n                <div className=\"labelDescription nospam\">No Spam.</div>\n                <input\n                  type=\"email\"\n                  name=\"EMAIL\"\n                  className=\"email text\"\n                  id=\"mce-EMAIL\"\n                  placeholder=\"email address\"\n                  required\n                />\n                <div style={{position: 'absolute', left: '-5000px'}}>\n                  <input type=\"text\" name=\"b_a044e184b387dc387feaeeb5e_4b3f6562e1\" tabIndex=\"-1\" value=\"\" />\n                </div>\n                <button\n                  type=\"submit\"\n                  name=\"subscribe\"\n                  id=\"mc-embedded-subscribe\"\n                  className=\"button\">\n                  Subscribe\n                </button>\n              </div>\n            </form>\n\n            <p className=\"socialLogos\">\n              <a href=\"http:\n                <img src=\"./twitter.svg\" className=\"socialLogo\" />\n              </a>\n              <a href=\"http:\n                <img src=\"./facebook.svg\" className=\"socialLogo\" />\n              </a>\n              <a href=\"http:\n                <img src=\"./github.svg\" className=\"socialLogo\" />\n              </a>\n            </p>\n          </div>\n          <div className=\"options col-6 col-offset-1\">\n            <h2>Wat</h2>\n            <p>\n              Centering in CSS is a pain in the ass. There seems to be a gazillion\n              ways to do it, depending on a variety of factors. This consolidates\n              them and gives you the code you need for each situation.\n            </p>\n            <p>\n              Select the type of content you want to center in a\n              parent <code>&lt;div&gt;</code> and the size of the parent.\n            </p>\n            <OptionsComponent ref={(c) => this._options = c} />\n            <p>\n              <button className=\"generate\" onClick={this._handleGenerateClick.bind(this)}>\n                Generate Code\n              </button>\n            </p>\n            <CodeComponent ref={(c) => this._code = c} />\n          </div>\n        </div>\n        <div className=\"footer col-group\">\n          <p className=\"col-12\">\n            With <em>&#10084;</em> from <a href=\"http:\n            Oliver Zheng</a>\n            <br />\n            Follow <a href=\"https:\n            useful things\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nMainComponent.propTypes = {\n  onOptionsChange: React.PropTypes.func,\n};\n\nmodule.exports = MainComponent;\n\n'howtocenterincss/js/HTML.js'\n:\n\nvar React = require('react/addons');\nvar MainComponent = require('./components/MainComponent');\n\nvar renderedHTML = React.renderToString(\n  <MainComponent />\n);\n\nmodule.exports = renderedHTML;\n\n'howtocenterincss/js/renderedHTML.js'\n:var fs = require('fs');\nvar mustache = require('mustache');\nvar React = require('react/addons');\nvar nodeJSX = require('node-jsx');\n\nnodeJSX.install({\n  harmony: true,\n  stripTypes: true,\n});\n\nvar html = require('./HTML');\n\nvar template = fs.readFileSync(__dirname + '/../html/index.html', 'utf8');\nvar rendered = mustache.render(template, {\n  appHTML: html,\n  scriptPostfix: process.env.NODE_ENV === 'production' ? '.min' : '',\n  googleAnalyticsID: process.env['googleAnalyticsID'],\n});\n\nconsole.log(rendered);\n\n'howtocenterincss/js/how/methods/AbsolutePositionMethod.js'\n:\n\nvar Method = require('./Method');\nvar Requirement = require('./Requirement');\nvar Options = require('../Options');\nvar React = require('react');\n\nvar invariant = require('invariant');\n\nvar c = require('../checks');\n\nclass AbsolutePositionMethod extends Method {\n\n  getName(): string {\n    return 'Absolute position the content';\n  }\n\n  getRequirement(): Requirement {\n    return Requirement.all([\n      Requirement.any([\n        Requirement.all([\n          new Requirement(\n            'Content width is known',\n            c.checkContent(c.requireWidthExists)\n          ),\n          new Requirement(\n            'Horizontally center aligned',\n            c.checkHorizontalAlignment(Options.HorizontalAlignment.CENTER)\n          ),\n        ]),\n        new Requirement(\n          'Horizontally left or right aligned',\n          c.checkAnyHorizontalAlignment([\n            Options.HorizontalAlignment.LEFT,\n            Options.HorizontalAlignment.RIGHT,\n          ])\n        ),\n      ]),\n      Requirement.any([\n        Requirement.all([\n          new Requirement(\n            'Content height is known',\n            c.checkContent(c.requireHeightExists)\n          ),\n          new Requirement(\n            'Vertically center aligned',\n            c.checkVerticalAlignment(Options.VerticalAlignment.MIDDLE)\n          ),\n        ]),\n        new Requirement(\n          'Vertically top or bottom aligned',\n          c.checkAnyVerticalAlignment([\n            Options.VerticalAlignment.TOP,\n            Options.VerticalAlignment.BOTTOM,\n          ])\n        ),\n      ]),\n    ]);\n  }\n\n  getCodeElement(\n    content: Options.Content,\n    container: Options.Container,\n    horizontalAlignment: Options.HorizontalAlignment,\n    verticalAlignment: Options.VerticalAlignment,\n    browserSupport: Options.BrowserSupport\n  ): { parent: ReactElement; middle: ?ReactElement; child: mixed; } {\n    var parentStyles = {};\n    parentStyles.position = 'relative';\n\n    var child = this.getContentWithDOM(content, true );\n\n    var childStyles = child.props.style;\n    if (!childStyles) {\n      childStyles = child.props.style = {};\n    }\n    childStyles.position = 'absolute';\n\n    var contentWidth = content.width;\n    var contentHeight = content.height;\n    if (horizontalAlignment === Options.HorizontalAlignment.CENTER) {\n      invariant(contentWidth, 'Require content width');\n      childStyles.left = '50%';\n      childStyles.marginLeft = contentWidth.multiply(-0.5).toString();\n    } else if (horizontalAlignment === Options.HorizontalAlignment.RIGHT) {\n      childStyles.right = '0';\n    }\n\n    if (verticalAlignment === Options.VerticalAlignment.MIDDLE) {\n      invariant(contentHeight, 'Require content height');\n      childStyles.top = '50%';\n      childStyles.marginTop = contentHeight.multiply(-0.5).toString();\n    } else if (verticalAlignment === Options.VerticalAlignment.BOTTOM) {\n      childStyles.bottom = '0';\n    }\n\n\n\n\n    var parent =\n      <div style={parentStyles}>\n        {child}\n      </div>;\n    return { parent: parent, middle: null, child: child };\n  }\n}\n\nmodule.exports = AbsolutePositionMethod;\n\n'howtocenterincss/js/how/findMethod.js'\n:\n\nvar Method = require('./methods/Method');\nvar Options = require('./Options');\nvar DoNothingMethod = require('./methods/DoNothingMethod');\nvar SingleLineTextLineHeightMethod =\n  require('./methods/SingleLineTextLineHeightMethod');\nvar PixelHeightContainerContentPaddingMethod =\n  require('./methods/PixelHeightContainerContentPaddingMethod');\nvar AbsolutePositionMethod = require('./methods/AbsolutePositionMethod');\nvar MarginAutoMethod = require('./methods/MarginAutoMethod');\nvar TableCellMethod = require('./methods/TableCellMethod');\nvar FlexMethod = require('./methods/FlexMethod');\nvar TextAlignMethod = require('./methods/TextAlignMethod');\n\n\n\nvar methods = [\n  new DoNothingMethod,\n  new TextAlignMethod,\n  new SingleLineTextLineHeightMethod(),\n  new MarginAutoMethod(),\n  new PixelHeightContainerContentPaddingMethod(),\n  new FlexMethod,\n  new AbsolutePositionMethod,\n  new TableCellMethod,\n];\n\nfunction findMethod(\n  content: Options.Content,\n  container: Options.Container,\n  horizontalAlignment: Options.HorizontalAlignment,\n  verticalAlignment: Options.VerticalAlignment,\n  browserSupport: Options.BrowserSupport\n): ?Method {\n  for (var i = 0; i < methods.length; i++) {\n    var method = methods[i];\n    if (method.getRequirement().check(content, container, horizontalAlignment, verticalAlignment, browserSupport)) {\n      return method;\n    }\n  }\n  return null;\n}\n\nmodule.exports = findMethod;\n",
        "gt": [
            "'howtocenterincss/js/how/methods/AbsolutePositionMethod.js'",
            "'howtocenterincss/js/how/findMethod.js'",
            "'howtocenterincss/js/components/MainComponent.js'",
            "'howtocenterincss/js/HTML.js'",
            "'howtocenterincss/js/renderedHTML.js'"
        ]
    },
    {
        "files": [
            "'spa/listings/apx0B/c.1/lib/routes.js'",
            "'spa/listings/apx0B/c.1/lib/crud.js'",
            "'spa/listings/apx0B/c.1/app.js'",
            "'spa/listings/apx0B/c.1/lib/chat.js'"
        ],
        "content": "'spa/listings/apx0B/c.1/lib/routes.js'\n:\n\n\n\n\n\n'use strict';\nvar\n  configRoutes,\n  crud        = require( './crud' ),\n  chat        = require( './chat' ),\n  makeMongoId = crud.makeMongoId;\n\n\n\nconfigRoutes = function ( app, server ) {\n  app.get( '/', function ( request, response ) {\n    response.redirect( '/spa.html' );\n  });\n\n  app.all( '/:obj_type\n\n\n\n\n\n'use strict';\nvar\n  loadSchema,   checkSchema,  clearIsOnline,\n  checkType,    constructObj, readObj,\n  updateObj,    destroyObj,\n\n  mongodb     = require( 'mongodb' ),\n  fsHandle    = require( 'fs'      ),\n  JSV         = require( 'JSV'     ).JSV,\n\n  mongoServer = new mongodb.Server(\n    'localhost',\n    mongodb.Connection.DEFAULT_PORT\n  ),\n  dbHandle    = new mongodb.Db(\n    'spa', mongoServer, { safe : true }\n  ),\n  validator   = JSV.createEnvironment(),\n\n  objTypeMap  = { 'user' : {} };\n\n\n\nloadSchema = function ( schema_name, schema_path ) {\n  fsHandle.readFile( schema_path, 'utf8', function ( err, data ) {\n    objTypeMap[ schema_name ] = JSON.parse( data );\n  });\n};\n\ncheckSchema = function ( obj_type, obj_map, callback ) {\n  var\n    schema_map = objTypeMap[ obj_type ],\n    report_map = validator.validate( obj_map, schema_map );\n\n  callback( report_map.errors );\n};\n\nclearIsOnline = function () {\n  updateObj(\n    'user',\n    { is_online : true  },\n    { is_online : false },\n    function ( response_map ) {\n      console.log( 'All users set to offline', response_map );\n    }\n  );\n};\n\n\n\ncheckType = function ( obj_type ) {\n  if ( ! objTypeMap[ obj_type ] ) {\n    return ({ error_msg : 'Object type \"' + obj_type\n      + '\" is not supported.'\n    });\n  }\n  return null;\n};\n\nconstructObj = function ( obj_type, obj_map, callback ) {\n  var type_check_map = checkType( obj_type );\n  if ( type_check_map ) {\n    callback( type_check_map );\n    return;\n  }\n\n  checkSchema(\n    obj_type, obj_map,\n    function ( error_list ) {\n      if ( error_list.length === 0 ) {\n        dbHandle.collection(\n          obj_type,\n          function ( outer_error, collection ) {\n            var options_map = { safe: true };\n\n            collection.insert(\n              obj_map,\n              options_map,\n              function ( inner_error, result_map ) {\n                callback( result_map );\n              }\n            );\n          }\n        );\n      }\n      else {\n        callback({\n          error_msg  : 'Input document not valid',\n          error_list : error_list\n        });\n      }\n    }\n  );\n};\n\nreadObj = function ( obj_type, find_map, fields_map, callback ) {\n  var type_check_map = checkType( obj_type );\n  if ( type_check_map ) {\n    callback( type_check_map );\n    return;\n  }\n\n  dbHandle.collection(\n    obj_type,\n    function ( outer_error, collection ) {\n      collection.find( find_map, fields_map ).toArray(\n        function ( inner_error, map_list ) {\n          callback( map_list );\n        }\n      );\n    }\n  );\n};\n\nupdateObj = function ( obj_type, find_map, set_map, callback ) {\n  var type_check_map = checkType( obj_type );\n  if ( type_check_map ) {\n    callback( type_check_map );\n    return;\n  }\n\n  checkSchema(\n    obj_type, set_map,\n    function ( error_list ) {\n      if ( error_list.length === 0 ) {\n        dbHandle.collection(\n          obj_type,\n          function ( outer_error, collection ) {\n            collection.update(\n              find_map,\n              { $set : set_map },\n              { safe : true, multi : true, upsert : false },\n              function ( inner_error, update_count ) {\n                callback({ update_count : update_count });\n              }\n            );\n          }\n        );\n      }\n      else {\n        callback({\n          error_msg  : 'Input document not valid',\n          error_list : error_list\n        });\n      }\n    }\n  );\n};\n\ndestroyObj = function ( obj_type, find_map, callback ) {\n  var type_check_map = checkType( obj_type );\n  if ( type_check_map ) {\n    callback( type_check_map );\n    return;\n  }\n\n  dbHandle.collection(\n    obj_type,\n    function ( outer_error, collection ) {\n      var options_map = { safe: true, single: true };\n\n      collection.remove( find_map, options_map,\n        function ( inner_error, delete_count ) {\n          callback({ delete_count: delete_count });\n        }\n      );\n    }\n  );\n};\n\nmodule.exports = {\n  makeMongoId : mongodb.ObjectID,\n  checkType   : checkType,\n  construct   : constructObj,\n  read        : readObj,\n  update      : updateObj,\n  destroy     : destroyObj\n};\n\n\n\ndbHandle.open( function () {\n  console.log( '** Connected to MongoDB **' );\n  clearIsOnline();\n});\n\n\n(function () {\n  var schema_name, schema_path;\n  for ( schema_name in objTypeMap ) {\n    if ( objTypeMap.hasOwnProperty( schema_name ) ) {\n      schema_path = __dirname + '/' + schema_name + '.json';\n      loadSchema( schema_name, schema_path );\n    }\n  }\n}());\n\n\n'spa/listings/apx0B/c.1/app.js'\n:\n\n\n\n\n\n'use strict';\nvar\n  http    = require( 'http'         ),\n  express = require( 'express'      ),\n  routes  = require( './lib/routes' ),\n\n  app     = express(),\n  server  = http.createServer( app );\n\n\n\napp.configure( function () {\n  app.use( express.bodyParser() );\n  app.use( express.methodOverride() );\n  app.use( express.static( __dirname + '/public' ) );\n  app.use( app.router );\n});\n\napp.configure( 'development', function () {\n  app.use( express.logger() );\n  app.use( express.errorHandler({\n    dumpExceptions : true,\n    showStack      : true\n  }) );\n});\n\napp.configure( 'production', function () {\n  app.use( express.errorHandler() );\n});\n\nroutes.configRoutes( app, server );\n\n\n\nserver.listen( 3000 );\nconsole.log(\n  'Express server listening on port %d in %s mode',\n   server.address().port, app.settings.env\n);\n\n\n'spa/listings/apx0B/c.1/lib/chat.js'\n:\n\n\n\n\n\n'use strict';\nvar\n  emitUserList, signIn, signOut, chatObj,\n  socket = require( 'socket.io' ),\n  crud   = require( './crud'    ),\n\n  makeMongoId = crud.makeMongoId,\n  chatterMap  = {};\n\n\n\n\n\nemitUserList = function ( io ) {\n  crud.read(\n    'user',\n    { is_online : true },\n    {},\n    function ( result_list ) {\n      io\n        .of( '/chat' )\n        .emit( 'listchange', result_list );\n    }\n  );\n};\n\n\n\nsignIn = function ( io, user_map, socket ) {\n  crud.update(\n    'user',\n    { '_id'     : user_map._id },\n    { is_online : true         },\n    function ( result_map ) {\n      emitUserList( io );\n      user_map.is_online = true;\n      socket.emit( 'userupdate', user_map );\n    }\n  );\n\n  chatterMap[ user_map._id ] = socket;\n  socket.user_id = user_map._id;\n};\n\n\n\nsignOut = function ( io, user_id ) {\n  crud.update(\n    'user',\n    { '_id'     : user_id },\n    { is_online : false   },\n    function ( result_list ) { emitUserList( io ); }\n  );\n  delete chatterMap[ user_id ];\n};\n\n\n\nchatObj = {\n  connect : function ( server ) {\n    var io = socket.listen( server );\n\n\n    io\n      .set( 'blacklist' , [] )\n      .of( '/chat' )\n      .on( 'connection', function ( socket ) {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        socket.on( 'adduser', function ( user_map ) {\n          crud.read(\n            'user',\n            { name : user_map.name },\n            {},\n            function ( result_list ) {\n              var\n                result_map,\n                cid = user_map.cid;\n\n              delete user_map.cid;\n\n\n              if ( result_list.length > 0 ) {\n                result_map     = result_list[ 0 ];\n                result_map.cid = cid;\n                signIn( io, result_map, socket );\n              }\n\n\n              else {\n                user_map.is_online = true;\n                crud.construct(\n                  'user',\n                  user_map,\n                  function ( result_list ) {\n                    result_map     = result_list[ 0 ];\n                    result_map.cid = cid;\n                    chatterMap[ result_map._id ] = socket;\n                    socket.user_id = result_map._id;\n                    socket.emit( 'userupdate', result_map );\n                    emitUserList( io );\n                  }\n                );\n              }\n            }\n          );\n        });\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        socket.on( 'updatechat', function ( chat_map ) {\n          if ( chatterMap.hasOwnProperty( chat_map.dest_id ) ) {\n            chatterMap[ chat_map.dest_id ]\n              .emit( 'updatechat', chat_map );\n          }\n          else {\n            socket.emit( 'updatechat', {\n              sender_id : chat_map.sender_id,\n              msg_text  : chat_map.dest_name + ' has gone offline.'\n            });\n          }\n        });\n\n\n\n        socket.on( 'leavechat', function () {\n          console.log(\n            '** user %s logged out **', socket.user_id\n          );\n          signOut( io, socket.user_id );\n        });\n\n        socket.on( 'disconnect', function () {\n          console.log(\n            '** user %s closed browser window or tab **',\n            socket.user_id\n          );\n          signOut( io, socket.user_id );\n        });\n\n\n\n\n\n\n\n\n\n\n\n\n\n        socket.on( 'updateavatar', function ( avtr_map ) {\n          crud.update(\n            'user',\n            { '_id'   : makeMongoId( avtr_map.person_id ) },\n            { css_map : avtr_map.css_map },\n            function ( result_list ) { emitUserList( io ); }\n          );\n        });\n\n      }\n    );\n\n\n    return io;\n  }\n};\n\nmodule.exports = chatObj;\n\n",
        "gt": [
            "'spa/listings/apx0B/c.1/lib/crud.js'",
            "'spa/listings/apx0B/c.1/lib/chat.js'",
            "'spa/listings/apx0B/c.1/lib/routes.js'",
            "'spa/listings/apx0B/c.1/app.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/background/messageHandler.js'",
            "'better-onetab/src/common/tabs.js'",
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/common/constants.js'"
        ],
        "content": "'better-onetab/src/background/messageHandler.js'\n:import tabs from '../common/tabs'\nimport storage from '../common/storage'\nimport boss from '../common/service/boss'\nimport {sendMessage} from '../common/utils'\nimport listManager from '../common/listManager'\nimport {setupContextMenus} from './contextMenus'\nimport {updateBrowserAction} from './browserAction'\n\nconst messageHandler = async msg => {\n  console.debug('received', msg)\n  if (msg.optionsChanged) {\n    const changes = msg.optionsChanged\n    console.debug('options changed', changes)\n    Object.assign(window.opts, changes)\n    if (changes.browserAction) updateBrowserAction(changes.browserAction)\n    if (['pageContext', 'allContext', 'disableDynamicMenu'].some(k => k in changes)) await setupContextMenus(changes)\n    await sendMessage({optionsChangeHandledStatus: 'success'})\n    if (PRODUCTION) Object.keys(changes).map(key => ga('send', 'event', 'Options changed', key, changes[key]))\n  }\n  if (msg.restoreList) {\n    const {restoreList} = msg\n    const listIndex = restoreList.index\n    const lists = await storage.getLists()\n    const list = lists[listIndex]\n    if (restoreList.newWindow) {\n      tabs.restoreListInNewWindow(list)\n    } else {\n      tabs.restoreList(list)\n    }\n    if (!list.pinned) {\n      listManager.removeListById(list._id)\n    }\n    if (PRODUCTION) ga('send', 'event', 'Popup item clicked')\n  }\n  if (msg.storeInto) {\n    tabs.storeSelectedTabs(msg.storeInto.index)\n  }\n  if (msg.login) {\n    boss.login(msg.login.token)\n  }\n  if (msg.refresh) {\n    boss.refresh()\n  }\n  if (msg.import) {\n    const {lists} = msg.import\n    lists.forEach(list => listManager.addList(list))\n  }\n}\n\nexport default messageHandler\n\n'better-onetab/src/common/tabs.js'\n:import storage from './storage'\nimport {createNewTabList} from './list'\nimport _ from 'lodash'\nimport browser from 'webextension-polyfill'\nimport listManager from './listManager'\nimport {ILLEGAL_URLS} from './constants'\nlistManager.init()\n\nconst getAllInWindow = windowId => browser.tabs.query({windowId})\n\nconst openTabLists = async () => {\n\n  const window = await browser.runtime.getBackgroundPage()\n  if (!_.isObject(window.appTabId)) window.appTabId = {}\n  const currentWindow = await browser.windows.getCurrent()\n  const windowId = currentWindow.id\n  const tabListsUrl = browser.runtime.getURL('index.html#/app/')\n  if (windowId in window.appTabId) {\n    const tabs = await getAllInWindow(windowId)\n    const tab = tabs.find(tab => tab.id === window.appTabId[windowId])\n    if (tab) {\n      if (tab.url.startsWith(tabListsUrl)) {\n        return browser.tabs.update(tab.id, { active: true })\n      }\n      delete window.appTabId[windowId]\n    }\n  }\n  const createdTab = await browser.tabs.create({url: tabListsUrl})\n  window.appTabId[windowId] = createdTab.id\n}\n\nconst openAboutPage = () => {\n  window.open(browser.runtime.getURL('index.html#/app/about'))\n}\n\nconst getSelectedTabs = () => browser.tabs.query({highlighted: true, currentWindow: true})\n\nconst getAllTabsInCurrentWindow = async () => {\n  const currentWindow = await browser.windows.getCurrent()\n  return getAllInWindow(currentWindow.id)\n}\n\nconst groupTabsInCurrentWindow = async () => {\n  const tabs = await getAllTabsInCurrentWindow()\n  const result = { left: [], right: [], inter: [], all: tabs }\n  let currentIsRight = false\n  for (const tab of tabs) {\n    if (tab.highlighted) {\n      currentIsRight = true\n      result.inter.push(tab)\n    } else if (currentIsRight) result.right.push(tab)\n    else result.left.push(tab)\n  }\n  result.twoSide = result.left.concat(result.right)\n  return result\n}\n\nconst isLegalURL = url => ILLEGAL_URLS.every(prefix => !url.startsWith(prefix))\n\nconst storeTabs = async (tabs, listIndex) => {\n  const appUrl = browser.runtime.getURL('')\n  tabs = tabs.filter(i => !i.url.startsWith(appUrl))\n  const opts = await storage.getOptions()\n  if (opts.ignorePinned) tabs = tabs.filter(i => !i.pinned)\n  if (opts.excludeIllegalURL) tabs = tabs.filter(i => isLegalURL(i.url))\n  if (tabs.length === 0) return\n  const lists = await storage.getLists()\n  if (listIndex == null) {\n    const newList = createNewTabList({tabs})\n    if (opts.pinNewList) newList.pinned = true\n    await listManager.addList(newList)\n  } else {\n    const list = lists[listIndex]\n    tabs.forEach(tab => list.tabs.push(tab))\n    await listManager.updateListById(list._id, _.pick(list, 'tabs'))\n  }\n  if (opts.addHistory) {\n    for (let i = 0; i < tabs.length; i += 1) {\n\n      try {\n        await browser.history.addUrl({url: tabs[i].url})\n      } catch (e) {\n        console.debug(`${tabs[i].url} cannot be added to history`)\n      }\n    }\n  }\n  return browser.tabs.remove(tabs.map(i => i.id))\n}\n\nconst storeLeftTabs = async listIndex => storeTabs((await groupTabsInCurrentWindow()).left, listIndex)\nconst storeRightTabs = async listIndex => storeTabs((await groupTabsInCurrentWindow()).right, listIndex)\nconst storeTwoSideTabs = async listIndex => storeTabs((await groupTabsInCurrentWindow()).twoSide, listIndex)\n\nconst storeSelectedTabs = async listIndex => {\n  const tabs = await getSelectedTabs()\n  const allTabs = await getAllTabsInCurrentWindow()\n  if (tabs.length === allTabs.length) await openTabLists()\n  return storeTabs(tabs, listIndex)\n}\n\nconst storeAllTabs = async listIndex => {\n  const tabs = await getAllTabsInCurrentWindow()\n  const opts = await storage.getOptions()\n  if (opts.openTabListNoTab) await openTabLists()\n  return storeTabs(tabs, listIndex)\n}\n\nconst storeAllTabInAllWindows = async () => {\n  const windows = await browser.windows.getAll()\n  const opts = await storage.getOptions()\n  if (opts.openTabListNoTab) await openTabLists()\n  const tasks = []\n  for (const window of windows) {\n    const task = getAllInWindow(window.id).then(storeTabs)\n    tasks.push(task)\n  }\n  return Promise.all(tasks)\n}\n\nconst restoreTabs = async (tabs, windowId) => {\n  const opts = await storage.getOptions()\n  let indexOffset = 0\n  if (opts.openEnd) {\n    const tabs = await getAllTabsInCurrentWindow()\n    const {index} = tabs.pop()\n    indexOffset = index + 1\n  }\n  for (let i = 0; i < tabs.length; i += 1) {\n    const tab = tabs[i]\n    const createdTab = await browser.tabs.create({\n      url: tab.url,\n      pinned: tab.pinned,\n      index: i + indexOffset,\n      windowId,\n    })\n    if (tab.muted) browser.tabs.update(createdTab.id, {muted: true})\n  }\n}\n\nconst restoreList = (list, windowId) => restoreTabs(list.tabs, windowId)\n\nconst restoreListInNewWindow = async list => {\n  const createdWindow = await browser.windows.create({url: list.tabs.map(i => i.url)})\n  list.tabs.forEach((tab, index) => {\n    if (tab.muted) browser.tabs.update(createdWindow.tabs[index].id, {muted: true})\n  })\n}\n\nconst restoreLastestList = async () => {\n  const lists = await storage.getLists()\n  if (lists.length === 0) return true\n  const [lastest] = lists\n  await restoreList(lastest)\n  if (lastest.pinned) return true\n  return listManager.removeListById(lastest._id)\n}\n\nexport default {\n  getSelectedTabs,\n  groupTabsInCurrentWindow,\n  storeLeftTabs,\n  storeRightTabs,\n  storeSelectedTabs,\n  storeTwoSideTabs,\n  storeAllTabs,\n  storeAllTabInAllWindows,\n  restoreTabs,\n  restoreList,\n  restoreListInNewWindow,\n  restoreLastestList,\n  openTabLists,\n  openAboutPage,\n}\n\n'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n\n'better-onetab/src/common/constants.js'\n:export const COLORS = [\n  '', 'red', 'pink', 'purple',\n  'indigo', 'blue', 'cyan', 'teal',\n  'green', 'yellow', 'orange', 'brown',\n]\n\nexport const ILLEGAL_URLS = ['about:', 'chrome:', 'file:', 'wss:', 'ws:']\n\nexport const PICKED_TAB_PROPS = ['url', 'title', 'favIconUrl', 'pinned']\nexport const PICKED_LIST_RPOPS = ['_id', 'tabs', 'title', 'tags', 'time', 'pinned', 'expand', 'color', 'updatedAt']\nexport const SYNCED_LIST_PROPS = ['_id', 'tabs', 'title', 'tags', 'time', 'pinned', 'color']\n\nexport const TOKEN_KEY = 'token'\nexport const AUTH_HEADER = 'auth'\n\nexport const END_FRONT = 'front'\nexport const END_BACKGROUND = 'background'\n\nexport const SYNC_SERVICE_URL = DEBUG ? 'http:\nexport const SYNC_MAX_INTERVAL = 864e5\nexport const SYNC_MIN_INTERVAL = 3e5\n\nexport const ADD_LIST = 'addList'\nexport const UPDATE_LIST_BY_ID = 'updateListById'\nexport const REMOVE_LIST_BY_ID = 'removeListById'\nexport const CHANGE_LIST_ORDER = 'changeListOrderRelatively'\n\nexport const SENTRY_DSN = 'https:\n",
        "gt": [
            "'better-onetab/src/common/constants.js'",
            "'better-onetab/src/common/tabs.js'",
            "'better-onetab/src/background/messageHandler.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/responsibleTouchArea.js'",
            "'ruui/src/components/button.js'",
            "'ruui/src/components/index.js'"
        ],
        "content": "'ruui/src/components/responsibleTouchArea.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, TouchableOpacity, View, StyleSheet, Platform } from 'react-native';\nimport tinyColor from 'tinycolor2';\n\nimport RippleEffect from './rippleEffect';\nimport { debounce, isIos, } from '../utils';\nimport * as appActions from '../store/action/app';\nimport type { Style, Element, SnappingDirection, } from '../typeDefinition';\n\ntype Props = {\n\tchildren?: Element,\n\twrapperStyle?: Style,\n\tinnerStyle?: Style,\n\ttooltip?: String | Element,\n\ttooltipWrapperStyle?: Style,\n\ttooltipInnerStyle?: Style,\n\ttooltipDirection?: SnappingDirection,\n\ttooltipPositionSpacing?: number,\n\ttooltipPositionOffset?: Object,\n\tripple?: boolean,\n\tstaticRipple?: boolean,\n\trippleColor?: string,\n\trippleInitialOpacity?: number,\n\trippleInitialScale?: number,\n\trippleAnimationSpeed?: number,\n\tfade?: boolean,\n\tfadeLevel?: number,\n\traise?: boolean,\n\tdebounce?: number,\n\tdisabled?: boolean,\n\tactiveOpacity?: number,\n\tonPress?: Function,\n\tonPressIn?: Function,\n\tonPressOut?: Function,\n\tonMouseEnter?: Function,\n\tonMouseLeave?: Function,\n};\n\nconst MAX_PARTICLE_COUNT = 5;\n\nclass RuuiResponsibleTouchArea extends Component<any, Props, any> {\n\tprops: Props;\n\n\tstatic contextTypes = {\n\t\truuiStore: PropTypes.object,\n\t};\n\n\tstatic defaultProps = {\n\t\tstaticRipple: false,\n\t\tactiveOpacity: 0.7,\n\t\tripple: true,\n\t\traise: false,\n\t\tfade: false,\n\t\tfadeLevel: 0.1,\n\t\tdisabled: false,\n\t};\n\n\trippleIndex = 0;\n\n\tcomponentWillUnmount() {\n\t\tthis.willUnmount = true;\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tripples: [],\n\t\t\tmouseInside: false,\n\t\t};\n\n\t\tthis.raiseAnimation = new Animated.Value(0);\n\t\tthis.fadeAnimation = new Animated.Value(0);\n\n\t\tif (props.debounce) {\n\t\t\tthis.handlePress = debounce(this.handlePress.bind(this), props.debounce);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { children, wrapperStyle, innerStyle, disabled, onPressIn, onPressOut, onPress, ripple, fade, fadeLevel, raise, ...otherProps } = this.props,\n\t\t\tflattenWrapperStyles = StyleSheet.flatten(wrapperStyle) || {},\n\t\t\tplatformStyles = Platform.select({\n\t\t\t\tweb: { cursor: 'pointer', userSelect: 'none' },\n\t\t\t}),\n\t\t\tisLightBackground = tinyColor(flattenWrapperStyles.backgroundColor).getBrightness() > 180,\n\t\t\twrapperBorderRadius = extractBorderRadius(flattenWrapperStyles);\n\n\t\treturn <View\n\t\t\tonMouseLeave={this.onMouseLeave}\n\t\t\tonMouseEnter={this.onMouseEnter}\n\t\t\tref={(instance) => { this.wrapperView = instance; }}\n\t\t\tcollapsable={false}\n\t\t\tstyle={[wrapperStyle, platformStyles]}>\n\n\t\t\t{raise && this.renderShadowEffect(raise, isLightBackground, wrapperBorderRadius)}\n\t\t\t{fade && this.renderFadeEffect(fade, fadeLevel, isLightBackground, wrapperBorderRadius)}\n\t\t\t{ripple && this.renderRippleEffect(isLightBackground, wrapperBorderRadius)}\n\n\t\t\t<TouchableOpacity\n\t\t\t\tdisabled={disabled}\n\t\t\t\tstyle={innerStyle}\n\t\t\t\tonPressIn={this.onPressIn}\n\t\t\t\tonPressOut={this.onPressOut}\n\t\t\t\tonPress={this.onPress}\n\t\t\t\tonStartShouldSetResponderCapture={() => !disabled}\n\t\t\t\t{...otherProps}>\n\t\t\t\t<View pointerEvents=\"none\">\n\t\t\t\t\t{children}\n\t\t\t\t</View>\n\t\t\t</TouchableOpacity>\n\t\t</View>;\n\t}\n\n\trenderShadowEffect(raise: Boolean, isLightBackground: Boolean, wrapperBorderRadius) {\n\t\tconst shadowOpacity = this.raiseAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1], outputRange: [raise ? 0.15 : 0, 0.6],\n\t\t\t}),\n\t\t\tshadow = raise && {\n\t\t\t\tborderRadius: 3,\n\t\t\t\tshadowColor: '#666666',\n\t\t\t\topacity: shadowOpacity,\n\t\t\t\tshadowOpacity: 1,\n\t\t\t\tshadowRadius: raiseShadowRadius,\n\t\t\t\tshadowOffset: { width: 0, height: 2 },\n\t\t\t};\n\n\t\treturn <Animated.View\n\t\t\tstyle={[styles.fullSizeAbsolute, shadow, wrapperBorderRadius]}/>;\n\t}\n\n\trenderFadeEffect(fade, fadeLevel, isLightBackground: Boolean, wrapperBorderRadius) {\n\t\tconst opacity = this.fadeAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1],\n\t\t\t\toutputRange: [0, fadeLevel],\n\t\t\t\textrapolate: 'clamp',\n\t\t\t}),\n\t\t\tmaskStyles = {\n\t\t\t\tbackgroundColor: isLightBackground ? '#000000' : '#ffffff',\n\t\t\t\topacity,\n\t\t\t};\n\n\t\treturn <Animated.View style={[styles.fullSizeAbsolute, wrapperBorderRadius, maskStyles]}/>;\n\t}\n\n\trenderRippleEffect(isLightBackground: Boolean, wrapperBorderRadius) {\n\t\treturn <View style={[styles.fullSizeAbsolute, wrapperBorderRadius, { overflow: 'hidden' }]}>\n\t\t\t{this.renderRipples()}\n\t\t</View>;\n\t}\n\n\trenderRipples() {\n\t\tconst { ripples } = this.state,\n\t\t\t{ rippleInitialOpacity, rippleInitialScale, rippleAnimationSpeed } = this.props;\n\n\t\treturn ripples.map((ripple) => {\n\t\t\treturn <RippleEffect\n\t\t\t\tkey={ripple.index}\n\t\t\t\tstyle={ripple.style}\n\t\t\t\tindex={ripple.index}\n\t\t\t\tinitialOpacity={rippleInitialOpacity}\n\t\t\t\tinitialScale={rippleInitialScale}\n\t\t\t\tspeed={rippleAnimationSpeed}/>;\n\t\t});\n\t}\n\n\tonPress = (e) => {\n\t\tconst { onPress } = this.props;\n\t\tif (onPress) setTimeout(() => onPress(e), 0);\n\t};\n\n\tonPressIn = (e) => {\n\t\tconst { ripples } = this.state,\n\t\t\t{ wrapperStyle, disabled, raise, staticRipple, rippleColor, onPressIn } = this.props;\n\n\t\tif (disabled) return;\n\n\t\tconst flattenWrapperStyles = StyleSheet.flatten(wrapperStyle) || {},\n\t\t\tisLightBackground = tinyColor(flattenWrapperStyles.backgroundColor).getBrightness() > 180;\n\n\t\tif (raise) this.playRaiseAnimation(1);\n\n\t\tthis.playFadeAnimation(1);\n\n\t\tconst { locationX, locationY, offsetX, offsetY, pageX, pageY } = e.nativeEvent;\n\n\t\tthis.wrapperView.measure((fx, fy, wrapperWidth, wrapperHeight, px, py) => {\n\t\t\tlet rippleRadius = 0, ripplePosition;\n\t\t\tconst touchX = locationX || offsetX, touchY = locationY || offsetY;\n\n\t\t\tif (staticRipple || !touchX) {\n\t\t\t\trippleRadius = wrapperWidth / 2;\n\t\t\t\tripplePosition = {\n\t\t\t\t\ttop: (wrapperHeight / 2) - rippleRadius,\n\t\t\t\t\tleft: (wrapperWidth / 2) - rippleRadius,\n\t\t\t\t};\n\t\t\t} else {\n\n\t\t\t\tif (touchX > wrapperWidth / 2) {\n\t\t\t\t\tif (touchY > wrapperHeight / 2) {\n\n\t\t\t\t\t\trippleRadius = Math.sqrt((touchX * touchX) + (touchY * touchY));\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst paddedY = touchY - wrapperHeight;\n\t\t\t\t\t\trippleRadius = Math.sqrt((touchX * touchX) + (paddedY * paddedY));\n\t\t\t\t\t}\n\t\t\t\t} else if (touchY > wrapperHeight / 2) {\n\n\t\t\t\t\tconst paddedX = touchX - wrapperWidth;\n\t\t\t\t\trippleRadius = Math.sqrt((paddedX * paddedX) + (touchY * touchY));\n\t\t\t\t} else {\n\n\t\t\t\t\tconst paddedX = touchX - wrapperWidth, paddedY = touchY - wrapperHeight;\n\t\t\t\t\trippleRadius = Math.sqrt((paddedX * paddedX) + (paddedY * paddedY));\n\t\t\t\t}\n\n\t\t\t\trippleRadius *= 1.2;\n\t\t\t\tripplePosition = {\n\t\t\t\t\ttop: touchY - rippleRadius,\n\t\t\t\t\tleft: touchX - rippleRadius,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.rippleIndex += 1;\n\t\t\tconst defaultRippleColor = isLightBackground ? '#333333' : '#ffffff',\n\t\t\t\tnewRipple = {\n\t\t\t\t\tindex: this.rippleIndex,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\twidth: rippleRadius * 2,\n\t\t\t\t\t\theight: rippleRadius * 2,\n\t\t\t\t\t\tborderRadius: rippleRadius,\n\t\t\t\t\t\tbackgroundColor: rippleColor || defaultRippleColor,\n\t\t\t\t\t\t...ripplePosition,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tlet nextRipples = [newRipple, ...ripples];\n\n\t\t\tif (nextRipples.length > MAX_PARTICLE_COUNT) {\n\t\t\t\tnextRipples = nextRipples.slice(0, MAX_PARTICLE_COUNT);\n\t\t\t}\n\n\t\t\tif (!this.willUnmount) this.setState({ ripples: nextRipples });\n\t\t});\n\n\t\tif (onPressIn) onPressIn(e);\n\t};\n\n\tonPressOut = (e, forceFade = false) => {\n\t\tconst { mouseInside } = this.state,\n\t\t\t{ raise, onPressOut } = this.props;\n\n\t\tif (raise) this.playRaiseAnimation(0);\n\t\tif (onPressOut && e) onPressOut(e);\n\n\t\tif (forceFade === true || !mouseInside) {\n\t\t\tthis.playFadeAnimation(0);\n\t\t}\n\t};\n\n\tonMouseEnter = () => {\n\t\tconst { ruuiStore } = this.context;\n\t\tconst { disabled, tooltip, tooltipWrapperStyle, tooltipInnerStyle, tooltipDirection, tooltipPositionSpacing, tooltipPositionOffset } = this.props;\n\n\t\tthis.setState({ mouseInside: true });\n\n\t\tif (!disabled) {\n\t\t\tthis.playFadeAnimation(1);\n\n\t\t\tif (tooltip) {\n\t\t\t\tthis.wrapperView.measure((x, y, width, height, pageX, pageY) => {\n\t\t\t\t\truuiStore.dispatch(appActions.toggleTooltip(true, {\n\t\t\t\t\t\ttargetLayout: { x: pageX, y: pageY, width, height },\n\t\t\t\t\t\tdirection: tooltipDirection,\n\t\t\t\t\t\tpositionSpacing: tooltipPositionSpacing,\n\t\t\t\t\t\tpositionOffset: tooltipPositionOffset,\n\t\t\t\t\t\tcontent: tooltip,\n\t\t\t\t\t\twrapperStyle: tooltipWrapperStyle,\n\t\t\t\t\t\tinnerStyle: tooltipInnerStyle,\n\t\t\t\t\t}));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tonMouseLeave = () => {\n\t\tconst { ruuiStore } = this.context;\n\t\tconst { disabled, tooltip } = this.props;\n\n\t\tthis.onPressOut(null, true);\n\t\tthis.setState({ mouseInside: false });\n\n\t\tif (!disabled && tooltip) {\n\t\t\truuiStore.dispatch(appActions.toggleTooltip(false));\n\t\t}\n\t};\n\n\tplayRaiseAnimation = (toValue: Number) => {\n\t\tif (this.raisingAnimation) this.raisingAnimation.clear();\n\n\t\tconst animations = [\n\t\t\tAnimated.timing(this.raiseAnimation, {\n\t\t\t\ttoValue,\n\t\t\t\tduration: 500,\n\t\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\t\tuseNativeDriver: false,\n\t\t\t}),\n\t\t];\n\n\t\tthis.raisingAnimation = Animated.parallel(animations).start();\n\t};\n\n\tplayFadeAnimation = (toValue: Number) => {\n\t\tif (this.fadingAnimation) this.fadingAnimation.clear();\n\n\t\tthis.fadingAnimation = Animated.timing(this.fadeAnimation, {\n\t\t\ttoValue,\n\t\t\tduration: 800,\n\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\tuseNativeDriver: true,\n\t\t}).start();\n\t};\n}\n\nexport default RuuiResponsibleTouchArea;\n\nfunction extractBorderRadius(baseStyles) {\n\treturn [\n\t\t'borderRadius',\n\t\t'borderTopLeftRadius',\n\t\t'borderTopRightRadius',\n\t\t'borderBottomLeftRadius',\n\t\t'borderBottomRightRadius',\n\t].reduce((accumulate, currentAttribute) => {\n\t\tif (baseStyles[currentAttribute]) {\n\t\t\taccumulate[currentAttribute] = baseStyles[currentAttribute];\n\t\t}\n\n\t\treturn accumulate;\n\t}, {});\n}\n\nconst raiseShadowRadius = isIos ? 4 : 10;\nconst styles = StyleSheet.create({\n\tfullSizeAbsolute: {\n\t\tposition: 'absolute',\n\t\ttop: 0, bottom: 0, right: 0, left: 0,\n\t},\n});\n\n'ruui/src/components/button.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, StyleSheet } from 'react-native';\nimport ResponsibleTouchArea from './responsibleTouchArea';\nimport { colors, valueAt } from '../utils';\nimport type { Style, Element, SnappingDirection, } from '../typeDefinition';\n\ntype Props = {\n\ttitle?: String,\n\ticon?: Element,\n\trightIcon?: Element,\n\tchildren?: Element,\n\twrapperStyle?: Style,\n\tinnerStyle?: Style,\n\ttextStyle?: Style,\n\ttooltip?: String | Element,\n\ttooltipWrapperStyle?: Style,\n\ttooltipDirection?: SnappingDirection,\n\ttooltipPositionSpacing?: Number,\n\ttooltipPositionOffset?: Object,\n\tripple?: Boolean,\n\tstaticRipple?: Boolean,\n\trippleColor?: String,\n\trippleInitialOpacity?: Number,\n\trippleInitialScale?: Number,\n\trippleAnimationSpeed?: Number,\n\tfade?: Boolean,\n\tfadeLevel?: Number,\n\traise?: Boolean,\n\tdebounce?: Number,\n\tdisabled?: Boolean,\n\tactiveOpacity?: Number,\n\tonPress?: Function,\n\tonPressIn?: Function,\n\tonPressOut?: Function,\n\tonMouseEnter?: Function,\n\tonMouseLeave?: Function,\n};\n\nclass RuuiButton extends Component<any, Props, any> {\n\tprops: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tstatic defaultProps = {\n\t\tripple: true,\n\t\tstaticRipple: false,\n\t\ttitle: 'TITLE',\n\t\tdisabled: false,\n\t\traise: true,\n\t\tfade: true,\n\t\tfadeLevel: 0.2,\n\t};\n\n\trender() {\n\t\tconst { wrapperStyle, innerStyle, ...otherProps } = this.props,\n\t\t\truuiStyles = valueAt(this, 'context.ruuiConfigs.button.styles', styles);\n\n\t\treturn <ResponsibleTouchArea\n\t\t\twrapperStyle={[ruuiStyles.wrapper, wrapperStyle]}\n\t\t\tinnerStyle={[ruuiStyles.contentContainer, innerStyle]}\n\t\t\t{...otherProps}>\n\t\t\t{this.renderContent()}\n\t\t</ResponsibleTouchArea>;\n\t}\n\n\trenderContent() {\n\t\tconst { title, textStyle, icon, rightIcon, children } = this.props,\n\t\t\truuiStyles = valueAt(this, 'context.ruuiConfigs.button.styles', styles),\n\t\t\ttextStyles = [ruuiStyles.titleText, textStyle];\n\n\t\tif (children) {\n\t\t\treturn children;\n\t\t} else {\n\t\t\treturn <View style={ruuiStyles.innerContainer}>\n\t\t\t\t<View style={ruuiStyles.leftContainer}>{icon}</View>\n\t\t\t\t<Text style={textStyles}>{title}</Text>\n\t\t\t\t<View style={ruuiStyles.rightContainer}>{rightIcon}</View>\n\t\t\t</View>;\n\t\t}\n\t}\n}\n\nexport default RuuiButton;\n\nexport const styles = StyleSheet.create({\n\twrapper: {\n\t\tbackgroundColor: colors.iOsBlue,\n\t\tborderRadius: 3,\n\t},\n\tcontentContainer: {\n\t\tpadding: 10,\n\t\tflexDirection: 'row',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tinnerContainer: {\n\t\tflexDirection: 'row',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tleftContainer: {\n\t\tmarginRight: 6,\n\t},\n\trightContainer: {\n\t\tmarginLeft: 6,\n\t},\n\ttitleText: {\n\t\tcolor: '#FFFFFF',\n\t\tbackgroundColor: 'transparent',\n\t},\n});\n\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n",
        "gt": [
            "'ruui/src/components/responsibleTouchArea.js'",
            "'ruui/src/components/button.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'Chatire/chatire-frontend/build/webpack.base.conf.js'",
            "'Chatire/chatire-frontend/build/utils.js'",
            "'Chatire/chatire-frontend/build/webpack.prod.conf.js'",
            "'Chatire/chatire-frontend/build/vue-loader.conf.js'",
            "'Chatire/chatire-frontend/test/e2e/runner.js'"
        ],
        "content": "'Chatire/chatire-frontend/build/webpack.base.conf.js'\n:'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst config = require('../config')\nconst vueLoaderConfig = require('./vue-loader.conf')\n\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\nconst createLintingRule = () => ({\n  test: /\\.(js|vue)$/,\n  loader: 'eslint-loader',\n  enforce: 'pre',\n  include: [resolve('src'), resolve('test')],\n  options: {\n    formatter: require('eslint-friendly-formatter'),\n    emitWarning: !config.dev.showEslintErrorsInOverlay\n  }\n})\n\nmodule.exports = {\n  context: path.resolve(__dirname, '../'),\n  entry: {\n    app: './src/main.js'\n  },\n  output: {\n    path: config.build.assetsRoot,\n    filename: '[name].js',\n    publicPath: process.env.NODE_ENV === 'production'\n      ? config.build.assetsPublicPath\n      : config.dev.assetsPublicPath\n  },\n  resolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src'),\n    }\n  },\n  module: {\n    rules: [\n      ...(config.dev.useEslint ? [createLintingRule()] : []),\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test'), resolve('node_modules/webpack-dev-server/client')]\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('media/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  },\n  node: {\n\n\n    setImmediate: false,\n\n\n    dgram: 'empty',\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty',\n    child_process: 'empty'\n  }\n}\n\n'Chatire/chatire-frontend/build/utils.js'\n:'use strict'\nconst path = require('path')\nconst config = require('../config')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst packageConfig = require('../package.json')\n\nexports.assetsPath = function (_path) {\n  const assetsSubDirectory = process.env.NODE_ENV === 'production'\n    ? config.build.assetsSubDirectory\n    : config.dev.assetsSubDirectory\n\n  return path.posix.join(assetsSubDirectory, _path)\n}\n\nexports.cssLoaders = function (options) {\n  options = options || {}\n\n  const cssLoader = {\n    loader: 'css-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n  const postcssLoader = {\n    loader: 'postcss-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n\n  function generateLoaders (loader, loaderOptions) {\n    const loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]\n\n    if (loader) {\n      loaders.push({\n        loader: loader + '-loader',\n        options: Object.assign({}, loaderOptions, {\n          sourceMap: options.sourceMap\n        })\n      })\n    }\n\n\n\n    if (options.extract) {\n      return ExtractTextPlugin.extract({\n        use: loaders,\n        fallback: 'vue-style-loader'\n      })\n    } else {\n      return ['vue-style-loader'].concat(loaders)\n    }\n  }\n\n\n  return {\n    css: generateLoaders(),\n    postcss: generateLoaders(),\n    less: generateLoaders('less'),\n    sass: generateLoaders('sass', { indentedSyntax: true }),\n    scss: generateLoaders('sass'),\n    stylus: generateLoaders('stylus'),\n    styl: generateLoaders('stylus')\n  }\n}\n\n\nexports.styleLoaders = function (options) {\n  const output = []\n  const loaders = exports.cssLoaders(options)\n\n  for (const extension in loaders) {\n    const loader = loaders[extension]\n    output.push({\n      test: new RegExp('\\\\.' + extension + '$'),\n      use: loader\n    })\n  }\n\n  return output\n}\n\nexports.createNotifierCallback = () => {\n  const notifier = require('node-notifier')\n\n  return (severity, errors) => {\n    if (severity !== 'error') return\n\n    const error = errors[0]\n    const filename = error.file && error.file.split('!').pop()\n\n    notifier.notify({\n      title: packageConfig.name,\n      message: severity + ': ' + error.name,\n      subtitle: filename || '',\n      icon: path.join(__dirname, 'logo.png')\n    })\n  }\n}\n\n'Chatire/chatire-frontend/build/webpack.prod.conf.js'\n:'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst webpack = require('webpack')\nconst config = require('../config')\nconst merge = require('webpack-merge')\nconst baseWebpackConfig = require('./webpack.base.conf')\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nconst env = process.env.NODE_ENV === 'testing'\n  ? require('../config/test.env')\n  : require('../config/prod.env')\n\nconst webpackConfig = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({\n      sourceMap: config.build.productionSourceMap,\n      extract: true,\n      usePostCSS: true\n    })\n  },\n  devtool: config.build.productionSourceMap ? config.build.devtool : false,\n  output: {\n    path: config.build.assetsRoot,\n    filename: utils.assetsPath('js/[name].[chunkhash].js'),\n    chunkFilename: utils.assetsPath('js/[id].[chunkhash].js')\n  },\n  plugins: [\n\n    new webpack.DefinePlugin({\n      'process.env': env\n    }),\n    new UglifyJsPlugin({\n      uglifyOptions: {\n        compress: {\n          warnings: false\n        }\n      },\n      sourceMap: config.build.productionSourceMap,\n      parallel: true\n    }),\n\n    new ExtractTextPlugin({\n      filename: utils.assetsPath('css/[name].[contenthash].css'),\n\n\n\n\n      allChunks: true,\n    }),\n\n\n    new OptimizeCSSPlugin({\n      cssProcessorOptions: config.build.productionSourceMap\n        ? { safe: true, map: { inline: false } }\n        : { safe: true }\n    }),\n\n\n\n    new HtmlWebpackPlugin({\n      filename: process.env.NODE_ENV === 'testing'\n        ? 'index.html'\n        : config.build.index,\n      template: 'index.html',\n      inject: true,\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeAttributeQuotes: true\n\n\n      },\n\n      chunksSortMode: 'dependency'\n    }),\n\n    new webpack.HashedModuleIdsPlugin(),\n\n    new webpack.optimize.ModuleConcatenationPlugin(),\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks (module) {\n\n        return (\n          module.resource &&\n          /\\.js$/.test(module.resource) &&\n          module.resource.indexOf(\n            path.join(__dirname, '../node_modules')\n          ) === 0\n        )\n      }\n    }),\n\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest',\n      minChunks: Infinity\n    }),\n\n\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'app',\n      async: 'vendor-async',\n      children: true,\n      minChunks: 3\n    }),\n\n\n    new CopyWebpackPlugin([\n      {\n        from: path.resolve(__dirname, '../static'),\n        to: config.build.assetsSubDirectory,\n        ignore: ['.*']\n      }\n    ])\n  ]\n})\n\nif (config.build.productionGzip) {\n  const CompressionWebpackPlugin = require('compression-webpack-plugin')\n\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      asset: '[path].gz[query]',\n      algorithm: 'gzip',\n      test: new RegExp(\n        '\\\\.(' +\n        config.build.productionGzipExtensions.join('|') +\n        ')$'\n      ),\n      threshold: 10240,\n      minRatio: 0.8\n    })\n  )\n}\n\nif (config.build.bundleAnalyzerReport) {\n  const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin\n  webpackConfig.plugins.push(new BundleAnalyzerPlugin())\n}\n\nmodule.exports = webpackConfig\n\n'Chatire/chatire-frontend/build/vue-loader.conf.js'\n:'use strict'\nconst utils = require('./utils')\nconst config = require('../config')\nconst isProduction = process.env.NODE_ENV === 'production'\nconst sourceMapEnabled = isProduction\n  ? config.build.productionSourceMap\n  : config.dev.cssSourceMap\n\nmodule.exports = {\n  loaders: utils.cssLoaders({\n    sourceMap: sourceMapEnabled,\n    extract: isProduction\n  }),\n  cssSourceMap: sourceMapEnabled,\n  cacheBusting: config.dev.cacheBusting,\n  transformToRequire: {\n    video: ['src', 'poster'],\n    source: 'src',\n    img: 'src',\n    image: 'xlink:href'\n  }\n}\n\n'Chatire/chatire-frontend/test/e2e/runner.js'\n:\nprocess.env.NODE_ENV = 'testing'\n\nconst webpack = require('webpack')\nconst DevServer = require('webpack-dev-server')\n\nconst webpackConfig = require('../../build/webpack.prod.conf')\nconst devConfigPromise = require('../../build/webpack.dev.conf')\n\nlet server\n\ndevConfigPromise.then(devConfig => {\n  const devServerOptions = devConfig.devServer\n  const compiler = webpack(webpackConfig)\n  server = new DevServer(compiler, devServerOptions)\n  const port = devServerOptions.port\n  const host = devServerOptions.host\n  return server.listen(port, host)\n})\n.then(() => {\n\n\n\n\n\n\n\n  let opts = process.argv.slice(2)\n  if (opts.indexOf('--config') === -1) {\n    opts = opts.concat(['--config', 'test/e2e/nightwatch.conf.js'])\n  }\n  if (opts.indexOf('--env') === -1) {\n    opts = opts.concat(['--env', 'chrome'])\n  }\n\n  const spawn = require('cross-spawn')\n  const runner = spawn('./node_modules/.bin/nightwatch', opts, { stdio: 'inherit' })\n\n  runner.on('exit', function (code) {\n    server.close()\n    process.exit(code)\n  })\n\n  runner.on('error', function (err) {\n    server.close()\n    throw err\n  })\n})\n",
        "gt": [
            "'Chatire/chatire-frontend/build/utils.js'",
            "'Chatire/chatire-frontend/build/vue-loader.conf.js'",
            "'Chatire/chatire-frontend/build/webpack.base.conf.js'",
            "'Chatire/chatire-frontend/build/webpack.prod.conf.js'",
            "'Chatire/chatire-frontend/test/e2e/runner.js'"
        ]
    },
    {
        "files": [
            "'place-to-stay/client/src/index.js'",
            "'place-to-stay/client/src/components/addRoom/AddRoom.js'",
            "'place-to-stay/client/src/pages/Home.js'",
            "'place-to-stay/client/src/components/BottomNav.js'",
            "'place-to-stay/client/src/App.js'",
            "'place-to-stay/client/src/components/addRoom/addImages/AddImages.js'"
        ],
        "content": "'place-to-stay/client/src/index.js'\n:import { createRoot } from 'react-dom/client';\nimport App from './App';\nimport ContextProvider from './context/ContextProvider';\n\ncreateRoot(document.getElementById('root')).render(\n  <ContextProvider>\n    <App />\n  </ContextProvider>\n);\n\n'place-to-stay/client/src/components/addRoom/AddRoom.js'\n:import { Cancel, Send } from '@mui/icons-material';\nimport {\n  Box,\n  Button,\n  Container,\n  Stack,\n  Step,\n  StepButton,\n  Stepper,\n} from '@mui/material';\nimport React, { useEffect, useState } from 'react';\nimport { useValue } from '../../context/ContextProvider';\nimport AddDetails from './addDetails/AddDetails';\nimport AddImages from './addImages/AddImages';\nimport AddLocation from './addLocation/AddLocation';\nimport { clearRoom, createRoom, updateRoom } from '../../actions/room';\nimport { useNavigate } from 'react-router-dom';\n\nconst AddRoom = () => {\n  const {\n    state: {\n      images,\n      details,\n      location,\n      currentUser,\n      updatedRoom,\n      deletedImages,\n      addedImages,\n    },\n    dispatch,\n  } = useValue();\n  const [activeStep, setActiveStep] = useState(0);\n  const [steps, setSteps] = useState([\n    { label: 'Location', completed: false },\n    { label: 'Details', completed: false },\n    { label: 'Images', completed: false },\n  ]);\n  const [showSubmit, setShowSubmit] = useState(false);\n  const handleNext = () => {\n    if (activeStep < steps.length - 1) {\n      setActiveStep((activeStep) => activeStep + 1);\n    } else {\n      const stepIndex = findUnfinished();\n      setActiveStep(stepIndex);\n    }\n  };\n  const checkDisabled = () => {\n    if (activeStep < steps.length - 1) return false;\n    const index = findUnfinished();\n    if (index !== -1) return false;\n    return true;\n  };\n  const findUnfinished = () => {\n    return steps.findIndex((step) => !step.completed);\n  };\n\n  useEffect(() => {\n    if (images.length) {\n      if (!steps[2].completed) setComplete(2, true);\n    } else {\n      if (steps[2].completed) setComplete(2, false);\n    }\n  }, [images]);\n  useEffect(() => {\n    if (details.title.length > 4 && details.description.length > 9) {\n      if (!steps[1].completed) setComplete(1, true);\n    } else {\n      if (steps[1].completed) setComplete(1, false);\n    }\n  }, [details]);\n  useEffect(() => {\n    if (location.lng || location.lat) {\n      if (!steps[0].completed) setComplete(0, true);\n    } else {\n      if (steps[0].completed) setComplete(0, false);\n    }\n  }, [location]);\n  const setComplete = (index, status) => {\n    setSteps((steps) => {\n      steps[index].completed = status;\n      return [...steps];\n    });\n  };\n  useEffect(() => {\n    if (findUnfinished() === -1) {\n      if (!showSubmit) setShowSubmit(true);\n    } else {\n      if (showSubmit) setShowSubmit(false);\n    }\n  }, [steps]);\n\n  const handleSubmit = () => {\n    const room = {\n      lng: location.lng,\n      lat: location.lat,\n      price: details.price,\n      title: details.title,\n      description: details.description,\n      images,\n    };\n    if (updatedRoom)\n      return updateRoom(\n        room,\n        currentUser,\n        dispatch,\n        updatedRoom,\n        deletedImages\n      );\n    createRoom(room, currentUser, dispatch);\n  };\n\n  const navigate = useNavigate();\n  const handleCancel = () => {\n    if (updatedRoom) {\n      navigate('/dashboard/rooms');\n      clearRoom(dispatch, currentUser, addedImages, updatedRoom);\n    } else {\n      dispatch({ type: 'UPDATE_SECTION', payload: 0 });\n      clearRoom(dispatch, currentUser, images);\n    }\n  };\n  return (\n    <Container sx={{ my: 4 }}>\n      <Stepper\n        alternativeLabel\n        nonLinear\n        activeStep={activeStep}\n        sx={{ mb: 3 }}\n      >\n        {steps.map((step, index) => (\n          <Step key={step.label} completed={step.completed}>\n            <StepButton onClick={() => setActiveStep(index)}>\n              {step.label}\n            </StepButton>\n          </Step>\n        ))}\n      </Stepper>\n      <Box sx={{ pb: 7 }}>\n        {\n          {\n            0: <AddLocation />,\n            1: <AddDetails />,\n            2: <AddImages />,\n          }[activeStep]\n        }\n\n        <Stack direction=\"row\" sx={{ pt: 2, justifyContent: 'space-around' }}>\n          <Button\n            color=\"inherit\"\n            disabled={!activeStep}\n            onClick={() => setActiveStep((activeStep) => activeStep - 1)}\n          >\n            Back\n          </Button>\n          <Button disabled={checkDisabled()} onClick={handleNext}>\n            Next\n          </Button>\n        </Stack>\n\n        <Stack\n          sx={{ alignItems: 'center', justifyContent: 'center', gap: 2 }}\n          direction=\"row\"\n        >\n          {showSubmit && (\n            <Button\n              variant=\"contained\"\n              endIcon={<Send />}\n              onClick={handleSubmit}\n            >\n              {updatedRoom ? 'Update' : 'Submit'}\n            </Button>\n          )}\n          <Button\n            variant=\"outlined\"\n            endIcon={<Cancel />}\n            onClick={handleCancel}\n          >\n            Cancel\n          </Button>\n        </Stack>\n      </Box>\n    </Container>\n  );\n};\n\nexport default AddRoom;\n\n'place-to-stay/client/src/pages/Home.js'\n:import BottomNav from '../components/BottomNav';\nimport NavBar from '../components/NavBar';\nimport Login from '../components/user/Login';\n\nconst Home = () => {\n  return (\n    <>\n      <Login />\n      <NavBar />\n      <BottomNav />\n    </>\n  );\n};\n\nexport default Home;\n\n'place-to-stay/client/src/components/BottomNav.js'\n:import {\n  BottomNavigation,\n  BottomNavigationAction,\n  Box,\n  Paper,\n} from '@mui/material';\nimport { AddLocationAlt, Bed, LocationOn } from '@mui/icons-material';\nimport { useEffect, useRef, useState } from 'react';\nimport ClusterMap from './map/ClusterMap';\nimport Rooms from './rooms/Rooms';\nimport AddRoom from './addRoom/AddRoom';\nimport Protected from './protected/Protected';\nimport { useValue } from '../context/ContextProvider';\n\nconst BottomNav = () => {\n  const {\n    state: { section },\n    dispatch,\n  } = useValue();\n  const ref = useRef();\n  useEffect(() => {\n    ref.current.ownerDocument.body.scrollTop = 0;\n  }, [section]);\n  return (\n    <Box ref={ref}>\n      {\n        {\n          0: <ClusterMap />,\n          1: <Rooms />,\n          2: (\n            <Protected>\n              <AddRoom />\n            </Protected>\n          ),\n        }[section]\n      }\n      <Paper\n        elevation={3}\n        sx={{ position: 'fixed', bottom: 0, left: 0, right: 0, zIndex: 2 }}\n      >\n        <BottomNavigation\n          showLabels\n          value={section}\n          onChange={(e, newValue) =>\n            dispatch({ type: 'UPDATE_SECTION', payload: newValue })\n          }\n        >\n          <BottomNavigationAction label=\"Map\" icon={<LocationOn />} />\n          <BottomNavigationAction label=\"Rooms\" icon={<Bed />} />\n          <BottomNavigationAction label=\"Add\" icon={<AddLocationAlt />} />\n        </BottomNavigation>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default BottomNav;\n\n'place-to-stay/client/src/App.js'\n:import { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport Dashboard from './pages/dashboard/Dashboard';\nimport Home from './pages/Home';\nimport Loading from './components/Loading';\nimport Notification from './components/Notification';\nimport Room from './components/rooms/Room';\n\nconst App = () => {\n  return (\n    <>\n      <Loading />\n      <Notification />\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"dashboard/*\" element={<Dashboard />} />\n          <Route path=\"*\" element={<Home />} />\n        </Routes>\n      </BrowserRouter>\n      <Room />\n    </>\n  );\n};\n\nexport default App;\n\n'place-to-stay/client/src/components/addRoom/addImages/AddImages.js'\n:import { Paper } from '@mui/material';\nimport { useCallback, useState } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport ImagesList from './ImagesList';\nimport ProgressList from './progressList/ProgressList';\n\nconst AddImages = () => {\n  const [files, setFiles] = useState([]);\n  const onDrop = useCallback((acceptedFiles) => {\n    setFiles(acceptedFiles);\n  }, []);\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: { 'image/*': [] },\n  });\n  return (\n    <>\n      <Paper\n        sx={{\n          cursor: 'pointer',\n          background: '#fafafa',\n          color: '#bdbdbd',\n          border: '1px dashed #ccc',\n          '&:hover': { border: '1px solid #ccc' },\n        }}\n      >\n        <div style={{ padding: '16px' }} {...getRootProps()}>\n          <input {...getInputProps()} />\n          {isDragActive ? (\n            <p style={{ color: 'green' }}>Drop the files here...</p>\n          ) : (\n            <p>Drag 'n' Drop some files here, or click to select files</p>\n          )}\n          <em>(images with *.jpeg, *.png, *.jpg extension will be accepted)</em>\n        </div>\n      </Paper>\n      <ProgressList {...{ files }} />\n      <ImagesList />\n    </>\n  );\n};\n\nexport default AddImages;\n",
        "gt": [
            "'place-to-stay/client/src/components/addRoom/addImages/AddImages.js'",
            "'place-to-stay/client/src/components/addRoom/AddRoom.js'",
            "'place-to-stay/client/src/components/BottomNav.js'",
            "'place-to-stay/client/src/pages/Home.js'",
            "'place-to-stay/client/src/App.js'",
            "'place-to-stay/client/src/index.js'"
        ]
    },
    {
        "files": [
            "'react-modal/src/helpers/safeHTMLElement.js'",
            "'react-modal/src/components/Modal.js'",
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/specs/index.js'",
            "'react-modal/src/helpers/ariaAppHider.js'"
        ],
        "content": "'react-modal/src/helpers/safeHTMLElement.js'\n:import ExecutionEnvironment from \"exenv\";\n\nconst EE = ExecutionEnvironment;\n\nconst SafeHTMLElement = EE.canUseDOM ? window.HTMLElement : {};\n\nexport const SafeHTMLCollection = EE.canUseDOM ? window.HTMLCollection : {};\n\nexport const SafeNodeList = EE.canUseDOM ? window.NodeList : {};\n\nexport const canUseDOM = EE.canUseDOM;\n\nexport default SafeHTMLElement;\n\n'react-modal/src/components/Modal.js'\n:import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport ModalPortal from \"./ModalPortal\";\nimport * as ariaAppHider from \"../helpers/ariaAppHider\";\nimport SafeHTMLElement, {\n  SafeNodeList,\n  SafeHTMLCollection,\n  canUseDOM\n} from \"../helpers/safeHTMLElement\";\n\nimport { polyfill } from \"react-lifecycles-compat\";\n\nexport const portalClassName = \"ReactModalPortal\";\nexport const bodyOpenClassName = \"ReactModal__Body--open\";\n\nconst isReact16 = canUseDOM && ReactDOM.createPortal !== undefined;\n\nlet createHTMLElement = name => document.createElement(name);\n\nconst getCreatePortal = () =>\n  isReact16\n    ? ReactDOM.createPortal\n    : ReactDOM.unstable_renderSubtreeIntoContainer;\n\nfunction getParentElement(parentSelector) {\n  return parentSelector();\n}\n\nclass Modal extends Component {\n  static setAppElement(element) {\n    ariaAppHider.setElement(element);\n  }\n\n\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    style: PropTypes.shape({\n      content: PropTypes.object,\n      overlay: PropTypes.object\n    }),\n    portalClassName: PropTypes.string,\n    bodyOpenClassName: PropTypes.string,\n    htmlOpenClassName: PropTypes.string,\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        base: PropTypes.string.isRequired,\n        afterOpen: PropTypes.string.isRequired,\n        beforeClose: PropTypes.string.isRequired\n      })\n    ]),\n    overlayClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        base: PropTypes.string.isRequired,\n        afterOpen: PropTypes.string.isRequired,\n        beforeClose: PropTypes.string.isRequired\n      })\n    ]),\n    appElement: PropTypes.oneOfType([\n      PropTypes.instanceOf(SafeHTMLElement),\n      PropTypes.instanceOf(SafeHTMLCollection),\n      PropTypes.instanceOf(SafeNodeList),\n      PropTypes.arrayOf(PropTypes.instanceOf(SafeHTMLElement))\n    ]),\n    onAfterOpen: PropTypes.func,\n    onRequestClose: PropTypes.func,\n    closeTimeoutMS: PropTypes.number,\n    ariaHideApp: PropTypes.bool,\n    shouldFocusAfterRender: PropTypes.bool,\n    shouldCloseOnOverlayClick: PropTypes.bool,\n    shouldReturnFocusAfterClose: PropTypes.bool,\n    preventScroll: PropTypes.bool,\n    parentSelector: PropTypes.func,\n    aria: PropTypes.object,\n    data: PropTypes.object,\n    role: PropTypes.string,\n    contentLabel: PropTypes.string,\n    shouldCloseOnEsc: PropTypes.bool,\n    overlayRef: PropTypes.func,\n    contentRef: PropTypes.func,\n    id: PropTypes.string,\n    overlayElement: PropTypes.func,\n    contentElement: PropTypes.func\n  };\n\n\n  static defaultProps = {\n    isOpen: false,\n    portalClassName,\n    bodyOpenClassName,\n    role: \"dialog\",\n    ariaHideApp: true,\n    closeTimeoutMS: 0,\n    shouldFocusAfterRender: true,\n    shouldCloseOnEsc: true,\n    shouldCloseOnOverlayClick: true,\n    shouldReturnFocusAfterClose: true,\n    preventScroll: false,\n    parentSelector: () => document.body,\n    overlayElement: (props, contentEl) => <div {...props}>{contentEl}</div>,\n    contentElement: (props, children) => <div {...props}>{children}</div>\n  };\n\n  static defaultStyles = {\n    overlay: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: \"rgba(255, 255, 255, 0.75)\"\n    },\n    content: {\n      position: \"absolute\",\n      top: \"40px\",\n      left: \"40px\",\n      right: \"40px\",\n      bottom: \"40px\",\n      border: \"1px solid #ccc\",\n      background: \"#fff\",\n      overflow: \"auto\",\n      WebkitOverflowScrolling: \"touch\",\n      borderRadius: \"4px\",\n      outline: \"none\",\n      padding: \"20px\"\n    }\n  };\n\n  componentDidMount() {\n    if (!canUseDOM) return;\n\n    if (!isReact16) {\n      this.node = createHTMLElement(\"div\");\n    }\n    this.node.className = this.props.portalClassName;\n\n    const parent = getParentElement(this.props.parentSelector);\n    parent.appendChild(this.node);\n\n    !isReact16 && this.renderPortal(this.props);\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    const prevParent = getParentElement(prevProps.parentSelector);\n    const nextParent = getParentElement(this.props.parentSelector);\n    return { prevParent, nextParent };\n  }\n\n  componentDidUpdate(prevProps, _, snapshot) {\n    if (!canUseDOM) return;\n    const { isOpen, portalClassName } = this.props;\n\n    if (prevProps.portalClassName !== portalClassName) {\n      this.node.className = portalClassName;\n    }\n\n    const { prevParent, nextParent } = snapshot;\n    if (nextParent !== prevParent) {\n      prevParent.removeChild(this.node);\n      nextParent.appendChild(this.node);\n    }\n\n\n    if (!prevProps.isOpen && !isOpen) return;\n\n    !isReact16 && this.renderPortal(this.props);\n  }\n\n  componentWillUnmount() {\n    if (!canUseDOM || !this.node || !this.portal) return;\n\n    const state = this.portal.state;\n    const now = Date.now();\n    const closesAt =\n      state.isOpen &&\n      this.props.closeTimeoutMS &&\n      (state.closesAt || now + this.props.closeTimeoutMS);\n\n    if (closesAt) {\n      if (!state.beforeClose) {\n        this.portal.closeWithTimeout();\n      }\n\n      setTimeout(this.removePortal, closesAt - now);\n    } else {\n      this.removePortal();\n    }\n  }\n\n  removePortal = () => {\n    !isReact16 && ReactDOM.unmountComponentAtNode(this.node);\n    const parent = getParentElement(this.props.parentSelector);\n    if (parent && parent.contains(this.node)) {\n      parent.removeChild(this.node);\n    } else {\n\n      console.warn(\n        'React-Modal: \"parentSelector\" prop did not returned any DOM ' +\n          \"element. Make sure that the parent element is unmounted to \" +\n          \"avoid any memory leaks.\"\n      );\n    }\n  };\n\n  portalRef = ref => {\n    this.portal = ref;\n  };\n\n  renderPortal = props => {\n    const createPortal = getCreatePortal();\n    const portal = createPortal(\n      this,\n      <ModalPortal defaultStyles={Modal.defaultStyles} {...props} />,\n      this.node\n    );\n    this.portalRef(portal);\n  };\n\n  render() {\n    if (!canUseDOM || !isReact16) {\n      return null;\n    }\n\n    if (!this.node && isReact16) {\n      this.node = createHTMLElement(\"div\");\n    }\n\n    const createPortal = getCreatePortal();\n    return createPortal(\n      <ModalPortal\n        ref={this.portalRef}\n        defaultStyles={Modal.defaultStyles}\n        {...this.props}\n      />,\n      this.node\n    );\n  }\n}\n\npolyfill(Modal);\n\nif (process.env.NODE_ENV !== \"production\") {\n  Modal.setCreateHTMLElement = fn => (createHTMLElement = fn);\n}\n\nexport default Modal;\n\n'react-modal/specs/helper.js'\n:import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Modal, { bodyOpenClassName } from \"../src/components/Modal\";\nimport TestUtils from \"react-dom/test-utils\";\nimport { log as classListLog } from \"../src/helpers/classList\";\nimport { log as focusManagerLog } from \"../src/helpers/focusManager\";\nimport { log as ariaAppLog } from \"../src/helpers/ariaAppHider\";\nimport { log as bodyTrapLog } from \"../src/helpers/bodyTrap\";\nimport { log as portalInstancesLog } from \"../src/helpers/portalOpenInstances\";\n\nconst debug = false;\n\nlet i = 0;\n\n\nexport function log(label, spaces) {\n  if (!debug) return;\n\n  console.log(`${label} -----------------`);\n  console.log(document.body.children.length);\n  const logChildren = c => console.log(c.nodeName, c.className, c.id);\n  document.body.children.forEach(logChildren);\n\n  ariaAppLog();\n  bodyTrapLog();\n  classListLog();\n  focusManagerLog();\n  portalInstancesLog();\n\n  console.log(`end ${label} -----------------` + (!spaces ? '' : `\n\n\n`));\n}\n\nlet elementPool = [];\n\n\nexport function createHTMLElement(name) {\n  const e = document.createElement(name);\n  elementPool[elementPool.length - 1].push(e);\n  e.className = `element_pool_${name}-${++i}`;\n  return e;\n}\n\n\nexport function drainPool(pool) {\n  pool.forEach(e => e.parentNode && e.parentNode.removeChild(e));\n}\n\n\nexport function withElementCollector(work) {\n  let r;\n  let poolIndex = elementPool.length;\n  elementPool[poolIndex] = [];\n  try {\n    r = work();\n  } finally {\n    drainPool(elementPool[poolIndex]);\n    elementPool = elementPool.slice(\n      0, poolIndex\n    );\n  }\n  return r;\n}\n\n\nif (!String.prototype.includes) {\n  String.prototype.includes = function(search, start) {\n    if (typeof start !== \"number\") {\n      start = 0;\n    }\n\n    if (start + search.length > this.length) {\n      return false;\n    }\n\n    return this.indexOf(search, start) !== -1;\n  };\n}\n\n\nexport const documentClassList = () => document.body.classList;\n\n\nexport const isDocumentWithReactModalOpenClass = (\n  bodyClass = bodyOpenClassName\n) => document.body.className.includes(bodyClass);\n\n\nexport const htmlClassList = () =>\n  document.getElementsByTagName(\"html\")[0].classList;\n\n\nexport const isHtmlWithReactModalOpenClass = htmlClass =>\n  htmlClassList().contains(htmlClass);\n\n\nexport const findDOMWithClass = TestUtils.findRenderedDOMComponentWithClass;\n\n\nconst getModalAttribute = component => (instance, attr) =>\n  modalComponent(component)(instance).getAttribute(attr);\n\n\nconst modalComponent = component => instance => instance.portal[component];\n\n\nexport const mcontent = modalComponent(\"content\");\n\n\nexport const moverlay = modalComponent(\"overlay\");\n\n\nexport const contentAttribute = getModalAttribute(\"content\");\n\n\nexport const overlayAttribute = getModalAttribute(\"overlay\");\n\nconst Simulate = TestUtils.Simulate;\n\nconst dispatchMockEvent = eventCtor => (key, code) => (element, opts) =>\n  eventCtor(\n    element,\n    Object.assign(\n      {},\n      {\n        key: key,\n        which: code\n      },\n      code,\n      opts\n    )\n  );\n\nconst dispatchMockKeyDownEvent = dispatchMockEvent(Simulate.keyDown);\n\n\nexport const escKeyDown = dispatchMockKeyDownEvent(\"ESC\", { keyCode: 27 });\n\nexport const escKeyDownWithCode = dispatchMockKeyDownEvent(\"ESC\", {\n  code: \"Escape\"\n});\n\nexport const tabKeyDown = dispatchMockKeyDownEvent(\"TAB\", { keyCode: 9 });\n\nexport const tabKeyDownWithCode = dispatchMockKeyDownEvent(\"TAB\", {\n  code: \"Tab\"\n});\n\nexport const clickAt = Simulate.click;\n\nexport const mouseUpAt = Simulate.mouseUp;\n\nexport const mouseDownAt = Simulate.mouseDown;\n\nexport const noop = () => {};\n\n\nexport const withModal = function(props, children, test = noop) {\n  return withElementCollector(() => {\n    const node = createHTMLElement();\n    const modalProps = { ariaHideApp: false, ...props };\n    let modal;\n    try {\n      ReactDOM.render(\n        <Modal ref={m => (modal = m)} {...modalProps}>\n          {children}\n        </Modal>,\n        node\n      );\n      test(modal);\n    } finally {\n      ReactDOM.unmountComponentAtNode(node);\n    }\n  });\n};\n\n'react-modal/specs/Modal.testability.spec.js'\n:\nimport ReactDOM from \"react-dom\";\nimport sinon from \"sinon\";\nimport { withModal } from \"./helper\";\n\nexport default () => {\n  it(\"allows ReactDOM.createPortal to be overridden in real-time\", () => {\n    const createPortalSpy = sinon.spy(ReactDOM, \"createPortal\");\n    const props = { isOpen: true };\n    withModal(props, \"hello\");\n    createPortalSpy.called.should.be.ok();\n    ReactDOM.createPortal.restore();\n  });\n};\n\n'react-modal/specs/index.js'\n:\n\nimport ModalState from \"./Modal.spec\";\nimport ModalEvents from \"./Modal.events.spec\";\nimport ModalStyle from \"./Modal.style.spec\";\nimport ModalHelpers from \"./Modal.helpers.spec\";\nimport ModalTestability from \"./Modal.testability.spec\";\n\ndescribe(\"State\", ModalState);\ndescribe(\"Style\", ModalStyle);\ndescribe(\"Events\", ModalEvents);\ndescribe(\"Helpers\", ModalHelpers);\ndescribe(\"Testability\", ModalTestability);\n\n'react-modal/src/helpers/ariaAppHider.js'\n:import warning from \"warning\";\nimport { canUseDOM } from \"./safeHTMLElement\";\n\nlet globalElement = null;\n\n\n\nexport function resetState() {\n  if (globalElement) {\n    if (globalElement.removeAttribute) {\n      globalElement.removeAttribute(\"aria-hidden\");\n    } else if (globalElement.length != null) {\n      globalElement.forEach(element => element.removeAttribute(\"aria-hidden\"));\n    } else {\n      document\n        .querySelectorAll(globalElement)\n        .forEach(element => element.removeAttribute(\"aria-hidden\"));\n    }\n  }\n  globalElement = null;\n}\n\n\nexport function log() {\n  if (process.env.NODE_ENV !== \"production\") {\n    var check = globalElement || {};\n    console.log(\"ariaAppHider ----------\");\n    console.log(check.nodeName, check.className, check.id);\n    console.log(\"end ariaAppHider ----------\");\n  }\n}\n\n\nexport function assertNodeList(nodeList, selector) {\n  if (!nodeList || !nodeList.length) {\n    throw new Error(\n      `react-modal: No elements were found for selector ${selector}.`\n    );\n  }\n}\n\nexport function setElement(element) {\n  let useElement = element;\n  if (typeof useElement === \"string\" && canUseDOM) {\n    const el = document.querySelectorAll(useElement);\n    assertNodeList(el, useElement);\n    useElement = el;\n  }\n  globalElement = useElement || globalElement;\n  return globalElement;\n}\n\nexport function validateElement(appElement) {\n  const el = appElement || globalElement;\n  if (el) {\n    return Array.isArray(el) ||\n      el instanceof HTMLCollection ||\n      el instanceof NodeList\n      ? el\n      : [el];\n  } else {\n    warning(\n      false,\n      [\n        \"react-modal: App element is not defined.\",\n        \"Please use `Modal.setAppElement(el)` or set `appElement={el}`.\",\n        \"This is needed so screen readers don't see main content\",\n        \"when modal is opened. It is not recommended, but you can opt-out\",\n        \"by setting `ariaHideApp={false}`.\"\n      ].join(\" \")\n    );\n\n    return [];\n  }\n}\n\nexport function hide(appElement) {\n  for (let el of validateElement(appElement)) {\n    el.setAttribute(\"aria-hidden\", \"true\");\n  }\n}\n\nexport function show(appElement) {\n  for (let el of validateElement(appElement)) {\n    el.removeAttribute(\"aria-hidden\");\n  }\n}\n\nexport function documentNotReadyOrSSRTesting() {\n  globalElement = null;\n}\n",
        "gt": [
            "'react-modal/src/helpers/safeHTMLElement.js'",
            "'react-modal/src/helpers/ariaAppHider.js'",
            "'react-modal/src/components/Modal.js'",
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/specs/index.js'"
        ]
    },
    {
        "files": [
            "'Next-GraphQL-Blog/client/components/CommentList.js'",
            "'Next-GraphQL-Blog/client/components/PostCard.js'",
            "'Next-GraphQL-Blog/client/pages/index.js'",
            "'Next-GraphQL-Blog/client/lib/parseError.js'",
            "'Next-GraphQL-Blog/client/components/FeedList.js'"
        ],
        "content": "'Next-GraphQL-Blog/client/components/CommentList.js'\n:import React, { Component } from 'react'\nimport { Comment, Input } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport { Mutation, Query } from 'react-apollo'\nimport ReactDOM from 'react-dom'\n\nimport withUser from '../lib/withUser'\nimport { showErrorAlert } from '../lib/alerts'\nimport parseError from '../lib/parseError'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport {\n  COMMENT_POST,\n  commentPostOptions\n} from '../api/mutations/comment/commentPost'\n\nclass CommentList extends Component {\n  state = {\n    input: ''\n  }\n\n  componentDidMount() {\n    this.scrollToBottom()\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom()\n  }\n\n  writeComment = (e, commentPost) => {\n    e.preventDefault()\n    const { input } = this.state\n    if (!input) return\n\n    commentPost(commentPostOptions(this.props, input)).catch(e =>\n      showErrorAlert(parseError(e.message))\n    )\n\n    this.setState({\n      input: ''\n    })\n  }\n\n  handleChange = e => {\n    this.setState({\n      input: e.target.value\n    })\n  }\n\n  scrollToBottom = () => {\n    const messagesContainer = ReactDOM.findDOMNode(this.messageList)\n    messagesContainer.scrollTop = messagesContainer.scrollHeight\n  }\n\n  render() {\n    const { postId, user, comments } = this.props\n    return (\n      <Mutation\n        mutation={COMMENT_POST}\n        variables={{ postId: postId, text: this.state.input }}\n      >\n        {(commentPost, { loading, error, data }) => (\n          <CommentContainer>\n            <StyledList\n              ref={node => {\n                this.messageList = node\n              }}\n            >\n              {comments.map(comment => {\n                return (\n                  <Comment key={comment._id}>\n                    <Comment.Content>\n                      <Comment.Author as=\"a\">\n                        {comment.commentedBy.name}\n                      </Comment.Author>\n                      <Comment.Metadata>\n                        <div>\n                          {moment(new Date(comment.createdAt)).fromNow()}\n                        </div>\n                      </Comment.Metadata>\n                      <Comment.Text>{comment.text}</Comment.Text>\n                    </Comment.Content>\n                  </Comment>\n                )\n              })}\n              <div\n                style={{ float: 'left', clear: 'both' }}\n                ref={el => {\n                  this.messagesEnd = el\n                }}\n              />\n            </StyledList>\n\n            <form onSubmit={e => this.writeComment(e, commentPost)}>\n              <Input\n                action=\"Comment\"\n                value={this.state.input}\n                onChange={this.handleChange}\n                placeholder=\"Write a comment...\"\n              />\n            </form>\n          </CommentContainer>\n        )}\n      </Mutation>\n    )\n  }\n}\n\nexport default withUser(CommentList)\n\nconst CommentContainer = styled(Comment.Group)`\n  &&& {\n    padding: 14px;\n    margin: 0;\n    position: absolute;\n    background: #ffffff;\n    border-radius: 5px;\n    border-radius: 5px;\n    box-shadow: 0px 7px 8px 0px #00000047;\n    top: 100%;\n    z-index: 10;\n  }\n`\n\nconst StyledList = styled.div`\n  overflow-y: auto;\n  max-height: 180px;\n`\n\n'Next-GraphQL-Blog/client/components/PostCard.js'\n:import React, { Component } from 'react'\nimport { Card, Icon, Image, Divider } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { Query, Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport { LIKE_POST, likePostOptions } from '../api/mutations/like/likePost'\nimport {\n  DELETE_POST,\n  deletePostOptions\n} from '../api/mutations/post/deletePost'\n\nimport withUser from '../lib/withUser'\nimport parseError from '../lib/parseError'\nimport { showSuccessAlert, showErrorAlert } from '../lib/alerts'\n\nimport CommentList from './CommentList'\n\nclass PostCard extends Component {\n  state = {\n    showComments: false\n  }\n\n  toggleComments = () => {\n    this.setState({\n      showComments: !this.state.showComments\n    })\n  }\n\n  render() {\n    const { showComments } = this.state\n    const {\n      _id,\n      name,\n      content,\n      postedBy,\n      likes,\n      comments,\n      createdAt,\n      image,\n      user\n    } = this.props\n\n    return (\n      <Mutation mutation={LIKE_POST} variables={{ postId: _id }}>\n        {likePost => (\n          <Mutation mutation={DELETE_POST} variables={{ _id: _id }}>\n            {deletePost => (\n              <StyledCard props={{ showComments }}>\n                {user &&\n                  user._id === postedBy._id && (\n                    <RemoveIcon\n                      name=\"remove\"\n                      onClick={() => {\n                        deletePost(deletePostOptions(this.props)).then(() =>\n                          showSuccessAlert('Post was deleted!')\n                        )\n                      }}\n                    />\n                  )}\n\n                <StyledImage\n                  src={image ? image : '/static/blog-placeholder.jpg'}\n                />\n\n                <Card.Content>\n                  <Card.Header style={ellipsisStyle}>{name}</Card.Header>\n                  <Card.Meta style={ellipsisStyle}>\n                    By {postedBy.name}\n                  </Card.Meta>\n                  <Card.Description style={ellipsisStyle}>\n                    {content}\n                  </Card.Description>\n                </Card.Content>\n\n                <BottomSection extra>\n                  <a onClick={this.toggleComments}>\n                    <Icon name=\"comment\" />\n                    {comments.length} Comments\n                  </a>\n                  <a\n                    onClick={() => {\n                      likePost(likePostOptions(this.props))\n                        .then(() => showSuccessAlert('You liked a Post!'))\n                        .catch(e => showErrorAlert(parseError(e.message)))\n                    }}\n                  >\n                    <Icon name=\"like\" />\n                    {likes.length} Likes\n                  </a>\n                </BottomSection>\n\n                {showComments && (\n                  <CommentList comments={comments} postId={_id} />\n                )}\n              </StyledCard>\n            )}\n          </Mutation>\n        )}\n      </Mutation>\n    )\n  }\n}\n\nconst StyledCard = styled(Card)`\n  &&& {\n    height: ${props => (props.props.showComments ? 'auto' : '325px')};\n    box-shadow: 0px 3px 25px 2px #00000014;\n    border-bottom-left-radius: 0px;\n    border-bottom-right-radius: 0px;\n  }\n`\n\nconst BottomSection = styled(Card.Content)`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst RemoveIcon = styled(Icon)`\n  &&& {\n    font-size: 18px;\n    position: absolute;\n    top: 5px;\n    z-index: 9;\n    right: 0;\n    cursor: pointer;\n    transition: 0.2s all ease;\n    &:hover {\n      font-size: 22px;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  &&& {\n    height: 191px;\n    object-fit: cover;\n  }\n`\n\nconst ellipsisStyle = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden'\n}\n\nexport default withUser(PostCard)\n\n'Next-GraphQL-Blog/client/pages/index.js'\n:import React, { Component } from 'react'\nimport { Query } from 'react-apollo'\nimport { Transition, animated } from 'react-spring'\n\nimport FeedList from '../components/FeedList'\nimport SearchForm from '../components/SearchForm'\nimport LoadPendingButton from '../components/LoadPendingButton'\nimport FeedLoader from '../components/FeedLoader'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport { NEW_LIKE_SUB, newLikeUpdate } from '../api/subscriptions/newLike'\nimport {\n  NEW_COMMENT_SUB,\n  newCommentUpdate\n} from '../api/subscriptions/newComment'\nimport { NEW_POST_SUB } from '../api/subscriptions/newPost'\n\nimport { POSTS_LIMIT } from '../api/constants'\n\nclass Home extends Component {\n  static async getInitialProps(ctx) {\n    const isFromServer = !!ctx.req\n\n    return {\n      isFromServer\n    }\n  }\n  state = {\n    newPosts: []\n  }\n\n  subscribeToNewLikes = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_LIKE_SUB,\n      updateQuery: (prev, result) => newLikeUpdate(prev, result)\n    })\n\n  subscribeToNewComments = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_COMMENT_SUB,\n      updateQuery: (prev, result) => newCommentUpdate(prev, result)\n    })\n\n  subscribeToNewPosts = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_POST_SUB,\n\n\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev\n\n        const newPost = { ...subscriptionData.data.newPost }\n        newPost.likes = []\n        newPost.comments = []\n\n        this.setState(prevState => {\n          return {\n            newPosts: [newPost, ...prevState.newPosts]\n          }\n        })\n      }\n    })\n\n  fetchMorePosts = (fetchMore, offset) =>\n    fetchMore({\n      variables: { offset },\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prev\n        const newPosts = [\n          ...prev.allPosts.posts,\n          ...fetchMoreResult.allPosts.posts\n        ]\n\n\n\n        const updatedPosts = newPosts.filter(\n          (post, index, self) =>\n            index === self.findIndex(t => t._id === post._id)\n        )\n\n        return {\n          ...prev,\n          allPosts: {\n            __typename: 'PostFeed',\n            count: prev.allPosts.count,\n            posts: updatedPosts\n          }\n        }\n      }\n    })\n\n  loadPendingPosts = () => {\n\n\n\n    const { allPosts } = this.props.client.readQuery({\n      query: ALL_POSTS,\n      variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' }\n    })\n\n    const newPostslength = this.state.newPosts.length\n    allPosts.posts.unshift(...this.state.newPosts)\n\n    this.props.client.writeQuery({\n      query: ALL_POSTS,\n      variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' },\n      data: {\n        allPosts: {\n          __typename: 'PostFeed',\n          count: allPosts.count + newPostslength,\n          posts: [...allPosts.posts]\n        }\n      }\n    })\n    window.scroll(0, 0)\n    this.setState({\n      newPosts: []\n    })\n  }\n\n  render() {\n    return (\n      <Query\n        query={ALL_POSTS}\n        variables={{ sort: '-createdAt', limit: POSTS_LIMIT, offset: 0 }}\n        fetchPolicy=\"cache-and-network\"\n        notifyOnNetworkStatusChange\n      >\n        {({ loading, subscribeToMore, fetchMore, data: { allPosts } }) => {\n          const postLength = allPosts.posts.length\n          const pendingPostLength = this.state.newPosts.length\n          return (\n            <>\n              <Transition\n                from={{ top: '-50px' }}\n                enter={{ top: '50px' }}\n                leave={{ top: '-50px' }}\n              >\n                {!!pendingPostLength &&\n                  (style => (\n                    <LoadPendingButton\n                      style={{ ...style }}\n                      onClick={this.loadPendingPosts}\n                    >\n                      Load {pendingPostLength} new post...\n                    </LoadPendingButton>\n                  ))}\n              </Transition>\n\n              <SearchForm client={this.props.client} />\n\n              <FeedList\n                posts={allPosts.posts}\n                isFromServer={this.props.isFromServer}\n                subscribeToNewLikes={() =>\n                  this.subscribeToNewLikes(subscribeToMore)\n                }\n                subscribeToNewComments={() =>\n                  this.subscribeToNewComments(subscribeToMore)\n                }\n                subscribeToNewPosts={() =>\n                  this.subscribeToNewPosts(subscribeToMore)\n                }\n                hasMorePosts={allPosts.count !== postLength}\n                fetchMore={() => this.fetchMorePosts(fetchMore, postLength)}\n              />\n\n              {loading && <FeedLoader />}\n            </>\n          )\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default Home\n\n'Next-GraphQL-Blog/client/lib/parseError.js'\n:export default error => error.slice(14)\n\n'Next-GraphQL-Blog/client/components/FeedList.js'\n:import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport FlipMove from 'react-flip-move'\n\nimport PostCard from './PostCard'\n\nclass FeedList extends Component {\n  componentDidMount() {\n    this.props.subscribeToNewLikes()\n    this.props.subscribeToNewComments()\n    this.props.subscribeToNewPosts()\n  }\n\n  render() {\n    const { posts, fetchMore, hasMorePosts, isFromServer } = this.props\n    return (\n      <Container>\n        <InfiniteScroll\n          dataLength={posts.length}\n          next={fetchMore}\n          hasMore={hasMorePosts}\n          style={{ overflow: 'visible' }}\n        >\n          <FlipMove\n            duration={500}\n            easing=\"ease-in-out\"\n            appearAnimation={isFromServer ? 'none' : 'fade'}\n            enterAnimation=\"accordionHorizontal\"\n            leaveAnimation=\"accordionHorizontal\"\n            typeName=\"ul\"\n            style={{\n              position: 'relative',\n              padding: 0,\n              display: 'flex',\n              flexWrap: 'wrap',\n              justifyContent: 'center'\n            }}\n          >\n            {!!posts.length ? (\n              posts.map((post, index) => (\n                <li key={post._id} style={{ display: 'inline-block' }}>\n                  <PostCard key={post._id} index={index} {...post} />\n                </li>\n              ))\n            ) : (\n              <div>No Posts here... :(</div>\n            )}\n          </FlipMove>\n        </InfiniteScroll>\n      </Container>\n    )\n  }\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1;\n  .ui.card {\n    margin: 15px;\n    width: 310px;\n  }\n  .ui.card:first-child {\n    margin-top: 15px;\n  }\n  .ui.card:last-child {\n    margin-bottom: 15px;\n  }\n`\nexport default FeedList\n",
        "gt": [
            "'Next-GraphQL-Blog/client/lib/parseError.js'",
            "'Next-GraphQL-Blog/client/components/CommentList.js'",
            "'Next-GraphQL-Blog/client/components/PostCard.js'",
            "'Next-GraphQL-Blog/client/components/FeedList.js'",
            "'Next-GraphQL-Blog/client/pages/index.js'"
        ]
    },
    {
        "files": [
            "'movix/src/components/carousel/Carousel.jsx'",
            "'movix/src/App.jsx'",
            "'movix/src/pages/details/Details.jsx'",
            "'movix/src/pages/details/carousels/Recommendation.jsx'",
            "'movix/src/main.jsx'"
        ],
        "content": "'movix/src/components/carousel/Carousel.jsx'\n:import React, { useRef } from \"react\";\nimport {\n    BsFillArrowLeftCircleFill,\n    BsFillArrowRightCircleFill,\n} from \"react-icons/bs\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport dayjs from \"dayjs\";\n\nimport ContentWrapper from \"../contentWrapper/ContentWrapper\";\nimport Img from \"../lazyLoadImage/Img\";\nimport PosterFallback from \"../../assets/no-poster.png\";\nimport CircleRating from \"../circleRating/CircleRating\";\nimport Genres from \"../genres/Genres\";\n\nimport \"./style.scss\";\n\nconst Carousel = ({ data, loading, endpoint, title }) => {\n    const carouselContainer = useRef();\n    const { url } = useSelector((state) => state.home);\n    const navigate = useNavigate();\n\n    const navigation = (dir) => {\n        const container = carouselContainer.current;\n\n        const scrollAmount =\n            dir === \"left\"\n                ? container.scrollLeft - (container.offsetWidth + 20)\n                : container.scrollLeft + (container.offsetWidth + 20);\n\n        container.scrollTo({\n            left: scrollAmount,\n            behavior: \"smooth\",\n        });\n    };\n\n    const skItem = () => {\n        return (\n            <div className=\"skeletonItem\">\n                <div className=\"posterBlock skeleton\"></div>\n                <div className=\"textBlock\">\n                    <div className=\"title skeleton\"></div>\n                    <div className=\"date skeleton\"></div>\n                </div>\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"carousel\">\n            <ContentWrapper>\n                {title && <div className=\"carouselTitle\">{title}</div>}\n                <BsFillArrowLeftCircleFill\n                    className=\"carouselLeftNav arrow\"\n                    onClick={() => navigation(\"left\")}\n                />\n                <BsFillArrowRightCircleFill\n                    className=\"carouselRighttNav arrow\"\n                    onClick={() => navigation(\"right\")}\n                />\n                {!loading ? (\n                    <div className=\"carouselItems\" ref={carouselContainer}>\n                        {data?.map((item) => {\n                            const posterUrl = item.poster_path\n                                ? url.poster + item.poster_path\n                                : PosterFallback;\n                            return (\n                                <div\n                                    key={item.id}\n                                    className=\"carouselItem\"\n                                    onClick={() =>\n                                        navigate(\n                                            `/${item.media_type || endpoint}/${\n                                                item.id\n                                            }`\n                                        )\n                                    }\n                                >\n                                    <div className=\"posterBlock\">\n                                        <Img src={posterUrl} />\n                                        <CircleRating\n                                            rating={item.vote_average.toFixed(\n                                                1\n                                            )}\n                                        />\n                                        <Genres\n                                            data={item.genre_ids.slice(0, 2)}\n                                        />\n                                    </div>\n                                    <div className=\"textBlock\">\n                                        <span className=\"title\">\n                                            {item.title || item.name}\n                                        </span>\n                                        <span className=\"date\">\n                                            {dayjs(item.release_date || item.first_air_date).format(\n                                                \"MMM D, YYYY\"\n                                            )}\n                                        </span>\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                ) : (\n                    <div className=\"loadingSkeleton\">\n                        {skItem()}\n                        {skItem()}\n                        {skItem()}\n                        {skItem()}\n                        {skItem()}\n                    </div>\n                )}\n            </ContentWrapper>\n        </div>\n    );\n};\n\nexport default Carousel;\n\n'movix/src/App.jsx'\n:import { useState, useEffect } from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { fetchDataFromApi } from \"./utils/api\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getApiConfiguration, getGenres } from \"./store/homeSlice\";\n\nimport Header from \"./components/header/Header\";\nimport Footer from \"./components/footer/Footer\";\nimport Home from \"./pages/home/Home\";\nimport Details from \"./pages/details/Details\";\nimport SearchResult from \"./pages/searchResult/SearchResult\";\nimport Explore from \"./pages/explore/Explore\";\nimport PageNotFound from \"./pages/404/PageNotFound\";\n\nfunction App() {\n    const dispatch = useDispatch();\n    const { url } = useSelector((state) => state.home);\n    console.log(url);\n\n    useEffect(() => {\n        fetchApiConfig();\n        genresCall();\n    }, []);\n\n    const fetchApiConfig = () => {\n        fetchDataFromApi(\"/configuration\").then((res) => {\n            console.log(res);\n\n            const url = {\n                backdrop: res.images.secure_base_url + \"original\",\n                poster: res.images.secure_base_url + \"original\",\n                profile: res.images.secure_base_url + \"original\",\n            };\n\n            dispatch(getApiConfiguration(url));\n        });\n    };\n\n    const genresCall = async () => {\n        let promises = [];\n        let endPoints = [\"tv\", \"movie\"];\n        let allGenres = {};\n\n        endPoints.forEach((url) => {\n            promises.push(fetchDataFromApi(`/genre/${url}/list`));\n        });\n\n        const data = await Promise.all(promises);\n        console.log(data);\n        data.map(({ genres }) => {\n            return genres.map((item) => (allGenres[item.id] = item));\n        });\n\n        dispatch(getGenres(allGenres));\n    };\n\n    return (\n        <BrowserRouter>\n            <Header />\n            <Routes>\n                <Route path=\"/\" element={<Home />} />\n                <Route path=\"/:mediaType/:id\" element={<Details />} />\n                <Route path=\"/search/:query\" element={<SearchResult />} />\n                <Route path=\"/explore/:mediaType\" element={<Explore />} />\n                <Route path=\"*\" element={<PageNotFound />} />\n            </Routes>\n            <Footer />\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n\n'movix/src/pages/details/Details.jsx'\n:import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport \"./style.scss\";\n\nimport useFetch from \"../../hooks/useFetch\";\nimport DetailsBanner from \"./detailsBanner/DetailsBanner\";\nimport Cast from \"./cast/Cast\";\nimport VideosSection from \"./videosSection/VideosSection\";\nimport Similar from \"./carousels/Similar\";\nimport Recommendation from \"./carousels/Recommendation\";\n\nconst Details = () => {\n    const { mediaType, id } = useParams();\n    const { data, loading } = useFetch(`/${mediaType}/${id}/videos`);\n    const { data: credits, loading: creditsLoading } = useFetch(\n        `/${mediaType}/${id}/credits`\n    );\n\n    return (\n        <div>\n            <DetailsBanner video={data?.results?.[0]} crew={credits?.crew} />\n            <Cast data={credits?.cast} loading={creditsLoading} />\n            <VideosSection data={data} loading={loading} />\n            <Similar mediaType={mediaType} id={id} />\n            <Recommendation mediaType={mediaType} id={id} />\n        </div>\n    );\n};\n\nexport default Details;\n\n'movix/src/pages/details/carousels/Recommendation.jsx'\n:import React from \"react\";\n\nimport Carousel from \"../../../components/carousel/Carousel\";\nimport useFetch from \"../../../hooks/useFetch\";\n\nconst Recommendation = ({ mediaType, id }) => {\n    const { data, loading, error } = useFetch(\n        `/${mediaType}/${id}/recommendations`\n    );\n\n    return (\n        <Carousel\n            title=\"Recommendations\"\n            data={data?.results}\n            loading={loading}\n            endpoint={mediaType}\n        />\n    );\n};\n\nexport default Recommendation;\n\n'movix/src/main.jsx'\n:import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.scss\";\n\nimport { store } from \"./store/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n",
        "gt": [
            "'movix/src/components/carousel/Carousel.jsx'",
            "'movix/src/pages/details/carousels/Recommendation.jsx'",
            "'movix/src/pages/details/Details.jsx'",
            "'movix/src/App.jsx'",
            "'movix/src/main.jsx'"
        ]
    },
    {
        "files": [
            "'howtocenterincss/js/tests/snapshot.js'",
            "'howtocenterincss/js/how/methods/MarginAutoMethod.js'",
            "'howtocenterincss/js/how/findMethod.js'"
        ],
        "content": "'howtocenterincss/js/tests/snapshot.js'\n:\n\nrequire('colors');\nvar _ = require('underscore');\nvar fs = require('fs');\nvar wd = require('wd');\nvar BlinkDiff = require('blink-diff');\nvar PNGImage = require('pngjs-image');\nvar jsStringEscape = require('js-string-escape')\nvar chai = require('chai');\nvar invariant = require('invariant');\nvar tmp = require('tmp');\nvar Q = require('q');\nvar chaiAsPromised = require('chai-as-promised');\nvar findMethod = require('../how/findMethod');\n\nchai.use(chaiAsPromised);\nchai.should();\nchaiAsPromised.transferPromiseness = wd.transferPromiseness;\n\nvar testMatrix = require('./testMatrix');\nvar selenium = require('./selenium');\n\nfunction getReferenceFilename(test) {\n  var SCREENSHOTS_DIR = __dirname + '/../../screenshots';\n  return SCREENSHOTS_DIR + '/' + testMatrix.getSnapshotName(test) + '.png';\n}\n\nfunction getReferenceTestHTMLFilename(test) {\n  var SCREENSHOTS_DIR = __dirname + '/../../screenshots';\n  return SCREENSHOTS_DIR + '/' + testMatrix.getTestName(test) + '_test.html';\n}\n\nfunction getReferenceCodeFilename(test) {\n  var SCREENSHOTS_DIR = __dirname + '/../../screenshots';\n  return SCREENSHOTS_DIR + '/' + testMatrix.getTestName(test) + '.txt';\n}\n\nwd.configureHttp({\n  timeout: 60000,\n  retryDelay: 15000,\n  retries: 5\n});\n\nvar remoteConfig = undefined;\nvar browserMappings;\nif (process.env.SAUCE_USERNAME && process.env.SAUCE_ACCESS_KEY) {\n  remoteConfig = {\n    hostname: 'ondemand.saucelabs.com',\n    port: 80,\n    username: process.env.SAUCE_USERNAME,\n    accessKey: process.env.SAUCE_ACCESS_KEY,\n  };\n  browserMappings = selenium.sauceLabsBrowserMappings;\n} else {\n  browserMappings = selenium.localBrowserMappings;\n}\n\nvar isCreatingSnapshots = !!process.env.CREATE_SNAPSHOTS;\nvar allTests = testMatrix.generateTestsForSeleniumBrowsers(\n  browserMappings\n);\n\n\nvar SCREENSHOT_TOLERANCE = 0.000003;\n\nvar WINDOW_WIDTH = 400;\nvar WINDOW_HEIGHT = 400;\n\nvar css =\n'body, html { margin: 0; padding: 0; overflow: hidden; border: 0; }' +\n'body { font-family: arial; }' +\n\n'#content { background: #f00; width: 25px; height: 25px; }' +\n'#container { background: #0ff; width: 300px; height: 300px; }';\n\nvar fontSizeCSS =\n'body { font-size: ' + testMatrix.fontSize + 'px; }' +\n\n\n\n\n'#content, #container { line-height: 1em; }' +\n'#content { background: 0 !important; }' +\n\n'#content { width: auto; height: auto; }';\n\nfunction getOuterDivCSS(width, height) {\n\n\n  return '#testOuterDiv { background: white; width: ' + width + 'px; height: ' + height + 'px;}';\n}\n\n\nfunction getJStoInjectCSS(css: string) {\n  return (\n    'var ss1 = document.createElement(\"style\");' +\n    'var def = \"' + jsStringEscape(css) + '\";' +\n    'ss1.setAttribute(\"type\", \"text/css\");' +\n    'var hh1 = document.getElementsByTagName(\"head\")[0];' +\n    'hh1.appendChild(ss1);' +\n    'if (ss1.styleSheet) {'  +\n    '  ss1.styleSheet.cssText = def;' +\n    '} else {'  +\n    '  var tt1 = document.createTextNode(def);' +\n    '  ss1.appendChild(tt1);' +\n    '}'\n  );\n}\n\nvar useBrowser = isCreatingSnapshots || remoteConfig;\n\nallTests.forEach(seleniumTests => {\n\n  var browser = seleniumTests.seleniumBrowser;\n  var tests = seleniumTests.tests;\n\n  global.suite('using ' + browser.getDisplayName(), () => {\n    var b;\n    var allPassed = true;\n    var windowWidth = WINDOW_WIDTH + browser.cropBoundary.addX;\n    var windowHeight = WINDOW_HEIGHT + browser.cropBoundary.addY;\n\n    global.suiteSetup(done => {\n      if (!useBrowser) {\n        done();\n        return;\n      }\n\n      b = wd.promiseChainRemote(remoteConfig);\n\n      if (process.env.SNAPSHOT_DEBUG) {\n        b.on('status', function(info) {\n            console.log(info.cyan);\n        });\n        b.on('command', function(eventType, command, response) {\n            console.log(' > ' + eventType.cyan, command, (response || '').grey);\n        });\n        b.on('http', function(meth, path, data) {\n            console.log(' > ' + meth.magenta, path, (data || '').grey);\n        });\n      }\n\n      b\n        .init(browser.toSeleniumJSON())\n        .setWindowSize(windowWidth, windowHeight)\n        .elementByTagName('html')\n        .getSize()\n        .then(size => {\n          invariant(b, 'flow');\n\n\n          return b.setWindowSize(windowWidth + (windowWidth - size.width), windowHeight + (windowHeight - size.height));\n        })\n        .nodeify(done);\n    });\n\n    global.suiteTeardown(done => {\n      if (!b) {\n        done();\n        return;\n      }\n\n      b\n        .quit()\n        .nodeify(done);\n    });\n\n    global.setup(done => {\n      if (!b) {\n        done();\n        return;\n      }\n      b\n\n        .get('http:\n        .nodeify(done);\n    });\n\n    tests.forEach(t => {\n      var testName = testMatrix.getTestName(t);\n      var mochaTestName =\n        (isCreatingSnapshots ? 'Snapshot ' : 'Compare snapshot ') + testName;\n\n      global.test(mochaTestName, (done) => {\n        var method = findMethod(t.content, t.container, t.horizontal, t.vertical, t.browserSupport);\n        invariant(method, 'flow');\n        method.addIDs();\n        method.setIsTest();\n        var html = method.getCode(t.content, t.container, t.horizontal, t.vertical, t.browserSupport);\n        var canonicalCode = method.getCanonicalCode(t.content, t.container, t.horizontal, t.vertical, t.browserSupport);\n\n        var codeGenerated = canonicalCode.html;\n        if (canonicalCode.parentCSS) {\n          codeGenerated += '\\n\\n#parent {\\n' + canonicalCode.parentCSS + '\\n}';\n        }\n        if (canonicalCode.middleCSS) {\n          codeGenerated += '\\n\\n#middle {\\n' + canonicalCode.middleCSS + '\\n}';\n        }\n        if (canonicalCode.childCSS) {\n          codeGenerated += '\\n\\n#child {\\n' + canonicalCode.childCSS + '\\n}';\n        }\n\n        if (!useBrowser) {\n\n          var referenceCode = fs.readFileSync(getReferenceCodeFilename(t), 'utf8');\n          if (referenceCode !== codeGenerated) {\n            done('Reference code not equal to code generated: ' + codeGenerated);\n          } else {\n            done();\n          }\n          return;\n        }\n\n        var cssToInject = css;\n        if (t.content.text) {\n          cssToInject += fontSizeCSS;\n        }\n\n        cssToInject += getOuterDivCSS(windowWidth, windowHeight);\n        if (isCreatingSnapshots) {\n          fs.writeFileSync(getReferenceCodeFilename(t), codeGenerated);\n        }\n        fs.writeFileSync(getReferenceTestHTMLFilename(t), '<style>' + cssToInject + '</style>' + html);\n\n        invariant(b, 'flow');\n        var insertJS =\n          'document.body.innerHTML = \"' + jsStringEscape('<div id=\"testOuterDiv\">' + html + '</div>') + '\";';\n\n\n\n\n        var res =\n          b.execute(getJStoInjectCSS(cssToInject) + insertJS);\n\n        var referenceFilename = getReferenceFilename(t);\n        if (isCreatingSnapshots && !fs.existsSync(referenceFilename)) {\n\n\n          res = res.saveScreenshot(referenceFilename);\n        } else {\n          var tmpFilename = tmp.tmpNameSync({\n\n            prefix: 'screenshot-' + Date.now() + '-' + testName + '-',\n            postfix: '.png',\n          });\n          res = res\n            .saveScreenshot(tmpFilename)\n            .then(() => {\n              tmpFilename\n              var blinkDiffOptions = {};\n              blinkDiffOptions.imageAPath = referenceFilename;\n              blinkDiffOptions.thresholdType = BlinkDiff.THRESHOLD_PERCENT;\n              if (browser.hasCropBoundary()) {\n                var image = PNGImage.readImageSync(tmpFilename);\n                image.clip(\n                  browser.cropBoundary.cropX,\n                  browser.cropBoundary.cropY,\n                  WINDOW_WIDTH,\n                  WINDOW_HEIGHT\n                );\n                blinkDiffOptions.imageB = image;\n              } else {\n                blinkDiffOptions.imageBPath = tmpFilename;\n              }\n              var blinkDiff = new BlinkDiff(blinkDiffOptions);\n              return Q.ninvoke(blinkDiff, 'run');\n            })\n            .then(result => {\n              var diff = result.differences / result.dimension;\n              var pass = diff < SCREENSHOT_TOLERANCE;\n              var deferred = Q.defer();\n              if (pass) {\n                fs.unlinkSync(tmpFilename);\n                deferred.resolve(diff);\n              } else {\n                deferred.reject(\n                  tmpFilename +\n                  ' is not equal to reference ' +\n                  referenceFilename +\n                  ', diff: ' + diff +\n                  ', tolerance: ' + SCREENSHOT_TOLERANCE\n                );\n              }\n              return deferred.promise;\n            });\n        }\n        res.nodeify(done);\n      });\n    });\n  });\n});\n\n'howtocenterincss/js/how/methods/MarginAutoMethod.js'\n:\n\nvar Method = require('./Method');\nvar Requirement = require('./Requirement');\nvar Options = require('../Options');\nvar React = require('react');\n\nvar invariant = require('invariant');\n\nvar c = require('../checks');\n\nclass MarginAutoMethod extends Method {\n\n  getName(): string {\n    return 'Margin auto';\n  }\n\n  getRequirement(): Requirement {\n    return Requirement.all([\n      new Requirement(\n        'Not text',\n        c.checkContentNotText\n      ),\n      new Requirement(\n        'Vertically top aligned',\n        c.checkVerticalAlignment(Options.VerticalAlignment.TOP)\n      ),\n      new Requirement(\n        'Horizontally center or right aligned',\n        c.checkAnyHorizontalAlignment([\n          Options.HorizontalAlignment.CENTER,\n          Options.HorizontalAlignment.RIGHT,\n        ])\n      ),\n    ]);\n  }\n\n  getCodeElement(\n    content: Options.Content,\n    container: Options.Container,\n    horizontalAlignment: Options.HorizontalAlignment,\n    verticalAlignment: Options.VerticalAlignment,\n    browserSupport: Options.BrowserSupport\n  ): { parent: ReactElement; middle: ?ReactElement; child: mixed; } {\n    var child = this.getContentWithDOM(content);\n    var childStyles = child.props.style;\n\n    if (horizontalAlignment === Options.HorizontalAlignment.CENTER) {\n      childStyles.marginLeft = 'auto';\n      childStyles.marginRight = 'auto';\n    } else if (horizontalAlignment === Options.HorizontalAlignment.RIGHT) {\n      childStyles.marginLeft = 'auto';\n    }\n\n    var parent = <div>{child}</div>;\n    return { parent: parent, middle: null, child: child };\n  }\n}\n\nmodule.exports = MarginAutoMethod;\n\n'howtocenterincss/js/how/findMethod.js'\n:\n\nvar Method = require('./methods/Method');\nvar Options = require('./Options');\nvar DoNothingMethod = require('./methods/DoNothingMethod');\nvar SingleLineTextLineHeightMethod =\n  require('./methods/SingleLineTextLineHeightMethod');\nvar PixelHeightContainerContentPaddingMethod =\n  require('./methods/PixelHeightContainerContentPaddingMethod');\nvar AbsolutePositionMethod = require('./methods/AbsolutePositionMethod');\nvar MarginAutoMethod = require('./methods/MarginAutoMethod');\nvar TableCellMethod = require('./methods/TableCellMethod');\nvar FlexMethod = require('./methods/FlexMethod');\nvar TextAlignMethod = require('./methods/TextAlignMethod');\n\n\n\nvar methods = [\n  new DoNothingMethod,\n  new TextAlignMethod,\n  new SingleLineTextLineHeightMethod(),\n  new MarginAutoMethod(),\n  new PixelHeightContainerContentPaddingMethod(),\n  new FlexMethod,\n  new AbsolutePositionMethod,\n  new TableCellMethod,\n];\n\nfunction findMethod(\n  content: Options.Content,\n  container: Options.Container,\n  horizontalAlignment: Options.HorizontalAlignment,\n  verticalAlignment: Options.VerticalAlignment,\n  browserSupport: Options.BrowserSupport\n): ?Method {\n  for (var i = 0; i < methods.length; i++) {\n    var method = methods[i];\n    if (method.getRequirement().check(content, container, horizontalAlignment, verticalAlignment, browserSupport)) {\n      return method;\n    }\n  }\n  return null;\n}\n\nmodule.exports = findMethod;\n",
        "gt": [
            "'howtocenterincss/js/how/methods/MarginAutoMethod.js'",
            "'howtocenterincss/js/how/findMethod.js'",
            "'howtocenterincss/js/tests/snapshot.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/index.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/loadingMask.js'",
            "'ruui/src/components/modals.js'",
            "'ruui/src/utils/store/appAction.js'"
        ],
        "content": "'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/components/modal.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, View, StyleSheet } from 'react-native';\n\nimport Selector from './selector';\nimport LoadingMask from './loadingMask';\nimport CloseableModal from './closeableModal';\nimport { valueAt } from '../utils';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tactive?: any,\n\ttype?: string,\n\tconfigs?: Object,\n\tmodalCount?: number,\n\tdispatch?: Function,\n\tanimationDelay?: Number,\n};\n\nexport default class RuuiModal extends Component {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactive: props.active,\n\t\t};\n\t\tthis.enterAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { active, animationDelay, } = this.props;\n\t\tsetTimeout(() => this.playTransition(active), animationDelay);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { active } = this.props;\n\t\tif (prevProps.active !== active) {\n\t\t\tthis.playTransition(active);\n\t\t}\n\t}\n\n\tplayTransition(active) {\n\t\tconst { configs = {}, } = this.props;\n\t\tconst nextValue = active ? 1 : 0;\n\n\t\tif (!active) {\n\t\t\tif (configs.instantClose) {\n\t\t\t\tthis.setState({ active: null });\n\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t} else {\n\t\t\t\tthis.playAnimation(nextValue, () => {\n\t\t\t\t\tthis.setState({ active: null });\n\t\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState({ active });\n\t\t\tthis.playAnimation(nextValue);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { configs = {}, modalCount, type: modalType } = this.props,\n\t\t\t{ active } = this.state,\n\t\t\tglobalConfigs = valueAt(this, 'context.ruuiConfigs.modal'),\n\t\t\tcontainerPropsGenerator = configs.maskProps || globalConfigs.maskProps,\n\t\t\tcontainerProps = containerPropsGenerator(this.enterAnimation, configs, modalCount, modalType);\n\n\t\tif (configs.maskProps && !containerProps.style) {\n\t\t\tcontainerProps.style = globalConfigs.maskProps(\n\t\t\t\tthis.enterAnimation, configs, modalCount, modalType\n\t\t\t).style;\n\t\t}\n\n\t\treturn active ? <Animated.View {...containerProps}>\n\t\t\t<View style={styles.innerTouchable}>\n\t\t\t\t{this.renderModalInner()}\n\t\t\t</View>\n\t\t</Animated.View> : <View/>;\n\t}\n\n\trenderModalInner() {\n\t\tconst { dispatch, type: modalType, active, configs: modalConfigs } = this.props;\n\n\t\tswitch (modalType) {\n\t\tcase 'select':\n\t\t\treturn <Selector\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleSelector(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'modal':\n\t\t\treturn <CloseableModal\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleModal(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'loading':\n\t\t\treturn <LoadingMask\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tdefault:\n\t\t\treturn <View/>;\n\t\t}\n\t}\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: false,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport function defaultMaskPropsGenerator(animation, configs, modalCount, modalType) {\n\tconst averageOpacity = (0.8 / modalCount) + (modalCount * 0.1),\n\t\tbackgroundColor = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: ['rgba(0, 0, 0, 0)', `rgba(0, 0, 0, ${averageOpacity})`],\n\t\t}),\n\t\tstyle = [styles.container, {\n\t\t\tzIndex: configs.zIndex,\n\t\t\tbackgroundColor,\n\t\t}];\n\n\treturn { style, };\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n\tinnerTouchable: {\n\t\tflex: 1,\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n});\n\n'ruui/src/components/loadingMask.js'\n:import React, { Component } from 'react';\nimport { ActivityIndicator, View, TouchableOpacity, StyleSheet } from 'react-native';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tconfigs?: Object,\n\tdispatch?: Function,\n};\n\nclass RuuiLoadingModal extends Component<any, Props, any> {\n\tprops: Props;\n\n\trender() {\n\t\tconst { configs = {} } = this.props,\n\t\t\tindicatorColor = configs.indicatorColor || '#ffffff',\n\t\t\tindicatorSize = configs.indicatorSize || 'small';\n\n\t\treturn <View style={styles.container}>\n\t\t\t<TouchableOpacity onPress={this.onMaskPress}>\n\t\t\t\t<ActivityIndicator color={indicatorColor} size={indicatorSize}/>\n\t\t\t</TouchableOpacity>\n\t\t</View>;\n\t}\n\n\tonMaskPress = () => {\n\t\tconst { dispatch, configs } = this.props;\n\n\t\tif (configs.tapToClose) {\n\t\t\tdispatch(appActions.toggleLoading(false));\n\t\t}\n\t}\n}\n\nexport default RuuiLoadingModal;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t\talignItems: 'center', justifyContent: 'center',\n\t},\n});\n\n'ruui/src/components/modals.js'\n:import React, { Component } from 'react';\nimport { View, StyleSheet, } from 'react-native';\n\nimport Modal from './modal';\nimport RuuiDropdown from './dropdown';\nimport { connect } from '../utils';\n\ntype Props = {\n\tpreRenders?: Array<Object>,\n\tpreRenderDelay?: Number,\n\tmodals?: Array<Object>,\n\tdispatch?: Function,\n\tscreenSize?: { width?: number, height?: number },\n\tanimationDelay?: Number,\n};\n\nclass RuuiModals extends Component {\n\tprops: Props;\n\tstatic defaultProps = {\n\t\tanimationDelay: 200,\n\t\tpreRenderDelay: 300,\n\t};\n\n\tcomponentDidMount() {\n\t\tconst { dispatch, preRenders, preRenderDelay, } = this.props;\n\n\t\tif (preRenders?.length) {\n\t\t\tfor (let i = 0; i < preRenders.length; i += 1) {\n\t\t\t\tconst item = preRenders[i];\n\t\t\t\titem.flag = false;\n\t\t\t\tsetTimeout(() => dispatch(item), i * preRenderDelay);\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { dispatch, modals, screenSize, animationDelay, } = this.props,\n\t\t\tmodalArray = Object.keys(modals).map(key => Object.assign({}, modals[key], { id: key }));\n\n\t\treturn <View\n\t\t\tref={(ref) => { global.modalsContainer = ref; }}\n\t\t\tpointerEvents=\"box-none\"\n\t\t\tstyle={styles.container}>\n\t\t\t{modalArray.map((modalConfigs, i) => {\n\t\t\t\tif (modalConfigs.type === 'dropdown') {\n\t\t\t\t\treturn <RuuiDropdown\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tscreenSize={screenSize}\n\t\t\t\t\t\t{...modalConfigs}\n\t\t\t\t\t/>;\n\t\t\t\t}\n\t\t\t\treturn <Modal\n\t\t\t\t\tkey={i}\n\t\t\t\t\tmodalCount={modalArray.filter(e => e.type !== 'dropdown').length}\n\t\t\t\t\tdispatch={dispatch}\n\t\t\t\t\tanimationDelay={animationDelay}\n\t\t\t\t\t{...modalConfigs}/>;\n\t\t\t})}\n\t\t</View>;\n\t}\n}\n\nexport default connect(({ activeModals }) => {\n\treturn {\n\t\tmodals: activeModals,\n\t};\n})(RuuiModals);\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n});\n\n'ruui/src/utils/store/appAction.js'\n:import * as Actions from './actions';\nimport { uuid } from '../helpers';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function updateThemeConfigs(configs = {}) {\n\treturn { type: Actions.UpdateThemeConfigs, configs };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}",
        "gt": [
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/loadingMask.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/modals.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'wp-optionskit/build/webpack.prod.conf.js'",
            "'wp-optionskit/build/build.js'",
            "'wp-optionskit/build/webpack.base.conf.js'",
            "'wp-optionskit/build/utils.js'",
            "'wp-optionskit/build/vue-loader.conf.js'"
        ],
        "content": "'wp-optionskit/build/webpack.prod.conf.js'\n:'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst webpack = require('webpack')\nconst config = require('../config')\nconst merge = require('webpack-merge')\nconst baseWebpackConfig = require('./webpack.base.conf')\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nconst env = require('../config/prod.env')\n\nconst webpackConfig = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({\n      sourceMap: config.build.productionSourceMap,\n      extract: true,\n      usePostCSS: true\n    })\n  },\n  devtool: config.build.productionSourceMap ? config.build.devtool : false,\n  output: {\n    path: config.build.assetsRoot,\n    filename: utils.assetsPath('js/[name].js'),\n    chunkFilename: utils.assetsPath('js/[id].js')\n  },\n  plugins: [\n\n    new webpack.DefinePlugin({\n      'process.env': env\n    }),\n    new UglifyJsPlugin({\n      uglifyOptions: {\n        compress: {\n          warnings: false\n        }\n      },\n      sourceMap: config.build.productionSourceMap,\n      parallel: true\n    }),\n\n    new ExtractTextPlugin({\n      filename: utils.assetsPath('css/[name].css'),\n\n\n\n\n      allChunks: true,\n    }),\n\n\n    new OptimizeCSSPlugin({\n      cssProcessorOptions: config.build.productionSourceMap\n        ? { safe: true, map: { inline: false } }\n        : { safe: true }\n    }),\n\n\n\n    new HtmlWebpackPlugin({\n      filename: config.build.index,\n      template: 'index.html',\n      inject: true,\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeAttributeQuotes: true\n\n\n      },\n\n      chunksSortMode: 'dependency'\n    }),\n\n    new webpack.HashedModuleIdsPlugin(),\n\n    new webpack.optimize.ModuleConcatenationPlugin(),\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks (module) {\n\n        return (\n          module.resource &&\n          /\\.js$/.test(module.resource) &&\n          module.resource.indexOf(\n            path.join(__dirname, '../node_modules')\n          ) === 0\n        )\n      }\n    }),\n\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest',\n      minChunks: Infinity\n    }),\n\n\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'app',\n      async: 'vendor-async',\n      children: true,\n      minChunks: 3\n    }),\n\n\n    new CopyWebpackPlugin([\n      {\n        from: path.resolve(__dirname, '../static'),\n        to: config.build.assetsSubDirectory,\n        ignore: ['.*']\n      }\n    ])\n  ]\n})\n\nif (config.build.productionGzip) {\n  const CompressionWebpackPlugin = require('compression-webpack-plugin')\n\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      asset: '[path].gz[query]',\n      algorithm: 'gzip',\n      test: new RegExp(\n        '\\\\.(' +\n        config.build.productionGzipExtensions.join('|') +\n        ')$'\n      ),\n      threshold: 10240,\n      minRatio: 0.8\n    })\n  )\n}\n\nif (config.build.bundleAnalyzerReport) {\n  const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin\n  webpackConfig.plugins.push(new BundleAnalyzerPlugin())\n}\n\nmodule.exports = webpackConfig\n\n'wp-optionskit/build/build.js'\n:'use strict'\nrequire('./check-versions')()\n\nprocess.env.NODE_ENV = 'production'\n\nconst ora = require('ora')\nconst rm = require('rimraf')\nconst path = require('path')\nconst chalk = require('chalk')\nconst webpack = require('webpack')\nconst config = require('../config')\nconst webpackConfig = require('./webpack.prod.conf')\n\nconst spinner = ora('building for production...')\nspinner.start()\n\nrm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err => {\n  if (err) throw err\n  webpack(webpackConfig, (err, stats) => {\n    spinner.stop()\n    if (err) throw err\n    process.stdout.write(stats.toString({\n      colors: true,\n      modules: false,\n      children: false,\n      chunks: false,\n      chunkModules: false\n    }) + '\\n\\n')\n\n    if (stats.hasErrors()) {\n      console.log(chalk.red('  Build failed with errors.\\n'))\n      process.exit(1)\n    }\n\n    console.log(chalk.cyan('  Build complete.\\n'))\n    console.log(chalk.yellow(\n      '  Tip: built files are meant to be served over an HTTP server.\\n' +\n      '  Opening index.html over file:\n    ))\n  })\n})\n\n'wp-optionskit/build/webpack.base.conf.js'\n:'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst config = require('../config')\nconst vueLoaderConfig = require('./vue-loader.conf')\n\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\n\n\nmodule.exports = {\n  context: path.resolve(__dirname, '../'),\n  entry: {\n    app: './src/main.js'\n  },\n  output: {\n    path: config.build.assetsRoot,\n\t  jsonpFunction: 'wpJsonpFlightsWidget',\n    filename: '[name].js',\n    publicPath: process.env.NODE_ENV === 'production'\n      ? config.build.assetsPublicPath\n      : config.dev.assetsPublicPath\n  },\n  resolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src'),\n    }\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test'), resolve('node_modules/webpack-dev-server/client')]\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('media/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  },\n  node: {\n\n\n    setImmediate: false,\n\n\n    dgram: 'empty',\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty',\n    child_process: 'empty'\n  }\n}\n\n'wp-optionskit/build/utils.js'\n:'use strict'\nconst path = require('path')\nconst config = require('../config')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst packageConfig = require('../package.json')\n\nexports.assetsPath = function (_path) {\n  const assetsSubDirectory = process.env.NODE_ENV === 'production'\n    ? config.build.assetsSubDirectory\n    : config.dev.assetsSubDirectory\n\n  return path.posix.join(assetsSubDirectory, _path)\n}\n\nexports.cssLoaders = function (options) {\n  options = options || {}\n\n  const cssLoader = {\n    loader: 'css-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n  const postcssLoader = {\n    loader: 'postcss-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n\n  function generateLoaders (loader, loaderOptions) {\n    const loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]\n\n    if (loader) {\n      loaders.push({\n        loader: loader + '-loader',\n        options: Object.assign({}, loaderOptions, {\n          sourceMap: options.sourceMap\n        })\n      })\n    }\n\n\n\n    if (options.extract) {\n      return ExtractTextPlugin.extract({\n        use: loaders,\n        fallback: 'vue-style-loader'\n      })\n    } else {\n      return ['vue-style-loader'].concat(loaders)\n    }\n  }\n\n\n  return {\n    css: generateLoaders(),\n    postcss: generateLoaders(),\n    less: generateLoaders('less'),\n    sass: generateLoaders('sass', { indentedSyntax: true }),\n    scss: generateLoaders('sass'),\n    stylus: generateLoaders('stylus'),\n    styl: generateLoaders('stylus')\n  }\n}\n\n\nexports.styleLoaders = function (options) {\n  const output = []\n  const loaders = exports.cssLoaders(options)\n\n  for (const extension in loaders) {\n    const loader = loaders[extension]\n    output.push({\n      test: new RegExp('\\\\.' + extension + '$'),\n      use: loader\n    })\n  }\n\n  return output\n}\n\nexports.createNotifierCallback = () => {\n  const notifier = require('node-notifier')\n\n  return (severity, errors) => {\n    if (severity !== 'error') return\n\n    const error = errors[0]\n    const filename = error.file && error.file.split('!').pop()\n\n    notifier.notify({\n      title: packageConfig.name,\n      message: severity + ': ' + error.name,\n      subtitle: filename || '',\n      icon: path.join(__dirname, 'logo.png')\n    })\n  }\n}\n\n'wp-optionskit/build/vue-loader.conf.js'\n:'use strict'\nconst utils = require('./utils')\nconst config = require('../config')\nconst isProduction = process.env.NODE_ENV === 'production'\nconst sourceMapEnabled = isProduction\n  ? config.build.productionSourceMap\n  : config.dev.cssSourceMap\n\nmodule.exports = {\n  loaders: utils.cssLoaders({\n    sourceMap: sourceMapEnabled,\n    extract: isProduction\n  }),\n  cssSourceMap: sourceMapEnabled,\n  cacheBusting: config.dev.cacheBusting,\n  transformToRequire: {\n    video: ['src', 'poster'],\n    source: 'src',\n    img: 'src',\n    image: 'xlink:href'\n  }\n}\n",
        "gt": [
            "'wp-optionskit/build/utils.js'",
            "'wp-optionskit/build/vue-loader.conf.js'",
            "'wp-optionskit/build/webpack.base.conf.js'",
            "'wp-optionskit/build/webpack.prod.conf.js'",
            "'wp-optionskit/build/build.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/utils/store/actions.js'",
            "'ruui/src/components/modals.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/index.js'"
        ],
        "content": "'ruui/src/utils/store/actions.js'\n:export const ReduxInit\t\t\t\t\t\t\t\t\t\t\t= '@@redux/INIT';\n\nexport const ResetState\t\t\t\t\t\t\t\t\t\t\t= '@RUUI:RESET-STATE';\nexport const UpdateThemeConfigs\t\t\t\t\t\t\t= '@RUUI:UPDATE-THEME-CONFIGS';\nexport const UpdateDimensionInfo\t\t\t\t\t\t= '@RUUI:UPDATE-DIMENSIONS-INFO';\nexport const UpdateNetInfo\t\t\t\t\t\t\t\t\t= '@RUUI:UPDATE-NET-INFO';\nexport const ToggleSelect\t\t\t\t\t\t\t\t\t\t= '@RUUI:TOGGLE-SELECT';\nexport const ToggleModal\t\t\t\t\t\t\t\t\t\t= '@RUUI:TOGGLE-MODAL';\nexport const ToggleDropdown\t\t\t\t\t\t\t\t\t= '@RUUI-TOGGLE-DROPDOWN';\nexport const ToggleLoading\t\t\t\t\t\t\t\t\t= '@RUUI:TOGGLE-LOADING';\nexport const RouterPush\t\t\t\t\t\t\t\t\t\t\t= '@ROUTER:PUSH';\nexport const RouterGoTo\t\t\t\t\t\t\t\t\t\t\t= '@ROUTER:GOTO';\nexport const RouterReplace\t\t\t\t\t\t\t\t\t= '@ROUTER:REPLACE';\nexport const RouterPop\t\t\t\t\t\t\t\t\t\t\t= '@ROUTER:POP';\nexport const RouterReset\t\t\t\t\t\t\t\t\t\t= '@ROUTER:RESET';\nexport const InsertSnackBar\t\t\t\t\t\t\t\t\t= '@RUUI-INSERT-SNACK-BAR';\nexport const StartDestroySnackBar\t\t\t\t\t\t= '@RUUI-START-DESTROY-SNACK-BAR';\nexport const DestroySnackBar\t\t\t\t\t\t\t\t= '@RUUI-DESTROY-SNACK-BAR';\n\n'ruui/src/components/modals.js'\n:import React, { Component } from 'react';\nimport { View, StyleSheet, } from 'react-native';\n\nimport Modal from './modal';\nimport RuuiDropdown from './dropdown';\nimport { connect } from '../utils';\n\ntype Props = {\n\tpreRenders?: Array<Object>,\n\tpreRenderDelay?: Number,\n\tmodals?: Array<Object>,\n\tdispatch?: Function,\n\tscreenSize?: { width?: number, height?: number },\n\tanimationDelay?: Number,\n};\n\nclass RuuiModals extends Component {\n\tprops: Props;\n\tstatic defaultProps = {\n\t\tanimationDelay: 200,\n\t\tpreRenderDelay: 300,\n\t};\n\n\tcomponentDidMount() {\n\t\tconst { dispatch, preRenders, preRenderDelay, } = this.props;\n\n\t\tif (preRenders?.length) {\n\t\t\tfor (let i = 0; i < preRenders.length; i += 1) {\n\t\t\t\tconst item = preRenders[i];\n\t\t\t\titem.flag = false;\n\t\t\t\tsetTimeout(() => dispatch(item), i * preRenderDelay);\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { dispatch, modals, screenSize, animationDelay, } = this.props,\n\t\t\tmodalArray = Object.keys(modals).map(key => Object.assign({}, modals[key], { id: key }));\n\n\t\treturn <View\n\t\t\tref={(ref) => { global.modalsContainer = ref; }}\n\t\t\tpointerEvents=\"box-none\"\n\t\t\tstyle={styles.container}>\n\t\t\t{modalArray.map((modalConfigs, i) => {\n\t\t\t\tif (modalConfigs.type === 'dropdown') {\n\t\t\t\t\treturn <RuuiDropdown\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tscreenSize={screenSize}\n\t\t\t\t\t\t{...modalConfigs}\n\t\t\t\t\t/>;\n\t\t\t\t}\n\t\t\t\treturn <Modal\n\t\t\t\t\tkey={i}\n\t\t\t\t\tmodalCount={modalArray.filter(e => e.type !== 'dropdown').length}\n\t\t\t\t\tdispatch={dispatch}\n\t\t\t\t\tanimationDelay={animationDelay}\n\t\t\t\t\t{...modalConfigs}/>;\n\t\t\t})}\n\t\t</View>;\n\t}\n}\n\nexport default connect(({ activeModals }) => {\n\treturn {\n\t\tmodals: activeModals,\n\t};\n})(RuuiModals);\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n});\n\n'ruui/src/components/modal.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, View, StyleSheet } from 'react-native';\n\nimport Selector from './selector';\nimport LoadingMask from './loadingMask';\nimport CloseableModal from './closeableModal';\nimport { valueAt } from '../utils';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tactive?: any,\n\ttype?: string,\n\tconfigs?: Object,\n\tmodalCount?: number,\n\tdispatch?: Function,\n\tanimationDelay?: Number,\n};\n\nexport default class RuuiModal extends Component {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactive: props.active,\n\t\t};\n\t\tthis.enterAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { active, animationDelay, } = this.props;\n\t\tsetTimeout(() => this.playTransition(active), animationDelay);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { active } = this.props;\n\t\tif (prevProps.active !== active) {\n\t\t\tthis.playTransition(active);\n\t\t}\n\t}\n\n\tplayTransition(active) {\n\t\tconst { configs = {}, } = this.props;\n\t\tconst nextValue = active ? 1 : 0;\n\n\t\tif (!active) {\n\t\t\tif (configs.instantClose) {\n\t\t\t\tthis.setState({ active: null });\n\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t} else {\n\t\t\t\tthis.playAnimation(nextValue, () => {\n\t\t\t\t\tthis.setState({ active: null });\n\t\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState({ active });\n\t\t\tthis.playAnimation(nextValue);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { configs = {}, modalCount, type: modalType } = this.props,\n\t\t\t{ active } = this.state,\n\t\t\tglobalConfigs = valueAt(this, 'context.ruuiConfigs.modal'),\n\t\t\tcontainerPropsGenerator = configs.maskProps || globalConfigs.maskProps,\n\t\t\tcontainerProps = containerPropsGenerator(this.enterAnimation, configs, modalCount, modalType);\n\n\t\tif (configs.maskProps && !containerProps.style) {\n\t\t\tcontainerProps.style = globalConfigs.maskProps(\n\t\t\t\tthis.enterAnimation, configs, modalCount, modalType\n\t\t\t).style;\n\t\t}\n\n\t\treturn active ? <Animated.View {...containerProps}>\n\t\t\t<View style={styles.innerTouchable}>\n\t\t\t\t{this.renderModalInner()}\n\t\t\t</View>\n\t\t</Animated.View> : <View/>;\n\t}\n\n\trenderModalInner() {\n\t\tconst { dispatch, type: modalType, active, configs: modalConfigs } = this.props;\n\n\t\tswitch (modalType) {\n\t\tcase 'select':\n\t\t\treturn <Selector\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleSelector(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'modal':\n\t\t\treturn <CloseableModal\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleModal(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'loading':\n\t\t\treturn <LoadingMask\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tdefault:\n\t\t\treturn <View/>;\n\t\t}\n\t}\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: false,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport function defaultMaskPropsGenerator(animation, configs, modalCount, modalType) {\n\tconst averageOpacity = (0.8 / modalCount) + (modalCount * 0.1),\n\t\tbackgroundColor = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: ['rgba(0, 0, 0, 0)', `rgba(0, 0, 0, ${averageOpacity})`],\n\t\t}),\n\t\tstyle = [styles.container, {\n\t\t\tzIndex: configs.zIndex,\n\t\t\tbackgroundColor,\n\t\t}];\n\n\treturn { style, };\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n\tinnerTouchable: {\n\t\tflex: 1,\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n});\n\n'ruui/src/utils/store/appAction.js'\n:import * as Actions from './actions';\nimport { uuid } from '../helpers';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function updateThemeConfigs(configs = {}) {\n\treturn { type: Actions.UpdateThemeConfigs, configs };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n",
        "gt": [
            "'ruui/src/utils/store/actions.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/modals.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'react-modal/src/helpers/bodyTrap.js'",
            "'react-modal/specs/index.js'",
            "'react-modal/src/helpers/portalOpenInstances.js'",
            "'react-modal/specs/Modal.style.spec.js'",
            "'react-modal/specs/helper.js'"
        ],
        "content": "'react-modal/src/helpers/bodyTrap.js'\n:import portalOpenInstances from \"./portalOpenInstances\";\n\n\nlet before,\n  after,\n  instances = [];\n\n\n\nexport function resetState() {\n  for (let item of [before, after]) {\n    if (!item) continue;\n    item.parentNode && item.parentNode.removeChild(item);\n  }\n  before = after = null;\n  instances = [];\n}\n\n\nexport function log() {\n  console.log(\"bodyTrap ----------\");\n  console.log(instances.length);\n  for (let item of [before, after]) {\n    let check = item || {};\n    console.log(check.nodeName, check.className, check.id);\n  }\n  console.log(\"edn bodyTrap ----------\");\n}\n\n\nfunction focusContent() {\n  if (instances.length === 0) {\n    if (process.env.NODE_ENV !== \"production\") {\n\n      console.warn(`React-Modal: Open instances > 0 expected`);\n    }\n    return;\n  }\n  instances[instances.length - 1].focusContent();\n}\n\nfunction bodyTrap(eventType, openInstances) {\n  if (!before && !after) {\n    before = document.createElement(\"div\");\n    before.setAttribute(\"data-react-modal-body-trap\", \"\");\n    before.style.position = \"absolute\";\n    before.style.opacity = \"0\";\n    before.setAttribute(\"tabindex\", \"0\");\n    before.addEventListener(\"focus\", focusContent);\n    after = before.cloneNode();\n    after.addEventListener(\"focus\", focusContent);\n  }\n\n  instances = openInstances;\n\n  if (instances.length > 0) {\n\n    if (document.body.firstChild !== before) {\n      document.body.insertBefore(before, document.body.firstChild);\n    }\n    if (document.body.lastChild !== after) {\n      document.body.appendChild(after);\n    }\n  } else {\n\n    if (before.parentElement) {\n      before.parentElement.removeChild(before);\n    }\n    if (after.parentElement) {\n      after.parentElement.removeChild(after);\n    }\n  }\n}\n\nportalOpenInstances.subscribe(bodyTrap);\n\n'react-modal/specs/index.js'\n:\n\nimport ModalState from \"./Modal.spec\";\nimport ModalEvents from \"./Modal.events.spec\";\nimport ModalStyle from \"./Modal.style.spec\";\nimport ModalHelpers from \"./Modal.helpers.spec\";\nimport ModalTestability from \"./Modal.testability.spec\";\n\ndescribe(\"State\", ModalState);\ndescribe(\"Style\", ModalStyle);\ndescribe(\"Events\", ModalEvents);\ndescribe(\"Helpers\", ModalHelpers);\ndescribe(\"Testability\", ModalTestability);\n\n'react-modal/src/helpers/portalOpenInstances.js'\n:\n\nclass PortalOpenInstances {\n  constructor() {\n    this.openInstances = [];\n    this.subscribers = [];\n  }\n\n  register = openInstance => {\n    if (this.openInstances.indexOf(openInstance) !== -1) {\n      if (process.env.NODE_ENV !== \"production\") {\n\n        console.warn(\n          `React-Modal: Cannot register modal instance that's already open`\n        );\n      }\n      return;\n    }\n    this.openInstances.push(openInstance);\n    this.emit(\"register\");\n  };\n\n  deregister = openInstance => {\n    const index = this.openInstances.indexOf(openInstance);\n    if (index === -1) {\n      if (process.env.NODE_ENV !== \"production\") {\n\n        console.warn(\n          `React-Modal: Unable to deregister ${openInstance} as ` +\n            `it was never registered`\n        );\n      }\n      return;\n    }\n    this.openInstances.splice(index, 1);\n    this.emit(\"deregister\");\n  };\n\n  subscribe = callback => {\n    this.subscribers.push(callback);\n  };\n\n  emit = eventType => {\n    this.subscribers.forEach(subscriber =>\n      subscriber(\n        eventType,\n\n        this.openInstances.slice()\n      )\n    );\n  };\n}\n\nlet portalOpenInstances = new PortalOpenInstances();\n\n\n\nexport function log() {\n  console.log(\"portalOpenInstances ----------\");\n  console.log(portalOpenInstances.openInstances.length);\n  portalOpenInstances.openInstances.forEach(p => console.log(p));\n  console.log(\"end portalOpenInstances ----------\");\n}\n\n\nexport function resetState() {\n  portalOpenInstances = new PortalOpenInstances();\n}\n\n\nexport default portalOpenInstances;\n\n'react-modal/specs/Modal.style.spec.js'\n:\nimport \"should\";\nimport Modal from \"react-modal\";\nimport { mcontent, moverlay, withModal } from \"./helper\";\n\nexport default () => {\n  it(\"overrides the default styles when a custom classname is used\", () => {\n    const props = { isOpen: true, className: \"myClass\" };\n    withModal(props, null, modal => {\n      mcontent(modal).style.top.should.be.eql(\"\");\n    });\n  });\n\n  it(\"overrides the default styles when using custom overlayClassName\", () => {\n    const overlayClassName = \"myOverlayClass\";\n    const props = { isOpen: true, overlayClassName };\n    withModal(props, null, modal => {\n      moverlay(modal).style.backgroundColor.should.be.eql(\"\");\n    });\n  });\n\n  it(\"supports adding style to the modal contents\", () => {\n    const style = { content: { width: \"20px\" } };\n    const props = { isOpen: true, style };\n    withModal(props, null, modal => {\n      mcontent(modal).style.width.should.be.eql(\"20px\");\n    });\n  });\n\n  it(\"supports overriding style on the modal contents\", () => {\n    const style = { content: { position: \"static\" } };\n    const props = { isOpen: true, style };\n    withModal(props, null, modal => {\n      mcontent(modal).style.position.should.be.eql(\"static\");\n    });\n  });\n\n  it(\"supports adding style on the modal overlay\", () => {\n    const style = { overlay: { width: \"75px\" } };\n    const props = { isOpen: true, style };\n    withModal(props, null, modal => {\n      moverlay(modal).style.width.should.be.eql(\"75px\");\n    });\n  });\n\n  it(\"supports overriding style on the modal overlay\", () => {\n    const style = { overlay: { position: \"static\" } };\n    const props = { isOpen: true, style };\n    withModal(props, null, modal => {\n      moverlay(modal).style.position.should.be.eql(\"static\");\n    });\n  });\n\n  it(\"supports overriding the default styles\", () => {\n    const previousStyle = Modal.defaultStyles.content.position;\n\n\n    const newStyle = previousStyle === \"relative\" ? \"static\" : \"relative\";\n    Modal.defaultStyles.content.position = newStyle;\n    const props = { isOpen: true };\n    withModal(props, null, modal => {\n      modal.portal.content.style.position.should.be.eql(newStyle);\n      Modal.defaultStyles.content.position = previousStyle;\n    });\n  });\n};\n\n'react-modal/specs/helper.js'\n:import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Modal, { bodyOpenClassName } from \"../src/components/Modal\";\nimport TestUtils from \"react-dom/test-utils\";\nimport { log as classListLog } from \"../src/helpers/classList\";\nimport { log as focusManagerLog } from \"../src/helpers/focusManager\";\nimport { log as ariaAppLog } from \"../src/helpers/ariaAppHider\";\nimport { log as bodyTrapLog } from \"../src/helpers/bodyTrap\";\nimport { log as portalInstancesLog } from \"../src/helpers/portalOpenInstances\";\n\nconst debug = false;\n\nlet i = 0;\n\n\nexport function log(label, spaces) {\n  if (!debug) return;\n\n  console.log(`${label} -----------------`);\n  console.log(document.body.children.length);\n  const logChildren = c => console.log(c.nodeName, c.className, c.id);\n  document.body.children.forEach(logChildren);\n\n  ariaAppLog();\n  bodyTrapLog();\n  classListLog();\n  focusManagerLog();\n  portalInstancesLog();\n\n  console.log(`end ${label} -----------------` + (!spaces ? '' : `\n\n\n`));\n}\n\nlet elementPool = [];\n\n\nexport function createHTMLElement(name) {\n  const e = document.createElement(name);\n  elementPool[elementPool.length - 1].push(e);\n  e.className = `element_pool_${name}-${++i}`;\n  return e;\n}\n\n\nexport function drainPool(pool) {\n  pool.forEach(e => e.parentNode && e.parentNode.removeChild(e));\n}\n\n\nexport function withElementCollector(work) {\n  let r;\n  let poolIndex = elementPool.length;\n  elementPool[poolIndex] = [];\n  try {\n    r = work();\n  } finally {\n    drainPool(elementPool[poolIndex]);\n    elementPool = elementPool.slice(\n      0, poolIndex\n    );\n  }\n  return r;\n}\n\n\nif (!String.prototype.includes) {\n  String.prototype.includes = function(search, start) {\n    if (typeof start !== \"number\") {\n      start = 0;\n    }\n\n    if (start + search.length > this.length) {\n      return false;\n    }\n\n    return this.indexOf(search, start) !== -1;\n  };\n}\n\n\nexport const documentClassList = () => document.body.classList;\n\n\nexport const isDocumentWithReactModalOpenClass = (\n  bodyClass = bodyOpenClassName\n) => document.body.className.includes(bodyClass);\n\n\nexport const htmlClassList = () =>\n  document.getElementsByTagName(\"html\")[0].classList;\n\n\nexport const isHtmlWithReactModalOpenClass = htmlClass =>\n  htmlClassList().contains(htmlClass);\n\n\nexport const findDOMWithClass = TestUtils.findRenderedDOMComponentWithClass;\n\n\nconst getModalAttribute = component => (instance, attr) =>\n  modalComponent(component)(instance).getAttribute(attr);\n\n\nconst modalComponent = component => instance => instance.portal[component];\n\n\nexport const mcontent = modalComponent(\"content\");\n\n\nexport const moverlay = modalComponent(\"overlay\");\n\n\nexport const contentAttribute = getModalAttribute(\"content\");\n\n\nexport const overlayAttribute = getModalAttribute(\"overlay\");\n\nconst Simulate = TestUtils.Simulate;\n\nconst dispatchMockEvent = eventCtor => (key, code) => (element, opts) =>\n  eventCtor(\n    element,\n    Object.assign(\n      {},\n      {\n        key: key,\n        which: code\n      },\n      code,\n      opts\n    )\n  );\n\nconst dispatchMockKeyDownEvent = dispatchMockEvent(Simulate.keyDown);\n\n\nexport const escKeyDown = dispatchMockKeyDownEvent(\"ESC\", { keyCode: 27 });\n\nexport const escKeyDownWithCode = dispatchMockKeyDownEvent(\"ESC\", {\n  code: \"Escape\"\n});\n\nexport const tabKeyDown = dispatchMockKeyDownEvent(\"TAB\", { keyCode: 9 });\n\nexport const tabKeyDownWithCode = dispatchMockKeyDownEvent(\"TAB\", {\n  code: \"Tab\"\n});\n\nexport const clickAt = Simulate.click;\n\nexport const mouseUpAt = Simulate.mouseUp;\n\nexport const mouseDownAt = Simulate.mouseDown;\n\nexport const noop = () => {};\n\n\nexport const withModal = function(props, children, test = noop) {\n  return withElementCollector(() => {\n    const node = createHTMLElement();\n    const modalProps = { ariaHideApp: false, ...props };\n    let modal;\n    try {\n      ReactDOM.render(\n        <Modal ref={m => (modal = m)} {...modalProps}>\n          {children}\n        </Modal>,\n        node\n      );\n      test(modal);\n    } finally {\n      ReactDOM.unmountComponentAtNode(node);\n    }\n  });\n};\n",
        "gt": [
            "'react-modal/src/helpers/portalOpenInstances.js'",
            "'react-modal/src/helpers/bodyTrap.js'",
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/Modal.style.spec.js'",
            "'react-modal/specs/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/index.js'",
            "'ruui/src/store/action/app.js'",
            "'ruui/src/components/responsibleTouchArea.js'"
        ],
        "content": "'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/store/action/app.js'\n:import * as Actions from '../actions';\nimport { uuid } from '../../utils';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function reduxSync(state = {}) {\n\treturn { type: Actions.ReduxSync, state };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function toggleTooltip(flag, configs = {}) {\n\treturn { type: Actions.ToggleTooltip, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}\n\n'ruui/src/components/responsibleTouchArea.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, TouchableOpacity, View, StyleSheet, Platform } from 'react-native';\nimport tinyColor from 'tinycolor2';\n\nimport RippleEffect from './rippleEffect';\nimport { debounce, isIos, } from '../utils';\nimport * as appActions from '../store/action/app';\nimport type { Style, Element, SnappingDirection, } from '../typeDefinition';\n\ntype Props = {\n\tchildren?: Element,\n\twrapperStyle?: Style,\n\tinnerStyle?: Style,\n\ttooltip?: String | Element,\n\ttooltipWrapperStyle?: Style,\n\ttooltipInnerStyle?: Style,\n\ttooltipDirection?: SnappingDirection,\n\ttooltipPositionSpacing?: number,\n\ttooltipPositionOffset?: Object,\n\tripple?: boolean,\n\tstaticRipple?: boolean,\n\trippleColor?: string,\n\trippleInitialOpacity?: number,\n\trippleInitialScale?: number,\n\trippleAnimationSpeed?: number,\n\tfade?: boolean,\n\tfadeLevel?: number,\n\traise?: boolean,\n\tdebounce?: number,\n\tdisabled?: boolean,\n\tactiveOpacity?: number,\n\tonPress?: Function,\n\tonPressIn?: Function,\n\tonPressOut?: Function,\n\tonMouseEnter?: Function,\n\tonMouseLeave?: Function,\n};\n\nconst MAX_PARTICLE_COUNT = 5;\n\nclass RuuiResponsibleTouchArea extends Component<any, Props, any> {\n\tprops: Props;\n\n\tstatic contextTypes = {\n\t\truuiStore: PropTypes.object,\n\t};\n\n\tstatic defaultProps = {\n\t\tstaticRipple: false,\n\t\tactiveOpacity: 0.7,\n\t\tripple: true,\n\t\traise: false,\n\t\tfade: false,\n\t\tfadeLevel: 0.1,\n\t\tdisabled: false,\n\t};\n\n\trippleIndex = 0;\n\n\tcomponentWillUnmount() {\n\t\tthis.willUnmount = true;\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tripples: [],\n\t\t\tmouseInside: false,\n\t\t};\n\n\t\tthis.raiseAnimation = new Animated.Value(0);\n\t\tthis.fadeAnimation = new Animated.Value(0);\n\n\t\tif (props.debounce) {\n\t\t\tthis.handlePress = debounce(this.handlePress.bind(this), props.debounce);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { children, wrapperStyle, innerStyle, disabled, onPressIn, onPressOut, onPress, ripple, fade, fadeLevel, raise, ...otherProps } = this.props,\n\t\t\tflattenWrapperStyles = StyleSheet.flatten(wrapperStyle) || {},\n\t\t\tplatformStyles = Platform.select({\n\t\t\t\tweb: { cursor: 'pointer', userSelect: 'none' },\n\t\t\t}),\n\t\t\tisLightBackground = tinyColor(flattenWrapperStyles.backgroundColor).getBrightness() > 180,\n\t\t\twrapperBorderRadius = extractBorderRadius(flattenWrapperStyles);\n\n\t\treturn <View\n\t\t\tonMouseLeave={this.onMouseLeave}\n\t\t\tonMouseEnter={this.onMouseEnter}\n\t\t\tref={(instance) => { this.wrapperView = instance; }}\n\t\t\tcollapsable={false}\n\t\t\tstyle={[wrapperStyle, platformStyles]}>\n\n\t\t\t{raise && this.renderShadowEffect(raise, isLightBackground, wrapperBorderRadius)}\n\t\t\t{fade && this.renderFadeEffect(fade, fadeLevel, isLightBackground, wrapperBorderRadius)}\n\t\t\t{ripple && this.renderRippleEffect(isLightBackground, wrapperBorderRadius)}\n\n\t\t\t<TouchableOpacity\n\t\t\t\tdisabled={disabled}\n\t\t\t\tstyle={innerStyle}\n\t\t\t\tonPressIn={this.onPressIn}\n\t\t\t\tonPressOut={this.onPressOut}\n\t\t\t\tonPress={this.onPress}\n\t\t\t\tonStartShouldSetResponderCapture={() => !disabled}\n\t\t\t\t{...otherProps}>\n\t\t\t\t<View pointerEvents=\"none\">\n\t\t\t\t\t{children}\n\t\t\t\t</View>\n\t\t\t</TouchableOpacity>\n\t\t</View>;\n\t}\n\n\trenderShadowEffect(raise: Boolean, isLightBackground: Boolean, wrapperBorderRadius) {\n\t\tconst shadowOpacity = this.raiseAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1], outputRange: [raise ? 0.15 : 0, 0.6],\n\t\t\t}),\n\t\t\tshadow = raise && {\n\t\t\t\tborderRadius: 3,\n\t\t\t\tshadowColor: '#666666',\n\t\t\t\topacity: shadowOpacity,\n\t\t\t\tshadowOpacity: 1,\n\t\t\t\tshadowRadius: raiseShadowRadius,\n\t\t\t\tshadowOffset: { width: 0, height: 2 },\n\t\t\t};\n\n\t\treturn <Animated.View\n\t\t\tstyle={[styles.fullSizeAbsolute, shadow, wrapperBorderRadius]}/>;\n\t}\n\n\trenderFadeEffect(fade, fadeLevel, isLightBackground: Boolean, wrapperBorderRadius) {\n\t\tconst opacity = this.fadeAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1],\n\t\t\t\toutputRange: [0, fadeLevel],\n\t\t\t\textrapolate: 'clamp',\n\t\t\t}),\n\t\t\tmaskStyles = {\n\t\t\t\tbackgroundColor: isLightBackground ? '#000000' : '#ffffff',\n\t\t\t\topacity,\n\t\t\t};\n\n\t\treturn <Animated.View style={[styles.fullSizeAbsolute, wrapperBorderRadius, maskStyles]}/>;\n\t}\n\n\trenderRippleEffect(isLightBackground: Boolean, wrapperBorderRadius) {\n\t\treturn <View style={[styles.fullSizeAbsolute, wrapperBorderRadius, { overflow: 'hidden' }]}>\n\t\t\t{this.renderRipples()}\n\t\t</View>;\n\t}\n\n\trenderRipples() {\n\t\tconst { ripples } = this.state,\n\t\t\t{ rippleInitialOpacity, rippleInitialScale, rippleAnimationSpeed } = this.props;\n\n\t\treturn ripples.map((ripple) => {\n\t\t\treturn <RippleEffect\n\t\t\t\tkey={ripple.index}\n\t\t\t\tstyle={ripple.style}\n\t\t\t\tindex={ripple.index}\n\t\t\t\tinitialOpacity={rippleInitialOpacity}\n\t\t\t\tinitialScale={rippleInitialScale}\n\t\t\t\tspeed={rippleAnimationSpeed}/>;\n\t\t});\n\t}\n\n\tonPress = (e) => {\n\t\tconst { onPress } = this.props;\n\t\tif (onPress) setTimeout(() => onPress(e), 0);\n\t};\n\n\tonPressIn = (e) => {\n\t\tconst { ripples } = this.state,\n\t\t\t{ wrapperStyle, disabled, raise, staticRipple, rippleColor, onPressIn } = this.props;\n\n\t\tif (disabled) return;\n\n\t\tconst flattenWrapperStyles = StyleSheet.flatten(wrapperStyle) || {},\n\t\t\tisLightBackground = tinyColor(flattenWrapperStyles.backgroundColor).getBrightness() > 180;\n\n\t\tif (raise) this.playRaiseAnimation(1);\n\n\t\tthis.playFadeAnimation(1);\n\n\t\tconst { locationX, locationY, offsetX, offsetY, pageX, pageY } = e.nativeEvent;\n\n\t\tthis.wrapperView.measure((fx, fy, wrapperWidth, wrapperHeight, px, py) => {\n\t\t\tlet rippleRadius = 0, ripplePosition;\n\t\t\tconst touchX = locationX || offsetX, touchY = locationY || offsetY;\n\n\t\t\tif (staticRipple || !touchX) {\n\t\t\t\trippleRadius = wrapperWidth / 2;\n\t\t\t\tripplePosition = {\n\t\t\t\t\ttop: (wrapperHeight / 2) - rippleRadius,\n\t\t\t\t\tleft: (wrapperWidth / 2) - rippleRadius,\n\t\t\t\t};\n\t\t\t} else {\n\n\t\t\t\tif (touchX > wrapperWidth / 2) {\n\t\t\t\t\tif (touchY > wrapperHeight / 2) {\n\n\t\t\t\t\t\trippleRadius = Math.sqrt((touchX * touchX) + (touchY * touchY));\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst paddedY = touchY - wrapperHeight;\n\t\t\t\t\t\trippleRadius = Math.sqrt((touchX * touchX) + (paddedY * paddedY));\n\t\t\t\t\t}\n\t\t\t\t} else if (touchY > wrapperHeight / 2) {\n\n\t\t\t\t\tconst paddedX = touchX - wrapperWidth;\n\t\t\t\t\trippleRadius = Math.sqrt((paddedX * paddedX) + (touchY * touchY));\n\t\t\t\t} else {\n\n\t\t\t\t\tconst paddedX = touchX - wrapperWidth, paddedY = touchY - wrapperHeight;\n\t\t\t\t\trippleRadius = Math.sqrt((paddedX * paddedX) + (paddedY * paddedY));\n\t\t\t\t}\n\n\t\t\t\trippleRadius *= 1.2;\n\t\t\t\tripplePosition = {\n\t\t\t\t\ttop: touchY - rippleRadius,\n\t\t\t\t\tleft: touchX - rippleRadius,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.rippleIndex += 1;\n\t\t\tconst defaultRippleColor = isLightBackground ? '#333333' : '#ffffff',\n\t\t\t\tnewRipple = {\n\t\t\t\t\tindex: this.rippleIndex,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\twidth: rippleRadius * 2,\n\t\t\t\t\t\theight: rippleRadius * 2,\n\t\t\t\t\t\tborderRadius: rippleRadius,\n\t\t\t\t\t\tbackgroundColor: rippleColor || defaultRippleColor,\n\t\t\t\t\t\t...ripplePosition,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tlet nextRipples = [newRipple, ...ripples];\n\n\t\t\tif (nextRipples.length > MAX_PARTICLE_COUNT) {\n\t\t\t\tnextRipples = nextRipples.slice(0, MAX_PARTICLE_COUNT);\n\t\t\t}\n\n\t\t\tif (!this.willUnmount) this.setState({ ripples: nextRipples });\n\t\t});\n\n\t\tif (onPressIn) onPressIn(e);\n\t};\n\n\tonPressOut = (e, forceFade = false) => {\n\t\tconst { mouseInside } = this.state,\n\t\t\t{ raise, onPressOut } = this.props;\n\n\t\tif (raise) this.playRaiseAnimation(0);\n\t\tif (onPressOut && e) onPressOut(e);\n\n\t\tif (forceFade === true || !mouseInside) {\n\t\t\tthis.playFadeAnimation(0);\n\t\t}\n\t};\n\n\tonMouseEnter = () => {\n\t\tconst { ruuiStore } = this.context;\n\t\tconst { disabled, tooltip, tooltipWrapperStyle, tooltipInnerStyle, tooltipDirection, tooltipPositionSpacing, tooltipPositionOffset } = this.props;\n\n\t\tthis.setState({ mouseInside: true });\n\n\t\tif (!disabled) {\n\t\t\tthis.playFadeAnimation(1);\n\n\t\t\tif (tooltip) {\n\t\t\t\tthis.wrapperView.measure((x, y, width, height, pageX, pageY) => {\n\t\t\t\t\truuiStore.dispatch(appActions.toggleTooltip(true, {\n\t\t\t\t\t\ttargetLayout: { x: pageX, y: pageY, width, height },\n\t\t\t\t\t\tdirection: tooltipDirection,\n\t\t\t\t\t\tpositionSpacing: tooltipPositionSpacing,\n\t\t\t\t\t\tpositionOffset: tooltipPositionOffset,\n\t\t\t\t\t\tcontent: tooltip,\n\t\t\t\t\t\twrapperStyle: tooltipWrapperStyle,\n\t\t\t\t\t\tinnerStyle: tooltipInnerStyle,\n\t\t\t\t\t}));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tonMouseLeave = () => {\n\t\tconst { ruuiStore } = this.context;\n\t\tconst { disabled, tooltip } = this.props;\n\n\t\tthis.onPressOut(null, true);\n\t\tthis.setState({ mouseInside: false });\n\n\t\tif (!disabled && tooltip) {\n\t\t\truuiStore.dispatch(appActions.toggleTooltip(false));\n\t\t}\n\t};\n\n\tplayRaiseAnimation = (toValue: Number) => {\n\t\tif (this.raisingAnimation) this.raisingAnimation.clear();\n\n\t\tconst animations = [\n\t\t\tAnimated.timing(this.raiseAnimation, {\n\t\t\t\ttoValue,\n\t\t\t\tduration: 500,\n\t\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\t\tuseNativeDriver: false,\n\t\t\t}),\n\t\t];\n\n\t\tthis.raisingAnimation = Animated.parallel(animations).start();\n\t};\n\n\tplayFadeAnimation = (toValue: Number) => {\n\t\tif (this.fadingAnimation) this.fadingAnimation.clear();\n\n\t\tthis.fadingAnimation = Animated.timing(this.fadeAnimation, {\n\t\t\ttoValue,\n\t\t\tduration: 800,\n\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\tuseNativeDriver: true,\n\t\t}).start();\n\t};\n}\n\nexport default RuuiResponsibleTouchArea;\n\nfunction extractBorderRadius(baseStyles) {\n\treturn [\n\t\t'borderRadius',\n\t\t'borderTopLeftRadius',\n\t\t'borderTopRightRadius',\n\t\t'borderBottomLeftRadius',\n\t\t'borderBottomRightRadius',\n\t].reduce((accumulate, currentAttribute) => {\n\t\tif (baseStyles[currentAttribute]) {\n\t\t\taccumulate[currentAttribute] = baseStyles[currentAttribute];\n\t\t}\n\n\t\treturn accumulate;\n\t}, {});\n}\n\nconst raiseShadowRadius = isIos ? 4 : 10;\nconst styles = StyleSheet.create({\n\tfullSizeAbsolute: {\n\t\tposition: 'absolute',\n\t\ttop: 0, bottom: 0, right: 0, left: 0,\n\t},\n});\n",
        "gt": [
            "'ruui/src/store/action/app.js'",
            "'ruui/src/components/responsibleTouchArea.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/selectorItem.js'",
            "'ruui/src/configs/core/modal.js'",
            "'ruui/src/components/radioIcon.js'",
            "'ruui/src/components/selector.js'",
            "'ruui/src/configs/core/index.js'",
            "'ruui/src/components/modal.js'"
        ],
        "content": "'ruui/src/components/selectorItem.js'\n:import React, { Component } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\n\nimport ResponsibleTouchArea from './responsibleTouchArea';\nimport RadioIcon from './radioIcon';\nimport { colors, isAndroid } from '../utils';\n\ntype Props = {\n\tonPress?: Function,\n\tonSelect?: Function,\n\tonChange?: Function,\n\tgetTitle?: Function,\n\tactiveInstance?: Object,\n\toptionInstance?: Object,\n};\n\nexport default class SelectorItem extends Component<any, Props, any> {\n\tprops: Props;\n\n\trender() {\n\t\tconst { optionInstance, activeInstance } = this.props,\n\t\t\twrapperStyles = {},\n\t\t\ticonStyles = {};\n\t\tlet isActive = false;\n\n\t\tif (JSON.stringify(activeInstance) === JSON.stringify(optionInstance)) {\n\t\t\twrapperStyles.backgroundColor = '#fcfcfc';\n\t\t\ticonStyles.color = colors.iOsBlue;\n\t\t\tisActive = true;\n\t\t}\n\n\t\treturn <ResponsibleTouchArea\n\t\t\trippleColor={colors.iOsBlue}\n\t\t\tonPress={this.onItemPick}\n\t\t\twrapperStyle={[styles.optionItemWrapper, wrapperStyles]}\n\t\t\tinnerStyle={styles.optionItemInner}\n\t\t\tfadeLevel={0.04}>\n\t\t\t<View style={styles.optionInnerWrapper}>\n\t\t\t\t<View style={styles.optionIconWrapper}>\n\t\t\t\t\t<RadioIcon active={isActive}/>\n\t\t\t\t</View>\n\t\t\t\t<View style={styles.optionTextWrapper}>\n\t\t\t\t\t{this.renderOptionText()}\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t</ResponsibleTouchArea>;\n\t}\n\n\trenderOptionText() {\n\t\tconst { optionInstance, getTitle } = this.props,\n\t\t\toptionTitle = getTitle(optionInstance);\n\n\t\treturn <Text style={styles.optionTitle}>\n\t\t\t{optionTitle}\n\t\t</Text>;\n\t}\n\n\tonItemPick = () => {\n\t\tconst { onPress, optionInstance } = this.props;\n\t\tif (onPress) onPress(optionInstance);\n\t}\n}\n\nconst borderWidth = isAndroid ? 0 : 1,\n\tselectorPadding = isAndroid ? 20 : 8,\n\tselectionAlign = isAndroid ? 'left' : 'center';\n\nconst styles = StyleSheet.create({\n\toptionItemWrapper: {\n\t\tbackgroundColor: '#f9f9f9',\n\t\tborderBottomWidth: borderWidth,\n\t\tborderColor: '#dedede',\n\t},\n\toptionInnerWrapper: {\n\t\tflexDirection: 'row',\n\t},\n\toptionIconWrapper: {\n\t\twidth: 20, marginRight: 10,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n\toptionIcon: {\n\t\tcolor: '#dedede',\n\t\tfontSize: 18,\n\t},\n\toptionItemInner: {\n\t\tpadding: selectorPadding,\n\t\tpaddingTop: 12, paddingBottom: 12,\n\t},\n\toptionTextWrapper: {\n\t\tflex: 1, marginRight: 25,\n\t},\n\toptionTitle: {\n\t\tcolor: colors.iOsBlue,\n\t\tfontSize: 17,\n\t\ttextAlign: selectionAlign,\n\t\tbackgroundColor: 'transparent',\n\t},\n});\n\n'ruui/src/configs/core/modal.js'\n:import { defaultMaskPropsGenerator } from '../../components/modal';\nimport { defaultContainerPropsGenerator } from '../../components/closeableModal';\n\nexport default {\n\tmaskProps: defaultMaskPropsGenerator,\n\tcontainerProps: defaultContainerPropsGenerator,\n};\n'ruui/src/components/radioIcon.js'\n:import React, { Component } from 'react';\nimport { StyleSheet, View, Text } from 'react-native';\n\nimport { colors } from '../utils';\n\ntype Props = {\n\tactive?: boolean,\n\tcolor?: string,\n};\n\nclass RuuiRadioIcon extends Component {\n\tprops: Props;\n\n\tstatic defaultProps = {\n\t\tcolor: colors.iOsBlue,\n\t};\n\n\trender() {\n\t\tconst { active, color } = this.props,\n\t\t\twrapperStyle = { borderColor: active ? color : '#dedede', },\n\t\t\tinnerStyle = { backgroundColor: color, };\n\n\t\treturn <View style={[styles.container, wrapperStyle]}>\n\t\t\t{active ? <View style={[styles.inner, innerStyle]}/> : <View/>}\n\t\t</View>;\n\t}\n}\n\nexport default RuuiRadioIcon;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\twidth: 16, height: 16,\n\t\tborderRadius: 10,\n\t\tborderWidth: 2,\n\t\tborderColor: colors.iOsBlue,\n\t\tjustifyContent: 'center',\n\t\talignItems: 'center',\n\t},\n\tinner: {\n\t\tbackgroundColor: colors.iOsBlue,\n\t\tborderColor: '#ffffff',\n\t\tborderWidth: 1.5,\n\t\twidth: 12, height: 12,\n\t\tborderRadius: 7,\n\t},\n});\n\n'ruui/src/components/selector.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, TouchableWithoutFeedback, ScrollView, View, Text, StyleSheet } from 'react-native';\n\nimport ResponsibleTouchArea from './responsibleTouchArea';\nimport SelectorItem from './selectorItem';\nimport { isAndroid, colors } from '../utils';\nimport { screenWidthPadding } from '../utils/screen';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tconfigs?: Object,\n\tanimation?: any,\n\tactive?: boolean,\n\tdispatch?: Function,\n\tonRequestClose?: Function,\n};\n\nclass Selector extends Component<any, Props, any> {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiStore: PropTypes.object,\n\t};\n\n\tconstructor(props, context) {\n\t\tsuper(props);\n\t\tthis.store = context.ruuiStore;\n\t}\n\n\trender() {\n\t\tconst { animation, configs, active, onRequestClose } = this.props,\n\t\t\ttranslateY = animation.interpolate({\n\t\t\t\tinputRange: [0, 0.32, 1], outputRange: [maxContainerSize, maxContainerSize * 0.15, 0],\n\t\t\t}), selectionContainerStyles = {\n\t\t\t\ttransform: [{ translateY }],\n\t\t\t},\n\t\t\tOptionWrapperElement = configs.options.length > 5 ? ScrollView : View,\n\t\t\tpointerEvents = active ? 'auto' : 'none';\n\n\t\treturn <View pointerEvents={pointerEvents} style={styles.container}>\n\t\t\t{configs.tapToClose ? <TouchableWithoutFeedback\n\t\t\t\tonPress={() => onRequestClose(configs)}>\n\t\t\t\t<View style={styles.touchableMask}/>\n\t\t\t</TouchableWithoutFeedback> : <View/>}\n\n\t\t\t<Animated.View\n\t\t\t\tstyle={[styles.selectionContainer, selectionContainerStyles]}>\n\t\t\t\t<View style={styles.optionWrapper}>\n\t\t\t\t\t<View style={styles.selectTitle}>\n\t\t\t\t\t\t<Text style={styles.selectTitleText}>\n\t\t\t\t\t\t\t{configs.selectText}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</View>\n\t\t\t\t\t<View style={{ maxHeight: 255 }}>\n\t\t\t\t\t\t<OptionWrapperElement style={{ backgroundColor: '#f9f9f9' }}>\n\t\t\t\t\t\t\t{this.renderOptions()}\n\t\t\t\t\t\t</OptionWrapperElement>\n\t\t\t\t\t\t{!isAndroid && <View style={styles.optionTails}/>}\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t\t<View style={styles.commandWrapper}>\n\t\t\t\t\t{this.renderCommands()}\n\t\t\t\t</View>\n\t\t\t</Animated.View>\n\t\t</View>;\n\t}\n\n\trenderOptions() {\n\t\tconst { configs } = this.props,\n\t\t\t{ options = [] } = configs;\n\n\t\treturn options.map((item, i) => {\n\t\t\treturn <SelectorItem\n\t\t\t\tkey={i}\n\t\t\t\toptionInstance={item}\n\t\t\t\tactiveInstance={configs.value}\n\t\t\t\tgetTitle={configs.getTitle}\n\t\t\t\tonPress={this.onItemPick}/>;\n\t\t});\n\t}\n\n\trenderCommands() {\n\t\tconst { configs } = this.props;\n\n\t\treturn <ResponsibleTouchArea\n\t\t\tonPress={this.cancelSelector}\n\t\t\trippleColor={colors.iOsBlue}\n\t\t\twrapperStyle={[styles.commandItemWrapper]}\n\t\t\tinnerStyle={styles.optionItemInner}\n\t\t\tfadeLevel={0.04}>\n\t\t\t<Text style={styles.commandTitle}>\n\t\t\t\t{configs.cancelText}\n\t\t\t</Text>\n\t\t</ResponsibleTouchArea>;\n\t}\n\n\tonItemPick = (item) => {\n\t\tconst { configs } = this.props;\n\n\t\tthis.store.dispatch(appActions.toggleSelector(false));\n\t\tif (configs.onSelect) configs.onSelect(item);\n\t\tif (configs.onChange\n\t\t\t&& JSON.stringify(configs.value) !== JSON.stringify(item)) {\n\t\t\tconfigs.onChange(item);\n\t\t}\n\t};\n\n\tcancelSelector = () => {\n\t\tconst { configs } = this.props;\n\n\t\tthis.store.dispatch(appActions.toggleSelector(false, {\n\t\t\tid: configs.id,\n\t\t}));\n\t\tif (configs.onCancel) configs.onCancel();\n\t}\n}\n\nexport default Selector;\n\nconst maxContainerSize = 500,\n\tselectorRadius = isAndroid ? 3 : 8,\n\tborderWidth = isAndroid ? 0 : 1,\n\tselectorMargin = 20,\n\tselectorPadding = isAndroid ? 20 : 8,\n\tselectionAlign = isAndroid ? 'left' : 'center';\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t},\n\tselectionContainer: {\n\t\tposition: 'absolute',\n\t\tbottom: 0, left: 0, right: 0,\n\t\tmaxHeight: maxContainerSize,\n\t\talignItems: 'center',\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n\tselectTitle: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#f9f9f9',\n\t\tborderTopLeftRadius: selectorRadius,\n\t\tborderTopRightRadius: selectorRadius,\n\t\tborderBottomWidth: borderWidth,\n\t\tborderColor: '#dedede',\n\t},\n\tselectTitleText: {\n\t\tpadding: selectorPadding,\n\t\tpaddingTop: 9, paddingBottom: 9,\n\t\ttextAlign: selectionAlign,\n\t\tcolor: '#8f8f8f', backgroundColor: 'transparent',\n\t\tfontSize: 14, fontWeight: '300',\n\t},\n\toptionWrapper: {\n\t\tmargin: selectorMargin,\n\t\tmarginBottom: isAndroid ? 0 : selectorMargin / 2,\n\t\twidth: screenWidthPadding(selectorMargin, 400),\n\t},\n\toptionItemInner: {\n\t\tpadding: selectorPadding,\n\t\tpaddingTop: 12, paddingBottom: 12,\n\t},\n\toptionTails: {\n\t\theight: selectorRadius,\n\t\tbackgroundColor: '#f9f9f9',\n\t\tborderBottomLeftRadius: selectorRadius,\n\t\tborderBottomRightRadius: selectorRadius,\n\t},\n\tcommandWrapper: {\n\t\tmargin: selectorMargin,\n\t\tmarginTop: 0,\n\t\tborderRadius: selectorRadius,\n\t\tborderTopLeftRadius: isAndroid ? 0 : selectorRadius,\n\t\tborderTopRightRadius: isAndroid ? 0 : selectorRadius,\n\t\tbackgroundColor: isAndroid ? '#f9f9f9' : 'transparent',\n\t\toverflow: 'hidden',\n\t\twidth: screenWidthPadding(selectorMargin, 400),\n\t},\n\tcommandItemWrapper: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#f5f5f5',\n\t\tborderBottomWidth: borderWidth,\n\t\tborderColor: '#dedede',\n\t\tborderRadius: selectorRadius,\n\t},\n\tcommandTitle: {\n\t\tcolor: colors.iOsBlue,\n\t\tfontSize: 17,\n\t\ttextAlign: isAndroid ? 'center' : 'center',\n\t\tbackgroundColor: 'transparent',\n\t},\n});\n\n'ruui/src/configs/core/index.js'\n:import button from './button';\nimport modal from './modal';\n\nexport default {\n\tbutton,\n\tmodal,\n};\n'ruui/src/components/modal.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, View, StyleSheet } from 'react-native';\n\nimport Selector from './selector';\nimport LoadingMask from './loadingMask';\nimport CloseableModal from './closeableModal';\nimport { valueAt } from '../utils';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tactive?: any,\n\ttype?: string,\n\tconfigs?: Object,\n\tmodalCount?: number,\n\tdispatch?: Function,\n\tanimationDelay?: Number,\n};\n\nexport default class RuuiModal extends Component {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactive: props.active,\n\t\t};\n\t\tthis.enterAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { active, animationDelay, } = this.props;\n\t\tsetTimeout(() => this.playTransition(active), animationDelay);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { active } = this.props;\n\t\tif (prevProps.active !== active) {\n\t\t\tthis.playTransition(active);\n\t\t}\n\t}\n\n\tplayTransition(active) {\n\t\tconst { configs = {}, } = this.props;\n\t\tconst nextValue = active ? 1 : 0;\n\n\t\tif (!active) {\n\t\t\tif (configs.instantClose) {\n\t\t\t\tthis.setState({ active: null });\n\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t} else {\n\t\t\t\tthis.playAnimation(nextValue, () => {\n\t\t\t\t\tthis.setState({ active: null });\n\t\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState({ active });\n\t\t\tthis.playAnimation(nextValue);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { configs = {}, modalCount, type: modalType } = this.props,\n\t\t\t{ active } = this.state,\n\t\t\tglobalConfigs = valueAt(this, 'context.ruuiConfigs.modal'),\n\t\t\tcontainerPropsGenerator = configs.maskProps || globalConfigs.maskProps,\n\t\t\tcontainerProps = containerPropsGenerator(this.enterAnimation, configs, modalCount, modalType);\n\n\t\tif (configs.maskProps && !containerProps.style) {\n\t\t\tcontainerProps.style = globalConfigs.maskProps(\n\t\t\t\tthis.enterAnimation, configs, modalCount, modalType\n\t\t\t).style;\n\t\t}\n\n\t\treturn active ? <Animated.View {...containerProps}>\n\t\t\t<View style={styles.innerTouchable}>\n\t\t\t\t{this.renderModalInner()}\n\t\t\t</View>\n\t\t</Animated.View> : <View/>;\n\t}\n\n\trenderModalInner() {\n\t\tconst { dispatch, type: modalType, active, configs: modalConfigs } = this.props;\n\n\t\tswitch (modalType) {\n\t\tcase 'select':\n\t\t\treturn <Selector\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleSelector(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'modal':\n\t\t\treturn <CloseableModal\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleModal(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'loading':\n\t\t\treturn <LoadingMask\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tdefault:\n\t\t\treturn <View/>;\n\t\t}\n\t}\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: false,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport function defaultMaskPropsGenerator(animation, configs, modalCount, modalType) {\n\tconst averageOpacity = (0.8 / modalCount) + (modalCount * 0.1),\n\t\tbackgroundColor = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: ['rgba(0, 0, 0, 0)', `rgba(0, 0, 0, ${averageOpacity})`],\n\t\t}),\n\t\tstyle = [styles.container, {\n\t\t\tzIndex: configs.zIndex,\n\t\t\tbackgroundColor,\n\t\t}];\n\n\treturn { style, };\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n\tinnerTouchable: {\n\t\tflex: 1,\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n});\n",
        "gt": [
            "'ruui/src/components/radioIcon.js'",
            "'ruui/src/components/selectorItem.js'",
            "'ruui/src/components/selector.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/configs/core/modal.js'",
            "'ruui/src/configs/core/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/components/Floats/Modal.js'",
            "'ruui/src/components/Floats/index.js'",
            "'ruui/src/utils/store/appAction.js'"
        ],
        "content": "'ruui/src/utils/helpers.js'\n:import { Dimensions } from 'react-native';\nimport type { SnappingDirection } from '../typeDefinition';\n\nexport function debounce(fn, duration) {\n\tlet timeout;\n\treturn function () {\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = null;\n\t\t\tfn.apply(this, arguments);\n\t\t}, duration);\n\t};\n}\n\nexport function uuid() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t\tconst r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\nexport function instantInterval(\n\tfunc: Function,\n\tinterval: Number,\n\ttrigger: Boolean = true,\n) {\n\tif (trigger) func.call(this);\n\treturn setInterval(func, interval);\n}\n\nexport function minGuard(value: Number, gap: Number = 0) {\n\treturn value < gap ? gap : value;\n}\n\nexport function maxGuard(value: Number, gap: Number) {\n\treturn value > gap ? gap : value;\n}\n\nconst defaultIteratee = item => item;\n\nexport function maxBy(array, iteratee = defaultIteratee) {\n\tlet result;\n\tif (array == null) return result;\n\n\tlet computed;\n\tfor (const value of array) {\n\t\tconst current = iteratee(value);\n\n\t\tif (current != null && (computed === undefined ? current === current : current > computed)) {\n\t\t\tcomputed = current;\n\t\t\tresult = value;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function clamp(value: Number, min: Number, max: Number) {\n\treturn min < max\n\t\t? (value < min ? min : value > max ? max : value)\n\t\t: (value < max ? max : value > min ? min : value);\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n\tif (x === y) {\n\t\treturn x !== 0 || y !== 0 || 1 / x === 1 / y;\n\t} else {\n\t\treturn x !== x && y !== y;\n\t}\n}\n\nexport function shallowEqual(objA, objB) {\n\tif (is(objA, objB)) return true;\n\n\tif (typeof objA !== 'object' || objA === null\n\t\t|| typeof objB !== 'object' || objB === null) {\n\t\treturn false;\n\t}\n\n\tconst keysA = Object.keys(objA);\n\tconst keysB = Object.keys(objB);\n\n\tif (keysA.length !== keysB.length) return false;\n\n\tfor (let i = 0; i < keysA.length; i += 1) {\n\t\tif (!hasOwn.call(objB, keysA[i])\n\t\t\t|| !is(objA[keysA[i]], objB[keysA[i]])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function valueAt(root = {}, path, defaultValue) {\n\tlet currentLevel = root;\n\tconst paths = path.split('.');\n\n\tfor (let i = 0; i < paths.length; i += 1) {\n\t\tif (i === paths.length - 1) {\n\t\t\treturn currentLevel[paths[i]] || defaultValue;\n\t\t} else {\n\t\t\tcurrentLevel = currentLevel[paths[i]];\n\t\t\tif (!currentLevel) return defaultValue;\n\t\t}\n\t}\n\n\treturn defaultValue;\n}\n\nfunction rawDirectionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n) {\n\tswitch (position) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tdefault:\n\t\treturn { top: 0, left: 0 };\n\t}\n}\n\n\nfunction screenGuard(position, componentSize, screenPadding = 5, moddedScreenSize = {}) {\n\tconst screenSize = { ...Dimensions.get('window'), ...moddedScreenSize },\n\t\t{ top, left, } = position;\n\tlet guardedTop = top, guardedLeft = left;\n\n\tif (top < 5) {\n\t\tguardedTop = 5;\n\t} else if (top + componentSize.height > screenSize.height - screenPadding) {\n\t\tguardedTop = screenSize.height - componentSize.height - screenPadding;\n\t}\n\n\tif (left < 5) {\n\t\tguardedLeft = 5;\n\t} else if (left + componentSize.width > screenSize.width - screenPadding) {\n\t\tguardedLeft = screenSize.width - componentSize.width - screenPadding;\n\t}\n\n\treturn { top: guardedTop, left: guardedLeft, };\n}\n\nexport function directionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n\tscreenSize,\n) {\n\treturn screenGuard(\n\t\trawDirectionSnap(top, left, width1, height1, width2, height2, position, spacing),\n\t\t{ width: width2, height: height2, }, 5, screenSize\n\t);\n}\n\nexport function arrowSnap(width, height, arrowSize, parentPosition: SnappingDirection, padding = 15) {\n\tswitch (parentPosition) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop: padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t\topacity: 0,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tleft: -arrowSize,\n\t\t\ttop: padding,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tdefault:\n\t\treturn {};\n\t}\n}\n\nexport function directionAnimatedConfigs(\n\tdirection, translateDistance, animation, finalBorderRadius = 3\n) {\n\tconst borderRadius = animation.interpolate({\n\t\t\tinputRange: [0, 0.5, 1], outputRange: [50, 15, finalBorderRadius],\n\t\t}),\n\t\topacity = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\textrapolate: 'clamp',\n\t\t});\n\n\tswitch (direction) {\n\tcase 'top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\tborderRadius: { borderRadius, },\n\t\t\ttransform: [],\n\t\t\topacity,\n\t\t};\n\tdefault:\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\t}\n}\n\n'ruui/src/components/Floats/Modal.js'\n:import React, { useRef, } from 'react';\nimport { StyleSheet, View, TouchableWithoutFeedback, Text, } from 'react-native';\nimport Animated from 'react-native-reanimated';\n\nimport { spring, } from '../../utils';\nimport * as appActions from '../../utils/store/appAction';\nimport type { ModalOptions, } from '../../typeDefinition';\n\nconst { Clock, Value, useCode, call, cond, eq, greaterOrEq, set, interpolate, stopClock, } = Animated;\nconst translateDistance = 50;\n\ntype Props = {\n\tdispatch?: Function,\n\titem?: ModalOptions,\n};\n\nconst Modal = (props: Props) => {\n\tconst { dispatch, item, } = props;\n\tconst { current: leaveState } = useRef(new Value(0));\n\tconst { current: enterClock } = useRef(new Clock());\n\tconst { current: leaveClock } = useRef(new Clock());\n\tconst { current: enterTranslate } = useRef(new Value(translateDistance));\n\tconst { current: leaveTranslate } = useRef(new Value(0));\n\tconst InnerComponent = item.configs.component;\n\n\tconst onClose = () => {\n\t\tdispatch(appActions.toggleModal(false, item.configs));\n\t};\n\n\tconst enterAnimator = [\n\t\tset(enterTranslate, spring({ clock: enterClock, from: translateDistance, to: 0, })),\n\t];\n\tconst leaveAnimator = [\n\t\tset(leaveTranslate, spring({ clock: leaveClock, from: 0, to: translateDistance })),\n\t\tcond(greaterOrEq(leaveTranslate, translateDistance), [stopClock(leaveClock), call([], onClose)]),\n\t];\n\n\tuseCode(() => cond(eq(leaveState, 1), leaveAnimator, enterAnimator), []);\n\n\tconst onRequestClose = () => leaveState.setValue(1);\n\n\tconst translate = cond(eq(leaveState, 1), leaveTranslate, enterTranslate);\n\tconst scale = interpolate(translate, {\n\t\tinputRange: [0, translateDistance],\n\t\toutputRange: [1, 0.5],\n\t});\n\tconst maskOpacity = interpolate(translate, {\n\t\tinputRange: [0, translateDistance / 2, translateDistance],\n\t\toutputRange: [0.8, 0, 0],\n\t});\n\tconst containerOpacity = cond(eq(leaveState, 1), maskOpacity, 1);\n\tconst maskStyle = { opacity: maskOpacity, backgroundColor: '#000000', };\n\tconst containerStyle = {\n\t\topacity: containerOpacity,\n\t\ttransform: [{ translateY: translate }, { scale }],\n\t};\n\n\treturn <View style={styles.container}>\n\t\t<TouchableWithoutFeedback onPress={onRequestClose}>\n\t\t\t<Animated.View style={[StyleSheet.absoluteFill, maskStyle]}/>\n\t\t</TouchableWithoutFeedback>\n\t\t<Animated.View style={containerStyle}>\n\t\t\t<InnerComponent/>\n\t\t</Animated.View>\n\t</View>;\n};\n\nexport default Modal;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\t...StyleSheet.absoluteFillObject,\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n});\n\n'ruui/src/components/Floats/index.js'\n:import React from 'react';\nimport { StyleSheet, View, Text, } from 'react-native';\n\nimport Modal from './Modal';\nimport { connect, } from '../../utils';\nimport type { Layout, } from '../../typeDefinition';\n\ntype Props = {\n\tdispatch?: Function,\n\tfloatMap?: Object,\n\tscreenSize?: Layout,\n};\n\nconst RuuiFloats = (props: Props) => {\n\tconst { dispatch, floatMap, } = props;\n\tconst floats = Object.keys(floatMap).map(key => ({ ...floatMap[key], id: key })).filter(item => item.active);\n\n\treturn <View pointerEvents=\"box-none\" style={StyleSheet.absoluteFill}>\n\t\t{floats.map((item) => {\n\t\t\treturn <Modal key={item.id} item={item} dispatch={dispatch}/>;\n\t\t})}\n\t</View>;\n};\n\nexport default connect(({ activeModals }) => {\n\treturn {\n\t\tfloatMap: activeModals,\n\t};\n})(RuuiFloats);\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\n\t},\n});\n\n'ruui/src/utils/store/appAction.js'\n:import * as Actions from './actions';\nimport { uuid } from '../helpers';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function updateThemeConfigs(configs = {}) {\n\treturn { type: Actions.UpdateThemeConfigs, configs };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}",
        "gt": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/Floats/Modal.js'",
            "'ruui/src/components/Floats/index.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/common/tabs.js'",
            "'better-onetab/src/background/contextMenus.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/common/tab.js'",
            "'better-onetab/src/common/list.js'"
        ],
        "content": "'better-onetab/src/common/tabs.js'\n:import storage from './storage'\nimport {createNewTabList} from './list'\nimport _ from 'lodash'\nimport browser from 'webextension-polyfill'\nimport listManager from './listManager'\nimport {ILLEGAL_URLS} from './constants'\nlistManager.init()\n\nconst getAllInWindow = windowId => browser.tabs.query({windowId})\n\nconst openTabLists = async () => {\n\n  const window = await browser.runtime.getBackgroundPage()\n  if (!_.isObject(window.appTabId)) window.appTabId = {}\n  const currentWindow = await browser.windows.getCurrent()\n  const windowId = currentWindow.id\n  const tabListsUrl = browser.runtime.getURL('index.html#/app/')\n  if (windowId in window.appTabId) {\n    const tabs = await getAllInWindow(windowId)\n    const tab = tabs.find(tab => tab.id === window.appTabId[windowId])\n    if (tab) {\n      if (tab.url.startsWith(tabListsUrl)) {\n        return browser.tabs.update(tab.id, { active: true })\n      }\n      delete window.appTabId[windowId]\n    }\n  }\n  const createdTab = await browser.tabs.create({url: tabListsUrl})\n  window.appTabId[windowId] = createdTab.id\n}\n\nconst openAboutPage = () => {\n  window.open(browser.runtime.getURL('index.html#/app/about'))\n}\n\nconst getSelectedTabs = () => browser.tabs.query({highlighted: true, currentWindow: true})\n\nconst getAllTabsInCurrentWindow = async () => {\n  const currentWindow = await browser.windows.getCurrent()\n  return getAllInWindow(currentWindow.id)\n}\n\nconst groupTabsInCurrentWindow = async () => {\n  const tabs = await getAllTabsInCurrentWindow()\n  const result = { left: [], right: [], inter: [], all: tabs }\n  let currentIsRight = false\n  for (const tab of tabs) {\n    if (tab.highlighted) {\n      currentIsRight = true\n      result.inter.push(tab)\n    } else if (currentIsRight) result.right.push(tab)\n    else result.left.push(tab)\n  }\n  result.twoSide = result.left.concat(result.right)\n  return result\n}\n\nconst isLegalURL = url => ILLEGAL_URLS.every(prefix => !url.startsWith(prefix))\n\nconst storeTabs = async (tabs, listIndex) => {\n  const appUrl = browser.runtime.getURL('')\n  tabs = tabs.filter(i => !i.url.startsWith(appUrl))\n  const opts = await storage.getOptions()\n  if (opts.ignorePinned) tabs = tabs.filter(i => !i.pinned)\n  if (opts.excludeIllegalURL) tabs = tabs.filter(i => isLegalURL(i.url))\n  if (tabs.length === 0) return\n  const lists = await storage.getLists()\n  if (listIndex == null) {\n    const newList = createNewTabList({tabs})\n    if (opts.pinNewList) newList.pinned = true\n    await listManager.addList(newList)\n  } else {\n    const list = lists[listIndex]\n    tabs.forEach(tab => list.tabs.push(tab))\n    await listManager.updateListById(list._id, _.pick(list, 'tabs'))\n  }\n  if (opts.addHistory) {\n    for (let i = 0; i < tabs.length; i += 1) {\n\n      try {\n        await browser.history.addUrl({url: tabs[i].url})\n      } catch (e) {\n        console.debug(`${tabs[i].url} cannot be added to history`)\n      }\n    }\n  }\n  return browser.tabs.remove(tabs.map(i => i.id))\n}\n\nconst storeLeftTabs = async listIndex => storeTabs((await groupTabsInCurrentWindow()).left, listIndex)\nconst storeRightTabs = async listIndex => storeTabs((await groupTabsInCurrentWindow()).right, listIndex)\nconst storeTwoSideTabs = async listIndex => storeTabs((await groupTabsInCurrentWindow()).twoSide, listIndex)\n\nconst storeSelectedTabs = async listIndex => {\n  const tabs = await getSelectedTabs()\n  const allTabs = await getAllTabsInCurrentWindow()\n  if (tabs.length === allTabs.length) await openTabLists()\n  return storeTabs(tabs, listIndex)\n}\n\nconst storeAllTabs = async listIndex => {\n  const tabs = await getAllTabsInCurrentWindow()\n  const opts = await storage.getOptions()\n  if (opts.openTabListNoTab) await openTabLists()\n  return storeTabs(tabs, listIndex)\n}\n\nconst storeAllTabInAllWindows = async () => {\n  const windows = await browser.windows.getAll()\n  const opts = await storage.getOptions()\n  if (opts.openTabListNoTab) await openTabLists()\n  const tasks = []\n  for (const window of windows) {\n    const task = getAllInWindow(window.id).then(storeTabs)\n    tasks.push(task)\n  }\n  return Promise.all(tasks)\n}\n\nconst restoreTabs = async (tabs, windowId) => {\n  const opts = await storage.getOptions()\n  let indexOffset = 0\n  if (opts.openEnd) {\n    const tabs = await getAllTabsInCurrentWindow()\n    const {index} = tabs.pop()\n    indexOffset = index + 1\n  }\n  for (let i = 0; i < tabs.length; i += 1) {\n    const tab = tabs[i]\n    const createdTab = await browser.tabs.create({\n      url: tab.url,\n      pinned: tab.pinned,\n      index: i + indexOffset,\n      windowId,\n    })\n    if (tab.muted) browser.tabs.update(createdTab.id, {muted: true})\n  }\n}\n\nconst restoreList = (list, windowId) => restoreTabs(list.tabs, windowId)\n\nconst restoreListInNewWindow = async list => {\n  const createdWindow = await browser.windows.create({url: list.tabs.map(i => i.url)})\n  list.tabs.forEach((tab, index) => {\n    if (tab.muted) browser.tabs.update(createdWindow.tabs[index].id, {muted: true})\n  })\n}\n\nconst restoreLastestList = async () => {\n  const lists = await storage.getLists()\n  if (lists.length === 0) return true\n  const [lastest] = lists\n  await restoreList(lastest)\n  if (lastest.pinned) return true\n  return listManager.removeListById(lastest._id)\n}\n\nexport default {\n  getSelectedTabs,\n  groupTabsInCurrentWindow,\n  storeLeftTabs,\n  storeRightTabs,\n  storeSelectedTabs,\n  storeTwoSideTabs,\n  storeAllTabs,\n  storeAllTabInAllWindows,\n  restoreTabs,\n  restoreList,\n  restoreListInNewWindow,\n  restoreLastestList,\n  openTabLists,\n  openAboutPage,\n}\n\n'better-onetab/src/background/contextMenus.js'\n:import _ from 'lodash'\nimport __ from '../common/i18n'\nimport tabs from '../common/tabs'\nimport storage from '../common/storage'\nimport browser from 'webextension-polyfill'\n\nconst menus = {\n  SHOW_TAB_LIST: tabs.openTabLists,\n  STORE_SELECTED_TABS: tabs.storeSelectedTabs,\n  STORE: {\n    STORE_ALL_TABS_IN_CURRENT_WINDOW: tabs.storeAllTabs,\n    STORE_ALL_TABS_IN_ALL_WINDOWS: tabs.storeAllTabInAllWindows,\n    STORE_LEFT_TABS: tabs.storeLeftTabs,\n    STORE_RIGHT_TABS: tabs.storeRightTabs,\n    STORE_TWOSIDE_TABS: tabs.storeTwoSideTabs,\n  },\n  STORE_TO_TITLED_LIST: {\n    STORE_SELECTED_TABS: tabs.storeSelectedTabs,\n    STORE_ALL_TABS_IN_CURRENT_WINDOW: tabs.storeAllTabs,\n    STORE_LEFT_TABS: tabs.storeLeftTabs,\n    STORE_RIGHT_TABS: tabs.storeRightTabs,\n    STORE_TWOSIDE_TABS: tabs.storeTwoSideTabs,\n  }\n}\n\nexport const dynamicDisableMenu = async lists => {\n  const groupedTabs = await tabs.groupTabsInCurrentWindow()\n  const windows = await browser.windows.getAll()\n  browser.contextMenus.update('STORE.STORE_LEFT_TABS', {\n    enabled: groupedTabs.left.length !== 0,\n    title: __('menu_STORE_LEFT_TABS') + ` (${groupedTabs.left.length})`,\n  })\n  browser.contextMenus.update('STORE.STORE_RIGHT_TABS', {\n    enabled: groupedTabs.right.length !== 0,\n    title: __('menu_STORE_RIGHT_TABS') + ` (${groupedTabs.right.length})`,\n  })\n  browser.contextMenus.update('STORE.STORE_TWOSIDE_TABS', {\n    enabled: groupedTabs.twoSide.length !== 0,\n    title: __('menu_STORE_TWOSIDE_TABS') + ` (${groupedTabs.twoSide.length})`,\n  })\n  browser.contextMenus.update('STORE.STORE_ALL_TABS_IN_ALL_WINDOWS', {\n    enabled: windows.length > 1,\n  })\n  browser.contextMenus.update('STORE.STORE_ALL_TABS_IN_CURRENT_WINDOW', {\n    title: __('menu_STORE_ALL_TABS_IN_CURRENT_WINDOW') + ` (${groupedTabs.all.length})`,\n  })\n  browser.contextMenus.update('STORE_SELECTED_TABS', {\n    title: __('menu_STORE_SELECTED_TABS') + ` (${groupedTabs.inter.length})`,\n  })\n  lists = lists || await storage.getLists()\n  for (let i = 0; i < lists.length; i += 1) {\n    if (!lists[i].title) continue\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_LEFT_TABS|' + i, {\n      enabled: groupedTabs.left.length !== 0,\n      title: __('menu_STORE_LEFT_TABS') + ` (${groupedTabs.left.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_RIGHT_TABS|' + i, {\n      enabled: groupedTabs.right.length !== 0,\n      title: __('menu_STORE_RIGHT_TABS') + ` (${groupedTabs.right.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_TWOSIDE_TABS|' + i, {\n      enabled: groupedTabs.twoSide.length !== 0,\n      title: __('menu_STORE_TWOSIDE_TABS') + ` (${groupedTabs.twoSide.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_ALL_TABS_IN_CURRENT_WINDOW|' + i, {\n      title: __('menu_STORE_ALL_TABS_IN_CURRENT_WINDOW') + ` (${groupedTabs.all.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_SELECTED_TABS|' + i, {\n      title: __('menu_STORE_SELECTED_TABS') + ` (${groupedTabs.inter.length})`,\n    })\n  }\n}\n\nconst createMenus = async (obj, parent, contexts, lists) => {\n  if (obj === menus.STORE_TO_TITLED_LIST) {\n    if (window.opts.disableDynamicMenu) return\n    for (let listIndex = 0; listIndex < lists.length; listIndex += 1) {\n      if (!lists[listIndex].title) continue\n      const prop = {\n        id: 'STORE_TO_TITLED_LIST|' + listIndex,\n        title: lists[listIndex].title,\n        contexts,\n        parentId: 'STORE_TO_TITLED_LIST',\n      }\n      const id = await browser.contextMenus.create(prop)\n      console.log('context menu created: ' + id)\n      for (const key in obj) {\n        const prop = {\n          id: 'STORE_TO_TITLED_LIST.' + key + '|' + listIndex,\n          title: __('menu_' + key),\n          contexts,\n          parentId: id,\n        }\n        const childId = await browser.contextMenus.create(prop)\n        console.log('context menu created: ' + childId)\n      }\n    }\n  } else {\n    for (const key of Object.keys(obj)) {\n      const prop = {\n        id: key,\n        title: __('menu_' + key),\n        contexts,\n      }\n      if (parent) {\n        prop.id = parent + '.' + key\n        prop.parentId = parent\n      }\n      const id = await browser.contextMenus.create(prop)\n      console.log('context menu created: ' + id)\n      if (_.isObject(obj[key])) await createMenus(obj[key], key, contexts, lists)\n    }\n  }\n}\n\nexport const setupContextMenus = async ({pageContext, allContext}) => {\n  await browser.contextMenus.removeAll()\n  const contexts = [browser.contextMenus.ContextType.BROWSER_ACTION]\n  if (pageContext) {\n    contexts.push(browser.contextMenus.ContextType.PAGE)\n    if (allContext) contexts.push(browser.contextMenus.ContextType.ALL)\n  }\n  const lists = await storage.getLists()\n  window.contextMenusClickedHandler = info => {\n    console.log('context menu clicked', info.menuItemId)\n    if (info.menuItemId.startsWith('STORE_TO_TITLED_LIST')) {\n      const [key, listIndex] = info.menuItemId.split('|')\n      _.get(menus, key)(+listIndex)\n      if (PRODUCTION) ga('send', 'event', 'Menu clicked', key)\n    } else {\n      _.get(menus, info.menuItemId)()\n      if (PRODUCTION) ga('send', 'event', 'Menu clicked', info.menuItemId)\n    }\n  }\n  console.groupCollapsed('create context menu', contexts)\n  await createMenus(menus, null, contexts, lists)\n  console.groupEnd('create context menu')\n  dynamicDisableMenu(lists)\n}\n\n'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n\n'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/common/tab.js'\n:import _ from 'lodash'\nimport {PICKED_TAB_PROPS} from './constants'\n\n\nexport const normalizeTab = tab => {\n  const normalizedTab = _.pick(tab, PICKED_TAB_PROPS)\n  normalizedTab.muted = normalizedTab.muted || tab.mutedInfo && tab.mutedInfo.muted\n  return normalizedTab\n}\n\n'better-onetab/src/common/list.js'\n:import _ from 'lodash'\nimport {genObjectId} from './utils'\nimport {normalizeTab} from './tab'\nimport {PICKED_LIST_RPOPS} from './constants'\n\nexport const createNewTabList = ({_id, tabs, title, tags, time, pinned, expand, color, updatedAt}) => ({\n  _id: _id || genObjectId(),\n  tabs: Array.isArray(tabs) ? tabs.map(normalizeTab) : [],\n  title: title || '',\n  tags: tags || [],\n  time: time || Date.now(),\n  titleEditing: false,\n  pinned: pinned === true,\n  expand: expand !== false,\n  color: color || '',\n  updatedAt: updatedAt || time || Date.now(),\n})\n\nexport const validateList = list => list != null && Array.isArray(list.tabs)\n\n\nexport const normalizeList = list => {\n  const normalizedList = _.pick(list, PICKED_LIST_RPOPS)\n  normalizedList.tabs = normalizedList.tabs.map(normalizeTab)\n  return normalizedList\n}\n\nexport default {createNewTabList, normalizeList, validateList}\n",
        "gt": [
            "'better-onetab/src/common/tab.js'",
            "'better-onetab/src/common/list.js'",
            "'better-onetab/src/common/tabs.js'",
            "'better-onetab/src/background/contextMenus.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/common/storage.js'",
            "'better-onetab/src/common/service/boss.js'",
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/background/messageHandler.js'"
        ],
        "content": "'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n\n'better-onetab/src/common/storage.js'\n:import _ from 'lodash'\nimport {normalizeList} from '@/common/list'\nimport browser from 'webextension-polyfill'\nimport options from './options'\n\nconst get = key => browser.storage.local.get(key)\n\nconst set = obj => browser.storage.local.set(obj)\n\nconst getLists = () => get('lists')\n  .then(({lists}) => lists || [])\n\nconst setLists = async lists => {\n  if (!Array.isArray(lists)) throw new TypeError(lists)\n  const handledLists = lists.filter(i => Array.isArray(i.tabs)).map(normalizeList)\n  const {opts} = await get('opts')\n  if (opts && opts.removeDuplicate) {\n    handledLists.forEach(list => {\n      list.tabs = _.unionBy(list.tabs, tab => tab.url)\n    })\n  }\n  return set({lists: handledLists})\n}\n\nconst getOptions = () => get('opts')\n  .then(({opts}) => opts)\n\nconst setOptions = opts => set({\n  opts: _.pick(opts, _.keys(options.getDefaultOptions())),\n  optsUpdatedAt: Date.now(),\n})\n\nexport default {\n  getLists,\n  setLists,\n  getOptions,\n  setOptions,\n}\n\n'better-onetab/src/common/service/boss.js'\n:import {\n  TOKEN_KEY,\n  AUTH_HEADER,\n  SYNC_SERVICE_URL,\n  SYNC_MAX_INTERVAL,\n  SYNC_MIN_INTERVAL,\n} from '../constants'\nimport _ from 'lodash'\nimport storage from '../storage'\nimport listManager from '../listManager'\nimport {isBackground, timeout, sendMessage} from '../utils'\nimport browser from 'webextension-polyfill'\nimport io from 'socket.io-client'\nimport logger from '../logger'\n\nconst hasToken = async () => TOKEN_KEY in await browser.storage.local.get(TOKEN_KEY)\n\nconst getToken = async () => {\n  const {token: localToken} = await browser.storage.local.get(TOKEN_KEY)\n  if (localToken) return localToken\n  const {token: remoteToken} = await browser.storage.sync.get(TOKEN_KEY)\n  if (remoteToken) return remoteToken\n}\n\nconst setToken = async token => {\n  await browser.storage.local.set({[TOKEN_KEY]: token, tokenIssued: Date.now()})\n  await browser.storage.sync.set({[TOKEN_KEY]: token})\n}\n\nconst removeToken = async () => {\n  await browser.storage.local.remove(TOKEN_KEY)\n  await browser.storage.sync.remove(TOKEN_KEY)\n}\n\nconst fetchData = async (uri = '', method = 'GET', data = {}) => {\n  const headers = new Headers()\n  const token = await getToken()\n  if (token) headers.append(AUTH_HEADER, token)\n  const option = {\n    headers,\n    method,\n    mode: 'cors',\n  }\n\n  if (['POST', 'PUT', 'PATCH'].includes(method)) {\n    headers.append('Content-Type', 'application/json')\n    option.body = JSON.stringify(data)\n  } else {\n    uri += '?' + Object.keys(data).map(key => {\n      if (typeof data[key] === 'object') data[key] = JSON.stringify(data[key])\n      return key + '=' + encodeURIComponent(data[key])\n    }).filter(i => i).join('&')\n  }\n\n  const res = await fetch(SYNC_SERVICE_URL + uri, option)\n  if (res.headers.has(AUTH_HEADER)) {\n    const newToken = res.headers.get(AUTH_HEADER)\n    console.debug('[boss]: got new token', newToken)\n    await setToken(newToken)\n  }\n  if (res.ok) return res.json()\n  if (res.status === 401) await removeToken()\n  const err = await res.json()\n  throw new Error(err.message)\n}\n\nconst getInfo = () => fetchData('/api/info').then(info => {\n  info.optsUpdatedAt = Date.parse(info.optsUpdatedAt) || 0\n  info.listsUpdatedAt = Date.parse(info.listsUpdatedAt) || 0\n  return info\n})\n\nconst setWSToken = token => {\n  if (!window._socket) return\n  window._socket.io.opts.query = {\n    [AUTH_HEADER]: token,\n  }\n}\n\nconst _socketEmitTimeout = (socket, event, arg) => timeout(new Promise((resolve, reject) => {\n  const cb = result => result && result.err ? reject(result.err) : resolve(result)\n  if (arg) socket.emit(event, arg, cb)\n  else socket.emit(event, cb)\n}), 5000)\n\nconst uploadOpsViaWS = async () => {\n  const socket = window._socket\n  if (!socket || !socket.connected) throw new Error('socket not connected')\n  const {ops} = await browser.storage.local.get('ops')\n  if (ops) {\n    const changes = ops.sort((a, b) => a.time - b.time)\n    while (changes && changes.length) {\n      const change = changes.shift()\n      await _socketEmitTimeout(socket, 'list.update', change)\n    }\n  }\n  await browser.storage.local.remove('ops')\n}\n\nconst downloadRemoteLists = async () => {\n  const socket = window._socket\n  if (!socket || !socket.connected) throw new Error('socket not connected')\n  const remoteTime = await _socketEmitTimeout(socket, 'list.time')\n  const {listsUpdatedAt: localTime} = await browser.storage.local.get('listsUpdatedAt')\n  if (remoteTime === localTime) return\n  const remoteLists = await _socketEmitTimeout(socket, 'list.all')\n  const localLists = _.keyBy(await storage.getLists(), list => list._id)\n  const finallyLists = []\n  const fetching = {}\n  remoteLists.forEach(list => {\n    if (!(list._id in localLists) || localLists.updatedAt < list.updatedAt) {\n      fetching[list._id] = _socketEmitTimeout(socket, 'list.get', list._id)\n      finallyLists.push(list._id)\n    } else {\n      finallyLists.push(localLists[list._id])\n    }\n  })\n  console.log(finallyLists)\n  await Promise.all(Object.values(fetching))\n  for (let i = 0; i < finallyLists.length; i += 1) {\n    if (typeof finallyLists[i] === 'string') {\n      finallyLists[i] = await fetching[finallyLists[i]]\n    }\n  }\n  console.log(finallyLists)\n  await storage.setLists(finallyLists)\n  await browser.storage.local.set({listsUpdatedAt: remoteTime})\n}\n\nconst syncLists = async () => {\n  const unlock = await listManager.RWLock.lock()\n  try {\n    await uploadOpsViaWS()\n    await downloadRemoteLists()\n  } catch (error) {\n    throw error\n  } finally {\n    await unlock()\n  }\n}\n\nconst getRemoteOptionsUpdatedTimeViaWS = () => _socketEmitTimeout(window._socket, 'opts.time')\n\nconst getRemoteOptions = () => _socketEmitTimeout(window._socket, 'opts.all')\n\nconst setRemoteOptions = (opts, time) => _socketEmitTimeout(window._socket, 'opts.set', { opts, time })\n\nconst syncOptions = async () => {\n  const remoteTime = await getRemoteOptionsUpdatedTimeViaWS()\n  const {optsUpdatedAt: localTime} = await browser.storage.local.get('optsUpdatedAt')\n  if (remoteTime > localTime) {\n    const opts = await getRemoteOptions()\n    await browser.storage.local.set({opts, optsUpdatedAt: remoteTime})\n  } else if (remoteTime < localTime) {\n    const opts = await storage.getOptions()\n    await setRemoteOptions(opts, localTime)\n  }\n}\n\n\nlet _refreshing = false\nconst refresh = async () => {\n  if (_refreshing || !(await hasToken())) return\n\n  _refreshing = true\n  await sendMessage({refreshing: true})\n  try {\n    await timeout(Promise.all([syncOptions(), syncLists()]), 20000)\n    await sendMessage({refreshed: {success: true}})\n  } catch (err) {\n    logger.error(err)\n    await sendMessage({refreshed: {success: false}})\n  } finally {\n    _refreshing = false\n  }\n}\n\nconst login = async token => {\n  if (await hasToken()) return\n  await setToken(token)\n  const {uid} = await getInfo()\n  await sendMessage({logged: {uid}})\n  const loginNotificationId = 'login'\n  browser.notifications.create(loginNotificationId, {\n    type: 'basic',\n    iconUrl: 'assets/icons/icon_128.png',\n    title: 'you have login to boss successfully',\n    message: '',\n  })\n  setTimeout(() => {\n    browser.notifications.clear(loginNotificationId)\n  }, 5000)\n  await refresh()\n}\n\nconst initTimer = async () => {\n  if (window._syncTimer || !(await isBackground())) return\n\n  const _nextTimer = time => {\n    window._syncTimer = setTimeout(async () => {\n      if (await hasToken()) {\n        getInfo()\n        if (window._socket && window._socket.connected) {\n          refresh()\n          return _nextTimer(time)\n        }\n      }\n      _nextTimer(Math.min(time * 2, SYNC_MAX_INTERVAL))\n    }, time)\n  }\n\n  const _refreshTimer = time => {\n    clearTimeout(window._syncTimer)\n    _nextTimer(time)\n  }\n\n  window.addEventListener('offline', () => _refreshTimer(SYNC_MAX_INTERVAL))\n  window.addEventListener('online', () => _refreshTimer(SYNC_MIN_INTERVAL))\n  browser.runtime.onMessage.addListener(({login, refreshed}) => {\n    if (login || refreshed && refreshed.success) window._nextSyncInterval = SYNC_MIN_INTERVAL\n  })\n  _nextTimer(SYNC_MIN_INTERVAL)\n}\n\nconst init = async () => {\n  if (window._socket || !await isBackground()) return\n  const socket = window._socket = io(SYNC_SERVICE_URL, {path: '/ws', autoConnect: false})\n  setWSToken(await getToken())\n  await listManager.init()\n  socket.on('list.update', ({method, args}) => {\n    listManager[method](...args)\n  })\n  socket.on('opts.set', async ({changes, time}) => {\n    const {opts} = await browser.storage.local.get('opts')\n    for (const [k, v] of Object.entries(changes)) {\n      opts[k] = v\n    }\n    await browser.storage.local.set({opts, optsUpdatedAt: time})\n  })\n  socket.on('connect', () => refresh())\n  socket.open()\n  initTimer()\n}\n\nexport default {\n  getInfo,\n  removeToken,\n  hasToken,\n  login,\n  init,\n  refresh,\n}\n\n'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/background/messageHandler.js'\n:import tabs from '../common/tabs'\nimport storage from '../common/storage'\nimport boss from '../common/service/boss'\nimport {sendMessage} from '../common/utils'\nimport listManager from '../common/listManager'\nimport {setupContextMenus} from './contextMenus'\nimport {updateBrowserAction} from './browserAction'\n\nconst messageHandler = async msg => {\n  console.debug('received', msg)\n  if (msg.optionsChanged) {\n    const changes = msg.optionsChanged\n    console.debug('options changed', changes)\n    Object.assign(window.opts, changes)\n    if (changes.browserAction) updateBrowserAction(changes.browserAction)\n    if (['pageContext', 'allContext', 'disableDynamicMenu'].some(k => k in changes)) await setupContextMenus(changes)\n    await sendMessage({optionsChangeHandledStatus: 'success'})\n    if (PRODUCTION) Object.keys(changes).map(key => ga('send', 'event', 'Options changed', key, changes[key]))\n  }\n  if (msg.restoreList) {\n    const {restoreList} = msg\n    const listIndex = restoreList.index\n    const lists = await storage.getLists()\n    const list = lists[listIndex]\n    if (restoreList.newWindow) {\n      tabs.restoreListInNewWindow(list)\n    } else {\n      tabs.restoreList(list)\n    }\n    if (!list.pinned) {\n      listManager.removeListById(list._id)\n    }\n    if (PRODUCTION) ga('send', 'event', 'Popup item clicked')\n  }\n  if (msg.storeInto) {\n    tabs.storeSelectedTabs(msg.storeInto.index)\n  }\n  if (msg.login) {\n    boss.login(msg.login.token)\n  }\n  if (msg.refresh) {\n    boss.refresh()\n  }\n  if (msg.import) {\n    const {lists} = msg.import\n    lists.forEach(list => listManager.addList(list))\n  }\n}\n\nexport default messageHandler\n",
        "gt": [
            "'better-onetab/src/common/storage.js'",
            "'better-onetab/src/common/service/boss.js'",
            "'better-onetab/src/background/messageHandler.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'neode/src/Query/Builder.js'",
            "'neode/src/Services/Create.js'",
            "'neode/test/Services/UpdateNode.spec.js'"
        ],
        "content": "'neode/src/Query/Builder.js'\n:import Match from './Match';\nimport Order from './Order';\n\nimport Statement from './Statement';\nimport Property from './Property';\nimport WhereStatement from './WhereStatement';\nimport Where, {OPERATOR_EQUALS} from './Where';\nimport WhereBetween from './WhereBetween';\nimport WhereId from './WhereId';\nimport WhereRaw from './WhereRaw';\nimport WithStatement from './WithStatement';\nimport WithDistinctStatement from './WithDistinctStatement';\nimport neo4j from 'neo4j-driver';\n\nexport const mode = {\n    READ: \"READ\",\n    WRITE: \"WRITE\"\n};\n\n\nexport default class Builder {\n\n    constructor(neode) {\n        this._neode = neode;\n\n        this._params = {};\n        this._statements = [];\n        this._current;\n        this._where;\n        this._set_count = 0;\n    }\n\n\n    statement(prefix) {\n        if (this._current) {\n            this._statements.push(this._current);\n        }\n\n        this._current = new Statement(prefix);\n\n        return this;\n    }\n\n\n    whereStatement(prefix) {\n        if (this._where) {\n            this._current.where(this._where);\n        }\n\n        this._where = new WhereStatement(prefix);\n\n        return this;\n    }\n\n\n    match(alias, model, properties) {\n        this.whereStatement('WHERE');\n        this.statement();\n\n        this._current.match( new Match(alias, model, this._convertPropertyMap( alias, properties ) ) );\n\n        return this;\n    }\n\n    optionalMatch(alias, model) {\n        this.whereStatement('WHERE');\n        this.statement('OPTIONAL MATCH');\n\n        this._current.match(new Match(alias, model));\n\n        return this;\n    }\n\n\n    with(...args) {\n        this.whereStatement('WHERE');\n        this.statement();\n\n        this._statements.push(new WithStatement(...args));\n\n        return this;\n    }\n\n\n    withDistinct(...args) {\n        this.whereStatement('WHERE');\n        this.statement();\n\n        this._statements.push(new WithDistinctStatement(...args));\n\n        return this;\n    }\n\n\n    or(...args) {\n        this.whereStatement('OR');\n\n        return this.where(...args);\n    }\n\n\n    _addWhereParameter(key, value) {\n        let attempt = 1;\n        let base = `where_${key.replace(/[^a-z0-9]+/g, '_')}`;\n\n\n        let variable = base;\n\n        while ( typeof this._params[ variable ] != \"undefined\" ) {\n            attempt++;\n\n            variable = `${base}_${attempt}`;\n        }\n\n        this._params[ variable ] = value;\n\n        return variable;\n    }\n\n\n    where(...args) {\n        if (!args.length || !args[0]) return this;\n\n\n        if (args.length == 2) {\n            args = [args[0], OPERATOR_EQUALS, args[1]];\n        }\n\n\n        if ( args.length == 1) {\n            const [arg] = args;\n\n            if (Array.isArray(arg)) {\n                arg.forEach(inner => {\n                    this.where(...inner);\n                });\n            }\n            else if (typeof arg == 'object') {\n                Object.keys(arg).forEach(key => {\n                    this.where(key, arg[key]);\n                });\n            }\n            else {\n                this._where.append(new WhereRaw(args[0]));\n            }\n        }\n        else {\n            const [left, operator, value] = args;\n            const right = this._addWhereParameter(left, value);\n\n            this._params[ right ] = value;\n            this._where.append(new Where(left, operator, `$${right}`));\n        }\n\n        return this;\n    }\n\n\n    whereId(alias, value) {\n        const param = this._addWhereParameter(`${alias}_id`, neo4j.int(value));\n\n        this._where.append(new WhereId(alias, param));\n\n        return this;\n    }\n\n\n    whereRaw(clause) {\n        this._where.append(new WhereRaw(clause));\n\n        return this;\n    }\n\n\n    whereNot(...args) {\n        this.where(...args);\n\n        this._where.last().setNegative();\n\n        return this;\n    }\n\n\n    whereBetween(alias, floor, ceiling) {\n        const floor_alias = this._addWhereParameter(`${alias}_floor`, floor);\n        const ceiling_alias = this._addWhereParameter(`${alias}_ceiling`, ceiling);\n\n        this._where.append(new WhereBetween(alias, floor_alias, ceiling_alias));\n\n        return this;\n    }\n\n\n    whereNotBetween(alias, floor, ceiling) {\n        this.whereBetween(alias, floor, ceiling);\n\n        this._where.last().setNegative();\n\n        return this;\n    }\n\n\n    delete(...args) {\n        this._current.delete(...args);\n\n        return this;\n    }\n\n\n    detachDelete(...args) {\n        this._current.detachDelete(...args);\n\n        return this;\n    }\n\n\n    create(alias, model, properties) {\n        this.whereStatement('WHERE');\n        this.statement('CREATE');\n\n        this._current.match( new Match(alias, model, this._convertPropertyMap( alias, properties ) ) );\n\n        return this;\n    }\n\n\n    _convertPropertyMap(alias, properties) {\n        if ( properties ) {\n            return Object.keys(properties).map(key => {\n                const property_alias = `${alias}_${key}`;\n\n                this._params[ property_alias ] = properties[ key ];\n\n                return new Property( key, property_alias );\n            });\n        }\n\n        return [];\n    }\n\n\n    merge(alias, model, properties) {\n        this.whereStatement('WHERE');\n        this.statement('MERGE');\n\n        this._current.match( new Match(alias, model, this._convertPropertyMap( alias, properties ) ) );\n\n        return this;\n    }\n\n\n    set(property, value, operator = '=') {\n\n        if ( !value && property instanceof Object ) {\n            Object.keys(property).forEach(key => {\n                this.set(key, property[ key ]);\n            });\n        }\n        else {\n            if ( value !== undefined ) {\n                const alias = `set_${this._set_count}`;\n                this._params[ alias ] = value;\n\n                this._set_count++;\n\n                this._current.set(property, alias, operator);\n            } else {\n                this._current.setRaw(property);\n            }\n        }\n\n        return this;\n    }\n\n\n\n    onCreateSet(property, value, operator = '=') {\n\n        if ( value === undefined && property instanceof Object ) {\n            Object.keys(property).forEach(key => {\n                this.onCreateSet(key, property[ key ]);\n            });\n        }\n        else {\n            const alias = `set_${this._set_count}`;\n            this._params[ alias ] = value;\n\n            this._set_count++;\n\n            this._current.onCreateSet(property, alias, operator);\n        }\n\n        return this;\n    }\n\n\n\n    onMatchSet(property, value, operator = '=') {\n\n        if ( value === undefined && property instanceof Object ) {\n            Object.keys(property).forEach(key => {\n                this.onMatchSet(key, property[ key ]);\n            });\n        }\n        else {\n            const alias = `set_${this._set_count}`;\n            this._params[ alias ] = value;\n\n            this._set_count++;\n\n            this._current.onMatchSet(property, alias, operator);\n        }\n\n        return this;\n    }\n\n\n    remove(...items) {\n        this._current.remove(items);\n\n        return this;\n    }\n\n\n    return(...args) {\n        this._current.return(...args);\n\n        return this;\n    }\n\n\n    limit(limit) {\n        this._current.limit(limit);\n\n        return this;\n    }\n\n\n    skip(skip) {\n        this._current.skip(skip);\n\n        return this;\n    }\n\n\n    orderBy(...args) {\n        let order_by;\n\n        if (args.length == 2) {\n\n            order_by = new Order(args[0], args[1]);\n\n        }\n        else if (Array.isArray(args[0])) {\n\n            args[0].forEach(arg => {\n                this.orderBy(arg);\n            });\n        }\n\n        else if (typeof args[0] == 'object' && args[0].field) {\n\n            order_by = new Order(args[0].field, args[0].order);\n        }\n        else if (typeof args[0] == 'object') {\n\n            Object.keys(args[0]).forEach(key => {\n                this.orderBy(key, args[0][key]);\n            });\n        }\n        else if (args[0]) {\n\n            order_by = new Order(args[0]);\n        }\n\n        if (order_by) {\n            this._current.order(order_by);\n        }\n\n        return this;\n    }\n\n\n    relationship(relationship, direction, alias, degrees) {\n        this._current.relationship(relationship, direction, alias, degrees);\n\n        return this;\n    }\n\n\n    to(alias, model, properties) {\n        this._current.match( new Match(alias, model, this._convertPropertyMap(alias, properties) ) );\n\n        return this;\n    }\n\n\n    toAnything() {\n        this._current.match(new Match());\n\n        return this;\n    }\n\n\n    pattern() {\n        this.whereStatement();\n        this.statement();\n\n        return this._statements.map(statement => {\n            return statement.toString(false);\n        }).join('\\n');\n    }\n\n\n    build() {\n\n        this.whereStatement();\n        this.statement();\n\n        const query = this._statements.map(statement => {\n            return statement.toString();\n        }).join('\\n');\n\n        return {\n            query,\n            params: this._params\n        };\n    }\n\n\n    execute(query_mode = mode.WRITE) {\n        const { query, params } = this.build();\n\n        let session\n\n        switch (query_mode) {\n            case mode.WRITE:\n                session = this._neode.writeSession()\n\n                return session.writeTransaction(tx => tx.run(query, params))\n                    .then(res => {\n                        session.close()\n\n                        return res\n                    })\n\n\n            default:\n                session = this._neode.readSession()\n\n                return session.readTransaction(tx => tx.run(query, params))\n                    .then(res => {\n                        session.close()\n\n                        return res\n                    })\n        }\n    }\n\n}\n'neode/src/Services/Create.js'\n:import GenerateDefaultValues from './GenerateDefaultValues';\nimport Validator from './Validator';\nimport Builder, {mode} from '../Query/Builder';\nimport { eagerNode, } from '../Query/EagerUtils';\nimport { addNodeToStatement, ORIGINAL_ALIAS } from './WriteUtils';\n\nexport default function Create(neode, model, properties) {\n    return GenerateDefaultValues(neode, model, properties)\n        .then(properties => Validator(neode, model, properties))\n        .then(properties => {\n            const alias = ORIGINAL_ALIAS;\n\n            const builder = new Builder(neode);\n\n            addNodeToStatement(neode, builder, alias, model, properties, [ alias ]);\n\n\n            const output = eagerNode(neode, 1, alias, model);\n\n            return builder.return(output)\n                .execute(mode.WRITE)\n                .then(res => neode.hydrateFirst(res, alias));\n        });\n}\n\n'neode/test/Services/UpdateNode.spec.js'\n:import {assert, expect} from 'chai';\nimport FindAll from '../../src/Services/FindAll';\nimport Create from '../../src/Services/Create';\nimport Node from '../../src/Node';\n\ndescribe('UpdateNode', () => {\n    let instance;\n    let model;\n    const label = 'UpdateTest';\n    const schema = {\n        uuid: {\n            type: 'uuid',\n            primary: true,\n        },\n        name: {\n            type: 'string',\n            required: true,\n        },\n        age: 'integer',\n        enabled: {\n            type: 'boolean',\n            default: false,\n        },\n        dob: {\n            type: 'datetime',\n            default: Date.now,\n        },\n        point: {\n            type: 'point',\n            default: {\n                latitude: 51.506164642,\n                longitude: -0.124832834,\n            },\n        },\n    }\n\n\n    before(() => {\n        instance = require('../instance')();\n        model = instance.model(label, schema);\n    });\n\n    after(done => {\n        instance.deleteAll(label)\n            .then(() => {\n                return instance.close()\n            })\n            .then(() => done());\n    });\n\n    it('should update a node including null properties', (done) => {\n        const data = {\n            name: 'James',\n            age: 21,\n        };\n        const updates = { name: 'Adam', age: null }\n\n        Create(instance, model, data)\n            .then(res => {\n                return res.update(updates)\n            })\n            .then(res => {\n\n                Object.keys(updates).map(key => {\n                    expect(res.get(key)).to.equal(updates[ key ])\n                })\n\n                return res.toJson()\n            })\n            .then(json => {\n                Object.keys(updates).map(key => {\n                    expect(json[ key ]).to.equal(updates[ key ])\n                })\n\n                done()\n            })\n            .catch(e => done(e))\n\n\n    })\n\n})",
        "gt": [
            "'neode/src/Query/Builder.js'",
            "'neode/src/Services/Create.js'",
            "'neode/test/Services/UpdateNode.spec.js'"
        ]
    },
    {
        "files": [
            "'cypress-plugin-snapshots/src/utils/tasks/textSnapshots.js'",
            "'cypress-plugin-snapshots/src/save/saveTextSnapshot.js'",
            "'cypress-plugin-snapshots/plugin.js'",
            "'cypress-plugin-snapshots/src/server/initServer.js'",
            "'cypress-plugin-snapshots/__tests__/plugin.test.js'",
            "'cypress-plugin-snapshots/src/config.js'"
        ],
        "content": "'cypress-plugin-snapshots/src/utils/tasks/textSnapshots.js'\n:const path = require('path');\nconst fs = require('fs-extra');\nconst unidiff = require('unidiff');\nconst prettier = require('prettier');\nconst { TYPE_JSON } = require('../../dataTypes');\nconst {\n  getConfig,\n  shouldNormalize,\n  getPrettierConfig\n} = require('../../config');\nconst removeExcludedFields = require('../text/removeExcludedFields');\nconst { formatJson, normalizeObject } = require('../json');\n\nfunction subjectToSnapshot(subject, dataType = TYPE_JSON, config = {}) {\n  let result = subject;\n\n  if (typeof subject === 'object' && shouldNormalize(dataType, config)) {\n    result = normalizeObject(subject);\n  }\n\n  if (dataType === TYPE_JSON && config && config.excludeFields) {\n    result = removeExcludedFields(result, config.excludeFields);\n  }\n\n  const prettierConfig = getPrettierConfig(dataType, config);\n  if (prettierConfig) {\n    try {\n      if (typeof result === 'object') {\n        result = formatJson(result, undefined, 2);\n      }\n\n      result = prettier.format(result.trim(), prettierConfig).trim();\n    } catch(err) {\n      throw new Error(`Cannot format subject: ${result}`);\n    }\n  } else if(dataType === TYPE_JSON && config.formatJson) {\n    result = formatJson(result);\n  }\n\n  return result;\n}\n\nfunction formatDiff(subject) {\n  if (typeof subject === 'object') {\n    return formatJson(subject);\n  }\n  return String(subject || '');\n}\n\nfunction createDiff(expected, actual, snapshotTitle) {\n  return unidiff.diffAsText(formatDiff(expected), formatDiff(actual), {\n    aname: snapshotTitle,\n    bname: snapshotTitle,\n    context: getConfig().diffLines,\n  });\n}\n\nfunction getSnapshot(filename, snapshotTitle, dataType = TYPE_JSON) {\n  fs.ensureDirSync(path.dirname(filename));\n\n  if (fs.existsSync(filename)) {\n    const snapshots = readFile(filename);\n    if (snapshots[snapshotTitle]) {\n      return subjectToSnapshot(snapshots[snapshotTitle], dataType);\n    }\n  } else {\n    fs.writeFileSync(filename, '{}');\n  }\n\n  return false;\n}\n\nfunction readFile(filename) {\n  if (fs.existsSync(filename)) {\n    let content;\n    try {\n      delete require.cache[filename];\n      content = require(filename);\n    } catch(ex) {\n\n      console.warn(`Cannot read snapshot file \"${filename}\" as javascript, falling back to JSON parser:`, ex);\n      const fileContents = fs.readFileSync(filename, 'utf8');\n\n      if (!fileContents || !fileContents.trim() || fileContents.trim().slice(0,1) !== '{') {\n        throw new Error(`Cannot load snapshot file. File \"${filename} does not contain valid JSON or javascript`);\n      }\n\n      try {\n        content = JSON.parse(fileContents);\n      } catch(jsonEx) {\n        throw new Error(`Cannot read snapshot \"${filename}\" as JSON: ${jsonEx}`);\n      }\n    }\n\n    return content;\n  }\n\n  return {};\n}\n\nfunction updateSnapshot(filename, snapshotTitle, subject, dataType = TYPE_JSON) {\n  const store = readFile(filename);\n  if (dataType === TYPE_JSON) {\n    store[snapshotTitle] = JSON.parse(subject);\n  } else {\n    store[snapshotTitle] = subject;\n  }\n\n\n\n  const saveResult = Object.keys(store).reduce((result, key) => {\n    let value = store[key];\n    if (typeof value === 'string') {\n      value = ` \\`\\n${value.trim().replace(/\\\\/g, '\\\\\\\\').replace(/`/g, '\\\\`')}\\n\\``;\n    } else {\n      value = `\\n${formatJson(value)}`;\n    }\n    result += `exports[\\`${key}\\`] =${value}`;\n    result += \";\\n\\n\";\n\n    return result;\n  }, '');\n\n  fs.writeFileSync(filename, `${saveResult.trim()}\\n`);\n}\n\nmodule.exports = {\n  createDiff,\n  formatDiff,\n  getSnapshot,\n  subjectToSnapshot,\n  updateSnapshot,\n};\n\n'cypress-plugin-snapshots/src/save/saveTextSnapshot.js'\n:const { merge } = require('lodash');\nconst { updateSnapshot } = require('../utils/tasks/textSnapshots');\n\nfunction saveTextSnapshot(data) {\n  const {\n    snapshotFile,\n    snapshotTitle,\n    actual,\n    dataType,\n  } = data;\n  updateSnapshot(snapshotFile, snapshotTitle, actual, dataType);\n  return merge({}, data, {\n    saved: true\n  });\n}\n\nmodule.exports = saveTextSnapshot;\n\n'cypress-plugin-snapshots/plugin.js'\n:\nconst { initConfig, CONFIG_KEY } = require('./src/config');\nconst initServer = require('./src/server/initServer');\nconst tasks = require('./src/tasks/');\n\n\nfunction initPlugin(on, globalConfig = {\n}) {\n  const config = initConfig(globalConfig.env[CONFIG_KEY]);\n  initServer(config);\n\n\n\n  globalConfig.env[CONFIG_KEY] = JSON.stringify(config);\n\n  on('before:browser:launch', (browser = {}, launchOptions) => {\n    const args = Array.isArray(launchOptions) ? launchOptions : launchOptions.args;\n\n    if (browser.name === 'chrome') {\n      args.push('--font-render-hinting=medium');\n      args.push('--enable-font-antialiasing');\n      args.push('--disable-gpu');\n    }\n\n    return launchOptions;\n  });\n\n  on('task', tasks);\n}\n\nmodule.exports = {\n  initPlugin\n};\n\n'cypress-plugin-snapshots/src/server/initServer.js'\n:const http = require('http');\nconst socketio = require('socket.io');\nconst { SAVE_TEXT, SAVE_IMAGE } = require('./actions');\nconst saveTextSnapshot = require('../save/saveTextSnapshot');\nconst { saveImageSnapshot } = require('../utils/tasks/imageSnapshots');\n\nfunction initServer(config) {\n  const server = http.createServer();\n  const io = socketio(server);\n\n  io.on('connection', (client) => {\n    const { token } = client.handshake.query;\n\n    if (config.serverEnabled) {\n      client.on(SAVE_IMAGE, (data) => {\n        if (token === config.token) {\n          saveImageSnapshot(data);\n        }\n      });\n\n      client.on(SAVE_TEXT, (data) => {\n        if (token === config.token) {\n          saveTextSnapshot(data);\n        }\n      });\n    }\n  });\n\n  if (config.serverEnabled) {\n    server.listen(config.serverPort, config.serverHost);\n  }\n}\n\nmodule.exports = initServer;\n\n'cypress-plugin-snapshots/__tests__/plugin.test.js'\n:\nconst configModule = require('../src/config');\n\njest.mock(\"../src/config.js\");\n\njest.spyOn(configModule, 'initConfig')\n  .mockImplementation((config) => config);\n\nglobal.Cypress = {\n  env: () => {},\n  config: () => {},\n  Commands: {\n    add: jest.fn(),\n  },\n};\n\nglobal.cy = {};\n\ndescribe('plugin', () => {\n  it('initPlugin', () => {\n    const globalConfig = {\n      env: {\n        \"cypress-plugin-snapshots\": {\n          \"serverEnabled\": false,\n        }\n      }\n    };\n    jest.spyOn(configModule, 'getConfig')\n      .mockImplementation(() => globalConfig.env['cypress-plugin-snapshots']);\n    const on = jest.fn();\n\n    const { initPlugin } = require('../plugin');\n\n    initPlugin(on, globalConfig);\n    expect(on).toBeCalledTimes(2);\n  });\n});\n\n'cypress-plugin-snapshots/src/config.js'\n:const randtoken = require('rand-token');\nconst { merge, cloneDeep, clone } = require('lodash');\nconst { TYPE_JSON } = require('./dataTypes');\n\nfunction createToken() {\n  return randtoken.generate(128);\n}\n\nconst DEFAULT_SCREENSHOT_CONFIG = Object.freeze({\n  blackout: [],\n  capture: 'fullPage',\n  clip: null,\n  padding: null,\n  disableTimersAndAnimations: true,\n  log: false,\n  scale: false,\n  timeout: 30000,\n});\n\nconst DEFAULT_IMAGE_CONFIG = Object.freeze({\n  createDiffImage: true,\n  resizeDevicePixelRatio: true,\n  threshold: 0.1,\n  thresholdType: 'percent',\n});\n\nconst DEFAULT_CONFIG = Object.freeze({\n  autoCleanUp: false,\n  autopassNewSnapshots: true,\n  diffLines: 3,\n  excludeFields: [],\n  formatJson: true,\n  ignoreExtraArrayItems: false,\n  ignoreExtraFields: false,\n  imageConfig: clone(DEFAULT_IMAGE_CONFIG),\n  normalizeJson: true,\n  prettier: true,\n  prettierConfig: {\n    html: {\n      parser: 'html',\n      tabWidth: 2,\n      endOfLine: 'lf'\n    },\n  },\n  screenshotConfig: clone(DEFAULT_SCREENSHOT_CONFIG),\n  serverEnabled: true,\n  serverHost: 'localhost',\n  serverPort: 2121,\n  token: createToken(),\n  updateSnapshots: false,\n  backgroundBlend: 'difference',\n  name: '',\n});\n\nconst CONFIG_KEY = 'cypress-plugin-snapshots';\n\nlet config = cloneDeep(DEFAULT_CONFIG);\n\nfunction initConfig(initialConfig) {\n  if (initialConfig) {\n    config = merge(config, initialConfig);\n  }\n  return config;\n}\n\nfunction getConfig() {\n  return config;\n}\n\nfunction getImageConfig(options = {}) {\n  return Object.keys(DEFAULT_IMAGE_CONFIG)\n    .filter((key) => options.imageConfig && options.imageConfig[key] !== undefined)\n    .reduce(\n      (imageConfig, key) => {\n        imageConfig[key] = options.imageConfig[key];\n        return imageConfig;\n      },\n      merge({}, DEFAULT_IMAGE_CONFIG, getConfig().imageConfig)\n    );\n}\n\n\nfunction getScreenshotConfig(options = {}) {\n  const screenshotConfig = Object.keys(DEFAULT_SCREENSHOT_CONFIG)\n    .filter((key) => options.screenshotConfig && options.screenshotConfig[key] !== undefined)\n    .reduce(\n      (currentConfig, key) => {\n        currentConfig[key] = options.screenshotConfig[key];\n        return currentConfig;\n      },\n      merge({}, DEFAULT_SCREENSHOT_CONFIG, getConfig().screenshotConfig)\n    );\n\n  screenshotConfig.blackout = (screenshotConfig.blackout || []);\n  screenshotConfig.blackout.push('.snapshot-diff');\n  return screenshotConfig;\n}\n\nfunction getCustomName(suppliedConfig) {\n  const cfg = suppliedConfig || getConfig();\n  return cfg.name;\n}\n\nfunction getCustomSeparator(suppliedConfig) {\n  const cfg = suppliedConfig || getConfig();\n  return cfg.separator;\n}\n\nfunction getServerUrl(suppliedConfig) {\n  const cfg = suppliedConfig || getConfig();\n  return `http:\n}\n\nfunction shouldNormalize(dataType, suppliedConfig) {\n  const cfg = suppliedConfig && suppliedConfig.normalizeJson !== undefined ?\n    suppliedConfig : getConfig();\n  return dataType === TYPE_JSON && cfg.normalizeJson;\n}\n\nfunction getPrettierConfig(dataType, suppliedConfig) {\n  const cfg = suppliedConfig && suppliedConfig.prettierConfig ?\n    suppliedConfig : getConfig();\n  return cfg.prettier && cfg.prettierConfig ? cfg.prettierConfig[dataType] : undefined;\n}\n\nmodule.exports = {\n  CONFIG_KEY,\n  DEFAULT_IMAGE_CONFIG,\n  DEFAULT_SCREENSHOT_CONFIG,\n  createToken,\n  getConfig,\n  getImageConfig,\n  getPrettierConfig,\n  getScreenshotConfig,\n  getCustomName,\n  getCustomSeparator,\n  getServerUrl,\n  initConfig,\n  shouldNormalize,\n};\n",
        "gt": [
            "'cypress-plugin-snapshots/src/config.js'",
            "'cypress-plugin-snapshots/src/utils/tasks/textSnapshots.js'",
            "'cypress-plugin-snapshots/src/save/saveTextSnapshot.js'",
            "'cypress-plugin-snapshots/src/server/initServer.js'",
            "'cypress-plugin-snapshots/plugin.js'",
            "'cypress-plugin-snapshots/__tests__/plugin.test.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/selector.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/components/modals.js'"
        ],
        "content": "'ruui/src/components/selector.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, TouchableWithoutFeedback, ScrollView, View, Text, StyleSheet } from 'react-native';\n\nimport ResponsibleTouchArea from './responsibleTouchArea';\nimport SelectorItem from './selectorItem';\nimport { isAndroid, colors } from '../utils';\nimport { screenWidthPadding } from '../utils/screen';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tconfigs?: Object,\n\tanimation?: any,\n\tactive?: boolean,\n\tdispatch?: Function,\n\tonRequestClose?: Function,\n};\n\nclass Selector extends Component<any, Props, any> {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiStore: PropTypes.object,\n\t};\n\n\tconstructor(props, context) {\n\t\tsuper(props);\n\t\tthis.store = context.ruuiStore;\n\t}\n\n\trender() {\n\t\tconst { animation, configs, active, onRequestClose } = this.props,\n\t\t\ttranslateY = animation.interpolate({\n\t\t\t\tinputRange: [0, 0.32, 1], outputRange: [maxContainerSize, maxContainerSize * 0.15, 0],\n\t\t\t}), selectionContainerStyles = {\n\t\t\t\ttransform: [{ translateY }],\n\t\t\t},\n\t\t\tOptionWrapperElement = configs.options.length > 5 ? ScrollView : View,\n\t\t\tpointerEvents = active ? 'auto' : 'none';\n\n\t\treturn <View pointerEvents={pointerEvents} style={styles.container}>\n\t\t\t{configs.tapToClose ? <TouchableWithoutFeedback\n\t\t\t\tonPress={() => onRequestClose(configs)}>\n\t\t\t\t<View style={styles.touchableMask}/>\n\t\t\t</TouchableWithoutFeedback> : <View/>}\n\n\t\t\t<Animated.View\n\t\t\t\tstyle={[styles.selectionContainer, selectionContainerStyles]}>\n\t\t\t\t<View style={styles.optionWrapper}>\n\t\t\t\t\t<View style={styles.selectTitle}>\n\t\t\t\t\t\t<Text style={styles.selectTitleText}>\n\t\t\t\t\t\t\t{configs.selectText}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</View>\n\t\t\t\t\t<View style={{ maxHeight: 255 }}>\n\t\t\t\t\t\t<OptionWrapperElement style={{ backgroundColor: '#f9f9f9' }}>\n\t\t\t\t\t\t\t{this.renderOptions()}\n\t\t\t\t\t\t</OptionWrapperElement>\n\t\t\t\t\t\t{!isAndroid && <View style={styles.optionTails}/>}\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t\t<View style={styles.commandWrapper}>\n\t\t\t\t\t{this.renderCommands()}\n\t\t\t\t</View>\n\t\t\t</Animated.View>\n\t\t</View>;\n\t}\n\n\trenderOptions() {\n\t\tconst { configs } = this.props,\n\t\t\t{ options = [] } = configs;\n\n\t\treturn options.map((item, i) => {\n\t\t\treturn <SelectorItem\n\t\t\t\tkey={i}\n\t\t\t\toptionInstance={item}\n\t\t\t\tactiveInstance={configs.value}\n\t\t\t\tgetTitle={configs.getTitle}\n\t\t\t\tonPress={this.onItemPick}/>;\n\t\t});\n\t}\n\n\trenderCommands() {\n\t\tconst { configs } = this.props;\n\n\t\treturn <ResponsibleTouchArea\n\t\t\tonPress={this.cancelSelector}\n\t\t\trippleColor={colors.iOsBlue}\n\t\t\twrapperStyle={[styles.commandItemWrapper]}\n\t\t\tinnerStyle={styles.optionItemInner}\n\t\t\tfadeLevel={0.04}>\n\t\t\t<Text style={styles.commandTitle}>\n\t\t\t\t{configs.cancelText}\n\t\t\t</Text>\n\t\t</ResponsibleTouchArea>;\n\t}\n\n\tonItemPick = (item) => {\n\t\tconst { configs } = this.props;\n\n\t\tthis.store.dispatch(appActions.toggleSelector(false));\n\t\tif (configs.onSelect) configs.onSelect(item);\n\t\tif (configs.onChange\n\t\t\t&& JSON.stringify(configs.value) !== JSON.stringify(item)) {\n\t\t\tconfigs.onChange(item);\n\t\t}\n\t};\n\n\tcancelSelector = () => {\n\t\tconst { configs } = this.props;\n\n\t\tthis.store.dispatch(appActions.toggleSelector(false, {\n\t\t\tid: configs.id,\n\t\t}));\n\t\tif (configs.onCancel) configs.onCancel();\n\t}\n}\n\nexport default Selector;\n\nconst maxContainerSize = 500,\n\tselectorRadius = isAndroid ? 3 : 8,\n\tborderWidth = isAndroid ? 0 : 1,\n\tselectorMargin = 20,\n\tselectorPadding = isAndroid ? 20 : 8,\n\tselectionAlign = isAndroid ? 'left' : 'center';\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t},\n\tselectionContainer: {\n\t\tposition: 'absolute',\n\t\tbottom: 0, left: 0, right: 0,\n\t\tmaxHeight: maxContainerSize,\n\t\talignItems: 'center',\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n\tselectTitle: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#f9f9f9',\n\t\tborderTopLeftRadius: selectorRadius,\n\t\tborderTopRightRadius: selectorRadius,\n\t\tborderBottomWidth: borderWidth,\n\t\tborderColor: '#dedede',\n\t},\n\tselectTitleText: {\n\t\tpadding: selectorPadding,\n\t\tpaddingTop: 9, paddingBottom: 9,\n\t\ttextAlign: selectionAlign,\n\t\tcolor: '#8f8f8f', backgroundColor: 'transparent',\n\t\tfontSize: 14, fontWeight: '300',\n\t},\n\toptionWrapper: {\n\t\tmargin: selectorMargin,\n\t\tmarginBottom: isAndroid ? 0 : selectorMargin / 2,\n\t\twidth: screenWidthPadding(selectorMargin, 400),\n\t},\n\toptionItemInner: {\n\t\tpadding: selectorPadding,\n\t\tpaddingTop: 12, paddingBottom: 12,\n\t},\n\toptionTails: {\n\t\theight: selectorRadius,\n\t\tbackgroundColor: '#f9f9f9',\n\t\tborderBottomLeftRadius: selectorRadius,\n\t\tborderBottomRightRadius: selectorRadius,\n\t},\n\tcommandWrapper: {\n\t\tmargin: selectorMargin,\n\t\tmarginTop: 0,\n\t\tborderRadius: selectorRadius,\n\t\tborderTopLeftRadius: isAndroid ? 0 : selectorRadius,\n\t\tborderTopRightRadius: isAndroid ? 0 : selectorRadius,\n\t\tbackgroundColor: isAndroid ? '#f9f9f9' : 'transparent',\n\t\toverflow: 'hidden',\n\t\twidth: screenWidthPadding(selectorMargin, 400),\n\t},\n\tcommandItemWrapper: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#f5f5f5',\n\t\tborderBottomWidth: borderWidth,\n\t\tborderColor: '#dedede',\n\t\tborderRadius: selectorRadius,\n\t},\n\tcommandTitle: {\n\t\tcolor: colors.iOsBlue,\n\t\tfontSize: 17,\n\t\ttextAlign: isAndroid ? 'center' : 'center',\n\t\tbackgroundColor: 'transparent',\n\t},\n});\n\n'ruui/src/components/modal.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, View, StyleSheet } from 'react-native';\n\nimport Selector from './selector';\nimport LoadingMask from './loadingMask';\nimport CloseableModal from './closeableModal';\nimport { valueAt } from '../utils';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tactive?: any,\n\ttype?: string,\n\tconfigs?: Object,\n\tmodalCount?: number,\n\tdispatch?: Function,\n\tanimationDelay?: Number,\n};\n\nexport default class RuuiModal extends Component {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactive: props.active,\n\t\t};\n\t\tthis.enterAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { active, animationDelay, } = this.props;\n\t\tsetTimeout(() => this.playTransition(active), animationDelay);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { active } = this.props;\n\t\tif (prevProps.active !== active) {\n\t\t\tthis.playTransition(active);\n\t\t}\n\t}\n\n\tplayTransition(active) {\n\t\tconst { configs = {}, } = this.props;\n\t\tconst nextValue = active ? 1 : 0;\n\n\t\tif (!active) {\n\t\t\tif (configs.instantClose) {\n\t\t\t\tthis.setState({ active: null });\n\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t} else {\n\t\t\t\tthis.playAnimation(nextValue, () => {\n\t\t\t\t\tthis.setState({ active: null });\n\t\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState({ active });\n\t\t\tthis.playAnimation(nextValue);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { configs = {}, modalCount, type: modalType } = this.props,\n\t\t\t{ active } = this.state,\n\t\t\tglobalConfigs = valueAt(this, 'context.ruuiConfigs.modal'),\n\t\t\tcontainerPropsGenerator = configs.maskProps || globalConfigs.maskProps,\n\t\t\tcontainerProps = containerPropsGenerator(this.enterAnimation, configs, modalCount, modalType);\n\n\t\tif (configs.maskProps && !containerProps.style) {\n\t\t\tcontainerProps.style = globalConfigs.maskProps(\n\t\t\t\tthis.enterAnimation, configs, modalCount, modalType\n\t\t\t).style;\n\t\t}\n\n\t\treturn active ? <Animated.View {...containerProps}>\n\t\t\t<View style={styles.innerTouchable}>\n\t\t\t\t{this.renderModalInner()}\n\t\t\t</View>\n\t\t</Animated.View> : <View/>;\n\t}\n\n\trenderModalInner() {\n\t\tconst { dispatch, type: modalType, active, configs: modalConfigs } = this.props;\n\n\t\tswitch (modalType) {\n\t\tcase 'select':\n\t\t\treturn <Selector\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleSelector(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'modal':\n\t\t\treturn <CloseableModal\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleModal(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'loading':\n\t\t\treturn <LoadingMask\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tdefault:\n\t\t\treturn <View/>;\n\t\t}\n\t}\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: false,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport function defaultMaskPropsGenerator(animation, configs, modalCount, modalType) {\n\tconst averageOpacity = (0.8 / modalCount) + (modalCount * 0.1),\n\t\tbackgroundColor = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: ['rgba(0, 0, 0, 0)', `rgba(0, 0, 0, ${averageOpacity})`],\n\t\t}),\n\t\tstyle = [styles.container, {\n\t\t\tzIndex: configs.zIndex,\n\t\t\tbackgroundColor,\n\t\t}];\n\n\treturn { style, };\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n\tinnerTouchable: {\n\t\tflex: 1,\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n});\n\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/components/modals.js'\n:import React, { Component } from 'react';\nimport { View, StyleSheet, } from 'react-native';\n\nimport Modal from './modal';\nimport RuuiDropdown from './dropdown';\nimport { connect } from '../utils';\n\ntype Props = {\n\tpreRenders?: Array<Object>,\n\tpreRenderDelay?: Number,\n\tmodals?: Array<Object>,\n\tdispatch?: Function,\n\tscreenSize?: { width?: number, height?: number },\n\tanimationDelay?: Number,\n};\n\nclass RuuiModals extends Component {\n\tprops: Props;\n\tstatic defaultProps = {\n\t\tanimationDelay: 200,\n\t\tpreRenderDelay: 300,\n\t};\n\n\tcomponentDidMount() {\n\t\tconst { dispatch, preRenders, preRenderDelay, } = this.props;\n\n\t\tif (preRenders?.length) {\n\t\t\tfor (let i = 0; i < preRenders.length; i += 1) {\n\t\t\t\tconst item = preRenders[i];\n\t\t\t\titem.flag = false;\n\t\t\t\tsetTimeout(() => dispatch(item), i * preRenderDelay);\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { dispatch, modals, screenSize, animationDelay, } = this.props,\n\t\t\tmodalArray = Object.keys(modals).map(key => Object.assign({}, modals[key], { id: key }));\n\n\t\treturn <View\n\t\t\tref={(ref) => { global.modalsContainer = ref; }}\n\t\t\tpointerEvents=\"box-none\"\n\t\t\tstyle={styles.container}>\n\t\t\t{modalArray.map((modalConfigs, i) => {\n\t\t\t\tif (modalConfigs.type === 'dropdown') {\n\t\t\t\t\treturn <RuuiDropdown\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tscreenSize={screenSize}\n\t\t\t\t\t\t{...modalConfigs}\n\t\t\t\t\t/>;\n\t\t\t\t}\n\t\t\t\treturn <Modal\n\t\t\t\t\tkey={i}\n\t\t\t\t\tmodalCount={modalArray.filter(e => e.type !== 'dropdown').length}\n\t\t\t\t\tdispatch={dispatch}\n\t\t\t\t\tanimationDelay={animationDelay}\n\t\t\t\t\t{...modalConfigs}/>;\n\t\t\t})}\n\t\t</View>;\n\t}\n}\n\nexport default connect(({ activeModals }) => {\n\treturn {\n\t\tmodals: activeModals,\n\t};\n})(RuuiModals);\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n});\n",
        "gt": [
            "'ruui/src/components/selector.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/modals.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/selector.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/components/modals.js'"
        ],
        "content": "'ruui/src/components/selector.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, TouchableWithoutFeedback, ScrollView, View, Text, StyleSheet } from 'react-native';\n\nimport ResponsibleTouchArea from './responsibleTouchArea';\nimport SelectorItem from './selectorItem';\nimport { isAndroid, colors } from '../utils';\nimport { screenWidthPadding } from '../utils/screen';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tconfigs?: Object,\n\tanimation?: any,\n\tactive?: boolean,\n\tdispatch?: Function,\n\tonRequestClose?: Function,\n};\n\nclass Selector extends Component<any, Props, any> {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiStore: PropTypes.object,\n\t};\n\n\tconstructor(props, context) {\n\t\tsuper(props);\n\t\tthis.store = context.ruuiStore;\n\t}\n\n\trender() {\n\t\tconst { animation, configs, active, onRequestClose } = this.props,\n\t\t\ttranslateY = animation.interpolate({\n\t\t\t\tinputRange: [0, 0.32, 1], outputRange: [maxContainerSize, maxContainerSize * 0.15, 0],\n\t\t\t}), selectionContainerStyles = {\n\t\t\t\ttransform: [{ translateY }],\n\t\t\t},\n\t\t\tOptionWrapperElement = configs.options.length > 5 ? ScrollView : View,\n\t\t\tpointerEvents = active ? 'auto' : 'none';\n\n\t\treturn <View pointerEvents={pointerEvents} style={styles.container}>\n\t\t\t{configs.tapToClose ? <TouchableWithoutFeedback\n\t\t\t\tonPress={() => onRequestClose(configs)}>\n\t\t\t\t<View style={styles.touchableMask}/>\n\t\t\t</TouchableWithoutFeedback> : <View/>}\n\n\t\t\t<Animated.View\n\t\t\t\tstyle={[styles.selectionContainer, selectionContainerStyles]}>\n\t\t\t\t<View style={styles.optionWrapper}>\n\t\t\t\t\t<View style={styles.selectTitle}>\n\t\t\t\t\t\t<Text style={styles.selectTitleText}>\n\t\t\t\t\t\t\t{configs.selectText}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</View>\n\t\t\t\t\t<View style={{ maxHeight: 255 }}>\n\t\t\t\t\t\t<OptionWrapperElement style={{ backgroundColor: '#f9f9f9' }}>\n\t\t\t\t\t\t\t{this.renderOptions()}\n\t\t\t\t\t\t</OptionWrapperElement>\n\t\t\t\t\t\t{!isAndroid && <View style={styles.optionTails}/>}\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t\t<View style={styles.commandWrapper}>\n\t\t\t\t\t{this.renderCommands()}\n\t\t\t\t</View>\n\t\t\t</Animated.View>\n\t\t</View>;\n\t}\n\n\trenderOptions() {\n\t\tconst { configs } = this.props,\n\t\t\t{ options = [] } = configs;\n\n\t\treturn options.map((item, i) => {\n\t\t\treturn <SelectorItem\n\t\t\t\tkey={i}\n\t\t\t\toptionInstance={item}\n\t\t\t\tactiveInstance={configs.value}\n\t\t\t\tgetTitle={configs.getTitle}\n\t\t\t\tonPress={this.onItemPick}/>;\n\t\t});\n\t}\n\n\trenderCommands() {\n\t\tconst { configs } = this.props;\n\n\t\treturn <ResponsibleTouchArea\n\t\t\tonPress={this.cancelSelector}\n\t\t\trippleColor={colors.iOsBlue}\n\t\t\twrapperStyle={[styles.commandItemWrapper]}\n\t\t\tinnerStyle={styles.optionItemInner}\n\t\t\tfadeLevel={0.04}>\n\t\t\t<Text style={styles.commandTitle}>\n\t\t\t\t{configs.cancelText}\n\t\t\t</Text>\n\t\t</ResponsibleTouchArea>;\n\t}\n\n\tonItemPick = (item) => {\n\t\tconst { configs } = this.props;\n\n\t\tthis.store.dispatch(appActions.toggleSelector(false));\n\t\tif (configs.onSelect) configs.onSelect(item);\n\t\tif (configs.onChange\n\t\t\t&& JSON.stringify(configs.value) !== JSON.stringify(item)) {\n\t\t\tconfigs.onChange(item);\n\t\t}\n\t};\n\n\tcancelSelector = () => {\n\t\tconst { configs } = this.props;\n\n\t\tthis.store.dispatch(appActions.toggleSelector(false, {\n\t\t\tid: configs.id,\n\t\t}));\n\t\tif (configs.onCancel) configs.onCancel();\n\t}\n}\n\nexport default Selector;\n\nconst maxContainerSize = 500,\n\tselectorRadius = isAndroid ? 3 : 8,\n\tborderWidth = isAndroid ? 0 : 1,\n\tselectorMargin = 20,\n\tselectorPadding = isAndroid ? 20 : 8,\n\tselectionAlign = isAndroid ? 'left' : 'center';\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t},\n\tselectionContainer: {\n\t\tposition: 'absolute',\n\t\tbottom: 0, left: 0, right: 0,\n\t\tmaxHeight: maxContainerSize,\n\t\talignItems: 'center',\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n\tselectTitle: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#f9f9f9',\n\t\tborderTopLeftRadius: selectorRadius,\n\t\tborderTopRightRadius: selectorRadius,\n\t\tborderBottomWidth: borderWidth,\n\t\tborderColor: '#dedede',\n\t},\n\tselectTitleText: {\n\t\tpadding: selectorPadding,\n\t\tpaddingTop: 9, paddingBottom: 9,\n\t\ttextAlign: selectionAlign,\n\t\tcolor: '#8f8f8f', backgroundColor: 'transparent',\n\t\tfontSize: 14, fontWeight: '300',\n\t},\n\toptionWrapper: {\n\t\tmargin: selectorMargin,\n\t\tmarginBottom: isAndroid ? 0 : selectorMargin / 2,\n\t\twidth: screenWidthPadding(selectorMargin, 400),\n\t},\n\toptionItemInner: {\n\t\tpadding: selectorPadding,\n\t\tpaddingTop: 12, paddingBottom: 12,\n\t},\n\toptionTails: {\n\t\theight: selectorRadius,\n\t\tbackgroundColor: '#f9f9f9',\n\t\tborderBottomLeftRadius: selectorRadius,\n\t\tborderBottomRightRadius: selectorRadius,\n\t},\n\tcommandWrapper: {\n\t\tmargin: selectorMargin,\n\t\tmarginTop: 0,\n\t\tborderRadius: selectorRadius,\n\t\tborderTopLeftRadius: isAndroid ? 0 : selectorRadius,\n\t\tborderTopRightRadius: isAndroid ? 0 : selectorRadius,\n\t\tbackgroundColor: isAndroid ? '#f9f9f9' : 'transparent',\n\t\toverflow: 'hidden',\n\t\twidth: screenWidthPadding(selectorMargin, 400),\n\t},\n\tcommandItemWrapper: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#f5f5f5',\n\t\tborderBottomWidth: borderWidth,\n\t\tborderColor: '#dedede',\n\t\tborderRadius: selectorRadius,\n\t},\n\tcommandTitle: {\n\t\tcolor: colors.iOsBlue,\n\t\tfontSize: 17,\n\t\ttextAlign: isAndroid ? 'center' : 'center',\n\t\tbackgroundColor: 'transparent',\n\t},\n});\n\n'ruui/src/components/modal.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, View, StyleSheet } from 'react-native';\n\nimport Selector from './selector';\nimport LoadingMask from './loadingMask';\nimport CloseableModal from './closeableModal';\nimport { valueAt } from '../utils';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tactive?: any,\n\ttype?: string,\n\tconfigs?: Object,\n\tmodalCount?: number,\n\tdispatch?: Function,\n\tanimationDelay?: Number,\n};\n\nexport default class RuuiModal extends Component {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactive: props.active,\n\t\t};\n\t\tthis.enterAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { active, animationDelay, } = this.props;\n\t\tsetTimeout(() => this.playTransition(active), animationDelay);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { active } = this.props;\n\t\tif (prevProps.active !== active) {\n\t\t\tthis.playTransition(active);\n\t\t}\n\t}\n\n\tplayTransition(active) {\n\t\tconst { configs = {}, } = this.props;\n\t\tconst nextValue = active ? 1 : 0;\n\n\t\tif (!active) {\n\t\t\tif (configs.instantClose) {\n\t\t\t\tthis.setState({ active: null });\n\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t} else {\n\t\t\t\tthis.playAnimation(nextValue, () => {\n\t\t\t\t\tthis.setState({ active: null });\n\t\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState({ active });\n\t\t\tthis.playAnimation(nextValue);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { configs = {}, modalCount, type: modalType } = this.props,\n\t\t\t{ active } = this.state,\n\t\t\tglobalConfigs = valueAt(this, 'context.ruuiConfigs.modal'),\n\t\t\tcontainerPropsGenerator = configs.maskProps || globalConfigs.maskProps,\n\t\t\tcontainerProps = containerPropsGenerator(this.enterAnimation, configs, modalCount, modalType);\n\n\t\tif (configs.maskProps && !containerProps.style) {\n\t\t\tcontainerProps.style = globalConfigs.maskProps(\n\t\t\t\tthis.enterAnimation, configs, modalCount, modalType\n\t\t\t).style;\n\t\t}\n\n\t\treturn active ? <Animated.View {...containerProps}>\n\t\t\t<View style={styles.innerTouchable}>\n\t\t\t\t{this.renderModalInner()}\n\t\t\t</View>\n\t\t</Animated.View> : <View/>;\n\t}\n\n\trenderModalInner() {\n\t\tconst { dispatch, type: modalType, active, configs: modalConfigs } = this.props;\n\n\t\tswitch (modalType) {\n\t\tcase 'select':\n\t\t\treturn <Selector\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleSelector(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'modal':\n\t\t\treturn <CloseableModal\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleModal(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'loading':\n\t\t\treturn <LoadingMask\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tdefault:\n\t\t\treturn <View/>;\n\t\t}\n\t}\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: false,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport function defaultMaskPropsGenerator(animation, configs, modalCount, modalType) {\n\tconst averageOpacity = (0.8 / modalCount) + (modalCount * 0.1),\n\t\tbackgroundColor = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: ['rgba(0, 0, 0, 0)', `rgba(0, 0, 0, ${averageOpacity})`],\n\t\t}),\n\t\tstyle = [styles.container, {\n\t\t\tzIndex: configs.zIndex,\n\t\t\tbackgroundColor,\n\t\t}];\n\n\treturn { style, };\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n\tinnerTouchable: {\n\t\tflex: 1,\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n});\n\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/components/modals.js'\n:import React, { Component } from 'react';\nimport { View, StyleSheet, } from 'react-native';\n\nimport Modal from './modal';\nimport RuuiDropdown from './dropdown';\nimport { connect } from '../utils';\n\ntype Props = {\n\tpreRenders?: Array<Object>,\n\tpreRenderDelay?: Number,\n\tmodals?: Array<Object>,\n\tdispatch?: Function,\n\tscreenSize?: { width?: number, height?: number },\n\tanimationDelay?: Number,\n};\n\nclass RuuiModals extends Component {\n\tprops: Props;\n\tstatic defaultProps = {\n\t\tanimationDelay: 200,\n\t\tpreRenderDelay: 300,\n\t};\n\n\tcomponentDidMount() {\n\t\tconst { dispatch, preRenders, preRenderDelay, } = this.props;\n\n\t\tif (preRenders?.length) {\n\t\t\tfor (let i = 0; i < preRenders.length; i += 1) {\n\t\t\t\tconst item = preRenders[i];\n\t\t\t\titem.flag = false;\n\t\t\t\tsetTimeout(() => dispatch(item), i * preRenderDelay);\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { dispatch, modals, screenSize, animationDelay, } = this.props,\n\t\t\tmodalArray = Object.keys(modals).map(key => Object.assign({}, modals[key], { id: key }));\n\n\t\treturn <View\n\t\t\tref={(ref) => { global.modalsContainer = ref; }}\n\t\t\tpointerEvents=\"box-none\"\n\t\t\tstyle={styles.container}>\n\t\t\t{modalArray.map((modalConfigs, i) => {\n\t\t\t\tif (modalConfigs.type === 'dropdown') {\n\t\t\t\t\treturn <RuuiDropdown\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tscreenSize={screenSize}\n\t\t\t\t\t\t{...modalConfigs}\n\t\t\t\t\t/>;\n\t\t\t\t}\n\t\t\t\treturn <Modal\n\t\t\t\t\tkey={i}\n\t\t\t\t\tmodalCount={modalArray.filter(e => e.type !== 'dropdown').length}\n\t\t\t\t\tdispatch={dispatch}\n\t\t\t\t\tanimationDelay={animationDelay}\n\t\t\t\t\t{...modalConfigs}/>;\n\t\t\t})}\n\t\t</View>;\n\t}\n}\n\nexport default connect(({ activeModals }) => {\n\treturn {\n\t\tmodals: activeModals,\n\t};\n})(RuuiModals);\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n});\n",
        "gt": [
            "'ruui/src/components/selector.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/modals.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'howtocenterincss/js/components/BrowserSupportComponent.js'",
            "'howtocenterincss/js/renderedHTML.js'",
            "'howtocenterincss/js/components/MainComponent.js'",
            "'howtocenterincss/js/HTML.js'",
            "'howtocenterincss/js/components/OptionsComponent.js'"
        ],
        "content": "'howtocenterincss/js/components/BrowserSupportComponent.js'\n:\n\nvar React = require('react');\nvar RadioComponent = require('./RadioComponent');\nvar RadioListComponent = require('./RadioListComponent');\n\nvar Options = require('../how/Options');\n\nclass BrowserSupportComponent extends React.Component {\n  constructor(props: mixed) {\n    super(props);\n    this.state = {\n      browserSupport: new Options.BrowserSupport([]),\n    };\n  }\n\n  _radioList: RadioListComponent;\n\n  state: {\n    browserSupport: Options.BrowserSupport;\n  };\n\n  getBrowserSupport(): Options.BrowserSupport {\n    return this.state.browserSupport;\n  }\n\n  setBrowserSupport(browserSupport: Options.BrowserSupport) {\n    this.setState({browserSupport});\n\n    var browserVersion = browserSupport.browserVersionsRequired[0];\n    if (browserVersion) {\n      this._radioList.select({\n        browser: browserVersion.browser,\n        version: browserVersion.minVersion,\n      });\n    }\n  }\n\n  _handleBrowserSupportChange(\n    support: { browser: Options.Browser; version: ?string; }\n  ) {\n    this.state.browserSupport.addBrowserVersionRequired(\n      new Options.BrowserVersionRequired(support.browser, support.version)\n    );\n    this.setState({browserSupport: this.state.browserSupport});\n  }\n\n  _compareBrowserSupports(\n    s1: {browser: Options.Browser; version: ?string;},\n    s2: {browser: Options.Browser; version: ?string;}\n  ): bool {\n    return s1.browser === s2.browser && s1.version === s2.version;\n  }\n\n  render(): ?ReactElement {\n    var browser = Options.Browser.IE;\n    var noSupport = {\n      browser: browser,\n      version: null,\n    };\n    return (\n      <div>\n        <h2>{browser.shortName} Support</h2>\n        <p>\n          What is the minimum version of {browser.name} you need to support?\n        </p>\n        <RadioListComponent\n          ref={(c) => this._radioList = c}\n          compareValues={this._compareBrowserSupports}\n          onChange={this._handleBrowserSupportChange.bind(this)}>\n          <RadioComponent labelText=\"None\" value={noSupport} />\n          {browser.versions.map(version => {\n             var support = { browser, version };\n             return (\n               <RadioComponent key={version} labelText={version} value={support} />\n             );\n           })}\n        </RadioListComponent>\n      </div>\n    );\n  }\n}\n\nmodule.exports = BrowserSupportComponent;\n\n'howtocenterincss/js/renderedHTML.js'\n:var fs = require('fs');\nvar mustache = require('mustache');\nvar React = require('react/addons');\nvar nodeJSX = require('node-jsx');\n\nnodeJSX.install({\n  harmony: true,\n  stripTypes: true,\n});\n\nvar html = require('./HTML');\n\nvar template = fs.readFileSync(__dirname + '/../html/index.html', 'utf8');\nvar rendered = mustache.render(template, {\n  appHTML: html,\n  scriptPostfix: process.env.NODE_ENV === 'production' ? '.min' : '',\n  googleAnalyticsID: process.env['googleAnalyticsID'],\n});\n\nconsole.log(rendered);\n\n'howtocenterincss/js/components/MainComponent.js'\n:\n\nvar React = require('react');\nvar OptionsComponent = require('./OptionsComponent');\nvar CodeComponent = require('./CodeComponent');\n\nvar Options = require('../how/Options');\nvar findMethod = require('../how/findMethod');\n\nclass MainComponent extends React.Component {\n  _options: OptionsComponent;\n  _code: CodeComponent;\n\n  _handleGenerateClick() {\n    var content = this._options.getContent();\n    var container = this._options.getContainer();\n    var horizontalAlignment = this._options.getHorizontalAlignment();\n    var verticalAlignment = this._options.getVerticalAlignment();\n    var browserSupport = this._options.getBrowserSupport();\n    var method = findMethod(\n      content,\n      container,\n      horizontalAlignment,\n      verticalAlignment,\n      browserSupport\n    );\n    if (method) {\n      var code = method.getCode(\n        content,\n        container,\n        horizontalAlignment,\n        verticalAlignment,\n        browserSupport\n      );\n      this._code.setMethod(method, code);\n    } else {\n      this._code.setNoMethod();\n    }\n\n    if (this.props.onOptionsChange) {\n      this.props.onOptionsChange(\n        content,\n        container,\n        horizontalAlignment,\n        verticalAlignment,\n        browserSupport\n      );\n    }\n  }\n\n  setOptions(\n    content: Options.Content,\n    container: Options.Container,\n    horizontalAlignment: Options.HorizontalAlignment,\n    verticalAlignment: Options.VerticalAlignment,\n    browserSupport: Options.BrowserSupport\n  ) {\n    this._options.setOptions(\n      content,\n      container,\n      horizontalAlignment,\n      verticalAlignment,\n      browserSupport\n    );\n  }\n\n  render(): ?ReactElement {\n    return (\n      <div>\n        <div className=\"col-group\">\n          <div className=\"header col-2\">\n            <h1 className=\"logo\">\n              How to <span className=\"logo-center\">Center</span> in CSS\n            </h1>\n\n            <form\n              method=\"post\"\n              action=\"http:\n              id=\"mc-embedded-subscribe-form\"\n              name=\"mc-embedded-subscribe-form\"\n              className=\"validate mailinglist\"\n              target=\"_blank\"\n              noValidate>\n              <div id=\"mc_embed_signup_scroll\">\n                <label htmlFor=\"mce-EMAIL\" className=\"label\">\n                  Get HTML & CSS Tips In Your Inbox.\n                </label>\n                <div className=\"labelDescription nospam\">No Spam.</div>\n                <input\n                  type=\"email\"\n                  name=\"EMAIL\"\n                  className=\"email text\"\n                  id=\"mce-EMAIL\"\n                  placeholder=\"email address\"\n                  required\n                />\n                <div style={{position: 'absolute', left: '-5000px'}}>\n                  <input type=\"text\" name=\"b_a044e184b387dc387feaeeb5e_4b3f6562e1\" tabIndex=\"-1\" value=\"\" />\n                </div>\n                <button\n                  type=\"submit\"\n                  name=\"subscribe\"\n                  id=\"mc-embedded-subscribe\"\n                  className=\"button\">\n                  Subscribe\n                </button>\n              </div>\n            </form>\n\n            <p className=\"socialLogos\">\n              <a href=\"http:\n                <img src=\"./twitter.svg\" className=\"socialLogo\" />\n              </a>\n              <a href=\"http:\n                <img src=\"./facebook.svg\" className=\"socialLogo\" />\n              </a>\n              <a href=\"http:\n                <img src=\"./github.svg\" className=\"socialLogo\" />\n              </a>\n            </p>\n          </div>\n          <div className=\"options col-6 col-offset-1\">\n            <h2>Wat</h2>\n            <p>\n              Centering in CSS is a pain in the ass. There seems to be a gazillion\n              ways to do it, depending on a variety of factors. This consolidates\n              them and gives you the code you need for each situation.\n            </p>\n            <p>\n              Select the type of content you want to center in a\n              parent <code>&lt;div&gt;</code> and the size of the parent.\n            </p>\n            <OptionsComponent ref={(c) => this._options = c} />\n            <p>\n              <button className=\"generate\" onClick={this._handleGenerateClick.bind(this)}>\n                Generate Code\n              </button>\n            </p>\n            <CodeComponent ref={(c) => this._code = c} />\n          </div>\n        </div>\n        <div className=\"footer col-group\">\n          <p className=\"col-12\">\n            With <em>&#10084;</em> from <a href=\"http:\n            Oliver Zheng</a>\n            <br />\n            Follow <a href=\"https:\n            useful things\n          </p>\n        </div>\n      </div>\n    );\n  }\n}\n\nMainComponent.propTypes = {\n  onOptionsChange: React.PropTypes.func,\n};\n\nmodule.exports = MainComponent;\n\n'howtocenterincss/js/HTML.js'\n:\n\nvar React = require('react/addons');\nvar MainComponent = require('./components/MainComponent');\n\nvar renderedHTML = React.renderToString(\n  <MainComponent />\n);\n\nmodule.exports = renderedHTML;\n\n'howtocenterincss/js/components/OptionsComponent.js'\n:\n\nvar invariant = require('invariant');\n\nvar React = require('react');\nvar AlignmentComponent = require('./AlignmentComponent');\nvar BrowserSupportComponent = require('./BrowserSupportComponent');\nvar ContentComponent = require('./ContentComponent');\nvar ContainerComponent = require('./ContainerComponent');\nvar RadioComponent = require('./RadioComponent');\nvar RadioListComponent = require('./RadioListComponent');\n\nvar Options = require('../how/Options');\n\nclass OptionsComponent extends React.Component {\n  _content: ContentComponent;\n  _container: ContainerComponent;\n  _alignment: AlignmentComponent;\n  _browserSupport: BrowserSupportComponent;\n\n  getContent(): Options.Content {\n    var content = this._content.getContent();\n    invariant(content, 'No content');\n    return content;\n  }\n\n  getContainer(): Options.Container {\n    var container = this._container.getContainer();\n    invariant(container, 'No container');\n    return container;\n  }\n\n  getHorizontalAlignment(): Options.HorizontalAlignment {\n    var alignment = this._alignment.getHorizontalAlignment();\n    invariant(alignment, 'No horizontal alignment');\n    return alignment;\n  }\n\n  getVerticalAlignment(): Options.VerticalAlignment {\n    var alignment = this._alignment.getVerticalAlignment();\n    invariant(alignment, 'No vertical alignment');\n    return alignment;\n  }\n\n  getBrowserSupport(): Options.BrowserSupport {\n    return this._browserSupport.getBrowserSupport();\n  }\n\n  setOptions(\n    content: Options.Content,\n    container: Options.Container,\n    horizontalAlignment: Options.HorizontalAlignment,\n    verticalAlignment: Options.VerticalAlignment,\n    browserSupport: Options.BrowserSupport\n  ) {\n    this._content.setContent(content);\n    this._container.setContainer(container);\n    this._alignment.setHorizontalAlignment(horizontalAlignment);\n    this._alignment.setVerticalAlignment(verticalAlignment);\n    this._browserSupport.setBrowserSupport(browserSupport);\n  }\n\n  render(): ?ReactElement {\n    return (\n      <div>\n        <ContentComponent ref={(c) => this._content = c} />\n        <ContainerComponent ref={(c) => this._container = c} />\n        <AlignmentComponent ref={(c) => this._alignment = c} />\n        <BrowserSupportComponent ref={(c) => this._browserSupport = c} />\n      </div>\n    );\n  }\n}\n\nmodule.exports = OptionsComponent;\n",
        "gt": [
            "'howtocenterincss/js/components/BrowserSupportComponent.js'",
            "'howtocenterincss/js/components/OptionsComponent.js'",
            "'howtocenterincss/js/components/MainComponent.js'",
            "'howtocenterincss/js/HTML.js'",
            "'howtocenterincss/js/renderedHTML.js'"
        ]
    },
    {
        "files": [
            "'modern-desktop-app-template/src/main.jsx'",
            "'modern-desktop-app-template/src/components/ScrollToTop.jsx'",
            "'modern-desktop-app-template/src/App.jsx'"
        ],
        "content": "'modern-desktop-app-template/src/main.jsx'\n:import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\n\nimport Providers from './Providers';\n\nimport './translations/i18n.js'\n\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>\n);\n\n'modern-desktop-app-template/src/components/ScrollToTop.jsx'\n:import { ActionIcon, Affix, Transition, useComputedColorScheme } from '@mantine/core';\nimport { useEffect, useState } from 'react';\nimport { IoArrowUp } from 'react-icons/io5';\n\nexport function ScrollToTop({ scroller, bottom = 10 }) {\n  const [scrollY, setScrollY] = useState();\n  const colorScheme = useComputedColorScheme();\n\n  const handleScroll = () => {\n    setScrollY(scroller.scrollTop);\n  };\n\n  useEffect(() => {\n    if (scroller !== null) {\n      scroller.addEventListener('scroll', handleScroll, { passive: true });\n      return () => {\n        scroller.removeEventListener('scroll', handleScroll);\n      };\n    }\n  }, [scroller]);\n\n  return <Affix position={{ bottom, right: 20 }}>\n    <Transition transition='slide-up' mounted={scrollY > 0}>\n      {transitionStyles =>\n        <ActionIcon style={transitionStyles} size='lg' variant={colorScheme === 'dark' ? 'light' : 'filled'}\n          onClick={() => scroller.scrollTo({ top: 0, behavior: 'smooth' })}>\n          <IoArrowUp size={25} />\n        </ActionIcon>\n      }\n    </Transition>\n  </Affix>;\n}\n\n'modern-desktop-app-template/src/App.jsx'\n:import { ActionIcon, AppShell, AppShellAside, AppShellFooter, AppShellHeader, AppShellMain, AppShellNavbar, AppShellSection, Burger, Button, Group, Space, Text, useComputedColorScheme, useMantineColorScheme } from '@mantine/core';\n\nimport { useDisclosure, useHotkeys } from '@mantine/hooks';\n\nimport { notifications } from '@mantine/notifications';\n\nimport * as tauriEvent from '@tauri-apps/api/event';\n\nimport { relaunch } from '@tauri-apps/api/process';\n\nimport { checkUpdate, installUpdate } from '@tauri-apps/api/updater';\n\nimport { appWindow } from '@tauri-apps/api/window';\n\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { BsMoonStarsFill } from 'react-icons/bs';\n\nimport { ImCross } from 'react-icons/im';\n\nimport { IoSunnySharp } from 'react-icons/io5';\n\nimport { NavLink, Navigate, Route, Routes } from 'react-router-dom';\n\nimport SimpleBar from 'simplebar-react';\n\nimport 'simplebar-react/dist/simplebar.min.css';\n\nimport classes from './App.module.css';\n\n\n\nimport { FOOTER, HEADER_TITLE, useCookie, useLocalForage } from './common/utils';\n\nimport LanguageHeaders from './components/LanguageHeaders';\n\nimport { ScrollToTop } from './components/ScrollToTop';\n\nimport { RUNNING_IN_TAURI, useTauriContext } from './tauri/TauriProvider';\n\n\n\nimport ExampleView from './views/ExampleView';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default function () {\n\n  const { t, i18n } = useTranslation();\n\n\n\n  const { usingCustomTitleBar } = useTauriContext();\n\n\n\n\n\n  const views = [\n\n\n\n\n\n\n\n\n\n\n\n    { component: ExampleView, path: '/example-view', name: t('ExampleView') },\n\n  ];\n\n\n\n  const { toggleColorScheme } = useMantineColorScheme();\n\n  const colorScheme = useComputedColorScheme();\n\n  useHotkeys([['ctrl+J', toggleColorScheme]]);\n\n\n\n\n\n  const [mobileNavOpened, { toggle: toggleMobileNav }] = useDisclosure();\n\n  const [desktopNavOpened, setDesktopNavOpened] = useCookie('desktop-nav-opened', true);\n\n  const toggleDesktopNav = () => setDesktopNavOpened(o => !o);\n\n\n\n  const [footersSeen, setFootersSeen, footersSeenLoading] = useLocalForage('footersSeen', {});\n\n\n\n  const [navbarClearance, setNavbarClearance] = useState(0);\n\n  const footerRef = useRef(null);\n\n  useEffect(() => {\n\n    if (footerRef.current) setNavbarClearance(footerRef.current.clientHeight);\n\n  }, [footersSeen]);\n\n\n\n\n\n\n\n  function startInstall(newVersion) {\n\n    notifications.show({ title: t('Installing update v{{ v }}', { v: newVersion }), message: t('Will relaunch afterwards'), autoClose: false });\n\n    installUpdate().then(relaunch);\n\n  }\n\n\n\n\n\n  if (RUNNING_IN_TAURI) {\n\n    useEffect(() => {\n\n      const promise = tauriEvent.listen('longRunningThread', ({payload}) => {\n\n        console.log(payload.message);\n\n      });\n\n      return () => promise.then(unlisten => unlisten());\n\n    }, []);\n\n\n\n    useEffect(() => {\n\n      const promise = tauriEvent.listen('systemTray', ({ payload, ...eventObj }) => {\n\n        console.log(payload.message);\n\n\n\n        notifications.show({\n\n          title: '[DEBUG] System Tray Event',\n\n          message: payload.message\n\n        });\n\n      });\n\n      return () => promise.then(unlisten => unlisten());\n\n    }, []);\n\n\n\n\n\n    useEffect(() => {\n\n      checkUpdate().then(({ shouldUpdate, manifest }) => {\n\n        if (shouldUpdate) {\n\n          const { version: newVersion, body: releaseNotes } = manifest;\n\n          const color = colorScheme === 'dark' ? 'teal' : 'teal.8';\n\n          notifications.show({\n\n            title: t('Update v{{ v }} available', { v: newVersion }),\n\n            color,\n\n            message: <>\n\n              <Text>{releaseNotes}</Text>\n\n              <Button color={color} style={{ width: '100%' }} onClick={() => startInstall(newVersion)}>{t('Install update and relaunch')}</Button>\n\n            </>,\n\n            autoClose: false\n\n          });\n\n        }\n\n      });\n\n    }, []);\n\n\n\n\n\n    useEffect(() => {\n\n      const promise = tauriEvent.listen('newInstance', async ({ payload, ...eventObj }) => {\n\n        if (!(await appWindow.isVisible())) await appWindow.show();\n\n\n\n        if (await appWindow.isMinimized()) {\n\n          await appWindow.unminimize();\n\n          await appWindow.setFocus(true);\n\n        }\n\n\n\n        let args = payload?.args;\n\n        let cwd = payload?.cwd;\n\n        if (args?.length > 1) {\n\n\n\n        }\n\n      });\n\n      return () => promise.then(unlisten => unlisten());\n\n    }, []);\n\n  }\n\n\n\n  function NavLinks() {\n\n\n\n    return views.map((view, index) =>\n\n      <NavLink align='left' to={view.path} key={index} end={view.exact} onClick={() => toggleMobileNav(false)}\n\n        className={({ isActive }) => classes.navLink + ' ' + (isActive ? classes.navLinkActive : classes.navLinkInactive)}>\n\n        {}\n\n        <Group><Text>{view.name ? view.name : view.name}</Text></Group>\n\n      </NavLink>\n\n    );\n\n  }\n\n\n\n  const showFooter = FOOTER && !footersSeenLoading && !(FOOTER in footersSeen);\n\n  const footerText = t(FOOTER);\n\n\n\n  const scrollbarRef = useRef();\n\n\n\n\n\n  useEffect(() => {\n\n    const el = document.getElementsByClassName('simplebar-vertical')[0];\n\n    if (el !== undefined) {\n\n      el.style.marginTop = usingCustomTitleBar ? '100px' : '70px';\n\n      el.style.marginBottom = showFooter ? '50px' : 0;\n\n    }\n\n  }, [usingCustomTitleBar, showFooter]);\n\n\n\n  return <>\n\n    <SimpleBar scrollableNodeProps={{ ref: scrollbarRef }} autoHide={false} className={classes.simpleBar}>\n\n      <AppShell padding='md'\n\n        header={{ height: 60 }}\n\n        footer={{ height: showFooter ? 60 : undefined }}\n\n        navbar={{ width: 200, breakpoint: 'sm', collapsed: { mobile: !mobileNavOpened, desktop: !desktopNavOpened } }}\n\n        aside={{ width: 200, breakpoint: 'sm', collapsed: { desktop: false, mobile: true } }}\n\n        className={classes.appShell}>\n\n        <AppShellMain>\n\n          {usingCustomTitleBar && <Space h='xl' />}\n\n          <Routes>\n\n            <Route exact path='/' element={<Navigate to={views[0].path} />} />\n\n            {views.map((view, index) => <Route key={index} exact={view.exact}\n\n              path={view.path} element={\n\n                <view.component />\n\n              } />)}\n\n          </Routes>\n\n          {}\n\n          <Space h={showFooter ? 80 : 50} />\n\n          <ScrollToTop scroller={scrollbarRef.current} bottom={showFooter ? 70 : 20} />\n\n        </AppShellMain>\n\n\n\n        <AppShellHeader data-tauri-drag-region p='md' className={classes.header}>\n\n          <Group h='100%'>\n\n            <Burger hiddenFrom='sm' opened={mobileNavOpened} onClick={toggleMobileNav} size='sm' />\n\n            <Burger visibleFrom='sm' opened={desktopNavOpened} onClick={toggleDesktopNav} size='sm' />\n\n            <Text>{HEADER_TITLE}</Text>\n\n          </Group>\n\n          <Group className={classes.headerRightItems} h='110%'>\n\n            <LanguageHeaders i18n={i18n} />\n\n            <ActionIcon id='toggle-theme' title='Ctrl + J' variant='default' onClick={toggleColorScheme} size={30}>\n\n              {}\n\n              {colorScheme === 'dark' ? <IoSunnySharp size={'1.5em'} /> : <BsMoonStarsFill />}\n\n            </ActionIcon>\n\n          </Group>\n\n        </AppShellHeader>\n\n\n\n        <AppShellNavbar className={classes.titleBarAdjustedHeight} height='100%' width={{ sm: 200 }} p='xs' hidden={!mobileNavOpened}>\n\n          <AppShellSection grow><NavLinks /></AppShellSection>\n\n          <AppShellSection>\n\n            {}\n\n          </AppShellSection>\n\n        </AppShellNavbar>\n\n\n\n        <AppShellAside className={classes.titleBarAdjustedHeight} p='md' width={{ sm: 200, lg: 300 }}>\n\n          <Text>Right Side. Use for help, support, quick action menu? For example, if we were building a trading app, we could use the aside for the trade parameters while leaving the main UI with the data</Text>\n\n        </AppShellAside>\n\n\n\n        {showFooter &&\n\n          <AppShellFooter p='md' className={classes.footer}>\n\n            {footerText}\n\n            <Button variant='subtle' size='xs' onClick={() => setFootersSeen(prev => ({ ...prev, [FOOTER]: '' }))}>\n\n              <ImCross />\n\n            </Button>\n\n          </AppShellFooter>\n\n        }\n\n      </AppShell>\n\n    </SimpleBar>\n\n  </>;\n\n}\n\n",
        "gt": [
            "'modern-desktop-app-template/src/components/ScrollToTop.jsx'",
            "'modern-desktop-app-template/src/App.jsx'",
            "'modern-desktop-app-template/src/main.jsx'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/common/options.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ],
        "content": "'better-onetab/src/common/options.js'\n:import _ from 'lodash'\nimport __ from '@/common/i18n'\n\nconst cate = {\n  BEHAVIOUR: 'behaviour',\n  APPEARANCE: 'appearance',\n  PERFOREMANCE: 'performance',\n}\n\nexport const optionsList = [\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'browserAction',\n    type: String,\n    default: 'show-list',\n    items: [\n      {\n        value: 'popup',\n        label: __('opt_label_popup'),\n      },\n      {\n        value: 'store-selected',\n        label: __('opt_label_store_selected'),\n      },\n      {\n        value: 'store-all',\n        label: __('opt_label_store_all'),\n      },\n      {\n        value: 'show-list',\n        label: __('opt_label_show_list'),\n      },\n      {\n        value: 'none',\n        label: __('opt_label_none'),\n      },\n    ],\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'itemClickAction',\n    type: String,\n    default: 'open-and-remove',\n    items: [\n      {\n        value: 'open-and-remove',\n        label: __('opt_label_open_and_remove'),\n      },\n      {\n        value: 'open',\n        label: __('opt_label_open'),\n      },\n      {\n        value: 'none',\n        label: __('opt_label_none'),\n      },\n    ],\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'popupItemClickAction',\n    type: String,\n    default: 'restore',\n    items: [\n      {\n        value: 'restore',\n        label: __('opt_label_restore'),\n      },\n      {\n        value: 'restore-new-window',\n        label: __('opt_label_restore_new_window'),\n      },\n      {\n        value: 'none',\n        label: __('opt_label_none'),\n      },\n    ],\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'removeItemBtnPos',\n    type: String,\n    default: 'left',\n    items: [\n      {\n        value: 'left',\n        label: __('opt_label_left'),\n      },\n      {\n        value: 'right',\n        label: __('opt_label_right'),\n      },\n    ],\n    deprecated: '1.4',\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'defaultNightMode',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'itemDisplay',\n    type: String,\n    default: 'title-and-url',\n    items: [\n      {\n        value: 'title-and-url',\n        label: __('opt_label_title_and_url'),\n      },\n      {\n        value: 'title',\n        label: __('opt_label_title'),\n      },\n      {\n        value: 'url',\n        label: __('opt_label_url'),\n      },\n    ],\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'hideFavicon',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'fixedToolbar',\n    type: Boolean,\n    default: false,\n    deprecated: '1.4',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'addHistory',\n    type: Boolean,\n    default: true,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'ignorePinned',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'pinNewList',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'pageContext',\n    type: Boolean,\n    default: true,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'allContext',\n    type: Boolean,\n    default: false,\n    deps: ({pageContext}) => pageContext,\n    new: '1.3.6',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'openTabListWhenNewTab',\n    desc: true,\n    deps: ({disableDynamicMenu}) => !disableDynamicMenu,\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'alertRemoveList',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'excludeIllegalURL',\n    type: Boolean,\n    default: true,\n    new: '1.3.6',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'removeDuplicate',\n    type: Boolean,\n    default: false,\n    new: '1.3.6',\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'enableSearch',\n    type: Boolean,\n    default: true,\n    new: '1.3.7',\n    deprecated: '1.4',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'openEnd',\n    type: Boolean,\n    default: true,\n    new: '1.3.9',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'openTabListNoTab',\n    type: Boolean,\n    default: true,\n    new: '1.4.0',\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'listsPerPage',\n    type: String,\n    default: 10,\n    items: [\n      {\n        value: 5,\n        label: 5,\n      },\n      {\n        value: 10,\n        label: 10,\n      },\n      {\n        value: 15,\n        label: 15,\n      },\n    ],\n    new: '1.4.0',\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'titleFontSize',\n    type: String,\n    default: '12px',\n    items: [\n      {\n        value: '12px',\n        label: '12px',\n      },\n      {\n        value: '18px',\n        label: '18px',\n      },\n      {\n        value: '24px',\n        label: '24px',\n      },\n    ],\n    new: '1.4.0',\n  },\n  {\n    cate: cate.PERFOREMANCE,\n    name: 'disableDynamicMenu',\n    type: Boolean,\n    default: false,\n    new: '1.4.0',\n  },\n  {\n    cate: cate.PERFOREMANCE,\n    name: 'disableExpansion',\n    type: Boolean,\n    default: false,\n    new: '1.4.0',\n  },\n  {\n    cate: cate.PERFOREMANCE,\n    name: 'disableTransition',\n    type: Boolean,\n    default: false,\n    new: '1.4.0',\n  },\n  {\n    cate: cate.PERFOREMANCE,\n    name: 'disableSearch',\n    type: Boolean,\n    default: false,\n    new: '1.4.0',\n  },\n]\n\nconst availableOptionsList = optionsList.filter(i => !i.deprecated)\n\nif (DEBUG) {\n  console.debug('current options number', availableOptionsList.length)\n  window.printOptionsMap = () => console.debug(availableOptionsList.map(i => i.name + ': ' + i.type.name + ',').join('\\n'))\n}\n\nconst _defaultOptions = _.mapValues(_.keyBy(availableOptionsList, 'name'), i => i.default)\nconst getDefaultOptions = () => _defaultOptions\n\nexport default {getDefaultOptions, optionsList: availableOptionsList}\n\n'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n\n'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n",
        "gt": [
            "'better-onetab/src/common/options.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'three.bas/src/geometry/ModelBufferGeometry.js'",
            "'three.bas/src/materials/DepthAnimationMaterial.js'",
            "'three.bas/src/Utils.js'",
            "'three.bas/src/materials/BaseAnimationMaterial.js'"
        ],
        "content": "'three.bas/src/geometry/ModelBufferGeometry.js'\n:import { BufferGeometry, BufferAttribute } from 'three';\nimport { Utils } from '../Utils';\n\nclass ModelBufferGeometry extends BufferGeometry {\n\n  constructor (model, options) {\n    super();\n\n\n    this.modelGeometry = model;\n\n\n    this.faceCount = this.modelGeometry.faces.length;\n\n\n    this.vertexCount = this.modelGeometry.vertices.length;\n\n    options = options || {};\n    options.computeCentroids && this.computeCentroids();\n\n    this.bufferIndices();\n    this.bufferPositions(options.localizeFaces);\n  }\n\n\n  computeCentroids () {\n\n    this.centroids = [];\n\n    for (let i = 0; i < this.faceCount; i++) {\n      this.centroids[i] = Utils.computeCentroid(this.modelGeometry, this.modelGeometry.faces[i]);\n    }\n  }\n\n  bufferIndices () {\n    const indexBuffer = new Uint32Array(this.faceCount * 3);\n\n    this.setIndex(new BufferAttribute(indexBuffer, 1));\n\n    for (let i = 0, offset = 0; i < this.faceCount; i++, offset += 3) {\n      const face = this.modelGeometry.faces[i];\n\n      indexBuffer[offset    ] = face.a;\n      indexBuffer[offset + 1] = face.b;\n      indexBuffer[offset + 2] = face.c;\n    }\n  }\n\n  bufferPositions (localizeFaces) {\n    const positionBuffer = this.createAttribute('position', 3).array;\n    let i, offset;\n\n    if (localizeFaces === true) {\n      for (i = 0; i < this.faceCount; i++) {\n        const face = this.modelGeometry.faces[i];\n        const centroid = this.centroids ? this.centroids[i] : Utils.computeCentroid(this.modelGeometry, face);\n\n        const a = this.modelGeometry.vertices[face.a];\n        const b = this.modelGeometry.vertices[face.b];\n        const c = this.modelGeometry.vertices[face.c];\n\n        positionBuffer[face.a * 3]     = a.x - centroid.x;\n        positionBuffer[face.a * 3 + 1] = a.y - centroid.y;\n        positionBuffer[face.a * 3 + 2] = a.z - centroid.z;\n\n        positionBuffer[face.b * 3]     = b.x - centroid.x;\n        positionBuffer[face.b * 3 + 1] = b.y - centroid.y;\n        positionBuffer[face.b * 3 + 2] = b.z - centroid.z;\n\n        positionBuffer[face.c * 3]     = c.x - centroid.x;\n        positionBuffer[face.c * 3 + 1] = c.y - centroid.y;\n        positionBuffer[face.c * 3 + 2] = c.z - centroid.z;\n      }\n    }\n    else {\n      for (i = 0, offset = 0; i < this.vertexCount; i++, offset += 3) {\n        const vertex = this.modelGeometry.vertices[i];\n\n        positionBuffer[offset    ] = vertex.x;\n        positionBuffer[offset + 1] = vertex.y;\n        positionBuffer[offset + 2] = vertex.z;\n      }\n    }\n  }\n\n\n  bufferUvs () {\n    const uvBuffer = this.createAttribute('uv', 2).array;\n\n    for (let i = 0; i < this.faceCount; i++) {\n\n      const face = this.modelGeometry.faces[i];\n      let uv;\n\n      uv = this.modelGeometry.faceVertexUvs[0][i][0];\n      uvBuffer[face.a * 2]     = uv.x;\n      uvBuffer[face.a * 2 + 1] = uv.y;\n\n      uv = this.modelGeometry.faceVertexUvs[0][i][1];\n      uvBuffer[face.b * 2]     = uv.x;\n      uvBuffer[face.b * 2 + 1] = uv.y;\n\n      uv = this.modelGeometry.faceVertexUvs[0][i][2];\n      uvBuffer[face.c * 2]     = uv.x;\n      uvBuffer[face.c * 2 + 1] = uv.y;\n    }\n  }\n\n\n  bufferSkinning () {\n    const skinIndexBuffer = this.createAttribute('skinIndex', 4).array;\n    const skinWeightBuffer = this.createAttribute('skinWeight', 4).array;\n\n    for (let i = 0; i < this.vertexCount; i++) {\n      const skinIndex = this.modelGeometry.skinIndices[i];\n      const skinWeight = this.modelGeometry.skinWeights[i];\n\n      skinIndexBuffer[i * 4    ] = skinIndex.x;\n      skinIndexBuffer[i * 4 + 1] = skinIndex.y;\n      skinIndexBuffer[i * 4 + 2] = skinIndex.z;\n      skinIndexBuffer[i * 4 + 3] = skinIndex.w;\n\n      skinWeightBuffer[i * 4    ] = skinWeight.x;\n      skinWeightBuffer[i * 4 + 1] = skinWeight.y;\n      skinWeightBuffer[i * 4 + 2] = skinWeight.z;\n      skinWeightBuffer[i * 4 + 3] = skinWeight.w;\n    }\n  }\n\n\n  createAttribute (name, itemSize, factory) {\n    const buffer = new Float32Array(this.vertexCount * itemSize);\n    const attribute = new BufferAttribute(buffer, itemSize);\n\n    this.setAttribute(name, attribute);\n\n    if (factory) {\n      const data = [];\n\n      for (let i = 0; i < this.faceCount; i++) {\n        factory(data, i, this.faceCount);\n        this.setFaceData(attribute, i, data);\n      }\n    }\n\n    return attribute;\n  }\n\n\n  setFaceData (attribute, faceIndex, data) {\n    attribute = (typeof attribute === 'string') ? this.attributes[attribute] : attribute;\n\n    let offset = faceIndex * 3 * attribute.itemSize;\n\n    for (let i = 0; i < 3; i++) {\n      for (let j = 0; j < attribute.itemSize; j++) {\n        attribute.array[offset++] = data[j];\n      }\n    }\n  }\n}\n\nexport { ModelBufferGeometry };\n\n'three.bas/src/materials/DepthAnimationMaterial.js'\n:import { ShaderLib, RGBADepthPacking } from 'three';\nimport BaseAnimationMaterial from './BaseAnimationMaterial';\n\nclass DepthAnimationMaterial extends BaseAnimationMaterial {\n  constructor (parameters) {\n    super(parameters, ShaderLib['depth'].uniforms);\n\n    this.depthPacking = RGBADepthPacking;\n    this.clipping = true;\n    this.vertexShader = this.concatVertexShader();\n    this.fragmentShader = ShaderLib['depth'].fragmentShader;\n  }\n\n  concatVertexShader () {\n    return ShaderLib.depth.vertexShader\n      .replace(\n        'void main() {',\n        `\n        ${this.stringifyChunk('vertexParameters')}\n        ${this.stringifyChunk('vertexFunctions')}\n\n        void main() {\n          ${this.stringifyChunk('vertexInit')}\n        `\n      )\n      .replace(\n        '#include <begin_vertex>',\n        `\n        #include <begin_vertex>\n\n        ${this.stringifyChunk('vertexPosition')}\n        `\n      )\n      .replace(\n        '#include <morphtarget_vertex>',\n        `\n        #include <morphtarget_vertex>\n\n        ${this.stringifyChunk('vertexPostMorph')}\n        `\n      )\n      .replace(\n        '#include <skinning_vertex>',\n        `\n        #include <skinning_vertex>\n\n        ${this.stringifyChunk('vertexPostSkinning')}\n        `\n      )\n  }\n}\n\nexport { DepthAnimationMaterial };\n\n'three.bas/src/Utils.js'\n:import { MathUtils, Vector3 } from 'three';\nimport { DepthAnimationMaterial } from './materials/DepthAnimationMaterial';\nimport { DistanceAnimationMaterial } from './materials/DistanceAnimationMaterial';\n\n\nconst Utils = {\n\n  separateFaces: function (geometry) {\n    let vertices = [];\n\n    for (let i = 0, il = geometry.faces.length; i < il; i++) {\n      let n = vertices.length;\n      let face = geometry.faces[i];\n\n      let a = face.a;\n      let b = face.b;\n      let c = face.c;\n\n      let va = geometry.vertices[a];\n      let vb = geometry.vertices[b];\n      let vc = geometry.vertices[c];\n\n      vertices.push(va.clone());\n      vertices.push(vb.clone());\n      vertices.push(vc.clone());\n\n      face.a = n;\n      face.b = n + 1;\n      face.c = n + 2;\n    }\n\n    geometry.vertices = vertices;\n  },\n\n\n  computeCentroid: function(geometry, face, v) {\n    let a = geometry.vertices[face.a];\n    let b = geometry.vertices[face.b];\n    let c = geometry.vertices[face.c];\n\n    v = v || new Vector3();\n\n    v.x = (a.x + b.x + c.x) / 3;\n    v.y = (a.y + b.y + c.y) / 3;\n    v.z = (a.z + b.z + c.z) / 3;\n\n    return v;\n  },\n\n\n  randomInBox: function(box, v) {\n    v = v || new Vector3();\n\n    v.x = MathUtils.randFloat(box.min.x, box.max.x);\n    v.y = MathUtils.randFloat(box.min.y, box.max.y);\n    v.z = MathUtils.randFloat(box.min.z, box.max.z);\n\n    return v;\n  },\n\n\n  randomAxis: function(v) {\n    v = v || new Vector3();\n\n    v.x = MathUtils.randFloatSpread(2.0);\n    v.y = MathUtils.randFloatSpread(2.0);\n    v.z = MathUtils.randFloatSpread(2.0);\n    v.normalize();\n\n    return v;\n  },\n\n\n  createDepthAnimationMaterial: function(sourceMaterial) {\n    return new DepthAnimationMaterial({\n      uniforms: sourceMaterial.uniforms,\n      defines: sourceMaterial.defines,\n      vertexFunctions: sourceMaterial.vertexFunctions,\n      vertexParameters: sourceMaterial.vertexParameters,\n      vertexInit: sourceMaterial.vertexInit,\n      vertexPosition: sourceMaterial.vertexPosition\n    });\n  },\n\n\n  createDistanceAnimationMaterial: function(sourceMaterial) {\n    return new DistanceAnimationMaterial({\n      uniforms: sourceMaterial.uniforms,\n      defines: sourceMaterial.defines,\n      vertexFunctions: sourceMaterial.vertexFunctions,\n      vertexParameters: sourceMaterial.vertexParameters,\n      vertexInit: sourceMaterial.vertexInit,\n      vertexPosition: sourceMaterial.vertexPosition\n    });\n  }\n};\n\nexport { Utils };\n\n'three.bas/src/materials/BaseAnimationMaterial.js'\n:import {\n  ShaderMaterial,\n  UniformsUtils,\n} from 'three';\n\nclass BaseAnimationMaterial extends ShaderMaterial {\n  constructor (parameters, uniforms) {\n    super();\n\n    if (parameters.uniformValues) {\n      console.warn('THREE.BAS - `uniformValues` is deprecated. Put their values directly into the parameters.')\n\n      Object.keys(parameters.uniformValues).forEach((key) => {\n        parameters[key] = parameters.uniformValues[key]\n      })\n\n      delete parameters.uniformValues\n    }\n\n\n\n    Object.keys(parameters).forEach((key) => {\n      this[key] = parameters[key]\n    })\n\n\n    this.setValues(parameters);\n\n\n    this.uniforms = UniformsUtils.merge([uniforms, parameters.uniforms || {}]);\n\n\n    this.setUniformValues(parameters);\n  }\n\n  setUniformValues (values) {\n    if (!values) return;\n\n    const keys = Object.keys(values);\n\n    keys.forEach((key) => {\n      key in this.uniforms && (this.uniforms[key].value = values[key]);\n    });\n  }\n\n  stringifyChunk (name) {\n    let value;\n\n    if (!this[name]) {\n      value = '';\n    }\n    else if (typeof this[name] ===  'string') {\n      value = this[name];\n    }\n    else {\n      value = this[name].join('\\n');\n    }\n\n    return value;\n  }\n}\n\nexport default BaseAnimationMaterial;\n",
        "gt": [
            "'three.bas/src/materials/BaseAnimationMaterial.js'",
            "'three.bas/src/materials/DepthAnimationMaterial.js'",
            "'three.bas/src/Utils.js'",
            "'three.bas/src/geometry/ModelBufferGeometry.js'"
        ]
    },
    {
        "files": [
            "'kong-dashboard/tests/cases/plugins/basic-auth.spec.js'",
            "'kong-dashboard/lib/request.js'",
            "'kong-dashboard/tests/util/KongClient.js'"
        ],
        "content": "'kong-dashboard/tests/cases/plugins/basic-auth.spec.js'\n:var HomePage = require('../../util/HomePage');\nvar Sidebar = require('../../util/Sidebar');\nvar PluginPage = require('../../util/PluginPage');\nvar ListPluginsPage = require('../../util/ListPluginsPage');\nvar KongDashboard = require('../../util/KongDashboard');\nvar Kong = require('../../util/KongClient');\nvar PropertyInput = require('../../util/PropertyInput');\nvar ObjectProperties = require('../../util/ObjectProperties');\nvar semver = require('semver');\n\nvar kd = new KongDashboard();\n\ndescribe('Basic Auth plugin testing:', () => {\n\n  var api;\n  var anonymousConsumer;\n\n  beforeAll((done) => {\n    kd.start({'--kong-url': 'http:\n      Promise.all([\n        Kong.deleteAllAPIs(),\n        Kong.deleteAllConsumers(),\n        Kong.deleteAllPlugins()\n      ]).then(() => {\n        return createAPI();\n      }).then((response) => {\n        api = response;\n        return Kong.createConsumer({'username': 'anonymous_consumer'});\n      }).then((response) => {\n        anonymousConsumer = response;\n        done();\n      });\n    });\n  });\n\n  afterAll((done) => {\n    kd.stop(done);\n  });\n\n  beforeEach((done) => {\n    Kong.deleteAllPlugins().then(done);\n  });\n\n  it('should successfully create basic auth plugin for All APIs or Services', (done) => {\n    HomePage.visit();\n    Sidebar.clickOn('Plugins');\n    ListPluginsPage.clickAddButton();\n\n    var inputs;\n    var expectedPluginParams;\n\n    if (semver.satisfies(process.env.KONG_VERSION, '0.9.x')) {\n      inputs = {\n        'name': 'basic-auth',\n        'api_id': 'All',\n        'config-hide_credentials': true\n      };\n      expectedPluginParams = {\n        'name': 'basic-auth',\n        'config': {'hide_credentials': true},\n        'enabled': true\n      };\n    } else if (semver.satisfies(process.env.KONG_VERSION, '>=0.10.0 < 0.15.0')) {\n      inputs = {\n        'name': 'basic-auth',\n        'api_id': 'All',\n        'config-hide_credentials': true,\n        'config-anonymous': anonymousConsumer.id\n      };\n      expectedPluginParams = {\n        'name': 'basic-auth',\n        'config': {'hide_credentials': true, 'anonymous': anonymousConsumer.id},\n        'enabled': true\n      };\n    } else if (semver.satisfies(process.env.KONG_VERSION, '>=0.15.0 < 2.0.0')) {\n      inputs = {\n        'name': 'basic-auth',\n        'run_on' : 'first',\n        'config-hide_credentials': true,\n        'config-anonymous': anonymousConsumer.id\n      };\n      expectedPluginParams = {\n        'name': 'basic-auth',\n        'run_on': 'first',\n        'config': {'hide_credentials': true, 'anonymous': anonymousConsumer.id},\n        'enabled': true,\n        'service': null,\n        'consumer': null,\n        'route': null\n      };\n\n      if (semver.satisfies(process.env.KONG_VERSION, '>=0.15.0 < 1.0.0')) {\n        expectedPluginParams['api'] = null;\n      }\n    } else {\n      throw new Error('Kong version not supported in unit tests.')\n    }\n\n    ObjectProperties.fillAndSubmit(inputs).then(() => {\n      expect(element(by.cssContainingText('div.toast', 'Plugin saved!')).isPresent()).toBeTruthy();\n      return Kong.getFirstPlugin();\n    }).then((createdPlugin) => {\n      delete createdPlugin['id'];\n      delete createdPlugin['created_at'];\n      expect(createdPlugin).toEqual(expectedPluginParams);\n      done();\n    });\n  });\n\n  it('should successfully create a basic-auth plugin for one API', (done) => {\n    if (semver.gte(process.env.KONG_VERSION, '0.15.0')) {\n      return done();\n    }\n\n    HomePage.visit();\n    Sidebar.clickOn('Plugins');\n    ListPluginsPage.clickAddButton();\n\n    if (semver.satisfies(process.env.KONG_VERSION, '0.9.x')) {\n      inputs = {\n        'api_id': api.name,\n        'name': 'basic-auth',\n        'config-hide_credentials': true\n      };\n      expectedPluginParams = {\n        'api_id': api.id,\n        'name': 'basic-auth',\n        'config': {'hide_credentials': true},\n        'enabled': true\n      };\n    } else if (semver.satisfies(process.env.KONG_VERSION, '>=0.10.0 < 0.15.0')) {\n      inputs = {\n        'name': 'basic-auth',\n        'api_id': api.name,\n        'config-hide_credentials': true,\n        'config-anonymous': anonymousConsumer.id\n      };\n      expectedPluginParams = {\n        'api_id': api.id,\n        'name': 'basic-auth',\n        'config': {'hide_credentials': true, 'anonymous': anonymousConsumer.id},\n        'enabled': true\n      };\n    } else {\n      throw new Error('Kong version not supported in unit tests.')\n    }\n\n    ObjectProperties.fillAndSubmit(inputs).then(() => {\n      expect(element(by.cssContainingText('div.toast', 'Plugin saved!')).isPresent()).toBeTruthy();\n      return Kong.getFirstPlugin();\n    }).then((createdPlugin) => {\n      delete createdPlugin['id'];\n      delete createdPlugin['created_at'];\n      expect(createdPlugin).toEqual(expectedPluginParams);\n      done();\n    });\n  });\n\n  it('should be possible to edit a previously created basic-auth plugin', (done) => {\n    Kong.createPlugin({\n      name: 'basic-auth',\n      config: {hide_credentials: false}\n    }).then((createdPlugin) => {\n      PluginPage.visit(createdPlugin.id);\n      var inputs = {\n        'config-hide_credentials': true\n      };\n      return ObjectProperties.fillAndSubmit(inputs);\n    }).then(() => {\n      expect(element(by.cssContainingText('div.toast', 'Plugin saved!')).isPresent()).toBeTruthy();\n      return Kong.getFirstPlugin();\n    }).then((updatedPlugin) => {\n      if (semver.satisfies(process.env.KONG_VERSION, '0.9.x')) {\n        expect(updatedPlugin.config).toEqual({'hide_credentials': true});\n      } else if (semver.satisfies(process.env.KONG_VERSION, '>=0.10.0 < 0.15.0')) {\n        expect(updatedPlugin.config).toEqual({'hide_credentials': true, 'anonymous': ''});\n      } else if (semver.gte(process.env.KONG_VERSION, '0.15.0')) {\n        expect(updatedPlugin.config).toEqual({'hide_credentials': true, 'anonymous': null});\n      } else {\n        throw new Error('Kong version not supported in unit tests.')\n      }\n      done();\n    });\n  });\n\n  it('should error when attempting to create a basic-auth plugin if an other one already exists', (done) => {\n    HomePage.visit();\n    Sidebar.clickOn('Plugins');\n    ListPluginsPage.clickAddButton();\n\n    var inputs;\n    if (semver.satisfies(process.env.KONG_VERSION, '>=0.9.0 < 0.15.0')) {\n      inputs = {\n        'name': 'basic-auth',\n        'api_id': 'All',\n        'config-hide_credentials': true\n      };\n    } else if (semver.satisfies(process.env.KONG_VERSION, '>=0.15.0 < 2.0.0')) {\n      inputs = {\n        'name': 'basic-auth',\n        'run_on' : 'first',\n        'config-hide_credentials': true\n      };\n    } else {\n      throw new Error('Kong version not supported in unit tests.')\n    }\n\n    if (semver.satisfies(process.env.KONG_VERSION, '>=0.9.0 < 0.15.0')) {\n      Kong.createPlugin({\n        name: 'basic-auth',\n        config: {hide_credentials: false}\n      });\n    } else if (semver.satisfies(process.env.KONG_VERSION, '>=0.15.0 < 2.0.0')) {\n      Kong.createPlugin({\n        name: 'basic-auth',\n        run_on: 'first',\n        config: {hide_credentials: false}\n      });\n    }\n\n    ObjectProperties.fillAndSubmit(inputs).then(() => {\n      if (semver.satisfies(process.env.KONG_VERSION, '0.9.x')) {\n\n        expect(element(by.cssContainingText('div.toast', 'Oops, something wrong happened. Please refresh the page.')).isPresent()).toBeTruthy();\n      } else {\n        expect(PropertyInput.isInvalid('name')).toBeTruthy();\n      }\n      done();\n    });\n  });\n\n  function createAPI() {\n    if (semver.satisfies(process.env.KONG_VERSION, '0.9.x')) {\n      return Kong.createAPI({\n        'name': 'my_api',\n        'request_path': '/my_api',\n        'upstream_url': 'http:\n      });\n    }\n    else if (semver.satisfies(process.env.KONG_VERSION, '>=0.10.0 < 0.15.0')) {\n      return Kong.createAPI({\n        name: 'my_api',\n        hosts: ['host1.com', 'host2.com'],\n        uris: ['/1.0', '/2.0'],\n        methods: ['GET', 'POST'],\n        upstream_url: 'http:\n      });\n    }\n    else if (semver.gte(process.env.KONG_VERSION, '0.15.0')) {\n      return Promise.resolve(0);\n    }\n\n    throw new Error('Kong version not supported in unit tests.')\n  }\n});\n\n'kong-dashboard/lib/request.js'\n:var request = require('request');\n\nvar Request = {\n\n  send: function(opts) {\n    return new Promise((resolve, reject) => {\n      request(opts, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(response);\n        }\n      })\n    })\n  },\n\n  get: function(url, opts) {\n    opts = opts || {};\n    opts.method = 'GET';\n    opts.url = url;\n    return this.send(opts);\n  },\n\n  delete: function(url, opts) {\n    opts = opts || {};\n    opts.method = 'DELETE';\n    opts.url = url;\n    return this.send(opts);\n  },\n\n  put: function(url, data, opts) {\n    opts = opts || {};\n    opts.method = 'PUT';\n    opts.url = url;\n    opts.json = true;\n    opts.body = data;\n    return this.send(opts);\n  },\n\n  post: function(url, data, opts) {\n    opts = opts || {};\n    opts.method = 'POST';\n    opts.url = url;\n    opts.json = true;\n    opts.body = data;\n    return this.send(opts);\n  }\n\n};\n\nmodule.exports = Request;\n\n\n'kong-dashboard/tests/util/KongClient.js'\n:var request = require('../../lib/request');\nvar semver = require('semver');\n\nvar Kong = {\n\n\n  deleteAllServices: function() {\n    if (semver.lt(process.env.KONG_VERSION, '0.13.0')) {\n      return Promise.resolve(0);\n    }\n\n    return this.deleteAllRoutes().then(() => {\n      return this.deleteAllObjectsOfType('services');\n    });\n  },\n\n\n  deleteAllRoutes: function() {\n    if (semver.lt(process.env.KONG_VERSION, '0.13.0')) {\n      return Promise.resolve(0);\n    }\n    return this.deleteAllObjectsOfType('routes');\n  },\n\n\n  deleteAllAPIs: function() {\n    if (semver.gte(process.env.KONG_VERSION, '0.15.0')) {\n      return Promise.resolve(0);\n    }\n    return this.deleteAllObjectsOfType('apis');\n  },\n\n\n  deleteAllPlugins: function() {\n    return this.deleteAllObjectsOfType('plugins');\n  },\n\n\n  deleteAllConsumers: function() {\n    return this.deleteAllObjectsOfType('consumers');\n  },\n\n\n  deleteAllCertificates: function() {\n    return this.deleteAllObjectsOfType('certificates');\n  },\n\n\n  deleteAllUpstreams: function() {\n    return this.deleteAllObjectsOfType('upstreams');\n  },\n\n\n  deleteAllObjectsOfType: function(objectType) {\n    return request.get('http:\n      var body = JSON.parse(response.body);\n      var promise = new Promise((resolve, reject) => {\n        resolve();\n      });\n      body.data.forEach((object) => {\n        promise = promise.then(() => {\n          return request.delete('http:\n        });\n      });\n\n      if (body.total > body.data.length) {\n        promise = promise.then(() => {\n          return this.deleteAllObjectsOfType(objectType);\n        });\n      }\n\n      return promise;\n    });\n  },\n\n\n  getFirstService: () => {\n    return request.get('http:\n      var services = JSON.parse(response.body).data;\n      return services.length > 0 ? services[0] : null;\n    });\n  },\n\n\n  getFirstAPI: () => {\n    return request.get('http:\n      var apis = JSON.parse(response.body).data;\n      return apis.length > 0 ? apis[0] : null;\n    });\n  },\n\n\n  getFirstCertificate: () => {\n    return request.get('http:\n      var certificates = JSON.parse(response.body).data;\n      return certificates.length > 0 ? certificates[0] : null;\n    });\n  },\n\n\n  getFirstPlugin: () => {\n    return request.get('http:\n      var plugins = JSON.parse(response.body).data;\n      return plugins.length > 0 ? plugins[0] : null;\n    });\n  },\n\n\n  getPluginById: (id) => {\n    return request.get('http:\n      return JSON.parse(response.body);\n    });\n  },\n\n\n  getServiceById: (id) => {\n    return request.get('http:\n      return JSON.parse(response.body);\n    });\n  },\n\n\n  getUpstreamById: (id) => {\n    return request.get('http:\n      return JSON.parse(response.body);\n    });\n  },\n\n\n  createPlugin: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createConsumer: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createService: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createRoute: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createAPI: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createBasicAuthCreds: (consumer, username, password) => {\n     return request.post('http:\n       username: username,\n       password: password\n     }).then((response) => {\n      return response.body;\n    });\n  },\n\n\n  createKeyAuthCreds: (consumer, key) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createUpstream: (name) => {\n    return request.post('http:\n      return response.body;\n    });\n  }\n};\n\nmodule.exports = Kong;\n",
        "gt": [
            "'kong-dashboard/lib/request.js'",
            "'kong-dashboard/tests/util/KongClient.js'",
            "'kong-dashboard/tests/cases/plugins/basic-auth.spec.js'"
        ]
    },
    {
        "files": [
            "'neode/src/Collection.js'",
            "'neode/test/__instance.js'",
            "'neode/src/index.js'"
        ],
        "content": "'neode/src/Collection.js'\n:export default class Collection {\n\n\n    constructor(neode, values) {\n        this._neode = neode;\n        this._values = values || [];\n    }\n\n\n    get length() {\n        return this._values.length;\n    }\n\n\n    [Symbol.iterator]() {\n        return this._values.values();\n    }\n\n\n\n    get(index) {\n        return this._values[index];\n    }\n\n\n    first() {\n        return this._values[0];\n    }\n\n\n    map(fn) {\n        return this._values.map(fn);\n    }\n\n\n    find(fn) {\n        return this._values.find(fn);\n    }\n\n\n    forEach(fn) {\n        return this._values.forEach(fn);\n    }\n\n\n    toJson() {\n        return Promise.all(this._values.map(value => {\n            return value.toJson();\n        }));\n    }\n\n}\n\n'neode/test/__instance.js'\n:import Neode from '../src/index';\n\nfunction createInstance() {\n    return Neode.fromEnv();\n}\n\nmodule.exports = createInstance;\n\n\n\n'neode/src/index.js'\n:import fs from 'fs';\nimport path from 'path';\nimport neo4j from 'neo4j-driver';\nimport Factory from './Factory';\nimport Model from './Model';\nimport ModelMap from './ModelMap';\nimport Schema from './Schema';\nimport TransactionError from './TransactionError';\nimport Builder from './Query/Builder';\nimport Collection from './Collection';\n\nexport default class Neode {\n\n\n    constructor(connection_string, username, password, enterprise = false, database = undefined, config = {}) {\n        const auth = username && password ? neo4j.auth.basic(username, password) : null;\n        this.driver = new neo4j.driver(connection_string, auth, config);\n        this.models = new ModelMap(this);\n        this.schema = new Schema(this);\n        this.factory = new Factory(this);\n\n        this.database = database;\n\n        this.setEnterprise(enterprise);\n    }\n\n\n    static fromEnv() {\n        require('dotenv').config();\n\n        const connection_string = `${process.env.NEO4J_PROTOCOL}:\n        const username = process.env.NEO4J_USERNAME;\n        const password = process.env.NEO4J_PASSWORD;\n        const enterprise = process.env.NEO4J_ENTERPRISE === 'true';\n\n\n        const database = process.env.NEO4J_DATABASE || 'neo4j';\n\n\n        const config = {};\n\n        const settings = {\n            NEO4J_ENCRYPTION: 'encrypted',\n            NEO4J_TRUST: 'trust',\n            NEO4J_TRUSTED_CERTIFICATES: 'trustedCertificates',\n            NEO4J_KNOWN_HOSTS: 'knownHosts',\n\n            NEO4J_MAX_CONNECTION_POOLSIZE: 'maxConnectionPoolSize',\n            NEO4J_MAX_TRANSACTION_RETRY_TIME: 'maxTransactionRetryTime',\n            NEO4J_LOAD_BALANCING_STRATEGY: 'loadBalancingStrategy',\n            NEO4J_MAX_CONNECTION_LIFETIME: 'maxConnectionLifetime',\n            NEO4J_CONNECTION_TIMEOUT: 'connectionTimeout',\n            NEO4J_DISABLE_LOSSLESS_INTEGERS: 'disableLosslessIntegers',\n            NEO4J_LOGGING_LEVEL: 'logging',\n        };\n\n        Object.keys(settings).forEach(setting => {\n            if ( process.env.hasOwnProperty(setting) ) {\n                const key = settings[ setting ];\n                let value = process.env[ setting ];\n\n                if ( key == \"trustedCertificates\" ) {\n                    value = value.split(',');\n                }\n                else if ( key == \"disableLosslessIntegers\" ) {\n                    value = value === 'true';\n                }\n\n                config[ key ] = value;\n            }\n        });\n\n        return new Neode(connection_string, username, password, enterprise, database, config);\n    }\n\n\n    with(models) {\n        Object.keys(models).forEach(model => {\n            this.model(model, models[ model ]);\n        });\n\n        return this;\n    }\n\n\n    withDirectory(directory) {\n        const files = fs.readdirSync(directory);\n\n        files.filter(file => path.extname(file).toLowerCase() === '.js')\n            .forEach(file => {\n                const model = file.replace('.js', '');\n                const path = directory +'/'+ file;\n                const schema = require(\"\" + path);\n\n                return this.model(model, schema);\n            });\n\n        return this;\n    }\n\n\n    setDatabase(database) {\n        this.database = database;\n    }\n\n\n    setEnterprise(enterprise) {\n        this._enterprise = enterprise;\n    }\n\n\n    enterprise() {\n        return this._enterprise;\n    }\n\n\n    model(name, schema) {\n        if ( schema instanceof Object) {\n            const model = new Model(this, name, schema);\n            this.models.set(name, model);\n        }\n\n        if ( !this.models.has(name) ) {\n            const defined = this.models.keys();\n\n            let message = `Couldn't find a definition for \"${name}\".`;\n\n            if ( defined.length == 0 ) {\n                message += ' It looks like no models have been defined.';\n            }\n            else {\n                message += ` The models currently defined are [${ defined.join(', ') }]`;\n            }\n\n            throw new Error(message);\n        }\n\n        return this.models.get(name);\n    }\n\n\n    extend(model, as, using) {\n        return this.models.extend(model, as, using);\n    }\n\n\n    create(model, properties) {\n        return this.models.get(model).create(properties);\n    }\n\n\n    merge(model, properties) {\n        return this.model(model).merge(properties);\n    }\n\n\n    mergeOn(model, match, set) {\n        return this.model(model).mergeOn(match, set);\n    }\n\n\n    delete(node) {\n        return node.delete();\n    }\n\n\n    deleteAll(model) {\n        return this.models.get(model).deleteAll();\n    }\n\n\n    relate(from, to, type, properties, force_create = false) {\n        return from.relateTo(to, type, properties, force_create);\n    }\n\n\n    readCypher(query, params) {\n        const session = this.readSession();\n\n        return this.cypher(query, params, session);\n    }\n\n\n    writeCypher(query, params) {\n        const session = this.writeSession();\n\n        return this.cypher(query, params, session);\n    }\n\n\n    cypher(query, params, session = false) {\n\n        const single = !session;\n        if ( single ) {\n            session = this.session();\n        }\n\n        return session.run(query, params)\n            .then(res => {\n                if ( single ) {\n                    session.close();\n                }\n\n                return res;\n            })\n            .catch(err => {\n                if ( single ) {\n                    session.close();\n                }\n\n                err.query = query;\n                err.params = params;\n\n                throw err;\n            });\n    }\n\n\n    session(database = this.database) {\n        return this.readSession(database);\n    }\n\n\n    readSession(database = this.database) {\n        return this.driver.session({\n            database,\n            defaultAccessMode: neo4j.session.READ,\n        });\n    }\n\n\n    writeSession(database = this.database) {\n        return this.driver.session({\n            database,\n            defaultAccessMode: neo4j.session.WRITE,\n        });\n    }\n\n\n    transaction(mode = neo4j.WRITE, database = this.database) {\n        const session = this.driver.session(database);\n        const tx = session.beginTransaction(mode);\n\n\n\n        tx.success = () => {\n            return tx.commit()\n                .then(() => {\n                    session.close();\n                });\n        };\n\n        return tx;\n    }\n\n\n    batch(queries) {\n        const tx = this.transaction();\n        const output = [];\n        const errors = [];\n\n        return Promise.all(queries.map(query => {\n            const params = typeof query == 'object' ? query.params : {};\n            query = typeof query == 'object' ? query.query : query;\n\n            try {\n                return tx.run(query, params)\n                    .then(res => {\n                        output.push(res);\n                    })\n                    .catch(error => {\n                        errors.push({query, params, error});\n                    });\n            }\n            catch (error) {\n                errors.push({query, params, error});\n            }\n        }))\n            .then(() => {\n                if (errors.length) {\n                    tx.rollback();\n\n                    const error = new TransactionError(errors);\n\n                    throw error;\n                }\n\n                return tx.success()\n                    .then(() => {\n                        return output;\n                    });\n            });\n    }\n\n\n    close() {\n        this.driver.close();\n    }\n\n\n    query() {\n        return new Builder(this);\n    }\n\n\n    all(label, properties, order, limit, skip) {\n        return this.models.get(label).all(properties, order, limit, skip);\n    }\n\n\n    find(label, id) {\n        return this.models.get(label).find(id);\n    }\n\n\n    findById(label, id) {\n        return this.models.get(label).findById(id);\n    }\n\n\n    first(label, key, value) {\n        return this.models.get(label).first(key, value);\n    }\n\n\n    hydrate(res, alias, definition) {\n        return this.factory.hydrate(res, alias, definition);\n    }\n\n\n    hydrateFirst(res, alias, definition) {\n        return this.factory.hydrateFirst(res, alias, definition);\n    }\n\n\n    toCollection(array) {\n        return new Collection(this, array);\n    }\n\n}\n\nmodule.exports = Neode;\n",
        "gt": [
            "'neode/src/Collection.js'",
            "'neode/src/index.js'",
            "'neode/test/__instance.js'"
        ]
    },
    {
        "files": [
            "'neode/src/Services/MergeOn.js'",
            "'neode/src/Queryable.js'",
            "'neode/src/Node.js'",
            "'neode/src/Model.js'",
            "'neode/test/RelationshipType.spec.js'",
            "'neode/src/Services/RelateTo.js'"
        ],
        "content": "'neode/src/Services/MergeOn.js'\n:\nimport GenerateDefaultValues from './GenerateDefaultValues';\nimport Validator from './Validator';\nimport Builder, { mode, } from '../Query/Builder';\nimport { eagerNode, } from '../Query/EagerUtils';\nimport { addNodeToStatement, ORIGINAL_ALIAS } from './WriteUtils';\n\n\nexport default function MergeOn(neode, model, merge_on, properties) {\n    return GenerateDefaultValues(neode, model, properties)\n        .then(properties => Validator(neode, model, properties))\n        .then(properties => {\n            const alias = ORIGINAL_ALIAS;\n\n            const builder = new Builder(neode);\n\n            addNodeToStatement(neode, builder, alias, model, properties, [ alias ], 'merge', merge_on);\n\n\n            const output = eagerNode(neode, 1, alias, model);\n\n            return builder.return(output)\n                .execute(mode.WRITE)\n                .then(res => neode.hydrateFirst(res, alias));\n        });\n}\n'neode/src/Queryable.js'\n:import Builder from './Query/Builder';\nimport Create from './Services/Create';\nimport DeleteAll from './Services/DeleteAll';\nimport FindAll from './Services/FindAll';\nimport FindById from './Services/FindById';\nimport FindWithinDistance from './Services/FindWithinDistance';\nimport First from './Services/First';\nimport MergeOn from './Services/MergeOn';\n\nexport default class Queryable {\n\n\n    constructor(neode) {\n        this._neode = neode;\n    }\n\n\n    query() {\n        return new Builder(this._neode);\n    }\n\n\n    create(properties) {\n        return Create(this._neode, this, properties);\n    }\n\n\n    merge(properties) {\n        const merge_on = this.mergeFields();\n\n        return MergeOn(this._neode, this, merge_on, properties);\n    }\n\n\n    mergeOn(match, set) {\n        const merge_on = Object.keys(match);\n        const properties = Object.assign({}, match, set);\n\n        return MergeOn(this._neode, this, merge_on, properties);\n    }\n\n\n    deleteAll() {\n        return DeleteAll(this._neode, this);\n    }\n\n\n    all(properties, order, limit, skip) {\n        return FindAll(this._neode, this, properties, order, limit, skip);\n    }\n\n\n    find(id) {\n        const primary_key = this.primaryKey();\n\n        return this.first(primary_key, id);\n    }\n\n\n    findById(id) {\n        return FindById(this._neode, this, id);\n    }\n\n\n    first(key, value) {\n        return First(this._neode, this, key, value);\n    }\n\n\n    withinDistance(location_property, point, distance, properties, order, limit, skip) {\n        return FindWithinDistance(this._neode, this, location_property, point, distance, properties, order, limit, skip);\n    }\n\n}\n'neode/src/Node.js'\n:import neo4j from 'neo4j-driver';\nimport Entity from './Entity';\nimport UpdateNode from './Services/UpdateNode';\nimport DeleteNode from './Services/DeleteNode';\nimport RelateTo from './Services/RelateTo';\nimport DetachFrom from './Services/DetachFrom';\nimport RelationshipType from './RelationshipType';\n\n\nexport default class Node extends Entity {\n\n\n    constructor(neode, model, identity, labels, properties, eager) {\n        super();\n\n        this._neode = neode;\n        this._model = model;\n        this._identity = identity;\n        this._labels = labels;\n        this._properties = properties || new Map;\n\n        this._eager = eager || new Map;\n\n        this._deleted = false;\n    }\n\n\n    model() {\n        return this._model;\n    }\n\n\n    labels() {\n        return this._labels;\n    }\n\n\n    setEager(key, value) {\n        this._eager.set(key, value);\n\n        return this;\n    }\n\n\n    delete(to_depth) {\n        return DeleteNode(this._neode, this._identity, this._model, to_depth)\n            .then(() => {\n                this._deleted = true;\n\n                return this;\n            });\n    }\n\n\n    relateTo(node, type, properties = {}, force_create = false) {\n        const relationship = this._model.relationships().get(type);\n\n        if ( !(relationship instanceof RelationshipType) ) {\n            return Promise.reject( new Error(`Cannot find relationship with type ${type}`) );\n        }\n\n        return RelateTo(this._neode, this, node, relationship, properties, force_create)\n            .then(rel => {\n                this._eager.delete(type);\n\n                return rel;\n            });\n    }\n\n\n    detachFrom(other) {\n        if (!(other instanceof Node)) {\n            return Promise.reject(new Error(`Cannot find node with type ${other}`));\n        }\n\n        return DetachFrom(this._neode, this, other);\n    }\n\n\n    toJson() {\n        const output = {\n            _id: this.id(),\n            _labels: this.labels(),\n        };\n\n\n        this._model.properties().forEach((property, key) => {\n            if ( property.hidden() ) {\n                return;\n            }\n\n            if ( this._properties.has(key) ) {\n                output[ key ] = this.valueToJson(property, this._properties.get( key ));\n            }\n            else if (neo4j.temporal.isDateTime(output[key])) {\n                output[key] = new Date(output[key].toString());\n            }\n            else if (neo4j.spatial.isPoint(output[key])) {\n                switch (output[key].srid.toString()) {\n\n                    case '4326':\n                        output[key] = {longitude: output[key].x, latitude: output[key].y};\n                        break;\n\n                    case '4979':\n                        output[key] = {longitude: output[key].x, latitude: output[key].y, height: output[key].z};\n                        break;\n\n                    case '7203':\n                        output[key] = {x: output[key].x, y: output[key].y};\n                        break;\n\n                    case '9157':\n                        output[key] = {x: output[key].x, y: output[key].y, z: output[key].z};\n                        break;\n                }\n            }\n        });\n\n\n        return Promise.all( this._model.eager().map((rel) => {\n            const key = rel.name();\n\n            if ( this._eager.has( rel.name() ) ) {\n\n                return this._eager.get( rel.name() ).toJson()\n                    .then(value => {\n                        return { key, value };\n                    });\n            }\n        }) )\n\n            .then(eager => eager.filter( e => !!e ))\n\n\n            .then(eager => {\n                eager.forEach(({ key, value }) => output[ key ] = value);\n\n                return output;\n            });\n    }\n\n\n    update(properties) {\n\n\n\n        this._model.properties().forEach(property => {\n            const name = property.name();\n\n            if ( property.required() && !properties.hasOwnProperty(name) ) {\n                properties[ name ] = this._properties.get( name );\n            }\n        });\n\n        return UpdateNode(this._neode, this._model, this._identity, properties)\n            .then(properties => {\n                properties.map(({ key, value }) => {\n                    this._properties.set(key, value)\n                })\n            })\n            .then(() => {\n                return this;\n            });\n    }\n\n}\n'neode/src/Model.js'\n:import Queryable from './Queryable';\n\nimport RelationshipType, {DIRECTION_BOTH} from './RelationshipType';\nimport Property from './Property';\n\nconst RELATIONSHIP_TYPES = [ 'relationship', 'relationships', 'node', 'nodes' ];\n\nexport default class Model extends Queryable {\n    constructor(neode, name, schema) {\n        super(neode);\n\n        this._name = name;\n        this._schema = schema;\n\n        this._properties = new Map;\n        this._relationships = new Map;\n        this._labels = [ name ];\n\n\n        this._primary_key = name.toLowerCase() + '_id';\n\n        this._unique = [];\n        this._indexed = [];\n        this._hidden = [];\n        this._readonly = [];\n\n\n        for (let key in schema) {\n            const value = schema[ key ];\n\n            switch ( key ) {\n                case 'labels':\n                    this.setLabels(...value);\n                    break;\n\n                default:\n                    if ( value.type &&  RELATIONSHIP_TYPES.indexOf(value.type) > -1 ) {\n                        const { relationship, direction, target, properties, eager, cascade, alias } = value;\n\n                        this.relationship(key, value.type, relationship, direction, target, properties, eager, cascade, alias);\n                    }\n                    else {\n                        this.addProperty(key, value);\n                    }\n                    break;\n            }\n        }\n    }\n\n\n    name() {\n        return this._name;\n    }\n\n\n    schema() {\n        return this._schema;\n    }\n\n\n    properties() {\n        return this._properties;\n    }\n\n\n    setLabels(...labels) {\n        this._labels = labels.sort();\n\n        return this;\n    }\n\n\n    labels() {\n        return this._labels;\n    }\n\n\n    addProperty(key, schema) {\n        const property = new Property(key, schema);\n\n        this._properties.set(key, property);\n\n\n        if ( property.primary() ) {\n            this._primary_key = key;\n        }\n\n\n        if ( property.unique() || property.primary() ) {\n            this._unique.push(key);\n        }\n\n\n        if ( property.indexed() ) {\n            this._indexed.push(key);\n        }\n\n\n        if ( property.hidden() ) {\n            this._hidden.push(key);\n        }\n\n\n        if ( property.readonly() ) {\n            this._readonly.push(key);\n        }\n\n        return this;\n    }\n\n\n    relationship(name, type, relationship, direction = DIRECTION_BOTH, target, schema = {}, eager = false, cascade = false, node_alias = 'node') {\n        if (relationship && direction && schema) {\n            this._relationships.set(name, new RelationshipType(name, type, relationship, direction, target, schema, eager, cascade, node_alias));\n        }\n\n        return this._relationships.get(name);\n    }\n\n\n    relationships() {\n        return this._relationships;\n    }\n\n\n    eager() {\n        return Array.from(this._relationships).map(([key, value]) => {\n            return value._eager ? value : null;\n        }).filter(a => !!a);\n    }\n\n\n    primaryKey() {\n        return this._primary_key;\n    }\n\n\n    hidden() {\n        return this._hidden;\n    }\n\n\n    indexes() {\n        return this._indexed;\n    }\n\n\n    mergeFields() {\n        return this._unique.concat(this._indexed);\n    }\n}\n'neode/test/RelationshipType.spec.js'\n:import RelationshipType, { DIRECTION_IN, DIRECTION_OUT } from '../src/RelationshipType';\nimport Property from '../src/Property';\nimport Model from '../src/Model';\nimport {assert, expect} from 'chai';\n\ndescribe('RelationshipType.js', () => {\n    let instance;\n    let model;\n\n\n    it('should construct', () => {\n        const name = 'test';\n        const type = 'relationships';\n        const rel = 'TEST_RELATIONSHIP';\n        const direction = 'in';\n        const target = new Model(null, 'name', {});\n        const schema = {\n            name: 'string',\n        };\n        const eager = true;\n        const cascade = 'delete';\n        const node_alias = 'alias';\n\n        const relationship = new RelationshipType(name, type, rel, direction, target, schema, eager, cascade, node_alias);\n\n        expect(relationship.name()).to.equal(name);\n        expect(relationship.type()).to.equal(type);\n        expect(relationship.relationship()).to.equal(rel);\n        expect(relationship.direction()).to.equal(DIRECTION_IN);\n        expect(relationship.target()).to.equal(target);\n        expect(relationship.schema()).to.equal(schema);\n        expect(relationship.eager()).to.equal(eager);\n        expect(relationship.cascade()).to.equal(cascade);\n        expect(relationship.nodeAlias()).to.equal(node_alias);\n\n        const props = relationship.properties();\n\n        expect(props).to.be.an.instanceOf(Map);\n        expect(props.has('name')).to.equal(true);\n        expect(props.get('name')).to.be.an.instanceOf(Property);\n\n        expect(props.get('name').type()).to.equal('string');\n\n        relationship.setDirection('nonesense');\n\n        expect(relationship.direction()).to.equal(DIRECTION_OUT);\n\n    });\n\n});\n'neode/src/Services/RelateTo.js'\n:import {\n    DIRECTION_IN,\n    DIRECTION_OUT\n} from '../RelationshipType';\nimport Relationship from '../Relationship';\n\nimport GenerateDefaultValues from './GenerateDefaultValues';\nimport Validator from './Validator';\n\nexport default function RelateTo(neode, from, to, relationship, properties, force_create = false) {\n    return GenerateDefaultValues(neode, relationship, properties)\n        .then(properties => Validator(neode, relationship.schema(), properties))\n        .then(properties => {\n            const direction_in = relationship.direction() == DIRECTION_IN ? '<' : '';\n            const direction_out = relationship.direction() == DIRECTION_OUT ? '>' : '';\n            const type = relationship.relationship();\n\n            let params = {\n                from_id: from.identity(),\n                to_id: to.identity(),\n            };\n            let set = '';\n\n            if ( Object.keys(properties).length ) {\n                set += 'SET ';\n                set += Object.keys(properties).map(key => {\n                    params[`set_${key}`] = properties[ key ];\n                    return `rel.${key} = $set_${key}`;\n                }).join(', ');\n            }\n\n            const mode = force_create ? 'CREATE' : 'MERGE';\n\n            const query = `\n                MATCH (from), (to)\n                WHERE id(from) = $from_id\n                AND id(to) = $to_id\n                ${mode} (from)${direction_in}-[rel:${type}]-${direction_out}(to)\n                ${set}\n                RETURN rel\n            `;\n\n            return neode.writeCypher(query, params)\n                .then(res => {\n                    const rel = res.records[0].get('rel');\n                    const hydrate_from = relationship.direction() == DIRECTION_IN ? to : from;\n                    const hydrate_to = relationship.direction() == DIRECTION_IN ? from : to;\n\n                    const properties = new Map;\n\n                    Object.keys(rel.properties).forEach(key => {\n                        properties.set( key, rel.properties[ key ] );\n                    });\n\n                    return new Relationship(neode, relationship, rel.identity, rel.type, properties, hydrate_from, hydrate_to);\n                });\n        });\n}",
        "gt": [
            "'neode/src/Services/RelateTo.js'",
            "'neode/src/Node.js'",
            "'neode/src/Services/MergeOn.js'",
            "'neode/src/Queryable.js'",
            "'neode/src/Model.js'",
            "'neode/test/RelationshipType.spec.js'"
        ]
    },
    {
        "files": [
            "'cypress-plugin-snapshots/src/config.js'",
            "'cypress-plugin-snapshots/__tests__/plugin.test.js'",
            "'cypress-plugin-snapshots/plugin.js'",
            "'cypress-plugin-snapshots/src/utils/tasks/imageSnapshots.js'",
            "'cypress-plugin-snapshots/src/server/initServer.js'"
        ],
        "content": "'cypress-plugin-snapshots/src/config.js'\n:const randtoken = require('rand-token');\nconst { merge, cloneDeep, clone } = require('lodash');\nconst { TYPE_JSON } = require('./dataTypes');\n\nfunction createToken() {\n  return randtoken.generate(128);\n}\n\nconst DEFAULT_SCREENSHOT_CONFIG = Object.freeze({\n  blackout: [],\n  capture: 'fullPage',\n  clip: null,\n  padding: null,\n  disableTimersAndAnimations: true,\n  log: false,\n  scale: false,\n  timeout: 30000,\n});\n\nconst DEFAULT_IMAGE_CONFIG = Object.freeze({\n  createDiffImage: true,\n  resizeDevicePixelRatio: true,\n  threshold: 0.1,\n  thresholdType: 'percent',\n});\n\nconst DEFAULT_CONFIG = Object.freeze({\n  autoCleanUp: false,\n  autopassNewSnapshots: true,\n  diffLines: 3,\n  excludeFields: [],\n  formatJson: true,\n  ignoreExtraArrayItems: false,\n  ignoreExtraFields: false,\n  imageConfig: clone(DEFAULT_IMAGE_CONFIG),\n  normalizeJson: true,\n  prettier: true,\n  prettierConfig: {\n    html: {\n      parser: 'html',\n      tabWidth: 2,\n      endOfLine: 'lf'\n    },\n  },\n  screenshotConfig: clone(DEFAULT_SCREENSHOT_CONFIG),\n  serverEnabled: true,\n  serverHost: 'localhost',\n  serverPort: 2121,\n  token: createToken(),\n  updateSnapshots: false,\n  backgroundBlend: 'difference',\n  name: '',\n});\n\nconst CONFIG_KEY = 'cypress-plugin-snapshots';\n\nlet config = cloneDeep(DEFAULT_CONFIG);\n\nfunction initConfig(initialConfig) {\n  if (initialConfig) {\n    config = merge(config, initialConfig);\n  }\n  return config;\n}\n\nfunction getConfig() {\n  return config;\n}\n\nfunction getImageConfig(options = {}) {\n  return Object.keys(DEFAULT_IMAGE_CONFIG)\n    .filter((key) => options.imageConfig && options.imageConfig[key] !== undefined)\n    .reduce(\n      (imageConfig, key) => {\n        imageConfig[key] = options.imageConfig[key];\n        return imageConfig;\n      },\n      merge({}, DEFAULT_IMAGE_CONFIG, getConfig().imageConfig)\n    );\n}\n\n\nfunction getScreenshotConfig(options = {}) {\n  const screenshotConfig = Object.keys(DEFAULT_SCREENSHOT_CONFIG)\n    .filter((key) => options.screenshotConfig && options.screenshotConfig[key] !== undefined)\n    .reduce(\n      (currentConfig, key) => {\n        currentConfig[key] = options.screenshotConfig[key];\n        return currentConfig;\n      },\n      merge({}, DEFAULT_SCREENSHOT_CONFIG, getConfig().screenshotConfig)\n    );\n\n  screenshotConfig.blackout = (screenshotConfig.blackout || []);\n  screenshotConfig.blackout.push('.snapshot-diff');\n  return screenshotConfig;\n}\n\nfunction getCustomName(suppliedConfig) {\n  const cfg = suppliedConfig || getConfig();\n  return cfg.name;\n}\n\nfunction getCustomSeparator(suppliedConfig) {\n  const cfg = suppliedConfig || getConfig();\n  return cfg.separator;\n}\n\nfunction getServerUrl(suppliedConfig) {\n  const cfg = suppliedConfig || getConfig();\n  return `http:\n}\n\nfunction shouldNormalize(dataType, suppliedConfig) {\n  const cfg = suppliedConfig && suppliedConfig.normalizeJson !== undefined ?\n    suppliedConfig : getConfig();\n  return dataType === TYPE_JSON && cfg.normalizeJson;\n}\n\nfunction getPrettierConfig(dataType, suppliedConfig) {\n  const cfg = suppliedConfig && suppliedConfig.prettierConfig ?\n    suppliedConfig : getConfig();\n  return cfg.prettier && cfg.prettierConfig ? cfg.prettierConfig[dataType] : undefined;\n}\n\nmodule.exports = {\n  CONFIG_KEY,\n  DEFAULT_IMAGE_CONFIG,\n  DEFAULT_SCREENSHOT_CONFIG,\n  createToken,\n  getConfig,\n  getImageConfig,\n  getPrettierConfig,\n  getScreenshotConfig,\n  getCustomName,\n  getCustomSeparator,\n  getServerUrl,\n  initConfig,\n  shouldNormalize,\n};\n\n'cypress-plugin-snapshots/__tests__/plugin.test.js'\n:\nconst configModule = require('../src/config');\n\njest.mock(\"../src/config.js\");\n\njest.spyOn(configModule, 'initConfig')\n  .mockImplementation((config) => config);\n\nglobal.Cypress = {\n  env: () => {},\n  config: () => {},\n  Commands: {\n    add: jest.fn(),\n  },\n};\n\nglobal.cy = {};\n\ndescribe('plugin', () => {\n  it('initPlugin', () => {\n    const globalConfig = {\n      env: {\n        \"cypress-plugin-snapshots\": {\n          \"serverEnabled\": false,\n        }\n      }\n    };\n    jest.spyOn(configModule, 'getConfig')\n      .mockImplementation(() => globalConfig.env['cypress-plugin-snapshots']);\n    const on = jest.fn();\n\n    const { initPlugin } = require('../plugin');\n\n    initPlugin(on, globalConfig);\n    expect(on).toBeCalledTimes(2);\n  });\n});\n\n'cypress-plugin-snapshots/plugin.js'\n:\nconst { initConfig, CONFIG_KEY } = require('./src/config');\nconst initServer = require('./src/server/initServer');\nconst tasks = require('./src/tasks/');\n\n\nfunction initPlugin(on, globalConfig = {\n}) {\n  const config = initConfig(globalConfig.env[CONFIG_KEY]);\n  initServer(config);\n\n\n\n  globalConfig.env[CONFIG_KEY] = JSON.stringify(config);\n\n  on('before:browser:launch', (browser = {}, launchOptions) => {\n    const args = Array.isArray(launchOptions) ? launchOptions : launchOptions.args;\n\n    if (browser.name === 'chrome') {\n      args.push('--font-render-hinting=medium');\n      args.push('--enable-font-antialiasing');\n      args.push('--disable-gpu');\n    }\n\n    return launchOptions;\n  });\n\n  on('task', tasks);\n}\n\nmodule.exports = {\n  initPlugin\n};\n\n'cypress-plugin-snapshots/src/utils/tasks/imageSnapshots.js'\n:const { createHash } = require('crypto');\nconst { PNG } = require('pngjs');\nconst fs = require('fs-extra');\nconst pixelmatch = require('pixelmatch');\nconst { merge } = require('lodash');\nconst rimraf = require('rimraf').sync;\nconst getSnapshotFilename = require('../image/getSnapshotFilename');\nconst getImageData = require('../image/getImageData');\nconst { IMAGE_TYPE_ACTUAL } = require('../../constants');\nconst { DEFAULT_IMAGE_CONFIG } = require('../../config');\n\nfunction moveActualImageToSnapshotsDirectory({image, snapshotTitle, testFile} = {}) {\n  if (image && image.path) {\n    const filename = getSnapshotFilename(testFile, snapshotTitle, IMAGE_TYPE_ACTUAL);\n    rimraf(filename);\n    if (fs.existsSync(image.path)) {\n      fs.moveSync(image.path, filename);\n    }\n    image.path = filename;\n  }\n}\n\nfunction createDiffObject(filename) {\n  const imageObject = getImageObject(filename, false);\n  return getImageData(imageObject);\n}\n\n\nfunction getImageObject(filename, addHash = true) {\n  const exists = fs.existsSync(filename);\n  const size = exists ? fs.statSync(filename).size : 0;\n\n  if (size > 0) {\n    const image = PNG.sync.read(fs.readFileSync(filename));\n    const hash = addHash !== false ?\n      createHash('sha1').update(image.data).digest('base64') : undefined;\n\n    return {\n      path: filename,\n      image,\n      hash,\n      height: image.height,\n      width: image.width,\n    };\n  }\n\n  return false;\n}\n\nfunction createCompareCanvas(width, height, source) {\n  const canvas = new PNG({\n    width,\n    height,\n    colorType: 6,\n    bgColor: {\n      red: 0,\n      green: 0,\n      blue: 0,\n      alpha: 0,\n    }\n  });\n  PNG.bitblt(source, canvas, 0, 0, source.width, source.height, 0, 0);\n  return canvas;\n}\n\n\nfunction makeImagesEqualSize(expected, actual) {\n  const height = Math.max(expected.height, actual.height);\n  const width = Math.max(expected.width, actual.width);\n  actual.image = createCompareCanvas(width, height, actual.image);\n  expected.image = createCompareCanvas(width, height, expected.image);\n}\n\nfunction compareImageSizes(expected, actual) {\n  return expected.width === actual.width &&\n    actual.height === expected.height;\n}\n\nfunction compareImages(expected, actual, diffFilename, config) {\n  let passed = false;\n  rimraf(diffFilename);\n\n  if (actual !== false) {\n    const hashMatches = expected.hash === actual.hash;\n    if (hashMatches) {\n      return true;\n    }\n\n    const sizeMatch = compareImageSizes(expected, actual);\n    if (!sizeMatch) {\n      makeImagesEqualSize(expected, actual);\n    }\n\n    const imageConfig = merge({}, DEFAULT_IMAGE_CONFIG, config);\n    const pixelmatchConfig = {\n      threshold: 0.01,\n    };\n\n    const imageWidth = actual.image.width;\n    const imageHeight = actual.image.height;\n\n    const diffImage = config.createDiffImage ? new PNG({\n      height: imageHeight,\n      width: imageWidth,\n    }) : null;\n\n    const totalPixels = imageWidth * imageHeight;\n    const diffPixelCount = pixelmatch(\n      actual.image.data,\n      expected.image.data,\n      diffImage ? diffImage.data : null,\n      imageWidth,\n      imageHeight,\n      pixelmatchConfig\n    );\n\n    if (imageConfig.thresholdType === 'pixel') {\n      passed = diffPixelCount <= imageConfig.threshold;\n    } else if (imageConfig.thresholdType === 'percent') {\n      const diffRatio = diffPixelCount / totalPixels;\n      passed = diffRatio <= imageConfig.threshold;\n    } else {\n      throw new Error(`Unknown imageConfig.thresholdType: ${imageConfig.thresholdType}. `+\n        `Valid options are \"pixel\" or \"percent\".`);\n    }\n\n    if (!passed && diffImage) {\n\n\n      const pngBuffer = PNG.sync.write(diffImage, {\n        filterType: 4\n      });\n      fs.writeFileSync(diffFilename, pngBuffer);\n    }\n  }\n\n  return passed;\n}\n\nfunction saveImageSnapshot(data) {\n  rimraf(data.expected.path);\n  rimraf(data.diff.path);\n  fs.moveSync(data.actual.path, data.expected.path);\n}\n\nmodule.exports = {\n  compareImages,\n  createDiffObject,\n  getImageObject,\n  saveImageSnapshot,\n  moveActualImageToSnapshotsDirectory\n};\n\n'cypress-plugin-snapshots/src/server/initServer.js'\n:const http = require('http');\nconst socketio = require('socket.io');\nconst { SAVE_TEXT, SAVE_IMAGE } = require('./actions');\nconst saveTextSnapshot = require('../save/saveTextSnapshot');\nconst { saveImageSnapshot } = require('../utils/tasks/imageSnapshots');\n\nfunction initServer(config) {\n  const server = http.createServer();\n  const io = socketio(server);\n\n  io.on('connection', (client) => {\n    const { token } = client.handshake.query;\n\n    if (config.serverEnabled) {\n      client.on(SAVE_IMAGE, (data) => {\n        if (token === config.token) {\n          saveImageSnapshot(data);\n        }\n      });\n\n      client.on(SAVE_TEXT, (data) => {\n        if (token === config.token) {\n          saveTextSnapshot(data);\n        }\n      });\n    }\n  });\n\n  if (config.serverEnabled) {\n    server.listen(config.serverPort, config.serverHost);\n  }\n}\n\nmodule.exports = initServer;\n",
        "gt": [
            "'cypress-plugin-snapshots/src/config.js'",
            "'cypress-plugin-snapshots/src/utils/tasks/imageSnapshots.js'",
            "'cypress-plugin-snapshots/src/server/initServer.js'",
            "'cypress-plugin-snapshots/plugin.js'",
            "'cypress-plugin-snapshots/__tests__/plugin.test.js'"
        ]
    },
    {
        "files": [
            "'mediumdesk-v1/src/menu.js'",
            "'mediumdesk-v1/src/navigate.js'",
            "'mediumdesk-v1/src/index.js'"
        ],
        "content": "'mediumdesk-v1/src/menu.js'\n:'use strict';\nconst os = require('os');\nconst path = require('path');\nconst electron = require('electron');\nconst app = electron.app;\nconst BrowserWindow = electron.BrowserWindow;\nconst shell = electron.shell;\nconst appName = app.getName();\nconst UpdateHandler = require('./update');\n\nconst params = {};\n\nfunction sendAction(action) {\n\tconst win = BrowserWindow.getAllWindows()[0];\n\n\tif (process.platform === 'darwin') {\n\t\twin.restore();\n\t}\n\n\twin.webContents.send(action);\n}\n\nfunction checkUpdate() {\n\tconst updateHandler = new UpdateHandler();\n\tupdateHandler.checkForUpdate(`v${app.getVersion()}`, false);\n}\n\nconst helpSubmenu = [\n\t{\n\t\tlabel: `${appName} Website...`,\n\t\tclick() {\n\t\t\tshell.openExternal('https:\n\t\t}\n\t},\n\t{\n\t\tlabel: `Medium Website...`,\n\t\tclick() {\n\t\t\tshell.openExternal('https:\n\t\t}\n\t},\n\t{\n\t\ttype: 'separator'\n\t},\n\t{\n\t\tlabel: `Check for updates...`,\n\t\tclick() {\n\t\t\tcheckUpdate();\n\t\t}\n\t},\n\t{\n\t\tlabel: 'Report an Issue...',\n\t\tclick() {\n\t\t\tconst body = `\n<< Please succinctly describe your issue and steps to reproduce it. >>\n\n----\n${app.getName()} ${app.getVersion()}\nElectron ${process.versions.electron}\n${process.platform} ${process.arch} ${os.release()}`;\n\n\t\t\tshell.openExternal(`https:\n\t\t}\n\t}\n];\n\nconst viewSubmenu = [\n\t{\n\t\tlabel: `Reload`,\n\t\taccelerator: 'CmdOrCtrl+R',\n\t\tclick() {\n\t\t\tconst win = BrowserWindow.getAllWindows()[0];\n\t\t\twin.reload();\n\t\t}\n\t},\n\t{\n\t\tlabel: `Back`,\n\t\taccelerator: `CmdOrCtrl+[`,\n\t\tclick() {\n\t\t\tsendAction('go-back');\n\t\t}\n\t},\n\t{\n\t\tlabel: `Forward`,\n\t\taccelerator: `CmdOrCtrl+]`,\n\t\tclick() {\n\t\t\tsendAction('go-forward');\n\t\t}\n\t}\n];\n\nif (process.platform !== 'darwin') {\n\thelpSubmenu.push({\n\t\ttype: 'separator'\n\t}, {\n\t\tlabel: `About ${appName}`,\n\t\tclick() {\n\t\t\telectron.dialog.showMessageBox({\n\t\t\t\ttitle: `About ${appName}`,\n\t\t\t\tmessage: `${appName} ${app.getVersion()}`,\n\t\t\t\tdetail: 'Created by Sivaprakash Ragavan',\n\t\t\t\ticon: path.join(__dirname, '../static/Icon.png'),\n\t\t\t\tbuttons: []\n\t\t\t});\n\t\t}\n\t});\n}\n\nconst darwinTpl = [\n\t{\n\t\tlabel: appName,\n\t\tsubmenu: [\n\t\t\t{\n\t\t\t\tlabel: `About ${appName}`,\n\t\t\t\trole: 'about'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Preferences...',\n\t\t\t\taccelerator: 'Cmd+,',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-settings');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Services',\n\t\t\t\trole: 'services',\n\t\t\t\tsubmenu: []\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: `Hide ${appName}`,\n\t\t\t\taccelerator: 'Cmd+H',\n\t\t\t\trole: 'hide'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Hide Others',\n\t\t\t\taccelerator: 'Cmd+Shift+H',\n\t\t\t\trole: 'hideothers'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Show All',\n\t\t\t\trole: 'unhide'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: `Quit ${appName}`,\n\t\t\t\taccelerator: 'Cmd+Q',\n\t\t\t\tclick() {\n\t\t\t\t\tapp.quit();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tlabel: 'File',\n\t\tsubmenu: [\n\t\t\t{\n\t\t\t\tlabel: 'New Story',\n\t\t\t\taccelerator: 'Cmd+N',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-new');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Import from disk...',\n\t\t\t\taccelerator: 'Cmd+O',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-file');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Search Medium',\n\t\t\t\taccelerator: 'Cmd+Shift+F',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-search');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Home',\n\t\t\t\taccelerator: 'Cmd+0',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-home');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Drafts',\n\t\t\t\taccelerator: 'Cmd+1',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-drafts');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Stories',\n\t\t\t\taccelerator: 'Cmd+2',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-stories');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Stats',\n\t\t\t\taccelerator: 'Cmd+3',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-stats');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Bookmarks',\n\t\t\t\taccelerator: 'Cmd+4',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-bookmarks');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Publications',\n\t\t\t\taccelerator: 'Cmd+5',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-pubs');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Profile',\n\t\t\t\taccelerator: 'Cmd+6',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-profile');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Settings',\n\t\t\t\taccelerator: 'Cmd+7',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-settings');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Login',\n\t\t\t\taccelerator: 'Cmd+8',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-login');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Open in Browser',\n\t\t\t\taccelerator: 'Cmd+9',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-in-browser')\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tlabel: 'Edit',\n\t\tsubmenu: [\n\t\t\t{\n\t\t\t\tlabel: 'Undo',\n\t\t\t\taccelerator: 'Cmd+Z',\n\t\t\t\trole: 'undo'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Redo',\n\t\t\t\taccelerator: 'Shift+Cmd+Z',\n\t\t\t\trole: 'redo'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Cut',\n\t\t\t\taccelerator: 'Cmd+X',\n\t\t\t\trole: 'cut'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Copy',\n\t\t\t\taccelerator: 'Cmd+C',\n\t\t\t\trole: 'copy'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Paste',\n\t\t\t\taccelerator: 'Cmd+V',\n\t\t\t\trole: 'paste'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Select All',\n\t\t\t\taccelerator: 'Cmd+A',\n\t\t\t\trole: 'selectall'\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tlabel: 'View',\n\t\tsubmenu: viewSubmenu\n\t},\n\t{\n\t\tlabel: 'Window',\n\t\trole: 'window',\n\t\tsubmenu: [\n\t\t\t{\n\t\t\t\tlabel: 'Minimize',\n\t\t\t\taccelerator: 'Cmd+M',\n\t\t\t\trole: 'minimize'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Close',\n\t\t\t\taccelerator: 'Cmd+W',\n\t\t\t\trole: 'close'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Bring All to Front',\n\t\t\t\trole: 'front'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Toggle Full Screen',\n\t\t\t\taccelerator: 'Ctrl+Cmd+F',\n\t\t\t\tclick() {\n\t\t\t\t\tconst win = BrowserWindow.getAllWindows()[0];\n\t\t\t\t\twin.setFullScreen(!win.isFullScreen());\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tlabel: 'Help',\n\t\trole: 'help',\n\t\tsubmenu: helpSubmenu\n\t}\n];\n\nconst otherTpl = [\n\t{\n\t\tlabel: 'File',\n\t\tsubmenu: [\n\t\t\t{\n\t\t\t\tlabel: 'New Story',\n\t\t\t\taccelerator: 'Ctrl+N',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-new');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Import from disk...',\n\t\t\t\taccelerator: 'Ctrl+O',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-file');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Search Medium',\n\t\t\t\taccelerator: 'Ctrl+Shift+F',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-search');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Home',\n\t\t\t\taccelerator: 'Ctrl+0',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-home');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Drafts',\n\t\t\t\taccelerator: 'Ctrl+1',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-drafts');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Stories',\n\t\t\t\taccelerator: 'Ctrl+2',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-stories');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Stats',\n\t\t\t\taccelerator: 'Ctrl+3',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-stats');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Bookmarks',\n\t\t\t\taccelerator: 'Ctrl+4',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-bookmarks');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Publications',\n\t\t\t\taccelerator: 'Ctrl+5',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-pubs');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Profile',\n\t\t\t\taccelerator: 'Ctrl+6',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-profile');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Settings',\n\t\t\t\taccelerator: 'Ctrl+7',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-settings');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Login',\n\t\t\t\taccelerator: 'Ctrl+8',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-login');\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'separator'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Open in Browser',\n\t\t\t\taccelerator: 'Ctrl+9',\n\t\t\t\tclick() {\n\t\t\t\t\tsendAction('open-in-browser')\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Quit',\n\t\t\t\taccelerator: 'Ctrl+W',\n\t\t\t\tclick() {\n\t\t\t\t\tapp.quit();\n\t\t\t\t}\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tlabel: 'Edit',\n\t\tsubmenu: [\n\t\t\t{\n\t\t\t\tlabel: 'Cut',\n\t\t\t\taccelerator: 'Ctrl+X',\n\t\t\t\trole: 'cut'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Copy',\n\t\t\t\taccelerator: 'Ctrl+C',\n\t\t\t\trole: 'copy'\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Paste',\n\t\t\t\taccelerator: 'Ctrl+V',\n\t\t\t\trole: 'paste'\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\tlabel: 'View',\n\t\tsubmenu: viewSubmenu\n\t},\n\t{\n\t\tlabel: 'Help',\n\t\trole: 'help',\n\t\tsubmenu: helpSubmenu\n\t}\n];\n\nexports.build = () => {\n\tconsole.log(params);\n\tconst tpl = process.platform === 'darwin' ? darwinTpl : otherTpl;\n\treturn electron.Menu.buildFromTemplate(tpl);\n};\n\nexports.setParam = (name, value) => {\n\tparams[name] = value;\n};\n\nexports.getParam = name => {\n\treturn params[name];\n};\n\n'mediumdesk-v1/src/navigate.js'\n:'use strict';\nconst electron = require('electron');\nconst menu = require('./menu');\n\nexports.onNavigate = (e, url) => {\n  if (url.startsWith('https:\n\t\tmenu.setParam('showEditMenu', true);\n\t\telectron.Menu.setApplicationMenu(menu.build());\n\t} else {\n    if(menu.getParam('showEditMenu')) {\n      menu.setParam('showEditMenu', false);\n\t\t  electron.Menu.setApplicationMenu(menu.build());\n    }\n  }\n}\n\n'mediumdesk-v1/src/index.js'\n:'use strict';\nconst path = require('path');\nconst fs = require('fs');\nconst electron = require('electron');\nconst app = electron.app;\nconst menu = require('./menu');\nconst Store = require('electron-store');\nconst storage = new Store();\nconst navigate = require('./navigate');\nconst tray = require('./tray');\nconst UpdateHandler = require('./update');\nconst Common = require('./common');\nconst {ipcMain} = require('electron');\nconst mediumapi = require('./mediumapi');\n\nrequire('electron-debug')();\nrequire('electron-dl')();\n\nlet mainWindow;\nlet isQuitting = false;\n\nconst isAlreadyRunning = app.makeSingleInstance(() => {\n\tif (mainWindow) {\n\t\tif (mainWindow.isMinimized()) {\n\t\t\tmainWindow.restore();\n\t\t}\n\t\tmainWindow.show();\n\t}\n});\n\nif (isAlreadyRunning) {\n\tapp.quit();\n}\n\nfunction createMainWindow() {\n\tconst lastWindowState = storage.get('lastWindowState') || Common.WINDOW_SIZE;\n\n\tconst win = new electron.BrowserWindow({\n\t\ttitle: app.getName(),\n\t\tshow: false,\n\t\tx: lastWindowState.x,\n\t\ty: lastWindowState.y,\n\t\twidth: lastWindowState.width,\n\t\theight: lastWindowState.height,\n\t\ticon: process.platform === 'linux' && path.join(__dirname, '../static/Icon.png'),\n\t\tminWidth: 992,\n\t\tminHeight: 450,\n\n\n\t\twebPreferences: {\n\n\t\t\tnodeIntegration: false,\n\t\t\tpreload: path.join(__dirname, 'browser.js'),\n\t\t\twebSecurity: true,\n\t\t\tplugins: true\n\t\t}\n\t});\n\n\tlet startPage = null;\n\tswitch(storage.get('start-page')) {\n\t\tcase 'home':\n\t\t\tstartPage = Common.MEDIUM_HOME;\n\t\t\tbreak;\n\t\tcase 'new':\n\t\t\tstartPage = 'https:\n\t\t\tbreak;\n\t\tcase 'drafts':\n\t\t\tstartPage = 'https:\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tstartPage = Common.MEDIUM_HOME;\n\t\t\tbreak;\n\t}\n\n\twin.loadURL(startPage);\n\twin.on('close', e => {\n\t\tif (!isQuitting) {\n\t\t\te.preventDefault();\n\n\t\t\tif (process.platform === 'darwin') {\n\t\t\t\tapp.hide();\n\t\t\t} else {\n\t\t\t\twin.hide();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn win;\n}\n\napp.on('ready', () => {\n\telectron.Menu.setApplicationMenu(menu.build());\n\tmainWindow = createMainWindow();\n\ttray.create(mainWindow);\n\n\tconst page = mainWindow.webContents;\n\n\tpage.on('dom-ready', () => {\n\t\tpage.insertCSS(fs.readFileSync(path.join(__dirname, 'styles/browser.css'), 'utf8'));\n\t\tmainWindow.show();\n\t});\n\n\tpage.on('did-navigate', navigate.onNavigate);\n\tpage.on('did-navigate-in-page', navigate.onNavigate);\n\n\tpage.on('new-window', (e, url) => {\n\t\te.preventDefault();\n\t\telectron.shell.openExternal(url);\n\t});\n\n\tnew UpdateHandler().checkForUpdate(`v${app.getVersion()}`, true);\n});\n\napp.on('activate', () => {\n\tmainWindow.show();\n});\n\napp.on('before-quit', () => {\n\tisQuitting = true;\n\n\tif (!mainWindow.isFullScreen()) {\n\t\tstorage.set('lastWindowState', mainWindow.getBounds());\n\t}\n});\n\n\nipcMain.on('import-file', (event, file) => {\n\tconsole.log(\"Importing : \" + file);\n\tconst win = electron.BrowserWindow.getAllWindows()[0];\n\tshowLoadingMessage('Importing from disk...');\n\tsetTimeout(() => {\n\t\ttry {\n\t\t\tfs.openSync(file, 'r+');\n\t\t\tvar data = fs.readFileSync(file).toString();\n\t\t\tmediumapi.publish(\"\", data, file.endsWith(\"html\") | file.endsWith(\"html\") ? \"html\" : \"markdown\", [],\n\t\t\t\t(error, statusCode, headers, body) => {\n\t\t\t\t\tif(error || !(statusCode == 200 || statusCode == 201)) {\n\t\t\t\t\t\tconsole.log('Error: ', error);\n\t\t\t\t\t\tconsole.log('Status: ', statusCode);\n\t\t\t\t\t\tconsole.log('Headers: ', JSON.stringify(headers));\n\t\t\t\t\t\tconsole.log('Body: ', body);\n\t\t\t\t\t\tif(body) {\n\t\t\t\t\t\t\tvar bodyContents = JSON.parse(body);\n\t\t\t\t\t\t\tshowErrorMessage(bodyContents[\"errors\"][0][\"message\"]);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshowErrorMessage('Unknown Error Occured');\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log('Reponse from Medium: ', body);\n\t\t\t\t\t\tvar bodyContents = JSON.parse(body);\n\t\t\t\t\t\tconst url = bodyContents[\"data\"][\"url\"];\n\t\t\t\t\t\tif(url) {\n\t\t\t\t\t\t\twin.loadURL(url);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tshowErrorMessage('Error loading Draft');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t} catch (err) {\n\t\t\tconsole.error('Couldn\\'t read file' + err);\n\t\t\tshowErrorMessage('Error reading file');\n\t\t}\n\t}, 100);\n});\n\nfunction showLoadingMessage(msg) {\n\tconst win = electron.BrowserWindow.getAllWindows()[0];\n\twin.loadURL('file:\n}\n\nfunction showErrorMessage(msg) {\n\tconst win = electron.BrowserWindow.getAllWindows()[0];\n\twin.loadURL('file:\n\tsetTimeout(() => {\n\t\twin.loadURL(Common.MEDIUM_HOME);\n\t}, 2500);\n}\n",
        "gt": [
            "'mediumdesk-v1/src/menu.js'",
            "'mediumdesk-v1/src/navigate.js'",
            "'mediumdesk-v1/src/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/index.js'",
            "'ruui/src/utils/ruuiStore.js'",
            "'ruui/src/utils/helpers.js'"
        ],
        "content": "'ruui/src/index.js'\n:import * as utilsImport from './utils';\nimport * as actionsImport from './utils/store/actions';\nimport * as appActionImport from './utils/store/appAction';\nimport * as routeActionImport from './utils/store/routeAction';\n\nimport coreConfigs from './configs/core';\nimport appReducer from './store/appReducer';\nimport { createStore } from './utils/ruuiStore';\n\nexport { RuuiContext } from './utils/context';\nexport { ruuiMiddleware, ruuiReducer } from './store';\nexport { connect } from './utils/ruuiStore';\n\nexport function createRuuiStore() {\n\treturn createStore(appReducer);\n}\n\nexport * from './components';\nexport * from './decorators';\nexport * from './utils/store/appReducer';\nexport * from './utils/store/routeReducer';\nexport * from './utils/collection';\n\nexport const utils = utilsImport;\nexport const actions = actionsImport;\nexport const appAction = appActionImport;\nexport const ruuiActions = appActionImport;\nexport const routeActions = routeActionImport;\nexport const routeAction = routeActionImport;\nexport const defaultConfigs = coreConfigs;\n\n'ruui/src/utils/ruuiStore.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { shallowEqual } from './helpers';\n\nexport function createStore(reducer) {\n\tlet state, listeners = [];\n\n\tconst getState = () => state;\n\tconst getListeners = () => listeners;\n\n\tconst dispatch = (action) => {\n\t\tstate = reducer(state, action);\n\t\tlisteners.forEach(listener => listener(state));\n\t};\n\n\tconst subscribe = (listener) => {\n\t\tlisteners.push(listener);\n\n\t\treturn () => {\n\t\t\tlisteners = listeners.filter(l => l !== listener);\n\t\t};\n\t};\n\n\tdispatch({});\n\n\treturn { getState, dispatch, subscribe, getListeners };\n}\n\nexport function combineReducers(reducers) {\n\tconst reducerKeys = Object.keys(reducers);\n\n\treturn (state = {}, action) => {\n\t\tlet hasChanged = false;\n\t\tconst nextState = {};\n\n\t\tfor (let i = 0; i < reducerKeys.length; i += 1) {\n\t\t\tconst key = reducerKeys[i],\n\t\t\t\treducer = reducers[key],\n\t\t\t\tpreviousStateForKey = state[key],\n\t\t\t\tnextStateForKey = reducer(previousStateForKey, action);\n\n\t\t\tnextState[key] = nextStateForKey;\n\t\t\thasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n\t\t}\n\n\t\treturn hasChanged ? nextState : state;\n\t};\n}\n\nexport function connect(stateToPropsFactory) {\n\treturn function (BaseComponent) {\n\t\tconst currentDisplayName = BaseComponent.displayName || BaseComponent.name,\n\t\t\tenhancedDisplayName = `RuuiConnect(${currentDisplayName})`;\n\n\t\treturn class RuuiConnected extends Component {\n\t\t\tstatic displayName = enhancedDisplayName;\n\n\t\t\tstatic contextTypes = {\n\t\t\t\truuiStore: PropTypes.object,\n\t\t\t};\n\n\t\t\tconstructor(props, context) {\n\t\t\t\tsuper(props);\n\t\t\t\tthis.store = context.ruuiStore;\n\t\t\t\tthis.unSubscribe = this.store.subscribe(this.syncProps);\n\n\t\t\t\tthis.state = {\n\t\t\t\t\tgeneratedProps: stateToPropsFactory(this.store.getState()),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcomponentWillUnmount() {\n\t\t\t\tthis.unSubscribe();\n\t\t\t}\n\n\t\t\trender() {\n\t\t\t\tconst { generatedProps, } = this.state,\n\t\t\t\t\t{ dispatch } = this.store;\n\n\t\t\t\treturn <BaseComponent\n\t\t\t\t\t{...this.props}\n\t\t\t\t\t{...generatedProps}\n\t\t\t\t\tdispatch={dispatch}/>;\n\t\t\t}\n\n\t\t\tsyncProps = () => {\n\t\t\t\tconst { generatedProps } = this.state,\n\t\t\t\t\tnextProps = stateToPropsFactory(this.store.getState());\n\n\t\t\t\tif (!shallowEqual(generatedProps, nextProps)) {\n\t\t\t\t\tthis.setState({ generatedProps: nextProps });\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t};\n}\n\n'ruui/src/utils/helpers.js'\n:import { Dimensions } from 'react-native';\nimport type { SnappingDirection } from '../typeDefinition';\n\nexport function debounce(fn, duration) {\n\tlet timeout;\n\treturn function () {\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = null;\n\t\t\tfn.apply(this, arguments);\n\t\t}, duration);\n\t};\n}\n\nexport function uuid() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t\tconst r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\nexport function instantInterval(\n\tfunc: Function,\n\tinterval: Number,\n\ttrigger: Boolean = true,\n) {\n\tif (trigger) func.call(this);\n\treturn setInterval(func, interval);\n}\n\nexport function minGuard(value: Number, gap: Number = 0) {\n\treturn value < gap ? gap : value;\n}\n\nexport function maxGuard(value: Number, gap: Number) {\n\treturn value > gap ? gap : value;\n}\n\nconst defaultIteratee = item => item;\n\nexport function maxBy(array, iteratee = defaultIteratee) {\n\tlet result;\n\tif (array == null) return result;\n\n\tlet computed;\n\tfor (const value of array) {\n\t\tconst current = iteratee(value);\n\n\t\tif (current != null && (computed === undefined ? current === current : current > computed)) {\n\t\t\tcomputed = current;\n\t\t\tresult = value;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function clamp(value: Number, min: Number, max: Number) {\n\treturn min < max\n\t\t? (value < min ? min : value > max ? max : value)\n\t\t: (value < max ? max : value > min ? min : value);\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n\tif (x === y) {\n\t\treturn x !== 0 || y !== 0 || 1 / x === 1 / y;\n\t} else {\n\t\treturn x !== x && y !== y;\n\t}\n}\n\nexport function shallowEqual(objA, objB) {\n\tif (is(objA, objB)) return true;\n\n\tif (typeof objA !== 'object' || objA === null\n\t\t|| typeof objB !== 'object' || objB === null) {\n\t\treturn false;\n\t}\n\n\tconst keysA = Object.keys(objA);\n\tconst keysB = Object.keys(objB);\n\n\tif (keysA.length !== keysB.length) return false;\n\n\tfor (let i = 0; i < keysA.length; i += 1) {\n\t\tif (!hasOwn.call(objB, keysA[i])\n\t\t\t|| !is(objA[keysA[i]], objB[keysA[i]])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function valueAt(root = {}, path, defaultValue) {\n\tlet currentLevel = root;\n\tconst paths = path.split('.');\n\n\tfor (let i = 0; i < paths.length; i += 1) {\n\t\tif (i === paths.length - 1) {\n\t\t\treturn currentLevel[paths[i]] || defaultValue;\n\t\t} else {\n\t\t\tcurrentLevel = currentLevel[paths[i]];\n\t\t\tif (!currentLevel) return defaultValue;\n\t\t}\n\t}\n\n\treturn defaultValue;\n}\n\nfunction rawDirectionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n) {\n\tswitch (position) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tdefault:\n\t\treturn { top: 0, left: 0 };\n\t}\n}\n\n\nfunction screenGuard(position, componentSize, screenPadding = 5, moddedScreenSize = {}) {\n\tconst screenSize = { ...Dimensions.get('window'), ...moddedScreenSize },\n\t\t{ top, left, } = position;\n\tlet guardedTop = top, guardedLeft = left;\n\n\tif (top < 5) {\n\t\tguardedTop = 5;\n\t} else if (top + componentSize.height > screenSize.height - screenPadding) {\n\t\tguardedTop = screenSize.height - componentSize.height - screenPadding;\n\t}\n\n\tif (left < 5) {\n\t\tguardedLeft = 5;\n\t} else if (left + componentSize.width > screenSize.width - screenPadding) {\n\t\tguardedLeft = screenSize.width - componentSize.width - screenPadding;\n\t}\n\n\treturn { top: guardedTop, left: guardedLeft, };\n}\n\nexport function directionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n\tscreenSize,\n) {\n\treturn screenGuard(\n\t\trawDirectionSnap(top, left, width1, height1, width2, height2, position, spacing),\n\t\t{ width: width2, height: height2, }, 5, screenSize\n\t);\n}\n\nexport function arrowSnap(width, height, arrowSize, parentPosition: SnappingDirection, padding = 15) {\n\tswitch (parentPosition) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop: padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t\topacity: 0,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tleft: -arrowSize,\n\t\t\ttop: padding,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tdefault:\n\t\treturn {};\n\t}\n}\n\nexport function directionAnimatedConfigs(\n\tdirection, translateDistance, animation, finalBorderRadius = 3\n) {\n\tconst borderRadius = animation.interpolate({\n\t\t\tinputRange: [0, 0.5, 1], outputRange: [50, 15, finalBorderRadius],\n\t\t}),\n\t\topacity = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\textrapolate: 'clamp',\n\t\t});\n\n\tswitch (direction) {\n\tcase 'top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\tborderRadius: { borderRadius, },\n\t\t\ttransform: [],\n\t\t\topacity,\n\t\t};\n\tdefault:\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\t}\n}\n",
        "gt": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/ruuiStore.js'",
            "'ruui/src/index.js'"
        ]
    },
    {
        "files": [
            "'Next-GraphQL-Blog/client/components/PostCard.js'",
            "'Next-GraphQL-Blog/client/lib/withUser.js'",
            "'Next-GraphQL-Blog/client/pages/index.js'",
            "'Next-GraphQL-Blog/client/components/FeedList.js'"
        ],
        "content": "'Next-GraphQL-Blog/client/components/PostCard.js'\n:import React, { Component } from 'react'\nimport { Card, Icon, Image, Divider } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { Query, Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport { LIKE_POST, likePostOptions } from '../api/mutations/like/likePost'\nimport {\n  DELETE_POST,\n  deletePostOptions\n} from '../api/mutations/post/deletePost'\n\nimport withUser from '../lib/withUser'\nimport parseError from '../lib/parseError'\nimport { showSuccessAlert, showErrorAlert } from '../lib/alerts'\n\nimport CommentList from './CommentList'\n\nclass PostCard extends Component {\n  state = {\n    showComments: false\n  }\n\n  toggleComments = () => {\n    this.setState({\n      showComments: !this.state.showComments\n    })\n  }\n\n  render() {\n    const { showComments } = this.state\n    const {\n      _id,\n      name,\n      content,\n      postedBy,\n      likes,\n      comments,\n      createdAt,\n      image,\n      user\n    } = this.props\n\n    return (\n      <Mutation mutation={LIKE_POST} variables={{ postId: _id }}>\n        {likePost => (\n          <Mutation mutation={DELETE_POST} variables={{ _id: _id }}>\n            {deletePost => (\n              <StyledCard props={{ showComments }}>\n                {user &&\n                  user._id === postedBy._id && (\n                    <RemoveIcon\n                      name=\"remove\"\n                      onClick={() => {\n                        deletePost(deletePostOptions(this.props)).then(() =>\n                          showSuccessAlert('Post was deleted!')\n                        )\n                      }}\n                    />\n                  )}\n\n                <StyledImage\n                  src={image ? image : '/static/blog-placeholder.jpg'}\n                />\n\n                <Card.Content>\n                  <Card.Header style={ellipsisStyle}>{name}</Card.Header>\n                  <Card.Meta style={ellipsisStyle}>\n                    By {postedBy.name}\n                  </Card.Meta>\n                  <Card.Description style={ellipsisStyle}>\n                    {content}\n                  </Card.Description>\n                </Card.Content>\n\n                <BottomSection extra>\n                  <a onClick={this.toggleComments}>\n                    <Icon name=\"comment\" />\n                    {comments.length} Comments\n                  </a>\n                  <a\n                    onClick={() => {\n                      likePost(likePostOptions(this.props))\n                        .then(() => showSuccessAlert('You liked a Post!'))\n                        .catch(e => showErrorAlert(parseError(e.message)))\n                    }}\n                  >\n                    <Icon name=\"like\" />\n                    {likes.length} Likes\n                  </a>\n                </BottomSection>\n\n                {showComments && (\n                  <CommentList comments={comments} postId={_id} />\n                )}\n              </StyledCard>\n            )}\n          </Mutation>\n        )}\n      </Mutation>\n    )\n  }\n}\n\nconst StyledCard = styled(Card)`\n  &&& {\n    height: ${props => (props.props.showComments ? 'auto' : '325px')};\n    box-shadow: 0px 3px 25px 2px #00000014;\n    border-bottom-left-radius: 0px;\n    border-bottom-right-radius: 0px;\n  }\n`\n\nconst BottomSection = styled(Card.Content)`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst RemoveIcon = styled(Icon)`\n  &&& {\n    font-size: 18px;\n    position: absolute;\n    top: 5px;\n    z-index: 9;\n    right: 0;\n    cursor: pointer;\n    transition: 0.2s all ease;\n    &:hover {\n      font-size: 22px;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  &&& {\n    height: 191px;\n    object-fit: cover;\n  }\n`\n\nconst ellipsisStyle = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden'\n}\n\nexport default withUser(PostCard)\n\n'Next-GraphQL-Blog/client/lib/withUser.js'\n:import React from 'react'\n\nimport { Context } from '../context'\n\nexport default Page =>\n  class BaseComponent extends React.Component {\n    static async getInitialProps(ctx) {\n      const props = {}\n\n      if (Page.getInitialProps) {\n        Object.assign(props, (await Page.getInitialProps(ctx)) || {})\n      }\n      return props\n    }\n\n    render() {\n      return (\n        <Context.Consumer>\n          {context => {\n            return (\n              <Page\n                {...this.props}\n                user={context ? context.state.user : ''}\n                setUser={context ? context.actions.setUser : ''}\n                clearUser={context ? context.actions.clearUser : ''}\n              />\n            )\n          }}\n        </Context.Consumer>\n      )\n    }\n  }\n\n'Next-GraphQL-Blog/client/pages/index.js'\n:import React, { Component } from 'react'\nimport { Query } from 'react-apollo'\nimport { Transition, animated } from 'react-spring'\n\nimport FeedList from '../components/FeedList'\nimport SearchForm from '../components/SearchForm'\nimport LoadPendingButton from '../components/LoadPendingButton'\nimport FeedLoader from '../components/FeedLoader'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport { NEW_LIKE_SUB, newLikeUpdate } from '../api/subscriptions/newLike'\nimport {\n  NEW_COMMENT_SUB,\n  newCommentUpdate\n} from '../api/subscriptions/newComment'\nimport { NEW_POST_SUB } from '../api/subscriptions/newPost'\n\nimport { POSTS_LIMIT } from '../api/constants'\n\nclass Home extends Component {\n  static async getInitialProps(ctx) {\n    const isFromServer = !!ctx.req\n\n    return {\n      isFromServer\n    }\n  }\n  state = {\n    newPosts: []\n  }\n\n  subscribeToNewLikes = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_LIKE_SUB,\n      updateQuery: (prev, result) => newLikeUpdate(prev, result)\n    })\n\n  subscribeToNewComments = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_COMMENT_SUB,\n      updateQuery: (prev, result) => newCommentUpdate(prev, result)\n    })\n\n  subscribeToNewPosts = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_POST_SUB,\n\n\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev\n\n        const newPost = { ...subscriptionData.data.newPost }\n        newPost.likes = []\n        newPost.comments = []\n\n        this.setState(prevState => {\n          return {\n            newPosts: [newPost, ...prevState.newPosts]\n          }\n        })\n      }\n    })\n\n  fetchMorePosts = (fetchMore, offset) =>\n    fetchMore({\n      variables: { offset },\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prev\n        const newPosts = [\n          ...prev.allPosts.posts,\n          ...fetchMoreResult.allPosts.posts\n        ]\n\n\n\n        const updatedPosts = newPosts.filter(\n          (post, index, self) =>\n            index === self.findIndex(t => t._id === post._id)\n        )\n\n        return {\n          ...prev,\n          allPosts: {\n            __typename: 'PostFeed',\n            count: prev.allPosts.count,\n            posts: updatedPosts\n          }\n        }\n      }\n    })\n\n  loadPendingPosts = () => {\n\n\n\n    const { allPosts } = this.props.client.readQuery({\n      query: ALL_POSTS,\n      variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' }\n    })\n\n    const newPostslength = this.state.newPosts.length\n    allPosts.posts.unshift(...this.state.newPosts)\n\n    this.props.client.writeQuery({\n      query: ALL_POSTS,\n      variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' },\n      data: {\n        allPosts: {\n          __typename: 'PostFeed',\n          count: allPosts.count + newPostslength,\n          posts: [...allPosts.posts]\n        }\n      }\n    })\n    window.scroll(0, 0)\n    this.setState({\n      newPosts: []\n    })\n  }\n\n  render() {\n    return (\n      <Query\n        query={ALL_POSTS}\n        variables={{ sort: '-createdAt', limit: POSTS_LIMIT, offset: 0 }}\n        fetchPolicy=\"cache-and-network\"\n        notifyOnNetworkStatusChange\n      >\n        {({ loading, subscribeToMore, fetchMore, data: { allPosts } }) => {\n          const postLength = allPosts.posts.length\n          const pendingPostLength = this.state.newPosts.length\n          return (\n            <>\n              <Transition\n                from={{ top: '-50px' }}\n                enter={{ top: '50px' }}\n                leave={{ top: '-50px' }}\n              >\n                {!!pendingPostLength &&\n                  (style => (\n                    <LoadPendingButton\n                      style={{ ...style }}\n                      onClick={this.loadPendingPosts}\n                    >\n                      Load {pendingPostLength} new post...\n                    </LoadPendingButton>\n                  ))}\n              </Transition>\n\n              <SearchForm client={this.props.client} />\n\n              <FeedList\n                posts={allPosts.posts}\n                isFromServer={this.props.isFromServer}\n                subscribeToNewLikes={() =>\n                  this.subscribeToNewLikes(subscribeToMore)\n                }\n                subscribeToNewComments={() =>\n                  this.subscribeToNewComments(subscribeToMore)\n                }\n                subscribeToNewPosts={() =>\n                  this.subscribeToNewPosts(subscribeToMore)\n                }\n                hasMorePosts={allPosts.count !== postLength}\n                fetchMore={() => this.fetchMorePosts(fetchMore, postLength)}\n              />\n\n              {loading && <FeedLoader />}\n            </>\n          )\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default Home\n\n'Next-GraphQL-Blog/client/components/FeedList.js'\n:import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport FlipMove from 'react-flip-move'\n\nimport PostCard from './PostCard'\n\nclass FeedList extends Component {\n  componentDidMount() {\n    this.props.subscribeToNewLikes()\n    this.props.subscribeToNewComments()\n    this.props.subscribeToNewPosts()\n  }\n\n  render() {\n    const { posts, fetchMore, hasMorePosts, isFromServer } = this.props\n    return (\n      <Container>\n        <InfiniteScroll\n          dataLength={posts.length}\n          next={fetchMore}\n          hasMore={hasMorePosts}\n          style={{ overflow: 'visible' }}\n        >\n          <FlipMove\n            duration={500}\n            easing=\"ease-in-out\"\n            appearAnimation={isFromServer ? 'none' : 'fade'}\n            enterAnimation=\"accordionHorizontal\"\n            leaveAnimation=\"accordionHorizontal\"\n            typeName=\"ul\"\n            style={{\n              position: 'relative',\n              padding: 0,\n              display: 'flex',\n              flexWrap: 'wrap',\n              justifyContent: 'center'\n            }}\n          >\n            {!!posts.length ? (\n              posts.map((post, index) => (\n                <li key={post._id} style={{ display: 'inline-block' }}>\n                  <PostCard key={post._id} index={index} {...post} />\n                </li>\n              ))\n            ) : (\n              <div>No Posts here... :(</div>\n            )}\n          </FlipMove>\n        </InfiniteScroll>\n      </Container>\n    )\n  }\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1;\n  .ui.card {\n    margin: 15px;\n    width: 310px;\n  }\n  .ui.card:first-child {\n    margin-top: 15px;\n  }\n  .ui.card:last-child {\n    margin-bottom: 15px;\n  }\n`\nexport default FeedList\n",
        "gt": [
            "'Next-GraphQL-Blog/client/lib/withUser.js'",
            "'Next-GraphQL-Blog/client/components/PostCard.js'",
            "'Next-GraphQL-Blog/client/components/FeedList.js'",
            "'Next-GraphQL-Blog/client/pages/index.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/common/constants.js'",
            "'better-onetab/src/common/tabs.js'",
            "'better-onetab/src/background/contextMenus.js'",
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/background/init.js'"
        ],
        "content": "'better-onetab/src/common/constants.js'\n:export const COLORS = [\n  '', 'red', 'pink', 'purple',\n  'indigo', 'blue', 'cyan', 'teal',\n  'green', 'yellow', 'orange', 'brown',\n]\n\nexport const ILLEGAL_URLS = ['about:', 'chrome:', 'file:', 'wss:', 'ws:']\n\nexport const PICKED_TAB_PROPS = ['url', 'title', 'favIconUrl', 'pinned']\nexport const PICKED_LIST_RPOPS = ['_id', 'tabs', 'title', 'tags', 'time', 'pinned', 'expand', 'color', 'updatedAt']\nexport const SYNCED_LIST_PROPS = ['_id', 'tabs', 'title', 'tags', 'time', 'pinned', 'color']\n\nexport const TOKEN_KEY = 'token'\nexport const AUTH_HEADER = 'auth'\n\nexport const END_FRONT = 'front'\nexport const END_BACKGROUND = 'background'\n\nexport const SYNC_SERVICE_URL = DEBUG ? 'http:\nexport const SYNC_MAX_INTERVAL = 864e5\nexport const SYNC_MIN_INTERVAL = 3e5\n\nexport const ADD_LIST = 'addList'\nexport const UPDATE_LIST_BY_ID = 'updateListById'\nexport const REMOVE_LIST_BY_ID = 'removeListById'\nexport const CHANGE_LIST_ORDER = 'changeListOrderRelatively'\n\nexport const SENTRY_DSN = 'https:\n\n'better-onetab/src/common/tabs.js'\n:import storage from './storage'\nimport {createNewTabList} from './list'\nimport _ from 'lodash'\nimport browser from 'webextension-polyfill'\nimport listManager from './listManager'\nimport {ILLEGAL_URLS} from './constants'\nlistManager.init()\n\nconst getAllInWindow = windowId => browser.tabs.query({windowId})\n\nconst openTabLists = async () => {\n\n  const window = await browser.runtime.getBackgroundPage()\n  if (!_.isObject(window.appTabId)) window.appTabId = {}\n  const currentWindow = await browser.windows.getCurrent()\n  const windowId = currentWindow.id\n  const tabListsUrl = browser.runtime.getURL('index.html#/app/')\n  if (windowId in window.appTabId) {\n    const tabs = await getAllInWindow(windowId)\n    const tab = tabs.find(tab => tab.id === window.appTabId[windowId])\n    if (tab) {\n      if (tab.url.startsWith(tabListsUrl)) {\n        return browser.tabs.update(tab.id, { active: true })\n      }\n      delete window.appTabId[windowId]\n    }\n  }\n  const createdTab = await browser.tabs.create({url: tabListsUrl})\n  window.appTabId[windowId] = createdTab.id\n}\n\nconst openAboutPage = () => {\n  window.open(browser.runtime.getURL('index.html#/app/about'))\n}\n\nconst getSelectedTabs = () => browser.tabs.query({highlighted: true, currentWindow: true})\n\nconst getAllTabsInCurrentWindow = async () => {\n  const currentWindow = await browser.windows.getCurrent()\n  return getAllInWindow(currentWindow.id)\n}\n\nconst groupTabsInCurrentWindow = async () => {\n  const tabs = await getAllTabsInCurrentWindow()\n  const result = { left: [], right: [], inter: [], all: tabs }\n  let currentIsRight = false\n  for (const tab of tabs) {\n    if (tab.highlighted) {\n      currentIsRight = true\n      result.inter.push(tab)\n    } else if (currentIsRight) result.right.push(tab)\n    else result.left.push(tab)\n  }\n  result.twoSide = result.left.concat(result.right)\n  return result\n}\n\nconst isLegalURL = url => ILLEGAL_URLS.every(prefix => !url.startsWith(prefix))\n\nconst storeTabs = async (tabs, listIndex) => {\n  const appUrl = browser.runtime.getURL('')\n  tabs = tabs.filter(i => !i.url.startsWith(appUrl))\n  const opts = await storage.getOptions()\n  if (opts.ignorePinned) tabs = tabs.filter(i => !i.pinned)\n  if (opts.excludeIllegalURL) tabs = tabs.filter(i => isLegalURL(i.url))\n  if (tabs.length === 0) return\n  const lists = await storage.getLists()\n  if (listIndex == null) {\n    const newList = createNewTabList({tabs})\n    if (opts.pinNewList) newList.pinned = true\n    await listManager.addList(newList)\n  } else {\n    const list = lists[listIndex]\n    tabs.forEach(tab => list.tabs.push(tab))\n    await listManager.updateListById(list._id, _.pick(list, 'tabs'))\n  }\n  if (opts.addHistory) {\n    for (let i = 0; i < tabs.length; i += 1) {\n\n      try {\n        await browser.history.addUrl({url: tabs[i].url})\n      } catch (e) {\n        console.debug(`${tabs[i].url} cannot be added to history`)\n      }\n    }\n  }\n  return browser.tabs.remove(tabs.map(i => i.id))\n}\n\nconst storeLeftTabs = async listIndex => storeTabs((await groupTabsInCurrentWindow()).left, listIndex)\nconst storeRightTabs = async listIndex => storeTabs((await groupTabsInCurrentWindow()).right, listIndex)\nconst storeTwoSideTabs = async listIndex => storeTabs((await groupTabsInCurrentWindow()).twoSide, listIndex)\n\nconst storeSelectedTabs = async listIndex => {\n  const tabs = await getSelectedTabs()\n  const allTabs = await getAllTabsInCurrentWindow()\n  if (tabs.length === allTabs.length) await openTabLists()\n  return storeTabs(tabs, listIndex)\n}\n\nconst storeAllTabs = async listIndex => {\n  const tabs = await getAllTabsInCurrentWindow()\n  const opts = await storage.getOptions()\n  if (opts.openTabListNoTab) await openTabLists()\n  return storeTabs(tabs, listIndex)\n}\n\nconst storeAllTabInAllWindows = async () => {\n  const windows = await browser.windows.getAll()\n  const opts = await storage.getOptions()\n  if (opts.openTabListNoTab) await openTabLists()\n  const tasks = []\n  for (const window of windows) {\n    const task = getAllInWindow(window.id).then(storeTabs)\n    tasks.push(task)\n  }\n  return Promise.all(tasks)\n}\n\nconst restoreTabs = async (tabs, windowId) => {\n  const opts = await storage.getOptions()\n  let indexOffset = 0\n  if (opts.openEnd) {\n    const tabs = await getAllTabsInCurrentWindow()\n    const {index} = tabs.pop()\n    indexOffset = index + 1\n  }\n  for (let i = 0; i < tabs.length; i += 1) {\n    const tab = tabs[i]\n    const createdTab = await browser.tabs.create({\n      url: tab.url,\n      pinned: tab.pinned,\n      index: i + indexOffset,\n      windowId,\n    })\n    if (tab.muted) browser.tabs.update(createdTab.id, {muted: true})\n  }\n}\n\nconst restoreList = (list, windowId) => restoreTabs(list.tabs, windowId)\n\nconst restoreListInNewWindow = async list => {\n  const createdWindow = await browser.windows.create({url: list.tabs.map(i => i.url)})\n  list.tabs.forEach((tab, index) => {\n    if (tab.muted) browser.tabs.update(createdWindow.tabs[index].id, {muted: true})\n  })\n}\n\nconst restoreLastestList = async () => {\n  const lists = await storage.getLists()\n  if (lists.length === 0) return true\n  const [lastest] = lists\n  await restoreList(lastest)\n  if (lastest.pinned) return true\n  return listManager.removeListById(lastest._id)\n}\n\nexport default {\n  getSelectedTabs,\n  groupTabsInCurrentWindow,\n  storeLeftTabs,\n  storeRightTabs,\n  storeSelectedTabs,\n  storeTwoSideTabs,\n  storeAllTabs,\n  storeAllTabInAllWindows,\n  restoreTabs,\n  restoreList,\n  restoreListInNewWindow,\n  restoreLastestList,\n  openTabLists,\n  openAboutPage,\n}\n\n'better-onetab/src/background/contextMenus.js'\n:import _ from 'lodash'\nimport __ from '../common/i18n'\nimport tabs from '../common/tabs'\nimport storage from '../common/storage'\nimport browser from 'webextension-polyfill'\n\nconst menus = {\n  SHOW_TAB_LIST: tabs.openTabLists,\n  STORE_SELECTED_TABS: tabs.storeSelectedTabs,\n  STORE: {\n    STORE_ALL_TABS_IN_CURRENT_WINDOW: tabs.storeAllTabs,\n    STORE_ALL_TABS_IN_ALL_WINDOWS: tabs.storeAllTabInAllWindows,\n    STORE_LEFT_TABS: tabs.storeLeftTabs,\n    STORE_RIGHT_TABS: tabs.storeRightTabs,\n    STORE_TWOSIDE_TABS: tabs.storeTwoSideTabs,\n  },\n  STORE_TO_TITLED_LIST: {\n    STORE_SELECTED_TABS: tabs.storeSelectedTabs,\n    STORE_ALL_TABS_IN_CURRENT_WINDOW: tabs.storeAllTabs,\n    STORE_LEFT_TABS: tabs.storeLeftTabs,\n    STORE_RIGHT_TABS: tabs.storeRightTabs,\n    STORE_TWOSIDE_TABS: tabs.storeTwoSideTabs,\n  }\n}\n\nexport const dynamicDisableMenu = async lists => {\n  const groupedTabs = await tabs.groupTabsInCurrentWindow()\n  const windows = await browser.windows.getAll()\n  browser.contextMenus.update('STORE.STORE_LEFT_TABS', {\n    enabled: groupedTabs.left.length !== 0,\n    title: __('menu_STORE_LEFT_TABS') + ` (${groupedTabs.left.length})`,\n  })\n  browser.contextMenus.update('STORE.STORE_RIGHT_TABS', {\n    enabled: groupedTabs.right.length !== 0,\n    title: __('menu_STORE_RIGHT_TABS') + ` (${groupedTabs.right.length})`,\n  })\n  browser.contextMenus.update('STORE.STORE_TWOSIDE_TABS', {\n    enabled: groupedTabs.twoSide.length !== 0,\n    title: __('menu_STORE_TWOSIDE_TABS') + ` (${groupedTabs.twoSide.length})`,\n  })\n  browser.contextMenus.update('STORE.STORE_ALL_TABS_IN_ALL_WINDOWS', {\n    enabled: windows.length > 1,\n  })\n  browser.contextMenus.update('STORE.STORE_ALL_TABS_IN_CURRENT_WINDOW', {\n    title: __('menu_STORE_ALL_TABS_IN_CURRENT_WINDOW') + ` (${groupedTabs.all.length})`,\n  })\n  browser.contextMenus.update('STORE_SELECTED_TABS', {\n    title: __('menu_STORE_SELECTED_TABS') + ` (${groupedTabs.inter.length})`,\n  })\n  lists = lists || await storage.getLists()\n  for (let i = 0; i < lists.length; i += 1) {\n    if (!lists[i].title) continue\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_LEFT_TABS|' + i, {\n      enabled: groupedTabs.left.length !== 0,\n      title: __('menu_STORE_LEFT_TABS') + ` (${groupedTabs.left.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_RIGHT_TABS|' + i, {\n      enabled: groupedTabs.right.length !== 0,\n      title: __('menu_STORE_RIGHT_TABS') + ` (${groupedTabs.right.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_TWOSIDE_TABS|' + i, {\n      enabled: groupedTabs.twoSide.length !== 0,\n      title: __('menu_STORE_TWOSIDE_TABS') + ` (${groupedTabs.twoSide.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_ALL_TABS_IN_CURRENT_WINDOW|' + i, {\n      title: __('menu_STORE_ALL_TABS_IN_CURRENT_WINDOW') + ` (${groupedTabs.all.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_SELECTED_TABS|' + i, {\n      title: __('menu_STORE_SELECTED_TABS') + ` (${groupedTabs.inter.length})`,\n    })\n  }\n}\n\nconst createMenus = async (obj, parent, contexts, lists) => {\n  if (obj === menus.STORE_TO_TITLED_LIST) {\n    if (window.opts.disableDynamicMenu) return\n    for (let listIndex = 0; listIndex < lists.length; listIndex += 1) {\n      if (!lists[listIndex].title) continue\n      const prop = {\n        id: 'STORE_TO_TITLED_LIST|' + listIndex,\n        title: lists[listIndex].title,\n        contexts,\n        parentId: 'STORE_TO_TITLED_LIST',\n      }\n      const id = await browser.contextMenus.create(prop)\n      console.log('context menu created: ' + id)\n      for (const key in obj) {\n        const prop = {\n          id: 'STORE_TO_TITLED_LIST.' + key + '|' + listIndex,\n          title: __('menu_' + key),\n          contexts,\n          parentId: id,\n        }\n        const childId = await browser.contextMenus.create(prop)\n        console.log('context menu created: ' + childId)\n      }\n    }\n  } else {\n    for (const key of Object.keys(obj)) {\n      const prop = {\n        id: key,\n        title: __('menu_' + key),\n        contexts,\n      }\n      if (parent) {\n        prop.id = parent + '.' + key\n        prop.parentId = parent\n      }\n      const id = await browser.contextMenus.create(prop)\n      console.log('context menu created: ' + id)\n      if (_.isObject(obj[key])) await createMenus(obj[key], key, contexts, lists)\n    }\n  }\n}\n\nexport const setupContextMenus = async ({pageContext, allContext}) => {\n  await browser.contextMenus.removeAll()\n  const contexts = [browser.contextMenus.ContextType.BROWSER_ACTION]\n  if (pageContext) {\n    contexts.push(browser.contextMenus.ContextType.PAGE)\n    if (allContext) contexts.push(browser.contextMenus.ContextType.ALL)\n  }\n  const lists = await storage.getLists()\n  window.contextMenusClickedHandler = info => {\n    console.log('context menu clicked', info.menuItemId)\n    if (info.menuItemId.startsWith('STORE_TO_TITLED_LIST')) {\n      const [key, listIndex] = info.menuItemId.split('|')\n      _.get(menus, key)(+listIndex)\n      if (PRODUCTION) ga('send', 'event', 'Menu clicked', key)\n    } else {\n      _.get(menus, info.menuItemId)()\n      if (PRODUCTION) ga('send', 'event', 'Menu clicked', info.menuItemId)\n    }\n  }\n  console.groupCollapsed('create context menu', contexts)\n  await createMenus(menus, null, contexts, lists)\n  console.groupEnd('create context menu')\n  dynamicDisableMenu(lists)\n}\n\n'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n",
        "gt": [
            "'better-onetab/src/common/constants.js'",
            "'better-onetab/src/common/tabs.js'",
            "'better-onetab/src/background/contextMenus.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'Next-GraphQL-Blog/client/components/CommentList.js'",
            "'Next-GraphQL-Blog/client/pages/index.js'",
            "'Next-GraphQL-Blog/client/components/PostCard.js'",
            "'Next-GraphQL-Blog/client/lib/withUser.js'",
            "'Next-GraphQL-Blog/client/context.js'",
            "'Next-GraphQL-Blog/client/components/FeedList.js'"
        ],
        "content": "'Next-GraphQL-Blog/client/components/CommentList.js'\n:import React, { Component } from 'react'\nimport { Comment, Input } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport { Mutation, Query } from 'react-apollo'\nimport ReactDOM from 'react-dom'\n\nimport withUser from '../lib/withUser'\nimport { showErrorAlert } from '../lib/alerts'\nimport parseError from '../lib/parseError'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport {\n  COMMENT_POST,\n  commentPostOptions\n} from '../api/mutations/comment/commentPost'\n\nclass CommentList extends Component {\n  state = {\n    input: ''\n  }\n\n  componentDidMount() {\n    this.scrollToBottom()\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom()\n  }\n\n  writeComment = (e, commentPost) => {\n    e.preventDefault()\n    const { input } = this.state\n    if (!input) return\n\n    commentPost(commentPostOptions(this.props, input)).catch(e =>\n      showErrorAlert(parseError(e.message))\n    )\n\n    this.setState({\n      input: ''\n    })\n  }\n\n  handleChange = e => {\n    this.setState({\n      input: e.target.value\n    })\n  }\n\n  scrollToBottom = () => {\n    const messagesContainer = ReactDOM.findDOMNode(this.messageList)\n    messagesContainer.scrollTop = messagesContainer.scrollHeight\n  }\n\n  render() {\n    const { postId, user, comments } = this.props\n    return (\n      <Mutation\n        mutation={COMMENT_POST}\n        variables={{ postId: postId, text: this.state.input }}\n      >\n        {(commentPost, { loading, error, data }) => (\n          <CommentContainer>\n            <StyledList\n              ref={node => {\n                this.messageList = node\n              }}\n            >\n              {comments.map(comment => {\n                return (\n                  <Comment key={comment._id}>\n                    <Comment.Content>\n                      <Comment.Author as=\"a\">\n                        {comment.commentedBy.name}\n                      </Comment.Author>\n                      <Comment.Metadata>\n                        <div>\n                          {moment(new Date(comment.createdAt)).fromNow()}\n                        </div>\n                      </Comment.Metadata>\n                      <Comment.Text>{comment.text}</Comment.Text>\n                    </Comment.Content>\n                  </Comment>\n                )\n              })}\n              <div\n                style={{ float: 'left', clear: 'both' }}\n                ref={el => {\n                  this.messagesEnd = el\n                }}\n              />\n            </StyledList>\n\n            <form onSubmit={e => this.writeComment(e, commentPost)}>\n              <Input\n                action=\"Comment\"\n                value={this.state.input}\n                onChange={this.handleChange}\n                placeholder=\"Write a comment...\"\n              />\n            </form>\n          </CommentContainer>\n        )}\n      </Mutation>\n    )\n  }\n}\n\nexport default withUser(CommentList)\n\nconst CommentContainer = styled(Comment.Group)`\n  &&& {\n    padding: 14px;\n    margin: 0;\n    position: absolute;\n    background: #ffffff;\n    border-radius: 5px;\n    border-radius: 5px;\n    box-shadow: 0px 7px 8px 0px #00000047;\n    top: 100%;\n    z-index: 10;\n  }\n`\n\nconst StyledList = styled.div`\n  overflow-y: auto;\n  max-height: 180px;\n`\n\n'Next-GraphQL-Blog/client/pages/index.js'\n:import React, { Component } from 'react'\nimport { Query } from 'react-apollo'\nimport { Transition, animated } from 'react-spring'\n\nimport FeedList from '../components/FeedList'\nimport SearchForm from '../components/SearchForm'\nimport LoadPendingButton from '../components/LoadPendingButton'\nimport FeedLoader from '../components/FeedLoader'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport { NEW_LIKE_SUB, newLikeUpdate } from '../api/subscriptions/newLike'\nimport {\n  NEW_COMMENT_SUB,\n  newCommentUpdate\n} from '../api/subscriptions/newComment'\nimport { NEW_POST_SUB } from '../api/subscriptions/newPost'\n\nimport { POSTS_LIMIT } from '../api/constants'\n\nclass Home extends Component {\n  static async getInitialProps(ctx) {\n    const isFromServer = !!ctx.req\n\n    return {\n      isFromServer\n    }\n  }\n  state = {\n    newPosts: []\n  }\n\n  subscribeToNewLikes = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_LIKE_SUB,\n      updateQuery: (prev, result) => newLikeUpdate(prev, result)\n    })\n\n  subscribeToNewComments = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_COMMENT_SUB,\n      updateQuery: (prev, result) => newCommentUpdate(prev, result)\n    })\n\n  subscribeToNewPosts = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_POST_SUB,\n\n\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev\n\n        const newPost = { ...subscriptionData.data.newPost }\n        newPost.likes = []\n        newPost.comments = []\n\n        this.setState(prevState => {\n          return {\n            newPosts: [newPost, ...prevState.newPosts]\n          }\n        })\n      }\n    })\n\n  fetchMorePosts = (fetchMore, offset) =>\n    fetchMore({\n      variables: { offset },\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prev\n        const newPosts = [\n          ...prev.allPosts.posts,\n          ...fetchMoreResult.allPosts.posts\n        ]\n\n\n\n        const updatedPosts = newPosts.filter(\n          (post, index, self) =>\n            index === self.findIndex(t => t._id === post._id)\n        )\n\n        return {\n          ...prev,\n          allPosts: {\n            __typename: 'PostFeed',\n            count: prev.allPosts.count,\n            posts: updatedPosts\n          }\n        }\n      }\n    })\n\n  loadPendingPosts = () => {\n\n\n\n    const { allPosts } = this.props.client.readQuery({\n      query: ALL_POSTS,\n      variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' }\n    })\n\n    const newPostslength = this.state.newPosts.length\n    allPosts.posts.unshift(...this.state.newPosts)\n\n    this.props.client.writeQuery({\n      query: ALL_POSTS,\n      variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' },\n      data: {\n        allPosts: {\n          __typename: 'PostFeed',\n          count: allPosts.count + newPostslength,\n          posts: [...allPosts.posts]\n        }\n      }\n    })\n    window.scroll(0, 0)\n    this.setState({\n      newPosts: []\n    })\n  }\n\n  render() {\n    return (\n      <Query\n        query={ALL_POSTS}\n        variables={{ sort: '-createdAt', limit: POSTS_LIMIT, offset: 0 }}\n        fetchPolicy=\"cache-and-network\"\n        notifyOnNetworkStatusChange\n      >\n        {({ loading, subscribeToMore, fetchMore, data: { allPosts } }) => {\n          const postLength = allPosts.posts.length\n          const pendingPostLength = this.state.newPosts.length\n          return (\n            <>\n              <Transition\n                from={{ top: '-50px' }}\n                enter={{ top: '50px' }}\n                leave={{ top: '-50px' }}\n              >\n                {!!pendingPostLength &&\n                  (style => (\n                    <LoadPendingButton\n                      style={{ ...style }}\n                      onClick={this.loadPendingPosts}\n                    >\n                      Load {pendingPostLength} new post...\n                    </LoadPendingButton>\n                  ))}\n              </Transition>\n\n              <SearchForm client={this.props.client} />\n\n              <FeedList\n                posts={allPosts.posts}\n                isFromServer={this.props.isFromServer}\n                subscribeToNewLikes={() =>\n                  this.subscribeToNewLikes(subscribeToMore)\n                }\n                subscribeToNewComments={() =>\n                  this.subscribeToNewComments(subscribeToMore)\n                }\n                subscribeToNewPosts={() =>\n                  this.subscribeToNewPosts(subscribeToMore)\n                }\n                hasMorePosts={allPosts.count !== postLength}\n                fetchMore={() => this.fetchMorePosts(fetchMore, postLength)}\n              />\n\n              {loading && <FeedLoader />}\n            </>\n          )\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default Home\n\n'Next-GraphQL-Blog/client/components/PostCard.js'\n:import React, { Component } from 'react'\nimport { Card, Icon, Image, Divider } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { Query, Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport { LIKE_POST, likePostOptions } from '../api/mutations/like/likePost'\nimport {\n  DELETE_POST,\n  deletePostOptions\n} from '../api/mutations/post/deletePost'\n\nimport withUser from '../lib/withUser'\nimport parseError from '../lib/parseError'\nimport { showSuccessAlert, showErrorAlert } from '../lib/alerts'\n\nimport CommentList from './CommentList'\n\nclass PostCard extends Component {\n  state = {\n    showComments: false\n  }\n\n  toggleComments = () => {\n    this.setState({\n      showComments: !this.state.showComments\n    })\n  }\n\n  render() {\n    const { showComments } = this.state\n    const {\n      _id,\n      name,\n      content,\n      postedBy,\n      likes,\n      comments,\n      createdAt,\n      image,\n      user\n    } = this.props\n\n    return (\n      <Mutation mutation={LIKE_POST} variables={{ postId: _id }}>\n        {likePost => (\n          <Mutation mutation={DELETE_POST} variables={{ _id: _id }}>\n            {deletePost => (\n              <StyledCard props={{ showComments }}>\n                {user &&\n                  user._id === postedBy._id && (\n                    <RemoveIcon\n                      name=\"remove\"\n                      onClick={() => {\n                        deletePost(deletePostOptions(this.props)).then(() =>\n                          showSuccessAlert('Post was deleted!')\n                        )\n                      }}\n                    />\n                  )}\n\n                <StyledImage\n                  src={image ? image : '/static/blog-placeholder.jpg'}\n                />\n\n                <Card.Content>\n                  <Card.Header style={ellipsisStyle}>{name}</Card.Header>\n                  <Card.Meta style={ellipsisStyle}>\n                    By {postedBy.name}\n                  </Card.Meta>\n                  <Card.Description style={ellipsisStyle}>\n                    {content}\n                  </Card.Description>\n                </Card.Content>\n\n                <BottomSection extra>\n                  <a onClick={this.toggleComments}>\n                    <Icon name=\"comment\" />\n                    {comments.length} Comments\n                  </a>\n                  <a\n                    onClick={() => {\n                      likePost(likePostOptions(this.props))\n                        .then(() => showSuccessAlert('You liked a Post!'))\n                        .catch(e => showErrorAlert(parseError(e.message)))\n                    }}\n                  >\n                    <Icon name=\"like\" />\n                    {likes.length} Likes\n                  </a>\n                </BottomSection>\n\n                {showComments && (\n                  <CommentList comments={comments} postId={_id} />\n                )}\n              </StyledCard>\n            )}\n          </Mutation>\n        )}\n      </Mutation>\n    )\n  }\n}\n\nconst StyledCard = styled(Card)`\n  &&& {\n    height: ${props => (props.props.showComments ? 'auto' : '325px')};\n    box-shadow: 0px 3px 25px 2px #00000014;\n    border-bottom-left-radius: 0px;\n    border-bottom-right-radius: 0px;\n  }\n`\n\nconst BottomSection = styled(Card.Content)`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst RemoveIcon = styled(Icon)`\n  &&& {\n    font-size: 18px;\n    position: absolute;\n    top: 5px;\n    z-index: 9;\n    right: 0;\n    cursor: pointer;\n    transition: 0.2s all ease;\n    &:hover {\n      font-size: 22px;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  &&& {\n    height: 191px;\n    object-fit: cover;\n  }\n`\n\nconst ellipsisStyle = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden'\n}\n\nexport default withUser(PostCard)\n\n'Next-GraphQL-Blog/client/lib/withUser.js'\n:import React from 'react'\n\nimport { Context } from '../context'\n\nexport default Page =>\n  class BaseComponent extends React.Component {\n    static async getInitialProps(ctx) {\n      const props = {}\n\n      if (Page.getInitialProps) {\n        Object.assign(props, (await Page.getInitialProps(ctx)) || {})\n      }\n      return props\n    }\n\n    render() {\n      return (\n        <Context.Consumer>\n          {context => {\n            return (\n              <Page\n                {...this.props}\n                user={context ? context.state.user : ''}\n                setUser={context ? context.actions.setUser : ''}\n                clearUser={context ? context.actions.clearUser : ''}\n              />\n            )\n          }}\n        </Context.Consumer>\n      )\n    }\n  }\n\n'Next-GraphQL-Blog/client/context.js'\n:import React, { Component } from 'react'\n\nexport const Context = React.createContext()\n\nclass ContextProvider extends Component {\n  state = {\n    user: {\n      _id: '',\n      email: '',\n      name: '',\n      googleId: ''\n    }\n  }\n\n  componentDidMount() {\n    const user = JSON.parse(localStorage.getItem('user'))\n    this.setState(prevState => ({\n      user: { ...prevState.user, ...user }\n    }))\n  }\n\n  setUser = user => {\n    this.setState(prevState => ({\n      user: { ...prevState.user, ...user }\n    }))\n  }\n\n  clearUser = () => {\n    this.setState({\n      user: {\n        _id: '',\n        email: '',\n        name: '',\n        googleId: ''\n      }\n    })\n  }\n\n  render() {\n    return (\n      <Context.Provider\n        value={{\n          state: this.state,\n          actions: { setUser: this.setUser, clearUser: this.clearUser }\n        }}\n      >\n        {this.props.children}\n      </Context.Provider>\n    )\n  }\n}\n\nexport default ContextProvider\n\n'Next-GraphQL-Blog/client/components/FeedList.js'\n:import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport FlipMove from 'react-flip-move'\n\nimport PostCard from './PostCard'\n\nclass FeedList extends Component {\n  componentDidMount() {\n    this.props.subscribeToNewLikes()\n    this.props.subscribeToNewComments()\n    this.props.subscribeToNewPosts()\n  }\n\n  render() {\n    const { posts, fetchMore, hasMorePosts, isFromServer } = this.props\n    return (\n      <Container>\n        <InfiniteScroll\n          dataLength={posts.length}\n          next={fetchMore}\n          hasMore={hasMorePosts}\n          style={{ overflow: 'visible' }}\n        >\n          <FlipMove\n            duration={500}\n            easing=\"ease-in-out\"\n            appearAnimation={isFromServer ? 'none' : 'fade'}\n            enterAnimation=\"accordionHorizontal\"\n            leaveAnimation=\"accordionHorizontal\"\n            typeName=\"ul\"\n            style={{\n              position: 'relative',\n              padding: 0,\n              display: 'flex',\n              flexWrap: 'wrap',\n              justifyContent: 'center'\n            }}\n          >\n            {!!posts.length ? (\n              posts.map((post, index) => (\n                <li key={post._id} style={{ display: 'inline-block' }}>\n                  <PostCard key={post._id} index={index} {...post} />\n                </li>\n              ))\n            ) : (\n              <div>No Posts here... :(</div>\n            )}\n          </FlipMove>\n        </InfiniteScroll>\n      </Container>\n    )\n  }\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1;\n  .ui.card {\n    margin: 15px;\n    width: 310px;\n  }\n  .ui.card:first-child {\n    margin-top: 15px;\n  }\n  .ui.card:last-child {\n    margin-bottom: 15px;\n  }\n`\nexport default FeedList\n",
        "gt": [
            "'Next-GraphQL-Blog/client/context.js'",
            "'Next-GraphQL-Blog/client/lib/withUser.js'",
            "'Next-GraphQL-Blog/client/components/CommentList.js'",
            "'Next-GraphQL-Blog/client/components/PostCard.js'",
            "'Next-GraphQL-Blog/client/components/FeedList.js'",
            "'Next-GraphQL-Blog/client/pages/index.js'"
        ]
    },
    {
        "files": [
            "'Ahoy/src/components/LocalChart.jsx'",
            "'Ahoy/src/containers/MainContainer.jsx'",
            "'Ahoy/src/index.js'",
            "'Ahoy/src/App.jsx'",
            "'Ahoy/src/components/LocalChartList.jsx'",
            "'Ahoy/src/containers/LocalChartContainer.jsx'"
        ],
        "content": "'Ahoy/src/components/LocalChart.jsx'\n:import React, { useState } from 'react';\nimport {\n  Table, Button, Input, Label,\n} from 'semantic-ui-react';\n\nconst util = require('util');\nconst exec = util.promisify(require('child_process').exec);\n\n\nconst LocalChart = (props) => {\n  const { chart, handleOpenChartClick } = props;\n  const [alertInvalidInput, setAlertInvalidInput] = useState('');\n  let chartInstName = '';\n\n\n  function setName(e) {\n    chartInstName = e.target.value;\n    setAlertInvalidInput('');\n  }\n\n\n  function sanitizeInput(text) {\n\n    const name = text.trim();\n    if (text === '') {\n      return props.chart.name;\n    }\n\n    const regex = /^[a-z0-9-]+$/;\n\n    if (regex.test(name)) {\n      return name;\n    }\n\n    return 'invalid input';\n  }\n\n\n  const installHelmChart = async () => {\n    const helmChart = sanitizeInput(chartInstName);\n\n    if (helmChart === 'invalid input') {\n      setAlertInvalidInput(<Label pointing=\"left\" color=\"red\">Invalid input</Label>);\n    } else {\n\n      const directory = props.dirPath;\n      setAlertInvalidInput('');\n\n      await exec(`helm install ${helmChart} \"${directory}\"`);\n      props.getDeployedCharts();\n    }\n  };\n\n\n  const openChartButton = <Button id=\"openChartBtn\" icon=\"folder open\" size=\"tiny\" compact onClick={() => handleOpenChartClick(chart.name)} />;\n  const installButton = <Button id=\"installBtn\" size=\"tiny\" compact onClick={() => installHelmChart()}>Install</Button>;\n\n\n  return (\n    <Table.Row>\n      <Table.Cell>{chart.name}</Table.Cell>\n      <Table.Cell colSpan=\"2\">\n        <Input\n          focus\n          placeholder={chart.name}\n          onBlur={setName}\n          size=\"mini\"\n        />\n        {alertInvalidInput}\n      </Table.Cell>\n      <Table.Cell>\n        <div className=\"float-right\">\n          {installButton}\n          {' '}\n          {openChartButton}\n        </div>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default LocalChart;\n\n'Ahoy/src/containers/MainContainer.jsx'\n:import React, { Component } from 'react';\nimport LocalChartContainer from './LocalChartContainer';\nimport InstalledChartContainer from './InstalledChartContainer';\nimport getDeployedHelmCharts from '../helpers/getDeployedHelmCharts';\nimport getHelmHistory from '../helpers/getHelmHistory';\nimport doHelmRollBack from '../helpers/doHelmRollBack';\n\nconst path = require('path');\nconst { getLocalCharts } = require('../helpers/FileSystemHelper');\n\nconst { ipcRenderer } = window.require('electron');\n\n\nclass MainContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userDataDir: null,\n      userChartDir: null,\n      localCharts: [],\n      deployedCharts: [],\n    };\n\n    ipcRenderer.invoke('getPath', 'userData').then((result) => {\n      this.setState({\n        userDataDir: result,\n        userChartDir: path.join(result, 'charts'),\n      });\n    });\n\n    this.getHelmCharts = this.getHelmCharts.bind(this);\n    this.getHistory = this.getHistory.bind(this);\n    this.toggleHistory = this.toggleHistory.bind(this);\n    this.doHelmChartRollBack = this.doHelmChartRollBack.bind(this);\n  }\n\n\n  componentDidMount() {\n    this.getHelmCharts();\n  }\n\n  componentDidUpdate() {\n    const { userDataDir, userChartDir, localCharts } = this.state;\n    if (userDataDir && localCharts.length === 0) {\n      getLocalCharts(userChartDir).then((result) => {\n        this.setState({\n          localCharts: result,\n        });\n        return result;\n      });\n    }\n  }\n\n\n  getHelmCharts() {\n    getDeployedHelmCharts()\n      .then((result) => JSON.parse(result))\n      .then((charts) => {\n        const deployedCharts = charts;\n        for (let i = 0; i < deployedCharts.length; i++) {\n          deployedCharts[i].history = [];\n          deployedCharts[i].historyClicked = false;\n        }\n        this.setState({\n          deployedCharts,\n        });\n      });\n  }\n\n\n  getHistory(currentChart) {\n    getHelmHistory(currentChart)\n      .then((result) => JSON.parse(result))\n      .then((versions) => {\n        const { deployedCharts } = this.state;\n        for (let i = 0; i < deployedCharts.length; i++) {\n          if (deployedCharts[i].name === currentChart) {\n            const updatedCharts = deployedCharts;\n            updatedCharts[i].history = versions;\n            this.setState({\n              deployedCharts: updatedCharts,\n            });\n          }\n        }\n      });\n  }\n\n\n  toggleHistory(chartName) {\n    const { deployedCharts } = this.state;\n    for (let i = 0; i < deployedCharts.length; i++) {\n      if (deployedCharts[i].name === chartName) {\n        if (deployedCharts[i].historyClicked) {\n          deployedCharts[i].historyClicked = false;\n          deployedCharts[i].history = [];\n        } else {\n          deployedCharts[i].historyClicked = true;\n          this.getHistory(chartName);\n        }\n        this.setState({\n          deployedCharts,\n        });\n      }\n    }\n  }\n\n\n  doHelmChartRollBack(release, version) {\n    doHelmRollBack(release, version)\n      .then((result) => console.log(result))\n      .then(this.getHelmCharts())\n      .then('Successfully rolled back!');\n  }\n\n  render() {\n    const {\n      userChartDir, localCharts, deployedCharts,\n    } = this.state;\n    return (\n      <>\n        <LocalChartContainer\n          userChartDir={userChartDir}\n          localCharts={localCharts}\n          getDeployedCharts={this.getHelmCharts}\n        />\n        <InstalledChartContainer\n          deployedCharts={deployedCharts}\n          getDeployedCharts={this.getHelmCharts}\n          toggleHistory={this.toggleHistory}\n          doHelmChartRollBack={this.doHelmChartRollBack}\n        />\n      </>\n    );\n  }\n}\n\nexport default MainContainer;\n\n'Ahoy/src/index.js'\n:import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\n\n\n\nconst root = document.createElement('div');\n\nroot.id = 'root';\ndocument.body.appendChild(root);\n\n\nrender(<App />, document.getElementById('root'));\n'Ahoy/src/App.jsx'\n:import React from 'react';\nimport MainContainer from './containers/MainContainer';\nimport 'semantic-ui-css/semantic.min.css';\nimport './assets/css/App.css';\n\nfunction App() {\n  return (\n    <MainContainer />\n  );\n}\n\nexport default App;\n'Ahoy/src/components/LocalChartList.jsx'\n:import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport LocalChart from './LocalChart';\n\nconst path = require('path');\n\nconst LocalChartList = (props) => {\n  const { localCharts, handleOpenChartClick, getDeployedCharts } = props;\n  const lcharts = [];\n\n  localCharts.forEach((item, i) => {\n    const dirPath = path.join(props.userChartDir, item.name);\n    lcharts.push(<LocalChart\n      chart={item}\n      id={i}\n      key={i}\n      dirPath={dirPath}\n      getDeployedCharts={getDeployedCharts}\n      handleOpenChartClick={handleOpenChartClick}\n    />);\n  });\n\n  return (\n    <Table fixed singleLine stackable>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell colSpan=\"1\">Available Charts</Table.HeaderCell>\n          <Table.HeaderCell colSpan=\"3\">Install Name</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>{lcharts}</Table.Body>\n    </Table>\n  );\n};\n\nexport default LocalChartList;\n\n'Ahoy/src/containers/LocalChartContainer.jsx'\n:import React, { Component } from 'react';\nimport path from 'path';\nimport LocalChartList from '../components/LocalChartList';\n\nconst { shell } = require('electron');\n\nclass LocalChartContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.handleOpenChartClick = this.handleOpenChartClick.bind(this);\n  }\n\n  handleOpenChartClick(chartName) {\n    const { userChartDir } = this.props;\n    const pathToOpen = path.join(userChartDir, chartName);\n    shell.openPath(pathToOpen);\n  }\n\n  render() {\n    const {\n      localCharts, userChartDir, getDeployedCharts,\n    } = this.props;\n\n    return (\n      <div className=\"outer-container\">\n        <LocalChartList\n          localCharts={localCharts}\n          userChartDir={userChartDir}\n          getDeployedCharts={getDeployedCharts}\n          handleOpenChartClick={this.handleOpenChartClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default LocalChartContainer;\n",
        "gt": [
            "'Ahoy/src/components/LocalChart.jsx'",
            "'Ahoy/src/components/LocalChartList.jsx'",
            "'Ahoy/src/containers/LocalChartContainer.jsx'",
            "'Ahoy/src/containers/MainContainer.jsx'",
            "'Ahoy/src/App.jsx'",
            "'Ahoy/src/index.js'"
        ]
    },
    {
        "files": [
            "'Ahoy/src/components/LocalChart.jsx'",
            "'Ahoy/src/containers/MainContainer.jsx'",
            "'Ahoy/src/index.js'",
            "'Ahoy/src/App.jsx'",
            "'Ahoy/src/components/LocalChartList.jsx'",
            "'Ahoy/src/containers/LocalChartContainer.jsx'"
        ],
        "content": "'Ahoy/src/components/LocalChart.jsx'\n:import React, { useState } from 'react';\nimport {\n  Table, Button, Input, Label,\n} from 'semantic-ui-react';\n\nconst util = require('util');\nconst exec = util.promisify(require('child_process').exec);\n\n\nconst LocalChart = (props) => {\n  const { chart, handleOpenChartClick } = props;\n  const [alertInvalidInput, setAlertInvalidInput] = useState('');\n  let chartInstName = '';\n\n\n  function setName(e) {\n    chartInstName = e.target.value;\n    setAlertInvalidInput('');\n  }\n\n\n  function sanitizeInput(text) {\n\n    const name = text.trim();\n    if (text === '') {\n      return props.chart.name;\n    }\n\n    const regex = /^[a-z0-9-]+$/;\n\n    if (regex.test(name)) {\n      return name;\n    }\n\n    return 'invalid input';\n  }\n\n\n  const installHelmChart = async () => {\n    const helmChart = sanitizeInput(chartInstName);\n\n    if (helmChart === 'invalid input') {\n      setAlertInvalidInput(<Label pointing=\"left\" color=\"red\">Invalid input</Label>);\n    } else {\n\n      const directory = props.dirPath;\n      setAlertInvalidInput('');\n\n      await exec(`helm install ${helmChart} \"${directory}\"`);\n      props.getDeployedCharts();\n    }\n  };\n\n\n  const openChartButton = <Button id=\"openChartBtn\" icon=\"folder open\" size=\"tiny\" compact onClick={() => handleOpenChartClick(chart.name)} />;\n  const installButton = <Button id=\"installBtn\" size=\"tiny\" compact onClick={() => installHelmChart()}>Install</Button>;\n\n\n  return (\n    <Table.Row>\n      <Table.Cell>{chart.name}</Table.Cell>\n      <Table.Cell colSpan=\"2\">\n        <Input\n          focus\n          placeholder={chart.name}\n          onBlur={setName}\n          size=\"mini\"\n        />\n        {alertInvalidInput}\n      </Table.Cell>\n      <Table.Cell>\n        <div className=\"float-right\">\n          {installButton}\n          {' '}\n          {openChartButton}\n        </div>\n      </Table.Cell>\n    </Table.Row>\n  );\n};\n\nexport default LocalChart;\n\n'Ahoy/src/containers/MainContainer.jsx'\n:import React, { Component } from 'react';\nimport LocalChartContainer from './LocalChartContainer';\nimport InstalledChartContainer from './InstalledChartContainer';\nimport getDeployedHelmCharts from '../helpers/getDeployedHelmCharts';\nimport getHelmHistory from '../helpers/getHelmHistory';\nimport doHelmRollBack from '../helpers/doHelmRollBack';\n\nconst path = require('path');\nconst { getLocalCharts } = require('../helpers/FileSystemHelper');\n\nconst { ipcRenderer } = window.require('electron');\n\n\nclass MainContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userDataDir: null,\n      userChartDir: null,\n      localCharts: [],\n      deployedCharts: [],\n    };\n\n    ipcRenderer.invoke('getPath', 'userData').then((result) => {\n      this.setState({\n        userDataDir: result,\n        userChartDir: path.join(result, 'charts'),\n      });\n    });\n\n    this.getHelmCharts = this.getHelmCharts.bind(this);\n    this.getHistory = this.getHistory.bind(this);\n    this.toggleHistory = this.toggleHistory.bind(this);\n    this.doHelmChartRollBack = this.doHelmChartRollBack.bind(this);\n  }\n\n\n  componentDidMount() {\n    this.getHelmCharts();\n  }\n\n  componentDidUpdate() {\n    const { userDataDir, userChartDir, localCharts } = this.state;\n    if (userDataDir && localCharts.length === 0) {\n      getLocalCharts(userChartDir).then((result) => {\n        this.setState({\n          localCharts: result,\n        });\n        return result;\n      });\n    }\n  }\n\n\n  getHelmCharts() {\n    getDeployedHelmCharts()\n      .then((result) => JSON.parse(result))\n      .then((charts) => {\n        const deployedCharts = charts;\n        for (let i = 0; i < deployedCharts.length; i++) {\n          deployedCharts[i].history = [];\n          deployedCharts[i].historyClicked = false;\n        }\n        this.setState({\n          deployedCharts,\n        });\n      });\n  }\n\n\n  getHistory(currentChart) {\n    getHelmHistory(currentChart)\n      .then((result) => JSON.parse(result))\n      .then((versions) => {\n        const { deployedCharts } = this.state;\n        for (let i = 0; i < deployedCharts.length; i++) {\n          if (deployedCharts[i].name === currentChart) {\n            const updatedCharts = deployedCharts;\n            updatedCharts[i].history = versions;\n            this.setState({\n              deployedCharts: updatedCharts,\n            });\n          }\n        }\n      });\n  }\n\n\n  toggleHistory(chartName) {\n    const { deployedCharts } = this.state;\n    for (let i = 0; i < deployedCharts.length; i++) {\n      if (deployedCharts[i].name === chartName) {\n        if (deployedCharts[i].historyClicked) {\n          deployedCharts[i].historyClicked = false;\n          deployedCharts[i].history = [];\n        } else {\n          deployedCharts[i].historyClicked = true;\n          this.getHistory(chartName);\n        }\n        this.setState({\n          deployedCharts,\n        });\n      }\n    }\n  }\n\n\n  doHelmChartRollBack(release, version) {\n    doHelmRollBack(release, version)\n      .then((result) => console.log(result))\n      .then(this.getHelmCharts())\n      .then('Successfully rolled back!');\n  }\n\n  render() {\n    const {\n      userChartDir, localCharts, deployedCharts,\n    } = this.state;\n    return (\n      <>\n        <LocalChartContainer\n          userChartDir={userChartDir}\n          localCharts={localCharts}\n          getDeployedCharts={this.getHelmCharts}\n        />\n        <InstalledChartContainer\n          deployedCharts={deployedCharts}\n          getDeployedCharts={this.getHelmCharts}\n          toggleHistory={this.toggleHistory}\n          doHelmChartRollBack={this.doHelmChartRollBack}\n        />\n      </>\n    );\n  }\n}\n\nexport default MainContainer;\n\n'Ahoy/src/index.js'\n:import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\n\n\n\nconst root = document.createElement('div');\n\nroot.id = 'root';\ndocument.body.appendChild(root);\n\n\nrender(<App />, document.getElementById('root'));\n'Ahoy/src/App.jsx'\n:import React from 'react';\nimport MainContainer from './containers/MainContainer';\nimport 'semantic-ui-css/semantic.min.css';\nimport './assets/css/App.css';\n\nfunction App() {\n  return (\n    <MainContainer />\n  );\n}\n\nexport default App;\n'Ahoy/src/components/LocalChartList.jsx'\n:import React from 'react';\nimport { Table } from 'semantic-ui-react';\nimport LocalChart from './LocalChart';\n\nconst path = require('path');\n\nconst LocalChartList = (props) => {\n  const { localCharts, handleOpenChartClick, getDeployedCharts } = props;\n  const lcharts = [];\n\n  localCharts.forEach((item, i) => {\n    const dirPath = path.join(props.userChartDir, item.name);\n    lcharts.push(<LocalChart\n      chart={item}\n      id={i}\n      key={i}\n      dirPath={dirPath}\n      getDeployedCharts={getDeployedCharts}\n      handleOpenChartClick={handleOpenChartClick}\n    />);\n  });\n\n  return (\n    <Table fixed singleLine stackable>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell colSpan=\"1\">Available Charts</Table.HeaderCell>\n          <Table.HeaderCell colSpan=\"3\">Install Name</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>{lcharts}</Table.Body>\n    </Table>\n  );\n};\n\nexport default LocalChartList;\n\n'Ahoy/src/containers/LocalChartContainer.jsx'\n:import React, { Component } from 'react';\nimport path from 'path';\nimport LocalChartList from '../components/LocalChartList';\n\nconst { shell } = require('electron');\n\nclass LocalChartContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.handleOpenChartClick = this.handleOpenChartClick.bind(this);\n  }\n\n  handleOpenChartClick(chartName) {\n    const { userChartDir } = this.props;\n    const pathToOpen = path.join(userChartDir, chartName);\n    shell.openPath(pathToOpen);\n  }\n\n  render() {\n    const {\n      localCharts, userChartDir, getDeployedCharts,\n    } = this.props;\n\n    return (\n      <div className=\"outer-container\">\n        <LocalChartList\n          localCharts={localCharts}\n          userChartDir={userChartDir}\n          getDeployedCharts={getDeployedCharts}\n          handleOpenChartClick={this.handleOpenChartClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default LocalChartContainer;\n",
        "gt": [
            "'Ahoy/src/components/LocalChart.jsx'",
            "'Ahoy/src/components/LocalChartList.jsx'",
            "'Ahoy/src/containers/LocalChartContainer.jsx'",
            "'Ahoy/src/containers/MainContainer.jsx'",
            "'Ahoy/src/App.jsx'",
            "'Ahoy/src/index.js'"
        ]
    },
    {
        "files": [
            "'kong-dashboard/tests/cases/create-api.spec.js'",
            "'kong-dashboard/tests/util/KongClient.js'",
            "'kong-dashboard/lib/request.js'"
        ],
        "content": "'kong-dashboard/tests/cases/create-api.spec.js'\n:var HomePage = require('../util/HomePage');\nvar Sidebar = require('../util/Sidebar');\nvar ListAPIsPage = require('../util/ListAPIsPage');\nvar CreateAPIPage = require('../util/CreateAPIPage');\nvar KongDashboard = require('../util/KongDashboard');\nvar Kong = require('../util/KongClient');\nvar request = require('../../lib/request');\nvar using = require('jasmine-data-provider');\nvar PropertyInput = require('../util/PropertyInput');\nvar semver = require('semver');\n\nvar kd = new KongDashboard();\n\ndescribe('API creation testing', () => {\n  if (semver.gte(process.env.KONG_VERSION, '0.15.0')) {\n    return;\n  }\n\n  var apiSchema;\n\n  beforeEach((done) => {\n    Kong.deleteAllAPIs().then(done);\n  });\n\n  afterEach(() => {\n    browser.refresh();\n  });\n\n  beforeAll((done) => {\n    kd.start({'--kong-url': 'http:\n      request.get('http:\n        eval(response.body);\n        apiSchema = __env.schemas.api;\n        done();\n      });\n    });\n  });\n\n  afterAll((done) => {\n    kd.stop(done);\n  });\n\n  it('should recognize and display an input for every field', () => {\n    HomePage.visit();\n    Sidebar.clickOn('APIs');\n    ListAPIsPage.clickAddButton();\n    expect(browser.getCurrentUrl()).toEqual('http:\n    Object.keys(apiSchema.properties).forEach((fieldName) => {\n      expect(PropertyInput.getElement(fieldName).isPresent()).toBeTruthy('Form section for ' + fieldName + ' is missing');\n    })\n  });\n\n  using(validApiInputsProvider, (data) => {\n    it('should correctly create an API', (done) => {\n      HomePage.visit();\n      Sidebar.clickOn('APIs');\n      ListAPIsPage.clickAddButton();\n\n      Object.keys(data.inputs).forEach((inputName) => {\n        PropertyInput.set(inputName, data.inputs[inputName]);\n      });\n\n      CreateAPIPage.submit().then(() => {\n        expect(element(by.cssContainingText('div.toast', 'API created')).isPresent()).toBeTruthy();\n        return browser.waitForAngular();\n      }).then(() => {\n        return Kong.getFirstAPI();\n      }).then((api) => {\n        delete api.created_at;\n        delete api.id;\n        expect(api).toEqual(data.expectedCreatedAPI);\n        done();\n      });\n    })\n  });\n\n  using(invalidApiInputsProvider, (data) => {\n    it('should correctly show validation error on API creation', (done) => {\n      HomePage.visit();\n      Sidebar.clickOn('APIs');\n      ListAPIsPage.clickAddButton();\n\n      Object.keys(data.inputs).forEach((inputName) => {\n        PropertyInput.set(inputName, data.inputs[inputName]);\n      });\n\n      CreateAPIPage.submit().then(() => {\n        expect(element(by.cssContainingText('div.toast', 'Api created')).isPresent()).toBeFalsy();\n        if (data.expectedErrors.globalError) {\n          expect(element(by.cssContainingText('div.toast', data.expectedErrors.globalError)).isPresent()).toBeTruthy();\n        }\n        if (data.expectedErrors.properties) {\n          Object.keys(apiSchema.properties).forEach((fieldName) => {\n            var expectHasErrorMessage = expect(PropertyInput.getElementErrorMsg(fieldName).isPresent());\n            if (data.expectedErrors.properties.indexOf(fieldName) !== -1) {\n              expectHasErrorMessage.toBeTruthy(fieldName + ' should have an error message.');\n            } else {\n              expectHasErrorMessage.toBeFalsy(fieldName + ' should not have an error message.');\n            }\n          });\n        }\n        done();\n      });\n    })\n  });\n\n  function validApiInputsProvider() {\n    if (semver.satisfies(process.env.KONG_VERSION, '0.9.x')) {\n      return [\n        {\n          inputs: {\n            name: 'my_api',\n            request_host: 'host',\n            upstream_url: 'http:\n          },\n          expectedCreatedAPI: {\n            name: 'my_api',\n            request_host: 'host',\n            upstream_url: 'http:\n            strip_request_path: false,\n            preserve_host: false\n          }\n        },\n        {\n          inputs: {\n            name: 'my_api2',\n            request_path: '/1.0',\n            upstream_url: 'http:\n            strip_request_path: true,\n            preserve_host: true\n          },\n          expectedCreatedAPI: {\n            name: 'my_api2',\n            request_path: '/1.0',\n            upstream_url: 'http:\n            strip_request_path: true,\n            preserve_host: true\n          }\n        }\n      ];\n    }\n    else if (semver.satisfies(process.env.KONG_VERSION, '>=0.10.0 < 0.15.0')) {\n      return [\n        {\n          inputs: {\n            name: 'my_awesome_API',\n            hosts: ['host1.com', 'host2.com'],\n            uris: ['/1.0', '/2.0'],\n            methods: ['GET', 'POST'],\n            upstream_url: 'http:\n            strip_uri: false,\n            http_if_terminated: true\n          },\n          expectedCreatedAPI: {\n            name: 'my_awesome_API',\n            hosts: ['host1.com', 'host2.com'],\n            uris: ['/1.0', '/2.0'],\n            methods: ['GET', 'POST'],\n            upstream_url: 'http:\n            strip_uri: false,\n            preserve_host: false,\n            retries: 5,\n            upstream_connect_timeout: 60000,\n            upstream_send_timeout: 60000,\n            upstream_read_timeout: 60000,\n            https_only: false,\n            http_if_terminated: true\n          }\n        }\n      ];\n    }\n\n    throw new Error('Kong version not supported in unit tests.')\n  }\n\n  function invalidApiInputsProvider() {\n    if (semver.satisfies(process.env.KONG_VERSION, '0.9.x')) {\n      return [\n        {\n          inputs: {},\n          expectedErrors: {'properties': ['request_host', 'request_path', 'upstream_url']}\n        }\n      ];\n    }\n    else if (semver.satisfies(process.env.KONG_VERSION, '>=0.10.0 < 0.15.0')) {\n      return [\n        {\n          inputs: {},\n          expectedErrors: {'properties': ['name', 'upstream_url']}\n        },\n        {\n          inputs: {name: 'hello', upstream_url: 'http:\n          expectedErrors: {'globalError': \"at least one of 'hosts', 'uris' or 'methods' must be specified\"}\n        }\n      ];\n    }\n\n    throw new Error('Kong version not supported in unit tests.')\n  }\n});\n\n'kong-dashboard/tests/util/KongClient.js'\n:var request = require('../../lib/request');\nvar semver = require('semver');\n\nvar Kong = {\n\n\n  deleteAllServices: function() {\n    if (semver.lt(process.env.KONG_VERSION, '0.13.0')) {\n      return Promise.resolve(0);\n    }\n\n    return this.deleteAllRoutes().then(() => {\n      return this.deleteAllObjectsOfType('services');\n    });\n  },\n\n\n  deleteAllRoutes: function() {\n    if (semver.lt(process.env.KONG_VERSION, '0.13.0')) {\n      return Promise.resolve(0);\n    }\n    return this.deleteAllObjectsOfType('routes');\n  },\n\n\n  deleteAllAPIs: function() {\n    if (semver.gte(process.env.KONG_VERSION, '0.15.0')) {\n      return Promise.resolve(0);\n    }\n    return this.deleteAllObjectsOfType('apis');\n  },\n\n\n  deleteAllPlugins: function() {\n    return this.deleteAllObjectsOfType('plugins');\n  },\n\n\n  deleteAllConsumers: function() {\n    return this.deleteAllObjectsOfType('consumers');\n  },\n\n\n  deleteAllCertificates: function() {\n    return this.deleteAllObjectsOfType('certificates');\n  },\n\n\n  deleteAllUpstreams: function() {\n    return this.deleteAllObjectsOfType('upstreams');\n  },\n\n\n  deleteAllObjectsOfType: function(objectType) {\n    return request.get('http:\n      var body = JSON.parse(response.body);\n      var promise = new Promise((resolve, reject) => {\n        resolve();\n      });\n      body.data.forEach((object) => {\n        promise = promise.then(() => {\n          return request.delete('http:\n        });\n      });\n\n      if (body.total > body.data.length) {\n        promise = promise.then(() => {\n          return this.deleteAllObjectsOfType(objectType);\n        });\n      }\n\n      return promise;\n    });\n  },\n\n\n  getFirstService: () => {\n    return request.get('http:\n      var services = JSON.parse(response.body).data;\n      return services.length > 0 ? services[0] : null;\n    });\n  },\n\n\n  getFirstAPI: () => {\n    return request.get('http:\n      var apis = JSON.parse(response.body).data;\n      return apis.length > 0 ? apis[0] : null;\n    });\n  },\n\n\n  getFirstCertificate: () => {\n    return request.get('http:\n      var certificates = JSON.parse(response.body).data;\n      return certificates.length > 0 ? certificates[0] : null;\n    });\n  },\n\n\n  getFirstPlugin: () => {\n    return request.get('http:\n      var plugins = JSON.parse(response.body).data;\n      return plugins.length > 0 ? plugins[0] : null;\n    });\n  },\n\n\n  getPluginById: (id) => {\n    return request.get('http:\n      return JSON.parse(response.body);\n    });\n  },\n\n\n  getServiceById: (id) => {\n    return request.get('http:\n      return JSON.parse(response.body);\n    });\n  },\n\n\n  getUpstreamById: (id) => {\n    return request.get('http:\n      return JSON.parse(response.body);\n    });\n  },\n\n\n  createPlugin: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createConsumer: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createService: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createRoute: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createAPI: (data) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createBasicAuthCreds: (consumer, username, password) => {\n     return request.post('http:\n       username: username,\n       password: password\n     }).then((response) => {\n      return response.body;\n    });\n  },\n\n\n  createKeyAuthCreds: (consumer, key) => {\n    return request.post('http:\n      return response.body;\n    });\n  },\n\n\n  createUpstream: (name) => {\n    return request.post('http:\n      return response.body;\n    });\n  }\n};\n\nmodule.exports = Kong;\n\n'kong-dashboard/lib/request.js'\n:var request = require('request');\n\nvar Request = {\n\n  send: function(opts) {\n    return new Promise((resolve, reject) => {\n      request(opts, (error, response, body) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(response);\n        }\n      })\n    })\n  },\n\n  get: function(url, opts) {\n    opts = opts || {};\n    opts.method = 'GET';\n    opts.url = url;\n    return this.send(opts);\n  },\n\n  delete: function(url, opts) {\n    opts = opts || {};\n    opts.method = 'DELETE';\n    opts.url = url;\n    return this.send(opts);\n  },\n\n  put: function(url, data, opts) {\n    opts = opts || {};\n    opts.method = 'PUT';\n    opts.url = url;\n    opts.json = true;\n    opts.body = data;\n    return this.send(opts);\n  },\n\n  post: function(url, data, opts) {\n    opts = opts || {};\n    opts.method = 'POST';\n    opts.url = url;\n    opts.json = true;\n    opts.body = data;\n    return this.send(opts);\n  }\n\n};\n\nmodule.exports = Request;\n\n",
        "gt": [
            "'kong-dashboard/lib/request.js'",
            "'kong-dashboard/tests/util/KongClient.js'",
            "'kong-dashboard/tests/cases/create-api.spec.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/rippleEffect.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/components/responsibleTouchArea.js'"
        ],
        "content": "'ruui/src/components/rippleEffect.js'\n:import React, { Component } from 'react';\nimport { Animated, Easing } from 'react-native';\nimport { Style } from '../typeDefinition';\n\ntype Props = {\n\tinitialOpacity?: number,\n\tinitialScale?: number,\n\tspeed?: number,\n\tstyle: Style,\n};\n\nclass RuuiRippleEffect extends Component<any, Props, any> {\n\tprops: Props;\n\n\tstatic defaultProps = {\n\t\tinitialOpacity: 0.2,\n\t\tinitialScale: 0.02,\n\t\tspeed: 800,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.expandAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tAnimated.timing(this.expandAnimation, {\n\t\t\ttoValue: 1,\n\t\t\tduration: this.props.speed,\n\t\t\teasing: Easing.out(Easing.bezier(0.445, 0.05, 0.55, 0.95)),\n\t\t\tuseNativeDriver: true,\n\t\t}).start();\n\t}\n\n\trender() {\n\t\tconst { style, initialScale, initialOpacity } = this.props,\n\t\t\topacity = this.expandAnimation.interpolate({\n\t\t\t\tinputRange: [0, 0.5, 1], outputRange: [initialOpacity, 0.1, 0],\n\t\t\t}), scale = this.expandAnimation.interpolate({\n\t\t\t\tinputRange: [0, 0.1, 0.5, 1], outputRange: [initialScale, 0.4, 0.8, 1],\n\t\t\t}), styles = {\n\t\t\t\t...style,\n\t\t\t\tposition: 'absolute',\n\t\t\t\ttransform: [{ scale }],\n\t\t\t\topacity,\n\t\t\t};\n\n\t\treturn <Animated.View pointerEvents=\"none\" style={styles}/>;\n\t}\n}\n\nexport default RuuiRippleEffect;\n\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/components/responsibleTouchArea.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, TouchableOpacity, View, StyleSheet, Platform } from 'react-native';\nimport tinyColor from 'tinycolor2';\n\nimport RippleEffect from './rippleEffect';\nimport { debounce, isIos, } from '../utils';\nimport * as appActions from '../store/action/app';\nimport type { Style, Element, SnappingDirection, } from '../typeDefinition';\n\ntype Props = {\n\tchildren?: Element,\n\twrapperStyle?: Style,\n\tinnerStyle?: Style,\n\ttooltip?: String | Element,\n\ttooltipWrapperStyle?: Style,\n\ttooltipInnerStyle?: Style,\n\ttooltipDirection?: SnappingDirection,\n\ttooltipPositionSpacing?: number,\n\ttooltipPositionOffset?: Object,\n\tripple?: boolean,\n\tstaticRipple?: boolean,\n\trippleColor?: string,\n\trippleInitialOpacity?: number,\n\trippleInitialScale?: number,\n\trippleAnimationSpeed?: number,\n\tfade?: boolean,\n\tfadeLevel?: number,\n\traise?: boolean,\n\tdebounce?: number,\n\tdisabled?: boolean,\n\tactiveOpacity?: number,\n\tonPress?: Function,\n\tonPressIn?: Function,\n\tonPressOut?: Function,\n\tonMouseEnter?: Function,\n\tonMouseLeave?: Function,\n};\n\nconst MAX_PARTICLE_COUNT = 5;\n\nclass RuuiResponsibleTouchArea extends Component<any, Props, any> {\n\tprops: Props;\n\n\tstatic contextTypes = {\n\t\truuiStore: PropTypes.object,\n\t};\n\n\tstatic defaultProps = {\n\t\tstaticRipple: false,\n\t\tactiveOpacity: 0.7,\n\t\tripple: true,\n\t\traise: false,\n\t\tfade: false,\n\t\tfadeLevel: 0.1,\n\t\tdisabled: false,\n\t};\n\n\trippleIndex = 0;\n\n\tcomponentWillUnmount() {\n\t\tthis.willUnmount = true;\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tripples: [],\n\t\t\tmouseInside: false,\n\t\t};\n\n\t\tthis.raiseAnimation = new Animated.Value(0);\n\t\tthis.fadeAnimation = new Animated.Value(0);\n\n\t\tif (props.debounce) {\n\t\t\tthis.handlePress = debounce(this.handlePress.bind(this), props.debounce);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { children, wrapperStyle, innerStyle, disabled, onPressIn, onPressOut, onPress, ripple, fade, fadeLevel, raise, ...otherProps } = this.props,\n\t\t\tflattenWrapperStyles = StyleSheet.flatten(wrapperStyle) || {},\n\t\t\tplatformStyles = Platform.select({\n\t\t\t\tweb: { cursor: 'pointer', userSelect: 'none' },\n\t\t\t}),\n\t\t\tisLightBackground = tinyColor(flattenWrapperStyles.backgroundColor).getBrightness() > 180,\n\t\t\twrapperBorderRadius = extractBorderRadius(flattenWrapperStyles);\n\n\t\treturn <View\n\t\t\tonMouseLeave={this.onMouseLeave}\n\t\t\tonMouseEnter={this.onMouseEnter}\n\t\t\tref={(instance) => { this.wrapperView = instance; }}\n\t\t\tcollapsable={false}\n\t\t\tstyle={[wrapperStyle, platformStyles]}>\n\n\t\t\t{raise && this.renderShadowEffect(raise, isLightBackground, wrapperBorderRadius)}\n\t\t\t{fade && this.renderFadeEffect(fade, fadeLevel, isLightBackground, wrapperBorderRadius)}\n\t\t\t{ripple && this.renderRippleEffect(isLightBackground, wrapperBorderRadius)}\n\n\t\t\t<TouchableOpacity\n\t\t\t\tdisabled={disabled}\n\t\t\t\tstyle={innerStyle}\n\t\t\t\tonPressIn={this.onPressIn}\n\t\t\t\tonPressOut={this.onPressOut}\n\t\t\t\tonPress={this.onPress}\n\t\t\t\tonStartShouldSetResponderCapture={() => !disabled}\n\t\t\t\t{...otherProps}>\n\t\t\t\t<View pointerEvents=\"none\">\n\t\t\t\t\t{children}\n\t\t\t\t</View>\n\t\t\t</TouchableOpacity>\n\t\t</View>;\n\t}\n\n\trenderShadowEffect(raise: Boolean, isLightBackground: Boolean, wrapperBorderRadius) {\n\t\tconst shadowOpacity = this.raiseAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1], outputRange: [raise ? 0.15 : 0, 0.6],\n\t\t\t}),\n\t\t\tshadow = raise && {\n\t\t\t\tborderRadius: 3,\n\t\t\t\tshadowColor: '#666666',\n\t\t\t\topacity: shadowOpacity,\n\t\t\t\tshadowOpacity: 1,\n\t\t\t\tshadowRadius: raiseShadowRadius,\n\t\t\t\tshadowOffset: { width: 0, height: 2 },\n\t\t\t};\n\n\t\treturn <Animated.View\n\t\t\tstyle={[styles.fullSizeAbsolute, shadow, wrapperBorderRadius]}/>;\n\t}\n\n\trenderFadeEffect(fade, fadeLevel, isLightBackground: Boolean, wrapperBorderRadius) {\n\t\tconst opacity = this.fadeAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1],\n\t\t\t\toutputRange: [0, fadeLevel],\n\t\t\t\textrapolate: 'clamp',\n\t\t\t}),\n\t\t\tmaskStyles = {\n\t\t\t\tbackgroundColor: isLightBackground ? '#000000' : '#ffffff',\n\t\t\t\topacity,\n\t\t\t};\n\n\t\treturn <Animated.View style={[styles.fullSizeAbsolute, wrapperBorderRadius, maskStyles]}/>;\n\t}\n\n\trenderRippleEffect(isLightBackground: Boolean, wrapperBorderRadius) {\n\t\treturn <View style={[styles.fullSizeAbsolute, wrapperBorderRadius, { overflow: 'hidden' }]}>\n\t\t\t{this.renderRipples()}\n\t\t</View>;\n\t}\n\n\trenderRipples() {\n\t\tconst { ripples } = this.state,\n\t\t\t{ rippleInitialOpacity, rippleInitialScale, rippleAnimationSpeed } = this.props;\n\n\t\treturn ripples.map((ripple) => {\n\t\t\treturn <RippleEffect\n\t\t\t\tkey={ripple.index}\n\t\t\t\tstyle={ripple.style}\n\t\t\t\tindex={ripple.index}\n\t\t\t\tinitialOpacity={rippleInitialOpacity}\n\t\t\t\tinitialScale={rippleInitialScale}\n\t\t\t\tspeed={rippleAnimationSpeed}/>;\n\t\t});\n\t}\n\n\tonPress = (e) => {\n\t\tconst { onPress } = this.props;\n\t\tif (onPress) setTimeout(() => onPress(e), 0);\n\t};\n\n\tonPressIn = (e) => {\n\t\tconst { ripples } = this.state,\n\t\t\t{ wrapperStyle, disabled, raise, staticRipple, rippleColor, onPressIn } = this.props;\n\n\t\tif (disabled) return;\n\n\t\tconst flattenWrapperStyles = StyleSheet.flatten(wrapperStyle) || {},\n\t\t\tisLightBackground = tinyColor(flattenWrapperStyles.backgroundColor).getBrightness() > 180;\n\n\t\tif (raise) this.playRaiseAnimation(1);\n\n\t\tthis.playFadeAnimation(1);\n\n\t\tconst { locationX, locationY, offsetX, offsetY, pageX, pageY } = e.nativeEvent;\n\n\t\tthis.wrapperView.measure((fx, fy, wrapperWidth, wrapperHeight, px, py) => {\n\t\t\tlet rippleRadius = 0, ripplePosition;\n\t\t\tconst touchX = locationX || offsetX, touchY = locationY || offsetY;\n\n\t\t\tif (staticRipple || !touchX) {\n\t\t\t\trippleRadius = wrapperWidth / 2;\n\t\t\t\tripplePosition = {\n\t\t\t\t\ttop: (wrapperHeight / 2) - rippleRadius,\n\t\t\t\t\tleft: (wrapperWidth / 2) - rippleRadius,\n\t\t\t\t};\n\t\t\t} else {\n\n\t\t\t\tif (touchX > wrapperWidth / 2) {\n\t\t\t\t\tif (touchY > wrapperHeight / 2) {\n\n\t\t\t\t\t\trippleRadius = Math.sqrt((touchX * touchX) + (touchY * touchY));\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst paddedY = touchY - wrapperHeight;\n\t\t\t\t\t\trippleRadius = Math.sqrt((touchX * touchX) + (paddedY * paddedY));\n\t\t\t\t\t}\n\t\t\t\t} else if (touchY > wrapperHeight / 2) {\n\n\t\t\t\t\tconst paddedX = touchX - wrapperWidth;\n\t\t\t\t\trippleRadius = Math.sqrt((paddedX * paddedX) + (touchY * touchY));\n\t\t\t\t} else {\n\n\t\t\t\t\tconst paddedX = touchX - wrapperWidth, paddedY = touchY - wrapperHeight;\n\t\t\t\t\trippleRadius = Math.sqrt((paddedX * paddedX) + (paddedY * paddedY));\n\t\t\t\t}\n\n\t\t\t\trippleRadius *= 1.2;\n\t\t\t\tripplePosition = {\n\t\t\t\t\ttop: touchY - rippleRadius,\n\t\t\t\t\tleft: touchX - rippleRadius,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.rippleIndex += 1;\n\t\t\tconst defaultRippleColor = isLightBackground ? '#333333' : '#ffffff',\n\t\t\t\tnewRipple = {\n\t\t\t\t\tindex: this.rippleIndex,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\twidth: rippleRadius * 2,\n\t\t\t\t\t\theight: rippleRadius * 2,\n\t\t\t\t\t\tborderRadius: rippleRadius,\n\t\t\t\t\t\tbackgroundColor: rippleColor || defaultRippleColor,\n\t\t\t\t\t\t...ripplePosition,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tlet nextRipples = [newRipple, ...ripples];\n\n\t\t\tif (nextRipples.length > MAX_PARTICLE_COUNT) {\n\t\t\t\tnextRipples = nextRipples.slice(0, MAX_PARTICLE_COUNT);\n\t\t\t}\n\n\t\t\tif (!this.willUnmount) this.setState({ ripples: nextRipples });\n\t\t});\n\n\t\tif (onPressIn) onPressIn(e);\n\t};\n\n\tonPressOut = (e, forceFade = false) => {\n\t\tconst { mouseInside } = this.state,\n\t\t\t{ raise, onPressOut } = this.props;\n\n\t\tif (raise) this.playRaiseAnimation(0);\n\t\tif (onPressOut && e) onPressOut(e);\n\n\t\tif (forceFade === true || !mouseInside) {\n\t\t\tthis.playFadeAnimation(0);\n\t\t}\n\t};\n\n\tonMouseEnter = () => {\n\t\tconst { ruuiStore } = this.context;\n\t\tconst { disabled, tooltip, tooltipWrapperStyle, tooltipInnerStyle, tooltipDirection, tooltipPositionSpacing, tooltipPositionOffset } = this.props;\n\n\t\tthis.setState({ mouseInside: true });\n\n\t\tif (!disabled) {\n\t\t\tthis.playFadeAnimation(1);\n\n\t\t\tif (tooltip) {\n\t\t\t\tthis.wrapperView.measure((x, y, width, height, pageX, pageY) => {\n\t\t\t\t\truuiStore.dispatch(appActions.toggleTooltip(true, {\n\t\t\t\t\t\ttargetLayout: { x: pageX, y: pageY, width, height },\n\t\t\t\t\t\tdirection: tooltipDirection,\n\t\t\t\t\t\tpositionSpacing: tooltipPositionSpacing,\n\t\t\t\t\t\tpositionOffset: tooltipPositionOffset,\n\t\t\t\t\t\tcontent: tooltip,\n\t\t\t\t\t\twrapperStyle: tooltipWrapperStyle,\n\t\t\t\t\t\tinnerStyle: tooltipInnerStyle,\n\t\t\t\t\t}));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tonMouseLeave = () => {\n\t\tconst { ruuiStore } = this.context;\n\t\tconst { disabled, tooltip } = this.props;\n\n\t\tthis.onPressOut(null, true);\n\t\tthis.setState({ mouseInside: false });\n\n\t\tif (!disabled && tooltip) {\n\t\t\truuiStore.dispatch(appActions.toggleTooltip(false));\n\t\t}\n\t};\n\n\tplayRaiseAnimation = (toValue: Number) => {\n\t\tif (this.raisingAnimation) this.raisingAnimation.clear();\n\n\t\tconst animations = [\n\t\t\tAnimated.timing(this.raiseAnimation, {\n\t\t\t\ttoValue,\n\t\t\t\tduration: 500,\n\t\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\t\tuseNativeDriver: false,\n\t\t\t}),\n\t\t];\n\n\t\tthis.raisingAnimation = Animated.parallel(animations).start();\n\t};\n\n\tplayFadeAnimation = (toValue: Number) => {\n\t\tif (this.fadingAnimation) this.fadingAnimation.clear();\n\n\t\tthis.fadingAnimation = Animated.timing(this.fadeAnimation, {\n\t\t\ttoValue,\n\t\t\tduration: 800,\n\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\tuseNativeDriver: true,\n\t\t}).start();\n\t};\n}\n\nexport default RuuiResponsibleTouchArea;\n\nfunction extractBorderRadius(baseStyles) {\n\treturn [\n\t\t'borderRadius',\n\t\t'borderTopLeftRadius',\n\t\t'borderTopRightRadius',\n\t\t'borderBottomLeftRadius',\n\t\t'borderBottomRightRadius',\n\t].reduce((accumulate, currentAttribute) => {\n\t\tif (baseStyles[currentAttribute]) {\n\t\t\taccumulate[currentAttribute] = baseStyles[currentAttribute];\n\t\t}\n\n\t\treturn accumulate;\n\t}, {});\n}\n\nconst raiseShadowRadius = isIos ? 4 : 10;\nconst styles = StyleSheet.create({\n\tfullSizeAbsolute: {\n\t\tposition: 'absolute',\n\t\ttop: 0, bottom: 0, right: 0, left: 0,\n\t},\n});\n",
        "gt": [
            "'ruui/src/components/rippleEffect.js'",
            "'ruui/src/components/responsibleTouchArea.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/utils/ruuiStore.js'",
            "'ruui/src/utils/helpers.js'",
            "'ruui/examples/next/components/counter.js'"
        ],
        "content": "'ruui/src/utils/ruuiStore.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { shallowEqual } from './helpers';\n\nexport function createStore(reducer) {\n\tlet state, listeners = [];\n\n\tconst getState = () => state;\n\tconst getListeners = () => listeners;\n\n\tconst dispatch = (action) => {\n\t\tstate = reducer(state, action);\n\t\tlisteners.forEach(listener => listener(state));\n\t};\n\n\tconst subscribe = (listener) => {\n\t\tlisteners.push(listener);\n\n\t\treturn () => {\n\t\t\tlisteners = listeners.filter(l => l !== listener);\n\t\t};\n\t};\n\n\tdispatch({});\n\n\treturn { getState, dispatch, subscribe, getListeners };\n}\n\nexport function combineReducers(reducers) {\n\tconst reducerKeys = Object.keys(reducers);\n\n\treturn (state = {}, action) => {\n\t\tlet hasChanged = false;\n\t\tconst nextState = {};\n\n\t\tfor (let i = 0; i < reducerKeys.length; i += 1) {\n\t\t\tconst key = reducerKeys[i],\n\t\t\t\treducer = reducers[key],\n\t\t\t\tpreviousStateForKey = state[key],\n\t\t\t\tnextStateForKey = reducer(previousStateForKey, action);\n\n\t\t\tnextState[key] = nextStateForKey;\n\t\t\thasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n\t\t}\n\n\t\treturn hasChanged ? nextState : state;\n\t};\n}\n\nexport function connect(stateToPropsFactory) {\n\treturn function (BaseComponent) {\n\t\tconst currentDisplayName = BaseComponent.displayName || BaseComponent.name,\n\t\t\tenhancedDisplayName = `RuuiConnect(${currentDisplayName})`;\n\n\t\treturn class RuuiConnected extends Component {\n\t\t\tstatic displayName = enhancedDisplayName;\n\n\t\t\tstatic contextTypes = {\n\t\t\t\truuiStore: PropTypes.object,\n\t\t\t};\n\n\t\t\tconstructor(props, context) {\n\t\t\t\tsuper(props);\n\t\t\t\tthis.store = context.ruuiStore;\n\t\t\t\tthis.unSubscribe = this.store.subscribe(this.syncProps);\n\n\t\t\t\tthis.state = {\n\t\t\t\t\tgeneratedProps: stateToPropsFactory(this.store.getState()),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcomponentWillUnmount() {\n\t\t\t\tthis.unSubscribe();\n\t\t\t}\n\n\t\t\trender() {\n\t\t\t\tconst { generatedProps, } = this.state,\n\t\t\t\t\t{ dispatch } = this.store;\n\n\t\t\t\treturn <BaseComponent\n\t\t\t\t\t{...this.props}\n\t\t\t\t\t{...generatedProps}\n\t\t\t\t\tdispatch={dispatch}/>;\n\t\t\t}\n\n\t\t\tsyncProps = () => {\n\t\t\t\tconst { generatedProps } = this.state,\n\t\t\t\t\tnextProps = stateToPropsFactory(this.store.getState());\n\n\t\t\t\tif (!shallowEqual(generatedProps, nextProps)) {\n\t\t\t\t\tthis.setState({ generatedProps: nextProps });\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t};\n}\n\n'ruui/src/utils/helpers.js'\n:import { Dimensions } from 'react-native';\nimport type { SnappingDirection } from '../typeDefinition';\n\nexport function debounce(fn, duration) {\n\tlet timeout;\n\treturn function () {\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = null;\n\t\t\tfn.apply(this, arguments);\n\t\t}, duration);\n\t};\n}\n\nexport function uuid() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t\tconst r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\nexport function instantInterval(\n\tfunc: Function,\n\tinterval: Number,\n\ttrigger: Boolean = true,\n) {\n\tif (trigger) func.call(this);\n\treturn setInterval(func, interval);\n}\n\nexport function minGuard(value: Number, gap: Number = 0) {\n\treturn value < gap ? gap : value;\n}\n\nexport function maxGuard(value: Number, gap: Number) {\n\treturn value > gap ? gap : value;\n}\n\nconst defaultIteratee = item => item;\n\nexport function maxBy(array, iteratee = defaultIteratee) {\n\tlet result;\n\tif (array == null) return result;\n\n\tlet computed;\n\tfor (const value of array) {\n\t\tconst current = iteratee(value);\n\n\t\tif (current != null && (computed === undefined ? current === current : current > computed)) {\n\t\t\tcomputed = current;\n\t\t\tresult = value;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function clamp(value: Number, min: Number, max: Number) {\n\treturn min < max\n\t\t? (value < min ? min : value > max ? max : value)\n\t\t: (value < max ? max : value > min ? min : value);\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n\tif (x === y) {\n\t\treturn x !== 0 || y !== 0 || 1 / x === 1 / y;\n\t} else {\n\t\treturn x !== x && y !== y;\n\t}\n}\n\nexport function shallowEqual(objA, objB) {\n\tif (is(objA, objB)) return true;\n\n\tif (typeof objA !== 'object' || objA === null\n\t\t|| typeof objB !== 'object' || objB === null) {\n\t\treturn false;\n\t}\n\n\tconst keysA = Object.keys(objA);\n\tconst keysB = Object.keys(objB);\n\n\tif (keysA.length !== keysB.length) return false;\n\n\tfor (let i = 0; i < keysA.length; i += 1) {\n\t\tif (!hasOwn.call(objB, keysA[i])\n\t\t\t|| !is(objA[keysA[i]], objB[keysA[i]])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function valueAt(root = {}, path, defaultValue) {\n\tlet currentLevel = root;\n\tconst paths = path.split('.');\n\n\tfor (let i = 0; i < paths.length; i += 1) {\n\t\tif (i === paths.length - 1) {\n\t\t\treturn currentLevel[paths[i]] || defaultValue;\n\t\t} else {\n\t\t\tcurrentLevel = currentLevel[paths[i]];\n\t\t\tif (!currentLevel) return defaultValue;\n\t\t}\n\t}\n\n\treturn defaultValue;\n}\n\nfunction rawDirectionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n) {\n\tswitch (position) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tdefault:\n\t\treturn { top: 0, left: 0 };\n\t}\n}\n\n\nfunction screenGuard(position, componentSize, screenPadding = 5, moddedScreenSize = {}) {\n\tconst screenSize = { ...Dimensions.get('window'), ...moddedScreenSize },\n\t\t{ top, left, } = position;\n\tlet guardedTop = top, guardedLeft = left;\n\n\tif (top < 5) {\n\t\tguardedTop = 5;\n\t} else if (top + componentSize.height > screenSize.height - screenPadding) {\n\t\tguardedTop = screenSize.height - componentSize.height - screenPadding;\n\t}\n\n\tif (left < 5) {\n\t\tguardedLeft = 5;\n\t} else if (left + componentSize.width > screenSize.width - screenPadding) {\n\t\tguardedLeft = screenSize.width - componentSize.width - screenPadding;\n\t}\n\n\treturn { top: guardedTop, left: guardedLeft, };\n}\n\nexport function directionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n\tscreenSize,\n) {\n\treturn screenGuard(\n\t\trawDirectionSnap(top, left, width1, height1, width2, height2, position, spacing),\n\t\t{ width: width2, height: height2, }, 5, screenSize\n\t);\n}\n\nexport function arrowSnap(width, height, arrowSize, parentPosition: SnappingDirection, padding = 15) {\n\tswitch (parentPosition) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop: padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t\topacity: 0,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tleft: -arrowSize,\n\t\t\ttop: padding,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tdefault:\n\t\treturn {};\n\t}\n}\n\nexport function directionAnimatedConfigs(\n\tdirection, translateDistance, animation, finalBorderRadius = 3\n) {\n\tconst borderRadius = animation.interpolate({\n\t\t\tinputRange: [0, 0.5, 1], outputRange: [50, 15, finalBorderRadius],\n\t\t}),\n\t\topacity = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\textrapolate: 'clamp',\n\t\t});\n\n\tswitch (direction) {\n\tcase 'top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\tborderRadius: { borderRadius, },\n\t\t\ttransform: [],\n\t\t\topacity,\n\t\t};\n\tdefault:\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\t}\n}\n\n'ruui/examples/next/components/counter.js'\n:import React, { Component } from 'react';\nimport { StyleSheet, View, Text, } from 'react-native';\n\nimport { connect } from '../../../src/utils/ruuiStore';\n\ntype Props = {\n\tcounter?: Number | String,\n\tdispatch?: Function,\n};\n\n@connect(({ counter }) => {\n\treturn {\n\t\tcounter,\n\t};\n})\n\nexport default class Counter extends Component {\n\tprops: Props;\n\n\trender() {\n\t\treturn <View style={styles.container}>\n\t\t\t<Text>Counter {this.props.counter}</Text>\n\t\t</View>;\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\n\t},\n});\n",
        "gt": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/ruuiStore.js'",
            "'ruui/examples/next/components/counter.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/index.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/dropdown.js'"
        ],
        "content": "'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/utils/store/appAction.js'\n:import * as Actions from './actions';\nimport { uuid } from '../helpers';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function updateThemeConfigs(configs = {}) {\n\treturn { type: Actions.UpdateThemeConfigs, configs };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}\n'ruui/src/components/dropdown.js'\n:import React, { Component } from 'react';\nimport { Animated, Easing, View, TouchableWithoutFeedback, Text, StyleSheet } from 'react-native';\nimport { Svg, Path, } from 'react-native-svg';\n\nimport { directionSnap, arrowSnap, directionAnimatedConfigs, connect } from '../utils';\nimport * as appActions from '../utils/store/appAction';\nimport { DropdownConfigs } from '../typeDefinition';\n\ntype Props = {\n\tdispatch?: Function,\n\tactive?: boolean,\n\tconfigs?: DropdownConfigs,\n\tscreenSize?: { width?: number, height?: number },\n};\n\nclass RuuiDropdown extends Component {\n\tprops: Props;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.enterAnimation = new Animated.Value(0);\n\t\tthis.state = {\n\t\t\tlayout: {},\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.playAnimation();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tconst { configs: { onClose } } = this.props;\n\t\tif (onClose) onClose();\n\t}\n\n\tplayAnimation = () => {\n\t\tthis.enterAnimation.setValue(0);\n\t\tAnimated.timing(this.enterAnimation, {\n\t\t\ttoValue: 1,\n\t\t\tduration: 800,\n\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\tuseNativeDriver: false,\n\t\t}).start();\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { active } = this.props;\n\t\tif (prevProps.active !== active && active) {\n\t\t\tthis.playAnimation();\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { active, configs } = this.props;\n\t\tconst pointerEvents = configs?.maskPointerEvents || 'auto';\n\n\t\treturn active ? <View\n\t\t\tpointerEvents={pointerEvents}\n\t\t\tstyle={styles.container}>\n\t\t\t{configs.tapToClose ? <TouchableWithoutFeedback\n\t\t\t\tonPress={this.closeModal}>\n\t\t\t\t<View style={styles.touchableMask}/>\n\t\t\t</TouchableWithoutFeedback> : <View/>}\n\t\t\t{this.renderDropDown()}\n\t\t</View> : <View/>;\n\t}\n\n\trenderDropDown() {\n\t\tconst { configs, screenSize } = this.props;\n\t\tconst { layout, } = this.state;\n\t\tconst context = configs.context || {};\n\t\tconst positionOffset = configs.offset || { top: 0, left: 0 };\n\t\tconst arrowOffset = configs.arrowOffset || { top: 0, left: 0 };\n\t\tconst containerLayout = configs.containerLayout || { x: 0, y: 0, width: 0, height: 0 };\n\t\tconst InnerComponent = configs.component || configs.Component || EmptyDropdown;\n\t\tconst arrowSize = configs.arrowSize || 8;\n\t\tconst flattenWrapperStyle = StyleSheet.flatten(configs.wrapperStyle) || {};\n\t\tconst backgroundColor = flattenWrapperStyle.backgroundColor || '#ffffff';\n\t\tconst finalBorderRadius = flattenWrapperStyle.borderRadius || 3;\n\t\tconst animatedDirection = configs.animatedDirection || configs.direction;\n\t\tconst animatedConfigs = directionAnimatedConfigs(\n\t\t\tanimatedDirection, 10, this.enterAnimation, finalBorderRadius,\n\t\t);\n\t\tconst snappingPosition = directionSnap(\n\t\t\tcontainerLayout.y, containerLayout.x,\n\t\t\tcontainerLayout.width, containerLayout.height,\n\t\t\tlayout.width, layout.height,\n\t\t\tconfigs.direction, configs.spacing,\n\t\t\tscreenSize,\n\t\t);\n\t\tconst arrowPosition = arrowSnap(layout.width, layout.height, arrowSize, configs.direction);\n\t\tconst wrapperStyles = {\n\t\t\tposition: 'absolute',\n\t\t\ttop: snappingPosition.top + positionOffset.top,\n\t\t\tleft: snappingPosition.left + positionOffset.left,\n\t\t\topacity: layout.width ? 1 : 0,\n\t\t};\n\t\tconst containerStyles = {\n\t\t\ttransform: animatedConfigs.transform,\n\t\t\topacity: animatedConfigs.opacity,\n\t\t\t...animatedConfigs.borderRadius,\n\t\t};\n\t\tconst arrowStyle = {\n\t\t\tposition: 'absolute',\n\t\t\ttop: arrowPosition.top + arrowOffset.top,\n\t\t\tleft: arrowPosition.left + arrowOffset.left,\n\t\t\ttransform: arrowPosition.transform || [],\n\t\t\twidth: arrowSize + 2,\n\t\t\theight: arrowSize * 2,\n\t\t};\n\n\t\treturn <View style={[wrapperStyles, { zIndex: configs.zIndex }]} onLayout={this.onLayout}>\n\t\t\t<Animated.View style={[styles.dropdownContainer, configs.wrapperStyle, containerStyles]}>\n\t\t\t\t<InnerComponent\n\t\t\t\t\tconfigs={configs}\n\t\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\t\tcontext={context}\n\t\t\t\t\tclose={this.closeModal}/>\n\t\t\t\t{configs.showArrow !== false && <Svg style={arrowStyle}>\n\t\t\t\t\t<Path\n\t\t\t\t\t\td={drawArrow(arrowSize)}\n\t\t\t\t\t\ttransform=\"translate(2,0)\"\n\t\t\t\t\t\tfill={backgroundColor}/>\n\t\t\t\t</Svg>}\n\t\t\t</Animated.View>\n\t\t</View>;\n\t}\n\n\tcloseModal = () => {\n\t\tconst { dispatch, configs } = this.props;\n\t\tdispatch(appActions.toggleDropdown(false, configs));\n\t};\n\n\tonLayout = ({ nativeEvent }) => {\n\t\tthis.setState({ layout: nativeEvent.layout });\n\t};\n}\n\nexport default connect(() => {\n\treturn {\n\n\t};\n})(RuuiDropdown);\n\nfunction EmptyDropdown(props) {\n\treturn <View>\n\t\t<Text>Default dropdown</Text>\n\t</View>;\n}\n\nconst drawArrow = (size) => {\n\tconst width = size;\n\tconst height = size * 2;\n\tconst baseSize = width / 2.8;\n\tconst topCurve = `Q0 ${baseSize / 2}, ${baseSize} ${baseSize}`;\n\tconst topEdge = `Q${width} ${(height / 2) - baseSize}, ${width} ${height / 2}`;\n\tconst bottomEdge = `Q${width} ${(height / 2) + baseSize}, ${baseSize} ${height - baseSize}`;\n\tconst bottomCurve = `Q${0} ${height - (baseSize / 2)}, 0 ${height}`;\n\n\treturn `M-2,0 L0,0 ${topCurve} ${topEdge} ${bottomEdge} ${bottomCurve} L-2,${height} Z`;\n};\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tzIndex: 1000,\n\t\tposition: 'absolute',\n\t\ttop: 0, bottom: 0, left: 0, right: 0,\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, bottom: 0, left: 0, right: 0,\n\t},\n\tdropdownContainer: {\n\t\tbackgroundColor: '#ffffff',\n\t\tborderRadius: 3,\n\t},\n});\n",
        "gt": [
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/dropdown.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'Chatire/chatire-frontend/build/webpack.prod.conf.js'",
            "'Chatire/chatire-frontend/build/build.js'",
            "'Chatire/chatire-frontend/build/webpack.base.conf.js'",
            "'Chatire/chatire-frontend/build/utils.js'"
        ],
        "content": "'Chatire/chatire-frontend/build/webpack.prod.conf.js'\n:'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst webpack = require('webpack')\nconst config = require('../config')\nconst merge = require('webpack-merge')\nconst baseWebpackConfig = require('./webpack.base.conf')\nconst CopyWebpackPlugin = require('copy-webpack-plugin')\nconst HtmlWebpackPlugin = require('html-webpack-plugin')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst OptimizeCSSPlugin = require('optimize-css-assets-webpack-plugin')\nconst UglifyJsPlugin = require('uglifyjs-webpack-plugin')\n\nconst env = process.env.NODE_ENV === 'testing'\n  ? require('../config/test.env')\n  : require('../config/prod.env')\n\nconst webpackConfig = merge(baseWebpackConfig, {\n  module: {\n    rules: utils.styleLoaders({\n      sourceMap: config.build.productionSourceMap,\n      extract: true,\n      usePostCSS: true\n    })\n  },\n  devtool: config.build.productionSourceMap ? config.build.devtool : false,\n  output: {\n    path: config.build.assetsRoot,\n    filename: utils.assetsPath('js/[name].[chunkhash].js'),\n    chunkFilename: utils.assetsPath('js/[id].[chunkhash].js')\n  },\n  plugins: [\n\n    new webpack.DefinePlugin({\n      'process.env': env\n    }),\n    new UglifyJsPlugin({\n      uglifyOptions: {\n        compress: {\n          warnings: false\n        }\n      },\n      sourceMap: config.build.productionSourceMap,\n      parallel: true\n    }),\n\n    new ExtractTextPlugin({\n      filename: utils.assetsPath('css/[name].[contenthash].css'),\n\n\n\n\n      allChunks: true,\n    }),\n\n\n    new OptimizeCSSPlugin({\n      cssProcessorOptions: config.build.productionSourceMap\n        ? { safe: true, map: { inline: false } }\n        : { safe: true }\n    }),\n\n\n\n    new HtmlWebpackPlugin({\n      filename: process.env.NODE_ENV === 'testing'\n        ? 'index.html'\n        : config.build.index,\n      template: 'index.html',\n      inject: true,\n      minify: {\n        removeComments: true,\n        collapseWhitespace: true,\n        removeAttributeQuotes: true\n\n\n      },\n\n      chunksSortMode: 'dependency'\n    }),\n\n    new webpack.HashedModuleIdsPlugin(),\n\n    new webpack.optimize.ModuleConcatenationPlugin(),\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'vendor',\n      minChunks (module) {\n\n        return (\n          module.resource &&\n          /\\.js$/.test(module.resource) &&\n          module.resource.indexOf(\n            path.join(__dirname, '../node_modules')\n          ) === 0\n        )\n      }\n    }),\n\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'manifest',\n      minChunks: Infinity\n    }),\n\n\n\n    new webpack.optimize.CommonsChunkPlugin({\n      name: 'app',\n      async: 'vendor-async',\n      children: true,\n      minChunks: 3\n    }),\n\n\n    new CopyWebpackPlugin([\n      {\n        from: path.resolve(__dirname, '../static'),\n        to: config.build.assetsSubDirectory,\n        ignore: ['.*']\n      }\n    ])\n  ]\n})\n\nif (config.build.productionGzip) {\n  const CompressionWebpackPlugin = require('compression-webpack-plugin')\n\n  webpackConfig.plugins.push(\n    new CompressionWebpackPlugin({\n      asset: '[path].gz[query]',\n      algorithm: 'gzip',\n      test: new RegExp(\n        '\\\\.(' +\n        config.build.productionGzipExtensions.join('|') +\n        ')$'\n      ),\n      threshold: 10240,\n      minRatio: 0.8\n    })\n  )\n}\n\nif (config.build.bundleAnalyzerReport) {\n  const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin\n  webpackConfig.plugins.push(new BundleAnalyzerPlugin())\n}\n\nmodule.exports = webpackConfig\n\n'Chatire/chatire-frontend/build/build.js'\n:'use strict'\nrequire('./check-versions')()\n\nprocess.env.NODE_ENV = 'production'\n\nconst ora = require('ora')\nconst rm = require('rimraf')\nconst path = require('path')\nconst chalk = require('chalk')\nconst webpack = require('webpack')\nconst config = require('../config')\nconst webpackConfig = require('./webpack.prod.conf')\n\nconst spinner = ora('building for production...')\nspinner.start()\n\nrm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err => {\n  if (err) throw err\n  webpack(webpackConfig, (err, stats) => {\n    spinner.stop()\n    if (err) throw err\n    process.stdout.write(stats.toString({\n      colors: true,\n      modules: false,\n      children: false,\n      chunks: false,\n      chunkModules: false\n    }) + '\\n\\n')\n\n    if (stats.hasErrors()) {\n      console.log(chalk.red('  Build failed with errors.\\n'))\n      process.exit(1)\n    }\n\n    console.log(chalk.cyan('  Build complete.\\n'))\n    console.log(chalk.yellow(\n      '  Tip: built files are meant to be served over an HTTP server.\\n' +\n      '  Opening index.html over file:\n    ))\n  })\n})\n\n'Chatire/chatire-frontend/build/webpack.base.conf.js'\n:'use strict'\nconst path = require('path')\nconst utils = require('./utils')\nconst config = require('../config')\nconst vueLoaderConfig = require('./vue-loader.conf')\n\nfunction resolve (dir) {\n  return path.join(__dirname, '..', dir)\n}\n\nconst createLintingRule = () => ({\n  test: /\\.(js|vue)$/,\n  loader: 'eslint-loader',\n  enforce: 'pre',\n  include: [resolve('src'), resolve('test')],\n  options: {\n    formatter: require('eslint-friendly-formatter'),\n    emitWarning: !config.dev.showEslintErrorsInOverlay\n  }\n})\n\nmodule.exports = {\n  context: path.resolve(__dirname, '../'),\n  entry: {\n    app: './src/main.js'\n  },\n  output: {\n    path: config.build.assetsRoot,\n    filename: '[name].js',\n    publicPath: process.env.NODE_ENV === 'production'\n      ? config.build.assetsPublicPath\n      : config.dev.assetsPublicPath\n  },\n  resolve: {\n    extensions: ['.js', '.vue', '.json'],\n    alias: {\n      'vue$': 'vue/dist/vue.esm.js',\n      '@': resolve('src'),\n    }\n  },\n  module: {\n    rules: [\n      ...(config.dev.useEslint ? [createLintingRule()] : []),\n      {\n        test: /\\.vue$/,\n        loader: 'vue-loader',\n        options: vueLoaderConfig\n      },\n      {\n        test: /\\.js$/,\n        loader: 'babel-loader',\n        include: [resolve('src'), resolve('test'), resolve('node_modules/webpack-dev-server/client')]\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('img/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(mp4|webm|ogg|mp3|wav|flac|aac)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('media/[name].[hash:7].[ext]')\n        }\n      },\n      {\n        test: /\\.(woff2?|eot|ttf|otf)(\\?.*)?$/,\n        loader: 'url-loader',\n        options: {\n          limit: 10000,\n          name: utils.assetsPath('fonts/[name].[hash:7].[ext]')\n        }\n      }\n    ]\n  },\n  node: {\n\n\n    setImmediate: false,\n\n\n    dgram: 'empty',\n    fs: 'empty',\n    net: 'empty',\n    tls: 'empty',\n    child_process: 'empty'\n  }\n}\n\n'Chatire/chatire-frontend/build/utils.js'\n:'use strict'\nconst path = require('path')\nconst config = require('../config')\nconst ExtractTextPlugin = require('extract-text-webpack-plugin')\nconst packageConfig = require('../package.json')\n\nexports.assetsPath = function (_path) {\n  const assetsSubDirectory = process.env.NODE_ENV === 'production'\n    ? config.build.assetsSubDirectory\n    : config.dev.assetsSubDirectory\n\n  return path.posix.join(assetsSubDirectory, _path)\n}\n\nexports.cssLoaders = function (options) {\n  options = options || {}\n\n  const cssLoader = {\n    loader: 'css-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n  const postcssLoader = {\n    loader: 'postcss-loader',\n    options: {\n      sourceMap: options.sourceMap\n    }\n  }\n\n\n  function generateLoaders (loader, loaderOptions) {\n    const loaders = options.usePostCSS ? [cssLoader, postcssLoader] : [cssLoader]\n\n    if (loader) {\n      loaders.push({\n        loader: loader + '-loader',\n        options: Object.assign({}, loaderOptions, {\n          sourceMap: options.sourceMap\n        })\n      })\n    }\n\n\n\n    if (options.extract) {\n      return ExtractTextPlugin.extract({\n        use: loaders,\n        fallback: 'vue-style-loader'\n      })\n    } else {\n      return ['vue-style-loader'].concat(loaders)\n    }\n  }\n\n\n  return {\n    css: generateLoaders(),\n    postcss: generateLoaders(),\n    less: generateLoaders('less'),\n    sass: generateLoaders('sass', { indentedSyntax: true }),\n    scss: generateLoaders('sass'),\n    stylus: generateLoaders('stylus'),\n    styl: generateLoaders('stylus')\n  }\n}\n\n\nexports.styleLoaders = function (options) {\n  const output = []\n  const loaders = exports.cssLoaders(options)\n\n  for (const extension in loaders) {\n    const loader = loaders[extension]\n    output.push({\n      test: new RegExp('\\\\.' + extension + '$'),\n      use: loader\n    })\n  }\n\n  return output\n}\n\nexports.createNotifierCallback = () => {\n  const notifier = require('node-notifier')\n\n  return (severity, errors) => {\n    if (severity !== 'error') return\n\n    const error = errors[0]\n    const filename = error.file && error.file.split('!').pop()\n\n    notifier.notify({\n      title: packageConfig.name,\n      message: severity + ': ' + error.name,\n      subtitle: filename || '',\n      icon: path.join(__dirname, 'logo.png')\n    })\n  }\n}\n",
        "gt": [
            "'Chatire/chatire-frontend/build/utils.js'",
            "'Chatire/chatire-frontend/build/webpack.base.conf.js'",
            "'Chatire/chatire-frontend/build/webpack.prod.conf.js'",
            "'Chatire/chatire-frontend/build/build.js'"
        ]
    },
    {
        "files": [
            "'wifi-card/src/components/Settings.js'",
            "'wifi-card/src/App.js'",
            "'wifi-card/src/translations.js'",
            "'wifi-card/src/index.js'"
        ],
        "content": "'wifi-card/src/components/Settings.js'\n:import {\n  Checkbox,\n  Pane,\n  RadioGroup,\n  SelectField,\n  TextInputField,\n} from 'evergreen-ui';\nimport { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport i18n from '../i18n';\nimport { Translations } from '../translations';\nimport './style.css';\n\nexport const Settings = (props) => {\n  const { t } = useTranslation();\n  const encryptionModes = [\n    { label: t('wifi.password.encryption.none'), value: '' },\n    { label: 'WPA/WPA2/WPA3', value: 'WPA' },\n    { label: 'WPA2-EAP', value: 'WPA2-EAP' },\n    { label: 'WEP', value: 'WEP' },\n  ];\n  const eapMethods = [{ label: 'PWD', value: 'PWD' }];\n  const langSelectDefaultValue = () => {\n    const t = Translations.filter((t) => t.id === i18n.language);\n    if (t.length !== 1) {\n      return 'en-US';\n    }\n    return t[0].id;\n  };\n\n  useEffect(() => {\n    if (props.firstLoad.current && window.innerWidth < 500) {\n      props.onFirstLoad();\n      props.onOrientationChange(true);\n    }\n  });\n\n  return (\n    <Pane id=\"settings\" maxWidth={props.settings.portrait ? '350px' : '100%'}>\n      <SelectField\n        width={300}\n        inputHeight={38}\n        label={t('select')}\n        onChange={(e) => props.onLanguageChange(e.target.value)}\n        defaultValue={langSelectDefaultValue()}\n      >\n        {Translations.map((t) => (\n          <option key={t.id} value={t.id}>\n            {t.name}\n          </option>\n        ))}\n      </SelectField>\n\n      <Checkbox\n        label={t('button.rotate')}\n        checked={props.settings.portrait}\n        onChange={() => props.onOrientationChange(!props.settings.portrait)}\n      />\n      <Checkbox\n        label={t('wifi.password.hide')}\n        checked={props.settings.hidePassword}\n        onChange={() =>\n          props.onHidePasswordChange(!props.settings.hidePassword)\n        }\n      />\n      <Checkbox\n        label={t('wifi.name.hiddenSSID')}\n        checked={props.settings.hiddenSSID}\n        onChange={() => props.onHiddenSSIDChange(!props.settings.hiddenSSID)}\n      />\n\n      <Checkbox\n        label={t('cards.tip.hide')}\n        checked={props.settings.hideTip}\n        onChange={() => props.onHideTipChange(!props.settings.hideTip)}\n      />\n      <TextInputField\n        type=\"number\"\n        width={300}\n        label={t('cards.additional')}\n        value={props.settings.additionalCards}\n        onChange={(e) => props.onAdditionalCardsChange(e.target.value)}\n      />\n      <RadioGroup\n        label={t('wifi.password.encryption')}\n        size={16}\n        value={props.settings.encryptionMode}\n        options={encryptionModes}\n        onChange={(e) => props.onEncryptionModeChange(e.target.value)}\n      />\n      <RadioGroup\n        label={t('wifi.encryption.eapMethod')}\n        size={16}\n        value={props.settings.eapMethod}\n        options={eapMethods}\n        className={`\n          ${props.settings.encryptionMode !== 'WPA2-EAP' && 'hidden'}\n        `}\n        onChange={(e) => props.onEapMethodChange(e.target.value)}\n      />\n    </Pane>\n  );\n};\n\n'wifi-card/src/App.js'\n:import { Button, Heading, Link, Pane, Paragraph } from 'evergreen-ui';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport logo from '../src/images/wifi.png';\nimport { Settings } from './components/Settings';\nimport { WifiCard } from './components/WifiCard';\nimport './style.css';\nimport { Translations } from './translations';\n\nfunction App() {\n  const html = document.querySelector('html');\n  const { t, i18n } = useTranslation();\n  const firstLoad = useRef(true);\n  const [settings, setSettings] = useState({\n\n    ssid: '',\n\n    password: '',\n\n    encryptionMode: 'WPA',\n\n    eapMethod: 'PWD',\n\n    eapIdentity: '',\n\n    hidePassword: false,\n\n    hiddenSSID: false,\n\n    portrait: false,\n\n    additionalCards: 0,\n\n    hideTip: false,\n  });\n  const [errors, setErrors] = useState({\n    ssidError: '',\n    passwordError: '',\n    eapIdentityError: '',\n  });\n\n  const htmlDirection = (languageID) => {\n    languageID = languageID || i18n.language;\n    const rtl = Translations.filter((t) => t.id === languageID)[0]?.rtl;\n    return rtl ? 'rtl' : 'ltr';\n  };\n\n  const onChangeLanguage = (language) => {\n    html.style.direction = htmlDirection(language);\n    i18n.changeLanguage(language);\n  };\n\n  const onPrint = () => {\n    if (!settings.ssid.length) {\n      setErrors({\n        ...errors,\n        ssidError: t('wifi.alert.name'),\n      });\n      return;\n    }\n    if (settings.password.length < 8 && settings.encryptionMode === 'WPA') {\n      setErrors({\n        ...errors,\n        passwordError: t('wifi.alert.password.length.8'),\n      });\n      return;\n    }\n    if (settings.password.length < 5 && settings.encryptionMode === 'WEP') {\n      setErrors({\n        ...errors,\n        passwordError: t('wifi.alert.password.length.5'),\n      });\n      return;\n    }\n    if (\n      settings.password.length < 1 &&\n      settings.encryptionMode === 'WPA2-EAP'\n    ) {\n      setErrors({\n        ...errors,\n        passwordError: t('wifi.alert.password'),\n      });\n      return;\n    }\n    if (\n      settings.eapIdentity.length < 1 &&\n      settings.encryptionMode === 'WPA2-EAP'\n    ) {\n      setErrors({\n        ...errors,\n        eapIdentityError: t('wifi.alert.eapIdentity'),\n      });\n      return;\n    }\n    document.title = 'WiFi Card - ' + settings.ssid;\n    window.print();\n  };\n\n  const onSSIDChange = (ssid) => {\n    setErrors({ ...errors, ssidError: '' });\n    setSettings({ ...settings, ssid });\n  };\n  const onPasswordChange = (password) => {\n    setErrors({ ...errors, passwordError: '' });\n    setSettings({ ...settings, password });\n  };\n  const onEncryptionModeChange = (encryptionMode) => {\n    setErrors({ ...errors, passwordError: '' });\n    setSettings({ ...settings, encryptionMode });\n  };\n  const onEapMethodChange = (eapMethod) => {\n    setSettings({ ...settings, eapMethod });\n  };\n  const onEapIdentityChange = (eapIdentity) => {\n    setErrors({ ...errors, eapIdentityError: '' });\n    setSettings({ ...settings, eapIdentity });\n  };\n  const onOrientationChange = (portrait) => {\n    setSettings({ ...settings, portrait });\n  };\n  const onHidePasswordChange = (hidePassword) => {\n    setSettings({ ...settings, hidePassword });\n  };\n  const onHiddenSSIDChange = (hiddenSSID) => {\n    setSettings({ ...settings, hiddenSSID });\n  };\n  const onAdditionalCardsChange = (additionalCardsStr) => {\n    const amount = parseInt(additionalCardsStr);\n    amount >= 0 && setSettings({ ...settings, additionalCards: amount });\n  };\n  const onHideTipChange = (hideTip) => {\n    setSettings({ ...settings, hideTip });\n  };\n  const onFirstLoad = () => {\n    html.style.direction = htmlDirection();\n    firstLoad.current = false;\n  };\n\n  useEffect(() => {\n\n    if (htmlDirection() === 'rtl') {\n      html.style.direction = 'rtl';\n    }\n  });\n\n  return (\n    <Pane>\n      <Pane display=\"flex\">\n        <img alt=\"icon\" src={logo} width=\"32\" height=\"32\" />\n        <Heading size={900} paddingRight={16} paddingLeft={16}>\n          {t('title')}\n        </Heading>\n      </Pane>\n\n      <Pane>\n        <Paragraph marginTop={12}>{t('desc.use')}</Paragraph>\n\n        <Paragraph marginTop={12}>\n          {t('desc.privacy')}{' '}\n          <Link href=\"https:\n            {t('desc.source')}\n          </Link>\n          .\n        </Paragraph>\n      </Pane>\n\n      <Pane>\n        <WifiCard\n          settings={settings}\n          ssidError={errors.ssidError}\n          passwordError={errors.passwordError}\n          eapIdentityError={errors.eapIdentityError}\n          onSSIDChange={onSSIDChange}\n          onEapIdentityChange={onEapIdentityChange}\n          onPasswordChange={onPasswordChange}\n        />\n      </Pane>\n\n      <Settings\n        settings={settings}\n        firstLoad={firstLoad}\n        onFirstLoad={onFirstLoad}\n        onLanguageChange={onChangeLanguage}\n        onEncryptionModeChange={onEncryptionModeChange}\n        onEapMethodChange={onEapMethodChange}\n        onOrientationChange={onOrientationChange}\n        onHidePasswordChange={onHidePasswordChange}\n        onHiddenSSIDChange={onHiddenSSIDChange}\n        onAdditionalCardsChange={onAdditionalCardsChange}\n        onHideTipChange={onHideTipChange}\n      />\n\n      <Button\n        id=\"print\"\n        appearance=\"primary\"\n        height={40}\n        marginRight={16}\n        onClick={onPrint}\n      >\n        {t('button.print')}\n      </Button>\n      <Pane id=\"print-area\">\n        {settings.additionalCards >= 0 &&\n          [...Array(settings.additionalCards + 1)].map((el, idx) => (\n            <WifiCard\n              key={`card-nr-${idx}`}\n              settings={settings}\n              ssidError={errors.ssidError}\n              passwordError={errors.passwordError}\n              eapIdentityError={errors.eapIdentityError}\n              onSSIDChange={onSSIDChange}\n              onEapIdentityChange={onEapIdentityChange}\n              onPasswordChange={onPasswordChange}\n            />\n          ))}\n      </Pane>\n    </Pane>\n  );\n}\n\nexport default App;\n\n'wifi-card/src/translations.js'\n:\n'wifi-card/src/index.js'\n:import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n",
        "gt": [
            "'wifi-card/src/translations.js'",
            "'wifi-card/src/components/Settings.js'",
            "'wifi-card/src/App.js'",
            "'wifi-card/src/index.js'"
        ]
    },
    {
        "files": [
            "'Next-GraphQL-Blog/client/api/queries/post/allPosts.js'",
            "'Next-GraphQL-Blog/client/components/CommentList.js'",
            "'Next-GraphQL-Blog/client/pages/index.js'",
            "'Next-GraphQL-Blog/client/components/PostCard.js'",
            "'Next-GraphQL-Blog/client/components/FeedList.js'"
        ],
        "content": "'Next-GraphQL-Blog/client/api/queries/post/allPosts.js'\n:import gql from 'graphql-tag'\n\nexport default gql`\n  query allPosts($filter: String, $offset: Int, $limit: Int, $sort: String) {\n    allPosts(filter: $filter, offset: $offset, limit: $limit, sort: $sort) {\n      count\n      posts {\n        _id\n        createdAt\n        name\n        content\n        image\n        postedBy {\n          _id\n          name\n        }\n        likes {\n          _id\n        }\n        comments {\n          _id\n          createdAt\n          text\n          commentedBy {\n            _id\n            name\n          }\n        }\n      }\n    }\n  }\n`\n\n'Next-GraphQL-Blog/client/components/CommentList.js'\n:import React, { Component } from 'react'\nimport { Comment, Input } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport moment from 'moment'\nimport { Mutation, Query } from 'react-apollo'\nimport ReactDOM from 'react-dom'\n\nimport withUser from '../lib/withUser'\nimport { showErrorAlert } from '../lib/alerts'\nimport parseError from '../lib/parseError'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport {\n  COMMENT_POST,\n  commentPostOptions\n} from '../api/mutations/comment/commentPost'\n\nclass CommentList extends Component {\n  state = {\n    input: ''\n  }\n\n  componentDidMount() {\n    this.scrollToBottom()\n  }\n\n  componentDidUpdate() {\n    this.scrollToBottom()\n  }\n\n  writeComment = (e, commentPost) => {\n    e.preventDefault()\n    const { input } = this.state\n    if (!input) return\n\n    commentPost(commentPostOptions(this.props, input)).catch(e =>\n      showErrorAlert(parseError(e.message))\n    )\n\n    this.setState({\n      input: ''\n    })\n  }\n\n  handleChange = e => {\n    this.setState({\n      input: e.target.value\n    })\n  }\n\n  scrollToBottom = () => {\n    const messagesContainer = ReactDOM.findDOMNode(this.messageList)\n    messagesContainer.scrollTop = messagesContainer.scrollHeight\n  }\n\n  render() {\n    const { postId, user, comments } = this.props\n    return (\n      <Mutation\n        mutation={COMMENT_POST}\n        variables={{ postId: postId, text: this.state.input }}\n      >\n        {(commentPost, { loading, error, data }) => (\n          <CommentContainer>\n            <StyledList\n              ref={node => {\n                this.messageList = node\n              }}\n            >\n              {comments.map(comment => {\n                return (\n                  <Comment key={comment._id}>\n                    <Comment.Content>\n                      <Comment.Author as=\"a\">\n                        {comment.commentedBy.name}\n                      </Comment.Author>\n                      <Comment.Metadata>\n                        <div>\n                          {moment(new Date(comment.createdAt)).fromNow()}\n                        </div>\n                      </Comment.Metadata>\n                      <Comment.Text>{comment.text}</Comment.Text>\n                    </Comment.Content>\n                  </Comment>\n                )\n              })}\n              <div\n                style={{ float: 'left', clear: 'both' }}\n                ref={el => {\n                  this.messagesEnd = el\n                }}\n              />\n            </StyledList>\n\n            <form onSubmit={e => this.writeComment(e, commentPost)}>\n              <Input\n                action=\"Comment\"\n                value={this.state.input}\n                onChange={this.handleChange}\n                placeholder=\"Write a comment...\"\n              />\n            </form>\n          </CommentContainer>\n        )}\n      </Mutation>\n    )\n  }\n}\n\nexport default withUser(CommentList)\n\nconst CommentContainer = styled(Comment.Group)`\n  &&& {\n    padding: 14px;\n    margin: 0;\n    position: absolute;\n    background: #ffffff;\n    border-radius: 5px;\n    border-radius: 5px;\n    box-shadow: 0px 7px 8px 0px #00000047;\n    top: 100%;\n    z-index: 10;\n  }\n`\n\nconst StyledList = styled.div`\n  overflow-y: auto;\n  max-height: 180px;\n`\n\n'Next-GraphQL-Blog/client/pages/index.js'\n:import React, { Component } from 'react'\nimport { Query } from 'react-apollo'\nimport { Transition, animated } from 'react-spring'\n\nimport FeedList from '../components/FeedList'\nimport SearchForm from '../components/SearchForm'\nimport LoadPendingButton from '../components/LoadPendingButton'\nimport FeedLoader from '../components/FeedLoader'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport { NEW_LIKE_SUB, newLikeUpdate } from '../api/subscriptions/newLike'\nimport {\n  NEW_COMMENT_SUB,\n  newCommentUpdate\n} from '../api/subscriptions/newComment'\nimport { NEW_POST_SUB } from '../api/subscriptions/newPost'\n\nimport { POSTS_LIMIT } from '../api/constants'\n\nclass Home extends Component {\n  static async getInitialProps(ctx) {\n    const isFromServer = !!ctx.req\n\n    return {\n      isFromServer\n    }\n  }\n  state = {\n    newPosts: []\n  }\n\n  subscribeToNewLikes = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_LIKE_SUB,\n      updateQuery: (prev, result) => newLikeUpdate(prev, result)\n    })\n\n  subscribeToNewComments = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_COMMENT_SUB,\n      updateQuery: (prev, result) => newCommentUpdate(prev, result)\n    })\n\n  subscribeToNewPosts = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_POST_SUB,\n\n\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev\n\n        const newPost = { ...subscriptionData.data.newPost }\n        newPost.likes = []\n        newPost.comments = []\n\n        this.setState(prevState => {\n          return {\n            newPosts: [newPost, ...prevState.newPosts]\n          }\n        })\n      }\n    })\n\n  fetchMorePosts = (fetchMore, offset) =>\n    fetchMore({\n      variables: { offset },\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prev\n        const newPosts = [\n          ...prev.allPosts.posts,\n          ...fetchMoreResult.allPosts.posts\n        ]\n\n\n\n        const updatedPosts = newPosts.filter(\n          (post, index, self) =>\n            index === self.findIndex(t => t._id === post._id)\n        )\n\n        return {\n          ...prev,\n          allPosts: {\n            __typename: 'PostFeed',\n            count: prev.allPosts.count,\n            posts: updatedPosts\n          }\n        }\n      }\n    })\n\n  loadPendingPosts = () => {\n\n\n\n    const { allPosts } = this.props.client.readQuery({\n      query: ALL_POSTS,\n      variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' }\n    })\n\n    const newPostslength = this.state.newPosts.length\n    allPosts.posts.unshift(...this.state.newPosts)\n\n    this.props.client.writeQuery({\n      query: ALL_POSTS,\n      variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' },\n      data: {\n        allPosts: {\n          __typename: 'PostFeed',\n          count: allPosts.count + newPostslength,\n          posts: [...allPosts.posts]\n        }\n      }\n    })\n    window.scroll(0, 0)\n    this.setState({\n      newPosts: []\n    })\n  }\n\n  render() {\n    return (\n      <Query\n        query={ALL_POSTS}\n        variables={{ sort: '-createdAt', limit: POSTS_LIMIT, offset: 0 }}\n        fetchPolicy=\"cache-and-network\"\n        notifyOnNetworkStatusChange\n      >\n        {({ loading, subscribeToMore, fetchMore, data: { allPosts } }) => {\n          const postLength = allPosts.posts.length\n          const pendingPostLength = this.state.newPosts.length\n          return (\n            <>\n              <Transition\n                from={{ top: '-50px' }}\n                enter={{ top: '50px' }}\n                leave={{ top: '-50px' }}\n              >\n                {!!pendingPostLength &&\n                  (style => (\n                    <LoadPendingButton\n                      style={{ ...style }}\n                      onClick={this.loadPendingPosts}\n                    >\n                      Load {pendingPostLength} new post...\n                    </LoadPendingButton>\n                  ))}\n              </Transition>\n\n              <SearchForm client={this.props.client} />\n\n              <FeedList\n                posts={allPosts.posts}\n                isFromServer={this.props.isFromServer}\n                subscribeToNewLikes={() =>\n                  this.subscribeToNewLikes(subscribeToMore)\n                }\n                subscribeToNewComments={() =>\n                  this.subscribeToNewComments(subscribeToMore)\n                }\n                subscribeToNewPosts={() =>\n                  this.subscribeToNewPosts(subscribeToMore)\n                }\n                hasMorePosts={allPosts.count !== postLength}\n                fetchMore={() => this.fetchMorePosts(fetchMore, postLength)}\n              />\n\n              {loading && <FeedLoader />}\n            </>\n          )\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default Home\n\n'Next-GraphQL-Blog/client/components/PostCard.js'\n:import React, { Component } from 'react'\nimport { Card, Icon, Image, Divider } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { Query, Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport { LIKE_POST, likePostOptions } from '../api/mutations/like/likePost'\nimport {\n  DELETE_POST,\n  deletePostOptions\n} from '../api/mutations/post/deletePost'\n\nimport withUser from '../lib/withUser'\nimport parseError from '../lib/parseError'\nimport { showSuccessAlert, showErrorAlert } from '../lib/alerts'\n\nimport CommentList from './CommentList'\n\nclass PostCard extends Component {\n  state = {\n    showComments: false\n  }\n\n  toggleComments = () => {\n    this.setState({\n      showComments: !this.state.showComments\n    })\n  }\n\n  render() {\n    const { showComments } = this.state\n    const {\n      _id,\n      name,\n      content,\n      postedBy,\n      likes,\n      comments,\n      createdAt,\n      image,\n      user\n    } = this.props\n\n    return (\n      <Mutation mutation={LIKE_POST} variables={{ postId: _id }}>\n        {likePost => (\n          <Mutation mutation={DELETE_POST} variables={{ _id: _id }}>\n            {deletePost => (\n              <StyledCard props={{ showComments }}>\n                {user &&\n                  user._id === postedBy._id && (\n                    <RemoveIcon\n                      name=\"remove\"\n                      onClick={() => {\n                        deletePost(deletePostOptions(this.props)).then(() =>\n                          showSuccessAlert('Post was deleted!')\n                        )\n                      }}\n                    />\n                  )}\n\n                <StyledImage\n                  src={image ? image : '/static/blog-placeholder.jpg'}\n                />\n\n                <Card.Content>\n                  <Card.Header style={ellipsisStyle}>{name}</Card.Header>\n                  <Card.Meta style={ellipsisStyle}>\n                    By {postedBy.name}\n                  </Card.Meta>\n                  <Card.Description style={ellipsisStyle}>\n                    {content}\n                  </Card.Description>\n                </Card.Content>\n\n                <BottomSection extra>\n                  <a onClick={this.toggleComments}>\n                    <Icon name=\"comment\" />\n                    {comments.length} Comments\n                  </a>\n                  <a\n                    onClick={() => {\n                      likePost(likePostOptions(this.props))\n                        .then(() => showSuccessAlert('You liked a Post!'))\n                        .catch(e => showErrorAlert(parseError(e.message)))\n                    }}\n                  >\n                    <Icon name=\"like\" />\n                    {likes.length} Likes\n                  </a>\n                </BottomSection>\n\n                {showComments && (\n                  <CommentList comments={comments} postId={_id} />\n                )}\n              </StyledCard>\n            )}\n          </Mutation>\n        )}\n      </Mutation>\n    )\n  }\n}\n\nconst StyledCard = styled(Card)`\n  &&& {\n    height: ${props => (props.props.showComments ? 'auto' : '325px')};\n    box-shadow: 0px 3px 25px 2px #00000014;\n    border-bottom-left-radius: 0px;\n    border-bottom-right-radius: 0px;\n  }\n`\n\nconst BottomSection = styled(Card.Content)`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst RemoveIcon = styled(Icon)`\n  &&& {\n    font-size: 18px;\n    position: absolute;\n    top: 5px;\n    z-index: 9;\n    right: 0;\n    cursor: pointer;\n    transition: 0.2s all ease;\n    &:hover {\n      font-size: 22px;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  &&& {\n    height: 191px;\n    object-fit: cover;\n  }\n`\n\nconst ellipsisStyle = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden'\n}\n\nexport default withUser(PostCard)\n\n'Next-GraphQL-Blog/client/components/FeedList.js'\n:import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport FlipMove from 'react-flip-move'\n\nimport PostCard from './PostCard'\n\nclass FeedList extends Component {\n  componentDidMount() {\n    this.props.subscribeToNewLikes()\n    this.props.subscribeToNewComments()\n    this.props.subscribeToNewPosts()\n  }\n\n  render() {\n    const { posts, fetchMore, hasMorePosts, isFromServer } = this.props\n    return (\n      <Container>\n        <InfiniteScroll\n          dataLength={posts.length}\n          next={fetchMore}\n          hasMore={hasMorePosts}\n          style={{ overflow: 'visible' }}\n        >\n          <FlipMove\n            duration={500}\n            easing=\"ease-in-out\"\n            appearAnimation={isFromServer ? 'none' : 'fade'}\n            enterAnimation=\"accordionHorizontal\"\n            leaveAnimation=\"accordionHorizontal\"\n            typeName=\"ul\"\n            style={{\n              position: 'relative',\n              padding: 0,\n              display: 'flex',\n              flexWrap: 'wrap',\n              justifyContent: 'center'\n            }}\n          >\n            {!!posts.length ? (\n              posts.map((post, index) => (\n                <li key={post._id} style={{ display: 'inline-block' }}>\n                  <PostCard key={post._id} index={index} {...post} />\n                </li>\n              ))\n            ) : (\n              <div>No Posts here... :(</div>\n            )}\n          </FlipMove>\n        </InfiniteScroll>\n      </Container>\n    )\n  }\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1;\n  .ui.card {\n    margin: 15px;\n    width: 310px;\n  }\n  .ui.card:first-child {\n    margin-top: 15px;\n  }\n  .ui.card:last-child {\n    margin-bottom: 15px;\n  }\n`\nexport default FeedList\n",
        "gt": [
            "'Next-GraphQL-Blog/client/api/queries/post/allPosts.js'",
            "'Next-GraphQL-Blog/client/components/CommentList.js'",
            "'Next-GraphQL-Blog/client/components/PostCard.js'",
            "'Next-GraphQL-Blog/client/components/FeedList.js'",
            "'Next-GraphQL-Blog/client/pages/index.js'"
        ]
    },
    {
        "files": [
            "'Next-GraphQL-Blog/client/api/mutations/like/likePost.js'",
            "'Next-GraphQL-Blog/client/pages/index.js'",
            "'Next-GraphQL-Blog/client/components/PostCard.js'",
            "'Next-GraphQL-Blog/client/components/FeedList.js'"
        ],
        "content": "'Next-GraphQL-Blog/client/api/mutations/like/likePost.js'\n:import gql from 'graphql-tag'\n\nimport ALL_POSTS from '../../queries/post/allPosts'\n\nimport { POSTS_LIMIT } from '../../constants'\n\nexport const LIKE_POST = gql`\n  mutation likePost($postId: ID!) {\n    likePost(postId: $postId) {\n      _id\n      post {\n        _id\n      }\n      likedBy {\n        _id\n        name\n      }\n    }\n  }\n`\n\nconst fakeId = Math.round(Math.random() * -1000000)\n\nexport const likePostOptions = props => {\n  const { _id, user } = props\n  return {\n    optimisticResponse: {\n      __typename: 'Mutation',\n      likePost: {\n        __typename: 'Like',\n        _id: fakeId,\n        post: {\n          __typename: 'Post',\n          _id: _id\n        },\n        likedBy: {\n          __typename: 'User',\n          _id: user._id,\n          name: user.name\n        }\n      }\n    },\n    update: (cache, { data: { likePost } }) => {\n      const { allPosts } = cache.readQuery({\n        query: ALL_POSTS,\n        variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' }\n      })\n\n\n      const updatedPost = allPosts.posts.find(post => post._id === _id)\n\n      const likeExist = updatedPost.likes.filter(\n        like => like._id === likePost._id\n      )\n\n\n      if (likeExist.length === 0) {\n\n        updatedPost.likes = [...updatedPost.likes, likePost]\n      }\n\n      cache.writeQuery({\n        query: ALL_POSTS,\n        data: {\n          allPosts: {\n            __typename: 'PostFeed',\n            count: allPosts.count,\n            posts: [...allPosts.posts]\n          }\n        }\n      })\n    }\n  }\n}\n\n'Next-GraphQL-Blog/client/pages/index.js'\n:import React, { Component } from 'react'\nimport { Query } from 'react-apollo'\nimport { Transition, animated } from 'react-spring'\n\nimport FeedList from '../components/FeedList'\nimport SearchForm from '../components/SearchForm'\nimport LoadPendingButton from '../components/LoadPendingButton'\nimport FeedLoader from '../components/FeedLoader'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport { NEW_LIKE_SUB, newLikeUpdate } from '../api/subscriptions/newLike'\nimport {\n  NEW_COMMENT_SUB,\n  newCommentUpdate\n} from '../api/subscriptions/newComment'\nimport { NEW_POST_SUB } from '../api/subscriptions/newPost'\n\nimport { POSTS_LIMIT } from '../api/constants'\n\nclass Home extends Component {\n  static async getInitialProps(ctx) {\n    const isFromServer = !!ctx.req\n\n    return {\n      isFromServer\n    }\n  }\n  state = {\n    newPosts: []\n  }\n\n  subscribeToNewLikes = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_LIKE_SUB,\n      updateQuery: (prev, result) => newLikeUpdate(prev, result)\n    })\n\n  subscribeToNewComments = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_COMMENT_SUB,\n      updateQuery: (prev, result) => newCommentUpdate(prev, result)\n    })\n\n  subscribeToNewPosts = subscribeToMore =>\n    subscribeToMore({\n      document: NEW_POST_SUB,\n\n\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData.data) return prev\n\n        const newPost = { ...subscriptionData.data.newPost }\n        newPost.likes = []\n        newPost.comments = []\n\n        this.setState(prevState => {\n          return {\n            newPosts: [newPost, ...prevState.newPosts]\n          }\n        })\n      }\n    })\n\n  fetchMorePosts = (fetchMore, offset) =>\n    fetchMore({\n      variables: { offset },\n      updateQuery: (prev, { fetchMoreResult }) => {\n        if (!fetchMoreResult) return prev\n        const newPosts = [\n          ...prev.allPosts.posts,\n          ...fetchMoreResult.allPosts.posts\n        ]\n\n\n\n        const updatedPosts = newPosts.filter(\n          (post, index, self) =>\n            index === self.findIndex(t => t._id === post._id)\n        )\n\n        return {\n          ...prev,\n          allPosts: {\n            __typename: 'PostFeed',\n            count: prev.allPosts.count,\n            posts: updatedPosts\n          }\n        }\n      }\n    })\n\n  loadPendingPosts = () => {\n\n\n\n    const { allPosts } = this.props.client.readQuery({\n      query: ALL_POSTS,\n      variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' }\n    })\n\n    const newPostslength = this.state.newPosts.length\n    allPosts.posts.unshift(...this.state.newPosts)\n\n    this.props.client.writeQuery({\n      query: ALL_POSTS,\n      variables: { offset: 0, limit: POSTS_LIMIT, sort: '-createdAt' },\n      data: {\n        allPosts: {\n          __typename: 'PostFeed',\n          count: allPosts.count + newPostslength,\n          posts: [...allPosts.posts]\n        }\n      }\n    })\n    window.scroll(0, 0)\n    this.setState({\n      newPosts: []\n    })\n  }\n\n  render() {\n    return (\n      <Query\n        query={ALL_POSTS}\n        variables={{ sort: '-createdAt', limit: POSTS_LIMIT, offset: 0 }}\n        fetchPolicy=\"cache-and-network\"\n        notifyOnNetworkStatusChange\n      >\n        {({ loading, subscribeToMore, fetchMore, data: { allPosts } }) => {\n          const postLength = allPosts.posts.length\n          const pendingPostLength = this.state.newPosts.length\n          return (\n            <>\n              <Transition\n                from={{ top: '-50px' }}\n                enter={{ top: '50px' }}\n                leave={{ top: '-50px' }}\n              >\n                {!!pendingPostLength &&\n                  (style => (\n                    <LoadPendingButton\n                      style={{ ...style }}\n                      onClick={this.loadPendingPosts}\n                    >\n                      Load {pendingPostLength} new post...\n                    </LoadPendingButton>\n                  ))}\n              </Transition>\n\n              <SearchForm client={this.props.client} />\n\n              <FeedList\n                posts={allPosts.posts}\n                isFromServer={this.props.isFromServer}\n                subscribeToNewLikes={() =>\n                  this.subscribeToNewLikes(subscribeToMore)\n                }\n                subscribeToNewComments={() =>\n                  this.subscribeToNewComments(subscribeToMore)\n                }\n                subscribeToNewPosts={() =>\n                  this.subscribeToNewPosts(subscribeToMore)\n                }\n                hasMorePosts={allPosts.count !== postLength}\n                fetchMore={() => this.fetchMorePosts(fetchMore, postLength)}\n              />\n\n              {loading && <FeedLoader />}\n            </>\n          )\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default Home\n\n'Next-GraphQL-Blog/client/components/PostCard.js'\n:import React, { Component } from 'react'\nimport { Card, Icon, Image, Divider } from 'semantic-ui-react'\nimport styled from 'styled-components'\nimport { Query, Mutation } from 'react-apollo'\nimport gql from 'graphql-tag'\n\nimport ALL_POSTS from '../api/queries/post/allPosts'\nimport { LIKE_POST, likePostOptions } from '../api/mutations/like/likePost'\nimport {\n  DELETE_POST,\n  deletePostOptions\n} from '../api/mutations/post/deletePost'\n\nimport withUser from '../lib/withUser'\nimport parseError from '../lib/parseError'\nimport { showSuccessAlert, showErrorAlert } from '../lib/alerts'\n\nimport CommentList from './CommentList'\n\nclass PostCard extends Component {\n  state = {\n    showComments: false\n  }\n\n  toggleComments = () => {\n    this.setState({\n      showComments: !this.state.showComments\n    })\n  }\n\n  render() {\n    const { showComments } = this.state\n    const {\n      _id,\n      name,\n      content,\n      postedBy,\n      likes,\n      comments,\n      createdAt,\n      image,\n      user\n    } = this.props\n\n    return (\n      <Mutation mutation={LIKE_POST} variables={{ postId: _id }}>\n        {likePost => (\n          <Mutation mutation={DELETE_POST} variables={{ _id: _id }}>\n            {deletePost => (\n              <StyledCard props={{ showComments }}>\n                {user &&\n                  user._id === postedBy._id && (\n                    <RemoveIcon\n                      name=\"remove\"\n                      onClick={() => {\n                        deletePost(deletePostOptions(this.props)).then(() =>\n                          showSuccessAlert('Post was deleted!')\n                        )\n                      }}\n                    />\n                  )}\n\n                <StyledImage\n                  src={image ? image : '/static/blog-placeholder.jpg'}\n                />\n\n                <Card.Content>\n                  <Card.Header style={ellipsisStyle}>{name}</Card.Header>\n                  <Card.Meta style={ellipsisStyle}>\n                    By {postedBy.name}\n                  </Card.Meta>\n                  <Card.Description style={ellipsisStyle}>\n                    {content}\n                  </Card.Description>\n                </Card.Content>\n\n                <BottomSection extra>\n                  <a onClick={this.toggleComments}>\n                    <Icon name=\"comment\" />\n                    {comments.length} Comments\n                  </a>\n                  <a\n                    onClick={() => {\n                      likePost(likePostOptions(this.props))\n                        .then(() => showSuccessAlert('You liked a Post!'))\n                        .catch(e => showErrorAlert(parseError(e.message)))\n                    }}\n                  >\n                    <Icon name=\"like\" />\n                    {likes.length} Likes\n                  </a>\n                </BottomSection>\n\n                {showComments && (\n                  <CommentList comments={comments} postId={_id} />\n                )}\n              </StyledCard>\n            )}\n          </Mutation>\n        )}\n      </Mutation>\n    )\n  }\n}\n\nconst StyledCard = styled(Card)`\n  &&& {\n    height: ${props => (props.props.showComments ? 'auto' : '325px')};\n    box-shadow: 0px 3px 25px 2px #00000014;\n    border-bottom-left-radius: 0px;\n    border-bottom-right-radius: 0px;\n  }\n`\n\nconst BottomSection = styled(Card.Content)`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst RemoveIcon = styled(Icon)`\n  &&& {\n    font-size: 18px;\n    position: absolute;\n    top: 5px;\n    z-index: 9;\n    right: 0;\n    cursor: pointer;\n    transition: 0.2s all ease;\n    &:hover {\n      font-size: 22px;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  &&& {\n    height: 191px;\n    object-fit: cover;\n  }\n`\n\nconst ellipsisStyle = {\n  whiteSpace: 'nowrap',\n  textOverflow: 'ellipsis',\n  overflow: 'hidden'\n}\n\nexport default withUser(PostCard)\n\n'Next-GraphQL-Blog/client/components/FeedList.js'\n:import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport FlipMove from 'react-flip-move'\n\nimport PostCard from './PostCard'\n\nclass FeedList extends Component {\n  componentDidMount() {\n    this.props.subscribeToNewLikes()\n    this.props.subscribeToNewComments()\n    this.props.subscribeToNewPosts()\n  }\n\n  render() {\n    const { posts, fetchMore, hasMorePosts, isFromServer } = this.props\n    return (\n      <Container>\n        <InfiniteScroll\n          dataLength={posts.length}\n          next={fetchMore}\n          hasMore={hasMorePosts}\n          style={{ overflow: 'visible' }}\n        >\n          <FlipMove\n            duration={500}\n            easing=\"ease-in-out\"\n            appearAnimation={isFromServer ? 'none' : 'fade'}\n            enterAnimation=\"accordionHorizontal\"\n            leaveAnimation=\"accordionHorizontal\"\n            typeName=\"ul\"\n            style={{\n              position: 'relative',\n              padding: 0,\n              display: 'flex',\n              flexWrap: 'wrap',\n              justifyContent: 'center'\n            }}\n          >\n            {!!posts.length ? (\n              posts.map((post, index) => (\n                <li key={post._id} style={{ display: 'inline-block' }}>\n                  <PostCard key={post._id} index={index} {...post} />\n                </li>\n              ))\n            ) : (\n              <div>No Posts here... :(</div>\n            )}\n          </FlipMove>\n        </InfiniteScroll>\n      </Container>\n    )\n  }\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex: 1;\n  .ui.card {\n    margin: 15px;\n    width: 310px;\n  }\n  .ui.card:first-child {\n    margin-top: 15px;\n  }\n  .ui.card:last-child {\n    margin-bottom: 15px;\n  }\n`\nexport default FeedList\n",
        "gt": [
            "'Next-GraphQL-Blog/client/api/mutations/like/likePost.js'",
            "'Next-GraphQL-Blog/client/components/PostCard.js'",
            "'Next-GraphQL-Blog/client/components/FeedList.js'",
            "'Next-GraphQL-Blog/client/pages/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/configs/core/button.js'",
            "'ruui/src/configs/core/index.js'",
            "'ruui/src/components/button.js'",
            "'ruui/src/components/responsibleTouchArea.js'",
            "'ruui/src/components/rippleEffect.js'"
        ],
        "content": "'ruui/src/configs/core/button.js'\n:import { StyleSheet } from 'react-native';\nimport { colors } from '../../utils';\nimport { styles } from '../../components/button';\n\nexport default {\n\tstyles,\n};\n'ruui/src/configs/core/index.js'\n:import button from './button';\nimport modal from './modal';\n\nexport default {\n\tbutton,\n\tmodal,\n};\n'ruui/src/components/button.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, StyleSheet } from 'react-native';\nimport ResponsibleTouchArea from './responsibleTouchArea';\nimport { colors, valueAt } from '../utils';\nimport type { Style, Element, SnappingDirection, } from '../typeDefinition';\n\ntype Props = {\n\ttitle?: String,\n\ticon?: Element,\n\trightIcon?: Element,\n\tchildren?: Element,\n\twrapperStyle?: Style,\n\tinnerStyle?: Style,\n\ttextStyle?: Style,\n\ttooltip?: String | Element,\n\ttooltipWrapperStyle?: Style,\n\ttooltipDirection?: SnappingDirection,\n\ttooltipPositionSpacing?: Number,\n\ttooltipPositionOffset?: Object,\n\tripple?: Boolean,\n\tstaticRipple?: Boolean,\n\trippleColor?: String,\n\trippleInitialOpacity?: Number,\n\trippleInitialScale?: Number,\n\trippleAnimationSpeed?: Number,\n\tfade?: Boolean,\n\tfadeLevel?: Number,\n\traise?: Boolean,\n\tdebounce?: Number,\n\tdisabled?: Boolean,\n\tactiveOpacity?: Number,\n\tonPress?: Function,\n\tonPressIn?: Function,\n\tonPressOut?: Function,\n\tonMouseEnter?: Function,\n\tonMouseLeave?: Function,\n};\n\nclass RuuiButton extends Component<any, Props, any> {\n\tprops: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tstatic defaultProps = {\n\t\tripple: true,\n\t\tstaticRipple: false,\n\t\ttitle: 'TITLE',\n\t\tdisabled: false,\n\t\traise: true,\n\t\tfade: true,\n\t\tfadeLevel: 0.2,\n\t};\n\n\trender() {\n\t\tconst { wrapperStyle, innerStyle, ...otherProps } = this.props,\n\t\t\truuiStyles = valueAt(this, 'context.ruuiConfigs.button.styles', styles);\n\n\t\treturn <ResponsibleTouchArea\n\t\t\twrapperStyle={[ruuiStyles.wrapper, wrapperStyle]}\n\t\t\tinnerStyle={[ruuiStyles.contentContainer, innerStyle]}\n\t\t\t{...otherProps}>\n\t\t\t{this.renderContent()}\n\t\t</ResponsibleTouchArea>;\n\t}\n\n\trenderContent() {\n\t\tconst { title, textStyle, icon, rightIcon, children } = this.props,\n\t\t\truuiStyles = valueAt(this, 'context.ruuiConfigs.button.styles', styles),\n\t\t\ttextStyles = [ruuiStyles.titleText, textStyle];\n\n\t\tif (children) {\n\t\t\treturn children;\n\t\t} else {\n\t\t\treturn <View style={ruuiStyles.innerContainer}>\n\t\t\t\t<View style={ruuiStyles.leftContainer}>{icon}</View>\n\t\t\t\t<Text style={textStyles}>{title}</Text>\n\t\t\t\t<View style={ruuiStyles.rightContainer}>{rightIcon}</View>\n\t\t\t</View>;\n\t\t}\n\t}\n}\n\nexport default RuuiButton;\n\nexport const styles = StyleSheet.create({\n\twrapper: {\n\t\tbackgroundColor: colors.iOsBlue,\n\t\tborderRadius: 3,\n\t},\n\tcontentContainer: {\n\t\tpadding: 10,\n\t\tflexDirection: 'row',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tinnerContainer: {\n\t\tflexDirection: 'row',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tleftContainer: {\n\t\tmarginRight: 6,\n\t},\n\trightContainer: {\n\t\tmarginLeft: 6,\n\t},\n\ttitleText: {\n\t\tcolor: '#FFFFFF',\n\t\tbackgroundColor: 'transparent',\n\t},\n});\n\n'ruui/src/components/responsibleTouchArea.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, TouchableOpacity, View, StyleSheet, Platform } from 'react-native';\nimport tinyColor from 'tinycolor2';\n\nimport RippleEffect from './rippleEffect';\nimport { debounce, isIos, } from '../utils';\nimport * as appActions from '../store/action/app';\nimport type { Style, Element, SnappingDirection, } from '../typeDefinition';\n\ntype Props = {\n\tchildren?: Element,\n\twrapperStyle?: Style,\n\tinnerStyle?: Style,\n\ttooltip?: String | Element,\n\ttooltipWrapperStyle?: Style,\n\ttooltipInnerStyle?: Style,\n\ttooltipDirection?: SnappingDirection,\n\ttooltipPositionSpacing?: number,\n\ttooltipPositionOffset?: Object,\n\tripple?: boolean,\n\tstaticRipple?: boolean,\n\trippleColor?: string,\n\trippleInitialOpacity?: number,\n\trippleInitialScale?: number,\n\trippleAnimationSpeed?: number,\n\tfade?: boolean,\n\tfadeLevel?: number,\n\traise?: boolean,\n\tdebounce?: number,\n\tdisabled?: boolean,\n\tactiveOpacity?: number,\n\tonPress?: Function,\n\tonPressIn?: Function,\n\tonPressOut?: Function,\n\tonMouseEnter?: Function,\n\tonMouseLeave?: Function,\n};\n\nconst MAX_PARTICLE_COUNT = 5;\n\nclass RuuiResponsibleTouchArea extends Component<any, Props, any> {\n\tprops: Props;\n\n\tstatic contextTypes = {\n\t\truuiStore: PropTypes.object,\n\t};\n\n\tstatic defaultProps = {\n\t\tstaticRipple: false,\n\t\tactiveOpacity: 0.7,\n\t\tripple: true,\n\t\traise: false,\n\t\tfade: false,\n\t\tfadeLevel: 0.1,\n\t\tdisabled: false,\n\t};\n\n\trippleIndex = 0;\n\n\tcomponentWillUnmount() {\n\t\tthis.willUnmount = true;\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tripples: [],\n\t\t\tmouseInside: false,\n\t\t};\n\n\t\tthis.raiseAnimation = new Animated.Value(0);\n\t\tthis.fadeAnimation = new Animated.Value(0);\n\n\t\tif (props.debounce) {\n\t\t\tthis.handlePress = debounce(this.handlePress.bind(this), props.debounce);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { children, wrapperStyle, innerStyle, disabled, onPressIn, onPressOut, onPress, ripple, fade, fadeLevel, raise, ...otherProps } = this.props,\n\t\t\tflattenWrapperStyles = StyleSheet.flatten(wrapperStyle) || {},\n\t\t\tplatformStyles = Platform.select({\n\t\t\t\tweb: { cursor: 'pointer', userSelect: 'none' },\n\t\t\t}),\n\t\t\tisLightBackground = tinyColor(flattenWrapperStyles.backgroundColor).getBrightness() > 180,\n\t\t\twrapperBorderRadius = extractBorderRadius(flattenWrapperStyles);\n\n\t\treturn <View\n\t\t\tonMouseLeave={this.onMouseLeave}\n\t\t\tonMouseEnter={this.onMouseEnter}\n\t\t\tref={(instance) => { this.wrapperView = instance; }}\n\t\t\tcollapsable={false}\n\t\t\tstyle={[wrapperStyle, platformStyles]}>\n\n\t\t\t{raise && this.renderShadowEffect(raise, isLightBackground, wrapperBorderRadius)}\n\t\t\t{fade && this.renderFadeEffect(fade, fadeLevel, isLightBackground, wrapperBorderRadius)}\n\t\t\t{ripple && this.renderRippleEffect(isLightBackground, wrapperBorderRadius)}\n\n\t\t\t<TouchableOpacity\n\t\t\t\tdisabled={disabled}\n\t\t\t\tstyle={innerStyle}\n\t\t\t\tonPressIn={this.onPressIn}\n\t\t\t\tonPressOut={this.onPressOut}\n\t\t\t\tonPress={this.onPress}\n\t\t\t\tonStartShouldSetResponderCapture={() => !disabled}\n\t\t\t\t{...otherProps}>\n\t\t\t\t<View pointerEvents=\"none\">\n\t\t\t\t\t{children}\n\t\t\t\t</View>\n\t\t\t</TouchableOpacity>\n\t\t</View>;\n\t}\n\n\trenderShadowEffect(raise: Boolean, isLightBackground: Boolean, wrapperBorderRadius) {\n\t\tconst shadowOpacity = this.raiseAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1], outputRange: [raise ? 0.15 : 0, 0.6],\n\t\t\t}),\n\t\t\tshadow = raise && {\n\t\t\t\tborderRadius: 3,\n\t\t\t\tshadowColor: '#666666',\n\t\t\t\topacity: shadowOpacity,\n\t\t\t\tshadowOpacity: 1,\n\t\t\t\tshadowRadius: raiseShadowRadius,\n\t\t\t\tshadowOffset: { width: 0, height: 2 },\n\t\t\t};\n\n\t\treturn <Animated.View\n\t\t\tstyle={[styles.fullSizeAbsolute, shadow, wrapperBorderRadius]}/>;\n\t}\n\n\trenderFadeEffect(fade, fadeLevel, isLightBackground: Boolean, wrapperBorderRadius) {\n\t\tconst opacity = this.fadeAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1],\n\t\t\t\toutputRange: [0, fadeLevel],\n\t\t\t\textrapolate: 'clamp',\n\t\t\t}),\n\t\t\tmaskStyles = {\n\t\t\t\tbackgroundColor: isLightBackground ? '#000000' : '#ffffff',\n\t\t\t\topacity,\n\t\t\t};\n\n\t\treturn <Animated.View style={[styles.fullSizeAbsolute, wrapperBorderRadius, maskStyles]}/>;\n\t}\n\n\trenderRippleEffect(isLightBackground: Boolean, wrapperBorderRadius) {\n\t\treturn <View style={[styles.fullSizeAbsolute, wrapperBorderRadius, { overflow: 'hidden' }]}>\n\t\t\t{this.renderRipples()}\n\t\t</View>;\n\t}\n\n\trenderRipples() {\n\t\tconst { ripples } = this.state,\n\t\t\t{ rippleInitialOpacity, rippleInitialScale, rippleAnimationSpeed } = this.props;\n\n\t\treturn ripples.map((ripple) => {\n\t\t\treturn <RippleEffect\n\t\t\t\tkey={ripple.index}\n\t\t\t\tstyle={ripple.style}\n\t\t\t\tindex={ripple.index}\n\t\t\t\tinitialOpacity={rippleInitialOpacity}\n\t\t\t\tinitialScale={rippleInitialScale}\n\t\t\t\tspeed={rippleAnimationSpeed}/>;\n\t\t});\n\t}\n\n\tonPress = (e) => {\n\t\tconst { onPress } = this.props;\n\t\tif (onPress) setTimeout(() => onPress(e), 0);\n\t};\n\n\tonPressIn = (e) => {\n\t\tconst { ripples } = this.state,\n\t\t\t{ wrapperStyle, disabled, raise, staticRipple, rippleColor, onPressIn } = this.props;\n\n\t\tif (disabled) return;\n\n\t\tconst flattenWrapperStyles = StyleSheet.flatten(wrapperStyle) || {},\n\t\t\tisLightBackground = tinyColor(flattenWrapperStyles.backgroundColor).getBrightness() > 180;\n\n\t\tif (raise) this.playRaiseAnimation(1);\n\n\t\tthis.playFadeAnimation(1);\n\n\t\tconst { locationX, locationY, offsetX, offsetY, pageX, pageY } = e.nativeEvent;\n\n\t\tthis.wrapperView.measure((fx, fy, wrapperWidth, wrapperHeight, px, py) => {\n\t\t\tlet rippleRadius = 0, ripplePosition;\n\t\t\tconst touchX = locationX || offsetX, touchY = locationY || offsetY;\n\n\t\t\tif (staticRipple || !touchX) {\n\t\t\t\trippleRadius = wrapperWidth / 2;\n\t\t\t\tripplePosition = {\n\t\t\t\t\ttop: (wrapperHeight / 2) - rippleRadius,\n\t\t\t\t\tleft: (wrapperWidth / 2) - rippleRadius,\n\t\t\t\t};\n\t\t\t} else {\n\n\t\t\t\tif (touchX > wrapperWidth / 2) {\n\t\t\t\t\tif (touchY > wrapperHeight / 2) {\n\n\t\t\t\t\t\trippleRadius = Math.sqrt((touchX * touchX) + (touchY * touchY));\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst paddedY = touchY - wrapperHeight;\n\t\t\t\t\t\trippleRadius = Math.sqrt((touchX * touchX) + (paddedY * paddedY));\n\t\t\t\t\t}\n\t\t\t\t} else if (touchY > wrapperHeight / 2) {\n\n\t\t\t\t\tconst paddedX = touchX - wrapperWidth;\n\t\t\t\t\trippleRadius = Math.sqrt((paddedX * paddedX) + (touchY * touchY));\n\t\t\t\t} else {\n\n\t\t\t\t\tconst paddedX = touchX - wrapperWidth, paddedY = touchY - wrapperHeight;\n\t\t\t\t\trippleRadius = Math.sqrt((paddedX * paddedX) + (paddedY * paddedY));\n\t\t\t\t}\n\n\t\t\t\trippleRadius *= 1.2;\n\t\t\t\tripplePosition = {\n\t\t\t\t\ttop: touchY - rippleRadius,\n\t\t\t\t\tleft: touchX - rippleRadius,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.rippleIndex += 1;\n\t\t\tconst defaultRippleColor = isLightBackground ? '#333333' : '#ffffff',\n\t\t\t\tnewRipple = {\n\t\t\t\t\tindex: this.rippleIndex,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\twidth: rippleRadius * 2,\n\t\t\t\t\t\theight: rippleRadius * 2,\n\t\t\t\t\t\tborderRadius: rippleRadius,\n\t\t\t\t\t\tbackgroundColor: rippleColor || defaultRippleColor,\n\t\t\t\t\t\t...ripplePosition,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tlet nextRipples = [newRipple, ...ripples];\n\n\t\t\tif (nextRipples.length > MAX_PARTICLE_COUNT) {\n\t\t\t\tnextRipples = nextRipples.slice(0, MAX_PARTICLE_COUNT);\n\t\t\t}\n\n\t\t\tif (!this.willUnmount) this.setState({ ripples: nextRipples });\n\t\t});\n\n\t\tif (onPressIn) onPressIn(e);\n\t};\n\n\tonPressOut = (e, forceFade = false) => {\n\t\tconst { mouseInside } = this.state,\n\t\t\t{ raise, onPressOut } = this.props;\n\n\t\tif (raise) this.playRaiseAnimation(0);\n\t\tif (onPressOut && e) onPressOut(e);\n\n\t\tif (forceFade === true || !mouseInside) {\n\t\t\tthis.playFadeAnimation(0);\n\t\t}\n\t};\n\n\tonMouseEnter = () => {\n\t\tconst { ruuiStore } = this.context;\n\t\tconst { disabled, tooltip, tooltipWrapperStyle, tooltipInnerStyle, tooltipDirection, tooltipPositionSpacing, tooltipPositionOffset } = this.props;\n\n\t\tthis.setState({ mouseInside: true });\n\n\t\tif (!disabled) {\n\t\t\tthis.playFadeAnimation(1);\n\n\t\t\tif (tooltip) {\n\t\t\t\tthis.wrapperView.measure((x, y, width, height, pageX, pageY) => {\n\t\t\t\t\truuiStore.dispatch(appActions.toggleTooltip(true, {\n\t\t\t\t\t\ttargetLayout: { x: pageX, y: pageY, width, height },\n\t\t\t\t\t\tdirection: tooltipDirection,\n\t\t\t\t\t\tpositionSpacing: tooltipPositionSpacing,\n\t\t\t\t\t\tpositionOffset: tooltipPositionOffset,\n\t\t\t\t\t\tcontent: tooltip,\n\t\t\t\t\t\twrapperStyle: tooltipWrapperStyle,\n\t\t\t\t\t\tinnerStyle: tooltipInnerStyle,\n\t\t\t\t\t}));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tonMouseLeave = () => {\n\t\tconst { ruuiStore } = this.context;\n\t\tconst { disabled, tooltip } = this.props;\n\n\t\tthis.onPressOut(null, true);\n\t\tthis.setState({ mouseInside: false });\n\n\t\tif (!disabled && tooltip) {\n\t\t\truuiStore.dispatch(appActions.toggleTooltip(false));\n\t\t}\n\t};\n\n\tplayRaiseAnimation = (toValue: Number) => {\n\t\tif (this.raisingAnimation) this.raisingAnimation.clear();\n\n\t\tconst animations = [\n\t\t\tAnimated.timing(this.raiseAnimation, {\n\t\t\t\ttoValue,\n\t\t\t\tduration: 500,\n\t\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\t\tuseNativeDriver: false,\n\t\t\t}),\n\t\t];\n\n\t\tthis.raisingAnimation = Animated.parallel(animations).start();\n\t};\n\n\tplayFadeAnimation = (toValue: Number) => {\n\t\tif (this.fadingAnimation) this.fadingAnimation.clear();\n\n\t\tthis.fadingAnimation = Animated.timing(this.fadeAnimation, {\n\t\t\ttoValue,\n\t\t\tduration: 800,\n\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\tuseNativeDriver: true,\n\t\t}).start();\n\t};\n}\n\nexport default RuuiResponsibleTouchArea;\n\nfunction extractBorderRadius(baseStyles) {\n\treturn [\n\t\t'borderRadius',\n\t\t'borderTopLeftRadius',\n\t\t'borderTopRightRadius',\n\t\t'borderBottomLeftRadius',\n\t\t'borderBottomRightRadius',\n\t].reduce((accumulate, currentAttribute) => {\n\t\tif (baseStyles[currentAttribute]) {\n\t\t\taccumulate[currentAttribute] = baseStyles[currentAttribute];\n\t\t}\n\n\t\treturn accumulate;\n\t}, {});\n}\n\nconst raiseShadowRadius = isIos ? 4 : 10;\nconst styles = StyleSheet.create({\n\tfullSizeAbsolute: {\n\t\tposition: 'absolute',\n\t\ttop: 0, bottom: 0, right: 0, left: 0,\n\t},\n});\n\n'ruui/src/components/rippleEffect.js'\n:import React, { Component } from 'react';\nimport { Animated, Easing } from 'react-native';\nimport { Style } from '../typeDefinition';\n\ntype Props = {\n\tinitialOpacity?: number,\n\tinitialScale?: number,\n\tspeed?: number,\n\tstyle: Style,\n};\n\nclass RuuiRippleEffect extends Component<any, Props, any> {\n\tprops: Props;\n\n\tstatic defaultProps = {\n\t\tinitialOpacity: 0.2,\n\t\tinitialScale: 0.02,\n\t\tspeed: 800,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.expandAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tAnimated.timing(this.expandAnimation, {\n\t\t\ttoValue: 1,\n\t\t\tduration: this.props.speed,\n\t\t\teasing: Easing.out(Easing.bezier(0.445, 0.05, 0.55, 0.95)),\n\t\t\tuseNativeDriver: true,\n\t\t}).start();\n\t}\n\n\trender() {\n\t\tconst { style, initialScale, initialOpacity } = this.props,\n\t\t\topacity = this.expandAnimation.interpolate({\n\t\t\t\tinputRange: [0, 0.5, 1], outputRange: [initialOpacity, 0.1, 0],\n\t\t\t}), scale = this.expandAnimation.interpolate({\n\t\t\t\tinputRange: [0, 0.1, 0.5, 1], outputRange: [initialScale, 0.4, 0.8, 1],\n\t\t\t}), styles = {\n\t\t\t\t...style,\n\t\t\t\tposition: 'absolute',\n\t\t\t\ttransform: [{ scale }],\n\t\t\t\topacity,\n\t\t\t};\n\n\t\treturn <Animated.View pointerEvents=\"none\" style={styles}/>;\n\t}\n}\n\nexport default RuuiRippleEffect;\n",
        "gt": [
            "'ruui/src/components/rippleEffect.js'",
            "'ruui/src/components/responsibleTouchArea.js'",
            "'ruui/src/components/button.js'",
            "'ruui/src/configs/core/button.js'",
            "'ruui/src/configs/core/index.js'"
        ]
    },
    {
        "files": [
            "'NFT-Marketplace-Tutorial/src/components/Navbar.js'",
            "'NFT-Marketplace-Tutorial/src/components/Profile.js'",
            "'NFT-Marketplace-Tutorial/src/index.js'"
        ],
        "content": "'NFT-Marketplace-Tutorial/src/components/Navbar.js'\n:import logo from '../logo_3.png';\nimport fullLogo from '../full_logo.png';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams\n} from \"react-router-dom\";\nimport { useEffect, useState } from 'react';\nimport { useLocation } from 'react-router';\n\nfunction Navbar() {\n\nconst [connected, toggleConnect] = useState(false);\nconst location = useLocation();\nconst [currAddress, updateAddress] = useState('0x');\n\nasync function getAddress() {\n  const ethers = require(\"ethers\");\n  const provider = new ethers.providers.Web3Provider(window.ethereum);\n  const signer = provider.getSigner();\n  const addr = await signer.getAddress();\n  updateAddress(addr);\n}\n\nfunction updateButton() {\n  const ethereumButton = document.querySelector('.enableEthereumButton');\n  ethereumButton.textContent = \"Connected\";\n  ethereumButton.classList.remove(\"hover:bg-blue-70\");\n  ethereumButton.classList.remove(\"bg-blue-500\");\n  ethereumButton.classList.add(\"hover:bg-green-70\");\n  ethereumButton.classList.add(\"bg-green-500\");\n}\n\nasync function connectWebsite() {\n\n    const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n    if(chainId !== '0x5')\n    {\n\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x5' }],\n     })\n    }\n    await window.ethereum.request({ method: 'eth_requestAccounts' })\n      .then(() => {\n        updateButton();\n        console.log(\"here\");\n        getAddress();\n        window.location.replace(location.pathname)\n      });\n}\n\n  useEffect(() => {\n    if(window.ethereum == undefined)\n      return;\n    let val = window.ethereum.isConnected();\n    if(val)\n    {\n      console.log(\"here\");\n      getAddress();\n      toggleConnect(val);\n      updateButton();\n    }\n\n    window.ethereum.on('accountsChanged', function(accounts){\n      window.location.replace(location.pathname)\n    })\n  });\n\n    return (\n      <div className=\"\">\n        <nav className=\"w-screen\">\n          <ul className='flex items-end justify-between py-3 bg-transparent text-white pr-5'>\n          <li className='flex items-end ml-5 pb-2'>\n            <Link to=\"/\">\n            <img src={fullLogo} alt=\"\" width={120} height={120} className=\"inline-block -mt-2\"/>\n            <div className='inline-block font-bold text-xl ml-2'>\n              NFT Marketplace\n            </div>\n            </Link>\n          </li>\n          <li className='w-2/6'>\n            <ul className='lg:flex justify-between font-bold mr-10 text-lg'>\n              {location.pathname === \"/\" ?\n              <li className='border-b-2 hover:pb-0 p-2'>\n                <Link to=\"/\">Marketplace</Link>\n              </li>\n              :\n              <li className='hover:border-b-2 hover:pb-0 p-2'>\n                <Link to=\"/\">Marketplace</Link>\n              </li>\n              }\n              {location.pathname === \"/sellNFT\" ?\n              <li className='border-b-2 hover:pb-0 p-2'>\n                <Link to=\"/sellNFT\">List My NFT</Link>\n              </li>\n              :\n              <li className='hover:border-b-2 hover:pb-0 p-2'>\n                <Link to=\"/sellNFT\">List My NFT</Link>\n              </li>\n              }\n              {location.pathname === \"/profile\" ?\n              <li className='border-b-2 hover:pb-0 p-2'>\n                <Link to=\"/profile\">Profile</Link>\n              </li>\n              :\n              <li className='hover:border-b-2 hover:pb-0 p-2'>\n                <Link to=\"/profile\">Profile</Link>\n              </li>\n              }\n              <li>\n                <button className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\" onClick={connectWebsite}>{connected? \"Connected\":\"Connect Wallet\"}</button>\n              </li>\n            </ul>\n          </li>\n          </ul>\n        </nav>\n        <div className='text-white text-bold text-right mr-10 text-sm'>\n          {currAddress !== \"0x\" ? \"Connected to\":\"Not Connected. Please login to view NFTs\"} {currAddress !== \"0x\" ? (currAddress.substring(0,15)+'...'):\"\"}\n        </div>\n      </div>\n    );\n  }\n\n  export default Navbar;\n'NFT-Marketplace-Tutorial/src/components/Profile.js'\n:import Navbar from \"./Navbar\";\nimport { useLocation, useParams } from 'react-router-dom';\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport NFTTile from \"./NFTTile\";\n\nexport default function Profile () {\n    const [data, updateData] = useState([]);\n    const [dataFetched, updateFetched] = useState(false);\n    const [address, updateAddress] = useState(\"0x\");\n    const [totalPrice, updateTotalPrice] = useState(\"0\");\n\n    async function getNFTData(tokenId) {\n        const ethers = require(\"ethers\");\n        let sumPrice = 0;\n\n        const provider = new ethers.providers.Web3Provider(window.ethereum);\n        const signer = provider.getSigner();\n        const addr = await signer.getAddress();\n\n\n        let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer)\n\n\n        let transaction = await contract.getMyNFTs()\n\n\n\n        const items = await Promise.all(transaction.map(async i => {\n            const tokenURI = await contract.tokenURI(i.tokenId);\n            let meta = await axios.get(tokenURI);\n            meta = meta.data;\n\n            let price = ethers.utils.formatUnits(i.price.toString(), 'ether');\n            let item = {\n                price,\n                tokenId: i.tokenId.toNumber(),\n                seller: i.seller,\n                owner: i.owner,\n                image: meta.image,\n                name: meta.name,\n                description: meta.description,\n            }\n            sumPrice += Number(price);\n            return item;\n        }))\n\n        updateData(items);\n        updateFetched(true);\n        updateAddress(addr);\n        updateTotalPrice(sumPrice.toPrecision(3));\n    }\n\n    const params = useParams();\n    const tokenId = params.tokenId;\n    if(!dataFetched)\n        getNFTData(tokenId);\n\n    return (\n        <div className=\"profileClass\" style={{\"min-height\":\"100vh\"}}>\n            <Navbar></Navbar>\n            <div className=\"profileClass\">\n            <div className=\"flex text-center flex-col mt-11 md:text-2xl text-white\">\n                <div className=\"mb-5\">\n                    <h2 className=\"font-bold\">Wallet Address</h2>\n                    {address}\n                </div>\n            </div>\n            <div className=\"flex flex-row text-center justify-center mt-10 md:text-2xl text-white\">\n                    <div>\n                        <h2 className=\"font-bold\">No. of NFTs</h2>\n                        {data.length}\n                    </div>\n                    <div className=\"ml-20\">\n                        <h2 className=\"font-bold\">Total Value</h2>\n                        {totalPrice} ETH\n                    </div>\n            </div>\n            <div className=\"flex flex-col text-center items-center mt-11 text-white\">\n                <h2 className=\"font-bold\">Your NFTs</h2>\n                <div className=\"flex justify-center flex-wrap max-w-screen-xl\">\n                    {data.map((value, index) => {\n                    return <NFTTile data={value} key={index}></NFTTile>;\n                    })}\n                </div>\n                <div className=\"mt-10 text-xl\">\n                    {data.length == 0 ? \"Oops, No NFT data to display (Are you logged in?)\":\"\"}\n                </div>\n            </div>\n            </div>\n        </div>\n    )\n};\n'NFT-Marketplace-Tutorial/src/index.js'\n:import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport SellNFT from './components/SellNFT';\nimport Marketplace from './components/Marketplace';\nimport Profile from './components/Profile';\nimport NFTPage from './components/NFTpage';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"/\" element={<Marketplace />}/>\n        <Route path=\"/sellNFT\" element={<SellNFT />}/>\n        <Route path=\"/nftPage/:tokenId\" element={<NFTPage />}/>\n        <Route path=\"/profile\" element={<Profile />}/>\n      </Routes>\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n\n\n\nreportWebVitals();\n",
        "gt": [
            "'NFT-Marketplace-Tutorial/src/components/Navbar.js'",
            "'NFT-Marketplace-Tutorial/src/components/Profile.js'",
            "'NFT-Marketplace-Tutorial/src/index.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/common/options.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ],
        "content": "'better-onetab/src/common/options.js'\n:import _ from 'lodash'\nimport __ from '@/common/i18n'\n\nconst cate = {\n  BEHAVIOUR: 'behaviour',\n  APPEARANCE: 'appearance',\n  PERFOREMANCE: 'performance',\n}\n\nexport const optionsList = [\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'browserAction',\n    type: String,\n    default: 'show-list',\n    items: [\n      {\n        value: 'popup',\n        label: __('opt_label_popup'),\n      },\n      {\n        value: 'store-selected',\n        label: __('opt_label_store_selected'),\n      },\n      {\n        value: 'store-all',\n        label: __('opt_label_store_all'),\n      },\n      {\n        value: 'show-list',\n        label: __('opt_label_show_list'),\n      },\n      {\n        value: 'none',\n        label: __('opt_label_none'),\n      },\n    ],\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'itemClickAction',\n    type: String,\n    default: 'open-and-remove',\n    items: [\n      {\n        value: 'open-and-remove',\n        label: __('opt_label_open_and_remove'),\n      },\n      {\n        value: 'open',\n        label: __('opt_label_open'),\n      },\n      {\n        value: 'none',\n        label: __('opt_label_none'),\n      },\n    ],\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'popupItemClickAction',\n    type: String,\n    default: 'restore',\n    items: [\n      {\n        value: 'restore',\n        label: __('opt_label_restore'),\n      },\n      {\n        value: 'restore-new-window',\n        label: __('opt_label_restore_new_window'),\n      },\n      {\n        value: 'none',\n        label: __('opt_label_none'),\n      },\n    ],\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'removeItemBtnPos',\n    type: String,\n    default: 'left',\n    items: [\n      {\n        value: 'left',\n        label: __('opt_label_left'),\n      },\n      {\n        value: 'right',\n        label: __('opt_label_right'),\n      },\n    ],\n    deprecated: '1.4',\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'defaultNightMode',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'itemDisplay',\n    type: String,\n    default: 'title-and-url',\n    items: [\n      {\n        value: 'title-and-url',\n        label: __('opt_label_title_and_url'),\n      },\n      {\n        value: 'title',\n        label: __('opt_label_title'),\n      },\n      {\n        value: 'url',\n        label: __('opt_label_url'),\n      },\n    ],\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'hideFavicon',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'fixedToolbar',\n    type: Boolean,\n    default: false,\n    deprecated: '1.4',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'addHistory',\n    type: Boolean,\n    default: true,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'ignorePinned',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'pinNewList',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'pageContext',\n    type: Boolean,\n    default: true,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'allContext',\n    type: Boolean,\n    default: false,\n    deps: ({pageContext}) => pageContext,\n    new: '1.3.6',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'openTabListWhenNewTab',\n    desc: true,\n    deps: ({disableDynamicMenu}) => !disableDynamicMenu,\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'alertRemoveList',\n    type: Boolean,\n    default: false,\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'excludeIllegalURL',\n    type: Boolean,\n    default: true,\n    new: '1.3.6',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'removeDuplicate',\n    type: Boolean,\n    default: false,\n    new: '1.3.6',\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'enableSearch',\n    type: Boolean,\n    default: true,\n    new: '1.3.7',\n    deprecated: '1.4',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'openEnd',\n    type: Boolean,\n    default: true,\n    new: '1.3.9',\n  },\n  {\n    cate: cate.BEHAVIOUR,\n    name: 'openTabListNoTab',\n    type: Boolean,\n    default: true,\n    new: '1.4.0',\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'listsPerPage',\n    type: String,\n    default: 10,\n    items: [\n      {\n        value: 5,\n        label: 5,\n      },\n      {\n        value: 10,\n        label: 10,\n      },\n      {\n        value: 15,\n        label: 15,\n      },\n    ],\n    new: '1.4.0',\n  },\n  {\n    cate: cate.APPEARANCE,\n    name: 'titleFontSize',\n    type: String,\n    default: '12px',\n    items: [\n      {\n        value: '12px',\n        label: '12px',\n      },\n      {\n        value: '18px',\n        label: '18px',\n      },\n      {\n        value: '24px',\n        label: '24px',\n      },\n    ],\n    new: '1.4.0',\n  },\n  {\n    cate: cate.PERFOREMANCE,\n    name: 'disableDynamicMenu',\n    type: Boolean,\n    default: false,\n    new: '1.4.0',\n  },\n  {\n    cate: cate.PERFOREMANCE,\n    name: 'disableExpansion',\n    type: Boolean,\n    default: false,\n    new: '1.4.0',\n  },\n  {\n    cate: cate.PERFOREMANCE,\n    name: 'disableTransition',\n    type: Boolean,\n    default: false,\n    new: '1.4.0',\n  },\n  {\n    cate: cate.PERFOREMANCE,\n    name: 'disableSearch',\n    type: Boolean,\n    default: false,\n    new: '1.4.0',\n  },\n]\n\nconst availableOptionsList = optionsList.filter(i => !i.deprecated)\n\nif (DEBUG) {\n  console.debug('current options number', availableOptionsList.length)\n  window.printOptionsMap = () => console.debug(availableOptionsList.map(i => i.name + ': ' + i.type.name + ',').join('\\n'))\n}\n\nconst _defaultOptions = _.mapValues(_.keyBy(availableOptionsList, 'name'), i => i.default)\nconst getDefaultOptions = () => _defaultOptions\n\nexport default {getDefaultOptions, optionsList: availableOptionsList}\n\n'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n\n'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n",
        "gt": [
            "'better-onetab/src/common/options.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'wifi-card/src/components/Settings.js'",
            "'wifi-card/src/index.js'",
            "'wifi-card/src/App.js'"
        ],
        "content": "'wifi-card/src/components/Settings.js'\n:import {\n  Checkbox,\n  Pane,\n  RadioGroup,\n  SelectField,\n  TextInputField,\n} from 'evergreen-ui';\nimport { useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport i18n from '../i18n';\nimport { Translations } from '../translations';\nimport './style.css';\n\nexport const Settings = (props) => {\n  const { t } = useTranslation();\n  const encryptionModes = [\n    { label: t('wifi.password.encryption.none'), value: '' },\n    { label: 'WPA/WPA2/WPA3', value: 'WPA' },\n    { label: 'WPA2-EAP', value: 'WPA2-EAP' },\n    { label: 'WEP', value: 'WEP' },\n  ];\n  const eapMethods = [{ label: 'PWD', value: 'PWD' }];\n  const langSelectDefaultValue = () => {\n    const t = Translations.filter((t) => t.id === i18n.language);\n    if (t.length !== 1) {\n      return 'en-US';\n    }\n    return t[0].id;\n  };\n\n  useEffect(() => {\n    if (props.firstLoad.current && window.innerWidth < 500) {\n      props.onFirstLoad();\n      props.onOrientationChange(true);\n    }\n  });\n\n  return (\n    <Pane id=\"settings\" maxWidth={props.settings.portrait ? '350px' : '100%'}>\n      <SelectField\n        width={300}\n        inputHeight={38}\n        label={t('select')}\n        onChange={(e) => props.onLanguageChange(e.target.value)}\n        defaultValue={langSelectDefaultValue()}\n      >\n        {Translations.map((t) => (\n          <option key={t.id} value={t.id}>\n            {t.name}\n          </option>\n        ))}\n      </SelectField>\n\n      <Checkbox\n        label={t('button.rotate')}\n        checked={props.settings.portrait}\n        onChange={() => props.onOrientationChange(!props.settings.portrait)}\n      />\n      <Checkbox\n        label={t('wifi.password.hide')}\n        checked={props.settings.hidePassword}\n        onChange={() =>\n          props.onHidePasswordChange(!props.settings.hidePassword)\n        }\n      />\n      <Checkbox\n        label={t('wifi.name.hiddenSSID')}\n        checked={props.settings.hiddenSSID}\n        onChange={() => props.onHiddenSSIDChange(!props.settings.hiddenSSID)}\n      />\n\n      <Checkbox\n        label={t('cards.tip.hide')}\n        checked={props.settings.hideTip}\n        onChange={() => props.onHideTipChange(!props.settings.hideTip)}\n      />\n      <TextInputField\n        type=\"number\"\n        width={300}\n        label={t('cards.additional')}\n        value={props.settings.additionalCards}\n        onChange={(e) => props.onAdditionalCardsChange(e.target.value)}\n      />\n      <RadioGroup\n        label={t('wifi.password.encryption')}\n        size={16}\n        value={props.settings.encryptionMode}\n        options={encryptionModes}\n        onChange={(e) => props.onEncryptionModeChange(e.target.value)}\n      />\n      <RadioGroup\n        label={t('wifi.encryption.eapMethod')}\n        size={16}\n        value={props.settings.eapMethod}\n        options={eapMethods}\n        className={`\n          ${props.settings.encryptionMode !== 'WPA2-EAP' && 'hidden'}\n        `}\n        onChange={(e) => props.onEapMethodChange(e.target.value)}\n      />\n    </Pane>\n  );\n};\n\n'wifi-card/src/index.js'\n:import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n'wifi-card/src/App.js'\n:import { Button, Heading, Link, Pane, Paragraph } from 'evergreen-ui';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport logo from '../src/images/wifi.png';\nimport { Settings } from './components/Settings';\nimport { WifiCard } from './components/WifiCard';\nimport './style.css';\nimport { Translations } from './translations';\n\nfunction App() {\n  const html = document.querySelector('html');\n  const { t, i18n } = useTranslation();\n  const firstLoad = useRef(true);\n  const [settings, setSettings] = useState({\n\n    ssid: '',\n\n    password: '',\n\n    encryptionMode: 'WPA',\n\n    eapMethod: 'PWD',\n\n    eapIdentity: '',\n\n    hidePassword: false,\n\n    hiddenSSID: false,\n\n    portrait: false,\n\n    additionalCards: 0,\n\n    hideTip: false,\n  });\n  const [errors, setErrors] = useState({\n    ssidError: '',\n    passwordError: '',\n    eapIdentityError: '',\n  });\n\n  const htmlDirection = (languageID) => {\n    languageID = languageID || i18n.language;\n    const rtl = Translations.filter((t) => t.id === languageID)[0]?.rtl;\n    return rtl ? 'rtl' : 'ltr';\n  };\n\n  const onChangeLanguage = (language) => {\n    html.style.direction = htmlDirection(language);\n    i18n.changeLanguage(language);\n  };\n\n  const onPrint = () => {\n    if (!settings.ssid.length) {\n      setErrors({\n        ...errors,\n        ssidError: t('wifi.alert.name'),\n      });\n      return;\n    }\n    if (settings.password.length < 8 && settings.encryptionMode === 'WPA') {\n      setErrors({\n        ...errors,\n        passwordError: t('wifi.alert.password.length.8'),\n      });\n      return;\n    }\n    if (settings.password.length < 5 && settings.encryptionMode === 'WEP') {\n      setErrors({\n        ...errors,\n        passwordError: t('wifi.alert.password.length.5'),\n      });\n      return;\n    }\n    if (\n      settings.password.length < 1 &&\n      settings.encryptionMode === 'WPA2-EAP'\n    ) {\n      setErrors({\n        ...errors,\n        passwordError: t('wifi.alert.password'),\n      });\n      return;\n    }\n    if (\n      settings.eapIdentity.length < 1 &&\n      settings.encryptionMode === 'WPA2-EAP'\n    ) {\n      setErrors({\n        ...errors,\n        eapIdentityError: t('wifi.alert.eapIdentity'),\n      });\n      return;\n    }\n    document.title = 'WiFi Card - ' + settings.ssid;\n    window.print();\n  };\n\n  const onSSIDChange = (ssid) => {\n    setErrors({ ...errors, ssidError: '' });\n    setSettings({ ...settings, ssid });\n  };\n  const onPasswordChange = (password) => {\n    setErrors({ ...errors, passwordError: '' });\n    setSettings({ ...settings, password });\n  };\n  const onEncryptionModeChange = (encryptionMode) => {\n    setErrors({ ...errors, passwordError: '' });\n    setSettings({ ...settings, encryptionMode });\n  };\n  const onEapMethodChange = (eapMethod) => {\n    setSettings({ ...settings, eapMethod });\n  };\n  const onEapIdentityChange = (eapIdentity) => {\n    setErrors({ ...errors, eapIdentityError: '' });\n    setSettings({ ...settings, eapIdentity });\n  };\n  const onOrientationChange = (portrait) => {\n    setSettings({ ...settings, portrait });\n  };\n  const onHidePasswordChange = (hidePassword) => {\n    setSettings({ ...settings, hidePassword });\n  };\n  const onHiddenSSIDChange = (hiddenSSID) => {\n    setSettings({ ...settings, hiddenSSID });\n  };\n  const onAdditionalCardsChange = (additionalCardsStr) => {\n    const amount = parseInt(additionalCardsStr);\n    amount >= 0 && setSettings({ ...settings, additionalCards: amount });\n  };\n  const onHideTipChange = (hideTip) => {\n    setSettings({ ...settings, hideTip });\n  };\n  const onFirstLoad = () => {\n    html.style.direction = htmlDirection();\n    firstLoad.current = false;\n  };\n\n  useEffect(() => {\n\n    if (htmlDirection() === 'rtl') {\n      html.style.direction = 'rtl';\n    }\n  });\n\n  return (\n    <Pane>\n      <Pane display=\"flex\">\n        <img alt=\"icon\" src={logo} width=\"32\" height=\"32\" />\n        <Heading size={900} paddingRight={16} paddingLeft={16}>\n          {t('title')}\n        </Heading>\n      </Pane>\n\n      <Pane>\n        <Paragraph marginTop={12}>{t('desc.use')}</Paragraph>\n\n        <Paragraph marginTop={12}>\n          {t('desc.privacy')}{' '}\n          <Link href=\"https:\n            {t('desc.source')}\n          </Link>\n          .\n        </Paragraph>\n      </Pane>\n\n      <Pane>\n        <WifiCard\n          settings={settings}\n          ssidError={errors.ssidError}\n          passwordError={errors.passwordError}\n          eapIdentityError={errors.eapIdentityError}\n          onSSIDChange={onSSIDChange}\n          onEapIdentityChange={onEapIdentityChange}\n          onPasswordChange={onPasswordChange}\n        />\n      </Pane>\n\n      <Settings\n        settings={settings}\n        firstLoad={firstLoad}\n        onFirstLoad={onFirstLoad}\n        onLanguageChange={onChangeLanguage}\n        onEncryptionModeChange={onEncryptionModeChange}\n        onEapMethodChange={onEapMethodChange}\n        onOrientationChange={onOrientationChange}\n        onHidePasswordChange={onHidePasswordChange}\n        onHiddenSSIDChange={onHiddenSSIDChange}\n        onAdditionalCardsChange={onAdditionalCardsChange}\n        onHideTipChange={onHideTipChange}\n      />\n\n      <Button\n        id=\"print\"\n        appearance=\"primary\"\n        height={40}\n        marginRight={16}\n        onClick={onPrint}\n      >\n        {t('button.print')}\n      </Button>\n      <Pane id=\"print-area\">\n        {settings.additionalCards >= 0 &&\n          [...Array(settings.additionalCards + 1)].map((el, idx) => (\n            <WifiCard\n              key={`card-nr-${idx}`}\n              settings={settings}\n              ssidError={errors.ssidError}\n              passwordError={errors.passwordError}\n              eapIdentityError={errors.eapIdentityError}\n              onSSIDChange={onSSIDChange}\n              onEapIdentityChange={onEapIdentityChange}\n              onPasswordChange={onPasswordChange}\n            />\n          ))}\n      </Pane>\n    </Pane>\n  );\n}\n\nexport default App;\n",
        "gt": [
            "'wifi-card/src/components/Settings.js'",
            "'wifi-card/src/App.js'",
            "'wifi-card/src/index.js'"
        ]
    },
    {
        "files": [
            "'budo/lib/bundler.js'",
            "'budo/index.js'",
            "'budo/lib/budo.js'"
        ],
        "content": "'budo/lib/bundler.js'\n:var xtend = require('xtend')\nvar createMiddleware = require('watchify-middleware').emitter\nvar fromArgs = require('browserify/bin/args')\nvar browserify = require('browserify')\nvar path = require('path')\nvar defaultErrorHandler = require('./error-handler')\n\nmodule.exports = createBundler\nfunction createBundler (files, opts) {\n  var bOpts = xtend({\n    cache: {},\n    packageCache: {},\n    debug: opts.debug\n  }, opts.browserify)\n\n  var bundler\n  var args = opts.browserifyArgs\n  if (args && Array.isArray(args)) {\n\n    bundler = fromArgs(args, bOpts)\n  } else {\n\n    bundler = browserify(bOpts)\n  }\n\n  files.forEach(function (file) {\n    bundler.add(path.resolve(file))\n  })\n\n  var errorHandler = opts.errorHandler\n  if (typeof errorHandler !== 'function' && errorHandler !== false) {\n    errorHandler = defaultErrorHandler\n  }\n\n  var cwd = opts.cwd\n  var rootDirName\n  if (cwd) {\n    cwd = path.normalize(cwd)\n    rootDirName = path.basename(cwd) + path.sep\n  }\n  return createMiddleware(bundler, {\n    delay: opts.delay || 0,\n    initialBundle: false,\n    errorHandler: typeof errorHandler === 'function'\n      ? function (err) {\n        return errorHandler(err, cwd, rootDirName)\n      }\n      : errorHandler\n  })\n}\n\n'budo/index.js'\n:var parseArgs = require('./lib/parse-args')\nvar budo = require('./lib/budo')\nvar color = require('term-color')\nvar stdoutStream = require('stdout-stream')\nvar exec = require('child_process').exec\n\nmodule.exports = budo\nmodule.exports.cli = budoCLI\n\nfunction budoCLI (args, opts) {\n  var argv = parseArgs(args, opts)\n\n\n  if (argv.stream !== false) {\n    argv.stream = /^win/.test(process.platform) ? process.stdout : stdoutStream\n  }\n\n  var entries = argv._\n  delete argv._\n\n  argv.browserifyArgs = argv['--']\n  delete argv['--']\n\n  if (argv.version) {\n    console.log('budo v' + require('./package.json').version)\n    console.log('browserify v' + require('browserify/package.json').version)\n    console.log('watchify v' + require('watchify-middleware').getWatchifyVersion())\n    return null\n  }\n\n  if (argv.help) {\n    var help = require('path').join(__dirname, 'bin', 'help.txt')\n    require('fs').createReadStream(help)\n      .pipe(process.stdout)\n    return null\n  }\n\n  if (argv.outfile) {\n    console.error(color.yellow('WARNING'), '--outfile has been removed in budo@3.0')\n  }\n\n  if (typeof argv.pushstate === 'string') {\n\n\n    var newEntry = argv.pushstate\n    argv.pushstate = argv.P = true\n    entries.unshift(newEntry)\n    console.error(color.yellow('WARNING'), '\\nAs of budo@10.x, --pushstate should come ' +\n        'after your JS entries.\\nExample:\\n' +\n        '  budo index.js:bundle.js --pushstate')\n  }\n\n  if (typeof argv.port === 'string') {\n    argv.port = parseInt(argv.port, 10)\n  }\n  if (typeof argv.livePort === 'string') {\n    argv.livePort = parseInt(argv.livePort, 10)\n  }\n\n\n  if (typeof argv.live === 'string' && /(true|false)/.test(argv.live)) {\n    argv.live = argv.live === 'true'\n  }\n\n\n  var instance = budo(entries, argv).on('error', exit)\n  var onUpdates = [].concat(argv.onupdate).filter(Boolean)\n  onUpdates.forEach(function (cmd) {\n    instance.on('update', execFunc(cmd))\n  })\n\n  return instance\n}\n\nfunction execFunc (cmd) {\n  return function run () {\n    var p = exec(cmd)\n    p.stderr.pipe(process.stderr)\n    p.stdout.pipe(process.stdout)\n  }\n}\n\nfunction exit (err) {\n  console.log(color.red('ERROR'), err.message)\n  process.exit(1)\n}\n\n'budo/lib/budo.js'\n:var bole = require('bole')\nvar xtend = require('xtend')\nvar once = require('once')\nvar path = require('path')\nvar EventEmitter = require('events').EventEmitter\nvar isMatch = require('micromatch')\nvar openUrl = require('opn')\nvar internalIp = require('internal-ip')\nvar garnish = require('garnish')\n\nvar defaults = require('./parse-args').defaults\nvar getPorts = require('./get-ports')\nvar createServer = require('./server')\nvar createBundler = require('./bundler')\nvar createFileWatch = require('./file-watch')\nvar createReloadServer = require('./reload/server')\nvar mapEntry = require('./map-entry')\n\nvar noop = function () {}\n\nmodule.exports = createBudo\nfunction createBudo (entries, opts) {\n  var log = bole('budo')\n\n\n  if (entries && !Array.isArray(entries) && typeof entries === 'object') {\n    opts = entries\n    entries = []\n  }\n\n\n  opts = xtend({}, defaults, { stream: false }, opts)\n  entries = entries || []\n\n\n  opts.cwd = process.cwd()\n\n\n  if (opts.stream) {\n\n    if (!opts.ndjson) {\n      var pretty = garnish({\n        level: opts.verbose ? 'debug' : 'info',\n        name: 'budo'\n      })\n      pretty.pipe(opts.stream)\n      opts.stream = pretty\n    }\n\n    bole.output({\n      stream: opts.stream,\n      level: 'debug'\n    })\n  }\n\n\n  entries = [].concat(entries).filter(Boolean)\n\n  var entryObjects = entries.map(mapEntry)\n  var entryFiles = entryObjects.map(function (entry) {\n    return entry.from\n  })\n\n  if (opts.serve && typeof opts.serve !== 'string') {\n    throw new TypeError('opts.serve must be a string or undefined')\n  } else if (!opts.serve && entries.length > 0) {\n    opts.serve = entryObjects[0].url\n  }\n\n\n  if (!opts.dir || opts.dir.length === 0) {\n    opts.dir = opts.cwd\n  }\n\n  var emitter = new EventEmitter()\n  var bundler, middleware\n\n  if (entries.length > 0 || (opts.browserify && opts.browserify.entries)) {\n    bundler = createBundler(entryFiles, opts)\n    middleware = bundler.middleware\n\n    bundler.on('log', function (ev) {\n      if (ev.type === 'bundle') {\n        var time = ev.elapsed\n        ev.elapsed = time\n        ev.name = 'browserify'\n        ev.type = undefined\n        ev.colors = {\n          elapsed: time > 1000 ? 'yellow' : 'dim',\n          message: 'dim '\n        }\n        log.info(ev)\n      }\n    })\n\n\n\n    bundler.on('error', function (err) {\n      console.error('Error:', err.message ? err.message : err)\n    })\n    bundler.on('bundle-error', emitter.emit.bind(emitter, 'bundle-error'))\n    bundler.on('update', emitter.emit.bind(emitter, 'update'))\n    bundler.on('pending', emitter.emit.bind(emitter, 'pending'))\n\n    emitter.on('update', function (contents, deps) {\n      if (deps.length > 1) {\n        log.debug({\n          name: 'browserify',\n          message: deps.length + ' files changed'\n        })\n      }\n    })\n  }\n\n  var defaultInternalIp = internalIp.v4.sync()\n  var defaultWatchGlob = opts.watchGlob || '**/*.{html,css}'\n  var server = null\n  var closed = false\n  var started = false\n  var fileWatcher = null\n  var reloader = null\n  var deferredWatch = noop\n  var deferredLive = noop\n\n\n  emitter.close = once(close)\n  emitter.reload = reload\n  emitter.error = errorPopup\n  emitter.live = live\n  emitter.watch = watch\n\n\n  if (opts.live) {\n    var initialLiveOpts = typeof opts.live === 'object' ? opts.live : undefined\n    var initialLiveMatch = typeof opts.live === 'string' ? opts.live : undefined\n    if (initialLiveMatch) {\n      emitter.once('connect', function () {\n        log.info({ message: 'LiveReload filtering filenames with glob:', url: initialLiveMatch })\n        if (entryObjects.length === 0) {\n          log.info({ message: '\\nNOTE: It looks like you are using budo without a JavaScript entry.\\n' +\n            '  This is fine, but if you were trying to bundle the \"' + initialLiveMatch + '\" file,\\n  you should re-arrange' +\n            ' your arguments like so:\\n\\n' +\n            '      budo ' + initialLiveMatch + ' --live' })\n        }\n      })\n    }\n    emitter\n      .watch()\n      .live(initialLiveOpts)\n      .on('watch', function (ev, file) {\n        if (ev !== 'change' && ev !== 'add') {\n          return\n        }\n        defaultFileEvent(file)\n      })\n      .on('pending', function () {\n        defaultFileEvent(opts.serve)\n      })\n  }\n\n\n  createServer(middleware, xtend(opts, { ip: defaultInternalIp }), function (err, serverInstance) {\n    if (err) {\n      emitter.emit('error', err)\n      return\n    }\n\n    server = serverInstance\n\n\n    getPorts(opts, handlePorts)\n  })\n\n  return emitter\n\n  function defaultFileEvent (file) {\n    var filename = path.basename(file)\n    if ((Array.isArray(opts.live) || typeof opts.live === 'string') &&\n        isMatch(filename, opts.live).length === 0) {\n      return\n    }\n    emitter.reload(file)\n  }\n\n  function reload (file) {\n    process.nextTick(emitter.emit.bind(emitter, 'reload', file))\n    if (reloader) {\n      reloader.reload(file)\n    }\n  }\n\n  function errorPopup (message) {\n    if (reloader) {\n      reloader.errorPopup(message)\n    }\n  }\n\n\n  function watch (glob, watchOpt) {\n    if (!started) {\n      deferredWatch = emitter.watch.bind(null, glob, watchOpt)\n    } else {\n\n      if (fileWatcher) fileWatcher.close()\n      glob = glob && glob.length > 0 ? glob : defaultWatchGlob\n      glob = Array.isArray(glob) ? glob : [ glob ]\n      watchOpt = xtend({ poll: opts.poll }, watchOpt)\n\n      fileWatcher = createFileWatch(glob, watchOpt)\n      fileWatcher.on('watch', emitter.emit.bind(emitter, 'watch'))\n    }\n    return emitter\n  }\n\n\n  function live (liveOpts) {\n    if (!started) {\n      deferredLive = emitter.live.bind(null, liveOpts)\n    } else {\n\n      if (reloader) reloader.close()\n\n\n      server.setLiveOptions(xtend(liveOpts))\n\n\n      reloader = createReloadServer(server, opts)\n    }\n    return emitter\n  }\n\n  function getHostAddress (host) {\n\n\n    if (!host) {\n      host = server.address().address\n      if (host === '0.0.0.0') {\n\n\n        host = '::'\n      }\n    }\n    if (host === '::') {\n      host = defaultInternalIp\n    }\n    if (!host) {\n      host = '127.0.0.1'\n    }\n    return host\n  }\n\n  function handlePorts (err, result) {\n    if (closed) return\n    if (err) {\n      emitter.emit('error', err)\n      return\n    }\n\n    opts.port = result.port\n\n\n    server.on('error', function (err) {\n      if (err.code === 'EADDRINUSE') {\n        err.message = 'port ' + opts.port + ' is in use'\n        emitter.emit('error', err)\n      } else {\n        emitter.emit('error', err)\n      }\n    })\n\n\n\n    server.listen(opts.port, opts.host || undefined, connect)\n  }\n\n  function connect () {\n    if (closed) return\n    started = true\n\n\n    opts.host = getHostAddress(opts.host)\n\n    var port = opts.port\n    var protocol = opts.ssl ? 'https' : 'http'\n    var uri = protocol + ':\n\n    log.info({ message: 'Server running at', url: uri, type: 'connect' })\n\n\n    deferredWatch()\n    deferredLive()\n\n\n    emitter.emit('connect', {\n      uri: uri,\n      port: port,\n      host: opts.host,\n      serve: opts.serve,\n      entries: entryFiles,\n      server: server,\n      webSocketServer: reloader ? reloader.webSocketServer : undefined,\n      dir: opts.dir\n    })\n\n\n\n    if (bundler) bundler.bundle()\n\n\n    if (opts.open) {\n      openUrl(uri)\n    }\n  }\n\n  function close () {\n    var next = emitter.emit.bind(emitter, 'exit')\n    if (started) {\n      server.once('close', next)\n    } else {\n      process.nextTick(next)\n    }\n\n    if (started) bole.reset()\n    if (started) server.close()\n    if (reloader) reloader.close()\n    if (bundler) bundler.close()\n    if (fileWatcher) fileWatcher.close()\n    closed = true\n    started = false\n  }\n}\n",
        "gt": [
            "'budo/lib/bundler.js'",
            "'budo/lib/budo.js'",
            "'budo/index.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/common/listManager.js'",
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/common/migrate.js'"
        ],
        "content": "'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n\n'better-onetab/src/common/listManager.js'\n:import browser from 'webextension-polyfill'\nimport {\n  SYNCED_LIST_PROPS,\n  END_FRONT,\n  END_BACKGROUND,\n  ADD_LIST,\n  UPDATE_LIST_BY_ID,\n  REMOVE_LIST_BY_ID,\n  CHANGE_LIST_ORDER,\n} from './constants'\nimport {isBackground, sendMessage, Mutex} from './utils'\n\nconst cache = { lists: null, ops: null }\nconst RWLock = new Mutex()\nconst getStorage = async () => {\n  const unlockRW = await RWLock.lock()\n  if (cache.lists && cache.ops) return cache\n  const {lists, ops} = await browser.storage.local.get(['lists', 'ops'])\n  cache.lists = lists || []\n  cache.ops = ops || []\n  await unlockRW()\n  return cache\n}\nconst compressOps = ops => {\n  console.debug('[listManager] compress ops: (before)', ops)\n  const removed = []\n  const updated = {}\n  const finalOps = []\n  for (let i = ops.length - 1; i > -1; i -= 1) {\n    const op = ops[i]\n\n    if (op.args && op.args[0] && removed.includes(op.args[0]._id)\n      || typeof op.args[0] === 'string' && removed.includes(op.args[0])) continue\n\n    if (op.method === 'removeListById') {\n      removed.push(op.args[0])\n      finalOps.unshift(op)\n    } else if (op.method === 'updateListById') {\n\n      const [listId, newList, time] = op.args\n      if (updated[listId]) {\n        for (const key in newList) {\n          if (key in updated[listId]) continue\n          updated[listId][key] = newList[key]\n        }\n        continue\n      } else {\n        updated[listId] = Object.assign({}, newList)\n        finalOps.unshift({method: 'updateListById', args: [listId, updated[listId], time]})\n      }\n    } else if (op.method === 'changeListOrderRelatively') {\n\n      if (i > 0 && ops[i - 1].method === 'changeListOrderRelatively' && op.args[0] === ops[i - 1].args[0]) {\n        ops[i - 1].args[1] += ops[i].args[1]\n      } else finalOps.unshift(op)\n    } else {\n\n      finalOps.unshift(op)\n    }\n  }\n  console.debug('[listManager] compress ops: (after)', finalOps)\n  return finalOps\n}\n\nconst manager = {}\n\nmanager.modifiers = {\n  [ADD_LIST](lists, [list]) {\n    if (~lists.findIndex(i => i._id === list._id)) return\n    lists.unshift(list)\n    return [list]\n  },\n  [UPDATE_LIST_BY_ID](lists, [listId, newList, time = Date.now()]) {\n    const normal = Object.keys(newList).some(k => SYNCED_LIST_PROPS.includes(k))\n    for (let i = 0; i < lists.length; i += 1) {\n      if (lists[i]._id !== listId) continue\n      const list = lists[i]\n      for (const [k, v] of Object.entries(newList)) {\n        list[k] = v\n      }\n      if (normal) list.updatedAt = time\n      return normal ? [listId, newList, time] : null\n    }\n  },\n  [REMOVE_LIST_BY_ID](lists, [listId]) {\n    const index = lists.findIndex(list => list._id === listId)\n    lists.splice(index, 1)\n    return [listId]\n  },\n  [CHANGE_LIST_ORDER](lists, [listId, diff]) {\n    const index = lists.findIndex(list => list._id === listId)\n    const [list] = lists.splice(index, 1)\n    lists.splice(index + diff, 0, list)\n    return [listId, diff]\n  },\n}\n\n\n\nconst saveStorage = async (lists, ops) => {\n  const unlock = await RWLock.lock()\n  const data = {\n    lists,\n    ops: compressOps(ops)\n  }\n  await browser.storage.local.set(data)\n  cache.lists = cache.ops = null\n  await sendMessage({refresh: true})\n  await unlock()\n}\n\nconst _modifyQueue = []\nconst _startModifyWork = (lists, ops) => new Promise(resolve => {\n  while (_modifyQueue.length) {\n    const [method, args] = _modifyQueue.shift()\n    const opArgs = manager.modifiers[method](lists, args)\n    if (opArgs) ops.push({method, args: opArgs, time: Date.now()})\n  }\n  setTimeout(() => {\n    if (_modifyQueue.length) _startModifyWork(lists, ops).then(resolve)\n    else resolve()\n  }, 100)\n})\n\nlet _working = false\nconst applyChangesToStorage = async (method, args) => {\n  _modifyQueue.push([method, args])\n\n  if (_working) return\n  _working = true\n  const {lists, ops} = await getStorage()\n  await _startModifyWork(lists, ops)\n\n  _working = false\n  await saveStorage(lists, ops)\n}\nconst addEventListener = (receiveFrom, callback) => browser.runtime.onMessage.addListener(({listModifed, from}) => {\n  if (receiveFrom !== from || !listModifed) return\n  const {method, args} = listModifed\n  return callback(method, args)\n})\nconst genMethods = isBackground => {\n  Object.keys(manager.modifiers).forEach(method => {\n    manager[method] = isBackground ? async (...args) => {\n      console.debug('[list manager] modify list:', method, ...args)\n      await sendMessage({listModifed: {method, args}, from: END_BACKGROUND})\n\n      applyChangesToStorage(method, args)\n    } : async (...args) => {\n      console.debug('[list manager] call to modify list:', name, ...args)\n      await sendMessage({listModifed: {method, args}, from: END_FRONT})\n    }\n  })\n}\nmanager.init = async () => {\n  if (manager.inited) return\n  manager.inited = true\n  const _isBackground = await isBackground()\n  if (_isBackground) await addEventListener(END_FRONT, applyChangesToStorage)\n  genMethods(_isBackground)\n}\nmanager.mapMutations = () => {\n  const mutations = {}\n  Object.entries(manager.modifiers).forEach(([method, fn]) => {\n    mutations[method] = (state, payload) => fn(state.lists, payload)\n  })\n  mutations.receiveData = (state, {method, args}) => {\n    manager.modifiers[method](state.lists, args)\n  }\n  return mutations\n}\nmanager.createVuexPlugin = () => store => {\n  addEventListener(END_BACKGROUND, (method, args) => {\n    store.commit('receiveData', {method, args})\n  })\n  browser.runtime.onMessage.addListener(({refreshed}) => {\n    if (refreshed && refreshed.success) store.dispatch('getLists')\n  })\n  store.subscribe(({type, payload}) => {\n    if (type in manager.modifiers) {\n      manager[type](...payload)\n    }\n  })\n}\nmanager.RWLock = RWLock\nmanager.isWorking = () => _working\nexport default manager\n\n'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/common/migrate.js'\n:import _ from 'lodash'\nimport {normalizeList} from './list'\nimport logger from './logger'\nimport {genObjectId, compareVersion} from './utils'\nimport listManager from './listManager'\nimport browser from 'webextension-polyfill'\nlistManager.init()\n\nconst migrations = {\n  '1.4.0': async () => {\n\n    const {lists} = await browser.storage.local.get('lists')\n    if (lists) {\n      const {0: listsWithoutId, 1: listsWithId} = _.groupBy(lists.map(normalizeList), list => +!!list._id)\n      if (listsWithId) await browser.storage.local.set({lists: listsWithId})\n\n      for (const list of listsWithoutId.reverse()) {\n        list._id = genObjectId()\n        await listManager.addList(list)\n      }\n    }\n\n    await browser.storage.local.remove(['conflict'])\n  }\n}\n\nconst migrate = async () => {\n  const {version: dataVersion} = await browser.storage.local.get('version')\n  const {version: currentVersion} = browser.runtime.getManifest()\n  if (dataVersion === currentVersion) return\n  const sorted = Object.keys(migrations).sort(compareVersion)\n  for (const v of sorted) {\n    if (compareVersion(currentVersion, v) > 0) continue\n    try {\n      console.debug('[migrate] migrating:', v)\n      await migrations[v]()\n      await browser.storage.local.set({version: v})\n      console.debug('[migrate] migrated to:', v)\n    } catch (err) {\n      logger.error('[migrate] migrate failed')\n      logger.error(err)\n      throw err\n    }\n  }\n}\n\nexport default migrate\n",
        "gt": [
            "'better-onetab/src/common/listManager.js'",
            "'better-onetab/src/common/migrate.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/common/i18n.js'",
            "'better-onetab/src/background/contextMenus.js'"
        ],
        "content": "'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n\n'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/common/i18n.js'\n:export default (...args) => chrome.i18n.getMessage(...args)\n\n'better-onetab/src/background/contextMenus.js'\n:import _ from 'lodash'\nimport __ from '../common/i18n'\nimport tabs from '../common/tabs'\nimport storage from '../common/storage'\nimport browser from 'webextension-polyfill'\n\nconst menus = {\n  SHOW_TAB_LIST: tabs.openTabLists,\n  STORE_SELECTED_TABS: tabs.storeSelectedTabs,\n  STORE: {\n    STORE_ALL_TABS_IN_CURRENT_WINDOW: tabs.storeAllTabs,\n    STORE_ALL_TABS_IN_ALL_WINDOWS: tabs.storeAllTabInAllWindows,\n    STORE_LEFT_TABS: tabs.storeLeftTabs,\n    STORE_RIGHT_TABS: tabs.storeRightTabs,\n    STORE_TWOSIDE_TABS: tabs.storeTwoSideTabs,\n  },\n  STORE_TO_TITLED_LIST: {\n    STORE_SELECTED_TABS: tabs.storeSelectedTabs,\n    STORE_ALL_TABS_IN_CURRENT_WINDOW: tabs.storeAllTabs,\n    STORE_LEFT_TABS: tabs.storeLeftTabs,\n    STORE_RIGHT_TABS: tabs.storeRightTabs,\n    STORE_TWOSIDE_TABS: tabs.storeTwoSideTabs,\n  }\n}\n\nexport const dynamicDisableMenu = async lists => {\n  const groupedTabs = await tabs.groupTabsInCurrentWindow()\n  const windows = await browser.windows.getAll()\n  browser.contextMenus.update('STORE.STORE_LEFT_TABS', {\n    enabled: groupedTabs.left.length !== 0,\n    title: __('menu_STORE_LEFT_TABS') + ` (${groupedTabs.left.length})`,\n  })\n  browser.contextMenus.update('STORE.STORE_RIGHT_TABS', {\n    enabled: groupedTabs.right.length !== 0,\n    title: __('menu_STORE_RIGHT_TABS') + ` (${groupedTabs.right.length})`,\n  })\n  browser.contextMenus.update('STORE.STORE_TWOSIDE_TABS', {\n    enabled: groupedTabs.twoSide.length !== 0,\n    title: __('menu_STORE_TWOSIDE_TABS') + ` (${groupedTabs.twoSide.length})`,\n  })\n  browser.contextMenus.update('STORE.STORE_ALL_TABS_IN_ALL_WINDOWS', {\n    enabled: windows.length > 1,\n  })\n  browser.contextMenus.update('STORE.STORE_ALL_TABS_IN_CURRENT_WINDOW', {\n    title: __('menu_STORE_ALL_TABS_IN_CURRENT_WINDOW') + ` (${groupedTabs.all.length})`,\n  })\n  browser.contextMenus.update('STORE_SELECTED_TABS', {\n    title: __('menu_STORE_SELECTED_TABS') + ` (${groupedTabs.inter.length})`,\n  })\n  lists = lists || await storage.getLists()\n  for (let i = 0; i < lists.length; i += 1) {\n    if (!lists[i].title) continue\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_LEFT_TABS|' + i, {\n      enabled: groupedTabs.left.length !== 0,\n      title: __('menu_STORE_LEFT_TABS') + ` (${groupedTabs.left.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_RIGHT_TABS|' + i, {\n      enabled: groupedTabs.right.length !== 0,\n      title: __('menu_STORE_RIGHT_TABS') + ` (${groupedTabs.right.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_TWOSIDE_TABS|' + i, {\n      enabled: groupedTabs.twoSide.length !== 0,\n      title: __('menu_STORE_TWOSIDE_TABS') + ` (${groupedTabs.twoSide.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_ALL_TABS_IN_CURRENT_WINDOW|' + i, {\n      title: __('menu_STORE_ALL_TABS_IN_CURRENT_WINDOW') + ` (${groupedTabs.all.length})`,\n    })\n    browser.contextMenus.update('STORE_TO_TITLED_LIST.STORE_SELECTED_TABS|' + i, {\n      title: __('menu_STORE_SELECTED_TABS') + ` (${groupedTabs.inter.length})`,\n    })\n  }\n}\n\nconst createMenus = async (obj, parent, contexts, lists) => {\n  if (obj === menus.STORE_TO_TITLED_LIST) {\n    if (window.opts.disableDynamicMenu) return\n    for (let listIndex = 0; listIndex < lists.length; listIndex += 1) {\n      if (!lists[listIndex].title) continue\n      const prop = {\n        id: 'STORE_TO_TITLED_LIST|' + listIndex,\n        title: lists[listIndex].title,\n        contexts,\n        parentId: 'STORE_TO_TITLED_LIST',\n      }\n      const id = await browser.contextMenus.create(prop)\n      console.log('context menu created: ' + id)\n      for (const key in obj) {\n        const prop = {\n          id: 'STORE_TO_TITLED_LIST.' + key + '|' + listIndex,\n          title: __('menu_' + key),\n          contexts,\n          parentId: id,\n        }\n        const childId = await browser.contextMenus.create(prop)\n        console.log('context menu created: ' + childId)\n      }\n    }\n  } else {\n    for (const key of Object.keys(obj)) {\n      const prop = {\n        id: key,\n        title: __('menu_' + key),\n        contexts,\n      }\n      if (parent) {\n        prop.id = parent + '.' + key\n        prop.parentId = parent\n      }\n      const id = await browser.contextMenus.create(prop)\n      console.log('context menu created: ' + id)\n      if (_.isObject(obj[key])) await createMenus(obj[key], key, contexts, lists)\n    }\n  }\n}\n\nexport const setupContextMenus = async ({pageContext, allContext}) => {\n  await browser.contextMenus.removeAll()\n  const contexts = [browser.contextMenus.ContextType.BROWSER_ACTION]\n  if (pageContext) {\n    contexts.push(browser.contextMenus.ContextType.PAGE)\n    if (allContext) contexts.push(browser.contextMenus.ContextType.ALL)\n  }\n  const lists = await storage.getLists()\n  window.contextMenusClickedHandler = info => {\n    console.log('context menu clicked', info.menuItemId)\n    if (info.menuItemId.startsWith('STORE_TO_TITLED_LIST')) {\n      const [key, listIndex] = info.menuItemId.split('|')\n      _.get(menus, key)(+listIndex)\n      if (PRODUCTION) ga('send', 'event', 'Menu clicked', key)\n    } else {\n      _.get(menus, info.menuItemId)()\n      if (PRODUCTION) ga('send', 'event', 'Menu clicked', info.menuItemId)\n    }\n  }\n  console.groupCollapsed('create context menu', contexts)\n  await createMenus(menus, null, contexts, lists)\n  console.groupEnd('create context menu')\n  dynamicDisableMenu(lists)\n}\n",
        "gt": [
            "'better-onetab/src/common/i18n.js'",
            "'better-onetab/src/background/contextMenus.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'Instagram/components/ItemHeader.js'",
            "'Instagram/components/LikeButton.js'",
            "'Instagram/components/FeedList.js'",
            "'Instagram/components/ItemFooter.js'",
            "'Instagram/components/IconBar.js'",
            "'Instagram/components/Item.js'"
        ],
        "content": "'Instagram/components/ItemHeader.js'\n:import { connectActionSheet } from '@expo/react-native-action-sheet';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nimport InstaHeaderButton from './InstaHeaderButton';\nimport { profileImageSize } from './FeedList';\nimport ProfileImage from './ProfileImage';\n\nclass ItemHeader extends React.Component {\n  render() {\n    const { item } = this.props;\n    const { account, location } = item;\n    return (\n      <View\n        style={{\n          flexDirection: 'row',\n          paddingLeft: 16,\n          paddingRight: 4,\n          paddingVertical: 14,\n          justifyContent: 'space-between',\n          alignItems: 'center',\n        }}\n      >\n        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n          <ProfileImage\n            style={{\n              aspectRatio: 1,\n              minHeight: profileImageSize,\n              height: profileImageSize,\n              backgroundColor: '#d8d8d8',\n              width: profileImageSize,\n              borderRadius: profileImageSize / 2,\n              marginRight: 12,\n              resizeMode: 'cover',\n            }}\n            account={account}\n          />\n          <View>\n            <Text style={{ fontSize: 14, color: '#262626', fontWeight: '600' }}>\n              {account}\n            </Text>\n            <Text style={{ fontSize: 12, color: '#262626' }}>\n              {location || 'Legoland'}\n            </Text>\n          </View>\n        </View>\n        <InstaHeaderButton\n          name=\"more\"\n          size={30}\n          color={'black'}\n          onPress={() => {\n            const options = [\n              'Copy Link',\n              'Turn On Post Notifications',\n              'Report',\n              'Mute',\n              'Unfollow',\n              'Cancel',\n            ];\n\n            const destructiveButtonIndex = options.length - 2;\n            const cancelButtonIndex = options.length - 1;\n\n            this.props.showActionSheetWithOptions(\n              {\n                options,\n                cancelButtonIndex,\n                destructiveButtonIndex,\n\n\n\n\n\n\n\n\n              },\n              buttonIndex => {\n\n\n              },\n            );\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nexport default connectActionSheet(ItemHeader);\n\n'Instagram/components/LikeButton.js'\n:import React from 'react';\nimport { TouchableOpacity } from 'react-native';\n\nimport InstaIcon from './InstaIcon';\n\nexport default class LikeButton extends React.Component {\n  state = { active: false };\n  onPress = () => {\n    this.setState({ active: !this.state.active });\n  };\n  render() {\n    const { active, ...props } = this.props;\n    return (\n      <TouchableOpacity onPress={this.onPress}>\n        <InstaIcon\n          size={16}\n          active={this.state.active}\n          {...props}\n          color={this.state.active ? 'red' : 'black'}\n          name=\"like\"\n        />\n      </TouchableOpacity>\n    );\n  }\n}\n\n'Instagram/components/FeedList.js'\n:import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Animated, FlatList, StyleSheet, View } from 'react-native';\n\nimport { Stories } from '../constants/Posts';\nimport FeedListFooter from './FeedListFooter';\nimport Item from './Item';\nimport StorySlider from './StorySlider';\n\nexport const profileImageSize = 32;\n\nexport default class FeedList extends React.Component {\n  static defaultProps = {\n    ListHeaderComponent: props => <StorySlider stories={Stories} />,\n  };\n\n  _scrollValue = new Animated.Value(0);\n  _scaleValue = new Animated.Value(1);\n  _gesturePosition = new Animated.ValueXY();\n  state = {\n    isDragging: false,\n  };\n\n  static childContextTypes = {\n    gesturePosition: PropTypes.object,\n    getScrollPosition: PropTypes.func,\n    scaleValue: PropTypes.object,\n  };\n\n  state = {\n    isDragging: false,\n  };\n\n  getChildContext() {\n    return {\n      gesturePosition: this._gesturePosition,\n      scaleValue: this._scaleValue,\n      getScrollPosition: () => {\n        return this._scrollValue.__getValue();\n      },\n    };\n  }\n\n  render() {\n    const { onPressFooter, ...props } = this.props;\n\n    let { isDragging, selectedPhoto } = this.state;\n    let onScroll = Animated.event([\n      { nativeEvent: { contentOffset: { y: this._scrollValue } } },\n    ]);\n\n    return (\n      <React.Fragment>\n        <FlatList\n          showsVerticalScrollIndicator={false}\n          style={{ backgroundColor: 'transparent' }}\n          ref={ref => (this.list = ref)}\n          scrollEventThrottle={16}\n          onScroll={onScroll}\n          scrollEnabled={!isDragging}\n          zoomScale={1}\n          bouncesZoom={false}\n          maximumZoomScale={1}\n          minimumZoomScale={1}\n          renderItem={({ item }) => (\n            <Item\n              isLarge={props.isLarge}\n              getParent={() => this.list}\n              isDragging={isDragging}\n              onGestureStart={selectedPhoto => {\n                this.setState({\n                  selectedPhoto,\n                  isDragging: true,\n                });\n              }}\n              onGestureRelease={() => this.setState({ isDragging: false })}\n              item={item}\n            />\n          )}\n          ListFooterComponent={props => (\n            <FeedListFooter {...props} onPress={onPressFooter} />\n          )}\n          keyExtractor={(item, index) => item.key + ' ' + index}\n          {...props}\n        />\n        {isDragging ? (\n          <SelectedPhoto\n            key={selectedPhoto ? selectedPhoto.photoURI : ''}\n            selectedPhoto={selectedPhoto}\n          />\n        ) : null}\n      </React.Fragment>\n    );\n  }\n}\n\nclass SelectedPhoto extends React.Component {\n  state = { isLoaded: false };\n\n  static contextTypes = {\n    gesturePosition: PropTypes.object,\n    scrollValue: PropTypes.object,\n    scaleValue: PropTypes.object,\n  };\n\n  render() {\n    let { selectedPhoto } = this.props;\n    let { isLoaded } = this.state;\n\n    let { gesturePosition, scaleValue } = this.context;\n\n    let animatedStyle = {\n      transform: gesturePosition.getTranslateTransform(),\n    };\n    animatedStyle.transform.push({\n      scale: scaleValue,\n    });\n\n    let imageStyle = [\n      {\n        position: 'absolute',\n        zIndex: 10,\n        width: selectedPhoto.measurement.w,\n        height: selectedPhoto.measurement.h,\n        opacity: isLoaded ? 1 : 0,\n      },\n      animatedStyle,\n    ];\n\n    let backgroundOpacityValue = scaleValue.interpolate({\n      inputRange: [1.0, 1.1, 2.0],\n      outputRange: [0.0, 0.15, 0.75],\n      extrapolate: 'clamp',\n    });\n\n    return (\n      <BodyPortal>\n        <View style={styles.root}>\n          <Animated.View\n            style={[\n              styles.background,\n              {\n                opacity: backgroundOpacityValue,\n              },\n            ]}\n          />\n          <Animated.Image\n            style={imageStyle}\n            onLoad={() => {\n              setTimeout(() => {\n                this.setState({ isLoaded: true });\n              });\n            }}\n            source={selectedPhoto.source}\n          />\n        </View>\n      </BodyPortal>\n    );\n  }\n}\n\nimport ReactDOM from 'react-dom';\n\nexport class BodyPortal extends React.PureComponent {\n  render() {\n    return ReactDOM.createPortal(this.props.children, global.document.body);\n  }\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n  },\n  background: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    backgroundColor: 'black',\n  },\n});\n\n'Instagram/components/ItemFooter.js'\n:import React from 'react';\nimport { Text, View } from 'react-native';\n\nimport NavigationService from '../navigation/NavigationService';\nimport IconBar from './IconBar';\n\nexport default class ItemFooter extends React.Component {\n  get item() {\n    return {\n      date: 'April 2',\n      ...this.props.item,\n    };\n  }\n  openComments = () => {\n    NavigationService.navigate('Profile_Comments', {\n      item: this.item,\n    });\n  };\n  render() {\n    const { account, description, date, comments } = this.item;\n    return (\n      <View style={{ paddingHorizontal: 12, paddingVertical: 6 }}>\n        <IconBar />\n        <Text style={{ marginTop: 6 }}>\n          <Text style={{ fontWeight: '600', color: '#262626', fontSize: 14 }}>{account}</Text>{' '}\n          {description}\n        </Text>\n        {comments && comments.length && (\n          <Text\n            onPress={this.openComments}\n            style={{ paddingVertical: 8, fontSize: 14, opacity: 0.6 }}>\n            View all {comments.length} comments\n          </Text>\n        )}\n        <Text style={{ fontSize: 10, color: '#999' }}>{date.toUpperCase()}</Text>\n      </View>\n    );\n  }\n}\n\n'Instagram/components/IconBar.js'\n:import React from 'react';\nimport { View } from 'react-native';\n\nimport InstaIcon from './InstaIcon';\nimport LikeButton from './LikeButton';\n\nexport default class IconBar extends React.Component {\n  render() {\n    return (\n      <View style={{ flexDirection: 'row', height: 36, justifyContent: 'space-between' }}>\n        <View style={{ flexDirection: 'row' }}>\n          <LikeButton size={36} />\n          <Icon name=\"chat\" />\n          <Icon name=\"send\" />\n        </View>\n        <Icon name=\"bookmark\" />\n      </View>\n    );\n  }\n}\nexport const Icon = ({ name }) => <InstaIcon size={36} name={name} color={'black'} />;\n\n'Instagram/components/Item.js'\n:import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Animated,\n  Easing,\n  findNodeHandle,\n  PanResponder,\n  UIManager,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nimport DisableBodyScrollingView from './DisableScrolling';\nimport ItemFooter from './ItemFooter';\nimport ItemHeader from './ItemHeader';\nimport ItemImage from './ItemImage';\n\nexport function pow2abs(a, b) {\n  return Math.pow(Math.abs(a - b), 2);\n}\n\nexport function getDistance(touches) {\n  const [a, b] = touches;\n  if (a == null || b == null) {\n    return 0;\n  }\n  return Math.sqrt(pow2abs(a.pageX, b.pageX) + pow2abs(a.pageY, b.pageY));\n}\n\nexport function getPosition(touches) {\n  const [a, b] = touches;\n  if (a == null || b == null) {\n    return { x: 0, y: 0 };\n  }\n  return { x: a.pageX, y: a.pageY };\n}\n\nexport function getDeltaTranslation(position, initial) {\n  return { x: position.x - initial.x, y: position.y - initial.y };\n}\n\nconst SCALE_MULTIPLIER = 1;\n\nexport function getScale(currentDistance, initialDistance) {\n  return (currentDistance / initialDistance) * SCALE_MULTIPLIER;\n}\n\nexport function measureNode(node, parent) {\n  return new Promise((resolve, reject) => {\n    UIManager.measureLayout(\n      node,\n      parent || (node && node.parentNode),\n      e => reject(e),\n      (x, y, w, h, l, t) => {\n        resolve({ x, y, w, h });\n      },\n    );\n  });\n}\nconst RESTORE_ANIMATION_DURATION = 200;\nclass Item extends React.PureComponent {\n  _opacity = new Animated.Value(1);\n  _initialTouches = [];\n\n  static contextTypes = {\n    gesturePosition: PropTypes.object,\n    scaleValue: PropTypes.object,\n    getScrollPosition: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n    this._generatePanHandlers();\n  }\n\n  _generatePanHandlers = () => {\n    this._gestureHandler = PanResponder.create({\n      onStartShouldSetResponderCapture: () => true,\n      onStartShouldSetPanResponderCapture: ({ nativeEvent }) => {\n        return nativeEvent.touches.length === 2;\n      },\n      onMoveShouldSetResponderCapture: () => true,\n      onMoveShouldSetPanResponderCapture: ({ nativeEvent }) => {\n        return nativeEvent.touches.length === 2;\n      },\n      onPanResponderGrant: this._startGesture,\n      onPanResponderMove: this._onGestureMove,\n      onPanResponderRelease: this._onGestureRelease,\n      onPanResponderTerminationRequest: () => {\n        return this._gestureInProgress == null;\n      },\n      onPanResponderTerminate: (event, gestureState) => {\n        return this._onGestureRelease(event, gestureState);\n      },\n    });\n  };\n\n  _startGesture = async (event, gestureState) => {\n\n    if (this._gestureInProgress) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    this._gestureInProgress = gestureState.stateID;\n    let { item, onGestureStart } = this.props;\n    let { gesturePosition, getScrollPosition } = this.context;\n    let { touches } = event.nativeEvent;\n\n    this._initialTouches = touches;\n\n    let selectedPhotoMeasurement = await this._measureSelectedPhoto();\n    this._selectedPhotoMeasurement = selectedPhotoMeasurement;\n    onGestureStart({\n      source: item.source,\n      measurement: selectedPhotoMeasurement,\n    });\n\n    gesturePosition.setValue({\n      x: 0,\n      y: 0,\n    });\n\n    gesturePosition.setOffset({\n      x: 0,\n      y: selectedPhotoMeasurement.y,\n    });\n\n    Animated.timing(this._opacity, {\n      toValue: 0,\n      duration: 200,\n    }).start();\n  };\n\n  _onGestureMove = (event, gestureState) => {\n    let { touches } = event.nativeEvent;\n    if (!this._gestureInProgress) {\n      return;\n    }\n\n    if (touches.length < 2) {\n\n      this._onGestureRelease(event, gestureState);\n      return;\n    }\n\n\n    let { gesturePosition, scaleValue } = this.context;\n    let { dx, dy } = gestureState;\n    let currentPosition = getPosition(touches);\n    let initialPosition = getPosition(this._initialTouches);\n\n    const { x, y } = getDeltaTranslation(currentPosition, initialPosition);\n    gesturePosition.x.setValue(x);\n    gesturePosition.y.setValue(y);\n\n\n    let currentDistance = getDistance(touches);\n    let initialDistance = getDistance(this._initialTouches);\n    let newScale = getScale(currentDistance, initialDistance);\n    scaleValue.setValue(Math.max(newScale, 1));\n  };\n\n  _onGestureRelease = (event, gestureState) => {\n    if (this._gestureInProgress !== gestureState.stateID) {\n      return;\n    }\n\n\n    this._gestureInProgress = null;\n    this._initialTouches = [];\n    let { onGestureRelease } = this.props;\n    let { gesturePosition, scaleValue, getScrollPosition } = this.context;\n\n    Animated.parallel([\n      Animated.timing(gesturePosition.x, {\n        toValue: 0,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n      Animated.timing(gesturePosition.y, {\n        toValue: 0,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n      Animated.timing(scaleValue, {\n        toValue: 1,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n    ]).start(() => {\n      gesturePosition.setOffset({\n        x: 0,\n        y:\n          (this._selectedPhotoMeasurement &&\n            this._selectedPhotoMeasurement.y) ||\n          0 - getScrollPosition(),\n      });\n\n      this._opacity.setValue(1);\n\n      requestAnimationFrame(() => {\n        onGestureRelease();\n      });\n    });\n  };\n\n  _measureSelectedPhoto = async () => {\n    let parent = findNodeHandle(this._parent);\n    let photoComponent = findNodeHandle(this._photoComponent);\n\n    try {\n      const photoMeasurement = await measureNode(photoComponent, parent);\n      const bodyRect = document.body.getBoundingClientRect();\n      const elemRect = photoComponent.getBoundingClientRect();\n      const offset = elemRect.top + window.scrollY;\n\n      return {\n        x: photoMeasurement.x,\n        y: offset,\n        w: photoMeasurement.w,\n        h: photoMeasurement.h,\n      };\n    } catch (error) {\n      console.log('ERROR', error);\n    }\n    return {};\n  };\n\n  render() {\n    const { imageWidth, imageHeight, item, isLarge } = this.props;\n\n    return (\n      <View\n        style={[\n          { backgroundColor: 'white' },\n          isLarge && {\n            borderColor: '#e6e6e6',\n            borderRadius: 3,\n            borderWidth: StyleSheet.hairlineWidth,\n            marginBottom: 15,\n          },\n        ]}\n        ref={parentNode => (this._parent = parentNode)}\n      >\n        <ItemHeader item={item} />\n        <DisableBodyScrollingView>\n          <Animated.View\n            {...this._gestureHandler.panHandlers}\n            testID=\"webkit-disable-touches\"\n            style={{\n              opacity: this._opacity,\n            }}\n          >\n            <ItemImage\n              ref={node => (this._photoComponent = node)}\n              imageWidth={imageWidth}\n              imageHeight={imageHeight}\n              source={item.source}\n            />\n          </Animated.View>\n        </DisableBodyScrollingView>\n\n        <ItemFooter item={item} />\n      </View>\n    );\n  }\n}\nexport default Item;\n",
        "gt": [
            "'Instagram/components/LikeButton.js'",
            "'Instagram/components/IconBar.js'",
            "'Instagram/components/ItemFooter.js'",
            "'Instagram/components/Item.js'",
            "'Instagram/components/FeedList.js'",
            "'Instagram/components/ItemHeader.js'"
        ]
    },
    {
        "files": [
            "'modern-desktop-app-template/src/tauri/TauriProvider.jsx'",
            "'modern-desktop-app-template/src/tauri/storage.js'",
            "'modern-desktop-app-template/src/App.jsx'",
            "'modern-desktop-app-template/src/views/ExampleView.jsx'",
            "'modern-desktop-app-template/src/main.jsx'"
        ],
        "content": "'modern-desktop-app-template/src/tauri/TauriProvider.jsx'\n:import { useInterval } from '@mantine/hooks';\nimport * as fs from '@tauri-apps/api/fs';\nimport * as os from '@tauri-apps/api/os';\nimport * as tauriPath from '@tauri-apps/api/path';\nimport { appWindow, currentMonitor, getCurrent } from '@tauri-apps/api/window';\nimport React, { useContext, useEffect, useState } from 'react';\nimport tauriConfJson from '../../src-tauri/tauri.conf.json';\n\nconst WIN32_CUSTOM_TITLEBAR = true;\nexport const APP_NAME = tauriConfJson.package.productName;\nexport const RUNNING_IN_TAURI = window.__TAURI__ !== undefined;\nconst EXTS = new Set(['.json']);\n\n\n\n\n\nconst TauriContext = React.createContext({\n  loading: true,\n  downloads: undefined,\n  documents: undefined,\n  appDocuments: undefined,\n  osType: undefined,\n  fileSep: '/',\n  isFullScreen: false,\n  usingCustomTitleBar: false,\n});\n\nexport const useTauriContext = () => useContext(TauriContext);\n\nexport function TauriProvider({ children }) {\n\n  const [loading, setLoading] = useState(true);\n  const [downloads, setDownloadDir] = useState();\n  const [documents, setDocumentDir] = useState();\n  const [osType, setOsType] = useState();\n  const [fileSep, setFileSep] = useState('/');\n  const [appDocuments, setAppDocuments] = useState();\n  const [isFullScreen, setFullscreen] = useState(false);\n\n  const [usingCustomTitleBar, setUsingCustomTitleBar] = useState(false);\n\n  if (RUNNING_IN_TAURI) {\n    const tauriInterval = useInterval(() => {\n      appWindow.isFullscreen().then(setFullscreen);\n    }, 200);\n\n    useEffect(() => {\n      tauriInterval.start();\n      return tauriInterval.stop;\n    }, []);\n\n    useEffect(() => {\n      if (osType === 'Windows_NT') {\n        appWindow.setDecorations(!WIN32_CUSTOM_TITLEBAR);\n        if (WIN32_CUSTOM_TITLEBAR) {\n          root.style.setProperty('--titlebar-height', '28px');\n        }\n      }\n    }, [osType]);\n\n    useEffect(() => {\n\n      setUsingCustomTitleBar(!isFullScreen && osType === 'Windows_NT' && WIN32_CUSTOM_TITLEBAR);\n    }, [isFullScreen, osType]);\n\n    useEffect(() => {\n\n      const callTauriAPIs = async () => {\n        setDownloadDir(await tauriPath.downloadDir());\n        const _documents = await tauriPath.documentDir();\n        setDocumentDir(_documents);\n        const _osType = await os.type();\n        setOsType(_osType);\n        const _fileSep = _osType === 'Windows_NT' ? '\\\\' : '/';\n        setFileSep(_fileSep);\n        await fs.createDir(APP_NAME, { dir: fs.BaseDirectory.Document, recursive: true });\n        setAppDocuments(`${_documents}${APP_NAME}`);\n        setLoading(false);\n\n\n\n\n\n\n\n      }\n      callTauriAPIs().catch(console.error);\n    }, []);\n  }\n\n  return <TauriContext.Provider value={{ loading, fileSep, downloads, documents, osType, appDocuments, isFullScreen, usingCustomTitleBar }}>\n    {children}\n  </TauriContext.Provider>;\n}\n\nexport async function getUserAppFiles() {\n\n\n\n  const documents = await tauriPath.documentDir();\n  const saveFiles = [];\n  await fs.createDir(APP_NAME, { dir: fs.BaseDirectory.Document, recursive: true });\n  const entries = await fs.readDir(APP_NAME, { dir: fs.BaseDirectory.AppData, recursive: true });\n  if (entries !== null) {\n    const osType = await os.type();\n    const sep = osType === 'Windows_NT' ? '\\\\' : '/'\n    const appFolder = `${documents}${sep}${APP_NAME}`;\n    for (const { path } of flattenFiles(entries)) {\n      const friendlyName = path.substring(appFolder.length + 1, path.length);\n      if (EXTS.has(getExtension(path).toLowerCase())) saveFiles.push({ path, name: friendlyName });\n    }\n  }\n  return saveFiles;\n}\n\nexport function useMinWidth(minWidth) {\n  if (RUNNING_IN_TAURI) {\n    useEffect(() => {\n      async function resizeWindow() {\n\n\n        const physicalSize = await getCurrent().innerSize();\n\n\n\n        const monitor = await currentMonitor();\n        const scaleFactor = monitor.scaleFactor;\n        const logicalSize = physicalSize.toLogical(scaleFactor);\n        if (logicalSize.width < minWidth) {\n          logicalSize.width = minWidth;\n          await getCurrent().setSize(logicalSize);\n        }\n      }\n      resizeWindow().catch(console.error);\n    }, []);\n  }\n}\n\nfunction* flattenFiles(entries) {\n  for (const entry of entries) {\n    entry.children === null ? yield entry.path : yield* flattenFiles(entry.children);\n  }\n}\n\n\n\nfunction getExtension(path) {\n\n\n  var basename = path.split(/[\\\\/]/).pop(),\n    pos = basename.lastIndexOf('.');\n\n  if (pos < 0) return '';\n\n  return basename.slice(pos);\n}\n\n'modern-desktop-app-template/src/tauri/storage.js'\n:\nimport localforage from 'localforage';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { Store } from 'tauri-plugin-store-api';\nimport { useTauriContext } from './TauriProvider';\n\n\nconst RUNNING_IN_TAURI = window.__TAURI__ !== undefined;\nexport const USE_STORE = false && RUNNING_IN_TAURI;\n\n\nconst SAVE_DELAY = 400;\n\nconst stores = {};\n\nfunction keyInObj(obj, key) {\n    return Object.hasOwnProperty.call(obj, key);\n}\n\nfunction getTauriStore(filename) {\n    if (!keyInObj(stores, filename)) stores[filename] = new Store(filename);\n    return stores[filename];\n}\n\nexport async function testStore() {\n    const x = new Store('test.json');\n    const val = await x.get('DNE');\n    await x.set('Exists', 'sad');\n    await x.save();\n}\n\n\n\nexport function createStorage(storeName) {\n    let loading = useTauriContext().loading;\n    const [data, setData] = useState(undefined);\n    loading = loading || storeName === undefined || data === undefined;\n\n    const localDataRef = useRef();\n    const fileStoreRef = useRef();\n    const timeoutRef = useRef();\n\n\n    useEffect(() => {\n        if (storeName === undefined)\n            return;\n\n        if (RUNNING_IN_TAURI) {\n            fileStoreRef.current = getTauriStore(storeName);\n            fileStoreRef.current.get('data').then(\n                value => {\n                    if (value === null) {\n                        const newValue = {};\n                        fileStoreRef.current.set('data', newValue)\n                            .then(() => setData(newValue));\n                    } else {\n                        setData(value);\n                    }\n                }\n            )\n        } else {\n            localforage.getItem(storeName, (err, value) => {\n\n                if (err !== undefined && value === null || Array.isArray(value)) {\n                    localforage.setItem(storeName, {}, (err, val) => {\n                        if (err !== null && err !== undefined) {\n                            return alert('cannot store data, application will not work as intended');\n                        }\n                        setData(val);\n                    });\n                } else {\n                    console.log('err === null?', err === null);\n                    setData(value);\n                }\n            });\n        }\n    }, [storeName]);\n\n    const setItem = useCallback((key, newValueOrHandler) => {\n        if (loading) return;\n        console.log(newValueOrHandler);\n        clearTimeout(timeoutRef.current);\n        setData(data => {\n            const prev = data[key];\n            let newData = data;\n            try {\n                newData = { ...data, [key]: newValueOrHandler(prev) };\n                console.log(JSON.stringify(newData));\n            } catch (TypeError) {\n                newData = { ...data, [key]: newValueOrHandler };\n            }\n            if (newData !== data) {\n                if (RUNNING_IN_TAURI) {\n\n                    fileStoreRef.current.set('data', newData)\n                        .then(() => {\n                            timeoutRef.current = setTimeout(() => fileStoreRef.current.save(), SAVE_DELAY)\n                        });\n                } else {\n                    timeoutRef.current = setTimeout(() => localforage.setItem(storeName, newData), SAVE_DELAY);\n                }\n            }\n            return newData;\n        });\n    }, [storeName, loading, fileStoreRef, localDataRef, timeoutRef]);\n\n    const getItem = useCallback((key, defaultValue) => {\n        if (loading) return defaultValue;\n        const value = data[key];\n        if (value === undefined && defaultValue !== undefined) {\n            setData(data => ({ ...data, [key]: defaultValue }));\n            return defaultValue;\n        }\n        return value;\n    }, [loading, data]);\n\n    const useItem = useCallback((key, defaultValue) => {\n        const value = getItem(key, defaultValue);\n        return [value, newValue => setItem(key, newValue)];\n    }, [getItem, setItem]);\n\n    return {\n        get: getItem,\n        set: setItem,\n        use: useItem,\n        data,\n        loading\n    };\n}\n\n'modern-desktop-app-template/src/App.jsx'\n:import { ActionIcon, AppShell, AppShellAside, AppShellFooter, AppShellHeader, AppShellMain, AppShellNavbar, AppShellSection, Burger, Button, Group, Space, Text, useComputedColorScheme, useMantineColorScheme } from '@mantine/core';\n\nimport { useDisclosure, useHotkeys } from '@mantine/hooks';\n\nimport { notifications } from '@mantine/notifications';\n\nimport * as tauriEvent from '@tauri-apps/api/event';\n\nimport { relaunch } from '@tauri-apps/api/process';\n\nimport { checkUpdate, installUpdate } from '@tauri-apps/api/updater';\n\nimport { appWindow } from '@tauri-apps/api/window';\n\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { useTranslation } from 'react-i18next';\n\nimport { BsMoonStarsFill } from 'react-icons/bs';\n\nimport { ImCross } from 'react-icons/im';\n\nimport { IoSunnySharp } from 'react-icons/io5';\n\nimport { NavLink, Navigate, Route, Routes } from 'react-router-dom';\n\nimport SimpleBar from 'simplebar-react';\n\nimport 'simplebar-react/dist/simplebar.min.css';\n\nimport classes from './App.module.css';\n\n\n\nimport { FOOTER, HEADER_TITLE, useCookie, useLocalForage } from './common/utils';\n\nimport LanguageHeaders from './components/LanguageHeaders';\n\nimport { ScrollToTop } from './components/ScrollToTop';\n\nimport { RUNNING_IN_TAURI, useTauriContext } from './tauri/TauriProvider';\n\n\n\nimport ExampleView from './views/ExampleView';\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default function () {\n\n  const { t, i18n } = useTranslation();\n\n\n\n  const { usingCustomTitleBar } = useTauriContext();\n\n\n\n\n\n  const views = [\n\n\n\n\n\n\n\n\n\n\n\n    { component: ExampleView, path: '/example-view', name: t('ExampleView') },\n\n  ];\n\n\n\n  const { toggleColorScheme } = useMantineColorScheme();\n\n  const colorScheme = useComputedColorScheme();\n\n  useHotkeys([['ctrl+J', toggleColorScheme]]);\n\n\n\n\n\n  const [mobileNavOpened, { toggle: toggleMobileNav }] = useDisclosure();\n\n  const [desktopNavOpened, setDesktopNavOpened] = useCookie('desktop-nav-opened', true);\n\n  const toggleDesktopNav = () => setDesktopNavOpened(o => !o);\n\n\n\n  const [footersSeen, setFootersSeen, footersSeenLoading] = useLocalForage('footersSeen', {});\n\n\n\n  const [navbarClearance, setNavbarClearance] = useState(0);\n\n  const footerRef = useRef(null);\n\n  useEffect(() => {\n\n    if (footerRef.current) setNavbarClearance(footerRef.current.clientHeight);\n\n  }, [footersSeen]);\n\n\n\n\n\n\n\n  function startInstall(newVersion) {\n\n    notifications.show({ title: t('Installing update v{{ v }}', { v: newVersion }), message: t('Will relaunch afterwards'), autoClose: false });\n\n    installUpdate().then(relaunch);\n\n  }\n\n\n\n\n\n  if (RUNNING_IN_TAURI) {\n\n    useEffect(() => {\n\n      const promise = tauriEvent.listen('longRunningThread', ({payload}) => {\n\n        console.log(payload.message);\n\n      });\n\n      return () => promise.then(unlisten => unlisten());\n\n    }, []);\n\n\n\n    useEffect(() => {\n\n      const promise = tauriEvent.listen('systemTray', ({ payload, ...eventObj }) => {\n\n        console.log(payload.message);\n\n\n\n        notifications.show({\n\n          title: '[DEBUG] System Tray Event',\n\n          message: payload.message\n\n        });\n\n      });\n\n      return () => promise.then(unlisten => unlisten());\n\n    }, []);\n\n\n\n\n\n    useEffect(() => {\n\n      checkUpdate().then(({ shouldUpdate, manifest }) => {\n\n        if (shouldUpdate) {\n\n          const { version: newVersion, body: releaseNotes } = manifest;\n\n          const color = colorScheme === 'dark' ? 'teal' : 'teal.8';\n\n          notifications.show({\n\n            title: t('Update v{{ v }} available', { v: newVersion }),\n\n            color,\n\n            message: <>\n\n              <Text>{releaseNotes}</Text>\n\n              <Button color={color} style={{ width: '100%' }} onClick={() => startInstall(newVersion)}>{t('Install update and relaunch')}</Button>\n\n            </>,\n\n            autoClose: false\n\n          });\n\n        }\n\n      });\n\n    }, []);\n\n\n\n\n\n    useEffect(() => {\n\n      const promise = tauriEvent.listen('newInstance', async ({ payload, ...eventObj }) => {\n\n        if (!(await appWindow.isVisible())) await appWindow.show();\n\n\n\n        if (await appWindow.isMinimized()) {\n\n          await appWindow.unminimize();\n\n          await appWindow.setFocus(true);\n\n        }\n\n\n\n        let args = payload?.args;\n\n        let cwd = payload?.cwd;\n\n        if (args?.length > 1) {\n\n\n\n        }\n\n      });\n\n      return () => promise.then(unlisten => unlisten());\n\n    }, []);\n\n  }\n\n\n\n  function NavLinks() {\n\n\n\n    return views.map((view, index) =>\n\n      <NavLink align='left' to={view.path} key={index} end={view.exact} onClick={() => toggleMobileNav(false)}\n\n        className={({ isActive }) => classes.navLink + ' ' + (isActive ? classes.navLinkActive : classes.navLinkInactive)}>\n\n        {}\n\n        <Group><Text>{view.name ? view.name : view.name}</Text></Group>\n\n      </NavLink>\n\n    );\n\n  }\n\n\n\n  const showFooter = FOOTER && !footersSeenLoading && !(FOOTER in footersSeen);\n\n  const footerText = t(FOOTER);\n\n\n\n  const scrollbarRef = useRef();\n\n\n\n\n\n  useEffect(() => {\n\n    const el = document.getElementsByClassName('simplebar-vertical')[0];\n\n    if (el !== undefined) {\n\n      el.style.marginTop = usingCustomTitleBar ? '100px' : '70px';\n\n      el.style.marginBottom = showFooter ? '50px' : 0;\n\n    }\n\n  }, [usingCustomTitleBar, showFooter]);\n\n\n\n  return <>\n\n    <SimpleBar scrollableNodeProps={{ ref: scrollbarRef }} autoHide={false} className={classes.simpleBar}>\n\n      <AppShell padding='md'\n\n        header={{ height: 60 }}\n\n        footer={{ height: showFooter ? 60 : undefined }}\n\n        navbar={{ width: 200, breakpoint: 'sm', collapsed: { mobile: !mobileNavOpened, desktop: !desktopNavOpened } }}\n\n        aside={{ width: 200, breakpoint: 'sm', collapsed: { desktop: false, mobile: true } }}\n\n        className={classes.appShell}>\n\n        <AppShellMain>\n\n          {usingCustomTitleBar && <Space h='xl' />}\n\n          <Routes>\n\n            <Route exact path='/' element={<Navigate to={views[0].path} />} />\n\n            {views.map((view, index) => <Route key={index} exact={view.exact}\n\n              path={view.path} element={\n\n                <view.component />\n\n              } />)}\n\n          </Routes>\n\n          {}\n\n          <Space h={showFooter ? 80 : 50} />\n\n          <ScrollToTop scroller={scrollbarRef.current} bottom={showFooter ? 70 : 20} />\n\n        </AppShellMain>\n\n\n\n        <AppShellHeader data-tauri-drag-region p='md' className={classes.header}>\n\n          <Group h='100%'>\n\n            <Burger hiddenFrom='sm' opened={mobileNavOpened} onClick={toggleMobileNav} size='sm' />\n\n            <Burger visibleFrom='sm' opened={desktopNavOpened} onClick={toggleDesktopNav} size='sm' />\n\n            <Text>{HEADER_TITLE}</Text>\n\n          </Group>\n\n          <Group className={classes.headerRightItems} h='110%'>\n\n            <LanguageHeaders i18n={i18n} />\n\n            <ActionIcon id='toggle-theme' title='Ctrl + J' variant='default' onClick={toggleColorScheme} size={30}>\n\n              {}\n\n              {colorScheme === 'dark' ? <IoSunnySharp size={'1.5em'} /> : <BsMoonStarsFill />}\n\n            </ActionIcon>\n\n          </Group>\n\n        </AppShellHeader>\n\n\n\n        <AppShellNavbar className={classes.titleBarAdjustedHeight} height='100%' width={{ sm: 200 }} p='xs' hidden={!mobileNavOpened}>\n\n          <AppShellSection grow><NavLinks /></AppShellSection>\n\n          <AppShellSection>\n\n            {}\n\n          </AppShellSection>\n\n        </AppShellNavbar>\n\n\n\n        <AppShellAside className={classes.titleBarAdjustedHeight} p='md' width={{ sm: 200, lg: 300 }}>\n\n          <Text>Right Side. Use for help, support, quick action menu? For example, if we were building a trading app, we could use the aside for the trade parameters while leaving the main UI with the data</Text>\n\n        </AppShellAside>\n\n\n\n        {showFooter &&\n\n          <AppShellFooter p='md' className={classes.footer}>\n\n            {footerText}\n\n            <Button variant='subtle' size='xs' onClick={() => setFootersSeen(prev => ({ ...prev, [FOOTER]: '' }))}>\n\n              <ImCross />\n\n            </Button>\n\n          </AppShellFooter>\n\n        }\n\n      </AppShell>\n\n    </SimpleBar>\n\n  </>;\n\n}\n\n\n'modern-desktop-app-template/src/views/ExampleView.jsx'\n:\nimport { Text, Anchor, Space, Button, Title, TextInput } from '@mantine/core';\nimport { Trans, useTranslation } from 'react-i18next';\n\nimport * as fs from '@tauri-apps/api/fs';\nimport * as shell from '@tauri-apps/api/shell';\nimport { invoke } from '@tauri-apps/api/tauri'\n\nimport { notifications } from '@mantine/notifications';\nimport { APP_NAME, RUNNING_IN_TAURI, useMinWidth, useTauriContext } from '../tauri/TauriProvider';\nimport { appWindow } from '@tauri-apps/api/window'\nimport { createStorage } from '../tauri/storage';\nimport { notify } from '../common/utils';\n\n\nfunction toggleFullscreen() {\n    appWindow.isFullscreen().then(x => appWindow.setFullscreen(!x));\n}\n\nexport default function ExampleView() {\n    const { t } = useTranslation();\n    const { fileSep, documents, downloads } = useTauriContext();\n\n    const storeName = `${documents}${APP_NAME}${fileSep}example_view.dat`;\n\n    const { use: useKVP, loading, data } = createStorage(storeName);\n    const [exampleData, setExampleData] = useKVP('exampleKey', '');\n\n    useMinWidth(1000);\n\n\n    async function createFile() {\n\n        if (RUNNING_IN_TAURI) {\n\n            const filePath = `${downloads}/example_file.txt`;\n            await fs.writeTextFile('example_file.txt', 'oh this is from TAURI! COOLIO.\\n', { dir: fs.BaseDirectory.Download });\n\n            await shell.open(downloads);\n            await invoke('process_file', { filepath: filePath }).then(msg => {\n                console.log(msg === 'Hello from Rust!')\n                notify('Message from Rust', msg);\n                notifications.show({ title: 'Message from Rust', message: msg });\n            });\n        }\n    }\n\n    return !loading && <>\n        <Text>{t('Modern Desktop App Examples')}</Text>\n        <Space h='lg' />\n        <Button onClick={createFile}>Do something with fs</Button>\n        <Space />\n        <Button onClick={toggleFullscreen}>Toggle Fullscreen</Button>\n        <Space />\n        <Button onClick={() => notifications.show({ title: 'Mantine Notification', message: 'test v6 breaking change' })}>Notification example</Button>\n\n        <Title order={4}>{t('Interpolating components in translations')} </Title>\n        <Trans i18nKey='transExample'\n            values={{ variable: '/elibroftw/modern-desktop-template' }}\n            components={[<Anchor href=\"https:\n\n            default='FALLBACK if key does not exist. This template is located on <0>github.com{{variable}}</0>' t={t} />\n        <TextInput label={t('Persistent data')} value={exampleData} onChange={e => setExampleData(e.currentTarget.value)} />\n    </>\n}\n\n'modern-desktop-app-template/src/main.jsx'\n:import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './App';\n\nimport Providers from './Providers';\n\nimport './translations/i18n.js'\n\n\nconst root = createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>\n);\n",
        "gt": [
            "'modern-desktop-app-template/src/tauri/TauriProvider.jsx'",
            "'modern-desktop-app-template/src/tauri/storage.js'",
            "'modern-desktop-app-template/src/views/ExampleView.jsx'",
            "'modern-desktop-app-template/src/App.jsx'",
            "'modern-desktop-app-template/src/main.jsx'"
        ]
    },
    {
        "files": [
            "'place-to-stay/client/src/pages/dashboard/Dashboard.js'",
            "'place-to-stay/client/src/pages/dashboard/SideList.js'",
            "'place-to-stay/client/src/index.js'",
            "'place-to-stay/client/src/App.js'",
            "'place-to-stay/client/src/pages/dashboard/main/Main.js'",
            "'place-to-stay/client/src/pages/dashboard/main/AreaRoomsUsers.js'"
        ],
        "content": "'place-to-stay/client/src/pages/dashboard/Dashboard.js'\n:import { createTheme, styled, ThemeProvider } from '@mui/material/styles';\nimport {\n  Box,\n  Toolbar,\n  CssBaseline,\n  Typography,\n  IconButton,\n  Tooltip,\n} from '@mui/material';\nimport MuiAppBar from '@mui/material/AppBar';\nimport { Brightness4, Brightness7, Home, Menu } from '@mui/icons-material';\nimport { useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport SideList from './SideList';\nimport Protected from '../../components/protected/Protected';\nimport Login from '../../components/user/Login';\n\nconst drawerWidth = 240;\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== 'open',\n})(({ theme, open }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n  transition: theme.transitions.create(['width', 'margin'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(open && {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  }),\n}));\n\nexport default function Dashboard() {\n  const [open, setOpen] = useState(false);\n  const [dark, setDark] = useState(true);\n\n  const darkTheme = useMemo(\n    () =>\n      createTheme({\n        palette: {\n          mode: dark ? 'dark' : 'light',\n        },\n      }),\n    [dark]\n  );\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const navigate = useNavigate();\n  return (\n    <ThemeProvider theme={darkTheme}>\n      <Box sx={{ display: 'flex' }}>\n        <CssBaseline />\n        <AppBar position=\"fixed\" open={open}>\n          <Toolbar>\n            <IconButton\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={handleDrawerOpen}\n              edge=\"start\"\n              sx={{\n                marginRight: 5,\n                ...(open && { display: 'none' }),\n              }}\n            >\n              <Menu />\n            </IconButton>\n            <Tooltip title=\"Go back to home page\">\n              <IconButton sx={{ mr: 1 }} onClick={() => navigate('/')}>\n                <Home />\n              </IconButton>\n            </Tooltip>\n            <Typography\n              variant=\"h6\"\n              noWrap\n              component=\"div\"\n              sx={{ flexGrow: 1 }}\n            >\n              Dashboard\n            </Typography>\n            <IconButton onClick={() => setDark(!dark)}>\n              {dark ? <Brightness7 /> : <Brightness4 />}\n            </IconButton>\n          </Toolbar>\n        </AppBar>\n        <Protected>\n          <SideList {...{ open, setOpen }} />\n        </Protected>\n      </Box>\n      <Login />\n    </ThemeProvider>\n  );\n}\n\n'place-to-stay/client/src/pages/dashboard/SideList.js'\n:import {\n  ChevronLeft,\n  Dashboard,\n  KingBed,\n  Logout,\n  MarkChatUnread,\n  NotificationsActive,\n  PeopleAlt,\n} from '@mui/icons-material';\nimport {\n  Avatar,\n  Box,\n  Divider,\n  IconButton,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemIcon,\n  ListItemText,\n  styled,\n  Tooltip,\n  Typography,\n} from '@mui/material';\nimport MuiDrawer from '@mui/material/Drawer';\nimport { useMemo, useState } from 'react';\nimport { Route, Routes, useNavigate } from 'react-router-dom';\nimport { storeRoom } from '../../actions/room';\nimport { logout } from '../../actions/user';\nimport { useValue } from '../../context/ContextProvider';\nimport Main from './main/Main';\nimport Messages from './messages/Messages';\nimport Requests from './requests/Requests';\nimport Rooms from './rooms/Rooms';\nimport Users from './users/Users';\nimport useCheckToken from '../../hooks/useCheckToken';\nimport isAdmin from './utils/isAdmin';\n\nconst drawerWidth = 240;\n\nconst openedMixin = (theme) => ({\n  width: drawerWidth,\n  transition: theme.transitions.create('width', {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.enteringScreen,\n  }),\n  overflowX: 'hidden',\n});\n\nconst closedMixin = (theme) => ({\n  transition: theme.transitions.create('width', {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  overflowX: 'hidden',\n  width: `calc(${theme.spacing(7)} + 1px)`,\n  [theme.breakpoints.up('sm')]: {\n    width: `calc(${theme.spacing(8)} + 1px)`,\n  },\n});\n\nconst DrawerHeader = styled('div')(({ theme }) => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'flex-end',\n  padding: theme.spacing(0, 1),\n\n  ...theme.mixins.toolbar,\n}));\n\nconst Drawer = styled(MuiDrawer, {\n  shouldForwardProp: (prop) => prop !== 'open',\n})(({ theme, open }) => ({\n  width: drawerWidth,\n  flexShrink: 0,\n  whiteSpace: 'nowrap',\n  boxSizing: 'border-box',\n  ...(open && {\n    ...openedMixin(theme),\n    '& .MuiDrawer-paper': openedMixin(theme),\n  }),\n  ...(!open && {\n    ...closedMixin(theme),\n    '& .MuiDrawer-paper': closedMixin(theme),\n  }),\n}));\n\nconst SideList = ({ open, setOpen }) => {\n  useCheckToken();\n  const {\n    state: {\n      currentUser,\n      location,\n      details,\n      images,\n      updatedRoom,\n      deletedImages,\n      addedImages,\n    },\n    dispatch,\n  } = useValue();\n\n  const [selectedLink, setSelectedLink] = useState('');\n\n  const list = useMemo(\n    () => [\n      ...(isAdmin(currentUser)\n        ? [\n            {\n              title: 'Main',\n              icon: <Dashboard />,\n              link: '',\n              component: <Main {...{ setSelectedLink, link: '' }} />,\n            },\n            {\n              title: 'Users',\n              icon: <PeopleAlt />,\n              link: 'users',\n              component: <Users {...{ setSelectedLink, link: 'users' }} />,\n            },\n          ]\n        : []),\n\n      {\n        title: 'Rooms',\n        icon: <KingBed />,\n        link: 'rooms',\n        component: <Rooms {...{ setSelectedLink, link: 'rooms' }} />,\n      },\n      {\n        title: 'Requests',\n        icon: <NotificationsActive />,\n        link: 'requests',\n        component: <Requests {...{ setSelectedLink, link: 'requests' }} />,\n      },\n      {\n        title: 'Messages',\n        icon: <MarkChatUnread />,\n        link: 'messages',\n        component: <Messages {...{ setSelectedLink, link: 'messages' }} />,\n      },\n    ],\n    [currentUser]\n  );\n\n  const navigate = useNavigate();\n\n  const handleLogout = () => {\n    storeRoom(\n      location,\n      details,\n      images,\n      updatedRoom,\n      deletedImages,\n      addedImages,\n      currentUser.id\n    );\n    logout(dispatch);\n  };\n  return (\n    <>\n      <Drawer variant=\"permanent\" open={open}>\n        <DrawerHeader>\n          <IconButton onClick={() => setOpen(false)}>\n            <ChevronLeft />\n          </IconButton>\n        </DrawerHeader>\n        <Divider />\n        <List>\n          {list.map((item) => (\n            <ListItem key={item.title} disablePadding sx={{ display: 'block' }}>\n              <ListItemButton\n                sx={{\n                  minHeight: 48,\n                  justifyContent: open ? 'initial' : 'center',\n                  px: 2.5,\n                }}\n                onClick={() => navigate(item.link)}\n                selected={selectedLink === item.link}\n              >\n                <ListItemIcon\n                  sx={{\n                    minWidth: 0,\n                    mr: open ? 3 : 'auto',\n                    justifyContent: 'center',\n                  }}\n                >\n                  {item.icon}\n                </ListItemIcon>\n                <ListItemText\n                  primary={item.title}\n                  sx={{ opacity: open ? 1 : 0 }}\n                />\n              </ListItemButton>\n            </ListItem>\n          ))}\n        </List>\n        <Divider />\n        <Box sx={{ mx: 'auto', mt: 3, mb: 1 }}>\n          <Tooltip title={currentUser?.name || ''}>\n            <Avatar\n              src={currentUser?.photoURL}\n              {...(open && { sx: { width: 100, height: 100 } })}\n            />\n          </Tooltip>\n        </Box>\n        <Box sx={{ textAlign: 'center' }}>\n          {open && <Typography>{currentUser?.name}</Typography>}\n          <Typography variant=\"body2\">{currentUser?.role || 'role'}</Typography>\n          {open && (\n            <Typography variant=\"body2\">{currentUser?.email}</Typography>\n          )}\n          <Tooltip title=\"Logout\" sx={{ mt: 1 }}>\n            <IconButton onClick={handleLogout}>\n              <Logout />\n            </IconButton>\n          </Tooltip>\n        </Box>\n      </Drawer>\n      <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\n        <DrawerHeader />\n        <Routes>\n          {list.map((item) => (\n            <Route key={item.title} path={item.link} element={item.component} />\n          ))}\n          <Route\n            path=\"*\"\n            element={\n              isAdmin(currentUser) ? (\n                <Main {...{ setSelectedLink, link: '' }} />\n              ) : (\n                <Rooms {...{ setSelectedLink, link: 'rooms' }} />\n              )\n            }\n          />\n        </Routes>\n      </Box>\n    </>\n  );\n};\n\nexport default SideList;\n\n'place-to-stay/client/src/index.js'\n:import { createRoot } from 'react-dom/client';\nimport App from './App';\nimport ContextProvider from './context/ContextProvider';\n\ncreateRoot(document.getElementById('root')).render(\n  <ContextProvider>\n    <App />\n  </ContextProvider>\n);\n\n'place-to-stay/client/src/App.js'\n:import { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport Dashboard from './pages/dashboard/Dashboard';\nimport Home from './pages/Home';\nimport Loading from './components/Loading';\nimport Notification from './components/Notification';\nimport Room from './components/rooms/Room';\n\nconst App = () => {\n  return (\n    <>\n      <Loading />\n      <Notification />\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"dashboard/*\" element={<Dashboard />} />\n          <Route path=\"*\" element={<Home />} />\n        </Routes>\n      </BrowserRouter>\n      <Room />\n    </>\n  );\n};\n\nexport default App;\n\n'place-to-stay/client/src/pages/dashboard/main/Main.js'\n:import { Group, MapsHomeWork } from '@mui/icons-material';\nimport {\n  Avatar,\n  Box,\n  Divider,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Paper,\n  Typography,\n} from '@mui/material';\nimport React, { useEffect } from 'react';\nimport { getRooms } from '../../../actions/room';\nimport { getUsers } from '../../../actions/user';\nimport { useValue } from '../../../context/ContextProvider';\nimport moment from 'moment';\nimport PieRoomsCost from './PieRoomsCost';\nimport AreaRoomsUsers from './AreaRoomsUsers';\n\nconst Main = ({ setSelectedLink, link }) => {\n  const {\n    state: { rooms, users, currentUser },\n    dispatch,\n  } = useValue();\n  useEffect(() => {\n    setSelectedLink(link);\n    if (rooms.length === 0) getRooms(dispatch);\n    if (users.length === 0) getUsers(dispatch, currentUser);\n  }, []);\n  return (\n    <Box\n      sx={{\n        display: { xs: 'flex', md: 'grid' },\n        gridTemplateColumns: 'repeat(3,1fr)',\n        gridAutoRows: 'minmax(100px, auto)',\n        gap: 3,\n        textAlign: 'center',\n        flexDirection: 'column',\n      }}\n    >\n      <Paper elevation={3} sx={{ p: 3 }}>\n        <Typography variant=\"h4\">Total Users</Typography>\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <Group sx={{ height: 100, width: 100, opacity: 0.3, mr: 1 }} />\n          <Typography variant=\"h4\">{users.length}</Typography>\n        </Box>\n      </Paper>\n      <Paper elevation={3} sx={{ p: 3 }}>\n        <Typography variant=\"h4\">Total Rooms</Typography>\n        <Box\n          sx={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n          }}\n        >\n          <MapsHomeWork sx={{ height: 100, width: 100, opacity: 0.3, mr: 1 }} />\n          <Typography variant=\"h4\">{rooms.length}</Typography>\n        </Box>\n      </Paper>\n      <Paper elevation={3} sx={{ p: 2, gridColumn: 3, gridRow: '1/4' }}>\n        <Box>\n          <Typography>Recently added Users</Typography>\n          <List>\n            {users.slice(0, 4).map((user, i) => (\n              <Box key={user._id}>\n                <ListItem>\n                  <ListItemAvatar>\n                    <Avatar alt={user?.name} src={user?.photoURL} />\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={user?.name}\n                    secondary={`Time Created: ${moment(user?.createdAt).format(\n                      'YYYY-MM-DD H:mm:ss'\n                    )}`}\n                  />\n                </ListItem>\n                {i !== 3 && <Divider variant=\"inset\" />}\n              </Box>\n            ))}\n          </List>\n        </Box>\n        <Divider sx={{ mt: 3, mb: 3, opacity: 0.7 }} />\n        <Box>\n          <Typography>Recently added Rooms</Typography>\n          <List>\n            {rooms.slice(0, 4).map((room, i) => (\n              <Box key={room._id}>\n                <ListItem>\n                  <ListItemAvatar>\n                    <Avatar\n                      alt={room?.title}\n                      src={room?.images[0]}\n                      variant=\"rounded\"\n                    />\n                  </ListItemAvatar>\n                  <ListItemText\n                    primary={room?.title}\n                    secondary={`Added: ${moment(room?.createdAt).fromNow()}`}\n                  />\n                </ListItem>\n                {i !== 3 && <Divider variant=\"inset\" />}\n              </Box>\n            ))}\n          </List>\n        </Box>\n      </Paper>\n      <Paper elevation={3} sx={{ p: 2, gridColumn: '1/3' }}>\n        <PieRoomsCost />\n      </Paper>\n      <Paper elevation={3} sx={{ p: 2, gridColumn: '1/3' }}>\n        <AreaRoomsUsers />\n      </Paper>\n    </Box>\n  );\n};\n\nexport default Main;\n\n'place-to-stay/client/src/pages/dashboard/main/AreaRoomsUsers.js'\n:import moment from 'moment';\nimport { useEffect, useState } from 'react';\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Tooltip,\n} from 'recharts';\nimport { useValue } from '../../../context/ContextProvider';\n\nconst months = 5;\nconst today = new Date();\nconst tempData = [];\nfor (let i = 0; i < months; i++) {\n  const date = new Date(\n    today.getFullYear(),\n    today.getMonth() - (months - (i + 1))\n  );\n  tempData.push({\n    date,\n    name: moment(date).format('MMM YYYY'),\n    users: 0,\n    rooms: 0,\n  });\n}\n\nexport default function AreaRoomsUsers() {\n  const {\n    state: { rooms, users },\n  } = useValue();\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    for (let i = 0; i < months; i++) {\n      tempData[i].users = 0;\n    }\n    users.forEach((user) => {\n      for (let i = 0; i < months; i++) {\n        if (moment(tempData[i].date).isSame(user?.createdAt, 'month'))\n          return tempData[i].users++;\n      }\n    });\n    setData([...tempData]);\n  }, [users]);\n\n  useEffect(() => {\n    for (let i = 0; i < months; i++) {\n      tempData[i].rooms = 0;\n    }\n    rooms.forEach((room) => {\n      for (let i = 0; i < months; i++) {\n        if (moment(tempData[i].date).isSame(room?.createdAt, 'month'))\n          return tempData[i].rooms++;\n      }\n    });\n    setData([...tempData]);\n  }, [rooms]);\n  return (\n    <div style={{ width: '100%', height: 300, minWidth: 250 }}>\n      <ResponsiveContainer>\n        <AreaChart\n          data={data}\n          margin={{\n            top: 10,\n            right: 10,\n            left: 0,\n            bottom: 0,\n          }}\n        >\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip />\n          <Area\n            type=\"monotone\"\n            dataKey=\"users\"\n            stackId=\"1\"\n            stroke=\"#8884d8\"\n            fill=\"#8884d8\"\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"rooms\"\n            stackId=\"1\"\n            stroke=\"#82ca9d\"\n            fill=\"#82ca9d\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n",
        "gt": [
            "'place-to-stay/client/src/pages/dashboard/main/AreaRoomsUsers.js'",
            "'place-to-stay/client/src/pages/dashboard/main/Main.js'",
            "'place-to-stay/client/src/pages/dashboard/SideList.js'",
            "'place-to-stay/client/src/pages/dashboard/Dashboard.js'",
            "'place-to-stay/client/src/App.js'",
            "'place-to-stay/client/src/index.js'"
        ]
    },
    {
        "files": [
            "'neode/build/Services/First.js'",
            "'neode/build/Queryable.js'",
            "'neode/build/Model.js'",
            "'neode/build/Query/Create.js'"
        ],
        "content": "'neode/build/Services/First.js'\n:\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = First;\n\nvar _Builder = _interopRequireWildcard(require(\"../Query/Builder\"));\n\nvar _EagerUtils = require(\"../Query/EagerUtils\");\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction First(neode, model, key, value) {\n  var alias = 'this';\n  var builder = new _Builder[\"default\"](neode);\n\n  builder.match(alias, model);\n\n  if (_typeof(key) == 'object') {\n\n    Object.keys(key).forEach(function (property) {\n      builder.where(\"\".concat(alias, \".\").concat(property), key[property]);\n    });\n  } else {\n\n    builder.where(\"\".concat(alias, \".\").concat(key), value);\n  }\n\n  var output = (0, _EagerUtils.eagerNode)(neode, 1, alias, model);\n  return builder[\"return\"](output).limit(1).execute(_Builder.mode.READ).then(function (res) {\n    return neode.hydrateFirst(res, alias, model);\n  });\n}\n'neode/build/Queryable.js'\n:\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _Builder = _interopRequireDefault(require(\"./Query/Builder\"));\n\nvar _Create = _interopRequireDefault(require(\"./Services/Create\"));\n\nvar _DeleteAll = _interopRequireDefault(require(\"./Services/DeleteAll\"));\n\nvar _FindAll = _interopRequireDefault(require(\"./Services/FindAll\"));\n\nvar _FindById = _interopRequireDefault(require(\"./Services/FindById\"));\n\nvar _FindWithinDistance = _interopRequireDefault(require(\"./Services/FindWithinDistance\"));\n\nvar _First = _interopRequireDefault(require(\"./Services/First\"));\n\nvar _MergeOn = _interopRequireDefault(require(\"./Services/MergeOn\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Queryable = function () {\n\n  function Queryable(neode) {\n    _classCallCheck(this, Queryable);\n\n    this._neode = neode;\n  }\n\n\n\n  _createClass(Queryable, [{\n    key: \"query\",\n    value: function query() {\n      return new _Builder[\"default\"](this._neode);\n    }\n\n\n  }, {\n    key: \"create\",\n    value: function create(properties) {\n      return (0, _Create[\"default\"])(this._neode, this, properties);\n    }\n\n\n  }, {\n    key: \"merge\",\n    value: function merge(properties) {\n      var merge_on = this.mergeFields();\n      return (0, _MergeOn[\"default\"])(this._neode, this, merge_on, properties);\n    }\n\n\n  }, {\n    key: \"mergeOn\",\n    value: function mergeOn(match, set) {\n      var merge_on = Object.keys(match);\n      var properties = Object.assign({}, match, set);\n      return (0, _MergeOn[\"default\"])(this._neode, this, merge_on, properties);\n    }\n\n\n  }, {\n    key: \"deleteAll\",\n    value: function deleteAll() {\n      return (0, _DeleteAll[\"default\"])(this._neode, this);\n    }\n\n\n  }, {\n    key: \"all\",\n    value: function all(properties, order, limit, skip) {\n      return (0, _FindAll[\"default\"])(this._neode, this, properties, order, limit, skip);\n    }\n\n\n  }, {\n    key: \"find\",\n    value: function find(id) {\n      var primary_key = this.primaryKey();\n      return this.first(primary_key, id);\n    }\n\n\n  }, {\n    key: \"findById\",\n    value: function findById(id) {\n      return (0, _FindById[\"default\"])(this._neode, this, id);\n    }\n\n\n  }, {\n    key: \"first\",\n    value: function first(key, value) {\n      return (0, _First[\"default\"])(this._neode, this, key, value);\n    }\n\n\n  }, {\n    key: \"withinDistance\",\n    value: function withinDistance(location_property, point, distance, properties, order, limit, skip) {\n      return (0, _FindWithinDistance[\"default\"])(this._neode, this, location_property, point, distance, properties, order, limit, skip);\n    }\n  }]);\n\n  return Queryable;\n}();\n\nexports[\"default\"] = Queryable;\n'neode/build/Model.js'\n:\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _Queryable2 = _interopRequireDefault(require(\"./Queryable\"));\n\nvar _RelationshipType = _interopRequireWildcard(require(\"./RelationshipType\"));\n\nvar _Property = _interopRequireDefault(require(\"./Property\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _iterableToArrayLimit(arr, i) { if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nvar RELATIONSHIP_TYPES = ['relationship', 'relationships', 'node', 'nodes'];\n\nvar Model = function (_Queryable) {\n  _inherits(Model, _Queryable);\n\n  var _super = _createSuper(Model);\n\n  function Model(neode, name, schema) {\n    var _this2;\n\n    var _this;\n\n    _classCallCheck(this, Model);\n\n    _this = _super.call(this, neode);\n    _this._name = name;\n    _this._schema = schema;\n    _this._properties = new Map();\n    _this._relationships = new Map();\n    _this._labels = [name];\n\n    _this._primary_key = name.toLowerCase() + '_id';\n    _this._unique = [];\n    _this._indexed = [];\n    _this._hidden = [];\n    _this._readonly = [];\n\n    for (var key in schema) {\n      var value = schema[key];\n\n      switch (key) {\n        case 'labels':\n          (_this2 = _this).setLabels.apply(_this2, _toConsumableArray(value));\n\n          break;\n\n        default:\n          if (value.type && RELATIONSHIP_TYPES.indexOf(value.type) > -1) {\n            var relationship = value.relationship,\n                direction = value.direction,\n                target = value.target,\n                properties = value.properties,\n                eager = value.eager,\n                cascade = value.cascade,\n                alias = value.alias;\n\n            _this.relationship(key, value.type, relationship, direction, target, properties, eager, cascade, alias);\n          } else {\n            _this.addProperty(key, value);\n          }\n\n          break;\n      }\n    }\n\n    return _this;\n  }\n\n\n\n  _createClass(Model, [{\n    key: \"name\",\n    value: function name() {\n      return this._name;\n    }\n\n\n  }, {\n    key: \"schema\",\n    value: function schema() {\n      return this._schema;\n    }\n\n\n  }, {\n    key: \"properties\",\n    value: function properties() {\n      return this._properties;\n    }\n\n\n  }, {\n    key: \"setLabels\",\n    value: function setLabels() {\n      for (var _len = arguments.length, labels = new Array(_len), _key = 0; _key < _len; _key++) {\n        labels[_key] = arguments[_key];\n      }\n\n      this._labels = labels.sort();\n      return this;\n    }\n\n\n  }, {\n    key: \"labels\",\n    value: function labels() {\n      return this._labels;\n    }\n\n\n  }, {\n    key: \"addProperty\",\n    value: function addProperty(key, schema) {\n      var property = new _Property[\"default\"](key, schema);\n\n      this._properties.set(key, property);\n\n\n      if (property.primary()) {\n        this._primary_key = key;\n      }\n\n\n      if (property.unique() || property.primary()) {\n        this._unique.push(key);\n      }\n\n\n      if (property.indexed()) {\n        this._indexed.push(key);\n      }\n\n\n      if (property.hidden()) {\n        this._hidden.push(key);\n      }\n\n\n      if (property.readonly()) {\n        this._readonly.push(key);\n      }\n\n      return this;\n    }\n\n\n  }, {\n    key: \"relationship\",\n    value: function relationship(name, type, _relationship) {\n      var direction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _RelationshipType.DIRECTION_BOTH;\n      var target = arguments.length > 4 ? arguments[4] : undefined;\n      var schema = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n      var eager = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n      var cascade = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n      var node_alias = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 'node';\n\n      if (_relationship && direction && schema) {\n        this._relationships.set(name, new _RelationshipType[\"default\"](name, type, _relationship, direction, target, schema, eager, cascade, node_alias));\n      }\n\n      return this._relationships.get(name);\n    }\n\n\n  }, {\n    key: \"relationships\",\n    value: function relationships() {\n      return this._relationships;\n    }\n\n\n  }, {\n    key: \"eager\",\n    value: function eager() {\n      return Array.from(this._relationships).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n\n\n        return value._eager ? value : null;\n      }).filter(function (a) {\n        return !!a;\n      });\n    }\n\n\n  }, {\n    key: \"primaryKey\",\n    value: function primaryKey() {\n      return this._primary_key;\n    }\n\n\n  }, {\n    key: \"hidden\",\n    value: function hidden() {\n      return this._hidden;\n    }\n\n\n  }, {\n    key: \"indexes\",\n    value: function indexes() {\n      return this._indexed;\n    }\n\n\n  }, {\n    key: \"mergeFields\",\n    value: function mergeFields() {\n      return this._unique.concat(this._indexed);\n    }\n  }]);\n\n  return Model;\n}(_Queryable2[\"default\"]);\n\nexports[\"default\"] = Model;\n'neode/build/Query/Create.js'\n:\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _Model = _interopRequireDefault(require(\"../Model\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar Create = function () {\n  function Create(alias) {\n    var model = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    _classCallCheck(this, Create);\n\n    this._alias = alias;\n    this._model = model;\n  }\n\n  _createClass(Create, [{\n    key: \"toString\",\n    value: function toString() {\n      var alias = this._alias || '';\n      var model = '';\n\n      if (this._model instanceof _Model[\"default\"]) {\n        model = \":\".concat(this._model.labels().join(':'));\n      } else if (typeof this._model == 'string') {\n        model = \":\".concat(this._model);\n      }\n\n      return \"(\".concat(alias).concat(model ? model : '', \")\");\n    }\n  }]);\n\n  return Create;\n}();\n\nexports[\"default\"] = Create;",
        "gt": [
            "'neode/build/Services/First.js'",
            "'neode/build/Queryable.js'",
            "'neode/build/Model.js'",
            "'neode/build/Query/Create.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/components/connectionMask.js'",
            "'ruui/src/utils/helpers.js'"
        ],
        "content": "'ruui/src/utils/store/appAction.js'\n:import * as Actions from './actions';\nimport { uuid } from '../helpers';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function updateThemeConfigs(configs = {}) {\n\treturn { type: Actions.UpdateThemeConfigs, configs };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/components/connectionMask.js'\n:import React, { Component } from 'react';\nimport { Animated, Easing, NetInfo, ActivityIndicator, View, Text, StyleSheet } from 'react-native';\n\nimport Button from './button';\nimport { connect } from '../utils';\nimport * as appActions from '../utils/store/appAction';\nimport type { Style, Element } from '../typeDefinition';\n\ntype Props = {\n\tdispatch?: Function,\n\tnetInfo?: Object,\n\twrapperStyle?: Style,\n\tcontentRenderer?: Function,\n\tmessage?: Element,\n\tretryButtonCaption?: string,\n\tretryButtonIcon?: Element,\n\tretryButtonRightIcon?: Element,\n\tretryButtonWrapperStyle?: Style,\n\tretryButtonInnerStyle?: Style,\n};\n\nclass RuuiConnectionMask extends Component {\n\tprops: Props;\n\n\tstatic defaultProps = {\n\t\tmessage: <Text\n\t\t\tstyle={{\n\t\t\t\tcolor: '#ffffff',\n\t\t\t\tfontSize: 20, textAlign: 'center',\n\t\t\t}}>App need internet connection, waiting for reconnect..</Text>,\n\t\tretryButtonCaption: 'Retry',\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tenterAnimation: new Animated.Value(0),\n\t\t};\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { netInfo } = this.props;\n\n\t\tif (prevProps.netInfo.isConnected !== netInfo.isConnected) {\n\t\t\tthis.playAnimation(netInfo.isConnected ? 0 : 1);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst pointerEvents = this.props.netInfo.isConnected ? 'none' : 'auto',\n\t\t\topacity = this.state.enterAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\t}),\n\t\t\tcontainerStyle = { opacity, };\n\n\t\treturn <Animated.View\n\t\t\tpointerEvents={pointerEvents}\n\t\t\tstyle={[styles.container, this.props.wrapperStyle, containerStyle]}>\n\t\t\t{this.props.contentRenderer\n\t\t\t\t? this.props.contentRenderer(this.props.netInfo)\n\t\t\t\t: <View style={styles.innerContainer}>\n\t\t\t\t\t{this.props.message}\n\t\t\t\t\t<ActivityIndicator color=\"#ffffff\" style={styles.activityIndicator}/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttitle={this.props.retryButtonCaption}\n\t\t\t\t\t\ticon={this.props.retryButtonIcon}\n\t\t\t\t\t\trightIcon={this.props.retryButtonRightIcon}\n\t\t\t\t\t\twrapperStyle={this.props.retryButtonWrapperStyle}\n\t\t\t\t\t\tinnerStyle={this.props.retryButtonInnerStyle}\n\t\t\t\t\t\tonPress={this.retry}/>\n\t\t\t\t</View>}\n\t\t</Animated.View>;\n\t}\n\n\tretry = () => {\n\t\tNetInfo.isConnected.fetch().then((isConnected) => {\n\t\t\tthis.props.dispatch(appActions.updateNetInfo({ isConnected }));\n\t\t});\n\t};\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.state.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: true,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport default connect(({ netInfo }) => {\n\treturn {\n\t\tnetInfo,\n\t};\n})(RuuiConnectionMask);\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute', top: 0, left: 0, right: 0, bottom: 0,\n\t\tbackgroundColor: 'rgba(0, 0, 0, 0.7)',\n\t},\n\tinnerContainer: {\n\t\tposition: 'absolute', top: 0, left: 0, right: 0, bottom: 0,\n\t\tjustifyContent: 'center', alignItems: 'center',\n\t\tpaddingHorizontal: 28,\n\t},\n\tactivityIndicator: {\n\t\tmarginVertical: 20,\n\t},\n});\n\n'ruui/src/utils/helpers.js'\n:import { Dimensions } from 'react-native';\nimport type { SnappingDirection } from '../typeDefinition';\n\nexport function debounce(fn, duration) {\n\tlet timeout;\n\treturn function () {\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = null;\n\t\t\tfn.apply(this, arguments);\n\t\t}, duration);\n\t};\n}\n\nexport function uuid() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t\tconst r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\nexport function instantInterval(\n\tfunc: Function,\n\tinterval: Number,\n\ttrigger: Boolean = true,\n) {\n\tif (trigger) func.call(this);\n\treturn setInterval(func, interval);\n}\n\nexport function minGuard(value: Number, gap: Number = 0) {\n\treturn value < gap ? gap : value;\n}\n\nexport function maxGuard(value: Number, gap: Number) {\n\treturn value > gap ? gap : value;\n}\n\nconst defaultIteratee = item => item;\n\nexport function maxBy(array, iteratee = defaultIteratee) {\n\tlet result;\n\tif (array == null) return result;\n\n\tlet computed;\n\tfor (const value of array) {\n\t\tconst current = iteratee(value);\n\n\t\tif (current != null && (computed === undefined ? current === current : current > computed)) {\n\t\t\tcomputed = current;\n\t\t\tresult = value;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function clamp(value: Number, min: Number, max: Number) {\n\treturn min < max\n\t\t? (value < min ? min : value > max ? max : value)\n\t\t: (value < max ? max : value > min ? min : value);\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n\tif (x === y) {\n\t\treturn x !== 0 || y !== 0 || 1 / x === 1 / y;\n\t} else {\n\t\treturn x !== x && y !== y;\n\t}\n}\n\nexport function shallowEqual(objA, objB) {\n\tif (is(objA, objB)) return true;\n\n\tif (typeof objA !== 'object' || objA === null\n\t\t|| typeof objB !== 'object' || objB === null) {\n\t\treturn false;\n\t}\n\n\tconst keysA = Object.keys(objA);\n\tconst keysB = Object.keys(objB);\n\n\tif (keysA.length !== keysB.length) return false;\n\n\tfor (let i = 0; i < keysA.length; i += 1) {\n\t\tif (!hasOwn.call(objB, keysA[i])\n\t\t\t|| !is(objA[keysA[i]], objB[keysA[i]])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function valueAt(root = {}, path, defaultValue) {\n\tlet currentLevel = root;\n\tconst paths = path.split('.');\n\n\tfor (let i = 0; i < paths.length; i += 1) {\n\t\tif (i === paths.length - 1) {\n\t\t\treturn currentLevel[paths[i]] || defaultValue;\n\t\t} else {\n\t\t\tcurrentLevel = currentLevel[paths[i]];\n\t\t\tif (!currentLevel) return defaultValue;\n\t\t}\n\t}\n\n\treturn defaultValue;\n}\n\nfunction rawDirectionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n) {\n\tswitch (position) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tdefault:\n\t\treturn { top: 0, left: 0 };\n\t}\n}\n\n\nfunction screenGuard(position, componentSize, screenPadding = 5, moddedScreenSize = {}) {\n\tconst screenSize = { ...Dimensions.get('window'), ...moddedScreenSize },\n\t\t{ top, left, } = position;\n\tlet guardedTop = top, guardedLeft = left;\n\n\tif (top < 5) {\n\t\tguardedTop = 5;\n\t} else if (top + componentSize.height > screenSize.height - screenPadding) {\n\t\tguardedTop = screenSize.height - componentSize.height - screenPadding;\n\t}\n\n\tif (left < 5) {\n\t\tguardedLeft = 5;\n\t} else if (left + componentSize.width > screenSize.width - screenPadding) {\n\t\tguardedLeft = screenSize.width - componentSize.width - screenPadding;\n\t}\n\n\treturn { top: guardedTop, left: guardedLeft, };\n}\n\nexport function directionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n\tscreenSize,\n) {\n\treturn screenGuard(\n\t\trawDirectionSnap(top, left, width1, height1, width2, height2, position, spacing),\n\t\t{ width: width2, height: height2, }, 5, screenSize\n\t);\n}\n\nexport function arrowSnap(width, height, arrowSize, parentPosition: SnappingDirection, padding = 15) {\n\tswitch (parentPosition) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop: padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t\topacity: 0,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tleft: -arrowSize,\n\t\t\ttop: padding,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tdefault:\n\t\treturn {};\n\t}\n}\n\nexport function directionAnimatedConfigs(\n\tdirection, translateDistance, animation, finalBorderRadius = 3\n) {\n\tconst borderRadius = animation.interpolate({\n\t\t\tinputRange: [0, 0.5, 1], outputRange: [50, 15, finalBorderRadius],\n\t\t}),\n\t\topacity = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\textrapolate: 'clamp',\n\t\t});\n\n\tswitch (direction) {\n\tcase 'top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\tborderRadius: { borderRadius, },\n\t\t\ttransform: [],\n\t\t\topacity,\n\t\t};\n\tdefault:\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\t}\n}\n",
        "gt": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/connectionMask.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'ProjectFlowerbed/src/js/ECSYConfig.js'",
            "'ProjectFlowerbed/src/js/systems/locomotion/EnterVRTransitionSystem.js'",
            "'ProjectFlowerbed/src/js/systems/collisions/CollisionSystem.js'"
        ],
        "content": "'ProjectFlowerbed/src/js/ECSYConfig.js'\n:\n\nimport {\n\tAerialFaunaGroupComponent,\n\tAerialFaunaMovementComponent,\n\tWaterFaunaGroupComponent,\n\tWaterFaunaMovementComponent,\n} from './components/FaunaComponents';\nimport {\n\tCapsuleColliderComponent,\n\tCollisionAreaComponent,\n\tCollisionWorldComponent,\n\tStaticColliderComponent,\n\tStaticColliderResources,\n} from './components/ColliderComponents';\nimport {\n\tControlsPanelComponent,\n\tSettingsComponent,\n\tSettingsPanelComponent,\n} from './components/SettingsComponent';\nimport {\n\tCurvedRay,\n\tRayComponent,\n\tShortRay,\n\tStraightRay,\n} from './components/RayComponents';\nimport {\n\tEnvironmentProp,\n\tHovered,\n\tIsActive,\n\tLight,\n\tMainEnvironment,\n\tPressed,\n} from './components/GameObjectTagComponents';\nimport {\n\tInstancedMeshComponent,\n\tInstancedMeshInstanceComponent,\n} from './components/InstancedMeshComponent';\nimport {\n\tLoopingAudioComponent,\n\tLoopingAudioResources,\n\tOneshotAudioComponent,\n\tPlaylistAudioComponent,\n\tPlaylistAudioResources,\n} from './components/AudioComponents';\nimport {\n\tMorphTargetAnimationComponent,\n\tMorphTargetMeshInitialized,\n} from './components/MorphTargetAnimationComponent';\nimport {\n\tNUXMovementTriggerArea,\n\tNUXPanelComponent,\n\tNUXStateComponent,\n} from './components/NUXStateComponent';\nimport {\n\tPhotoComponent,\n\tPhotoMenuComponent,\n\tScreenshotCameraComponent,\n} from './components/ScreenshotCameraComponent';\nimport {\n\tPickedPlantComponent,\n\tPlantGrowingComponent,\n\tPlantShrinkingComponent,\n\tPlantTinyColliderComponent,\n\tPlantedComponent,\n\tPlantingStateComponent,\n\tSeedAnimationComponent,\n} from './components/PlantingComponents';\nimport {\n\tPlayerColliderComponent,\n\tPlayerStateComponent,\n} from './components/PlayerStateComponent';\nimport {\n\tSeedComponent,\n\tSeedbagComponent,\n\tSeedboxButtonComponent,\n\tSeedboxComponent,\n} from './components/SeedboxComponents';\nimport {\n\tUIPanelComponent,\n\tUIPanelMedia,\n\tUIPanelResources,\n} from './components/UIPanelComponent';\n\nimport { AerialFaunaCreationSystem } from './systems/fauna/AerialFaunaCreationSystem';\nimport { AerialFaunaMovementSystem } from './systems/fauna/AerialFaunaMovementSystem';\nimport { AmbientSoundCreationSystem } from './systems/audio/AmbientSoundCreationSystem';\nimport { AssetDatabaseComponent } from './components/AssetDatabaseComponent';\nimport { AssetLoadingSystem } from './systems/assets/AssetLoadingSystem';\nimport { AudioSystem } from './systems/audio/AudioSystem';\nimport { BootstrapSessionSystem } from './systems/core/BootstrapSessionSystem';\nimport { CameraHandContextualNUXSystem } from './systems/hands/CameraHandContextualNUXSystem';\nimport { CameraPhotoGrabTooltipSystem } from './systems/ui/progressiveTooltips/CameraPhotoGrabTooltipSystem';\nimport { CollisionAreaSystem } from './systems/collisions/CollisionAreaSystems';\nimport { CollisionWorldSystem } from './systems/collisions/CollisionSystem';\nimport { ControlsPanelSystem } from './systems/settings/ControlsPanelSystem';\nimport { DEBUG_CONSTANTS } from './Constants';\nimport { DebugClearFlagsSystem } from './systems/landing-page/DebugClearFlagsSystem';\nimport { EnterVRTransitionSystem } from './systems/locomotion/EnterVRTransitionSystem';\nimport { FaunaAnimationComponent } from './components/FaunaAnimationComponent';\nimport { FaunaAnimationSystem } from './systems/fauna/FaunaAnimationSystem';\nimport { FaunaClusterComponent } from './components/FaunaClusterComponent';\nimport { FaunaColliderComponent } from './components/FaunaColliderComponent';\nimport { FaunaCreationSystem } from './systems/fauna/FaunaCreationSystem';\nimport { FaunaMovementBoundSamplerSystem } from './devTools/FaunaMovementBoundSamplerSystem';\nimport { GameStateComponent } from './components/GameStateComponent';\nimport { GameStateUpdateSystem } from './systems/core/GameStateUpdateSystem';\nimport { GardenManagementSystem } from './systems/landing-page/GardenManagementSystem';\nimport { GazeFollowSystem } from './systems/ui/GazeFollowSystem';\nimport { GazeFollowerComponent } from './components/GazeFollowerComponent';\nimport { HandAnimationSystem } from './systems/hands/HandAnimationSystem';\nimport { HandCreationSystem } from './systems/hands/HandCreationSystem';\nimport { HandNUXSystem } from './systems/hands/HandNUXSystem';\nimport { HandPoseExtractionSystem } from './devTools/HandPoseExtractorSystem';\nimport { IndicatorRingComponent } from './components/IndicatorRingComponent';\nimport { IndicatorRingSystem } from './systems/ui/IndicatorRingSystem';\nimport { JoystickMovementSystem } from './systems/locomotion/JoystickMovementSystem';\nimport { LoadingScreenComponent } from './components/LoadingScreenComponent';\nimport { LoadingScreenSystem } from './systems/landing-page/LoadingScreenSystem';\nimport { LocalSaveDataSystem } from './systems/saveLoad/SaveDataSystem';\nimport { LocomotionVignetteSystem } from './systems/locomotion/LocomotionVignetteSystem';\nimport { MeshIdComponent } from './components/AssetReplacementComponents';\nimport { MeshInstancingSystem } from './systems/mesh/MeshInstancingSystem';\nimport { MeshPreviewObject } from './components/MeshPreviewObjectComponent';\nimport { ModelOptimizeSystem } from './systems/mesh/ModelOptimizeSystem';\nimport { MorphTargetAnimationSystem } from './systems/fauna/MorphTargetAnimationSystem';\nimport { MovableFaunaComponent } from './components/MovableFaunaComponent';\nimport { MovableFaunaSystem } from './systems/fauna/MovableFaunaSystem';\nimport { MusicSystem } from './systems/audio/MusicSystem';\nimport { NUXCreationSystem } from './systems/ui/NUXCreationSystem';\nimport { NUXSystem } from './systems/ui/NUXSystem';\nimport { Object3DComponent } from './components/Object3DComponent';\nimport { ObjectFollowSystem } from './systems/ui/ObjectFollowSystem';\nimport { ObjectFollowerComponent } from './components/ObjectFollowerComponent';\nimport { OptimizedModelComponent } from './components/OptimizedModelComponent';\nimport { PerformanceOptionsComponent } from './components/PerformanceOptionsComponent';\nimport { PerformanceTestSystem } from './systems/performance/PerformanceTestSystem';\nimport { PhotoAutoDeleteSystem } from './systems/camera/PhotoAutoDeleteSystem';\nimport { PhotoMenuCreationSystem } from './systems/camera/PhotoMenuCreationSystem';\nimport { PhotoSystem } from './systems/camera/PhotoSystem';\nimport { PlantColliderSystem } from './systems/plants/PlantColliderSystem';\nimport { PlantGrowingSystem } from './systems/plants/PlantGrowingSystem';\nimport { PlantPickingSystem } from './systems/plants/PlantPickingSystem';\nimport { PlantShrinkingSystem } from './systems/plants/PlantShrinkingSystem';\nimport { PlantingArrowSystem } from './systems/plants/PlantingArrowSystem';\nimport { PlantingSystem } from './systems/plants/PlantingSystem';\nimport { PlayerPhysicsSystem } from './systems/core/PlayerPhysicsSystem';\nimport { PlaylistAudioSystem } from './systems/audio/PlaylistAudioSystem';\nimport { PropsCalibrationSystem } from './devTools/PropsCalibrationSystem';\nimport { RayDrawingSystem } from './systems/raycasting/RayDrawingSystem';\nimport { RaycastSystem } from './systems/raycasting/RaycastSystem';\nimport { RenderingSystem } from './systems/core/RenderingSystem';\nimport { ResetNUXSystem } from './systems/ui/ResetNUXSystem';\nimport { SavableObject } from './components/SaveDataComponents';\nimport { SaveControllerSystem } from './systems/saveLoad/SaveControllerSystem';\nimport { SceneCreationSystem } from './systems/core/SceneCreationSystem';\nimport { SceneLightingComponent } from './components/SceneLightingComponent';\nimport { ScreenshotCameraCreationSystem } from './systems/camera/ScreenshotCameraCreationSystem';\nimport { ScreenshotCameraSystem } from './systems/camera/ScreenshotCameraSystem';\nimport { SeedAnimationSystem } from './systems/plants/SeedAnimationSystem';\nimport { SeedboxChangePageTooltipSystem } from './systems/ui/progressiveTooltips/SeedboxChangePageTooltipSystem';\nimport { SeedboxCreationSystem } from './systems/seedbox/SeedboxCreationSystem';\nimport { SeedboxFocusDetectionSystem } from './systems/seedbox/SeedboxFocusDetectionSystem';\nimport { SeedboxHandContextualNUXSystem } from './systems/hands/SeedboxHandContextualNUXSystem';\nimport { SeedboxSystem } from './systems/seedbox/SeedboxSystem';\nimport { SelectionWheelComponent } from './components/SelectionWheelComponent';\nimport { SelectionWheelCreationSystem } from './systems/selectionWheels/SelectionWheelCreationSystem';\nimport { SelectionWheelSystem } from './systems/selectionWheels/SelectionWheelSystem';\nimport { SessionComponent } from './components/SessionComponent';\nimport { SettingsCreationSystem } from './systems/settings/SettingsCreationSystem';\nimport { SettingsSystem } from './systems/settings/SettingsSystem';\nimport { SkeletonAnimationComponent } from './components/SkeletonAnimationComponent';\nimport { SnapTurnSystem } from './systems/locomotion/SnapTurnSystem';\nimport { StationaryFaunaComponent } from './components/StationaryFaunaComponent';\nimport { StationaryFaunaSystem } from './systems/fauna/StationaryFaunaSystem';\nimport { THREEGlobalComponent } from './components/THREEGlobalComponent';\nimport { TeleportationSystem } from './systems/locomotion/TeleportationSystem';\nimport { UIPanelInteractionSystem } from './systems/ui/UIPanelInteractionSystem';\nimport { UIPanelMediaSystem } from './systems/ui/UIPanelMediaSystem';\nimport { UIPanelPreviewSystem } from './systems/ui/UIPanelPreviewSystem';\nimport { UIPanelResourcesSystem } from './systems/ui/UIPanelResourcesSystem';\nimport { UserIdentityComponent } from './components/UserIdentityComponent';\nimport { VrControllerComponent } from './components/VrControllerComponent';\nimport { VrInputSystem } from './systems/core/VrInputSystem';\nimport { WaterFaunaCreationSystem } from './systems/fauna/WaterFaunaCreationSystem';\nimport { WaterFaunaMovementSystem } from './systems/fauna/WaterFaunaMovementSystem';\nimport { WateringSystem } from './systems/plants/WateringSystem';\nimport { World } from 'ecsy';\n\nconst ENABLE_HAND_POSER = false;\n\nexport const setupECSY = () => {\n\tlet world = new World();\n\n\tregisterTagComponents(world);\n\n\tregisterComponents(world);\n\n\tregisterSystems(world);\n\n\treturn world;\n};\n\n\nconst registerTagComponents = (world) => {\n\tworld.registerComponent(Light);\n\tworld.registerComponent(Hovered);\n\tworld.registerComponent(Pressed);\n\tworld.registerComponent(IsActive);\n\tworld.registerComponent(StraightRay);\n\tworld.registerComponent(ShortRay);\n\tworld.registerComponent(CurvedRay);\n\tworld.registerComponent(MainEnvironment);\n\tworld.registerComponent(EnvironmentProp);\n\tworld.registerComponent(MorphTargetMeshInitialized);\n};\n\n\nconst registerComponents = (world) => {\n\tworld.registerComponent(VrControllerComponent);\n\tworld.registerComponent(Object3DComponent);\n\tworld.registerComponent(GameStateComponent);\n\tworld.registerComponent(PlayerStateComponent);\n\tworld.registerComponent(OptimizedModelComponent);\n\tworld.registerComponent(PerformanceOptionsComponent);\n\tworld.registerComponent(THREEGlobalComponent);\n\tworld.registerComponent(SeedComponent);\n\tworld.registerComponent(CollisionWorldComponent);\n\tworld.registerComponent(StaticColliderComponent);\n\tworld.registerComponent(StaticColliderResources);\n\tworld.registerComponent(CapsuleColliderComponent);\n\tworld.registerComponent(PlayerColliderComponent);\n\tworld.registerComponent(SeedboxComponent);\n\tworld.registerComponent(SeedboxButtonComponent);\n\tworld.registerComponent(GazeFollowerComponent);\n\tworld.registerComponent(ObjectFollowerComponent);\n\tworld.registerComponent(UIPanelComponent);\n\tworld.registerComponent(UIPanelResources);\n\tworld.registerComponent(UIPanelMedia);\n\tworld.registerComponent(NUXStateComponent);\n\tworld.registerComponent(NUXPanelComponent);\n\tworld.registerComponent(RayComponent);\n\tworld.registerComponent(IndicatorRingComponent);\n\tworld.registerComponent(PlantedComponent);\n\tworld.registerComponent(PickedPlantComponent);\n\tworld.registerComponent(SavableObject);\n\tworld.registerComponent(CollisionAreaComponent);\n\tworld.registerComponent(NUXMovementTriggerArea);\n\tworld.registerComponent(ScreenshotCameraComponent);\n\tworld.registerComponent(PhotoComponent);\n\tworld.registerComponent(PhotoMenuComponent);\n\tworld.registerComponent(AssetDatabaseComponent);\n\tworld.registerComponent(MeshIdComponent);\n\tworld.registerComponent(SelectionWheelComponent);\n\tworld.registerComponent(OneshotAudioComponent);\n\tworld.registerComponent(PlantGrowingComponent);\n\tworld.registerComponent(PlantShrinkingComponent);\n\tworld.registerComponent(PlantingStateComponent);\n\tworld.registerComponent(LoopingAudioComponent);\n\tworld.registerComponent(LoopingAudioResources);\n\tworld.registerComponent(PlaylistAudioComponent);\n\tworld.registerComponent(PlaylistAudioResources);\n\tworld.registerComponent(PlantTinyColliderComponent);\n\tworld.registerComponent(SeedAnimationComponent);\n\tworld.registerComponent(SeedbagComponent);\n\tworld.registerComponent(InstancedMeshComponent);\n\tworld.registerComponent(InstancedMeshInstanceComponent);\n\tworld.registerComponent(FaunaClusterComponent);\n\tworld.registerComponent(FaunaColliderComponent);\n\tworld.registerComponent(FaunaAnimationComponent);\n\tworld.registerComponent(MorphTargetAnimationComponent);\n\tworld.registerComponent(SkeletonAnimationComponent);\n\tworld.registerComponent(MovableFaunaComponent);\n\tworld.registerComponent(StationaryFaunaComponent);\n\tworld.registerComponent(MeshPreviewObject);\n\tworld.registerComponent(SceneLightingComponent, false);\n\tworld.registerComponent(LoadingScreenComponent);\n\tworld.registerComponent(UserIdentityComponent);\n\tworld.registerComponent(WaterFaunaMovementComponent);\n\tworld.registerComponent(WaterFaunaGroupComponent);\n\tworld.registerComponent(SettingsPanelComponent);\n\tworld.registerComponent(ControlsPanelComponent);\n\tworld.registerComponent(SettingsComponent);\n\tworld.registerComponent(AerialFaunaMovementComponent);\n\tworld.registerComponent(AerialFaunaGroupComponent);\n\tworld.registerComponent(SessionComponent);\n};\n\n\nconst registerSystems = (world) => {\n\tworld.registerSystem(GardenManagementSystem);\n\n\n\tworld.registerSystem(AssetLoadingSystem, { priority: -10 });\n\n\n\tworld.registerSystem(LoadingScreenSystem, { priority: -9 });\n\n\n\tworld.registerSystem(DebugClearFlagsSystem);\n\tworld.registerSystem(ResetNUXSystem);\n\n\n\tworld.registerSystem(RenderingSystem, { priority: 99 });\n};\n\n\nexport const registerSystemsAfterLoad = (world) => {\n\n\n\tworld.registerSystem(SceneCreationSystem, { priority: -2 });\n\n\n\n\tworld.registerSystem(ModelOptimizeSystem, { priority: -1 });\n\tworld.registerSystem(BootstrapSessionSystem);\n\n\n\tworld.registerSystem(UIPanelResourcesSystem);\n\tworld.registerSystem(UIPanelInteractionSystem);\n\tworld.registerSystem(UIPanelMediaSystem);\n\n\tworld.registerSystem(HandCreationSystem);\n\tworld.registerSystem(EnterVRTransitionSystem);\n\tworld.registerSystem(ScreenshotCameraCreationSystem);\n\tworld.registerSystem(PhotoMenuCreationSystem);\n\tworld.registerSystem(SelectionWheelCreationSystem);\n\tworld.registerSystem(SeedboxCreationSystem);\n\tworld.registerSystem(CollisionWorldSystem);\n\tworld.registerSystem(CollisionAreaSystem);\n\tworld.registerSystem(VrInputSystem);\n\tworld.registerSystem(HandAnimationSystem);\n\n\tworld.registerSystem(PlayerPhysicsSystem);\n\tworld.registerSystem(WateringSystem);\n\n\n\n\n\tworld.registerSystem(RaycastSystem);\n\n\n\n\tworld.registerSystem(GameStateUpdateSystem);\n\tworld.registerSystem(SelectionWheelSystem);\n\tworld.registerSystem(IndicatorRingSystem);\n\tworld.registerSystem(SnapTurnSystem);\n\tworld.registerSystem(TeleportationSystem);\n\tworld.registerSystem(HandNUXSystem);\n\tworld.registerSystem(SeedboxHandContextualNUXSystem);\n\tworld.registerSystem(CameraHandContextualNUXSystem);\n\tworld.registerSystem(JoystickMovementSystem);\n\tif (ENABLE_HAND_POSER) {\n\n\t\tworld.registerSystem(HandPoseExtractionSystem);\n\t}\n\n\tworld.registerSystem(GazeFollowSystem);\n\tworld.registerSystem(ObjectFollowSystem);\n\tworld.registerSystem(NUXCreationSystem);\n\tworld.registerSystem(SettingsCreationSystem);\n\n\tworld.registerSystem(SettingsSystem);\n\tworld.registerSystem(ControlsPanelSystem);\n\n\n\n\tworld.registerSystem(ScreenshotCameraSystem);\n\tworld.registerSystem(PhotoSystem);\n\tworld.registerSystem(PhotoAutoDeleteSystem);\n\tworld.registerSystem(PlantPickingSystem);\n\tworld.registerSystem(SeedboxFocusDetectionSystem);\n\tworld.registerSystem(SeedboxSystem);\n\tworld.registerSystem(PlantingSystem);\n\tworld.registerSystem(PlantingArrowSystem);\n\tworld.registerSystem(SeedAnimationSystem);\n\tworld.registerSystem(PlantGrowingSystem);\n\tworld.registerSystem(PlantShrinkingSystem);\n\tworld.registerSystem(PlantColliderSystem);\n\tworld.registerSystem(SaveControllerSystem);\n\tworld.registerSystem(RayDrawingSystem);\n\tworld.registerSystem(LocalSaveDataSystem);\n\tworld.registerSystem(WaterFaunaCreationSystem);\n\tworld.registerSystem(WaterFaunaMovementSystem);\n\tworld.registerSystem(AerialFaunaCreationSystem);\n\tworld.registerSystem(AerialFaunaMovementSystem);\n\tworld.registerSystem(FaunaAnimationSystem);\n\tworld.registerSystem(FaunaCreationSystem);\n\tworld.registerSystem(MovableFaunaSystem);\n\tworld.registerSystem(FaunaMovementBoundSamplerSystem);\n\tworld.registerSystem(StationaryFaunaSystem);\n\tworld.registerSystem(MorphTargetAnimationSystem);\n\tworld.registerSystem(PerformanceTestSystem);\n\tworld.registerSystem(LocomotionVignetteSystem);\n\tif (ENABLE_HAND_POSER) {\n\t\tworld.registerSystem(PropsCalibrationSystem);\n\t}\n\n\tworld.registerSystem(MeshInstancingSystem);\n};\n\n\nexport const registerSystemsAfterReady = (world) => {\n\n\n\n\tworld.registerSystem(AudioSystem);\n\n\tworld.registerSystem(AmbientSoundCreationSystem);\n\tworld.registerSystem(MusicSystem);\n\tworld.registerSystem(PlaylistAudioSystem);\n\n\n\n\tworld.registerSystem(NUXSystem);\n\n\tworld.registerSystem(SeedboxChangePageTooltipSystem);\n\tworld.registerSystem(CameraPhotoGrabTooltipSystem);\n\n\tif (DEBUG_CONSTANTS.ENABLE_UI_PREVIEW_SYSTEM) {\n\t\tworld.registerSystem(UIPanelPreviewSystem);\n\t}\n};\n\n'ProjectFlowerbed/src/js/systems/locomotion/EnterVRTransitionSystem.js'\n:\n\nimport * as THREE from 'three';\n\nimport { PlayerStateComponent } from 'src/js/components/PlayerStateComponent';\nimport { SessionComponent } from '../../components/SessionComponent';\nimport { System } from 'ecsy';\nimport { THREEGlobalComponent } from 'src/js/components/THREEGlobalComponent';\nimport { getOnlyEntity } from 'src/js/utils/entityUtils';\nimport { registerSystemsAfterReady } from '../../ECSYConfig';\n\nexport class EnterVRTransitionSystem extends System {\n\tinit() {\n\t\tthis.mask = null;\n\t\tthis.maskTimer = 0;\n\n\t\tthis.hasRegisteredSystems = false;\n\t}\n\n\texecute(delta, _time) {\n\t\tif (!this.mask) {\n\t\t\tthis._createMask();\n\t\t}\n\n\t\tconst sessionState = getOnlyEntity(this.queries.session).getComponent(\n\t\t\tSessionComponent,\n\t\t);\n\t\tif (sessionState.isExperienceOpened) {\n\t\t\tthis.maskTimer += delta;\n\t\t\tthis.mask.visible = true;\n\t\t}\n\t\tif (this.maskTimer > 2) {\n\t\t\tthis.mask.material.opacity = 0;\n\t\t\tthis.mask.visible = false;\n\t\t} else if (this.maskTimer > 1) {\n\t\t\tthis.mask.material.opacity = 2 - this.maskTimer;\n\n\t\t\tif (!this.hasRegisteredSystems) {\n\t\t\t\tregisterSystemsAfterReady(this.world);\n\t\t\t\tthis.hasRegisteredSystems = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t_createMask() {\n\t\tthis.queries.player.results.forEach((entity) => {\n\t\t\tconst playerHead = entity.getComponent(PlayerStateComponent).playerHead;\n\t\t\tthis.mask = new THREE.Mesh(\n\t\t\t\tnew THREE.SphereGeometry(0.4, 32, 16),\n\t\t\t\tnew THREE.MeshBasicMaterial({\n\t\t\t\t\tcolor: 0x000000,\n\t\t\t\t\tside: THREE.BackSide,\n\t\t\t\t\ttransparent: true,\n\t\t\t\t\tdepthWrite: false,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis.mask.renderOrder = 1000;\n\t\t\tthis.mask.material.depthTest = false;\n\t\t\tthis.mask.material.depthWrite = false;\n\t\t\tthis.mask.frustumCulled = false;\n\n\t\t\tplayerHead.add(this.mask);\n\t\t});\n\t}\n}\n\nEnterVRTransitionSystem.queries = {\n\tgameManager: { components: [THREEGlobalComponent] },\n\tsession: { components: [SessionComponent] },\n\tplayer: { components: [PlayerStateComponent] },\n};\n\n'ProjectFlowerbed/src/js/systems/collisions/CollisionSystem.js'\n:\n\nimport * as THREE from 'three';\n\nimport {\n\tCollisionWorldComponent,\n\tStaticColliderComponent,\n\tStaticColliderResources,\n} from '../../components/ColliderComponents';\nimport {\n\tEnvironmentProp,\n\tMainEnvironment,\n} from '../../components/GameObjectTagComponents';\nimport { deleteEntity, getOnlyEntity } from '../../utils/entityUtils';\nimport {\n\tsetMaterialOnAllMeshes,\n\tupdateMatrixRecursively,\n} from '../../utils/object3dUtils';\n\nimport { AssetDatabaseComponent } from '../../components/AssetDatabaseComponent';\nimport { COLLISION_LAYERS } from '../../Constants';\nimport { CollisionWorld } from '../../lib/collisions/CollisionWorld';\nimport { GameStateComponent } from '../../components/GameStateComponent';\nimport { MeshIdComponent } from '../../components/AssetReplacementComponents';\nimport { Object3DComponent } from '../../components/Object3DComponent';\nimport { OptimizedModelComponent } from '../../components/OptimizedModelComponent';\nimport { System } from 'ecsy';\nimport { THREEGlobalComponent } from '../../components/THREEGlobalComponent';\nimport { copyTransforms } from '../../utils/transformUtils';\nimport { teleportableColliderMaterial } from '../../debug/debugMaterials';\n\nexport class CollisionWorldSystem extends System {\n\texecute() {\n\t\tlet gameManager = getOnlyEntity(this.queries.gameManager);\n\t\tlet scene = gameManager.getComponent(THREEGlobalComponent).scene;\n\n\t\tthis.queries.environmentObject.removed.forEach(() => {\n\t\t\tthis.queries.world.results.forEach((collisionWorld) => {\n\t\t\t\tdeleteEntity(scene, collisionWorld);\n\t\t\t});\n\t\t});\n\n\t\tthis.queries.environmentObject.added.forEach((mainEnvironmentEntity) => {\n\t\t\tlet mainEnvironment;\n\t\t\tif (mainEnvironmentEntity.hasComponent(Object3DComponent)) {\n\t\t\t\tmainEnvironment = mainEnvironmentEntity.getComponent(Object3DComponent)\n\t\t\t\t\t.value;\n\t\t\t} else {\n\n\t\t\t\tmainEnvironment = mainEnvironmentEntity.getComponent(\n\t\t\t\t\tOptimizedModelComponent,\n\t\t\t\t).model;\n\t\t\t}\n\n\t\t\tupdateMatrixRecursively(mainEnvironment);\n\n\t\t\tthis.createCollisionWorld(mainEnvironment);\n\t\t});\n\n\t\tthis.queries.colliders.added.forEach((entity) => {\n\t\t\tconst collider = entity.getComponent(StaticColliderComponent);\n\n\t\t\tscene.attach(collider.mesh);\n\n\t\t\tthis.collisionWorld.addStaticObject(collider.mesh, collider.layers);\n\n\n\n\t\t\tentity.addComponent(StaticColliderResources, {\n\t\t\t\tmesh: collider.mesh,\n\t\t\t});\n\n\n\t\t\tcollider.mesh.colliderEntity = entity;\n\t\t});\n\n\t\tthis.queries.colliders.removed.forEach((entity) => {\n\t\t\tconst mesh = entity.getComponent(StaticColliderResources, true)?.mesh;\n\t\t\tif (mesh) {\n\t\t\t\tthis.collisionWorld.removeStaticObject(mesh);\n\n\t\t\t\tscene.remove(mesh);\n\n\t\t\t\tentity.removeComponent(StaticColliderResources);\n\n\t\t\t\tmesh.colliderEntity = undefined;\n\t\t\t}\n\t\t});\n\n\t\tthis.queries.colliders.results.forEach((entity) => {\n\t\t\tconst staticCollider = entity.getMutableComponent(\n\t\t\t\tStaticColliderComponent,\n\t\t\t);\n\t\t\tif (staticCollider.needsUpdate) {\n\t\t\t\tstaticCollider.needsUpdate = false;\n\n\n\t\t\t\tconst mesh = entity.getComponent(StaticColliderResources).mesh;\n\t\t\t\tthis.collisionWorld.removeStaticObject(mesh);\n\n\n\t\t\t\tthis.collisionWorld.addStaticObject(\n\t\t\t\t\tstaticCollider.mesh,\n\t\t\t\t\tstaticCollider.layers,\n\t\t\t\t);\n\n\n\t\t\t\tif (mesh !== staticCollider.mesh) {\n\t\t\t\t\tscene.remove(mesh);\n\t\t\t\t\tentity.getMutableComponent(StaticColliderResources).mesh =\n\t\t\t\t\t\tstaticCollider.mesh;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tcreateCollisionWorld(mainEnvironment) {\n\t\tlet assetDatabaseComponent = getOnlyEntity(\n\t\t\tthis.queries.assetDatabase,\n\t\t).getComponent(AssetDatabaseComponent);\n\n\t\tlet gameStateComponent = getOnlyEntity(\n\t\t\tthis.queries.gameManager,\n\t\t).getComponent(GameStateComponent);\n\n\t\tlet environmentColliders = assetDatabaseComponent.meshes.getCollider(\n\t\t\tgameStateComponent.currentBaseMapId,\n\t\t);\n\n\n\n\t\tcopyTransforms(mainEnvironment, environmentColliders);\n\n\t\tconst collisionWorldBox = new THREE.Box3();\n\t\tcollisionWorldBox.setFromObject(environmentColliders);\n\n\t\tlet collisionWorldEntity = this.world.createEntity();\n\t\tthis.collisionWorld = new CollisionWorld(collisionWorldBox);\n\t\tcollisionWorldEntity.addComponent(CollisionWorldComponent, {\n\t\t\tworld: this.collisionWorld,\n\t\t});\n\n\t\tlet collisionMeshes = [];\n\n\n\t\tenvironmentColliders.traverse((c) => {\n\t\t\tif (c.userData?.collider) {\n\t\t\t\tcollisionMeshes.push(c);\n\t\t\t}\n\t\t});\n\n\n\n\n\n\t\tthis.queries.environmentProps.results.forEach((entity) => {\n\t\t\tconst meshId = entity.getComponent(MeshIdComponent).id;\n\t\t\tconst collider = assetDatabaseComponent.meshes.getCollider(meshId);\n\t\t\tconst object = entity.getComponent(Object3DComponent).value;\n\t\t\tcopyTransforms(object, collider);\n\t\t\tif (collider.isMesh) {\n\t\t\t\tcollisionMeshes.push(collider);\n\t\t\t} else {\n\n\n\n\t\t\t\tcollisionMeshes.push(...collider.children);\n\t\t\t}\n\t\t});\n\n\t\tfor (let mesh of collisionMeshes) {\n\t\t\tconst colliderObject = this.world.createEntity();\n\t\t\tconst objectLayers = [COLLISION_LAYERS.OBSTACLE];\n\n\n\t\t\tif (mesh.userData?.teleport) {\n\t\t\t\tobjectLayers.push(COLLISION_LAYERS.TELEPORT_SURFACE);\n\t\t\t\tsetMaterialOnAllMeshes(mesh, teleportableColliderMaterial);\n\t\t\t}\n\n\t\t\tif (mesh.userData?.plantable) {\n\t\t\t\tobjectLayers.push(COLLISION_LAYERS.PLANTABLE_SURFACE);\n\t\t\t}\n\n\t\t\tif (mesh.userData?.boundary && !mesh.userData?.outer_boundary) {\n\t\t\t\tobjectLayers.push(COLLISION_LAYERS.BOUNDARY);\n\t\t\t}\n\n\t\t\tif (mesh.userData?.outer_boundary) {\n\t\t\t\tobjectLayers.push(COLLISION_LAYERS.INVISIBLE);\n\t\t\t}\n\n\t\t\tcolliderObject.addComponent(StaticColliderComponent, {\n\t\t\t\tmesh: mesh,\n\t\t\t\tlayers: objectLayers,\n\t\t\t});\n\t\t}\n\t}\n}\n\nCollisionWorldSystem.queries = {\n\tgameManager: {\n\t\tcomponents: [THREEGlobalComponent, GameStateComponent],\n\t},\n\tenvironmentObject: {\n\t\tcomponents: [MainEnvironment],\n\t\tlisten: { added: true, removed: true },\n\t},\n\tenvironmentProps: {\n\t\tcomponents: [EnvironmentProp, Object3DComponent, MeshIdComponent],\n\t},\n\tassetDatabase: {\n\t\tcomponents: [AssetDatabaseComponent],\n\t},\n\tworld: {\n\t\tcomponents: [CollisionWorldComponent],\n\t},\n\tcolliders: {\n\t\tcomponents: [StaticColliderComponent],\n\t\tlisten: { added: true, removed: true },\n\t},\n};\n",
        "gt": [
            "'ProjectFlowerbed/src/js/systems/collisions/CollisionSystem.js'",
            "'ProjectFlowerbed/src/js/ECSYConfig.js'",
            "'ProjectFlowerbed/src/js/systems/locomotion/EnterVRTransitionSystem.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/components/ruuiProvider.js'",
            "'ruui/src/utils/ruuiStore.js'",
            "'ruui/src/components/index.js'"
        ],
        "content": "'ruui/src/utils/helpers.js'\n:import { Dimensions } from 'react-native';\nimport type { SnappingDirection } from '../typeDefinition';\n\nexport function debounce(fn, duration) {\n\tlet timeout;\n\treturn function () {\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = null;\n\t\t\tfn.apply(this, arguments);\n\t\t}, duration);\n\t};\n}\n\nexport function uuid() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t\tconst r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\nexport function instantInterval(\n\tfunc: Function,\n\tinterval: Number,\n\ttrigger: Boolean = true,\n) {\n\tif (trigger) func.call(this);\n\treturn setInterval(func, interval);\n}\n\nexport function minGuard(value: Number, gap: Number = 0) {\n\treturn value < gap ? gap : value;\n}\n\nexport function maxGuard(value: Number, gap: Number) {\n\treturn value > gap ? gap : value;\n}\n\nconst defaultIteratee = item => item;\n\nexport function maxBy(array, iteratee = defaultIteratee) {\n\tlet result;\n\tif (array == null) return result;\n\n\tlet computed;\n\tfor (const value of array) {\n\t\tconst current = iteratee(value);\n\n\t\tif (current != null && (computed === undefined ? current === current : current > computed)) {\n\t\t\tcomputed = current;\n\t\t\tresult = value;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function clamp(value: Number, min: Number, max: Number) {\n\treturn min < max\n\t\t? (value < min ? min : value > max ? max : value)\n\t\t: (value < max ? max : value > min ? min : value);\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n\tif (x === y) {\n\t\treturn x !== 0 || y !== 0 || 1 / x === 1 / y;\n\t} else {\n\t\treturn x !== x && y !== y;\n\t}\n}\n\nexport function shallowEqual(objA, objB) {\n\tif (is(objA, objB)) return true;\n\n\tif (typeof objA !== 'object' || objA === null\n\t\t|| typeof objB !== 'object' || objB === null) {\n\t\treturn false;\n\t}\n\n\tconst keysA = Object.keys(objA);\n\tconst keysB = Object.keys(objB);\n\n\tif (keysA.length !== keysB.length) return false;\n\n\tfor (let i = 0; i < keysA.length; i += 1) {\n\t\tif (!hasOwn.call(objB, keysA[i])\n\t\t\t|| !is(objA[keysA[i]], objB[keysA[i]])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function valueAt(root = {}, path, defaultValue) {\n\tlet currentLevel = root;\n\tconst paths = path.split('.');\n\n\tfor (let i = 0; i < paths.length; i += 1) {\n\t\tif (i === paths.length - 1) {\n\t\t\treturn currentLevel[paths[i]] || defaultValue;\n\t\t} else {\n\t\t\tcurrentLevel = currentLevel[paths[i]];\n\t\t\tif (!currentLevel) return defaultValue;\n\t\t}\n\t}\n\n\treturn defaultValue;\n}\n\nfunction rawDirectionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n) {\n\tswitch (position) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tdefault:\n\t\treturn { top: 0, left: 0 };\n\t}\n}\n\n\nfunction screenGuard(position, componentSize, screenPadding = 5, moddedScreenSize = {}) {\n\tconst screenSize = { ...Dimensions.get('window'), ...moddedScreenSize },\n\t\t{ top, left, } = position;\n\tlet guardedTop = top, guardedLeft = left;\n\n\tif (top < 5) {\n\t\tguardedTop = 5;\n\t} else if (top + componentSize.height > screenSize.height - screenPadding) {\n\t\tguardedTop = screenSize.height - componentSize.height - screenPadding;\n\t}\n\n\tif (left < 5) {\n\t\tguardedLeft = 5;\n\t} else if (left + componentSize.width > screenSize.width - screenPadding) {\n\t\tguardedLeft = screenSize.width - componentSize.width - screenPadding;\n\t}\n\n\treturn { top: guardedTop, left: guardedLeft, };\n}\n\nexport function directionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n\tscreenSize,\n) {\n\treturn screenGuard(\n\t\trawDirectionSnap(top, left, width1, height1, width2, height2, position, spacing),\n\t\t{ width: width2, height: height2, }, 5, screenSize\n\t);\n}\n\nexport function arrowSnap(width, height, arrowSize, parentPosition: SnappingDirection, padding = 15) {\n\tswitch (parentPosition) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop: padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t\topacity: 0,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tleft: -arrowSize,\n\t\t\ttop: padding,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tdefault:\n\t\treturn {};\n\t}\n}\n\nexport function directionAnimatedConfigs(\n\tdirection, translateDistance, animation, finalBorderRadius = 3\n) {\n\tconst borderRadius = animation.interpolate({\n\t\t\tinputRange: [0, 0.5, 1], outputRange: [50, 15, finalBorderRadius],\n\t\t}),\n\t\topacity = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\textrapolate: 'clamp',\n\t\t});\n\n\tswitch (direction) {\n\tcase 'top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\tborderRadius: { borderRadius, },\n\t\t\ttransform: [],\n\t\t\topacity,\n\t\t};\n\tdefault:\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\t}\n}\n\n'ruui/src/components/ruuiProvider.js'\n:import React, { Component } from 'react';\nimport { NetInfo, Dimensions } from 'react-native';\nimport PropTypes from 'prop-types';\nimport { merge } from 'lodash';\n\nimport coreConfigs from '../configs/core';\nimport { isServer } from '../utils';\nimport { createStore } from '../utils/ruuiStore';\nimport appReducer from '../store/appReducer';\nimport * as appActions from '../store/action/app';\nimport { Element, RuuiConfigs } from '../typeDefinition';\n\ntype Props = {\n\tchildren?: Element,\n\tstore?: Object,\n\tconfigs?: RuuiConfigs,\n\tsubscribeNetInfo?: Boolean,\n\tsubscribeDimension?: Boolean,\n};\n\nconst navigator = global.navigator || {},\n\tconnectionModule = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n\nclass RuuiProvider extends Component {\n\tstatic props: Props;\n\n\tstatic defaultProps = {\n\t\tconfigs: {},\n\t\tsubscribeNetInfo: false,\n\t\tsubscribeDimension: true,\n\t\tstore: createStore(appReducer),\n\t};\n\n\tstatic childContextTypes = {\n\t\truuiStore: PropTypes.object,\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.store = props.store;\n\t\tthis.configs = merge({}, coreConfigs, props.configs);\n\t}\n\n\tgetChildContext() {\n\t\treturn {\n\t\t\truuiStore: this.store,\n\t\t\truuiConfigs: this.configs,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { store, subscribeDimension, subscribeNetInfo } = this.props;\n\n\t\tif (isServer || !store) return;\n\t\tif (subscribeDimension) this.subscribeAndUpdateDimensions();\n\t\tif (subscribeNetInfo && connectionModule) this.subscribeAndUpdateNetworkInfo();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tconst { store, subscribeDimension, subscribeNetInfo } = this.props;\n\n\t\tif (isServer || !store) return;\n\n\t\tif (subscribeDimension) {\n\t\t\tDimensions.removeEventListener('change', this.handleDimensionChange);\n\t\t}\n\n\t\tif (subscribeNetInfo && connectionModule) {\n\t\t\tNetInfo.removeEventListener('connectionChange', this.handleConnectionTypeChange);\n\t\t\tNetInfo.isConnected.removeEventListener('connectionChange', this.handleIsConnectedChange);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { children } = this.props;\n\t\treturn children;\n\t}\n\n\tsubscribeAndUpdateDimensions = () => {\n\t\tthis.handleDimensionChange({\n\t\t\twindow: Dimensions.get('window'),\n\t\t\tscreen: Dimensions.get('screen'),\n\t\t});\n\n\t\tDimensions.addEventListener('change', this.handleDimensionChange);\n\t};\n\n\thandleDimensionChange = (data) => {\n\t\tthis.store.dispatch(appActions.updateDimensionsInfo(data));\n\t};\n\n\tsubscribeAndUpdateNetworkInfo = () => {\n\t\tNetInfo.getConnectionInfo && NetInfo.getConnectionInfo()\n\t\t\t.then(connectionInfo => this.handleConnectionTypeChange(connectionInfo));\n\n\t\tNetInfo.isConnected.getConnectionInfo && NetInfo.isConnected.getConnectionInfo()\n\t\t\t.then(isConnected => this.handleIsConnectedChange(isConnected));\n\n\t\tNetInfo.addEventListener('connectionChange', this.handleConnectionTypeChange);\n\t\tNetInfo.isConnected.addEventListener('connectionChange', this.handleIsConnectedChange);\n\t};\n\n\thandleConnectionTypeChange = (connectionType) => {\n\t\tthis.store.dispatch(appActions.updateNetInfo({ connectionType, }));\n\t};\n\n\thandleIsConnectedChange = (isConnected) => {\n\t\tthis.store.dispatch(appActions.updateNetInfo({ isConnected, }));\n\t};\n}\n\nexport default RuuiProvider;\n\n'ruui/src/utils/ruuiStore.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { shallowEqual } from './helpers';\n\nexport function createStore(reducer) {\n\tlet state, listeners = [];\n\n\tconst getState = () => state;\n\tconst getListeners = () => listeners;\n\n\tconst dispatch = (action) => {\n\t\tstate = reducer(state, action);\n\t\tlisteners.forEach(listener => listener(state));\n\t};\n\n\tconst subscribe = (listener) => {\n\t\tlisteners.push(listener);\n\n\t\treturn () => {\n\t\t\tlisteners = listeners.filter(l => l !== listener);\n\t\t};\n\t};\n\n\tdispatch({});\n\n\treturn { getState, dispatch, subscribe, getListeners };\n}\n\nexport function combineReducers(reducers) {\n\tconst reducerKeys = Object.keys(reducers);\n\n\treturn (state = {}, action) => {\n\t\tlet hasChanged = false;\n\t\tconst nextState = {};\n\n\t\tfor (let i = 0; i < reducerKeys.length; i += 1) {\n\t\t\tconst key = reducerKeys[i],\n\t\t\t\treducer = reducers[key],\n\t\t\t\tpreviousStateForKey = state[key],\n\t\t\t\tnextStateForKey = reducer(previousStateForKey, action);\n\n\t\t\tnextState[key] = nextStateForKey;\n\t\t\thasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n\t\t}\n\n\t\treturn hasChanged ? nextState : state;\n\t};\n}\n\nexport function connect(stateToPropsFactory) {\n\treturn function (BaseComponent) {\n\t\tconst currentDisplayName = BaseComponent.displayName || BaseComponent.name,\n\t\t\tenhancedDisplayName = `RuuiConnect(${currentDisplayName})`;\n\n\t\treturn class RuuiConnected extends Component {\n\t\t\tstatic displayName = enhancedDisplayName;\n\n\t\t\tstatic contextTypes = {\n\t\t\t\truuiStore: PropTypes.object,\n\t\t\t};\n\n\t\t\tconstructor(props, context) {\n\t\t\t\tsuper(props);\n\t\t\t\tthis.store = context.ruuiStore;\n\t\t\t\tthis.unSubscribe = this.store.subscribe(this.syncProps);\n\n\t\t\t\tthis.state = {\n\t\t\t\t\tgeneratedProps: stateToPropsFactory(this.store.getState()),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tcomponentWillUnmount() {\n\t\t\t\tthis.unSubscribe();\n\t\t\t}\n\n\t\t\trender() {\n\t\t\t\tconst { generatedProps, } = this.state,\n\t\t\t\t\t{ dispatch } = this.store;\n\n\t\t\t\treturn <BaseComponent\n\t\t\t\t\t{...this.props}\n\t\t\t\t\t{...generatedProps}\n\t\t\t\t\tdispatch={dispatch}/>;\n\t\t\t}\n\n\t\t\tsyncProps = () => {\n\t\t\t\tconst { generatedProps } = this.state,\n\t\t\t\t\tnextProps = stateToPropsFactory(this.store.getState());\n\n\t\t\t\tif (!shallowEqual(generatedProps, nextProps)) {\n\t\t\t\t\tthis.setState({ generatedProps: nextProps });\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t};\n}\n\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n",
        "gt": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/ruuiStore.js'",
            "'ruui/src/components/ruuiProvider.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'ProjectFlowerbed/src/js/systems/assets/AssetLoadingSystem.js'",
            "'ProjectFlowerbed/src/js/ECSYConfig.js'",
            "'ProjectFlowerbed/src/js/devTools/HandPoseExtractorSystem.js'"
        ],
        "content": "'ProjectFlowerbed/src/js/systems/assets/AssetLoadingSystem.js'\n:\n\nimport * as THREE from 'three';\nimport { AssetDatabaseComponent } from '../../components/AssetDatabaseComponent';\nimport { AssetReplacementSystem } from './AssetReplacementSystem';\nimport { AssetURLs } from '@config/AssetURLs';\nimport { AudioDatabase } from '../../lib/databases/AudioDatabase';\nimport { DEBUG_CONSTANTS } from '../../Constants';\nimport { LoadingScreenComponent } from '../../components/LoadingScreenComponent';\nimport { MeshDatabase } from '../../lib/databases/MeshDatabase';\nimport { MeshPreviewSystem } from '../mesh/MeshPreviewSystem';\nimport { System } from 'ecsy';\nimport { THREEGlobalComponent } from '../../components/THREEGlobalComponent';\nimport { getOnlyEntity } from '../../utils/entityUtils';\nimport { registerSystemsAfterLoad } from '../../ECSYConfig';\n\nconst kMaxMeshes = 568;\n\nexport class AssetLoadingSystem extends System {\n\tinit() {\n\t\tthis.hasStartedLoadingAssets = false;\n\t}\n\n\n\t_loadAssets() {\n\t\tconst gameManager = getOnlyEntity(this.queries.gameManager);\n\t\tconst threeConstants = gameManager.getComponent(THREEGlobalComponent);\n\n\t\tif (!getOnlyEntity(this.queries.loadingScreen, false)) {\n\t\t\tconst loadingScreenEntity = this.world.createEntity();\n\t\t\tloadingScreenEntity.addComponent(LoadingScreenComponent, {\n\t\t\t\ttotalMeshes: kMaxMeshes,\n\t\t\t});\n\t\t}\n\n\t\tthis.loadingManager = new THREE.LoadingManager(\n\t\t\t() => {},\n\t\t\t(_url, loaded, total) => {\n\t\t\t\tconst loadingScreen = getOnlyEntity(\n\t\t\t\t\tthis.queries.loadingScreen,\n\t\t\t\t).getMutableComponent(LoadingScreenComponent);\n\t\t\t\tloadingScreen.totalMeshes = Math.max(total, kMaxMeshes);\n\t\t\t\tloadingScreen.loadedMeshes = loaded;\n\t\t\t},\n\t\t);\n\n\n\t\tconst assetDatabaseEntity = this.world.createEntity();\n\t\tconst meshDatabase = new MeshDatabase(\n\t\t\tthreeConstants.renderer,\n\t\t\tthis.loadingManager,\n\t\t);\n\n\t\tassetDatabaseEntity.addComponent(AssetDatabaseComponent, {\n\t\t\tmeshes: meshDatabase,\n\t\t\taudio: new AudioDatabase(),\n\t\t});\n\n\t\tconst assetDatabaseComponent = assetDatabaseEntity.getMutableComponent(\n\t\t\tAssetDatabaseComponent,\n\t\t);\n\n\t\tthis.hasStartedLoadingAssets = true;\n\n\n\t\tlet shouldUseLocalhostServer = false;\n\t\tconst performLoad = async () => {\n\t\t\tconst promises = [];\n\t\t\tpromises.push(\n\t\t\t\tassetDatabaseComponent.loadAllMeshes(shouldUseLocalhostServer),\n\t\t\t);\n\t\t\tpromises.push(assetDatabaseComponent.loadAllAudio());\n\n\t\t\tawait Promise.all(promises);\n\t\t\tthis._onLoad();\n\n\t\t\tif (shouldUseLocalhostServer) {\n\t\t\t\tthis.world.registerSystem(MeshPreviewSystem);\n\t\t\t}\n\t\t};\n\t\tif (!DEBUG_CONSTANTS.ENABLE_LOCALHOST_ASSETS) {\n\t\t\tperformLoad();\n\t\t\treturn;\n\t\t}\n\n\n\t\tconst controller = new AbortController();\n\t\tconst timeoutId = setTimeout(() => controller.abort(), 1000);\n\t\tfetch('http:\n\t\t\t.then((_response) => {\n\n\t\t\t\tshouldUseLocalhostServer = true;\n\n\n\n\t\t\t\tAssetURLs.ADDITIONAL_MESH_DIRS.unshift('http:\n\n\t\t\t\tclearTimeout(timeoutId);\n\t\t\t})\n\t\t\t.catch((_e) => {\n\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tperformLoad();\n\t\t\t});\n\t}\n\n\t_onLoad() {\n\t\tthis.world.registerSystem(AssetReplacementSystem, { priority: -10 });\n\t\tregisterSystemsAfterLoad(this.world);\n\n\t\tconst loadingScreen = getOnlyEntity(\n\t\t\tthis.queries.loadingScreen,\n\t\t).getMutableComponent(LoadingScreenComponent);\n\t\tloadingScreen.isDoneLoading = true;\n\t}\n\n\texecute() {\n\t\tif (!this.hasStartedLoadingAssets) {\n\t\t\tthis._loadAssets();\n\t\t}\n\t}\n}\n\nAssetLoadingSystem.queries = {\n\tgameManager: {\n\t\tcomponents: [THREEGlobalComponent],\n\t},\n\tloadingScreen: {\n\t\tcomponents: [LoadingScreenComponent],\n\t},\n};\n\n'ProjectFlowerbed/src/js/ECSYConfig.js'\n:\n\nimport {\n\tAerialFaunaGroupComponent,\n\tAerialFaunaMovementComponent,\n\tWaterFaunaGroupComponent,\n\tWaterFaunaMovementComponent,\n} from './components/FaunaComponents';\nimport {\n\tCapsuleColliderComponent,\n\tCollisionAreaComponent,\n\tCollisionWorldComponent,\n\tStaticColliderComponent,\n\tStaticColliderResources,\n} from './components/ColliderComponents';\nimport {\n\tControlsPanelComponent,\n\tSettingsComponent,\n\tSettingsPanelComponent,\n} from './components/SettingsComponent';\nimport {\n\tCurvedRay,\n\tRayComponent,\n\tShortRay,\n\tStraightRay,\n} from './components/RayComponents';\nimport {\n\tEnvironmentProp,\n\tHovered,\n\tIsActive,\n\tLight,\n\tMainEnvironment,\n\tPressed,\n} from './components/GameObjectTagComponents';\nimport {\n\tInstancedMeshComponent,\n\tInstancedMeshInstanceComponent,\n} from './components/InstancedMeshComponent';\nimport {\n\tLoopingAudioComponent,\n\tLoopingAudioResources,\n\tOneshotAudioComponent,\n\tPlaylistAudioComponent,\n\tPlaylistAudioResources,\n} from './components/AudioComponents';\nimport {\n\tMorphTargetAnimationComponent,\n\tMorphTargetMeshInitialized,\n} from './components/MorphTargetAnimationComponent';\nimport {\n\tNUXMovementTriggerArea,\n\tNUXPanelComponent,\n\tNUXStateComponent,\n} from './components/NUXStateComponent';\nimport {\n\tPhotoComponent,\n\tPhotoMenuComponent,\n\tScreenshotCameraComponent,\n} from './components/ScreenshotCameraComponent';\nimport {\n\tPickedPlantComponent,\n\tPlantGrowingComponent,\n\tPlantShrinkingComponent,\n\tPlantTinyColliderComponent,\n\tPlantedComponent,\n\tPlantingStateComponent,\n\tSeedAnimationComponent,\n} from './components/PlantingComponents';\nimport {\n\tPlayerColliderComponent,\n\tPlayerStateComponent,\n} from './components/PlayerStateComponent';\nimport {\n\tSeedComponent,\n\tSeedbagComponent,\n\tSeedboxButtonComponent,\n\tSeedboxComponent,\n} from './components/SeedboxComponents';\nimport {\n\tUIPanelComponent,\n\tUIPanelMedia,\n\tUIPanelResources,\n} from './components/UIPanelComponent';\n\nimport { AerialFaunaCreationSystem } from './systems/fauna/AerialFaunaCreationSystem';\nimport { AerialFaunaMovementSystem } from './systems/fauna/AerialFaunaMovementSystem';\nimport { AmbientSoundCreationSystem } from './systems/audio/AmbientSoundCreationSystem';\nimport { AssetDatabaseComponent } from './components/AssetDatabaseComponent';\nimport { AssetLoadingSystem } from './systems/assets/AssetLoadingSystem';\nimport { AudioSystem } from './systems/audio/AudioSystem';\nimport { BootstrapSessionSystem } from './systems/core/BootstrapSessionSystem';\nimport { CameraHandContextualNUXSystem } from './systems/hands/CameraHandContextualNUXSystem';\nimport { CameraPhotoGrabTooltipSystem } from './systems/ui/progressiveTooltips/CameraPhotoGrabTooltipSystem';\nimport { CollisionAreaSystem } from './systems/collisions/CollisionAreaSystems';\nimport { CollisionWorldSystem } from './systems/collisions/CollisionSystem';\nimport { ControlsPanelSystem } from './systems/settings/ControlsPanelSystem';\nimport { DEBUG_CONSTANTS } from './Constants';\nimport { DebugClearFlagsSystem } from './systems/landing-page/DebugClearFlagsSystem';\nimport { EnterVRTransitionSystem } from './systems/locomotion/EnterVRTransitionSystem';\nimport { FaunaAnimationComponent } from './components/FaunaAnimationComponent';\nimport { FaunaAnimationSystem } from './systems/fauna/FaunaAnimationSystem';\nimport { FaunaClusterComponent } from './components/FaunaClusterComponent';\nimport { FaunaColliderComponent } from './components/FaunaColliderComponent';\nimport { FaunaCreationSystem } from './systems/fauna/FaunaCreationSystem';\nimport { FaunaMovementBoundSamplerSystem } from './devTools/FaunaMovementBoundSamplerSystem';\nimport { GameStateComponent } from './components/GameStateComponent';\nimport { GameStateUpdateSystem } from './systems/core/GameStateUpdateSystem';\nimport { GardenManagementSystem } from './systems/landing-page/GardenManagementSystem';\nimport { GazeFollowSystem } from './systems/ui/GazeFollowSystem';\nimport { GazeFollowerComponent } from './components/GazeFollowerComponent';\nimport { HandAnimationSystem } from './systems/hands/HandAnimationSystem';\nimport { HandCreationSystem } from './systems/hands/HandCreationSystem';\nimport { HandNUXSystem } from './systems/hands/HandNUXSystem';\nimport { HandPoseExtractionSystem } from './devTools/HandPoseExtractorSystem';\nimport { IndicatorRingComponent } from './components/IndicatorRingComponent';\nimport { IndicatorRingSystem } from './systems/ui/IndicatorRingSystem';\nimport { JoystickMovementSystem } from './systems/locomotion/JoystickMovementSystem';\nimport { LoadingScreenComponent } from './components/LoadingScreenComponent';\nimport { LoadingScreenSystem } from './systems/landing-page/LoadingScreenSystem';\nimport { LocalSaveDataSystem } from './systems/saveLoad/SaveDataSystem';\nimport { LocomotionVignetteSystem } from './systems/locomotion/LocomotionVignetteSystem';\nimport { MeshIdComponent } from './components/AssetReplacementComponents';\nimport { MeshInstancingSystem } from './systems/mesh/MeshInstancingSystem';\nimport { MeshPreviewObject } from './components/MeshPreviewObjectComponent';\nimport { ModelOptimizeSystem } from './systems/mesh/ModelOptimizeSystem';\nimport { MorphTargetAnimationSystem } from './systems/fauna/MorphTargetAnimationSystem';\nimport { MovableFaunaComponent } from './components/MovableFaunaComponent';\nimport { MovableFaunaSystem } from './systems/fauna/MovableFaunaSystem';\nimport { MusicSystem } from './systems/audio/MusicSystem';\nimport { NUXCreationSystem } from './systems/ui/NUXCreationSystem';\nimport { NUXSystem } from './systems/ui/NUXSystem';\nimport { Object3DComponent } from './components/Object3DComponent';\nimport { ObjectFollowSystem } from './systems/ui/ObjectFollowSystem';\nimport { ObjectFollowerComponent } from './components/ObjectFollowerComponent';\nimport { OptimizedModelComponent } from './components/OptimizedModelComponent';\nimport { PerformanceOptionsComponent } from './components/PerformanceOptionsComponent';\nimport { PerformanceTestSystem } from './systems/performance/PerformanceTestSystem';\nimport { PhotoAutoDeleteSystem } from './systems/camera/PhotoAutoDeleteSystem';\nimport { PhotoMenuCreationSystem } from './systems/camera/PhotoMenuCreationSystem';\nimport { PhotoSystem } from './systems/camera/PhotoSystem';\nimport { PlantColliderSystem } from './systems/plants/PlantColliderSystem';\nimport { PlantGrowingSystem } from './systems/plants/PlantGrowingSystem';\nimport { PlantPickingSystem } from './systems/plants/PlantPickingSystem';\nimport { PlantShrinkingSystem } from './systems/plants/PlantShrinkingSystem';\nimport { PlantingArrowSystem } from './systems/plants/PlantingArrowSystem';\nimport { PlantingSystem } from './systems/plants/PlantingSystem';\nimport { PlayerPhysicsSystem } from './systems/core/PlayerPhysicsSystem';\nimport { PlaylistAudioSystem } from './systems/audio/PlaylistAudioSystem';\nimport { PropsCalibrationSystem } from './devTools/PropsCalibrationSystem';\nimport { RayDrawingSystem } from './systems/raycasting/RayDrawingSystem';\nimport { RaycastSystem } from './systems/raycasting/RaycastSystem';\nimport { RenderingSystem } from './systems/core/RenderingSystem';\nimport { ResetNUXSystem } from './systems/ui/ResetNUXSystem';\nimport { SavableObject } from './components/SaveDataComponents';\nimport { SaveControllerSystem } from './systems/saveLoad/SaveControllerSystem';\nimport { SceneCreationSystem } from './systems/core/SceneCreationSystem';\nimport { SceneLightingComponent } from './components/SceneLightingComponent';\nimport { ScreenshotCameraCreationSystem } from './systems/camera/ScreenshotCameraCreationSystem';\nimport { ScreenshotCameraSystem } from './systems/camera/ScreenshotCameraSystem';\nimport { SeedAnimationSystem } from './systems/plants/SeedAnimationSystem';\nimport { SeedboxChangePageTooltipSystem } from './systems/ui/progressiveTooltips/SeedboxChangePageTooltipSystem';\nimport { SeedboxCreationSystem } from './systems/seedbox/SeedboxCreationSystem';\nimport { SeedboxFocusDetectionSystem } from './systems/seedbox/SeedboxFocusDetectionSystem';\nimport { SeedboxHandContextualNUXSystem } from './systems/hands/SeedboxHandContextualNUXSystem';\nimport { SeedboxSystem } from './systems/seedbox/SeedboxSystem';\nimport { SelectionWheelComponent } from './components/SelectionWheelComponent';\nimport { SelectionWheelCreationSystem } from './systems/selectionWheels/SelectionWheelCreationSystem';\nimport { SelectionWheelSystem } from './systems/selectionWheels/SelectionWheelSystem';\nimport { SessionComponent } from './components/SessionComponent';\nimport { SettingsCreationSystem } from './systems/settings/SettingsCreationSystem';\nimport { SettingsSystem } from './systems/settings/SettingsSystem';\nimport { SkeletonAnimationComponent } from './components/SkeletonAnimationComponent';\nimport { SnapTurnSystem } from './systems/locomotion/SnapTurnSystem';\nimport { StationaryFaunaComponent } from './components/StationaryFaunaComponent';\nimport { StationaryFaunaSystem } from './systems/fauna/StationaryFaunaSystem';\nimport { THREEGlobalComponent } from './components/THREEGlobalComponent';\nimport { TeleportationSystem } from './systems/locomotion/TeleportationSystem';\nimport { UIPanelInteractionSystem } from './systems/ui/UIPanelInteractionSystem';\nimport { UIPanelMediaSystem } from './systems/ui/UIPanelMediaSystem';\nimport { UIPanelPreviewSystem } from './systems/ui/UIPanelPreviewSystem';\nimport { UIPanelResourcesSystem } from './systems/ui/UIPanelResourcesSystem';\nimport { UserIdentityComponent } from './components/UserIdentityComponent';\nimport { VrControllerComponent } from './components/VrControllerComponent';\nimport { VrInputSystem } from './systems/core/VrInputSystem';\nimport { WaterFaunaCreationSystem } from './systems/fauna/WaterFaunaCreationSystem';\nimport { WaterFaunaMovementSystem } from './systems/fauna/WaterFaunaMovementSystem';\nimport { WateringSystem } from './systems/plants/WateringSystem';\nimport { World } from 'ecsy';\n\nconst ENABLE_HAND_POSER = false;\n\nexport const setupECSY = () => {\n\tlet world = new World();\n\n\tregisterTagComponents(world);\n\n\tregisterComponents(world);\n\n\tregisterSystems(world);\n\n\treturn world;\n};\n\n\nconst registerTagComponents = (world) => {\n\tworld.registerComponent(Light);\n\tworld.registerComponent(Hovered);\n\tworld.registerComponent(Pressed);\n\tworld.registerComponent(IsActive);\n\tworld.registerComponent(StraightRay);\n\tworld.registerComponent(ShortRay);\n\tworld.registerComponent(CurvedRay);\n\tworld.registerComponent(MainEnvironment);\n\tworld.registerComponent(EnvironmentProp);\n\tworld.registerComponent(MorphTargetMeshInitialized);\n};\n\n\nconst registerComponents = (world) => {\n\tworld.registerComponent(VrControllerComponent);\n\tworld.registerComponent(Object3DComponent);\n\tworld.registerComponent(GameStateComponent);\n\tworld.registerComponent(PlayerStateComponent);\n\tworld.registerComponent(OptimizedModelComponent);\n\tworld.registerComponent(PerformanceOptionsComponent);\n\tworld.registerComponent(THREEGlobalComponent);\n\tworld.registerComponent(SeedComponent);\n\tworld.registerComponent(CollisionWorldComponent);\n\tworld.registerComponent(StaticColliderComponent);\n\tworld.registerComponent(StaticColliderResources);\n\tworld.registerComponent(CapsuleColliderComponent);\n\tworld.registerComponent(PlayerColliderComponent);\n\tworld.registerComponent(SeedboxComponent);\n\tworld.registerComponent(SeedboxButtonComponent);\n\tworld.registerComponent(GazeFollowerComponent);\n\tworld.registerComponent(ObjectFollowerComponent);\n\tworld.registerComponent(UIPanelComponent);\n\tworld.registerComponent(UIPanelResources);\n\tworld.registerComponent(UIPanelMedia);\n\tworld.registerComponent(NUXStateComponent);\n\tworld.registerComponent(NUXPanelComponent);\n\tworld.registerComponent(RayComponent);\n\tworld.registerComponent(IndicatorRingComponent);\n\tworld.registerComponent(PlantedComponent);\n\tworld.registerComponent(PickedPlantComponent);\n\tworld.registerComponent(SavableObject);\n\tworld.registerComponent(CollisionAreaComponent);\n\tworld.registerComponent(NUXMovementTriggerArea);\n\tworld.registerComponent(ScreenshotCameraComponent);\n\tworld.registerComponent(PhotoComponent);\n\tworld.registerComponent(PhotoMenuComponent);\n\tworld.registerComponent(AssetDatabaseComponent);\n\tworld.registerComponent(MeshIdComponent);\n\tworld.registerComponent(SelectionWheelComponent);\n\tworld.registerComponent(OneshotAudioComponent);\n\tworld.registerComponent(PlantGrowingComponent);\n\tworld.registerComponent(PlantShrinkingComponent);\n\tworld.registerComponent(PlantingStateComponent);\n\tworld.registerComponent(LoopingAudioComponent);\n\tworld.registerComponent(LoopingAudioResources);\n\tworld.registerComponent(PlaylistAudioComponent);\n\tworld.registerComponent(PlaylistAudioResources);\n\tworld.registerComponent(PlantTinyColliderComponent);\n\tworld.registerComponent(SeedAnimationComponent);\n\tworld.registerComponent(SeedbagComponent);\n\tworld.registerComponent(InstancedMeshComponent);\n\tworld.registerComponent(InstancedMeshInstanceComponent);\n\tworld.registerComponent(FaunaClusterComponent);\n\tworld.registerComponent(FaunaColliderComponent);\n\tworld.registerComponent(FaunaAnimationComponent);\n\tworld.registerComponent(MorphTargetAnimationComponent);\n\tworld.registerComponent(SkeletonAnimationComponent);\n\tworld.registerComponent(MovableFaunaComponent);\n\tworld.registerComponent(StationaryFaunaComponent);\n\tworld.registerComponent(MeshPreviewObject);\n\tworld.registerComponent(SceneLightingComponent, false);\n\tworld.registerComponent(LoadingScreenComponent);\n\tworld.registerComponent(UserIdentityComponent);\n\tworld.registerComponent(WaterFaunaMovementComponent);\n\tworld.registerComponent(WaterFaunaGroupComponent);\n\tworld.registerComponent(SettingsPanelComponent);\n\tworld.registerComponent(ControlsPanelComponent);\n\tworld.registerComponent(SettingsComponent);\n\tworld.registerComponent(AerialFaunaMovementComponent);\n\tworld.registerComponent(AerialFaunaGroupComponent);\n\tworld.registerComponent(SessionComponent);\n};\n\n\nconst registerSystems = (world) => {\n\tworld.registerSystem(GardenManagementSystem);\n\n\n\tworld.registerSystem(AssetLoadingSystem, { priority: -10 });\n\n\n\tworld.registerSystem(LoadingScreenSystem, { priority: -9 });\n\n\n\tworld.registerSystem(DebugClearFlagsSystem);\n\tworld.registerSystem(ResetNUXSystem);\n\n\n\tworld.registerSystem(RenderingSystem, { priority: 99 });\n};\n\n\nexport const registerSystemsAfterLoad = (world) => {\n\n\n\tworld.registerSystem(SceneCreationSystem, { priority: -2 });\n\n\n\n\tworld.registerSystem(ModelOptimizeSystem, { priority: -1 });\n\tworld.registerSystem(BootstrapSessionSystem);\n\n\n\tworld.registerSystem(UIPanelResourcesSystem);\n\tworld.registerSystem(UIPanelInteractionSystem);\n\tworld.registerSystem(UIPanelMediaSystem);\n\n\tworld.registerSystem(HandCreationSystem);\n\tworld.registerSystem(EnterVRTransitionSystem);\n\tworld.registerSystem(ScreenshotCameraCreationSystem);\n\tworld.registerSystem(PhotoMenuCreationSystem);\n\tworld.registerSystem(SelectionWheelCreationSystem);\n\tworld.registerSystem(SeedboxCreationSystem);\n\tworld.registerSystem(CollisionWorldSystem);\n\tworld.registerSystem(CollisionAreaSystem);\n\tworld.registerSystem(VrInputSystem);\n\tworld.registerSystem(HandAnimationSystem);\n\n\tworld.registerSystem(PlayerPhysicsSystem);\n\tworld.registerSystem(WateringSystem);\n\n\n\n\n\tworld.registerSystem(RaycastSystem);\n\n\n\n\tworld.registerSystem(GameStateUpdateSystem);\n\tworld.registerSystem(SelectionWheelSystem);\n\tworld.registerSystem(IndicatorRingSystem);\n\tworld.registerSystem(SnapTurnSystem);\n\tworld.registerSystem(TeleportationSystem);\n\tworld.registerSystem(HandNUXSystem);\n\tworld.registerSystem(SeedboxHandContextualNUXSystem);\n\tworld.registerSystem(CameraHandContextualNUXSystem);\n\tworld.registerSystem(JoystickMovementSystem);\n\tif (ENABLE_HAND_POSER) {\n\n\t\tworld.registerSystem(HandPoseExtractionSystem);\n\t}\n\n\tworld.registerSystem(GazeFollowSystem);\n\tworld.registerSystem(ObjectFollowSystem);\n\tworld.registerSystem(NUXCreationSystem);\n\tworld.registerSystem(SettingsCreationSystem);\n\n\tworld.registerSystem(SettingsSystem);\n\tworld.registerSystem(ControlsPanelSystem);\n\n\n\n\tworld.registerSystem(ScreenshotCameraSystem);\n\tworld.registerSystem(PhotoSystem);\n\tworld.registerSystem(PhotoAutoDeleteSystem);\n\tworld.registerSystem(PlantPickingSystem);\n\tworld.registerSystem(SeedboxFocusDetectionSystem);\n\tworld.registerSystem(SeedboxSystem);\n\tworld.registerSystem(PlantingSystem);\n\tworld.registerSystem(PlantingArrowSystem);\n\tworld.registerSystem(SeedAnimationSystem);\n\tworld.registerSystem(PlantGrowingSystem);\n\tworld.registerSystem(PlantShrinkingSystem);\n\tworld.registerSystem(PlantColliderSystem);\n\tworld.registerSystem(SaveControllerSystem);\n\tworld.registerSystem(RayDrawingSystem);\n\tworld.registerSystem(LocalSaveDataSystem);\n\tworld.registerSystem(WaterFaunaCreationSystem);\n\tworld.registerSystem(WaterFaunaMovementSystem);\n\tworld.registerSystem(AerialFaunaCreationSystem);\n\tworld.registerSystem(AerialFaunaMovementSystem);\n\tworld.registerSystem(FaunaAnimationSystem);\n\tworld.registerSystem(FaunaCreationSystem);\n\tworld.registerSystem(MovableFaunaSystem);\n\tworld.registerSystem(FaunaMovementBoundSamplerSystem);\n\tworld.registerSystem(StationaryFaunaSystem);\n\tworld.registerSystem(MorphTargetAnimationSystem);\n\tworld.registerSystem(PerformanceTestSystem);\n\tworld.registerSystem(LocomotionVignetteSystem);\n\tif (ENABLE_HAND_POSER) {\n\t\tworld.registerSystem(PropsCalibrationSystem);\n\t}\n\n\tworld.registerSystem(MeshInstancingSystem);\n};\n\n\nexport const registerSystemsAfterReady = (world) => {\n\n\n\n\tworld.registerSystem(AudioSystem);\n\n\tworld.registerSystem(AmbientSoundCreationSystem);\n\tworld.registerSystem(MusicSystem);\n\tworld.registerSystem(PlaylistAudioSystem);\n\n\n\n\tworld.registerSystem(NUXSystem);\n\n\tworld.registerSystem(SeedboxChangePageTooltipSystem);\n\tworld.registerSystem(CameraPhotoGrabTooltipSystem);\n\n\tif (DEBUG_CONSTANTS.ENABLE_UI_PREVIEW_SYSTEM) {\n\t\tworld.registerSystem(UIPanelPreviewSystem);\n\t}\n};\n\n'ProjectFlowerbed/src/js/devTools/HandPoseExtractorSystem.js'\n:\n\nimport * as THREE from 'three';\n\nimport { InteractionSystem } from '../lib/InteractionSystem';\nimport { MeshIdComponent } from '../components/AssetReplacementComponents';\nimport { Object3DComponent } from '../components/Object3DComponent';\n\nconst ANIMATION_TRACK_POSE_MAPPING = {\n\tEMPTY: {\n\t\tDEFAULT: 'EMPTY_DEFAULT',\n\t\tPRESSED: 'EMPTY_PRESSED',\n\t},\n\tWATERING: {\n\t\tDEFAULT: 'WATERING_DEFAULT',\n\t},\n\tCAMERA: {\n\t\tDEFAULT: 'CAMERA_DEFAULT',\n\t\tPRESSED: 'CAMERA_PRESSED',\n\t},\n\tPLANTING: {\n\t\tDEFAULT: 'SEEDBAG_DEFAULT',\n\t},\n\tGRABBING: {\n\t\tDEFAULT: 'EMPTY_DEFAULT',\n\t\tPRESSED: 'Hold_CameraPhoto',\n\t},\n\tSEEDBOX: {\n\t\tDEFAULT: 'SEEDBOX_DEFAULT',\n\t\tPRESSED: 'SEEDBOX_PRESSED',\n\t},\n};\n\nexport class HandPoseExtractionSystem extends InteractionSystem {\n\tinit() {\n\t\tthis.handEntity = this.world.createEntity();\n\t\tthis.handEntity.addComponent(MeshIdComponent, { id: 'HAND_REST_LEFT' });\n\t\tthis.handEntity.addComponent(Object3DComponent, {\n\t\t\tvalue: new THREE.Object3D(),\n\t\t});\n\n\t\twindow.addEventListener(\n\t\t\t'keydown',\n\t\t\t(event) => {\n\t\t\t\tswitch (event.code) {\n\t\t\t\t\tcase 'KeyP':\n\t\t\t\t\t\tconsole.log(this._extractPoses());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t},\n\t\t\ttrue,\n\t\t);\n\t}\n\n\t_extractPoses() {\n\t\tconst mesh = this.handEntity.getComponent(Object3DComponent).value;\n\t\tconst clips = mesh.animations;\n\t\tconst bonesData = {};\n\t\tObject.entries(ANIMATION_TRACK_POSE_MAPPING).forEach(([mode, states]) => {\n\t\t\tconst bones = {\n\t\t\t\tTHUMB: {},\n\t\t\t\tINDEX: {},\n\t\t\t\tHAND: {},\n\t\t\t};\n\t\t\tObject.entries(states).forEach(([state, clipName]) => {\n\t\t\t\tconst clip = THREE.AnimationClip.findByName(clips, clipName);\n\n\t\t\t\tclip.tracks.forEach((track) => {\n\t\t\t\t\tconst [boneName, valueType] = track.name.split('.');\n\t\t\t\t\tif (valueType == 'quaternion') {\n\t\t\t\t\t\tif (boneName.includes('Thumb')) {\n\t\t\t\t\t\t\tif (!bones.THUMB[boneName]) {\n\t\t\t\t\t\t\t\tbones.THUMB[boneName] = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbones.THUMB[boneName][state] = [...track.values];\n\t\t\t\t\t\t} else if (boneName.includes('Index')) {\n\t\t\t\t\t\t\tif (!bones.INDEX[boneName]) {\n\t\t\t\t\t\t\t\tbones.INDEX[boneName] = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbones.INDEX[boneName][state] = [...track.values];\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tboneName.includes('Middle') ||\n\t\t\t\t\t\t\tboneName.includes('Ring') ||\n\t\t\t\t\t\t\tboneName.includes('Pinky')\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (!bones.HAND[boneName]) {\n\t\t\t\t\t\t\t\tbones.HAND[boneName] = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbones.HAND[boneName][state] = [...track.values];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tbonesData[mode] = bones;\n\t\t});\n\n\t\tconsole.log(JSON.stringify(bonesData));\n\t}\n\n\tonExecute() {}\n}\n",
        "gt": [
            "'ProjectFlowerbed/src/js/devTools/HandPoseExtractorSystem.js'",
            "'ProjectFlowerbed/src/js/ECSYConfig.js'",
            "'ProjectFlowerbed/src/js/systems/assets/AssetLoadingSystem.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/components/connectionMask.js'",
            "'ruui/src/utils/helpers.js'"
        ],
        "content": "'ruui/src/utils/store/appAction.js'\n:import * as Actions from './actions';\nimport { uuid } from '../helpers';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function updateThemeConfigs(configs = {}) {\n\treturn { type: Actions.UpdateThemeConfigs, configs };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/components/connectionMask.js'\n:import React, { Component } from 'react';\nimport { Animated, Easing, NetInfo, ActivityIndicator, View, Text, StyleSheet } from 'react-native';\n\nimport Button from './button';\nimport { connect } from '../utils';\nimport * as appActions from '../utils/store/appAction';\nimport type { Style, Element } from '../typeDefinition';\n\ntype Props = {\n\tdispatch?: Function,\n\tnetInfo?: Object,\n\twrapperStyle?: Style,\n\tcontentRenderer?: Function,\n\tmessage?: Element,\n\tretryButtonCaption?: string,\n\tretryButtonIcon?: Element,\n\tretryButtonRightIcon?: Element,\n\tretryButtonWrapperStyle?: Style,\n\tretryButtonInnerStyle?: Style,\n};\n\nclass RuuiConnectionMask extends Component {\n\tprops: Props;\n\n\tstatic defaultProps = {\n\t\tmessage: <Text\n\t\t\tstyle={{\n\t\t\t\tcolor: '#ffffff',\n\t\t\t\tfontSize: 20, textAlign: 'center',\n\t\t\t}}>App need internet connection, waiting for reconnect..</Text>,\n\t\tretryButtonCaption: 'Retry',\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tenterAnimation: new Animated.Value(0),\n\t\t};\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { netInfo } = this.props;\n\n\t\tif (prevProps.netInfo.isConnected !== netInfo.isConnected) {\n\t\t\tthis.playAnimation(netInfo.isConnected ? 0 : 1);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst pointerEvents = this.props.netInfo.isConnected ? 'none' : 'auto',\n\t\t\topacity = this.state.enterAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\t}),\n\t\t\tcontainerStyle = { opacity, };\n\n\t\treturn <Animated.View\n\t\t\tpointerEvents={pointerEvents}\n\t\t\tstyle={[styles.container, this.props.wrapperStyle, containerStyle]}>\n\t\t\t{this.props.contentRenderer\n\t\t\t\t? this.props.contentRenderer(this.props.netInfo)\n\t\t\t\t: <View style={styles.innerContainer}>\n\t\t\t\t\t{this.props.message}\n\t\t\t\t\t<ActivityIndicator color=\"#ffffff\" style={styles.activityIndicator}/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttitle={this.props.retryButtonCaption}\n\t\t\t\t\t\ticon={this.props.retryButtonIcon}\n\t\t\t\t\t\trightIcon={this.props.retryButtonRightIcon}\n\t\t\t\t\t\twrapperStyle={this.props.retryButtonWrapperStyle}\n\t\t\t\t\t\tinnerStyle={this.props.retryButtonInnerStyle}\n\t\t\t\t\t\tonPress={this.retry}/>\n\t\t\t\t</View>}\n\t\t</Animated.View>;\n\t}\n\n\tretry = () => {\n\t\tNetInfo.isConnected.fetch().then((isConnected) => {\n\t\t\tthis.props.dispatch(appActions.updateNetInfo({ isConnected }));\n\t\t});\n\t};\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.state.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: true,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport default connect(({ netInfo }) => {\n\treturn {\n\t\tnetInfo,\n\t};\n})(RuuiConnectionMask);\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute', top: 0, left: 0, right: 0, bottom: 0,\n\t\tbackgroundColor: 'rgba(0, 0, 0, 0.7)',\n\t},\n\tinnerContainer: {\n\t\tposition: 'absolute', top: 0, left: 0, right: 0, bottom: 0,\n\t\tjustifyContent: 'center', alignItems: 'center',\n\t\tpaddingHorizontal: 28,\n\t},\n\tactivityIndicator: {\n\t\tmarginVertical: 20,\n\t},\n});\n\n'ruui/src/utils/helpers.js'\n:import { Dimensions } from 'react-native';\nimport type { SnappingDirection } from '../typeDefinition';\n\nexport function debounce(fn, duration) {\n\tlet timeout;\n\treturn function () {\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = null;\n\t\t\tfn.apply(this, arguments);\n\t\t}, duration);\n\t};\n}\n\nexport function uuid() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t\tconst r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\nexport function instantInterval(\n\tfunc: Function,\n\tinterval: Number,\n\ttrigger: Boolean = true,\n) {\n\tif (trigger) func.call(this);\n\treturn setInterval(func, interval);\n}\n\nexport function minGuard(value: Number, gap: Number = 0) {\n\treturn value < gap ? gap : value;\n}\n\nexport function maxGuard(value: Number, gap: Number) {\n\treturn value > gap ? gap : value;\n}\n\nconst defaultIteratee = item => item;\n\nexport function maxBy(array, iteratee = defaultIteratee) {\n\tlet result;\n\tif (array == null) return result;\n\n\tlet computed;\n\tfor (const value of array) {\n\t\tconst current = iteratee(value);\n\n\t\tif (current != null && (computed === undefined ? current === current : current > computed)) {\n\t\t\tcomputed = current;\n\t\t\tresult = value;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function clamp(value: Number, min: Number, max: Number) {\n\treturn min < max\n\t\t? (value < min ? min : value > max ? max : value)\n\t\t: (value < max ? max : value > min ? min : value);\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n\tif (x === y) {\n\t\treturn x !== 0 || y !== 0 || 1 / x === 1 / y;\n\t} else {\n\t\treturn x !== x && y !== y;\n\t}\n}\n\nexport function shallowEqual(objA, objB) {\n\tif (is(objA, objB)) return true;\n\n\tif (typeof objA !== 'object' || objA === null\n\t\t|| typeof objB !== 'object' || objB === null) {\n\t\treturn false;\n\t}\n\n\tconst keysA = Object.keys(objA);\n\tconst keysB = Object.keys(objB);\n\n\tif (keysA.length !== keysB.length) return false;\n\n\tfor (let i = 0; i < keysA.length; i += 1) {\n\t\tif (!hasOwn.call(objB, keysA[i])\n\t\t\t|| !is(objA[keysA[i]], objB[keysA[i]])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function valueAt(root = {}, path, defaultValue) {\n\tlet currentLevel = root;\n\tconst paths = path.split('.');\n\n\tfor (let i = 0; i < paths.length; i += 1) {\n\t\tif (i === paths.length - 1) {\n\t\t\treturn currentLevel[paths[i]] || defaultValue;\n\t\t} else {\n\t\t\tcurrentLevel = currentLevel[paths[i]];\n\t\t\tif (!currentLevel) return defaultValue;\n\t\t}\n\t}\n\n\treturn defaultValue;\n}\n\nfunction rawDirectionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n) {\n\tswitch (position) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tdefault:\n\t\treturn { top: 0, left: 0 };\n\t}\n}\n\n\nfunction screenGuard(position, componentSize, screenPadding = 5, moddedScreenSize = {}) {\n\tconst screenSize = { ...Dimensions.get('window'), ...moddedScreenSize },\n\t\t{ top, left, } = position;\n\tlet guardedTop = top, guardedLeft = left;\n\n\tif (top < 5) {\n\t\tguardedTop = 5;\n\t} else if (top + componentSize.height > screenSize.height - screenPadding) {\n\t\tguardedTop = screenSize.height - componentSize.height - screenPadding;\n\t}\n\n\tif (left < 5) {\n\t\tguardedLeft = 5;\n\t} else if (left + componentSize.width > screenSize.width - screenPadding) {\n\t\tguardedLeft = screenSize.width - componentSize.width - screenPadding;\n\t}\n\n\treturn { top: guardedTop, left: guardedLeft, };\n}\n\nexport function directionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n\tscreenSize,\n) {\n\treturn screenGuard(\n\t\trawDirectionSnap(top, left, width1, height1, width2, height2, position, spacing),\n\t\t{ width: width2, height: height2, }, 5, screenSize\n\t);\n}\n\nexport function arrowSnap(width, height, arrowSize, parentPosition: SnappingDirection, padding = 15) {\n\tswitch (parentPosition) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop: padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t\topacity: 0,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tleft: -arrowSize,\n\t\t\ttop: padding,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tdefault:\n\t\treturn {};\n\t}\n}\n\nexport function directionAnimatedConfigs(\n\tdirection, translateDistance, animation, finalBorderRadius = 3\n) {\n\tconst borderRadius = animation.interpolate({\n\t\t\tinputRange: [0, 0.5, 1], outputRange: [50, 15, finalBorderRadius],\n\t\t}),\n\t\topacity = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\textrapolate: 'clamp',\n\t\t});\n\n\tswitch (direction) {\n\tcase 'top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\tborderRadius: { borderRadius, },\n\t\t\ttransform: [],\n\t\t\topacity,\n\t\t};\n\tdefault:\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\t}\n}\n",
        "gt": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/connectionMask.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/selector.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/configs/core/modal.js'",
            "'ruui/src/components/responsibleTouchArea.js'",
            "'ruui/src/components/rippleEffect.js'",
            "'ruui/src/configs/core/index.js'"
        ],
        "content": "'ruui/src/components/selector.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, TouchableWithoutFeedback, ScrollView, View, Text, StyleSheet } from 'react-native';\n\nimport ResponsibleTouchArea from './responsibleTouchArea';\nimport SelectorItem from './selectorItem';\nimport { isAndroid, colors } from '../utils';\nimport { screenWidthPadding } from '../utils/screen';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tconfigs?: Object,\n\tanimation?: any,\n\tactive?: boolean,\n\tdispatch?: Function,\n\tonRequestClose?: Function,\n};\n\nclass Selector extends Component<any, Props, any> {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiStore: PropTypes.object,\n\t};\n\n\tconstructor(props, context) {\n\t\tsuper(props);\n\t\tthis.store = context.ruuiStore;\n\t}\n\n\trender() {\n\t\tconst { animation, configs, active, onRequestClose } = this.props,\n\t\t\ttranslateY = animation.interpolate({\n\t\t\t\tinputRange: [0, 0.32, 1], outputRange: [maxContainerSize, maxContainerSize * 0.15, 0],\n\t\t\t}), selectionContainerStyles = {\n\t\t\t\ttransform: [{ translateY }],\n\t\t\t},\n\t\t\tOptionWrapperElement = configs.options.length > 5 ? ScrollView : View,\n\t\t\tpointerEvents = active ? 'auto' : 'none';\n\n\t\treturn <View pointerEvents={pointerEvents} style={styles.container}>\n\t\t\t{configs.tapToClose ? <TouchableWithoutFeedback\n\t\t\t\tonPress={() => onRequestClose(configs)}>\n\t\t\t\t<View style={styles.touchableMask}/>\n\t\t\t</TouchableWithoutFeedback> : <View/>}\n\n\t\t\t<Animated.View\n\t\t\t\tstyle={[styles.selectionContainer, selectionContainerStyles]}>\n\t\t\t\t<View style={styles.optionWrapper}>\n\t\t\t\t\t<View style={styles.selectTitle}>\n\t\t\t\t\t\t<Text style={styles.selectTitleText}>\n\t\t\t\t\t\t\t{configs.selectText}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</View>\n\t\t\t\t\t<View style={{ maxHeight: 255 }}>\n\t\t\t\t\t\t<OptionWrapperElement style={{ backgroundColor: '#f9f9f9' }}>\n\t\t\t\t\t\t\t{this.renderOptions()}\n\t\t\t\t\t\t</OptionWrapperElement>\n\t\t\t\t\t\t{!isAndroid && <View style={styles.optionTails}/>}\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t\t<View style={styles.commandWrapper}>\n\t\t\t\t\t{this.renderCommands()}\n\t\t\t\t</View>\n\t\t\t</Animated.View>\n\t\t</View>;\n\t}\n\n\trenderOptions() {\n\t\tconst { configs } = this.props,\n\t\t\t{ options = [] } = configs;\n\n\t\treturn options.map((item, i) => {\n\t\t\treturn <SelectorItem\n\t\t\t\tkey={i}\n\t\t\t\toptionInstance={item}\n\t\t\t\tactiveInstance={configs.value}\n\t\t\t\tgetTitle={configs.getTitle}\n\t\t\t\tonPress={this.onItemPick}/>;\n\t\t});\n\t}\n\n\trenderCommands() {\n\t\tconst { configs } = this.props;\n\n\t\treturn <ResponsibleTouchArea\n\t\t\tonPress={this.cancelSelector}\n\t\t\trippleColor={colors.iOsBlue}\n\t\t\twrapperStyle={[styles.commandItemWrapper]}\n\t\t\tinnerStyle={styles.optionItemInner}\n\t\t\tfadeLevel={0.04}>\n\t\t\t<Text style={styles.commandTitle}>\n\t\t\t\t{configs.cancelText}\n\t\t\t</Text>\n\t\t</ResponsibleTouchArea>;\n\t}\n\n\tonItemPick = (item) => {\n\t\tconst { configs } = this.props;\n\n\t\tthis.store.dispatch(appActions.toggleSelector(false));\n\t\tif (configs.onSelect) configs.onSelect(item);\n\t\tif (configs.onChange\n\t\t\t&& JSON.stringify(configs.value) !== JSON.stringify(item)) {\n\t\t\tconfigs.onChange(item);\n\t\t}\n\t};\n\n\tcancelSelector = () => {\n\t\tconst { configs } = this.props;\n\n\t\tthis.store.dispatch(appActions.toggleSelector(false, {\n\t\t\tid: configs.id,\n\t\t}));\n\t\tif (configs.onCancel) configs.onCancel();\n\t}\n}\n\nexport default Selector;\n\nconst maxContainerSize = 500,\n\tselectorRadius = isAndroid ? 3 : 8,\n\tborderWidth = isAndroid ? 0 : 1,\n\tselectorMargin = 20,\n\tselectorPadding = isAndroid ? 20 : 8,\n\tselectionAlign = isAndroid ? 'left' : 'center';\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t},\n\tselectionContainer: {\n\t\tposition: 'absolute',\n\t\tbottom: 0, left: 0, right: 0,\n\t\tmaxHeight: maxContainerSize,\n\t\talignItems: 'center',\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n\tselectTitle: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#f9f9f9',\n\t\tborderTopLeftRadius: selectorRadius,\n\t\tborderTopRightRadius: selectorRadius,\n\t\tborderBottomWidth: borderWidth,\n\t\tborderColor: '#dedede',\n\t},\n\tselectTitleText: {\n\t\tpadding: selectorPadding,\n\t\tpaddingTop: 9, paddingBottom: 9,\n\t\ttextAlign: selectionAlign,\n\t\tcolor: '#8f8f8f', backgroundColor: 'transparent',\n\t\tfontSize: 14, fontWeight: '300',\n\t},\n\toptionWrapper: {\n\t\tmargin: selectorMargin,\n\t\tmarginBottom: isAndroid ? 0 : selectorMargin / 2,\n\t\twidth: screenWidthPadding(selectorMargin, 400),\n\t},\n\toptionItemInner: {\n\t\tpadding: selectorPadding,\n\t\tpaddingTop: 12, paddingBottom: 12,\n\t},\n\toptionTails: {\n\t\theight: selectorRadius,\n\t\tbackgroundColor: '#f9f9f9',\n\t\tborderBottomLeftRadius: selectorRadius,\n\t\tborderBottomRightRadius: selectorRadius,\n\t},\n\tcommandWrapper: {\n\t\tmargin: selectorMargin,\n\t\tmarginTop: 0,\n\t\tborderRadius: selectorRadius,\n\t\tborderTopLeftRadius: isAndroid ? 0 : selectorRadius,\n\t\tborderTopRightRadius: isAndroid ? 0 : selectorRadius,\n\t\tbackgroundColor: isAndroid ? '#f9f9f9' : 'transparent',\n\t\toverflow: 'hidden',\n\t\twidth: screenWidthPadding(selectorMargin, 400),\n\t},\n\tcommandItemWrapper: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#f5f5f5',\n\t\tborderBottomWidth: borderWidth,\n\t\tborderColor: '#dedede',\n\t\tborderRadius: selectorRadius,\n\t},\n\tcommandTitle: {\n\t\tcolor: colors.iOsBlue,\n\t\tfontSize: 17,\n\t\ttextAlign: isAndroid ? 'center' : 'center',\n\t\tbackgroundColor: 'transparent',\n\t},\n});\n\n'ruui/src/components/modal.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, View, StyleSheet } from 'react-native';\n\nimport Selector from './selector';\nimport LoadingMask from './loadingMask';\nimport CloseableModal from './closeableModal';\nimport { valueAt } from '../utils';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tactive?: any,\n\ttype?: string,\n\tconfigs?: Object,\n\tmodalCount?: number,\n\tdispatch?: Function,\n\tanimationDelay?: Number,\n};\n\nexport default class RuuiModal extends Component {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactive: props.active,\n\t\t};\n\t\tthis.enterAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { active, animationDelay, } = this.props;\n\t\tsetTimeout(() => this.playTransition(active), animationDelay);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { active } = this.props;\n\t\tif (prevProps.active !== active) {\n\t\t\tthis.playTransition(active);\n\t\t}\n\t}\n\n\tplayTransition(active) {\n\t\tconst { configs = {}, } = this.props;\n\t\tconst nextValue = active ? 1 : 0;\n\n\t\tif (!active) {\n\t\t\tif (configs.instantClose) {\n\t\t\t\tthis.setState({ active: null });\n\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t} else {\n\t\t\t\tthis.playAnimation(nextValue, () => {\n\t\t\t\t\tthis.setState({ active: null });\n\t\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState({ active });\n\t\t\tthis.playAnimation(nextValue);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { configs = {}, modalCount, type: modalType } = this.props,\n\t\t\t{ active } = this.state,\n\t\t\tglobalConfigs = valueAt(this, 'context.ruuiConfigs.modal'),\n\t\t\tcontainerPropsGenerator = configs.maskProps || globalConfigs.maskProps,\n\t\t\tcontainerProps = containerPropsGenerator(this.enterAnimation, configs, modalCount, modalType);\n\n\t\tif (configs.maskProps && !containerProps.style) {\n\t\t\tcontainerProps.style = globalConfigs.maskProps(\n\t\t\t\tthis.enterAnimation, configs, modalCount, modalType\n\t\t\t).style;\n\t\t}\n\n\t\treturn active ? <Animated.View {...containerProps}>\n\t\t\t<View style={styles.innerTouchable}>\n\t\t\t\t{this.renderModalInner()}\n\t\t\t</View>\n\t\t</Animated.View> : <View/>;\n\t}\n\n\trenderModalInner() {\n\t\tconst { dispatch, type: modalType, active, configs: modalConfigs } = this.props;\n\n\t\tswitch (modalType) {\n\t\tcase 'select':\n\t\t\treturn <Selector\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleSelector(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'modal':\n\t\t\treturn <CloseableModal\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleModal(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'loading':\n\t\t\treturn <LoadingMask\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tdefault:\n\t\t\treturn <View/>;\n\t\t}\n\t}\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: false,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport function defaultMaskPropsGenerator(animation, configs, modalCount, modalType) {\n\tconst averageOpacity = (0.8 / modalCount) + (modalCount * 0.1),\n\t\tbackgroundColor = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: ['rgba(0, 0, 0, 0)', `rgba(0, 0, 0, ${averageOpacity})`],\n\t\t}),\n\t\tstyle = [styles.container, {\n\t\t\tzIndex: configs.zIndex,\n\t\t\tbackgroundColor,\n\t\t}];\n\n\treturn { style, };\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n\tinnerTouchable: {\n\t\tflex: 1,\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n});\n\n'ruui/src/configs/core/modal.js'\n:import { defaultMaskPropsGenerator } from '../../components/modal';\nimport { defaultContainerPropsGenerator } from '../../components/closeableModal';\n\nexport default {\n\tmaskProps: defaultMaskPropsGenerator,\n\tcontainerProps: defaultContainerPropsGenerator,\n};\n'ruui/src/components/responsibleTouchArea.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, TouchableOpacity, View, StyleSheet, Platform } from 'react-native';\nimport tinyColor from 'tinycolor2';\n\nimport RippleEffect from './rippleEffect';\nimport { debounce, isIos, } from '../utils';\nimport * as appActions from '../store/action/app';\nimport type { Style, Element, SnappingDirection, } from '../typeDefinition';\n\ntype Props = {\n\tchildren?: Element,\n\twrapperStyle?: Style,\n\tinnerStyle?: Style,\n\ttooltip?: String | Element,\n\ttooltipWrapperStyle?: Style,\n\ttooltipInnerStyle?: Style,\n\ttooltipDirection?: SnappingDirection,\n\ttooltipPositionSpacing?: number,\n\ttooltipPositionOffset?: Object,\n\tripple?: boolean,\n\tstaticRipple?: boolean,\n\trippleColor?: string,\n\trippleInitialOpacity?: number,\n\trippleInitialScale?: number,\n\trippleAnimationSpeed?: number,\n\tfade?: boolean,\n\tfadeLevel?: number,\n\traise?: boolean,\n\tdebounce?: number,\n\tdisabled?: boolean,\n\tactiveOpacity?: number,\n\tonPress?: Function,\n\tonPressIn?: Function,\n\tonPressOut?: Function,\n\tonMouseEnter?: Function,\n\tonMouseLeave?: Function,\n};\n\nconst MAX_PARTICLE_COUNT = 5;\n\nclass RuuiResponsibleTouchArea extends Component<any, Props, any> {\n\tprops: Props;\n\n\tstatic contextTypes = {\n\t\truuiStore: PropTypes.object,\n\t};\n\n\tstatic defaultProps = {\n\t\tstaticRipple: false,\n\t\tactiveOpacity: 0.7,\n\t\tripple: true,\n\t\traise: false,\n\t\tfade: false,\n\t\tfadeLevel: 0.1,\n\t\tdisabled: false,\n\t};\n\n\trippleIndex = 0;\n\n\tcomponentWillUnmount() {\n\t\tthis.willUnmount = true;\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tripples: [],\n\t\t\tmouseInside: false,\n\t\t};\n\n\t\tthis.raiseAnimation = new Animated.Value(0);\n\t\tthis.fadeAnimation = new Animated.Value(0);\n\n\t\tif (props.debounce) {\n\t\t\tthis.handlePress = debounce(this.handlePress.bind(this), props.debounce);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { children, wrapperStyle, innerStyle, disabled, onPressIn, onPressOut, onPress, ripple, fade, fadeLevel, raise, ...otherProps } = this.props,\n\t\t\tflattenWrapperStyles = StyleSheet.flatten(wrapperStyle) || {},\n\t\t\tplatformStyles = Platform.select({\n\t\t\t\tweb: { cursor: 'pointer', userSelect: 'none' },\n\t\t\t}),\n\t\t\tisLightBackground = tinyColor(flattenWrapperStyles.backgroundColor).getBrightness() > 180,\n\t\t\twrapperBorderRadius = extractBorderRadius(flattenWrapperStyles);\n\n\t\treturn <View\n\t\t\tonMouseLeave={this.onMouseLeave}\n\t\t\tonMouseEnter={this.onMouseEnter}\n\t\t\tref={(instance) => { this.wrapperView = instance; }}\n\t\t\tcollapsable={false}\n\t\t\tstyle={[wrapperStyle, platformStyles]}>\n\n\t\t\t{raise && this.renderShadowEffect(raise, isLightBackground, wrapperBorderRadius)}\n\t\t\t{fade && this.renderFadeEffect(fade, fadeLevel, isLightBackground, wrapperBorderRadius)}\n\t\t\t{ripple && this.renderRippleEffect(isLightBackground, wrapperBorderRadius)}\n\n\t\t\t<TouchableOpacity\n\t\t\t\tdisabled={disabled}\n\t\t\t\tstyle={innerStyle}\n\t\t\t\tonPressIn={this.onPressIn}\n\t\t\t\tonPressOut={this.onPressOut}\n\t\t\t\tonPress={this.onPress}\n\t\t\t\tonStartShouldSetResponderCapture={() => !disabled}\n\t\t\t\t{...otherProps}>\n\t\t\t\t<View pointerEvents=\"none\">\n\t\t\t\t\t{children}\n\t\t\t\t</View>\n\t\t\t</TouchableOpacity>\n\t\t</View>;\n\t}\n\n\trenderShadowEffect(raise: Boolean, isLightBackground: Boolean, wrapperBorderRadius) {\n\t\tconst shadowOpacity = this.raiseAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1], outputRange: [raise ? 0.15 : 0, 0.6],\n\t\t\t}),\n\t\t\tshadow = raise && {\n\t\t\t\tborderRadius: 3,\n\t\t\t\tshadowColor: '#666666',\n\t\t\t\topacity: shadowOpacity,\n\t\t\t\tshadowOpacity: 1,\n\t\t\t\tshadowRadius: raiseShadowRadius,\n\t\t\t\tshadowOffset: { width: 0, height: 2 },\n\t\t\t};\n\n\t\treturn <Animated.View\n\t\t\tstyle={[styles.fullSizeAbsolute, shadow, wrapperBorderRadius]}/>;\n\t}\n\n\trenderFadeEffect(fade, fadeLevel, isLightBackground: Boolean, wrapperBorderRadius) {\n\t\tconst opacity = this.fadeAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1],\n\t\t\t\toutputRange: [0, fadeLevel],\n\t\t\t\textrapolate: 'clamp',\n\t\t\t}),\n\t\t\tmaskStyles = {\n\t\t\t\tbackgroundColor: isLightBackground ? '#000000' : '#ffffff',\n\t\t\t\topacity,\n\t\t\t};\n\n\t\treturn <Animated.View style={[styles.fullSizeAbsolute, wrapperBorderRadius, maskStyles]}/>;\n\t}\n\n\trenderRippleEffect(isLightBackground: Boolean, wrapperBorderRadius) {\n\t\treturn <View style={[styles.fullSizeAbsolute, wrapperBorderRadius, { overflow: 'hidden' }]}>\n\t\t\t{this.renderRipples()}\n\t\t</View>;\n\t}\n\n\trenderRipples() {\n\t\tconst { ripples } = this.state,\n\t\t\t{ rippleInitialOpacity, rippleInitialScale, rippleAnimationSpeed } = this.props;\n\n\t\treturn ripples.map((ripple) => {\n\t\t\treturn <RippleEffect\n\t\t\t\tkey={ripple.index}\n\t\t\t\tstyle={ripple.style}\n\t\t\t\tindex={ripple.index}\n\t\t\t\tinitialOpacity={rippleInitialOpacity}\n\t\t\t\tinitialScale={rippleInitialScale}\n\t\t\t\tspeed={rippleAnimationSpeed}/>;\n\t\t});\n\t}\n\n\tonPress = (e) => {\n\t\tconst { onPress } = this.props;\n\t\tif (onPress) setTimeout(() => onPress(e), 0);\n\t};\n\n\tonPressIn = (e) => {\n\t\tconst { ripples } = this.state,\n\t\t\t{ wrapperStyle, disabled, raise, staticRipple, rippleColor, onPressIn } = this.props;\n\n\t\tif (disabled) return;\n\n\t\tconst flattenWrapperStyles = StyleSheet.flatten(wrapperStyle) || {},\n\t\t\tisLightBackground = tinyColor(flattenWrapperStyles.backgroundColor).getBrightness() > 180;\n\n\t\tif (raise) this.playRaiseAnimation(1);\n\n\t\tthis.playFadeAnimation(1);\n\n\t\tconst { locationX, locationY, offsetX, offsetY, pageX, pageY } = e.nativeEvent;\n\n\t\tthis.wrapperView.measure((fx, fy, wrapperWidth, wrapperHeight, px, py) => {\n\t\t\tlet rippleRadius = 0, ripplePosition;\n\t\t\tconst touchX = locationX || offsetX, touchY = locationY || offsetY;\n\n\t\t\tif (staticRipple || !touchX) {\n\t\t\t\trippleRadius = wrapperWidth / 2;\n\t\t\t\tripplePosition = {\n\t\t\t\t\ttop: (wrapperHeight / 2) - rippleRadius,\n\t\t\t\t\tleft: (wrapperWidth / 2) - rippleRadius,\n\t\t\t\t};\n\t\t\t} else {\n\n\t\t\t\tif (touchX > wrapperWidth / 2) {\n\t\t\t\t\tif (touchY > wrapperHeight / 2) {\n\n\t\t\t\t\t\trippleRadius = Math.sqrt((touchX * touchX) + (touchY * touchY));\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst paddedY = touchY - wrapperHeight;\n\t\t\t\t\t\trippleRadius = Math.sqrt((touchX * touchX) + (paddedY * paddedY));\n\t\t\t\t\t}\n\t\t\t\t} else if (touchY > wrapperHeight / 2) {\n\n\t\t\t\t\tconst paddedX = touchX - wrapperWidth;\n\t\t\t\t\trippleRadius = Math.sqrt((paddedX * paddedX) + (touchY * touchY));\n\t\t\t\t} else {\n\n\t\t\t\t\tconst paddedX = touchX - wrapperWidth, paddedY = touchY - wrapperHeight;\n\t\t\t\t\trippleRadius = Math.sqrt((paddedX * paddedX) + (paddedY * paddedY));\n\t\t\t\t}\n\n\t\t\t\trippleRadius *= 1.2;\n\t\t\t\tripplePosition = {\n\t\t\t\t\ttop: touchY - rippleRadius,\n\t\t\t\t\tleft: touchX - rippleRadius,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.rippleIndex += 1;\n\t\t\tconst defaultRippleColor = isLightBackground ? '#333333' : '#ffffff',\n\t\t\t\tnewRipple = {\n\t\t\t\t\tindex: this.rippleIndex,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\twidth: rippleRadius * 2,\n\t\t\t\t\t\theight: rippleRadius * 2,\n\t\t\t\t\t\tborderRadius: rippleRadius,\n\t\t\t\t\t\tbackgroundColor: rippleColor || defaultRippleColor,\n\t\t\t\t\t\t...ripplePosition,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tlet nextRipples = [newRipple, ...ripples];\n\n\t\t\tif (nextRipples.length > MAX_PARTICLE_COUNT) {\n\t\t\t\tnextRipples = nextRipples.slice(0, MAX_PARTICLE_COUNT);\n\t\t\t}\n\n\t\t\tif (!this.willUnmount) this.setState({ ripples: nextRipples });\n\t\t});\n\n\t\tif (onPressIn) onPressIn(e);\n\t};\n\n\tonPressOut = (e, forceFade = false) => {\n\t\tconst { mouseInside } = this.state,\n\t\t\t{ raise, onPressOut } = this.props;\n\n\t\tif (raise) this.playRaiseAnimation(0);\n\t\tif (onPressOut && e) onPressOut(e);\n\n\t\tif (forceFade === true || !mouseInside) {\n\t\t\tthis.playFadeAnimation(0);\n\t\t}\n\t};\n\n\tonMouseEnter = () => {\n\t\tconst { ruuiStore } = this.context;\n\t\tconst { disabled, tooltip, tooltipWrapperStyle, tooltipInnerStyle, tooltipDirection, tooltipPositionSpacing, tooltipPositionOffset } = this.props;\n\n\t\tthis.setState({ mouseInside: true });\n\n\t\tif (!disabled) {\n\t\t\tthis.playFadeAnimation(1);\n\n\t\t\tif (tooltip) {\n\t\t\t\tthis.wrapperView.measure((x, y, width, height, pageX, pageY) => {\n\t\t\t\t\truuiStore.dispatch(appActions.toggleTooltip(true, {\n\t\t\t\t\t\ttargetLayout: { x: pageX, y: pageY, width, height },\n\t\t\t\t\t\tdirection: tooltipDirection,\n\t\t\t\t\t\tpositionSpacing: tooltipPositionSpacing,\n\t\t\t\t\t\tpositionOffset: tooltipPositionOffset,\n\t\t\t\t\t\tcontent: tooltip,\n\t\t\t\t\t\twrapperStyle: tooltipWrapperStyle,\n\t\t\t\t\t\tinnerStyle: tooltipInnerStyle,\n\t\t\t\t\t}));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tonMouseLeave = () => {\n\t\tconst { ruuiStore } = this.context;\n\t\tconst { disabled, tooltip } = this.props;\n\n\t\tthis.onPressOut(null, true);\n\t\tthis.setState({ mouseInside: false });\n\n\t\tif (!disabled && tooltip) {\n\t\t\truuiStore.dispatch(appActions.toggleTooltip(false));\n\t\t}\n\t};\n\n\tplayRaiseAnimation = (toValue: Number) => {\n\t\tif (this.raisingAnimation) this.raisingAnimation.clear();\n\n\t\tconst animations = [\n\t\t\tAnimated.timing(this.raiseAnimation, {\n\t\t\t\ttoValue,\n\t\t\t\tduration: 500,\n\t\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\t\tuseNativeDriver: false,\n\t\t\t}),\n\t\t];\n\n\t\tthis.raisingAnimation = Animated.parallel(animations).start();\n\t};\n\n\tplayFadeAnimation = (toValue: Number) => {\n\t\tif (this.fadingAnimation) this.fadingAnimation.clear();\n\n\t\tthis.fadingAnimation = Animated.timing(this.fadeAnimation, {\n\t\t\ttoValue,\n\t\t\tduration: 800,\n\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\tuseNativeDriver: true,\n\t\t}).start();\n\t};\n}\n\nexport default RuuiResponsibleTouchArea;\n\nfunction extractBorderRadius(baseStyles) {\n\treturn [\n\t\t'borderRadius',\n\t\t'borderTopLeftRadius',\n\t\t'borderTopRightRadius',\n\t\t'borderBottomLeftRadius',\n\t\t'borderBottomRightRadius',\n\t].reduce((accumulate, currentAttribute) => {\n\t\tif (baseStyles[currentAttribute]) {\n\t\t\taccumulate[currentAttribute] = baseStyles[currentAttribute];\n\t\t}\n\n\t\treturn accumulate;\n\t}, {});\n}\n\nconst raiseShadowRadius = isIos ? 4 : 10;\nconst styles = StyleSheet.create({\n\tfullSizeAbsolute: {\n\t\tposition: 'absolute',\n\t\ttop: 0, bottom: 0, right: 0, left: 0,\n\t},\n});\n\n'ruui/src/components/rippleEffect.js'\n:import React, { Component } from 'react';\nimport { Animated, Easing } from 'react-native';\nimport { Style } from '../typeDefinition';\n\ntype Props = {\n\tinitialOpacity?: number,\n\tinitialScale?: number,\n\tspeed?: number,\n\tstyle: Style,\n};\n\nclass RuuiRippleEffect extends Component<any, Props, any> {\n\tprops: Props;\n\n\tstatic defaultProps = {\n\t\tinitialOpacity: 0.2,\n\t\tinitialScale: 0.02,\n\t\tspeed: 800,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.expandAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tAnimated.timing(this.expandAnimation, {\n\t\t\ttoValue: 1,\n\t\t\tduration: this.props.speed,\n\t\t\teasing: Easing.out(Easing.bezier(0.445, 0.05, 0.55, 0.95)),\n\t\t\tuseNativeDriver: true,\n\t\t}).start();\n\t}\n\n\trender() {\n\t\tconst { style, initialScale, initialOpacity } = this.props,\n\t\t\topacity = this.expandAnimation.interpolate({\n\t\t\t\tinputRange: [0, 0.5, 1], outputRange: [initialOpacity, 0.1, 0],\n\t\t\t}), scale = this.expandAnimation.interpolate({\n\t\t\t\tinputRange: [0, 0.1, 0.5, 1], outputRange: [initialScale, 0.4, 0.8, 1],\n\t\t\t}), styles = {\n\t\t\t\t...style,\n\t\t\t\tposition: 'absolute',\n\t\t\t\ttransform: [{ scale }],\n\t\t\t\topacity,\n\t\t\t};\n\n\t\treturn <Animated.View pointerEvents=\"none\" style={styles}/>;\n\t}\n}\n\nexport default RuuiRippleEffect;\n\n'ruui/src/configs/core/index.js'\n:import button from './button';\nimport modal from './modal';\n\nexport default {\n\tbutton,\n\tmodal,\n};",
        "gt": [
            "'ruui/src/components/rippleEffect.js'",
            "'ruui/src/components/responsibleTouchArea.js'",
            "'ruui/src/components/selector.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/configs/core/modal.js'",
            "'ruui/src/configs/core/index.js'"
        ]
    },
    {
        "files": [
            "'react-modal/specs/helper.js'",
            "'react-modal/src/components/Modal.js'",
            "'react-modal/src/helpers/scopeTab.js'",
            "'react-modal/src/components/ModalPortal.js'",
            "'react-modal/specs/Modal.style.spec.js'",
            "'react-modal/specs/index.js'"
        ],
        "content": "'react-modal/specs/helper.js'\n:import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Modal, { bodyOpenClassName } from \"../src/components/Modal\";\nimport TestUtils from \"react-dom/test-utils\";\nimport { log as classListLog } from \"../src/helpers/classList\";\nimport { log as focusManagerLog } from \"../src/helpers/focusManager\";\nimport { log as ariaAppLog } from \"../src/helpers/ariaAppHider\";\nimport { log as bodyTrapLog } from \"../src/helpers/bodyTrap\";\nimport { log as portalInstancesLog } from \"../src/helpers/portalOpenInstances\";\n\nconst debug = false;\n\nlet i = 0;\n\n\nexport function log(label, spaces) {\n  if (!debug) return;\n\n  console.log(`${label} -----------------`);\n  console.log(document.body.children.length);\n  const logChildren = c => console.log(c.nodeName, c.className, c.id);\n  document.body.children.forEach(logChildren);\n\n  ariaAppLog();\n  bodyTrapLog();\n  classListLog();\n  focusManagerLog();\n  portalInstancesLog();\n\n  console.log(`end ${label} -----------------` + (!spaces ? '' : `\n\n\n`));\n}\n\nlet elementPool = [];\n\n\nexport function createHTMLElement(name) {\n  const e = document.createElement(name);\n  elementPool[elementPool.length - 1].push(e);\n  e.className = `element_pool_${name}-${++i}`;\n  return e;\n}\n\n\nexport function drainPool(pool) {\n  pool.forEach(e => e.parentNode && e.parentNode.removeChild(e));\n}\n\n\nexport function withElementCollector(work) {\n  let r;\n  let poolIndex = elementPool.length;\n  elementPool[poolIndex] = [];\n  try {\n    r = work();\n  } finally {\n    drainPool(elementPool[poolIndex]);\n    elementPool = elementPool.slice(\n      0, poolIndex\n    );\n  }\n  return r;\n}\n\n\nif (!String.prototype.includes) {\n  String.prototype.includes = function(search, start) {\n    if (typeof start !== \"number\") {\n      start = 0;\n    }\n\n    if (start + search.length > this.length) {\n      return false;\n    }\n\n    return this.indexOf(search, start) !== -1;\n  };\n}\n\n\nexport const documentClassList = () => document.body.classList;\n\n\nexport const isDocumentWithReactModalOpenClass = (\n  bodyClass = bodyOpenClassName\n) => document.body.className.includes(bodyClass);\n\n\nexport const htmlClassList = () =>\n  document.getElementsByTagName(\"html\")[0].classList;\n\n\nexport const isHtmlWithReactModalOpenClass = htmlClass =>\n  htmlClassList().contains(htmlClass);\n\n\nexport const findDOMWithClass = TestUtils.findRenderedDOMComponentWithClass;\n\n\nconst getModalAttribute = component => (instance, attr) =>\n  modalComponent(component)(instance).getAttribute(attr);\n\n\nconst modalComponent = component => instance => instance.portal[component];\n\n\nexport const mcontent = modalComponent(\"content\");\n\n\nexport const moverlay = modalComponent(\"overlay\");\n\n\nexport const contentAttribute = getModalAttribute(\"content\");\n\n\nexport const overlayAttribute = getModalAttribute(\"overlay\");\n\nconst Simulate = TestUtils.Simulate;\n\nconst dispatchMockEvent = eventCtor => (key, code) => (element, opts) =>\n  eventCtor(\n    element,\n    Object.assign(\n      {},\n      {\n        key: key,\n        which: code\n      },\n      code,\n      opts\n    )\n  );\n\nconst dispatchMockKeyDownEvent = dispatchMockEvent(Simulate.keyDown);\n\n\nexport const escKeyDown = dispatchMockKeyDownEvent(\"ESC\", { keyCode: 27 });\n\nexport const escKeyDownWithCode = dispatchMockKeyDownEvent(\"ESC\", {\n  code: \"Escape\"\n});\n\nexport const tabKeyDown = dispatchMockKeyDownEvent(\"TAB\", { keyCode: 9 });\n\nexport const tabKeyDownWithCode = dispatchMockKeyDownEvent(\"TAB\", {\n  code: \"Tab\"\n});\n\nexport const clickAt = Simulate.click;\n\nexport const mouseUpAt = Simulate.mouseUp;\n\nexport const mouseDownAt = Simulate.mouseDown;\n\nexport const noop = () => {};\n\n\nexport const withModal = function(props, children, test = noop) {\n  return withElementCollector(() => {\n    const node = createHTMLElement();\n    const modalProps = { ariaHideApp: false, ...props };\n    let modal;\n    try {\n      ReactDOM.render(\n        <Modal ref={m => (modal = m)} {...modalProps}>\n          {children}\n        </Modal>,\n        node\n      );\n      test(modal);\n    } finally {\n      ReactDOM.unmountComponentAtNode(node);\n    }\n  });\n};\n\n'react-modal/src/components/Modal.js'\n:import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport ModalPortal from \"./ModalPortal\";\nimport * as ariaAppHider from \"../helpers/ariaAppHider\";\nimport SafeHTMLElement, {\n  SafeNodeList,\n  SafeHTMLCollection,\n  canUseDOM\n} from \"../helpers/safeHTMLElement\";\n\nimport { polyfill } from \"react-lifecycles-compat\";\n\nexport const portalClassName = \"ReactModalPortal\";\nexport const bodyOpenClassName = \"ReactModal__Body--open\";\n\nconst isReact16 = canUseDOM && ReactDOM.createPortal !== undefined;\n\nlet createHTMLElement = name => document.createElement(name);\n\nconst getCreatePortal = () =>\n  isReact16\n    ? ReactDOM.createPortal\n    : ReactDOM.unstable_renderSubtreeIntoContainer;\n\nfunction getParentElement(parentSelector) {\n  return parentSelector();\n}\n\nclass Modal extends Component {\n  static setAppElement(element) {\n    ariaAppHider.setElement(element);\n  }\n\n\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    style: PropTypes.shape({\n      content: PropTypes.object,\n      overlay: PropTypes.object\n    }),\n    portalClassName: PropTypes.string,\n    bodyOpenClassName: PropTypes.string,\n    htmlOpenClassName: PropTypes.string,\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        base: PropTypes.string.isRequired,\n        afterOpen: PropTypes.string.isRequired,\n        beforeClose: PropTypes.string.isRequired\n      })\n    ]),\n    overlayClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        base: PropTypes.string.isRequired,\n        afterOpen: PropTypes.string.isRequired,\n        beforeClose: PropTypes.string.isRequired\n      })\n    ]),\n    appElement: PropTypes.oneOfType([\n      PropTypes.instanceOf(SafeHTMLElement),\n      PropTypes.instanceOf(SafeHTMLCollection),\n      PropTypes.instanceOf(SafeNodeList),\n      PropTypes.arrayOf(PropTypes.instanceOf(SafeHTMLElement))\n    ]),\n    onAfterOpen: PropTypes.func,\n    onRequestClose: PropTypes.func,\n    closeTimeoutMS: PropTypes.number,\n    ariaHideApp: PropTypes.bool,\n    shouldFocusAfterRender: PropTypes.bool,\n    shouldCloseOnOverlayClick: PropTypes.bool,\n    shouldReturnFocusAfterClose: PropTypes.bool,\n    preventScroll: PropTypes.bool,\n    parentSelector: PropTypes.func,\n    aria: PropTypes.object,\n    data: PropTypes.object,\n    role: PropTypes.string,\n    contentLabel: PropTypes.string,\n    shouldCloseOnEsc: PropTypes.bool,\n    overlayRef: PropTypes.func,\n    contentRef: PropTypes.func,\n    id: PropTypes.string,\n    overlayElement: PropTypes.func,\n    contentElement: PropTypes.func\n  };\n\n\n  static defaultProps = {\n    isOpen: false,\n    portalClassName,\n    bodyOpenClassName,\n    role: \"dialog\",\n    ariaHideApp: true,\n    closeTimeoutMS: 0,\n    shouldFocusAfterRender: true,\n    shouldCloseOnEsc: true,\n    shouldCloseOnOverlayClick: true,\n    shouldReturnFocusAfterClose: true,\n    preventScroll: false,\n    parentSelector: () => document.body,\n    overlayElement: (props, contentEl) => <div {...props}>{contentEl}</div>,\n    contentElement: (props, children) => <div {...props}>{children}</div>\n  };\n\n  static defaultStyles = {\n    overlay: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: \"rgba(255, 255, 255, 0.75)\"\n    },\n    content: {\n      position: \"absolute\",\n      top: \"40px\",\n      left: \"40px\",\n      right: \"40px\",\n      bottom: \"40px\",\n      border: \"1px solid #ccc\",\n      background: \"#fff\",\n      overflow: \"auto\",\n      WebkitOverflowScrolling: \"touch\",\n      borderRadius: \"4px\",\n      outline: \"none\",\n      padding: \"20px\"\n    }\n  };\n\n  componentDidMount() {\n    if (!canUseDOM) return;\n\n    if (!isReact16) {\n      this.node = createHTMLElement(\"div\");\n    }\n    this.node.className = this.props.portalClassName;\n\n    const parent = getParentElement(this.props.parentSelector);\n    parent.appendChild(this.node);\n\n    !isReact16 && this.renderPortal(this.props);\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    const prevParent = getParentElement(prevProps.parentSelector);\n    const nextParent = getParentElement(this.props.parentSelector);\n    return { prevParent, nextParent };\n  }\n\n  componentDidUpdate(prevProps, _, snapshot) {\n    if (!canUseDOM) return;\n    const { isOpen, portalClassName } = this.props;\n\n    if (prevProps.portalClassName !== portalClassName) {\n      this.node.className = portalClassName;\n    }\n\n    const { prevParent, nextParent } = snapshot;\n    if (nextParent !== prevParent) {\n      prevParent.removeChild(this.node);\n      nextParent.appendChild(this.node);\n    }\n\n\n    if (!prevProps.isOpen && !isOpen) return;\n\n    !isReact16 && this.renderPortal(this.props);\n  }\n\n  componentWillUnmount() {\n    if (!canUseDOM || !this.node || !this.portal) return;\n\n    const state = this.portal.state;\n    const now = Date.now();\n    const closesAt =\n      state.isOpen &&\n      this.props.closeTimeoutMS &&\n      (state.closesAt || now + this.props.closeTimeoutMS);\n\n    if (closesAt) {\n      if (!state.beforeClose) {\n        this.portal.closeWithTimeout();\n      }\n\n      setTimeout(this.removePortal, closesAt - now);\n    } else {\n      this.removePortal();\n    }\n  }\n\n  removePortal = () => {\n    !isReact16 && ReactDOM.unmountComponentAtNode(this.node);\n    const parent = getParentElement(this.props.parentSelector);\n    if (parent && parent.contains(this.node)) {\n      parent.removeChild(this.node);\n    } else {\n\n      console.warn(\n        'React-Modal: \"parentSelector\" prop did not returned any DOM ' +\n          \"element. Make sure that the parent element is unmounted to \" +\n          \"avoid any memory leaks.\"\n      );\n    }\n  };\n\n  portalRef = ref => {\n    this.portal = ref;\n  };\n\n  renderPortal = props => {\n    const createPortal = getCreatePortal();\n    const portal = createPortal(\n      this,\n      <ModalPortal defaultStyles={Modal.defaultStyles} {...props} />,\n      this.node\n    );\n    this.portalRef(portal);\n  };\n\n  render() {\n    if (!canUseDOM || !isReact16) {\n      return null;\n    }\n\n    if (!this.node && isReact16) {\n      this.node = createHTMLElement(\"div\");\n    }\n\n    const createPortal = getCreatePortal();\n    return createPortal(\n      <ModalPortal\n        ref={this.portalRef}\n        defaultStyles={Modal.defaultStyles}\n        {...this.props}\n      />,\n      this.node\n    );\n  }\n}\n\npolyfill(Modal);\n\nif (process.env.NODE_ENV !== \"production\") {\n  Modal.setCreateHTMLElement = fn => (createHTMLElement = fn);\n}\n\nexport default Modal;\n\n'react-modal/src/helpers/scopeTab.js'\n:import findTabbable from \"./tabbable\";\n\nfunction getActiveElement(el = document) {\n  return el.activeElement.shadowRoot\n    ? getActiveElement(el.activeElement.shadowRoot)\n    : el.activeElement;\n}\n\nexport default function scopeTab(node, event) {\n  const tabbable = findTabbable(node);\n\n  if (!tabbable.length) {\n\n    event.preventDefault();\n    return;\n  }\n\n  let target;\n\n  const shiftKey = event.shiftKey;\n  const head = tabbable[0];\n  const tail = tabbable[tabbable.length - 1];\n  const activeElement = getActiveElement();\n\n\n\n  if (node === activeElement) {\n    if (!shiftKey) return;\n    target = tail;\n  }\n\n  if (tail === activeElement && !shiftKey) {\n    target = head;\n  }\n\n  if (head === activeElement && shiftKey) {\n    target = tail;\n  }\n\n  if (target) {\n    event.preventDefault();\n    target.focus();\n    return;\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n  const checkSafari = /(\\bChrome\\b|\\bSafari\\b)\\\n  const isSafariDesktop =\n    checkSafari != null &&\n    checkSafari[1] != \"Chrome\" &&\n    /\\biPod\\b|\\biPad\\b/g.exec(navigator.userAgent) == null;\n\n\n\n  if (!isSafariDesktop) return;\n\n  var x = tabbable.indexOf(activeElement);\n\n  if (x > -1) {\n    x += shiftKey ? -1 : 1;\n  }\n\n  target = tabbable[x];\n\n\n\n  if (typeof target === \"undefined\") {\n    event.preventDefault();\n    target = shiftKey ? tail : head;\n    target.focus();\n    return;\n  }\n\n  event.preventDefault();\n\n  target.focus();\n}\n\n'react-modal/src/components/ModalPortal.js'\n:import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as focusManager from \"../helpers/focusManager\";\nimport scopeTab from \"../helpers/scopeTab\";\nimport * as ariaAppHider from \"../helpers/ariaAppHider\";\nimport * as classList from \"../helpers/classList\";\nimport SafeHTMLElement, {\n  SafeHTMLCollection,\n  SafeNodeList\n} from \"../helpers/safeHTMLElement\";\nimport portalOpenInstances from \"../helpers/portalOpenInstances\";\nimport \"../helpers/bodyTrap\";\n\n\nconst CLASS_NAMES = {\n  overlay: \"ReactModal__Overlay\",\n  content: \"ReactModal__Content\"\n};\n\n\nconst isTabKey = event => event.code === \"Tab\" || event.keyCode === 9;\nconst isEscKey = event => event.code === \"Escape\" || event.keyCode === 27;\n\nlet ariaHiddenInstances = 0;\n\nexport default class ModalPortal extends Component {\n  static defaultProps = {\n    style: {\n      overlay: {},\n      content: {}\n    },\n    defaultStyles: {}\n  };\n\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    defaultStyles: PropTypes.shape({\n      content: PropTypes.object,\n      overlay: PropTypes.object\n    }),\n    style: PropTypes.shape({\n      content: PropTypes.object,\n      overlay: PropTypes.object\n    }),\n    className: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    overlayClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    parentSelector: PropTypes.func,\n    bodyOpenClassName: PropTypes.string,\n    htmlOpenClassName: PropTypes.string,\n    ariaHideApp: PropTypes.bool,\n    appElement: PropTypes.oneOfType([\n      PropTypes.instanceOf(SafeHTMLElement),\n      PropTypes.instanceOf(SafeHTMLCollection),\n      PropTypes.instanceOf(SafeNodeList),\n      PropTypes.arrayOf(PropTypes.instanceOf(SafeHTMLElement))\n    ]),\n    onAfterOpen: PropTypes.func,\n    onAfterClose: PropTypes.func,\n    onRequestClose: PropTypes.func,\n    closeTimeoutMS: PropTypes.number,\n    shouldFocusAfterRender: PropTypes.bool,\n    shouldCloseOnOverlayClick: PropTypes.bool,\n    shouldReturnFocusAfterClose: PropTypes.bool,\n    preventScroll: PropTypes.bool,\n    role: PropTypes.string,\n    contentLabel: PropTypes.string,\n    aria: PropTypes.object,\n    data: PropTypes.object,\n    children: PropTypes.node,\n    shouldCloseOnEsc: PropTypes.bool,\n    overlayRef: PropTypes.func,\n    contentRef: PropTypes.func,\n    id: PropTypes.string,\n    overlayElement: PropTypes.func,\n    contentElement: PropTypes.func,\n    testId: PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      afterOpen: false,\n      beforeClose: false\n    };\n\n    this.shouldClose = null;\n    this.moveFromContentToOverlay = null;\n  }\n\n  componentDidMount() {\n    if (this.props.isOpen) {\n      this.open();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (prevProps.bodyOpenClassName !== this.props.bodyOpenClassName) {\n\n        console.warn(\n          'React-Modal: \"bodyOpenClassName\" prop has been modified. ' +\n            \"This may cause unexpected behavior when multiple modals are open.\"\n        );\n      }\n      if (prevProps.htmlOpenClassName !== this.props.htmlOpenClassName) {\n\n        console.warn(\n          'React-Modal: \"htmlOpenClassName\" prop has been modified. ' +\n            \"This may cause unexpected behavior when multiple modals are open.\"\n        );\n      }\n    }\n\n    if (this.props.isOpen && !prevProps.isOpen) {\n      this.open();\n    } else if (!this.props.isOpen && prevProps.isOpen) {\n      this.close();\n    }\n\n\n    if (\n      this.props.shouldFocusAfterRender &&\n      this.state.isOpen &&\n      !prevState.isOpen\n    ) {\n      this.focusContent();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.isOpen) {\n      this.afterClose();\n    }\n    clearTimeout(this.closeTimer);\n    cancelAnimationFrame(this.openAnimationFrame);\n  }\n\n  setOverlayRef = overlay => {\n    this.overlay = overlay;\n    this.props.overlayRef && this.props.overlayRef(overlay);\n  };\n\n  setContentRef = content => {\n    this.content = content;\n    this.props.contentRef && this.props.contentRef(content);\n  };\n\n  beforeOpen() {\n    const {\n      appElement,\n      ariaHideApp,\n      htmlOpenClassName,\n      bodyOpenClassName,\n      parentSelector\n    } = this.props;\n\n    const parentDocument =\n      (parentSelector && parentSelector().ownerDocument) || document;\n\n\n    bodyOpenClassName && classList.add(parentDocument.body, bodyOpenClassName);\n\n    htmlOpenClassName &&\n      classList.add(\n        parentDocument.getElementsByTagName(\"html\")[0],\n        htmlOpenClassName\n      );\n\n    if (ariaHideApp) {\n      ariaHiddenInstances += 1;\n      ariaAppHider.hide(appElement);\n    }\n\n    portalOpenInstances.register(this);\n  }\n\n  afterClose = () => {\n    const {\n      appElement,\n      ariaHideApp,\n      htmlOpenClassName,\n      bodyOpenClassName,\n      parentSelector\n    } = this.props;\n\n    const parentDocument =\n      (parentSelector && parentSelector().ownerDocument) || document;\n\n\n    bodyOpenClassName &&\n      classList.remove(parentDocument.body, bodyOpenClassName);\n\n    htmlOpenClassName &&\n      classList.remove(\n        parentDocument.getElementsByTagName(\"html\")[0],\n        htmlOpenClassName\n      );\n\n\n    if (ariaHideApp && ariaHiddenInstances > 0) {\n      ariaHiddenInstances -= 1;\n\n      if (ariaHiddenInstances === 0) {\n        ariaAppHider.show(appElement);\n      }\n    }\n\n    if (this.props.shouldFocusAfterRender) {\n      if (this.props.shouldReturnFocusAfterClose) {\n        focusManager.returnFocus(this.props.preventScroll);\n        focusManager.teardownScopedFocus();\n      } else {\n        focusManager.popWithoutFocus();\n      }\n    }\n\n    if (this.props.onAfterClose) {\n      this.props.onAfterClose();\n    }\n\n    portalOpenInstances.deregister(this);\n  };\n\n  open = () => {\n    this.beforeOpen();\n    if (this.state.afterOpen && this.state.beforeClose) {\n      clearTimeout(this.closeTimer);\n      this.setState({ beforeClose: false });\n    } else {\n      if (this.props.shouldFocusAfterRender) {\n        focusManager.setupScopedFocus(this.node);\n        focusManager.markForFocusLater();\n      }\n\n      this.setState({ isOpen: true }, () => {\n        this.openAnimationFrame = requestAnimationFrame(() => {\n          this.setState({ afterOpen: true });\n\n          if (this.props.isOpen && this.props.onAfterOpen) {\n            this.props.onAfterOpen({\n              overlayEl: this.overlay,\n              contentEl: this.content\n            });\n          }\n        });\n      });\n    }\n  };\n\n  close = () => {\n    if (this.props.closeTimeoutMS > 0) {\n      this.closeWithTimeout();\n    } else {\n      this.closeWithoutTimeout();\n    }\n  };\n\n\n  focusContent = () =>\n    this.content &&\n    !this.contentHasFocus() &&\n    this.content.focus({ preventScroll: true });\n\n  closeWithTimeout = () => {\n    const closesAt = Date.now() + this.props.closeTimeoutMS;\n    this.setState({ beforeClose: true, closesAt }, () => {\n      this.closeTimer = setTimeout(\n        this.closeWithoutTimeout,\n        this.state.closesAt - Date.now()\n      );\n    });\n  };\n\n  closeWithoutTimeout = () => {\n    this.setState(\n      {\n        beforeClose: false,\n        isOpen: false,\n        afterOpen: false,\n        closesAt: null\n      },\n      this.afterClose\n    );\n  };\n\n  handleKeyDown = event => {\n    if (isTabKey(event)) {\n      scopeTab(this.content, event);\n    }\n\n    if (this.props.shouldCloseOnEsc && isEscKey(event)) {\n      event.stopPropagation();\n      this.requestClose(event);\n    }\n  };\n\n  handleOverlayOnClick = event => {\n    if (this.shouldClose === null) {\n      this.shouldClose = true;\n    }\n\n    if (this.shouldClose && this.props.shouldCloseOnOverlayClick) {\n      if (this.ownerHandlesClose()) {\n        this.requestClose(event);\n      } else {\n        this.focusContent();\n      }\n    }\n    this.shouldClose = null;\n  };\n\n  handleContentOnMouseUp = () => {\n    this.shouldClose = false;\n  };\n\n  handleOverlayOnMouseDown = event => {\n    if (!this.props.shouldCloseOnOverlayClick && event.target == this.overlay) {\n      event.preventDefault();\n    }\n  };\n\n  handleContentOnClick = () => {\n    this.shouldClose = false;\n  };\n\n  handleContentOnMouseDown = () => {\n    this.shouldClose = false;\n  };\n\n  requestClose = event =>\n    this.ownerHandlesClose() && this.props.onRequestClose(event);\n\n  ownerHandlesClose = () => this.props.onRequestClose;\n\n  shouldBeClosed = () => !this.state.isOpen && !this.state.beforeClose;\n\n  contentHasFocus = () =>\n    document.activeElement === this.content ||\n    this.content.contains(document.activeElement);\n\n  buildClassName = (which, additional) => {\n    const classNames =\n      typeof additional === \"object\"\n        ? additional\n        : {\n            base: CLASS_NAMES[which],\n            afterOpen: `${CLASS_NAMES[which]}--after-open`,\n            beforeClose: `${CLASS_NAMES[which]}--before-close`\n          };\n    let className = classNames.base;\n    if (this.state.afterOpen) {\n      className = `${className} ${classNames.afterOpen}`;\n    }\n    if (this.state.beforeClose) {\n      className = `${className} ${classNames.beforeClose}`;\n    }\n    return typeof additional === \"string\" && additional\n      ? `${className} ${additional}`\n      : className;\n  };\n\n  attributesFromObject = (prefix, items) =>\n    Object.keys(items).reduce((acc, name) => {\n      acc[`${prefix}-${name}`] = items[name];\n      return acc;\n    }, {});\n\n  render() {\n    const {\n      id,\n      className,\n      overlayClassName,\n      defaultStyles,\n      children\n    } = this.props;\n    const contentStyles = className ? {} : defaultStyles.content;\n    const overlayStyles = overlayClassName ? {} : defaultStyles.overlay;\n\n    if (this.shouldBeClosed()) {\n      return null;\n    }\n\n    const overlayProps = {\n      ref: this.setOverlayRef,\n      className: this.buildClassName(\"overlay\", overlayClassName),\n      style: { ...overlayStyles, ...this.props.style.overlay },\n      onClick: this.handleOverlayOnClick,\n      onMouseDown: this.handleOverlayOnMouseDown\n    };\n\n    const contentProps = {\n      id,\n      ref: this.setContentRef,\n      style: { ...contentStyles, ...this.props.style.content },\n      className: this.buildClassName(\"content\", className),\n      tabIndex: \"-1\",\n      onKeyDown: this.handleKeyDown,\n      onMouseDown: this.handleContentOnMouseDown,\n      onMouseUp: this.handleContentOnMouseUp,\n      onClick: this.handleContentOnClick,\n      role: this.props.role,\n      \"aria-label\": this.props.contentLabel,\n      ...this.attributesFromObject(\"aria\", { modal: true, ...this.props.aria }),\n      ...this.attributesFromObject(\"data\", this.props.data || {}),\n      \"data-testid\": this.props.testId\n    };\n\n    const contentElement = this.props.contentElement(contentProps, children);\n    return this.props.overlayElement(overlayProps, contentElement);\n  }\n}\n\n'react-modal/specs/Modal.style.spec.js'\n:\nimport \"should\";\nimport Modal from \"react-modal\";\nimport { mcontent, moverlay, withModal } from \"./helper\";\n\nexport default () => {\n  it(\"overrides the default styles when a custom classname is used\", () => {\n    const props = { isOpen: true, className: \"myClass\" };\n    withModal(props, null, modal => {\n      mcontent(modal).style.top.should.be.eql(\"\");\n    });\n  });\n\n  it(\"overrides the default styles when using custom overlayClassName\", () => {\n    const overlayClassName = \"myOverlayClass\";\n    const props = { isOpen: true, overlayClassName };\n    withModal(props, null, modal => {\n      moverlay(modal).style.backgroundColor.should.be.eql(\"\");\n    });\n  });\n\n  it(\"supports adding style to the modal contents\", () => {\n    const style = { content: { width: \"20px\" } };\n    const props = { isOpen: true, style };\n    withModal(props, null, modal => {\n      mcontent(modal).style.width.should.be.eql(\"20px\");\n    });\n  });\n\n  it(\"supports overriding style on the modal contents\", () => {\n    const style = { content: { position: \"static\" } };\n    const props = { isOpen: true, style };\n    withModal(props, null, modal => {\n      mcontent(modal).style.position.should.be.eql(\"static\");\n    });\n  });\n\n  it(\"supports adding style on the modal overlay\", () => {\n    const style = { overlay: { width: \"75px\" } };\n    const props = { isOpen: true, style };\n    withModal(props, null, modal => {\n      moverlay(modal).style.width.should.be.eql(\"75px\");\n    });\n  });\n\n  it(\"supports overriding style on the modal overlay\", () => {\n    const style = { overlay: { position: \"static\" } };\n    const props = { isOpen: true, style };\n    withModal(props, null, modal => {\n      moverlay(modal).style.position.should.be.eql(\"static\");\n    });\n  });\n\n  it(\"supports overriding the default styles\", () => {\n    const previousStyle = Modal.defaultStyles.content.position;\n\n\n    const newStyle = previousStyle === \"relative\" ? \"static\" : \"relative\";\n    Modal.defaultStyles.content.position = newStyle;\n    const props = { isOpen: true };\n    withModal(props, null, modal => {\n      modal.portal.content.style.position.should.be.eql(newStyle);\n      Modal.defaultStyles.content.position = previousStyle;\n    });\n  });\n};\n\n'react-modal/specs/index.js'\n:\n\nimport ModalState from \"./Modal.spec\";\nimport ModalEvents from \"./Modal.events.spec\";\nimport ModalStyle from \"./Modal.style.spec\";\nimport ModalHelpers from \"./Modal.helpers.spec\";\nimport ModalTestability from \"./Modal.testability.spec\";\n\ndescribe(\"State\", ModalState);\ndescribe(\"Style\", ModalStyle);\ndescribe(\"Events\", ModalEvents);\ndescribe(\"Helpers\", ModalHelpers);\ndescribe(\"Testability\", ModalTestability);\n",
        "gt": [
            "'react-modal/src/helpers/scopeTab.js'",
            "'react-modal/src/components/ModalPortal.js'",
            "'react-modal/src/components/Modal.js'",
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/Modal.style.spec.js'",
            "'react-modal/specs/index.js'"
        ]
    },
    {
        "files": [
            "'react-native-collapsible-tabview/__tests__/App-test.js'",
            "'react-native-collapsible-tabview/src/PullRefreshTabView.js'",
            "'react-native-collapsible-tabview/App.js'"
        ],
        "content": "'react-native-collapsible-tabview/__tests__/App-test.js'\n:\n\nimport 'react-native';\nimport React from 'react';\nimport App from '../App';\n\n\nimport renderer from 'react-test-renderer';\n\nit('renders correctly', () => {\n  renderer.create(<App />);\n});\n\n'react-native-collapsible-tabview/src/PullRefreshTabView.js'\n:import React, {useState, useEffect, useRef} from 'react';\nimport {\n  StyleSheet,\n  View,\n  Text,\n  Dimensions,\n  Animated,\n  PanResponder,\n  Platform,\n  TouchableOpacity,\n  Alert,\n  StatusBar,\n  ActivityIndicator,\n} from 'react-native';\nimport {TabView, TabBar} from 'react-native-tab-view';\n\nconst AnimatedIndicator = Animated.createAnimatedComponent(ActivityIndicator);\nconst windowHeight = Dimensions.get('window').height;\nconst windowWidth = Dimensions.get('window').width;\nconst TabBarHeight = 48;\nconst HeaderHeight = 300;\nconst SafeStatusBar = Platform.select({\n  ios: 44,\n  android: StatusBar.currentHeight,\n});\nconst tab1ItemSize = (windowWidth - 30) / 2;\nconst tab2ItemSize = (windowWidth - 40) / 3;\nconst PullToRefreshDist = 150;\n\nconst App = () => {\n\n  const [tabIndex, setIndex] = useState(0);\n  const [routes] = useState([\n    {key: 'tab1', title: 'Tab1'},\n    {key: 'tab2', title: 'Tab2'},\n  ]);\n  const [canScroll, setCanScroll] = useState(true);\n  const [tab1Data] = useState(Array(40).fill(0));\n  const [tab2Data] = useState(Array(30).fill(0));\n\n\n  const scrollY = useRef(new Animated.Value(0)).current;\n  const headerScrollY = useRef(new Animated.Value(0)).current;\n\n  const headerMoveScrollY = useRef(new Animated.Value(0)).current;\n  const listRefArr = useRef([]);\n  const listOffset = useRef({});\n  const isListGliding = useRef(false);\n  const headerScrollStart = useRef(0);\n  const _tabIndex = useRef(0);\n  const refreshStatusRef = useRef(false);\n\n\n  const headerPanResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponderCapture: (evt, gestureState) => false,\n      onMoveShouldSetPanResponderCapture: (evt, gestureState) => false,\n      onStartShouldSetPanResponder: (evt, gestureState) => {\n        headerScrollY.stopAnimation();\n        syncScrollOffset();\n        return false;\n      },\n\n      onMoveShouldSetPanResponder: (evt, gestureState) => {\n        headerScrollY.stopAnimation();\n        return Math.abs(gestureState.dy) > 5;\n      },\n      onPanResponderEnd: (evt, gestureState) => {\n        handlePanReleaseOrEnd(evt, gestureState);\n      },\n      onPanResponderMove: (evt, gestureState) => {\n        const curListRef = listRefArr.current.find(\n          (ref) => ref.key === routes[_tabIndex.current].key,\n        );\n        const headerScrollOffset = -gestureState.dy + headerScrollStart.current;\n        if (curListRef.value) {\n\n          if (headerScrollOffset > 0) {\n            curListRef.value.scrollToOffset({\n              offset: headerScrollOffset,\n              animated: false,\n            });\n\n          } else {\n            if (Platform.OS === 'ios') {\n              curListRef.value.scrollToOffset({\n                offset: headerScrollOffset / 3,\n                animated: false,\n              });\n            } else if (Platform.OS === 'android') {\n              if (!refreshStatusRef.current) {\n                headerMoveScrollY.setValue(headerScrollOffset / 1.5);\n              }\n            }\n          }\n        }\n      },\n      onShouldBlockNativeResponder: () => true,\n      onPanResponderGrant: (evt, gestureState) => {\n        headerScrollStart.current = scrollY._value;\n      },\n    }),\n  ).current;\n\n\n  const listPanResponder = useRef(\n    PanResponder.create({\n      onStartShouldSetPanResponderCapture: (evt, gestureState) => false,\n      onMoveShouldSetPanResponderCapture: (evt, gestureState) => false,\n      onStartShouldSetPanResponder: (evt, gestureState) => false,\n      onMoveShouldSetPanResponder: (evt, gestureState) => {\n        headerScrollY.stopAnimation();\n        return false;\n      },\n      onShouldBlockNativeResponder: () => true,\n      onPanResponderGrant: (evt, gestureState) => {\n        headerScrollY.stopAnimation();\n      },\n    }),\n  ).current;\n\n\n  useEffect(() => {\n    scrollY.addListener(({value}) => {\n      const curRoute = routes[tabIndex].key;\n      listOffset.current[curRoute] = value;\n    });\n\n    headerScrollY.addListener(({value}) => {\n      listRefArr.current.forEach((item) => {\n        if (item.key !== routes[tabIndex].key) {\n          return;\n        }\n        if (value > HeaderHeight || value < 0) {\n          headerScrollY.stopAnimation();\n          syncScrollOffset();\n        }\n        if (item.value && value <= HeaderHeight) {\n          item.value.scrollToOffset({\n            offset: value,\n            animated: false,\n          });\n        }\n      });\n    });\n    return () => {\n      scrollY.removeAllListeners();\n      headerScrollY.removeAllListeners();\n    };\n  }, [routes, tabIndex]);\n\n\n  const syncScrollOffset = () => {\n    const curRouteKey = routes[_tabIndex.current].key;\n\n    listRefArr.current.forEach((item) => {\n      if (item.key !== curRouteKey) {\n        if (scrollY._value < HeaderHeight && scrollY._value >= 0) {\n          if (item.value) {\n            item.value.scrollToOffset({\n              offset: scrollY._value,\n              animated: false,\n            });\n            listOffset.current[item.key] = scrollY._value;\n          }\n        } else if (scrollY._value >= HeaderHeight) {\n          if (\n            listOffset.current[item.key] < HeaderHeight ||\n            listOffset.current[item.key] == null\n          ) {\n            if (item.value) {\n              item.value.scrollToOffset({\n                offset: HeaderHeight,\n                animated: false,\n              });\n              listOffset.current[item.key] = HeaderHeight;\n            }\n          }\n        }\n      }\n    });\n  };\n\n  const startRefreshAction = () => {\n    if (Platform.OS === 'ios') {\n      listRefArr.current.forEach((listRef) => {\n        listRef.value.scrollToOffset({\n          offset: -50,\n          animated: true,\n        });\n      });\n      refresh().finally(() => {\n        syncScrollOffset();\n\n        if (scrollY._value < 0) {\n          listRefArr.current.forEach((listRef) => {\n            listRef.value.scrollToOffset({\n              offset: 0,\n              animated: true,\n            });\n          });\n        }\n      });\n    } else if (Platform.OS === 'android') {\n      Animated.timing(headerMoveScrollY, {\n        toValue: -150,\n        duration: 300,\n        useNativeDriver: true,\n      }).start();\n      refresh().finally(() => {\n        Animated.timing(headerMoveScrollY, {\n          toValue: 0,\n          duration: 300,\n          useNativeDriver: true,\n        }).start();\n      });\n    }\n  };\n\n  const handlePanReleaseOrEnd = (evt, gestureState) => {\n\n    syncScrollOffset();\n    headerScrollY.setValue(scrollY._value);\n    if (Platform.OS === 'ios') {\n      if (scrollY._value < 0) {\n        if (scrollY._value < -PullToRefreshDist && !refreshStatusRef.current) {\n          startRefreshAction();\n        } else {\n\n          listRefArr.current.forEach((listRef) => {\n            listRef.value.scrollToOffset({\n              offset: 0,\n              animated: true,\n            });\n          });\n        }\n      } else {\n        if (Math.abs(gestureState.vy) < 0.2) {\n          return;\n        }\n        Animated.decay(headerScrollY, {\n          velocity: -gestureState.vy,\n          useNativeDriver: true,\n        }).start(() => {\n          syncScrollOffset();\n        });\n      }\n    } else if (Platform.OS === 'android') {\n      if (\n        headerMoveScrollY._value < 0 &&\n        headerMoveScrollY._value / 1.5 < -PullToRefreshDist\n      ) {\n        startRefreshAction();\n      } else {\n        Animated.timing(headerMoveScrollY, {\n          toValue: 0,\n          duration: 300,\n          useNativeDriver: true,\n        }).start();\n      }\n    }\n  };\n\n  const onMomentumScrollBegin = () => {\n    isListGliding.current = true;\n  };\n\n  const onMomentumScrollEnd = () => {\n    isListGliding.current = false;\n    syncScrollOffset();\n\n  };\n\n  const onScrollEndDrag = (e) => {\n    syncScrollOffset();\n\n    const offsetY = e.nativeEvent.contentOffset.y;\n\n\n    if (Platform.OS === 'ios') {\n      if (offsetY < -PullToRefreshDist && !refreshStatusRef.current) {\n        startRefreshAction();\n      }\n    }\n\n\n  };\n\n  const refresh = async () => {\n    console.log('-- start refresh');\n    refreshStatusRef.current = true;\n    await new Promise((resolve, reject) => {\n      setTimeout(() => {\n        resolve('done');\n      }, 2000);\n    }).then((value) => {\n      console.log('-- refresh done!');\n      refreshStatusRef.current = false;\n    });\n  };\n\n\n  const renderHeader = () => {\n    const y = scrollY.interpolate({\n      inputRange: [0, HeaderHeight],\n      outputRange: [0, -HeaderHeight],\n      extrapolateRight: 'clamp',\n\n    });\n    return (\n      <Animated.View\n        {...headerPanResponder.panHandlers}\n        style={[styles.header, {transform: [{translateY: y}]}]}>\n        <TouchableOpacity\n          style={{flex: 1, justifyContent: 'center'}}\n          activeOpacity={1}\n          onPress={() => Alert.alert('header Clicked!')}>\n          <Text>Pull to Refresh Header</Text>\n        </TouchableOpacity>\n      </Animated.View>\n    );\n  };\n\n  const rednerTab1Item = ({item, index}) => {\n    return (\n      <View\n        style={{\n          borderRadius: 16,\n          marginLeft: index % 2 === 0 ? 0 : 10,\n          width: tab1ItemSize,\n          height: tab1ItemSize,\n          backgroundColor: '#aaa',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}>\n        <Text>{index}</Text>\n      </View>\n    );\n  };\n\n  const rednerTab2Item = ({item, index}) => {\n    return (\n      <View\n        style={{\n          marginLeft: index % 3 === 0 ? 0 : 10,\n          borderRadius: 16,\n          width: tab2ItemSize,\n          height: tab2ItemSize,\n          backgroundColor: '#aaa',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}>\n        <Text>{index}</Text>\n      </View>\n    );\n  };\n\n  const renderLabel = ({route, focused}) => {\n    return (\n      <Text style={[styles.label, {opacity: focused ? 1 : 0.5}]}>\n        {route.title}\n      </Text>\n    );\n  };\n\n  const renderScene = ({route}) => {\n    const focused = route.key === routes[tabIndex].key;\n    let numCols;\n    let data;\n    let renderItem;\n    switch (route.key) {\n      case 'tab1':\n        numCols = 2;\n        data = tab1Data;\n        renderItem = rednerTab1Item;\n        break;\n      case 'tab2':\n        numCols = 3;\n        data = tab2Data;\n        renderItem = rednerTab2Item;\n        break;\n      default:\n        return null;\n    }\n    return (\n      <Animated.FlatList\n        scrollToOverflowEnabled={true}\n\n        {...listPanResponder.panHandlers}\n        numColumns={numCols}\n        ref={(ref) => {\n          if (ref) {\n            const found = listRefArr.current.find((e) => e.key === route.key);\n            if (!found) {\n              listRefArr.current.push({\n                key: route.key,\n                value: ref,\n              });\n            }\n          }\n        }}\n        scrollEventThrottle={16}\n        onScroll={\n          focused\n            ? Animated.event(\n                [\n                  {\n                    nativeEvent: {contentOffset: {y: scrollY}},\n                  },\n                ],\n                {useNativeDriver: true},\n              )\n            : null\n        }\n        onMomentumScrollBegin={onMomentumScrollBegin}\n        onScrollEndDrag={onScrollEndDrag}\n        onMomentumScrollEnd={onMomentumScrollEnd}\n        ItemSeparatorComponent={() => <View style={{height: 10}} />}\n        ListHeaderComponent={() => <View style={{height: 10}} />}\n        contentContainerStyle={{\n          paddingTop: HeaderHeight + TabBarHeight,\n          paddingHorizontal: 10,\n          minHeight: windowHeight - SafeStatusBar + HeaderHeight,\n        }}\n        showsHorizontalScrollIndicator={false}\n        data={data}\n        renderItem={renderItem}\n        showsVerticalScrollIndicator={false}\n        keyExtractor={(item, index) => index.toString()}\n      />\n    );\n  };\n\n  const renderTabBar = (props) => {\n    const y = scrollY.interpolate({\n      inputRange: [0, HeaderHeight],\n      outputRange: [HeaderHeight, 0],\n\n      extrapolateRight: 'clamp',\n    });\n    return (\n      <Animated.View\n        style={{\n          top: 0,\n          zIndex: 1,\n          position: 'absolute',\n          transform: [{translateY: y}],\n          width: '100%',\n        }}>\n        <TabBar\n          {...props}\n          onTabPress={({route, preventDefault}) => {\n            if (isListGliding.current) {\n              preventDefault();\n            }\n          }}\n          style={styles.tab}\n          renderLabel={renderLabel}\n          indicatorStyle={styles.indicator}\n        />\n      </Animated.View>\n    );\n  };\n\n  const renderTabView = () => {\n    return (\n      <TabView\n        onSwipeStart={() => setCanScroll(false)}\n        onSwipeEnd={() => setCanScroll(true)}\n        onIndexChange={(id) => {\n          _tabIndex.current = id;\n          setIndex(id);\n        }}\n        navigationState={{index: tabIndex, routes}}\n        renderScene={renderScene}\n        renderTabBar={renderTabBar}\n        initialLayout={{\n          height: 0,\n          width: windowWidth,\n        }}\n      />\n    );\n  };\n\n  const renderCustomRefresh = () => {\n\n    return Platform.select({\n      ios: (\n        <AnimatedIndicator\n          style={{\n            top: -50,\n            position: 'absolute',\n            alignSelf: 'center',\n            transform: [\n              {\n                translateY: scrollY.interpolate({\n                  inputRange: [-100, 0],\n                  outputRange: [120, 0],\n                  extrapolate: 'clamp',\n                }),\n              },\n            ],\n          }}\n          animating\n        />\n      ),\n      android: (\n        <Animated.View\n          style={{\n            transform: [\n              {\n                translateY: headerMoveScrollY.interpolate({\n                  inputRange: [-300, 0],\n                  outputRange: [150, 0],\n                  extrapolate: 'clamp',\n                }),\n              },\n            ],\n            backgroundColor: '#eee',\n            height: 38,\n            width: 38,\n            borderRadius: 19,\n            borderWidth: 2,\n            borderColor: '#ddd',\n            justifyContent: 'center',\n            alignItems: 'center',\n            alignSelf: 'center',\n            top: -50,\n            position: 'absolute',\n          }}>\n          <ActivityIndicator animating />\n        </Animated.View>\n      ),\n    });\n  };\n\n  return (\n    <View style={styles.container}>\n      {renderTabView()}\n      {renderHeader()}\n      {renderCustomRefresh()}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: {\n    height: HeaderHeight,\n    width: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    position: 'absolute',\n    backgroundColor: '#FFA088',\n  },\n  label: {fontSize: 16, color: '#222'},\n  tab: {\n    elevation: 0,\n    shadowOpacity: 0,\n    backgroundColor: '#FFCC80',\n    height: TabBarHeight,\n  },\n  indicator: {backgroundColor: '#222'},\n});\n\nexport default App;\n\n'react-native-collapsible-tabview/App.js'\n:import React, {useState} from 'react';\nimport {\n  View,\n  SafeAreaView,\n  TouchableOpacity,\n  Text,\n  StyleSheet,\n} from 'react-native';\nimport CollapsibleTabView from './src/CollapsibleTabView';\nimport HeaderScrollableTabView from './src/HeaderScrollableTabView';\nimport PullRefreshTabView from './src/PullRefreshTabView';\n\nconst App = () => {\n  const [mode, setMode] = useState('collapsible');\n\n  const renderDemo = () => {\n    switch (mode) {\n      case 'collapsible':\n        return <CollapsibleTabView />;\n      case 'scrollable':\n        return <HeaderScrollableTabView />;\n      case 'refresh':\n        return <PullRefreshTabView />;\n    }\n  };\n\n  return (\n    <SafeAreaView style={{flex: 1}}>\n      {renderDemo()}\n      <View style={styles.container}>\n        {}\n        <TouchableOpacity\n          onPress={() => setMode('collapsible')}\n          style={{...styles.button}}>\n          <Text\n            style={{\n              textAlign: 'center',\n              color: mode === 'collapsible' ? 'red' : 'black',\n            }}>\n            Collapsible\n          </Text>\n        </TouchableOpacity>\n        {}\n        <TouchableOpacity\n          onPress={() => setMode('scrollable')}\n          style={{...styles.button}}>\n          <Text\n            style={{\n              textAlign: 'center',\n              color: mode === 'scrollable' ? 'red' : 'black',\n            }}>\n            Header Scrollable\n          </Text>\n        </TouchableOpacity>\n        {}\n        <TouchableOpacity\n          onPress={() => setMode('refresh')}\n          style={{...styles.button}}>\n          <Text\n            style={{\n              textAlign: 'center',\n              color: mode === 'refresh' ? 'red' : 'black',\n            }}>\n            pull refresh\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    padding: 16,\n  },\n  button: {\n    flex: 1,\n    height: 48,\n    backgroundColor: '#eee',\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 24,\n    paddingHorizontal: 16,\n  },\n});\n\nexport default App;\n",
        "gt": [
            "'react-native-collapsible-tabview/src/PullRefreshTabView.js'",
            "'react-native-collapsible-tabview/App.js'",
            "'react-native-collapsible-tabview/__tests__/App-test.js'"
        ]
    },
    {
        "files": [
            "'Instagram/components/ItemHeader.js'",
            "'Instagram/components/InstaHeaderButton.js'",
            "'Instagram/Assets.js'",
            "'Instagram/components/InstaIcon.js'",
            "'Instagram/components/FeedList.js'",
            "'Instagram/components/Item.js'"
        ],
        "content": "'Instagram/components/ItemHeader.js'\n:import { connectActionSheet } from '@expo/react-native-action-sheet';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nimport InstaHeaderButton from './InstaHeaderButton';\nimport { profileImageSize } from './FeedList';\nimport ProfileImage from './ProfileImage';\n\nclass ItemHeader extends React.Component {\n  render() {\n    const { item } = this.props;\n    const { account, location } = item;\n    return (\n      <View\n        style={{\n          flexDirection: 'row',\n          paddingLeft: 16,\n          paddingRight: 4,\n          paddingVertical: 14,\n          justifyContent: 'space-between',\n          alignItems: 'center',\n        }}\n      >\n        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n          <ProfileImage\n            style={{\n              aspectRatio: 1,\n              minHeight: profileImageSize,\n              height: profileImageSize,\n              backgroundColor: '#d8d8d8',\n              width: profileImageSize,\n              borderRadius: profileImageSize / 2,\n              marginRight: 12,\n              resizeMode: 'cover',\n            }}\n            account={account}\n          />\n          <View>\n            <Text style={{ fontSize: 14, color: '#262626', fontWeight: '600' }}>\n              {account}\n            </Text>\n            <Text style={{ fontSize: 12, color: '#262626' }}>\n              {location || 'Legoland'}\n            </Text>\n          </View>\n        </View>\n        <InstaHeaderButton\n          name=\"more\"\n          size={30}\n          color={'black'}\n          onPress={() => {\n            const options = [\n              'Copy Link',\n              'Turn On Post Notifications',\n              'Report',\n              'Mute',\n              'Unfollow',\n              'Cancel',\n            ];\n\n            const destructiveButtonIndex = options.length - 2;\n            const cancelButtonIndex = options.length - 1;\n\n            this.props.showActionSheetWithOptions(\n              {\n                options,\n                cancelButtonIndex,\n                destructiveButtonIndex,\n\n\n\n\n\n\n\n\n              },\n              buttonIndex => {\n\n\n              },\n            );\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nexport default connectActionSheet(ItemHeader);\n\n'Instagram/components/InstaHeaderButton.js'\n:import React from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport InstaIcon from './InstaIcon';\n\nexport default class InstaHeaderButton extends React.PureComponent {\n  render() {\n    const { onPress, disabled, touchableStyle, ...props } = this.props;\n    return (\n      <TouchableOpacity\n        disabled={disabled}\n        style={[{ marginHorizontal: 12 }, touchableStyle]}\n        onPress={onPress}\n      >\n        <InstaIcon disabled={disabled} size={32} color={'black'} {...props} />\n      </TouchableOpacity>\n    );\n  }\n}\n\n'Instagram/Assets.js'\n:export default {\n\t\"ball.png\": require(`./assets/ball.png`),\n\t\"inf.png\": require(`./assets/inf.png`),\n\t\"rewind.png\": require(`./assets/rewind.png`),\n\t\"brand\": {\n\t\t\"Instagram@2x.png\": require(`./assets/brand/Instagram@2x.png`),\n\t\t\"icon.png\": require(`./assets/brand/icon.png`),\n\t\t\"splash.png\": require(`./assets/brand/splash.png`)\n\t},\n\t\"fonts\": {\n\t\t\"insta-modern.ttf\": require(`./assets/fonts/insta-modern.ttf`),\n\t\t\"insta-neon.otf\": require(`./assets/fonts/insta-neon.otf`),\n\t\t\"insta-strong.otf\": require(`./assets/fonts/insta-strong.otf`),\n\t\t\"insta-typewriter.ttf\": require(`./assets/fonts/insta-typewriter.ttf`)\n\t},\n\t\"icons\": {\n\t\t\"red\": {\n\t\t\t\"like-on.png\": require(`./assets/icons/red/like-on.png`)\n\t\t},\n\t\t\"black\": {\n\t\t\t\"add-user.png\": require(`./assets/icons/black/add-user.png`),\n\t\t\t\"announce.png\": require(`./assets/icons/black/announce.png`),\n\t\t\t\"beats.png\": require(`./assets/icons/black/beats.png`),\n\t\t\t\"bookmark.png\": require(`./assets/icons/black/bookmark.png`),\n\t\t\t\"bounce.png\": require(`./assets/icons/black/bounce.png`),\n\t\t\t\"bummer.png\": require(`./assets/icons/black/bummer.png`),\n\t\t\t\"camera-off.png\": require(`./assets/icons/black/camera-off.png`),\n\t\t\t\"camera-on.png\": require(`./assets/icons/black/camera-on.png`),\n\t\t\t\"cancel.png\": require(`./assets/icons/black/cancel.png`),\n\t\t\t\"capture.png\": require(`./assets/icons/black/capture.png`),\n\t\t\t\"card.png\": require(`./assets/icons/black/card.png`),\n\t\t\t\"chat.png\": require(`./assets/icons/black/chat.png`),\n\t\t\t\"chevron-left.png\": require(`./assets/icons/black/chevron-left.png`),\n\t\t\t\"chevron-right.png\": require(`./assets/icons/black/chevron-right.png`),\n\t\t\t\"classic.png\": require(`./assets/icons/black/classic.png`),\n\t\t\t\"dramatic.png\": require(`./assets/icons/black/dramatic.png`),\n\t\t\t\"draw.png\": require(`./assets/icons/black/draw.png`),\n\t\t\t\"eraser-off.png\": require(`./assets/icons/black/eraser-off.png`),\n\t\t\t\"eraser-on.png\": require(`./assets/icons/black/eraser-on.png`),\n\t\t\t\"face-off.png\": require(`./assets/icons/black/face-off.png`),\n\t\t\t\"face-on.png\": require(`./assets/icons/black/face-on.png`),\n\t\t\t\"facebook.png\": require(`./assets/icons/black/facebook.png`),\n\t\t\t\"fire.png\": require(`./assets/icons/black/fire.png`),\n\t\t\t\"flash-auto.png\": require(`./assets/icons/black/flash-auto.png`),\n\t\t\t\"flash-off.png\": require(`./assets/icons/black/flash-off.png`),\n\t\t\t\"flash-on.png\": require(`./assets/icons/black/flash-on.png`),\n\t\t\t\"flip.png\": require(`./assets/icons/black/flip.png`),\n\t\t\t\"grid.png\": require(`./assets/icons/black/grid.png`),\n\t\t\t\"hearts.png\": require(`./assets/icons/black/hearts.png`),\n\t\t\t\"highlight-off.png\": require(`./assets/icons/black/highlight-off.png`),\n\t\t\t\"highlighter-on.png\": require(`./assets/icons/black/highlighter-on.png`),\n\t\t\t\"history.png\": require(`./assets/icons/black/history.png`),\n\t\t\t\"home-off.png\": require(`./assets/icons/black/home-off.png`),\n\t\t\t\"home-on.png\": require(`./assets/icons/black/home-on.png`),\n\t\t\t\"info.png\": require(`./assets/icons/black/info.png`),\n\t\t\t\"instagram.png\": require(`./assets/icons/black/instagram.png`),\n\t\t\t\"letter.png\": require(`./assets/icons/black/letter.png`),\n\t\t\t\"like-off.png\": require(`./assets/icons/black/like-off.png`),\n\t\t\t\"like-on.png\": require(`./assets/icons/black/like-on.png`),\n\t\t\t\"likes.png\": require(`./assets/icons/black/likes.png`),\n\t\t\t\"list.png\": require(`./assets/icons/black/list.png`),\n\t\t\t\"lock.png\": require(`./assets/icons/black/lock.png`),\n\t\t\t\"marker-off.png\": require(`./assets/icons/black/marker-off.png`),\n\t\t\t\"marker-on.png\": require(`./assets/icons/black/marker-on.png`),\n\t\t\t\"menu.png\": require(`./assets/icons/black/menu.png`),\n\t\t\t\"more.png\": require(`./assets/icons/black/more.png`),\n\t\t\t\"nope.png\": require(`./assets/icons/black/nope.png`),\n\t\t\t\"notify.png\": require(`./assets/icons/black/notify.png`),\n\t\t\t\"paparazzi.png\": require(`./assets/icons/black/paparazzi.png`),\n\t\t\t\"pen-off.png\": require(`./assets/icons/black/pen-off.png`),\n\t\t\t\"pen-on.png\": require(`./assets/icons/black/pen-on.png`),\n\t\t\t\"picker-empty.png\": require(`./assets/icons/black/picker-empty.png`),\n\t\t\t\"picker-filled.png\": require(`./assets/icons/black/picker-filled.png`),\n\t\t\t\"picker-select.png\": require(`./assets/icons/black/picker-select.png`),\n\t\t\t\"picker.png\": require(`./assets/icons/black/picker.png`),\n\t\t\t\"play.png\": require(`./assets/icons/black/play.png`),\n\t\t\t\"profile.png\": require(`./assets/icons/black/profile.png`),\n\t\t\t\"question.png\": require(`./assets/icons/black/question.png`),\n\t\t\t\"questions.png\": require(`./assets/icons/black/questions.png`),\n\t\t\t\"save.png\": require(`./assets/icons/black/save.png`),\n\t\t\t\"scan.png\": require(`./assets/icons/black/scan.png`),\n\t\t\t\"search-off.png\": require(`./assets/icons/black/search-off.png`),\n\t\t\t\"search-on.png\": require(`./assets/icons/black/search-on.png`),\n\t\t\t\"send.png\": require(`./assets/icons/black/send.png`),\n\t\t\t\"settings.png\": require(`./assets/icons/black/settings.png`),\n\t\t\t\"stickers.png\": require(`./assets/icons/black/stickers.png`),\n\t\t\t\"stop.png\": require(`./assets/icons/black/stop.png`),\n\t\t\t\"suprise.png\": require(`./assets/icons/black/suprise.png`),\n\t\t\t\"tag-user.png\": require(`./assets/icons/black/tag-user.png`),\n\t\t\t\"text-background-off.png\": require(`./assets/icons/black/text-background-off.png`),\n\t\t\t\"text-background-on.png\": require(`./assets/icons/black/text-background-on.png`),\n\t\t\t\"text-center.png\": require(`./assets/icons/black/text-center.png`),\n\t\t\t\"text-effect.png\": require(`./assets/icons/black/text-effect.png`),\n\t\t\t\"text-left.png\": require(`./assets/icons/black/text-left.png`),\n\t\t\t\"text-right.png\": require(`./assets/icons/black/text-right.png`),\n\t\t\t\"tv.png\": require(`./assets/icons/black/tv.png`)\n\t\t},\n\t\t\"white\": {\n\t\t\t\"add-user.png\": require(`./assets/icons/white/add-user.png`),\n\t\t\t\"announce.png\": require(`./assets/icons/white/announce.png`),\n\t\t\t\"beats.png\": require(`./assets/icons/white/beats.png`),\n\t\t\t\"bookmark.png\": require(`./assets/icons/white/bookmark.png`),\n\t\t\t\"bounce.png\": require(`./assets/icons/white/bounce.png`),\n\t\t\t\"bummer.png\": require(`./assets/icons/white/bummer.png`),\n\t\t\t\"camera-off.png\": require(`./assets/icons/white/camera-off.png`),\n\t\t\t\"camera-on.png\": require(`./assets/icons/white/camera-on.png`),\n\t\t\t\"cancel.png\": require(`./assets/icons/white/cancel.png`),\n\t\t\t\"capture.png\": require(`./assets/icons/white/capture.png`),\n\t\t\t\"card.png\": require(`./assets/icons/white/card.png`),\n\t\t\t\"chat.png\": require(`./assets/icons/white/chat.png`),\n\t\t\t\"chevron-left.png\": require(`./assets/icons/white/chevron-left.png`),\n\t\t\t\"chevron-right.png\": require(`./assets/icons/white/chevron-right.png`),\n\t\t\t\"classic.png\": require(`./assets/icons/white/classic.png`),\n\t\t\t\"dramatic.png\": require(`./assets/icons/white/dramatic.png`),\n\t\t\t\"draw.png\": require(`./assets/icons/white/draw.png`),\n\t\t\t\"eraser-off.png\": require(`./assets/icons/white/eraser-off.png`),\n\t\t\t\"eraser-on.png\": require(`./assets/icons/white/eraser-on.png`),\n\t\t\t\"face-off.png\": require(`./assets/icons/white/face-off.png`),\n\t\t\t\"face-on.png\": require(`./assets/icons/white/face-on.png`),\n\t\t\t\"facebook.png\": require(`./assets/icons/white/facebook.png`),\n\t\t\t\"fire.png\": require(`./assets/icons/white/fire.png`),\n\t\t\t\"flash-auto.png\": require(`./assets/icons/white/flash-auto.png`),\n\t\t\t\"flash-off.png\": require(`./assets/icons/white/flash-off.png`),\n\t\t\t\"flash-on.png\": require(`./assets/icons/white/flash-on.png`),\n\t\t\t\"flip.png\": require(`./assets/icons/white/flip.png`),\n\t\t\t\"grid.png\": require(`./assets/icons/white/grid.png`),\n\t\t\t\"hearts.png\": require(`./assets/icons/white/hearts.png`),\n\t\t\t\"highlight-off.png\": require(`./assets/icons/white/highlight-off.png`),\n\t\t\t\"highlighter-on.png\": require(`./assets/icons/white/highlighter-on.png`),\n\t\t\t\"history.png\": require(`./assets/icons/white/history.png`),\n\t\t\t\"home-off.png\": require(`./assets/icons/white/home-off.png`),\n\t\t\t\"home-on.png\": require(`./assets/icons/white/home-on.png`),\n\t\t\t\"info.png\": require(`./assets/icons/white/info.png`),\n\t\t\t\"instagram.png\": require(`./assets/icons/white/instagram.png`),\n\t\t\t\"letter.png\": require(`./assets/icons/white/letter.png`),\n\t\t\t\"like-off.png\": require(`./assets/icons/white/like-off.png`),\n\t\t\t\"like-on.png\": require(`./assets/icons/white/like-on.png`),\n\t\t\t\"likes.png\": require(`./assets/icons/white/likes.png`),\n\t\t\t\"list.png\": require(`./assets/icons/white/list.png`),\n\t\t\t\"lock.png\": require(`./assets/icons/white/lock.png`),\n\t\t\t\"marker-off.png\": require(`./assets/icons/white/marker-off.png`),\n\t\t\t\"marker-on.png\": require(`./assets/icons/white/marker-on.png`),\n\t\t\t\"menu.png\": require(`./assets/icons/white/menu.png`),\n\t\t\t\"more.png\": require(`./assets/icons/white/more.png`),\n\t\t\t\"nope.png\": require(`./assets/icons/white/nope.png`),\n\t\t\t\"notify.png\": require(`./assets/icons/white/notify.png`),\n\t\t\t\"paparazzi.png\": require(`./assets/icons/white/paparazzi.png`),\n\t\t\t\"pen-off.png\": require(`./assets/icons/white/pen-off.png`),\n\t\t\t\"pen-on.png\": require(`./assets/icons/white/pen-on.png`),\n\t\t\t\"picker-empty.png\": require(`./assets/icons/white/picker-empty.png`),\n\t\t\t\"picker-filled.png\": require(`./assets/icons/white/picker-filled.png`),\n\t\t\t\"picker-select.png\": require(`./assets/icons/white/picker-select.png`),\n\t\t\t\"picker.png\": require(`./assets/icons/white/picker.png`),\n\t\t\t\"play.png\": require(`./assets/icons/white/play.png`),\n\t\t\t\"profile.png\": require(`./assets/icons/white/profile.png`),\n\t\t\t\"question.png\": require(`./assets/icons/white/question.png`),\n\t\t\t\"questions.png\": require(`./assets/icons/white/questions.png`),\n\t\t\t\"save.png\": require(`./assets/icons/white/save.png`),\n\t\t\t\"scan.png\": require(`./assets/icons/white/scan.png`),\n\t\t\t\"search-off.png\": require(`./assets/icons/white/search-off.png`),\n\t\t\t\"search-on.png\": require(`./assets/icons/white/search-on.png`),\n\t\t\t\"send.png\": require(`./assets/icons/white/send.png`),\n\t\t\t\"settings.png\": require(`./assets/icons/white/settings.png`),\n\t\t\t\"stickers.png\": require(`./assets/icons/white/stickers.png`),\n\t\t\t\"stop.png\": require(`./assets/icons/white/stop.png`),\n\t\t\t\"suprise.png\": require(`./assets/icons/white/suprise.png`),\n\t\t\t\"tag-user.png\": require(`./assets/icons/white/tag-user.png`),\n\t\t\t\"text-background-off.png\": require(`./assets/icons/white/text-background-off.png`),\n\t\t\t\"text-background-on.png\": require(`./assets/icons/white/text-background-on.png`),\n\t\t\t\"text-center.png\": require(`./assets/icons/white/text-center.png`),\n\t\t\t\"text-effect.png\": require(`./assets/icons/white/text-effect.png`),\n\t\t\t\"text-left.png\": require(`./assets/icons/white/text-left.png`),\n\t\t\t\"text-right.png\": require(`./assets/icons/white/text-right.png`),\n\t\t\t\"tv.png\": require(`./assets/icons/white/tv.png`)\n\t\t}\n\t}\n};\n'Instagram/components/InstaIcon.js'\n:import React from 'react';\nimport { Image } from 'react-native';\n\nimport Assets from '../Assets';\n\nexport default class InstaIcon extends React.PureComponent {\n  render() {\n    const {\n      name,\n      active,\n      disabled,\n      size,\n      color = 'white',\n      style,\n      ...props\n    } = this.props;\n    if (!name) {\n      return null;\n    }\n    const colorStyle = [\n      {\n        opacity: disabled ? 0.5 : 1,\n        width: size,\n        height: size,\n        resizeMode: 'contain',\n\n        flex: size === undefined ? 1 : undefined,\n      },\n      style,\n    ];\n\n    let icon = Assets.icons[color][name + '.png'];\n    if (active && Assets.icons[color][name + '-on' + '.png']) {\n      icon = Assets.icons[color][name + '-on' + '.png'];\n    } else if (Assets.icons[color][name + '-off' + '.png']) {\n      icon = Assets.icons[color][name + '-off' + '.png'];\n    }\n    return <Image source={icon} style={colorStyle} {...props} />;\n  }\n}\n\n'Instagram/components/FeedList.js'\n:import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Animated, FlatList, StyleSheet, View } from 'react-native';\n\nimport { Stories } from '../constants/Posts';\nimport FeedListFooter from './FeedListFooter';\nimport Item from './Item';\nimport StorySlider from './StorySlider';\n\nexport const profileImageSize = 32;\n\nexport default class FeedList extends React.Component {\n  static defaultProps = {\n    ListHeaderComponent: props => <StorySlider stories={Stories} />,\n  };\n\n  _scrollValue = new Animated.Value(0);\n  _scaleValue = new Animated.Value(1);\n  _gesturePosition = new Animated.ValueXY();\n  state = {\n    isDragging: false,\n  };\n\n  static childContextTypes = {\n    gesturePosition: PropTypes.object,\n    getScrollPosition: PropTypes.func,\n    scaleValue: PropTypes.object,\n  };\n\n  state = {\n    isDragging: false,\n  };\n\n  getChildContext() {\n    return {\n      gesturePosition: this._gesturePosition,\n      scaleValue: this._scaleValue,\n      getScrollPosition: () => {\n        return this._scrollValue.__getValue();\n      },\n    };\n  }\n\n  render() {\n    const { onPressFooter, ...props } = this.props;\n\n    let { isDragging, selectedPhoto } = this.state;\n    let onScroll = Animated.event([\n      { nativeEvent: { contentOffset: { y: this._scrollValue } } },\n    ]);\n\n    return (\n      <React.Fragment>\n        <FlatList\n          showsVerticalScrollIndicator={false}\n          style={{ backgroundColor: 'transparent' }}\n          ref={ref => (this.list = ref)}\n          scrollEventThrottle={16}\n          onScroll={onScroll}\n          scrollEnabled={!isDragging}\n          zoomScale={1}\n          bouncesZoom={false}\n          maximumZoomScale={1}\n          minimumZoomScale={1}\n          renderItem={({ item }) => (\n            <Item\n              isLarge={props.isLarge}\n              getParent={() => this.list}\n              isDragging={isDragging}\n              onGestureStart={selectedPhoto => {\n                this.setState({\n                  selectedPhoto,\n                  isDragging: true,\n                });\n              }}\n              onGestureRelease={() => this.setState({ isDragging: false })}\n              item={item}\n            />\n          )}\n          ListFooterComponent={props => (\n            <FeedListFooter {...props} onPress={onPressFooter} />\n          )}\n          keyExtractor={(item, index) => item.key + ' ' + index}\n          {...props}\n        />\n        {isDragging ? (\n          <SelectedPhoto\n            key={selectedPhoto ? selectedPhoto.photoURI : ''}\n            selectedPhoto={selectedPhoto}\n          />\n        ) : null}\n      </React.Fragment>\n    );\n  }\n}\n\nclass SelectedPhoto extends React.Component {\n  state = { isLoaded: false };\n\n  static contextTypes = {\n    gesturePosition: PropTypes.object,\n    scrollValue: PropTypes.object,\n    scaleValue: PropTypes.object,\n  };\n\n  render() {\n    let { selectedPhoto } = this.props;\n    let { isLoaded } = this.state;\n\n    let { gesturePosition, scaleValue } = this.context;\n\n    let animatedStyle = {\n      transform: gesturePosition.getTranslateTransform(),\n    };\n    animatedStyle.transform.push({\n      scale: scaleValue,\n    });\n\n    let imageStyle = [\n      {\n        position: 'absolute',\n        zIndex: 10,\n        width: selectedPhoto.measurement.w,\n        height: selectedPhoto.measurement.h,\n        opacity: isLoaded ? 1 : 0,\n      },\n      animatedStyle,\n    ];\n\n    let backgroundOpacityValue = scaleValue.interpolate({\n      inputRange: [1.0, 1.1, 2.0],\n      outputRange: [0.0, 0.15, 0.75],\n      extrapolate: 'clamp',\n    });\n\n    return (\n      <BodyPortal>\n        <View style={styles.root}>\n          <Animated.View\n            style={[\n              styles.background,\n              {\n                opacity: backgroundOpacityValue,\n              },\n            ]}\n          />\n          <Animated.Image\n            style={imageStyle}\n            onLoad={() => {\n              setTimeout(() => {\n                this.setState({ isLoaded: true });\n              });\n            }}\n            source={selectedPhoto.source}\n          />\n        </View>\n      </BodyPortal>\n    );\n  }\n}\n\nimport ReactDOM from 'react-dom';\n\nexport class BodyPortal extends React.PureComponent {\n  render() {\n    return ReactDOM.createPortal(this.props.children, global.document.body);\n  }\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n  },\n  background: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    backgroundColor: 'black',\n  },\n});\n\n'Instagram/components/Item.js'\n:import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Animated,\n  Easing,\n  findNodeHandle,\n  PanResponder,\n  UIManager,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nimport DisableBodyScrollingView from './DisableScrolling';\nimport ItemFooter from './ItemFooter';\nimport ItemHeader from './ItemHeader';\nimport ItemImage from './ItemImage';\n\nexport function pow2abs(a, b) {\n  return Math.pow(Math.abs(a - b), 2);\n}\n\nexport function getDistance(touches) {\n  const [a, b] = touches;\n  if (a == null || b == null) {\n    return 0;\n  }\n  return Math.sqrt(pow2abs(a.pageX, b.pageX) + pow2abs(a.pageY, b.pageY));\n}\n\nexport function getPosition(touches) {\n  const [a, b] = touches;\n  if (a == null || b == null) {\n    return { x: 0, y: 0 };\n  }\n  return { x: a.pageX, y: a.pageY };\n}\n\nexport function getDeltaTranslation(position, initial) {\n  return { x: position.x - initial.x, y: position.y - initial.y };\n}\n\nconst SCALE_MULTIPLIER = 1;\n\nexport function getScale(currentDistance, initialDistance) {\n  return (currentDistance / initialDistance) * SCALE_MULTIPLIER;\n}\n\nexport function measureNode(node, parent) {\n  return new Promise((resolve, reject) => {\n    UIManager.measureLayout(\n      node,\n      parent || (node && node.parentNode),\n      e => reject(e),\n      (x, y, w, h, l, t) => {\n        resolve({ x, y, w, h });\n      },\n    );\n  });\n}\nconst RESTORE_ANIMATION_DURATION = 200;\nclass Item extends React.PureComponent {\n  _opacity = new Animated.Value(1);\n  _initialTouches = [];\n\n  static contextTypes = {\n    gesturePosition: PropTypes.object,\n    scaleValue: PropTypes.object,\n    getScrollPosition: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n    this._generatePanHandlers();\n  }\n\n  _generatePanHandlers = () => {\n    this._gestureHandler = PanResponder.create({\n      onStartShouldSetResponderCapture: () => true,\n      onStartShouldSetPanResponderCapture: ({ nativeEvent }) => {\n        return nativeEvent.touches.length === 2;\n      },\n      onMoveShouldSetResponderCapture: () => true,\n      onMoveShouldSetPanResponderCapture: ({ nativeEvent }) => {\n        return nativeEvent.touches.length === 2;\n      },\n      onPanResponderGrant: this._startGesture,\n      onPanResponderMove: this._onGestureMove,\n      onPanResponderRelease: this._onGestureRelease,\n      onPanResponderTerminationRequest: () => {\n        return this._gestureInProgress == null;\n      },\n      onPanResponderTerminate: (event, gestureState) => {\n        return this._onGestureRelease(event, gestureState);\n      },\n    });\n  };\n\n  _startGesture = async (event, gestureState) => {\n\n    if (this._gestureInProgress) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    this._gestureInProgress = gestureState.stateID;\n    let { item, onGestureStart } = this.props;\n    let { gesturePosition, getScrollPosition } = this.context;\n    let { touches } = event.nativeEvent;\n\n    this._initialTouches = touches;\n\n    let selectedPhotoMeasurement = await this._measureSelectedPhoto();\n    this._selectedPhotoMeasurement = selectedPhotoMeasurement;\n    onGestureStart({\n      source: item.source,\n      measurement: selectedPhotoMeasurement,\n    });\n\n    gesturePosition.setValue({\n      x: 0,\n      y: 0,\n    });\n\n    gesturePosition.setOffset({\n      x: 0,\n      y: selectedPhotoMeasurement.y,\n    });\n\n    Animated.timing(this._opacity, {\n      toValue: 0,\n      duration: 200,\n    }).start();\n  };\n\n  _onGestureMove = (event, gestureState) => {\n    let { touches } = event.nativeEvent;\n    if (!this._gestureInProgress) {\n      return;\n    }\n\n    if (touches.length < 2) {\n\n      this._onGestureRelease(event, gestureState);\n      return;\n    }\n\n\n    let { gesturePosition, scaleValue } = this.context;\n    let { dx, dy } = gestureState;\n    let currentPosition = getPosition(touches);\n    let initialPosition = getPosition(this._initialTouches);\n\n    const { x, y } = getDeltaTranslation(currentPosition, initialPosition);\n    gesturePosition.x.setValue(x);\n    gesturePosition.y.setValue(y);\n\n\n    let currentDistance = getDistance(touches);\n    let initialDistance = getDistance(this._initialTouches);\n    let newScale = getScale(currentDistance, initialDistance);\n    scaleValue.setValue(Math.max(newScale, 1));\n  };\n\n  _onGestureRelease = (event, gestureState) => {\n    if (this._gestureInProgress !== gestureState.stateID) {\n      return;\n    }\n\n\n    this._gestureInProgress = null;\n    this._initialTouches = [];\n    let { onGestureRelease } = this.props;\n    let { gesturePosition, scaleValue, getScrollPosition } = this.context;\n\n    Animated.parallel([\n      Animated.timing(gesturePosition.x, {\n        toValue: 0,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n      Animated.timing(gesturePosition.y, {\n        toValue: 0,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n      Animated.timing(scaleValue, {\n        toValue: 1,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n    ]).start(() => {\n      gesturePosition.setOffset({\n        x: 0,\n        y:\n          (this._selectedPhotoMeasurement &&\n            this._selectedPhotoMeasurement.y) ||\n          0 - getScrollPosition(),\n      });\n\n      this._opacity.setValue(1);\n\n      requestAnimationFrame(() => {\n        onGestureRelease();\n      });\n    });\n  };\n\n  _measureSelectedPhoto = async () => {\n    let parent = findNodeHandle(this._parent);\n    let photoComponent = findNodeHandle(this._photoComponent);\n\n    try {\n      const photoMeasurement = await measureNode(photoComponent, parent);\n      const bodyRect = document.body.getBoundingClientRect();\n      const elemRect = photoComponent.getBoundingClientRect();\n      const offset = elemRect.top + window.scrollY;\n\n      return {\n        x: photoMeasurement.x,\n        y: offset,\n        w: photoMeasurement.w,\n        h: photoMeasurement.h,\n      };\n    } catch (error) {\n      console.log('ERROR', error);\n    }\n    return {};\n  };\n\n  render() {\n    const { imageWidth, imageHeight, item, isLarge } = this.props;\n\n    return (\n      <View\n        style={[\n          { backgroundColor: 'white' },\n          isLarge && {\n            borderColor: '#e6e6e6',\n            borderRadius: 3,\n            borderWidth: StyleSheet.hairlineWidth,\n            marginBottom: 15,\n          },\n        ]}\n        ref={parentNode => (this._parent = parentNode)}\n      >\n        <ItemHeader item={item} />\n        <DisableBodyScrollingView>\n          <Animated.View\n            {...this._gestureHandler.panHandlers}\n            testID=\"webkit-disable-touches\"\n            style={{\n              opacity: this._opacity,\n            }}\n          >\n            <ItemImage\n              ref={node => (this._photoComponent = node)}\n              imageWidth={imageWidth}\n              imageHeight={imageHeight}\n              source={item.source}\n            />\n          </Animated.View>\n        </DisableBodyScrollingView>\n\n        <ItemFooter item={item} />\n      </View>\n    );\n  }\n}\nexport default Item;\n",
        "gt": [
            "'Instagram/Assets.js'",
            "'Instagram/components/InstaIcon.js'",
            "'Instagram/components/InstaHeaderButton.js'",
            "'Instagram/components/ItemHeader.js'",
            "'Instagram/components/Item.js'",
            "'Instagram/components/FeedList.js'"
        ]
    },
    {
        "files": [
            "'nightwatch-cucumber/lib/hook-utils.js'",
            "'nightwatch-cucumber/lib/runner.js'",
            "'nightwatch-cucumber/lib/nightwatch-api.js'",
            "'nightwatch-cucumber/lib/index.js'"
        ],
        "content": "'nightwatch-cucumber/lib/hook-utils.js'\n:const co = require('co')\n\nfunction addHookBefore (target, functionName, hook) {\n  const original = target[functionName]\n\n  target[functionName] = function () {\n    hook.apply(this, arguments)\n    return original.apply(this, arguments)\n  }\n}\n\nfunction addCallbackedHookAfter (target, functionName, callbackIndex, hook) {\n  const original = target[functionName]\n\n  target[functionName] = function () {\n    const args = Array.prototype.slice.call(arguments)\n    const callback = args[callbackIndex]\n    args[callbackIndex] = function () {\n      const self = this\n      const callbackArgs = Array.prototype.slice.call(arguments)\n      return co.wrap(hook).apply(self, callbackArgs)\n        .then(() => callback.apply(this, callbackArgs))\n    }\n    return original.apply(this, args)\n  }\n}\n\nmodule.exports = {\n  addHookBefore,\n  addCallbackedHookAfter\n}\n\n'nightwatch-cucumber/lib/runner.js'\n:const fs = require('fs')\nconst path = require('path')\nconst tmp = require('tmp')\nconst glob = require('glob')\nconst mkdirp = require('mkdirp')\nconst pify = require('pify')\nconst dummyTestModulesFolder = tmp.dirSync({ unsafeCleanup: true }).name\nconst NightwatchApi = require('./nightwatch-api')\nconst CucumberApi = require('./cucumber-api')\n\ntmp.setGracefulCleanup()\n\nmodule.exports = class Runner {\n  constructor () {\n    this.originalFeaturePath = {}\n  }\n\n  getSourceFile (featureSource) {\n    if (featureSource.startsWith('@')) {\n      return featureSource.substr(1, featureSource.length - 1)\n    }\n    return featureSource\n  }\n\n  getFeatureFilesFromRerunFile (rerunFile) {\n    const data = fs.readFileSync(this.getSourceFile(rerunFile))\n    return data.toString()\n      .split('\\n')\n      .map(featurePath => featurePath.trim().replace(/(:\\d*)/g, ''))\n\n      .filter(featurePath => featurePath)\n  }\n\n  getFeatureDirectories () {\n    return this.featureFiles\n      .map(featureSource => {\n        if (featureSource.startsWith('@')) {\n          return this.getFeatureFilesFromRerunFile(featureSource)\n            .map(featurePath => path.dirname(featurePath))\n        } else if (fs.statSync(featureSource).isDirectory()) {\n          return featureSource\n        }\n        return path.dirname(featureSource)\n      })\n\n      .reduce((paths, currentPaths) => paths.concat(currentPaths), [])\n  }\n\n  getFeatureFiles () {\n    return this.featureFiles\n      .map(featureSource => {\n        if (featureSource.startsWith('@')) {\n          return this.getFeatureFilesFromRerunFile(featureSource)\n        } else if (fs.statSync(featureSource).isDirectory()) {\n          return glob.sync(path.join(featureSource, '**/*.feature'))\n        }\n        return [featureSource]\n      })\n\n      .reduce((paths, currentPaths) => paths.concat(currentPaths), [])\n\n      .filter((featureFilePath, idx, paths) => paths.indexOf(featureFilePath === idx))\n  }\n\n  generateDummyTestModules () {\n    this.getFeatureFiles().forEach((featureFile) => {\n      const dummyTestModuleFile = this.featurePathToDummyPath(featureFile)\n      mkdirp.sync(path.dirname(dummyTestModuleFile))\n      fs.writeFileSync(dummyTestModuleFile, '')\n    })\n  }\n\n  getTags (tags) {\n    tags = tags || []\n\n    if (typeof tags === 'string') {\n      tags = tags.split(',')\n    }\n\n    if (Array.isArray(tags)) {\n      return tags.map((tag) => `@${tag}`)\n    } else {\n      throw new Error(`Expected tags to be Array or String.`)\n    }\n  }\n\n  featurePathToDummyPath (featureFile) {\n    const lineNumberMatch = featureFile.match(/:(\\d+)$/)\n    let lineNumber\n    if (lineNumberMatch) {\n      lineNumber = parseInt(lineNumberMatch[1])\n      featureFile = featureFile.replace(/:\\d+$/, '')\n    }\n    try {\n      fs.statSync(featureFile)\n    } catch (err) {\n      if (!featureFile.match(/\\.feature$/)) featureFile += '.feature'\n      try {\n        fs.statSync(featureFile)\n      } catch (err) {\n        throw new Error(`Feature file or folder ${featureFile} was not found!`)\n      }\n    }\n\n    const dummyPath = path.join(dummyTestModulesFolder, featureFile.replace(/\\.feature$/, '.js'))\n\n    this.originalFeaturePath[dummyPath] = lineNumber ? `${featureFile}:${lineNumber}` : featureFile\n\n    return dummyPath\n  }\n\n  dummyPathToFeaturePath (dummyPath) {\n    if (!dummyPath.match(/\\.js$/)) dummyPath += '.js'\n\n    return this.originalFeaturePath[dummyPath] || dummyPath\n  }\n\n  addIndexToFileName (fileName, index) {\n    const cutIndex = fileName.lastIndexOf('.')\n    const ext = fileName.slice(cutIndex)\n    const rest = fileName.slice(0, cutIndex)\n    return `${rest}-${index}${ext}`\n  }\n\n  * executeTestModules (dummyTestModules) {\n    const featureFiles = dummyTestModules.map((dummyTestModule) => this.dummyPathToFeaturePath(dummyTestModule))\n\n    if (this.nightwatchApi.isRunningInParallel()) {\n      const workerIndex = this.nightwatchApi.getWorkerIndex()\n      this.jsonReport = this.addIndexToFileName(this.jsonReport, workerIndex)\n    }\n\n    if (this.jsonReport) {\n      yield pify(mkdirp)(path.dirname(this.jsonReport))\n    }\n    const cucumberArgs = this.cucumberApi.getAdjustedArgs({\n      args: this.options.cucumberArgs,\n      featureFiles,\n      jsonReport: this.jsonReport,\n      tags: this.getTags(this.nightwatchApi.nightwatchArgv.tag),\n      skipTags: this.getTags(this.nightwatchApi.nightwatchArgv.skiptags)\n    })\n    return yield * this.cucumberApi.run(cucumberArgs)\n  }\n\n  areColorsEnabled () {\n    const formatOptionsIndex = this.options.cucumberArgs.indexOf('--format-options')\n    if (formatOptionsIndex < 0) return true\n    const formatOptions = JSON.parse(this.options.cucumberArgs[formatOptionsIndex + 1])\n    return typeof formatOptions.colorsEnabled === 'undefined' ? true : formatOptions.colorsEnabled\n  }\n\n  run (options) {\n    const self = this\n    this.options = options\n    this.nightwatchApi = new NightwatchApi(options, this.areColorsEnabled())\n    this.cucumberApi = new CucumberApi(options)\n    this.jsonReport = this.cucumberApi.getJSONReportName(options.cucumberArgs)\n    this.featureFiles = this.cucumberApi.getFeatureFiles(options.cucumberArgs)\n    this.featureFiles\n      .map(this.getSourceFile)\n      .forEach((featureSource) => {\n        try {\n          fs.statSync(featureSource)\n        } catch (err) {\n          throw new Error(`Feature source ${featureSource} doesn't exists`)\n        }\n      })\n\n\n    this.featureFiles = this.featureFiles.map((currentPath) => {\n      return path.isAbsolute(currentPath) ? path.relative(process.cwd(), currentPath) : currentPath\n    })\n\n    const dummyPaths = this.getFeatureDirectories().map(srcPath => path.join(dummyTestModulesFolder, srcPath))\n\n    this.generateDummyTestModules()\n\n    this.cucumberApi.injectTimeoutHandler()\n    this.cucumberApi.addAttachmentProvider(this.nightwatchApi.takeScreenshot.bind(this.nightwatchApi))\n\n    this.nightwatchApi.addTestModulePaths(dummyPaths)\n    this.nightwatchApi.addPathConverter(this.featurePathToDummyPath.bind(this), this.dummyPathToFeaturePath.bind(this))\n    this.nightwatchApi.overrideOriginalStartTestWorkers()\n    this.nightwatchApi.addTestRunner(this.executeTestModules.bind(this))\n    this.nightwatchApi.addHookAfterChildProcesses(function * () {\n      const reports = yield pify(glob)(self.addIndexToFileName(self.jsonReport, '*'))\n      yield * self.cucumberApi.mergeCucumberJsonReports(reports, self.jsonReport)\n    })\n  }\n}\n\n'nightwatch-cucumber/lib/nightwatch-api.js'\n:const co = require('co')\nconst pify = require('pify')\nconst fs = pify(require('fs'), { include: ['readFile'] })\nconst cloneDeep = require('lodash.clonedeep')\nconst hookUtils = require('./hook-utils')\nconst combineErrors = require('combine-errors')\nconst Nightwatch = {\n  Runner: require('nightwatch/lib/runner/run'),\n  ClientManager: require('nightwatch/lib/runner/clientmanager'),\n  ClientRunner: require('nightwatch/lib/runner/cli/clirunner'),\n  ChildProcess: require('nightwatch/lib/runner/cli/child-process'),\n  Utils: require('nightwatch/lib/util/utils'),\n  Logger: require('nightwatch/lib/util/logger'),\n  Protocol: require('nightwatch/lib/api/protocol'),\n  ErrorHandler: require('nightwatch/lib/runner/cli/errorhandler'),\n  Assertion: require('nightwatch/lib/core/assertion'),\n  Expect: require('nightwatch/lib/api/expect'),\n  queue: require('nightwatch/lib/core/queue.js'),\n  Section: require('nightwatch/lib/page-object/section')\n}\n\nmodule.exports = class NightwatchApi {\n  constructor (options, colorsEnabled) {\n    this.options = options\n    this.colorsEnabled = colorsEnabled\n    const self = this\n    this.Section = class PromisedSection extends Nightwatch.Section {\n      constructor () {\n        super(...arguments)\n        self.promisifySection(this)\n      }\n    }\n  }\n\n  _startSession (options) {\n    this.client = new Nightwatch.ClientManager()\n    this.client.init(options)\n    const api = this.client.api('currentEnv', options.currentEnv)\n    this.promisifyApi(api)\n    this.promisifyAssertions()\n    this.promisifyExpect(api)\n    this.promisifyPageObjects(api)\n    if (this.options.nightwatchOutput) {\n      this.addAssertionLogger()\n    }\n    this.protocol = Nightwatch.Protocol(this.client.get())\n  }\n\n  promisifyApi (api) {\n    let _successCb, _catchCb\n    api.catch = (catchCb) => {\n      if (catchCb) _catchCb = catchCb\n    }\n    api.then = (successCb, catchCb) => {\n      if (successCb) _successCb = successCb\n      if (catchCb) _catchCb = catchCb\n      return this.start()\n        .then(_successCb)\n        .catch(_catchCb)\n    }\n  }\n\n  promisifyAssertions () {\n    const promise = {}\n    this.promisifyApi(promise)\n    const originalAssert = Nightwatch.Assertion.assert\n\n    Nightwatch.Assertion.assert = function () {\n      originalAssert.apply(this, arguments)\n      return promise\n    }\n  }\n\n  promisifyExpect (api) {\n    const self = this\n    if (!api.expect) return\n    [ 'element', 'section' ].forEach(field => {\n      const originalExpectation = api.expect[field]\n\n      api.expect[field] = function () {\n        const result = originalExpectation.apply(this, arguments)\n        self.promisifyApi(result)\n        return result\n      }\n    })\n  }\n\n  promisifySection (section) {\n    this.promisifyApi(section)\n    this.promisifyExpect(section)\n    if (section.section) {\n      Object.keys(section.section).forEach((key) => {\n        this.promisifySection(section.section[key])\n      })\n    }\n  }\n\n  promisifyChildPageObjects (page) {\n    const self = this\n    Object.keys(page).forEach((key) => {\n      if (typeof page[key] !== 'function') {\n        this.promisifyChildPageObjects(page[key])\n      } else {\n        const originalPageCreator = page[key]\n        page[key] = function () {\n          const page = originalPageCreator.call(this)\n          self.promisifySection(page)\n          return page\n        }\n      }\n    })\n  }\n\n  promisifyPageObjects (api) {\n    if (api.page) {\n      return this.promisifyChildPageObjects(api.page)\n    }\n  }\n\n  getClientApi () {\n    return this.client.api()\n  }\n\n  * _closeSession () {\n    yield new Promise((resolve, reject) => {\n      this.client.get().once('nightwatch:finished', function () {\n        resolve()\n      })\n      this.client.terminate()\n    })\n  }\n\n  * takeScreenshot (moduleName, testName) {\n    if (!this.takeScreenshotOnFailure || Nightwatch.queue.instance().rootNode.started) return\n\n    const forbiddenCharacters = /[*|\\\\:\"<>?/+]/g\n\n    const filePath = Nightwatch.Utils.getScreenshotFileName(\n      {module: moduleName, name: testName.replace(forbiddenCharacters, '')},\n      true,\n      this.client.options.screenshots.path\n    )\n\n    yield new Promise((resolve, reject) => {\n      this.protocol.screenshot(false, (response) => {\n        if (response.state !== 'success' && response.status !== 0) {\n          reject(new Error('Creating screenshot was not successful. Response was:\\n' + require('util').inspect(response)))\n        }\n\n        this.client.get().saveScreenshotToFile(filePath, response.value, (err) => {\n          if (err) reject(err)\n          resolve()\n        })\n      })\n    })\n\n    return {\n      data: yield fs.readFile(filePath, 'base64'),\n      mimeType: 'image/png'\n    }\n  }\n\n  addTestModulePaths (modulePaths) {\n    this.modulePaths = modulePaths\n  }\n\n  isSingleFeatureFile (featureFile) {\n    let stat\n    try {\n      stat = fs.statSync(featureFile)\n    } catch (err) {\n      featureFile = featureFile.replace(/:\\d+$/, '')\n      if (!featureFile.match(/\\.feature$/)) featureFile += '.feature'\n      try {\n        stat = fs.statSync(featureFile)\n      } catch (err) {\n        throw new Error(`Feature file or folder ${featureFile} was not found!`)\n      }\n    }\n\n    return stat.isFile()\n  }\n\n  overrideOriginalSourceGetter (convert) {\n    const self = this\n    const originalClientRunnerGetTestSource = Nightwatch.ClientRunner.prototype.getTestSource\n\n    Nightwatch.ClientRunner.prototype.getTestSource = function () {\n      Nightwatch.ClientRunner.prototype.getTestSource = originalClientRunnerGetTestSource\n      const originalArgv = cloneDeep(this.argv)\n      const originalSettings = cloneDeep(this.settings)\n\n      if (this.argv._source && this.argv._source.length) {\n        this.argv._source = this.argv._source.map(convert)\n      } else if (this.argv.test) {\n        this.argv.test = convert(this.argv.test)\n      } else {\n        this.settings.src_folders = self.modulePaths\n      }\n      self.nightwatchArgv = this.argv\n      self.testSource = Nightwatch.ClientRunner.prototype.getTestSource.apply(this, arguments)\n\n      if (this.parallelMode) {\n        return self.testSource\n      }\n\n      this.argv = originalArgv\n      this.settings = originalSettings\n      this.settings.src_folders = this.settings.src_folders || []\n      return Nightwatch.ClientRunner.prototype.getTestSource.apply(this, arguments)\n    }\n\n    Nightwatch.ClientRunner.prototype.singleSourceFile = function () {\n      if (this.singleTestRun()) {\n        return self.isSingleFeatureFile(this.argv.test)\n      }\n\n      return (Array.isArray(this.argv._source) && this.argv._source.length === 1) && self.isSingleFeatureFile(this.argv._source[0])\n    }\n  }\n\n  addHookTests (revert) {\n    hookUtils.addHookBefore(Nightwatch.ChildProcess.prototype, 'getArgs', function () {\n      if (this.args.indexOf('--test') === -1) return\n\n      const cliArgs = this.args\n      const testIndex = cliArgs.indexOf('--test') + 1\n      cliArgs[testIndex] = revert(cliArgs[testIndex])\n    })\n  }\n\n  addPathConverter (convert, revert) {\n    this.overrideOriginalSourceGetter(convert)\n    this.addHookTests(revert)\n  }\n\n  addAssertionLogger () {\n    const self = this\n    if (!this.client) return\n    const originalAssertion = this.client.get().assertion\n    this.__originalAssertion = originalAssertion\n    this.client.get().assertion = function (passed, receivedValue, expectedValue, message, abortOnFailure, originalStackTrace) {\n      if (passed) {\n        if (self.colorsEnabled) {\n          console.log(`\\n ${Nightwatch.Logger.colors.green(Nightwatch.Utils.symbols.ok)} ${message}`)\n        } else {\n          console.log(`\\n ${Nightwatch.Utils.symbols.ok} ${message}`)\n        }\n      }\n      return originalAssertion.apply(this, arguments)\n    }\n  }\n\n  removeAssertionLogger () {\n    if (!this.client) return\n    this.client.get().assertion = this.__originalAssertion\n  }\n\n  overrideOriginalStartTestWorkers () {\n    const originalStartTestWorkers = Nightwatch.ClientRunner.prototype.startTestWorkers\n\n    Nightwatch.ClientRunner.prototype.startTestWorkers = function () {\n      this.test_settings.tag_filter = undefined\n      return originalStartTestWorkers.apply(this, arguments)\n    }\n  }\n\n  addHookAfterChildProcesses (hook) {\n    hookUtils.addCallbackedHookAfter(Nightwatch.ClientRunner.prototype, 'startChildProcesses', 1, hook)\n  }\n\n  isRunningInParallel () {\n    return process.env.__NIGHTWATCH_PARALLEL_MODE === '1'\n  }\n\n  getWorkerIndex () {\n    return process.env.__NIGHTWATCH_ENV_KEY.split('_').pop()\n  }\n\n  clearResult () {\n    this.client.get().clearResult()\n    this.client.get().results.lastError = null\n  }\n\n  start () {\n    return new Promise((resolve, reject) => {\n      this.client.get().once('nightwatch:finished', (results, errors) => {\n        const errorList = results.tests.filter(test => test.failure).map(test => {\n          const error = new Error(`${test.message} - ${test.failure}`)\n          error.stack = `\\n${test.stackTrace}`\n          return error\n        }).concat(errors.map(errorString => {\n          const cutPos = errorString.indexOf(':')\n          const error = new Error(errorString.substring(0, cutPos))\n          error.stack = errorString\n          return error\n        }))\n        this.clearResult()\n        if (errorList.length) {\n          reject(combineErrors(errorList))\n          return\n        }\n        resolve()\n      })\n      this.client.start()\n    })\n  }\n\n  addTestRunner (testRunner) {\n    const self = this\n    const originalRunnerRun = Nightwatch.Runner.prototype.run\n\n    Nightwatch.Runner.prototype.run = co.wrap(function * () {\n      const that = this\n      let error\n      let executionSuccess\n      const originalOptions = cloneDeep(this.options)\n      const originalAdditionalOpts = cloneDeep(this.additionalOpts)\n      this.additionalOpts.output_folder = false\n      this.options.output = false\n      this.options.tag_filter = undefined\n      this.options.end_session_on_fail = false\n      self.takeScreenshotOnFailure = this.options.screenshots &&\n        this.options.screenshots.enabled &&\n        this.options.screenshots.path &&\n        this.options.screenshots.on_failure\n\n      if (this.options.screenshots) this.options.screenshots.enabled = false\n\n      try {\n        const modules = yield new Promise((resolve, reject) => {\n          Nightwatch.Runner\n            .readPaths(self.testSource, that.options)\n            .spread(function (modulePaths, fullPaths) {\n              resolve(modulePaths)\n            }).then(resolve, reject)\n        })\n        self._startSession(this.options)\n        const executionResult = yield * testRunner(modules)\n        executionSuccess = !!executionResult.success\n      } catch (err) {\n        error = err\n      }\n\n      try {\n        if (self.client) {\n          self.client.endSessionOnFail(typeof originalOptions.end_session_on_fail === 'undefined' || originalOptions.end_session_on_fail)\n          yield * self._closeSession()\n        }\n      } catch (err) {\n        error = err\n      }\n\n      if (typeof process.send === 'function') {\n        process.send(JSON.stringify({\n          type: 'testsuite_finished',\n          itemKey: process.env.__NIGHTWATCH_ENV_LABEL,\n          moduleKey: 'moduleKey',\n          results: {\n            completed: {\n              ok: 1\n            }\n          },\n          errmessages: []\n        }))\n      }\n\n      this.options = originalOptions\n      this.additionalOpts = originalAdditionalOpts\n      self.removeAssertionLogger()\n\n      if (!originalAdditionalOpts.src_folders || !originalAdditionalOpts.src_folders.length || error || !executionSuccess) {\n        return this.doneCb(error || !executionSuccess, {})\n      }\n\n      return originalRunnerRun.apply(this, arguments)\n    })\n  }\n}\n\n'nightwatch-cucumber/lib/index.js'\n:let runner\n\nmodule.exports = function (providedOptions) {\n  const options = Object.assign({\n    cucumberArgs: [\n      '--require', 'features/step_definitions',\n      '--format', 'json:reports/cucumber.json',\n      'features'\n    ],\n    nightwatchOutput: true\n  }, providedOptions)\n\n  const Runner = require('./runner')\n  runner = new Runner()\n  runner.run(options)\n}\n\nfunction getPageProxy (subPages) {\n  return new Proxy(() => getClientProxy(subPages), {\n    get: (target, pageName) => getPageProxy(subPages.concat([pageName]))\n  })\n}\n\nfunction getClientProxy (subPages) {\n  return new Proxy({}, {\n    get: (target, name) => {\n      if (name !== 'page') {\n        const api = runner.nightwatchApi.getClientApi()\n\n        if (!subPages.length) {\n          return api[name]\n        }\n\n        return subPages.reduce((api, pageName) => {\n          return api[pageName]\n        }, api.page)()[name]\n      }\n\n      return getPageProxy([])\n    }\n  })\n}\n\nmodule.exports.client = getClientProxy([])\n\nmodule.exports.Section = new Proxy(function () {}, {\n  construct (target, args) {\n    return new runner.nightwatchApi.Section(...args)\n  }\n})\n",
        "gt": [
            "'nightwatch-cucumber/lib/hook-utils.js'",
            "'nightwatch-cucumber/lib/nightwatch-api.js'",
            "'nightwatch-cucumber/lib/runner.js'",
            "'nightwatch-cucumber/lib/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/dropdown.js'",
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/index.js'"
        ],
        "content": "'ruui/src/components/dropdown.js'\n:import React, { Component } from 'react';\nimport { Animated, Easing, View, TouchableWithoutFeedback, Text, StyleSheet } from 'react-native';\nimport { Svg, Path, } from 'react-native-svg';\n\nimport { directionSnap, arrowSnap, directionAnimatedConfigs, connect } from '../utils';\nimport * as appActions from '../utils/store/appAction';\nimport { DropdownConfigs } from '../typeDefinition';\n\ntype Props = {\n\tdispatch?: Function,\n\tactive?: boolean,\n\tconfigs?: DropdownConfigs,\n\tscreenSize?: { width?: number, height?: number },\n};\n\nclass RuuiDropdown extends Component {\n\tprops: Props;\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.enterAnimation = new Animated.Value(0);\n\t\tthis.state = {\n\t\t\tlayout: {},\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.playAnimation();\n\t}\n\n\tcomponentWillUnmount() {\n\t\tconst { configs: { onClose } } = this.props;\n\t\tif (onClose) onClose();\n\t}\n\n\tplayAnimation = () => {\n\t\tthis.enterAnimation.setValue(0);\n\t\tAnimated.timing(this.enterAnimation, {\n\t\t\ttoValue: 1,\n\t\t\tduration: 800,\n\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\tuseNativeDriver: false,\n\t\t}).start();\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { active } = this.props;\n\t\tif (prevProps.active !== active && active) {\n\t\t\tthis.playAnimation();\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { active, configs } = this.props;\n\t\tconst pointerEvents = configs?.maskPointerEvents || 'auto';\n\n\t\treturn active ? <View\n\t\t\tpointerEvents={pointerEvents}\n\t\t\tstyle={styles.container}>\n\t\t\t{configs.tapToClose ? <TouchableWithoutFeedback\n\t\t\t\tonPress={this.closeModal}>\n\t\t\t\t<View style={styles.touchableMask}/>\n\t\t\t</TouchableWithoutFeedback> : <View/>}\n\t\t\t{this.renderDropDown()}\n\t\t</View> : <View/>;\n\t}\n\n\trenderDropDown() {\n\t\tconst { configs, screenSize } = this.props;\n\t\tconst { layout, } = this.state;\n\t\tconst context = configs.context || {};\n\t\tconst positionOffset = configs.offset || { top: 0, left: 0 };\n\t\tconst arrowOffset = configs.arrowOffset || { top: 0, left: 0 };\n\t\tconst containerLayout = configs.containerLayout || { x: 0, y: 0, width: 0, height: 0 };\n\t\tconst InnerComponent = configs.component || configs.Component || EmptyDropdown;\n\t\tconst arrowSize = configs.arrowSize || 8;\n\t\tconst flattenWrapperStyle = StyleSheet.flatten(configs.wrapperStyle) || {};\n\t\tconst backgroundColor = flattenWrapperStyle.backgroundColor || '#ffffff';\n\t\tconst finalBorderRadius = flattenWrapperStyle.borderRadius || 3;\n\t\tconst animatedDirection = configs.animatedDirection || configs.direction;\n\t\tconst animatedConfigs = directionAnimatedConfigs(\n\t\t\tanimatedDirection, 10, this.enterAnimation, finalBorderRadius,\n\t\t);\n\t\tconst snappingPosition = directionSnap(\n\t\t\tcontainerLayout.y, containerLayout.x,\n\t\t\tcontainerLayout.width, containerLayout.height,\n\t\t\tlayout.width, layout.height,\n\t\t\tconfigs.direction, configs.spacing,\n\t\t\tscreenSize,\n\t\t);\n\t\tconst arrowPosition = arrowSnap(layout.width, layout.height, arrowSize, configs.direction);\n\t\tconst wrapperStyles = {\n\t\t\tposition: 'absolute',\n\t\t\ttop: snappingPosition.top + positionOffset.top,\n\t\t\tleft: snappingPosition.left + positionOffset.left,\n\t\t\topacity: layout.width ? 1 : 0,\n\t\t};\n\t\tconst containerStyles = {\n\t\t\ttransform: animatedConfigs.transform,\n\t\t\topacity: animatedConfigs.opacity,\n\t\t\t...animatedConfigs.borderRadius,\n\t\t};\n\t\tconst arrowStyle = {\n\t\t\tposition: 'absolute',\n\t\t\ttop: arrowPosition.top + arrowOffset.top,\n\t\t\tleft: arrowPosition.left + arrowOffset.left,\n\t\t\ttransform: arrowPosition.transform || [],\n\t\t\twidth: arrowSize + 2,\n\t\t\theight: arrowSize * 2,\n\t\t};\n\n\t\treturn <View style={[wrapperStyles, { zIndex: configs.zIndex }]} onLayout={this.onLayout}>\n\t\t\t<Animated.View style={[styles.dropdownContainer, configs.wrapperStyle, containerStyles]}>\n\t\t\t\t<InnerComponent\n\t\t\t\t\tconfigs={configs}\n\t\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\t\tcontext={context}\n\t\t\t\t\tclose={this.closeModal}/>\n\t\t\t\t{configs.showArrow !== false && <Svg style={arrowStyle}>\n\t\t\t\t\t<Path\n\t\t\t\t\t\td={drawArrow(arrowSize)}\n\t\t\t\t\t\ttransform=\"translate(2,0)\"\n\t\t\t\t\t\tfill={backgroundColor}/>\n\t\t\t\t</Svg>}\n\t\t\t</Animated.View>\n\t\t</View>;\n\t}\n\n\tcloseModal = () => {\n\t\tconst { dispatch, configs } = this.props;\n\t\tdispatch(appActions.toggleDropdown(false, configs));\n\t};\n\n\tonLayout = ({ nativeEvent }) => {\n\t\tthis.setState({ layout: nativeEvent.layout });\n\t};\n}\n\nexport default connect(() => {\n\treturn {\n\n\t};\n})(RuuiDropdown);\n\nfunction EmptyDropdown(props) {\n\treturn <View>\n\t\t<Text>Default dropdown</Text>\n\t</View>;\n}\n\nconst drawArrow = (size) => {\n\tconst width = size;\n\tconst height = size * 2;\n\tconst baseSize = width / 2.8;\n\tconst topCurve = `Q0 ${baseSize / 2}, ${baseSize} ${baseSize}`;\n\tconst topEdge = `Q${width} ${(height / 2) - baseSize}, ${width} ${height / 2}`;\n\tconst bottomEdge = `Q${width} ${(height / 2) + baseSize}, ${baseSize} ${height - baseSize}`;\n\tconst bottomCurve = `Q${0} ${height - (baseSize / 2)}, 0 ${height}`;\n\n\treturn `M-2,0 L0,0 ${topCurve} ${topEdge} ${bottomEdge} ${bottomCurve} L-2,${height} Z`;\n};\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tzIndex: 1000,\n\t\tposition: 'absolute',\n\t\ttop: 0, bottom: 0, left: 0, right: 0,\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, bottom: 0, left: 0, right: 0,\n\t},\n\tdropdownContainer: {\n\t\tbackgroundColor: '#ffffff',\n\t\tborderRadius: 3,\n\t},\n});\n\n'ruui/src/utils/helpers.js'\n:import { Dimensions } from 'react-native';\nimport type { SnappingDirection } from '../typeDefinition';\n\nexport function debounce(fn, duration) {\n\tlet timeout;\n\treturn function () {\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = null;\n\t\t\tfn.apply(this, arguments);\n\t\t}, duration);\n\t};\n}\n\nexport function uuid() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t\tconst r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\nexport function instantInterval(\n\tfunc: Function,\n\tinterval: Number,\n\ttrigger: Boolean = true,\n) {\n\tif (trigger) func.call(this);\n\treturn setInterval(func, interval);\n}\n\nexport function minGuard(value: Number, gap: Number = 0) {\n\treturn value < gap ? gap : value;\n}\n\nexport function maxGuard(value: Number, gap: Number) {\n\treturn value > gap ? gap : value;\n}\n\nconst defaultIteratee = item => item;\n\nexport function maxBy(array, iteratee = defaultIteratee) {\n\tlet result;\n\tif (array == null) return result;\n\n\tlet computed;\n\tfor (const value of array) {\n\t\tconst current = iteratee(value);\n\n\t\tif (current != null && (computed === undefined ? current === current : current > computed)) {\n\t\t\tcomputed = current;\n\t\t\tresult = value;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function clamp(value: Number, min: Number, max: Number) {\n\treturn min < max\n\t\t? (value < min ? min : value > max ? max : value)\n\t\t: (value < max ? max : value > min ? min : value);\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n\tif (x === y) {\n\t\treturn x !== 0 || y !== 0 || 1 / x === 1 / y;\n\t} else {\n\t\treturn x !== x && y !== y;\n\t}\n}\n\nexport function shallowEqual(objA, objB) {\n\tif (is(objA, objB)) return true;\n\n\tif (typeof objA !== 'object' || objA === null\n\t\t|| typeof objB !== 'object' || objB === null) {\n\t\treturn false;\n\t}\n\n\tconst keysA = Object.keys(objA);\n\tconst keysB = Object.keys(objB);\n\n\tif (keysA.length !== keysB.length) return false;\n\n\tfor (let i = 0; i < keysA.length; i += 1) {\n\t\tif (!hasOwn.call(objB, keysA[i])\n\t\t\t|| !is(objA[keysA[i]], objB[keysA[i]])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function valueAt(root = {}, path, defaultValue) {\n\tlet currentLevel = root;\n\tconst paths = path.split('.');\n\n\tfor (let i = 0; i < paths.length; i += 1) {\n\t\tif (i === paths.length - 1) {\n\t\t\treturn currentLevel[paths[i]] || defaultValue;\n\t\t} else {\n\t\t\tcurrentLevel = currentLevel[paths[i]];\n\t\t\tif (!currentLevel) return defaultValue;\n\t\t}\n\t}\n\n\treturn defaultValue;\n}\n\nfunction rawDirectionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n) {\n\tswitch (position) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tdefault:\n\t\treturn { top: 0, left: 0 };\n\t}\n}\n\n\nfunction screenGuard(position, componentSize, screenPadding = 5, moddedScreenSize = {}) {\n\tconst screenSize = { ...Dimensions.get('window'), ...moddedScreenSize },\n\t\t{ top, left, } = position;\n\tlet guardedTop = top, guardedLeft = left;\n\n\tif (top < 5) {\n\t\tguardedTop = 5;\n\t} else if (top + componentSize.height > screenSize.height - screenPadding) {\n\t\tguardedTop = screenSize.height - componentSize.height - screenPadding;\n\t}\n\n\tif (left < 5) {\n\t\tguardedLeft = 5;\n\t} else if (left + componentSize.width > screenSize.width - screenPadding) {\n\t\tguardedLeft = screenSize.width - componentSize.width - screenPadding;\n\t}\n\n\treturn { top: guardedTop, left: guardedLeft, };\n}\n\nexport function directionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n\tscreenSize,\n) {\n\treturn screenGuard(\n\t\trawDirectionSnap(top, left, width1, height1, width2, height2, position, spacing),\n\t\t{ width: width2, height: height2, }, 5, screenSize\n\t);\n}\n\nexport function arrowSnap(width, height, arrowSize, parentPosition: SnappingDirection, padding = 15) {\n\tswitch (parentPosition) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop: padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t\topacity: 0,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tleft: -arrowSize,\n\t\t\ttop: padding,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tdefault:\n\t\treturn {};\n\t}\n}\n\nexport function directionAnimatedConfigs(\n\tdirection, translateDistance, animation, finalBorderRadius = 3\n) {\n\tconst borderRadius = animation.interpolate({\n\t\t\tinputRange: [0, 0.5, 1], outputRange: [50, 15, finalBorderRadius],\n\t\t}),\n\t\topacity = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\textrapolate: 'clamp',\n\t\t});\n\n\tswitch (direction) {\n\tcase 'top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\tborderRadius: { borderRadius, },\n\t\t\ttransform: [],\n\t\t\topacity,\n\t\t};\n\tdefault:\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\t}\n}\n\n'ruui/src/utils/store/appAction.js'\n:import * as Actions from './actions';\nimport { uuid } from '../helpers';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function updateThemeConfigs(configs = {}) {\n\treturn { type: Actions.UpdateThemeConfigs, configs };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n",
        "gt": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/dropdown.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/loadingMask.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/modals.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'"
        ],
        "content": "'ruui/src/components/loadingMask.js'\n:import React, { Component } from 'react';\nimport { ActivityIndicator, View, TouchableOpacity, StyleSheet } from 'react-native';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tconfigs?: Object,\n\tdispatch?: Function,\n};\n\nclass RuuiLoadingModal extends Component<any, Props, any> {\n\tprops: Props;\n\n\trender() {\n\t\tconst { configs = {} } = this.props,\n\t\t\tindicatorColor = configs.indicatorColor || '#ffffff',\n\t\t\tindicatorSize = configs.indicatorSize || 'small';\n\n\t\treturn <View style={styles.container}>\n\t\t\t<TouchableOpacity onPress={this.onMaskPress}>\n\t\t\t\t<ActivityIndicator color={indicatorColor} size={indicatorSize}/>\n\t\t\t</TouchableOpacity>\n\t\t</View>;\n\t}\n\n\tonMaskPress = () => {\n\t\tconst { dispatch, configs } = this.props;\n\n\t\tif (configs.tapToClose) {\n\t\t\tdispatch(appActions.toggleLoading(false));\n\t\t}\n\t}\n}\n\nexport default RuuiLoadingModal;\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t\talignItems: 'center', justifyContent: 'center',\n\t},\n});\n\n'ruui/src/components/modal.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, View, StyleSheet } from 'react-native';\n\nimport Selector from './selector';\nimport LoadingMask from './loadingMask';\nimport CloseableModal from './closeableModal';\nimport { valueAt } from '../utils';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tactive?: any,\n\ttype?: string,\n\tconfigs?: Object,\n\tmodalCount?: number,\n\tdispatch?: Function,\n\tanimationDelay?: Number,\n};\n\nexport default class RuuiModal extends Component {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactive: props.active,\n\t\t};\n\t\tthis.enterAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { active, animationDelay, } = this.props;\n\t\tsetTimeout(() => this.playTransition(active), animationDelay);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { active } = this.props;\n\t\tif (prevProps.active !== active) {\n\t\t\tthis.playTransition(active);\n\t\t}\n\t}\n\n\tplayTransition(active) {\n\t\tconst { configs = {}, } = this.props;\n\t\tconst nextValue = active ? 1 : 0;\n\n\t\tif (!active) {\n\t\t\tif (configs.instantClose) {\n\t\t\t\tthis.setState({ active: null });\n\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t} else {\n\t\t\t\tthis.playAnimation(nextValue, () => {\n\t\t\t\t\tthis.setState({ active: null });\n\t\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState({ active });\n\t\t\tthis.playAnimation(nextValue);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { configs = {}, modalCount, type: modalType } = this.props,\n\t\t\t{ active } = this.state,\n\t\t\tglobalConfigs = valueAt(this, 'context.ruuiConfigs.modal'),\n\t\t\tcontainerPropsGenerator = configs.maskProps || globalConfigs.maskProps,\n\t\t\tcontainerProps = containerPropsGenerator(this.enterAnimation, configs, modalCount, modalType);\n\n\t\tif (configs.maskProps && !containerProps.style) {\n\t\t\tcontainerProps.style = globalConfigs.maskProps(\n\t\t\t\tthis.enterAnimation, configs, modalCount, modalType\n\t\t\t).style;\n\t\t}\n\n\t\treturn active ? <Animated.View {...containerProps}>\n\t\t\t<View style={styles.innerTouchable}>\n\t\t\t\t{this.renderModalInner()}\n\t\t\t</View>\n\t\t</Animated.View> : <View/>;\n\t}\n\n\trenderModalInner() {\n\t\tconst { dispatch, type: modalType, active, configs: modalConfigs } = this.props;\n\n\t\tswitch (modalType) {\n\t\tcase 'select':\n\t\t\treturn <Selector\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleSelector(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'modal':\n\t\t\treturn <CloseableModal\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleModal(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'loading':\n\t\t\treturn <LoadingMask\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tdefault:\n\t\t\treturn <View/>;\n\t\t}\n\t}\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: false,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport function defaultMaskPropsGenerator(animation, configs, modalCount, modalType) {\n\tconst averageOpacity = (0.8 / modalCount) + (modalCount * 0.1),\n\t\tbackgroundColor = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: ['rgba(0, 0, 0, 0)', `rgba(0, 0, 0, ${averageOpacity})`],\n\t\t}),\n\t\tstyle = [styles.container, {\n\t\t\tzIndex: configs.zIndex,\n\t\t\tbackgroundColor,\n\t\t}];\n\n\treturn { style, };\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n\tinnerTouchable: {\n\t\tflex: 1,\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n});\n\n'ruui/src/components/modals.js'\n:import React, { Component } from 'react';\nimport { View, StyleSheet, } from 'react-native';\n\nimport Modal from './modal';\nimport RuuiDropdown from './dropdown';\nimport { connect } from '../utils';\n\ntype Props = {\n\tpreRenders?: Array<Object>,\n\tpreRenderDelay?: Number,\n\tmodals?: Array<Object>,\n\tdispatch?: Function,\n\tscreenSize?: { width?: number, height?: number },\n\tanimationDelay?: Number,\n};\n\nclass RuuiModals extends Component {\n\tprops: Props;\n\tstatic defaultProps = {\n\t\tanimationDelay: 200,\n\t\tpreRenderDelay: 300,\n\t};\n\n\tcomponentDidMount() {\n\t\tconst { dispatch, preRenders, preRenderDelay, } = this.props;\n\n\t\tif (preRenders?.length) {\n\t\t\tfor (let i = 0; i < preRenders.length; i += 1) {\n\t\t\t\tconst item = preRenders[i];\n\t\t\t\titem.flag = false;\n\t\t\t\tsetTimeout(() => dispatch(item), i * preRenderDelay);\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { dispatch, modals, screenSize, animationDelay, } = this.props,\n\t\t\tmodalArray = Object.keys(modals).map(key => Object.assign({}, modals[key], { id: key }));\n\n\t\treturn <View\n\t\t\tref={(ref) => { global.modalsContainer = ref; }}\n\t\t\tpointerEvents=\"box-none\"\n\t\t\tstyle={styles.container}>\n\t\t\t{modalArray.map((modalConfigs, i) => {\n\t\t\t\tif (modalConfigs.type === 'dropdown') {\n\t\t\t\t\treturn <RuuiDropdown\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tscreenSize={screenSize}\n\t\t\t\t\t\t{...modalConfigs}\n\t\t\t\t\t/>;\n\t\t\t\t}\n\t\t\t\treturn <Modal\n\t\t\t\t\tkey={i}\n\t\t\t\t\tmodalCount={modalArray.filter(e => e.type !== 'dropdown').length}\n\t\t\t\t\tdispatch={dispatch}\n\t\t\t\t\tanimationDelay={animationDelay}\n\t\t\t\t\t{...modalConfigs}/>;\n\t\t\t})}\n\t\t</View>;\n\t}\n}\n\nexport default connect(({ activeModals }) => {\n\treturn {\n\t\tmodals: activeModals,\n\t};\n})(RuuiModals);\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n});\n\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/utils/helpers.js'\n:import { Dimensions } from 'react-native';\nimport type { SnappingDirection } from '../typeDefinition';\n\nexport function debounce(fn, duration) {\n\tlet timeout;\n\treturn function () {\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = null;\n\t\t\tfn.apply(this, arguments);\n\t\t}, duration);\n\t};\n}\n\nexport function uuid() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t\tconst r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\nexport function instantInterval(\n\tfunc: Function,\n\tinterval: Number,\n\ttrigger: Boolean = true,\n) {\n\tif (trigger) func.call(this);\n\treturn setInterval(func, interval);\n}\n\nexport function minGuard(value: Number, gap: Number = 0) {\n\treturn value < gap ? gap : value;\n}\n\nexport function maxGuard(value: Number, gap: Number) {\n\treturn value > gap ? gap : value;\n}\n\nconst defaultIteratee = item => item;\n\nexport function maxBy(array, iteratee = defaultIteratee) {\n\tlet result;\n\tif (array == null) return result;\n\n\tlet computed;\n\tfor (const value of array) {\n\t\tconst current = iteratee(value);\n\n\t\tif (current != null && (computed === undefined ? current === current : current > computed)) {\n\t\t\tcomputed = current;\n\t\t\tresult = value;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function clamp(value: Number, min: Number, max: Number) {\n\treturn min < max\n\t\t? (value < min ? min : value > max ? max : value)\n\t\t: (value < max ? max : value > min ? min : value);\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n\tif (x === y) {\n\t\treturn x !== 0 || y !== 0 || 1 / x === 1 / y;\n\t} else {\n\t\treturn x !== x && y !== y;\n\t}\n}\n\nexport function shallowEqual(objA, objB) {\n\tif (is(objA, objB)) return true;\n\n\tif (typeof objA !== 'object' || objA === null\n\t\t|| typeof objB !== 'object' || objB === null) {\n\t\treturn false;\n\t}\n\n\tconst keysA = Object.keys(objA);\n\tconst keysB = Object.keys(objB);\n\n\tif (keysA.length !== keysB.length) return false;\n\n\tfor (let i = 0; i < keysA.length; i += 1) {\n\t\tif (!hasOwn.call(objB, keysA[i])\n\t\t\t|| !is(objA[keysA[i]], objB[keysA[i]])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function valueAt(root = {}, path, defaultValue) {\n\tlet currentLevel = root;\n\tconst paths = path.split('.');\n\n\tfor (let i = 0; i < paths.length; i += 1) {\n\t\tif (i === paths.length - 1) {\n\t\t\treturn currentLevel[paths[i]] || defaultValue;\n\t\t} else {\n\t\t\tcurrentLevel = currentLevel[paths[i]];\n\t\t\tif (!currentLevel) return defaultValue;\n\t\t}\n\t}\n\n\treturn defaultValue;\n}\n\nfunction rawDirectionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n) {\n\tswitch (position) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tdefault:\n\t\treturn { top: 0, left: 0 };\n\t}\n}\n\n\nfunction screenGuard(position, componentSize, screenPadding = 5, moddedScreenSize = {}) {\n\tconst screenSize = { ...Dimensions.get('window'), ...moddedScreenSize },\n\t\t{ top, left, } = position;\n\tlet guardedTop = top, guardedLeft = left;\n\n\tif (top < 5) {\n\t\tguardedTop = 5;\n\t} else if (top + componentSize.height > screenSize.height - screenPadding) {\n\t\tguardedTop = screenSize.height - componentSize.height - screenPadding;\n\t}\n\n\tif (left < 5) {\n\t\tguardedLeft = 5;\n\t} else if (left + componentSize.width > screenSize.width - screenPadding) {\n\t\tguardedLeft = screenSize.width - componentSize.width - screenPadding;\n\t}\n\n\treturn { top: guardedTop, left: guardedLeft, };\n}\n\nexport function directionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n\tscreenSize,\n) {\n\treturn screenGuard(\n\t\trawDirectionSnap(top, left, width1, height1, width2, height2, position, spacing),\n\t\t{ width: width2, height: height2, }, 5, screenSize\n\t);\n}\n\nexport function arrowSnap(width, height, arrowSize, parentPosition: SnappingDirection, padding = 15) {\n\tswitch (parentPosition) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop: padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t\topacity: 0,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tleft: -arrowSize,\n\t\t\ttop: padding,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tdefault:\n\t\treturn {};\n\t}\n}\n\nexport function directionAnimatedConfigs(\n\tdirection, translateDistance, animation, finalBorderRadius = 3\n) {\n\tconst borderRadius = animation.interpolate({\n\t\t\tinputRange: [0, 0.5, 1], outputRange: [50, 15, finalBorderRadius],\n\t\t}),\n\t\topacity = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\textrapolate: 'clamp',\n\t\t});\n\n\tswitch (direction) {\n\tcase 'top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\tborderRadius: { borderRadius, },\n\t\t\ttransform: [],\n\t\t\topacity,\n\t\t};\n\tdefault:\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\t}\n}\n\n'ruui/src/utils/store/appAction.js'\n:import * as Actions from './actions';\nimport { uuid } from '../helpers';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function updateThemeConfigs(configs = {}) {\n\treturn { type: Actions.UpdateThemeConfigs, configs };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}",
        "gt": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/loadingMask.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/modals.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/index.js'",
            "'ruui/src/components/modals.js'",
            "'ruui/src/components/selector.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'"
        ],
        "content": "'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/components/modals.js'\n:import React, { Component } from 'react';\nimport { View, StyleSheet, } from 'react-native';\n\nimport Modal from './modal';\nimport RuuiDropdown from './dropdown';\nimport { connect } from '../utils';\n\ntype Props = {\n\tpreRenders?: Array<Object>,\n\tpreRenderDelay?: Number,\n\tmodals?: Array<Object>,\n\tdispatch?: Function,\n\tscreenSize?: { width?: number, height?: number },\n\tanimationDelay?: Number,\n};\n\nclass RuuiModals extends Component {\n\tprops: Props;\n\tstatic defaultProps = {\n\t\tanimationDelay: 200,\n\t\tpreRenderDelay: 300,\n\t};\n\n\tcomponentDidMount() {\n\t\tconst { dispatch, preRenders, preRenderDelay, } = this.props;\n\n\t\tif (preRenders?.length) {\n\t\t\tfor (let i = 0; i < preRenders.length; i += 1) {\n\t\t\t\tconst item = preRenders[i];\n\t\t\t\titem.flag = false;\n\t\t\t\tsetTimeout(() => dispatch(item), i * preRenderDelay);\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { dispatch, modals, screenSize, animationDelay, } = this.props,\n\t\t\tmodalArray = Object.keys(modals).map(key => Object.assign({}, modals[key], { id: key }));\n\n\t\treturn <View\n\t\t\tref={(ref) => { global.modalsContainer = ref; }}\n\t\t\tpointerEvents=\"box-none\"\n\t\t\tstyle={styles.container}>\n\t\t\t{modalArray.map((modalConfigs, i) => {\n\t\t\t\tif (modalConfigs.type === 'dropdown') {\n\t\t\t\t\treturn <RuuiDropdown\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tscreenSize={screenSize}\n\t\t\t\t\t\t{...modalConfigs}\n\t\t\t\t\t/>;\n\t\t\t\t}\n\t\t\t\treturn <Modal\n\t\t\t\t\tkey={i}\n\t\t\t\t\tmodalCount={modalArray.filter(e => e.type !== 'dropdown').length}\n\t\t\t\t\tdispatch={dispatch}\n\t\t\t\t\tanimationDelay={animationDelay}\n\t\t\t\t\t{...modalConfigs}/>;\n\t\t\t})}\n\t\t</View>;\n\t}\n}\n\nexport default connect(({ activeModals }) => {\n\treturn {\n\t\tmodals: activeModals,\n\t};\n})(RuuiModals);\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n});\n\n'ruui/src/components/selector.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, TouchableWithoutFeedback, ScrollView, View, Text, StyleSheet } from 'react-native';\n\nimport ResponsibleTouchArea from './responsibleTouchArea';\nimport SelectorItem from './selectorItem';\nimport { isAndroid, colors } from '../utils';\nimport { screenWidthPadding } from '../utils/screen';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tconfigs?: Object,\n\tanimation?: any,\n\tactive?: boolean,\n\tdispatch?: Function,\n\tonRequestClose?: Function,\n};\n\nclass Selector extends Component<any, Props, any> {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiStore: PropTypes.object,\n\t};\n\n\tconstructor(props, context) {\n\t\tsuper(props);\n\t\tthis.store = context.ruuiStore;\n\t}\n\n\trender() {\n\t\tconst { animation, configs, active, onRequestClose } = this.props,\n\t\t\ttranslateY = animation.interpolate({\n\t\t\t\tinputRange: [0, 0.32, 1], outputRange: [maxContainerSize, maxContainerSize * 0.15, 0],\n\t\t\t}), selectionContainerStyles = {\n\t\t\t\ttransform: [{ translateY }],\n\t\t\t},\n\t\t\tOptionWrapperElement = configs.options.length > 5 ? ScrollView : View,\n\t\t\tpointerEvents = active ? 'auto' : 'none';\n\n\t\treturn <View pointerEvents={pointerEvents} style={styles.container}>\n\t\t\t{configs.tapToClose ? <TouchableWithoutFeedback\n\t\t\t\tonPress={() => onRequestClose(configs)}>\n\t\t\t\t<View style={styles.touchableMask}/>\n\t\t\t</TouchableWithoutFeedback> : <View/>}\n\n\t\t\t<Animated.View\n\t\t\t\tstyle={[styles.selectionContainer, selectionContainerStyles]}>\n\t\t\t\t<View style={styles.optionWrapper}>\n\t\t\t\t\t<View style={styles.selectTitle}>\n\t\t\t\t\t\t<Text style={styles.selectTitleText}>\n\t\t\t\t\t\t\t{configs.selectText}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</View>\n\t\t\t\t\t<View style={{ maxHeight: 255 }}>\n\t\t\t\t\t\t<OptionWrapperElement style={{ backgroundColor: '#f9f9f9' }}>\n\t\t\t\t\t\t\t{this.renderOptions()}\n\t\t\t\t\t\t</OptionWrapperElement>\n\t\t\t\t\t\t{!isAndroid && <View style={styles.optionTails}/>}\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t\t<View style={styles.commandWrapper}>\n\t\t\t\t\t{this.renderCommands()}\n\t\t\t\t</View>\n\t\t\t</Animated.View>\n\t\t</View>;\n\t}\n\n\trenderOptions() {\n\t\tconst { configs } = this.props,\n\t\t\t{ options = [] } = configs;\n\n\t\treturn options.map((item, i) => {\n\t\t\treturn <SelectorItem\n\t\t\t\tkey={i}\n\t\t\t\toptionInstance={item}\n\t\t\t\tactiveInstance={configs.value}\n\t\t\t\tgetTitle={configs.getTitle}\n\t\t\t\tonPress={this.onItemPick}/>;\n\t\t});\n\t}\n\n\trenderCommands() {\n\t\tconst { configs } = this.props;\n\n\t\treturn <ResponsibleTouchArea\n\t\t\tonPress={this.cancelSelector}\n\t\t\trippleColor={colors.iOsBlue}\n\t\t\twrapperStyle={[styles.commandItemWrapper]}\n\t\t\tinnerStyle={styles.optionItemInner}\n\t\t\tfadeLevel={0.04}>\n\t\t\t<Text style={styles.commandTitle}>\n\t\t\t\t{configs.cancelText}\n\t\t\t</Text>\n\t\t</ResponsibleTouchArea>;\n\t}\n\n\tonItemPick = (item) => {\n\t\tconst { configs } = this.props;\n\n\t\tthis.store.dispatch(appActions.toggleSelector(false));\n\t\tif (configs.onSelect) configs.onSelect(item);\n\t\tif (configs.onChange\n\t\t\t&& JSON.stringify(configs.value) !== JSON.stringify(item)) {\n\t\t\tconfigs.onChange(item);\n\t\t}\n\t};\n\n\tcancelSelector = () => {\n\t\tconst { configs } = this.props;\n\n\t\tthis.store.dispatch(appActions.toggleSelector(false, {\n\t\t\tid: configs.id,\n\t\t}));\n\t\tif (configs.onCancel) configs.onCancel();\n\t}\n}\n\nexport default Selector;\n\nconst maxContainerSize = 500,\n\tselectorRadius = isAndroid ? 3 : 8,\n\tborderWidth = isAndroid ? 0 : 1,\n\tselectorMargin = 20,\n\tselectorPadding = isAndroid ? 20 : 8,\n\tselectionAlign = isAndroid ? 'left' : 'center';\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t},\n\tselectionContainer: {\n\t\tposition: 'absolute',\n\t\tbottom: 0, left: 0, right: 0,\n\t\tmaxHeight: maxContainerSize,\n\t\talignItems: 'center',\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n\tselectTitle: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#f9f9f9',\n\t\tborderTopLeftRadius: selectorRadius,\n\t\tborderTopRightRadius: selectorRadius,\n\t\tborderBottomWidth: borderWidth,\n\t\tborderColor: '#dedede',\n\t},\n\tselectTitleText: {\n\t\tpadding: selectorPadding,\n\t\tpaddingTop: 9, paddingBottom: 9,\n\t\ttextAlign: selectionAlign,\n\t\tcolor: '#8f8f8f', backgroundColor: 'transparent',\n\t\tfontSize: 14, fontWeight: '300',\n\t},\n\toptionWrapper: {\n\t\tmargin: selectorMargin,\n\t\tmarginBottom: isAndroid ? 0 : selectorMargin / 2,\n\t\twidth: screenWidthPadding(selectorMargin, 400),\n\t},\n\toptionItemInner: {\n\t\tpadding: selectorPadding,\n\t\tpaddingTop: 12, paddingBottom: 12,\n\t},\n\toptionTails: {\n\t\theight: selectorRadius,\n\t\tbackgroundColor: '#f9f9f9',\n\t\tborderBottomLeftRadius: selectorRadius,\n\t\tborderBottomRightRadius: selectorRadius,\n\t},\n\tcommandWrapper: {\n\t\tmargin: selectorMargin,\n\t\tmarginTop: 0,\n\t\tborderRadius: selectorRadius,\n\t\tborderTopLeftRadius: isAndroid ? 0 : selectorRadius,\n\t\tborderTopRightRadius: isAndroid ? 0 : selectorRadius,\n\t\tbackgroundColor: isAndroid ? '#f9f9f9' : 'transparent',\n\t\toverflow: 'hidden',\n\t\twidth: screenWidthPadding(selectorMargin, 400),\n\t},\n\tcommandItemWrapper: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#f5f5f5',\n\t\tborderBottomWidth: borderWidth,\n\t\tborderColor: '#dedede',\n\t\tborderRadius: selectorRadius,\n\t},\n\tcommandTitle: {\n\t\tcolor: colors.iOsBlue,\n\t\tfontSize: 17,\n\t\ttextAlign: isAndroid ? 'center' : 'center',\n\t\tbackgroundColor: 'transparent',\n\t},\n});\n\n'ruui/src/components/modal.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, View, StyleSheet } from 'react-native';\n\nimport Selector from './selector';\nimport LoadingMask from './loadingMask';\nimport CloseableModal from './closeableModal';\nimport { valueAt } from '../utils';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tactive?: any,\n\ttype?: string,\n\tconfigs?: Object,\n\tmodalCount?: number,\n\tdispatch?: Function,\n\tanimationDelay?: Number,\n};\n\nexport default class RuuiModal extends Component {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactive: props.active,\n\t\t};\n\t\tthis.enterAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { active, animationDelay, } = this.props;\n\t\tsetTimeout(() => this.playTransition(active), animationDelay);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { active } = this.props;\n\t\tif (prevProps.active !== active) {\n\t\t\tthis.playTransition(active);\n\t\t}\n\t}\n\n\tplayTransition(active) {\n\t\tconst { configs = {}, } = this.props;\n\t\tconst nextValue = active ? 1 : 0;\n\n\t\tif (!active) {\n\t\t\tif (configs.instantClose) {\n\t\t\t\tthis.setState({ active: null });\n\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t} else {\n\t\t\t\tthis.playAnimation(nextValue, () => {\n\t\t\t\t\tthis.setState({ active: null });\n\t\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState({ active });\n\t\t\tthis.playAnimation(nextValue);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { configs = {}, modalCount, type: modalType } = this.props,\n\t\t\t{ active } = this.state,\n\t\t\tglobalConfigs = valueAt(this, 'context.ruuiConfigs.modal'),\n\t\t\tcontainerPropsGenerator = configs.maskProps || globalConfigs.maskProps,\n\t\t\tcontainerProps = containerPropsGenerator(this.enterAnimation, configs, modalCount, modalType);\n\n\t\tif (configs.maskProps && !containerProps.style) {\n\t\t\tcontainerProps.style = globalConfigs.maskProps(\n\t\t\t\tthis.enterAnimation, configs, modalCount, modalType\n\t\t\t).style;\n\t\t}\n\n\t\treturn active ? <Animated.View {...containerProps}>\n\t\t\t<View style={styles.innerTouchable}>\n\t\t\t\t{this.renderModalInner()}\n\t\t\t</View>\n\t\t</Animated.View> : <View/>;\n\t}\n\n\trenderModalInner() {\n\t\tconst { dispatch, type: modalType, active, configs: modalConfigs } = this.props;\n\n\t\tswitch (modalType) {\n\t\tcase 'select':\n\t\t\treturn <Selector\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleSelector(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'modal':\n\t\t\treturn <CloseableModal\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleModal(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'loading':\n\t\t\treturn <LoadingMask\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tdefault:\n\t\t\treturn <View/>;\n\t\t}\n\t}\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: false,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport function defaultMaskPropsGenerator(animation, configs, modalCount, modalType) {\n\tconst averageOpacity = (0.8 / modalCount) + (modalCount * 0.1),\n\t\tbackgroundColor = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: ['rgba(0, 0, 0, 0)', `rgba(0, 0, 0, ${averageOpacity})`],\n\t\t}),\n\t\tstyle = [styles.container, {\n\t\t\tzIndex: configs.zIndex,\n\t\t\tbackgroundColor,\n\t\t}];\n\n\treturn { style, };\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n\tinnerTouchable: {\n\t\tflex: 1,\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n});\n\n'ruui/src/utils/helpers.js'\n:import { Dimensions } from 'react-native';\nimport type { SnappingDirection } from '../typeDefinition';\n\nexport function debounce(fn, duration) {\n\tlet timeout;\n\treturn function () {\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = null;\n\t\t\tfn.apply(this, arguments);\n\t\t}, duration);\n\t};\n}\n\nexport function uuid() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t\tconst r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\nexport function instantInterval(\n\tfunc: Function,\n\tinterval: Number,\n\ttrigger: Boolean = true,\n) {\n\tif (trigger) func.call(this);\n\treturn setInterval(func, interval);\n}\n\nexport function minGuard(value: Number, gap: Number = 0) {\n\treturn value < gap ? gap : value;\n}\n\nexport function maxGuard(value: Number, gap: Number) {\n\treturn value > gap ? gap : value;\n}\n\nconst defaultIteratee = item => item;\n\nexport function maxBy(array, iteratee = defaultIteratee) {\n\tlet result;\n\tif (array == null) return result;\n\n\tlet computed;\n\tfor (const value of array) {\n\t\tconst current = iteratee(value);\n\n\t\tif (current != null && (computed === undefined ? current === current : current > computed)) {\n\t\t\tcomputed = current;\n\t\t\tresult = value;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function clamp(value: Number, min: Number, max: Number) {\n\treturn min < max\n\t\t? (value < min ? min : value > max ? max : value)\n\t\t: (value < max ? max : value > min ? min : value);\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n\tif (x === y) {\n\t\treturn x !== 0 || y !== 0 || 1 / x === 1 / y;\n\t} else {\n\t\treturn x !== x && y !== y;\n\t}\n}\n\nexport function shallowEqual(objA, objB) {\n\tif (is(objA, objB)) return true;\n\n\tif (typeof objA !== 'object' || objA === null\n\t\t|| typeof objB !== 'object' || objB === null) {\n\t\treturn false;\n\t}\n\n\tconst keysA = Object.keys(objA);\n\tconst keysB = Object.keys(objB);\n\n\tif (keysA.length !== keysB.length) return false;\n\n\tfor (let i = 0; i < keysA.length; i += 1) {\n\t\tif (!hasOwn.call(objB, keysA[i])\n\t\t\t|| !is(objA[keysA[i]], objB[keysA[i]])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function valueAt(root = {}, path, defaultValue) {\n\tlet currentLevel = root;\n\tconst paths = path.split('.');\n\n\tfor (let i = 0; i < paths.length; i += 1) {\n\t\tif (i === paths.length - 1) {\n\t\t\treturn currentLevel[paths[i]] || defaultValue;\n\t\t} else {\n\t\t\tcurrentLevel = currentLevel[paths[i]];\n\t\t\tif (!currentLevel) return defaultValue;\n\t\t}\n\t}\n\n\treturn defaultValue;\n}\n\nfunction rawDirectionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n) {\n\tswitch (position) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tdefault:\n\t\treturn { top: 0, left: 0 };\n\t}\n}\n\n\nfunction screenGuard(position, componentSize, screenPadding = 5, moddedScreenSize = {}) {\n\tconst screenSize = { ...Dimensions.get('window'), ...moddedScreenSize },\n\t\t{ top, left, } = position;\n\tlet guardedTop = top, guardedLeft = left;\n\n\tif (top < 5) {\n\t\tguardedTop = 5;\n\t} else if (top + componentSize.height > screenSize.height - screenPadding) {\n\t\tguardedTop = screenSize.height - componentSize.height - screenPadding;\n\t}\n\n\tif (left < 5) {\n\t\tguardedLeft = 5;\n\t} else if (left + componentSize.width > screenSize.width - screenPadding) {\n\t\tguardedLeft = screenSize.width - componentSize.width - screenPadding;\n\t}\n\n\treturn { top: guardedTop, left: guardedLeft, };\n}\n\nexport function directionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n\tscreenSize,\n) {\n\treturn screenGuard(\n\t\trawDirectionSnap(top, left, width1, height1, width2, height2, position, spacing),\n\t\t{ width: width2, height: height2, }, 5, screenSize\n\t);\n}\n\nexport function arrowSnap(width, height, arrowSize, parentPosition: SnappingDirection, padding = 15) {\n\tswitch (parentPosition) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop: padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t\topacity: 0,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tleft: -arrowSize,\n\t\t\ttop: padding,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tdefault:\n\t\treturn {};\n\t}\n}\n\nexport function directionAnimatedConfigs(\n\tdirection, translateDistance, animation, finalBorderRadius = 3\n) {\n\tconst borderRadius = animation.interpolate({\n\t\t\tinputRange: [0, 0.5, 1], outputRange: [50, 15, finalBorderRadius],\n\t\t}),\n\t\topacity = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\textrapolate: 'clamp',\n\t\t});\n\n\tswitch (direction) {\n\tcase 'top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\tborderRadius: { borderRadius, },\n\t\t\ttransform: [],\n\t\t\topacity,\n\t\t};\n\tdefault:\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\t}\n}\n\n'ruui/src/utils/store/appAction.js'\n:import * as Actions from './actions';\nimport { uuid } from '../helpers';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function updateThemeConfigs(configs = {}) {\n\treturn { type: Actions.UpdateThemeConfigs, configs };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}",
        "gt": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/selector.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/modals.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'ProjectFlowerbed/src/js/systems/locomotion/EnterVRTransitionSystem.js'",
            "'ProjectFlowerbed/src/js/systems/raycasting/RaycastSystem.js'",
            "'ProjectFlowerbed/src/js/lib/objects/StraightRaycaster.js'",
            "'ProjectFlowerbed/src/js/ECSYConfig.js'"
        ],
        "content": "'ProjectFlowerbed/src/js/systems/locomotion/EnterVRTransitionSystem.js'\n:\n\nimport * as THREE from 'three';\n\nimport { PlayerStateComponent } from 'src/js/components/PlayerStateComponent';\nimport { SessionComponent } from '../../components/SessionComponent';\nimport { System } from 'ecsy';\nimport { THREEGlobalComponent } from 'src/js/components/THREEGlobalComponent';\nimport { getOnlyEntity } from 'src/js/utils/entityUtils';\nimport { registerSystemsAfterReady } from '../../ECSYConfig';\n\nexport class EnterVRTransitionSystem extends System {\n\tinit() {\n\t\tthis.mask = null;\n\t\tthis.maskTimer = 0;\n\n\t\tthis.hasRegisteredSystems = false;\n\t}\n\n\texecute(delta, _time) {\n\t\tif (!this.mask) {\n\t\t\tthis._createMask();\n\t\t}\n\n\t\tconst sessionState = getOnlyEntity(this.queries.session).getComponent(\n\t\t\tSessionComponent,\n\t\t);\n\t\tif (sessionState.isExperienceOpened) {\n\t\t\tthis.maskTimer += delta;\n\t\t\tthis.mask.visible = true;\n\t\t}\n\t\tif (this.maskTimer > 2) {\n\t\t\tthis.mask.material.opacity = 0;\n\t\t\tthis.mask.visible = false;\n\t\t} else if (this.maskTimer > 1) {\n\t\t\tthis.mask.material.opacity = 2 - this.maskTimer;\n\n\t\t\tif (!this.hasRegisteredSystems) {\n\t\t\t\tregisterSystemsAfterReady(this.world);\n\t\t\t\tthis.hasRegisteredSystems = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t_createMask() {\n\t\tthis.queries.player.results.forEach((entity) => {\n\t\t\tconst playerHead = entity.getComponent(PlayerStateComponent).playerHead;\n\t\t\tthis.mask = new THREE.Mesh(\n\t\t\t\tnew THREE.SphereGeometry(0.4, 32, 16),\n\t\t\t\tnew THREE.MeshBasicMaterial({\n\t\t\t\t\tcolor: 0x000000,\n\t\t\t\t\tside: THREE.BackSide,\n\t\t\t\t\ttransparent: true,\n\t\t\t\t\tdepthWrite: false,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis.mask.renderOrder = 1000;\n\t\t\tthis.mask.material.depthTest = false;\n\t\t\tthis.mask.material.depthWrite = false;\n\t\t\tthis.mask.frustumCulled = false;\n\n\t\t\tplayerHead.add(this.mask);\n\t\t});\n\t}\n}\n\nEnterVRTransitionSystem.queries = {\n\tgameManager: { components: [THREEGlobalComponent] },\n\tsession: { components: [SessionComponent] },\n\tplayer: { components: [PlayerStateComponent] },\n};\n\n'ProjectFlowerbed/src/js/systems/raycasting/RaycastSystem.js'\n:\n\nimport {\n\tCurvedRay,\n\tRayComponent,\n\tShortRay,\n\tStraightRay,\n} from '../../components/RayComponents';\n\nimport { CurvedRaycaster } from '../../lib/objects/CurvedRaycaster';\nimport { StraightRaycaster } from '../../lib/objects/StraightRaycaster';\nimport { System } from 'ecsy';\nimport { VrControllerComponent } from '../../components/VrControllerComponent';\n\nexport class RaycastSystem extends System {\n\tinit() {\n\t\tthis.straightRayEntity = null;\n\t\tthis.curvedRayEntity = null;\n\t\tthis.shortUIRayEntity = null;\n\t}\n\n\texecute(_delta, _time) {\n\t\tlet controllerInterface;\n\n\t\tthis.queries.controllers.results.forEach((entity) => {\n\t\t\tlet vrControllerComponent = entity.getComponent(VrControllerComponent);\n\t\t\tif (vrControllerComponent.handedness == 'right') {\n\t\t\t\tcontrollerInterface = vrControllerComponent.controllerInterface;\n\n\t\t\t\tif (!this.curvedRayEntity) {\n\t\t\t\t\tlet curvedRaycaster = new CurvedRaycaster();\n\t\t\t\t\tthis.curvedRayEntity = this.world.createEntity();\n\t\t\t\t\tthis.curvedRayEntity.addComponent(RayComponent, {\n\t\t\t\t\t\traycaster: curvedRaycaster,\n\t\t\t\t\t});\n\t\t\t\t\tthis.curvedRayEntity.addComponent(CurvedRay);\n\t\t\t\t}\n\n\t\t\t\tif (!this.straightRayEntity) {\n\t\t\t\t\tlet straightRaycaster = new StraightRaycaster();\n\t\t\t\t\tthis.straightRayEntity = this.world.createEntity();\n\t\t\t\t\tthis.straightRayEntity.addComponent(RayComponent, {\n\t\t\t\t\t\traycaster: straightRaycaster,\n\t\t\t\t\t});\n\t\t\t\t\tthis.straightRayEntity.addComponent(StraightRay);\n\t\t\t\t} else {\n\t\t\t\t\tthis.straightRayEntity.getComponent(\n\t\t\t\t\t\tRayComponent,\n\t\t\t\t\t).raycaster.endPointOverride = false;\n\t\t\t\t}\n\n\t\t\t\tif (!this.shortUIRayEntity) {\n\t\t\t\t\tlet straightRaycaster = new StraightRaycaster();\n\t\t\t\t\tstraightRaycaster.far = 0.2;\n\t\t\t\t\tthis.shortUIRayEntity = this.world.createEntity();\n\t\t\t\t\tthis.shortUIRayEntity.addComponent(RayComponent, {\n\t\t\t\t\t\traycaster: straightRaycaster,\n\t\t\t\t\t});\n\t\t\t\t\tthis.shortUIRayEntity.addComponent(StraightRay);\n\t\t\t\t\tthis.shortUIRayEntity.addComponent(ShortRay);\n\t\t\t\t} else {\n\t\t\t\t\tthis.shortUIRayEntity.getComponent(\n\t\t\t\t\t\tRayComponent,\n\t\t\t\t\t).raycaster.endPointOverride = false;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (!controllerInterface) return;\n\n\t\tlet direction = controllerInterface.getDirection();\n\t\tlet origin = controllerInterface.getPosition();\n\n\t\tthis.queries.rays.results.forEach((entity) => {\n\t\t\tlet rayComponent = entity.getComponent(RayComponent);\n\t\t\tif (rayComponent.originOverride) {\n\t\t\t\torigin = rayComponent.originOverride;\n\t\t\t}\n\t\t\tif (rayComponent.directionOverride) {\n\t\t\t\tdirection = rayComponent.directionOverride;\n\t\t\t}\n\t\t\trayComponent.raycaster.set(origin, direction);\n\t\t});\n\t}\n}\n\nRaycastSystem.queries = {\n\tcontrollers: {\n\t\tcomponents: [VrControllerComponent],\n\t},\n\trays: {\n\t\tcomponents: [RayComponent],\n\t},\n};\n\n'ProjectFlowerbed/src/js/lib/objects/StraightRaycaster.js'\n:\n\nimport { Raycaster, Vector3 } from 'three';\n\nimport { RAY_CONSTANTS } from '../../Constants';\n\nexport class StraightRaycaster extends Raycaster {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.firstHitOnly = true;\n\t\tthis.far = RAY_CONSTANTS.STRAIGHT_RAY_MAX_LENGTH;\n\t\tthis._pNear = new Vector3();\n\t\tthis._pFar = new Vector3();\n\t\tthis.renderedPoints = [this.pNear, this.pFar];\n\t}\n\n\tget pNear() {\n\t\treturn this.ray.at(this.near, this._pNear);\n\t}\n\n\tget pFar() {\n\t\treturn this.ray.at(this.far, this._pFar);\n\t}\n\n\tset(origin, direction) {\n\t\tthis.far = Math.min(this.far, RAY_CONSTANTS.STRAIGHT_RAY_MAX_LENGTH);\n\t\tsuper.set(origin, direction);\n\t}\n\n\tintersectObjects(objects, recursive = true, intersects = []) {\n\t\tsuper.intersectObjects(objects, recursive, intersects);\n\t\tif (intersects.length > 0 && intersects[0].distance <= 1) {\n\t\t\tthis.renderedPoints[1] = intersects[0].point;\n\t\t}\n\t\treturn intersects;\n\t}\n\n\n\tintersectCollisionWorld(collisionWorld, layerQuery) {\n\t\tlet kdRayHitResult = collisionWorld.raycastPoints(\n\t\t\tthis.pNear,\n\t\t\tthis.pFar,\n\t\t\tlayerQuery,\n\t\t);\n\n\t\tif (kdRayHitResult) {\n\t\t\tthis.renderedPoints[1] = kdRayHitResult.intersection.point.clone();\n\t\t\treturn kdRayHitResult;\n\t\t}\n\t}\n\n\tgetPoints(reset = false) {\n\t\tconst points = [...this.renderedPoints];\n\t\tif (reset) {\n\t\t\tthis.renderedPoints = [this.pNear, this.pFar];\n\t\t}\n\t\treturn points;\n\t}\n\n\n\tget renderedPortion() {\n\t\tif (this.renderedPoints) {\n\t\t\tlet intersectPoint = this.renderedPoints[1];\n\t\t\tlet renderedPortion =\n\t\t\t\tthis.pNear.distanceTo(intersectPoint) / (this.far - this.near);\n\t\t\treturn renderedPortion;\n\t\t} else {\n\t\t\treturn RAY_CONSTANTS.STRAIGHT_RAY_MAX_LENGTH;\n\t\t}\n\t}\n}\n\n'ProjectFlowerbed/src/js/ECSYConfig.js'\n:\n\nimport {\n\tAerialFaunaGroupComponent,\n\tAerialFaunaMovementComponent,\n\tWaterFaunaGroupComponent,\n\tWaterFaunaMovementComponent,\n} from './components/FaunaComponents';\nimport {\n\tCapsuleColliderComponent,\n\tCollisionAreaComponent,\n\tCollisionWorldComponent,\n\tStaticColliderComponent,\n\tStaticColliderResources,\n} from './components/ColliderComponents';\nimport {\n\tControlsPanelComponent,\n\tSettingsComponent,\n\tSettingsPanelComponent,\n} from './components/SettingsComponent';\nimport {\n\tCurvedRay,\n\tRayComponent,\n\tShortRay,\n\tStraightRay,\n} from './components/RayComponents';\nimport {\n\tEnvironmentProp,\n\tHovered,\n\tIsActive,\n\tLight,\n\tMainEnvironment,\n\tPressed,\n} from './components/GameObjectTagComponents';\nimport {\n\tInstancedMeshComponent,\n\tInstancedMeshInstanceComponent,\n} from './components/InstancedMeshComponent';\nimport {\n\tLoopingAudioComponent,\n\tLoopingAudioResources,\n\tOneshotAudioComponent,\n\tPlaylistAudioComponent,\n\tPlaylistAudioResources,\n} from './components/AudioComponents';\nimport {\n\tMorphTargetAnimationComponent,\n\tMorphTargetMeshInitialized,\n} from './components/MorphTargetAnimationComponent';\nimport {\n\tNUXMovementTriggerArea,\n\tNUXPanelComponent,\n\tNUXStateComponent,\n} from './components/NUXStateComponent';\nimport {\n\tPhotoComponent,\n\tPhotoMenuComponent,\n\tScreenshotCameraComponent,\n} from './components/ScreenshotCameraComponent';\nimport {\n\tPickedPlantComponent,\n\tPlantGrowingComponent,\n\tPlantShrinkingComponent,\n\tPlantTinyColliderComponent,\n\tPlantedComponent,\n\tPlantingStateComponent,\n\tSeedAnimationComponent,\n} from './components/PlantingComponents';\nimport {\n\tPlayerColliderComponent,\n\tPlayerStateComponent,\n} from './components/PlayerStateComponent';\nimport {\n\tSeedComponent,\n\tSeedbagComponent,\n\tSeedboxButtonComponent,\n\tSeedboxComponent,\n} from './components/SeedboxComponents';\nimport {\n\tUIPanelComponent,\n\tUIPanelMedia,\n\tUIPanelResources,\n} from './components/UIPanelComponent';\n\nimport { AerialFaunaCreationSystem } from './systems/fauna/AerialFaunaCreationSystem';\nimport { AerialFaunaMovementSystem } from './systems/fauna/AerialFaunaMovementSystem';\nimport { AmbientSoundCreationSystem } from './systems/audio/AmbientSoundCreationSystem';\nimport { AssetDatabaseComponent } from './components/AssetDatabaseComponent';\nimport { AssetLoadingSystem } from './systems/assets/AssetLoadingSystem';\nimport { AudioSystem } from './systems/audio/AudioSystem';\nimport { BootstrapSessionSystem } from './systems/core/BootstrapSessionSystem';\nimport { CameraHandContextualNUXSystem } from './systems/hands/CameraHandContextualNUXSystem';\nimport { CameraPhotoGrabTooltipSystem } from './systems/ui/progressiveTooltips/CameraPhotoGrabTooltipSystem';\nimport { CollisionAreaSystem } from './systems/collisions/CollisionAreaSystems';\nimport { CollisionWorldSystem } from './systems/collisions/CollisionSystem';\nimport { ControlsPanelSystem } from './systems/settings/ControlsPanelSystem';\nimport { DEBUG_CONSTANTS } from './Constants';\nimport { DebugClearFlagsSystem } from './systems/landing-page/DebugClearFlagsSystem';\nimport { EnterVRTransitionSystem } from './systems/locomotion/EnterVRTransitionSystem';\nimport { FaunaAnimationComponent } from './components/FaunaAnimationComponent';\nimport { FaunaAnimationSystem } from './systems/fauna/FaunaAnimationSystem';\nimport { FaunaClusterComponent } from './components/FaunaClusterComponent';\nimport { FaunaColliderComponent } from './components/FaunaColliderComponent';\nimport { FaunaCreationSystem } from './systems/fauna/FaunaCreationSystem';\nimport { FaunaMovementBoundSamplerSystem } from './devTools/FaunaMovementBoundSamplerSystem';\nimport { GameStateComponent } from './components/GameStateComponent';\nimport { GameStateUpdateSystem } from './systems/core/GameStateUpdateSystem';\nimport { GardenManagementSystem } from './systems/landing-page/GardenManagementSystem';\nimport { GazeFollowSystem } from './systems/ui/GazeFollowSystem';\nimport { GazeFollowerComponent } from './components/GazeFollowerComponent';\nimport { HandAnimationSystem } from './systems/hands/HandAnimationSystem';\nimport { HandCreationSystem } from './systems/hands/HandCreationSystem';\nimport { HandNUXSystem } from './systems/hands/HandNUXSystem';\nimport { HandPoseExtractionSystem } from './devTools/HandPoseExtractorSystem';\nimport { IndicatorRingComponent } from './components/IndicatorRingComponent';\nimport { IndicatorRingSystem } from './systems/ui/IndicatorRingSystem';\nimport { JoystickMovementSystem } from './systems/locomotion/JoystickMovementSystem';\nimport { LoadingScreenComponent } from './components/LoadingScreenComponent';\nimport { LoadingScreenSystem } from './systems/landing-page/LoadingScreenSystem';\nimport { LocalSaveDataSystem } from './systems/saveLoad/SaveDataSystem';\nimport { LocomotionVignetteSystem } from './systems/locomotion/LocomotionVignetteSystem';\nimport { MeshIdComponent } from './components/AssetReplacementComponents';\nimport { MeshInstancingSystem } from './systems/mesh/MeshInstancingSystem';\nimport { MeshPreviewObject } from './components/MeshPreviewObjectComponent';\nimport { ModelOptimizeSystem } from './systems/mesh/ModelOptimizeSystem';\nimport { MorphTargetAnimationSystem } from './systems/fauna/MorphTargetAnimationSystem';\nimport { MovableFaunaComponent } from './components/MovableFaunaComponent';\nimport { MovableFaunaSystem } from './systems/fauna/MovableFaunaSystem';\nimport { MusicSystem } from './systems/audio/MusicSystem';\nimport { NUXCreationSystem } from './systems/ui/NUXCreationSystem';\nimport { NUXSystem } from './systems/ui/NUXSystem';\nimport { Object3DComponent } from './components/Object3DComponent';\nimport { ObjectFollowSystem } from './systems/ui/ObjectFollowSystem';\nimport { ObjectFollowerComponent } from './components/ObjectFollowerComponent';\nimport { OptimizedModelComponent } from './components/OptimizedModelComponent';\nimport { PerformanceOptionsComponent } from './components/PerformanceOptionsComponent';\nimport { PerformanceTestSystem } from './systems/performance/PerformanceTestSystem';\nimport { PhotoAutoDeleteSystem } from './systems/camera/PhotoAutoDeleteSystem';\nimport { PhotoMenuCreationSystem } from './systems/camera/PhotoMenuCreationSystem';\nimport { PhotoSystem } from './systems/camera/PhotoSystem';\nimport { PlantColliderSystem } from './systems/plants/PlantColliderSystem';\nimport { PlantGrowingSystem } from './systems/plants/PlantGrowingSystem';\nimport { PlantPickingSystem } from './systems/plants/PlantPickingSystem';\nimport { PlantShrinkingSystem } from './systems/plants/PlantShrinkingSystem';\nimport { PlantingArrowSystem } from './systems/plants/PlantingArrowSystem';\nimport { PlantingSystem } from './systems/plants/PlantingSystem';\nimport { PlayerPhysicsSystem } from './systems/core/PlayerPhysicsSystem';\nimport { PlaylistAudioSystem } from './systems/audio/PlaylistAudioSystem';\nimport { PropsCalibrationSystem } from './devTools/PropsCalibrationSystem';\nimport { RayDrawingSystem } from './systems/raycasting/RayDrawingSystem';\nimport { RaycastSystem } from './systems/raycasting/RaycastSystem';\nimport { RenderingSystem } from './systems/core/RenderingSystem';\nimport { ResetNUXSystem } from './systems/ui/ResetNUXSystem';\nimport { SavableObject } from './components/SaveDataComponents';\nimport { SaveControllerSystem } from './systems/saveLoad/SaveControllerSystem';\nimport { SceneCreationSystem } from './systems/core/SceneCreationSystem';\nimport { SceneLightingComponent } from './components/SceneLightingComponent';\nimport { ScreenshotCameraCreationSystem } from './systems/camera/ScreenshotCameraCreationSystem';\nimport { ScreenshotCameraSystem } from './systems/camera/ScreenshotCameraSystem';\nimport { SeedAnimationSystem } from './systems/plants/SeedAnimationSystem';\nimport { SeedboxChangePageTooltipSystem } from './systems/ui/progressiveTooltips/SeedboxChangePageTooltipSystem';\nimport { SeedboxCreationSystem } from './systems/seedbox/SeedboxCreationSystem';\nimport { SeedboxFocusDetectionSystem } from './systems/seedbox/SeedboxFocusDetectionSystem';\nimport { SeedboxHandContextualNUXSystem } from './systems/hands/SeedboxHandContextualNUXSystem';\nimport { SeedboxSystem } from './systems/seedbox/SeedboxSystem';\nimport { SelectionWheelComponent } from './components/SelectionWheelComponent';\nimport { SelectionWheelCreationSystem } from './systems/selectionWheels/SelectionWheelCreationSystem';\nimport { SelectionWheelSystem } from './systems/selectionWheels/SelectionWheelSystem';\nimport { SessionComponent } from './components/SessionComponent';\nimport { SettingsCreationSystem } from './systems/settings/SettingsCreationSystem';\nimport { SettingsSystem } from './systems/settings/SettingsSystem';\nimport { SkeletonAnimationComponent } from './components/SkeletonAnimationComponent';\nimport { SnapTurnSystem } from './systems/locomotion/SnapTurnSystem';\nimport { StationaryFaunaComponent } from './components/StationaryFaunaComponent';\nimport { StationaryFaunaSystem } from './systems/fauna/StationaryFaunaSystem';\nimport { THREEGlobalComponent } from './components/THREEGlobalComponent';\nimport { TeleportationSystem } from './systems/locomotion/TeleportationSystem';\nimport { UIPanelInteractionSystem } from './systems/ui/UIPanelInteractionSystem';\nimport { UIPanelMediaSystem } from './systems/ui/UIPanelMediaSystem';\nimport { UIPanelPreviewSystem } from './systems/ui/UIPanelPreviewSystem';\nimport { UIPanelResourcesSystem } from './systems/ui/UIPanelResourcesSystem';\nimport { UserIdentityComponent } from './components/UserIdentityComponent';\nimport { VrControllerComponent } from './components/VrControllerComponent';\nimport { VrInputSystem } from './systems/core/VrInputSystem';\nimport { WaterFaunaCreationSystem } from './systems/fauna/WaterFaunaCreationSystem';\nimport { WaterFaunaMovementSystem } from './systems/fauna/WaterFaunaMovementSystem';\nimport { WateringSystem } from './systems/plants/WateringSystem';\nimport { World } from 'ecsy';\n\nconst ENABLE_HAND_POSER = false;\n\nexport const setupECSY = () => {\n\tlet world = new World();\n\n\tregisterTagComponents(world);\n\n\tregisterComponents(world);\n\n\tregisterSystems(world);\n\n\treturn world;\n};\n\n\nconst registerTagComponents = (world) => {\n\tworld.registerComponent(Light);\n\tworld.registerComponent(Hovered);\n\tworld.registerComponent(Pressed);\n\tworld.registerComponent(IsActive);\n\tworld.registerComponent(StraightRay);\n\tworld.registerComponent(ShortRay);\n\tworld.registerComponent(CurvedRay);\n\tworld.registerComponent(MainEnvironment);\n\tworld.registerComponent(EnvironmentProp);\n\tworld.registerComponent(MorphTargetMeshInitialized);\n};\n\n\nconst registerComponents = (world) => {\n\tworld.registerComponent(VrControllerComponent);\n\tworld.registerComponent(Object3DComponent);\n\tworld.registerComponent(GameStateComponent);\n\tworld.registerComponent(PlayerStateComponent);\n\tworld.registerComponent(OptimizedModelComponent);\n\tworld.registerComponent(PerformanceOptionsComponent);\n\tworld.registerComponent(THREEGlobalComponent);\n\tworld.registerComponent(SeedComponent);\n\tworld.registerComponent(CollisionWorldComponent);\n\tworld.registerComponent(StaticColliderComponent);\n\tworld.registerComponent(StaticColliderResources);\n\tworld.registerComponent(CapsuleColliderComponent);\n\tworld.registerComponent(PlayerColliderComponent);\n\tworld.registerComponent(SeedboxComponent);\n\tworld.registerComponent(SeedboxButtonComponent);\n\tworld.registerComponent(GazeFollowerComponent);\n\tworld.registerComponent(ObjectFollowerComponent);\n\tworld.registerComponent(UIPanelComponent);\n\tworld.registerComponent(UIPanelResources);\n\tworld.registerComponent(UIPanelMedia);\n\tworld.registerComponent(NUXStateComponent);\n\tworld.registerComponent(NUXPanelComponent);\n\tworld.registerComponent(RayComponent);\n\tworld.registerComponent(IndicatorRingComponent);\n\tworld.registerComponent(PlantedComponent);\n\tworld.registerComponent(PickedPlantComponent);\n\tworld.registerComponent(SavableObject);\n\tworld.registerComponent(CollisionAreaComponent);\n\tworld.registerComponent(NUXMovementTriggerArea);\n\tworld.registerComponent(ScreenshotCameraComponent);\n\tworld.registerComponent(PhotoComponent);\n\tworld.registerComponent(PhotoMenuComponent);\n\tworld.registerComponent(AssetDatabaseComponent);\n\tworld.registerComponent(MeshIdComponent);\n\tworld.registerComponent(SelectionWheelComponent);\n\tworld.registerComponent(OneshotAudioComponent);\n\tworld.registerComponent(PlantGrowingComponent);\n\tworld.registerComponent(PlantShrinkingComponent);\n\tworld.registerComponent(PlantingStateComponent);\n\tworld.registerComponent(LoopingAudioComponent);\n\tworld.registerComponent(LoopingAudioResources);\n\tworld.registerComponent(PlaylistAudioComponent);\n\tworld.registerComponent(PlaylistAudioResources);\n\tworld.registerComponent(PlantTinyColliderComponent);\n\tworld.registerComponent(SeedAnimationComponent);\n\tworld.registerComponent(SeedbagComponent);\n\tworld.registerComponent(InstancedMeshComponent);\n\tworld.registerComponent(InstancedMeshInstanceComponent);\n\tworld.registerComponent(FaunaClusterComponent);\n\tworld.registerComponent(FaunaColliderComponent);\n\tworld.registerComponent(FaunaAnimationComponent);\n\tworld.registerComponent(MorphTargetAnimationComponent);\n\tworld.registerComponent(SkeletonAnimationComponent);\n\tworld.registerComponent(MovableFaunaComponent);\n\tworld.registerComponent(StationaryFaunaComponent);\n\tworld.registerComponent(MeshPreviewObject);\n\tworld.registerComponent(SceneLightingComponent, false);\n\tworld.registerComponent(LoadingScreenComponent);\n\tworld.registerComponent(UserIdentityComponent);\n\tworld.registerComponent(WaterFaunaMovementComponent);\n\tworld.registerComponent(WaterFaunaGroupComponent);\n\tworld.registerComponent(SettingsPanelComponent);\n\tworld.registerComponent(ControlsPanelComponent);\n\tworld.registerComponent(SettingsComponent);\n\tworld.registerComponent(AerialFaunaMovementComponent);\n\tworld.registerComponent(AerialFaunaGroupComponent);\n\tworld.registerComponent(SessionComponent);\n};\n\n\nconst registerSystems = (world) => {\n\tworld.registerSystem(GardenManagementSystem);\n\n\n\tworld.registerSystem(AssetLoadingSystem, { priority: -10 });\n\n\n\tworld.registerSystem(LoadingScreenSystem, { priority: -9 });\n\n\n\tworld.registerSystem(DebugClearFlagsSystem);\n\tworld.registerSystem(ResetNUXSystem);\n\n\n\tworld.registerSystem(RenderingSystem, { priority: 99 });\n};\n\n\nexport const registerSystemsAfterLoad = (world) => {\n\n\n\tworld.registerSystem(SceneCreationSystem, { priority: -2 });\n\n\n\n\tworld.registerSystem(ModelOptimizeSystem, { priority: -1 });\n\tworld.registerSystem(BootstrapSessionSystem);\n\n\n\tworld.registerSystem(UIPanelResourcesSystem);\n\tworld.registerSystem(UIPanelInteractionSystem);\n\tworld.registerSystem(UIPanelMediaSystem);\n\n\tworld.registerSystem(HandCreationSystem);\n\tworld.registerSystem(EnterVRTransitionSystem);\n\tworld.registerSystem(ScreenshotCameraCreationSystem);\n\tworld.registerSystem(PhotoMenuCreationSystem);\n\tworld.registerSystem(SelectionWheelCreationSystem);\n\tworld.registerSystem(SeedboxCreationSystem);\n\tworld.registerSystem(CollisionWorldSystem);\n\tworld.registerSystem(CollisionAreaSystem);\n\tworld.registerSystem(VrInputSystem);\n\tworld.registerSystem(HandAnimationSystem);\n\n\tworld.registerSystem(PlayerPhysicsSystem);\n\tworld.registerSystem(WateringSystem);\n\n\n\n\n\tworld.registerSystem(RaycastSystem);\n\n\n\n\tworld.registerSystem(GameStateUpdateSystem);\n\tworld.registerSystem(SelectionWheelSystem);\n\tworld.registerSystem(IndicatorRingSystem);\n\tworld.registerSystem(SnapTurnSystem);\n\tworld.registerSystem(TeleportationSystem);\n\tworld.registerSystem(HandNUXSystem);\n\tworld.registerSystem(SeedboxHandContextualNUXSystem);\n\tworld.registerSystem(CameraHandContextualNUXSystem);\n\tworld.registerSystem(JoystickMovementSystem);\n\tif (ENABLE_HAND_POSER) {\n\n\t\tworld.registerSystem(HandPoseExtractionSystem);\n\t}\n\n\tworld.registerSystem(GazeFollowSystem);\n\tworld.registerSystem(ObjectFollowSystem);\n\tworld.registerSystem(NUXCreationSystem);\n\tworld.registerSystem(SettingsCreationSystem);\n\n\tworld.registerSystem(SettingsSystem);\n\tworld.registerSystem(ControlsPanelSystem);\n\n\n\n\tworld.registerSystem(ScreenshotCameraSystem);\n\tworld.registerSystem(PhotoSystem);\n\tworld.registerSystem(PhotoAutoDeleteSystem);\n\tworld.registerSystem(PlantPickingSystem);\n\tworld.registerSystem(SeedboxFocusDetectionSystem);\n\tworld.registerSystem(SeedboxSystem);\n\tworld.registerSystem(PlantingSystem);\n\tworld.registerSystem(PlantingArrowSystem);\n\tworld.registerSystem(SeedAnimationSystem);\n\tworld.registerSystem(PlantGrowingSystem);\n\tworld.registerSystem(PlantShrinkingSystem);\n\tworld.registerSystem(PlantColliderSystem);\n\tworld.registerSystem(SaveControllerSystem);\n\tworld.registerSystem(RayDrawingSystem);\n\tworld.registerSystem(LocalSaveDataSystem);\n\tworld.registerSystem(WaterFaunaCreationSystem);\n\tworld.registerSystem(WaterFaunaMovementSystem);\n\tworld.registerSystem(AerialFaunaCreationSystem);\n\tworld.registerSystem(AerialFaunaMovementSystem);\n\tworld.registerSystem(FaunaAnimationSystem);\n\tworld.registerSystem(FaunaCreationSystem);\n\tworld.registerSystem(MovableFaunaSystem);\n\tworld.registerSystem(FaunaMovementBoundSamplerSystem);\n\tworld.registerSystem(StationaryFaunaSystem);\n\tworld.registerSystem(MorphTargetAnimationSystem);\n\tworld.registerSystem(PerformanceTestSystem);\n\tworld.registerSystem(LocomotionVignetteSystem);\n\tif (ENABLE_HAND_POSER) {\n\t\tworld.registerSystem(PropsCalibrationSystem);\n\t}\n\n\tworld.registerSystem(MeshInstancingSystem);\n};\n\n\nexport const registerSystemsAfterReady = (world) => {\n\n\n\n\tworld.registerSystem(AudioSystem);\n\n\tworld.registerSystem(AmbientSoundCreationSystem);\n\tworld.registerSystem(MusicSystem);\n\tworld.registerSystem(PlaylistAudioSystem);\n\n\n\n\tworld.registerSystem(NUXSystem);\n\n\tworld.registerSystem(SeedboxChangePageTooltipSystem);\n\tworld.registerSystem(CameraPhotoGrabTooltipSystem);\n\n\tif (DEBUG_CONSTANTS.ENABLE_UI_PREVIEW_SYSTEM) {\n\t\tworld.registerSystem(UIPanelPreviewSystem);\n\t}\n};\n",
        "gt": [
            "'ProjectFlowerbed/src/js/lib/objects/StraightRaycaster.js'",
            "'ProjectFlowerbed/src/js/systems/raycasting/RaycastSystem.js'",
            "'ProjectFlowerbed/src/js/ECSYConfig.js'",
            "'ProjectFlowerbed/src/js/systems/locomotion/EnterVRTransitionSystem.js'"
        ]
    },
    {
        "files": [
            "'neode/src/Factory.js'",
            "'neode/src/Services/UpdateRelationship.js'",
            "'neode/src/Relationship.js'",
            "'neode/test/Factory.spec.js'"
        ],
        "content": "'neode/src/Factory.js'\n:import Collection from './Collection';\nimport Node from './Node';\nimport Relationship from './Relationship';\nimport neo4j from 'neo4j-driver';\n\nimport { EAGER_ID, EAGER_LABELS, EAGER_TYPE, } from './Query/EagerUtils';\nimport { DIRECTION_IN, } from './RelationshipType';\n\nexport default class Factory {\n\n\n    constructor(neode) {\n        this._neode = neode;\n    }\n\n\n    hydrateFirst(res, alias, definition) {\n        if ( !res || !res.records.length ) {\n            return false;\n        }\n\n        return this.hydrateNode( res.records[0].get(alias), definition );\n    }\n\n\n\n    hydrate(res, alias, definition) {\n        if ( !res ) {\n            return false;\n        }\n\n        const nodes = res.records.map( row => this.hydrateNode(row.get(alias), definition) );\n\n        return new Collection(this._neode, nodes);\n    }\n\n\n    getDefinition(labels) {\n        return this._neode.models.getByLabels(labels);\n    }\n\n\n    hydrateNode(record, definition) {\n\n        if ( neo4j.isInt( record.identity ) && Array.isArray( record.labels ) ) {\n            record = Object.assign({}, record.properties, {\n                [EAGER_ID]: record.identity,\n                [EAGER_LABELS]: record.labels,\n            });\n        }\n\n\n        const identity = record[ EAGER_ID ];\n        const labels = record[ EAGER_LABELS ];\n\n\n        if ( !definition ) {\n            definition = this.getDefinition(labels);\n        }\n        else if ( typeof definition === 'string' ) {\n            definition = this._neode.models.get(definition);\n        }\n\n\n        if ( !definition ) {\n            throw new Error(`No model definition found for labels ${ JSON.stringify(labels) }`);\n        }\n\n\n        const properties = new Map;\n\n        definition.properties().forEach((value, key) => {\n            if ( record.hasOwnProperty(key) ) {\n                properties.set(key, record[ key ]);\n            }\n        });\n\n\n        const node = new Node(this._neode, definition, identity, labels, properties);\n\n\n        definition.eager().forEach(eager => {\n            const name = eager.name();\n\n            if ( !record[ name ] ) {\n                return;\n            }\n\n            switch ( eager.type() ) {\n                case 'node':\n                    node.setEager(name, this.hydrateNode(record[ name ]) );\n                    break;\n\n                case 'nodes':\n                    node.setEager( name, new Collection(this._neode, record[ name ].map(value => this.hydrateNode(value))) );\n                    break;\n\n                case 'relationship':\n                    node.setEager( name, this.hydrateRelationship(eager, record[ name ], node) );\n                    break;\n\n                case 'relationships':\n                    node.setEager( name, new Collection(this._neode, record[ name ].map(value => this.hydrateRelationship(eager, value, node))) );\n                    break;\n            }\n        });\n\n        return node;\n    }\n\n\n    hydrateRelationship(definition, record, this_node) {\n\n        const identity = record[ EAGER_ID ];\n        const type = record[ EAGER_TYPE ];\n\n\n\n\n\n        const properties = new Map;\n\n        definition.properties().forEach((value, key) => {\n            if ( record.hasOwnProperty(key) ) {\n                properties.set(key, record[ key ]);\n            }\n        });\n\n\n        const other_node = this.hydrateNode( record[ definition.nodeAlias() ] );\n\n\n        const start_node = definition.direction() == DIRECTION_IN\n            ? other_node: this_node;\n\n        const end_node = definition.direction() == DIRECTION_IN\n            ? this_node : other_node;\n\n        return new Relationship(this._neode, definition, identity, type, properties, start_node, end_node);\n    }\n\n}\n'neode/src/Services/UpdateRelationship.js'\n:import CleanValue from './CleanValue';\nimport Validator from './Validator';\n\nexport default function UpdateRelationship(neode, model, identity, properties) {\n    const query = `\n        MATCH ()-[rel]->()\n        WHERE id(rel) = $identity\n        SET rel += $properties\n        RETURN properties(rel) as properties\n    `;\n\n\n    const schema = model.schema();\n\n    Object.keys(schema).forEach(key => {\n        const config = typeof schema[ key ] == 'string' ? {type: schema[ key ]} : schema[ key ];\n\n\n        if (properties[ key ]) {\n            properties[ key ] = CleanValue(config, properties[ key ]);\n        }\n    });\n\n    return Validator(neode, model, properties)\n        .then(properties => {\n            return neode.writeCypher(query, { identity, properties })\n                .then(res => {\n                    return res.records[0].get('properties');\n                });\n        });\n}\n\n'neode/src/Relationship.js'\n:import Entity from './Entity';\nimport UpdateRelationship from './Services/UpdateRelationship';\nimport DeleteRelationship from './Services/DeleteRelationship';\nimport { DIRECTION_IN, } from './RelationshipType';\n\nexport default class Relationship extends Entity {\n\n    constructor(neode, definition, identity, type, properties, start, end, node_alias) {\n        super();\n\n        this._neode = neode;\n        this._definition = definition;\n        this._identity = identity;\n        this._type = type;\n        this._properties = properties || new Map;\n        this._start = start;\n        this._end = end;\n        this._node_alias = node_alias;\n    }\n\n\n    definition() {\n        return this._definition;\n    }\n\n\n    type() {\n        return this._type;\n    }\n\n\n    startNode() {\n        return this._start;\n    }\n\n\n    endNode() {\n        return this._end;\n    }\n\n\n    otherNode() {\n        return this._definition.direction() == DIRECTION_IN\n            ? this.startNode()\n            : this.endNode();\n    }\n\n\n    toJson() {\n        const output = {\n            _id: this.id(),\n            _type: this.type(),\n        };\n\n        const definition = this.definition();\n\n\n        definition.properties().forEach((property, key) => {\n            if ( property.hidden() ) {\n                return;\n            }\n\n            if ( this._properties.has(key) ) {\n                output[ key ] = this.valueToJson(property, this._properties.get( key ));\n            }\n        });\n\n\n        return this.otherNode().toJson()\n            .then(json => {\n                output[ definition.nodeAlias() ] = json;\n\n                return output;\n            });\n    }\n\n\n    update(properties) {\n\n\n        this._definition.properties().forEach(property => {\n            const name = property.name();\n\n            if ( property.required() && !properties.hasOwnProperty(name) ) {\n                properties[ name ] = this._properties.get( name );\n            }\n        });\n\n        return UpdateRelationship(this._neode, this._definition, this._identity, properties)\n            .then(properties => {\n                Object.entries(properties).forEach(( [key, value] ) => {\n                    this._properties.set( key, value );\n                });\n            })\n            .then(() => {\n                return this;\n            });\n    }\n\n\n    delete() {\n        return DeleteRelationship(this._neode, this._identity)\n            .then(() => {\n                this._deleted = true;\n\n                return this;\n            });\n    }\n}\n\n'neode/test/Factory.spec.js'\n:import {assert, expect} from 'chai';\nimport Collection from '../src/Collection';\nimport Factory from '../src/Factory';\nimport Model from '../src/Model';\nimport Node from '../src/Node';\nimport Relationship from '../src/Relationship';\nimport { EAGER_ID, EAGER_LABELS, EAGER_TYPE, eagerNode, } from '../src/Query/EagerUtils';\nimport neo4j from 'neo4j-driver';\nimport RelationshipType from '../src/RelationshipType';\n\ndescribe('Factory.js', () => {\n    let instance;\n    let factory;\n    let model;\n    let alt_model;\n\n    before(done => {\n        instance = require('./instance')();\n        factory = new Factory(instance);\n\n        model = instance.model('FactoryTest', {\n            id: 'number'\n        });\n\n        alt_model = instance.model('AnotherFactoryTest', {\n            id: 'number',\n            relationship: {\n                type: 'relationship',\n                relationship: 'RELATIONSHIP',\n                target: 'AnotherFactoryTest',\n                direction: 'out',\n\n                eager: true,\n\n                properties: {\n                    prop: 'float',\n                },\n            },\n            relationships: {\n                type: 'relationships',\n                relationship: 'RELATIONSHIPS',\n                target: 'AnotherFactoryTest',\n                alias: 'alias',\n                direction: 'in',\n\n                eager: true,\n            },\n            node: {\n                type: 'node',\n                relationship: 'NODE',\n                target: 'AnotherFactoryTest',\n                direction: 'out',\n\n                eager: true,\n            },\n            nodes: {\n                type: 'nodes',\n                relationship: 'NODES',\n                target: 'AnotherFactoryTest',\n                direction: 'in',\n\n                eager: true,\n            },\n        });\n\n        Promise.all([\n            instance.create('FactoryTest', { id: 1 }),\n            instance.create('FactoryTest', { id: 2 })\n        ])\n            .then(() => done())\n            .catch(e => done(e));\n    });\n\n    after(done => {\n        instance.deleteAll('FactoryTest')\n            .then(() => instance.close())\n            .then(() => done())\n            .catch(e => done(e));\n    });\n\n    describe('::getDefinition', () => {\n        it('should get a model definition based on an array of labels', () => {\n            const output = factory.getDefinition(['FactoryTest']);\n\n            expect(output).to.be.an.instanceOf(Model);\n        });\n\n        it('should return false when definition not found', () => {\n            const output = factory.getDefinition(['Unknown']);\n\n            expect(output).to.equal(false);\n        });\n    });\n\n    describe('::hydrateFirst', () => {\n        it('should return false on invalid result', () => {\n            expect( factory.hydrateFirst(false) ).to.equal(false);\n        });\n\n        it('should return false on empty result', () => {\n            expect( factory.hydrateFirst({ records: [] }) ).to.equal(false);\n        });\n\n        it('should hydrate alias from first result', done => {\n            instance.cypher(`\n                MATCH (n:FactoryTest)\n                RETURN n {\n                    .*,\n                    ${EAGER_ID}: id(n),\n                    ${EAGER_LABELS}: labels(n)\n                } ORDER BY n.id ASC LIMIT 1\n            `)\n                .then(res => {\n                    return factory.hydrateFirst(res, 'n');\n                })\n                .then(res => {\n                    expect( res ).to.be.an.instanceOf( Node );\n                    expect( res._model ).to.equal( model );\n\n                    expect( res.get('id') ).to.equal(1);\n\n                })\n                .then(() => done())\n                .catch(e => done(e))\n        });\n\n        it('should hydrate alias from first result with specific model definition', done => {\n            instance.cypher(`\n                MATCH (n:FactoryTest)\n                RETURN n {\n                    .*,\n                    ${EAGER_ID}: id(n),\n                    ${EAGER_LABELS}: labels(n)\n                } ORDER BY n.id ASC LIMIT 1\n            `)\n                .then(res => {\n                    return factory.hydrateFirst(res, 'n', alt_model);\n                })\n                .then(res => {\n                    expect( res ).to.be.an.instanceOf( Node );\n                    expect( res._model ).to.equal( alt_model );\n\n                    expect( res.get('id') ).to.equal(1);\n\n                })\n                .then(() => done())\n                .catch(e => done(e))\n        });\n\n    });\n\n    describe('::hydrate', () => {\n        it('should return false on invalid result', () => {\n            expect( factory.hydrate(false) ).to.equal(false);\n        });\n\n        it('should return an empty node collection', () => {\n            const output = factory.hydrate({ records: [] });\n\n            expect( output ).to.be.an.instanceOf(Collection);\n            expect( output.length ).to.equal(0);\n        });\n\n        it('should hydrate alias', done => {\n            instance.cypher(`\n                MATCH (n:FactoryTest)\n                RETURN n {\n                    .*,\n                    ${EAGER_ID}: id(n),\n                    ${EAGER_LABELS}: labels(n)\n                } ORDER BY n.id ASC\n            `)\n                .then(res => {\n                    return factory.hydrate(res, 'n');\n                })\n                .then(res => {\n                    expect( res ).to.be.an.instanceOf(Collection);\n                    expect( res.length ).to.equal(2);\n\n                    expect( res.get(0).get('id') ).to.equal(1);\n                    expect( res.get(1).get('id') ).to.equal(2);\n\n                    expect( res.get(0) ).to.be.an.instanceOf( Node );\n\n                })\n                .then(() => done())\n                .catch(e => done(e))\n        });\n\n        it('should hydrate alias from first result with specific model definition', done => {\n            instance.cypher(`\n                MATCH (n:FactoryTest)\n                RETURN n {\n                    .*,\n                    ${EAGER_ID}: id(n),\n                    ${EAGER_LABELS}: labels(n)\n                } ORDER BY n.id ASC\n            `)\n                .then(res => {\n                    return factory.hydrate(res, 'n', alt_model);\n                })\n                .then(res => {\n                    expect( res ).to.be.an.instanceOf(Collection);\n                    expect( res.length ).to.equal(2);\n\n                    expect( res.get(0).get('id') ).to.equal(1);\n                    expect( res.get(0)._model ).to.equal(alt_model);\n                    expect( res.get(1).get('id') ).to.equal(2);\n                    expect( res.get(1)._model ).to.equal(alt_model);\n\n                })\n                .then(() => done())\n                .catch(e => done(e));\n        });\n\n        it('should hydrate a node and eager relationships', done => {\n            instance.cypher(`\n                CREATE (t:AnotherFactoryTest { id: 3 })\n                CREATE (t)-[:RELATIONSHIP { prop: 1.234 }]->(:AnotherFactoryTest {id: 4})\n                CREATE (t)<-[:RELATIONSHIPS]-(:AnotherFactoryTest {id: 5})\n                CREATE (t)-[:NODE]->(:AnotherFactoryTest {id: 6})\n                CREATE (t)<-[:NODES]-(:AnotherFactoryTest {id: 7})\n\n                RETURN ${eagerNode(instance, 3, 't', alt_model)}\n            `)\n                .then(res => {\n                    return factory.hydrate(res, 't')\n                })\n                .then(res => {\n                    expect( res.length ).to.equal(1)\n\n                    const node = res.get(0);\n\n\n                    expect( node ).to.be.an.instanceOf(Node);\n                    expect( node.get('id').toNumber() ).to.equal(3);\n\n\n                    const relationship = node.get('relationship');\n                    expect( relationship ).to.be.an.instanceOf(Relationship);\n\n                    expect( relationship.type() ).to.equal('RELATIONSHIP');\n                    expect( relationship.definition() ).to.be.an.instanceOf(RelationshipType);\n\n                    expect( relationship.startNode().get('id').toNumber() ).to.equal(3);\n                    expect( relationship.endNode().get('id').toNumber() ).to.equal(4);\n                    expect( relationship.otherNode().get('id').toNumber() ).to.equal(4);\n\n                    expect( relationship.get('prop') ).to.equal(1.234);\n\n\n                    expect( node.get('relationships') ).to.be.an.instanceOf(Collection);\n\n                    expect( node.get('relationships').first().startNode().get('id').toNumber() ).to.equal(5);\n                    expect( node.get('relationships').first().endNode().get('id').toNumber() ).to.equal(3);\n                    expect( node.get('relationships').first().otherNode().get('id').toNumber() ).to.equal(5);\n\n\n                    expect( node.get('node') ).to.be.an.instanceOf(Node);\n                    expect( node.get('node').get('id').toNumber() ).to.equal(6);\n\n\n                    expect( node.get('nodes') ).to.be.an.instanceOf(Collection);\n                    expect( node.get('nodes').first().get('id').toNumber() ).to.equal(7);\n\n                    return relationship.toJson();\n                })\n                .then(json => {\n                    expect(json).to.deep.include({\n                        _type: 'RELATIONSHIP',\n                        prop: 1.234,\n                    });\n\n                    expect(json.node).to.deep.include({\n                        id: 4,\n                    });\n                })\n                .then(() => {\n                    return instance.cypher(`MATCH (n:AnotherFactoryTest) WHERE n.id IN [3, 4, 5, 6, 7] DETACH DELETE n`);\n                })\n                .then(() => done())\n                .catch(e => done(e))\n\n        });\n\n        it('should convert and hydrate a native node', done => {\n            instance.cypher(`CREATE (t:AnotherFactoryTest { id: 8 }) RETURN t`)\n                .then(res => {\n                    return factory.hydrate(res, 't')\n                })\n                .then(output => {\n                    expect( output ).to.be.an.instanceOf(Collection);\n                    expect( output.length ).to.equal(1);\n\n                    const first = output.first();\n\n                    expect( first ).to.be.an.instanceOf(Node);\n                    expect( first.model() ).be.an.instanceOf(Model);\n                    expect( first.model().name() ).to.equal('AnotherFactoryTest');\n                    expect( first.get('id').toNumber() ).to.equal(8);\n\n                    return first.delete();\n                })\n                .then(() => done())\n                .catch(e => done(e));\n        });\n    });\n});",
        "gt": [
            "'neode/src/Services/UpdateRelationship.js'",
            "'neode/src/Relationship.js'",
            "'neode/src/Factory.js'",
            "'neode/test/Factory.spec.js'"
        ]
    },
    {
        "files": [
            "'ProjectFlowerbed/src/js/systems/locomotion/EnterVRTransitionSystem.js'",
            "'ProjectFlowerbed/src/js/ECSYConfig.js'",
            "'ProjectFlowerbed/src/js/systems/settings/ControlsPanelSystem.js'"
        ],
        "content": "'ProjectFlowerbed/src/js/systems/locomotion/EnterVRTransitionSystem.js'\n:\n\nimport * as THREE from 'three';\n\nimport { PlayerStateComponent } from 'src/js/components/PlayerStateComponent';\nimport { SessionComponent } from '../../components/SessionComponent';\nimport { System } from 'ecsy';\nimport { THREEGlobalComponent } from 'src/js/components/THREEGlobalComponent';\nimport { getOnlyEntity } from 'src/js/utils/entityUtils';\nimport { registerSystemsAfterReady } from '../../ECSYConfig';\n\nexport class EnterVRTransitionSystem extends System {\n\tinit() {\n\t\tthis.mask = null;\n\t\tthis.maskTimer = 0;\n\n\t\tthis.hasRegisteredSystems = false;\n\t}\n\n\texecute(delta, _time) {\n\t\tif (!this.mask) {\n\t\t\tthis._createMask();\n\t\t}\n\n\t\tconst sessionState = getOnlyEntity(this.queries.session).getComponent(\n\t\t\tSessionComponent,\n\t\t);\n\t\tif (sessionState.isExperienceOpened) {\n\t\t\tthis.maskTimer += delta;\n\t\t\tthis.mask.visible = true;\n\t\t}\n\t\tif (this.maskTimer > 2) {\n\t\t\tthis.mask.material.opacity = 0;\n\t\t\tthis.mask.visible = false;\n\t\t} else if (this.maskTimer > 1) {\n\t\t\tthis.mask.material.opacity = 2 - this.maskTimer;\n\n\t\t\tif (!this.hasRegisteredSystems) {\n\t\t\t\tregisterSystemsAfterReady(this.world);\n\t\t\t\tthis.hasRegisteredSystems = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t_createMask() {\n\t\tthis.queries.player.results.forEach((entity) => {\n\t\t\tconst playerHead = entity.getComponent(PlayerStateComponent).playerHead;\n\t\t\tthis.mask = new THREE.Mesh(\n\t\t\t\tnew THREE.SphereGeometry(0.4, 32, 16),\n\t\t\t\tnew THREE.MeshBasicMaterial({\n\t\t\t\t\tcolor: 0x000000,\n\t\t\t\t\tside: THREE.BackSide,\n\t\t\t\t\ttransparent: true,\n\t\t\t\t\tdepthWrite: false,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis.mask.renderOrder = 1000;\n\t\t\tthis.mask.material.depthTest = false;\n\t\t\tthis.mask.material.depthWrite = false;\n\t\t\tthis.mask.frustumCulled = false;\n\n\t\t\tplayerHead.add(this.mask);\n\t\t});\n\t}\n}\n\nEnterVRTransitionSystem.queries = {\n\tgameManager: { components: [THREEGlobalComponent] },\n\tsession: { components: [SessionComponent] },\n\tplayer: { components: [PlayerStateComponent] },\n};\n\n'ProjectFlowerbed/src/js/ECSYConfig.js'\n:\n\nimport {\n\tAerialFaunaGroupComponent,\n\tAerialFaunaMovementComponent,\n\tWaterFaunaGroupComponent,\n\tWaterFaunaMovementComponent,\n} from './components/FaunaComponents';\nimport {\n\tCapsuleColliderComponent,\n\tCollisionAreaComponent,\n\tCollisionWorldComponent,\n\tStaticColliderComponent,\n\tStaticColliderResources,\n} from './components/ColliderComponents';\nimport {\n\tControlsPanelComponent,\n\tSettingsComponent,\n\tSettingsPanelComponent,\n} from './components/SettingsComponent';\nimport {\n\tCurvedRay,\n\tRayComponent,\n\tShortRay,\n\tStraightRay,\n} from './components/RayComponents';\nimport {\n\tEnvironmentProp,\n\tHovered,\n\tIsActive,\n\tLight,\n\tMainEnvironment,\n\tPressed,\n} from './components/GameObjectTagComponents';\nimport {\n\tInstancedMeshComponent,\n\tInstancedMeshInstanceComponent,\n} from './components/InstancedMeshComponent';\nimport {\n\tLoopingAudioComponent,\n\tLoopingAudioResources,\n\tOneshotAudioComponent,\n\tPlaylistAudioComponent,\n\tPlaylistAudioResources,\n} from './components/AudioComponents';\nimport {\n\tMorphTargetAnimationComponent,\n\tMorphTargetMeshInitialized,\n} from './components/MorphTargetAnimationComponent';\nimport {\n\tNUXMovementTriggerArea,\n\tNUXPanelComponent,\n\tNUXStateComponent,\n} from './components/NUXStateComponent';\nimport {\n\tPhotoComponent,\n\tPhotoMenuComponent,\n\tScreenshotCameraComponent,\n} from './components/ScreenshotCameraComponent';\nimport {\n\tPickedPlantComponent,\n\tPlantGrowingComponent,\n\tPlantShrinkingComponent,\n\tPlantTinyColliderComponent,\n\tPlantedComponent,\n\tPlantingStateComponent,\n\tSeedAnimationComponent,\n} from './components/PlantingComponents';\nimport {\n\tPlayerColliderComponent,\n\tPlayerStateComponent,\n} from './components/PlayerStateComponent';\nimport {\n\tSeedComponent,\n\tSeedbagComponent,\n\tSeedboxButtonComponent,\n\tSeedboxComponent,\n} from './components/SeedboxComponents';\nimport {\n\tUIPanelComponent,\n\tUIPanelMedia,\n\tUIPanelResources,\n} from './components/UIPanelComponent';\n\nimport { AerialFaunaCreationSystem } from './systems/fauna/AerialFaunaCreationSystem';\nimport { AerialFaunaMovementSystem } from './systems/fauna/AerialFaunaMovementSystem';\nimport { AmbientSoundCreationSystem } from './systems/audio/AmbientSoundCreationSystem';\nimport { AssetDatabaseComponent } from './components/AssetDatabaseComponent';\nimport { AssetLoadingSystem } from './systems/assets/AssetLoadingSystem';\nimport { AudioSystem } from './systems/audio/AudioSystem';\nimport { BootstrapSessionSystem } from './systems/core/BootstrapSessionSystem';\nimport { CameraHandContextualNUXSystem } from './systems/hands/CameraHandContextualNUXSystem';\nimport { CameraPhotoGrabTooltipSystem } from './systems/ui/progressiveTooltips/CameraPhotoGrabTooltipSystem';\nimport { CollisionAreaSystem } from './systems/collisions/CollisionAreaSystems';\nimport { CollisionWorldSystem } from './systems/collisions/CollisionSystem';\nimport { ControlsPanelSystem } from './systems/settings/ControlsPanelSystem';\nimport { DEBUG_CONSTANTS } from './Constants';\nimport { DebugClearFlagsSystem } from './systems/landing-page/DebugClearFlagsSystem';\nimport { EnterVRTransitionSystem } from './systems/locomotion/EnterVRTransitionSystem';\nimport { FaunaAnimationComponent } from './components/FaunaAnimationComponent';\nimport { FaunaAnimationSystem } from './systems/fauna/FaunaAnimationSystem';\nimport { FaunaClusterComponent } from './components/FaunaClusterComponent';\nimport { FaunaColliderComponent } from './components/FaunaColliderComponent';\nimport { FaunaCreationSystem } from './systems/fauna/FaunaCreationSystem';\nimport { FaunaMovementBoundSamplerSystem } from './devTools/FaunaMovementBoundSamplerSystem';\nimport { GameStateComponent } from './components/GameStateComponent';\nimport { GameStateUpdateSystem } from './systems/core/GameStateUpdateSystem';\nimport { GardenManagementSystem } from './systems/landing-page/GardenManagementSystem';\nimport { GazeFollowSystem } from './systems/ui/GazeFollowSystem';\nimport { GazeFollowerComponent } from './components/GazeFollowerComponent';\nimport { HandAnimationSystem } from './systems/hands/HandAnimationSystem';\nimport { HandCreationSystem } from './systems/hands/HandCreationSystem';\nimport { HandNUXSystem } from './systems/hands/HandNUXSystem';\nimport { HandPoseExtractionSystem } from './devTools/HandPoseExtractorSystem';\nimport { IndicatorRingComponent } from './components/IndicatorRingComponent';\nimport { IndicatorRingSystem } from './systems/ui/IndicatorRingSystem';\nimport { JoystickMovementSystem } from './systems/locomotion/JoystickMovementSystem';\nimport { LoadingScreenComponent } from './components/LoadingScreenComponent';\nimport { LoadingScreenSystem } from './systems/landing-page/LoadingScreenSystem';\nimport { LocalSaveDataSystem } from './systems/saveLoad/SaveDataSystem';\nimport { LocomotionVignetteSystem } from './systems/locomotion/LocomotionVignetteSystem';\nimport { MeshIdComponent } from './components/AssetReplacementComponents';\nimport { MeshInstancingSystem } from './systems/mesh/MeshInstancingSystem';\nimport { MeshPreviewObject } from './components/MeshPreviewObjectComponent';\nimport { ModelOptimizeSystem } from './systems/mesh/ModelOptimizeSystem';\nimport { MorphTargetAnimationSystem } from './systems/fauna/MorphTargetAnimationSystem';\nimport { MovableFaunaComponent } from './components/MovableFaunaComponent';\nimport { MovableFaunaSystem } from './systems/fauna/MovableFaunaSystem';\nimport { MusicSystem } from './systems/audio/MusicSystem';\nimport { NUXCreationSystem } from './systems/ui/NUXCreationSystem';\nimport { NUXSystem } from './systems/ui/NUXSystem';\nimport { Object3DComponent } from './components/Object3DComponent';\nimport { ObjectFollowSystem } from './systems/ui/ObjectFollowSystem';\nimport { ObjectFollowerComponent } from './components/ObjectFollowerComponent';\nimport { OptimizedModelComponent } from './components/OptimizedModelComponent';\nimport { PerformanceOptionsComponent } from './components/PerformanceOptionsComponent';\nimport { PerformanceTestSystem } from './systems/performance/PerformanceTestSystem';\nimport { PhotoAutoDeleteSystem } from './systems/camera/PhotoAutoDeleteSystem';\nimport { PhotoMenuCreationSystem } from './systems/camera/PhotoMenuCreationSystem';\nimport { PhotoSystem } from './systems/camera/PhotoSystem';\nimport { PlantColliderSystem } from './systems/plants/PlantColliderSystem';\nimport { PlantGrowingSystem } from './systems/plants/PlantGrowingSystem';\nimport { PlantPickingSystem } from './systems/plants/PlantPickingSystem';\nimport { PlantShrinkingSystem } from './systems/plants/PlantShrinkingSystem';\nimport { PlantingArrowSystem } from './systems/plants/PlantingArrowSystem';\nimport { PlantingSystem } from './systems/plants/PlantingSystem';\nimport { PlayerPhysicsSystem } from './systems/core/PlayerPhysicsSystem';\nimport { PlaylistAudioSystem } from './systems/audio/PlaylistAudioSystem';\nimport { PropsCalibrationSystem } from './devTools/PropsCalibrationSystem';\nimport { RayDrawingSystem } from './systems/raycasting/RayDrawingSystem';\nimport { RaycastSystem } from './systems/raycasting/RaycastSystem';\nimport { RenderingSystem } from './systems/core/RenderingSystem';\nimport { ResetNUXSystem } from './systems/ui/ResetNUXSystem';\nimport { SavableObject } from './components/SaveDataComponents';\nimport { SaveControllerSystem } from './systems/saveLoad/SaveControllerSystem';\nimport { SceneCreationSystem } from './systems/core/SceneCreationSystem';\nimport { SceneLightingComponent } from './components/SceneLightingComponent';\nimport { ScreenshotCameraCreationSystem } from './systems/camera/ScreenshotCameraCreationSystem';\nimport { ScreenshotCameraSystem } from './systems/camera/ScreenshotCameraSystem';\nimport { SeedAnimationSystem } from './systems/plants/SeedAnimationSystem';\nimport { SeedboxChangePageTooltipSystem } from './systems/ui/progressiveTooltips/SeedboxChangePageTooltipSystem';\nimport { SeedboxCreationSystem } from './systems/seedbox/SeedboxCreationSystem';\nimport { SeedboxFocusDetectionSystem } from './systems/seedbox/SeedboxFocusDetectionSystem';\nimport { SeedboxHandContextualNUXSystem } from './systems/hands/SeedboxHandContextualNUXSystem';\nimport { SeedboxSystem } from './systems/seedbox/SeedboxSystem';\nimport { SelectionWheelComponent } from './components/SelectionWheelComponent';\nimport { SelectionWheelCreationSystem } from './systems/selectionWheels/SelectionWheelCreationSystem';\nimport { SelectionWheelSystem } from './systems/selectionWheels/SelectionWheelSystem';\nimport { SessionComponent } from './components/SessionComponent';\nimport { SettingsCreationSystem } from './systems/settings/SettingsCreationSystem';\nimport { SettingsSystem } from './systems/settings/SettingsSystem';\nimport { SkeletonAnimationComponent } from './components/SkeletonAnimationComponent';\nimport { SnapTurnSystem } from './systems/locomotion/SnapTurnSystem';\nimport { StationaryFaunaComponent } from './components/StationaryFaunaComponent';\nimport { StationaryFaunaSystem } from './systems/fauna/StationaryFaunaSystem';\nimport { THREEGlobalComponent } from './components/THREEGlobalComponent';\nimport { TeleportationSystem } from './systems/locomotion/TeleportationSystem';\nimport { UIPanelInteractionSystem } from './systems/ui/UIPanelInteractionSystem';\nimport { UIPanelMediaSystem } from './systems/ui/UIPanelMediaSystem';\nimport { UIPanelPreviewSystem } from './systems/ui/UIPanelPreviewSystem';\nimport { UIPanelResourcesSystem } from './systems/ui/UIPanelResourcesSystem';\nimport { UserIdentityComponent } from './components/UserIdentityComponent';\nimport { VrControllerComponent } from './components/VrControllerComponent';\nimport { VrInputSystem } from './systems/core/VrInputSystem';\nimport { WaterFaunaCreationSystem } from './systems/fauna/WaterFaunaCreationSystem';\nimport { WaterFaunaMovementSystem } from './systems/fauna/WaterFaunaMovementSystem';\nimport { WateringSystem } from './systems/plants/WateringSystem';\nimport { World } from 'ecsy';\n\nconst ENABLE_HAND_POSER = false;\n\nexport const setupECSY = () => {\n\tlet world = new World();\n\n\tregisterTagComponents(world);\n\n\tregisterComponents(world);\n\n\tregisterSystems(world);\n\n\treturn world;\n};\n\n\nconst registerTagComponents = (world) => {\n\tworld.registerComponent(Light);\n\tworld.registerComponent(Hovered);\n\tworld.registerComponent(Pressed);\n\tworld.registerComponent(IsActive);\n\tworld.registerComponent(StraightRay);\n\tworld.registerComponent(ShortRay);\n\tworld.registerComponent(CurvedRay);\n\tworld.registerComponent(MainEnvironment);\n\tworld.registerComponent(EnvironmentProp);\n\tworld.registerComponent(MorphTargetMeshInitialized);\n};\n\n\nconst registerComponents = (world) => {\n\tworld.registerComponent(VrControllerComponent);\n\tworld.registerComponent(Object3DComponent);\n\tworld.registerComponent(GameStateComponent);\n\tworld.registerComponent(PlayerStateComponent);\n\tworld.registerComponent(OptimizedModelComponent);\n\tworld.registerComponent(PerformanceOptionsComponent);\n\tworld.registerComponent(THREEGlobalComponent);\n\tworld.registerComponent(SeedComponent);\n\tworld.registerComponent(CollisionWorldComponent);\n\tworld.registerComponent(StaticColliderComponent);\n\tworld.registerComponent(StaticColliderResources);\n\tworld.registerComponent(CapsuleColliderComponent);\n\tworld.registerComponent(PlayerColliderComponent);\n\tworld.registerComponent(SeedboxComponent);\n\tworld.registerComponent(SeedboxButtonComponent);\n\tworld.registerComponent(GazeFollowerComponent);\n\tworld.registerComponent(ObjectFollowerComponent);\n\tworld.registerComponent(UIPanelComponent);\n\tworld.registerComponent(UIPanelResources);\n\tworld.registerComponent(UIPanelMedia);\n\tworld.registerComponent(NUXStateComponent);\n\tworld.registerComponent(NUXPanelComponent);\n\tworld.registerComponent(RayComponent);\n\tworld.registerComponent(IndicatorRingComponent);\n\tworld.registerComponent(PlantedComponent);\n\tworld.registerComponent(PickedPlantComponent);\n\tworld.registerComponent(SavableObject);\n\tworld.registerComponent(CollisionAreaComponent);\n\tworld.registerComponent(NUXMovementTriggerArea);\n\tworld.registerComponent(ScreenshotCameraComponent);\n\tworld.registerComponent(PhotoComponent);\n\tworld.registerComponent(PhotoMenuComponent);\n\tworld.registerComponent(AssetDatabaseComponent);\n\tworld.registerComponent(MeshIdComponent);\n\tworld.registerComponent(SelectionWheelComponent);\n\tworld.registerComponent(OneshotAudioComponent);\n\tworld.registerComponent(PlantGrowingComponent);\n\tworld.registerComponent(PlantShrinkingComponent);\n\tworld.registerComponent(PlantingStateComponent);\n\tworld.registerComponent(LoopingAudioComponent);\n\tworld.registerComponent(LoopingAudioResources);\n\tworld.registerComponent(PlaylistAudioComponent);\n\tworld.registerComponent(PlaylistAudioResources);\n\tworld.registerComponent(PlantTinyColliderComponent);\n\tworld.registerComponent(SeedAnimationComponent);\n\tworld.registerComponent(SeedbagComponent);\n\tworld.registerComponent(InstancedMeshComponent);\n\tworld.registerComponent(InstancedMeshInstanceComponent);\n\tworld.registerComponent(FaunaClusterComponent);\n\tworld.registerComponent(FaunaColliderComponent);\n\tworld.registerComponent(FaunaAnimationComponent);\n\tworld.registerComponent(MorphTargetAnimationComponent);\n\tworld.registerComponent(SkeletonAnimationComponent);\n\tworld.registerComponent(MovableFaunaComponent);\n\tworld.registerComponent(StationaryFaunaComponent);\n\tworld.registerComponent(MeshPreviewObject);\n\tworld.registerComponent(SceneLightingComponent, false);\n\tworld.registerComponent(LoadingScreenComponent);\n\tworld.registerComponent(UserIdentityComponent);\n\tworld.registerComponent(WaterFaunaMovementComponent);\n\tworld.registerComponent(WaterFaunaGroupComponent);\n\tworld.registerComponent(SettingsPanelComponent);\n\tworld.registerComponent(ControlsPanelComponent);\n\tworld.registerComponent(SettingsComponent);\n\tworld.registerComponent(AerialFaunaMovementComponent);\n\tworld.registerComponent(AerialFaunaGroupComponent);\n\tworld.registerComponent(SessionComponent);\n};\n\n\nconst registerSystems = (world) => {\n\tworld.registerSystem(GardenManagementSystem);\n\n\n\tworld.registerSystem(AssetLoadingSystem, { priority: -10 });\n\n\n\tworld.registerSystem(LoadingScreenSystem, { priority: -9 });\n\n\n\tworld.registerSystem(DebugClearFlagsSystem);\n\tworld.registerSystem(ResetNUXSystem);\n\n\n\tworld.registerSystem(RenderingSystem, { priority: 99 });\n};\n\n\nexport const registerSystemsAfterLoad = (world) => {\n\n\n\tworld.registerSystem(SceneCreationSystem, { priority: -2 });\n\n\n\n\tworld.registerSystem(ModelOptimizeSystem, { priority: -1 });\n\tworld.registerSystem(BootstrapSessionSystem);\n\n\n\tworld.registerSystem(UIPanelResourcesSystem);\n\tworld.registerSystem(UIPanelInteractionSystem);\n\tworld.registerSystem(UIPanelMediaSystem);\n\n\tworld.registerSystem(HandCreationSystem);\n\tworld.registerSystem(EnterVRTransitionSystem);\n\tworld.registerSystem(ScreenshotCameraCreationSystem);\n\tworld.registerSystem(PhotoMenuCreationSystem);\n\tworld.registerSystem(SelectionWheelCreationSystem);\n\tworld.registerSystem(SeedboxCreationSystem);\n\tworld.registerSystem(CollisionWorldSystem);\n\tworld.registerSystem(CollisionAreaSystem);\n\tworld.registerSystem(VrInputSystem);\n\tworld.registerSystem(HandAnimationSystem);\n\n\tworld.registerSystem(PlayerPhysicsSystem);\n\tworld.registerSystem(WateringSystem);\n\n\n\n\n\tworld.registerSystem(RaycastSystem);\n\n\n\n\tworld.registerSystem(GameStateUpdateSystem);\n\tworld.registerSystem(SelectionWheelSystem);\n\tworld.registerSystem(IndicatorRingSystem);\n\tworld.registerSystem(SnapTurnSystem);\n\tworld.registerSystem(TeleportationSystem);\n\tworld.registerSystem(HandNUXSystem);\n\tworld.registerSystem(SeedboxHandContextualNUXSystem);\n\tworld.registerSystem(CameraHandContextualNUXSystem);\n\tworld.registerSystem(JoystickMovementSystem);\n\tif (ENABLE_HAND_POSER) {\n\n\t\tworld.registerSystem(HandPoseExtractionSystem);\n\t}\n\n\tworld.registerSystem(GazeFollowSystem);\n\tworld.registerSystem(ObjectFollowSystem);\n\tworld.registerSystem(NUXCreationSystem);\n\tworld.registerSystem(SettingsCreationSystem);\n\n\tworld.registerSystem(SettingsSystem);\n\tworld.registerSystem(ControlsPanelSystem);\n\n\n\n\tworld.registerSystem(ScreenshotCameraSystem);\n\tworld.registerSystem(PhotoSystem);\n\tworld.registerSystem(PhotoAutoDeleteSystem);\n\tworld.registerSystem(PlantPickingSystem);\n\tworld.registerSystem(SeedboxFocusDetectionSystem);\n\tworld.registerSystem(SeedboxSystem);\n\tworld.registerSystem(PlantingSystem);\n\tworld.registerSystem(PlantingArrowSystem);\n\tworld.registerSystem(SeedAnimationSystem);\n\tworld.registerSystem(PlantGrowingSystem);\n\tworld.registerSystem(PlantShrinkingSystem);\n\tworld.registerSystem(PlantColliderSystem);\n\tworld.registerSystem(SaveControllerSystem);\n\tworld.registerSystem(RayDrawingSystem);\n\tworld.registerSystem(LocalSaveDataSystem);\n\tworld.registerSystem(WaterFaunaCreationSystem);\n\tworld.registerSystem(WaterFaunaMovementSystem);\n\tworld.registerSystem(AerialFaunaCreationSystem);\n\tworld.registerSystem(AerialFaunaMovementSystem);\n\tworld.registerSystem(FaunaAnimationSystem);\n\tworld.registerSystem(FaunaCreationSystem);\n\tworld.registerSystem(MovableFaunaSystem);\n\tworld.registerSystem(FaunaMovementBoundSamplerSystem);\n\tworld.registerSystem(StationaryFaunaSystem);\n\tworld.registerSystem(MorphTargetAnimationSystem);\n\tworld.registerSystem(PerformanceTestSystem);\n\tworld.registerSystem(LocomotionVignetteSystem);\n\tif (ENABLE_HAND_POSER) {\n\t\tworld.registerSystem(PropsCalibrationSystem);\n\t}\n\n\tworld.registerSystem(MeshInstancingSystem);\n};\n\n\nexport const registerSystemsAfterReady = (world) => {\n\n\n\n\tworld.registerSystem(AudioSystem);\n\n\tworld.registerSystem(AmbientSoundCreationSystem);\n\tworld.registerSystem(MusicSystem);\n\tworld.registerSystem(PlaylistAudioSystem);\n\n\n\n\tworld.registerSystem(NUXSystem);\n\n\tworld.registerSystem(SeedboxChangePageTooltipSystem);\n\tworld.registerSystem(CameraPhotoGrabTooltipSystem);\n\n\tif (DEBUG_CONSTANTS.ENABLE_UI_PREVIEW_SYSTEM) {\n\t\tworld.registerSystem(UIPanelPreviewSystem);\n\t}\n};\n\n'ProjectFlowerbed/src/js/systems/settings/ControlsPanelSystem.js'\n:\n\nimport { ControlsPanelComponent } from '../../components/SettingsComponent';\nimport { GameStateComponent } from '../../components/GameStateComponent';\nimport { InteractionSystem } from '../../lib/InteractionSystem';\nimport { IsActive } from '../../components/GameObjectTagComponents';\n\nexport class ControlsPanelSystem extends InteractionSystem {\n\tinit() {\n\t\tthis.interactionMode = GameStateComponent.INTERACTION_MODES.CONTROLS;\n\t}\n\n\tonExecute() {}\n\n\tonEnterMode() {\n\t\tthis.queries.controlsMenu.results.forEach((entity) => {\n\t\t\tif (!entity.hasComponent(IsActive)) {\n\t\t\t\tentity.addComponent(IsActive);\n\t\t\t}\n\t\t});\n\t}\n\n\tonExitMode() {\n\t\tthis.queries.activeControlsMenu.results.forEach((entity) => {\n\t\t\tif (entity.hasComponent(IsActive)) {\n\t\t\t\tentity.removeComponent(IsActive);\n\t\t\t}\n\t\t});\n\t}\n}\n\nControlsPanelSystem.addQueries({\n\tcontrolsMenu: { components: [ControlsPanelComponent] },\n\tactiveControlsMenu: {\n\t\tcomponents: [ControlsPanelComponent, IsActive],\n\t},\n});\n",
        "gt": [
            "'ProjectFlowerbed/src/js/systems/settings/ControlsPanelSystem.js'",
            "'ProjectFlowerbed/src/js/ECSYConfig.js'",
            "'ProjectFlowerbed/src/js/systems/locomotion/EnterVRTransitionSystem.js'"
        ]
    },
    {
        "files": [
            "'neode/src/Queryable.js'",
            "'neode/src/Query/WithDistinctStatement.js'",
            "'neode/src/Model.js'",
            "'neode/src/Query/Builder.js'",
            "'neode/src/Services/FindById.js'",
            "'neode/src/Query/Match.js'"
        ],
        "content": "'neode/src/Queryable.js'\n:import Builder from './Query/Builder';\nimport Create from './Services/Create';\nimport DeleteAll from './Services/DeleteAll';\nimport FindAll from './Services/FindAll';\nimport FindById from './Services/FindById';\nimport FindWithinDistance from './Services/FindWithinDistance';\nimport First from './Services/First';\nimport MergeOn from './Services/MergeOn';\n\nexport default class Queryable {\n\n\n    constructor(neode) {\n        this._neode = neode;\n    }\n\n\n    query() {\n        return new Builder(this._neode);\n    }\n\n\n    create(properties) {\n        return Create(this._neode, this, properties);\n    }\n\n\n    merge(properties) {\n        const merge_on = this.mergeFields();\n\n        return MergeOn(this._neode, this, merge_on, properties);\n    }\n\n\n    mergeOn(match, set) {\n        const merge_on = Object.keys(match);\n        const properties = Object.assign({}, match, set);\n\n        return MergeOn(this._neode, this, merge_on, properties);\n    }\n\n\n    deleteAll() {\n        return DeleteAll(this._neode, this);\n    }\n\n\n    all(properties, order, limit, skip) {\n        return FindAll(this._neode, this, properties, order, limit, skip);\n    }\n\n\n    find(id) {\n        const primary_key = this.primaryKey();\n\n        return this.first(primary_key, id);\n    }\n\n\n    findById(id) {\n        return FindById(this._neode, this, id);\n    }\n\n\n    first(key, value) {\n        return First(this._neode, this, key, value);\n    }\n\n\n    withinDistance(location_property, point, distance, properties, order, limit, skip) {\n        return FindWithinDistance(this._neode, this, location_property, point, distance, properties, order, limit, skip);\n    }\n\n}\n'neode/src/Query/WithDistinctStatement.js'\n:export default class WithDistinctStatement {\n    constructor(...args) {\n        this._with = args;\n    }\n\n    toString() {\n        const vars = this._with.join(',');\n        return 'WITH DISTINCT '+  vars;\n    }\n}\n'neode/src/Model.js'\n:import Queryable from './Queryable';\n\nimport RelationshipType, {DIRECTION_BOTH} from './RelationshipType';\nimport Property from './Property';\n\nconst RELATIONSHIP_TYPES = [ 'relationship', 'relationships', 'node', 'nodes' ];\n\nexport default class Model extends Queryable {\n    constructor(neode, name, schema) {\n        super(neode);\n\n        this._name = name;\n        this._schema = schema;\n\n        this._properties = new Map;\n        this._relationships = new Map;\n        this._labels = [ name ];\n\n\n        this._primary_key = name.toLowerCase() + '_id';\n\n        this._unique = [];\n        this._indexed = [];\n        this._hidden = [];\n        this._readonly = [];\n\n\n        for (let key in schema) {\n            const value = schema[ key ];\n\n            switch ( key ) {\n                case 'labels':\n                    this.setLabels(...value);\n                    break;\n\n                default:\n                    if ( value.type &&  RELATIONSHIP_TYPES.indexOf(value.type) > -1 ) {\n                        const { relationship, direction, target, properties, eager, cascade, alias } = value;\n\n                        this.relationship(key, value.type, relationship, direction, target, properties, eager, cascade, alias);\n                    }\n                    else {\n                        this.addProperty(key, value);\n                    }\n                    break;\n            }\n        }\n    }\n\n\n    name() {\n        return this._name;\n    }\n\n\n    schema() {\n        return this._schema;\n    }\n\n\n    properties() {\n        return this._properties;\n    }\n\n\n    setLabels(...labels) {\n        this._labels = labels.sort();\n\n        return this;\n    }\n\n\n    labels() {\n        return this._labels;\n    }\n\n\n    addProperty(key, schema) {\n        const property = new Property(key, schema);\n\n        this._properties.set(key, property);\n\n\n        if ( property.primary() ) {\n            this._primary_key = key;\n        }\n\n\n        if ( property.unique() || property.primary() ) {\n            this._unique.push(key);\n        }\n\n\n        if ( property.indexed() ) {\n            this._indexed.push(key);\n        }\n\n\n        if ( property.hidden() ) {\n            this._hidden.push(key);\n        }\n\n\n        if ( property.readonly() ) {\n            this._readonly.push(key);\n        }\n\n        return this;\n    }\n\n\n    relationship(name, type, relationship, direction = DIRECTION_BOTH, target, schema = {}, eager = false, cascade = false, node_alias = 'node') {\n        if (relationship && direction && schema) {\n            this._relationships.set(name, new RelationshipType(name, type, relationship, direction, target, schema, eager, cascade, node_alias));\n        }\n\n        return this._relationships.get(name);\n    }\n\n\n    relationships() {\n        return this._relationships;\n    }\n\n\n    eager() {\n        return Array.from(this._relationships).map(([key, value]) => {\n            return value._eager ? value : null;\n        }).filter(a => !!a);\n    }\n\n\n    primaryKey() {\n        return this._primary_key;\n    }\n\n\n    hidden() {\n        return this._hidden;\n    }\n\n\n    indexes() {\n        return this._indexed;\n    }\n\n\n    mergeFields() {\n        return this._unique.concat(this._indexed);\n    }\n}\n'neode/src/Query/Builder.js'\n:import Match from './Match';\nimport Order from './Order';\n\nimport Statement from './Statement';\nimport Property from './Property';\nimport WhereStatement from './WhereStatement';\nimport Where, {OPERATOR_EQUALS} from './Where';\nimport WhereBetween from './WhereBetween';\nimport WhereId from './WhereId';\nimport WhereRaw from './WhereRaw';\nimport WithStatement from './WithStatement';\nimport WithDistinctStatement from './WithDistinctStatement';\nimport neo4j from 'neo4j-driver';\n\nexport const mode = {\n    READ: \"READ\",\n    WRITE: \"WRITE\"\n};\n\n\nexport default class Builder {\n\n    constructor(neode) {\n        this._neode = neode;\n\n        this._params = {};\n        this._statements = [];\n        this._current;\n        this._where;\n        this._set_count = 0;\n    }\n\n\n    statement(prefix) {\n        if (this._current) {\n            this._statements.push(this._current);\n        }\n\n        this._current = new Statement(prefix);\n\n        return this;\n    }\n\n\n    whereStatement(prefix) {\n        if (this._where) {\n            this._current.where(this._where);\n        }\n\n        this._where = new WhereStatement(prefix);\n\n        return this;\n    }\n\n\n    match(alias, model, properties) {\n        this.whereStatement('WHERE');\n        this.statement();\n\n        this._current.match( new Match(alias, model, this._convertPropertyMap( alias, properties ) ) );\n\n        return this;\n    }\n\n    optionalMatch(alias, model) {\n        this.whereStatement('WHERE');\n        this.statement('OPTIONAL MATCH');\n\n        this._current.match(new Match(alias, model));\n\n        return this;\n    }\n\n\n    with(...args) {\n        this.whereStatement('WHERE');\n        this.statement();\n\n        this._statements.push(new WithStatement(...args));\n\n        return this;\n    }\n\n\n    withDistinct(...args) {\n        this.whereStatement('WHERE');\n        this.statement();\n\n        this._statements.push(new WithDistinctStatement(...args));\n\n        return this;\n    }\n\n\n    or(...args) {\n        this.whereStatement('OR');\n\n        return this.where(...args);\n    }\n\n\n    _addWhereParameter(key, value) {\n        let attempt = 1;\n        let base = `where_${key.replace(/[^a-z0-9]+/g, '_')}`;\n\n\n        let variable = base;\n\n        while ( typeof this._params[ variable ] != \"undefined\" ) {\n            attempt++;\n\n            variable = `${base}_${attempt}`;\n        }\n\n        this._params[ variable ] = value;\n\n        return variable;\n    }\n\n\n    where(...args) {\n        if (!args.length || !args[0]) return this;\n\n\n        if (args.length == 2) {\n            args = [args[0], OPERATOR_EQUALS, args[1]];\n        }\n\n\n        if ( args.length == 1) {\n            const [arg] = args;\n\n            if (Array.isArray(arg)) {\n                arg.forEach(inner => {\n                    this.where(...inner);\n                });\n            }\n            else if (typeof arg == 'object') {\n                Object.keys(arg).forEach(key => {\n                    this.where(key, arg[key]);\n                });\n            }\n            else {\n                this._where.append(new WhereRaw(args[0]));\n            }\n        }\n        else {\n            const [left, operator, value] = args;\n            const right = this._addWhereParameter(left, value);\n\n            this._params[ right ] = value;\n            this._where.append(new Where(left, operator, `$${right}`));\n        }\n\n        return this;\n    }\n\n\n    whereId(alias, value) {\n        const param = this._addWhereParameter(`${alias}_id`, neo4j.int(value));\n\n        this._where.append(new WhereId(alias, param));\n\n        return this;\n    }\n\n\n    whereRaw(clause) {\n        this._where.append(new WhereRaw(clause));\n\n        return this;\n    }\n\n\n    whereNot(...args) {\n        this.where(...args);\n\n        this._where.last().setNegative();\n\n        return this;\n    }\n\n\n    whereBetween(alias, floor, ceiling) {\n        const floor_alias = this._addWhereParameter(`${alias}_floor`, floor);\n        const ceiling_alias = this._addWhereParameter(`${alias}_ceiling`, ceiling);\n\n        this._where.append(new WhereBetween(alias, floor_alias, ceiling_alias));\n\n        return this;\n    }\n\n\n    whereNotBetween(alias, floor, ceiling) {\n        this.whereBetween(alias, floor, ceiling);\n\n        this._where.last().setNegative();\n\n        return this;\n    }\n\n\n    delete(...args) {\n        this._current.delete(...args);\n\n        return this;\n    }\n\n\n    detachDelete(...args) {\n        this._current.detachDelete(...args);\n\n        return this;\n    }\n\n\n    create(alias, model, properties) {\n        this.whereStatement('WHERE');\n        this.statement('CREATE');\n\n        this._current.match( new Match(alias, model, this._convertPropertyMap( alias, properties ) ) );\n\n        return this;\n    }\n\n\n    _convertPropertyMap(alias, properties) {\n        if ( properties ) {\n            return Object.keys(properties).map(key => {\n                const property_alias = `${alias}_${key}`;\n\n                this._params[ property_alias ] = properties[ key ];\n\n                return new Property( key, property_alias );\n            });\n        }\n\n        return [];\n    }\n\n\n    merge(alias, model, properties) {\n        this.whereStatement('WHERE');\n        this.statement('MERGE');\n\n        this._current.match( new Match(alias, model, this._convertPropertyMap( alias, properties ) ) );\n\n        return this;\n    }\n\n\n    set(property, value, operator = '=') {\n\n        if ( !value && property instanceof Object ) {\n            Object.keys(property).forEach(key => {\n                this.set(key, property[ key ]);\n            });\n        }\n        else {\n            if ( value !== undefined ) {\n                const alias = `set_${this._set_count}`;\n                this._params[ alias ] = value;\n\n                this._set_count++;\n\n                this._current.set(property, alias, operator);\n            } else {\n                this._current.setRaw(property);\n            }\n        }\n\n        return this;\n    }\n\n\n\n    onCreateSet(property, value, operator = '=') {\n\n        if ( value === undefined && property instanceof Object ) {\n            Object.keys(property).forEach(key => {\n                this.onCreateSet(key, property[ key ]);\n            });\n        }\n        else {\n            const alias = `set_${this._set_count}`;\n            this._params[ alias ] = value;\n\n            this._set_count++;\n\n            this._current.onCreateSet(property, alias, operator);\n        }\n\n        return this;\n    }\n\n\n\n    onMatchSet(property, value, operator = '=') {\n\n        if ( value === undefined && property instanceof Object ) {\n            Object.keys(property).forEach(key => {\n                this.onMatchSet(key, property[ key ]);\n            });\n        }\n        else {\n            const alias = `set_${this._set_count}`;\n            this._params[ alias ] = value;\n\n            this._set_count++;\n\n            this._current.onMatchSet(property, alias, operator);\n        }\n\n        return this;\n    }\n\n\n    remove(...items) {\n        this._current.remove(items);\n\n        return this;\n    }\n\n\n    return(...args) {\n        this._current.return(...args);\n\n        return this;\n    }\n\n\n    limit(limit) {\n        this._current.limit(limit);\n\n        return this;\n    }\n\n\n    skip(skip) {\n        this._current.skip(skip);\n\n        return this;\n    }\n\n\n    orderBy(...args) {\n        let order_by;\n\n        if (args.length == 2) {\n\n            order_by = new Order(args[0], args[1]);\n\n        }\n        else if (Array.isArray(args[0])) {\n\n            args[0].forEach(arg => {\n                this.orderBy(arg);\n            });\n        }\n\n        else if (typeof args[0] == 'object' && args[0].field) {\n\n            order_by = new Order(args[0].field, args[0].order);\n        }\n        else if (typeof args[0] == 'object') {\n\n            Object.keys(args[0]).forEach(key => {\n                this.orderBy(key, args[0][key]);\n            });\n        }\n        else if (args[0]) {\n\n            order_by = new Order(args[0]);\n        }\n\n        if (order_by) {\n            this._current.order(order_by);\n        }\n\n        return this;\n    }\n\n\n    relationship(relationship, direction, alias, degrees) {\n        this._current.relationship(relationship, direction, alias, degrees);\n\n        return this;\n    }\n\n\n    to(alias, model, properties) {\n        this._current.match( new Match(alias, model, this._convertPropertyMap(alias, properties) ) );\n\n        return this;\n    }\n\n\n    toAnything() {\n        this._current.match(new Match());\n\n        return this;\n    }\n\n\n    pattern() {\n        this.whereStatement();\n        this.statement();\n\n        return this._statements.map(statement => {\n            return statement.toString(false);\n        }).join('\\n');\n    }\n\n\n    build() {\n\n        this.whereStatement();\n        this.statement();\n\n        const query = this._statements.map(statement => {\n            return statement.toString();\n        }).join('\\n');\n\n        return {\n            query,\n            params: this._params\n        };\n    }\n\n\n    execute(query_mode = mode.WRITE) {\n        const { query, params } = this.build();\n\n        let session\n\n        switch (query_mode) {\n            case mode.WRITE:\n                session = this._neode.writeSession()\n\n                return session.writeTransaction(tx => tx.run(query, params))\n                    .then(res => {\n                        session.close()\n\n                        return res\n                    })\n\n\n            default:\n                session = this._neode.readSession()\n\n                return session.readTransaction(tx => tx.run(query, params))\n                    .then(res => {\n                        session.close()\n\n                        return res\n                    })\n        }\n    }\n\n}\n'neode/src/Services/FindById.js'\n:import Builder, {mode} from '../Query/Builder';\nimport { eagerNode, } from '../Query/EagerUtils';\n\nexport default function FindById(neode, model, id) {\n    const alias = 'this';\n\n    const builder = new Builder(neode);\n\n    return builder.match(alias, model)\n        .whereId(alias, id)\n        .return( eagerNode(neode, 1, alias, model) )\n        .limit(1)\n        .execute(mode.READ)\n        .then(res => neode.hydrateFirst(res, alias, model));\n}\n'neode/src/Query/Match.js'\n:\nimport Model from '../Model';\n\nexport default class Match {\n    constructor(alias, model = false, properties = []) {\n        this._alias = alias;\n        this._model = model;\n        this._properties = properties;\n    }\n\n    toString() {\n        const alias = this._alias || '';\n        let model = '';\n        let properties = '';\n\n        if ( this._model instanceof Model ) {\n            model = `:${this._model.labels().join(':')}`;\n        }\n        else if ( typeof this._model == 'string' ) {\n            model = `:${this._model}`;\n        }\n\n        if ( this._properties.length ) {\n            properties = ' { ';\n\n            properties += this._properties.map(property => {\n                return property.toInlineString();\n            }).join(', ');\n\n            properties += ' }';\n        }\n\n        return `(${alias}${model ? model : ''}${properties})`;\n    }\n}\n",
        "gt": [
            "'neode/src/Query/WithDistinctStatement.js'",
            "'neode/src/Query/Builder.js'",
            "'neode/src/Services/FindById.js'",
            "'neode/src/Queryable.js'",
            "'neode/src/Model.js'",
            "'neode/src/Query/Match.js'"
        ]
    },
    {
        "files": [
            "'neode/src/Query/Return.js'",
            "'neode/src/Services/FindById.js'",
            "'neode/src/Query/Builder.js'",
            "'neode/src/Model.js'",
            "'neode/src/Queryable.js'",
            "'neode/test/ModelMap.spec.js'"
        ],
        "content": "'neode/src/Query/Return.js'\n:export default class Return {\n    constructor(alias, as) {\n\n        this._alias = alias;\n        this._as = as;\n    }\n\n    toString() {\n        let output = this._alias;\n\n        if (this._as) {\n            output += ' AS '+ this._as;\n        }\n\n        return output;\n    }\n}\n'neode/src/Services/FindById.js'\n:import Builder, {mode} from '../Query/Builder';\nimport { eagerNode, } from '../Query/EagerUtils';\n\nexport default function FindById(neode, model, id) {\n    const alias = 'this';\n\n    const builder = new Builder(neode);\n\n    return builder.match(alias, model)\n        .whereId(alias, id)\n        .return( eagerNode(neode, 1, alias, model) )\n        .limit(1)\n        .execute(mode.READ)\n        .then(res => neode.hydrateFirst(res, alias, model));\n}\n'neode/src/Query/Builder.js'\n:import Match from './Match';\nimport Order from './Order';\n\nimport Statement from './Statement';\nimport Property from './Property';\nimport WhereStatement from './WhereStatement';\nimport Where, {OPERATOR_EQUALS} from './Where';\nimport WhereBetween from './WhereBetween';\nimport WhereId from './WhereId';\nimport WhereRaw from './WhereRaw';\nimport WithStatement from './WithStatement';\nimport WithDistinctStatement from './WithDistinctStatement';\nimport neo4j from 'neo4j-driver';\n\nexport const mode = {\n    READ: \"READ\",\n    WRITE: \"WRITE\"\n};\n\n\nexport default class Builder {\n\n    constructor(neode) {\n        this._neode = neode;\n\n        this._params = {};\n        this._statements = [];\n        this._current;\n        this._where;\n        this._set_count = 0;\n    }\n\n\n    statement(prefix) {\n        if (this._current) {\n            this._statements.push(this._current);\n        }\n\n        this._current = new Statement(prefix);\n\n        return this;\n    }\n\n\n    whereStatement(prefix) {\n        if (this._where) {\n            this._current.where(this._where);\n        }\n\n        this._where = new WhereStatement(prefix);\n\n        return this;\n    }\n\n\n    match(alias, model, properties) {\n        this.whereStatement('WHERE');\n        this.statement();\n\n        this._current.match( new Match(alias, model, this._convertPropertyMap( alias, properties ) ) );\n\n        return this;\n    }\n\n    optionalMatch(alias, model) {\n        this.whereStatement('WHERE');\n        this.statement('OPTIONAL MATCH');\n\n        this._current.match(new Match(alias, model));\n\n        return this;\n    }\n\n\n    with(...args) {\n        this.whereStatement('WHERE');\n        this.statement();\n\n        this._statements.push(new WithStatement(...args));\n\n        return this;\n    }\n\n\n    withDistinct(...args) {\n        this.whereStatement('WHERE');\n        this.statement();\n\n        this._statements.push(new WithDistinctStatement(...args));\n\n        return this;\n    }\n\n\n    or(...args) {\n        this.whereStatement('OR');\n\n        return this.where(...args);\n    }\n\n\n    _addWhereParameter(key, value) {\n        let attempt = 1;\n        let base = `where_${key.replace(/[^a-z0-9]+/g, '_')}`;\n\n\n        let variable = base;\n\n        while ( typeof this._params[ variable ] != \"undefined\" ) {\n            attempt++;\n\n            variable = `${base}_${attempt}`;\n        }\n\n        this._params[ variable ] = value;\n\n        return variable;\n    }\n\n\n    where(...args) {\n        if (!args.length || !args[0]) return this;\n\n\n        if (args.length == 2) {\n            args = [args[0], OPERATOR_EQUALS, args[1]];\n        }\n\n\n        if ( args.length == 1) {\n            const [arg] = args;\n\n            if (Array.isArray(arg)) {\n                arg.forEach(inner => {\n                    this.where(...inner);\n                });\n            }\n            else if (typeof arg == 'object') {\n                Object.keys(arg).forEach(key => {\n                    this.where(key, arg[key]);\n                });\n            }\n            else {\n                this._where.append(new WhereRaw(args[0]));\n            }\n        }\n        else {\n            const [left, operator, value] = args;\n            const right = this._addWhereParameter(left, value);\n\n            this._params[ right ] = value;\n            this._where.append(new Where(left, operator, `$${right}`));\n        }\n\n        return this;\n    }\n\n\n    whereId(alias, value) {\n        const param = this._addWhereParameter(`${alias}_id`, neo4j.int(value));\n\n        this._where.append(new WhereId(alias, param));\n\n        return this;\n    }\n\n\n    whereRaw(clause) {\n        this._where.append(new WhereRaw(clause));\n\n        return this;\n    }\n\n\n    whereNot(...args) {\n        this.where(...args);\n\n        this._where.last().setNegative();\n\n        return this;\n    }\n\n\n    whereBetween(alias, floor, ceiling) {\n        const floor_alias = this._addWhereParameter(`${alias}_floor`, floor);\n        const ceiling_alias = this._addWhereParameter(`${alias}_ceiling`, ceiling);\n\n        this._where.append(new WhereBetween(alias, floor_alias, ceiling_alias));\n\n        return this;\n    }\n\n\n    whereNotBetween(alias, floor, ceiling) {\n        this.whereBetween(alias, floor, ceiling);\n\n        this._where.last().setNegative();\n\n        return this;\n    }\n\n\n    delete(...args) {\n        this._current.delete(...args);\n\n        return this;\n    }\n\n\n    detachDelete(...args) {\n        this._current.detachDelete(...args);\n\n        return this;\n    }\n\n\n    create(alias, model, properties) {\n        this.whereStatement('WHERE');\n        this.statement('CREATE');\n\n        this._current.match( new Match(alias, model, this._convertPropertyMap( alias, properties ) ) );\n\n        return this;\n    }\n\n\n    _convertPropertyMap(alias, properties) {\n        if ( properties ) {\n            return Object.keys(properties).map(key => {\n                const property_alias = `${alias}_${key}`;\n\n                this._params[ property_alias ] = properties[ key ];\n\n                return new Property( key, property_alias );\n            });\n        }\n\n        return [];\n    }\n\n\n    merge(alias, model, properties) {\n        this.whereStatement('WHERE');\n        this.statement('MERGE');\n\n        this._current.match( new Match(alias, model, this._convertPropertyMap( alias, properties ) ) );\n\n        return this;\n    }\n\n\n    set(property, value, operator = '=') {\n\n        if ( !value && property instanceof Object ) {\n            Object.keys(property).forEach(key => {\n                this.set(key, property[ key ]);\n            });\n        }\n        else {\n            if ( value !== undefined ) {\n                const alias = `set_${this._set_count}`;\n                this._params[ alias ] = value;\n\n                this._set_count++;\n\n                this._current.set(property, alias, operator);\n            } else {\n                this._current.setRaw(property);\n            }\n        }\n\n        return this;\n    }\n\n\n\n    onCreateSet(property, value, operator = '=') {\n\n        if ( value === undefined && property instanceof Object ) {\n            Object.keys(property).forEach(key => {\n                this.onCreateSet(key, property[ key ]);\n            });\n        }\n        else {\n            const alias = `set_${this._set_count}`;\n            this._params[ alias ] = value;\n\n            this._set_count++;\n\n            this._current.onCreateSet(property, alias, operator);\n        }\n\n        return this;\n    }\n\n\n\n    onMatchSet(property, value, operator = '=') {\n\n        if ( value === undefined && property instanceof Object ) {\n            Object.keys(property).forEach(key => {\n                this.onMatchSet(key, property[ key ]);\n            });\n        }\n        else {\n            const alias = `set_${this._set_count}`;\n            this._params[ alias ] = value;\n\n            this._set_count++;\n\n            this._current.onMatchSet(property, alias, operator);\n        }\n\n        return this;\n    }\n\n\n    remove(...items) {\n        this._current.remove(items);\n\n        return this;\n    }\n\n\n    return(...args) {\n        this._current.return(...args);\n\n        return this;\n    }\n\n\n    limit(limit) {\n        this._current.limit(limit);\n\n        return this;\n    }\n\n\n    skip(skip) {\n        this._current.skip(skip);\n\n        return this;\n    }\n\n\n    orderBy(...args) {\n        let order_by;\n\n        if (args.length == 2) {\n\n            order_by = new Order(args[0], args[1]);\n\n        }\n        else if (Array.isArray(args[0])) {\n\n            args[0].forEach(arg => {\n                this.orderBy(arg);\n            });\n        }\n\n        else if (typeof args[0] == 'object' && args[0].field) {\n\n            order_by = new Order(args[0].field, args[0].order);\n        }\n        else if (typeof args[0] == 'object') {\n\n            Object.keys(args[0]).forEach(key => {\n                this.orderBy(key, args[0][key]);\n            });\n        }\n        else if (args[0]) {\n\n            order_by = new Order(args[0]);\n        }\n\n        if (order_by) {\n            this._current.order(order_by);\n        }\n\n        return this;\n    }\n\n\n    relationship(relationship, direction, alias, degrees) {\n        this._current.relationship(relationship, direction, alias, degrees);\n\n        return this;\n    }\n\n\n    to(alias, model, properties) {\n        this._current.match( new Match(alias, model, this._convertPropertyMap(alias, properties) ) );\n\n        return this;\n    }\n\n\n    toAnything() {\n        this._current.match(new Match());\n\n        return this;\n    }\n\n\n    pattern() {\n        this.whereStatement();\n        this.statement();\n\n        return this._statements.map(statement => {\n            return statement.toString(false);\n        }).join('\\n');\n    }\n\n\n    build() {\n\n        this.whereStatement();\n        this.statement();\n\n        const query = this._statements.map(statement => {\n            return statement.toString();\n        }).join('\\n');\n\n        return {\n            query,\n            params: this._params\n        };\n    }\n\n\n    execute(query_mode = mode.WRITE) {\n        const { query, params } = this.build();\n\n        let session\n\n        switch (query_mode) {\n            case mode.WRITE:\n                session = this._neode.writeSession()\n\n                return session.writeTransaction(tx => tx.run(query, params))\n                    .then(res => {\n                        session.close()\n\n                        return res\n                    })\n\n\n            default:\n                session = this._neode.readSession()\n\n                return session.readTransaction(tx => tx.run(query, params))\n                    .then(res => {\n                        session.close()\n\n                        return res\n                    })\n        }\n    }\n\n}\n'neode/src/Model.js'\n:import Queryable from './Queryable';\n\nimport RelationshipType, {DIRECTION_BOTH} from './RelationshipType';\nimport Property from './Property';\n\nconst RELATIONSHIP_TYPES = [ 'relationship', 'relationships', 'node', 'nodes' ];\n\nexport default class Model extends Queryable {\n    constructor(neode, name, schema) {\n        super(neode);\n\n        this._name = name;\n        this._schema = schema;\n\n        this._properties = new Map;\n        this._relationships = new Map;\n        this._labels = [ name ];\n\n\n        this._primary_key = name.toLowerCase() + '_id';\n\n        this._unique = [];\n        this._indexed = [];\n        this._hidden = [];\n        this._readonly = [];\n\n\n        for (let key in schema) {\n            const value = schema[ key ];\n\n            switch ( key ) {\n                case 'labels':\n                    this.setLabels(...value);\n                    break;\n\n                default:\n                    if ( value.type &&  RELATIONSHIP_TYPES.indexOf(value.type) > -1 ) {\n                        const { relationship, direction, target, properties, eager, cascade, alias } = value;\n\n                        this.relationship(key, value.type, relationship, direction, target, properties, eager, cascade, alias);\n                    }\n                    else {\n                        this.addProperty(key, value);\n                    }\n                    break;\n            }\n        }\n    }\n\n\n    name() {\n        return this._name;\n    }\n\n\n    schema() {\n        return this._schema;\n    }\n\n\n    properties() {\n        return this._properties;\n    }\n\n\n    setLabels(...labels) {\n        this._labels = labels.sort();\n\n        return this;\n    }\n\n\n    labels() {\n        return this._labels;\n    }\n\n\n    addProperty(key, schema) {\n        const property = new Property(key, schema);\n\n        this._properties.set(key, property);\n\n\n        if ( property.primary() ) {\n            this._primary_key = key;\n        }\n\n\n        if ( property.unique() || property.primary() ) {\n            this._unique.push(key);\n        }\n\n\n        if ( property.indexed() ) {\n            this._indexed.push(key);\n        }\n\n\n        if ( property.hidden() ) {\n            this._hidden.push(key);\n        }\n\n\n        if ( property.readonly() ) {\n            this._readonly.push(key);\n        }\n\n        return this;\n    }\n\n\n    relationship(name, type, relationship, direction = DIRECTION_BOTH, target, schema = {}, eager = false, cascade = false, node_alias = 'node') {\n        if (relationship && direction && schema) {\n            this._relationships.set(name, new RelationshipType(name, type, relationship, direction, target, schema, eager, cascade, node_alias));\n        }\n\n        return this._relationships.get(name);\n    }\n\n\n    relationships() {\n        return this._relationships;\n    }\n\n\n    eager() {\n        return Array.from(this._relationships).map(([key, value]) => {\n            return value._eager ? value : null;\n        }).filter(a => !!a);\n    }\n\n\n    primaryKey() {\n        return this._primary_key;\n    }\n\n\n    hidden() {\n        return this._hidden;\n    }\n\n\n    indexes() {\n        return this._indexed;\n    }\n\n\n    mergeFields() {\n        return this._unique.concat(this._indexed);\n    }\n}\n'neode/src/Queryable.js'\n:import Builder from './Query/Builder';\nimport Create from './Services/Create';\nimport DeleteAll from './Services/DeleteAll';\nimport FindAll from './Services/FindAll';\nimport FindById from './Services/FindById';\nimport FindWithinDistance from './Services/FindWithinDistance';\nimport First from './Services/First';\nimport MergeOn from './Services/MergeOn';\n\nexport default class Queryable {\n\n\n    constructor(neode) {\n        this._neode = neode;\n    }\n\n\n    query() {\n        return new Builder(this._neode);\n    }\n\n\n    create(properties) {\n        return Create(this._neode, this, properties);\n    }\n\n\n    merge(properties) {\n        const merge_on = this.mergeFields();\n\n        return MergeOn(this._neode, this, merge_on, properties);\n    }\n\n\n    mergeOn(match, set) {\n        const merge_on = Object.keys(match);\n        const properties = Object.assign({}, match, set);\n\n        return MergeOn(this._neode, this, merge_on, properties);\n    }\n\n\n    deleteAll() {\n        return DeleteAll(this._neode, this);\n    }\n\n\n    all(properties, order, limit, skip) {\n        return FindAll(this._neode, this, properties, order, limit, skip);\n    }\n\n\n    find(id) {\n        const primary_key = this.primaryKey();\n\n        return this.first(primary_key, id);\n    }\n\n\n    findById(id) {\n        return FindById(this._neode, this, id);\n    }\n\n\n    first(key, value) {\n        return First(this._neode, this, key, value);\n    }\n\n\n    withinDistance(location_property, point, distance, properties, order, limit, skip) {\n        return FindWithinDistance(this._neode, this, location_property, point, distance, properties, order, limit, skip);\n    }\n\n}\n'neode/test/ModelMap.spec.js'\n:import ModelMap from '../src/ModelMap';\nimport Model from '../src/Model';\nimport {assert, expect} from 'chai';\n\ndescribe('src/ModelMap.js', () => {\n    const map = new ModelMap();\n\n    describe('::set', () => {\n        it('should set and get a new model', () => {\n            const name = 'ModelMap';\n            const model = new Model(null, name);\n\n            map.set(name, model);\n\n            expect( map.get(name) ).to.equal(model);\n        });\n    });\n\n    describe('::getByLabels', () => {\n        it('should identify a single label model', () => {\n            const name = 'SingleLabelModel';\n            const model = new Model(null, name);\n            const schema = {}\n\n            map.set(name, model);\n\n            expect( map.getByLabels([ name ]) ).to.equal(model);\n        });\n\n        it('should identify a model with multiple labels', () => {\n            const name = 'MultipleLabelModel';\n            const schema = {\n                labels: ['Multiple', 'Labels']\n            }\n            const model = new Model(null, name, schema);\n\n            map.set(name, model);\n\n            expect( map.getByLabels(schema.labels) ).to.equal(model);\n        });\n\n    });\n\n});",
        "gt": [
            "'neode/src/Query/Return.js'",
            "'neode/src/Query/Builder.js'",
            "'neode/src/Services/FindById.js'",
            "'neode/src/Queryable.js'",
            "'neode/src/Model.js'",
            "'neode/test/ModelMap.spec.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/connectionMask.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/components/button.js'",
            "'ruui/src/components/rippleEffect.js'",
            "'ruui/src/components/responsibleTouchArea.js'"
        ],
        "content": "'ruui/src/components/connectionMask.js'\n:import React, { Component } from 'react';\nimport { Animated, Easing, NetInfo, ActivityIndicator, View, Text, StyleSheet } from 'react-native';\n\nimport Button from './button';\nimport { connect } from '../utils';\nimport * as appActions from '../utils/store/appAction';\nimport type { Style, Element } from '../typeDefinition';\n\ntype Props = {\n\tdispatch?: Function,\n\tnetInfo?: Object,\n\twrapperStyle?: Style,\n\tcontentRenderer?: Function,\n\tmessage?: Element,\n\tretryButtonCaption?: string,\n\tretryButtonIcon?: Element,\n\tretryButtonRightIcon?: Element,\n\tretryButtonWrapperStyle?: Style,\n\tretryButtonInnerStyle?: Style,\n};\n\nclass RuuiConnectionMask extends Component {\n\tprops: Props;\n\n\tstatic defaultProps = {\n\t\tmessage: <Text\n\t\t\tstyle={{\n\t\t\t\tcolor: '#ffffff',\n\t\t\t\tfontSize: 20, textAlign: 'center',\n\t\t\t}}>App need internet connection, waiting for reconnect..</Text>,\n\t\tretryButtonCaption: 'Retry',\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tenterAnimation: new Animated.Value(0),\n\t\t};\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { netInfo } = this.props;\n\n\t\tif (prevProps.netInfo.isConnected !== netInfo.isConnected) {\n\t\t\tthis.playAnimation(netInfo.isConnected ? 0 : 1);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst pointerEvents = this.props.netInfo.isConnected ? 'none' : 'auto',\n\t\t\topacity = this.state.enterAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\t}),\n\t\t\tcontainerStyle = { opacity, };\n\n\t\treturn <Animated.View\n\t\t\tpointerEvents={pointerEvents}\n\t\t\tstyle={[styles.container, this.props.wrapperStyle, containerStyle]}>\n\t\t\t{this.props.contentRenderer\n\t\t\t\t? this.props.contentRenderer(this.props.netInfo)\n\t\t\t\t: <View style={styles.innerContainer}>\n\t\t\t\t\t{this.props.message}\n\t\t\t\t\t<ActivityIndicator color=\"#ffffff\" style={styles.activityIndicator}/>\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttitle={this.props.retryButtonCaption}\n\t\t\t\t\t\ticon={this.props.retryButtonIcon}\n\t\t\t\t\t\trightIcon={this.props.retryButtonRightIcon}\n\t\t\t\t\t\twrapperStyle={this.props.retryButtonWrapperStyle}\n\t\t\t\t\t\tinnerStyle={this.props.retryButtonInnerStyle}\n\t\t\t\t\t\tonPress={this.retry}/>\n\t\t\t\t</View>}\n\t\t</Animated.View>;\n\t}\n\n\tretry = () => {\n\t\tNetInfo.isConnected.fetch().then((isConnected) => {\n\t\t\tthis.props.dispatch(appActions.updateNetInfo({ isConnected }));\n\t\t});\n\t};\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.state.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: true,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport default connect(({ netInfo }) => {\n\treturn {\n\t\tnetInfo,\n\t};\n})(RuuiConnectionMask);\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute', top: 0, left: 0, right: 0, bottom: 0,\n\t\tbackgroundColor: 'rgba(0, 0, 0, 0.7)',\n\t},\n\tinnerContainer: {\n\t\tposition: 'absolute', top: 0, left: 0, right: 0, bottom: 0,\n\t\tjustifyContent: 'center', alignItems: 'center',\n\t\tpaddingHorizontal: 28,\n\t},\n\tactivityIndicator: {\n\t\tmarginVertical: 20,\n\t},\n});\n\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/components/button.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, Text, StyleSheet } from 'react-native';\nimport ResponsibleTouchArea from './responsibleTouchArea';\nimport { colors, valueAt } from '../utils';\nimport type { Style, Element, SnappingDirection, } from '../typeDefinition';\n\ntype Props = {\n\ttitle?: String,\n\ticon?: Element,\n\trightIcon?: Element,\n\tchildren?: Element,\n\twrapperStyle?: Style,\n\tinnerStyle?: Style,\n\ttextStyle?: Style,\n\ttooltip?: String | Element,\n\ttooltipWrapperStyle?: Style,\n\ttooltipDirection?: SnappingDirection,\n\ttooltipPositionSpacing?: Number,\n\ttooltipPositionOffset?: Object,\n\tripple?: Boolean,\n\tstaticRipple?: Boolean,\n\trippleColor?: String,\n\trippleInitialOpacity?: Number,\n\trippleInitialScale?: Number,\n\trippleAnimationSpeed?: Number,\n\tfade?: Boolean,\n\tfadeLevel?: Number,\n\traise?: Boolean,\n\tdebounce?: Number,\n\tdisabled?: Boolean,\n\tactiveOpacity?: Number,\n\tonPress?: Function,\n\tonPressIn?: Function,\n\tonPressOut?: Function,\n\tonMouseEnter?: Function,\n\tonMouseLeave?: Function,\n};\n\nclass RuuiButton extends Component<any, Props, any> {\n\tprops: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tstatic defaultProps = {\n\t\tripple: true,\n\t\tstaticRipple: false,\n\t\ttitle: 'TITLE',\n\t\tdisabled: false,\n\t\traise: true,\n\t\tfade: true,\n\t\tfadeLevel: 0.2,\n\t};\n\n\trender() {\n\t\tconst { wrapperStyle, innerStyle, ...otherProps } = this.props,\n\t\t\truuiStyles = valueAt(this, 'context.ruuiConfigs.button.styles', styles);\n\n\t\treturn <ResponsibleTouchArea\n\t\t\twrapperStyle={[ruuiStyles.wrapper, wrapperStyle]}\n\t\t\tinnerStyle={[ruuiStyles.contentContainer, innerStyle]}\n\t\t\t{...otherProps}>\n\t\t\t{this.renderContent()}\n\t\t</ResponsibleTouchArea>;\n\t}\n\n\trenderContent() {\n\t\tconst { title, textStyle, icon, rightIcon, children } = this.props,\n\t\t\truuiStyles = valueAt(this, 'context.ruuiConfigs.button.styles', styles),\n\t\t\ttextStyles = [ruuiStyles.titleText, textStyle];\n\n\t\tif (children) {\n\t\t\treturn children;\n\t\t} else {\n\t\t\treturn <View style={ruuiStyles.innerContainer}>\n\t\t\t\t<View style={ruuiStyles.leftContainer}>{icon}</View>\n\t\t\t\t<Text style={textStyles}>{title}</Text>\n\t\t\t\t<View style={ruuiStyles.rightContainer}>{rightIcon}</View>\n\t\t\t</View>;\n\t\t}\n\t}\n}\n\nexport default RuuiButton;\n\nexport const styles = StyleSheet.create({\n\twrapper: {\n\t\tbackgroundColor: colors.iOsBlue,\n\t\tborderRadius: 3,\n\t},\n\tcontentContainer: {\n\t\tpadding: 10,\n\t\tflexDirection: 'row',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tinnerContainer: {\n\t\tflexDirection: 'row',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tleftContainer: {\n\t\tmarginRight: 6,\n\t},\n\trightContainer: {\n\t\tmarginLeft: 6,\n\t},\n\ttitleText: {\n\t\tcolor: '#FFFFFF',\n\t\tbackgroundColor: 'transparent',\n\t},\n});\n\n'ruui/src/components/rippleEffect.js'\n:import React, { Component } from 'react';\nimport { Animated, Easing } from 'react-native';\nimport { Style } from '../typeDefinition';\n\ntype Props = {\n\tinitialOpacity?: number,\n\tinitialScale?: number,\n\tspeed?: number,\n\tstyle: Style,\n};\n\nclass RuuiRippleEffect extends Component<any, Props, any> {\n\tprops: Props;\n\n\tstatic defaultProps = {\n\t\tinitialOpacity: 0.2,\n\t\tinitialScale: 0.02,\n\t\tspeed: 800,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.expandAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tAnimated.timing(this.expandAnimation, {\n\t\t\ttoValue: 1,\n\t\t\tduration: this.props.speed,\n\t\t\teasing: Easing.out(Easing.bezier(0.445, 0.05, 0.55, 0.95)),\n\t\t\tuseNativeDriver: true,\n\t\t}).start();\n\t}\n\n\trender() {\n\t\tconst { style, initialScale, initialOpacity } = this.props,\n\t\t\topacity = this.expandAnimation.interpolate({\n\t\t\t\tinputRange: [0, 0.5, 1], outputRange: [initialOpacity, 0.1, 0],\n\t\t\t}), scale = this.expandAnimation.interpolate({\n\t\t\t\tinputRange: [0, 0.1, 0.5, 1], outputRange: [initialScale, 0.4, 0.8, 1],\n\t\t\t}), styles = {\n\t\t\t\t...style,\n\t\t\t\tposition: 'absolute',\n\t\t\t\ttransform: [{ scale }],\n\t\t\t\topacity,\n\t\t\t};\n\n\t\treturn <Animated.View pointerEvents=\"none\" style={styles}/>;\n\t}\n}\n\nexport default RuuiRippleEffect;\n\n'ruui/src/components/responsibleTouchArea.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, TouchableOpacity, View, StyleSheet, Platform } from 'react-native';\nimport tinyColor from 'tinycolor2';\n\nimport RippleEffect from './rippleEffect';\nimport { debounce, isIos, } from '../utils';\nimport * as appActions from '../store/action/app';\nimport type { Style, Element, SnappingDirection, } from '../typeDefinition';\n\ntype Props = {\n\tchildren?: Element,\n\twrapperStyle?: Style,\n\tinnerStyle?: Style,\n\ttooltip?: String | Element,\n\ttooltipWrapperStyle?: Style,\n\ttooltipInnerStyle?: Style,\n\ttooltipDirection?: SnappingDirection,\n\ttooltipPositionSpacing?: number,\n\ttooltipPositionOffset?: Object,\n\tripple?: boolean,\n\tstaticRipple?: boolean,\n\trippleColor?: string,\n\trippleInitialOpacity?: number,\n\trippleInitialScale?: number,\n\trippleAnimationSpeed?: number,\n\tfade?: boolean,\n\tfadeLevel?: number,\n\traise?: boolean,\n\tdebounce?: number,\n\tdisabled?: boolean,\n\tactiveOpacity?: number,\n\tonPress?: Function,\n\tonPressIn?: Function,\n\tonPressOut?: Function,\n\tonMouseEnter?: Function,\n\tonMouseLeave?: Function,\n};\n\nconst MAX_PARTICLE_COUNT = 5;\n\nclass RuuiResponsibleTouchArea extends Component<any, Props, any> {\n\tprops: Props;\n\n\tstatic contextTypes = {\n\t\truuiStore: PropTypes.object,\n\t};\n\n\tstatic defaultProps = {\n\t\tstaticRipple: false,\n\t\tactiveOpacity: 0.7,\n\t\tripple: true,\n\t\traise: false,\n\t\tfade: false,\n\t\tfadeLevel: 0.1,\n\t\tdisabled: false,\n\t};\n\n\trippleIndex = 0;\n\n\tcomponentWillUnmount() {\n\t\tthis.willUnmount = true;\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tripples: [],\n\t\t\tmouseInside: false,\n\t\t};\n\n\t\tthis.raiseAnimation = new Animated.Value(0);\n\t\tthis.fadeAnimation = new Animated.Value(0);\n\n\t\tif (props.debounce) {\n\t\t\tthis.handlePress = debounce(this.handlePress.bind(this), props.debounce);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { children, wrapperStyle, innerStyle, disabled, onPressIn, onPressOut, onPress, ripple, fade, fadeLevel, raise, ...otherProps } = this.props,\n\t\t\tflattenWrapperStyles = StyleSheet.flatten(wrapperStyle) || {},\n\t\t\tplatformStyles = Platform.select({\n\t\t\t\tweb: { cursor: 'pointer', userSelect: 'none' },\n\t\t\t}),\n\t\t\tisLightBackground = tinyColor(flattenWrapperStyles.backgroundColor).getBrightness() > 180,\n\t\t\twrapperBorderRadius = extractBorderRadius(flattenWrapperStyles);\n\n\t\treturn <View\n\t\t\tonMouseLeave={this.onMouseLeave}\n\t\t\tonMouseEnter={this.onMouseEnter}\n\t\t\tref={(instance) => { this.wrapperView = instance; }}\n\t\t\tcollapsable={false}\n\t\t\tstyle={[wrapperStyle, platformStyles]}>\n\n\t\t\t{raise && this.renderShadowEffect(raise, isLightBackground, wrapperBorderRadius)}\n\t\t\t{fade && this.renderFadeEffect(fade, fadeLevel, isLightBackground, wrapperBorderRadius)}\n\t\t\t{ripple && this.renderRippleEffect(isLightBackground, wrapperBorderRadius)}\n\n\t\t\t<TouchableOpacity\n\t\t\t\tdisabled={disabled}\n\t\t\t\tstyle={innerStyle}\n\t\t\t\tonPressIn={this.onPressIn}\n\t\t\t\tonPressOut={this.onPressOut}\n\t\t\t\tonPress={this.onPress}\n\t\t\t\tonStartShouldSetResponderCapture={() => !disabled}\n\t\t\t\t{...otherProps}>\n\t\t\t\t<View pointerEvents=\"none\">\n\t\t\t\t\t{children}\n\t\t\t\t</View>\n\t\t\t</TouchableOpacity>\n\t\t</View>;\n\t}\n\n\trenderShadowEffect(raise: Boolean, isLightBackground: Boolean, wrapperBorderRadius) {\n\t\tconst shadowOpacity = this.raiseAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1], outputRange: [raise ? 0.15 : 0, 0.6],\n\t\t\t}),\n\t\t\tshadow = raise && {\n\t\t\t\tborderRadius: 3,\n\t\t\t\tshadowColor: '#666666',\n\t\t\t\topacity: shadowOpacity,\n\t\t\t\tshadowOpacity: 1,\n\t\t\t\tshadowRadius: raiseShadowRadius,\n\t\t\t\tshadowOffset: { width: 0, height: 2 },\n\t\t\t};\n\n\t\treturn <Animated.View\n\t\t\tstyle={[styles.fullSizeAbsolute, shadow, wrapperBorderRadius]}/>;\n\t}\n\n\trenderFadeEffect(fade, fadeLevel, isLightBackground: Boolean, wrapperBorderRadius) {\n\t\tconst opacity = this.fadeAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1],\n\t\t\t\toutputRange: [0, fadeLevel],\n\t\t\t\textrapolate: 'clamp',\n\t\t\t}),\n\t\t\tmaskStyles = {\n\t\t\t\tbackgroundColor: isLightBackground ? '#000000' : '#ffffff',\n\t\t\t\topacity,\n\t\t\t};\n\n\t\treturn <Animated.View style={[styles.fullSizeAbsolute, wrapperBorderRadius, maskStyles]}/>;\n\t}\n\n\trenderRippleEffect(isLightBackground: Boolean, wrapperBorderRadius) {\n\t\treturn <View style={[styles.fullSizeAbsolute, wrapperBorderRadius, { overflow: 'hidden' }]}>\n\t\t\t{this.renderRipples()}\n\t\t</View>;\n\t}\n\n\trenderRipples() {\n\t\tconst { ripples } = this.state,\n\t\t\t{ rippleInitialOpacity, rippleInitialScale, rippleAnimationSpeed } = this.props;\n\n\t\treturn ripples.map((ripple) => {\n\t\t\treturn <RippleEffect\n\t\t\t\tkey={ripple.index}\n\t\t\t\tstyle={ripple.style}\n\t\t\t\tindex={ripple.index}\n\t\t\t\tinitialOpacity={rippleInitialOpacity}\n\t\t\t\tinitialScale={rippleInitialScale}\n\t\t\t\tspeed={rippleAnimationSpeed}/>;\n\t\t});\n\t}\n\n\tonPress = (e) => {\n\t\tconst { onPress } = this.props;\n\t\tif (onPress) setTimeout(() => onPress(e), 0);\n\t};\n\n\tonPressIn = (e) => {\n\t\tconst { ripples } = this.state,\n\t\t\t{ wrapperStyle, disabled, raise, staticRipple, rippleColor, onPressIn } = this.props;\n\n\t\tif (disabled) return;\n\n\t\tconst flattenWrapperStyles = StyleSheet.flatten(wrapperStyle) || {},\n\t\t\tisLightBackground = tinyColor(flattenWrapperStyles.backgroundColor).getBrightness() > 180;\n\n\t\tif (raise) this.playRaiseAnimation(1);\n\n\t\tthis.playFadeAnimation(1);\n\n\t\tconst { locationX, locationY, offsetX, offsetY, pageX, pageY } = e.nativeEvent;\n\n\t\tthis.wrapperView.measure((fx, fy, wrapperWidth, wrapperHeight, px, py) => {\n\t\t\tlet rippleRadius = 0, ripplePosition;\n\t\t\tconst touchX = locationX || offsetX, touchY = locationY || offsetY;\n\n\t\t\tif (staticRipple || !touchX) {\n\t\t\t\trippleRadius = wrapperWidth / 2;\n\t\t\t\tripplePosition = {\n\t\t\t\t\ttop: (wrapperHeight / 2) - rippleRadius,\n\t\t\t\t\tleft: (wrapperWidth / 2) - rippleRadius,\n\t\t\t\t};\n\t\t\t} else {\n\n\t\t\t\tif (touchX > wrapperWidth / 2) {\n\t\t\t\t\tif (touchY > wrapperHeight / 2) {\n\n\t\t\t\t\t\trippleRadius = Math.sqrt((touchX * touchX) + (touchY * touchY));\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst paddedY = touchY - wrapperHeight;\n\t\t\t\t\t\trippleRadius = Math.sqrt((touchX * touchX) + (paddedY * paddedY));\n\t\t\t\t\t}\n\t\t\t\t} else if (touchY > wrapperHeight / 2) {\n\n\t\t\t\t\tconst paddedX = touchX - wrapperWidth;\n\t\t\t\t\trippleRadius = Math.sqrt((paddedX * paddedX) + (touchY * touchY));\n\t\t\t\t} else {\n\n\t\t\t\t\tconst paddedX = touchX - wrapperWidth, paddedY = touchY - wrapperHeight;\n\t\t\t\t\trippleRadius = Math.sqrt((paddedX * paddedX) + (paddedY * paddedY));\n\t\t\t\t}\n\n\t\t\t\trippleRadius *= 1.2;\n\t\t\t\tripplePosition = {\n\t\t\t\t\ttop: touchY - rippleRadius,\n\t\t\t\t\tleft: touchX - rippleRadius,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.rippleIndex += 1;\n\t\t\tconst defaultRippleColor = isLightBackground ? '#333333' : '#ffffff',\n\t\t\t\tnewRipple = {\n\t\t\t\t\tindex: this.rippleIndex,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\twidth: rippleRadius * 2,\n\t\t\t\t\t\theight: rippleRadius * 2,\n\t\t\t\t\t\tborderRadius: rippleRadius,\n\t\t\t\t\t\tbackgroundColor: rippleColor || defaultRippleColor,\n\t\t\t\t\t\t...ripplePosition,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tlet nextRipples = [newRipple, ...ripples];\n\n\t\t\tif (nextRipples.length > MAX_PARTICLE_COUNT) {\n\t\t\t\tnextRipples = nextRipples.slice(0, MAX_PARTICLE_COUNT);\n\t\t\t}\n\n\t\t\tif (!this.willUnmount) this.setState({ ripples: nextRipples });\n\t\t});\n\n\t\tif (onPressIn) onPressIn(e);\n\t};\n\n\tonPressOut = (e, forceFade = false) => {\n\t\tconst { mouseInside } = this.state,\n\t\t\t{ raise, onPressOut } = this.props;\n\n\t\tif (raise) this.playRaiseAnimation(0);\n\t\tif (onPressOut && e) onPressOut(e);\n\n\t\tif (forceFade === true || !mouseInside) {\n\t\t\tthis.playFadeAnimation(0);\n\t\t}\n\t};\n\n\tonMouseEnter = () => {\n\t\tconst { ruuiStore } = this.context;\n\t\tconst { disabled, tooltip, tooltipWrapperStyle, tooltipInnerStyle, tooltipDirection, tooltipPositionSpacing, tooltipPositionOffset } = this.props;\n\n\t\tthis.setState({ mouseInside: true });\n\n\t\tif (!disabled) {\n\t\t\tthis.playFadeAnimation(1);\n\n\t\t\tif (tooltip) {\n\t\t\t\tthis.wrapperView.measure((x, y, width, height, pageX, pageY) => {\n\t\t\t\t\truuiStore.dispatch(appActions.toggleTooltip(true, {\n\t\t\t\t\t\ttargetLayout: { x: pageX, y: pageY, width, height },\n\t\t\t\t\t\tdirection: tooltipDirection,\n\t\t\t\t\t\tpositionSpacing: tooltipPositionSpacing,\n\t\t\t\t\t\tpositionOffset: tooltipPositionOffset,\n\t\t\t\t\t\tcontent: tooltip,\n\t\t\t\t\t\twrapperStyle: tooltipWrapperStyle,\n\t\t\t\t\t\tinnerStyle: tooltipInnerStyle,\n\t\t\t\t\t}));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tonMouseLeave = () => {\n\t\tconst { ruuiStore } = this.context;\n\t\tconst { disabled, tooltip } = this.props;\n\n\t\tthis.onPressOut(null, true);\n\t\tthis.setState({ mouseInside: false });\n\n\t\tif (!disabled && tooltip) {\n\t\t\truuiStore.dispatch(appActions.toggleTooltip(false));\n\t\t}\n\t};\n\n\tplayRaiseAnimation = (toValue: Number) => {\n\t\tif (this.raisingAnimation) this.raisingAnimation.clear();\n\n\t\tconst animations = [\n\t\t\tAnimated.timing(this.raiseAnimation, {\n\t\t\t\ttoValue,\n\t\t\t\tduration: 500,\n\t\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\t\tuseNativeDriver: false,\n\t\t\t}),\n\t\t];\n\n\t\tthis.raisingAnimation = Animated.parallel(animations).start();\n\t};\n\n\tplayFadeAnimation = (toValue: Number) => {\n\t\tif (this.fadingAnimation) this.fadingAnimation.clear();\n\n\t\tthis.fadingAnimation = Animated.timing(this.fadeAnimation, {\n\t\t\ttoValue,\n\t\t\tduration: 800,\n\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\tuseNativeDriver: true,\n\t\t}).start();\n\t};\n}\n\nexport default RuuiResponsibleTouchArea;\n\nfunction extractBorderRadius(baseStyles) {\n\treturn [\n\t\t'borderRadius',\n\t\t'borderTopLeftRadius',\n\t\t'borderTopRightRadius',\n\t\t'borderBottomLeftRadius',\n\t\t'borderBottomRightRadius',\n\t].reduce((accumulate, currentAttribute) => {\n\t\tif (baseStyles[currentAttribute]) {\n\t\t\taccumulate[currentAttribute] = baseStyles[currentAttribute];\n\t\t}\n\n\t\treturn accumulate;\n\t}, {});\n}\n\nconst raiseShadowRadius = isIos ? 4 : 10;\nconst styles = StyleSheet.create({\n\tfullSizeAbsolute: {\n\t\tposition: 'absolute',\n\t\ttop: 0, bottom: 0, right: 0, left: 0,\n\t},\n});\n",
        "gt": [
            "'ruui/src/components/rippleEffect.js'",
            "'ruui/src/components/responsibleTouchArea.js'",
            "'ruui/src/components/button.js'",
            "'ruui/src/components/connectionMask.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/background/messageHandler.js'",
            "'better-onetab/src/common/service/boss.js'",
            "'better-onetab/src/common/i18n.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/common/utils.js'"
        ],
        "content": "'better-onetab/src/background/messageHandler.js'\n:import tabs from '../common/tabs'\nimport storage from '../common/storage'\nimport boss from '../common/service/boss'\nimport {sendMessage} from '../common/utils'\nimport listManager from '../common/listManager'\nimport {setupContextMenus} from './contextMenus'\nimport {updateBrowserAction} from './browserAction'\n\nconst messageHandler = async msg => {\n  console.debug('received', msg)\n  if (msg.optionsChanged) {\n    const changes = msg.optionsChanged\n    console.debug('options changed', changes)\n    Object.assign(window.opts, changes)\n    if (changes.browserAction) updateBrowserAction(changes.browserAction)\n    if (['pageContext', 'allContext', 'disableDynamicMenu'].some(k => k in changes)) await setupContextMenus(changes)\n    await sendMessage({optionsChangeHandledStatus: 'success'})\n    if (PRODUCTION) Object.keys(changes).map(key => ga('send', 'event', 'Options changed', key, changes[key]))\n  }\n  if (msg.restoreList) {\n    const {restoreList} = msg\n    const listIndex = restoreList.index\n    const lists = await storage.getLists()\n    const list = lists[listIndex]\n    if (restoreList.newWindow) {\n      tabs.restoreListInNewWindow(list)\n    } else {\n      tabs.restoreList(list)\n    }\n    if (!list.pinned) {\n      listManager.removeListById(list._id)\n    }\n    if (PRODUCTION) ga('send', 'event', 'Popup item clicked')\n  }\n  if (msg.storeInto) {\n    tabs.storeSelectedTabs(msg.storeInto.index)\n  }\n  if (msg.login) {\n    boss.login(msg.login.token)\n  }\n  if (msg.refresh) {\n    boss.refresh()\n  }\n  if (msg.import) {\n    const {lists} = msg.import\n    lists.forEach(list => listManager.addList(list))\n  }\n}\n\nexport default messageHandler\n\n'better-onetab/src/common/service/boss.js'\n:import {\n  TOKEN_KEY,\n  AUTH_HEADER,\n  SYNC_SERVICE_URL,\n  SYNC_MAX_INTERVAL,\n  SYNC_MIN_INTERVAL,\n} from '../constants'\nimport _ from 'lodash'\nimport storage from '../storage'\nimport listManager from '../listManager'\nimport {isBackground, timeout, sendMessage} from '../utils'\nimport browser from 'webextension-polyfill'\nimport io from 'socket.io-client'\nimport logger from '../logger'\n\nconst hasToken = async () => TOKEN_KEY in await browser.storage.local.get(TOKEN_KEY)\n\nconst getToken = async () => {\n  const {token: localToken} = await browser.storage.local.get(TOKEN_KEY)\n  if (localToken) return localToken\n  const {token: remoteToken} = await browser.storage.sync.get(TOKEN_KEY)\n  if (remoteToken) return remoteToken\n}\n\nconst setToken = async token => {\n  await browser.storage.local.set({[TOKEN_KEY]: token, tokenIssued: Date.now()})\n  await browser.storage.sync.set({[TOKEN_KEY]: token})\n}\n\nconst removeToken = async () => {\n  await browser.storage.local.remove(TOKEN_KEY)\n  await browser.storage.sync.remove(TOKEN_KEY)\n}\n\nconst fetchData = async (uri = '', method = 'GET', data = {}) => {\n  const headers = new Headers()\n  const token = await getToken()\n  if (token) headers.append(AUTH_HEADER, token)\n  const option = {\n    headers,\n    method,\n    mode: 'cors',\n  }\n\n  if (['POST', 'PUT', 'PATCH'].includes(method)) {\n    headers.append('Content-Type', 'application/json')\n    option.body = JSON.stringify(data)\n  } else {\n    uri += '?' + Object.keys(data).map(key => {\n      if (typeof data[key] === 'object') data[key] = JSON.stringify(data[key])\n      return key + '=' + encodeURIComponent(data[key])\n    }).filter(i => i).join('&')\n  }\n\n  const res = await fetch(SYNC_SERVICE_URL + uri, option)\n  if (res.headers.has(AUTH_HEADER)) {\n    const newToken = res.headers.get(AUTH_HEADER)\n    console.debug('[boss]: got new token', newToken)\n    await setToken(newToken)\n  }\n  if (res.ok) return res.json()\n  if (res.status === 401) await removeToken()\n  const err = await res.json()\n  throw new Error(err.message)\n}\n\nconst getInfo = () => fetchData('/api/info').then(info => {\n  info.optsUpdatedAt = Date.parse(info.optsUpdatedAt) || 0\n  info.listsUpdatedAt = Date.parse(info.listsUpdatedAt) || 0\n  return info\n})\n\nconst setWSToken = token => {\n  if (!window._socket) return\n  window._socket.io.opts.query = {\n    [AUTH_HEADER]: token,\n  }\n}\n\nconst _socketEmitTimeout = (socket, event, arg) => timeout(new Promise((resolve, reject) => {\n  const cb = result => result && result.err ? reject(result.err) : resolve(result)\n  if (arg) socket.emit(event, arg, cb)\n  else socket.emit(event, cb)\n}), 5000)\n\nconst uploadOpsViaWS = async () => {\n  const socket = window._socket\n  if (!socket || !socket.connected) throw new Error('socket not connected')\n  const {ops} = await browser.storage.local.get('ops')\n  if (ops) {\n    const changes = ops.sort((a, b) => a.time - b.time)\n    while (changes && changes.length) {\n      const change = changes.shift()\n      await _socketEmitTimeout(socket, 'list.update', change)\n    }\n  }\n  await browser.storage.local.remove('ops')\n}\n\nconst downloadRemoteLists = async () => {\n  const socket = window._socket\n  if (!socket || !socket.connected) throw new Error('socket not connected')\n  const remoteTime = await _socketEmitTimeout(socket, 'list.time')\n  const {listsUpdatedAt: localTime} = await browser.storage.local.get('listsUpdatedAt')\n  if (remoteTime === localTime) return\n  const remoteLists = await _socketEmitTimeout(socket, 'list.all')\n  const localLists = _.keyBy(await storage.getLists(), list => list._id)\n  const finallyLists = []\n  const fetching = {}\n  remoteLists.forEach(list => {\n    if (!(list._id in localLists) || localLists.updatedAt < list.updatedAt) {\n      fetching[list._id] = _socketEmitTimeout(socket, 'list.get', list._id)\n      finallyLists.push(list._id)\n    } else {\n      finallyLists.push(localLists[list._id])\n    }\n  })\n  console.log(finallyLists)\n  await Promise.all(Object.values(fetching))\n  for (let i = 0; i < finallyLists.length; i += 1) {\n    if (typeof finallyLists[i] === 'string') {\n      finallyLists[i] = await fetching[finallyLists[i]]\n    }\n  }\n  console.log(finallyLists)\n  await storage.setLists(finallyLists)\n  await browser.storage.local.set({listsUpdatedAt: remoteTime})\n}\n\nconst syncLists = async () => {\n  const unlock = await listManager.RWLock.lock()\n  try {\n    await uploadOpsViaWS()\n    await downloadRemoteLists()\n  } catch (error) {\n    throw error\n  } finally {\n    await unlock()\n  }\n}\n\nconst getRemoteOptionsUpdatedTimeViaWS = () => _socketEmitTimeout(window._socket, 'opts.time')\n\nconst getRemoteOptions = () => _socketEmitTimeout(window._socket, 'opts.all')\n\nconst setRemoteOptions = (opts, time) => _socketEmitTimeout(window._socket, 'opts.set', { opts, time })\n\nconst syncOptions = async () => {\n  const remoteTime = await getRemoteOptionsUpdatedTimeViaWS()\n  const {optsUpdatedAt: localTime} = await browser.storage.local.get('optsUpdatedAt')\n  if (remoteTime > localTime) {\n    const opts = await getRemoteOptions()\n    await browser.storage.local.set({opts, optsUpdatedAt: remoteTime})\n  } else if (remoteTime < localTime) {\n    const opts = await storage.getOptions()\n    await setRemoteOptions(opts, localTime)\n  }\n}\n\n\nlet _refreshing = false\nconst refresh = async () => {\n  if (_refreshing || !(await hasToken())) return\n\n  _refreshing = true\n  await sendMessage({refreshing: true})\n  try {\n    await timeout(Promise.all([syncOptions(), syncLists()]), 20000)\n    await sendMessage({refreshed: {success: true}})\n  } catch (err) {\n    logger.error(err)\n    await sendMessage({refreshed: {success: false}})\n  } finally {\n    _refreshing = false\n  }\n}\n\nconst login = async token => {\n  if (await hasToken()) return\n  await setToken(token)\n  const {uid} = await getInfo()\n  await sendMessage({logged: {uid}})\n  const loginNotificationId = 'login'\n  browser.notifications.create(loginNotificationId, {\n    type: 'basic',\n    iconUrl: 'assets/icons/icon_128.png',\n    title: 'you have login to boss successfully',\n    message: '',\n  })\n  setTimeout(() => {\n    browser.notifications.clear(loginNotificationId)\n  }, 5000)\n  await refresh()\n}\n\nconst initTimer = async () => {\n  if (window._syncTimer || !(await isBackground())) return\n\n  const _nextTimer = time => {\n    window._syncTimer = setTimeout(async () => {\n      if (await hasToken()) {\n        getInfo()\n        if (window._socket && window._socket.connected) {\n          refresh()\n          return _nextTimer(time)\n        }\n      }\n      _nextTimer(Math.min(time * 2, SYNC_MAX_INTERVAL))\n    }, time)\n  }\n\n  const _refreshTimer = time => {\n    clearTimeout(window._syncTimer)\n    _nextTimer(time)\n  }\n\n  window.addEventListener('offline', () => _refreshTimer(SYNC_MAX_INTERVAL))\n  window.addEventListener('online', () => _refreshTimer(SYNC_MIN_INTERVAL))\n  browser.runtime.onMessage.addListener(({login, refreshed}) => {\n    if (login || refreshed && refreshed.success) window._nextSyncInterval = SYNC_MIN_INTERVAL\n  })\n  _nextTimer(SYNC_MIN_INTERVAL)\n}\n\nconst init = async () => {\n  if (window._socket || !await isBackground()) return\n  const socket = window._socket = io(SYNC_SERVICE_URL, {path: '/ws', autoConnect: false})\n  setWSToken(await getToken())\n  await listManager.init()\n  socket.on('list.update', ({method, args}) => {\n    listManager[method](...args)\n  })\n  socket.on('opts.set', async ({changes, time}) => {\n    const {opts} = await browser.storage.local.get('opts')\n    for (const [k, v] of Object.entries(changes)) {\n      opts[k] = v\n    }\n    await browser.storage.local.set({opts, optsUpdatedAt: time})\n  })\n  socket.on('connect', () => refresh())\n  socket.open()\n  initTimer()\n}\n\nexport default {\n  getInfo,\n  removeToken,\n  hasToken,\n  login,\n  init,\n  refresh,\n}\n\n'better-onetab/src/common/i18n.js'\n:export default (...args) => chrome.i18n.getMessage(...args)\n\n'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n\n'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/common/utils.js'\n:import _ from 'lodash'\nimport __ from './i18n'\nimport moment from 'moment'\nimport {COLORS} from './constants'\nimport browser from 'webextension-polyfill'\n\nmoment.locale(__('@@ui_locale'))\nexport const formatTime = time => {\n  if (Date.now() - time < 3600E3) return moment(time).fromNow()\n\n  const withYear = !moment(time).isSame(new Date(), 'year')\n  return moment(time).format(`ddd, MMMM Do ${withYear ? 'YYYY' : ''}, kk:mm:ss`)\n}\nexport const one = fn => {\n  let executing = false\n  return async function onceAtSameTimeFunction(...args) {\n    if (executing) return\n    executing = true\n    let re\n    try {\n      re = await fn.apply(this, args)\n    } catch (error) {\n      throw error\n    } finally {\n      executing = false\n    }\n    return re\n  }\n}\nexport const checkPermission = async permission => {\n  if (await browser.permissions.contains({permissions: [permission]})) return true\n  return browser.permissions.request({permissions: [permission]})\n}\nexport const readFile = file => new Promise((resolve, reject) => {\n  const reader = new FileReader()\n  reader.onloadend = event => resolve(event.target.result)\n  reader.onerror = reject\n  reader.readAsText(file)\n})\nexport const genObjectId = () => {\n\n  const timestamp = (new Date().getTime() / 1000 | 0).toString(16)\n  return timestamp + 'xxxxxxxxxxxxxxxx'.replace(/[x]/g, () => (Math.random() * 16 | 0).toString(16)).toLowerCase()\n}\nexport const isBackground = async () => {\n  if (window._isBackground == null) window._isBackground = window === await browser.runtime.getBackgroundPage()\n  return window._isBackground\n}\nexport const formatSize = bytes => {\n\n  const sufixes = ['Bytes', 'KB', 'MB', 'GB']\n  const i = Math.floor(Math.log(bytes) / Math.log(1024))\n  return !bytes && '0 Bytes' || (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sufixes[i]\n}\nexport const sleep = ms => new Promise(r => setTimeout(r, ms))\n\nexport const getColorByHash = _.memoize(str => {\n  const hash = typeof str === 'string' ? str.split('').reduce((r, i) => i.charCodeAt(0) + r, 0) : 0\n  return COLORS[hash % COLORS.length]\n})\n\nexport const timeout = (promise, ms) => Promise.race([\n  promise, new Promise((resolve, reject) => setTimeout(() => {\n    reject(new Error('promise timeout'))\n  }, ms))\n])\n\nexport const compareVersion = (a, b) => {\n  if (a === b) return 0\n  const [ap, bp] = [a, b].map(i => i || '0').map(i => i.split('.').map(j => +j))\n  const len = Math.min(ap.length, bp.length)\n  for (let i = 0; i < len; i += 1) {\n    if (ap[i] !== bp[i]) return ap[i] - bp[i]\n  }\n  return ap.length - bp.length\n}\n\nexport const sendMessage = async msg => {\n  try {\n    await browser.runtime.sendMessage(msg)\n  } catch (err) {\n    if (err.message === 'Could not establish connection. Receiving end does not exist.') {\n      return console.warn('error ignored', err.message)\n    }\n    throw err\n  }\n}\n\n\nexport const throttle = (fn, ms) => {\n  let executing\n  let next\n  let nextArgs\n  let timeout\n  let lastTime\n  return async function throttled(...args) {\n    const now = Date.now()\n    if (now - lastTime < ms) {\n      next = true\n      nextArgs = args\n      if (timeout) clearTimeout(timeout)\n      timeout = setTimeout(() => {\n        throttled(...args)\n      })\n      return\n    }\n\n\n    if (executing) {\n      next = true\n      nextArgs = args\n      return\n    }\n\n\n    executing = true\n    lastTime = now\n\n    let re\n    try {\n      re = await fn.apply(this, args)\n    } catch (error) {\n      throw error\n    } finally {\n      executing = false\n      if (next) {\n        if (Date.now() - now > ms) {\n          next = false\n          if (timeout) clearTimeout(timeout)\n          throttled(...nextArgs)\n        }\n      }\n    }\n    return re\n  }\n}\n\n\n\n\nexport class Mutex {\n  constructor() {\n    this._locking = Promise.resolve()\n    this._locks = 0\n  }\n\n  isLocked() {\n    return this._locks > 0\n  }\n\n  lock() {\n    this._locks += 1\n    let unlockNext\n    const willLock = new Promise(resolve => {\n      unlockNext = () => {\n        this._locks -= 1\n        resolve()\n      }\n    })\n    const willUnlock = this._locking.then(() => unlockNext)\n    this._locking = this._locking.then(() => willLock)\n    return willUnlock\n  }\n}\n",
        "gt": [
            "'better-onetab/src/common/i18n.js'",
            "'better-onetab/src/common/utils.js'",
            "'better-onetab/src/common/service/boss.js'",
            "'better-onetab/src/background/messageHandler.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'better-onetab/src/background/index.js'",
            "'better-onetab/src/common/service/boss.js'",
            "'better-onetab/src/common/listManager.js'",
            "'better-onetab/src/background/init.js'"
        ],
        "content": "'better-onetab/src/background/index.js'\n:import init from './init'\n\ninit()\n\n'better-onetab/src/common/service/boss.js'\n:import {\n  TOKEN_KEY,\n  AUTH_HEADER,\n  SYNC_SERVICE_URL,\n  SYNC_MAX_INTERVAL,\n  SYNC_MIN_INTERVAL,\n} from '../constants'\nimport _ from 'lodash'\nimport storage from '../storage'\nimport listManager from '../listManager'\nimport {isBackground, timeout, sendMessage} from '../utils'\nimport browser from 'webextension-polyfill'\nimport io from 'socket.io-client'\nimport logger from '../logger'\n\nconst hasToken = async () => TOKEN_KEY in await browser.storage.local.get(TOKEN_KEY)\n\nconst getToken = async () => {\n  const {token: localToken} = await browser.storage.local.get(TOKEN_KEY)\n  if (localToken) return localToken\n  const {token: remoteToken} = await browser.storage.sync.get(TOKEN_KEY)\n  if (remoteToken) return remoteToken\n}\n\nconst setToken = async token => {\n  await browser.storage.local.set({[TOKEN_KEY]: token, tokenIssued: Date.now()})\n  await browser.storage.sync.set({[TOKEN_KEY]: token})\n}\n\nconst removeToken = async () => {\n  await browser.storage.local.remove(TOKEN_KEY)\n  await browser.storage.sync.remove(TOKEN_KEY)\n}\n\nconst fetchData = async (uri = '', method = 'GET', data = {}) => {\n  const headers = new Headers()\n  const token = await getToken()\n  if (token) headers.append(AUTH_HEADER, token)\n  const option = {\n    headers,\n    method,\n    mode: 'cors',\n  }\n\n  if (['POST', 'PUT', 'PATCH'].includes(method)) {\n    headers.append('Content-Type', 'application/json')\n    option.body = JSON.stringify(data)\n  } else {\n    uri += '?' + Object.keys(data).map(key => {\n      if (typeof data[key] === 'object') data[key] = JSON.stringify(data[key])\n      return key + '=' + encodeURIComponent(data[key])\n    }).filter(i => i).join('&')\n  }\n\n  const res = await fetch(SYNC_SERVICE_URL + uri, option)\n  if (res.headers.has(AUTH_HEADER)) {\n    const newToken = res.headers.get(AUTH_HEADER)\n    console.debug('[boss]: got new token', newToken)\n    await setToken(newToken)\n  }\n  if (res.ok) return res.json()\n  if (res.status === 401) await removeToken()\n  const err = await res.json()\n  throw new Error(err.message)\n}\n\nconst getInfo = () => fetchData('/api/info').then(info => {\n  info.optsUpdatedAt = Date.parse(info.optsUpdatedAt) || 0\n  info.listsUpdatedAt = Date.parse(info.listsUpdatedAt) || 0\n  return info\n})\n\nconst setWSToken = token => {\n  if (!window._socket) return\n  window._socket.io.opts.query = {\n    [AUTH_HEADER]: token,\n  }\n}\n\nconst _socketEmitTimeout = (socket, event, arg) => timeout(new Promise((resolve, reject) => {\n  const cb = result => result && result.err ? reject(result.err) : resolve(result)\n  if (arg) socket.emit(event, arg, cb)\n  else socket.emit(event, cb)\n}), 5000)\n\nconst uploadOpsViaWS = async () => {\n  const socket = window._socket\n  if (!socket || !socket.connected) throw new Error('socket not connected')\n  const {ops} = await browser.storage.local.get('ops')\n  if (ops) {\n    const changes = ops.sort((a, b) => a.time - b.time)\n    while (changes && changes.length) {\n      const change = changes.shift()\n      await _socketEmitTimeout(socket, 'list.update', change)\n    }\n  }\n  await browser.storage.local.remove('ops')\n}\n\nconst downloadRemoteLists = async () => {\n  const socket = window._socket\n  if (!socket || !socket.connected) throw new Error('socket not connected')\n  const remoteTime = await _socketEmitTimeout(socket, 'list.time')\n  const {listsUpdatedAt: localTime} = await browser.storage.local.get('listsUpdatedAt')\n  if (remoteTime === localTime) return\n  const remoteLists = await _socketEmitTimeout(socket, 'list.all')\n  const localLists = _.keyBy(await storage.getLists(), list => list._id)\n  const finallyLists = []\n  const fetching = {}\n  remoteLists.forEach(list => {\n    if (!(list._id in localLists) || localLists.updatedAt < list.updatedAt) {\n      fetching[list._id] = _socketEmitTimeout(socket, 'list.get', list._id)\n      finallyLists.push(list._id)\n    } else {\n      finallyLists.push(localLists[list._id])\n    }\n  })\n  console.log(finallyLists)\n  await Promise.all(Object.values(fetching))\n  for (let i = 0; i < finallyLists.length; i += 1) {\n    if (typeof finallyLists[i] === 'string') {\n      finallyLists[i] = await fetching[finallyLists[i]]\n    }\n  }\n  console.log(finallyLists)\n  await storage.setLists(finallyLists)\n  await browser.storage.local.set({listsUpdatedAt: remoteTime})\n}\n\nconst syncLists = async () => {\n  const unlock = await listManager.RWLock.lock()\n  try {\n    await uploadOpsViaWS()\n    await downloadRemoteLists()\n  } catch (error) {\n    throw error\n  } finally {\n    await unlock()\n  }\n}\n\nconst getRemoteOptionsUpdatedTimeViaWS = () => _socketEmitTimeout(window._socket, 'opts.time')\n\nconst getRemoteOptions = () => _socketEmitTimeout(window._socket, 'opts.all')\n\nconst setRemoteOptions = (opts, time) => _socketEmitTimeout(window._socket, 'opts.set', { opts, time })\n\nconst syncOptions = async () => {\n  const remoteTime = await getRemoteOptionsUpdatedTimeViaWS()\n  const {optsUpdatedAt: localTime} = await browser.storage.local.get('optsUpdatedAt')\n  if (remoteTime > localTime) {\n    const opts = await getRemoteOptions()\n    await browser.storage.local.set({opts, optsUpdatedAt: remoteTime})\n  } else if (remoteTime < localTime) {\n    const opts = await storage.getOptions()\n    await setRemoteOptions(opts, localTime)\n  }\n}\n\n\nlet _refreshing = false\nconst refresh = async () => {\n  if (_refreshing || !(await hasToken())) return\n\n  _refreshing = true\n  await sendMessage({refreshing: true})\n  try {\n    await timeout(Promise.all([syncOptions(), syncLists()]), 20000)\n    await sendMessage({refreshed: {success: true}})\n  } catch (err) {\n    logger.error(err)\n    await sendMessage({refreshed: {success: false}})\n  } finally {\n    _refreshing = false\n  }\n}\n\nconst login = async token => {\n  if (await hasToken()) return\n  await setToken(token)\n  const {uid} = await getInfo()\n  await sendMessage({logged: {uid}})\n  const loginNotificationId = 'login'\n  browser.notifications.create(loginNotificationId, {\n    type: 'basic',\n    iconUrl: 'assets/icons/icon_128.png',\n    title: 'you have login to boss successfully',\n    message: '',\n  })\n  setTimeout(() => {\n    browser.notifications.clear(loginNotificationId)\n  }, 5000)\n  await refresh()\n}\n\nconst initTimer = async () => {\n  if (window._syncTimer || !(await isBackground())) return\n\n  const _nextTimer = time => {\n    window._syncTimer = setTimeout(async () => {\n      if (await hasToken()) {\n        getInfo()\n        if (window._socket && window._socket.connected) {\n          refresh()\n          return _nextTimer(time)\n        }\n      }\n      _nextTimer(Math.min(time * 2, SYNC_MAX_INTERVAL))\n    }, time)\n  }\n\n  const _refreshTimer = time => {\n    clearTimeout(window._syncTimer)\n    _nextTimer(time)\n  }\n\n  window.addEventListener('offline', () => _refreshTimer(SYNC_MAX_INTERVAL))\n  window.addEventListener('online', () => _refreshTimer(SYNC_MIN_INTERVAL))\n  browser.runtime.onMessage.addListener(({login, refreshed}) => {\n    if (login || refreshed && refreshed.success) window._nextSyncInterval = SYNC_MIN_INTERVAL\n  })\n  _nextTimer(SYNC_MIN_INTERVAL)\n}\n\nconst init = async () => {\n  if (window._socket || !await isBackground()) return\n  const socket = window._socket = io(SYNC_SERVICE_URL, {path: '/ws', autoConnect: false})\n  setWSToken(await getToken())\n  await listManager.init()\n  socket.on('list.update', ({method, args}) => {\n    listManager[method](...args)\n  })\n  socket.on('opts.set', async ({changes, time}) => {\n    const {opts} = await browser.storage.local.get('opts')\n    for (const [k, v] of Object.entries(changes)) {\n      opts[k] = v\n    }\n    await browser.storage.local.set({opts, optsUpdatedAt: time})\n  })\n  socket.on('connect', () => refresh())\n  socket.open()\n  initTimer()\n}\n\nexport default {\n  getInfo,\n  removeToken,\n  hasToken,\n  login,\n  init,\n  refresh,\n}\n\n'better-onetab/src/common/listManager.js'\n:import browser from 'webextension-polyfill'\nimport {\n  SYNCED_LIST_PROPS,\n  END_FRONT,\n  END_BACKGROUND,\n  ADD_LIST,\n  UPDATE_LIST_BY_ID,\n  REMOVE_LIST_BY_ID,\n  CHANGE_LIST_ORDER,\n} from './constants'\nimport {isBackground, sendMessage, Mutex} from './utils'\n\nconst cache = { lists: null, ops: null }\nconst RWLock = new Mutex()\nconst getStorage = async () => {\n  const unlockRW = await RWLock.lock()\n  if (cache.lists && cache.ops) return cache\n  const {lists, ops} = await browser.storage.local.get(['lists', 'ops'])\n  cache.lists = lists || []\n  cache.ops = ops || []\n  await unlockRW()\n  return cache\n}\nconst compressOps = ops => {\n  console.debug('[listManager] compress ops: (before)', ops)\n  const removed = []\n  const updated = {}\n  const finalOps = []\n  for (let i = ops.length - 1; i > -1; i -= 1) {\n    const op = ops[i]\n\n    if (op.args && op.args[0] && removed.includes(op.args[0]._id)\n      || typeof op.args[0] === 'string' && removed.includes(op.args[0])) continue\n\n    if (op.method === 'removeListById') {\n      removed.push(op.args[0])\n      finalOps.unshift(op)\n    } else if (op.method === 'updateListById') {\n\n      const [listId, newList, time] = op.args\n      if (updated[listId]) {\n        for (const key in newList) {\n          if (key in updated[listId]) continue\n          updated[listId][key] = newList[key]\n        }\n        continue\n      } else {\n        updated[listId] = Object.assign({}, newList)\n        finalOps.unshift({method: 'updateListById', args: [listId, updated[listId], time]})\n      }\n    } else if (op.method === 'changeListOrderRelatively') {\n\n      if (i > 0 && ops[i - 1].method === 'changeListOrderRelatively' && op.args[0] === ops[i - 1].args[0]) {\n        ops[i - 1].args[1] += ops[i].args[1]\n      } else finalOps.unshift(op)\n    } else {\n\n      finalOps.unshift(op)\n    }\n  }\n  console.debug('[listManager] compress ops: (after)', finalOps)\n  return finalOps\n}\n\nconst manager = {}\n\nmanager.modifiers = {\n  [ADD_LIST](lists, [list]) {\n    if (~lists.findIndex(i => i._id === list._id)) return\n    lists.unshift(list)\n    return [list]\n  },\n  [UPDATE_LIST_BY_ID](lists, [listId, newList, time = Date.now()]) {\n    const normal = Object.keys(newList).some(k => SYNCED_LIST_PROPS.includes(k))\n    for (let i = 0; i < lists.length; i += 1) {\n      if (lists[i]._id !== listId) continue\n      const list = lists[i]\n      for (const [k, v] of Object.entries(newList)) {\n        list[k] = v\n      }\n      if (normal) list.updatedAt = time\n      return normal ? [listId, newList, time] : null\n    }\n  },\n  [REMOVE_LIST_BY_ID](lists, [listId]) {\n    const index = lists.findIndex(list => list._id === listId)\n    lists.splice(index, 1)\n    return [listId]\n  },\n  [CHANGE_LIST_ORDER](lists, [listId, diff]) {\n    const index = lists.findIndex(list => list._id === listId)\n    const [list] = lists.splice(index, 1)\n    lists.splice(index + diff, 0, list)\n    return [listId, diff]\n  },\n}\n\n\n\nconst saveStorage = async (lists, ops) => {\n  const unlock = await RWLock.lock()\n  const data = {\n    lists,\n    ops: compressOps(ops)\n  }\n  await browser.storage.local.set(data)\n  cache.lists = cache.ops = null\n  await sendMessage({refresh: true})\n  await unlock()\n}\n\nconst _modifyQueue = []\nconst _startModifyWork = (lists, ops) => new Promise(resolve => {\n  while (_modifyQueue.length) {\n    const [method, args] = _modifyQueue.shift()\n    const opArgs = manager.modifiers[method](lists, args)\n    if (opArgs) ops.push({method, args: opArgs, time: Date.now()})\n  }\n  setTimeout(() => {\n    if (_modifyQueue.length) _startModifyWork(lists, ops).then(resolve)\n    else resolve()\n  }, 100)\n})\n\nlet _working = false\nconst applyChangesToStorage = async (method, args) => {\n  _modifyQueue.push([method, args])\n\n  if (_working) return\n  _working = true\n  const {lists, ops} = await getStorage()\n  await _startModifyWork(lists, ops)\n\n  _working = false\n  await saveStorage(lists, ops)\n}\nconst addEventListener = (receiveFrom, callback) => browser.runtime.onMessage.addListener(({listModifed, from}) => {\n  if (receiveFrom !== from || !listModifed) return\n  const {method, args} = listModifed\n  return callback(method, args)\n})\nconst genMethods = isBackground => {\n  Object.keys(manager.modifiers).forEach(method => {\n    manager[method] = isBackground ? async (...args) => {\n      console.debug('[list manager] modify list:', method, ...args)\n      await sendMessage({listModifed: {method, args}, from: END_BACKGROUND})\n\n      applyChangesToStorage(method, args)\n    } : async (...args) => {\n      console.debug('[list manager] call to modify list:', name, ...args)\n      await sendMessage({listModifed: {method, args}, from: END_FRONT})\n    }\n  })\n}\nmanager.init = async () => {\n  if (manager.inited) return\n  manager.inited = true\n  const _isBackground = await isBackground()\n  if (_isBackground) await addEventListener(END_FRONT, applyChangesToStorage)\n  genMethods(_isBackground)\n}\nmanager.mapMutations = () => {\n  const mutations = {}\n  Object.entries(manager.modifiers).forEach(([method, fn]) => {\n    mutations[method] = (state, payload) => fn(state.lists, payload)\n  })\n  mutations.receiveData = (state, {method, args}) => {\n    manager.modifiers[method](state.lists, args)\n  }\n  return mutations\n}\nmanager.createVuexPlugin = () => store => {\n  addEventListener(END_BACKGROUND, (method, args) => {\n    store.commit('receiveData', {method, args})\n  })\n  browser.runtime.onMessage.addListener(({refreshed}) => {\n    if (refreshed && refreshed.success) store.dispatch('getLists')\n  })\n  store.subscribe(({type, payload}) => {\n    if (type in manager.modifiers) {\n      manager[type](...payload)\n    }\n  })\n}\nmanager.RWLock = RWLock\nmanager.isWorking = () => _working\nexport default manager\n\n'better-onetab/src/background/init.js'\n:import _ from 'lodash'\nimport logger from '../common/logger'\nimport options from '../common/options'\nimport storage from '../common/storage'\nimport migrate from '../common/migrate'\nimport boss from '../common/service/boss'\nimport {normalizeList} from '../common/list'\nimport commandHandler from './commandHandler'\nimport messageHandler from './messageHandler'\nimport listManager from '../common/listManager'\nimport {setupContextMenus, dynamicDisableMenu} from './contextMenus'\nimport installedEventHandler from './installedEventHandler'\nimport {updateBrowserAction} from './browserAction'\n\nimport browser from 'webextension-polyfill'\n\n\nif (DEBUG && !MOZ) import(\n\n  '../common/autoreload'\n).then(({autoreload}) => autoreload())\n\n\nif (PRODUCTION) import(\n\n  '../common/tracker'\n).then(({tracker}) => tracker())\n\nif (DEBUG) {\n  window.browser = browser\n  window.listManager = listManager\n  window.boss = boss\n  browser.browserAction.setBadgeText({text: 'dev'})\n  import(\n\n    '../common/helper'\n  ).then(helper => { window.helper = helper })\n}\n\nconst initOptions = async () => {\n\n  const opts = window.opts = await storage.getOptions() || {}\n  const defaultOptions = options.getDefaultOptions()\n\n\n  if (_.keys(defaultOptions).some(key => !_.has(opts, key))) {\n    _.defaults(opts, defaultOptions)\n    await storage.setOptions(opts)\n  }\n\n\n  window.nightmode = opts.defaultNightMode\n  return opts\n}\n\nconst storageChangedHandler = changes => {\n  console.debug('[storage changed]', changes)\n  if (changes.boss_token) {\n    window.boss_token = changes.boss_token\n  }\n  if (changes.lists) {\n    if (window.opts.disableDynamicMenu) return\n    setupContextMenus(window.opts)\n  }\n}\n\nconst tabsChangedHandler = activeInfo => {\n  if (window.opts.disableDynamicMenu) return\n  window.coverBrowserAction(activeInfo)\n  dynamicDisableMenu(activeInfo)\n}\n\nconst fixDirtyData = async () => {\n  const unlock = await listManager.RWLock.lock()\n  const {lists} = await browser.storage.local.get('lists')\n  if (lists) {\n    const cleanLists = lists.filter(_.isPlainObject).map(normalizeList)\n    await browser.storage.local.set({lists: cleanLists})\n  }\n  await unlock()\n}\n\nconst init = async () => {\n  logger.init()\n  await listManager.init()\n  const opts = await initOptions()\n  await updateBrowserAction(opts.browserAction)\n  await setupContextMenus(opts)\n  await Promise.all([\n    browser.commands.onCommand.addListener(commandHandler),\n    browser.runtime.onMessageExternal.addListener(commandHandler),\n    browser.runtime.onMessage.addListener(messageHandler),\n    browser.runtime.onUpdateAvailable.addListener(detail => { window.update = detail.version }),\n    browser.runtime.onInstalled.addListener(installedEventHandler),\n    browser.browserAction.onClicked.addListener(() => window.browswerActionClickedHandler()),\n    browser.contextMenus.onClicked.addListener(info => window.contextMenusClickedHandler(info)),\n    browser.tabs.onActivated.addListener(_.debounce(tabsChangedHandler, 200)),\n    browser.storage.onChanged.addListener(storageChangedHandler),\n  ])\n  await migrate()\n  await fixDirtyData()\n  await boss.init()\n}\n\nexport default init\n",
        "gt": [
            "'better-onetab/src/common/listManager.js'",
            "'better-onetab/src/common/service/boss.js'",
            "'better-onetab/src/background/init.js'",
            "'better-onetab/src/background/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/components/responsibleTouchArea.js'",
            "'ruui/src/components/selector.js'",
            "'ruui/src/components/modals.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/components/modal.js'"
        ],
        "content": "'ruui/src/components/responsibleTouchArea.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, TouchableOpacity, View, StyleSheet, Platform } from 'react-native';\nimport tinyColor from 'tinycolor2';\n\nimport RippleEffect from './rippleEffect';\nimport { debounce, isIos, } from '../utils';\nimport * as appActions from '../store/action/app';\nimport type { Style, Element, SnappingDirection, } from '../typeDefinition';\n\ntype Props = {\n\tchildren?: Element,\n\twrapperStyle?: Style,\n\tinnerStyle?: Style,\n\ttooltip?: String | Element,\n\ttooltipWrapperStyle?: Style,\n\ttooltipInnerStyle?: Style,\n\ttooltipDirection?: SnappingDirection,\n\ttooltipPositionSpacing?: number,\n\ttooltipPositionOffset?: Object,\n\tripple?: boolean,\n\tstaticRipple?: boolean,\n\trippleColor?: string,\n\trippleInitialOpacity?: number,\n\trippleInitialScale?: number,\n\trippleAnimationSpeed?: number,\n\tfade?: boolean,\n\tfadeLevel?: number,\n\traise?: boolean,\n\tdebounce?: number,\n\tdisabled?: boolean,\n\tactiveOpacity?: number,\n\tonPress?: Function,\n\tonPressIn?: Function,\n\tonPressOut?: Function,\n\tonMouseEnter?: Function,\n\tonMouseLeave?: Function,\n};\n\nconst MAX_PARTICLE_COUNT = 5;\n\nclass RuuiResponsibleTouchArea extends Component<any, Props, any> {\n\tprops: Props;\n\n\tstatic contextTypes = {\n\t\truuiStore: PropTypes.object,\n\t};\n\n\tstatic defaultProps = {\n\t\tstaticRipple: false,\n\t\tactiveOpacity: 0.7,\n\t\tripple: true,\n\t\traise: false,\n\t\tfade: false,\n\t\tfadeLevel: 0.1,\n\t\tdisabled: false,\n\t};\n\n\trippleIndex = 0;\n\n\tcomponentWillUnmount() {\n\t\tthis.willUnmount = true;\n\t}\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tripples: [],\n\t\t\tmouseInside: false,\n\t\t};\n\n\t\tthis.raiseAnimation = new Animated.Value(0);\n\t\tthis.fadeAnimation = new Animated.Value(0);\n\n\t\tif (props.debounce) {\n\t\t\tthis.handlePress = debounce(this.handlePress.bind(this), props.debounce);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { children, wrapperStyle, innerStyle, disabled, onPressIn, onPressOut, onPress, ripple, fade, fadeLevel, raise, ...otherProps } = this.props,\n\t\t\tflattenWrapperStyles = StyleSheet.flatten(wrapperStyle) || {},\n\t\t\tplatformStyles = Platform.select({\n\t\t\t\tweb: { cursor: 'pointer', userSelect: 'none' },\n\t\t\t}),\n\t\t\tisLightBackground = tinyColor(flattenWrapperStyles.backgroundColor).getBrightness() > 180,\n\t\t\twrapperBorderRadius = extractBorderRadius(flattenWrapperStyles);\n\n\t\treturn <View\n\t\t\tonMouseLeave={this.onMouseLeave}\n\t\t\tonMouseEnter={this.onMouseEnter}\n\t\t\tref={(instance) => { this.wrapperView = instance; }}\n\t\t\tcollapsable={false}\n\t\t\tstyle={[wrapperStyle, platformStyles]}>\n\n\t\t\t{raise && this.renderShadowEffect(raise, isLightBackground, wrapperBorderRadius)}\n\t\t\t{fade && this.renderFadeEffect(fade, fadeLevel, isLightBackground, wrapperBorderRadius)}\n\t\t\t{ripple && this.renderRippleEffect(isLightBackground, wrapperBorderRadius)}\n\n\t\t\t<TouchableOpacity\n\t\t\t\tdisabled={disabled}\n\t\t\t\tstyle={innerStyle}\n\t\t\t\tonPressIn={this.onPressIn}\n\t\t\t\tonPressOut={this.onPressOut}\n\t\t\t\tonPress={this.onPress}\n\t\t\t\tonStartShouldSetResponderCapture={() => !disabled}\n\t\t\t\t{...otherProps}>\n\t\t\t\t<View pointerEvents=\"none\">\n\t\t\t\t\t{children}\n\t\t\t\t</View>\n\t\t\t</TouchableOpacity>\n\t\t</View>;\n\t}\n\n\trenderShadowEffect(raise: Boolean, isLightBackground: Boolean, wrapperBorderRadius) {\n\t\tconst shadowOpacity = this.raiseAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1], outputRange: [raise ? 0.15 : 0, 0.6],\n\t\t\t}),\n\t\t\tshadow = raise && {\n\t\t\t\tborderRadius: 3,\n\t\t\t\tshadowColor: '#666666',\n\t\t\t\topacity: shadowOpacity,\n\t\t\t\tshadowOpacity: 1,\n\t\t\t\tshadowRadius: raiseShadowRadius,\n\t\t\t\tshadowOffset: { width: 0, height: 2 },\n\t\t\t};\n\n\t\treturn <Animated.View\n\t\t\tstyle={[styles.fullSizeAbsolute, shadow, wrapperBorderRadius]}/>;\n\t}\n\n\trenderFadeEffect(fade, fadeLevel, isLightBackground: Boolean, wrapperBorderRadius) {\n\t\tconst opacity = this.fadeAnimation.interpolate({\n\t\t\t\tinputRange: [0, 1],\n\t\t\t\toutputRange: [0, fadeLevel],\n\t\t\t\textrapolate: 'clamp',\n\t\t\t}),\n\t\t\tmaskStyles = {\n\t\t\t\tbackgroundColor: isLightBackground ? '#000000' : '#ffffff',\n\t\t\t\topacity,\n\t\t\t};\n\n\t\treturn <Animated.View style={[styles.fullSizeAbsolute, wrapperBorderRadius, maskStyles]}/>;\n\t}\n\n\trenderRippleEffect(isLightBackground: Boolean, wrapperBorderRadius) {\n\t\treturn <View style={[styles.fullSizeAbsolute, wrapperBorderRadius, { overflow: 'hidden' }]}>\n\t\t\t{this.renderRipples()}\n\t\t</View>;\n\t}\n\n\trenderRipples() {\n\t\tconst { ripples } = this.state,\n\t\t\t{ rippleInitialOpacity, rippleInitialScale, rippleAnimationSpeed } = this.props;\n\n\t\treturn ripples.map((ripple) => {\n\t\t\treturn <RippleEffect\n\t\t\t\tkey={ripple.index}\n\t\t\t\tstyle={ripple.style}\n\t\t\t\tindex={ripple.index}\n\t\t\t\tinitialOpacity={rippleInitialOpacity}\n\t\t\t\tinitialScale={rippleInitialScale}\n\t\t\t\tspeed={rippleAnimationSpeed}/>;\n\t\t});\n\t}\n\n\tonPress = (e) => {\n\t\tconst { onPress } = this.props;\n\t\tif (onPress) setTimeout(() => onPress(e), 0);\n\t};\n\n\tonPressIn = (e) => {\n\t\tconst { ripples } = this.state,\n\t\t\t{ wrapperStyle, disabled, raise, staticRipple, rippleColor, onPressIn } = this.props;\n\n\t\tif (disabled) return;\n\n\t\tconst flattenWrapperStyles = StyleSheet.flatten(wrapperStyle) || {},\n\t\t\tisLightBackground = tinyColor(flattenWrapperStyles.backgroundColor).getBrightness() > 180;\n\n\t\tif (raise) this.playRaiseAnimation(1);\n\n\t\tthis.playFadeAnimation(1);\n\n\t\tconst { locationX, locationY, offsetX, offsetY, pageX, pageY } = e.nativeEvent;\n\n\t\tthis.wrapperView.measure((fx, fy, wrapperWidth, wrapperHeight, px, py) => {\n\t\t\tlet rippleRadius = 0, ripplePosition;\n\t\t\tconst touchX = locationX || offsetX, touchY = locationY || offsetY;\n\n\t\t\tif (staticRipple || !touchX) {\n\t\t\t\trippleRadius = wrapperWidth / 2;\n\t\t\t\tripplePosition = {\n\t\t\t\t\ttop: (wrapperHeight / 2) - rippleRadius,\n\t\t\t\t\tleft: (wrapperWidth / 2) - rippleRadius,\n\t\t\t\t};\n\t\t\t} else {\n\n\t\t\t\tif (touchX > wrapperWidth / 2) {\n\t\t\t\t\tif (touchY > wrapperHeight / 2) {\n\n\t\t\t\t\t\trippleRadius = Math.sqrt((touchX * touchX) + (touchY * touchY));\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst paddedY = touchY - wrapperHeight;\n\t\t\t\t\t\trippleRadius = Math.sqrt((touchX * touchX) + (paddedY * paddedY));\n\t\t\t\t\t}\n\t\t\t\t} else if (touchY > wrapperHeight / 2) {\n\n\t\t\t\t\tconst paddedX = touchX - wrapperWidth;\n\t\t\t\t\trippleRadius = Math.sqrt((paddedX * paddedX) + (touchY * touchY));\n\t\t\t\t} else {\n\n\t\t\t\t\tconst paddedX = touchX - wrapperWidth, paddedY = touchY - wrapperHeight;\n\t\t\t\t\trippleRadius = Math.sqrt((paddedX * paddedX) + (paddedY * paddedY));\n\t\t\t\t}\n\n\t\t\t\trippleRadius *= 1.2;\n\t\t\t\tripplePosition = {\n\t\t\t\t\ttop: touchY - rippleRadius,\n\t\t\t\t\tleft: touchX - rippleRadius,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tthis.rippleIndex += 1;\n\t\t\tconst defaultRippleColor = isLightBackground ? '#333333' : '#ffffff',\n\t\t\t\tnewRipple = {\n\t\t\t\t\tindex: this.rippleIndex,\n\t\t\t\t\tstyle: {\n\t\t\t\t\t\twidth: rippleRadius * 2,\n\t\t\t\t\t\theight: rippleRadius * 2,\n\t\t\t\t\t\tborderRadius: rippleRadius,\n\t\t\t\t\t\tbackgroundColor: rippleColor || defaultRippleColor,\n\t\t\t\t\t\t...ripplePosition,\n\t\t\t\t\t},\n\t\t\t\t};\n\t\t\tlet nextRipples = [newRipple, ...ripples];\n\n\t\t\tif (nextRipples.length > MAX_PARTICLE_COUNT) {\n\t\t\t\tnextRipples = nextRipples.slice(0, MAX_PARTICLE_COUNT);\n\t\t\t}\n\n\t\t\tif (!this.willUnmount) this.setState({ ripples: nextRipples });\n\t\t});\n\n\t\tif (onPressIn) onPressIn(e);\n\t};\n\n\tonPressOut = (e, forceFade = false) => {\n\t\tconst { mouseInside } = this.state,\n\t\t\t{ raise, onPressOut } = this.props;\n\n\t\tif (raise) this.playRaiseAnimation(0);\n\t\tif (onPressOut && e) onPressOut(e);\n\n\t\tif (forceFade === true || !mouseInside) {\n\t\t\tthis.playFadeAnimation(0);\n\t\t}\n\t};\n\n\tonMouseEnter = () => {\n\t\tconst { ruuiStore } = this.context;\n\t\tconst { disabled, tooltip, tooltipWrapperStyle, tooltipInnerStyle, tooltipDirection, tooltipPositionSpacing, tooltipPositionOffset } = this.props;\n\n\t\tthis.setState({ mouseInside: true });\n\n\t\tif (!disabled) {\n\t\t\tthis.playFadeAnimation(1);\n\n\t\t\tif (tooltip) {\n\t\t\t\tthis.wrapperView.measure((x, y, width, height, pageX, pageY) => {\n\t\t\t\t\truuiStore.dispatch(appActions.toggleTooltip(true, {\n\t\t\t\t\t\ttargetLayout: { x: pageX, y: pageY, width, height },\n\t\t\t\t\t\tdirection: tooltipDirection,\n\t\t\t\t\t\tpositionSpacing: tooltipPositionSpacing,\n\t\t\t\t\t\tpositionOffset: tooltipPositionOffset,\n\t\t\t\t\t\tcontent: tooltip,\n\t\t\t\t\t\twrapperStyle: tooltipWrapperStyle,\n\t\t\t\t\t\tinnerStyle: tooltipInnerStyle,\n\t\t\t\t\t}));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\n\tonMouseLeave = () => {\n\t\tconst { ruuiStore } = this.context;\n\t\tconst { disabled, tooltip } = this.props;\n\n\t\tthis.onPressOut(null, true);\n\t\tthis.setState({ mouseInside: false });\n\n\t\tif (!disabled && tooltip) {\n\t\t\truuiStore.dispatch(appActions.toggleTooltip(false));\n\t\t}\n\t};\n\n\tplayRaiseAnimation = (toValue: Number) => {\n\t\tif (this.raisingAnimation) this.raisingAnimation.clear();\n\n\t\tconst animations = [\n\t\t\tAnimated.timing(this.raiseAnimation, {\n\t\t\t\ttoValue,\n\t\t\t\tduration: 500,\n\t\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\t\tuseNativeDriver: false,\n\t\t\t}),\n\t\t];\n\n\t\tthis.raisingAnimation = Animated.parallel(animations).start();\n\t};\n\n\tplayFadeAnimation = (toValue: Number) => {\n\t\tif (this.fadingAnimation) this.fadingAnimation.clear();\n\n\t\tthis.fadingAnimation = Animated.timing(this.fadeAnimation, {\n\t\t\ttoValue,\n\t\t\tduration: 800,\n\t\t\teasing: Easing.in(Easing.bezier(0.23, 1, 0.32, 1)),\n\t\t\tuseNativeDriver: true,\n\t\t}).start();\n\t};\n}\n\nexport default RuuiResponsibleTouchArea;\n\nfunction extractBorderRadius(baseStyles) {\n\treturn [\n\t\t'borderRadius',\n\t\t'borderTopLeftRadius',\n\t\t'borderTopRightRadius',\n\t\t'borderBottomLeftRadius',\n\t\t'borderBottomRightRadius',\n\t].reduce((accumulate, currentAttribute) => {\n\t\tif (baseStyles[currentAttribute]) {\n\t\t\taccumulate[currentAttribute] = baseStyles[currentAttribute];\n\t\t}\n\n\t\treturn accumulate;\n\t}, {});\n}\n\nconst raiseShadowRadius = isIos ? 4 : 10;\nconst styles = StyleSheet.create({\n\tfullSizeAbsolute: {\n\t\tposition: 'absolute',\n\t\ttop: 0, bottom: 0, right: 0, left: 0,\n\t},\n});\n\n'ruui/src/components/selector.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, TouchableWithoutFeedback, ScrollView, View, Text, StyleSheet } from 'react-native';\n\nimport ResponsibleTouchArea from './responsibleTouchArea';\nimport SelectorItem from './selectorItem';\nimport { isAndroid, colors } from '../utils';\nimport { screenWidthPadding } from '../utils/screen';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tconfigs?: Object,\n\tanimation?: any,\n\tactive?: boolean,\n\tdispatch?: Function,\n\tonRequestClose?: Function,\n};\n\nclass Selector extends Component<any, Props, any> {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiStore: PropTypes.object,\n\t};\n\n\tconstructor(props, context) {\n\t\tsuper(props);\n\t\tthis.store = context.ruuiStore;\n\t}\n\n\trender() {\n\t\tconst { animation, configs, active, onRequestClose } = this.props,\n\t\t\ttranslateY = animation.interpolate({\n\t\t\t\tinputRange: [0, 0.32, 1], outputRange: [maxContainerSize, maxContainerSize * 0.15, 0],\n\t\t\t}), selectionContainerStyles = {\n\t\t\t\ttransform: [{ translateY }],\n\t\t\t},\n\t\t\tOptionWrapperElement = configs.options.length > 5 ? ScrollView : View,\n\t\t\tpointerEvents = active ? 'auto' : 'none';\n\n\t\treturn <View pointerEvents={pointerEvents} style={styles.container}>\n\t\t\t{configs.tapToClose ? <TouchableWithoutFeedback\n\t\t\t\tonPress={() => onRequestClose(configs)}>\n\t\t\t\t<View style={styles.touchableMask}/>\n\t\t\t</TouchableWithoutFeedback> : <View/>}\n\n\t\t\t<Animated.View\n\t\t\t\tstyle={[styles.selectionContainer, selectionContainerStyles]}>\n\t\t\t\t<View style={styles.optionWrapper}>\n\t\t\t\t\t<View style={styles.selectTitle}>\n\t\t\t\t\t\t<Text style={styles.selectTitleText}>\n\t\t\t\t\t\t\t{configs.selectText}\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</View>\n\t\t\t\t\t<View style={{ maxHeight: 255 }}>\n\t\t\t\t\t\t<OptionWrapperElement style={{ backgroundColor: '#f9f9f9' }}>\n\t\t\t\t\t\t\t{this.renderOptions()}\n\t\t\t\t\t\t</OptionWrapperElement>\n\t\t\t\t\t\t{!isAndroid && <View style={styles.optionTails}/>}\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t\t<View style={styles.commandWrapper}>\n\t\t\t\t\t{this.renderCommands()}\n\t\t\t\t</View>\n\t\t\t</Animated.View>\n\t\t</View>;\n\t}\n\n\trenderOptions() {\n\t\tconst { configs } = this.props,\n\t\t\t{ options = [] } = configs;\n\n\t\treturn options.map((item, i) => {\n\t\t\treturn <SelectorItem\n\t\t\t\tkey={i}\n\t\t\t\toptionInstance={item}\n\t\t\t\tactiveInstance={configs.value}\n\t\t\t\tgetTitle={configs.getTitle}\n\t\t\t\tonPress={this.onItemPick}/>;\n\t\t});\n\t}\n\n\trenderCommands() {\n\t\tconst { configs } = this.props;\n\n\t\treturn <ResponsibleTouchArea\n\t\t\tonPress={this.cancelSelector}\n\t\t\trippleColor={colors.iOsBlue}\n\t\t\twrapperStyle={[styles.commandItemWrapper]}\n\t\t\tinnerStyle={styles.optionItemInner}\n\t\t\tfadeLevel={0.04}>\n\t\t\t<Text style={styles.commandTitle}>\n\t\t\t\t{configs.cancelText}\n\t\t\t</Text>\n\t\t</ResponsibleTouchArea>;\n\t}\n\n\tonItemPick = (item) => {\n\t\tconst { configs } = this.props;\n\n\t\tthis.store.dispatch(appActions.toggleSelector(false));\n\t\tif (configs.onSelect) configs.onSelect(item);\n\t\tif (configs.onChange\n\t\t\t&& JSON.stringify(configs.value) !== JSON.stringify(item)) {\n\t\t\tconfigs.onChange(item);\n\t\t}\n\t};\n\n\tcancelSelector = () => {\n\t\tconst { configs } = this.props;\n\n\t\tthis.store.dispatch(appActions.toggleSelector(false, {\n\t\t\tid: configs.id,\n\t\t}));\n\t\tif (configs.onCancel) configs.onCancel();\n\t}\n}\n\nexport default Selector;\n\nconst maxContainerSize = 500,\n\tselectorRadius = isAndroid ? 3 : 8,\n\tborderWidth = isAndroid ? 0 : 1,\n\tselectorMargin = 20,\n\tselectorPadding = isAndroid ? 20 : 8,\n\tselectionAlign = isAndroid ? 'left' : 'center';\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t},\n\tselectionContainer: {\n\t\tposition: 'absolute',\n\t\tbottom: 0, left: 0, right: 0,\n\t\tmaxHeight: maxContainerSize,\n\t\talignItems: 'center',\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n\tselectTitle: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#f9f9f9',\n\t\tborderTopLeftRadius: selectorRadius,\n\t\tborderTopRightRadius: selectorRadius,\n\t\tborderBottomWidth: borderWidth,\n\t\tborderColor: '#dedede',\n\t},\n\tselectTitleText: {\n\t\tpadding: selectorPadding,\n\t\tpaddingTop: 9, paddingBottom: 9,\n\t\ttextAlign: selectionAlign,\n\t\tcolor: '#8f8f8f', backgroundColor: 'transparent',\n\t\tfontSize: 14, fontWeight: '300',\n\t},\n\toptionWrapper: {\n\t\tmargin: selectorMargin,\n\t\tmarginBottom: isAndroid ? 0 : selectorMargin / 2,\n\t\twidth: screenWidthPadding(selectorMargin, 400),\n\t},\n\toptionItemInner: {\n\t\tpadding: selectorPadding,\n\t\tpaddingTop: 12, paddingBottom: 12,\n\t},\n\toptionTails: {\n\t\theight: selectorRadius,\n\t\tbackgroundColor: '#f9f9f9',\n\t\tborderBottomLeftRadius: selectorRadius,\n\t\tborderBottomRightRadius: selectorRadius,\n\t},\n\tcommandWrapper: {\n\t\tmargin: selectorMargin,\n\t\tmarginTop: 0,\n\t\tborderRadius: selectorRadius,\n\t\tborderTopLeftRadius: isAndroid ? 0 : selectorRadius,\n\t\tborderTopRightRadius: isAndroid ? 0 : selectorRadius,\n\t\tbackgroundColor: isAndroid ? '#f9f9f9' : 'transparent',\n\t\toverflow: 'hidden',\n\t\twidth: screenWidthPadding(selectorMargin, 400),\n\t},\n\tcommandItemWrapper: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#f5f5f5',\n\t\tborderBottomWidth: borderWidth,\n\t\tborderColor: '#dedede',\n\t\tborderRadius: selectorRadius,\n\t},\n\tcommandTitle: {\n\t\tcolor: colors.iOsBlue,\n\t\tfontSize: 17,\n\t\ttextAlign: isAndroid ? 'center' : 'center',\n\t\tbackgroundColor: 'transparent',\n\t},\n});\n\n'ruui/src/components/modals.js'\n:import React, { Component } from 'react';\nimport { View, StyleSheet, } from 'react-native';\n\nimport Modal from './modal';\nimport RuuiDropdown from './dropdown';\nimport { connect } from '../utils';\n\ntype Props = {\n\tpreRenders?: Array<Object>,\n\tpreRenderDelay?: Number,\n\tmodals?: Array<Object>,\n\tdispatch?: Function,\n\tscreenSize?: { width?: number, height?: number },\n\tanimationDelay?: Number,\n};\n\nclass RuuiModals extends Component {\n\tprops: Props;\n\tstatic defaultProps = {\n\t\tanimationDelay: 200,\n\t\tpreRenderDelay: 300,\n\t};\n\n\tcomponentDidMount() {\n\t\tconst { dispatch, preRenders, preRenderDelay, } = this.props;\n\n\t\tif (preRenders?.length) {\n\t\t\tfor (let i = 0; i < preRenders.length; i += 1) {\n\t\t\t\tconst item = preRenders[i];\n\t\t\t\titem.flag = false;\n\t\t\t\tsetTimeout(() => dispatch(item), i * preRenderDelay);\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { dispatch, modals, screenSize, animationDelay, } = this.props,\n\t\t\tmodalArray = Object.keys(modals).map(key => Object.assign({}, modals[key], { id: key }));\n\n\t\treturn <View\n\t\t\tref={(ref) => { global.modalsContainer = ref; }}\n\t\t\tpointerEvents=\"box-none\"\n\t\t\tstyle={styles.container}>\n\t\t\t{modalArray.map((modalConfigs, i) => {\n\t\t\t\tif (modalConfigs.type === 'dropdown') {\n\t\t\t\t\treturn <RuuiDropdown\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tscreenSize={screenSize}\n\t\t\t\t\t\t{...modalConfigs}\n\t\t\t\t\t/>;\n\t\t\t\t}\n\t\t\t\treturn <Modal\n\t\t\t\t\tkey={i}\n\t\t\t\t\tmodalCount={modalArray.filter(e => e.type !== 'dropdown').length}\n\t\t\t\t\tdispatch={dispatch}\n\t\t\t\t\tanimationDelay={animationDelay}\n\t\t\t\t\t{...modalConfigs}/>;\n\t\t\t})}\n\t\t</View>;\n\t}\n}\n\nexport default connect(({ activeModals }) => {\n\treturn {\n\t\tmodals: activeModals,\n\t};\n})(RuuiModals);\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n});\n\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/components/modal.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, View, StyleSheet } from 'react-native';\n\nimport Selector from './selector';\nimport LoadingMask from './loadingMask';\nimport CloseableModal from './closeableModal';\nimport { valueAt } from '../utils';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tactive?: any,\n\ttype?: string,\n\tconfigs?: Object,\n\tmodalCount?: number,\n\tdispatch?: Function,\n\tanimationDelay?: Number,\n};\n\nexport default class RuuiModal extends Component {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactive: props.active,\n\t\t};\n\t\tthis.enterAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { active, animationDelay, } = this.props;\n\t\tsetTimeout(() => this.playTransition(active), animationDelay);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { active } = this.props;\n\t\tif (prevProps.active !== active) {\n\t\t\tthis.playTransition(active);\n\t\t}\n\t}\n\n\tplayTransition(active) {\n\t\tconst { configs = {}, } = this.props;\n\t\tconst nextValue = active ? 1 : 0;\n\n\t\tif (!active) {\n\t\t\tif (configs.instantClose) {\n\t\t\t\tthis.setState({ active: null });\n\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t} else {\n\t\t\t\tthis.playAnimation(nextValue, () => {\n\t\t\t\t\tthis.setState({ active: null });\n\t\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState({ active });\n\t\t\tthis.playAnimation(nextValue);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { configs = {}, modalCount, type: modalType } = this.props,\n\t\t\t{ active } = this.state,\n\t\t\tglobalConfigs = valueAt(this, 'context.ruuiConfigs.modal'),\n\t\t\tcontainerPropsGenerator = configs.maskProps || globalConfigs.maskProps,\n\t\t\tcontainerProps = containerPropsGenerator(this.enterAnimation, configs, modalCount, modalType);\n\n\t\tif (configs.maskProps && !containerProps.style) {\n\t\t\tcontainerProps.style = globalConfigs.maskProps(\n\t\t\t\tthis.enterAnimation, configs, modalCount, modalType\n\t\t\t).style;\n\t\t}\n\n\t\treturn active ? <Animated.View {...containerProps}>\n\t\t\t<View style={styles.innerTouchable}>\n\t\t\t\t{this.renderModalInner()}\n\t\t\t</View>\n\t\t</Animated.View> : <View/>;\n\t}\n\n\trenderModalInner() {\n\t\tconst { dispatch, type: modalType, active, configs: modalConfigs } = this.props;\n\n\t\tswitch (modalType) {\n\t\tcase 'select':\n\t\t\treturn <Selector\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleSelector(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'modal':\n\t\t\treturn <CloseableModal\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleModal(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'loading':\n\t\t\treturn <LoadingMask\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tdefault:\n\t\t\treturn <View/>;\n\t\t}\n\t}\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: false,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport function defaultMaskPropsGenerator(animation, configs, modalCount, modalType) {\n\tconst averageOpacity = (0.8 / modalCount) + (modalCount * 0.1),\n\t\tbackgroundColor = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: ['rgba(0, 0, 0, 0)', `rgba(0, 0, 0, ${averageOpacity})`],\n\t\t}),\n\t\tstyle = [styles.container, {\n\t\t\tzIndex: configs.zIndex,\n\t\t\tbackgroundColor,\n\t\t}];\n\n\treturn { style, };\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n\tinnerTouchable: {\n\t\tflex: 1,\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n});\n",
        "gt": [
            "'ruui/src/components/responsibleTouchArea.js'",
            "'ruui/src/components/selector.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/modals.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'ProjectFlowerbed/src/js/systems/assets/AssetLoadingSystem.js'",
            "'ProjectFlowerbed/src/js/ECSYConfig.js'",
            "'ProjectFlowerbed/src/js/devTools/HandPoseExtractorSystem.js'"
        ],
        "content": "'ProjectFlowerbed/src/js/systems/assets/AssetLoadingSystem.js'\n:\n\nimport * as THREE from 'three';\nimport { AssetDatabaseComponent } from '../../components/AssetDatabaseComponent';\nimport { AssetReplacementSystem } from './AssetReplacementSystem';\nimport { AssetURLs } from '@config/AssetURLs';\nimport { AudioDatabase } from '../../lib/databases/AudioDatabase';\nimport { DEBUG_CONSTANTS } from '../../Constants';\nimport { LoadingScreenComponent } from '../../components/LoadingScreenComponent';\nimport { MeshDatabase } from '../../lib/databases/MeshDatabase';\nimport { MeshPreviewSystem } from '../mesh/MeshPreviewSystem';\nimport { System } from 'ecsy';\nimport { THREEGlobalComponent } from '../../components/THREEGlobalComponent';\nimport { getOnlyEntity } from '../../utils/entityUtils';\nimport { registerSystemsAfterLoad } from '../../ECSYConfig';\n\nconst kMaxMeshes = 568;\n\nexport class AssetLoadingSystem extends System {\n\tinit() {\n\t\tthis.hasStartedLoadingAssets = false;\n\t}\n\n\n\t_loadAssets() {\n\t\tconst gameManager = getOnlyEntity(this.queries.gameManager);\n\t\tconst threeConstants = gameManager.getComponent(THREEGlobalComponent);\n\n\t\tif (!getOnlyEntity(this.queries.loadingScreen, false)) {\n\t\t\tconst loadingScreenEntity = this.world.createEntity();\n\t\t\tloadingScreenEntity.addComponent(LoadingScreenComponent, {\n\t\t\t\ttotalMeshes: kMaxMeshes,\n\t\t\t});\n\t\t}\n\n\t\tthis.loadingManager = new THREE.LoadingManager(\n\t\t\t() => {},\n\t\t\t(_url, loaded, total) => {\n\t\t\t\tconst loadingScreen = getOnlyEntity(\n\t\t\t\t\tthis.queries.loadingScreen,\n\t\t\t\t).getMutableComponent(LoadingScreenComponent);\n\t\t\t\tloadingScreen.totalMeshes = Math.max(total, kMaxMeshes);\n\t\t\t\tloadingScreen.loadedMeshes = loaded;\n\t\t\t},\n\t\t);\n\n\n\t\tconst assetDatabaseEntity = this.world.createEntity();\n\t\tconst meshDatabase = new MeshDatabase(\n\t\t\tthreeConstants.renderer,\n\t\t\tthis.loadingManager,\n\t\t);\n\n\t\tassetDatabaseEntity.addComponent(AssetDatabaseComponent, {\n\t\t\tmeshes: meshDatabase,\n\t\t\taudio: new AudioDatabase(),\n\t\t});\n\n\t\tconst assetDatabaseComponent = assetDatabaseEntity.getMutableComponent(\n\t\t\tAssetDatabaseComponent,\n\t\t);\n\n\t\tthis.hasStartedLoadingAssets = true;\n\n\n\t\tlet shouldUseLocalhostServer = false;\n\t\tconst performLoad = async () => {\n\t\t\tconst promises = [];\n\t\t\tpromises.push(\n\t\t\t\tassetDatabaseComponent.loadAllMeshes(shouldUseLocalhostServer),\n\t\t\t);\n\t\t\tpromises.push(assetDatabaseComponent.loadAllAudio());\n\n\t\t\tawait Promise.all(promises);\n\t\t\tthis._onLoad();\n\n\t\t\tif (shouldUseLocalhostServer) {\n\t\t\t\tthis.world.registerSystem(MeshPreviewSystem);\n\t\t\t}\n\t\t};\n\t\tif (!DEBUG_CONSTANTS.ENABLE_LOCALHOST_ASSETS) {\n\t\t\tperformLoad();\n\t\t\treturn;\n\t\t}\n\n\n\t\tconst controller = new AbortController();\n\t\tconst timeoutId = setTimeout(() => controller.abort(), 1000);\n\t\tfetch('http:\n\t\t\t.then((_response) => {\n\n\t\t\t\tshouldUseLocalhostServer = true;\n\n\n\n\t\t\t\tAssetURLs.ADDITIONAL_MESH_DIRS.unshift('http:\n\n\t\t\t\tclearTimeout(timeoutId);\n\t\t\t})\n\t\t\t.catch((_e) => {\n\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tperformLoad();\n\t\t\t});\n\t}\n\n\t_onLoad() {\n\t\tthis.world.registerSystem(AssetReplacementSystem, { priority: -10 });\n\t\tregisterSystemsAfterLoad(this.world);\n\n\t\tconst loadingScreen = getOnlyEntity(\n\t\t\tthis.queries.loadingScreen,\n\t\t).getMutableComponent(LoadingScreenComponent);\n\t\tloadingScreen.isDoneLoading = true;\n\t}\n\n\texecute() {\n\t\tif (!this.hasStartedLoadingAssets) {\n\t\t\tthis._loadAssets();\n\t\t}\n\t}\n}\n\nAssetLoadingSystem.queries = {\n\tgameManager: {\n\t\tcomponents: [THREEGlobalComponent],\n\t},\n\tloadingScreen: {\n\t\tcomponents: [LoadingScreenComponent],\n\t},\n};\n\n'ProjectFlowerbed/src/js/ECSYConfig.js'\n:\n\nimport {\n\tAerialFaunaGroupComponent,\n\tAerialFaunaMovementComponent,\n\tWaterFaunaGroupComponent,\n\tWaterFaunaMovementComponent,\n} from './components/FaunaComponents';\nimport {\n\tCapsuleColliderComponent,\n\tCollisionAreaComponent,\n\tCollisionWorldComponent,\n\tStaticColliderComponent,\n\tStaticColliderResources,\n} from './components/ColliderComponents';\nimport {\n\tControlsPanelComponent,\n\tSettingsComponent,\n\tSettingsPanelComponent,\n} from './components/SettingsComponent';\nimport {\n\tCurvedRay,\n\tRayComponent,\n\tShortRay,\n\tStraightRay,\n} from './components/RayComponents';\nimport {\n\tEnvironmentProp,\n\tHovered,\n\tIsActive,\n\tLight,\n\tMainEnvironment,\n\tPressed,\n} from './components/GameObjectTagComponents';\nimport {\n\tInstancedMeshComponent,\n\tInstancedMeshInstanceComponent,\n} from './components/InstancedMeshComponent';\nimport {\n\tLoopingAudioComponent,\n\tLoopingAudioResources,\n\tOneshotAudioComponent,\n\tPlaylistAudioComponent,\n\tPlaylistAudioResources,\n} from './components/AudioComponents';\nimport {\n\tMorphTargetAnimationComponent,\n\tMorphTargetMeshInitialized,\n} from './components/MorphTargetAnimationComponent';\nimport {\n\tNUXMovementTriggerArea,\n\tNUXPanelComponent,\n\tNUXStateComponent,\n} from './components/NUXStateComponent';\nimport {\n\tPhotoComponent,\n\tPhotoMenuComponent,\n\tScreenshotCameraComponent,\n} from './components/ScreenshotCameraComponent';\nimport {\n\tPickedPlantComponent,\n\tPlantGrowingComponent,\n\tPlantShrinkingComponent,\n\tPlantTinyColliderComponent,\n\tPlantedComponent,\n\tPlantingStateComponent,\n\tSeedAnimationComponent,\n} from './components/PlantingComponents';\nimport {\n\tPlayerColliderComponent,\n\tPlayerStateComponent,\n} from './components/PlayerStateComponent';\nimport {\n\tSeedComponent,\n\tSeedbagComponent,\n\tSeedboxButtonComponent,\n\tSeedboxComponent,\n} from './components/SeedboxComponents';\nimport {\n\tUIPanelComponent,\n\tUIPanelMedia,\n\tUIPanelResources,\n} from './components/UIPanelComponent';\n\nimport { AerialFaunaCreationSystem } from './systems/fauna/AerialFaunaCreationSystem';\nimport { AerialFaunaMovementSystem } from './systems/fauna/AerialFaunaMovementSystem';\nimport { AmbientSoundCreationSystem } from './systems/audio/AmbientSoundCreationSystem';\nimport { AssetDatabaseComponent } from './components/AssetDatabaseComponent';\nimport { AssetLoadingSystem } from './systems/assets/AssetLoadingSystem';\nimport { AudioSystem } from './systems/audio/AudioSystem';\nimport { BootstrapSessionSystem } from './systems/core/BootstrapSessionSystem';\nimport { CameraHandContextualNUXSystem } from './systems/hands/CameraHandContextualNUXSystem';\nimport { CameraPhotoGrabTooltipSystem } from './systems/ui/progressiveTooltips/CameraPhotoGrabTooltipSystem';\nimport { CollisionAreaSystem } from './systems/collisions/CollisionAreaSystems';\nimport { CollisionWorldSystem } from './systems/collisions/CollisionSystem';\nimport { ControlsPanelSystem } from './systems/settings/ControlsPanelSystem';\nimport { DEBUG_CONSTANTS } from './Constants';\nimport { DebugClearFlagsSystem } from './systems/landing-page/DebugClearFlagsSystem';\nimport { EnterVRTransitionSystem } from './systems/locomotion/EnterVRTransitionSystem';\nimport { FaunaAnimationComponent } from './components/FaunaAnimationComponent';\nimport { FaunaAnimationSystem } from './systems/fauna/FaunaAnimationSystem';\nimport { FaunaClusterComponent } from './components/FaunaClusterComponent';\nimport { FaunaColliderComponent } from './components/FaunaColliderComponent';\nimport { FaunaCreationSystem } from './systems/fauna/FaunaCreationSystem';\nimport { FaunaMovementBoundSamplerSystem } from './devTools/FaunaMovementBoundSamplerSystem';\nimport { GameStateComponent } from './components/GameStateComponent';\nimport { GameStateUpdateSystem } from './systems/core/GameStateUpdateSystem';\nimport { GardenManagementSystem } from './systems/landing-page/GardenManagementSystem';\nimport { GazeFollowSystem } from './systems/ui/GazeFollowSystem';\nimport { GazeFollowerComponent } from './components/GazeFollowerComponent';\nimport { HandAnimationSystem } from './systems/hands/HandAnimationSystem';\nimport { HandCreationSystem } from './systems/hands/HandCreationSystem';\nimport { HandNUXSystem } from './systems/hands/HandNUXSystem';\nimport { HandPoseExtractionSystem } from './devTools/HandPoseExtractorSystem';\nimport { IndicatorRingComponent } from './components/IndicatorRingComponent';\nimport { IndicatorRingSystem } from './systems/ui/IndicatorRingSystem';\nimport { JoystickMovementSystem } from './systems/locomotion/JoystickMovementSystem';\nimport { LoadingScreenComponent } from './components/LoadingScreenComponent';\nimport { LoadingScreenSystem } from './systems/landing-page/LoadingScreenSystem';\nimport { LocalSaveDataSystem } from './systems/saveLoad/SaveDataSystem';\nimport { LocomotionVignetteSystem } from './systems/locomotion/LocomotionVignetteSystem';\nimport { MeshIdComponent } from './components/AssetReplacementComponents';\nimport { MeshInstancingSystem } from './systems/mesh/MeshInstancingSystem';\nimport { MeshPreviewObject } from './components/MeshPreviewObjectComponent';\nimport { ModelOptimizeSystem } from './systems/mesh/ModelOptimizeSystem';\nimport { MorphTargetAnimationSystem } from './systems/fauna/MorphTargetAnimationSystem';\nimport { MovableFaunaComponent } from './components/MovableFaunaComponent';\nimport { MovableFaunaSystem } from './systems/fauna/MovableFaunaSystem';\nimport { MusicSystem } from './systems/audio/MusicSystem';\nimport { NUXCreationSystem } from './systems/ui/NUXCreationSystem';\nimport { NUXSystem } from './systems/ui/NUXSystem';\nimport { Object3DComponent } from './components/Object3DComponent';\nimport { ObjectFollowSystem } from './systems/ui/ObjectFollowSystem';\nimport { ObjectFollowerComponent } from './components/ObjectFollowerComponent';\nimport { OptimizedModelComponent } from './components/OptimizedModelComponent';\nimport { PerformanceOptionsComponent } from './components/PerformanceOptionsComponent';\nimport { PerformanceTestSystem } from './systems/performance/PerformanceTestSystem';\nimport { PhotoAutoDeleteSystem } from './systems/camera/PhotoAutoDeleteSystem';\nimport { PhotoMenuCreationSystem } from './systems/camera/PhotoMenuCreationSystem';\nimport { PhotoSystem } from './systems/camera/PhotoSystem';\nimport { PlantColliderSystem } from './systems/plants/PlantColliderSystem';\nimport { PlantGrowingSystem } from './systems/plants/PlantGrowingSystem';\nimport { PlantPickingSystem } from './systems/plants/PlantPickingSystem';\nimport { PlantShrinkingSystem } from './systems/plants/PlantShrinkingSystem';\nimport { PlantingArrowSystem } from './systems/plants/PlantingArrowSystem';\nimport { PlantingSystem } from './systems/plants/PlantingSystem';\nimport { PlayerPhysicsSystem } from './systems/core/PlayerPhysicsSystem';\nimport { PlaylistAudioSystem } from './systems/audio/PlaylistAudioSystem';\nimport { PropsCalibrationSystem } from './devTools/PropsCalibrationSystem';\nimport { RayDrawingSystem } from './systems/raycasting/RayDrawingSystem';\nimport { RaycastSystem } from './systems/raycasting/RaycastSystem';\nimport { RenderingSystem } from './systems/core/RenderingSystem';\nimport { ResetNUXSystem } from './systems/ui/ResetNUXSystem';\nimport { SavableObject } from './components/SaveDataComponents';\nimport { SaveControllerSystem } from './systems/saveLoad/SaveControllerSystem';\nimport { SceneCreationSystem } from './systems/core/SceneCreationSystem';\nimport { SceneLightingComponent } from './components/SceneLightingComponent';\nimport { ScreenshotCameraCreationSystem } from './systems/camera/ScreenshotCameraCreationSystem';\nimport { ScreenshotCameraSystem } from './systems/camera/ScreenshotCameraSystem';\nimport { SeedAnimationSystem } from './systems/plants/SeedAnimationSystem';\nimport { SeedboxChangePageTooltipSystem } from './systems/ui/progressiveTooltips/SeedboxChangePageTooltipSystem';\nimport { SeedboxCreationSystem } from './systems/seedbox/SeedboxCreationSystem';\nimport { SeedboxFocusDetectionSystem } from './systems/seedbox/SeedboxFocusDetectionSystem';\nimport { SeedboxHandContextualNUXSystem } from './systems/hands/SeedboxHandContextualNUXSystem';\nimport { SeedboxSystem } from './systems/seedbox/SeedboxSystem';\nimport { SelectionWheelComponent } from './components/SelectionWheelComponent';\nimport { SelectionWheelCreationSystem } from './systems/selectionWheels/SelectionWheelCreationSystem';\nimport { SelectionWheelSystem } from './systems/selectionWheels/SelectionWheelSystem';\nimport { SessionComponent } from './components/SessionComponent';\nimport { SettingsCreationSystem } from './systems/settings/SettingsCreationSystem';\nimport { SettingsSystem } from './systems/settings/SettingsSystem';\nimport { SkeletonAnimationComponent } from './components/SkeletonAnimationComponent';\nimport { SnapTurnSystem } from './systems/locomotion/SnapTurnSystem';\nimport { StationaryFaunaComponent } from './components/StationaryFaunaComponent';\nimport { StationaryFaunaSystem } from './systems/fauna/StationaryFaunaSystem';\nimport { THREEGlobalComponent } from './components/THREEGlobalComponent';\nimport { TeleportationSystem } from './systems/locomotion/TeleportationSystem';\nimport { UIPanelInteractionSystem } from './systems/ui/UIPanelInteractionSystem';\nimport { UIPanelMediaSystem } from './systems/ui/UIPanelMediaSystem';\nimport { UIPanelPreviewSystem } from './systems/ui/UIPanelPreviewSystem';\nimport { UIPanelResourcesSystem } from './systems/ui/UIPanelResourcesSystem';\nimport { UserIdentityComponent } from './components/UserIdentityComponent';\nimport { VrControllerComponent } from './components/VrControllerComponent';\nimport { VrInputSystem } from './systems/core/VrInputSystem';\nimport { WaterFaunaCreationSystem } from './systems/fauna/WaterFaunaCreationSystem';\nimport { WaterFaunaMovementSystem } from './systems/fauna/WaterFaunaMovementSystem';\nimport { WateringSystem } from './systems/plants/WateringSystem';\nimport { World } from 'ecsy';\n\nconst ENABLE_HAND_POSER = false;\n\nexport const setupECSY = () => {\n\tlet world = new World();\n\n\tregisterTagComponents(world);\n\n\tregisterComponents(world);\n\n\tregisterSystems(world);\n\n\treturn world;\n};\n\n\nconst registerTagComponents = (world) => {\n\tworld.registerComponent(Light);\n\tworld.registerComponent(Hovered);\n\tworld.registerComponent(Pressed);\n\tworld.registerComponent(IsActive);\n\tworld.registerComponent(StraightRay);\n\tworld.registerComponent(ShortRay);\n\tworld.registerComponent(CurvedRay);\n\tworld.registerComponent(MainEnvironment);\n\tworld.registerComponent(EnvironmentProp);\n\tworld.registerComponent(MorphTargetMeshInitialized);\n};\n\n\nconst registerComponents = (world) => {\n\tworld.registerComponent(VrControllerComponent);\n\tworld.registerComponent(Object3DComponent);\n\tworld.registerComponent(GameStateComponent);\n\tworld.registerComponent(PlayerStateComponent);\n\tworld.registerComponent(OptimizedModelComponent);\n\tworld.registerComponent(PerformanceOptionsComponent);\n\tworld.registerComponent(THREEGlobalComponent);\n\tworld.registerComponent(SeedComponent);\n\tworld.registerComponent(CollisionWorldComponent);\n\tworld.registerComponent(StaticColliderComponent);\n\tworld.registerComponent(StaticColliderResources);\n\tworld.registerComponent(CapsuleColliderComponent);\n\tworld.registerComponent(PlayerColliderComponent);\n\tworld.registerComponent(SeedboxComponent);\n\tworld.registerComponent(SeedboxButtonComponent);\n\tworld.registerComponent(GazeFollowerComponent);\n\tworld.registerComponent(ObjectFollowerComponent);\n\tworld.registerComponent(UIPanelComponent);\n\tworld.registerComponent(UIPanelResources);\n\tworld.registerComponent(UIPanelMedia);\n\tworld.registerComponent(NUXStateComponent);\n\tworld.registerComponent(NUXPanelComponent);\n\tworld.registerComponent(RayComponent);\n\tworld.registerComponent(IndicatorRingComponent);\n\tworld.registerComponent(PlantedComponent);\n\tworld.registerComponent(PickedPlantComponent);\n\tworld.registerComponent(SavableObject);\n\tworld.registerComponent(CollisionAreaComponent);\n\tworld.registerComponent(NUXMovementTriggerArea);\n\tworld.registerComponent(ScreenshotCameraComponent);\n\tworld.registerComponent(PhotoComponent);\n\tworld.registerComponent(PhotoMenuComponent);\n\tworld.registerComponent(AssetDatabaseComponent);\n\tworld.registerComponent(MeshIdComponent);\n\tworld.registerComponent(SelectionWheelComponent);\n\tworld.registerComponent(OneshotAudioComponent);\n\tworld.registerComponent(PlantGrowingComponent);\n\tworld.registerComponent(PlantShrinkingComponent);\n\tworld.registerComponent(PlantingStateComponent);\n\tworld.registerComponent(LoopingAudioComponent);\n\tworld.registerComponent(LoopingAudioResources);\n\tworld.registerComponent(PlaylistAudioComponent);\n\tworld.registerComponent(PlaylistAudioResources);\n\tworld.registerComponent(PlantTinyColliderComponent);\n\tworld.registerComponent(SeedAnimationComponent);\n\tworld.registerComponent(SeedbagComponent);\n\tworld.registerComponent(InstancedMeshComponent);\n\tworld.registerComponent(InstancedMeshInstanceComponent);\n\tworld.registerComponent(FaunaClusterComponent);\n\tworld.registerComponent(FaunaColliderComponent);\n\tworld.registerComponent(FaunaAnimationComponent);\n\tworld.registerComponent(MorphTargetAnimationComponent);\n\tworld.registerComponent(SkeletonAnimationComponent);\n\tworld.registerComponent(MovableFaunaComponent);\n\tworld.registerComponent(StationaryFaunaComponent);\n\tworld.registerComponent(MeshPreviewObject);\n\tworld.registerComponent(SceneLightingComponent, false);\n\tworld.registerComponent(LoadingScreenComponent);\n\tworld.registerComponent(UserIdentityComponent);\n\tworld.registerComponent(WaterFaunaMovementComponent);\n\tworld.registerComponent(WaterFaunaGroupComponent);\n\tworld.registerComponent(SettingsPanelComponent);\n\tworld.registerComponent(ControlsPanelComponent);\n\tworld.registerComponent(SettingsComponent);\n\tworld.registerComponent(AerialFaunaMovementComponent);\n\tworld.registerComponent(AerialFaunaGroupComponent);\n\tworld.registerComponent(SessionComponent);\n};\n\n\nconst registerSystems = (world) => {\n\tworld.registerSystem(GardenManagementSystem);\n\n\n\tworld.registerSystem(AssetLoadingSystem, { priority: -10 });\n\n\n\tworld.registerSystem(LoadingScreenSystem, { priority: -9 });\n\n\n\tworld.registerSystem(DebugClearFlagsSystem);\n\tworld.registerSystem(ResetNUXSystem);\n\n\n\tworld.registerSystem(RenderingSystem, { priority: 99 });\n};\n\n\nexport const registerSystemsAfterLoad = (world) => {\n\n\n\tworld.registerSystem(SceneCreationSystem, { priority: -2 });\n\n\n\n\tworld.registerSystem(ModelOptimizeSystem, { priority: -1 });\n\tworld.registerSystem(BootstrapSessionSystem);\n\n\n\tworld.registerSystem(UIPanelResourcesSystem);\n\tworld.registerSystem(UIPanelInteractionSystem);\n\tworld.registerSystem(UIPanelMediaSystem);\n\n\tworld.registerSystem(HandCreationSystem);\n\tworld.registerSystem(EnterVRTransitionSystem);\n\tworld.registerSystem(ScreenshotCameraCreationSystem);\n\tworld.registerSystem(PhotoMenuCreationSystem);\n\tworld.registerSystem(SelectionWheelCreationSystem);\n\tworld.registerSystem(SeedboxCreationSystem);\n\tworld.registerSystem(CollisionWorldSystem);\n\tworld.registerSystem(CollisionAreaSystem);\n\tworld.registerSystem(VrInputSystem);\n\tworld.registerSystem(HandAnimationSystem);\n\n\tworld.registerSystem(PlayerPhysicsSystem);\n\tworld.registerSystem(WateringSystem);\n\n\n\n\n\tworld.registerSystem(RaycastSystem);\n\n\n\n\tworld.registerSystem(GameStateUpdateSystem);\n\tworld.registerSystem(SelectionWheelSystem);\n\tworld.registerSystem(IndicatorRingSystem);\n\tworld.registerSystem(SnapTurnSystem);\n\tworld.registerSystem(TeleportationSystem);\n\tworld.registerSystem(HandNUXSystem);\n\tworld.registerSystem(SeedboxHandContextualNUXSystem);\n\tworld.registerSystem(CameraHandContextualNUXSystem);\n\tworld.registerSystem(JoystickMovementSystem);\n\tif (ENABLE_HAND_POSER) {\n\n\t\tworld.registerSystem(HandPoseExtractionSystem);\n\t}\n\n\tworld.registerSystem(GazeFollowSystem);\n\tworld.registerSystem(ObjectFollowSystem);\n\tworld.registerSystem(NUXCreationSystem);\n\tworld.registerSystem(SettingsCreationSystem);\n\n\tworld.registerSystem(SettingsSystem);\n\tworld.registerSystem(ControlsPanelSystem);\n\n\n\n\tworld.registerSystem(ScreenshotCameraSystem);\n\tworld.registerSystem(PhotoSystem);\n\tworld.registerSystem(PhotoAutoDeleteSystem);\n\tworld.registerSystem(PlantPickingSystem);\n\tworld.registerSystem(SeedboxFocusDetectionSystem);\n\tworld.registerSystem(SeedboxSystem);\n\tworld.registerSystem(PlantingSystem);\n\tworld.registerSystem(PlantingArrowSystem);\n\tworld.registerSystem(SeedAnimationSystem);\n\tworld.registerSystem(PlantGrowingSystem);\n\tworld.registerSystem(PlantShrinkingSystem);\n\tworld.registerSystem(PlantColliderSystem);\n\tworld.registerSystem(SaveControllerSystem);\n\tworld.registerSystem(RayDrawingSystem);\n\tworld.registerSystem(LocalSaveDataSystem);\n\tworld.registerSystem(WaterFaunaCreationSystem);\n\tworld.registerSystem(WaterFaunaMovementSystem);\n\tworld.registerSystem(AerialFaunaCreationSystem);\n\tworld.registerSystem(AerialFaunaMovementSystem);\n\tworld.registerSystem(FaunaAnimationSystem);\n\tworld.registerSystem(FaunaCreationSystem);\n\tworld.registerSystem(MovableFaunaSystem);\n\tworld.registerSystem(FaunaMovementBoundSamplerSystem);\n\tworld.registerSystem(StationaryFaunaSystem);\n\tworld.registerSystem(MorphTargetAnimationSystem);\n\tworld.registerSystem(PerformanceTestSystem);\n\tworld.registerSystem(LocomotionVignetteSystem);\n\tif (ENABLE_HAND_POSER) {\n\t\tworld.registerSystem(PropsCalibrationSystem);\n\t}\n\n\tworld.registerSystem(MeshInstancingSystem);\n};\n\n\nexport const registerSystemsAfterReady = (world) => {\n\n\n\n\tworld.registerSystem(AudioSystem);\n\n\tworld.registerSystem(AmbientSoundCreationSystem);\n\tworld.registerSystem(MusicSystem);\n\tworld.registerSystem(PlaylistAudioSystem);\n\n\n\n\tworld.registerSystem(NUXSystem);\n\n\tworld.registerSystem(SeedboxChangePageTooltipSystem);\n\tworld.registerSystem(CameraPhotoGrabTooltipSystem);\n\n\tif (DEBUG_CONSTANTS.ENABLE_UI_PREVIEW_SYSTEM) {\n\t\tworld.registerSystem(UIPanelPreviewSystem);\n\t}\n};\n\n'ProjectFlowerbed/src/js/devTools/HandPoseExtractorSystem.js'\n:\n\nimport * as THREE from 'three';\n\nimport { InteractionSystem } from '../lib/InteractionSystem';\nimport { MeshIdComponent } from '../components/AssetReplacementComponents';\nimport { Object3DComponent } from '../components/Object3DComponent';\n\nconst ANIMATION_TRACK_POSE_MAPPING = {\n\tEMPTY: {\n\t\tDEFAULT: 'EMPTY_DEFAULT',\n\t\tPRESSED: 'EMPTY_PRESSED',\n\t},\n\tWATERING: {\n\t\tDEFAULT: 'WATERING_DEFAULT',\n\t},\n\tCAMERA: {\n\t\tDEFAULT: 'CAMERA_DEFAULT',\n\t\tPRESSED: 'CAMERA_PRESSED',\n\t},\n\tPLANTING: {\n\t\tDEFAULT: 'SEEDBAG_DEFAULT',\n\t},\n\tGRABBING: {\n\t\tDEFAULT: 'EMPTY_DEFAULT',\n\t\tPRESSED: 'Hold_CameraPhoto',\n\t},\n\tSEEDBOX: {\n\t\tDEFAULT: 'SEEDBOX_DEFAULT',\n\t\tPRESSED: 'SEEDBOX_PRESSED',\n\t},\n};\n\nexport class HandPoseExtractionSystem extends InteractionSystem {\n\tinit() {\n\t\tthis.handEntity = this.world.createEntity();\n\t\tthis.handEntity.addComponent(MeshIdComponent, { id: 'HAND_REST_LEFT' });\n\t\tthis.handEntity.addComponent(Object3DComponent, {\n\t\t\tvalue: new THREE.Object3D(),\n\t\t});\n\n\t\twindow.addEventListener(\n\t\t\t'keydown',\n\t\t\t(event) => {\n\t\t\t\tswitch (event.code) {\n\t\t\t\t\tcase 'KeyP':\n\t\t\t\t\t\tconsole.log(this._extractPoses());\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t},\n\t\t\ttrue,\n\t\t);\n\t}\n\n\t_extractPoses() {\n\t\tconst mesh = this.handEntity.getComponent(Object3DComponent).value;\n\t\tconst clips = mesh.animations;\n\t\tconst bonesData = {};\n\t\tObject.entries(ANIMATION_TRACK_POSE_MAPPING).forEach(([mode, states]) => {\n\t\t\tconst bones = {\n\t\t\t\tTHUMB: {},\n\t\t\t\tINDEX: {},\n\t\t\t\tHAND: {},\n\t\t\t};\n\t\t\tObject.entries(states).forEach(([state, clipName]) => {\n\t\t\t\tconst clip = THREE.AnimationClip.findByName(clips, clipName);\n\n\t\t\t\tclip.tracks.forEach((track) => {\n\t\t\t\t\tconst [boneName, valueType] = track.name.split('.');\n\t\t\t\t\tif (valueType == 'quaternion') {\n\t\t\t\t\t\tif (boneName.includes('Thumb')) {\n\t\t\t\t\t\t\tif (!bones.THUMB[boneName]) {\n\t\t\t\t\t\t\t\tbones.THUMB[boneName] = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbones.THUMB[boneName][state] = [...track.values];\n\t\t\t\t\t\t} else if (boneName.includes('Index')) {\n\t\t\t\t\t\t\tif (!bones.INDEX[boneName]) {\n\t\t\t\t\t\t\t\tbones.INDEX[boneName] = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbones.INDEX[boneName][state] = [...track.values];\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\tboneName.includes('Middle') ||\n\t\t\t\t\t\t\tboneName.includes('Ring') ||\n\t\t\t\t\t\t\tboneName.includes('Pinky')\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (!bones.HAND[boneName]) {\n\t\t\t\t\t\t\t\tbones.HAND[boneName] = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbones.HAND[boneName][state] = [...track.values];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tbonesData[mode] = bones;\n\t\t});\n\n\t\tconsole.log(JSON.stringify(bonesData));\n\t}\n\n\tonExecute() {}\n}\n",
        "gt": [
            "'ProjectFlowerbed/src/js/devTools/HandPoseExtractorSystem.js'",
            "'ProjectFlowerbed/src/js/ECSYConfig.js'",
            "'ProjectFlowerbed/src/js/systems/assets/AssetLoadingSystem.js'"
        ]
    },
    {
        "files": [
            "'neode/test/Services/MergeOn.spec.js'",
            "'neode/src/Node.js'",
            "'neode/src/Services/RelateTo.js'"
        ],
        "content": "'neode/test/Services/MergeOn.spec.js'\n:\nimport {assert, expect} from 'chai';\nimport MergeOn from '../../src/Services/MergeOn';\nimport Node from '../../src/Node';\n\nconst TIMEOUT = 10000;\n\ndescribe('Services/MergeOn.js', () => {\n    let instance;\n    let model;\n\n    const label = 'MergeOnTest';\n    const schema = {\n        uuid: {\n            type: 'uuid',\n            primary: true,\n        },\n        name: {\n            type: 'string',\n            min: 3,\n        },\n        age: 'integer',\n        boolean: 'boolean',\n\n        relationship: {\n            type: 'relationship',\n            relationship: 'RELATIONSHIP',\n            target: label,\n            direction: 'out',\n            properties: {},\n            eager: true,\n            alias: 'otherEnd',\n            properties: {\n                since: {\n                    type: 'int',\n                    default: Date.now\n                }\n            },\n        },\n        thenTo: {\n            type: 'relationship',\n            relationship: 'THEN_TO',\n            target: label,\n            direction: 'out',\n            properties: {},\n            eager: true,\n            alias: 'leaf',\n            properties: {\n                since: {\n                    type: 'int',\n                    default: Date.now\n                }\n            },\n        },\n\n        relationships: {\n            type: 'relationships',\n            relationship: 'RELATIONSHIP',\n            target: label,\n            eager: true,\n            direction: 'out',\n            alias: 'otherEnd',\n            properties: {\n                since: {\n                    type: 'int',\n                    default: Date.now\n                }\n            },\n        },\n        node: {\n            type: 'node',\n            relationship: 'RELATIONSHIP',\n            target: label,\n            direction: 'out',\n            eager: true,\n        },\n        nodes: {\n            type: 'nodes',\n            relationship: 'RELATIONSHIP',\n            target: label,\n            direction: 'out',\n            eager: true,\n        },\n\n        relationshipToAnything: {\n            type: 'node',\n            relationship: 'RELATIONSHIP',\n            direction: 'out',\n        },\n        ambiguousRelationship: {\n            type: 'node',\n            relationship: 'AMBIGUOUS_RELATIONSHIP',\n            direction: 'out',\n            target: [ label, 'Person', 'Thing' ],\n        }\n    };\n    const merge_on = ['name'];\n\n    before(() => {\n        instance = require('../instance')();\n        model = instance.model(label, schema);\n    });\n\n    after(done => {\n        instance.deleteAll(label)\n            .then(() => {\n                return instance.close()\n            })\n            .then(() => done());\n    });\n\n    describe('::MergeOn', () => {\n        describe('Properties', () => {\n            it('should throw an error when no merge fields are present', done => {\n                MergeOn(instance, model, merge_on, {})\n                    .then(() => {\n                        assert(false, 'Error should be thrown');\n                    })\n                    .catch(e => {\n                        assert(true);\n\n                        done();\n                    });\n            }).timeout(TIMEOUT);\n\n            it('should perform validation', done => {\n                MergeOn(instance, model, merge_on, {name: 'al'})\n                    .then(() => {\n                        assert(false, 'Error should be thrown');\n                    })\n                    .catch(e => {\n                        expect(e.details).to.be.instanceOf(Array);\n                        expect(e.details[0].path[0]).to.equal('name');\n                    })\n                    .then(() => done());\n            }).timeout(TIMEOUT);\n\n            it('should merge and generate default values', done => {\n                const data = {\n                    name: 'Adam',\n                    age: 30,\n                    boolean: false,\n                };\n\n                MergeOn(instance, model, merge_on, data)\n                    .then(res => {\n                        expect(res).to.be.an.instanceOf(Node);\n\n                        expect( res.get('name') ).to.equal(data.name);\n                        expect( res.get('age').toInt()) .to.equal(data.age);\n                        expect( res.get('boolean')) .to.equal(data.boolean);\n\n                        assert( res.get('uuid').match(/^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i) )\n                    })\n                    .then(() => done())\n                    .catch(e => done(e));\n            }).timeout(TIMEOUT);\n\n            it('should not attempt to overwrite a primary key ', done => {\n                const name = 'Keep my primary key';\n\n                MergeOn(instance, model, merge_on, { name })\n                    .then(first => {\n                        return MergeOn(instance, model, merge_on, { name })\n                            .then(second => [ first, second ])\n                    })\n                    .then(( [first, second] ) => {\n                        expect( first.id() ).to.equal( second.id() );\n                    })\n                    .then(() => done())\n                    .catch(e => done(e));\n            }).timeout(TIMEOUT);\n        });\n\n        describe('-> node', () => {\n            it('should create a relationship to a Node instance', done => {\n                const name = 'End';\n\n                MergeOn(instance, model, merge_on, { name })\n                    .then(end_node => {\n                        return MergeOn(instance, model, merge_on, {\n                            name: 'Start',\n                            node: end_node\n                        })\n                            .then(res => {\n                                expect( res.get('name') ).to.equal('Start');\n                                expect( res.get('node').get('name') ).to.equal(name)\n                            })\n                            .then(() => done())\n                            .catch(e => done(e));\n                    })\n            }).timeout(TIMEOUT);\n\n            it('should create a relationship to a single node by its primary key', done => {\n                const name = 'End node 2';\n\n                MergeOn(instance, model, merge_on, { name })\n                    .then(end_node => {\n                        return MergeOn(instance, model, merge_on, {\n                            name: 'Start node 2',\n                            node: end_node.get('uuid'),\n                        })\n                        .then(res => {\n                            expect( res.get('name') ).to.equal('Start node 2');\n                            expect( res.get('node').get('name') ).to.equal(name)\n                        })\n                        .then(() => done())\n                        .catch(e => done(e));\n                    });\n            }).timeout(TIMEOUT);\n\n            it('should recursively create nodes', done => {\n                const data = {\n                    name: 'Start node 3',\n                    node: {\n                        name: 'End node 3',\n                    },\n                };\n\n                MergeOn(instance, model, merge_on, data)\n                    .then(res => {\n                        expect( res.get('name') ).to.equal('Start node 3');\n                        expect( res.get('node').get('name') ).to.equal('End node 3')\n                    })\n                    .then(() => done())\n                    .catch(e => done(e));\n            }).timeout(TIMEOUT);\n\n            it('should throw an error when you try to create a relationship to an ambiguous node', done => {\n                const data = {\n                    name: 'Start',\n                    relationshipToAnything: {\n                        name: 'End',\n                    },\n                };\n\n                MergeOn(instance, model, merge_on, data)\n                    .then(res => {\n                        assert(false, 'Should throw an exception')\n                    })\n                    .catch(e => {\n                        const expected = 'A target defintion must be defined for relationshipToAnything on model MergeOnTest';\n                        expect( e.message ).to.equal(expected);\n                    })\n                    .then(() => done())\n                    .catch(e => done(e));\n            });\n        });\n\n        describe('-> nodes', () => {\n            it('should create relationships to an array of Node instances', done => {\n                const name = 'End';\n\n                MergeOn(instance, model, merge_on, { name })\n                    .then(end_node => {\n                        return MergeOn(instance, model, merge_on, {\n                            name: 'Start',\n                            nodes: [end_node]\n                        })\n                            .then(res => {\n                                expect( res.get('name') ).to.equal('Start');\n                                expect( res.get('nodes').first().get('name') ).to.equal(name);\n                            })\n                            .then(() => done())\n                            .catch(e => done(e));\n                    });\n            }).timeout(TIMEOUT);\n\n            it('should create a relationship to an array of nodes by their primary key', done => {\n                const name = 'End';\n\n                MergeOn(instance, model, merge_on, { name })\n                    .then(end_node => {\n                        return MergeOn(instance, model, merge_on, {\n                            name: 'Start',\n                            nodes: [end_node.get('uuid')],\n                        })\n                            .then(res => {\n                                expect( res.get('name') ).to.equal('Start');\n                                expect( res.get('nodes').first().get('name') ).to.equal(name)\n                            })\n                            .then(() => done())\n                            .catch(e => done(e));\n                    });\n            }).timeout(TIMEOUT);\n\n            it('should recursively merge nodes', done => {\n                const data = {\n                    name: 'Start',\n                    nodes: [{\n                        name: 'End',\n                    }],\n                };\n\n                MergeOn(instance, model, merge_on, data)\n                    .then(res => {\n                        expect( res.get('name') ).to.equal('Start');\n                        expect( res.get('nodes').first().get('name') ).to.equal('End')\n                    })\n                    .then(() => done())\n                    .catch(e => done(e));\n            }).timeout(TIMEOUT);\n\n            it('should recursively merge nodes to multiple degrees', done => {\n                const data = {\n                    name: 'Start',\n                    nodes: [{\n                        name: 'Middle',\n                        nodes: {\n                            name: 'End',\n                        },\n                    }],\n                };\n\n                MergeOn(instance, model, merge_on, data)\n                    .then(res => {\n                        expect( res.get('name') ).to.equal('Start');\n                        expect( res.get('nodes').first().get('name') ).to.equal('Middle');\n                        expect( res.get('nodes').first().get('nodes').first().get('name') ).to.equal('End');\n                    })\n                    .then(() => done())\n                    .catch(e => done(e));\n            }).timeout(TIMEOUT);\n        });\n\n        describe('-> relationship', () => {\n            it('should create a relationship to a Node instance', done => {\n                const name = 'End';\n\n                MergeOn(instance, model, merge_on, { name })\n                    .then(end_node => {\n                        return MergeOn(instance, model, merge_on, {\n                            name: 'Start',\n                            relationship: {\n                                since: 100,\n                                otherEnd: end_node,\n                            },\n                        })\n                            .then(res => {\n                                expect( res.get('name') ).to.equal('Start');\n                                expect( res.get('relationship').get('since') ).to.equal(100);\n                                expect( res.get('relationship').otherNode().get('name') ).to.equal(name)\n                            })\n                            .then(() => done())\n                            .catch(e => done(e));\n                    })\n            }).timeout(TIMEOUT);\n\n            it('should create a relationship to a single node by its primary key', done => {\n                const name = 'End';\n\n                MergeOn(instance, model, merge_on, { name })\n                    .then(end_node => {\n                        return MergeOn(instance, model, merge_on, {\n                            name: 'Start',\n                            relationship: {\n                                since: 200,\n                                otherEnd: end_node.get('uuid'),\n                            },\n                        })\n                            .then(res => {\n                                expect( res.get('name') ).to.equal('Start');\n                                expect( res.get('relationship').get('since') ).to.equal(200);\n                                expect( res.get('relationship').otherNode().get('name') ).to.equal(name)\n                            })\n                            .then(() => done())\n                            .catch(e => done(e));\n                    });\n            }).timeout(TIMEOUT);\n\n            it('should recursively create nodes', done => {\n                const data = {\n                    name: 'Never',\n                    relationship: {\n                        since: 300,\n                        otherEnd: {\n                            name: 'gonna',\n                            relationship: {\n                                since: 400,\n                                otherEnd: {\n                                    name: 'give',\n                                    thenTo: {\n                                        since: 500,\n                                        leaf: {\n                                            name: 'you up'\n                                        },\n                                    },\n                                },\n                            },\n                        },\n                    },\n                };\n\n                MergeOn(instance, model, merge_on, data)\n                    .then(never => {\n                        const gonna = never.get('relationship').otherNode();\n                        const give = never.get('relationship').otherNode().get('relationship').otherNode();\n\n                        expect( never.get('name') ).to.equal('Never');\n                        expect( never.get('relationship').get('since') ).to.equal(300);\n                        expect( gonna.get('name') ).to.equal('gonna');\n                        expect( gonna.get('relationship').get('since') ).to.equal(400);\n                        expect( give.get('name') ).to.equal('give');\n                    })\n                    .then(() => done())\n                    .catch(e => done(e));\n            }).timeout(TIMEOUT);\n\n            it('should throw an error when trying to create a relationship with ambiguous targets', done => {\n                const data = {\n                    name: 'Start',\n                    ambiguousRelationship: {\n                        node: {\n                            name: 'End',\n                        },\n                    },\n                };\n\n                MergeOn(instance, model, merge_on, data)\n                    .then(res => {\n                        assert(false, 'Should throw an exception')\n                    })\n                    .catch(e => {\n                        const expected = 'You cannot create a node with the ambiguous relationship: ambiguousRelationship on model MergeOnTest';\n                        expect( e.message ).to.equal(expected);\n                    })\n                    .then(() => done())\n                    .catch(e => done(e));\n            });\n        });\n\n        describe('-> relationships', () => {\n            it('should create relationships to an array of Node instances', done => {\n                const name = 'Rel End 1';\n\n                MergeOn(instance, model, merge_on, { name })\n                    .then(end_node => {\n                        return MergeOn(instance, model, merge_on, {\n                            name: 'Rel Start 1',\n                            relationships: [{\n                                since: 100,\n                                otherEnd: end_node\n                            }]\n                        })\n                        .then(res => {\n                            expect( res.get('name') ).to.equal('Rel Start 1');\n                            expect( res.get('relationships').first().get('since') ).to.equal(100);\n                            expect( res.get('relationships').first().otherNode().get('name') ).to.equal(name);\n                        })\n                        .then(() => done())\n                        .catch(e => done(e));\n                    })\n            }).timeout(TIMEOUT);\n\n            it('should create a relationship to a single node by its primary key', done => {\n                const name = 'Rel End 2';\n\n                MergeOn(instance, model, merge_on, { name })\n                    .then(end_node => {\n                        return MergeOn(instance, model, merge_on, {\n                            name: 'Rel Start 2',\n                            relationship: {\n                                since: 100,\n                                otherEnd: end_node.get('uuid'),\n                            },\n                        })\n                        .then(res => {\n                            expect( res.get('name') ).to.equal('Rel Start 2');\n                            expect( res.get('relationships').first().get('since') ).to.equal(100);\n                            expect( res.get('relationships').first().otherNode().get('name') ).to.equal(name);\n                        })\n                        .then(() => done())\n                        .catch(e => done(e));\n                    });\n            }).timeout(TIMEOUT);\n\n            it('should recursively create nodes', done => {\n                const data = {\n                    name: 'Never',\n                    relationships: [{\n                        since: 300,\n                        otherEnd: {\n                            name: 'gonna',\n                            relationships: [\n                                { since: 100, otherEnd: {name: 'give you up' }},\n                                { since: 200, otherEnd: {name: 'let you down' }},\n                                { since: 300, otherEnd: {name: 'run around and desert you' }},\n                            ],\n                        },\n                    }],\n                };\n\n                MergeOn(instance, model, merge_on, data)\n                    .then(never => {\n                        const gonna = never.get('relationship').otherNode();\n\n                        expect( never.get('name') ).to.equal('Never');\n                        expect( never.get('relationships').first().get('since') ).to.equal(300);\n                        expect( gonna.get('name') ).to.equal('gonna');\n\n                        const what = gonna.get('relationships');\n\n                        expect( what.length ).to.equal(3);\n\n                        return what.toJson()\n                            .then(json => {\n                                const since = json.map(row => row.since);\n\n                                expect(since).to.contain(100);\n                                expect(since).to.contain(200);\n                                expect(since).to.contain(300);\n\n                                expect(since).to.have.members([100, 200, 300]);\n\n                                const things = json.map(row => row.otherEnd.name);\n\n                                expect(things).to.have.members(['let you down', 'give you up', 'run around and desert you']);\n                            });\n                    })\n                    .then(() => done())\n                    .catch(e => done(e));\n            }).timeout(TIMEOUT);\n        });\n    });\n});\n\n'neode/src/Node.js'\n:import neo4j from 'neo4j-driver';\nimport Entity from './Entity';\nimport UpdateNode from './Services/UpdateNode';\nimport DeleteNode from './Services/DeleteNode';\nimport RelateTo from './Services/RelateTo';\nimport DetachFrom from './Services/DetachFrom';\nimport RelationshipType from './RelationshipType';\n\n\nexport default class Node extends Entity {\n\n\n    constructor(neode, model, identity, labels, properties, eager) {\n        super();\n\n        this._neode = neode;\n        this._model = model;\n        this._identity = identity;\n        this._labels = labels;\n        this._properties = properties || new Map;\n\n        this._eager = eager || new Map;\n\n        this._deleted = false;\n    }\n\n\n    model() {\n        return this._model;\n    }\n\n\n    labels() {\n        return this._labels;\n    }\n\n\n    setEager(key, value) {\n        this._eager.set(key, value);\n\n        return this;\n    }\n\n\n    delete(to_depth) {\n        return DeleteNode(this._neode, this._identity, this._model, to_depth)\n            .then(() => {\n                this._deleted = true;\n\n                return this;\n            });\n    }\n\n\n    relateTo(node, type, properties = {}, force_create = false) {\n        const relationship = this._model.relationships().get(type);\n\n        if ( !(relationship instanceof RelationshipType) ) {\n            return Promise.reject( new Error(`Cannot find relationship with type ${type}`) );\n        }\n\n        return RelateTo(this._neode, this, node, relationship, properties, force_create)\n            .then(rel => {\n                this._eager.delete(type);\n\n                return rel;\n            });\n    }\n\n\n    detachFrom(other) {\n        if (!(other instanceof Node)) {\n            return Promise.reject(new Error(`Cannot find node with type ${other}`));\n        }\n\n        return DetachFrom(this._neode, this, other);\n    }\n\n\n    toJson() {\n        const output = {\n            _id: this.id(),\n            _labels: this.labels(),\n        };\n\n\n        this._model.properties().forEach((property, key) => {\n            if ( property.hidden() ) {\n                return;\n            }\n\n            if ( this._properties.has(key) ) {\n                output[ key ] = this.valueToJson(property, this._properties.get( key ));\n            }\n            else if (neo4j.temporal.isDateTime(output[key])) {\n                output[key] = new Date(output[key].toString());\n            }\n            else if (neo4j.spatial.isPoint(output[key])) {\n                switch (output[key].srid.toString()) {\n\n                    case '4326':\n                        output[key] = {longitude: output[key].x, latitude: output[key].y};\n                        break;\n\n                    case '4979':\n                        output[key] = {longitude: output[key].x, latitude: output[key].y, height: output[key].z};\n                        break;\n\n                    case '7203':\n                        output[key] = {x: output[key].x, y: output[key].y};\n                        break;\n\n                    case '9157':\n                        output[key] = {x: output[key].x, y: output[key].y, z: output[key].z};\n                        break;\n                }\n            }\n        });\n\n\n        return Promise.all( this._model.eager().map((rel) => {\n            const key = rel.name();\n\n            if ( this._eager.has( rel.name() ) ) {\n\n                return this._eager.get( rel.name() ).toJson()\n                    .then(value => {\n                        return { key, value };\n                    });\n            }\n        }) )\n\n            .then(eager => eager.filter( e => !!e ))\n\n\n            .then(eager => {\n                eager.forEach(({ key, value }) => output[ key ] = value);\n\n                return output;\n            });\n    }\n\n\n    update(properties) {\n\n\n\n        this._model.properties().forEach(property => {\n            const name = property.name();\n\n            if ( property.required() && !properties.hasOwnProperty(name) ) {\n                properties[ name ] = this._properties.get( name );\n            }\n        });\n\n        return UpdateNode(this._neode, this._model, this._identity, properties)\n            .then(properties => {\n                properties.map(({ key, value }) => {\n                    this._properties.set(key, value)\n                })\n            })\n            .then(() => {\n                return this;\n            });\n    }\n\n}\n'neode/src/Services/RelateTo.js'\n:import {\n    DIRECTION_IN,\n    DIRECTION_OUT\n} from '../RelationshipType';\nimport Relationship from '../Relationship';\n\nimport GenerateDefaultValues from './GenerateDefaultValues';\nimport Validator from './Validator';\n\nexport default function RelateTo(neode, from, to, relationship, properties, force_create = false) {\n    return GenerateDefaultValues(neode, relationship, properties)\n        .then(properties => Validator(neode, relationship.schema(), properties))\n        .then(properties => {\n            const direction_in = relationship.direction() == DIRECTION_IN ? '<' : '';\n            const direction_out = relationship.direction() == DIRECTION_OUT ? '>' : '';\n            const type = relationship.relationship();\n\n            let params = {\n                from_id: from.identity(),\n                to_id: to.identity(),\n            };\n            let set = '';\n\n            if ( Object.keys(properties).length ) {\n                set += 'SET ';\n                set += Object.keys(properties).map(key => {\n                    params[`set_${key}`] = properties[ key ];\n                    return `rel.${key} = $set_${key}`;\n                }).join(', ');\n            }\n\n            const mode = force_create ? 'CREATE' : 'MERGE';\n\n            const query = `\n                MATCH (from), (to)\n                WHERE id(from) = $from_id\n                AND id(to) = $to_id\n                ${mode} (from)${direction_in}-[rel:${type}]-${direction_out}(to)\n                ${set}\n                RETURN rel\n            `;\n\n            return neode.writeCypher(query, params)\n                .then(res => {\n                    const rel = res.records[0].get('rel');\n                    const hydrate_from = relationship.direction() == DIRECTION_IN ? to : from;\n                    const hydrate_to = relationship.direction() == DIRECTION_IN ? from : to;\n\n                    const properties = new Map;\n\n                    Object.keys(rel.properties).forEach(key => {\n                        properties.set( key, rel.properties[ key ] );\n                    });\n\n                    return new Relationship(neode, relationship, rel.identity, rel.type, properties, hydrate_from, hydrate_to);\n                });\n        });\n}",
        "gt": [
            "'neode/src/Services/RelateTo.js'",
            "'neode/src/Node.js'",
            "'neode/test/Services/MergeOn.spec.js'"
        ]
    },
    {
        "files": [
            "'Instagram/components/Item.js'",
            "'Instagram/components/ItemHeader.js'",
            "'Instagram/components/DisableScrolling.js'",
            "'Instagram/components/FeedList.js'"
        ],
        "content": "'Instagram/components/Item.js'\n:import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Animated,\n  Easing,\n  findNodeHandle,\n  PanResponder,\n  UIManager,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nimport DisableBodyScrollingView from './DisableScrolling';\nimport ItemFooter from './ItemFooter';\nimport ItemHeader from './ItemHeader';\nimport ItemImage from './ItemImage';\n\nexport function pow2abs(a, b) {\n  return Math.pow(Math.abs(a - b), 2);\n}\n\nexport function getDistance(touches) {\n  const [a, b] = touches;\n  if (a == null || b == null) {\n    return 0;\n  }\n  return Math.sqrt(pow2abs(a.pageX, b.pageX) + pow2abs(a.pageY, b.pageY));\n}\n\nexport function getPosition(touches) {\n  const [a, b] = touches;\n  if (a == null || b == null) {\n    return { x: 0, y: 0 };\n  }\n  return { x: a.pageX, y: a.pageY };\n}\n\nexport function getDeltaTranslation(position, initial) {\n  return { x: position.x - initial.x, y: position.y - initial.y };\n}\n\nconst SCALE_MULTIPLIER = 1;\n\nexport function getScale(currentDistance, initialDistance) {\n  return (currentDistance / initialDistance) * SCALE_MULTIPLIER;\n}\n\nexport function measureNode(node, parent) {\n  return new Promise((resolve, reject) => {\n    UIManager.measureLayout(\n      node,\n      parent || (node && node.parentNode),\n      e => reject(e),\n      (x, y, w, h, l, t) => {\n        resolve({ x, y, w, h });\n      },\n    );\n  });\n}\nconst RESTORE_ANIMATION_DURATION = 200;\nclass Item extends React.PureComponent {\n  _opacity = new Animated.Value(1);\n  _initialTouches = [];\n\n  static contextTypes = {\n    gesturePosition: PropTypes.object,\n    scaleValue: PropTypes.object,\n    getScrollPosition: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n    this._generatePanHandlers();\n  }\n\n  _generatePanHandlers = () => {\n    this._gestureHandler = PanResponder.create({\n      onStartShouldSetResponderCapture: () => true,\n      onStartShouldSetPanResponderCapture: ({ nativeEvent }) => {\n        return nativeEvent.touches.length === 2;\n      },\n      onMoveShouldSetResponderCapture: () => true,\n      onMoveShouldSetPanResponderCapture: ({ nativeEvent }) => {\n        return nativeEvent.touches.length === 2;\n      },\n      onPanResponderGrant: this._startGesture,\n      onPanResponderMove: this._onGestureMove,\n      onPanResponderRelease: this._onGestureRelease,\n      onPanResponderTerminationRequest: () => {\n        return this._gestureInProgress == null;\n      },\n      onPanResponderTerminate: (event, gestureState) => {\n        return this._onGestureRelease(event, gestureState);\n      },\n    });\n  };\n\n  _startGesture = async (event, gestureState) => {\n\n    if (this._gestureInProgress) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    this._gestureInProgress = gestureState.stateID;\n    let { item, onGestureStart } = this.props;\n    let { gesturePosition, getScrollPosition } = this.context;\n    let { touches } = event.nativeEvent;\n\n    this._initialTouches = touches;\n\n    let selectedPhotoMeasurement = await this._measureSelectedPhoto();\n    this._selectedPhotoMeasurement = selectedPhotoMeasurement;\n    onGestureStart({\n      source: item.source,\n      measurement: selectedPhotoMeasurement,\n    });\n\n    gesturePosition.setValue({\n      x: 0,\n      y: 0,\n    });\n\n    gesturePosition.setOffset({\n      x: 0,\n      y: selectedPhotoMeasurement.y,\n    });\n\n    Animated.timing(this._opacity, {\n      toValue: 0,\n      duration: 200,\n    }).start();\n  };\n\n  _onGestureMove = (event, gestureState) => {\n    let { touches } = event.nativeEvent;\n    if (!this._gestureInProgress) {\n      return;\n    }\n\n    if (touches.length < 2) {\n\n      this._onGestureRelease(event, gestureState);\n      return;\n    }\n\n\n    let { gesturePosition, scaleValue } = this.context;\n    let { dx, dy } = gestureState;\n    let currentPosition = getPosition(touches);\n    let initialPosition = getPosition(this._initialTouches);\n\n    const { x, y } = getDeltaTranslation(currentPosition, initialPosition);\n    gesturePosition.x.setValue(x);\n    gesturePosition.y.setValue(y);\n\n\n    let currentDistance = getDistance(touches);\n    let initialDistance = getDistance(this._initialTouches);\n    let newScale = getScale(currentDistance, initialDistance);\n    scaleValue.setValue(Math.max(newScale, 1));\n  };\n\n  _onGestureRelease = (event, gestureState) => {\n    if (this._gestureInProgress !== gestureState.stateID) {\n      return;\n    }\n\n\n    this._gestureInProgress = null;\n    this._initialTouches = [];\n    let { onGestureRelease } = this.props;\n    let { gesturePosition, scaleValue, getScrollPosition } = this.context;\n\n    Animated.parallel([\n      Animated.timing(gesturePosition.x, {\n        toValue: 0,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n      Animated.timing(gesturePosition.y, {\n        toValue: 0,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n      Animated.timing(scaleValue, {\n        toValue: 1,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n    ]).start(() => {\n      gesturePosition.setOffset({\n        x: 0,\n        y:\n          (this._selectedPhotoMeasurement &&\n            this._selectedPhotoMeasurement.y) ||\n          0 - getScrollPosition(),\n      });\n\n      this._opacity.setValue(1);\n\n      requestAnimationFrame(() => {\n        onGestureRelease();\n      });\n    });\n  };\n\n  _measureSelectedPhoto = async () => {\n    let parent = findNodeHandle(this._parent);\n    let photoComponent = findNodeHandle(this._photoComponent);\n\n    try {\n      const photoMeasurement = await measureNode(photoComponent, parent);\n      const bodyRect = document.body.getBoundingClientRect();\n      const elemRect = photoComponent.getBoundingClientRect();\n      const offset = elemRect.top + window.scrollY;\n\n      return {\n        x: photoMeasurement.x,\n        y: offset,\n        w: photoMeasurement.w,\n        h: photoMeasurement.h,\n      };\n    } catch (error) {\n      console.log('ERROR', error);\n    }\n    return {};\n  };\n\n  render() {\n    const { imageWidth, imageHeight, item, isLarge } = this.props;\n\n    return (\n      <View\n        style={[\n          { backgroundColor: 'white' },\n          isLarge && {\n            borderColor: '#e6e6e6',\n            borderRadius: 3,\n            borderWidth: StyleSheet.hairlineWidth,\n            marginBottom: 15,\n          },\n        ]}\n        ref={parentNode => (this._parent = parentNode)}\n      >\n        <ItemHeader item={item} />\n        <DisableBodyScrollingView>\n          <Animated.View\n            {...this._gestureHandler.panHandlers}\n            testID=\"webkit-disable-touches\"\n            style={{\n              opacity: this._opacity,\n            }}\n          >\n            <ItemImage\n              ref={node => (this._photoComponent = node)}\n              imageWidth={imageWidth}\n              imageHeight={imageHeight}\n              source={item.source}\n            />\n          </Animated.View>\n        </DisableBodyScrollingView>\n\n        <ItemFooter item={item} />\n      </View>\n    );\n  }\n}\nexport default Item;\n\n'Instagram/components/ItemHeader.js'\n:import { connectActionSheet } from '@expo/react-native-action-sheet';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nimport InstaHeaderButton from './InstaHeaderButton';\nimport { profileImageSize } from './FeedList';\nimport ProfileImage from './ProfileImage';\n\nclass ItemHeader extends React.Component {\n  render() {\n    const { item } = this.props;\n    const { account, location } = item;\n    return (\n      <View\n        style={{\n          flexDirection: 'row',\n          paddingLeft: 16,\n          paddingRight: 4,\n          paddingVertical: 14,\n          justifyContent: 'space-between',\n          alignItems: 'center',\n        }}\n      >\n        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n          <ProfileImage\n            style={{\n              aspectRatio: 1,\n              minHeight: profileImageSize,\n              height: profileImageSize,\n              backgroundColor: '#d8d8d8',\n              width: profileImageSize,\n              borderRadius: profileImageSize / 2,\n              marginRight: 12,\n              resizeMode: 'cover',\n            }}\n            account={account}\n          />\n          <View>\n            <Text style={{ fontSize: 14, color: '#262626', fontWeight: '600' }}>\n              {account}\n            </Text>\n            <Text style={{ fontSize: 12, color: '#262626' }}>\n              {location || 'Legoland'}\n            </Text>\n          </View>\n        </View>\n        <InstaHeaderButton\n          name=\"more\"\n          size={30}\n          color={'black'}\n          onPress={() => {\n            const options = [\n              'Copy Link',\n              'Turn On Post Notifications',\n              'Report',\n              'Mute',\n              'Unfollow',\n              'Cancel',\n            ];\n\n            const destructiveButtonIndex = options.length - 2;\n            const cancelButtonIndex = options.length - 1;\n\n            this.props.showActionSheetWithOptions(\n              {\n                options,\n                cancelButtonIndex,\n                destructiveButtonIndex,\n\n\n\n\n\n\n\n\n              },\n              buttonIndex => {\n\n\n              },\n            );\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nexport default connectActionSheet(ItemHeader);\n\n'Instagram/components/DisableScrolling.js'\n:import React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport { View } from 'react-native';\n\nconst getElement = component => {\n  try {\n    return findDOMNode(component);\n  } catch (e) {\n    return component;\n  }\n};\n\nclass DisableBodyScrollingView extends React.Component {\n  static defaultProps = {\n    shouldDisable: e => {\n      return e.touches.length > 1;\n    },\n  };\n  componentWillUnmount() {\n    if (this.view) {\n      this.view.removeEventListener('touchstart', this.freezeBodyStart, false);\n      this.view.removeEventListener('touchmove', this.freezeBodyMove, false);\n    }\n  }\n  start = { x: 0, y: 0 };\n  freezeBodyStart = e => {\n    this.start.x = e.touches[0].pageX;\n    this.start.y = e.touches[0].pageY;\n\n    if (this.props.shouldDisable(e, { state: 'BEGAN', dx: 0, dy: 0 })) {\n      e.preventDefault();\n    }\n  };\n\n  freezeBodyMove = e => {\n    let delta = {\n      state: 'MOVED',\n      dx: this.start.x - e.touches[0].pageX,\n      dy: this.start.y - e.touches[0].pageY,\n    };\n\n    if (this.props.shouldDisable(e, delta)) {\n      e.preventDefault();\n    }\n  };\n\n  render() {\n    const { style, ...props } = this.props;\n\n    return (\n      <View\n        style={[{ flex: 1 }, style]}\n        tabIndex=\"0\"\n        ref={view => {\n          const nextView = getElement(view);\n          if (nextView && nextView.addEventListener) {\n            nextView.addEventListener(\n              'touchstart',\n              this.freezeBodyStart,\n              false,\n            );\n            nextView.addEventListener('touchmove', this.freezeBodyMove, false);\n          }\n          if (this.view && this.view.removeEventListener) {\n            this.view.removeEventListener(\n              'touchstart',\n              this.freezeBodyStart,\n              false,\n            );\n            this.view.removeEventListener(\n              'touchmove',\n              this.freezeBodyMove,\n              false,\n            );\n          }\n          this.view = nextView;\n        }}\n        {...props}\n      />\n    );\n  }\n}\n\nexport default DisableBodyScrollingView;\n\n'Instagram/components/FeedList.js'\n:import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Animated, FlatList, StyleSheet, View } from 'react-native';\n\nimport { Stories } from '../constants/Posts';\nimport FeedListFooter from './FeedListFooter';\nimport Item from './Item';\nimport StorySlider from './StorySlider';\n\nexport const profileImageSize = 32;\n\nexport default class FeedList extends React.Component {\n  static defaultProps = {\n    ListHeaderComponent: props => <StorySlider stories={Stories} />,\n  };\n\n  _scrollValue = new Animated.Value(0);\n  _scaleValue = new Animated.Value(1);\n  _gesturePosition = new Animated.ValueXY();\n  state = {\n    isDragging: false,\n  };\n\n  static childContextTypes = {\n    gesturePosition: PropTypes.object,\n    getScrollPosition: PropTypes.func,\n    scaleValue: PropTypes.object,\n  };\n\n  state = {\n    isDragging: false,\n  };\n\n  getChildContext() {\n    return {\n      gesturePosition: this._gesturePosition,\n      scaleValue: this._scaleValue,\n      getScrollPosition: () => {\n        return this._scrollValue.__getValue();\n      },\n    };\n  }\n\n  render() {\n    const { onPressFooter, ...props } = this.props;\n\n    let { isDragging, selectedPhoto } = this.state;\n    let onScroll = Animated.event([\n      { nativeEvent: { contentOffset: { y: this._scrollValue } } },\n    ]);\n\n    return (\n      <React.Fragment>\n        <FlatList\n          showsVerticalScrollIndicator={false}\n          style={{ backgroundColor: 'transparent' }}\n          ref={ref => (this.list = ref)}\n          scrollEventThrottle={16}\n          onScroll={onScroll}\n          scrollEnabled={!isDragging}\n          zoomScale={1}\n          bouncesZoom={false}\n          maximumZoomScale={1}\n          minimumZoomScale={1}\n          renderItem={({ item }) => (\n            <Item\n              isLarge={props.isLarge}\n              getParent={() => this.list}\n              isDragging={isDragging}\n              onGestureStart={selectedPhoto => {\n                this.setState({\n                  selectedPhoto,\n                  isDragging: true,\n                });\n              }}\n              onGestureRelease={() => this.setState({ isDragging: false })}\n              item={item}\n            />\n          )}\n          ListFooterComponent={props => (\n            <FeedListFooter {...props} onPress={onPressFooter} />\n          )}\n          keyExtractor={(item, index) => item.key + ' ' + index}\n          {...props}\n        />\n        {isDragging ? (\n          <SelectedPhoto\n            key={selectedPhoto ? selectedPhoto.photoURI : ''}\n            selectedPhoto={selectedPhoto}\n          />\n        ) : null}\n      </React.Fragment>\n    );\n  }\n}\n\nclass SelectedPhoto extends React.Component {\n  state = { isLoaded: false };\n\n  static contextTypes = {\n    gesturePosition: PropTypes.object,\n    scrollValue: PropTypes.object,\n    scaleValue: PropTypes.object,\n  };\n\n  render() {\n    let { selectedPhoto } = this.props;\n    let { isLoaded } = this.state;\n\n    let { gesturePosition, scaleValue } = this.context;\n\n    let animatedStyle = {\n      transform: gesturePosition.getTranslateTransform(),\n    };\n    animatedStyle.transform.push({\n      scale: scaleValue,\n    });\n\n    let imageStyle = [\n      {\n        position: 'absolute',\n        zIndex: 10,\n        width: selectedPhoto.measurement.w,\n        height: selectedPhoto.measurement.h,\n        opacity: isLoaded ? 1 : 0,\n      },\n      animatedStyle,\n    ];\n\n    let backgroundOpacityValue = scaleValue.interpolate({\n      inputRange: [1.0, 1.1, 2.0],\n      outputRange: [0.0, 0.15, 0.75],\n      extrapolate: 'clamp',\n    });\n\n    return (\n      <BodyPortal>\n        <View style={styles.root}>\n          <Animated.View\n            style={[\n              styles.background,\n              {\n                opacity: backgroundOpacityValue,\n              },\n            ]}\n          />\n          <Animated.Image\n            style={imageStyle}\n            onLoad={() => {\n              setTimeout(() => {\n                this.setState({ isLoaded: true });\n              });\n            }}\n            source={selectedPhoto.source}\n          />\n        </View>\n      </BodyPortal>\n    );\n  }\n}\n\nimport ReactDOM from 'react-dom';\n\nexport class BodyPortal extends React.PureComponent {\n  render() {\n    return ReactDOM.createPortal(this.props.children, global.document.body);\n  }\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n  },\n  background: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    backgroundColor: 'black',\n  },\n});\n",
        "gt": [
            "'Instagram/components/DisableScrolling.js'",
            "'Instagram/components/Item.js'",
            "'Instagram/components/FeedList.js'",
            "'Instagram/components/ItemHeader.js'"
        ]
    },
    {
        "files": [
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/main.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/model/model.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/utils/bufferGeometryUtils.js'"
        ],
        "content": "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/main.js'\n:\nimport * as THREE from 'three';\nimport TWEEN from '@tweenjs/tween.js';\n\n\n\nimport Renderer from './components/renderer';\nimport Camera from './components/camera';\nimport Light from './components/light';\nimport Controls from './components/controls';\nimport Geometry from './components/geometry';\n\n\nimport Stats from './helpers/stats';\nimport MeshHelper from './helpers/meshHelper';\n\n\nimport Texture from './model/texture';\nimport Model from './model/model';\n\n\nimport Interaction from './managers/interaction';\nimport DatGUI from './managers/datGUI';\n\n\nimport Config from './../data/config';\n\n\n\nexport default class Main {\n  constructor(container) {\n\n    this.container = container;\n\n\n    this.clock = new THREE.Clock();\n\n\n    this.scene = new THREE.Scene();\n    this.scene.fog = new THREE.FogExp2(Config.fog.color, Config.fog.near);\n\n\n    if(window.devicePixelRatio) {\n      Config.dpr = window.devicePixelRatio;\n    }\n\n\n    this.renderer = new Renderer(this.scene, container);\n\n\n    this.camera = new Camera(this.renderer.threeRenderer);\n    this.controls = new Controls(this.camera.threeCamera, container);\n    this.light = new Light(this.scene);\n\n\n    const lights = ['ambient', 'directional', 'point', 'hemi'];\n    lights.forEach((light) => this.light.place(light));\n\n\n    this.geometry = new Geometry(this.scene);\n    this.geometry.make('plane')(150, 150, 10, 10);\n    this.geometry.place([0, -20, 0], [Math.PI / 2, 0, 0]);\n\n\n    if(Config.isDev && Config.isShowingStats) {\n      this.stats = new Stats(this.renderer);\n      this.stats.setUp();\n    }\n\n\n    if (Config.isDev) {\n      this.gui = new DatGUI(this)\n    }\n\n\n    this.texture = new Texture();\n\n\n    this.texture.load().then(() => {\n      this.manager = new THREE.LoadingManager();\n\n\n      this.model = new Model(this.scene, this.manager, this.texture.textures);\n      this.model.load(Config.models[Config.model.selected].type);\n\n\n      this.manager.onProgress = (item, loaded, total) => {\n        console.log(`${item}: ${loaded} ${total}`);\n      };\n\n\n      this.manager.onLoad = () => {\n\n        new Interaction(this.renderer.threeRenderer, this.scene, this.camera.threeCamera, this.controls.threeControls);\n\n\n        if(Config.isDev) {\n          this.meshHelper = new MeshHelper(this.scene, this.model.obj);\n          if (Config.mesh.enableHelper) this.meshHelper.enable();\n\n          this.gui.load(this, this.model.obj);\n        }\n\n\n        Config.isLoaded = true;\n        this.container.querySelector('#loading').style.display = 'none';\n      };\n    });\n\n\n    this.render();\n  }\n\n  render() {\n\n    if(Config.isDev && Config.isShowingStats) {\n      Stats.start();\n    }\n\n\n    this.renderer.render(this.scene, this.camera.threeCamera);\n\n\n    if(Config.isDev && Config.isShowingStats) {\n      Stats.end();\n    }\n\n\n\n\n\n    TWEEN.update();\n    this.controls.threeControls.update();\n\n\n    requestAnimationFrame(this.render.bind(this));\n  }\n}\n\n'ThreeJS-Webpack-ES6-Boilerplate/src/js/app.js'\n:import Config from './data/config';\nimport Detector from './utils/detector';\nimport Main from './app/main';\n\n\nimport './../css/app.scss';\n\n\nif(__ENV__ === 'dev') {\n  console.log('----- RUNNING IN DEV ENVIRONMENT! -----');\n\n  Config.isDev = true;\n}\n\nfunction init() {\n\n  if(!Detector.webgl) {\n    Detector.addGetWebGLMessage();\n  } else {\n    const container = document.getElementById('appContainer');\n    new Main(container);\n  }\n}\n\ninit();\n\n'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/model/model.js'\n:import * as THREE from 'three';\n\nimport Material from '../components/material';\nimport Helpers from '../../utils/helpers';\nimport { BufferGeometryUtils } from '../../utils/bufferGeometryUtils';\nimport { GLTFLoader } from '../loaders/GLTFLoader';\nimport Config from '../../data/config';\n\n\nexport default class Model {\n  constructor(scene, manager, textures) {\n    this.scene = scene;\n    this.textures = textures;\n    this.manager = manager;\n\n    this.obj = null;\n    this.ref = null;\n  }\n\n  load(type) {\n\n\n    switch (type) {\n      case 'gltf':\n\n        new GLTFLoader(this.manager).load(\n          Config.models[Config.model.selected].path,\n          (gltf) => {\n            const scene = gltf.scene;\n            let mesh;\n\n            if (Config.shadow.enabled) {\n              scene.traverse(function(node) {\n                if (node.isMesh || node.isLight) node.castShadow = true;\n                if (node.isMesh) {\n                  node.material.wireframe = Config.mesh.wireframe;\n                  mesh = node;\n                }\n              });\n            }\n\n            this.obj = mesh;\n\n            BufferGeometryUtils.computeTangents(mesh.geometry);\n\n            var group = new THREE.Group();\n            group.scale.multiplyScalar(0.25);\n            this.scene.add( group );\n\n            this.ref = group;\n\n\n            group.updateMatrixWorld(true);\n            group.add(mesh);\n\n\n            this.scene.add(scene);\n          },\n          Helpers.logProgress(),\n          Helpers.logError()\n        );\n        break;\n\n      case 'object':\n\n        new THREE.ObjectLoader(this.manager).load(\n          Config.models[Config.model.selected].path,\n          obj => {\n            obj.traverse(child => {\n              if(child instanceof THREE.Mesh) {\n\n                const material = new Material(0xffffff).standard;\n                material.map = this.textures.UV;\n                child.material = material;\n\n\n                if(Config.shadow.enabled) {\n                  child.receiveShadow = true;\n                  child.castShadow = true;\n                }\n              }\n            });\n\n\n            this.obj = obj;\n            this.ref = obj;\n\n            obj.scale.multiplyScalar(Config.models[Config.model.selected].scale);\n            this.scene.add(obj);\n          },\n          Helpers.logProgress(),\n          Helpers.logError()\n        );\n        break;\n    }\n  }\n\n  unload() {\n    this.scene.remove(this.ref);\n  }\n}\n\n'ThreeJS-Webpack-ES6-Boilerplate/src/js/utils/bufferGeometryUtils.js'\n:\n\nimport {\n  BufferAttribute,\n  BufferGeometry,\n  InterleavedBuffer,\n  InterleavedBufferAttribute,\n  TriangleFanDrawMode,\n  TriangleStripDrawMode,\n  TrianglesDrawMode,\n  Vector2,\n  Vector3,\n} from 'three';\n\nvar BufferGeometryUtils = {\n  computeTangents: function (geometry) {\n    var index = geometry.index;\n    var attributes = geometry.attributes;\n\n\n\n\n    if (\n      index === null ||\n      attributes.position === undefined ||\n      attributes.normal === undefined ||\n      attributes.uv === undefined\n    ) {\n      console.error(\n        'THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)'\n      );\n      return;\n    }\n\n    var indices = index.array;\n    var positions = attributes.position.array;\n    var normals = attributes.normal.array;\n    var uvs = attributes.uv.array;\n\n    var nVertices = positions.length / 3;\n\n    if (attributes.tangent === undefined) {\n      geometry.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\n    }\n\n    var tangents = attributes.tangent.array;\n\n    var tan1 = [],\n        tan2 = [];\n\n    for (var i = 0; i < nVertices; i++) {\n      tan1[i] = new Vector3();\n      tan2[i] = new Vector3();\n    }\n\n    var vA = new Vector3(),\n        vB = new Vector3(),\n        vC = new Vector3(),\n        uvA = new Vector2(),\n        uvB = new Vector2(),\n        uvC = new Vector2(),\n        sdir = new Vector3(),\n        tdir = new Vector3();\n\n    function handleTriangle(a, b, c) {\n      vA.fromArray(positions, a * 3);\n      vB.fromArray(positions, b * 3);\n      vC.fromArray(positions, c * 3);\n\n      uvA.fromArray(uvs, a * 2);\n      uvB.fromArray(uvs, b * 2);\n      uvC.fromArray(uvs, c * 2);\n\n      vB.sub(vA);\n      vC.sub(vA);\n\n      uvB.sub(uvA);\n      uvC.sub(uvA);\n\n      var r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y);\n\n\n\n      if (!isFinite(r)) return;\n\n      sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n      tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n\n      tan1[a].add(sdir);\n      tan1[b].add(sdir);\n      tan1[c].add(sdir);\n\n      tan2[a].add(tdir);\n      tan2[b].add(tdir);\n      tan2[c].add(tdir);\n    }\n\n    var groups = geometry.groups;\n\n    if (groups.length === 0) {\n      groups = [\n        {\n          start: 0,\n          count: indices.length,\n        },\n      ];\n    }\n\n    for (var i = 0, il = groups.length; i < il; ++i) {\n      var group = groups[i];\n\n      var start = group.start;\n      var count = group.count;\n\n      for (var j = start, jl = start + count; j < jl; j += 3) {\n        handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n      }\n    }\n\n    var tmp = new Vector3(),\n        tmp2 = new Vector3();\n    var n = new Vector3(),\n        n2 = new Vector3();\n    var w, t, test;\n\n    function handleVertex(v) {\n      n.fromArray(normals, v * 3);\n      n2.copy(n);\n\n      t = tan1[v];\n\n\n\n      tmp.copy(t);\n      tmp.sub(n.multiplyScalar(n.dot(t))).normalize();\n\n\n\n      tmp2.crossVectors(n2, t);\n      test = tmp2.dot(tan2[v]);\n      w = test < 0.0 ? -1.0 : 1.0;\n\n      tangents[v * 4] = tmp.x;\n      tangents[v * 4 + 1] = tmp.y;\n      tangents[v * 4 + 2] = tmp.z;\n      tangents[v * 4 + 3] = w;\n    }\n\n    for (var i = 0, il = groups.length; i < il; ++i) {\n      var group = groups[i];\n\n      var start = group.start;\n      var count = group.count;\n\n      for (var j = start, jl = start + count; j < jl; j += 3) {\n        handleVertex(indices[j + 0]);\n        handleVertex(indices[j + 1]);\n        handleVertex(indices[j + 2]);\n      }\n    }\n  },\n\n\n  mergeBufferGeometries: function (geometries, useGroups) {\n    var isIndexed = geometries[0].index !== null;\n\n    var attributesUsed = new Set(Object.keys(geometries[0].attributes));\n    var morphAttributesUsed = new Set(Object.keys(geometries[0].morphAttributes));\n\n    var attributes = {};\n    var morphAttributes = {};\n\n    var morphTargetsRelative = geometries[0].morphTargetsRelative;\n\n    var mergedGeometry = new BufferGeometry();\n\n    var offset = 0;\n\n    for (var i = 0; i < geometries.length; ++i) {\n      var geometry = geometries[i];\n      var attributesCount = 0;\n\n\n\n      if (isIndexed !== (geometry.index !== null)) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' +\n          i +\n          '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.'\n        );\n        return null;\n      }\n\n\n\n      for (var name in geometry.attributes) {\n        if (!attributesUsed.has(name)) {\n          console.error(\n            'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' +\n            i +\n            '. All geometries must have compatible attributes; make sure \"' +\n            name +\n            '\" attribute exists among all geometries, or in none of them.'\n          );\n          return null;\n        }\n\n        if (attributes[name] === undefined) attributes[name] = [];\n\n        attributes[name].push(geometry.attributes[name]);\n\n        attributesCount++;\n      }\n\n\n\n      if (attributesCount !== attributesUsed.size) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' +\n          i +\n          '. Make sure all geometries have the same number of attributes.'\n        );\n        return null;\n      }\n\n\n\n      if (morphTargetsRelative !== geometry.morphTargetsRelative) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' +\n          i +\n          '. .morphTargetsRelative must be consistent throughout all geometries.'\n        );\n        return null;\n      }\n\n      for (var name in geometry.morphAttributes) {\n        if (!morphAttributesUsed.has(name)) {\n          console.error(\n            'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' +\n            i +\n            '.  .morphAttributes must be consistent throughout all geometries.'\n          );\n          return null;\n        }\n\n        if (morphAttributes[name] === undefined) morphAttributes[name] = [];\n\n        morphAttributes[name].push(geometry.morphAttributes[name]);\n      }\n\n\n\n      mergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n      mergedGeometry.userData.mergedUserData.push(geometry.userData);\n\n      if (useGroups) {\n        var count;\n\n        if (isIndexed) {\n          count = geometry.index.count;\n        } else if (geometry.attributes.position !== undefined) {\n          count = geometry.attributes.position.count;\n        } else {\n          console.error(\n            'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' +\n            i +\n            '. The geometry must have either an index or a position attribute'\n          );\n          return null;\n        }\n\n        mergedGeometry.addGroup(offset, count, i);\n\n        offset += count;\n      }\n    }\n\n\n\n    if (isIndexed) {\n      var indexOffset = 0;\n      var mergedIndex = [];\n\n      for (var i = 0; i < geometries.length; ++i) {\n        var index = geometries[i].index;\n\n        for (var j = 0; j < index.count; ++j) {\n          mergedIndex.push(index.getX(j) + indexOffset);\n        }\n\n        indexOffset += geometries[i].attributes.position.count;\n      }\n\n      mergedGeometry.setIndex(mergedIndex);\n    }\n\n\n\n    for (var name in attributes) {\n      var mergedAttribute = this.mergeBufferAttributes(attributes[name]);\n\n      if (!mergedAttribute) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' +\n          name +\n          ' attribute.'\n        );\n        return null;\n      }\n\n      mergedGeometry.setAttribute(name, mergedAttribute);\n    }\n\n\n\n    for (var name in morphAttributes) {\n      var numMorphTargets = morphAttributes[name][0].length;\n\n      if (numMorphTargets === 0) break;\n\n      mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n      mergedGeometry.morphAttributes[name] = [];\n\n      for (var i = 0; i < numMorphTargets; ++i) {\n        var morphAttributesToMerge = [];\n\n        for (var j = 0; j < morphAttributes[name].length; ++j) {\n          morphAttributesToMerge.push(morphAttributes[name][j][i]);\n        }\n\n        var mergedMorphAttribute = this.mergeBufferAttributes(morphAttributesToMerge);\n\n        if (!mergedMorphAttribute) {\n          console.error(\n            'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' +\n            name +\n            ' morphAttribute.'\n          );\n          return null;\n        }\n\n        mergedGeometry.morphAttributes[name].push(mergedMorphAttribute);\n      }\n    }\n\n    return mergedGeometry;\n  },\n\n\n  mergeBufferAttributes: function (attributes) {\n    var TypedArray;\n    var itemSize;\n    var normalized;\n    var arrayLength = 0;\n\n    for (var i = 0; i < attributes.length; ++i) {\n      var attribute = attributes[i];\n\n      if (attribute.isInterleavedBufferAttribute) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported.'\n        );\n        return null;\n      }\n\n      if (TypedArray === undefined) TypedArray = attribute.array.constructor;\n      if (TypedArray !== attribute.array.constructor) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.'\n        );\n        return null;\n      }\n\n      if (itemSize === undefined) itemSize = attribute.itemSize;\n      if (itemSize !== attribute.itemSize) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.'\n        );\n        return null;\n      }\n\n      if (normalized === undefined) normalized = attribute.normalized;\n      if (normalized !== attribute.normalized) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.'\n        );\n        return null;\n      }\n\n      arrayLength += attribute.array.length;\n    }\n\n    var array = new TypedArray(arrayLength);\n    var offset = 0;\n\n    for (var i = 0; i < attributes.length; ++i) {\n      array.set(attributes[i].array, offset);\n\n      offset += attributes[i].array.length;\n    }\n\n    return new BufferAttribute(array, itemSize, normalized);\n  },\n\n\n  interleaveAttributes: function (attributes) {\n\n\n    var TypedArray;\n    var arrayLength = 0;\n    var stride = 0;\n\n\n    for (var i = 0, l = attributes.length; i < l; ++i) {\n      var attribute = attributes[i];\n\n      if (TypedArray === undefined) TypedArray = attribute.array.constructor;\n      if (TypedArray !== attribute.array.constructor) {\n        console.error('AttributeBuffers of different types cannot be interleaved');\n        return null;\n      }\n\n      arrayLength += attribute.array.length;\n      stride += attribute.itemSize;\n    }\n\n\n    var interleavedBuffer = new InterleavedBuffer(new TypedArray(arrayLength), stride);\n    var offset = 0;\n    var res = [];\n    var getters = ['getX', 'getY', 'getZ', 'getW'];\n    var setters = ['setX', 'setY', 'setZ', 'setW'];\n\n    for (var j = 0, l = attributes.length; j < l; j++) {\n      var attribute = attributes[j];\n      var itemSize = attribute.itemSize;\n      var count = attribute.count;\n      var iba = new InterleavedBufferAttribute(\n        interleavedBuffer,\n        itemSize,\n        offset,\n        attribute.normalized\n      );\n      res.push(iba);\n\n      offset += itemSize;\n\n\n\n      for (var c = 0; c < count; c++) {\n        for (var k = 0; k < itemSize; k++) {\n          iba[setters[k]](c, attribute[getters[k]](c));\n        }\n      }\n    }\n\n    return res;\n  },\n\n\n  estimateBytesUsed: function (geometry) {\n\n\n\n    var mem = 0;\n    for (var name in geometry.attributes) {\n      var attr = geometry.getAttribute(name);\n      mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n    }\n\n    var indices = geometry.getIndex();\n    mem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n    return mem;\n  },\n\n\n  mergeVertices: function (geometry, tolerance = 1e-4) {\n    tolerance = Math.max(tolerance, Number.EPSILON);\n\n\n\n    var hashToIndex = {};\n    var indices = geometry.getIndex();\n    var positions = geometry.getAttribute('position');\n    var vertexCount = indices ? indices.count : positions.count;\n\n\n    var nextIndex = 0;\n\n\n    var attributeNames = Object.keys(geometry.attributes);\n    var attrArrays = {};\n    var morphAttrsArrays = {};\n    var newIndices = [];\n    var getters = ['getX', 'getY', 'getZ', 'getW'];\n\n\n    for (var i = 0, l = attributeNames.length; i < l; i++) {\n      var name = attributeNames[i];\n\n      attrArrays[name] = [];\n\n      var morphAttr = geometry.morphAttributes[name];\n      if (morphAttr) {\n        morphAttrsArrays[name] = new Array(morphAttr.length).fill().map(() => []);\n      }\n    }\n\n\n    var decimalShift = Math.log10(1 / tolerance);\n    var shiftMultiplier = Math.pow(10, decimalShift);\n    for (var i = 0; i < vertexCount; i++) {\n      var index = indices ? indices.getX(i) : i;\n\n\n      var hash = '';\n      for (var j = 0, l = attributeNames.length; j < l; j++) {\n        var name = attributeNames[j];\n        var attribute = geometry.getAttribute(name);\n        var itemSize = attribute.itemSize;\n\n        for (var k = 0; k < itemSize; k++) {\n\n          hash += `${~~(attribute[getters[k]](index) * shiftMultiplier)},`;\n        }\n      }\n\n\n\n      if (hash in hashToIndex) {\n        newIndices.push(hashToIndex[hash]);\n      } else {\n\n        for (var j = 0, l = attributeNames.length; j < l; j++) {\n          var name = attributeNames[j];\n          var attribute = geometry.getAttribute(name);\n          var morphAttr = geometry.morphAttributes[name];\n          var itemSize = attribute.itemSize;\n          var newarray = attrArrays[name];\n          var newMorphArrays = morphAttrsArrays[name];\n\n          for (var k = 0; k < itemSize; k++) {\n            var getterFunc = getters[k];\n            newarray.push(attribute[getterFunc](index));\n\n            if (morphAttr) {\n              for (var m = 0, ml = morphAttr.length; m < ml; m++) {\n                newMorphArrays[m].push(morphAttr[m][getterFunc](index));\n              }\n            }\n          }\n        }\n\n        hashToIndex[hash] = nextIndex;\n        newIndices.push(nextIndex);\n        nextIndex++;\n      }\n    }\n\n\n\n    const result = geometry.clone();\n    for (var i = 0, l = attributeNames.length; i < l; i++) {\n      var name = attributeNames[i];\n      var oldAttribute = geometry.getAttribute(name);\n\n      var buffer = new oldAttribute.array.constructor(attrArrays[name]);\n      var attribute = new BufferAttribute(buffer, oldAttribute.itemSize, oldAttribute.normalized);\n\n      result.setAttribute(name, attribute);\n\n\n      if (name in morphAttrsArrays) {\n        for (var j = 0; j < morphAttrsArrays[name].length; j++) {\n          var oldMorphAttribute = geometry.morphAttributes[name][j];\n\n          var buffer = new oldMorphAttribute.array.constructor(morphAttrsArrays[name][j]);\n          var morphAttribute = new BufferAttribute(\n            buffer,\n            oldMorphAttribute.itemSize,\n            oldMorphAttribute.normalized\n          );\n          result.morphAttributes[name][j] = morphAttribute;\n        }\n      }\n    }\n\n\n\n    result.setIndex(newIndices);\n\n    return result;\n  },\n\n\n  toTrianglesDrawMode: function (geometry, drawMode) {\n    if (drawMode === TrianglesDrawMode) {\n      console.warn(\n        'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.'\n      );\n      return geometry;\n    }\n\n    if (drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode) {\n      var index = geometry.getIndex();\n\n\n\n      if (index === null) {\n        var indices = [];\n\n        var position = geometry.getAttribute('position');\n\n        if (position !== undefined) {\n          for (var i = 0; i < position.count; i++) {\n            indices.push(i);\n          }\n\n          geometry.setIndex(indices);\n          index = geometry.getIndex();\n        } else {\n          console.error(\n            'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.'\n          );\n          return geometry;\n        }\n      }\n\n\n\n      var numberOfTriangles = index.count - 2;\n      var newIndices = [];\n\n      if (drawMode === TriangleFanDrawMode) {\n\n\n        for (var i = 1; i <= numberOfTriangles; i++) {\n          newIndices.push(index.getX(0));\n          newIndices.push(index.getX(i));\n          newIndices.push(index.getX(i + 1));\n        }\n      } else {\n\n\n        for (var i = 0; i < numberOfTriangles; i++) {\n          if (i % 2 === 0) {\n            newIndices.push(index.getX(i));\n            newIndices.push(index.getX(i + 1));\n            newIndices.push(index.getX(i + 2));\n          } else {\n            newIndices.push(index.getX(i + 2));\n            newIndices.push(index.getX(i + 1));\n            newIndices.push(index.getX(i));\n          }\n        }\n      }\n\n      if (newIndices.length / 3 !== numberOfTriangles) {\n        console.error(\n          'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.'\n        );\n      }\n\n\n\n      var newGeometry = geometry.clone();\n      newGeometry.setIndex(newIndices);\n      newGeometry.clearGroups();\n\n      return newGeometry;\n    }\n\n    console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode);\n    return geometry;\n  },\n};\n\nexport { BufferGeometryUtils };\n",
        "gt": [
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/utils/bufferGeometryUtils.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/model/model.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/main.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app.js'"
        ]
    },
    {
        "files": [
            "'Instagram/components/ItemHeader.js'",
            "'Instagram/components/InstaHeaderButton.js'",
            "'Instagram/Assets.js'",
            "'Instagram/components/InstaIcon.js'",
            "'Instagram/components/FeedList.js'",
            "'Instagram/components/Item.js'"
        ],
        "content": "'Instagram/components/ItemHeader.js'\n:import { connectActionSheet } from '@expo/react-native-action-sheet';\nimport React from 'react';\nimport { Text, View } from 'react-native';\n\nimport InstaHeaderButton from './InstaHeaderButton';\nimport { profileImageSize } from './FeedList';\nimport ProfileImage from './ProfileImage';\n\nclass ItemHeader extends React.Component {\n  render() {\n    const { item } = this.props;\n    const { account, location } = item;\n    return (\n      <View\n        style={{\n          flexDirection: 'row',\n          paddingLeft: 16,\n          paddingRight: 4,\n          paddingVertical: 14,\n          justifyContent: 'space-between',\n          alignItems: 'center',\n        }}\n      >\n        <View style={{ flexDirection: 'row', alignItems: 'center' }}>\n          <ProfileImage\n            style={{\n              aspectRatio: 1,\n              minHeight: profileImageSize,\n              height: profileImageSize,\n              backgroundColor: '#d8d8d8',\n              width: profileImageSize,\n              borderRadius: profileImageSize / 2,\n              marginRight: 12,\n              resizeMode: 'cover',\n            }}\n            account={account}\n          />\n          <View>\n            <Text style={{ fontSize: 14, color: '#262626', fontWeight: '600' }}>\n              {account}\n            </Text>\n            <Text style={{ fontSize: 12, color: '#262626' }}>\n              {location || 'Legoland'}\n            </Text>\n          </View>\n        </View>\n        <InstaHeaderButton\n          name=\"more\"\n          size={30}\n          color={'black'}\n          onPress={() => {\n            const options = [\n              'Copy Link',\n              'Turn On Post Notifications',\n              'Report',\n              'Mute',\n              'Unfollow',\n              'Cancel',\n            ];\n\n            const destructiveButtonIndex = options.length - 2;\n            const cancelButtonIndex = options.length - 1;\n\n            this.props.showActionSheetWithOptions(\n              {\n                options,\n                cancelButtonIndex,\n                destructiveButtonIndex,\n\n\n\n\n\n\n\n\n              },\n              buttonIndex => {\n\n\n              },\n            );\n          }}\n        />\n      </View>\n    );\n  }\n}\n\nexport default connectActionSheet(ItemHeader);\n\n'Instagram/components/InstaHeaderButton.js'\n:import React from 'react';\nimport { TouchableOpacity } from 'react-native';\nimport InstaIcon from './InstaIcon';\n\nexport default class InstaHeaderButton extends React.PureComponent {\n  render() {\n    const { onPress, disabled, touchableStyle, ...props } = this.props;\n    return (\n      <TouchableOpacity\n        disabled={disabled}\n        style={[{ marginHorizontal: 12 }, touchableStyle]}\n        onPress={onPress}\n      >\n        <InstaIcon disabled={disabled} size={32} color={'black'} {...props} />\n      </TouchableOpacity>\n    );\n  }\n}\n\n'Instagram/Assets.js'\n:export default {\n\t\"ball.png\": require(`./assets/ball.png`),\n\t\"inf.png\": require(`./assets/inf.png`),\n\t\"rewind.png\": require(`./assets/rewind.png`),\n\t\"brand\": {\n\t\t\"Instagram@2x.png\": require(`./assets/brand/Instagram@2x.png`),\n\t\t\"icon.png\": require(`./assets/brand/icon.png`),\n\t\t\"splash.png\": require(`./assets/brand/splash.png`)\n\t},\n\t\"fonts\": {\n\t\t\"insta-modern.ttf\": require(`./assets/fonts/insta-modern.ttf`),\n\t\t\"insta-neon.otf\": require(`./assets/fonts/insta-neon.otf`),\n\t\t\"insta-strong.otf\": require(`./assets/fonts/insta-strong.otf`),\n\t\t\"insta-typewriter.ttf\": require(`./assets/fonts/insta-typewriter.ttf`)\n\t},\n\t\"icons\": {\n\t\t\"red\": {\n\t\t\t\"like-on.png\": require(`./assets/icons/red/like-on.png`)\n\t\t},\n\t\t\"black\": {\n\t\t\t\"add-user.png\": require(`./assets/icons/black/add-user.png`),\n\t\t\t\"announce.png\": require(`./assets/icons/black/announce.png`),\n\t\t\t\"beats.png\": require(`./assets/icons/black/beats.png`),\n\t\t\t\"bookmark.png\": require(`./assets/icons/black/bookmark.png`),\n\t\t\t\"bounce.png\": require(`./assets/icons/black/bounce.png`),\n\t\t\t\"bummer.png\": require(`./assets/icons/black/bummer.png`),\n\t\t\t\"camera-off.png\": require(`./assets/icons/black/camera-off.png`),\n\t\t\t\"camera-on.png\": require(`./assets/icons/black/camera-on.png`),\n\t\t\t\"cancel.png\": require(`./assets/icons/black/cancel.png`),\n\t\t\t\"capture.png\": require(`./assets/icons/black/capture.png`),\n\t\t\t\"card.png\": require(`./assets/icons/black/card.png`),\n\t\t\t\"chat.png\": require(`./assets/icons/black/chat.png`),\n\t\t\t\"chevron-left.png\": require(`./assets/icons/black/chevron-left.png`),\n\t\t\t\"chevron-right.png\": require(`./assets/icons/black/chevron-right.png`),\n\t\t\t\"classic.png\": require(`./assets/icons/black/classic.png`),\n\t\t\t\"dramatic.png\": require(`./assets/icons/black/dramatic.png`),\n\t\t\t\"draw.png\": require(`./assets/icons/black/draw.png`),\n\t\t\t\"eraser-off.png\": require(`./assets/icons/black/eraser-off.png`),\n\t\t\t\"eraser-on.png\": require(`./assets/icons/black/eraser-on.png`),\n\t\t\t\"face-off.png\": require(`./assets/icons/black/face-off.png`),\n\t\t\t\"face-on.png\": require(`./assets/icons/black/face-on.png`),\n\t\t\t\"facebook.png\": require(`./assets/icons/black/facebook.png`),\n\t\t\t\"fire.png\": require(`./assets/icons/black/fire.png`),\n\t\t\t\"flash-auto.png\": require(`./assets/icons/black/flash-auto.png`),\n\t\t\t\"flash-off.png\": require(`./assets/icons/black/flash-off.png`),\n\t\t\t\"flash-on.png\": require(`./assets/icons/black/flash-on.png`),\n\t\t\t\"flip.png\": require(`./assets/icons/black/flip.png`),\n\t\t\t\"grid.png\": require(`./assets/icons/black/grid.png`),\n\t\t\t\"hearts.png\": require(`./assets/icons/black/hearts.png`),\n\t\t\t\"highlight-off.png\": require(`./assets/icons/black/highlight-off.png`),\n\t\t\t\"highlighter-on.png\": require(`./assets/icons/black/highlighter-on.png`),\n\t\t\t\"history.png\": require(`./assets/icons/black/history.png`),\n\t\t\t\"home-off.png\": require(`./assets/icons/black/home-off.png`),\n\t\t\t\"home-on.png\": require(`./assets/icons/black/home-on.png`),\n\t\t\t\"info.png\": require(`./assets/icons/black/info.png`),\n\t\t\t\"instagram.png\": require(`./assets/icons/black/instagram.png`),\n\t\t\t\"letter.png\": require(`./assets/icons/black/letter.png`),\n\t\t\t\"like-off.png\": require(`./assets/icons/black/like-off.png`),\n\t\t\t\"like-on.png\": require(`./assets/icons/black/like-on.png`),\n\t\t\t\"likes.png\": require(`./assets/icons/black/likes.png`),\n\t\t\t\"list.png\": require(`./assets/icons/black/list.png`),\n\t\t\t\"lock.png\": require(`./assets/icons/black/lock.png`),\n\t\t\t\"marker-off.png\": require(`./assets/icons/black/marker-off.png`),\n\t\t\t\"marker-on.png\": require(`./assets/icons/black/marker-on.png`),\n\t\t\t\"menu.png\": require(`./assets/icons/black/menu.png`),\n\t\t\t\"more.png\": require(`./assets/icons/black/more.png`),\n\t\t\t\"nope.png\": require(`./assets/icons/black/nope.png`),\n\t\t\t\"notify.png\": require(`./assets/icons/black/notify.png`),\n\t\t\t\"paparazzi.png\": require(`./assets/icons/black/paparazzi.png`),\n\t\t\t\"pen-off.png\": require(`./assets/icons/black/pen-off.png`),\n\t\t\t\"pen-on.png\": require(`./assets/icons/black/pen-on.png`),\n\t\t\t\"picker-empty.png\": require(`./assets/icons/black/picker-empty.png`),\n\t\t\t\"picker-filled.png\": require(`./assets/icons/black/picker-filled.png`),\n\t\t\t\"picker-select.png\": require(`./assets/icons/black/picker-select.png`),\n\t\t\t\"picker.png\": require(`./assets/icons/black/picker.png`),\n\t\t\t\"play.png\": require(`./assets/icons/black/play.png`),\n\t\t\t\"profile.png\": require(`./assets/icons/black/profile.png`),\n\t\t\t\"question.png\": require(`./assets/icons/black/question.png`),\n\t\t\t\"questions.png\": require(`./assets/icons/black/questions.png`),\n\t\t\t\"save.png\": require(`./assets/icons/black/save.png`),\n\t\t\t\"scan.png\": require(`./assets/icons/black/scan.png`),\n\t\t\t\"search-off.png\": require(`./assets/icons/black/search-off.png`),\n\t\t\t\"search-on.png\": require(`./assets/icons/black/search-on.png`),\n\t\t\t\"send.png\": require(`./assets/icons/black/send.png`),\n\t\t\t\"settings.png\": require(`./assets/icons/black/settings.png`),\n\t\t\t\"stickers.png\": require(`./assets/icons/black/stickers.png`),\n\t\t\t\"stop.png\": require(`./assets/icons/black/stop.png`),\n\t\t\t\"suprise.png\": require(`./assets/icons/black/suprise.png`),\n\t\t\t\"tag-user.png\": require(`./assets/icons/black/tag-user.png`),\n\t\t\t\"text-background-off.png\": require(`./assets/icons/black/text-background-off.png`),\n\t\t\t\"text-background-on.png\": require(`./assets/icons/black/text-background-on.png`),\n\t\t\t\"text-center.png\": require(`./assets/icons/black/text-center.png`),\n\t\t\t\"text-effect.png\": require(`./assets/icons/black/text-effect.png`),\n\t\t\t\"text-left.png\": require(`./assets/icons/black/text-left.png`),\n\t\t\t\"text-right.png\": require(`./assets/icons/black/text-right.png`),\n\t\t\t\"tv.png\": require(`./assets/icons/black/tv.png`)\n\t\t},\n\t\t\"white\": {\n\t\t\t\"add-user.png\": require(`./assets/icons/white/add-user.png`),\n\t\t\t\"announce.png\": require(`./assets/icons/white/announce.png`),\n\t\t\t\"beats.png\": require(`./assets/icons/white/beats.png`),\n\t\t\t\"bookmark.png\": require(`./assets/icons/white/bookmark.png`),\n\t\t\t\"bounce.png\": require(`./assets/icons/white/bounce.png`),\n\t\t\t\"bummer.png\": require(`./assets/icons/white/bummer.png`),\n\t\t\t\"camera-off.png\": require(`./assets/icons/white/camera-off.png`),\n\t\t\t\"camera-on.png\": require(`./assets/icons/white/camera-on.png`),\n\t\t\t\"cancel.png\": require(`./assets/icons/white/cancel.png`),\n\t\t\t\"capture.png\": require(`./assets/icons/white/capture.png`),\n\t\t\t\"card.png\": require(`./assets/icons/white/card.png`),\n\t\t\t\"chat.png\": require(`./assets/icons/white/chat.png`),\n\t\t\t\"chevron-left.png\": require(`./assets/icons/white/chevron-left.png`),\n\t\t\t\"chevron-right.png\": require(`./assets/icons/white/chevron-right.png`),\n\t\t\t\"classic.png\": require(`./assets/icons/white/classic.png`),\n\t\t\t\"dramatic.png\": require(`./assets/icons/white/dramatic.png`),\n\t\t\t\"draw.png\": require(`./assets/icons/white/draw.png`),\n\t\t\t\"eraser-off.png\": require(`./assets/icons/white/eraser-off.png`),\n\t\t\t\"eraser-on.png\": require(`./assets/icons/white/eraser-on.png`),\n\t\t\t\"face-off.png\": require(`./assets/icons/white/face-off.png`),\n\t\t\t\"face-on.png\": require(`./assets/icons/white/face-on.png`),\n\t\t\t\"facebook.png\": require(`./assets/icons/white/facebook.png`),\n\t\t\t\"fire.png\": require(`./assets/icons/white/fire.png`),\n\t\t\t\"flash-auto.png\": require(`./assets/icons/white/flash-auto.png`),\n\t\t\t\"flash-off.png\": require(`./assets/icons/white/flash-off.png`),\n\t\t\t\"flash-on.png\": require(`./assets/icons/white/flash-on.png`),\n\t\t\t\"flip.png\": require(`./assets/icons/white/flip.png`),\n\t\t\t\"grid.png\": require(`./assets/icons/white/grid.png`),\n\t\t\t\"hearts.png\": require(`./assets/icons/white/hearts.png`),\n\t\t\t\"highlight-off.png\": require(`./assets/icons/white/highlight-off.png`),\n\t\t\t\"highlighter-on.png\": require(`./assets/icons/white/highlighter-on.png`),\n\t\t\t\"history.png\": require(`./assets/icons/white/history.png`),\n\t\t\t\"home-off.png\": require(`./assets/icons/white/home-off.png`),\n\t\t\t\"home-on.png\": require(`./assets/icons/white/home-on.png`),\n\t\t\t\"info.png\": require(`./assets/icons/white/info.png`),\n\t\t\t\"instagram.png\": require(`./assets/icons/white/instagram.png`),\n\t\t\t\"letter.png\": require(`./assets/icons/white/letter.png`),\n\t\t\t\"like-off.png\": require(`./assets/icons/white/like-off.png`),\n\t\t\t\"like-on.png\": require(`./assets/icons/white/like-on.png`),\n\t\t\t\"likes.png\": require(`./assets/icons/white/likes.png`),\n\t\t\t\"list.png\": require(`./assets/icons/white/list.png`),\n\t\t\t\"lock.png\": require(`./assets/icons/white/lock.png`),\n\t\t\t\"marker-off.png\": require(`./assets/icons/white/marker-off.png`),\n\t\t\t\"marker-on.png\": require(`./assets/icons/white/marker-on.png`),\n\t\t\t\"menu.png\": require(`./assets/icons/white/menu.png`),\n\t\t\t\"more.png\": require(`./assets/icons/white/more.png`),\n\t\t\t\"nope.png\": require(`./assets/icons/white/nope.png`),\n\t\t\t\"notify.png\": require(`./assets/icons/white/notify.png`),\n\t\t\t\"paparazzi.png\": require(`./assets/icons/white/paparazzi.png`),\n\t\t\t\"pen-off.png\": require(`./assets/icons/white/pen-off.png`),\n\t\t\t\"pen-on.png\": require(`./assets/icons/white/pen-on.png`),\n\t\t\t\"picker-empty.png\": require(`./assets/icons/white/picker-empty.png`),\n\t\t\t\"picker-filled.png\": require(`./assets/icons/white/picker-filled.png`),\n\t\t\t\"picker-select.png\": require(`./assets/icons/white/picker-select.png`),\n\t\t\t\"picker.png\": require(`./assets/icons/white/picker.png`),\n\t\t\t\"play.png\": require(`./assets/icons/white/play.png`),\n\t\t\t\"profile.png\": require(`./assets/icons/white/profile.png`),\n\t\t\t\"question.png\": require(`./assets/icons/white/question.png`),\n\t\t\t\"questions.png\": require(`./assets/icons/white/questions.png`),\n\t\t\t\"save.png\": require(`./assets/icons/white/save.png`),\n\t\t\t\"scan.png\": require(`./assets/icons/white/scan.png`),\n\t\t\t\"search-off.png\": require(`./assets/icons/white/search-off.png`),\n\t\t\t\"search-on.png\": require(`./assets/icons/white/search-on.png`),\n\t\t\t\"send.png\": require(`./assets/icons/white/send.png`),\n\t\t\t\"settings.png\": require(`./assets/icons/white/settings.png`),\n\t\t\t\"stickers.png\": require(`./assets/icons/white/stickers.png`),\n\t\t\t\"stop.png\": require(`./assets/icons/white/stop.png`),\n\t\t\t\"suprise.png\": require(`./assets/icons/white/suprise.png`),\n\t\t\t\"tag-user.png\": require(`./assets/icons/white/tag-user.png`),\n\t\t\t\"text-background-off.png\": require(`./assets/icons/white/text-background-off.png`),\n\t\t\t\"text-background-on.png\": require(`./assets/icons/white/text-background-on.png`),\n\t\t\t\"text-center.png\": require(`./assets/icons/white/text-center.png`),\n\t\t\t\"text-effect.png\": require(`./assets/icons/white/text-effect.png`),\n\t\t\t\"text-left.png\": require(`./assets/icons/white/text-left.png`),\n\t\t\t\"text-right.png\": require(`./assets/icons/white/text-right.png`),\n\t\t\t\"tv.png\": require(`./assets/icons/white/tv.png`)\n\t\t}\n\t}\n};\n'Instagram/components/InstaIcon.js'\n:import React from 'react';\nimport { Image } from 'react-native';\n\nimport Assets from '../Assets';\n\nexport default class InstaIcon extends React.PureComponent {\n  render() {\n    const {\n      name,\n      active,\n      disabled,\n      size,\n      color = 'white',\n      style,\n      ...props\n    } = this.props;\n    if (!name) {\n      return null;\n    }\n    const colorStyle = [\n      {\n        opacity: disabled ? 0.5 : 1,\n        width: size,\n        height: size,\n        resizeMode: 'contain',\n\n        flex: size === undefined ? 1 : undefined,\n      },\n      style,\n    ];\n\n    let icon = Assets.icons[color][name + '.png'];\n    if (active && Assets.icons[color][name + '-on' + '.png']) {\n      icon = Assets.icons[color][name + '-on' + '.png'];\n    } else if (Assets.icons[color][name + '-off' + '.png']) {\n      icon = Assets.icons[color][name + '-off' + '.png'];\n    }\n    return <Image source={icon} style={colorStyle} {...props} />;\n  }\n}\n\n'Instagram/components/FeedList.js'\n:import PropTypes from 'prop-types';\nimport React from 'react';\nimport { Animated, FlatList, StyleSheet, View } from 'react-native';\n\nimport { Stories } from '../constants/Posts';\nimport FeedListFooter from './FeedListFooter';\nimport Item from './Item';\nimport StorySlider from './StorySlider';\n\nexport const profileImageSize = 32;\n\nexport default class FeedList extends React.Component {\n  static defaultProps = {\n    ListHeaderComponent: props => <StorySlider stories={Stories} />,\n  };\n\n  _scrollValue = new Animated.Value(0);\n  _scaleValue = new Animated.Value(1);\n  _gesturePosition = new Animated.ValueXY();\n  state = {\n    isDragging: false,\n  };\n\n  static childContextTypes = {\n    gesturePosition: PropTypes.object,\n    getScrollPosition: PropTypes.func,\n    scaleValue: PropTypes.object,\n  };\n\n  state = {\n    isDragging: false,\n  };\n\n  getChildContext() {\n    return {\n      gesturePosition: this._gesturePosition,\n      scaleValue: this._scaleValue,\n      getScrollPosition: () => {\n        return this._scrollValue.__getValue();\n      },\n    };\n  }\n\n  render() {\n    const { onPressFooter, ...props } = this.props;\n\n    let { isDragging, selectedPhoto } = this.state;\n    let onScroll = Animated.event([\n      { nativeEvent: { contentOffset: { y: this._scrollValue } } },\n    ]);\n\n    return (\n      <React.Fragment>\n        <FlatList\n          showsVerticalScrollIndicator={false}\n          style={{ backgroundColor: 'transparent' }}\n          ref={ref => (this.list = ref)}\n          scrollEventThrottle={16}\n          onScroll={onScroll}\n          scrollEnabled={!isDragging}\n          zoomScale={1}\n          bouncesZoom={false}\n          maximumZoomScale={1}\n          minimumZoomScale={1}\n          renderItem={({ item }) => (\n            <Item\n              isLarge={props.isLarge}\n              getParent={() => this.list}\n              isDragging={isDragging}\n              onGestureStart={selectedPhoto => {\n                this.setState({\n                  selectedPhoto,\n                  isDragging: true,\n                });\n              }}\n              onGestureRelease={() => this.setState({ isDragging: false })}\n              item={item}\n            />\n          )}\n          ListFooterComponent={props => (\n            <FeedListFooter {...props} onPress={onPressFooter} />\n          )}\n          keyExtractor={(item, index) => item.key + ' ' + index}\n          {...props}\n        />\n        {isDragging ? (\n          <SelectedPhoto\n            key={selectedPhoto ? selectedPhoto.photoURI : ''}\n            selectedPhoto={selectedPhoto}\n          />\n        ) : null}\n      </React.Fragment>\n    );\n  }\n}\n\nclass SelectedPhoto extends React.Component {\n  state = { isLoaded: false };\n\n  static contextTypes = {\n    gesturePosition: PropTypes.object,\n    scrollValue: PropTypes.object,\n    scaleValue: PropTypes.object,\n  };\n\n  render() {\n    let { selectedPhoto } = this.props;\n    let { isLoaded } = this.state;\n\n    let { gesturePosition, scaleValue } = this.context;\n\n    let animatedStyle = {\n      transform: gesturePosition.getTranslateTransform(),\n    };\n    animatedStyle.transform.push({\n      scale: scaleValue,\n    });\n\n    let imageStyle = [\n      {\n        position: 'absolute',\n        zIndex: 10,\n        width: selectedPhoto.measurement.w,\n        height: selectedPhoto.measurement.h,\n        opacity: isLoaded ? 1 : 0,\n      },\n      animatedStyle,\n    ];\n\n    let backgroundOpacityValue = scaleValue.interpolate({\n      inputRange: [1.0, 1.1, 2.0],\n      outputRange: [0.0, 0.15, 0.75],\n      extrapolate: 'clamp',\n    });\n\n    return (\n      <BodyPortal>\n        <View style={styles.root}>\n          <Animated.View\n            style={[\n              styles.background,\n              {\n                opacity: backgroundOpacityValue,\n              },\n            ]}\n          />\n          <Animated.Image\n            style={imageStyle}\n            onLoad={() => {\n              setTimeout(() => {\n                this.setState({ isLoaded: true });\n              });\n            }}\n            source={selectedPhoto.source}\n          />\n        </View>\n      </BodyPortal>\n    );\n  }\n}\n\nimport ReactDOM from 'react-dom';\n\nexport class BodyPortal extends React.PureComponent {\n  render() {\n    return ReactDOM.createPortal(this.props.children, global.document.body);\n  }\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    flex: 1,\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n  },\n  background: {\n    position: 'fixed',\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n    backgroundColor: 'black',\n  },\n});\n\n'Instagram/components/Item.js'\n:import PropTypes from 'prop-types';\nimport React from 'react';\nimport {\n  Animated,\n  Easing,\n  findNodeHandle,\n  PanResponder,\n  UIManager,\n  StyleSheet,\n  View,\n} from 'react-native';\n\nimport DisableBodyScrollingView from './DisableScrolling';\nimport ItemFooter from './ItemFooter';\nimport ItemHeader from './ItemHeader';\nimport ItemImage from './ItemImage';\n\nexport function pow2abs(a, b) {\n  return Math.pow(Math.abs(a - b), 2);\n}\n\nexport function getDistance(touches) {\n  const [a, b] = touches;\n  if (a == null || b == null) {\n    return 0;\n  }\n  return Math.sqrt(pow2abs(a.pageX, b.pageX) + pow2abs(a.pageY, b.pageY));\n}\n\nexport function getPosition(touches) {\n  const [a, b] = touches;\n  if (a == null || b == null) {\n    return { x: 0, y: 0 };\n  }\n  return { x: a.pageX, y: a.pageY };\n}\n\nexport function getDeltaTranslation(position, initial) {\n  return { x: position.x - initial.x, y: position.y - initial.y };\n}\n\nconst SCALE_MULTIPLIER = 1;\n\nexport function getScale(currentDistance, initialDistance) {\n  return (currentDistance / initialDistance) * SCALE_MULTIPLIER;\n}\n\nexport function measureNode(node, parent) {\n  return new Promise((resolve, reject) => {\n    UIManager.measureLayout(\n      node,\n      parent || (node && node.parentNode),\n      e => reject(e),\n      (x, y, w, h, l, t) => {\n        resolve({ x, y, w, h });\n      },\n    );\n  });\n}\nconst RESTORE_ANIMATION_DURATION = 200;\nclass Item extends React.PureComponent {\n  _opacity = new Animated.Value(1);\n  _initialTouches = [];\n\n  static contextTypes = {\n    gesturePosition: PropTypes.object,\n    scaleValue: PropTypes.object,\n    getScrollPosition: PropTypes.func,\n  };\n\n  constructor(props) {\n    super(props);\n    this._generatePanHandlers();\n  }\n\n  _generatePanHandlers = () => {\n    this._gestureHandler = PanResponder.create({\n      onStartShouldSetResponderCapture: () => true,\n      onStartShouldSetPanResponderCapture: ({ nativeEvent }) => {\n        return nativeEvent.touches.length === 2;\n      },\n      onMoveShouldSetResponderCapture: () => true,\n      onMoveShouldSetPanResponderCapture: ({ nativeEvent }) => {\n        return nativeEvent.touches.length === 2;\n      },\n      onPanResponderGrant: this._startGesture,\n      onPanResponderMove: this._onGestureMove,\n      onPanResponderRelease: this._onGestureRelease,\n      onPanResponderTerminationRequest: () => {\n        return this._gestureInProgress == null;\n      },\n      onPanResponderTerminate: (event, gestureState) => {\n        return this._onGestureRelease(event, gestureState);\n      },\n    });\n  };\n\n  _startGesture = async (event, gestureState) => {\n\n    if (this._gestureInProgress) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    this._gestureInProgress = gestureState.stateID;\n    let { item, onGestureStart } = this.props;\n    let { gesturePosition, getScrollPosition } = this.context;\n    let { touches } = event.nativeEvent;\n\n    this._initialTouches = touches;\n\n    let selectedPhotoMeasurement = await this._measureSelectedPhoto();\n    this._selectedPhotoMeasurement = selectedPhotoMeasurement;\n    onGestureStart({\n      source: item.source,\n      measurement: selectedPhotoMeasurement,\n    });\n\n    gesturePosition.setValue({\n      x: 0,\n      y: 0,\n    });\n\n    gesturePosition.setOffset({\n      x: 0,\n      y: selectedPhotoMeasurement.y,\n    });\n\n    Animated.timing(this._opacity, {\n      toValue: 0,\n      duration: 200,\n    }).start();\n  };\n\n  _onGestureMove = (event, gestureState) => {\n    let { touches } = event.nativeEvent;\n    if (!this._gestureInProgress) {\n      return;\n    }\n\n    if (touches.length < 2) {\n\n      this._onGestureRelease(event, gestureState);\n      return;\n    }\n\n\n    let { gesturePosition, scaleValue } = this.context;\n    let { dx, dy } = gestureState;\n    let currentPosition = getPosition(touches);\n    let initialPosition = getPosition(this._initialTouches);\n\n    const { x, y } = getDeltaTranslation(currentPosition, initialPosition);\n    gesturePosition.x.setValue(x);\n    gesturePosition.y.setValue(y);\n\n\n    let currentDistance = getDistance(touches);\n    let initialDistance = getDistance(this._initialTouches);\n    let newScale = getScale(currentDistance, initialDistance);\n    scaleValue.setValue(Math.max(newScale, 1));\n  };\n\n  _onGestureRelease = (event, gestureState) => {\n    if (this._gestureInProgress !== gestureState.stateID) {\n      return;\n    }\n\n\n    this._gestureInProgress = null;\n    this._initialTouches = [];\n    let { onGestureRelease } = this.props;\n    let { gesturePosition, scaleValue, getScrollPosition } = this.context;\n\n    Animated.parallel([\n      Animated.timing(gesturePosition.x, {\n        toValue: 0,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n      Animated.timing(gesturePosition.y, {\n        toValue: 0,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n      Animated.timing(scaleValue, {\n        toValue: 1,\n        duration: RESTORE_ANIMATION_DURATION,\n        easing: Easing.linear,\n      }),\n    ]).start(() => {\n      gesturePosition.setOffset({\n        x: 0,\n        y:\n          (this._selectedPhotoMeasurement &&\n            this._selectedPhotoMeasurement.y) ||\n          0 - getScrollPosition(),\n      });\n\n      this._opacity.setValue(1);\n\n      requestAnimationFrame(() => {\n        onGestureRelease();\n      });\n    });\n  };\n\n  _measureSelectedPhoto = async () => {\n    let parent = findNodeHandle(this._parent);\n    let photoComponent = findNodeHandle(this._photoComponent);\n\n    try {\n      const photoMeasurement = await measureNode(photoComponent, parent);\n      const bodyRect = document.body.getBoundingClientRect();\n      const elemRect = photoComponent.getBoundingClientRect();\n      const offset = elemRect.top + window.scrollY;\n\n      return {\n        x: photoMeasurement.x,\n        y: offset,\n        w: photoMeasurement.w,\n        h: photoMeasurement.h,\n      };\n    } catch (error) {\n      console.log('ERROR', error);\n    }\n    return {};\n  };\n\n  render() {\n    const { imageWidth, imageHeight, item, isLarge } = this.props;\n\n    return (\n      <View\n        style={[\n          { backgroundColor: 'white' },\n          isLarge && {\n            borderColor: '#e6e6e6',\n            borderRadius: 3,\n            borderWidth: StyleSheet.hairlineWidth,\n            marginBottom: 15,\n          },\n        ]}\n        ref={parentNode => (this._parent = parentNode)}\n      >\n        <ItemHeader item={item} />\n        <DisableBodyScrollingView>\n          <Animated.View\n            {...this._gestureHandler.panHandlers}\n            testID=\"webkit-disable-touches\"\n            style={{\n              opacity: this._opacity,\n            }}\n          >\n            <ItemImage\n              ref={node => (this._photoComponent = node)}\n              imageWidth={imageWidth}\n              imageHeight={imageHeight}\n              source={item.source}\n            />\n          </Animated.View>\n        </DisableBodyScrollingView>\n\n        <ItemFooter item={item} />\n      </View>\n    );\n  }\n}\nexport default Item;\n",
        "gt": [
            "'Instagram/Assets.js'",
            "'Instagram/components/InstaIcon.js'",
            "'Instagram/components/InstaHeaderButton.js'",
            "'Instagram/components/ItemHeader.js'",
            "'Instagram/components/Item.js'",
            "'Instagram/components/FeedList.js'"
        ]
    },
    {
        "files": [
            "'ProjectFlowerbed/src/js/systems/assets/AssetLoadingSystem.js'",
            "'ProjectFlowerbed/src/js/systems/core/GameStateUpdateSystem.js'",
            "'ProjectFlowerbed/src/js/ECSYConfig.js'"
        ],
        "content": "'ProjectFlowerbed/src/js/systems/assets/AssetLoadingSystem.js'\n:\n\nimport * as THREE from 'three';\nimport { AssetDatabaseComponent } from '../../components/AssetDatabaseComponent';\nimport { AssetReplacementSystem } from './AssetReplacementSystem';\nimport { AssetURLs } from '@config/AssetURLs';\nimport { AudioDatabase } from '../../lib/databases/AudioDatabase';\nimport { DEBUG_CONSTANTS } from '../../Constants';\nimport { LoadingScreenComponent } from '../../components/LoadingScreenComponent';\nimport { MeshDatabase } from '../../lib/databases/MeshDatabase';\nimport { MeshPreviewSystem } from '../mesh/MeshPreviewSystem';\nimport { System } from 'ecsy';\nimport { THREEGlobalComponent } from '../../components/THREEGlobalComponent';\nimport { getOnlyEntity } from '../../utils/entityUtils';\nimport { registerSystemsAfterLoad } from '../../ECSYConfig';\n\nconst kMaxMeshes = 568;\n\nexport class AssetLoadingSystem extends System {\n\tinit() {\n\t\tthis.hasStartedLoadingAssets = false;\n\t}\n\n\n\t_loadAssets() {\n\t\tconst gameManager = getOnlyEntity(this.queries.gameManager);\n\t\tconst threeConstants = gameManager.getComponent(THREEGlobalComponent);\n\n\t\tif (!getOnlyEntity(this.queries.loadingScreen, false)) {\n\t\t\tconst loadingScreenEntity = this.world.createEntity();\n\t\t\tloadingScreenEntity.addComponent(LoadingScreenComponent, {\n\t\t\t\ttotalMeshes: kMaxMeshes,\n\t\t\t});\n\t\t}\n\n\t\tthis.loadingManager = new THREE.LoadingManager(\n\t\t\t() => {},\n\t\t\t(_url, loaded, total) => {\n\t\t\t\tconst loadingScreen = getOnlyEntity(\n\t\t\t\t\tthis.queries.loadingScreen,\n\t\t\t\t).getMutableComponent(LoadingScreenComponent);\n\t\t\t\tloadingScreen.totalMeshes = Math.max(total, kMaxMeshes);\n\t\t\t\tloadingScreen.loadedMeshes = loaded;\n\t\t\t},\n\t\t);\n\n\n\t\tconst assetDatabaseEntity = this.world.createEntity();\n\t\tconst meshDatabase = new MeshDatabase(\n\t\t\tthreeConstants.renderer,\n\t\t\tthis.loadingManager,\n\t\t);\n\n\t\tassetDatabaseEntity.addComponent(AssetDatabaseComponent, {\n\t\t\tmeshes: meshDatabase,\n\t\t\taudio: new AudioDatabase(),\n\t\t});\n\n\t\tconst assetDatabaseComponent = assetDatabaseEntity.getMutableComponent(\n\t\t\tAssetDatabaseComponent,\n\t\t);\n\n\t\tthis.hasStartedLoadingAssets = true;\n\n\n\t\tlet shouldUseLocalhostServer = false;\n\t\tconst performLoad = async () => {\n\t\t\tconst promises = [];\n\t\t\tpromises.push(\n\t\t\t\tassetDatabaseComponent.loadAllMeshes(shouldUseLocalhostServer),\n\t\t\t);\n\t\t\tpromises.push(assetDatabaseComponent.loadAllAudio());\n\n\t\t\tawait Promise.all(promises);\n\t\t\tthis._onLoad();\n\n\t\t\tif (shouldUseLocalhostServer) {\n\t\t\t\tthis.world.registerSystem(MeshPreviewSystem);\n\t\t\t}\n\t\t};\n\t\tif (!DEBUG_CONSTANTS.ENABLE_LOCALHOST_ASSETS) {\n\t\t\tperformLoad();\n\t\t\treturn;\n\t\t}\n\n\n\t\tconst controller = new AbortController();\n\t\tconst timeoutId = setTimeout(() => controller.abort(), 1000);\n\t\tfetch('http:\n\t\t\t.then((_response) => {\n\n\t\t\t\tshouldUseLocalhostServer = true;\n\n\n\n\t\t\t\tAssetURLs.ADDITIONAL_MESH_DIRS.unshift('http:\n\n\t\t\t\tclearTimeout(timeoutId);\n\t\t\t})\n\t\t\t.catch((_e) => {\n\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tperformLoad();\n\t\t\t});\n\t}\n\n\t_onLoad() {\n\t\tthis.world.registerSystem(AssetReplacementSystem, { priority: -10 });\n\t\tregisterSystemsAfterLoad(this.world);\n\n\t\tconst loadingScreen = getOnlyEntity(\n\t\t\tthis.queries.loadingScreen,\n\t\t).getMutableComponent(LoadingScreenComponent);\n\t\tloadingScreen.isDoneLoading = true;\n\t}\n\n\texecute() {\n\t\tif (!this.hasStartedLoadingAssets) {\n\t\t\tthis._loadAssets();\n\t\t}\n\t}\n}\n\nAssetLoadingSystem.queries = {\n\tgameManager: {\n\t\tcomponents: [THREEGlobalComponent],\n\t},\n\tloadingScreen: {\n\t\tcomponents: [LoadingScreenComponent],\n\t},\n};\n\n'ProjectFlowerbed/src/js/systems/core/GameStateUpdateSystem.js'\n:\n\nimport { GameStateComponent } from '../../components/GameStateComponent';\nimport { System } from 'ecsy';\nimport { THREEGlobalComponent } from '../../components/THREEGlobalComponent';\nimport { getOnlyEntity } from 'src/js/utils/entityUtils';\n\nexport class GameStateUpdateSystem extends System {\n\tinit() {\n\t\tconst gameManager = getOnlyEntity(this.queries.gameManager);\n\t\tthis.gameStateComponent = gameManager.getMutableComponent(\n\t\t\tGameStateComponent,\n\t\t);\n\t\tthis.renderer = gameManager.getComponent(THREEGlobalComponent).renderer;\n\t}\n\n\texecute() {\n\t\tthis.gameStateComponent.interactionModeOverridden = false;\n\t\tconst xrSession = this.renderer.xr.getSession();\n\t\tif (!xrSession) {\n\t\t\tArray.from(document.getElementsByClassName('vr-button')).forEach(\n\t\t\t\t(button) => {\n\t\t\t\t\tbutton.disabled = !this.gameStateComponent.allAssetsLoaded;\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\t}\n}\n\nGameStateUpdateSystem.queries = {\n\tgameManager: {\n\t\tcomponents: [GameStateComponent, THREEGlobalComponent],\n\t},\n};\n\n'ProjectFlowerbed/src/js/ECSYConfig.js'\n:\n\nimport {\n\tAerialFaunaGroupComponent,\n\tAerialFaunaMovementComponent,\n\tWaterFaunaGroupComponent,\n\tWaterFaunaMovementComponent,\n} from './components/FaunaComponents';\nimport {\n\tCapsuleColliderComponent,\n\tCollisionAreaComponent,\n\tCollisionWorldComponent,\n\tStaticColliderComponent,\n\tStaticColliderResources,\n} from './components/ColliderComponents';\nimport {\n\tControlsPanelComponent,\n\tSettingsComponent,\n\tSettingsPanelComponent,\n} from './components/SettingsComponent';\nimport {\n\tCurvedRay,\n\tRayComponent,\n\tShortRay,\n\tStraightRay,\n} from './components/RayComponents';\nimport {\n\tEnvironmentProp,\n\tHovered,\n\tIsActive,\n\tLight,\n\tMainEnvironment,\n\tPressed,\n} from './components/GameObjectTagComponents';\nimport {\n\tInstancedMeshComponent,\n\tInstancedMeshInstanceComponent,\n} from './components/InstancedMeshComponent';\nimport {\n\tLoopingAudioComponent,\n\tLoopingAudioResources,\n\tOneshotAudioComponent,\n\tPlaylistAudioComponent,\n\tPlaylistAudioResources,\n} from './components/AudioComponents';\nimport {\n\tMorphTargetAnimationComponent,\n\tMorphTargetMeshInitialized,\n} from './components/MorphTargetAnimationComponent';\nimport {\n\tNUXMovementTriggerArea,\n\tNUXPanelComponent,\n\tNUXStateComponent,\n} from './components/NUXStateComponent';\nimport {\n\tPhotoComponent,\n\tPhotoMenuComponent,\n\tScreenshotCameraComponent,\n} from './components/ScreenshotCameraComponent';\nimport {\n\tPickedPlantComponent,\n\tPlantGrowingComponent,\n\tPlantShrinkingComponent,\n\tPlantTinyColliderComponent,\n\tPlantedComponent,\n\tPlantingStateComponent,\n\tSeedAnimationComponent,\n} from './components/PlantingComponents';\nimport {\n\tPlayerColliderComponent,\n\tPlayerStateComponent,\n} from './components/PlayerStateComponent';\nimport {\n\tSeedComponent,\n\tSeedbagComponent,\n\tSeedboxButtonComponent,\n\tSeedboxComponent,\n} from './components/SeedboxComponents';\nimport {\n\tUIPanelComponent,\n\tUIPanelMedia,\n\tUIPanelResources,\n} from './components/UIPanelComponent';\n\nimport { AerialFaunaCreationSystem } from './systems/fauna/AerialFaunaCreationSystem';\nimport { AerialFaunaMovementSystem } from './systems/fauna/AerialFaunaMovementSystem';\nimport { AmbientSoundCreationSystem } from './systems/audio/AmbientSoundCreationSystem';\nimport { AssetDatabaseComponent } from './components/AssetDatabaseComponent';\nimport { AssetLoadingSystem } from './systems/assets/AssetLoadingSystem';\nimport { AudioSystem } from './systems/audio/AudioSystem';\nimport { BootstrapSessionSystem } from './systems/core/BootstrapSessionSystem';\nimport { CameraHandContextualNUXSystem } from './systems/hands/CameraHandContextualNUXSystem';\nimport { CameraPhotoGrabTooltipSystem } from './systems/ui/progressiveTooltips/CameraPhotoGrabTooltipSystem';\nimport { CollisionAreaSystem } from './systems/collisions/CollisionAreaSystems';\nimport { CollisionWorldSystem } from './systems/collisions/CollisionSystem';\nimport { ControlsPanelSystem } from './systems/settings/ControlsPanelSystem';\nimport { DEBUG_CONSTANTS } from './Constants';\nimport { DebugClearFlagsSystem } from './systems/landing-page/DebugClearFlagsSystem';\nimport { EnterVRTransitionSystem } from './systems/locomotion/EnterVRTransitionSystem';\nimport { FaunaAnimationComponent } from './components/FaunaAnimationComponent';\nimport { FaunaAnimationSystem } from './systems/fauna/FaunaAnimationSystem';\nimport { FaunaClusterComponent } from './components/FaunaClusterComponent';\nimport { FaunaColliderComponent } from './components/FaunaColliderComponent';\nimport { FaunaCreationSystem } from './systems/fauna/FaunaCreationSystem';\nimport { FaunaMovementBoundSamplerSystem } from './devTools/FaunaMovementBoundSamplerSystem';\nimport { GameStateComponent } from './components/GameStateComponent';\nimport { GameStateUpdateSystem } from './systems/core/GameStateUpdateSystem';\nimport { GardenManagementSystem } from './systems/landing-page/GardenManagementSystem';\nimport { GazeFollowSystem } from './systems/ui/GazeFollowSystem';\nimport { GazeFollowerComponent } from './components/GazeFollowerComponent';\nimport { HandAnimationSystem } from './systems/hands/HandAnimationSystem';\nimport { HandCreationSystem } from './systems/hands/HandCreationSystem';\nimport { HandNUXSystem } from './systems/hands/HandNUXSystem';\nimport { HandPoseExtractionSystem } from './devTools/HandPoseExtractorSystem';\nimport { IndicatorRingComponent } from './components/IndicatorRingComponent';\nimport { IndicatorRingSystem } from './systems/ui/IndicatorRingSystem';\nimport { JoystickMovementSystem } from './systems/locomotion/JoystickMovementSystem';\nimport { LoadingScreenComponent } from './components/LoadingScreenComponent';\nimport { LoadingScreenSystem } from './systems/landing-page/LoadingScreenSystem';\nimport { LocalSaveDataSystem } from './systems/saveLoad/SaveDataSystem';\nimport { LocomotionVignetteSystem } from './systems/locomotion/LocomotionVignetteSystem';\nimport { MeshIdComponent } from './components/AssetReplacementComponents';\nimport { MeshInstancingSystem } from './systems/mesh/MeshInstancingSystem';\nimport { MeshPreviewObject } from './components/MeshPreviewObjectComponent';\nimport { ModelOptimizeSystem } from './systems/mesh/ModelOptimizeSystem';\nimport { MorphTargetAnimationSystem } from './systems/fauna/MorphTargetAnimationSystem';\nimport { MovableFaunaComponent } from './components/MovableFaunaComponent';\nimport { MovableFaunaSystem } from './systems/fauna/MovableFaunaSystem';\nimport { MusicSystem } from './systems/audio/MusicSystem';\nimport { NUXCreationSystem } from './systems/ui/NUXCreationSystem';\nimport { NUXSystem } from './systems/ui/NUXSystem';\nimport { Object3DComponent } from './components/Object3DComponent';\nimport { ObjectFollowSystem } from './systems/ui/ObjectFollowSystem';\nimport { ObjectFollowerComponent } from './components/ObjectFollowerComponent';\nimport { OptimizedModelComponent } from './components/OptimizedModelComponent';\nimport { PerformanceOptionsComponent } from './components/PerformanceOptionsComponent';\nimport { PerformanceTestSystem } from './systems/performance/PerformanceTestSystem';\nimport { PhotoAutoDeleteSystem } from './systems/camera/PhotoAutoDeleteSystem';\nimport { PhotoMenuCreationSystem } from './systems/camera/PhotoMenuCreationSystem';\nimport { PhotoSystem } from './systems/camera/PhotoSystem';\nimport { PlantColliderSystem } from './systems/plants/PlantColliderSystem';\nimport { PlantGrowingSystem } from './systems/plants/PlantGrowingSystem';\nimport { PlantPickingSystem } from './systems/plants/PlantPickingSystem';\nimport { PlantShrinkingSystem } from './systems/plants/PlantShrinkingSystem';\nimport { PlantingArrowSystem } from './systems/plants/PlantingArrowSystem';\nimport { PlantingSystem } from './systems/plants/PlantingSystem';\nimport { PlayerPhysicsSystem } from './systems/core/PlayerPhysicsSystem';\nimport { PlaylistAudioSystem } from './systems/audio/PlaylistAudioSystem';\nimport { PropsCalibrationSystem } from './devTools/PropsCalibrationSystem';\nimport { RayDrawingSystem } from './systems/raycasting/RayDrawingSystem';\nimport { RaycastSystem } from './systems/raycasting/RaycastSystem';\nimport { RenderingSystem } from './systems/core/RenderingSystem';\nimport { ResetNUXSystem } from './systems/ui/ResetNUXSystem';\nimport { SavableObject } from './components/SaveDataComponents';\nimport { SaveControllerSystem } from './systems/saveLoad/SaveControllerSystem';\nimport { SceneCreationSystem } from './systems/core/SceneCreationSystem';\nimport { SceneLightingComponent } from './components/SceneLightingComponent';\nimport { ScreenshotCameraCreationSystem } from './systems/camera/ScreenshotCameraCreationSystem';\nimport { ScreenshotCameraSystem } from './systems/camera/ScreenshotCameraSystem';\nimport { SeedAnimationSystem } from './systems/plants/SeedAnimationSystem';\nimport { SeedboxChangePageTooltipSystem } from './systems/ui/progressiveTooltips/SeedboxChangePageTooltipSystem';\nimport { SeedboxCreationSystem } from './systems/seedbox/SeedboxCreationSystem';\nimport { SeedboxFocusDetectionSystem } from './systems/seedbox/SeedboxFocusDetectionSystem';\nimport { SeedboxHandContextualNUXSystem } from './systems/hands/SeedboxHandContextualNUXSystem';\nimport { SeedboxSystem } from './systems/seedbox/SeedboxSystem';\nimport { SelectionWheelComponent } from './components/SelectionWheelComponent';\nimport { SelectionWheelCreationSystem } from './systems/selectionWheels/SelectionWheelCreationSystem';\nimport { SelectionWheelSystem } from './systems/selectionWheels/SelectionWheelSystem';\nimport { SessionComponent } from './components/SessionComponent';\nimport { SettingsCreationSystem } from './systems/settings/SettingsCreationSystem';\nimport { SettingsSystem } from './systems/settings/SettingsSystem';\nimport { SkeletonAnimationComponent } from './components/SkeletonAnimationComponent';\nimport { SnapTurnSystem } from './systems/locomotion/SnapTurnSystem';\nimport { StationaryFaunaComponent } from './components/StationaryFaunaComponent';\nimport { StationaryFaunaSystem } from './systems/fauna/StationaryFaunaSystem';\nimport { THREEGlobalComponent } from './components/THREEGlobalComponent';\nimport { TeleportationSystem } from './systems/locomotion/TeleportationSystem';\nimport { UIPanelInteractionSystem } from './systems/ui/UIPanelInteractionSystem';\nimport { UIPanelMediaSystem } from './systems/ui/UIPanelMediaSystem';\nimport { UIPanelPreviewSystem } from './systems/ui/UIPanelPreviewSystem';\nimport { UIPanelResourcesSystem } from './systems/ui/UIPanelResourcesSystem';\nimport { UserIdentityComponent } from './components/UserIdentityComponent';\nimport { VrControllerComponent } from './components/VrControllerComponent';\nimport { VrInputSystem } from './systems/core/VrInputSystem';\nimport { WaterFaunaCreationSystem } from './systems/fauna/WaterFaunaCreationSystem';\nimport { WaterFaunaMovementSystem } from './systems/fauna/WaterFaunaMovementSystem';\nimport { WateringSystem } from './systems/plants/WateringSystem';\nimport { World } from 'ecsy';\n\nconst ENABLE_HAND_POSER = false;\n\nexport const setupECSY = () => {\n\tlet world = new World();\n\n\tregisterTagComponents(world);\n\n\tregisterComponents(world);\n\n\tregisterSystems(world);\n\n\treturn world;\n};\n\n\nconst registerTagComponents = (world) => {\n\tworld.registerComponent(Light);\n\tworld.registerComponent(Hovered);\n\tworld.registerComponent(Pressed);\n\tworld.registerComponent(IsActive);\n\tworld.registerComponent(StraightRay);\n\tworld.registerComponent(ShortRay);\n\tworld.registerComponent(CurvedRay);\n\tworld.registerComponent(MainEnvironment);\n\tworld.registerComponent(EnvironmentProp);\n\tworld.registerComponent(MorphTargetMeshInitialized);\n};\n\n\nconst registerComponents = (world) => {\n\tworld.registerComponent(VrControllerComponent);\n\tworld.registerComponent(Object3DComponent);\n\tworld.registerComponent(GameStateComponent);\n\tworld.registerComponent(PlayerStateComponent);\n\tworld.registerComponent(OptimizedModelComponent);\n\tworld.registerComponent(PerformanceOptionsComponent);\n\tworld.registerComponent(THREEGlobalComponent);\n\tworld.registerComponent(SeedComponent);\n\tworld.registerComponent(CollisionWorldComponent);\n\tworld.registerComponent(StaticColliderComponent);\n\tworld.registerComponent(StaticColliderResources);\n\tworld.registerComponent(CapsuleColliderComponent);\n\tworld.registerComponent(PlayerColliderComponent);\n\tworld.registerComponent(SeedboxComponent);\n\tworld.registerComponent(SeedboxButtonComponent);\n\tworld.registerComponent(GazeFollowerComponent);\n\tworld.registerComponent(ObjectFollowerComponent);\n\tworld.registerComponent(UIPanelComponent);\n\tworld.registerComponent(UIPanelResources);\n\tworld.registerComponent(UIPanelMedia);\n\tworld.registerComponent(NUXStateComponent);\n\tworld.registerComponent(NUXPanelComponent);\n\tworld.registerComponent(RayComponent);\n\tworld.registerComponent(IndicatorRingComponent);\n\tworld.registerComponent(PlantedComponent);\n\tworld.registerComponent(PickedPlantComponent);\n\tworld.registerComponent(SavableObject);\n\tworld.registerComponent(CollisionAreaComponent);\n\tworld.registerComponent(NUXMovementTriggerArea);\n\tworld.registerComponent(ScreenshotCameraComponent);\n\tworld.registerComponent(PhotoComponent);\n\tworld.registerComponent(PhotoMenuComponent);\n\tworld.registerComponent(AssetDatabaseComponent);\n\tworld.registerComponent(MeshIdComponent);\n\tworld.registerComponent(SelectionWheelComponent);\n\tworld.registerComponent(OneshotAudioComponent);\n\tworld.registerComponent(PlantGrowingComponent);\n\tworld.registerComponent(PlantShrinkingComponent);\n\tworld.registerComponent(PlantingStateComponent);\n\tworld.registerComponent(LoopingAudioComponent);\n\tworld.registerComponent(LoopingAudioResources);\n\tworld.registerComponent(PlaylistAudioComponent);\n\tworld.registerComponent(PlaylistAudioResources);\n\tworld.registerComponent(PlantTinyColliderComponent);\n\tworld.registerComponent(SeedAnimationComponent);\n\tworld.registerComponent(SeedbagComponent);\n\tworld.registerComponent(InstancedMeshComponent);\n\tworld.registerComponent(InstancedMeshInstanceComponent);\n\tworld.registerComponent(FaunaClusterComponent);\n\tworld.registerComponent(FaunaColliderComponent);\n\tworld.registerComponent(FaunaAnimationComponent);\n\tworld.registerComponent(MorphTargetAnimationComponent);\n\tworld.registerComponent(SkeletonAnimationComponent);\n\tworld.registerComponent(MovableFaunaComponent);\n\tworld.registerComponent(StationaryFaunaComponent);\n\tworld.registerComponent(MeshPreviewObject);\n\tworld.registerComponent(SceneLightingComponent, false);\n\tworld.registerComponent(LoadingScreenComponent);\n\tworld.registerComponent(UserIdentityComponent);\n\tworld.registerComponent(WaterFaunaMovementComponent);\n\tworld.registerComponent(WaterFaunaGroupComponent);\n\tworld.registerComponent(SettingsPanelComponent);\n\tworld.registerComponent(ControlsPanelComponent);\n\tworld.registerComponent(SettingsComponent);\n\tworld.registerComponent(AerialFaunaMovementComponent);\n\tworld.registerComponent(AerialFaunaGroupComponent);\n\tworld.registerComponent(SessionComponent);\n};\n\n\nconst registerSystems = (world) => {\n\tworld.registerSystem(GardenManagementSystem);\n\n\n\tworld.registerSystem(AssetLoadingSystem, { priority: -10 });\n\n\n\tworld.registerSystem(LoadingScreenSystem, { priority: -9 });\n\n\n\tworld.registerSystem(DebugClearFlagsSystem);\n\tworld.registerSystem(ResetNUXSystem);\n\n\n\tworld.registerSystem(RenderingSystem, { priority: 99 });\n};\n\n\nexport const registerSystemsAfterLoad = (world) => {\n\n\n\tworld.registerSystem(SceneCreationSystem, { priority: -2 });\n\n\n\n\tworld.registerSystem(ModelOptimizeSystem, { priority: -1 });\n\tworld.registerSystem(BootstrapSessionSystem);\n\n\n\tworld.registerSystem(UIPanelResourcesSystem);\n\tworld.registerSystem(UIPanelInteractionSystem);\n\tworld.registerSystem(UIPanelMediaSystem);\n\n\tworld.registerSystem(HandCreationSystem);\n\tworld.registerSystem(EnterVRTransitionSystem);\n\tworld.registerSystem(ScreenshotCameraCreationSystem);\n\tworld.registerSystem(PhotoMenuCreationSystem);\n\tworld.registerSystem(SelectionWheelCreationSystem);\n\tworld.registerSystem(SeedboxCreationSystem);\n\tworld.registerSystem(CollisionWorldSystem);\n\tworld.registerSystem(CollisionAreaSystem);\n\tworld.registerSystem(VrInputSystem);\n\tworld.registerSystem(HandAnimationSystem);\n\n\tworld.registerSystem(PlayerPhysicsSystem);\n\tworld.registerSystem(WateringSystem);\n\n\n\n\n\tworld.registerSystem(RaycastSystem);\n\n\n\n\tworld.registerSystem(GameStateUpdateSystem);\n\tworld.registerSystem(SelectionWheelSystem);\n\tworld.registerSystem(IndicatorRingSystem);\n\tworld.registerSystem(SnapTurnSystem);\n\tworld.registerSystem(TeleportationSystem);\n\tworld.registerSystem(HandNUXSystem);\n\tworld.registerSystem(SeedboxHandContextualNUXSystem);\n\tworld.registerSystem(CameraHandContextualNUXSystem);\n\tworld.registerSystem(JoystickMovementSystem);\n\tif (ENABLE_HAND_POSER) {\n\n\t\tworld.registerSystem(HandPoseExtractionSystem);\n\t}\n\n\tworld.registerSystem(GazeFollowSystem);\n\tworld.registerSystem(ObjectFollowSystem);\n\tworld.registerSystem(NUXCreationSystem);\n\tworld.registerSystem(SettingsCreationSystem);\n\n\tworld.registerSystem(SettingsSystem);\n\tworld.registerSystem(ControlsPanelSystem);\n\n\n\n\tworld.registerSystem(ScreenshotCameraSystem);\n\tworld.registerSystem(PhotoSystem);\n\tworld.registerSystem(PhotoAutoDeleteSystem);\n\tworld.registerSystem(PlantPickingSystem);\n\tworld.registerSystem(SeedboxFocusDetectionSystem);\n\tworld.registerSystem(SeedboxSystem);\n\tworld.registerSystem(PlantingSystem);\n\tworld.registerSystem(PlantingArrowSystem);\n\tworld.registerSystem(SeedAnimationSystem);\n\tworld.registerSystem(PlantGrowingSystem);\n\tworld.registerSystem(PlantShrinkingSystem);\n\tworld.registerSystem(PlantColliderSystem);\n\tworld.registerSystem(SaveControllerSystem);\n\tworld.registerSystem(RayDrawingSystem);\n\tworld.registerSystem(LocalSaveDataSystem);\n\tworld.registerSystem(WaterFaunaCreationSystem);\n\tworld.registerSystem(WaterFaunaMovementSystem);\n\tworld.registerSystem(AerialFaunaCreationSystem);\n\tworld.registerSystem(AerialFaunaMovementSystem);\n\tworld.registerSystem(FaunaAnimationSystem);\n\tworld.registerSystem(FaunaCreationSystem);\n\tworld.registerSystem(MovableFaunaSystem);\n\tworld.registerSystem(FaunaMovementBoundSamplerSystem);\n\tworld.registerSystem(StationaryFaunaSystem);\n\tworld.registerSystem(MorphTargetAnimationSystem);\n\tworld.registerSystem(PerformanceTestSystem);\n\tworld.registerSystem(LocomotionVignetteSystem);\n\tif (ENABLE_HAND_POSER) {\n\t\tworld.registerSystem(PropsCalibrationSystem);\n\t}\n\n\tworld.registerSystem(MeshInstancingSystem);\n};\n\n\nexport const registerSystemsAfterReady = (world) => {\n\n\n\n\tworld.registerSystem(AudioSystem);\n\n\tworld.registerSystem(AmbientSoundCreationSystem);\n\tworld.registerSystem(MusicSystem);\n\tworld.registerSystem(PlaylistAudioSystem);\n\n\n\n\tworld.registerSystem(NUXSystem);\n\n\tworld.registerSystem(SeedboxChangePageTooltipSystem);\n\tworld.registerSystem(CameraPhotoGrabTooltipSystem);\n\n\tif (DEBUG_CONSTANTS.ENABLE_UI_PREVIEW_SYSTEM) {\n\t\tworld.registerSystem(UIPanelPreviewSystem);\n\t}\n};\n",
        "gt": [
            "'ProjectFlowerbed/src/js/systems/core/GameStateUpdateSystem.js'",
            "'ProjectFlowerbed/src/js/ECSYConfig.js'",
            "'ProjectFlowerbed/src/js/systems/assets/AssetLoadingSystem.js'"
        ]
    },
    {
        "files": [
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/main.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/model/model.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/utils/bufferGeometryUtils.js'"
        ],
        "content": "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/main.js'\n:\nimport * as THREE from 'three';\nimport TWEEN from '@tweenjs/tween.js';\n\n\n\nimport Renderer from './components/renderer';\nimport Camera from './components/camera';\nimport Light from './components/light';\nimport Controls from './components/controls';\nimport Geometry from './components/geometry';\n\n\nimport Stats from './helpers/stats';\nimport MeshHelper from './helpers/meshHelper';\n\n\nimport Texture from './model/texture';\nimport Model from './model/model';\n\n\nimport Interaction from './managers/interaction';\nimport DatGUI from './managers/datGUI';\n\n\nimport Config from './../data/config';\n\n\n\nexport default class Main {\n  constructor(container) {\n\n    this.container = container;\n\n\n    this.clock = new THREE.Clock();\n\n\n    this.scene = new THREE.Scene();\n    this.scene.fog = new THREE.FogExp2(Config.fog.color, Config.fog.near);\n\n\n    if(window.devicePixelRatio) {\n      Config.dpr = window.devicePixelRatio;\n    }\n\n\n    this.renderer = new Renderer(this.scene, container);\n\n\n    this.camera = new Camera(this.renderer.threeRenderer);\n    this.controls = new Controls(this.camera.threeCamera, container);\n    this.light = new Light(this.scene);\n\n\n    const lights = ['ambient', 'directional', 'point', 'hemi'];\n    lights.forEach((light) => this.light.place(light));\n\n\n    this.geometry = new Geometry(this.scene);\n    this.geometry.make('plane')(150, 150, 10, 10);\n    this.geometry.place([0, -20, 0], [Math.PI / 2, 0, 0]);\n\n\n    if(Config.isDev && Config.isShowingStats) {\n      this.stats = new Stats(this.renderer);\n      this.stats.setUp();\n    }\n\n\n    if (Config.isDev) {\n      this.gui = new DatGUI(this)\n    }\n\n\n    this.texture = new Texture();\n\n\n    this.texture.load().then(() => {\n      this.manager = new THREE.LoadingManager();\n\n\n      this.model = new Model(this.scene, this.manager, this.texture.textures);\n      this.model.load(Config.models[Config.model.selected].type);\n\n\n      this.manager.onProgress = (item, loaded, total) => {\n        console.log(`${item}: ${loaded} ${total}`);\n      };\n\n\n      this.manager.onLoad = () => {\n\n        new Interaction(this.renderer.threeRenderer, this.scene, this.camera.threeCamera, this.controls.threeControls);\n\n\n        if(Config.isDev) {\n          this.meshHelper = new MeshHelper(this.scene, this.model.obj);\n          if (Config.mesh.enableHelper) this.meshHelper.enable();\n\n          this.gui.load(this, this.model.obj);\n        }\n\n\n        Config.isLoaded = true;\n        this.container.querySelector('#loading').style.display = 'none';\n      };\n    });\n\n\n    this.render();\n  }\n\n  render() {\n\n    if(Config.isDev && Config.isShowingStats) {\n      Stats.start();\n    }\n\n\n    this.renderer.render(this.scene, this.camera.threeCamera);\n\n\n    if(Config.isDev && Config.isShowingStats) {\n      Stats.end();\n    }\n\n\n\n\n\n    TWEEN.update();\n    this.controls.threeControls.update();\n\n\n    requestAnimationFrame(this.render.bind(this));\n  }\n}\n\n'ThreeJS-Webpack-ES6-Boilerplate/src/js/app.js'\n:import Config from './data/config';\nimport Detector from './utils/detector';\nimport Main from './app/main';\n\n\nimport './../css/app.scss';\n\n\nif(__ENV__ === 'dev') {\n  console.log('----- RUNNING IN DEV ENVIRONMENT! -----');\n\n  Config.isDev = true;\n}\n\nfunction init() {\n\n  if(!Detector.webgl) {\n    Detector.addGetWebGLMessage();\n  } else {\n    const container = document.getElementById('appContainer');\n    new Main(container);\n  }\n}\n\ninit();\n\n'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/model/model.js'\n:import * as THREE from 'three';\n\nimport Material from '../components/material';\nimport Helpers from '../../utils/helpers';\nimport { BufferGeometryUtils } from '../../utils/bufferGeometryUtils';\nimport { GLTFLoader } from '../loaders/GLTFLoader';\nimport Config from '../../data/config';\n\n\nexport default class Model {\n  constructor(scene, manager, textures) {\n    this.scene = scene;\n    this.textures = textures;\n    this.manager = manager;\n\n    this.obj = null;\n    this.ref = null;\n  }\n\n  load(type) {\n\n\n    switch (type) {\n      case 'gltf':\n\n        new GLTFLoader(this.manager).load(\n          Config.models[Config.model.selected].path,\n          (gltf) => {\n            const scene = gltf.scene;\n            let mesh;\n\n            if (Config.shadow.enabled) {\n              scene.traverse(function(node) {\n                if (node.isMesh || node.isLight) node.castShadow = true;\n                if (node.isMesh) {\n                  node.material.wireframe = Config.mesh.wireframe;\n                  mesh = node;\n                }\n              });\n            }\n\n            this.obj = mesh;\n\n            BufferGeometryUtils.computeTangents(mesh.geometry);\n\n            var group = new THREE.Group();\n            group.scale.multiplyScalar(0.25);\n            this.scene.add( group );\n\n            this.ref = group;\n\n\n            group.updateMatrixWorld(true);\n            group.add(mesh);\n\n\n            this.scene.add(scene);\n          },\n          Helpers.logProgress(),\n          Helpers.logError()\n        );\n        break;\n\n      case 'object':\n\n        new THREE.ObjectLoader(this.manager).load(\n          Config.models[Config.model.selected].path,\n          obj => {\n            obj.traverse(child => {\n              if(child instanceof THREE.Mesh) {\n\n                const material = new Material(0xffffff).standard;\n                material.map = this.textures.UV;\n                child.material = material;\n\n\n                if(Config.shadow.enabled) {\n                  child.receiveShadow = true;\n                  child.castShadow = true;\n                }\n              }\n            });\n\n\n            this.obj = obj;\n            this.ref = obj;\n\n            obj.scale.multiplyScalar(Config.models[Config.model.selected].scale);\n            this.scene.add(obj);\n          },\n          Helpers.logProgress(),\n          Helpers.logError()\n        );\n        break;\n    }\n  }\n\n  unload() {\n    this.scene.remove(this.ref);\n  }\n}\n\n'ThreeJS-Webpack-ES6-Boilerplate/src/js/utils/bufferGeometryUtils.js'\n:\n\nimport {\n  BufferAttribute,\n  BufferGeometry,\n  InterleavedBuffer,\n  InterleavedBufferAttribute,\n  TriangleFanDrawMode,\n  TriangleStripDrawMode,\n  TrianglesDrawMode,\n  Vector2,\n  Vector3,\n} from 'three';\n\nvar BufferGeometryUtils = {\n  computeTangents: function (geometry) {\n    var index = geometry.index;\n    var attributes = geometry.attributes;\n\n\n\n\n    if (\n      index === null ||\n      attributes.position === undefined ||\n      attributes.normal === undefined ||\n      attributes.uv === undefined\n    ) {\n      console.error(\n        'THREE.BufferGeometryUtils: .computeTangents() failed. Missing required attributes (index, position, normal or uv)'\n      );\n      return;\n    }\n\n    var indices = index.array;\n    var positions = attributes.position.array;\n    var normals = attributes.normal.array;\n    var uvs = attributes.uv.array;\n\n    var nVertices = positions.length / 3;\n\n    if (attributes.tangent === undefined) {\n      geometry.setAttribute('tangent', new BufferAttribute(new Float32Array(4 * nVertices), 4));\n    }\n\n    var tangents = attributes.tangent.array;\n\n    var tan1 = [],\n        tan2 = [];\n\n    for (var i = 0; i < nVertices; i++) {\n      tan1[i] = new Vector3();\n      tan2[i] = new Vector3();\n    }\n\n    var vA = new Vector3(),\n        vB = new Vector3(),\n        vC = new Vector3(),\n        uvA = new Vector2(),\n        uvB = new Vector2(),\n        uvC = new Vector2(),\n        sdir = new Vector3(),\n        tdir = new Vector3();\n\n    function handleTriangle(a, b, c) {\n      vA.fromArray(positions, a * 3);\n      vB.fromArray(positions, b * 3);\n      vC.fromArray(positions, c * 3);\n\n      uvA.fromArray(uvs, a * 2);\n      uvB.fromArray(uvs, b * 2);\n      uvC.fromArray(uvs, c * 2);\n\n      vB.sub(vA);\n      vC.sub(vA);\n\n      uvB.sub(uvA);\n      uvC.sub(uvA);\n\n      var r = 1.0 / (uvB.x * uvC.y - uvC.x * uvB.y);\n\n\n\n      if (!isFinite(r)) return;\n\n      sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r);\n      tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r);\n\n      tan1[a].add(sdir);\n      tan1[b].add(sdir);\n      tan1[c].add(sdir);\n\n      tan2[a].add(tdir);\n      tan2[b].add(tdir);\n      tan2[c].add(tdir);\n    }\n\n    var groups = geometry.groups;\n\n    if (groups.length === 0) {\n      groups = [\n        {\n          start: 0,\n          count: indices.length,\n        },\n      ];\n    }\n\n    for (var i = 0, il = groups.length; i < il; ++i) {\n      var group = groups[i];\n\n      var start = group.start;\n      var count = group.count;\n\n      for (var j = start, jl = start + count; j < jl; j += 3) {\n        handleTriangle(indices[j + 0], indices[j + 1], indices[j + 2]);\n      }\n    }\n\n    var tmp = new Vector3(),\n        tmp2 = new Vector3();\n    var n = new Vector3(),\n        n2 = new Vector3();\n    var w, t, test;\n\n    function handleVertex(v) {\n      n.fromArray(normals, v * 3);\n      n2.copy(n);\n\n      t = tan1[v];\n\n\n\n      tmp.copy(t);\n      tmp.sub(n.multiplyScalar(n.dot(t))).normalize();\n\n\n\n      tmp2.crossVectors(n2, t);\n      test = tmp2.dot(tan2[v]);\n      w = test < 0.0 ? -1.0 : 1.0;\n\n      tangents[v * 4] = tmp.x;\n      tangents[v * 4 + 1] = tmp.y;\n      tangents[v * 4 + 2] = tmp.z;\n      tangents[v * 4 + 3] = w;\n    }\n\n    for (var i = 0, il = groups.length; i < il; ++i) {\n      var group = groups[i];\n\n      var start = group.start;\n      var count = group.count;\n\n      for (var j = start, jl = start + count; j < jl; j += 3) {\n        handleVertex(indices[j + 0]);\n        handleVertex(indices[j + 1]);\n        handleVertex(indices[j + 2]);\n      }\n    }\n  },\n\n\n  mergeBufferGeometries: function (geometries, useGroups) {\n    var isIndexed = geometries[0].index !== null;\n\n    var attributesUsed = new Set(Object.keys(geometries[0].attributes));\n    var morphAttributesUsed = new Set(Object.keys(geometries[0].morphAttributes));\n\n    var attributes = {};\n    var morphAttributes = {};\n\n    var morphTargetsRelative = geometries[0].morphTargetsRelative;\n\n    var mergedGeometry = new BufferGeometry();\n\n    var offset = 0;\n\n    for (var i = 0; i < geometries.length; ++i) {\n      var geometry = geometries[i];\n      var attributesCount = 0;\n\n\n\n      if (isIndexed !== (geometry.index !== null)) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' +\n          i +\n          '. All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.'\n        );\n        return null;\n      }\n\n\n\n      for (var name in geometry.attributes) {\n        if (!attributesUsed.has(name)) {\n          console.error(\n            'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' +\n            i +\n            '. All geometries must have compatible attributes; make sure \"' +\n            name +\n            '\" attribute exists among all geometries, or in none of them.'\n          );\n          return null;\n        }\n\n        if (attributes[name] === undefined) attributes[name] = [];\n\n        attributes[name].push(geometry.attributes[name]);\n\n        attributesCount++;\n      }\n\n\n\n      if (attributesCount !== attributesUsed.size) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' +\n          i +\n          '. Make sure all geometries have the same number of attributes.'\n        );\n        return null;\n      }\n\n\n\n      if (morphTargetsRelative !== geometry.morphTargetsRelative) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' +\n          i +\n          '. .morphTargetsRelative must be consistent throughout all geometries.'\n        );\n        return null;\n      }\n\n      for (var name in geometry.morphAttributes) {\n        if (!morphAttributesUsed.has(name)) {\n          console.error(\n            'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' +\n            i +\n            '.  .morphAttributes must be consistent throughout all geometries.'\n          );\n          return null;\n        }\n\n        if (morphAttributes[name] === undefined) morphAttributes[name] = [];\n\n        morphAttributes[name].push(geometry.morphAttributes[name]);\n      }\n\n\n\n      mergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n      mergedGeometry.userData.mergedUserData.push(geometry.userData);\n\n      if (useGroups) {\n        var count;\n\n        if (isIndexed) {\n          count = geometry.index.count;\n        } else if (geometry.attributes.position !== undefined) {\n          count = geometry.attributes.position.count;\n        } else {\n          console.error(\n            'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed with geometry at index ' +\n            i +\n            '. The geometry must have either an index or a position attribute'\n          );\n          return null;\n        }\n\n        mergedGeometry.addGroup(offset, count, i);\n\n        offset += count;\n      }\n    }\n\n\n\n    if (isIndexed) {\n      var indexOffset = 0;\n      var mergedIndex = [];\n\n      for (var i = 0; i < geometries.length; ++i) {\n        var index = geometries[i].index;\n\n        for (var j = 0; j < index.count; ++j) {\n          mergedIndex.push(index.getX(j) + indexOffset);\n        }\n\n        indexOffset += geometries[i].attributes.position.count;\n      }\n\n      mergedGeometry.setIndex(mergedIndex);\n    }\n\n\n\n    for (var name in attributes) {\n      var mergedAttribute = this.mergeBufferAttributes(attributes[name]);\n\n      if (!mergedAttribute) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' +\n          name +\n          ' attribute.'\n        );\n        return null;\n      }\n\n      mergedGeometry.setAttribute(name, mergedAttribute);\n    }\n\n\n\n    for (var name in morphAttributes) {\n      var numMorphTargets = morphAttributes[name][0].length;\n\n      if (numMorphTargets === 0) break;\n\n      mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n      mergedGeometry.morphAttributes[name] = [];\n\n      for (var i = 0; i < numMorphTargets; ++i) {\n        var morphAttributesToMerge = [];\n\n        for (var j = 0; j < morphAttributes[name].length; ++j) {\n          morphAttributesToMerge.push(morphAttributes[name][j][i]);\n        }\n\n        var mergedMorphAttribute = this.mergeBufferAttributes(morphAttributesToMerge);\n\n        if (!mergedMorphAttribute) {\n          console.error(\n            'THREE.BufferGeometryUtils: .mergeBufferGeometries() failed while trying to merge the ' +\n            name +\n            ' morphAttribute.'\n          );\n          return null;\n        }\n\n        mergedGeometry.morphAttributes[name].push(mergedMorphAttribute);\n      }\n    }\n\n    return mergedGeometry;\n  },\n\n\n  mergeBufferAttributes: function (attributes) {\n    var TypedArray;\n    var itemSize;\n    var normalized;\n    var arrayLength = 0;\n\n    for (var i = 0; i < attributes.length; ++i) {\n      var attribute = attributes[i];\n\n      if (attribute.isInterleavedBufferAttribute) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. InterleavedBufferAttributes are not supported.'\n        );\n        return null;\n      }\n\n      if (TypedArray === undefined) TypedArray = attribute.array.constructor;\n      if (TypedArray !== attribute.array.constructor) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.'\n        );\n        return null;\n      }\n\n      if (itemSize === undefined) itemSize = attribute.itemSize;\n      if (itemSize !== attribute.itemSize) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.'\n        );\n        return null;\n      }\n\n      if (normalized === undefined) normalized = attribute.normalized;\n      if (normalized !== attribute.normalized) {\n        console.error(\n          'THREE.BufferGeometryUtils: .mergeBufferAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.'\n        );\n        return null;\n      }\n\n      arrayLength += attribute.array.length;\n    }\n\n    var array = new TypedArray(arrayLength);\n    var offset = 0;\n\n    for (var i = 0; i < attributes.length; ++i) {\n      array.set(attributes[i].array, offset);\n\n      offset += attributes[i].array.length;\n    }\n\n    return new BufferAttribute(array, itemSize, normalized);\n  },\n\n\n  interleaveAttributes: function (attributes) {\n\n\n    var TypedArray;\n    var arrayLength = 0;\n    var stride = 0;\n\n\n    for (var i = 0, l = attributes.length; i < l; ++i) {\n      var attribute = attributes[i];\n\n      if (TypedArray === undefined) TypedArray = attribute.array.constructor;\n      if (TypedArray !== attribute.array.constructor) {\n        console.error('AttributeBuffers of different types cannot be interleaved');\n        return null;\n      }\n\n      arrayLength += attribute.array.length;\n      stride += attribute.itemSize;\n    }\n\n\n    var interleavedBuffer = new InterleavedBuffer(new TypedArray(arrayLength), stride);\n    var offset = 0;\n    var res = [];\n    var getters = ['getX', 'getY', 'getZ', 'getW'];\n    var setters = ['setX', 'setY', 'setZ', 'setW'];\n\n    for (var j = 0, l = attributes.length; j < l; j++) {\n      var attribute = attributes[j];\n      var itemSize = attribute.itemSize;\n      var count = attribute.count;\n      var iba = new InterleavedBufferAttribute(\n        interleavedBuffer,\n        itemSize,\n        offset,\n        attribute.normalized\n      );\n      res.push(iba);\n\n      offset += itemSize;\n\n\n\n      for (var c = 0; c < count; c++) {\n        for (var k = 0; k < itemSize; k++) {\n          iba[setters[k]](c, attribute[getters[k]](c));\n        }\n      }\n    }\n\n    return res;\n  },\n\n\n  estimateBytesUsed: function (geometry) {\n\n\n\n    var mem = 0;\n    for (var name in geometry.attributes) {\n      var attr = geometry.getAttribute(name);\n      mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n    }\n\n    var indices = geometry.getIndex();\n    mem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n    return mem;\n  },\n\n\n  mergeVertices: function (geometry, tolerance = 1e-4) {\n    tolerance = Math.max(tolerance, Number.EPSILON);\n\n\n\n    var hashToIndex = {};\n    var indices = geometry.getIndex();\n    var positions = geometry.getAttribute('position');\n    var vertexCount = indices ? indices.count : positions.count;\n\n\n    var nextIndex = 0;\n\n\n    var attributeNames = Object.keys(geometry.attributes);\n    var attrArrays = {};\n    var morphAttrsArrays = {};\n    var newIndices = [];\n    var getters = ['getX', 'getY', 'getZ', 'getW'];\n\n\n    for (var i = 0, l = attributeNames.length; i < l; i++) {\n      var name = attributeNames[i];\n\n      attrArrays[name] = [];\n\n      var morphAttr = geometry.morphAttributes[name];\n      if (morphAttr) {\n        morphAttrsArrays[name] = new Array(morphAttr.length).fill().map(() => []);\n      }\n    }\n\n\n    var decimalShift = Math.log10(1 / tolerance);\n    var shiftMultiplier = Math.pow(10, decimalShift);\n    for (var i = 0; i < vertexCount; i++) {\n      var index = indices ? indices.getX(i) : i;\n\n\n      var hash = '';\n      for (var j = 0, l = attributeNames.length; j < l; j++) {\n        var name = attributeNames[j];\n        var attribute = geometry.getAttribute(name);\n        var itemSize = attribute.itemSize;\n\n        for (var k = 0; k < itemSize; k++) {\n\n          hash += `${~~(attribute[getters[k]](index) * shiftMultiplier)},`;\n        }\n      }\n\n\n\n      if (hash in hashToIndex) {\n        newIndices.push(hashToIndex[hash]);\n      } else {\n\n        for (var j = 0, l = attributeNames.length; j < l; j++) {\n          var name = attributeNames[j];\n          var attribute = geometry.getAttribute(name);\n          var morphAttr = geometry.morphAttributes[name];\n          var itemSize = attribute.itemSize;\n          var newarray = attrArrays[name];\n          var newMorphArrays = morphAttrsArrays[name];\n\n          for (var k = 0; k < itemSize; k++) {\n            var getterFunc = getters[k];\n            newarray.push(attribute[getterFunc](index));\n\n            if (morphAttr) {\n              for (var m = 0, ml = morphAttr.length; m < ml; m++) {\n                newMorphArrays[m].push(morphAttr[m][getterFunc](index));\n              }\n            }\n          }\n        }\n\n        hashToIndex[hash] = nextIndex;\n        newIndices.push(nextIndex);\n        nextIndex++;\n      }\n    }\n\n\n\n    const result = geometry.clone();\n    for (var i = 0, l = attributeNames.length; i < l; i++) {\n      var name = attributeNames[i];\n      var oldAttribute = geometry.getAttribute(name);\n\n      var buffer = new oldAttribute.array.constructor(attrArrays[name]);\n      var attribute = new BufferAttribute(buffer, oldAttribute.itemSize, oldAttribute.normalized);\n\n      result.setAttribute(name, attribute);\n\n\n      if (name in morphAttrsArrays) {\n        for (var j = 0; j < morphAttrsArrays[name].length; j++) {\n          var oldMorphAttribute = geometry.morphAttributes[name][j];\n\n          var buffer = new oldMorphAttribute.array.constructor(morphAttrsArrays[name][j]);\n          var morphAttribute = new BufferAttribute(\n            buffer,\n            oldMorphAttribute.itemSize,\n            oldMorphAttribute.normalized\n          );\n          result.morphAttributes[name][j] = morphAttribute;\n        }\n      }\n    }\n\n\n\n    result.setIndex(newIndices);\n\n    return result;\n  },\n\n\n  toTrianglesDrawMode: function (geometry, drawMode) {\n    if (drawMode === TrianglesDrawMode) {\n      console.warn(\n        'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.'\n      );\n      return geometry;\n    }\n\n    if (drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode) {\n      var index = geometry.getIndex();\n\n\n\n      if (index === null) {\n        var indices = [];\n\n        var position = geometry.getAttribute('position');\n\n        if (position !== undefined) {\n          for (var i = 0; i < position.count; i++) {\n            indices.push(i);\n          }\n\n          geometry.setIndex(indices);\n          index = geometry.getIndex();\n        } else {\n          console.error(\n            'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.'\n          );\n          return geometry;\n        }\n      }\n\n\n\n      var numberOfTriangles = index.count - 2;\n      var newIndices = [];\n\n      if (drawMode === TriangleFanDrawMode) {\n\n\n        for (var i = 1; i <= numberOfTriangles; i++) {\n          newIndices.push(index.getX(0));\n          newIndices.push(index.getX(i));\n          newIndices.push(index.getX(i + 1));\n        }\n      } else {\n\n\n        for (var i = 0; i < numberOfTriangles; i++) {\n          if (i % 2 === 0) {\n            newIndices.push(index.getX(i));\n            newIndices.push(index.getX(i + 1));\n            newIndices.push(index.getX(i + 2));\n          } else {\n            newIndices.push(index.getX(i + 2));\n            newIndices.push(index.getX(i + 1));\n            newIndices.push(index.getX(i));\n          }\n        }\n      }\n\n      if (newIndices.length / 3 !== numberOfTriangles) {\n        console.error(\n          'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.'\n        );\n      }\n\n\n\n      var newGeometry = geometry.clone();\n      newGeometry.setIndex(newIndices);\n      newGeometry.clearGroups();\n\n      return newGeometry;\n    }\n\n    console.error('THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode);\n    return geometry;\n  },\n};\n\nexport { BufferGeometryUtils };\n",
        "gt": [
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/utils/bufferGeometryUtils.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/model/model.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app/main.js'",
            "'ThreeJS-Webpack-ES6-Boilerplate/src/js/app.js'"
        ]
    },
    {
        "files": [
            "'ProjectFlowerbed/src/js/systems/locomotion/EnterVRTransitionSystem.js'",
            "'ProjectFlowerbed/src/js/systems/raycasting/RaycastSystem.js'",
            "'ProjectFlowerbed/src/js/lib/objects/StraightRaycaster.js'",
            "'ProjectFlowerbed/src/js/ECSYConfig.js'"
        ],
        "content": "'ProjectFlowerbed/src/js/systems/locomotion/EnterVRTransitionSystem.js'\n:\n\nimport * as THREE from 'three';\n\nimport { PlayerStateComponent } from 'src/js/components/PlayerStateComponent';\nimport { SessionComponent } from '../../components/SessionComponent';\nimport { System } from 'ecsy';\nimport { THREEGlobalComponent } from 'src/js/components/THREEGlobalComponent';\nimport { getOnlyEntity } from 'src/js/utils/entityUtils';\nimport { registerSystemsAfterReady } from '../../ECSYConfig';\n\nexport class EnterVRTransitionSystem extends System {\n\tinit() {\n\t\tthis.mask = null;\n\t\tthis.maskTimer = 0;\n\n\t\tthis.hasRegisteredSystems = false;\n\t}\n\n\texecute(delta, _time) {\n\t\tif (!this.mask) {\n\t\t\tthis._createMask();\n\t\t}\n\n\t\tconst sessionState = getOnlyEntity(this.queries.session).getComponent(\n\t\t\tSessionComponent,\n\t\t);\n\t\tif (sessionState.isExperienceOpened) {\n\t\t\tthis.maskTimer += delta;\n\t\t\tthis.mask.visible = true;\n\t\t}\n\t\tif (this.maskTimer > 2) {\n\t\t\tthis.mask.material.opacity = 0;\n\t\t\tthis.mask.visible = false;\n\t\t} else if (this.maskTimer > 1) {\n\t\t\tthis.mask.material.opacity = 2 - this.maskTimer;\n\n\t\t\tif (!this.hasRegisteredSystems) {\n\t\t\t\tregisterSystemsAfterReady(this.world);\n\t\t\t\tthis.hasRegisteredSystems = true;\n\t\t\t}\n\t\t}\n\t}\n\n\t_createMask() {\n\t\tthis.queries.player.results.forEach((entity) => {\n\t\t\tconst playerHead = entity.getComponent(PlayerStateComponent).playerHead;\n\t\t\tthis.mask = new THREE.Mesh(\n\t\t\t\tnew THREE.SphereGeometry(0.4, 32, 16),\n\t\t\t\tnew THREE.MeshBasicMaterial({\n\t\t\t\t\tcolor: 0x000000,\n\t\t\t\t\tside: THREE.BackSide,\n\t\t\t\t\ttransparent: true,\n\t\t\t\t\tdepthWrite: false,\n\t\t\t\t}),\n\t\t\t);\n\t\t\tthis.mask.renderOrder = 1000;\n\t\t\tthis.mask.material.depthTest = false;\n\t\t\tthis.mask.material.depthWrite = false;\n\t\t\tthis.mask.frustumCulled = false;\n\n\t\t\tplayerHead.add(this.mask);\n\t\t});\n\t}\n}\n\nEnterVRTransitionSystem.queries = {\n\tgameManager: { components: [THREEGlobalComponent] },\n\tsession: { components: [SessionComponent] },\n\tplayer: { components: [PlayerStateComponent] },\n};\n\n'ProjectFlowerbed/src/js/systems/raycasting/RaycastSystem.js'\n:\n\nimport {\n\tCurvedRay,\n\tRayComponent,\n\tShortRay,\n\tStraightRay,\n} from '../../components/RayComponents';\n\nimport { CurvedRaycaster } from '../../lib/objects/CurvedRaycaster';\nimport { StraightRaycaster } from '../../lib/objects/StraightRaycaster';\nimport { System } from 'ecsy';\nimport { VrControllerComponent } from '../../components/VrControllerComponent';\n\nexport class RaycastSystem extends System {\n\tinit() {\n\t\tthis.straightRayEntity = null;\n\t\tthis.curvedRayEntity = null;\n\t\tthis.shortUIRayEntity = null;\n\t}\n\n\texecute(_delta, _time) {\n\t\tlet controllerInterface;\n\n\t\tthis.queries.controllers.results.forEach((entity) => {\n\t\t\tlet vrControllerComponent = entity.getComponent(VrControllerComponent);\n\t\t\tif (vrControllerComponent.handedness == 'right') {\n\t\t\t\tcontrollerInterface = vrControllerComponent.controllerInterface;\n\n\t\t\t\tif (!this.curvedRayEntity) {\n\t\t\t\t\tlet curvedRaycaster = new CurvedRaycaster();\n\t\t\t\t\tthis.curvedRayEntity = this.world.createEntity();\n\t\t\t\t\tthis.curvedRayEntity.addComponent(RayComponent, {\n\t\t\t\t\t\traycaster: curvedRaycaster,\n\t\t\t\t\t});\n\t\t\t\t\tthis.curvedRayEntity.addComponent(CurvedRay);\n\t\t\t\t}\n\n\t\t\t\tif (!this.straightRayEntity) {\n\t\t\t\t\tlet straightRaycaster = new StraightRaycaster();\n\t\t\t\t\tthis.straightRayEntity = this.world.createEntity();\n\t\t\t\t\tthis.straightRayEntity.addComponent(RayComponent, {\n\t\t\t\t\t\traycaster: straightRaycaster,\n\t\t\t\t\t});\n\t\t\t\t\tthis.straightRayEntity.addComponent(StraightRay);\n\t\t\t\t} else {\n\t\t\t\t\tthis.straightRayEntity.getComponent(\n\t\t\t\t\t\tRayComponent,\n\t\t\t\t\t).raycaster.endPointOverride = false;\n\t\t\t\t}\n\n\t\t\t\tif (!this.shortUIRayEntity) {\n\t\t\t\t\tlet straightRaycaster = new StraightRaycaster();\n\t\t\t\t\tstraightRaycaster.far = 0.2;\n\t\t\t\t\tthis.shortUIRayEntity = this.world.createEntity();\n\t\t\t\t\tthis.shortUIRayEntity.addComponent(RayComponent, {\n\t\t\t\t\t\traycaster: straightRaycaster,\n\t\t\t\t\t});\n\t\t\t\t\tthis.shortUIRayEntity.addComponent(StraightRay);\n\t\t\t\t\tthis.shortUIRayEntity.addComponent(ShortRay);\n\t\t\t\t} else {\n\t\t\t\t\tthis.shortUIRayEntity.getComponent(\n\t\t\t\t\t\tRayComponent,\n\t\t\t\t\t).raycaster.endPointOverride = false;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tif (!controllerInterface) return;\n\n\t\tlet direction = controllerInterface.getDirection();\n\t\tlet origin = controllerInterface.getPosition();\n\n\t\tthis.queries.rays.results.forEach((entity) => {\n\t\t\tlet rayComponent = entity.getComponent(RayComponent);\n\t\t\tif (rayComponent.originOverride) {\n\t\t\t\torigin = rayComponent.originOverride;\n\t\t\t}\n\t\t\tif (rayComponent.directionOverride) {\n\t\t\t\tdirection = rayComponent.directionOverride;\n\t\t\t}\n\t\t\trayComponent.raycaster.set(origin, direction);\n\t\t});\n\t}\n}\n\nRaycastSystem.queries = {\n\tcontrollers: {\n\t\tcomponents: [VrControllerComponent],\n\t},\n\trays: {\n\t\tcomponents: [RayComponent],\n\t},\n};\n\n'ProjectFlowerbed/src/js/lib/objects/StraightRaycaster.js'\n:\n\nimport { Raycaster, Vector3 } from 'three';\n\nimport { RAY_CONSTANTS } from '../../Constants';\n\nexport class StraightRaycaster extends Raycaster {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.firstHitOnly = true;\n\t\tthis.far = RAY_CONSTANTS.STRAIGHT_RAY_MAX_LENGTH;\n\t\tthis._pNear = new Vector3();\n\t\tthis._pFar = new Vector3();\n\t\tthis.renderedPoints = [this.pNear, this.pFar];\n\t}\n\n\tget pNear() {\n\t\treturn this.ray.at(this.near, this._pNear);\n\t}\n\n\tget pFar() {\n\t\treturn this.ray.at(this.far, this._pFar);\n\t}\n\n\tset(origin, direction) {\n\t\tthis.far = Math.min(this.far, RAY_CONSTANTS.STRAIGHT_RAY_MAX_LENGTH);\n\t\tsuper.set(origin, direction);\n\t}\n\n\tintersectObjects(objects, recursive = true, intersects = []) {\n\t\tsuper.intersectObjects(objects, recursive, intersects);\n\t\tif (intersects.length > 0 && intersects[0].distance <= 1) {\n\t\t\tthis.renderedPoints[1] = intersects[0].point;\n\t\t}\n\t\treturn intersects;\n\t}\n\n\n\tintersectCollisionWorld(collisionWorld, layerQuery) {\n\t\tlet kdRayHitResult = collisionWorld.raycastPoints(\n\t\t\tthis.pNear,\n\t\t\tthis.pFar,\n\t\t\tlayerQuery,\n\t\t);\n\n\t\tif (kdRayHitResult) {\n\t\t\tthis.renderedPoints[1] = kdRayHitResult.intersection.point.clone();\n\t\t\treturn kdRayHitResult;\n\t\t}\n\t}\n\n\tgetPoints(reset = false) {\n\t\tconst points = [...this.renderedPoints];\n\t\tif (reset) {\n\t\t\tthis.renderedPoints = [this.pNear, this.pFar];\n\t\t}\n\t\treturn points;\n\t}\n\n\n\tget renderedPortion() {\n\t\tif (this.renderedPoints) {\n\t\t\tlet intersectPoint = this.renderedPoints[1];\n\t\t\tlet renderedPortion =\n\t\t\t\tthis.pNear.distanceTo(intersectPoint) / (this.far - this.near);\n\t\t\treturn renderedPortion;\n\t\t} else {\n\t\t\treturn RAY_CONSTANTS.STRAIGHT_RAY_MAX_LENGTH;\n\t\t}\n\t}\n}\n\n'ProjectFlowerbed/src/js/ECSYConfig.js'\n:\n\nimport {\n\tAerialFaunaGroupComponent,\n\tAerialFaunaMovementComponent,\n\tWaterFaunaGroupComponent,\n\tWaterFaunaMovementComponent,\n} from './components/FaunaComponents';\nimport {\n\tCapsuleColliderComponent,\n\tCollisionAreaComponent,\n\tCollisionWorldComponent,\n\tStaticColliderComponent,\n\tStaticColliderResources,\n} from './components/ColliderComponents';\nimport {\n\tControlsPanelComponent,\n\tSettingsComponent,\n\tSettingsPanelComponent,\n} from './components/SettingsComponent';\nimport {\n\tCurvedRay,\n\tRayComponent,\n\tShortRay,\n\tStraightRay,\n} from './components/RayComponents';\nimport {\n\tEnvironmentProp,\n\tHovered,\n\tIsActive,\n\tLight,\n\tMainEnvironment,\n\tPressed,\n} from './components/GameObjectTagComponents';\nimport {\n\tInstancedMeshComponent,\n\tInstancedMeshInstanceComponent,\n} from './components/InstancedMeshComponent';\nimport {\n\tLoopingAudioComponent,\n\tLoopingAudioResources,\n\tOneshotAudioComponent,\n\tPlaylistAudioComponent,\n\tPlaylistAudioResources,\n} from './components/AudioComponents';\nimport {\n\tMorphTargetAnimationComponent,\n\tMorphTargetMeshInitialized,\n} from './components/MorphTargetAnimationComponent';\nimport {\n\tNUXMovementTriggerArea,\n\tNUXPanelComponent,\n\tNUXStateComponent,\n} from './components/NUXStateComponent';\nimport {\n\tPhotoComponent,\n\tPhotoMenuComponent,\n\tScreenshotCameraComponent,\n} from './components/ScreenshotCameraComponent';\nimport {\n\tPickedPlantComponent,\n\tPlantGrowingComponent,\n\tPlantShrinkingComponent,\n\tPlantTinyColliderComponent,\n\tPlantedComponent,\n\tPlantingStateComponent,\n\tSeedAnimationComponent,\n} from './components/PlantingComponents';\nimport {\n\tPlayerColliderComponent,\n\tPlayerStateComponent,\n} from './components/PlayerStateComponent';\nimport {\n\tSeedComponent,\n\tSeedbagComponent,\n\tSeedboxButtonComponent,\n\tSeedboxComponent,\n} from './components/SeedboxComponents';\nimport {\n\tUIPanelComponent,\n\tUIPanelMedia,\n\tUIPanelResources,\n} from './components/UIPanelComponent';\n\nimport { AerialFaunaCreationSystem } from './systems/fauna/AerialFaunaCreationSystem';\nimport { AerialFaunaMovementSystem } from './systems/fauna/AerialFaunaMovementSystem';\nimport { AmbientSoundCreationSystem } from './systems/audio/AmbientSoundCreationSystem';\nimport { AssetDatabaseComponent } from './components/AssetDatabaseComponent';\nimport { AssetLoadingSystem } from './systems/assets/AssetLoadingSystem';\nimport { AudioSystem } from './systems/audio/AudioSystem';\nimport { BootstrapSessionSystem } from './systems/core/BootstrapSessionSystem';\nimport { CameraHandContextualNUXSystem } from './systems/hands/CameraHandContextualNUXSystem';\nimport { CameraPhotoGrabTooltipSystem } from './systems/ui/progressiveTooltips/CameraPhotoGrabTooltipSystem';\nimport { CollisionAreaSystem } from './systems/collisions/CollisionAreaSystems';\nimport { CollisionWorldSystem } from './systems/collisions/CollisionSystem';\nimport { ControlsPanelSystem } from './systems/settings/ControlsPanelSystem';\nimport { DEBUG_CONSTANTS } from './Constants';\nimport { DebugClearFlagsSystem } from './systems/landing-page/DebugClearFlagsSystem';\nimport { EnterVRTransitionSystem } from './systems/locomotion/EnterVRTransitionSystem';\nimport { FaunaAnimationComponent } from './components/FaunaAnimationComponent';\nimport { FaunaAnimationSystem } from './systems/fauna/FaunaAnimationSystem';\nimport { FaunaClusterComponent } from './components/FaunaClusterComponent';\nimport { FaunaColliderComponent } from './components/FaunaColliderComponent';\nimport { FaunaCreationSystem } from './systems/fauna/FaunaCreationSystem';\nimport { FaunaMovementBoundSamplerSystem } from './devTools/FaunaMovementBoundSamplerSystem';\nimport { GameStateComponent } from './components/GameStateComponent';\nimport { GameStateUpdateSystem } from './systems/core/GameStateUpdateSystem';\nimport { GardenManagementSystem } from './systems/landing-page/GardenManagementSystem';\nimport { GazeFollowSystem } from './systems/ui/GazeFollowSystem';\nimport { GazeFollowerComponent } from './components/GazeFollowerComponent';\nimport { HandAnimationSystem } from './systems/hands/HandAnimationSystem';\nimport { HandCreationSystem } from './systems/hands/HandCreationSystem';\nimport { HandNUXSystem } from './systems/hands/HandNUXSystem';\nimport { HandPoseExtractionSystem } from './devTools/HandPoseExtractorSystem';\nimport { IndicatorRingComponent } from './components/IndicatorRingComponent';\nimport { IndicatorRingSystem } from './systems/ui/IndicatorRingSystem';\nimport { JoystickMovementSystem } from './systems/locomotion/JoystickMovementSystem';\nimport { LoadingScreenComponent } from './components/LoadingScreenComponent';\nimport { LoadingScreenSystem } from './systems/landing-page/LoadingScreenSystem';\nimport { LocalSaveDataSystem } from './systems/saveLoad/SaveDataSystem';\nimport { LocomotionVignetteSystem } from './systems/locomotion/LocomotionVignetteSystem';\nimport { MeshIdComponent } from './components/AssetReplacementComponents';\nimport { MeshInstancingSystem } from './systems/mesh/MeshInstancingSystem';\nimport { MeshPreviewObject } from './components/MeshPreviewObjectComponent';\nimport { ModelOptimizeSystem } from './systems/mesh/ModelOptimizeSystem';\nimport { MorphTargetAnimationSystem } from './systems/fauna/MorphTargetAnimationSystem';\nimport { MovableFaunaComponent } from './components/MovableFaunaComponent';\nimport { MovableFaunaSystem } from './systems/fauna/MovableFaunaSystem';\nimport { MusicSystem } from './systems/audio/MusicSystem';\nimport { NUXCreationSystem } from './systems/ui/NUXCreationSystem';\nimport { NUXSystem } from './systems/ui/NUXSystem';\nimport { Object3DComponent } from './components/Object3DComponent';\nimport { ObjectFollowSystem } from './systems/ui/ObjectFollowSystem';\nimport { ObjectFollowerComponent } from './components/ObjectFollowerComponent';\nimport { OptimizedModelComponent } from './components/OptimizedModelComponent';\nimport { PerformanceOptionsComponent } from './components/PerformanceOptionsComponent';\nimport { PerformanceTestSystem } from './systems/performance/PerformanceTestSystem';\nimport { PhotoAutoDeleteSystem } from './systems/camera/PhotoAutoDeleteSystem';\nimport { PhotoMenuCreationSystem } from './systems/camera/PhotoMenuCreationSystem';\nimport { PhotoSystem } from './systems/camera/PhotoSystem';\nimport { PlantColliderSystem } from './systems/plants/PlantColliderSystem';\nimport { PlantGrowingSystem } from './systems/plants/PlantGrowingSystem';\nimport { PlantPickingSystem } from './systems/plants/PlantPickingSystem';\nimport { PlantShrinkingSystem } from './systems/plants/PlantShrinkingSystem';\nimport { PlantingArrowSystem } from './systems/plants/PlantingArrowSystem';\nimport { PlantingSystem } from './systems/plants/PlantingSystem';\nimport { PlayerPhysicsSystem } from './systems/core/PlayerPhysicsSystem';\nimport { PlaylistAudioSystem } from './systems/audio/PlaylistAudioSystem';\nimport { PropsCalibrationSystem } from './devTools/PropsCalibrationSystem';\nimport { RayDrawingSystem } from './systems/raycasting/RayDrawingSystem';\nimport { RaycastSystem } from './systems/raycasting/RaycastSystem';\nimport { RenderingSystem } from './systems/core/RenderingSystem';\nimport { ResetNUXSystem } from './systems/ui/ResetNUXSystem';\nimport { SavableObject } from './components/SaveDataComponents';\nimport { SaveControllerSystem } from './systems/saveLoad/SaveControllerSystem';\nimport { SceneCreationSystem } from './systems/core/SceneCreationSystem';\nimport { SceneLightingComponent } from './components/SceneLightingComponent';\nimport { ScreenshotCameraCreationSystem } from './systems/camera/ScreenshotCameraCreationSystem';\nimport { ScreenshotCameraSystem } from './systems/camera/ScreenshotCameraSystem';\nimport { SeedAnimationSystem } from './systems/plants/SeedAnimationSystem';\nimport { SeedboxChangePageTooltipSystem } from './systems/ui/progressiveTooltips/SeedboxChangePageTooltipSystem';\nimport { SeedboxCreationSystem } from './systems/seedbox/SeedboxCreationSystem';\nimport { SeedboxFocusDetectionSystem } from './systems/seedbox/SeedboxFocusDetectionSystem';\nimport { SeedboxHandContextualNUXSystem } from './systems/hands/SeedboxHandContextualNUXSystem';\nimport { SeedboxSystem } from './systems/seedbox/SeedboxSystem';\nimport { SelectionWheelComponent } from './components/SelectionWheelComponent';\nimport { SelectionWheelCreationSystem } from './systems/selectionWheels/SelectionWheelCreationSystem';\nimport { SelectionWheelSystem } from './systems/selectionWheels/SelectionWheelSystem';\nimport { SessionComponent } from './components/SessionComponent';\nimport { SettingsCreationSystem } from './systems/settings/SettingsCreationSystem';\nimport { SettingsSystem } from './systems/settings/SettingsSystem';\nimport { SkeletonAnimationComponent } from './components/SkeletonAnimationComponent';\nimport { SnapTurnSystem } from './systems/locomotion/SnapTurnSystem';\nimport { StationaryFaunaComponent } from './components/StationaryFaunaComponent';\nimport { StationaryFaunaSystem } from './systems/fauna/StationaryFaunaSystem';\nimport { THREEGlobalComponent } from './components/THREEGlobalComponent';\nimport { TeleportationSystem } from './systems/locomotion/TeleportationSystem';\nimport { UIPanelInteractionSystem } from './systems/ui/UIPanelInteractionSystem';\nimport { UIPanelMediaSystem } from './systems/ui/UIPanelMediaSystem';\nimport { UIPanelPreviewSystem } from './systems/ui/UIPanelPreviewSystem';\nimport { UIPanelResourcesSystem } from './systems/ui/UIPanelResourcesSystem';\nimport { UserIdentityComponent } from './components/UserIdentityComponent';\nimport { VrControllerComponent } from './components/VrControllerComponent';\nimport { VrInputSystem } from './systems/core/VrInputSystem';\nimport { WaterFaunaCreationSystem } from './systems/fauna/WaterFaunaCreationSystem';\nimport { WaterFaunaMovementSystem } from './systems/fauna/WaterFaunaMovementSystem';\nimport { WateringSystem } from './systems/plants/WateringSystem';\nimport { World } from 'ecsy';\n\nconst ENABLE_HAND_POSER = false;\n\nexport const setupECSY = () => {\n\tlet world = new World();\n\n\tregisterTagComponents(world);\n\n\tregisterComponents(world);\n\n\tregisterSystems(world);\n\n\treturn world;\n};\n\n\nconst registerTagComponents = (world) => {\n\tworld.registerComponent(Light);\n\tworld.registerComponent(Hovered);\n\tworld.registerComponent(Pressed);\n\tworld.registerComponent(IsActive);\n\tworld.registerComponent(StraightRay);\n\tworld.registerComponent(ShortRay);\n\tworld.registerComponent(CurvedRay);\n\tworld.registerComponent(MainEnvironment);\n\tworld.registerComponent(EnvironmentProp);\n\tworld.registerComponent(MorphTargetMeshInitialized);\n};\n\n\nconst registerComponents = (world) => {\n\tworld.registerComponent(VrControllerComponent);\n\tworld.registerComponent(Object3DComponent);\n\tworld.registerComponent(GameStateComponent);\n\tworld.registerComponent(PlayerStateComponent);\n\tworld.registerComponent(OptimizedModelComponent);\n\tworld.registerComponent(PerformanceOptionsComponent);\n\tworld.registerComponent(THREEGlobalComponent);\n\tworld.registerComponent(SeedComponent);\n\tworld.registerComponent(CollisionWorldComponent);\n\tworld.registerComponent(StaticColliderComponent);\n\tworld.registerComponent(StaticColliderResources);\n\tworld.registerComponent(CapsuleColliderComponent);\n\tworld.registerComponent(PlayerColliderComponent);\n\tworld.registerComponent(SeedboxComponent);\n\tworld.registerComponent(SeedboxButtonComponent);\n\tworld.registerComponent(GazeFollowerComponent);\n\tworld.registerComponent(ObjectFollowerComponent);\n\tworld.registerComponent(UIPanelComponent);\n\tworld.registerComponent(UIPanelResources);\n\tworld.registerComponent(UIPanelMedia);\n\tworld.registerComponent(NUXStateComponent);\n\tworld.registerComponent(NUXPanelComponent);\n\tworld.registerComponent(RayComponent);\n\tworld.registerComponent(IndicatorRingComponent);\n\tworld.registerComponent(PlantedComponent);\n\tworld.registerComponent(PickedPlantComponent);\n\tworld.registerComponent(SavableObject);\n\tworld.registerComponent(CollisionAreaComponent);\n\tworld.registerComponent(NUXMovementTriggerArea);\n\tworld.registerComponent(ScreenshotCameraComponent);\n\tworld.registerComponent(PhotoComponent);\n\tworld.registerComponent(PhotoMenuComponent);\n\tworld.registerComponent(AssetDatabaseComponent);\n\tworld.registerComponent(MeshIdComponent);\n\tworld.registerComponent(SelectionWheelComponent);\n\tworld.registerComponent(OneshotAudioComponent);\n\tworld.registerComponent(PlantGrowingComponent);\n\tworld.registerComponent(PlantShrinkingComponent);\n\tworld.registerComponent(PlantingStateComponent);\n\tworld.registerComponent(LoopingAudioComponent);\n\tworld.registerComponent(LoopingAudioResources);\n\tworld.registerComponent(PlaylistAudioComponent);\n\tworld.registerComponent(PlaylistAudioResources);\n\tworld.registerComponent(PlantTinyColliderComponent);\n\tworld.registerComponent(SeedAnimationComponent);\n\tworld.registerComponent(SeedbagComponent);\n\tworld.registerComponent(InstancedMeshComponent);\n\tworld.registerComponent(InstancedMeshInstanceComponent);\n\tworld.registerComponent(FaunaClusterComponent);\n\tworld.registerComponent(FaunaColliderComponent);\n\tworld.registerComponent(FaunaAnimationComponent);\n\tworld.registerComponent(MorphTargetAnimationComponent);\n\tworld.registerComponent(SkeletonAnimationComponent);\n\tworld.registerComponent(MovableFaunaComponent);\n\tworld.registerComponent(StationaryFaunaComponent);\n\tworld.registerComponent(MeshPreviewObject);\n\tworld.registerComponent(SceneLightingComponent, false);\n\tworld.registerComponent(LoadingScreenComponent);\n\tworld.registerComponent(UserIdentityComponent);\n\tworld.registerComponent(WaterFaunaMovementComponent);\n\tworld.registerComponent(WaterFaunaGroupComponent);\n\tworld.registerComponent(SettingsPanelComponent);\n\tworld.registerComponent(ControlsPanelComponent);\n\tworld.registerComponent(SettingsComponent);\n\tworld.registerComponent(AerialFaunaMovementComponent);\n\tworld.registerComponent(AerialFaunaGroupComponent);\n\tworld.registerComponent(SessionComponent);\n};\n\n\nconst registerSystems = (world) => {\n\tworld.registerSystem(GardenManagementSystem);\n\n\n\tworld.registerSystem(AssetLoadingSystem, { priority: -10 });\n\n\n\tworld.registerSystem(LoadingScreenSystem, { priority: -9 });\n\n\n\tworld.registerSystem(DebugClearFlagsSystem);\n\tworld.registerSystem(ResetNUXSystem);\n\n\n\tworld.registerSystem(RenderingSystem, { priority: 99 });\n};\n\n\nexport const registerSystemsAfterLoad = (world) => {\n\n\n\tworld.registerSystem(SceneCreationSystem, { priority: -2 });\n\n\n\n\tworld.registerSystem(ModelOptimizeSystem, { priority: -1 });\n\tworld.registerSystem(BootstrapSessionSystem);\n\n\n\tworld.registerSystem(UIPanelResourcesSystem);\n\tworld.registerSystem(UIPanelInteractionSystem);\n\tworld.registerSystem(UIPanelMediaSystem);\n\n\tworld.registerSystem(HandCreationSystem);\n\tworld.registerSystem(EnterVRTransitionSystem);\n\tworld.registerSystem(ScreenshotCameraCreationSystem);\n\tworld.registerSystem(PhotoMenuCreationSystem);\n\tworld.registerSystem(SelectionWheelCreationSystem);\n\tworld.registerSystem(SeedboxCreationSystem);\n\tworld.registerSystem(CollisionWorldSystem);\n\tworld.registerSystem(CollisionAreaSystem);\n\tworld.registerSystem(VrInputSystem);\n\tworld.registerSystem(HandAnimationSystem);\n\n\tworld.registerSystem(PlayerPhysicsSystem);\n\tworld.registerSystem(WateringSystem);\n\n\n\n\n\tworld.registerSystem(RaycastSystem);\n\n\n\n\tworld.registerSystem(GameStateUpdateSystem);\n\tworld.registerSystem(SelectionWheelSystem);\n\tworld.registerSystem(IndicatorRingSystem);\n\tworld.registerSystem(SnapTurnSystem);\n\tworld.registerSystem(TeleportationSystem);\n\tworld.registerSystem(HandNUXSystem);\n\tworld.registerSystem(SeedboxHandContextualNUXSystem);\n\tworld.registerSystem(CameraHandContextualNUXSystem);\n\tworld.registerSystem(JoystickMovementSystem);\n\tif (ENABLE_HAND_POSER) {\n\n\t\tworld.registerSystem(HandPoseExtractionSystem);\n\t}\n\n\tworld.registerSystem(GazeFollowSystem);\n\tworld.registerSystem(ObjectFollowSystem);\n\tworld.registerSystem(NUXCreationSystem);\n\tworld.registerSystem(SettingsCreationSystem);\n\n\tworld.registerSystem(SettingsSystem);\n\tworld.registerSystem(ControlsPanelSystem);\n\n\n\n\tworld.registerSystem(ScreenshotCameraSystem);\n\tworld.registerSystem(PhotoSystem);\n\tworld.registerSystem(PhotoAutoDeleteSystem);\n\tworld.registerSystem(PlantPickingSystem);\n\tworld.registerSystem(SeedboxFocusDetectionSystem);\n\tworld.registerSystem(SeedboxSystem);\n\tworld.registerSystem(PlantingSystem);\n\tworld.registerSystem(PlantingArrowSystem);\n\tworld.registerSystem(SeedAnimationSystem);\n\tworld.registerSystem(PlantGrowingSystem);\n\tworld.registerSystem(PlantShrinkingSystem);\n\tworld.registerSystem(PlantColliderSystem);\n\tworld.registerSystem(SaveControllerSystem);\n\tworld.registerSystem(RayDrawingSystem);\n\tworld.registerSystem(LocalSaveDataSystem);\n\tworld.registerSystem(WaterFaunaCreationSystem);\n\tworld.registerSystem(WaterFaunaMovementSystem);\n\tworld.registerSystem(AerialFaunaCreationSystem);\n\tworld.registerSystem(AerialFaunaMovementSystem);\n\tworld.registerSystem(FaunaAnimationSystem);\n\tworld.registerSystem(FaunaCreationSystem);\n\tworld.registerSystem(MovableFaunaSystem);\n\tworld.registerSystem(FaunaMovementBoundSamplerSystem);\n\tworld.registerSystem(StationaryFaunaSystem);\n\tworld.registerSystem(MorphTargetAnimationSystem);\n\tworld.registerSystem(PerformanceTestSystem);\n\tworld.registerSystem(LocomotionVignetteSystem);\n\tif (ENABLE_HAND_POSER) {\n\t\tworld.registerSystem(PropsCalibrationSystem);\n\t}\n\n\tworld.registerSystem(MeshInstancingSystem);\n};\n\n\nexport const registerSystemsAfterReady = (world) => {\n\n\n\n\tworld.registerSystem(AudioSystem);\n\n\tworld.registerSystem(AmbientSoundCreationSystem);\n\tworld.registerSystem(MusicSystem);\n\tworld.registerSystem(PlaylistAudioSystem);\n\n\n\n\tworld.registerSystem(NUXSystem);\n\n\tworld.registerSystem(SeedboxChangePageTooltipSystem);\n\tworld.registerSystem(CameraPhotoGrabTooltipSystem);\n\n\tif (DEBUG_CONSTANTS.ENABLE_UI_PREVIEW_SYSTEM) {\n\t\tworld.registerSystem(UIPanelPreviewSystem);\n\t}\n};\n",
        "gt": [
            "'ProjectFlowerbed/src/js/lib/objects/StraightRaycaster.js'",
            "'ProjectFlowerbed/src/js/systems/raycasting/RaycastSystem.js'",
            "'ProjectFlowerbed/src/js/ECSYConfig.js'",
            "'ProjectFlowerbed/src/js/systems/locomotion/EnterVRTransitionSystem.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/modals.js'"
        ],
        "content": "'ruui/src/utils/helpers.js'\n:import { Dimensions } from 'react-native';\nimport type { SnappingDirection } from '../typeDefinition';\n\nexport function debounce(fn, duration) {\n\tlet timeout;\n\treturn function () {\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = null;\n\t\t\tfn.apply(this, arguments);\n\t\t}, duration);\n\t};\n}\n\nexport function uuid() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t\tconst r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\nexport function instantInterval(\n\tfunc: Function,\n\tinterval: Number,\n\ttrigger: Boolean = true,\n) {\n\tif (trigger) func.call(this);\n\treturn setInterval(func, interval);\n}\n\nexport function minGuard(value: Number, gap: Number = 0) {\n\treturn value < gap ? gap : value;\n}\n\nexport function maxGuard(value: Number, gap: Number) {\n\treturn value > gap ? gap : value;\n}\n\nconst defaultIteratee = item => item;\n\nexport function maxBy(array, iteratee = defaultIteratee) {\n\tlet result;\n\tif (array == null) return result;\n\n\tlet computed;\n\tfor (const value of array) {\n\t\tconst current = iteratee(value);\n\n\t\tif (current != null && (computed === undefined ? current === current : current > computed)) {\n\t\t\tcomputed = current;\n\t\t\tresult = value;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function clamp(value: Number, min: Number, max: Number) {\n\treturn min < max\n\t\t? (value < min ? min : value > max ? max : value)\n\t\t: (value < max ? max : value > min ? min : value);\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n\tif (x === y) {\n\t\treturn x !== 0 || y !== 0 || 1 / x === 1 / y;\n\t} else {\n\t\treturn x !== x && y !== y;\n\t}\n}\n\nexport function shallowEqual(objA, objB) {\n\tif (is(objA, objB)) return true;\n\n\tif (typeof objA !== 'object' || objA === null\n\t\t|| typeof objB !== 'object' || objB === null) {\n\t\treturn false;\n\t}\n\n\tconst keysA = Object.keys(objA);\n\tconst keysB = Object.keys(objB);\n\n\tif (keysA.length !== keysB.length) return false;\n\n\tfor (let i = 0; i < keysA.length; i += 1) {\n\t\tif (!hasOwn.call(objB, keysA[i])\n\t\t\t|| !is(objA[keysA[i]], objB[keysA[i]])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function valueAt(root = {}, path, defaultValue) {\n\tlet currentLevel = root;\n\tconst paths = path.split('.');\n\n\tfor (let i = 0; i < paths.length; i += 1) {\n\t\tif (i === paths.length - 1) {\n\t\t\treturn currentLevel[paths[i]] || defaultValue;\n\t\t} else {\n\t\t\tcurrentLevel = currentLevel[paths[i]];\n\t\t\tif (!currentLevel) return defaultValue;\n\t\t}\n\t}\n\n\treturn defaultValue;\n}\n\nfunction rawDirectionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n) {\n\tswitch (position) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tdefault:\n\t\treturn { top: 0, left: 0 };\n\t}\n}\n\n\nfunction screenGuard(position, componentSize, screenPadding = 5, moddedScreenSize = {}) {\n\tconst screenSize = { ...Dimensions.get('window'), ...moddedScreenSize },\n\t\t{ top, left, } = position;\n\tlet guardedTop = top, guardedLeft = left;\n\n\tif (top < 5) {\n\t\tguardedTop = 5;\n\t} else if (top + componentSize.height > screenSize.height - screenPadding) {\n\t\tguardedTop = screenSize.height - componentSize.height - screenPadding;\n\t}\n\n\tif (left < 5) {\n\t\tguardedLeft = 5;\n\t} else if (left + componentSize.width > screenSize.width - screenPadding) {\n\t\tguardedLeft = screenSize.width - componentSize.width - screenPadding;\n\t}\n\n\treturn { top: guardedTop, left: guardedLeft, };\n}\n\nexport function directionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n\tscreenSize,\n) {\n\treturn screenGuard(\n\t\trawDirectionSnap(top, left, width1, height1, width2, height2, position, spacing),\n\t\t{ width: width2, height: height2, }, 5, screenSize\n\t);\n}\n\nexport function arrowSnap(width, height, arrowSize, parentPosition: SnappingDirection, padding = 15) {\n\tswitch (parentPosition) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop: padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t\topacity: 0,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tleft: -arrowSize,\n\t\t\ttop: padding,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tdefault:\n\t\treturn {};\n\t}\n}\n\nexport function directionAnimatedConfigs(\n\tdirection, translateDistance, animation, finalBorderRadius = 3\n) {\n\tconst borderRadius = animation.interpolate({\n\t\t\tinputRange: [0, 0.5, 1], outputRange: [50, 15, finalBorderRadius],\n\t\t}),\n\t\topacity = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\textrapolate: 'clamp',\n\t\t});\n\n\tswitch (direction) {\n\tcase 'top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\tborderRadius: { borderRadius, },\n\t\t\ttransform: [],\n\t\t\topacity,\n\t\t};\n\tdefault:\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\t}\n}\n\n'ruui/src/utils/store/appAction.js'\n:import * as Actions from './actions';\nimport { uuid } from '../helpers';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function updateThemeConfigs(configs = {}) {\n\treturn { type: Actions.UpdateThemeConfigs, configs };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/components/modal.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, View, StyleSheet } from 'react-native';\n\nimport Selector from './selector';\nimport LoadingMask from './loadingMask';\nimport CloseableModal from './closeableModal';\nimport { valueAt } from '../utils';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tactive?: any,\n\ttype?: string,\n\tconfigs?: Object,\n\tmodalCount?: number,\n\tdispatch?: Function,\n\tanimationDelay?: Number,\n};\n\nexport default class RuuiModal extends Component {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactive: props.active,\n\t\t};\n\t\tthis.enterAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { active, animationDelay, } = this.props;\n\t\tsetTimeout(() => this.playTransition(active), animationDelay);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { active } = this.props;\n\t\tif (prevProps.active !== active) {\n\t\t\tthis.playTransition(active);\n\t\t}\n\t}\n\n\tplayTransition(active) {\n\t\tconst { configs = {}, } = this.props;\n\t\tconst nextValue = active ? 1 : 0;\n\n\t\tif (!active) {\n\t\t\tif (configs.instantClose) {\n\t\t\t\tthis.setState({ active: null });\n\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t} else {\n\t\t\t\tthis.playAnimation(nextValue, () => {\n\t\t\t\t\tthis.setState({ active: null });\n\t\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState({ active });\n\t\t\tthis.playAnimation(nextValue);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { configs = {}, modalCount, type: modalType } = this.props,\n\t\t\t{ active } = this.state,\n\t\t\tglobalConfigs = valueAt(this, 'context.ruuiConfigs.modal'),\n\t\t\tcontainerPropsGenerator = configs.maskProps || globalConfigs.maskProps,\n\t\t\tcontainerProps = containerPropsGenerator(this.enterAnimation, configs, modalCount, modalType);\n\n\t\tif (configs.maskProps && !containerProps.style) {\n\t\t\tcontainerProps.style = globalConfigs.maskProps(\n\t\t\t\tthis.enterAnimation, configs, modalCount, modalType\n\t\t\t).style;\n\t\t}\n\n\t\treturn active ? <Animated.View {...containerProps}>\n\t\t\t<View style={styles.innerTouchable}>\n\t\t\t\t{this.renderModalInner()}\n\t\t\t</View>\n\t\t</Animated.View> : <View/>;\n\t}\n\n\trenderModalInner() {\n\t\tconst { dispatch, type: modalType, active, configs: modalConfigs } = this.props;\n\n\t\tswitch (modalType) {\n\t\tcase 'select':\n\t\t\treturn <Selector\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleSelector(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'modal':\n\t\t\treturn <CloseableModal\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleModal(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'loading':\n\t\t\treturn <LoadingMask\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tdefault:\n\t\t\treturn <View/>;\n\t\t}\n\t}\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: false,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport function defaultMaskPropsGenerator(animation, configs, modalCount, modalType) {\n\tconst averageOpacity = (0.8 / modalCount) + (modalCount * 0.1),\n\t\tbackgroundColor = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: ['rgba(0, 0, 0, 0)', `rgba(0, 0, 0, ${averageOpacity})`],\n\t\t}),\n\t\tstyle = [styles.container, {\n\t\t\tzIndex: configs.zIndex,\n\t\t\tbackgroundColor,\n\t\t}];\n\n\treturn { style, };\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n\tinnerTouchable: {\n\t\tflex: 1,\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n});\n\n'ruui/src/components/modals.js'\n:import React, { Component } from 'react';\nimport { View, StyleSheet, } from 'react-native';\n\nimport Modal from './modal';\nimport RuuiDropdown from './dropdown';\nimport { connect } from '../utils';\n\ntype Props = {\n\tpreRenders?: Array<Object>,\n\tpreRenderDelay?: Number,\n\tmodals?: Array<Object>,\n\tdispatch?: Function,\n\tscreenSize?: { width?: number, height?: number },\n\tanimationDelay?: Number,\n};\n\nclass RuuiModals extends Component {\n\tprops: Props;\n\tstatic defaultProps = {\n\t\tanimationDelay: 200,\n\t\tpreRenderDelay: 300,\n\t};\n\n\tcomponentDidMount() {\n\t\tconst { dispatch, preRenders, preRenderDelay, } = this.props;\n\n\t\tif (preRenders?.length) {\n\t\t\tfor (let i = 0; i < preRenders.length; i += 1) {\n\t\t\t\tconst item = preRenders[i];\n\t\t\t\titem.flag = false;\n\t\t\t\tsetTimeout(() => dispatch(item), i * preRenderDelay);\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { dispatch, modals, screenSize, animationDelay, } = this.props,\n\t\t\tmodalArray = Object.keys(modals).map(key => Object.assign({}, modals[key], { id: key }));\n\n\t\treturn <View\n\t\t\tref={(ref) => { global.modalsContainer = ref; }}\n\t\t\tpointerEvents=\"box-none\"\n\t\t\tstyle={styles.container}>\n\t\t\t{modalArray.map((modalConfigs, i) => {\n\t\t\t\tif (modalConfigs.type === 'dropdown') {\n\t\t\t\t\treturn <RuuiDropdown\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tscreenSize={screenSize}\n\t\t\t\t\t\t{...modalConfigs}\n\t\t\t\t\t/>;\n\t\t\t\t}\n\t\t\t\treturn <Modal\n\t\t\t\t\tkey={i}\n\t\t\t\t\tmodalCount={modalArray.filter(e => e.type !== 'dropdown').length}\n\t\t\t\t\tdispatch={dispatch}\n\t\t\t\t\tanimationDelay={animationDelay}\n\t\t\t\t\t{...modalConfigs}/>;\n\t\t\t})}\n\t\t</View>;\n\t}\n}\n\nexport default connect(({ activeModals }) => {\n\treturn {\n\t\tmodals: activeModals,\n\t};\n})(RuuiModals);\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n});\n",
        "gt": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/modals.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/index.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/modals.js'"
        ],
        "content": "'ruui/src/utils/helpers.js'\n:import { Dimensions } from 'react-native';\nimport type { SnappingDirection } from '../typeDefinition';\n\nexport function debounce(fn, duration) {\n\tlet timeout;\n\treturn function () {\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = null;\n\t\t\tfn.apply(this, arguments);\n\t\t}, duration);\n\t};\n}\n\nexport function uuid() {\n\treturn 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n\t\tconst r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n\t\treturn v.toString(16);\n\t});\n}\n\nexport function instantInterval(\n\tfunc: Function,\n\tinterval: Number,\n\ttrigger: Boolean = true,\n) {\n\tif (trigger) func.call(this);\n\treturn setInterval(func, interval);\n}\n\nexport function minGuard(value: Number, gap: Number = 0) {\n\treturn value < gap ? gap : value;\n}\n\nexport function maxGuard(value: Number, gap: Number) {\n\treturn value > gap ? gap : value;\n}\n\nconst defaultIteratee = item => item;\n\nexport function maxBy(array, iteratee = defaultIteratee) {\n\tlet result;\n\tif (array == null) return result;\n\n\tlet computed;\n\tfor (const value of array) {\n\t\tconst current = iteratee(value);\n\n\t\tif (current != null && (computed === undefined ? current === current : current > computed)) {\n\t\t\tcomputed = current;\n\t\t\tresult = value;\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function clamp(value: Number, min: Number, max: Number) {\n\treturn min < max\n\t\t? (value < min ? min : value > max ? max : value)\n\t\t: (value < max ? max : value > min ? min : value);\n}\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction is(x, y) {\n\tif (x === y) {\n\t\treturn x !== 0 || y !== 0 || 1 / x === 1 / y;\n\t} else {\n\t\treturn x !== x && y !== y;\n\t}\n}\n\nexport function shallowEqual(objA, objB) {\n\tif (is(objA, objB)) return true;\n\n\tif (typeof objA !== 'object' || objA === null\n\t\t|| typeof objB !== 'object' || objB === null) {\n\t\treturn false;\n\t}\n\n\tconst keysA = Object.keys(objA);\n\tconst keysB = Object.keys(objB);\n\n\tif (keysA.length !== keysB.length) return false;\n\n\tfor (let i = 0; i < keysA.length; i += 1) {\n\t\tif (!hasOwn.call(objB, keysA[i])\n\t\t\t|| !is(objA[keysA[i]], objB[keysA[i]])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\nexport function valueAt(root = {}, path, defaultValue) {\n\tlet currentLevel = root;\n\tconst paths = path.split('.');\n\n\tfor (let i = 0; i < paths.length; i += 1) {\n\t\tif (i === paths.length - 1) {\n\t\t\treturn currentLevel[paths[i]] || defaultValue;\n\t\t} else {\n\t\t\tcurrentLevel = currentLevel[paths[i]];\n\t\t\tif (!currentLevel) return defaultValue;\n\t\t}\n\t}\n\n\treturn defaultValue;\n}\n\nfunction rawDirectionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n) {\n\tswitch (position) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left - (spacing + width2),\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: top + (spacing + height1),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: top + (height1 - height2),\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: top - (spacing + height2),\n\t\t\tleft: left - (width2 - width1),\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\ttop,\n\t\t\tleft: left + (spacing + width1),\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: top + ((height1 / 2) - (height2 / 2)),\n\t\t\tleft: left + ((width1 / 2) - (width2 / 2)),\n\t\t};\n\tdefault:\n\t\treturn { top: 0, left: 0 };\n\t}\n}\n\n\nfunction screenGuard(position, componentSize, screenPadding = 5, moddedScreenSize = {}) {\n\tconst screenSize = { ...Dimensions.get('window'), ...moddedScreenSize },\n\t\t{ top, left, } = position;\n\tlet guardedTop = top, guardedLeft = left;\n\n\tif (top < 5) {\n\t\tguardedTop = 5;\n\t} else if (top + componentSize.height > screenSize.height - screenPadding) {\n\t\tguardedTop = screenSize.height - componentSize.height - screenPadding;\n\t}\n\n\tif (left < 5) {\n\t\tguardedLeft = 5;\n\t} else if (left + componentSize.width > screenSize.width - screenPadding) {\n\t\tguardedLeft = screenSize.width - componentSize.width - screenPadding;\n\t}\n\n\treturn { top: guardedTop, left: guardedLeft, };\n}\n\nexport function directionSnap(\n\ttop: number = 0, left: number = 0, width1: number = 0, height1: number = 0,\n\twidth2: number = 0, height2: number = 0,\n\tposition: SnappingDirection = 'bottom',\n\tspacing = 10,\n\tscreenSize,\n) {\n\treturn screenGuard(\n\t\trawDirectionSnap(top, left, width1, height1, width2, height2, position, spacing),\n\t\t{ width: width2, height: height2, }, 5, screenSize\n\t);\n}\n\nexport function arrowSnap(width, height, arrowSize, parentPosition: SnappingDirection, padding = 15) {\n\tswitch (parentPosition) {\n\tcase 'top':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: (width / 2) - (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\ttop: padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: padding + (arrowSize / 2),\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: width - 2,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\ttop: 1 - (arrowSize * 1.5),\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '-90deg' }],\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\ttop: height - (arrowSize * 2) - padding,\n\t\t\tleft: -arrowSize,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\ttop: height - (arrowSize / 2) - 1,\n\t\t\tleft: width - (arrowSize * 1.5) - padding,\n\t\t\ttransform: [{ rotate: '90deg' }],\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\ttop: (height / 2) - arrowSize,\n\t\t\tleft: width - 2,\n\t\t\topacity: 0,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tleft: -arrowSize,\n\t\t\ttop: padding,\n\t\t\ttransform: [{ rotate: '180deg' }],\n\t\t};\n\tdefault:\n\t\treturn {};\n\t}\n}\n\nexport function directionAnimatedConfigs(\n\tdirection, translateDistance, animation, finalBorderRadius = 3\n) {\n\tconst borderRadius = animation.interpolate({\n\t\t\tinputRange: [0, 0.5, 1], outputRange: [50, 15, finalBorderRadius],\n\t\t}),\n\t\topacity = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: [0, 1],\n\t\t\textrapolate: 'clamp',\n\t\t});\n\n\tswitch (direction) {\n\tcase 'top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-left':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'left-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'bottom-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-bottom':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'top-right':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderBottomRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'right-top':\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateX: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\tcase 'center':\n\t\treturn {\n\t\t\tborderRadius: { borderRadius, },\n\t\t\ttransform: [],\n\t\t\topacity,\n\t\t};\n\tdefault:\n\t\treturn {\n\t\t\tborderRadius: {\n\t\t\t\tborderTopLeftRadius: borderRadius,\n\t\t\t\tborderTopRightRadius: borderRadius,\n\t\t\t},\n\t\t\ttransform: [{\n\t\t\t\ttranslateY: animation.interpolate({\n\t\t\t\t\tinputRange: [0, 1], outputRange: [-translateDistance, 0],\n\t\t\t\t}),\n\t\t\t}],\n\t\t\topacity,\n\t\t};\n\t}\n}\n\n'ruui/src/utils/store/appAction.js'\n:import * as Actions from './actions';\nimport { uuid } from '../helpers';\n\nexport function resetState() {\n\treturn { type: Actions.ResetState, };\n}\n\nexport function updateThemeConfigs(configs = {}) {\n\treturn { type: Actions.UpdateThemeConfigs, configs };\n}\n\nexport function updateDimensionsInfo(info = {}) {\n\treturn { type: Actions.UpdateDimensionInfo, info };\n}\n\nexport function updateNetInfo(info = {}) {\n\treturn { type: Actions.UpdateNetInfo, info };\n}\n\nexport function toggleSelector(flag, configs = {}) {\n\treturn { type: Actions.ToggleSelect, flag, configs };\n}\n\nexport function toggleModal(flag, configs = {}) {\n\treturn { type: Actions.ToggleModal, flag, configs };\n}\n\nexport function toggleDropdown(flag, configs = {}) {\n\treturn { type: Actions.ToggleDropdown, flag, configs };\n}\n\nexport function toggleLoading(flag, configs = {}) {\n\treturn { type: Actions.ToggleLoading, flag, configs };\n}\n\nexport function insertSnackBar(configs = {}) {\n\treturn { type: Actions.InsertSnackBar, configs: {\n\t\t...configs, id: configs.id || uuid(),\n\t} };\n}\n\nexport function startDestroySnackBar(configs = {}) {\n\treturn { type: Actions.StartDestroySnackBar, configs };\n}\n\nexport function destroySnackBar(configs = {}) {\n\treturn { type: Actions.DestroySnackBar, configs };\n}\n'ruui/src/components/index.js'\n:import ruuiProviderImport from './ruuiProvider';\nimport providerImport from './provider';\nimport touchableRipple from './touchableRipple';\nimport responsibleTouchAreaImport from './responsibleTouchArea';\nimport rippleEffectImport from './rippleEffect';\nimport buttonImport from './button';\nimport inputImport from './input';\nimport modalImport from './modals';\nimport RuuiFloats from './Floats';\nimport dropdownImport from './dropdown';\nimport dropdownContainerImport from './dropdownContainer';\nimport selectImport from './select';\nimport snackbarImport from './snackbars';\nimport tooltipImport from './tooltip';\nimport tooltipContainerImport from './tooltipContainer';\nimport connectionMaskImport from './connectionMask';\nimport sliderImport from './slider';\nimport radioIconImport from './radioIcon';\n\nexport const RuuiProvider = ruuiProviderImport;\nexport const Provider = providerImport;\nexport const TouchableRipple = touchableRipple;\nexport const ResponsibleTouchArea = responsibleTouchAreaImport;\nexport const RippleEffect = rippleEffectImport;\nexport const Button = buttonImport;\nexport const Input = inputImport;\nexport const Modal = modalImport;\nexport const Floats = RuuiFloats;\nexport const Dropdown = dropdownImport;\nexport const DropdownContainer = dropdownContainerImport;\nexport const Select = selectImport;\nexport const Snackbar = snackbarImport;\nexport const Tooltip = tooltipImport;\nexport const TooltipContainer = tooltipContainerImport;\nexport const ConnectionMask = connectionMaskImport;\nexport const Slider = sliderImport;\nexport const RadioIcon = radioIconImport;\n\n'ruui/src/components/modal.js'\n:import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Animated, Easing, View, StyleSheet } from 'react-native';\n\nimport Selector from './selector';\nimport LoadingMask from './loadingMask';\nimport CloseableModal from './closeableModal';\nimport { valueAt } from '../utils';\nimport * as appActions from '../utils/store/appAction';\n\ntype Props = {\n\tactive?: any,\n\ttype?: string,\n\tconfigs?: Object,\n\tmodalCount?: number,\n\tdispatch?: Function,\n\tanimationDelay?: Number,\n};\n\nexport default class RuuiModal extends Component {\n\tstatic props: Props;\n\n\tstatic contextTypes = {\n\t\truuiConfigs: PropTypes.object,\n\t};\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tactive: props.active,\n\t\t};\n\t\tthis.enterAnimation = new Animated.Value(0);\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { active, animationDelay, } = this.props;\n\t\tsetTimeout(() => this.playTransition(active), animationDelay);\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tconst { active } = this.props;\n\t\tif (prevProps.active !== active) {\n\t\t\tthis.playTransition(active);\n\t\t}\n\t}\n\n\tplayTransition(active) {\n\t\tconst { configs = {}, } = this.props;\n\t\tconst nextValue = active ? 1 : 0;\n\n\t\tif (!active) {\n\t\t\tif (configs.instantClose) {\n\t\t\t\tthis.setState({ active: null });\n\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t} else {\n\t\t\t\tthis.playAnimation(nextValue, () => {\n\t\t\t\t\tthis.setState({ active: null });\n\t\t\t\t\tif (configs.onClose) configs.onClose();\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tthis.setState({ active });\n\t\t\tthis.playAnimation(nextValue);\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { configs = {}, modalCount, type: modalType } = this.props,\n\t\t\t{ active } = this.state,\n\t\t\tglobalConfigs = valueAt(this, 'context.ruuiConfigs.modal'),\n\t\t\tcontainerPropsGenerator = configs.maskProps || globalConfigs.maskProps,\n\t\t\tcontainerProps = containerPropsGenerator(this.enterAnimation, configs, modalCount, modalType);\n\n\t\tif (configs.maskProps && !containerProps.style) {\n\t\t\tcontainerProps.style = globalConfigs.maskProps(\n\t\t\t\tthis.enterAnimation, configs, modalCount, modalType\n\t\t\t).style;\n\t\t}\n\n\t\treturn active ? <Animated.View {...containerProps}>\n\t\t\t<View style={styles.innerTouchable}>\n\t\t\t\t{this.renderModalInner()}\n\t\t\t</View>\n\t\t</Animated.View> : <View/>;\n\t}\n\n\trenderModalInner() {\n\t\tconst { dispatch, type: modalType, active, configs: modalConfigs } = this.props;\n\n\t\tswitch (modalType) {\n\t\tcase 'select':\n\t\t\treturn <Selector\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleSelector(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'modal':\n\t\t\treturn <CloseableModal\n\t\t\t\tonRequestClose={configs => dispatch(appActions.toggleModal(false, configs))}\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tcase 'loading':\n\t\t\treturn <LoadingMask\n\t\t\t\tanimation={this.enterAnimation}\n\t\t\t\tactive={active}\n\t\t\t\tconfigs={modalConfigs}/>;\n\t\tdefault:\n\t\t\treturn <View/>;\n\t\t}\n\t}\n\n\tplayAnimation = (toValue: Number, callback) => {\n\t\tif (this.animation) this.animation.clear();\n\n\t\tconst easing = toValue === 0\n\t\t\t\t? Easing.out(Easing.bezier(0, 0, 0.58, 1))\n\t\t\t\t: Easing.in(Easing.bezier(0, 0.48, 0.35, 1)),\n\t\t\tanimations = [\n\t\t\t\tAnimated.timing(this.enterAnimation, {\n\t\t\t\t\ttoValue,\n\t\t\t\t\tduration: 500,\n\t\t\t\t\teasing,\n\t\t\t\t\tuseNativeDriver: false,\n\t\t\t\t}),\n\t\t\t];\n\n\t\tthis.animation = Animated.parallel(animations).start(callback);\n\t}\n}\n\nexport function defaultMaskPropsGenerator(animation, configs, modalCount, modalType) {\n\tconst averageOpacity = (0.8 / modalCount) + (modalCount * 0.1),\n\t\tbackgroundColor = animation.interpolate({\n\t\t\tinputRange: [0, 1], outputRange: ['rgba(0, 0, 0, 0)', `rgba(0, 0, 0, ${averageOpacity})`],\n\t\t}),\n\t\tstyle = [styles.container, {\n\t\t\tzIndex: configs.zIndex,\n\t\t\tbackgroundColor,\n\t\t}];\n\n\treturn { style, };\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n\tinnerTouchable: {\n\t\tflex: 1,\n\t},\n\ttouchableMask: {\n\t\tposition: 'absolute',\n\t\ttop: 0, right: 0, left: 0, bottom: 0,\n\t},\n});\n\n'ruui/src/components/modals.js'\n:import React, { Component } from 'react';\nimport { View, StyleSheet, } from 'react-native';\n\nimport Modal from './modal';\nimport RuuiDropdown from './dropdown';\nimport { connect } from '../utils';\n\ntype Props = {\n\tpreRenders?: Array<Object>,\n\tpreRenderDelay?: Number,\n\tmodals?: Array<Object>,\n\tdispatch?: Function,\n\tscreenSize?: { width?: number, height?: number },\n\tanimationDelay?: Number,\n};\n\nclass RuuiModals extends Component {\n\tprops: Props;\n\tstatic defaultProps = {\n\t\tanimationDelay: 200,\n\t\tpreRenderDelay: 300,\n\t};\n\n\tcomponentDidMount() {\n\t\tconst { dispatch, preRenders, preRenderDelay, } = this.props;\n\n\t\tif (preRenders?.length) {\n\t\t\tfor (let i = 0; i < preRenders.length; i += 1) {\n\t\t\t\tconst item = preRenders[i];\n\t\t\t\titem.flag = false;\n\t\t\t\tsetTimeout(() => dispatch(item), i * preRenderDelay);\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { dispatch, modals, screenSize, animationDelay, } = this.props,\n\t\t\tmodalArray = Object.keys(modals).map(key => Object.assign({}, modals[key], { id: key }));\n\n\t\treturn <View\n\t\t\tref={(ref) => { global.modalsContainer = ref; }}\n\t\t\tpointerEvents=\"box-none\"\n\t\t\tstyle={styles.container}>\n\t\t\t{modalArray.map((modalConfigs, i) => {\n\t\t\t\tif (modalConfigs.type === 'dropdown') {\n\t\t\t\t\treturn <RuuiDropdown\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tscreenSize={screenSize}\n\t\t\t\t\t\t{...modalConfigs}\n\t\t\t\t\t/>;\n\t\t\t\t}\n\t\t\t\treturn <Modal\n\t\t\t\t\tkey={i}\n\t\t\t\t\tmodalCount={modalArray.filter(e => e.type !== 'dropdown').length}\n\t\t\t\t\tdispatch={dispatch}\n\t\t\t\t\tanimationDelay={animationDelay}\n\t\t\t\t\t{...modalConfigs}/>;\n\t\t\t})}\n\t\t</View>;\n\t}\n}\n\nexport default connect(({ activeModals }) => {\n\treturn {\n\t\tmodals: activeModals,\n\t};\n})(RuuiModals);\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tposition: 'absolute',\n\t\ttop: 0, left: 0, right: 0, bottom: 0,\n\t},\n});\n",
        "gt": [
            "'ruui/src/utils/helpers.js'",
            "'ruui/src/utils/store/appAction.js'",
            "'ruui/src/components/modal.js'",
            "'ruui/src/components/modals.js'",
            "'ruui/src/components/index.js'"
        ]
    },
    {
        "files": [
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/src/components/ModalPortal.js'",
            "'react-modal/src/helpers/scopeTab.js'",
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/index.js'",
            "'react-modal/src/components/Modal.js'"
        ],
        "content": "'react-modal/specs/Modal.testability.spec.js'\n:\nimport ReactDOM from \"react-dom\";\nimport sinon from \"sinon\";\nimport { withModal } from \"./helper\";\n\nexport default () => {\n  it(\"allows ReactDOM.createPortal to be overridden in real-time\", () => {\n    const createPortalSpy = sinon.spy(ReactDOM, \"createPortal\");\n    const props = { isOpen: true };\n    withModal(props, \"hello\");\n    createPortalSpy.called.should.be.ok();\n    ReactDOM.createPortal.restore();\n  });\n};\n\n'react-modal/src/components/ModalPortal.js'\n:import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as focusManager from \"../helpers/focusManager\";\nimport scopeTab from \"../helpers/scopeTab\";\nimport * as ariaAppHider from \"../helpers/ariaAppHider\";\nimport * as classList from \"../helpers/classList\";\nimport SafeHTMLElement, {\n  SafeHTMLCollection,\n  SafeNodeList\n} from \"../helpers/safeHTMLElement\";\nimport portalOpenInstances from \"../helpers/portalOpenInstances\";\nimport \"../helpers/bodyTrap\";\n\n\nconst CLASS_NAMES = {\n  overlay: \"ReactModal__Overlay\",\n  content: \"ReactModal__Content\"\n};\n\n\nconst isTabKey = event => event.code === \"Tab\" || event.keyCode === 9;\nconst isEscKey = event => event.code === \"Escape\" || event.keyCode === 27;\n\nlet ariaHiddenInstances = 0;\n\nexport default class ModalPortal extends Component {\n  static defaultProps = {\n    style: {\n      overlay: {},\n      content: {}\n    },\n    defaultStyles: {}\n  };\n\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    defaultStyles: PropTypes.shape({\n      content: PropTypes.object,\n      overlay: PropTypes.object\n    }),\n    style: PropTypes.shape({\n      content: PropTypes.object,\n      overlay: PropTypes.object\n    }),\n    className: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    overlayClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    parentSelector: PropTypes.func,\n    bodyOpenClassName: PropTypes.string,\n    htmlOpenClassName: PropTypes.string,\n    ariaHideApp: PropTypes.bool,\n    appElement: PropTypes.oneOfType([\n      PropTypes.instanceOf(SafeHTMLElement),\n      PropTypes.instanceOf(SafeHTMLCollection),\n      PropTypes.instanceOf(SafeNodeList),\n      PropTypes.arrayOf(PropTypes.instanceOf(SafeHTMLElement))\n    ]),\n    onAfterOpen: PropTypes.func,\n    onAfterClose: PropTypes.func,\n    onRequestClose: PropTypes.func,\n    closeTimeoutMS: PropTypes.number,\n    shouldFocusAfterRender: PropTypes.bool,\n    shouldCloseOnOverlayClick: PropTypes.bool,\n    shouldReturnFocusAfterClose: PropTypes.bool,\n    preventScroll: PropTypes.bool,\n    role: PropTypes.string,\n    contentLabel: PropTypes.string,\n    aria: PropTypes.object,\n    data: PropTypes.object,\n    children: PropTypes.node,\n    shouldCloseOnEsc: PropTypes.bool,\n    overlayRef: PropTypes.func,\n    contentRef: PropTypes.func,\n    id: PropTypes.string,\n    overlayElement: PropTypes.func,\n    contentElement: PropTypes.func,\n    testId: PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      afterOpen: false,\n      beforeClose: false\n    };\n\n    this.shouldClose = null;\n    this.moveFromContentToOverlay = null;\n  }\n\n  componentDidMount() {\n    if (this.props.isOpen) {\n      this.open();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (prevProps.bodyOpenClassName !== this.props.bodyOpenClassName) {\n\n        console.warn(\n          'React-Modal: \"bodyOpenClassName\" prop has been modified. ' +\n            \"This may cause unexpected behavior when multiple modals are open.\"\n        );\n      }\n      if (prevProps.htmlOpenClassName !== this.props.htmlOpenClassName) {\n\n        console.warn(\n          'React-Modal: \"htmlOpenClassName\" prop has been modified. ' +\n            \"This may cause unexpected behavior when multiple modals are open.\"\n        );\n      }\n    }\n\n    if (this.props.isOpen && !prevProps.isOpen) {\n      this.open();\n    } else if (!this.props.isOpen && prevProps.isOpen) {\n      this.close();\n    }\n\n\n    if (\n      this.props.shouldFocusAfterRender &&\n      this.state.isOpen &&\n      !prevState.isOpen\n    ) {\n      this.focusContent();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.isOpen) {\n      this.afterClose();\n    }\n    clearTimeout(this.closeTimer);\n    cancelAnimationFrame(this.openAnimationFrame);\n  }\n\n  setOverlayRef = overlay => {\n    this.overlay = overlay;\n    this.props.overlayRef && this.props.overlayRef(overlay);\n  };\n\n  setContentRef = content => {\n    this.content = content;\n    this.props.contentRef && this.props.contentRef(content);\n  };\n\n  beforeOpen() {\n    const {\n      appElement,\n      ariaHideApp,\n      htmlOpenClassName,\n      bodyOpenClassName,\n      parentSelector\n    } = this.props;\n\n    const parentDocument =\n      (parentSelector && parentSelector().ownerDocument) || document;\n\n\n    bodyOpenClassName && classList.add(parentDocument.body, bodyOpenClassName);\n\n    htmlOpenClassName &&\n      classList.add(\n        parentDocument.getElementsByTagName(\"html\")[0],\n        htmlOpenClassName\n      );\n\n    if (ariaHideApp) {\n      ariaHiddenInstances += 1;\n      ariaAppHider.hide(appElement);\n    }\n\n    portalOpenInstances.register(this);\n  }\n\n  afterClose = () => {\n    const {\n      appElement,\n      ariaHideApp,\n      htmlOpenClassName,\n      bodyOpenClassName,\n      parentSelector\n    } = this.props;\n\n    const parentDocument =\n      (parentSelector && parentSelector().ownerDocument) || document;\n\n\n    bodyOpenClassName &&\n      classList.remove(parentDocument.body, bodyOpenClassName);\n\n    htmlOpenClassName &&\n      classList.remove(\n        parentDocument.getElementsByTagName(\"html\")[0],\n        htmlOpenClassName\n      );\n\n\n    if (ariaHideApp && ariaHiddenInstances > 0) {\n      ariaHiddenInstances -= 1;\n\n      if (ariaHiddenInstances === 0) {\n        ariaAppHider.show(appElement);\n      }\n    }\n\n    if (this.props.shouldFocusAfterRender) {\n      if (this.props.shouldReturnFocusAfterClose) {\n        focusManager.returnFocus(this.props.preventScroll);\n        focusManager.teardownScopedFocus();\n      } else {\n        focusManager.popWithoutFocus();\n      }\n    }\n\n    if (this.props.onAfterClose) {\n      this.props.onAfterClose();\n    }\n\n    portalOpenInstances.deregister(this);\n  };\n\n  open = () => {\n    this.beforeOpen();\n    if (this.state.afterOpen && this.state.beforeClose) {\n      clearTimeout(this.closeTimer);\n      this.setState({ beforeClose: false });\n    } else {\n      if (this.props.shouldFocusAfterRender) {\n        focusManager.setupScopedFocus(this.node);\n        focusManager.markForFocusLater();\n      }\n\n      this.setState({ isOpen: true }, () => {\n        this.openAnimationFrame = requestAnimationFrame(() => {\n          this.setState({ afterOpen: true });\n\n          if (this.props.isOpen && this.props.onAfterOpen) {\n            this.props.onAfterOpen({\n              overlayEl: this.overlay,\n              contentEl: this.content\n            });\n          }\n        });\n      });\n    }\n  };\n\n  close = () => {\n    if (this.props.closeTimeoutMS > 0) {\n      this.closeWithTimeout();\n    } else {\n      this.closeWithoutTimeout();\n    }\n  };\n\n\n  focusContent = () =>\n    this.content &&\n    !this.contentHasFocus() &&\n    this.content.focus({ preventScroll: true });\n\n  closeWithTimeout = () => {\n    const closesAt = Date.now() + this.props.closeTimeoutMS;\n    this.setState({ beforeClose: true, closesAt }, () => {\n      this.closeTimer = setTimeout(\n        this.closeWithoutTimeout,\n        this.state.closesAt - Date.now()\n      );\n    });\n  };\n\n  closeWithoutTimeout = () => {\n    this.setState(\n      {\n        beforeClose: false,\n        isOpen: false,\n        afterOpen: false,\n        closesAt: null\n      },\n      this.afterClose\n    );\n  };\n\n  handleKeyDown = event => {\n    if (isTabKey(event)) {\n      scopeTab(this.content, event);\n    }\n\n    if (this.props.shouldCloseOnEsc && isEscKey(event)) {\n      event.stopPropagation();\n      this.requestClose(event);\n    }\n  };\n\n  handleOverlayOnClick = event => {\n    if (this.shouldClose === null) {\n      this.shouldClose = true;\n    }\n\n    if (this.shouldClose && this.props.shouldCloseOnOverlayClick) {\n      if (this.ownerHandlesClose()) {\n        this.requestClose(event);\n      } else {\n        this.focusContent();\n      }\n    }\n    this.shouldClose = null;\n  };\n\n  handleContentOnMouseUp = () => {\n    this.shouldClose = false;\n  };\n\n  handleOverlayOnMouseDown = event => {\n    if (!this.props.shouldCloseOnOverlayClick && event.target == this.overlay) {\n      event.preventDefault();\n    }\n  };\n\n  handleContentOnClick = () => {\n    this.shouldClose = false;\n  };\n\n  handleContentOnMouseDown = () => {\n    this.shouldClose = false;\n  };\n\n  requestClose = event =>\n    this.ownerHandlesClose() && this.props.onRequestClose(event);\n\n  ownerHandlesClose = () => this.props.onRequestClose;\n\n  shouldBeClosed = () => !this.state.isOpen && !this.state.beforeClose;\n\n  contentHasFocus = () =>\n    document.activeElement === this.content ||\n    this.content.contains(document.activeElement);\n\n  buildClassName = (which, additional) => {\n    const classNames =\n      typeof additional === \"object\"\n        ? additional\n        : {\n            base: CLASS_NAMES[which],\n            afterOpen: `${CLASS_NAMES[which]}--after-open`,\n            beforeClose: `${CLASS_NAMES[which]}--before-close`\n          };\n    let className = classNames.base;\n    if (this.state.afterOpen) {\n      className = `${className} ${classNames.afterOpen}`;\n    }\n    if (this.state.beforeClose) {\n      className = `${className} ${classNames.beforeClose}`;\n    }\n    return typeof additional === \"string\" && additional\n      ? `${className} ${additional}`\n      : className;\n  };\n\n  attributesFromObject = (prefix, items) =>\n    Object.keys(items).reduce((acc, name) => {\n      acc[`${prefix}-${name}`] = items[name];\n      return acc;\n    }, {});\n\n  render() {\n    const {\n      id,\n      className,\n      overlayClassName,\n      defaultStyles,\n      children\n    } = this.props;\n    const contentStyles = className ? {} : defaultStyles.content;\n    const overlayStyles = overlayClassName ? {} : defaultStyles.overlay;\n\n    if (this.shouldBeClosed()) {\n      return null;\n    }\n\n    const overlayProps = {\n      ref: this.setOverlayRef,\n      className: this.buildClassName(\"overlay\", overlayClassName),\n      style: { ...overlayStyles, ...this.props.style.overlay },\n      onClick: this.handleOverlayOnClick,\n      onMouseDown: this.handleOverlayOnMouseDown\n    };\n\n    const contentProps = {\n      id,\n      ref: this.setContentRef,\n      style: { ...contentStyles, ...this.props.style.content },\n      className: this.buildClassName(\"content\", className),\n      tabIndex: \"-1\",\n      onKeyDown: this.handleKeyDown,\n      onMouseDown: this.handleContentOnMouseDown,\n      onMouseUp: this.handleContentOnMouseUp,\n      onClick: this.handleContentOnClick,\n      role: this.props.role,\n      \"aria-label\": this.props.contentLabel,\n      ...this.attributesFromObject(\"aria\", { modal: true, ...this.props.aria }),\n      ...this.attributesFromObject(\"data\", this.props.data || {}),\n      \"data-testid\": this.props.testId\n    };\n\n    const contentElement = this.props.contentElement(contentProps, children);\n    return this.props.overlayElement(overlayProps, contentElement);\n  }\n}\n\n'react-modal/src/helpers/scopeTab.js'\n:import findTabbable from \"./tabbable\";\n\nfunction getActiveElement(el = document) {\n  return el.activeElement.shadowRoot\n    ? getActiveElement(el.activeElement.shadowRoot)\n    : el.activeElement;\n}\n\nexport default function scopeTab(node, event) {\n  const tabbable = findTabbable(node);\n\n  if (!tabbable.length) {\n\n    event.preventDefault();\n    return;\n  }\n\n  let target;\n\n  const shiftKey = event.shiftKey;\n  const head = tabbable[0];\n  const tail = tabbable[tabbable.length - 1];\n  const activeElement = getActiveElement();\n\n\n\n  if (node === activeElement) {\n    if (!shiftKey) return;\n    target = tail;\n  }\n\n  if (tail === activeElement && !shiftKey) {\n    target = head;\n  }\n\n  if (head === activeElement && shiftKey) {\n    target = tail;\n  }\n\n  if (target) {\n    event.preventDefault();\n    target.focus();\n    return;\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n  const checkSafari = /(\\bChrome\\b|\\bSafari\\b)\\\n  const isSafariDesktop =\n    checkSafari != null &&\n    checkSafari[1] != \"Chrome\" &&\n    /\\biPod\\b|\\biPad\\b/g.exec(navigator.userAgent) == null;\n\n\n\n  if (!isSafariDesktop) return;\n\n  var x = tabbable.indexOf(activeElement);\n\n  if (x > -1) {\n    x += shiftKey ? -1 : 1;\n  }\n\n  target = tabbable[x];\n\n\n\n  if (typeof target === \"undefined\") {\n    event.preventDefault();\n    target = shiftKey ? tail : head;\n    target.focus();\n    return;\n  }\n\n  event.preventDefault();\n\n  target.focus();\n}\n\n'react-modal/specs/helper.js'\n:import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Modal, { bodyOpenClassName } from \"../src/components/Modal\";\nimport TestUtils from \"react-dom/test-utils\";\nimport { log as classListLog } from \"../src/helpers/classList\";\nimport { log as focusManagerLog } from \"../src/helpers/focusManager\";\nimport { log as ariaAppLog } from \"../src/helpers/ariaAppHider\";\nimport { log as bodyTrapLog } from \"../src/helpers/bodyTrap\";\nimport { log as portalInstancesLog } from \"../src/helpers/portalOpenInstances\";\n\nconst debug = false;\n\nlet i = 0;\n\n\nexport function log(label, spaces) {\n  if (!debug) return;\n\n  console.log(`${label} -----------------`);\n  console.log(document.body.children.length);\n  const logChildren = c => console.log(c.nodeName, c.className, c.id);\n  document.body.children.forEach(logChildren);\n\n  ariaAppLog();\n  bodyTrapLog();\n  classListLog();\n  focusManagerLog();\n  portalInstancesLog();\n\n  console.log(`end ${label} -----------------` + (!spaces ? '' : `\n\n\n`));\n}\n\nlet elementPool = [];\n\n\nexport function createHTMLElement(name) {\n  const e = document.createElement(name);\n  elementPool[elementPool.length - 1].push(e);\n  e.className = `element_pool_${name}-${++i}`;\n  return e;\n}\n\n\nexport function drainPool(pool) {\n  pool.forEach(e => e.parentNode && e.parentNode.removeChild(e));\n}\n\n\nexport function withElementCollector(work) {\n  let r;\n  let poolIndex = elementPool.length;\n  elementPool[poolIndex] = [];\n  try {\n    r = work();\n  } finally {\n    drainPool(elementPool[poolIndex]);\n    elementPool = elementPool.slice(\n      0, poolIndex\n    );\n  }\n  return r;\n}\n\n\nif (!String.prototype.includes) {\n  String.prototype.includes = function(search, start) {\n    if (typeof start !== \"number\") {\n      start = 0;\n    }\n\n    if (start + search.length > this.length) {\n      return false;\n    }\n\n    return this.indexOf(search, start) !== -1;\n  };\n}\n\n\nexport const documentClassList = () => document.body.classList;\n\n\nexport const isDocumentWithReactModalOpenClass = (\n  bodyClass = bodyOpenClassName\n) => document.body.className.includes(bodyClass);\n\n\nexport const htmlClassList = () =>\n  document.getElementsByTagName(\"html\")[0].classList;\n\n\nexport const isHtmlWithReactModalOpenClass = htmlClass =>\n  htmlClassList().contains(htmlClass);\n\n\nexport const findDOMWithClass = TestUtils.findRenderedDOMComponentWithClass;\n\n\nconst getModalAttribute = component => (instance, attr) =>\n  modalComponent(component)(instance).getAttribute(attr);\n\n\nconst modalComponent = component => instance => instance.portal[component];\n\n\nexport const mcontent = modalComponent(\"content\");\n\n\nexport const moverlay = modalComponent(\"overlay\");\n\n\nexport const contentAttribute = getModalAttribute(\"content\");\n\n\nexport const overlayAttribute = getModalAttribute(\"overlay\");\n\nconst Simulate = TestUtils.Simulate;\n\nconst dispatchMockEvent = eventCtor => (key, code) => (element, opts) =>\n  eventCtor(\n    element,\n    Object.assign(\n      {},\n      {\n        key: key,\n        which: code\n      },\n      code,\n      opts\n    )\n  );\n\nconst dispatchMockKeyDownEvent = dispatchMockEvent(Simulate.keyDown);\n\n\nexport const escKeyDown = dispatchMockKeyDownEvent(\"ESC\", { keyCode: 27 });\n\nexport const escKeyDownWithCode = dispatchMockKeyDownEvent(\"ESC\", {\n  code: \"Escape\"\n});\n\nexport const tabKeyDown = dispatchMockKeyDownEvent(\"TAB\", { keyCode: 9 });\n\nexport const tabKeyDownWithCode = dispatchMockKeyDownEvent(\"TAB\", {\n  code: \"Tab\"\n});\n\nexport const clickAt = Simulate.click;\n\nexport const mouseUpAt = Simulate.mouseUp;\n\nexport const mouseDownAt = Simulate.mouseDown;\n\nexport const noop = () => {};\n\n\nexport const withModal = function(props, children, test = noop) {\n  return withElementCollector(() => {\n    const node = createHTMLElement();\n    const modalProps = { ariaHideApp: false, ...props };\n    let modal;\n    try {\n      ReactDOM.render(\n        <Modal ref={m => (modal = m)} {...modalProps}>\n          {children}\n        </Modal>,\n        node\n      );\n      test(modal);\n    } finally {\n      ReactDOM.unmountComponentAtNode(node);\n    }\n  });\n};\n\n'react-modal/specs/index.js'\n:\n\nimport ModalState from \"./Modal.spec\";\nimport ModalEvents from \"./Modal.events.spec\";\nimport ModalStyle from \"./Modal.style.spec\";\nimport ModalHelpers from \"./Modal.helpers.spec\";\nimport ModalTestability from \"./Modal.testability.spec\";\n\ndescribe(\"State\", ModalState);\ndescribe(\"Style\", ModalStyle);\ndescribe(\"Events\", ModalEvents);\ndescribe(\"Helpers\", ModalHelpers);\ndescribe(\"Testability\", ModalTestability);\n\n'react-modal/src/components/Modal.js'\n:import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport ModalPortal from \"./ModalPortal\";\nimport * as ariaAppHider from \"../helpers/ariaAppHider\";\nimport SafeHTMLElement, {\n  SafeNodeList,\n  SafeHTMLCollection,\n  canUseDOM\n} from \"../helpers/safeHTMLElement\";\n\nimport { polyfill } from \"react-lifecycles-compat\";\n\nexport const portalClassName = \"ReactModalPortal\";\nexport const bodyOpenClassName = \"ReactModal__Body--open\";\n\nconst isReact16 = canUseDOM && ReactDOM.createPortal !== undefined;\n\nlet createHTMLElement = name => document.createElement(name);\n\nconst getCreatePortal = () =>\n  isReact16\n    ? ReactDOM.createPortal\n    : ReactDOM.unstable_renderSubtreeIntoContainer;\n\nfunction getParentElement(parentSelector) {\n  return parentSelector();\n}\n\nclass Modal extends Component {\n  static setAppElement(element) {\n    ariaAppHider.setElement(element);\n  }\n\n\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    style: PropTypes.shape({\n      content: PropTypes.object,\n      overlay: PropTypes.object\n    }),\n    portalClassName: PropTypes.string,\n    bodyOpenClassName: PropTypes.string,\n    htmlOpenClassName: PropTypes.string,\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        base: PropTypes.string.isRequired,\n        afterOpen: PropTypes.string.isRequired,\n        beforeClose: PropTypes.string.isRequired\n      })\n    ]),\n    overlayClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        base: PropTypes.string.isRequired,\n        afterOpen: PropTypes.string.isRequired,\n        beforeClose: PropTypes.string.isRequired\n      })\n    ]),\n    appElement: PropTypes.oneOfType([\n      PropTypes.instanceOf(SafeHTMLElement),\n      PropTypes.instanceOf(SafeHTMLCollection),\n      PropTypes.instanceOf(SafeNodeList),\n      PropTypes.arrayOf(PropTypes.instanceOf(SafeHTMLElement))\n    ]),\n    onAfterOpen: PropTypes.func,\n    onRequestClose: PropTypes.func,\n    closeTimeoutMS: PropTypes.number,\n    ariaHideApp: PropTypes.bool,\n    shouldFocusAfterRender: PropTypes.bool,\n    shouldCloseOnOverlayClick: PropTypes.bool,\n    shouldReturnFocusAfterClose: PropTypes.bool,\n    preventScroll: PropTypes.bool,\n    parentSelector: PropTypes.func,\n    aria: PropTypes.object,\n    data: PropTypes.object,\n    role: PropTypes.string,\n    contentLabel: PropTypes.string,\n    shouldCloseOnEsc: PropTypes.bool,\n    overlayRef: PropTypes.func,\n    contentRef: PropTypes.func,\n    id: PropTypes.string,\n    overlayElement: PropTypes.func,\n    contentElement: PropTypes.func\n  };\n\n\n  static defaultProps = {\n    isOpen: false,\n    portalClassName,\n    bodyOpenClassName,\n    role: \"dialog\",\n    ariaHideApp: true,\n    closeTimeoutMS: 0,\n    shouldFocusAfterRender: true,\n    shouldCloseOnEsc: true,\n    shouldCloseOnOverlayClick: true,\n    shouldReturnFocusAfterClose: true,\n    preventScroll: false,\n    parentSelector: () => document.body,\n    overlayElement: (props, contentEl) => <div {...props}>{contentEl}</div>,\n    contentElement: (props, children) => <div {...props}>{children}</div>\n  };\n\n  static defaultStyles = {\n    overlay: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: \"rgba(255, 255, 255, 0.75)\"\n    },\n    content: {\n      position: \"absolute\",\n      top: \"40px\",\n      left: \"40px\",\n      right: \"40px\",\n      bottom: \"40px\",\n      border: \"1px solid #ccc\",\n      background: \"#fff\",\n      overflow: \"auto\",\n      WebkitOverflowScrolling: \"touch\",\n      borderRadius: \"4px\",\n      outline: \"none\",\n      padding: \"20px\"\n    }\n  };\n\n  componentDidMount() {\n    if (!canUseDOM) return;\n\n    if (!isReact16) {\n      this.node = createHTMLElement(\"div\");\n    }\n    this.node.className = this.props.portalClassName;\n\n    const parent = getParentElement(this.props.parentSelector);\n    parent.appendChild(this.node);\n\n    !isReact16 && this.renderPortal(this.props);\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    const prevParent = getParentElement(prevProps.parentSelector);\n    const nextParent = getParentElement(this.props.parentSelector);\n    return { prevParent, nextParent };\n  }\n\n  componentDidUpdate(prevProps, _, snapshot) {\n    if (!canUseDOM) return;\n    const { isOpen, portalClassName } = this.props;\n\n    if (prevProps.portalClassName !== portalClassName) {\n      this.node.className = portalClassName;\n    }\n\n    const { prevParent, nextParent } = snapshot;\n    if (nextParent !== prevParent) {\n      prevParent.removeChild(this.node);\n      nextParent.appendChild(this.node);\n    }\n\n\n    if (!prevProps.isOpen && !isOpen) return;\n\n    !isReact16 && this.renderPortal(this.props);\n  }\n\n  componentWillUnmount() {\n    if (!canUseDOM || !this.node || !this.portal) return;\n\n    const state = this.portal.state;\n    const now = Date.now();\n    const closesAt =\n      state.isOpen &&\n      this.props.closeTimeoutMS &&\n      (state.closesAt || now + this.props.closeTimeoutMS);\n\n    if (closesAt) {\n      if (!state.beforeClose) {\n        this.portal.closeWithTimeout();\n      }\n\n      setTimeout(this.removePortal, closesAt - now);\n    } else {\n      this.removePortal();\n    }\n  }\n\n  removePortal = () => {\n    !isReact16 && ReactDOM.unmountComponentAtNode(this.node);\n    const parent = getParentElement(this.props.parentSelector);\n    if (parent && parent.contains(this.node)) {\n      parent.removeChild(this.node);\n    } else {\n\n      console.warn(\n        'React-Modal: \"parentSelector\" prop did not returned any DOM ' +\n          \"element. Make sure that the parent element is unmounted to \" +\n          \"avoid any memory leaks.\"\n      );\n    }\n  };\n\n  portalRef = ref => {\n    this.portal = ref;\n  };\n\n  renderPortal = props => {\n    const createPortal = getCreatePortal();\n    const portal = createPortal(\n      this,\n      <ModalPortal defaultStyles={Modal.defaultStyles} {...props} />,\n      this.node\n    );\n    this.portalRef(portal);\n  };\n\n  render() {\n    if (!canUseDOM || !isReact16) {\n      return null;\n    }\n\n    if (!this.node && isReact16) {\n      this.node = createHTMLElement(\"div\");\n    }\n\n    const createPortal = getCreatePortal();\n    return createPortal(\n      <ModalPortal\n        ref={this.portalRef}\n        defaultStyles={Modal.defaultStyles}\n        {...this.props}\n      />,\n      this.node\n    );\n  }\n}\n\npolyfill(Modal);\n\nif (process.env.NODE_ENV !== \"production\") {\n  Modal.setCreateHTMLElement = fn => (createHTMLElement = fn);\n}\n\nexport default Modal;\n",
        "gt": [
            "'react-modal/src/helpers/scopeTab.js'",
            "'react-modal/src/components/ModalPortal.js'",
            "'react-modal/src/components/Modal.js'",
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/specs/index.js'"
        ]
    },
    {
        "files": [
            "'react-modal/src/components/ModalPortal.js'",
            "'react-modal/src/helpers/ariaAppHider.js'",
            "'react-modal/src/components/Modal.js'",
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/specs/index.js'",
            "'react-modal/specs/helper.js'"
        ],
        "content": "'react-modal/src/components/ModalPortal.js'\n:import { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as focusManager from \"../helpers/focusManager\";\nimport scopeTab from \"../helpers/scopeTab\";\nimport * as ariaAppHider from \"../helpers/ariaAppHider\";\nimport * as classList from \"../helpers/classList\";\nimport SafeHTMLElement, {\n  SafeHTMLCollection,\n  SafeNodeList\n} from \"../helpers/safeHTMLElement\";\nimport portalOpenInstances from \"../helpers/portalOpenInstances\";\nimport \"../helpers/bodyTrap\";\n\n\nconst CLASS_NAMES = {\n  overlay: \"ReactModal__Overlay\",\n  content: \"ReactModal__Content\"\n};\n\n\nconst isTabKey = event => event.code === \"Tab\" || event.keyCode === 9;\nconst isEscKey = event => event.code === \"Escape\" || event.keyCode === 27;\n\nlet ariaHiddenInstances = 0;\n\nexport default class ModalPortal extends Component {\n  static defaultProps = {\n    style: {\n      overlay: {},\n      content: {}\n    },\n    defaultStyles: {}\n  };\n\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    defaultStyles: PropTypes.shape({\n      content: PropTypes.object,\n      overlay: PropTypes.object\n    }),\n    style: PropTypes.shape({\n      content: PropTypes.object,\n      overlay: PropTypes.object\n    }),\n    className: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    overlayClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    parentSelector: PropTypes.func,\n    bodyOpenClassName: PropTypes.string,\n    htmlOpenClassName: PropTypes.string,\n    ariaHideApp: PropTypes.bool,\n    appElement: PropTypes.oneOfType([\n      PropTypes.instanceOf(SafeHTMLElement),\n      PropTypes.instanceOf(SafeHTMLCollection),\n      PropTypes.instanceOf(SafeNodeList),\n      PropTypes.arrayOf(PropTypes.instanceOf(SafeHTMLElement))\n    ]),\n    onAfterOpen: PropTypes.func,\n    onAfterClose: PropTypes.func,\n    onRequestClose: PropTypes.func,\n    closeTimeoutMS: PropTypes.number,\n    shouldFocusAfterRender: PropTypes.bool,\n    shouldCloseOnOverlayClick: PropTypes.bool,\n    shouldReturnFocusAfterClose: PropTypes.bool,\n    preventScroll: PropTypes.bool,\n    role: PropTypes.string,\n    contentLabel: PropTypes.string,\n    aria: PropTypes.object,\n    data: PropTypes.object,\n    children: PropTypes.node,\n    shouldCloseOnEsc: PropTypes.bool,\n    overlayRef: PropTypes.func,\n    contentRef: PropTypes.func,\n    id: PropTypes.string,\n    overlayElement: PropTypes.func,\n    contentElement: PropTypes.func,\n    testId: PropTypes.string\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      afterOpen: false,\n      beforeClose: false\n    };\n\n    this.shouldClose = null;\n    this.moveFromContentToOverlay = null;\n  }\n\n  componentDidMount() {\n    if (this.props.isOpen) {\n      this.open();\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (process.env.NODE_ENV !== \"production\") {\n      if (prevProps.bodyOpenClassName !== this.props.bodyOpenClassName) {\n\n        console.warn(\n          'React-Modal: \"bodyOpenClassName\" prop has been modified. ' +\n            \"This may cause unexpected behavior when multiple modals are open.\"\n        );\n      }\n      if (prevProps.htmlOpenClassName !== this.props.htmlOpenClassName) {\n\n        console.warn(\n          'React-Modal: \"htmlOpenClassName\" prop has been modified. ' +\n            \"This may cause unexpected behavior when multiple modals are open.\"\n        );\n      }\n    }\n\n    if (this.props.isOpen && !prevProps.isOpen) {\n      this.open();\n    } else if (!this.props.isOpen && prevProps.isOpen) {\n      this.close();\n    }\n\n\n    if (\n      this.props.shouldFocusAfterRender &&\n      this.state.isOpen &&\n      !prevState.isOpen\n    ) {\n      this.focusContent();\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.state.isOpen) {\n      this.afterClose();\n    }\n    clearTimeout(this.closeTimer);\n    cancelAnimationFrame(this.openAnimationFrame);\n  }\n\n  setOverlayRef = overlay => {\n    this.overlay = overlay;\n    this.props.overlayRef && this.props.overlayRef(overlay);\n  };\n\n  setContentRef = content => {\n    this.content = content;\n    this.props.contentRef && this.props.contentRef(content);\n  };\n\n  beforeOpen() {\n    const {\n      appElement,\n      ariaHideApp,\n      htmlOpenClassName,\n      bodyOpenClassName,\n      parentSelector\n    } = this.props;\n\n    const parentDocument =\n      (parentSelector && parentSelector().ownerDocument) || document;\n\n\n    bodyOpenClassName && classList.add(parentDocument.body, bodyOpenClassName);\n\n    htmlOpenClassName &&\n      classList.add(\n        parentDocument.getElementsByTagName(\"html\")[0],\n        htmlOpenClassName\n      );\n\n    if (ariaHideApp) {\n      ariaHiddenInstances += 1;\n      ariaAppHider.hide(appElement);\n    }\n\n    portalOpenInstances.register(this);\n  }\n\n  afterClose = () => {\n    const {\n      appElement,\n      ariaHideApp,\n      htmlOpenClassName,\n      bodyOpenClassName,\n      parentSelector\n    } = this.props;\n\n    const parentDocument =\n      (parentSelector && parentSelector().ownerDocument) || document;\n\n\n    bodyOpenClassName &&\n      classList.remove(parentDocument.body, bodyOpenClassName);\n\n    htmlOpenClassName &&\n      classList.remove(\n        parentDocument.getElementsByTagName(\"html\")[0],\n        htmlOpenClassName\n      );\n\n\n    if (ariaHideApp && ariaHiddenInstances > 0) {\n      ariaHiddenInstances -= 1;\n\n      if (ariaHiddenInstances === 0) {\n        ariaAppHider.show(appElement);\n      }\n    }\n\n    if (this.props.shouldFocusAfterRender) {\n      if (this.props.shouldReturnFocusAfterClose) {\n        focusManager.returnFocus(this.props.preventScroll);\n        focusManager.teardownScopedFocus();\n      } else {\n        focusManager.popWithoutFocus();\n      }\n    }\n\n    if (this.props.onAfterClose) {\n      this.props.onAfterClose();\n    }\n\n    portalOpenInstances.deregister(this);\n  };\n\n  open = () => {\n    this.beforeOpen();\n    if (this.state.afterOpen && this.state.beforeClose) {\n      clearTimeout(this.closeTimer);\n      this.setState({ beforeClose: false });\n    } else {\n      if (this.props.shouldFocusAfterRender) {\n        focusManager.setupScopedFocus(this.node);\n        focusManager.markForFocusLater();\n      }\n\n      this.setState({ isOpen: true }, () => {\n        this.openAnimationFrame = requestAnimationFrame(() => {\n          this.setState({ afterOpen: true });\n\n          if (this.props.isOpen && this.props.onAfterOpen) {\n            this.props.onAfterOpen({\n              overlayEl: this.overlay,\n              contentEl: this.content\n            });\n          }\n        });\n      });\n    }\n  };\n\n  close = () => {\n    if (this.props.closeTimeoutMS > 0) {\n      this.closeWithTimeout();\n    } else {\n      this.closeWithoutTimeout();\n    }\n  };\n\n\n  focusContent = () =>\n    this.content &&\n    !this.contentHasFocus() &&\n    this.content.focus({ preventScroll: true });\n\n  closeWithTimeout = () => {\n    const closesAt = Date.now() + this.props.closeTimeoutMS;\n    this.setState({ beforeClose: true, closesAt }, () => {\n      this.closeTimer = setTimeout(\n        this.closeWithoutTimeout,\n        this.state.closesAt - Date.now()\n      );\n    });\n  };\n\n  closeWithoutTimeout = () => {\n    this.setState(\n      {\n        beforeClose: false,\n        isOpen: false,\n        afterOpen: false,\n        closesAt: null\n      },\n      this.afterClose\n    );\n  };\n\n  handleKeyDown = event => {\n    if (isTabKey(event)) {\n      scopeTab(this.content, event);\n    }\n\n    if (this.props.shouldCloseOnEsc && isEscKey(event)) {\n      event.stopPropagation();\n      this.requestClose(event);\n    }\n  };\n\n  handleOverlayOnClick = event => {\n    if (this.shouldClose === null) {\n      this.shouldClose = true;\n    }\n\n    if (this.shouldClose && this.props.shouldCloseOnOverlayClick) {\n      if (this.ownerHandlesClose()) {\n        this.requestClose(event);\n      } else {\n        this.focusContent();\n      }\n    }\n    this.shouldClose = null;\n  };\n\n  handleContentOnMouseUp = () => {\n    this.shouldClose = false;\n  };\n\n  handleOverlayOnMouseDown = event => {\n    if (!this.props.shouldCloseOnOverlayClick && event.target == this.overlay) {\n      event.preventDefault();\n    }\n  };\n\n  handleContentOnClick = () => {\n    this.shouldClose = false;\n  };\n\n  handleContentOnMouseDown = () => {\n    this.shouldClose = false;\n  };\n\n  requestClose = event =>\n    this.ownerHandlesClose() && this.props.onRequestClose(event);\n\n  ownerHandlesClose = () => this.props.onRequestClose;\n\n  shouldBeClosed = () => !this.state.isOpen && !this.state.beforeClose;\n\n  contentHasFocus = () =>\n    document.activeElement === this.content ||\n    this.content.contains(document.activeElement);\n\n  buildClassName = (which, additional) => {\n    const classNames =\n      typeof additional === \"object\"\n        ? additional\n        : {\n            base: CLASS_NAMES[which],\n            afterOpen: `${CLASS_NAMES[which]}--after-open`,\n            beforeClose: `${CLASS_NAMES[which]}--before-close`\n          };\n    let className = classNames.base;\n    if (this.state.afterOpen) {\n      className = `${className} ${classNames.afterOpen}`;\n    }\n    if (this.state.beforeClose) {\n      className = `${className} ${classNames.beforeClose}`;\n    }\n    return typeof additional === \"string\" && additional\n      ? `${className} ${additional}`\n      : className;\n  };\n\n  attributesFromObject = (prefix, items) =>\n    Object.keys(items).reduce((acc, name) => {\n      acc[`${prefix}-${name}`] = items[name];\n      return acc;\n    }, {});\n\n  render() {\n    const {\n      id,\n      className,\n      overlayClassName,\n      defaultStyles,\n      children\n    } = this.props;\n    const contentStyles = className ? {} : defaultStyles.content;\n    const overlayStyles = overlayClassName ? {} : defaultStyles.overlay;\n\n    if (this.shouldBeClosed()) {\n      return null;\n    }\n\n    const overlayProps = {\n      ref: this.setOverlayRef,\n      className: this.buildClassName(\"overlay\", overlayClassName),\n      style: { ...overlayStyles, ...this.props.style.overlay },\n      onClick: this.handleOverlayOnClick,\n      onMouseDown: this.handleOverlayOnMouseDown\n    };\n\n    const contentProps = {\n      id,\n      ref: this.setContentRef,\n      style: { ...contentStyles, ...this.props.style.content },\n      className: this.buildClassName(\"content\", className),\n      tabIndex: \"-1\",\n      onKeyDown: this.handleKeyDown,\n      onMouseDown: this.handleContentOnMouseDown,\n      onMouseUp: this.handleContentOnMouseUp,\n      onClick: this.handleContentOnClick,\n      role: this.props.role,\n      \"aria-label\": this.props.contentLabel,\n      ...this.attributesFromObject(\"aria\", { modal: true, ...this.props.aria }),\n      ...this.attributesFromObject(\"data\", this.props.data || {}),\n      \"data-testid\": this.props.testId\n    };\n\n    const contentElement = this.props.contentElement(contentProps, children);\n    return this.props.overlayElement(overlayProps, contentElement);\n  }\n}\n\n'react-modal/src/helpers/ariaAppHider.js'\n:import warning from \"warning\";\nimport { canUseDOM } from \"./safeHTMLElement\";\n\nlet globalElement = null;\n\n\n\nexport function resetState() {\n  if (globalElement) {\n    if (globalElement.removeAttribute) {\n      globalElement.removeAttribute(\"aria-hidden\");\n    } else if (globalElement.length != null) {\n      globalElement.forEach(element => element.removeAttribute(\"aria-hidden\"));\n    } else {\n      document\n        .querySelectorAll(globalElement)\n        .forEach(element => element.removeAttribute(\"aria-hidden\"));\n    }\n  }\n  globalElement = null;\n}\n\n\nexport function log() {\n  if (process.env.NODE_ENV !== \"production\") {\n    var check = globalElement || {};\n    console.log(\"ariaAppHider ----------\");\n    console.log(check.nodeName, check.className, check.id);\n    console.log(\"end ariaAppHider ----------\");\n  }\n}\n\n\nexport function assertNodeList(nodeList, selector) {\n  if (!nodeList || !nodeList.length) {\n    throw new Error(\n      `react-modal: No elements were found for selector ${selector}.`\n    );\n  }\n}\n\nexport function setElement(element) {\n  let useElement = element;\n  if (typeof useElement === \"string\" && canUseDOM) {\n    const el = document.querySelectorAll(useElement);\n    assertNodeList(el, useElement);\n    useElement = el;\n  }\n  globalElement = useElement || globalElement;\n  return globalElement;\n}\n\nexport function validateElement(appElement) {\n  const el = appElement || globalElement;\n  if (el) {\n    return Array.isArray(el) ||\n      el instanceof HTMLCollection ||\n      el instanceof NodeList\n      ? el\n      : [el];\n  } else {\n    warning(\n      false,\n      [\n        \"react-modal: App element is not defined.\",\n        \"Please use `Modal.setAppElement(el)` or set `appElement={el}`.\",\n        \"This is needed so screen readers don't see main content\",\n        \"when modal is opened. It is not recommended, but you can opt-out\",\n        \"by setting `ariaHideApp={false}`.\"\n      ].join(\" \")\n    );\n\n    return [];\n  }\n}\n\nexport function hide(appElement) {\n  for (let el of validateElement(appElement)) {\n    el.setAttribute(\"aria-hidden\", \"true\");\n  }\n}\n\nexport function show(appElement) {\n  for (let el of validateElement(appElement)) {\n    el.removeAttribute(\"aria-hidden\");\n  }\n}\n\nexport function documentNotReadyOrSSRTesting() {\n  globalElement = null;\n}\n\n'react-modal/src/components/Modal.js'\n:import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\nimport ModalPortal from \"./ModalPortal\";\nimport * as ariaAppHider from \"../helpers/ariaAppHider\";\nimport SafeHTMLElement, {\n  SafeNodeList,\n  SafeHTMLCollection,\n  canUseDOM\n} from \"../helpers/safeHTMLElement\";\n\nimport { polyfill } from \"react-lifecycles-compat\";\n\nexport const portalClassName = \"ReactModalPortal\";\nexport const bodyOpenClassName = \"ReactModal__Body--open\";\n\nconst isReact16 = canUseDOM && ReactDOM.createPortal !== undefined;\n\nlet createHTMLElement = name => document.createElement(name);\n\nconst getCreatePortal = () =>\n  isReact16\n    ? ReactDOM.createPortal\n    : ReactDOM.unstable_renderSubtreeIntoContainer;\n\nfunction getParentElement(parentSelector) {\n  return parentSelector();\n}\n\nclass Modal extends Component {\n  static setAppElement(element) {\n    ariaAppHider.setElement(element);\n  }\n\n\n  static propTypes = {\n    isOpen: PropTypes.bool.isRequired,\n    style: PropTypes.shape({\n      content: PropTypes.object,\n      overlay: PropTypes.object\n    }),\n    portalClassName: PropTypes.string,\n    bodyOpenClassName: PropTypes.string,\n    htmlOpenClassName: PropTypes.string,\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        base: PropTypes.string.isRequired,\n        afterOpen: PropTypes.string.isRequired,\n        beforeClose: PropTypes.string.isRequired\n      })\n    ]),\n    overlayClassName: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.shape({\n        base: PropTypes.string.isRequired,\n        afterOpen: PropTypes.string.isRequired,\n        beforeClose: PropTypes.string.isRequired\n      })\n    ]),\n    appElement: PropTypes.oneOfType([\n      PropTypes.instanceOf(SafeHTMLElement),\n      PropTypes.instanceOf(SafeHTMLCollection),\n      PropTypes.instanceOf(SafeNodeList),\n      PropTypes.arrayOf(PropTypes.instanceOf(SafeHTMLElement))\n    ]),\n    onAfterOpen: PropTypes.func,\n    onRequestClose: PropTypes.func,\n    closeTimeoutMS: PropTypes.number,\n    ariaHideApp: PropTypes.bool,\n    shouldFocusAfterRender: PropTypes.bool,\n    shouldCloseOnOverlayClick: PropTypes.bool,\n    shouldReturnFocusAfterClose: PropTypes.bool,\n    preventScroll: PropTypes.bool,\n    parentSelector: PropTypes.func,\n    aria: PropTypes.object,\n    data: PropTypes.object,\n    role: PropTypes.string,\n    contentLabel: PropTypes.string,\n    shouldCloseOnEsc: PropTypes.bool,\n    overlayRef: PropTypes.func,\n    contentRef: PropTypes.func,\n    id: PropTypes.string,\n    overlayElement: PropTypes.func,\n    contentElement: PropTypes.func\n  };\n\n\n  static defaultProps = {\n    isOpen: false,\n    portalClassName,\n    bodyOpenClassName,\n    role: \"dialog\",\n    ariaHideApp: true,\n    closeTimeoutMS: 0,\n    shouldFocusAfterRender: true,\n    shouldCloseOnEsc: true,\n    shouldCloseOnOverlayClick: true,\n    shouldReturnFocusAfterClose: true,\n    preventScroll: false,\n    parentSelector: () => document.body,\n    overlayElement: (props, contentEl) => <div {...props}>{contentEl}</div>,\n    contentElement: (props, children) => <div {...props}>{children}</div>\n  };\n\n  static defaultStyles = {\n    overlay: {\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      backgroundColor: \"rgba(255, 255, 255, 0.75)\"\n    },\n    content: {\n      position: \"absolute\",\n      top: \"40px\",\n      left: \"40px\",\n      right: \"40px\",\n      bottom: \"40px\",\n      border: \"1px solid #ccc\",\n      background: \"#fff\",\n      overflow: \"auto\",\n      WebkitOverflowScrolling: \"touch\",\n      borderRadius: \"4px\",\n      outline: \"none\",\n      padding: \"20px\"\n    }\n  };\n\n  componentDidMount() {\n    if (!canUseDOM) return;\n\n    if (!isReact16) {\n      this.node = createHTMLElement(\"div\");\n    }\n    this.node.className = this.props.portalClassName;\n\n    const parent = getParentElement(this.props.parentSelector);\n    parent.appendChild(this.node);\n\n    !isReact16 && this.renderPortal(this.props);\n  }\n\n  getSnapshotBeforeUpdate(prevProps) {\n    const prevParent = getParentElement(prevProps.parentSelector);\n    const nextParent = getParentElement(this.props.parentSelector);\n    return { prevParent, nextParent };\n  }\n\n  componentDidUpdate(prevProps, _, snapshot) {\n    if (!canUseDOM) return;\n    const { isOpen, portalClassName } = this.props;\n\n    if (prevProps.portalClassName !== portalClassName) {\n      this.node.className = portalClassName;\n    }\n\n    const { prevParent, nextParent } = snapshot;\n    if (nextParent !== prevParent) {\n      prevParent.removeChild(this.node);\n      nextParent.appendChild(this.node);\n    }\n\n\n    if (!prevProps.isOpen && !isOpen) return;\n\n    !isReact16 && this.renderPortal(this.props);\n  }\n\n  componentWillUnmount() {\n    if (!canUseDOM || !this.node || !this.portal) return;\n\n    const state = this.portal.state;\n    const now = Date.now();\n    const closesAt =\n      state.isOpen &&\n      this.props.closeTimeoutMS &&\n      (state.closesAt || now + this.props.closeTimeoutMS);\n\n    if (closesAt) {\n      if (!state.beforeClose) {\n        this.portal.closeWithTimeout();\n      }\n\n      setTimeout(this.removePortal, closesAt - now);\n    } else {\n      this.removePortal();\n    }\n  }\n\n  removePortal = () => {\n    !isReact16 && ReactDOM.unmountComponentAtNode(this.node);\n    const parent = getParentElement(this.props.parentSelector);\n    if (parent && parent.contains(this.node)) {\n      parent.removeChild(this.node);\n    } else {\n\n      console.warn(\n        'React-Modal: \"parentSelector\" prop did not returned any DOM ' +\n          \"element. Make sure that the parent element is unmounted to \" +\n          \"avoid any memory leaks.\"\n      );\n    }\n  };\n\n  portalRef = ref => {\n    this.portal = ref;\n  };\n\n  renderPortal = props => {\n    const createPortal = getCreatePortal();\n    const portal = createPortal(\n      this,\n      <ModalPortal defaultStyles={Modal.defaultStyles} {...props} />,\n      this.node\n    );\n    this.portalRef(portal);\n  };\n\n  render() {\n    if (!canUseDOM || !isReact16) {\n      return null;\n    }\n\n    if (!this.node && isReact16) {\n      this.node = createHTMLElement(\"div\");\n    }\n\n    const createPortal = getCreatePortal();\n    return createPortal(\n      <ModalPortal\n        ref={this.portalRef}\n        defaultStyles={Modal.defaultStyles}\n        {...this.props}\n      />,\n      this.node\n    );\n  }\n}\n\npolyfill(Modal);\n\nif (process.env.NODE_ENV !== \"production\") {\n  Modal.setCreateHTMLElement = fn => (createHTMLElement = fn);\n}\n\nexport default Modal;\n\n'react-modal/specs/Modal.testability.spec.js'\n:\nimport ReactDOM from \"react-dom\";\nimport sinon from \"sinon\";\nimport { withModal } from \"./helper\";\n\nexport default () => {\n  it(\"allows ReactDOM.createPortal to be overridden in real-time\", () => {\n    const createPortalSpy = sinon.spy(ReactDOM, \"createPortal\");\n    const props = { isOpen: true };\n    withModal(props, \"hello\");\n    createPortalSpy.called.should.be.ok();\n    ReactDOM.createPortal.restore();\n  });\n};\n\n'react-modal/specs/index.js'\n:\n\nimport ModalState from \"./Modal.spec\";\nimport ModalEvents from \"./Modal.events.spec\";\nimport ModalStyle from \"./Modal.style.spec\";\nimport ModalHelpers from \"./Modal.helpers.spec\";\nimport ModalTestability from \"./Modal.testability.spec\";\n\ndescribe(\"State\", ModalState);\ndescribe(\"Style\", ModalStyle);\ndescribe(\"Events\", ModalEvents);\ndescribe(\"Helpers\", ModalHelpers);\ndescribe(\"Testability\", ModalTestability);\n\n'react-modal/specs/helper.js'\n:import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Modal, { bodyOpenClassName } from \"../src/components/Modal\";\nimport TestUtils from \"react-dom/test-utils\";\nimport { log as classListLog } from \"../src/helpers/classList\";\nimport { log as focusManagerLog } from \"../src/helpers/focusManager\";\nimport { log as ariaAppLog } from \"../src/helpers/ariaAppHider\";\nimport { log as bodyTrapLog } from \"../src/helpers/bodyTrap\";\nimport { log as portalInstancesLog } from \"../src/helpers/portalOpenInstances\";\n\nconst debug = false;\n\nlet i = 0;\n\n\nexport function log(label, spaces) {\n  if (!debug) return;\n\n  console.log(`${label} -----------------`);\n  console.log(document.body.children.length);\n  const logChildren = c => console.log(c.nodeName, c.className, c.id);\n  document.body.children.forEach(logChildren);\n\n  ariaAppLog();\n  bodyTrapLog();\n  classListLog();\n  focusManagerLog();\n  portalInstancesLog();\n\n  console.log(`end ${label} -----------------` + (!spaces ? '' : `\n\n\n`));\n}\n\nlet elementPool = [];\n\n\nexport function createHTMLElement(name) {\n  const e = document.createElement(name);\n  elementPool[elementPool.length - 1].push(e);\n  e.className = `element_pool_${name}-${++i}`;\n  return e;\n}\n\n\nexport function drainPool(pool) {\n  pool.forEach(e => e.parentNode && e.parentNode.removeChild(e));\n}\n\n\nexport function withElementCollector(work) {\n  let r;\n  let poolIndex = elementPool.length;\n  elementPool[poolIndex] = [];\n  try {\n    r = work();\n  } finally {\n    drainPool(elementPool[poolIndex]);\n    elementPool = elementPool.slice(\n      0, poolIndex\n    );\n  }\n  return r;\n}\n\n\nif (!String.prototype.includes) {\n  String.prototype.includes = function(search, start) {\n    if (typeof start !== \"number\") {\n      start = 0;\n    }\n\n    if (start + search.length > this.length) {\n      return false;\n    }\n\n    return this.indexOf(search, start) !== -1;\n  };\n}\n\n\nexport const documentClassList = () => document.body.classList;\n\n\nexport const isDocumentWithReactModalOpenClass = (\n  bodyClass = bodyOpenClassName\n) => document.body.className.includes(bodyClass);\n\n\nexport const htmlClassList = () =>\n  document.getElementsByTagName(\"html\")[0].classList;\n\n\nexport const isHtmlWithReactModalOpenClass = htmlClass =>\n  htmlClassList().contains(htmlClass);\n\n\nexport const findDOMWithClass = TestUtils.findRenderedDOMComponentWithClass;\n\n\nconst getModalAttribute = component => (instance, attr) =>\n  modalComponent(component)(instance).getAttribute(attr);\n\n\nconst modalComponent = component => instance => instance.portal[component];\n\n\nexport const mcontent = modalComponent(\"content\");\n\n\nexport const moverlay = modalComponent(\"overlay\");\n\n\nexport const contentAttribute = getModalAttribute(\"content\");\n\n\nexport const overlayAttribute = getModalAttribute(\"overlay\");\n\nconst Simulate = TestUtils.Simulate;\n\nconst dispatchMockEvent = eventCtor => (key, code) => (element, opts) =>\n  eventCtor(\n    element,\n    Object.assign(\n      {},\n      {\n        key: key,\n        which: code\n      },\n      code,\n      opts\n    )\n  );\n\nconst dispatchMockKeyDownEvent = dispatchMockEvent(Simulate.keyDown);\n\n\nexport const escKeyDown = dispatchMockKeyDownEvent(\"ESC\", { keyCode: 27 });\n\nexport const escKeyDownWithCode = dispatchMockKeyDownEvent(\"ESC\", {\n  code: \"Escape\"\n});\n\nexport const tabKeyDown = dispatchMockKeyDownEvent(\"TAB\", { keyCode: 9 });\n\nexport const tabKeyDownWithCode = dispatchMockKeyDownEvent(\"TAB\", {\n  code: \"Tab\"\n});\n\nexport const clickAt = Simulate.click;\n\nexport const mouseUpAt = Simulate.mouseUp;\n\nexport const mouseDownAt = Simulate.mouseDown;\n\nexport const noop = () => {};\n\n\nexport const withModal = function(props, children, test = noop) {\n  return withElementCollector(() => {\n    const node = createHTMLElement();\n    const modalProps = { ariaHideApp: false, ...props };\n    let modal;\n    try {\n      ReactDOM.render(\n        <Modal ref={m => (modal = m)} {...modalProps}>\n          {children}\n        </Modal>,\n        node\n      );\n      test(modal);\n    } finally {\n      ReactDOM.unmountComponentAtNode(node);\n    }\n  });\n};\n",
        "gt": [
            "'react-modal/src/helpers/ariaAppHider.js'",
            "'react-modal/src/components/ModalPortal.js'",
            "'react-modal/src/components/Modal.js'",
            "'react-modal/specs/helper.js'",
            "'react-modal/specs/Modal.testability.spec.js'",
            "'react-modal/specs/index.js'"
        ]
    },
    {
        "files": [
            "'neode/src/ValidationError.js'",
            "'neode/test/Services/FindAll.spec.js'",
            "'neode/src/Services/RelateTo.js'",
            "'neode/src/Node.js'",
            "'neode/src/Services/Validator.js'"
        ],
        "content": "'neode/src/ValidationError.js'\n:export const ERROR_VALIDATION = 'ERROR_VALIDATION';\n\nexport default class ValidationError extends Error {\n    constructor(details, input, _joiError) {\n        super(ERROR_VALIDATION, 422);\n\n        this.details = details;\n        this.input = input;\n        this._joiError = _joiError;\n    }\n}\n'neode/test/Services/FindAll.spec.js'\n:import {assert, expect} from 'chai';\nimport FindAll from '../../src/Services/FindAll';\nimport Create from '../../src/Services/Create';\nimport Node from '../../src/Node';\n\nconst TIMEOUT = 10000;\n\ndescribe('Services/FindAll.js', () => {\n    let instance;\n    let model;\n\n    const other_label = 'FindAllEager';\n    const label = 'FindAllTest';\n    const schema = {\n        uuid: {\n            type: 'uuid',\n            primary: true,\n        },\n        name: {\n            type: 'string',\n            required: true,\n        },\n        relationshipsToModel: {\n            type: 'relationship',\n            relationship: 'RELATIONSHIP_TO_MODEL',\n            target: label,\n            direction: 'out',\n            alias: 'node',\n            properties: {\n                since: {\n                    type: 'int',\n                    default: Date.now\n                }\n            },\n        },\n        relationshipToOther: {\n            type: 'relationship',\n            relationship: 'RELATIONSHIP_TO_OTHER',\n            target: other_label,\n            direction: 'out',\n            eager: true,\n            alias: 'node',\n            properties: {\n                since: {\n                    type: 'int',\n                    default: Date.now\n                }\n            },\n        },\n        forArray: {\n            type: 'node',\n            relationship: 'FOR_ARRAY',\n            target: label,\n            direction: 'out',\n        },\n        nodeToOther: {\n            type: 'node',\n            relationship: 'RELATIONSHIP_TO_OTHER',\n            target: other_label,\n            direction: 'out',\n            eager: true,\n        },\n        arrayOfRelationships: {\n            type: 'nodes',\n            relationship: [ 'RELATIONSHIP_TO_MODEL', 'FOR_ARRAY' ],\n\n            direction: 'out',\n            eager: true,\n        },\n    };\n\n    before(() => {\n        instance = require('../instance')();\n        instance.model(other_label, {id: 'number'});\n        model = instance.model(label, schema);\n    });\n\n    afterEach(done => {\n        instance.deleteAll(label)\n\n\n\n            .then(() => done());\n    });\n\n    after(() => instance.close());\n\n    it('should find nodes filtered by properties', done => {\n        const name = 'Filtered Node';\n        const eager_name = 'Eager Node';\n        const other_id = 1;\n        Create(instance, model, {\n            name,\n            relationshipsToModel: {\n                since: 100,\n                node: {\n                    name: eager_name,\n                },\n            },\n            nodeToOther: {\n                id: other_id,\n            },\n            forArray: {\n                name: 'For Array'\n            },\n        })\n            .then(() => {\n                return FindAll(instance, model, { name })\n                    .then(collection => {\n                        expect(collection.length).to.equal(1);\n\n                        const first = collection.first();\n\n                        expect(first).to.be.an.instanceOf(Node);\n                        expect(first.get('name')).to.equal(name);\n\n\n                        expect( first._eager.get('nodeToOther').get('id') ).to.equal(other_id);\n                        expect( first._eager.get('relationshipToOther').otherNode().get('id') ).to.equal(other_id);\n                        expect( first._eager.get('arrayOfRelationships').length ).to.equal(2);\n                    });\n            })\n            .then(() => done())\n            .catch(e => {\n                console.log(e)\n                done(e)\n            });\n    });\n\n    it('should apply the alias to an order', done => {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        done()\n    });\n\n    it('should apply the alias to a map of orders', done => {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        done()\n    });\n\n});\n'neode/src/Services/RelateTo.js'\n:import {\n    DIRECTION_IN,\n    DIRECTION_OUT\n} from '../RelationshipType';\nimport Relationship from '../Relationship';\n\nimport GenerateDefaultValues from './GenerateDefaultValues';\nimport Validator from './Validator';\n\nexport default function RelateTo(neode, from, to, relationship, properties, force_create = false) {\n    return GenerateDefaultValues(neode, relationship, properties)\n        .then(properties => Validator(neode, relationship.schema(), properties))\n        .then(properties => {\n            const direction_in = relationship.direction() == DIRECTION_IN ? '<' : '';\n            const direction_out = relationship.direction() == DIRECTION_OUT ? '>' : '';\n            const type = relationship.relationship();\n\n            let params = {\n                from_id: from.identity(),\n                to_id: to.identity(),\n            };\n            let set = '';\n\n            if ( Object.keys(properties).length ) {\n                set += 'SET ';\n                set += Object.keys(properties).map(key => {\n                    params[`set_${key}`] = properties[ key ];\n                    return `rel.${key} = $set_${key}`;\n                }).join(', ');\n            }\n\n            const mode = force_create ? 'CREATE' : 'MERGE';\n\n            const query = `\n                MATCH (from), (to)\n                WHERE id(from) = $from_id\n                AND id(to) = $to_id\n                ${mode} (from)${direction_in}-[rel:${type}]-${direction_out}(to)\n                ${set}\n                RETURN rel\n            `;\n\n            return neode.writeCypher(query, params)\n                .then(res => {\n                    const rel = res.records[0].get('rel');\n                    const hydrate_from = relationship.direction() == DIRECTION_IN ? to : from;\n                    const hydrate_to = relationship.direction() == DIRECTION_IN ? from : to;\n\n                    const properties = new Map;\n\n                    Object.keys(rel.properties).forEach(key => {\n                        properties.set( key, rel.properties[ key ] );\n                    });\n\n                    return new Relationship(neode, relationship, rel.identity, rel.type, properties, hydrate_from, hydrate_to);\n                });\n        });\n}\n'neode/src/Node.js'\n:import neo4j from 'neo4j-driver';\nimport Entity from './Entity';\nimport UpdateNode from './Services/UpdateNode';\nimport DeleteNode from './Services/DeleteNode';\nimport RelateTo from './Services/RelateTo';\nimport DetachFrom from './Services/DetachFrom';\nimport RelationshipType from './RelationshipType';\n\n\nexport default class Node extends Entity {\n\n\n    constructor(neode, model, identity, labels, properties, eager) {\n        super();\n\n        this._neode = neode;\n        this._model = model;\n        this._identity = identity;\n        this._labels = labels;\n        this._properties = properties || new Map;\n\n        this._eager = eager || new Map;\n\n        this._deleted = false;\n    }\n\n\n    model() {\n        return this._model;\n    }\n\n\n    labels() {\n        return this._labels;\n    }\n\n\n    setEager(key, value) {\n        this._eager.set(key, value);\n\n        return this;\n    }\n\n\n    delete(to_depth) {\n        return DeleteNode(this._neode, this._identity, this._model, to_depth)\n            .then(() => {\n                this._deleted = true;\n\n                return this;\n            });\n    }\n\n\n    relateTo(node, type, properties = {}, force_create = false) {\n        const relationship = this._model.relationships().get(type);\n\n        if ( !(relationship instanceof RelationshipType) ) {\n            return Promise.reject( new Error(`Cannot find relationship with type ${type}`) );\n        }\n\n        return RelateTo(this._neode, this, node, relationship, properties, force_create)\n            .then(rel => {\n                this._eager.delete(type);\n\n                return rel;\n            });\n    }\n\n\n    detachFrom(other) {\n        if (!(other instanceof Node)) {\n            return Promise.reject(new Error(`Cannot find node with type ${other}`));\n        }\n\n        return DetachFrom(this._neode, this, other);\n    }\n\n\n    toJson() {\n        const output = {\n            _id: this.id(),\n            _labels: this.labels(),\n        };\n\n\n        this._model.properties().forEach((property, key) => {\n            if ( property.hidden() ) {\n                return;\n            }\n\n            if ( this._properties.has(key) ) {\n                output[ key ] = this.valueToJson(property, this._properties.get( key ));\n            }\n            else if (neo4j.temporal.isDateTime(output[key])) {\n                output[key] = new Date(output[key].toString());\n            }\n            else if (neo4j.spatial.isPoint(output[key])) {\n                switch (output[key].srid.toString()) {\n\n                    case '4326':\n                        output[key] = {longitude: output[key].x, latitude: output[key].y};\n                        break;\n\n                    case '4979':\n                        output[key] = {longitude: output[key].x, latitude: output[key].y, height: output[key].z};\n                        break;\n\n                    case '7203':\n                        output[key] = {x: output[key].x, y: output[key].y};\n                        break;\n\n                    case '9157':\n                        output[key] = {x: output[key].x, y: output[key].y, z: output[key].z};\n                        break;\n                }\n            }\n        });\n\n\n        return Promise.all( this._model.eager().map((rel) => {\n            const key = rel.name();\n\n            if ( this._eager.has( rel.name() ) ) {\n\n                return this._eager.get( rel.name() ).toJson()\n                    .then(value => {\n                        return { key, value };\n                    });\n            }\n        }) )\n\n            .then(eager => eager.filter( e => !!e ))\n\n\n            .then(eager => {\n                eager.forEach(({ key, value }) => output[ key ] = value);\n\n                return output;\n            });\n    }\n\n\n    update(properties) {\n\n\n\n        this._model.properties().forEach(property => {\n            const name = property.name();\n\n            if ( property.required() && !properties.hasOwnProperty(name) ) {\n                properties[ name ] = this._properties.get( name );\n            }\n        });\n\n        return UpdateNode(this._neode, this._model, this._identity, properties)\n            .then(properties => {\n                properties.map(({ key, value }) => {\n                    this._properties.set(key, value)\n                })\n            })\n            .then(() => {\n                return this;\n            });\n    }\n\n}\n'neode/src/Services/Validator.js'\n:\nimport Joi from '@hapi/joi';\nimport Model from '../Model';\nimport Node from '../Node';\nimport RelationshipType, { DEFAULT_ALIAS } from '../RelationshipType';\nimport ValidationError from '../ValidationError';\nimport neo4j from 'neo4j-driver';\n\nconst joi_options = {\n    allowUnknown:true,\n    abortEarly:false\n};\n\n\nconst ignore = [\n    'labels',\n    'type',\n    'default',\n    'alias',\n    'properties',\n    'primary',\n    'relationship',\n    'target',\n    'direction',\n    'eager',\n    'hidden',\n    'readonly',\n    'index',\n    'unique',\n    'cascade',\n];\nconst booleans = [\n    'optional',\n    'forbidden',\n    'strip',\n    'positive',\n    'negative',\n    'port',\n    'integer',\n    'iso',\n    'isoDate',\n    'insensitive',\n    'required',\n    'truncate',\n    'creditCard',\n    'alphanum',\n    'token',\n    'hex',\n    'hostname',\n    'lowercase',\n    'uppercase',\n];\nconst booleanOrOptions = [\n    'email',\n    'ip',\n    'uri',\n    'base64',\n    'normalize',\n    'hex',\n];\n\nconst temporal = Joi.extend({\n    base: Joi.object(),\n    name: 'temporal',\n    language: {\n        before: 'Value before minimum expected value',\n        after: 'Value after minimum expected value',\n    },\n    rules: [\n        {\n            name: 'after',\n            params: {\n                after: Joi.alternatives([\n                    Joi.date(),\n                    Joi.string(),\n                ]),\n            },\n            validate(params, value, state, options) {\n                if ( params.after === 'now' ) {\n                    params.after = new Date();\n                }\n\n                if ( params.after > new Date( value.toString()) ) {\n                    return this.createError('temporal.after', { v: value }, state, options);\n                }\n\n                return value;\n            },\n        },\n        {\n            name: 'before',\n            params: {\n                after: Joi.alternatives([\n                    Joi.date(),\n                    Joi.string(),\n                ]),\n            },\n            validate(params, value, state, options) {\n                if ( params.after === 'now' ) {\n                    params.after = new Date();\n                }\n\n                if ( params.after < new Date( value.toString()) ) {\n                    return this.createError('temporal.after', { v: value }, state, options);\n                }\n\n                return value;\n            },\n        },\n    ],\n});\n\n\nconst neoInteger = Joi.extend({\n\n    base: Joi.alternatives().try([ Joi.number().integer(), Joi.object().type(neo4j.types.Integer) ]),\n    name: 'integer',\n    language: {\n        before: 'Value before minimum expected value',\n        after: 'Value after minimum expected value',\n    },\n    rules: [\n        {\n            name: 'min',\n            params: {\n                min: Joi.number(),\n            },\n            validate(params, value, state, options) {\n                const compare = value instanceof neo4j.types.Integer ? value.toNumber() : value;\n\n                if ( params.min > compare ) {\n                    return this.createError('number.min', { limit: params.min, }, state, options);\n                }\n\n                return value;\n            }\n        },\n        {\n            name: 'max',\n            params: {\n                max: Joi.number(),\n            },\n            validate(params, value, state, options) {\n                const compare = value instanceof neo4j.types.Integer ? value.toNumber() : value;\n\n                if ( params.max < compare ) {\n                    return this.createError('number.max', { limit: params.max, }, state, options);\n                }\n\n                return value;\n            }\n        },\n        {\n            name: 'multiple',\n            params: {\n                multiple: Joi.number(),\n            },\n            validate(params, value, state, options) {\n                const compare = value instanceof neo4j.types.Integer ? value.toNumber() : value;\n\n                if ( compare % params.multiple != 0 ) {\n                    return this.createError('number.multiple', { multiple: params.max, }, state, options);\n                }\n\n                return value;\n            }\n        },\n    ]\n});\n\nconst point = Joi.extend({\n    base: Joi.object().type(neo4j.types.Point),\n    name: 'point',\n});\n\nfunction nodeSchema() {\n    return Joi.alternatives([\n        Joi.object().type(Node),\n        Joi.string(),\n        Joi.number(),\n        Joi.object(),\n    ]);\n}\n\nfunction relationshipSchema(alias, properties = {}) {\n    return Joi.object().keys(Object.assign(\n        {},\n        {\n            [ alias ]: nodeSchema().required(),\n        },\n        BuildValidationSchema(properties)\n    ));\n}\n\nfunction BuildValidationSchema(schema) {\n    if ( schema instanceof Model || schema instanceof RelationshipType ) {\n        schema = schema.schema();\n    }\n\n    let output = {};\n\n    Object.keys(schema).forEach(key => {\n\n        if ( key == 'labels' ) return;\n\n        const config = typeof schema[ key ] == 'string' ? {type: schema[ key ]} : schema[ key ];\n\n        let validation = false;\n\n        switch (config.type) {\n\n\n            case 'node':\n                validation = nodeSchema();\n                break;\n\n            case 'nodes':\n                validation = Joi.array().items(nodeSchema());\n                break;\n\n            case 'relationship':\n\n                validation = relationshipSchema(config.alias || DEFAULT_ALIAS, config.properties);\n\n                break;\n\n            case 'relationships':\n                validation = Joi.array().items(\n                    relationshipSchema(config.alias || DEFAULT_ALIAS, config.properties)\n                );\n                break;\n\n            case 'uuid':\n                validation = Joi.string().guid({ version: 'uuidv4' });\n                break;\n\n            case 'string':\n            case 'number':\n            case 'boolean':\n                validation = Joi[ config.type ]();\n                break;\n\n            case 'datetime':\n                validation = temporal.temporal().type(neo4j.types.DateTime);\n                break;\n\n            case 'date':\n                validation = temporal.temporal().type(neo4j.types.Date);\n                break;\n\n            case 'time':\n                validation = temporal.temporal().type(neo4j.types.Time);\n                break;\n\n            case 'localdate':\n                validation = temporal.temporal().type(neo4j.types.LocalDate);\n                break;\n\n            case 'localtime':\n                validation = temporal.temporal().type(neo4j.types.LocalTime);\n                break;\n\n            case 'point':\n                validation = point.point().type(neo4j.types.Point);\n                break;\n\n            case 'int':\n            case 'integer':\n                validation = neoInteger.integer();\n                break;\n\n            case 'float':\n                validation = Joi.number();\n                break;\n\n            default:\n                validation = Joi.any();\n                break;\n        }\n\n        if ( ! config.required ) {\n            validation = validation.allow(null);\n        }\n\n\n        Object.keys(config).forEach(validator => {\n            const options = config[validator];\n\n            if ( validator == 'regex' ) {\n                if ( options instanceof RegExp ) {\n                    validation = validation.regex(options);\n                }\n                else {\n                    const pattern = options.pattern;\n                    delete options.pattern;\n\n                    validation = validation.regex(pattern, options);\n                }\n            }\n            else if ( validator == 'replace' ) {\n                validation = validation.replace(options.pattern, options.replace);\n            }\n            else if ( booleanOrOptions.indexOf(validator) > -1 ) {\n                if ( typeof options == 'object' ) {\n                    validation = validation[ validator ](options);\n                }\n                else if ( options ) {\n                    validation = validation[ validator ]();\n                }\n            }\n            else if ( booleans.indexOf(validator) > -1 ) {\n                if ( options === true ) {\n                    validation = validation[ validator ](options);\n                }\n            }\n            else if (ignore.indexOf(validator) == -1 && validation[validator]) {\n                validation = validation[validator](options);\n            }\n            else if (ignore.indexOf(validator) == -1 && booleans.indexOf(validator) == -1 ) {\n                throw new Error(`Not sure how to validate ${validator} on ${key}`);\n            }\n        });\n\n        output[ key ] = validation;\n    });\n\n    return output;\n}\n\n\nexport default function Validator(neode, model, properties) {\n    const schema = BuildValidationSchema(model, properties);\n\n    return new Promise((resolve, reject) => {\n        Joi.validate(properties, schema, joi_options, (err, validated) => {\n            if (err) {\n                return reject( new ValidationError(err.details, properties, err) );\n            }\n\n            return resolve(validated);\n        });\n    });\n}",
        "gt": [
            "'neode/src/ValidationError.js'",
            "'neode/src/Services/Validator.js'",
            "'neode/src/Services/RelateTo.js'",
            "'neode/src/Node.js'",
            "'neode/test/Services/FindAll.spec.js'"
        ]
    },
    {
        "files": [
            "'movix/src/pages/details/Details.jsx'",
            "'movix/src/App.jsx'",
            "'movix/src/pages/details/detailsBanner/DetailsBanner.jsx'",
            "'movix/src/components/contentWrapper/ContentWrapper.jsx'",
            "'movix/src/main.jsx'"
        ],
        "content": "'movix/src/pages/details/Details.jsx'\n:import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport \"./style.scss\";\n\nimport useFetch from \"../../hooks/useFetch\";\nimport DetailsBanner from \"./detailsBanner/DetailsBanner\";\nimport Cast from \"./cast/Cast\";\nimport VideosSection from \"./videosSection/VideosSection\";\nimport Similar from \"./carousels/Similar\";\nimport Recommendation from \"./carousels/Recommendation\";\n\nconst Details = () => {\n    const { mediaType, id } = useParams();\n    const { data, loading } = useFetch(`/${mediaType}/${id}/videos`);\n    const { data: credits, loading: creditsLoading } = useFetch(\n        `/${mediaType}/${id}/credits`\n    );\n\n    return (\n        <div>\n            <DetailsBanner video={data?.results?.[0]} crew={credits?.crew} />\n            <Cast data={credits?.cast} loading={creditsLoading} />\n            <VideosSection data={data} loading={loading} />\n            <Similar mediaType={mediaType} id={id} />\n            <Recommendation mediaType={mediaType} id={id} />\n        </div>\n    );\n};\n\nexport default Details;\n\n'movix/src/App.jsx'\n:import { useState, useEffect } from \"react\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { fetchDataFromApi } from \"./utils/api\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getApiConfiguration, getGenres } from \"./store/homeSlice\";\n\nimport Header from \"./components/header/Header\";\nimport Footer from \"./components/footer/Footer\";\nimport Home from \"./pages/home/Home\";\nimport Details from \"./pages/details/Details\";\nimport SearchResult from \"./pages/searchResult/SearchResult\";\nimport Explore from \"./pages/explore/Explore\";\nimport PageNotFound from \"./pages/404/PageNotFound\";\n\nfunction App() {\n    const dispatch = useDispatch();\n    const { url } = useSelector((state) => state.home);\n    console.log(url);\n\n    useEffect(() => {\n        fetchApiConfig();\n        genresCall();\n    }, []);\n\n    const fetchApiConfig = () => {\n        fetchDataFromApi(\"/configuration\").then((res) => {\n            console.log(res);\n\n            const url = {\n                backdrop: res.images.secure_base_url + \"original\",\n                poster: res.images.secure_base_url + \"original\",\n                profile: res.images.secure_base_url + \"original\",\n            };\n\n            dispatch(getApiConfiguration(url));\n        });\n    };\n\n    const genresCall = async () => {\n        let promises = [];\n        let endPoints = [\"tv\", \"movie\"];\n        let allGenres = {};\n\n        endPoints.forEach((url) => {\n            promises.push(fetchDataFromApi(`/genre/${url}/list`));\n        });\n\n        const data = await Promise.all(promises);\n        console.log(data);\n        data.map(({ genres }) => {\n            return genres.map((item) => (allGenres[item.id] = item));\n        });\n\n        dispatch(getGenres(allGenres));\n    };\n\n    return (\n        <BrowserRouter>\n            <Header />\n            <Routes>\n                <Route path=\"/\" element={<Home />} />\n                <Route path=\"/:mediaType/:id\" element={<Details />} />\n                <Route path=\"/search/:query\" element={<SearchResult />} />\n                <Route path=\"/explore/:mediaType\" element={<Explore />} />\n                <Route path=\"*\" element={<PageNotFound />} />\n            </Routes>\n            <Footer />\n        </BrowserRouter>\n    );\n}\n\nexport default App;\n\n'movix/src/pages/details/detailsBanner/DetailsBanner.jsx'\n:import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport dayjs from \"dayjs\";\n\nimport \"./style.scss\";\n\nimport ContentWrapper from \"../../../components/contentWrapper/ContentWrapper\";\nimport useFetch from \"../../../hooks/useFetch\";\nimport Genres from \"../../../components/genres/Genres\";\nimport CircleRating from \"../../../components/circleRating/CircleRating\";\nimport Img from \"../../../components/lazyLoadImage/Img.jsx\";\nimport PosterFallback from \"../../../assets/no-poster.png\";\nimport { PlayIcon } from \"../Playbtn\";\nimport VideoPopup from \"../../../components/videoPopup/VideoPopup\";\n\nconst DetailsBanner = ({ video, crew }) => {\n    const [show, setShow] = useState(false);\n    const [videoId, setVideoId] = useState(null);\n\n    const { mediaType, id } = useParams();\n    const { data, loading } = useFetch(`/${mediaType}/${id}`);\n\n    const { url } = useSelector((state) => state.home);\n\n    const _genres = data?.genres?.map((g) => g.id);\n\n    const director = crew?.filter((f) => f.job === \"Director\");\n    const writer = crew?.filter(\n        (f) => f.job === \"Screenplay\" || f.job === \"Story\" || f.job === \"Writer\"\n    );\n\n    const toHoursAndMinutes = (totalMinutes) => {\n        const hours = Math.floor(totalMinutes / 60);\n        const minutes = totalMinutes % 60;\n        return `${hours}h${minutes > 0 ? ` ${minutes}m` : \"\"}`;\n    };\n\n    return (\n        <div className=\"detailsBanner\">\n            {!loading ? (\n                <>\n                    {!!data && (\n                        <React.Fragment>\n                            <div className=\"backdrop-img\">\n                                <Img src={url.backdrop + data.backdrop_path} />\n                            </div>\n                            <div className=\"opacity-layer\"></div>\n                            <ContentWrapper>\n                                <div className=\"content\">\n                                    <div className=\"left\">\n                                        {data.poster_path ? (\n                                            <Img\n                                                className=\"posterImg\"\n                                                src={\n                                                    url.backdrop +\n                                                    data.poster_path\n                                                }\n                                            />\n                                        ) : (\n                                            <Img\n                                                className=\"posterImg\"\n                                                src={PosterFallback}\n                                            />\n                                        )}\n                                    </div>\n                                    <div className=\"right\">\n                                        <div className=\"title\">\n                                            {`${\n                                                data.name || data.title\n                                            } (${dayjs(\n                                                data?.release_date\n                                            ).format(\"YYYY\")})`}\n                                        </div>\n                                        <div className=\"subtitle\">\n                                            {data.tagline}\n                                        </div>\n\n                                        <Genres data={_genres} />\n\n                                        <div className=\"row\">\n                                            <CircleRating\n                                                rating={data.vote_average.toFixed(\n                                                    1\n                                                )}\n                                            />\n                                            <div\n                                                className=\"playbtn\"\n                                                onClick={() => {\n                                                    setShow(true);\n                                                    setVideoId(video.key);\n                                                }}\n                                            >\n                                                <PlayIcon />\n                                                <span className=\"text\">\n                                                    Watch Trailer\n                                                </span>\n                                            </div>\n                                        </div>\n\n                                        <div className=\"overview\">\n                                            <div className=\"heading\">\n                                                Overview\n                                            </div>\n                                            <div className=\"description\">\n                                                {data.overview}\n                                            </div>\n                                        </div>\n\n                                        <div className=\"info\">\n                                            {data.status && (\n                                                <div className=\"infoItem\">\n                                                    <span className=\"text bold\">\n                                                        Status:{\" \"}\n                                                    </span>\n                                                    <span className=\"text\">\n                                                        {data.status}\n                                                    </span>\n                                                </div>\n                                            )}\n                                            {data.release_date && (\n                                                <div className=\"infoItem\">\n                                                    <span className=\"text bold\">\n                                                        Release Date:{\" \"}\n                                                    </span>\n                                                    <span className=\"text\">\n                                                        {dayjs(\n                                                            data.release_date\n                                                        ).format(\"MMM D, YYYY\")}\n                                                    </span>\n                                                </div>\n                                            )}\n                                            {data.runtime && (\n                                                <div className=\"infoItem\">\n                                                    <span className=\"text bold\">\n                                                        Runtime:{\" \"}\n                                                    </span>\n                                                    <span className=\"text\">\n                                                        {toHoursAndMinutes(\n                                                            data.runtime\n                                                        )}\n                                                    </span>\n                                                </div>\n                                            )}\n                                        </div>\n\n                                        {director?.length > 0 && (\n                                            <div className=\"info\">\n                                                <span className=\"text bold\">\n                                                    Director:{\" \"}\n                                                </span>\n                                                <span className=\"text\">\n                                                    {director?.map((d, i) => (\n                                                        <span key={i}>\n                                                            {d.name}\n                                                            {director.length -\n                                                                1 !==\n                                                                i && \", \"}\n                                                        </span>\n                                                    ))}\n                                                </span>\n                                            </div>\n                                        )}\n\n                                        {writer?.length > 0 && (\n                                            <div className=\"info\">\n                                                <span className=\"text bold\">\n                                                    Writer:{\" \"}\n                                                </span>\n                                                <span className=\"text\">\n                                                    {writer?.map((d, i) => (\n                                                        <span key={i}>\n                                                            {d.name}\n                                                            {writer.length -\n                                                                1 !==\n                                                                i && \", \"}\n                                                        </span>\n                                                    ))}\n                                                </span>\n                                            </div>\n                                        )}\n\n                                        {data?.created_by?.length > 0 && (\n                                            <div className=\"info\">\n                                                <span className=\"text bold\">\n                                                    Creator:{\" \"}\n                                                </span>\n                                                <span className=\"text\">\n                                                    {data?.created_by?.map(\n                                                        (d, i) => (\n                                                            <span key={i}>\n                                                                {d.name}\n                                                                {data\n                                                                    ?.created_by\n                                                                    .length -\n                                                                    1 !==\n                                                                    i && \", \"}\n                                                            </span>\n                                                        )\n                                                    )}\n                                                </span>\n                                            </div>\n                                        )}\n                                    </div>\n                                </div>\n                                <VideoPopup\n                                    show={show}\n                                    setShow={setShow}\n                                    videoId={videoId}\n                                    setVideoId={setVideoId}\n                                />\n                            </ContentWrapper>\n                        </React.Fragment>\n                    )}\n                </>\n            ) : (\n                <div className=\"detailsBannerSkeleton\">\n                    <ContentWrapper>\n                        <div className=\"left skeleton\"></div>\n                        <div className=\"right\">\n                            <div className=\"row skeleton\"></div>\n                            <div className=\"row skeleton\"></div>\n                            <div className=\"row skeleton\"></div>\n                            <div className=\"row skeleton\"></div>\n                            <div className=\"row skeleton\"></div>\n                            <div className=\"row skeleton\"></div>\n                            <div className=\"row skeleton\"></div>\n                        </div>\n                    </ContentWrapper>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default DetailsBanner;\n\n'movix/src/components/contentWrapper/ContentWrapper.jsx'\n:import React from \"react\";\n\nimport \"./style.scss\";\n\nconst ContentWrapper = ({ children }) => {\n    return <div className=\"contentWrapper\">{children}</div>;\n};\n\nexport default ContentWrapper;\n\n'movix/src/main.jsx'\n:import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.scss\";\n\nimport { store } from \"./store/store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n",
        "gt": [
            "'movix/src/components/contentWrapper/ContentWrapper.jsx'",
            "'movix/src/pages/details/detailsBanner/DetailsBanner.jsx'",
            "'movix/src/pages/details/Details.jsx'",
            "'movix/src/App.jsx'",
            "'movix/src/main.jsx'"
        ]
    }
]