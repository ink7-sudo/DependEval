[
    {
        "files": [
            "'shiny_geoip/src/Responder/html/home.html.php'",
            "'shiny_geoip/src/Responder/ShowHomepageResponder.php'",
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/cli/app.php'",
            "'shiny_geoip/src/bootstrap.php'"
        ],
        "content": "'shiny_geoip/src/Responder/html/home.html.php'\n:<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta name=\"description\" content=\"Free GeoIP/Geolocation REST API. An open-source project by nekudo.com.\">\n    <title>Free IP GeoLocation/GeoIp API - geoip.nekudo.com</title>\n    <link rel=\"canonical\" href=\"http:\n    <link rel=\"stylesheet\" href=\"/css/base.css\">\n</head>\n<body>\n\n<div class=\"container\">\n\n    <header>\n        <h1>Free IP GeoLocation/GeoIp API</h1>\n        <p class=\"h2\">A free REST API to get location information for IP addresses.</p>\n    </header>\n\n\n    <div class=\"clearfix\">\n        <div class=\"left\">\n            <p>\n                This project is open source. Setup your own instance if you like.\n            </p>\n            <p>\n                <a href=\"https:\n                    Sourcecode at GitHub\n                </a>\n            </p>\n        </div>\n\n        <div class=\"right\">\n            <table class=\"bordered\">\n                <caption align=\"bottom\">Location data for your current IP address</caption>\n                <tbody>\n                    <?php if (!empty($record['city'])): ?>\n                        <tr>\n                            <td>City</td>\n                            <td><?php echo htmlspecialchars($record['city']); ?></td>\n                        </tr>\n                    <?php endif; ?>\n                    <?php if (!empty($record['country'])): ?>\n                        <tr>\n                            <td>Country</td>\n                            <td>\n                                <?php echo htmlspecialchars($record['country']['name']); ?>\n                                (<?php echo htmlspecialchars($record['country']['code']); ?>)\n                            </td>\n                        </tr>\n                    <?php endif; ?>\n                    <?php if (!empty($record['location'])): ?>\n                        <tr>\n                            <td>Latitute</td>\n                            <td>\n                                <?php echo htmlspecialchars($record['location']['latitude']); ?>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Longitude</td>\n                            <td>\n                                <?php echo htmlspecialchars($record['location']['longitude']); ?>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Time zone</td>\n                            <td>\n                                <?php echo htmlspecialchars($record['location']['time_zone']); ?>\n                            </td>\n                        </tr>\n                    <?php endif; ?>\n                    <?php if (empty($record)): ?>\n                        <tr><td><em>No record found.</em></td></tr>\n                    <?php endif; ?>\n                </tbody>\n            </table>\n\n        </div>\n    </div>\n\n    <div class=\"mt-60\">\n        <h3>API Documentation</h3>\n\n        <h4>Requests</h4>\n        <p>\n            All requests have to be HTTP GET requests in the following schema:\n        </p>\n        <pre>http:\n\n        <h4>Parameters</h4>\n        <table>\n            <tbody>\n            <tr>\n                <td class=\"param-name\">ip</td>\n                <td class=\"param-required\">optional</td>\n                <td>Valid IP address in IPv4 or IPv6 format.</td>\n            </tr>\n            <tr>\n                <td class=\"param-name\">language</td>\n                <td class=\"param-required\">optional</td>\n                <td>Two character language code like <em>en</em> or <em>de</em>.</td>\n            </tr>\n            <tr>\n                <td class=\"param-name\">type</td>\n                <td class=\"param-required\">optional</td>\n                <td>\n                    Possible values are <em>short</em> to get a response conataining only most relevant data or\n                    <em>full</em> to get a response containing all available data.\n                </td>\n            </tr>\n            </tbody>\n        </table>\n\n        <h4>Responses</h4>\n        <p class=\"textblock\">\n            By default all responses are JSON encoded strings.<br />\n            It is also possible to get JSONP responses for direct usage in javascripts. To get a JSONP response\n            a callback function has to be provided within the request using the <em>?callback=</em> parameter.\n        </p>\n\n\n        <h4>Examples</h4>\n        <pre>http:\n        <pre>http:\n        <pre>http:\n        <pre>http:\n        <pre>http:\n        <pre>\n&lt;script&gt;\nfunction foo(data) {\n    document.write(&quot;City: &quot;, data.city);\n    document.write(&quot;Country: &quot;, data.country.name);\n    document.write(&quot;Latitude: &quot;, data.location.latitude);\n    document.write(&quot;Longitude: &quot;, data.location.longitude);\n}\n&lt;/script&gt;\n&lt;script src=&quot;http:\n\n        <h4>SSL</h4>\n        <p class=\"textblock\">This service is also available via <a href=\"https:\n\n        <h4>Limits</h4>\n        <p class=\"textblock\">The API follows a fair use policy. There are no limits by default but if the service is\n            abused your IP may get blocked.</p>\n\n        <h4>Support/Donate</h4>\n        <p class=\"textblock\">\n            This API is totally free, however there are a few expenses to run the servers. In case you like this project\n            and use it regularly please consider\n            <a href=\"https:\n        </p>\n    </div>\n\n    <footer>\n        <p>\n            <small>\n                This product includes GeoLite2 data created by MaxMind, available from\n                <a href=\"http:\n                This website is another shiny project by <a href=\"https:\n            </small>\n        </p>\n    </footer>\n\n</div>\n\n\n</body>\n</html>\n'shiny_geoip/src/Responder/ShowHomepageResponder.php'\n:<?php\n\ndeclare(strict_types=1);\n\nnamespace Nekudo\\ShinyGeoip\\Responder;\n\nclass ShowHomepageResponder extends HttpResponder\n{\n\n    public function showHomepage(array $record)\n    {\n        ob_start();\n        require PROJECT_ROOT . '/src/Responder/html/home.html.php';\n        $payload = ob_get_clean();\n        $this->found($payload);\n    }\n}\n\n'shiny_geoip/src/bootstrap_cli.php'\n:<?php\n\ndeclare(strict_types=1);\n\n\ninclude __DIR__ . '/bootstrap.php';\n\n\nrequire_once __DIR__ . '/ShinyGeoipCli.php';\nrequire_once __DIR__ . '/Action/Cli/CliAction.php';\nrequire_once __DIR__ . '/Action/Cli/BenchmarkAction.php';\nrequire_once __DIR__ . '/Action/Cli/ShowHelpAction.php';\nrequire_once __DIR__ . '/Action/Cli/UpdateMmdbAction.php';\nrequire_once __DIR__ . '/Responder/CliResponder.php';\n\n'shiny_geoip/cli/app.php'\n:<?php\n\nrequire_once __DIR__ . '/../src/bootstrap_cli.php';\n\n$app = new \\Nekudo\\ShinyGeoip\\ShinyGeoipCli($config);\n$app->dispatch($argv);\n\n'shiny_geoip/src/bootstrap.php'\n:<?php\n\ndeclare(strict_types=1);\n\ndefine('PROJECT_ROOT', __DIR__ . '/../');\n\n$config = include PROJECT_ROOT . 'config/config.php';\n\nrequire_once PROJECT_ROOT . 'src/ShinyGeoip.php';\nrequire_once PROJECT_ROOT . 'src/Action/ShowHomepageAction.php';\nrequire_once PROJECT_ROOT . 'src/Action/ShowLocationAction.php';\nrequire_once PROJECT_ROOT . 'src/Domain/LocationDomain.php';\nrequire_once PROJECT_ROOT . 'src/Responder/HttpResponder.php';\nrequire_once PROJECT_ROOT . 'src/Responder/ShowLocationResponder.php';\nrequire_once PROJECT_ROOT . 'src/Responder/ShowHomepageResponder.php';\n\n\nif (!class_exists('MaxMind\\Db\\Reader')) {\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Decoder.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Util.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Metadata.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/InvalidDatabaseException.php';\n}\n",
        "gt": [
            "'shiny_geoip/src/Responder/html/home.html.php'",
            "'shiny_geoip/src/Responder/ShowHomepageResponder.php'",
            "'shiny_geoip/src/bootstrap.php'",
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/cli/app.php'"
        ]
    },
    {
        "files": [
            "'runtime/Tests/phpt/kernel-loop.php'",
            "'runtime/Tests/phpt/autoload.php'",
            "'runtime/Tests/phpt/kernel.php'"
        ],
        "content": "'runtime/Tests/phpt/kernel-loop.php'\n:<?php\n\n\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Runtime\\Runner\\ClosureRunner;\nuse Symfony\\Component\\Runtime\\RunnerInterface;\nuse Symfony\\Component\\Runtime\\SymfonyRuntime;\n\nrequire __DIR__.'/autoload.php';\n\n$runtime = new class(['project_dir' => __DIR__]) extends SymfonyRuntime {\n    public function getRunner(?object $kernel): RunnerInterface\n    {\n        return new ClosureRunner(static function () use ($kernel): int {\n            $kernel->handle(new Request())->send();\n            echo \"\\n\";\n            $kernel->handle(new Request())->send();\n            echo \"\\n\";\n\n            return 0;\n        });\n    }\n};\n\n[$app, $args] = $runtime->getResolver(require __DIR__.'/kernel.php')->resolve();\necho $runtime->getRunner($app(...$args))->run();\n\n'runtime/Tests/phpt/autoload.php'\n:<?php\n\n\n\nuse Symfony\\Component\\Runtime\\SymfonyRuntime;\n\n$_SERVER['APP_RUNTIME_OPTIONS'] ??= [];\n$_SERVER['APP_RUNTIME_OPTIONS'] += [\n    'project_dir' => __DIR__,\n] + ($_SERVER['APP_RUNTIME_OPTIONS'] ?? []);\n\nif (file_exists(dirname(__DIR__, 2).'/vendor/autoload.php')) {\n    if (true === (require_once dirname(__DIR__, 2).'/vendor/autoload.php') || empty($_SERVER['SCRIPT_FILENAME'])) {\n        return;\n    }\n\n    $app = require $_SERVER['SCRIPT_FILENAME'];\n    $runtime = $_SERVER['APP_RUNTIME'] ?? SymfonyRuntime::class;\n    $runtime = new $runtime($_SERVER['APP_RUNTIME_OPTIONS']);\n    [$app, $args] = $runtime->getResolver($app)->resolve();\n    exit($runtime->getRunner($app(...$args))->run());\n}\n\nif (!file_exists(dirname(__DIR__, 6).'/vendor/autoload_runtime.php')) {\n    throw new LogicException('Autoloader not found.');\n}\n\nrequire dirname(__DIR__, 6).'/vendor/autoload_runtime.php';\n\n'runtime/Tests/phpt/kernel.php'\n:<?php\n\n\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\n\nrequire __DIR__.'/autoload.php';\n\nclass TestKernel implements HttpKernelInterface\n{\n    private string $var;\n\n    public function __construct(string $var)\n    {\n        $this->var = $var;\n    }\n\n    public function handle(Request $request, $type = self::MAIN_REQUEST, $catch = true): Response\n    {\n        return new Response('OK Kernel '.$this->var);\n    }\n}\n\nreturn fn (array $context) => new TestKernel($context['SOME_VAR']);\n",
        "gt": [
            "'runtime/Tests/phpt/autoload.php'",
            "'runtime/Tests/phpt/kernel.php'",
            "'runtime/Tests/phpt/kernel-loop.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/class/db.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/config.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-auth.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/class/db.php'\n:<?php\n\n$config['password'] = 'UnamSanctam';\n\n\n$config['db_file'] = __DIR__.\"/db/unamwebpanel.db\";\n\n\n$config['hashrate_history'] = true;\n\n\n$config['hashrate_history_limit'] = 1440;\n\n\n$config['failedlogin_blocktime'] = 15;\n$config['failedlogin_blocktries'] = 5;\n\n\n$config['errorlog_enable'] = true;\n\n$config['languages'] = [\n    'en'=>'English',\n    'sv'=>'Swedish',\n    'fr'=>'French',\n    'de'=>'German',\n    'pl'=>'Polish',\n    'ru'=>'Russian',\n    'uk'=>'Ukrainian',\n    'es'=>'Spanish'\n];\n\n$config['unam_version'] = \"1.8.0\";\n\nglobal $config;\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/api/ajax-auth.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once dirname(__DIR__).'/assets/php/session-header.php';\n\nif(getParam('csrf_token') != $_SESSION['csrf_token']) {\n    $base->unam_echoFailure('Invalid CSRF token.');\n} else {\n    $hostAddress = $_SERVER[\"REMOTE_ADDR\"] ?? '127.0.0.1';\n    $loginBlock = $base->unam_dbSelect(getConn(), 'loginblock', '*', ['lb_ip' => $hostAddress]);\n    if (!empty($loginBlock) && ($loginBlock['lb_logintries'] >= $config['failedlogin_blocktries'] || $loginBlock['lb_logintries'] == 0) && (strtotime(date(\"Y-m-d H:i:s\")) - strtotime($loginBlock['lb_datetime'])) / 60 < $loginBlock['lb_blocktime']) {\n        $base->unam_echoFailure(sprintf($larr['login_blocked'], ($loginBlock['lb_blocktime'] - (int)((strtotime(date(\"Y-m-d H:i:s\")) - strtotime($loginBlock['lb_datetime'])) / 60))));\n    } else if (!empty(getParam('password'))) {\n        if (getParam('password') === $config['password']) {\n            $_SESSION['logged_in'] = password_hash($config['password'], PASSWORD_DEFAULT);\n            $base->unam_dbDelete(getConn(), \"loginblock\", ['lb_ip' => $hostAddress]);\n            $base->unam_echoSuccess();\n        } else {\n            if (empty($loginBlock) || ((strtotime(date(\"Y-m-d H:i:s\")) - strtotime($loginBlock['lb_datetime'])) / 60 >= $loginBlock['lb_blocktime'])) {\n                $base->unam_dbDelete(getConn(), \"loginblock\", ['lb_ip' => $hostAddress]);\n                $base->unam_dbInsert(getConn(), 'loginblock', ['lb_ip' => $hostAddress, 'lb_logintries' => 1, 'lb_datetime' => date('Y-m-d H:i:s'), 'lb_blocktime' => $config['failedlogin_blocktime']]);\n            } else {\n                $base->unam_dbUpdate(getConn(), 'loginblock', ['lb_logintries' => $loginBlock['lb_logintries'] + 1], ['lb_ip' => $hostAddress]);\n            }\n\n            $base->unam_echoFailure('Wrong password!');\n        }\n    } else {\n        $base->unam_echoFailure('Some required fields are missing.');\n    }\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/config.php'",
            "'UnamWebPanel/UnamWebPanel/class/db.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-auth.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/lang/lang.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'security.php';\n?><meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<meta name=\"robots\" content=\"noindex, nofollow\">\n\n<link rel=\"icon\" type=\"image/png\" href=\"../assets/img/favicon.png\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/fontawesome.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/solid.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/izitoast/iziToast.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/select2/select2.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/jquery-confirm/jquery-confirm.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/datatables/datatables.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/adminlte.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/custom.css\">\n'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/lang/lang.php'\n:\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/lang/lang.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ]
    },
    {
        "files": [
            "'spa-starter-kit/webservice/server.php'",
            "'spa-starter-kit/webservice/public/index.php'",
            "'spa-starter-kit/webservice/bootstrap/app.php'"
        ],
        "content": "'spa-starter-kit/webservice/server.php'\n:<?php\n\n\n\n$uri = urldecode(\n    parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH)\n);\n\n\n\n\nif ($uri !== '/' && file_exists(__DIR__.'/public'.$uri)) {\n    return false;\n}\n\nrequire_once __DIR__.'/public/index.php';\n\n'spa-starter-kit/webservice/public/index.php'\n:<?php\n\n\n\n\n\nrequire __DIR__.'/../bootstrap/autoload.php';\n\n\n\n$app = require_once __DIR__.'/../bootstrap/app.php';\n\n\n\n$kernel = $app->make(Illuminate\\Contracts\\Http\\Kernel::class);\n\n$response = $kernel->handle(\n    $request = Illuminate\\Http\\Request::capture()\n);\n\n$response->send();\n\n$kernel->terminate($request, $response);\n\n'spa-starter-kit/webservice/bootstrap/app.php'\n:<?php\n\n\n\n$app = new Illuminate\\Foundation\\Application(\n    realpath(__DIR__.'/../')\n);\n\n\n\n$app->singleton(\n    Illuminate\\Contracts\\Http\\Kernel::class,\n    App\\Http\\Kernel::class\n);\n\n$app->singleton(\n    Illuminate\\Contracts\\Console\\Kernel::class,\n    App\\Console\\Kernel::class\n);\n\n$app->singleton(\n    Illuminate\\Contracts\\Debug\\ExceptionHandler::class,\n    App\\Exceptions\\Handler::class\n);\n\n\n\nreturn $app;\n",
        "gt": [
            "'spa-starter-kit/webservice/bootstrap/app.php'",
            "'spa-starter-kit/webservice/public/index.php'",
            "'spa-starter-kit/webservice/server.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/assets/php/styles.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'security.php';\n?><meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<meta name=\"robots\" content=\"noindex, nofollow\">\n\n<link rel=\"icon\" type=\"image/png\" href=\"../assets/img/favicon.png\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/fontawesome.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/solid.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/izitoast/iziToast.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/select2/select2.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/jquery-confirm/jquery-confirm.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/datatables/datatables.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/adminlte.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/custom.css\">\n'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/navbar.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/config.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/navbar.php'\n:<?php\n\n$config['password'] = 'UnamSanctam';\n\n\n$config['db_file'] = __DIR__.\"/db/unamwebpanel.db\";\n\n\n$config['hashrate_history'] = true;\n\n\n$config['hashrate_history_limit'] = 1440;\n\n\n$config['failedlogin_blocktime'] = 15;\n$config['failedlogin_blocktries'] = 5;\n\n\n$config['errorlog_enable'] = true;\n\n$config['languages'] = [\n    'en'=>'English',\n    'sv'=>'Swedish',\n    'fr'=>'French',\n    'de'=>'German',\n    'pl'=>'Polish',\n    'ru'=>'Russian',\n    'uk'=>'Ukrainian',\n    'es'=>'Spanish'\n];\n\n$config['unam_version'] = \"1.8.0\";\n\nglobal $config;\n'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/config.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/navbar.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/class/db.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/config.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-auth.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/class/db.php'\n:<?php\n\n$config['password'] = 'UnamSanctam';\n\n\n$config['db_file'] = __DIR__.\"/db/unamwebpanel.db\";\n\n\n$config['hashrate_history'] = true;\n\n\n$config['hashrate_history_limit'] = 1440;\n\n\n$config['failedlogin_blocktime'] = 15;\n$config['failedlogin_blocktries'] = 5;\n\n\n$config['errorlog_enable'] = true;\n\n$config['languages'] = [\n    'en'=>'English',\n    'sv'=>'Swedish',\n    'fr'=>'French',\n    'de'=>'German',\n    'pl'=>'Polish',\n    'ru'=>'Russian',\n    'uk'=>'Ukrainian',\n    'es'=>'Spanish'\n];\n\n$config['unam_version'] = \"1.8.0\";\n\nglobal $config;\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/api/ajax-auth.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once dirname(__DIR__).'/assets/php/session-header.php';\n\nif(getParam('csrf_token') != $_SESSION['csrf_token']) {\n    $base->unam_echoFailure('Invalid CSRF token.');\n} else {\n    $hostAddress = $_SERVER[\"REMOTE_ADDR\"] ?? '127.0.0.1';\n    $loginBlock = $base->unam_dbSelect(getConn(), 'loginblock', '*', ['lb_ip' => $hostAddress]);\n    if (!empty($loginBlock) && ($loginBlock['lb_logintries'] >= $config['failedlogin_blocktries'] || $loginBlock['lb_logintries'] == 0) && (strtotime(date(\"Y-m-d H:i:s\")) - strtotime($loginBlock['lb_datetime'])) / 60 < $loginBlock['lb_blocktime']) {\n        $base->unam_echoFailure(sprintf($larr['login_blocked'], ($loginBlock['lb_blocktime'] - (int)((strtotime(date(\"Y-m-d H:i:s\")) - strtotime($loginBlock['lb_datetime'])) / 60))));\n    } else if (!empty(getParam('password'))) {\n        if (getParam('password') === $config['password']) {\n            $_SESSION['logged_in'] = password_hash($config['password'], PASSWORD_DEFAULT);\n            $base->unam_dbDelete(getConn(), \"loginblock\", ['lb_ip' => $hostAddress]);\n            $base->unam_echoSuccess();\n        } else {\n            if (empty($loginBlock) || ((strtotime(date(\"Y-m-d H:i:s\")) - strtotime($loginBlock['lb_datetime'])) / 60 >= $loginBlock['lb_blocktime'])) {\n                $base->unam_dbDelete(getConn(), \"loginblock\", ['lb_ip' => $hostAddress]);\n                $base->unam_dbInsert(getConn(), 'loginblock', ['lb_ip' => $hostAddress, 'lb_logintries' => 1, 'lb_datetime' => date('Y-m-d H:i:s'), 'lb_blocktime' => $config['failedlogin_blocktime']]);\n            } else {\n                $base->unam_dbUpdate(getConn(), 'loginblock', ['lb_logintries' => $loginBlock['lb_logintries'] + 1], ['lb_ip' => $hostAddress]);\n            }\n\n            $base->unam_echoFailure('Wrong password!');\n        }\n    } else {\n        $base->unam_echoFailure('Some required fields are missing.');\n    }\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/config.php'",
            "'UnamWebPanel/UnamWebPanel/class/db.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-auth.php'"
        ]
    },
    {
        "files": [
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/otphp/lib/hotp.php'",
            "'cpanel-UAPI-php-class/cpaneluapi.class.php'"
        ],
        "content": "'cpanel-UAPI-php-class/otphp/lib/otphp.php'\n:<?php\n\n\nrequire_once dirname(__FILE__).'/../vendor/libs.php';\nrequire_once dirname(__FILE__).'/otp.php';\nrequire_once dirname(__FILE__).'/hotp.php';\nrequire_once dirname(__FILE__).'/totp.php';\n\n\n'cpanel-UAPI-php-class/otphp/lib/hotp.php'\n:<?php\n\n\nnamespace OTPHP {\n\n  class HOTP extends OTP {\n\n    public function at($count) {\n      return $this->generateOTP($count);\n    }\n\n\n\n    public function verify($otp, $counter) {\n      return ($otp == $this->at($counter));\n    }\n\n\n    public function provisioning_uri($name, $initial_count) {\n      return \"otpauth:\n    }\n  }\n\n}\n\n'cpanel-UAPI-php-class/cpaneluapi.class.php'\n:<?php\n\n\n\n\nclass cpanelAPI\n{\n    public $version = '2.0';\n    public $ssl = 1;\n    public $port = 2083;\n    public $server;\n    public $maxredirect = 0;\n    public $user;\n    public $json = '';\n\n    protected $scope;\n    protected $api;\n    protected $auth;\n    protected $pass;\n    protected $secret;\n    protected $type;\n    protected $session;\n    protected $method;\n    protected $requestUrl;\n    protected $eno;\n    protected $emes;\n    protected $token = FALSE;\n    protected $httpMethod = 'GET';\n    protected $postData = '';\n\n    function __construct($user, $pass, $server, $secret = FALSE)\n    {\n        $this->user = $user;\n        $this->pass = $pass;\n        $this->server = $server;\n        if ($secret) {\n            $this->secret = $secret;\n            $this->set2Fa();\n        }\n    }\n\n\n    protected function set2Fa()\n    {\n        require 'otphp/lib/otphp.php';\n        $totp = new \\OTPHP\\TOTP($this->secret);\n        $this->token = $totp->now();\n    }\n\n    public function __get($name)\n    {\n        switch (strtolower($name)) {\n            case 'get':\n                $this->httpMethod = 'GET';\n                break;\n            case 'post':\n                $this->httpMethod = 'POST';\n                break;\n            case 'api2':\n                $this->setApi('api2');\n                break;\n            case 'uapi':\n                $this->setApi('uapi');\n                break;\n            default:\n                $this->scope = $name;\n        }\n        return $this;\n    }\n\n\n    protected function setApi($api)\n    {\n        $this->api = $api;\n        $this->setMethod();\n        return $this;\n    }\n\n\n    protected function setMethod()\n    {\n        switch ($this->api) {\n            case 'uapi':\n                $this->method = '/execute/';\n                break;\n            case 'api2':\n                $this->method = '/json-api/cpanel/';\n                break;\n            default:\n                throw new Exception('$this->api is not set or is incorrectly set. The only available options are \\'uapi\\' or \\'api2\\'');\n        }\n        return $this;\n    }\n\n\n    public function __toString()\n    {\n        return $this->json;\n    }\n\n\n    public function __call($name, $arguments)\n    {\n        if (count($arguments) < 1 || !is_array($arguments[0]))\n            $arguments[0] = [];\n        $this->json = $this->APIcall($name, $arguments[0]);\n        return json_decode($this->json);\n    }\n\n\n    protected function APIcall($name, $arguments)\n    {\n        $this->auth = base64_encode($this->user . \":\" . $this->pass);\n        $this->type = $this->ssl == 1 ? \"https:\n        $this->requestUrl = $this->type . $this->server . ':' . $this->port . $this->method;\n        switch ($this->api) {\n            case 'uapi':\n                $this->requestUrl .= ($this->scope != '' ? $this->scope . \"/\" : '') . $name . '?';\n                break;\n            case 'api2':\n                if ($this->scope == '') {\n                    throw new Exception('Scope must be set.');\n                }\n                $this->requestUrl .= '?cpanel_jsonapi_user=' . $this->user . '&cpanel_jsonapi_apiversion=2&cpanel_jsonapi_module=' . $this->scope . '&cpanel_jsonapi_func=' . $name . '&';\n                break;\n            default:\n                throw new Exception('$this->api is not set or is incorrectly set. The only available options are \\'uapi\\' or \\'api2\\'');\n        }\n        if($this->httpMethod == 'GET') {\n            $this->requestUrl .= http_build_query($arguments);\n        }\n        if($this->httpMethod == 'POST'){\n            $this->postData = $arguments;\n        }\n\n        return $this->curl_request($this->requestUrl);\n    }\n\n\n    protected function curl_request($url)\n    {\n        $httpHeaders = array(\"Authorization: Basic \" . $this->auth);\n\n        if ($this->token) {\n            $httpHeaders[] = \"X-CPANEL-OTP: \" . $this->token;\n        }\n        $ch = curl_init();\n        if($this->httpMethod == 'POST'){\n            $httpHeaders[] = \"Content-type: multipart/form-data\";\n            curl_setopt($ch,CURLOPT_POSTFIELDS, $this->postData);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $httpHeaders);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 100020);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n\n        $content = $this->curl_exec_follow($ch, $this->maxredirect);\n        $this->eno = curl_errno($ch);\n        $this->emes = curl_error($ch);\n\n        curl_close($ch);\n\n        return $content;\n    }\n\n\n    protected function curl_exec_follow($ch, &$maxredirect = null)\n    {\n\n\n        $user_agent = \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.5)\" .\n            \" Gecko/20041107 Firefox/1.0\";\n        curl_setopt($ch, CURLOPT_USERAGENT, $user_agent);\n\n        $mr = $maxredirect === null ? 5 : intval($maxredirect);\n\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $mr > 0);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $mr);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n        return curl_exec($ch);\n    }\n\n\n    public function getLastRequest()\n    {\n        return $this->requestUrl;\n    }\n\n\n    public function getError()\n    {\n        if (!empty($this->eno)) {\n            return ['no' => $this->eno, 'message' => $this->emes];\n        }\n        return FALSE;\n    }\n}\n",
        "gt": [
            "'cpanel-UAPI-php-class/otphp/lib/hotp.php'",
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/cpaneluapi.class.php'"
        ]
    },
    {
        "files": [
            "'litefilesystem.js/src/include/core.php'",
            "'litefilesystem.js/src/server.php'",
            "'litefilesystem.js/src/include/extra/Predis/Autoloader.php'"
        ],
        "content": "'litefilesystem.js/src/include/core.php'\n:<?php\n\n\n\n\n\nerror_reporting(E_ALL);\n\n\n\n\n\n$is_console = php_sapi_name() == \"cli\";\n\nif($is_console && count($argv) > 1)\n\n{\n\n\t$params = explode( \"&\",  $argv[1] );\n\n\tforeach($params as $p => $param)\n\n\t{\n\n\t\t$t = explode( \"=\", $param );\n\n\t\tif( count($t) > 1 )\n\n\t\t\t$_REQUEST[ $t[0] ] = $t[1];\n\n\t}\n\n}\n\n\n\nif( !$is_console )\n\n\t$global_url = \"http:\n\nelse\n\n\t$global_url = \"localhost/\";\n\n\n\n\n\n\n\nif (!file_exists(__DIR__ . \"/config.php\"))\n\n\tdie(\"config.php not found, check include/config.sample-php, change it and rename it to include/config.php\");\n\n\n\nrequire_once __DIR__ . \"/config.php\";\n\n\n\n\n\n$session_enabled = false;\n\nif(!headers_sent())\n\n\t$session_enabled = session_start();\n\n\n\n\n\nfunction trace($str)\n\n{\n\n\n\n\t$f = fopen(__DIR__.\"/trace.log\",\"a\");\n\n\tfwrite($f, date(\"Y-m-d H:i:s\") . \": \" . $str.\"\\n\");\n\n\tfclose($f);\n\n}\n\n\n\n$debug_buffer = Array();\n\nfunction debug($str, $color = null)\n\n{\n\n\tglobal $debug_buffer, $is_console;\n\n\n\n\tif($color && $is_console)\n\n\t{\n\n\t\t$colors = Array(\"\"=>\"\\033[0m\", \"black\"=>\"\\033[30m\", \"red\"=>\"\\033[31m\", \"green\"=>\"\\033[32m\", \"yellow\"=>\"\\033[33m\", \"blue\"=>\"\\033[34m\" );\n\n\t\tif( isset($colors[$color]))\n\n\t\t\t$str = $colors[$color] . $str . $colors[\"\"];\n\n\t}\n\n\n\n\tif($is_console)\n\n\t\techo(\" LOG: \" . $str.\"\\n\");\n\n\telse\n\n\t\t$debug_buffer[] = $str;\n\n}\n\n\n\nfunction clearDebugLog()\n\n{\n\n\tglobal $debug_buffer;\n\n\t$debug_buffer = Array();\n\n}\n\n\n\nfunction getDebugLog()\n\n{\n\n\tglobal $debug_buffer;\n\n\treturn $debug_buffer;\n\n}\n\n\n\n\n\n$loaded_modules = array();\n\n\n\nfunction registerModule($modulename, $class)\n\n{\n\n\tglobal $loaded_modules;\n\n\t$loaded_modules[$modulename] = new $class();\n\n}\n\n\n\nfunction getModule($modulename)\n\n{\n\n\tglobal $loaded_modules;\n\n\n\n\tif( strpos(\"..\",$modulename) != FALSE)\n\n\t\treturn null;\n\n\n\n\tif( isset( $loaded_modules[$modulename] ) )\n\n\t\treturn $loaded_modules[$modulename];\n\n\n\n\tif( file_exists(__DIR__ . \"/modules/\" . $modulename . \".php\") == FALSE)\n\n\t\treturn NULL;\n\n\n\n\n\n\trequire_once \"modules/\" . $modulename . \".php\";\n\n\n\n\treturn $loaded_modules[$modulename];\n\n}\n\n\n\nfunction loadModules($str)\n\n{\n\n\t$result = Array();\n\n\tif($str == \"*\")\n\n\t{\n\n\t\t$files = scandir(__DIR__ . '/modules/');\n\n\t\tforeach($files as $file)\n\n\t\t{\n\n\t\t\tif ($file == '.' || $file == '..' || substr($file,-4) != \".php\") continue;\n\n\n\n\t\t\t$module = getModule( substr($file,0,-4) );\n\n\t\t\t$result[] = $module;\n\n\t\t}\n\n\t\treturn $result;\n\n\t}\n\n\n\n\t$tokens = explode(\",\",$str);\n\n\tforeach($tokens as $k=>$v)\n\n\t\t$result[] = getModule($v);\n\n\treturn $result;\n\n}\n\n\n\n\n\nfunction dispatchEventToModules($event_type, &$data )\n\n{\n\n\t$modules = loadModules(\"*\");\n\n\t$result = true;\n\n\tforeach($modules as $module)\n\n\t{\n\n\t\tif( !method_exists($module, $event_type) )\n\n\t\t\tcontinue;\n\n\n\n\t\t$r = call_user_func_array( array($module , $event_type), array(&$data));\n\n\t\tif( $r === false)\n\n\t\t\t$result = false;\n\n\t}\n\n\treturn $result;\n\n}\n\n\n\n\n\n\n\n\n\n$mysqli = null;\n\n\n\nfunction getSQLDB()\n\n{\n\n\tglobal $mysqli;\n\n\tif( $mysqli )\n\n\t\treturn $mysqli;\n\n\n\n\t$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD);\n\n\tif (mysqli_connect_errno())\n\n\t\treturn null;\n\n\n\n\tif( $mysqli->select_db(DB_NAME) == FALSE)\n\n\t\treturn null;\n\n\n\n\treturn $mysqli;\n\n}\n\n\n\nfunction closeSQLDB()\n\n{\n\n\tglobal $mysqli;\n\n\tif( $mysqli ) $mysqli->close();\n\n}\n\n\n\n\n\n$redis = null;\n\nrequire_once 'extra/Predis/Autoloader.php';\n\n\n\nfunction getRedisDB()\n\n{\n\n\tglobal $redis;\n\n\tif ($redis) return $redis;\n\n\n\n\tPredis\\Autoloader::register();\n\n\t$redis = new Predis\\Client();\n\n\treturn $redis;\n\n}\n\n\n\n?>\n'litefilesystem.js/src/server.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n\n\nheader('Content-Type: application/json');\n\n\n\n\n\nif (!file_exists(__DIR__ . \"/include/config.php\"))\n\n\tdie('{\"status\":-10, \"msg\":\"config.php not found, check include/config.sample-php, change it and rename it to include/config.php\"}');\n\nrequire_once 'include/core.php';\n\n\n\n\n\nif( !isset($_REQUEST[\"action\"]) )\n\n{\n\n\tloadModules(\"*\");\n\n\tdie('{\"msg\":\"no action\"}');\n\n}\n\n\n\n\n\n$action = $_REQUEST[\"action\"];\n\n\n\n$pos = strpos($action,\"/\");\n\nif ($pos == false)\n\n\tdie('{\"msg\":\"no module in action\"}' . \"\\n\");\n\n\n\n$module_name = substr($action,0,$pos);\n\n$module_action = substr($action, $pos + 1, strlen($action) - $pos - 1);\n\n\n\n\n\n$module = getModule($module_name);\n\nif($module && method_exists($module,\"processAction\"))\n\n\t$module->processAction($module_action);\n\nelse\n\n\techo('{\"msg\":\"module not found\"}');\n\n\n\necho \"\\n\";\n\ncloseSQLDB();\n\n?>\n'litefilesystem.js/src/include/extra/Predis/Autoloader.php'\n:<?php\n\n\n\nnamespace Predis;\n\n\nclass Autoloader\n{\n    private $directory;\n    private $prefix;\n    private $prefixLength;\n\n\n    public function __construct($baseDirectory = __DIR__)\n    {\n        $this->directory = $baseDirectory;\n        $this->prefix = __NAMESPACE__ . '\\\\';\n        $this->prefixLength = strlen($this->prefix);\n    }\n\n\n    public static function register($prepend = false)\n    {\n        spl_autoload_register(array(new self, 'autoload'), true, $prepend);\n    }\n\n\n    public function autoload($className)\n    {\n        if (0 === strpos($className, $this->prefix)) {\n            $parts = explode('\\\\', substr($className, $this->prefixLength));\n            $filepath = $this->directory.DIRECTORY_SEPARATOR.implode(DIRECTORY_SEPARATOR, $parts).'.php';\n            if (is_file($filepath)) {\n                require($filepath);\n            }\n        }\n    }\n}\n",
        "gt": [
            "'litefilesystem.js/src/include/extra/Predis/Autoloader.php'",
            "'litefilesystem.js/src/include/core.php'",
            "'litefilesystem.js/src/server.php'"
        ]
    },
    {
        "files": [
            "'laravel-facebook-login/bootstrap/start.php'",
            "'laravel-facebook-login/public/index.php'",
            "'laravel-facebook-login/bootstrap/paths.php'",
            "'laravel-facebook-login/server.php'"
        ],
        "content": "'laravel-facebook-login/bootstrap/start.php'\n:<?php\n\n\n\n$app = new Illuminate\\Foundation\\Application;\n\n\n\n\n\n$env = $app->detectEnvironment(array(\n\n\t'local' => array('*localhost*'),\n\n));\n\n\n\n$app->bindInstallPaths(require __DIR__.'/paths.php');\n\n\n\n$framework = $app['path.base'].'/vendor/laravel/framework/src';\n\nrequire $framework.'/Illuminate/Foundation/start.php';\n\n\n\nreturn $app;\n\n'laravel-facebook-login/public/index.php'\n:<?php\n\n\n\n\nrequire __DIR__.'/../bootstrap/autoload.php';\n\n\n\n$app = require_once __DIR__.'/../bootstrap/start.php';\n\n\n\n$app->run();\n\n\n\n$app->shutdown();\n'laravel-facebook-login/bootstrap/paths.php'\n:<?php\n\nreturn array(\n\n\n\n\t'app' => __DIR__.'/../app',\n\n\n\n\t'public' => __DIR__.'/../public',\n\n\n\n\t'base' => __DIR__.'/..',\n\n\n\n\t'storage' => __DIR__.'/../app/storage',\n\n);\n\n'laravel-facebook-login/server.php'\n:<?php\n\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$uri = urldecode($uri);\n\n$paths = require __DIR__.'/bootstrap/paths.php';\n\n$requested = $paths['public'].$uri;\n\n\n\n\nif ($uri !== '/' and file_exists($requested))\n{\n\treturn false;\n}\n\nrequire_once $paths['public'].'/index.php';\n",
        "gt": [
            "'laravel-facebook-login/bootstrap/paths.php'",
            "'laravel-facebook-login/bootstrap/start.php'",
            "'laravel-facebook-login/public/index.php'",
            "'laravel-facebook-login/server.php'"
        ]
    },
    {
        "files": [
            "'HadooPHP/lib/Hadoophp/MapReduce/Mapper.php'",
            "'HadooPHP/lib/Hadoophp/MapReduce/Base.php'",
            "'HadooPHP/examples/HitsByUri2/Mapper.php'"
        ],
        "content": "'HadooPHP/lib/Hadoophp/MapReduce/Mapper.php'\n:<?php\n\nnamespace Hadoophp\\MapReduce;\n\nrequire_once('Hadoophp/MapReduce/Base.php');\n\n\nabstract class Mapper extends Base\n{\n\tpublic function __construct()\n\t{\n\t\tparent::__construct();\n\n\t\t$this->inputFieldSeparator = isset($_SERVER['stream_map_input_field_separator']) ? $_SERVER['stream_map_input_field_separator'] : \"\\t\";\n\t\t$this->outputFieldSeparator = isset($_SERVER['stream_map_output_field_separator']) ? $_SERVER['stream_map_output_field_separator'] : \"\\t\";\n\n\t\t$this->inputKeyFields = 1;\n\n\t\tif(!isset($_SERVER['stream_map_input_writer_class']) || $_SERVER['stream_map_input_writer_class'] == 'org.apache.hadoop.streaming.io.TextInputWriter') {\n\n\t\t\t$isTIF = !isset($_SERVER['mapred_input_format_class']) || $_SERVER['mapred_input_format_class'] == 'org.apache.hadoop.mapred.TextInputFormat';\n\t\t\tif(\n\t\t\t\t(!isset($_SERVER['stream_map_input_ignoreKey']) && $isTIF) ||\n\t\t\t\t(isset($_SERVER['stream_map_input_ignoreKey']) && $_SERVER['stream_map_input_ignoreKey'] == 'true')\n\t\t\t) {\n\t\t\t\t$this->inputKeyFields = 0;\n\t\t\t}\n\t\t}\n\t\t$this->outputKeyFields = isset($_SERVER['stream_num_map_output_key_fields']) ? (int)$_SERVER['stream_num_map_output_key_fields'] : 1;\n\t}\n\n\n\tpublic function handle()\n\t{\n\t\twhile(($line = $this->read()) !== false) {\n\t\t\t$kv = $this->split($line);\n\t\t\tif(!$kv || count($kv) != 2) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlist($key, $value) = $kv;\n\n\t\t\t$this->map($key, $value);\n\n\t\t\tif(HADOOPHP_DEBUG) {\n\t\t\t\t$this->emitCounter('SkippingTaskCounters', 'MapProcessedRecords');\n\t\t\t}\n\t\t}\n\t}\n\n\n\tabstract protected function map($key, $value);\n}\n\n?>\n'HadooPHP/lib/Hadoophp/MapReduce/Base.php'\n:<?php\n\nnamespace Hadoophp\\MapReduce;\n\nrequire_once('Hadoophp/MapReduce/Key.php');\n\n\nabstract class Base\n{\n\n\tprivate $handle;\n\n\tprotected $inputFieldSeparator = \"\\t\";\n\tprotected $outputFieldSeparator = \"\\t\";\n\tprotected $inputKeyFields = 1;\n\tprotected $outputKeyFields = 1;\n\n\n\tpublic function __construct()\n\t{\n\t\t$this->handle = fopen('php:\n\n\t\t$this->reporterPrefix = isset($_SERVER['stream_stderr_reporter_prefix']) ? $_SERVER['stream_stderr_reporter_prefix'] : 'reporter:';\n\t}\n\n\n\tprotected function read() {\n\t\t$retval = fgets($this->handle);\n\t\tif($retval !== false) {\n\t\t\treturn rtrim($retval, \"\\n\");\n\t\t}\n\t\treturn false;\n\t}\n\n\n\tprotected function split($line)\n\t{\n\t\tif($this->inputKeyFields == 0) {\n\n\t\t\t$key = array(null);\n\t\t\t$value = $line;\n\t\t} else {\n\t\t\t$parts = array_chunk(explode($this->inputFieldSeparator, $line, $this->inputKeyFields + 1), $this->inputKeyFields);\n\n\t\t\tif(count($parts) != 2) {\n\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\t$key = $parts[0];\n\t\t\t$value = $parts[1][0];\n\t\t}\n\n\t\treturn array(new Key($key, $this->inputFieldSeparator, $this->inputKeyFields), $value);\n\t}\n\n\n\tprotected function emit($key, $value)\n\t{\n\t\tif($key instanceof Key) {\n\t\t\t$key = $key->getParts();\n\t\t} elseif(!is_array($key)) {\n\t\t\t$key = array($key);\n\t\t}\n\n\t\techo implode($this->outputFieldSeparator, $key) . $this->outputFieldSeparator . $value . \"\\n\";\n\t}\n\n\n\tprotected function emitCounter($group, $counter, $amount = 1)\n\t{\n\t\tfile_put_contents('php:\n\t}\n\n\n\tprotected function emitStatus($message)\n\t{\n\t\tfile_put_contents('php:\n\t}\n\n\n\tabstract public function handle();\n}\n\n?>\n'HadooPHP/examples/HitsByUri2/Mapper.php'\n:<?php\n\nrequire_once('Hadoophp/MapReduce/Mapper.php');\nrequire_once('Hadoophp/MapReduce/Util.php');\n\nclass Mapper extends \\Hadoophp\\MapReduce\\Mapper\n{\n\tprotected function map($key, $value)\n\t{\n\t\tif($log = \\Hadoophp\\MapReduce\\Util::parseApacheLogLine($value)) {\n\t\t\t$this->emit(\"LongValueSum:\" . $log['request_uri'], 1);\n\t\t}\n\t}\n}\n\n?>",
        "gt": [
            "'HadooPHP/lib/Hadoophp/MapReduce/Base.php'",
            "'HadooPHP/lib/Hadoophp/MapReduce/Mapper.php'",
            "'HadooPHP/examples/HitsByUri2/Mapper.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/lang/lang.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'security.php';\n?><meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<meta name=\"robots\" content=\"noindex, nofollow\">\n\n<link rel=\"icon\" type=\"image/png\" href=\"../assets/img/favicon.png\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/fontawesome.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/solid.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/izitoast/iziToast.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/select2/select2.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/jquery-confirm/jquery-confirm.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/datatables/datatables.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/adminlte.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/custom.css\">\n'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/lang/lang.php'\n:\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/lang/lang.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ]
    },
    {
        "files": [
            "'WordPress-Domain-Changer/wpdc/index.php'",
            "'WordPress-Domain-Changer/wpdc/includes/classes/class.DatabaseTable.php'",
            "'WordPress-Domain-Changer/wpdc/includes/bootstrap.php'"
        ],
        "content": "'WordPress-Domain-Changer/wpdc/index.php'\n:<?php\n\n\n\nrequire dirname( __FILE__ ) . '/includes/bootstrap.php';\n\n\n$controller = new Controller();\n\n\n$controller->handleRequestAndDie();\n\n'WordPress-Domain-Changer/wpdc/includes/classes/class.DatabaseTable.php'\n:<?php\nclass DatabaseTable {\n\n  public $database;\n  public $name;\n  public $columns;\n\n\n  public function __construct( $database, $name ) {\n    $this->database = $database;\n    $this->name     = $name;\n  }\n\n  public function getRowCount() {\n    return $this->getMeta()->rows;\n  }\n\n  public function getPrimaryKeyColumns() {\n    $columns = array();\n    foreach ( $this->getColumns() as $column ) if ( $column->is_primary_key ) $columns[] = $column;\n      return $columns;\n  }\n\n  public function getMeta() {\n    $mapping = array(\n      \"Name\"            => \"name\",\n      \"Engine\"          => \"engine\",\n      \"Version\"         => \"version\",\n      \"Row_format\"      => \"row_format\",\n      \"Rows\"            => \"rows\",\n      \"Avg_row_length\"  => \"avg_row_length\",\n      \"Data_length\"     => \"data_length\",\n      \"Max_data_length\" => \"max_data_length\",\n      \"Index_length\"    => \"index_length\",\n      \"Data_free\"       => \"data_free\",\n      \"Auto_increment\"  => \"auto_increment\",\n      \"Create_time\"     => \"create_time\",\n      \"Update_time\"     => \"update_time\",\n      \"Check_time\"      => \"check_time\",\n      \"Collation\"       => \"collation\",\n      \"Checksum\"        => \"checksum\",\n      \"Create_options\"  => \"create_options\",\n      \"Comment\"         => \"comment\"\n    );\n\n    $meta = array();\n    $rows = $this->database->query( \"SHOW TABLE STATUS WHERE Name=?\", array( $this->name ) );\n    $row = $rows[0];\n\n    foreach ( $mapping as $record_key => $mapped_key ) $meta[$mapped_key] = $row[$record_key];\n    return (object) $meta;\n  }\n\n\n  public function getStringishColumns() {\n    $columns = array();\n    foreach ( $this->getColumns() as $column ) if ( $column->is_stringish ) $columns[] = $column;\n      return $columns;\n  }\n\n  public function getAlterations( $find, $replace ) {\n    $alterations = array();\n    foreach ( $this->search( $find ) as $record ) {\n      foreach ( $record->getAlterations( $find, $replace ) as $alteration ) {\n        $alterations[] = $alteration;\n      }\n    }\n    return $alterations;\n  }\n\n  public function getRecordsWhere( $where_sql_fragment, $tokens = array() ) {\n    return $this->database->getTableRecords( \"SELECT * FROM {$this->name} WHERE $where_sql_fragment\", $tokens );\n  }\n\n  public function search( $term ) {\n    $where = array();\n    foreach ( $this->getStringishColumns() as $column ) $where[] = $column->name . ' LIKE \"%' . addcslashes( $this->database->escape( $term ), \"%_\" ) . '%\"';\n    $records = $this->database->getTableRecords( \"SELECT * FROM {$this->name} WHERE \" . implode( \" OR \", $where ) );\n    return $records;\n  }\n\n  public function getColumns() {\n    if ( !isset( $this->columns ) ) {\n      $this->columns = array();\n      $mapping = array(\n        \"Field\"   => \"name\",\n        \"Type\"    => \"type\",\n        \"Null\"    => \"null\",\n        \"Key\"     => \"key\",\n        \"Default\" => \"default\",\n        \"Extra\"   => \"extra\"\n      );\n      $columns = array();\n      foreach ( $this->database->query( \"DESCRIBE {$this->name}\" ) as $row ) {\n        $column = array();\n        foreach ( $mapping as $key => $value ) $column[$value] = $row[$key];\n        $column[\"is_stringish\"]   = (bool) preg_match( \"/(varchar|char|text)/\", $column[\"type\"] );\n        $column[\"is_primary_key\"] = ( $column[\"key\"] == \"PRI\" );\n\n        $columns[$column[\"name\"]] = (object) $column;\n        $this->columns = (object) $columns;\n      }\n    }\n    return $this->columns;\n  }\n\n}\n\n'WordPress-Domain-Changer/wpdc/includes/bootstrap.php'\n:<?php\n\n\nerror_reporting( E_ALL );\nset_time_limit( 60 );\nmb_internal_encoding( 'UTF-8' );\n\n\n\ndefine( \"WPDC_SESSION_TTL\", 60 * 10 );\ndefine( \"WPDC_ROOT_DIR\", realpath( dirname( __FILE__ ) . '/../../' ) );\ndefine( \"WP_ROOT_DIR\", realpath( WPDC_ROOT_DIR . '/../../' ) );\n\n\n\n\nrequire_once dirname( __FILE__ ) . '/../config.php';\n\nrequire_once dirname( __FILE__ ) . '/classes/class.PhpFile.php';\nrequire_once dirname( __FILE__ ) . '/classes/class.PhpSerializedString.php';\n\nrequire_once dirname( __FILE__ ) . '/classes/class.Database.php';\nrequire_once dirname( __FILE__ ) . '/classes/class.DatabaseTable.php';\nrequire_once dirname( __FILE__ ) . '/classes/class.DatabaseTableRecord.php';\nrequire_once dirname( __FILE__ ) . '/classes/class.WordPressDatabase.php';\nrequire_once dirname( __FILE__ ) . '/classes/class.Alteration.php';\n\nrequire_once dirname( __FILE__ ) . '/classes/class.View.php';\nrequire_once dirname( __FILE__ ) . '/classes/class.BaseController.php';\n\nrequire_once dirname( __FILE__ ) . '/../controllers/controller.php';\n",
        "gt": [
            "'WordPress-Domain-Changer/wpdc/includes/classes/class.DatabaseTable.php'",
            "'WordPress-Domain-Changer/wpdc/includes/bootstrap.php'",
            "'WordPress-Domain-Changer/wpdc/index.php'"
        ]
    },
    {
        "files": [
            "'cpanel-UAPI-php-class/otphp/tests/TestTest.php'",
            "'cpanel-UAPI-php-class/otphp/vendor/libs.php'",
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/otphp/vendor/base32.php'"
        ],
        "content": "'cpanel-UAPI-php-class/otphp/tests/TestTest.php'\n:<?php\n\n\nrequire_once dirname(__FILE__).'/../lib/otphp.php';\n\nclass TestTest extends PHPUnit_Framework_TestCase {\n  public function testThatPHPUnitWorks() {\n    $this->assertEquals(1,1);\n  }\n}\n\n'cpanel-UAPI-php-class/otphp/vendor/libs.php'\n:<?php\n\n\n\n\n\nrequire_once dirname(__FILE__).'/base32.php';\n\n'cpanel-UAPI-php-class/otphp/lib/otphp.php'\n:<?php\n\n\nrequire_once dirname(__FILE__).'/../vendor/libs.php';\nrequire_once dirname(__FILE__).'/otp.php';\nrequire_once dirname(__FILE__).'/hotp.php';\nrequire_once dirname(__FILE__).'/totp.php';\n\n\n'cpanel-UAPI-php-class/otphp/vendor/base32.php'\n:<?php\n\n\nclass Base32 {\n\n   private static $map = array(\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n        'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n        'Y', 'Z', '2', '3', '4', '5', '6', '7',\n        '='\n    );\n\n   private static $flippedMap = array(\n        'A'=>'0', 'B'=>'1', 'C'=>'2', 'D'=>'3', 'E'=>'4', 'F'=>'5', 'G'=>'6', 'H'=>'7',\n        'I'=>'8', 'J'=>'9', 'K'=>'10', 'L'=>'11', 'M'=>'12', 'N'=>'13', 'O'=>'14', 'P'=>'15',\n        'Q'=>'16', 'R'=>'17', 'S'=>'18', 'T'=>'19', 'U'=>'20', 'V'=>'21', 'W'=>'22', 'X'=>'23',\n        'Y'=>'24', 'Z'=>'25', '2'=>'26', '3'=>'27', '4'=>'28', '5'=>'29', '6'=>'30', '7'=>'31'\n    );\n\n\n    public static function encode($input, $padding = true) {\n        if(empty($input)) return \"\";\n        $input = str_split($input);\n        $binaryString = \"\";\n        for($i = 0; $i < count($input); $i++) {\n            $binaryString .= str_pad(base_convert(ord($input[$i]), 10, 2), 8, '0', STR_PAD_LEFT);\n        }\n        $fiveBitBinaryArray = str_split($binaryString, 5);\n        $base32 = \"\";\n        $i=0;\n        while($i < count($fiveBitBinaryArray)) {\n            $base32 .= self::$map[base_convert(str_pad($fiveBitBinaryArray[$i], 5,'0'), 2, 10)];\n            $i++;\n        }\n        if($padding && ($x = strlen($binaryString) % 40) != 0) {\n            if($x == 8) $base32 .= str_repeat(self::$map[32], 6);\n            else if($x == 16) $base32 .= str_repeat(self::$map[32], 4);\n            else if($x == 24) $base32 .= str_repeat(self::$map[32], 3);\n            else if($x == 32) $base32 .= self::$map[32];\n        }\n        return $base32;\n    }\n\n    public static function decode($input) {\n        if(empty($input)) return;\n        $paddingCharCount = substr_count($input, self::$map[32]);\n        $allowedValues = array(6,4,3,1,0);\n        if(!in_array($paddingCharCount, $allowedValues)) return false;\n        for($i=0; $i<4; $i++){\n            if($paddingCharCount == $allowedValues[$i] &&\n                substr($input, -($allowedValues[$i])) != str_repeat(self::$map[32], $allowedValues[$i])) return false;\n        }\n        $input = str_replace('=','', $input);\n        $input = str_split($input);\n        $binaryString = \"\";\n        for($i=0; $i < count($input); $i = $i+8) {\n            $x = \"\";\n            if(!in_array($input[$i], self::$map)) return false;\n            for($j=0; $j < 8; $j++) {\n                $x .= str_pad(base_convert(@self::$flippedMap[@$input[$i + $j]], 10, 2), 5, '0', STR_PAD_LEFT);\n            }\n            $eightBits = str_split($x, 8);\n            for($z = 0; $z < count($eightBits); $z++) {\n                $binaryString .= ( ($y = chr(base_convert($eightBits[$z], 2, 10))) || ord($y) == 48 ) ? $y:\"\";\n            }\n        }\n        return $binaryString;\n    }\n}\n\n",
        "gt": [
            "'cpanel-UAPI-php-class/otphp/vendor/base32.php'",
            "'cpanel-UAPI-php-class/otphp/vendor/libs.php'",
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/otphp/tests/TestTest.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/devdocs.php'\n:<?php\n\nini_set('display_errors', 0);\nini_set('memory_limit', '-1');\n\nuse CFPropertyList\\CFPropertyList;\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocs {\n  private static $cacheDirectory = 'cache/';\n\n  private $workflows;\n  private $results;\n  private $baseUrl;\n  private $cacheLife;\n  private $template;\n\n  public function __construct($query, $doc) {\n    $this->baseUrl = getenv('BASE_URL') ?: 'https:\n    $this->cacheLife = (int)(getenv('CACHE_LIFE') ?: '7');\n    $this->template = getenv('TEMPLATE') ?: '$baseUrl$documentation/$path';\n    $this->workflows = new Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n    $this->results = [\n      0 => [],\n      1 => [],\n      2 => []\n    ];\n\n    $documentations = $this->getDocumentations();\n    if (!isset($doc) || empty($doc)) {\n      $rootPath = str_replace('/scripts', '', $this->workflows->path());\n      $pList = (new CFPropertyList($rootPath . '/info.plist'))->toArray();\n      foreach ($pList['connections'] as $key => $value) {\n        if (array_key_exists($key, $documentations)) {\n          $this->checkCache($key);\n          $this->processDocumentation($key, $query);\n        }\n      }\n    } else {\n      $this->checkCache($doc);\n      $this->processDocumentation($doc, $query);\n    }\n    $this->render();\n  }\n\n  private function getDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      $docContent = $this->workflows->fetch($this->baseUrl . 'docs/docs.json');\n      file_put_contents($docFile, $docContent);\n    } else {\n      $docContent = file_get_contents($docFile);\n    }\n    $docs = json_decode($docContent);\n    $documentations = [];\n    foreach ($docs as $doc) {\n      $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n      $documentations[$doc->slug] = $doc;\n    }\n    return $documentations;\n  }\n\n  private function checkCache($documentation) {\n    if (!file_exists(self::$cacheDirectory)) {\n      mkdir(self::$cacheDirectory);\n    }\n    $docFile = self::$cacheDirectory . $documentation . '.json';\n    error_log(\"Checking existence of cache at $docFile\");\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      error_log(\"Download doc for $documentation at \\\"\" . $this->baseUrl . 'docs/' . $documentation . '/index.json') . \"\\\"\";\n      file_put_contents($docFile, file_get_contents($this->baseUrl . 'docs/' . $documentation . '/index.json'));\n    }\n  }\n\n  private function processDocumentation($documentation, $query) {\n\n    $query = strtolower($query);\n    $data = json_decode(file_get_contents(self::$cacheDirectory . $documentation . '.json'));\n    if ($data === null) {\n      unlink(self::$cacheDirectory . $documentation . '.json');\n    }\n\n    $entries = $data->entries;\n\n    $found = [];\n    foreach ($entries as $key => $result) {\n      $value = strtolower(trim($result->name));\n      $description = strtolower(utf8_decode(strip_tags($result->type)));\n\n      if (empty($query)) {\n        $found[$value] = true;\n        $result->documentation = $documentation;\n        $this->results[0][] = $result;\n      } else if (strpos($value, $query) === 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[0][] = $result;\n        }\n      } else if (strpos($value, $query) > 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[1][] = $result;\n        }\n      } else if (strpos($description, $query) !== false) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[2][] = $result;\n        }\n      }\n    }\n\n    if ((count($this->results[0]) === 0) && (count($this->results[1]) === 0) && (count($this->results[2]) === 0)) {\n      $this->results[0][] = (object) [\n        'name' => 'No results.',\n        'documentation' => $documentation\n      ];\n    }\n\n  }\n\n  private function render() {\n    foreach ($this->results as $level => $results) {\n      foreach ($results as $result) {\n        $title = empty($result->type) ? $result->name : \"$result->name ($result->type)\";\n        $vars = array(\n          '$baseUrl' => $this->baseUrl,\n          '$documentation' => $result->documentation,\n          '$docalt' => str_replace(\"~\", \"-\", $result->documentation),\n          '$name' => $result->name,\n          '$path' => $result->path\n        );\n\n        $url = strtr($this->template, $vars);\n        $this->workflows->result($result->name, $url, $title, $result->path, $result->documentation . '.png', 'yes', $result->name);\n      }\n    }\n    echo $this->workflows->toxml();\n  }\n}\n\n$query = isset($query) ? $query : '';\n$documentation = isset($documentation) ? $documentation : '';\nnew DevDocs($query, $documentation);\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'"
        ]
    },
    {
        "files": [
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/otphp/lib/hotp.php'",
            "'cpanel-UAPI-php-class/cpaneluapi.class.php'"
        ],
        "content": "'cpanel-UAPI-php-class/otphp/lib/otphp.php'\n:<?php\n\n\nrequire_once dirname(__FILE__).'/../vendor/libs.php';\nrequire_once dirname(__FILE__).'/otp.php';\nrequire_once dirname(__FILE__).'/hotp.php';\nrequire_once dirname(__FILE__).'/totp.php';\n\n\n'cpanel-UAPI-php-class/otphp/lib/hotp.php'\n:<?php\n\n\nnamespace OTPHP {\n\n  class HOTP extends OTP {\n\n    public function at($count) {\n      return $this->generateOTP($count);\n    }\n\n\n\n    public function verify($otp, $counter) {\n      return ($otp == $this->at($counter));\n    }\n\n\n    public function provisioning_uri($name, $initial_count) {\n      return \"otpauth:\n    }\n  }\n\n}\n\n'cpanel-UAPI-php-class/cpaneluapi.class.php'\n:<?php\n\n\n\n\nclass cpanelAPI\n{\n    public $version = '2.0';\n    public $ssl = 1;\n    public $port = 2083;\n    public $server;\n    public $maxredirect = 0;\n    public $user;\n    public $json = '';\n\n    protected $scope;\n    protected $api;\n    protected $auth;\n    protected $pass;\n    protected $secret;\n    protected $type;\n    protected $session;\n    protected $method;\n    protected $requestUrl;\n    protected $eno;\n    protected $emes;\n    protected $token = FALSE;\n    protected $httpMethod = 'GET';\n    protected $postData = '';\n\n    function __construct($user, $pass, $server, $secret = FALSE)\n    {\n        $this->user = $user;\n        $this->pass = $pass;\n        $this->server = $server;\n        if ($secret) {\n            $this->secret = $secret;\n            $this->set2Fa();\n        }\n    }\n\n\n    protected function set2Fa()\n    {\n        require 'otphp/lib/otphp.php';\n        $totp = new \\OTPHP\\TOTP($this->secret);\n        $this->token = $totp->now();\n    }\n\n    public function __get($name)\n    {\n        switch (strtolower($name)) {\n            case 'get':\n                $this->httpMethod = 'GET';\n                break;\n            case 'post':\n                $this->httpMethod = 'POST';\n                break;\n            case 'api2':\n                $this->setApi('api2');\n                break;\n            case 'uapi':\n                $this->setApi('uapi');\n                break;\n            default:\n                $this->scope = $name;\n        }\n        return $this;\n    }\n\n\n    protected function setApi($api)\n    {\n        $this->api = $api;\n        $this->setMethod();\n        return $this;\n    }\n\n\n    protected function setMethod()\n    {\n        switch ($this->api) {\n            case 'uapi':\n                $this->method = '/execute/';\n                break;\n            case 'api2':\n                $this->method = '/json-api/cpanel/';\n                break;\n            default:\n                throw new Exception('$this->api is not set or is incorrectly set. The only available options are \\'uapi\\' or \\'api2\\'');\n        }\n        return $this;\n    }\n\n\n    public function __toString()\n    {\n        return $this->json;\n    }\n\n\n    public function __call($name, $arguments)\n    {\n        if (count($arguments) < 1 || !is_array($arguments[0]))\n            $arguments[0] = [];\n        $this->json = $this->APIcall($name, $arguments[0]);\n        return json_decode($this->json);\n    }\n\n\n    protected function APIcall($name, $arguments)\n    {\n        $this->auth = base64_encode($this->user . \":\" . $this->pass);\n        $this->type = $this->ssl == 1 ? \"https:\n        $this->requestUrl = $this->type . $this->server . ':' . $this->port . $this->method;\n        switch ($this->api) {\n            case 'uapi':\n                $this->requestUrl .= ($this->scope != '' ? $this->scope . \"/\" : '') . $name . '?';\n                break;\n            case 'api2':\n                if ($this->scope == '') {\n                    throw new Exception('Scope must be set.');\n                }\n                $this->requestUrl .= '?cpanel_jsonapi_user=' . $this->user . '&cpanel_jsonapi_apiversion=2&cpanel_jsonapi_module=' . $this->scope . '&cpanel_jsonapi_func=' . $name . '&';\n                break;\n            default:\n                throw new Exception('$this->api is not set or is incorrectly set. The only available options are \\'uapi\\' or \\'api2\\'');\n        }\n        if($this->httpMethod == 'GET') {\n            $this->requestUrl .= http_build_query($arguments);\n        }\n        if($this->httpMethod == 'POST'){\n            $this->postData = $arguments;\n        }\n\n        return $this->curl_request($this->requestUrl);\n    }\n\n\n    protected function curl_request($url)\n    {\n        $httpHeaders = array(\"Authorization: Basic \" . $this->auth);\n\n        if ($this->token) {\n            $httpHeaders[] = \"X-CPANEL-OTP: \" . $this->token;\n        }\n        $ch = curl_init();\n        if($this->httpMethod == 'POST'){\n            $httpHeaders[] = \"Content-type: multipart/form-data\";\n            curl_setopt($ch,CURLOPT_POSTFIELDS, $this->postData);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $httpHeaders);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 100020);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n\n        $content = $this->curl_exec_follow($ch, $this->maxredirect);\n        $this->eno = curl_errno($ch);\n        $this->emes = curl_error($ch);\n\n        curl_close($ch);\n\n        return $content;\n    }\n\n\n    protected function curl_exec_follow($ch, &$maxredirect = null)\n    {\n\n\n        $user_agent = \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.5)\" .\n            \" Gecko/20041107 Firefox/1.0\";\n        curl_setopt($ch, CURLOPT_USERAGENT, $user_agent);\n\n        $mr = $maxredirect === null ? 5 : intval($maxredirect);\n\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $mr > 0);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $mr);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n        return curl_exec($ch);\n    }\n\n\n    public function getLastRequest()\n    {\n        return $this->requestUrl;\n    }\n\n\n    public function getError()\n    {\n        if (!empty($this->eno)) {\n            return ['no' => $this->eno, 'message' => $this->emes];\n        }\n        return FALSE;\n    }\n}\n",
        "gt": [
            "'cpanel-UAPI-php-class/otphp/lib/hotp.php'",
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/cpaneluapi.class.php'"
        ]
    },
    {
        "files": [
            "'openfuego/fetch.php'",
            "'openfuego/collect.php'",
            "'openfuego/init.php'"
        ],
        "content": "'openfuego/fetch.php'\n:<?php namespace OpenFuego;\n\nuse OpenFuego\\lib\\Logger as Logger;\n\nif (!defined('PHP_VERSION_ID') || PHP_VERSION_ID < 50300) {\n\tdie(__NAMESPACE__ . ' requires PHP 5.3.0 or higher.');\n}\n\nif (php_sapi_name() != 'cli') {\n\tdie('This script must be invoked from the command line.');\n}\n\nrequire_once(__DIR__ . '/init.php');\n\nif (!function_exists('pcntl_fork')) {\n\t$error_message = \"\\n\"\n\t\t. 'To start OpenFuego, run these commands:'\n\t\t. \"\\n\\n\"\n\t\t. \"\\tnohup \" . \\PHP_BINDIR . '/php ' . BASE_DIR . '/collect.php > /dev/null 2> /dev/null & echo $!'\n\t\t. \"\\n\"\n\t\t. \"\\tnohup \" . \\PHP_BINDIR . '/php ' . BASE_DIR . '/consume.php > /dev/null 2> /dev/null & echo $!'\n\t\t. \"\\n\\n\";\n\n\tdie($error_message);\n}\n\n\npcntl_signal(SIGHUP, SIG_IGN);\n\n\npcntl_signal(SIGTERM, function() {\n\n\tglobal $_should_stop;\n\t$_should_stop = TRUE;\n\n\tLogger::info(\"Received shutdown request, finishing up.\");\n\n\treturn;\n});\n\n$pids = array();\n\n$pids[0] = pcntl_fork();\n\nif (!$pids[0]) {\n\tinclude_once(__DIR__ . '/collect.php');\n}\n\n$pids[1] = pcntl_fork();\n\nif (!$pids[1]) {\n\tinclude_once(__DIR__ . '/consume.php');\n}\n\necho __NAMESPACE__ . ' collector running as PID ' . $pids[0] . \"\\n\";\necho __NAMESPACE__ . ' consumer running as PID ' . $pids[1] . \"\\n\";\n\n@file_put_contents(\\OpenFuego\\TMP_DIR . '/OpenFuego-collect.pid', $pids[0]);\n@file_put_contents(\\OpenFuego\\TMP_DIR . '/OpenFuego-consume.pid', $pids[1]);\n\nexit;\n?>\n'openfuego/collect.php'\n:<?php namespace OpenFuego;\n\n\n\nuse OpenFuego\\app\\Universe as Universe;\nuse OpenFuego\\app\\Collector as Collector;\nuse OpenFuego\\lib\\Logger as Logger;\nuse OpenFuego\\lib\\TwitterHandle as TwitterHandle;\n\nif (!defined('PHP_VERSION_ID') || PHP_VERSION_ID < 50300) {\n\tdie(__NAMESPACE__ . ' requires PHP 5.3.0 or higher.');\n}\n\nif (php_sapi_name() != 'cli') {\n\tdie('This script must be invoked from the command line.');\n}\n\nif (!defined('OPENFUEGO') && function_exists('pcntl_fork')) {\n\t$error_message = \"\\n\"\n\t\t. 'Do not run this script directly. Run fetch.php to start.'\n\t\t. \"\\n\\n\";\n\tdie($error_message);\n}\n\nrequire_once(__DIR__ . '/init.php');\n\nregister_shutdown_function(function() {\n\tLogger::fatal(__NAMESPACE__ . \" collector was terminated.\");\n});\n\n$twitter = new TwitterHandle();\n$twitter->get(\"account/verify_credentials\", array(\"include_entities\" => 0, \"skip_status\" => 1));\nif ($twitter->http_code !== 200) {\n\t$error_message = \"Cannot continue. Your Twitter credentials appear to be invalid. Error code {$twitter->http_code}\";\n\tLogger::info($error_message);\n\tdie($error_message);\n}\nunset($twitter_handle);\n\n$authorities = unserialize(\\OpenFuego\\AUTHORITIES);\n\n$universe = new Universe();\n\n\n\n\n\n$citizens = $universe->getCitizens(1);\n\nif (!$citizens) {\n\t$universe->populate($authorities, 1);\n\t$citizens = $universe->getCitizens(1);\n}\n\n$citizens = array_slice($citizens, 0, TWITTER_PREDICATE_LIMIT);\n\n\n$collector = new Collector(TWITTER_OAUTH_TOKEN, TWITTER_OAUTH_SECRET);\n\n$collector->setFollow($citizens);\n\n$collector->consume();\n\nexit;\n\n'openfuego/init.php'\n:<?php namespace OpenFuego;\n\n\n\n\n\nif (!defined('PHP_VERSION_ID') || PHP_VERSION_ID < 50300) {\n\n\tdie(__NAMESPACE__ . ' requires PHP 5.3.0 or higher.');\n\n}\n\n\n\ndefine('OPENFUEGO', TRUE);\n\n\n\nrequire(__DIR__ . '/config.php');\n\n\n\nif (isset($argv) && in_array('-v', $argv)) {\n\n\tdefine(__NAMESPACE__ . '\\VERBOSE', TRUE);\n\n}\n\n\n\nelse {\n\n\tdefine(__NAMESPACE__ . '\\VERBOSE', FALSE);\n\n}\n\n\n\nif (\\OpenFuego\\VERBOSE == TRUE) {\n\n\tini_set('display_errors', 1);\n\n\tini_set('error_reporting', E_ALL);\n\n}\n\nelse {\n\n\tini_set('display_errors', 0);\n\n}\n\n\n\nrequire_once(__DIR__ . '/lib/TwitterOAuth/TwitterOAuth.class.php');\n\nrequire_once(__DIR__ . '/lib/Phirehose/OAuthPhirehose.class.php');\n\n\n\nspl_autoload_register(function($className) {\n\n\t$className = str_replace('OpenFuego' . '\\\\', '', $className);\n\n\t$className = strtr($className, '\\\\', DIRECTORY_SEPARATOR);\n\n\t$path = __DIR__ . '/' . $className . '.class.php';\n\n\n\n\tif (is_readable($path)) {\n\n\t\tinclude_once($path);\n\n\t}\n\n});\n\n\n\n\n\ndefine(__NAMESPACE__ . '\\BASE_DIR', __DIR__);\n\ndefine(__NAMESPACE__ . '\\TMP_DIR', BASE_DIR . '/tmp');\n\ndefine(__NAMESPACE__ . '\\POSTMASTER', __NAMESPACE__ . '@' . __NAMESPACE__ . '.local');\n\n\n\nif (!is_dir(TMP_DIR)) {\n\n\tmkdir(TMP_DIR);\n\n\tfile_put_contents(TMP_DIR . '/nothing', 'This file was created to initialize the cache directory. You can delete it.');\n\n}\n\n\n\nconst TWITTER_PREDICATE_LIMIT = 5000;\n\n\n\ndefine(__NAMESPACE__ . '\\BITLY_PRO_DOMAINS', serialize(\n\n\tarray(\n\n\t\t'bit.ly',\n\n\t\t'bitly.com',\n\n\t\t'j.mp'\n\n\t)\n\n));\n\n\n\ndefine(__NAMESPACE__ . '\\SHORT_DOMAINS', serialize(\n\n\tarray(\n\n\t\t'twitpic.com',\n\n\t\t'instagr.am',\n\n\t\t'instagram.com',\n\n\t\t'yfrog.com',\n\n\t\t'twitpic.com',\n\n\t\t'vimeo.com',\n\n\t\t'i.imgur.com',\n\n\t\t'mlkshk.com',\n\n\t\t'lockerz.com',\n\n\t\t'path.com',\n\n\t\t'vine.co'\n\n\t)\n\n));\n\n\n\nconst\n\n\tDB_DRIVER = 'mysql',\n\n\tUSER_AGENT = 'Mozilla/5.0 (compatible; Googlebot/2.1; +http:\n\n\tREFERRER = 'http:\n\n",
        "gt": [
            "'openfuego/init.php'",
            "'openfuego/collect.php'",
            "'openfuego/fetch.php'"
        ]
    },
    {
        "files": [
            "'shiny_geoip/src/ShinyGeoipCli.php'",
            "'shiny_geoip/cli/app.php'",
            "'shiny_geoip/src/bootstrap_cli.php'"
        ],
        "content": "'shiny_geoip/src/ShinyGeoipCli.php'\n:<?php\n\ndeclare(strict_types=1);\n\nnamespace Nekudo\\ShinyGeoip;\n\nuse Nekudo\\ShinyGeoip\\Action\\Cli\\BenchmarkAction;\nuse Nekudo\\ShinyGeoip\\Action\\Cli\\ShowHelpAction;\nuse Nekudo\\ShinyGeoip\\Action\\Cli\\UpdateMmdbAction;\nuse Nekudo\\ShinyGeoip\\Responder\\CliResponder;\n\nclass ShinyGeoipCli\n{\n\n    protected $config = [];\n\n\n    protected $responder;\n\n    public function __construct(array $config)\n    {\n        $this->config = $config;\n        $this->responder = new CliResponder;\n    }\n\n\n    public function dispatch(array $arguments)\n    {\n        try {\n            $this->checkForCliMode();\n            $actionName = $this->getAction($arguments);\n            switch ($actionName) {\n                case 'mmdb_update':\n                    $action = new UpdateMmdbAction($this->config, $this->responder);\n                    break;\n                case 'benchmark':\n                    $action = new BenchmarkAction($this->config, $this->responder);\n                    break;\n                case 'help':\n                    $action = new ShowHelpAction($this->config, $this->responder);\n                    break;\n                default:\n                    throw new \\RuntimeException('Invalid action. Use \"help\" for list of available actions.');\n            }\n\n            $action->__invoke($arguments);\n        } catch (\\Exception $e) {\n            $this->responder->error($e->getMessage());\n        }\n    }\n\n\n    private function checkForCliMode()\n    {\n        if (php_sapi_name() !== 'cli') {\n            throw new \\RuntimeException('This script can only be executed in CLI mode.');\n        }\n    }\n\n\n    private function getAction(array $arguments): string\n    {\n        return $arguments[1] ?? '';\n    }\n}\n\n'shiny_geoip/cli/app.php'\n:<?php\n\nrequire_once __DIR__ . '/../src/bootstrap_cli.php';\n\n$app = new \\Nekudo\\ShinyGeoip\\ShinyGeoipCli($config);\n$app->dispatch($argv);\n\n'shiny_geoip/src/bootstrap_cli.php'\n:<?php\n\ndeclare(strict_types=1);\n\n\ninclude __DIR__ . '/bootstrap.php';\n\n\nrequire_once __DIR__ . '/ShinyGeoipCli.php';\nrequire_once __DIR__ . '/Action/Cli/CliAction.php';\nrequire_once __DIR__ . '/Action/Cli/BenchmarkAction.php';\nrequire_once __DIR__ . '/Action/Cli/ShowHelpAction.php';\nrequire_once __DIR__ . '/Action/Cli/UpdateMmdbAction.php';\nrequire_once __DIR__ . '/Responder/CliResponder.php';\n",
        "gt": [
            "'shiny_geoip/src/ShinyGeoipCli.php'",
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/cli/app.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/assets/php/styles.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'security.php';\n?><meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<meta name=\"robots\" content=\"noindex, nofollow\">\n\n<link rel=\"icon\" type=\"image/png\" href=\"../assets/img/favicon.png\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/fontawesome.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/solid.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/izitoast/iziToast.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/select2/select2.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/jquery-confirm/jquery-confirm.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/datatables/datatables.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/adminlte.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/custom.css\">\n'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/lang/lang.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'security.php';\n?><meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<meta name=\"robots\" content=\"noindex, nofollow\">\n\n<link rel=\"icon\" type=\"image/png\" href=\"../assets/img/favicon.png\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/fontawesome.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/solid.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/izitoast/iziToast.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/select2/select2.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/jquery-confirm/jquery-confirm.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/datatables/datatables.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/adminlte.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/custom.css\">\n'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/lang/lang.php'\n:\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/lang/lang.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ]
    },
    {
        "files": [
            "'cpanel-UAPI-php-class/otphp/tests/TestTest.php'",
            "'cpanel-UAPI-php-class/otphp/vendor/libs.php'",
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/otphp/vendor/base32.php'"
        ],
        "content": "'cpanel-UAPI-php-class/otphp/tests/TestTest.php'\n:<?php\n\n\nrequire_once dirname(__FILE__).'/../lib/otphp.php';\n\nclass TestTest extends PHPUnit_Framework_TestCase {\n  public function testThatPHPUnitWorks() {\n    $this->assertEquals(1,1);\n  }\n}\n\n'cpanel-UAPI-php-class/otphp/vendor/libs.php'\n:<?php\n\n\n\n\n\nrequire_once dirname(__FILE__).'/base32.php';\n\n'cpanel-UAPI-php-class/otphp/lib/otphp.php'\n:<?php\n\n\nrequire_once dirname(__FILE__).'/../vendor/libs.php';\nrequire_once dirname(__FILE__).'/otp.php';\nrequire_once dirname(__FILE__).'/hotp.php';\nrequire_once dirname(__FILE__).'/totp.php';\n\n\n'cpanel-UAPI-php-class/otphp/vendor/base32.php'\n:<?php\n\n\nclass Base32 {\n\n   private static $map = array(\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n        'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n        'Y', 'Z', '2', '3', '4', '5', '6', '7',\n        '='\n    );\n\n   private static $flippedMap = array(\n        'A'=>'0', 'B'=>'1', 'C'=>'2', 'D'=>'3', 'E'=>'4', 'F'=>'5', 'G'=>'6', 'H'=>'7',\n        'I'=>'8', 'J'=>'9', 'K'=>'10', 'L'=>'11', 'M'=>'12', 'N'=>'13', 'O'=>'14', 'P'=>'15',\n        'Q'=>'16', 'R'=>'17', 'S'=>'18', 'T'=>'19', 'U'=>'20', 'V'=>'21', 'W'=>'22', 'X'=>'23',\n        'Y'=>'24', 'Z'=>'25', '2'=>'26', '3'=>'27', '4'=>'28', '5'=>'29', '6'=>'30', '7'=>'31'\n    );\n\n\n    public static function encode($input, $padding = true) {\n        if(empty($input)) return \"\";\n        $input = str_split($input);\n        $binaryString = \"\";\n        for($i = 0; $i < count($input); $i++) {\n            $binaryString .= str_pad(base_convert(ord($input[$i]), 10, 2), 8, '0', STR_PAD_LEFT);\n        }\n        $fiveBitBinaryArray = str_split($binaryString, 5);\n        $base32 = \"\";\n        $i=0;\n        while($i < count($fiveBitBinaryArray)) {\n            $base32 .= self::$map[base_convert(str_pad($fiveBitBinaryArray[$i], 5,'0'), 2, 10)];\n            $i++;\n        }\n        if($padding && ($x = strlen($binaryString) % 40) != 0) {\n            if($x == 8) $base32 .= str_repeat(self::$map[32], 6);\n            else if($x == 16) $base32 .= str_repeat(self::$map[32], 4);\n            else if($x == 24) $base32 .= str_repeat(self::$map[32], 3);\n            else if($x == 32) $base32 .= self::$map[32];\n        }\n        return $base32;\n    }\n\n    public static function decode($input) {\n        if(empty($input)) return;\n        $paddingCharCount = substr_count($input, self::$map[32]);\n        $allowedValues = array(6,4,3,1,0);\n        if(!in_array($paddingCharCount, $allowedValues)) return false;\n        for($i=0; $i<4; $i++){\n            if($paddingCharCount == $allowedValues[$i] &&\n                substr($input, -($allowedValues[$i])) != str_repeat(self::$map[32], $allowedValues[$i])) return false;\n        }\n        $input = str_replace('=','', $input);\n        $input = str_split($input);\n        $binaryString = \"\";\n        for($i=0; $i < count($input); $i = $i+8) {\n            $x = \"\";\n            if(!in_array($input[$i], self::$map)) return false;\n            for($j=0; $j < 8; $j++) {\n                $x .= str_pad(base_convert(@self::$flippedMap[@$input[$i + $j]], 10, 2), 5, '0', STR_PAD_LEFT);\n            }\n            $eightBits = str_split($x, 8);\n            for($z = 0; $z < count($eightBits); $z++) {\n                $binaryString .= ( ($y = chr(base_convert($eightBits[$z], 2, 10))) || ord($y) == 48 ) ? $y:\"\";\n            }\n        }\n        return $binaryString;\n    }\n}\n\n",
        "gt": [
            "'cpanel-UAPI-php-class/otphp/vendor/base32.php'",
            "'cpanel-UAPI-php-class/otphp/vendor/libs.php'",
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/otphp/tests/TestTest.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/class/db.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/class/db.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once dirname(__DIR__).'/config.php';\n$conn = null;\n\nfunction getConn() {\n    global $conn, $config;\n    if($conn) {\n        return $conn;\n    } else {\n        $connectionString = \"sqlite:{$config['db_file']}\";\n        try {\n            $conn = new PDO($connectionString, NULL, NULL, [\n                PDO::ATTR_TIMEOUT=>60,\n                PDO::ATTR_PERSISTENT=>false,\n                PDO::ATTR_ERRMODE=>PDO::ERRMODE_EXCEPTION,\n                PDO::ATTR_EMULATE_PREPARES=>false,\n                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC\n            ]);\n            $conn->exec('PRAGMA journal_mode = WAL;PRAGMA synchronous = OFF;PRAGMA temp_store = MEMORY;PRAGMA foreign_keys = OFF;PRAGMA mmap_size = 268435456;PRAGMA cache_size = -32000;PRAGMA journal_size_limit = 10000000;');\n            return $conn;\n        } catch(PDOException $e) {\n            if($config['errorlog_enable']) {\n                file_put_contents(dirname(__DIR__).\"/__UNAM_LIB/Logs/db-error-\".date('d-m-Y').\".log\", \"ERROR: {$e->getMessage()}\\r\\n\", FILE_APPEND);\n            }\n        }\n    }\n    return false;\n}\n\nfunction closeConn() {\n    global $conn;\n    $conn = null;\n}\n'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}\n'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/assets/php/styles.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'security.php';\n?><meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<meta name=\"robots\" content=\"noindex, nofollow\">\n\n<link rel=\"icon\" type=\"image/png\" href=\"../assets/img/favicon.png\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/fontawesome.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/solid.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/izitoast/iziToast.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/select2/select2.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/jquery-confirm/jquery-confirm.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/datatables/datatables.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/adminlte.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/custom.css\">",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/class/db.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ]
    },
    {
        "files": [
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/src/Action/Cli/BenchmarkAction.php'",
            "'shiny_geoip/cli/app.php'"
        ],
        "content": "'shiny_geoip/src/bootstrap_cli.php'\n:<?php\n\ndeclare(strict_types=1);\n\n\ninclude __DIR__ . '/bootstrap.php';\n\n\nrequire_once __DIR__ . '/ShinyGeoipCli.php';\nrequire_once __DIR__ . '/Action/Cli/CliAction.php';\nrequire_once __DIR__ . '/Action/Cli/BenchmarkAction.php';\nrequire_once __DIR__ . '/Action/Cli/ShowHelpAction.php';\nrequire_once __DIR__ . '/Action/Cli/UpdateMmdbAction.php';\nrequire_once __DIR__ . '/Responder/CliResponder.php';\n\n'shiny_geoip/src/Action/Cli/BenchmarkAction.php'\n:<?php\n\ndeclare(strict_types=1);\n\nnamespace Nekudo\\ShinyGeoip\\Action\\Cli;\n\nuse Nekudo\\ShinyGeoip\\Domain\\LocationDomain;\n\nclass BenchmarkAction extends CliAction\n{\n\n    private $numLookups = 50000;\n\n\n    private $domain;\n\n\n    public function __invoke(array $arguments)\n    {\n        $this->domain = new LocationDomain($this->config);\n        $this->runBenchmark();\n    }\n\n\n    private function runBenchmark()\n    {\n        $startTime = microtime(true);\n        for ($i = 0; $i < $this->numLookups; $i++) {\n            if (version_compare(PHP_VERSION, '7.1.0') >= 0) {\n                $rv = rand(0, pow(2, 32) -1);\n            } else {\n                $rv = (string) rand(0, pow(2, 32) -1);\n            }\n            $ip = long2ip($rv);\n            try {\n                $this->domain->getRecord($ip);\n            } catch (\\Exception $e) {\n            }\n            if ($i % 1000 == 0) {\n                $this->responder->out($i . ' ' . $ip);\n            }\n        }\n        $endTime = microtime(true);\n        $duration = $endTime - $startTime;\n        $this->responder->success('Requests per second: ' . $this->numLookups / $duration);\n    }\n}\n\n'shiny_geoip/cli/app.php'\n:<?php\n\nrequire_once __DIR__ . '/../src/bootstrap_cli.php';\n\n$app = new \\Nekudo\\ShinyGeoip\\ShinyGeoipCli($config);\n$app->dispatch($argv);\n",
        "gt": [
            "'shiny_geoip/src/Action/Cli/BenchmarkAction.php'",
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/cli/app.php'"
        ]
    },
    {
        "files": [
            "'anti-ddos-lite/CleantalkAntiDdosLite.php'",
            "'anti-ddos-lite/src/anti-ddos-lib.php'",
            "'anti-ddos-lite/anti-ddos-lite.php'",
            "'anti-ddos-lite/src/not_rated_ua.php'"
        ],
        "content": "'anti-ddos-lite/CleantalkAntiDdosLite.php'\n:<?php\n\nnamespace Cleantalk\\CleantalkAntiDdosLite;\n\nclass CleantalkAntiDdosLite\n{\n    public static function init()\n    {\n        require_once 'anti-ddos-lite.php';\n    }\n}\n\n'anti-ddos-lite/src/anti-ddos-lib.php'\n:<?php\n\n\n\nfunction antiDdosProtectionMain($data)\n{\n    $data['secure_key'] = md5($data['remote_ip'] . ':' . $data['anti_ddos_salt']);\n    if ( (antiDdosSkipUserReentry($data) && checkHeadless($data))\n            || antiDdosSkipVisitorsFromTrustedAs($data)\n            || antiDdosSkipVisitorsFromTrustedUa($data)\n    ) {\n\n        antiDdosProtectionSetCookie($data['secure_label'], $data['secure_key']);\n        return;\n    }\n\n    if ( !empty($data['anti_ddos_debug']) && antiDdosSkipUserReentry($data) && !checkHeadless($data) ) {\n        error_log(\n            sprintf(\n                'Visitor has headless mode: %s.',\n                $data['remote_ip']\n            )\n        );\n    }\n\n    antiDdosShowDdosScreenAndRedirect($data);\n}\n\n\nfunction antiDdosProtectionSetCookie(\n    $name,\n    $value = '',\n    $expires = 0,\n    $path = '',\n    $domain = '',\n    $secure = null,\n    $httponly = false,\n    $samesite = 'Lax'\n) {\n    if (headers_sent()) {\n        return;\n    }\n\n    $server_https_flag = isset($_SERVER['HTTPS']) ? $_SERVER['HTTPS'] : '';\n    $server_port = isset($_SERVER['SERVER_PORT']) ? $_SERVER['SERVER_PORT'] : '';\n\n    $secure = ! is_null($secure)\n        ? $secure\n        : ! in_array($server_https_flag, ['off', '']) || $server_port === 443;\n\n\n    if ( version_compare(phpversion(), '7.3.0', '>=') ) {\n        $params = array(\n            'expires' => $expires,\n            'path' => $path,\n            'domain' => $domain,\n            'secure' => $secure,\n            'httponly' => $httponly,\n        );\n\n        if ($samesite) {\n            $params['samesite'] = $samesite;\n        }\n\n\n        setcookie($name, $value, $params);\n\n    } else {\n        setcookie($name, $value, $expires, $path, $domain, $secure, $httponly);\n    }\n}\n\n\nfunction antiDdosCheckDatFileExist()\n{\n    return file_exists('anti_ddos_protection_fire.dat');\n}\n\n\nfunction antiDdosSkipUserReentry($data)\n{\n    return isset($_COOKIE[$data['secure_label']]) && $_COOKIE[$data['secure_label']] == $data['secure_key'];\n}\n\n\nfunction antiDdosSkipVisitorsFromTrustedAs($data)\n{\n    if (!function_exists('geoip_org_by_name')) {\n        return false;\n    }\n\n\n    $notRatedAs = [13238,15169,8075,10310,36647,13335,2635,32934,38365,55967,\n        16509,2559,19500,47764,17012,1449,43247,32734,15768,33512,18730,30148];\n\n    $visitorOrg = geoip_org_by_name($data['remote_ip']);\n    if ($visitorOrg !== false && preg_match(\"/^AS(\\d+)\\s/\", $visitorOrg, $matches)) {\n        foreach ($notRatedAs as $asn) {\n            if ($asn == $matches[1]) {\n                if ($data['anti_ddos_debug']) {\n                    error_log(sprintf('Skip antiddos protection for %s, because it\\'s trusted AS%d.', $data['remote_ip'], $asn));\n                }\n\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n\nfunction antiDdosSkipVisitorsFromTrustedUa($data)\n{\n    if (!$data['skip_not_rated_ua']) {\n        return false;\n    }\n\n    if (!isset($_SERVER['HTTP_USER_AGENT'])) {\n        return false;\n    }\n\n    require \"not_rated_ua.php\";\n    global $notRatedUa;\n    if (count($notRatedUa) > 0) {\n        foreach ($notRatedUa as $ua) {\n            if (preg_match(\"/^$ua$/\", $_SERVER['HTTP_USER_AGENT'])) {\n                if ($data['anti_ddos_debug']) {\n                    error_log(sprintf('Skip antiddos protection for %s, because it\\'s trusted User-Agent %s.', $data['remote_ip'], $ua));\n                }\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\n\nfunction antiDdosShowDdosScreenAndRedirect($data)\n{\n    $html_file = file_get_contents(dirname(__FILE__) . '/anti-ddos.html');\n\n    http_response_code(403);\n\n    $code = str_replace('{VISITOR_IP}', $data['remote_ip'], $html_file);\n    $code = str_replace('{REDIRECT_DELAY}', $data['redirect_delay'], $code);\n    $code = str_replace('{DAYS}', $data['secure_cookie_days'], $code);\n    $code = str_replace('{SECURE_LABEL}', $data['secure_label'], $code);\n    $code = str_replace('{SECURE_KEY}', $data['secure_key'], $code);\n    $code = str_replace('{SERVER_URL}', $data['server_url'], $code);\n\n    echo ($code);\n\n    if ( $data['anti_ddos_debug'] ) {\n        error_log(\n            sprintf(\n                'Blacklisted IP, drop connection %s to %s.',\n                $data['remote_ip'],\n                $_SERVER['REQUEST_URI']\n            )\n        );\n    }\n\n    exit;\n}\n\nfunction checkRequirements()\n{\n    if (version_compare(phpversion(), '5.6', '<')) {\n        return false;\n    }\n\n    return true;\n}\n\nfunction checkHeadless($data)\n{\n    if ( empty($data['test_headless']) ) {\n        return true;\n    }\n\n\n    if ( isset($_COOKIE['ct_headless']) ) {\n        $headless = explode(':', base64_decode($_COOKIE['ct_headless']));\n        if ( isset($headless[0], $headless[1])\n            && $headless[0] === $data['secure_key']\n            && $headless[1] === 'false' ) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n'anti-ddos-lite/anti-ddos-lite.php'\n:<?php\n\n\n\nrequire 'src/anti-ddos-lib.php';\n\nif (!checkRequirements()) {\n    return;\n}\n\nif (!isset($_SERVER['REMOTE_ADDR'])) {\n    return;\n}\n\n$data = [\n    'anti_ddos_protection_enable' => true,\n    'anti_ddos_debug' => true,\n    'skip_not_rated_ua' => false,\n    'secure_cookie_days' => 180,\n    'redirect_delay' => 3,\n    'remote_ip' => $_SERVER['REMOTE_ADDR'],\n    'secure_label' => 'ct_anti_ddos_key',\n    'test_headless' => true,\n    'server_url' => isset($_SERVER['HTTPS']) ? 'https:\n\n\n\n\n\n    'anti_ddos_salt' => '4xU9mn2X7iPZpeW2'\n];\n\nif ($data['anti_ddos_protection_enable'] || antiDdosCheckDatFileExist()) {\n    antiDdosProtectionMain($data);\n}\n\n'anti-ddos-lite/src/not_rated_ua.php'\n:<?php\n\nglobal $notRatedUa;\n$notRatedUa = array(\n    'CleanTalk Uptime bot.+',\n    '.*Googlebot.*',\n    '.*Bingbot.*',\n    '.*Baiduspider.*',\n    '.*YandexBot.*',\n    '.*facebot.*',\n    'facebookexternalhit\\/1\\.1 \\(\\+http:\\/\\/www\\.facebook\\.com\\/externalhit_uatext\\.php\\)',\n    '.*ia_archiver.*',\n    '.*UptimeRobot.*'\n);\n",
        "gt": [
            "'anti-ddos-lite/src/not_rated_ua.php'",
            "'anti-ddos-lite/src/anti-ddos-lib.php'",
            "'anti-ddos-lite/anti-ddos-lite.php'",
            "'anti-ddos-lite/CleantalkAntiDdosLite.php'"
        ]
    },
    {
        "files": [
            "'findbyemail/yosdk/test/OAuthTest.php'",
            "'findbyemail/yosdk/test/unit/oauth/Mock_OAuthBaseStringRequest.php'",
            "'findbyemail/yosdk/test/unit/oauth/OAuthSignatureMethodHmacSha1Test.php'"
        ],
        "content": "'findbyemail/yosdk/test/OAuthTest.php'\n:<?php\n\nif (!defined('PHPUnit_MAIN_METHOD')) {\n    define('PHPUnit_MAIN_METHOD', 'AllTests::main');\n}\n\nrequire_once 'PHPUnit/Framework.php';\nrequire_once 'PHPUnit/TextUI/TestRunner.php';\n\nrequire_once dirname(__FILE__).'/unit/oauth/OAuthConsumerTest.php';\nrequire_once dirname(__FILE__).'/unit/oauth/OAuthRequestTest.php';\nrequire_once dirname(__FILE__).'/unit/oauth/OAuthSignatureMethodHmacSha1Test.php';\nrequire_once dirname(__FILE__).'/unit/oauth/OAuthSignatureMethodRsaSha1Test.php';\nrequire_once dirname(__FILE__).'/unit/oauth/OAuthTokenTest.php';\nrequire_once dirname(__FILE__).'/unit/oauth/OAuthUtilTest.php';\n\nclass AllTests\n{\n\n    public static function main()\n    {\n        PHPUnit_TextUI_TestRunner::run(self::suite());\n    }\n\n    public static function suite()\n    {\n        $suite = new PHPUnit_Framework_TestSuite();\n\n        $suite->addTestSuite('OAuthConsumerTest');\n        $suite->addTestSuite('OAuthRequestTest');\n        $suite->addTestSuite('OAuthSignatureMethodHmacSha1Test');\n        $suite->addTestSuite('OAuthSignatureMethodRsaSha1Test');\n        $suite->addTestSuite('OAuthTokenTest');\n        $suite->addTestSuite('OAuthUtilTest');\n\n        return $suite;\n    }\n}\n\nif (PHPUnit_MAIN_METHOD == 'AllTests::main') {\n    AllTests::main();\n}\n\n'findbyemail/yosdk/test/unit/oauth/Mock_OAuthBaseStringRequest.php'\n:<?php\n\n\nclass Mock_OAuthBaseStringRequest {\n\tprivate $provided_base_string;\n\tpublic $base_string;\n\tpublic function __construct($bs) { $this->provided_base_string = $bs; }\n\tpublic function get_signature_base_string() { return $this->provided_base_string; }\n}\n\n'findbyemail/yosdk/test/unit/oauth/OAuthSignatureMethodHmacSha1Test.php'\n:<?php\n\nrequire_once dirname(__FILE__).'/../../../lib/OAuth.php';\nrequire_once 'PHPUnit/Framework.php';\nrequire_once 'Mock_OAuthBaseStringRequest.php';\n\nclass OAuthSignatureMethodHmacSha1Test extends PHPUnit_Framework_TestCase {\n\tprivate $method;\n\n\tpublic function setUp() {\n\t\t$this->method = new OAuthSignatureMethod_HMAC_SHA1();\n\t}\n\n\tpublic function testIdentifyAsHmacSha1() {\n\t\t$this->assertEquals('HMAC-SHA1', $this->method->get_name());\n\t}\n\n\tpublic function testBuildSignature() {\n\n\t\t$request  = new Mock_OAuthBaseStringRequest('bs');\n\t\t$consumer = new OAuthConsumer('__unused__', 'cs');\n\t\t$token    = NULL;\n\t\t$this->assertEquals('egQqG5AJep5sJ7anhXju1unge2I=', $this->method->build_signature( $request, $consumer, $token) );\n\n\t\t$request  = new Mock_OAuthBaseStringRequest('bs');\n\t\t$consumer = new OAuthConsumer('__unused__', 'cs');\n\t\t$token    = new OAuthToken('__unused__', 'ts');\n\t\t$this->assertEquals('VZVjXceV7JgPq/dOTnNmEfO0Fv8=', $this->method->build_signature( $request, $consumer, $token) );\n\n\t\t$request  = new Mock_OAuthBaseStringRequest('GET&http%3A%2F%2Fphotos.example.net%2Fphotos&file%3Dvacation.jpg%26'\n\t\t\t. 'oauth_consumer_key%3Ddpf43f3p2l4k3l03%26oauth_nonce%3Dkllo9940pd9333jh%26oauth_signature_method%3DHMAC-SHA1%26'\n\t\t\t. 'oauth_timestamp%3D1191242096%26oauth_token%3Dnnch734d00sl2jdk%26oauth_version%3D1.0%26size%3Doriginal');\n\t\t$consumer = new OAuthConsumer('__unused__', 'kd94hf93k423kf44');\n\t\t$token    = new OAuthToken('__unused__', 'pfkkdhi9sl3r4s00');\n\t\t$this->assertEquals('tR3+Ty81lMeYAr/Fid0kMTYa/WM=', $this->method->build_signature( $request, $consumer, $token) );\n\t}\n\n\tpublic function testVerifySignature() {\n\n\t\t$request   = new Mock_OAuthBaseStringRequest('bs');\n\t\t$consumer  = new OAuthConsumer('__unused__', 'cs');\n\t\t$token     = NULL;\n\t\t$signature = 'egQqG5AJep5sJ7anhXju1unge2I=';\n\t\t$this->assertTrue( $this->method->check_signature( $request, $consumer, $token, $signature) );\n\n\t\t$request   = new Mock_OAuthBaseStringRequest('bs');\n\t\t$consumer  = new OAuthConsumer('__unused__', 'cs');\n\t\t$token     = new OAuthToken('__unused__', 'ts');\n\t\t$signature = 'VZVjXceV7JgPq/dOTnNmEfO0Fv8=';\n\t\t$this->assertTrue($this->method->check_signature( $request, $consumer, $token, $signature) );\n\n\t\t$request   = new Mock_OAuthBaseStringRequest('GET&http%3A%2F%2Fphotos.example.net%2Fphotos&file%3Dvacation.jpg%26'\n\t\t\t. 'oauth_consumer_key%3Ddpf43f3p2l4k3l03%26oauth_nonce%3Dkllo9940pd9333jh%26oauth_signature_method%3DHMAC-SHA1%26'\n\t\t\t. 'oauth_timestamp%3D1191242096%26oauth_token%3Dnnch734d00sl2jdk%26oauth_version%3D1.0%26size%3Doriginal');\n\t\t$consumer  = new OAuthConsumer('__unused__', 'kd94hf93k423kf44');\n\t\t$token     = new OAuthToken('__unused__', 'pfkkdhi9sl3r4s00');\n\t\t$signature = 'tR3+Ty81lMeYAr/Fid0kMTYa/WM=';\n\t\t$this->assertTrue($this->method->check_signature( $request, $consumer, $token, $signature) );\n\n\t}\n}",
        "gt": [
            "'findbyemail/yosdk/test/unit/oauth/Mock_OAuthBaseStringRequest.php'",
            "'findbyemail/yosdk/test/unit/oauth/OAuthSignatureMethodHmacSha1Test.php'",
            "'findbyemail/yosdk/test/OAuthTest.php'"
        ]
    },
    {
        "files": [
            "'simple-jwt-authentication/includes/admin/views/settings/secret-key.php'",
            "'simple-jwt-authentication/includes/admin/class-simple-jwt-authentication-settings.php'",
            "'simple-jwt-authentication/simple-jwt-authentication.php'"
        ],
        "content": "'simple-jwt-authentication/includes/admin/views/settings/secret-key.php'\n:<?php\n$description = esc_html__( 'Should be a long string of letters, numbers and symbols.', 'simple-jwt-authentication' );\n$readonly    = '';\n$input_value = $secret_key;\n$input_type  = 'text';\n\nif ( $is_global ) {\n\t$description = esc_html__( 'Defined in wp-config.php', 'simple-jwt-authentication' );\n\t$readonly    = 'readonly';\n\t$input_type  = 'password';\n\t$input_value = str_repeat( '*', strlen( $input_value ) );\n}\n?>\n\n<input type=\"<?php echo $input_type; ?>\" name='simple_jwt_authentication_settings[secret_key]' value='<?php echo $input_value;\n<br /><small><?php echo esc_html( $description ); ?></small>\n\n'simple-jwt-authentication/includes/admin/class-simple-jwt-authentication-settings.php'\n:<?php\n\n\nclass Simple_Jwt_Authentication_Settings {\n\n\tprotected $plugin_name;\n\tprotected $plugin_version;\n\n\n\n\tpublic function __construct( $plugin_name, $plugin_version ) {\n\t\t$this->plugin_name    = $plugin_name;\n\t\t$this->plugin_version = $plugin_version;\n\n\t\tadd_action( 'admin_menu', array( $this, 'add_admin_menu' ) );\n\t\tadd_action( 'admin_init', array( $this, 'settings_init' ) );\n\n\t}\n\n\n\n\tpublic function add_admin_menu() {\n\t\tadd_options_page(\n\t\t\t'Simple JWT Authentication',\n\t\t\t'Simple JWT Authentication',\n\t\t\t'manage_options',\n\t\t\t'simple_jwt_authentication',\n\t\t\tarray( $this, 'simple_jwt_authentication_options_page' )\n\t\t);\n\n\t}\n\n\n\n\tpublic function settings_init() {\n\t\tregister_setting( 'simple_jwt_authentication', 'simple_jwt_authentication_settings' );\n\n\t\tadd_settings_section(\n\t\t\t'simple_jwt_authentication_section',\n\t\t\t__( 'Basic configuration', 'simple-jwt-authentication' ),\n\t\t\tarray( $this, 'settings_section_callback' ),\n\t\t\t'simple_jwt_authentication'\n\t\t);\n\n\t\tadd_settings_field(\n\t\t\t'secret_key',\n\t\t\t__( 'Secret Key', 'simple-jwt-authentication' ),\n\t\t\tarray( $this, 'settings_secret_callback' ),\n\t\t\t'simple_jwt_authentication',\n\t\t\t'simple_jwt_authentication_section'\n\t\t);\n\n\t\tadd_settings_field(\n\t\t\t'enable_cors',\n\n\t\t\tsprintf( __( 'Enable %s', 'simple-jwt-authentication' ), '<a href=\"https:\n\t\t\tarray( $this, 'settings_cors_callback' ),\n\t\t\t'simple_jwt_authentication',\n\t\t\t'simple_jwt_authentication_section'\n\t\t);\n\n\t}\n\n\n\n\tpublic function settings_secret_callback() {\n\t\t$secret_key = Simple_Jwt_Authentication_Api::get_key();\n\t\t$is_global  = Simple_Jwt_Authentication_Api::is_global( 'SIMPLE_JWT_AUTHENTICATION_SECRET_KEY' );\n\t\tinclude plugin_dir_path( __FILE__ ) . 'views/settings/secret-key.php';\n\n\t}\n\n\n\n\tpublic function settings_cors_callback() {\n\t\t$enable_cors = Simple_Jwt_Authentication_Api::get_cors();\n\t\t$is_global   = Simple_Jwt_Authentication_Api::is_global( 'SIMPLE_JWT_AUTHENTICATION_CORS_ENABLE' );\n\t\tinclude plugin_dir_path( __FILE__ ) . 'views/settings/enable-cors.php';\n\n\t}\n\n\n\n\tpublic function settings_section_callback() {\n\t\techo sprintf( __( 'This is all you need to start using JWT authentication.<br /> You can also specify these in wp-config.php instead using %1$s %2$s', 'simple-jwt-authentication' ), \"<br /><br /><code>define( 'SIMPLE_JWT_AUTHENTICATION_SECRET_KEY', YOURKEY );</code>\", \"<br /><br /><code>define( 'SIMPLE_JWT_AUTHENTICATION_CORS_ENABLE', true );</code>\" );\n\n\t}\n\n\n\n\tpublic function simple_jwt_authentication_options_page() {\n\t\tinclude plugin_dir_path( __FILE__ ) . 'views/settings/page.php';\n\n\t}\n\n\n}\n\nnew Simple_Jwt_Authentication_Settings( $plugin_name, $plugin_version );\n\n'simple-jwt-authentication/simple-jwt-authentication.php'\n:<?php\n\n\n\nif ( ! defined( 'WPINC' ) ) {\n\tdie;\n}\n\nclass Simple_Jwt_Authentication {\n\n\tprotected $plugin_name;\n\tprotected $plugin_version;\n\n\n\n\tpublic function __construct() {\n\n\t\t$this->plugin_name    = 'simple-jwt-authentication';\n\t\t$this->plugin_version = '1.4.0';\n\n\n\t\t$this->load_dependencies();\n\n\n\t\tregister_activation_hook( __FILE__, array( $this, 'activate' ) );\n\n\n\t\tregister_deactivation_hook( __FILE__, array( $this, 'deactivate' ) );\n\n\n\t\tadd_action( 'plugins_loaded', array( $this, 'load_textdomain' ) );\n\n\t}\n\n\n\tpublic function load_dependencies() {\n\n\n\t\t$this->include_file( 'vendor/autoload.php' );\n\t\t$this->include_file( 'class-simple-jwt-authentication-api.php' );\n\n\n\t\tif ( is_admin() ) {\n\t\t\t$this->include_file( 'admin/class-simple-jwt-authentication-settings.php' );\n\t\t\t$this->include_file( 'admin/class-simple-jwt-authentication-profile.php' );\n\t\t}\n\n\t\t$this->include_file( 'class-simple-jwt-authentication-rest.php' );\n\n\t}\n\n\n\tprivate function include_file( $path ) {\n\t\t$plugin_name    = $this->plugin_name;\n\t\t$plugin_version = $this->plugin_version;\n\n\t\t$includes_dir = trailingslashit( plugin_dir_path( __FILE__ ) . 'includes' );\n\t\tif ( file_exists( $includes_dir . $path ) ) {\n\t\t\tinclude_once $includes_dir . $path;\n\t\t}\n\t}\n\n\n\tpublic function activate() {\n\n\t}\n\n\n\tpublic function deactivate() {\n\n\t}\n\n\n\tpublic function load_textdomain() {\n\n\t\tload_plugin_textdomain(\n\t\t\t'simple-jwt-authentication',\n\t\t\tfalse,\n\t\t\tbasename( dirname( __FILE__ ) ) . '/languages/'\n\t\t);\n\n\t}\n\n}\n\n\nnew Simple_Jwt_Authentication();\n",
        "gt": [
            "'simple-jwt-authentication/includes/admin/views/settings/secret-key.php'",
            "'simple-jwt-authentication/includes/admin/class-simple-jwt-authentication-settings.php'",
            "'simple-jwt-authentication/simple-jwt-authentication.php'"
        ]
    },
    {
        "files": [
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/src/Action/Cli/BenchmarkAction.php'",
            "'shiny_geoip/cli/app.php'"
        ],
        "content": "'shiny_geoip/src/bootstrap_cli.php'\n:<?php\n\ndeclare(strict_types=1);\n\n\ninclude __DIR__ . '/bootstrap.php';\n\n\nrequire_once __DIR__ . '/ShinyGeoipCli.php';\nrequire_once __DIR__ . '/Action/Cli/CliAction.php';\nrequire_once __DIR__ . '/Action/Cli/BenchmarkAction.php';\nrequire_once __DIR__ . '/Action/Cli/ShowHelpAction.php';\nrequire_once __DIR__ . '/Action/Cli/UpdateMmdbAction.php';\nrequire_once __DIR__ . '/Responder/CliResponder.php';\n\n'shiny_geoip/src/Action/Cli/BenchmarkAction.php'\n:<?php\n\ndeclare(strict_types=1);\n\nnamespace Nekudo\\ShinyGeoip\\Action\\Cli;\n\nuse Nekudo\\ShinyGeoip\\Domain\\LocationDomain;\n\nclass BenchmarkAction extends CliAction\n{\n\n    private $numLookups = 50000;\n\n\n    private $domain;\n\n\n    public function __invoke(array $arguments)\n    {\n        $this->domain = new LocationDomain($this->config);\n        $this->runBenchmark();\n    }\n\n\n    private function runBenchmark()\n    {\n        $startTime = microtime(true);\n        for ($i = 0; $i < $this->numLookups; $i++) {\n            if (version_compare(PHP_VERSION, '7.1.0') >= 0) {\n                $rv = rand(0, pow(2, 32) -1);\n            } else {\n                $rv = (string) rand(0, pow(2, 32) -1);\n            }\n            $ip = long2ip($rv);\n            try {\n                $this->domain->getRecord($ip);\n            } catch (\\Exception $e) {\n            }\n            if ($i % 1000 == 0) {\n                $this->responder->out($i . ' ' . $ip);\n            }\n        }\n        $endTime = microtime(true);\n        $duration = $endTime - $startTime;\n        $this->responder->success('Requests per second: ' . $this->numLookups / $duration);\n    }\n}\n\n'shiny_geoip/cli/app.php'\n:<?php\n\nrequire_once __DIR__ . '/../src/bootstrap_cli.php';\n\n$app = new \\Nekudo\\ShinyGeoip\\ShinyGeoipCli($config);\n$app->dispatch($argv);\n",
        "gt": [
            "'shiny_geoip/src/Action/Cli/BenchmarkAction.php'",
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/cli/app.php'"
        ]
    },
    {
        "files": [
            "'system/admin/footer.php'",
            "'system/admin/db_profiling.php'",
            "'system/admin/publish.php'"
        ],
        "content": "'system/admin/footer.php'\n:<?php namespace Habari; ?>\n<?php if ( !defined( 'HABARI_PATH' ) ) { die('No direct access'); } ?>\n\n</div>\n\n\t<div id=\"footer\" class=\"columns sixteen\">\n\t\t<p>\n\t\t\t<span><a href=\"http:\n\t\t<?php\n\t\techo Version::get_habariversion();\n\t\t?> </a></span>\n\t\t <span class=\"middot\">&middot;</span>\n\t\t <span><?php _e('Logged in as'); ?></span>\n\t\t <?php if ( User::identify()->can( 'manage_users' ) || User::identify()->can( 'manage_self' ) ) { ?>\n\t\t\t\t <a href=\"<?php Site::out_url( 'admin' ); ?>/user\" title=\"<?php _e('Go to your user page'); ?>\"><?php echo User::identify()->displayname ?></a>\n\t\t<?php } else { ?>\n\t\t\t\t <span><?php echo User::identify()->displayname ?></span>\n\t\t<?php } ?>\n\t\t <span class=\"middot\">&middot;</span>\n\t\t <span><a href=\"<?php Site::out_url( 'habari' ); ?>/doc/manual/index.html\" onclick=\"popUp(this.href); return false;\" title=\"<?php _e('Open the Habari manual in a new window'); ?>\"><?php _e('Manual'); ?></a></span>\n\t\t<?php\n\t\t\tif ( User::identify()->can('super_user') ) {\n\t\t\t\t?>\n\t\t\t\t\t<span class=\"middot\">&middot;</span>\n\t\t\t\t\t<span><a href=\"<?php Site::out_url( 'admin' ); ?>/sysinfo\" title=\"<?php _e('Display information about the server and Habari'); ?>\"> <?php _e( 'System Information'); ?></a></span>\n\t\t\t\t<?php\n\t\t\t}\n\t\t?>\n\n\t\t</p>\n\t</div>\n<?php\n\tPlugins::act( 'admin_footer', $this );\n\tStack::out( 'admin_footer_javascript', Method::create('\\\\Habari\\\\Stack', 'scripts') );\n\tinclude ('db_profiling.php');\n?>\n\n<?php if ( Session::has_messages() ): ?>\n\t<script type=\"text/javascript\">\n\tjQuery(document).ready(function() {\n\t\t<?php Session::messages_out( true, Method::create( '\\\\Habari\\\\Format', 'humane_messages' ) ); ?>\n\t})\n  </script>\n<?php endif; ?>\n\n</body>\n</html>\n\n'system/admin/db_profiling.php'\n:<?php namespace Habari; ?>\n<?php if ( !defined( 'HABARI_PATH' ) ) { die('No direct access'); } ?>\n<?php\nif (! isset($_GET['db_profile']) ||  ( !User::identify()->loggedin ) )\n{\n\treturn;\n}\nelse\n{\n?>\n<style>\n.prof_container {\n  margin: 10 100;\n  text-align: center;\n  border: solid 1px\n  background-color:\n  padding: 15;\n}\n.prof_header {\n  font: 320% Arial, Helvetica;\n  color:\n  text-align: left;\n  margin: 0 0 6 0;\n  padding: 0;\n}\n.prof_sql {\n  font: 240% monospace, Courier;\n  font-weight: bold;\n  text-align: left;\n  padding: 4 4 4 30;\n  margin: 4 100;\n  display: block;\n}\n.prof_time {\n  font: 180%/2.0 Verdana, Tahoma, sans;\n  color: red;\n  text-align: left;\n}\n</style>\n<div class=\"prof_container\">\n<h1 class=\"prof_header\"><?php _e('DB Profiling'); ?></h1>\n<?php\n$profiles = DB::get_profiles();\n$total_time_querying = 0;\nforeach ($profiles as $profile) {\n?>\n<div>\n<code class=\"prof_sql\"><?php echo $profile->query_text;?></code>\n<div class=\"prof_time\"><?php _e('Time to Execute:'); ?> <strong><?php echo $profile->total_time;?></strong></div>\n<?php if (! empty($profile->backtrace)) {?>\n<pre style=\"text-align: left;\"><strong><?php _e('BACKTRACE:'); ?></strong><br><?php print_r($profile->backtrace);?></pre>\n<?php }?>\n</div>\n<?php\n  $total_time_querying+= $profile->total_time;\n}\n?>\n<div class=\"prof_time_total\"><?php _e('Total Time Executing Queries:'); ?> <?php echo $total_time_querying;?></div>\n</div>\n<?php\n}\n?>\n\n'system/admin/publish.php'\n:<?php\nnamespace Habari;\nif ( !defined( 'HABARI_PATH' ) ) { die('No direct access'); }\n?>\n<?php include('header.php'); ?>\n\n\t<?php $form->out(); ?>\n\n\n<script type=\"text/javascript\">\n$(document).ready(function(){\n\n\n\n\t$('\n\t\t$('\n\t});\n\n\t$('\n\t\t$('.check-change').each(function() {\n\t\t\t$(this).data('checksum', crc32($(this).val()));\n\t\t});\n\t});\n\n\t$('.check-change').each(function() {\n\t\t$(this).data('checksum', crc32($(this).val()));\n\t\t$(this).data('oldvalue', $(this).val());\n\t});\n\n\twindow.onbeforeunload = function(){\n\t\tchanged = false;\n\t\t$('.check-change').each(function() {\n\t\t\tif ($(this).data('checksum') != crc32($(this).val())) {\n\t\t\t\tconsole.log([$(this).data('oldvalue'), $(this).val()]);\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t});\n\t\tif (changed) {\n\t\t\tspinner.start(); spinner.stop();\n\t\t\treturn '<?php\n\n\t\t\t\t_e('You did not save the changes you made. \\nLeaving this page will result in the loss of data.');\n\t\t\t\t?>';\n\t\t}\n\t};\n\n});\n</script>\n\n<?php include('footer.php'); ?>\n",
        "gt": [
            "'system/admin/db_profiling.php'",
            "'system/admin/footer.php'",
            "'system/admin/publish.php'"
        ]
    },
    {
        "files": [
            "'shiny_geoip/src/Responder/html/home.html.php'",
            "'shiny_geoip/src/Responder/ShowHomepageResponder.php'",
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/cli/app.php'",
            "'shiny_geoip/src/bootstrap.php'"
        ],
        "content": "'shiny_geoip/src/Responder/html/home.html.php'\n:<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta name=\"description\" content=\"Free GeoIP/Geolocation REST API. An open-source project by nekudo.com.\">\n    <title>Free IP GeoLocation/GeoIp API - geoip.nekudo.com</title>\n    <link rel=\"canonical\" href=\"http:\n    <link rel=\"stylesheet\" href=\"/css/base.css\">\n</head>\n<body>\n\n<div class=\"container\">\n\n    <header>\n        <h1>Free IP GeoLocation/GeoIp API</h1>\n        <p class=\"h2\">A free REST API to get location information for IP addresses.</p>\n    </header>\n\n\n    <div class=\"clearfix\">\n        <div class=\"left\">\n            <p>\n                This project is open source. Setup your own instance if you like.\n            </p>\n            <p>\n                <a href=\"https:\n                    Sourcecode at GitHub\n                </a>\n            </p>\n        </div>\n\n        <div class=\"right\">\n            <table class=\"bordered\">\n                <caption align=\"bottom\">Location data for your current IP address</caption>\n                <tbody>\n                    <?php if (!empty($record['city'])): ?>\n                        <tr>\n                            <td>City</td>\n                            <td><?php echo htmlspecialchars($record['city']); ?></td>\n                        </tr>\n                    <?php endif; ?>\n                    <?php if (!empty($record['country'])): ?>\n                        <tr>\n                            <td>Country</td>\n                            <td>\n                                <?php echo htmlspecialchars($record['country']['name']); ?>\n                                (<?php echo htmlspecialchars($record['country']['code']); ?>)\n                            </td>\n                        </tr>\n                    <?php endif; ?>\n                    <?php if (!empty($record['location'])): ?>\n                        <tr>\n                            <td>Latitute</td>\n                            <td>\n                                <?php echo htmlspecialchars($record['location']['latitude']); ?>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Longitude</td>\n                            <td>\n                                <?php echo htmlspecialchars($record['location']['longitude']); ?>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Time zone</td>\n                            <td>\n                                <?php echo htmlspecialchars($record['location']['time_zone']); ?>\n                            </td>\n                        </tr>\n                    <?php endif; ?>\n                    <?php if (empty($record)): ?>\n                        <tr><td><em>No record found.</em></td></tr>\n                    <?php endif; ?>\n                </tbody>\n            </table>\n\n        </div>\n    </div>\n\n    <div class=\"mt-60\">\n        <h3>API Documentation</h3>\n\n        <h4>Requests</h4>\n        <p>\n            All requests have to be HTTP GET requests in the following schema:\n        </p>\n        <pre>http:\n\n        <h4>Parameters</h4>\n        <table>\n            <tbody>\n            <tr>\n                <td class=\"param-name\">ip</td>\n                <td class=\"param-required\">optional</td>\n                <td>Valid IP address in IPv4 or IPv6 format.</td>\n            </tr>\n            <tr>\n                <td class=\"param-name\">language</td>\n                <td class=\"param-required\">optional</td>\n                <td>Two character language code like <em>en</em> or <em>de</em>.</td>\n            </tr>\n            <tr>\n                <td class=\"param-name\">type</td>\n                <td class=\"param-required\">optional</td>\n                <td>\n                    Possible values are <em>short</em> to get a response conataining only most relevant data or\n                    <em>full</em> to get a response containing all available data.\n                </td>\n            </tr>\n            </tbody>\n        </table>\n\n        <h4>Responses</h4>\n        <p class=\"textblock\">\n            By default all responses are JSON encoded strings.<br />\n            It is also possible to get JSONP responses for direct usage in javascripts. To get a JSONP response\n            a callback function has to be provided within the request using the <em>?callback=</em> parameter.\n        </p>\n\n\n        <h4>Examples</h4>\n        <pre>http:\n        <pre>http:\n        <pre>http:\n        <pre>http:\n        <pre>http:\n        <pre>\n&lt;script&gt;\nfunction foo(data) {\n    document.write(&quot;City: &quot;, data.city);\n    document.write(&quot;Country: &quot;, data.country.name);\n    document.write(&quot;Latitude: &quot;, data.location.latitude);\n    document.write(&quot;Longitude: &quot;, data.location.longitude);\n}\n&lt;/script&gt;\n&lt;script src=&quot;http:\n\n        <h4>SSL</h4>\n        <p class=\"textblock\">This service is also available via <a href=\"https:\n\n        <h4>Limits</h4>\n        <p class=\"textblock\">The API follows a fair use policy. There are no limits by default but if the service is\n            abused your IP may get blocked.</p>\n\n        <h4>Support/Donate</h4>\n        <p class=\"textblock\">\n            This API is totally free, however there are a few expenses to run the servers. In case you like this project\n            and use it regularly please consider\n            <a href=\"https:\n        </p>\n    </div>\n\n    <footer>\n        <p>\n            <small>\n                This product includes GeoLite2 data created by MaxMind, available from\n                <a href=\"http:\n                This website is another shiny project by <a href=\"https:\n            </small>\n        </p>\n    </footer>\n\n</div>\n\n\n</body>\n</html>\n'shiny_geoip/src/Responder/ShowHomepageResponder.php'\n:<?php\n\ndeclare(strict_types=1);\n\nnamespace Nekudo\\ShinyGeoip\\Responder;\n\nclass ShowHomepageResponder extends HttpResponder\n{\n\n    public function showHomepage(array $record)\n    {\n        ob_start();\n        require PROJECT_ROOT . '/src/Responder/html/home.html.php';\n        $payload = ob_get_clean();\n        $this->found($payload);\n    }\n}\n\n'shiny_geoip/src/bootstrap_cli.php'\n:<?php\n\ndeclare(strict_types=1);\n\n\ninclude __DIR__ . '/bootstrap.php';\n\n\nrequire_once __DIR__ . '/ShinyGeoipCli.php';\nrequire_once __DIR__ . '/Action/Cli/CliAction.php';\nrequire_once __DIR__ . '/Action/Cli/BenchmarkAction.php';\nrequire_once __DIR__ . '/Action/Cli/ShowHelpAction.php';\nrequire_once __DIR__ . '/Action/Cli/UpdateMmdbAction.php';\nrequire_once __DIR__ . '/Responder/CliResponder.php';\n\n'shiny_geoip/cli/app.php'\n:<?php\n\nrequire_once __DIR__ . '/../src/bootstrap_cli.php';\n\n$app = new \\Nekudo\\ShinyGeoip\\ShinyGeoipCli($config);\n$app->dispatch($argv);\n\n'shiny_geoip/src/bootstrap.php'\n:<?php\n\ndeclare(strict_types=1);\n\ndefine('PROJECT_ROOT', __DIR__ . '/../');\n\n$config = include PROJECT_ROOT . 'config/config.php';\n\nrequire_once PROJECT_ROOT . 'src/ShinyGeoip.php';\nrequire_once PROJECT_ROOT . 'src/Action/ShowHomepageAction.php';\nrequire_once PROJECT_ROOT . 'src/Action/ShowLocationAction.php';\nrequire_once PROJECT_ROOT . 'src/Domain/LocationDomain.php';\nrequire_once PROJECT_ROOT . 'src/Responder/HttpResponder.php';\nrequire_once PROJECT_ROOT . 'src/Responder/ShowLocationResponder.php';\nrequire_once PROJECT_ROOT . 'src/Responder/ShowHomepageResponder.php';\n\n\nif (!class_exists('MaxMind\\Db\\Reader')) {\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Decoder.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Util.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Metadata.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/InvalidDatabaseException.php';\n}\n",
        "gt": [
            "'shiny_geoip/src/Responder/html/home.html.php'",
            "'shiny_geoip/src/Responder/ShowHomepageResponder.php'",
            "'shiny_geoip/src/bootstrap.php'",
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/cli/app.php'"
        ]
    },
    {
        "files": [
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/composer/autoload_real.php'",
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/autoload.php'",
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/4.php'",
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/composer/autoload_files.php'"
        ],
        "content": "'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit162d5f8ec26d0f35f7a435b58f506e91\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit162d5f8ec26d0f35f7a435b58f506e91', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit162d5f8ec26d0f35f7a435b58f506e91', 'loadClassLoader'));\n\n        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());\n        if ($useStaticLoader) {\n            require_once __DIR__ . '/autoload_static.php';\n\n            call_user_func(\\Composer\\Autoload\\ComposerStaticInit162d5f8ec26d0f35f7a435b58f506e91::getInitializer($loader));\n        } else {\n            $map = require __DIR__ . '/autoload_namespaces.php';\n            foreach ($map as $namespace => $path) {\n                $loader->set($namespace, $path);\n            }\n\n            $map = require __DIR__ . '/autoload_psr4.php';\n            foreach ($map as $namespace => $path) {\n                $loader->setPsr4($namespace, $path);\n            }\n\n            $classMap = require __DIR__ . '/autoload_classmap.php';\n            if ($classMap) {\n                $loader->addClassMap($classMap);\n            }\n        }\n\n        $loader->register(true);\n\n        if ($useStaticLoader) {\n            $includeFiles = Composer\\Autoload\\ComposerStaticInit162d5f8ec26d0f35f7a435b58f506e91::$files;\n        } else {\n            $includeFiles = require __DIR__ . '/autoload_files.php';\n        }\n        foreach ($includeFiles as $fileIdentifier => $file) {\n            composerRequire162d5f8ec26d0f35f7a435b58f506e91($fileIdentifier, $file);\n        }\n\n        return $loader;\n    }\n}\n\nfunction composerRequire162d5f8ec26d0f35f7a435b58f506e91($fileIdentifier, $file)\n{\n    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {\n        require $file;\n\n        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;\n    }\n}\n\n'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer/autoload_real.php';\n\nreturn ComposerAutoloaderInit162d5f8ec26d0f35f7a435b58f506e91::getLoader();\n\n'PHP7-Data-Structures-and-Algorithms/Chapter13/4.php'\n:<?php\n\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Tarsana\\Functional as F;\n\n$queue = [];\n\n$enqueue = F\\append(F\\__(), F\\__());\n$head = F\\head(F\\__());\n$dequeue = F\\tail(F\\__());\n\n$queue = $enqueue(1, $queue);\n$queue = $enqueue(2, $queue);\n$queue = $enqueue(3, $queue);\n\necho \"Queue is \".F\\toString($queue).\"\\n\";\n\n$item = $head($queue);\n$queue = $dequeue($queue);\n\necho \"Dequeue-ed item: \".$item.\"\\n\";\necho \"Queue is \".F\\toString($queue).\"\\n\";\n\n$queue = $enqueue(4, $queue);\n\necho \"Queue is \".F\\toString($queue).\"\\n\";\n\n'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/composer/autoload_files.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'ad301e9d734a656b3a7e0cfda5d86814' => $vendorDir . '/tarsana/functional/src/Internal/_functions.php',\n    '074162fde8cc05bb516fe2da4bdde1e2' => $vendorDir . '/tarsana/functional/src/Internal/_stream.php',\n    'e49490e34f69c2b5dc378287aff873a3' => $vendorDir . '/tarsana/functional/src/functions.php',\n    '86e6e0fbb8e27bd3acbcdbc4203d813e' => $vendorDir . '/tarsana/functional/src/operators.php',\n    'a32120ba94fa97a51d3028c3c72c6a2c' => $vendorDir . '/tarsana/functional/src/common.php',\n    '828e32b012c9305974510428dface37d' => $vendorDir . '/tarsana/functional/src/object.php',\n    '2f4f606cc5bf2a20346afa245643e51c' => $vendorDir . '/tarsana/functional/src/string.php',\n    '67815361e2d72888c0507e858ef42a16' => $vendorDir . '/tarsana/functional/src/list.php',\n    'cffc2f002a7818ea4be857a6cb09c019' => $vendorDir . '/tarsana/functional/src/math.php',\n);\n",
        "gt": [
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/composer/autoload_files.php'",
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/composer/autoload_real.php'",
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/autoload.php'",
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/4.php'"
        ]
    },
    {
        "files": [
            "'ecommerce-website/index.php'",
            "'ecommerce-website/includes/common.php'",
            "'ecommerce-website/includes/check-if-added.php'"
        ],
        "content": "'ecommerce-website/index.php'\n:<?php\nsession_start();\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Planet Shopify | Online Shopping Site for Men</title>\n    <link rel=\"stylesheet\" href=\"https:\n    <link href=\"https:\n    <link href='https:\n    <link href='https:\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body style=\"margin-bottom:200px\">\n    <!--Header-->\n    <?php\ninclude 'includes/header_menu.php';\ninclude 'includes/check-if-added.php';\n?>\n    <!--Header ends-->\n    <div id=\"content\">\n        <div id=\"bg\" class=\" \">\n            <div class=\"container\" style=\"padding-top:150px\">\n            <div class=\"mx-auto p-5 text-white\" id=\"banner_content\" style=\"border-radius: 0.5rem;\" >\n            <h1>We sell Happiness :)</h1>\n            <p>Flat 40% OFF on premium brands </p>\n            <a href=\"products.php\" class=\"btn btn-warning btn-lg text-white\">Shop Now</a>\n\n            </div>\n            </div>\n\n        </div>\n    </div>\n    <div class=\"text-center pt-4 h3\">\n        * Be fashionable Men *\n    </div>\n    <!--menu highlights start-->\n <div class=\"container pt-3\">\n        <div class=\"row text-center \">\n            <div class=\"col-6 col-md-3 py-3\">\n                <a href=\"products.php\n                <!-- https:\n                    <div class=\"h5 pt-3 font-weight-bolder\">\n                      Watches\n                   </div>\n                 </a>\n             </div>\n            <div class=\"col-6 col-md-3 py-3 \" >\n                <a href=\"products.php\n                  <img src=\"images/clothing.jpg\" class=\"img-fluid zoom\" alt=\"\" style=\"border-radius:0.5rem\" >\n                     <div class=\"h5 pt-3 font-weight-bolder\">\n                        Clothing\n                     </div>\n                  </a>\n             </div>\n            <div class=\"col-6 col-md-3 py-3\">\n                <a href=\"products.php\n                 <img src=\"images/shoes.jpg\" class=\"img-fluid   \" alt=\"\" style=\"border-radius:0.5rem\">\n                <div class=\"h5 pt-3 font-weight-bolder\">\n                    Shoes\n                 </div>\n             </a>\n             </div>\n            <div class=\"col-6 col-md-3 py-3\">\n                <a href=\"products.php\n                 <img src=\"images/headphones.jpg\" class=\"img-fluid  \" alt=\"\" style=\"border-radius:0.5rem\">\n                 <div class=\"h5 pt-3 font-weight-bolder\">\n                    Headphones\n                 </div>\n              </div>\n            </a>\n        </div>\n    </div>\n\n    <!--menu highlights end-->\n    <!--footer -->\n    <?php include 'includes/footer.php'?>\n    <!--footer end-->\n\n\n\n\n</body>\n<script src=\"https:\n<script src=\"https:\n<script src=\"https:\n<script>\n$(document).ready(function(){\n  $('[data-toggle=\"popover\"]').popover();\n});\n$(document).ready(function() {\n\nif(window.location.href.indexOf('\n  $('\n}\n\n});\n</script>\n<?php if (isset($_GET['error'])) {$z = $_GET['error'];\n    echo \"<script type='text/javascript'>\n$(document).ready(function(){\n$('\n});\n</script>\";\n    echo \"<script type='text/javascript'>alert('\" . $z . \"')</script>\";}?>\n\n<?php if (isset($_GET['errorl'])) {$z = $_GET['errorl'];\n    echo \"<script type='text/javascript'>\n$(document).ready(function(){\n$('\n});\n</script>\";\n    echo \"<script type='text/javascript'>alert('\" . $z . \"')</script>\";}?>\n\n\n\n\n</html>\n'ecommerce-website/includes/common.php'\n:<?php\n$con=mysqli_connect(\"localhost\",\"root\",\"\",\"ecommerce\");\nif (!$con) {\n    die(\"Connection failed: \" . mysqli_connect_error());\n}\n\n'ecommerce-website/includes/check-if-added.php'\n:<?php\n\nfunction check_if_added_to_cart($item_id) {\n\n    $user_id = $_SESSION['user_id'];\n    require(\"common.php\");\n\n    $query = \"SELECT * FROM users_products WHERE item_id='$item_id' AND user_id ='$user_id' and status='Added to cart'\";\n    $result = mysqli_query($con, $query);\n\n\n    if (mysqli_num_rows($result) >= 1) {\n        return 1;\n    } else {\n        return 0;\n    }\n}\n\n?>",
        "gt": [
            "'ecommerce-website/includes/common.php'",
            "'ecommerce-website/includes/check-if-added.php'",
            "'ecommerce-website/index.php'"
        ]
    },
    {
        "files": [
            "'EvilPortalNano/EvilPortal/includes/api/index.php'",
            "'EvilPortalNano/EvilPortal/includes/targeted_skeleton/MyPortal.php'",
            "'EvilPortalNano/EvilPortal/includes/api/API.php'"
        ],
        "content": "'EvilPortalNano/EvilPortal/includes/api/index.php'\n:<?php namespace evilportal;\n\nheader('Content-Type: application/json');\n\nrequire_once(\"API.php\");\n$api = new API();\necho $api->go();\n\n'EvilPortalNano/EvilPortal/includes/targeted_skeleton/MyPortal.php'\n:<?php namespace evilportal;\n\nclass MyPortal extends Portal\n{\n\n    public function handleAuthorization()\n    {\n\n\n\n        parent::handleAuthorization();\n    }\n\n\n    public function onSuccess()\n    {\n\n        parent::onSuccess();\n    }\n\n\n    public function showError()\n    {\n\n        parent::showError();\n    }\n}\n\n'EvilPortalNano/EvilPortal/includes/api/API.php'\n:<?php namespace evilportal;\n\nclass API\n{\n    private $request;\n    private $error;\n\n    public function __construct()\n    {\n        $this->request = (object)$_POST;\n    }\n\n    public function route()\n    {\n        $portalPath = \"/www/MyPortal.php\";\n        $portalClass = \"evilportal\\\\MyPortal\";\n\n        if (!file_exists($portalPath)) {\n            $this->error = \"MyPortal.php does not exist in {$portalPath}\";\n            return;\n        }\n\n        require_once(\"Portal.php\");\n        require_once($portalPath);\n\n        if (!class_exists($portalClass)) {\n            $this->error = \"The class {$portalClass} does not exist in {$portalPath}\";\n            return;\n        }\n\n        $portal = new $portalClass($this->request);\n        $portal->handleAuthorization();\n        $this->response = $portal->getResponse();\n    }\n\n    public function finalize()\n    {\n        if ($this->error) {\n            return json_encode(array(\"error\" => $this->error));\n        } elseif ($this->response) {\n            return json_encode($this->response);\n        }\n    }\n\n    public function go()\n    {\n        $this->route();\n    }\n}\n",
        "gt": [
            "'EvilPortalNano/EvilPortal/includes/targeted_skeleton/MyPortal.php'",
            "'EvilPortalNano/EvilPortal/includes/api/API.php'",
            "'EvilPortalNano/EvilPortal/includes/api/index.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/assets/php/styles.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'security.php';\n?><meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<meta name=\"robots\" content=\"noindex, nofollow\">\n\n<link rel=\"icon\" type=\"image/png\" href=\"../assets/img/favicon.png\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/fontawesome.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/solid.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/izitoast/iziToast.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/select2/select2.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/jquery-confirm/jquery-confirm.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/datatables/datatables.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/adminlte.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/custom.css\">\n'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ]
    },
    {
        "files": [
            "'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/Exception.php'",
            "'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/ConnectionException.php'",
            "'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/Observer/Log.php'"
        ],
        "content": "'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/Exception.php'\n:<?php\n\n\n\nrequire_once 'PEAR/Exception.php';\n\n\nclass HTTP_Request2_Exception extends PEAR_Exception\n{\n\n    const INVALID_ARGUMENT   = 1;\n\n    const MISSING_VALUE      = 2;\n\n    const MISCONFIGURATION   = 3;\n\n    const READ_ERROR         = 4;\n\n\n    const MALFORMED_RESPONSE = 10;\n\n    const DECODE_ERROR       = 20;\n\n    const TIMEOUT            = 30;\n\n    const TOO_MANY_REDIRECTS = 40;\n\n    private $_nativeCode;\n\n\n    public function __construct($message = null, $code = null, $nativeCode = null)\n    {\n        parent::__construct($message, $code);\n        $this->_nativeCode = $nativeCode;\n    }\n\n\n    public function getNativeCode()\n    {\n        return $this->_nativeCode;\n    }\n}\n\n\nrequire_once 'HTTP/Request2/ConnectionException.php';\nrequire_once 'HTTP/Request2/LogicException.php';\nrequire_once 'HTTP/Request2/MessageException.php';\nrequire_once 'HTTP/Request2/NotImplementedException.php';\n\n?>\n'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/ConnectionException.php'\n:<?php\n\n\n\nclass HTTP_Request2_ConnectionException extends HTTP_Request2_Exception\n{\n}\n\n?>\n'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/Observer/Log.php'\n:<?php\n\n\n\nrequire_once 'HTTP/Request2/Exception.php';\n\n\nclass HTTP_Request2_Observer_Log implements SplObserver\n{\n\n\n\n    protected $target = null;\n\n\n    public $events = [\n        'connect',\n        'sentHeaders',\n        'sentBody',\n        'receivedHeaders',\n        'receivedBody',\n        'disconnect',\n    ];\n\n\n\n\n\n    public function __construct($target = 'php:\n    {\n        if (!empty($events)) {\n            $this->events = $events;\n        }\n        if (is_resource($target) || $target instanceof Log) {\n            $this->target = $target;\n        } elseif (false === ($this->target = @fopen($target, 'ab'))) {\n            throw new HTTP_Request2_Exception(\"Unable to open '{$target}'\");\n        }\n    }\n\n\n\n\n\n    public function update(SplSubject $subject)\n    {\n        $event = $subject->getLastEvent();\n        if (!in_array($event['name'], $this->events)) {\n            return;\n        }\n\n        switch ($event['name']) {\n        case 'connect':\n            $this->log('* Connected to ' . $event['data']);\n            break;\n        case 'sentHeaders':\n            $headers = explode(\"\\r\\n\", $event['data']);\n            array_pop($headers);\n            foreach ($headers as $header) {\n                $this->log('> ' . $header);\n            }\n            break;\n        case 'sentBody':\n            $this->log('> ' . $event['data'] . ' byte(s) sent');\n            break;\n        case 'receivedHeaders':\n            $this->log(sprintf(\n                '< HTTP/%s %s %s', $event['data']->getVersion(),\n                $event['data']->getStatus(), $event['data']->getReasonPhrase()\n            ));\n            $headers = $event['data']->getHeader();\n            foreach ($headers as $key => $val) {\n                $this->log('< ' . $key . ': ' . $val);\n            }\n            $this->log('< ');\n            break;\n        case 'receivedBody':\n            $this->log($event['data']->getBody());\n            break;\n        case 'disconnect':\n            $this->log('* Disconnected');\n            break;\n        }\n    }\n\n\n\n\n\n    protected function log($message)\n    {\n        if ($this->target instanceof Log) {\n            $this->target->debug($message);\n        } elseif (is_resource($this->target)) {\n            fwrite($this->target, $message . \"\\r\\n\");\n        }\n    }\n\n\n}\n\n?>",
        "gt": [
            "'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/ConnectionException.php'",
            "'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/Exception.php'",
            "'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/Observer/Log.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/devdocs.php'\n:<?php\n\nini_set('display_errors', 0);\nini_set('memory_limit', '-1');\n\nuse CFPropertyList\\CFPropertyList;\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocs {\n  private static $cacheDirectory = 'cache/';\n\n  private $workflows;\n  private $results;\n  private $baseUrl;\n  private $cacheLife;\n  private $template;\n\n  public function __construct($query, $doc) {\n    $this->baseUrl = getenv('BASE_URL') ?: 'https:\n    $this->cacheLife = (int)(getenv('CACHE_LIFE') ?: '7');\n    $this->template = getenv('TEMPLATE') ?: '$baseUrl$documentation/$path';\n    $this->workflows = new Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n    $this->results = [\n      0 => [],\n      1 => [],\n      2 => []\n    ];\n\n    $documentations = $this->getDocumentations();\n    if (!isset($doc) || empty($doc)) {\n      $rootPath = str_replace('/scripts', '', $this->workflows->path());\n      $pList = (new CFPropertyList($rootPath . '/info.plist'))->toArray();\n      foreach ($pList['connections'] as $key => $value) {\n        if (array_key_exists($key, $documentations)) {\n          $this->checkCache($key);\n          $this->processDocumentation($key, $query);\n        }\n      }\n    } else {\n      $this->checkCache($doc);\n      $this->processDocumentation($doc, $query);\n    }\n    $this->render();\n  }\n\n  private function getDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      $docContent = $this->workflows->fetch($this->baseUrl . 'docs/docs.json');\n      file_put_contents($docFile, $docContent);\n    } else {\n      $docContent = file_get_contents($docFile);\n    }\n    $docs = json_decode($docContent);\n    $documentations = [];\n    foreach ($docs as $doc) {\n      $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n      $documentations[$doc->slug] = $doc;\n    }\n    return $documentations;\n  }\n\n  private function checkCache($documentation) {\n    if (!file_exists(self::$cacheDirectory)) {\n      mkdir(self::$cacheDirectory);\n    }\n    $docFile = self::$cacheDirectory . $documentation . '.json';\n    error_log(\"Checking existence of cache at $docFile\");\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      error_log(\"Download doc for $documentation at \\\"\" . $this->baseUrl . 'docs/' . $documentation . '/index.json') . \"\\\"\";\n      file_put_contents($docFile, file_get_contents($this->baseUrl . 'docs/' . $documentation . '/index.json'));\n    }\n  }\n\n  private function processDocumentation($documentation, $query) {\n\n    $query = strtolower($query);\n    $data = json_decode(file_get_contents(self::$cacheDirectory . $documentation . '.json'));\n    if ($data === null) {\n      unlink(self::$cacheDirectory . $documentation . '.json');\n    }\n\n    $entries = $data->entries;\n\n    $found = [];\n    foreach ($entries as $key => $result) {\n      $value = strtolower(trim($result->name));\n      $description = strtolower(utf8_decode(strip_tags($result->type)));\n\n      if (empty($query)) {\n        $found[$value] = true;\n        $result->documentation = $documentation;\n        $this->results[0][] = $result;\n      } else if (strpos($value, $query) === 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[0][] = $result;\n        }\n      } else if (strpos($value, $query) > 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[1][] = $result;\n        }\n      } else if (strpos($description, $query) !== false) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[2][] = $result;\n        }\n      }\n    }\n\n    if ((count($this->results[0]) === 0) && (count($this->results[1]) === 0) && (count($this->results[2]) === 0)) {\n      $this->results[0][] = (object) [\n        'name' => 'No results.',\n        'documentation' => $documentation\n      ];\n    }\n\n  }\n\n  private function render() {\n    foreach ($this->results as $level => $results) {\n      foreach ($results as $result) {\n        $title = empty($result->type) ? $result->name : \"$result->name ($result->type)\";\n        $vars = array(\n          '$baseUrl' => $this->baseUrl,\n          '$documentation' => $result->documentation,\n          '$docalt' => str_replace(\"~\", \"-\", $result->documentation),\n          '$name' => $result->name,\n          '$path' => $result->path\n        );\n\n        $url = strtr($this->template, $vars);\n        $this->workflows->result($result->name, $url, $title, $result->path, $result->documentation . '.png', 'yes', $result->name);\n      }\n    }\n    echo $this->workflows->toxml();\n  }\n}\n\n$query = isset($query) ? $query : '';\n$documentation = isset($documentation) ? $documentation : '';\nnew DevDocs($query, $documentation);\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'"
        ]
    },
    {
        "files": [
            "'cpanel-UAPI-php-class/cpaneluapi.class.php'",
            "'cpanel-UAPI-php-class/otphp/lib/totp.php'",
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'"
        ],
        "content": "'cpanel-UAPI-php-class/cpaneluapi.class.php'\n:<?php\n\n\n\n\nclass cpanelAPI\n{\n    public $version = '2.0';\n    public $ssl = 1;\n    public $port = 2083;\n    public $server;\n    public $maxredirect = 0;\n    public $user;\n    public $json = '';\n\n    protected $scope;\n    protected $api;\n    protected $auth;\n    protected $pass;\n    protected $secret;\n    protected $type;\n    protected $session;\n    protected $method;\n    protected $requestUrl;\n    protected $eno;\n    protected $emes;\n    protected $token = FALSE;\n    protected $httpMethod = 'GET';\n    protected $postData = '';\n\n    function __construct($user, $pass, $server, $secret = FALSE)\n    {\n        $this->user = $user;\n        $this->pass = $pass;\n        $this->server = $server;\n        if ($secret) {\n            $this->secret = $secret;\n            $this->set2Fa();\n        }\n    }\n\n\n    protected function set2Fa()\n    {\n        require 'otphp/lib/otphp.php';\n        $totp = new \\OTPHP\\TOTP($this->secret);\n        $this->token = $totp->now();\n    }\n\n    public function __get($name)\n    {\n        switch (strtolower($name)) {\n            case 'get':\n                $this->httpMethod = 'GET';\n                break;\n            case 'post':\n                $this->httpMethod = 'POST';\n                break;\n            case 'api2':\n                $this->setApi('api2');\n                break;\n            case 'uapi':\n                $this->setApi('uapi');\n                break;\n            default:\n                $this->scope = $name;\n        }\n        return $this;\n    }\n\n\n    protected function setApi($api)\n    {\n        $this->api = $api;\n        $this->setMethod();\n        return $this;\n    }\n\n\n    protected function setMethod()\n    {\n        switch ($this->api) {\n            case 'uapi':\n                $this->method = '/execute/';\n                break;\n            case 'api2':\n                $this->method = '/json-api/cpanel/';\n                break;\n            default:\n                throw new Exception('$this->api is not set or is incorrectly set. The only available options are \\'uapi\\' or \\'api2\\'');\n        }\n        return $this;\n    }\n\n\n    public function __toString()\n    {\n        return $this->json;\n    }\n\n\n    public function __call($name, $arguments)\n    {\n        if (count($arguments) < 1 || !is_array($arguments[0]))\n            $arguments[0] = [];\n        $this->json = $this->APIcall($name, $arguments[0]);\n        return json_decode($this->json);\n    }\n\n\n    protected function APIcall($name, $arguments)\n    {\n        $this->auth = base64_encode($this->user . \":\" . $this->pass);\n        $this->type = $this->ssl == 1 ? \"https:\n        $this->requestUrl = $this->type . $this->server . ':' . $this->port . $this->method;\n        switch ($this->api) {\n            case 'uapi':\n                $this->requestUrl .= ($this->scope != '' ? $this->scope . \"/\" : '') . $name . '?';\n                break;\n            case 'api2':\n                if ($this->scope == '') {\n                    throw new Exception('Scope must be set.');\n                }\n                $this->requestUrl .= '?cpanel_jsonapi_user=' . $this->user . '&cpanel_jsonapi_apiversion=2&cpanel_jsonapi_module=' . $this->scope . '&cpanel_jsonapi_func=' . $name . '&';\n                break;\n            default:\n                throw new Exception('$this->api is not set or is incorrectly set. The only available options are \\'uapi\\' or \\'api2\\'');\n        }\n        if($this->httpMethod == 'GET') {\n            $this->requestUrl .= http_build_query($arguments);\n        }\n        if($this->httpMethod == 'POST'){\n            $this->postData = $arguments;\n        }\n\n        return $this->curl_request($this->requestUrl);\n    }\n\n\n    protected function curl_request($url)\n    {\n        $httpHeaders = array(\"Authorization: Basic \" . $this->auth);\n\n        if ($this->token) {\n            $httpHeaders[] = \"X-CPANEL-OTP: \" . $this->token;\n        }\n        $ch = curl_init();\n        if($this->httpMethod == 'POST'){\n            $httpHeaders[] = \"Content-type: multipart/form-data\";\n            curl_setopt($ch,CURLOPT_POSTFIELDS, $this->postData);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $httpHeaders);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 100020);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n\n        $content = $this->curl_exec_follow($ch, $this->maxredirect);\n        $this->eno = curl_errno($ch);\n        $this->emes = curl_error($ch);\n\n        curl_close($ch);\n\n        return $content;\n    }\n\n\n    protected function curl_exec_follow($ch, &$maxredirect = null)\n    {\n\n\n        $user_agent = \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.5)\" .\n            \" Gecko/20041107 Firefox/1.0\";\n        curl_setopt($ch, CURLOPT_USERAGENT, $user_agent);\n\n        $mr = $maxredirect === null ? 5 : intval($maxredirect);\n\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $mr > 0);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $mr);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n        return curl_exec($ch);\n    }\n\n\n    public function getLastRequest()\n    {\n        return $this->requestUrl;\n    }\n\n\n    public function getError()\n    {\n        if (!empty($this->eno)) {\n            return ['no' => $this->eno, 'message' => $this->emes];\n        }\n        return FALSE;\n    }\n}\n\n'cpanel-UAPI-php-class/otphp/lib/totp.php'\n:<?php\n\n\nnamespace OTPHP {\n\n  class TOTP extends OTP {\n\n    public $interval;\n\n    public function __construct($s, $opt = Array()) {\n      $this->interval = isset($opt['interval']) ? $opt['interval'] : 30;\n      parent::__construct($s, $opt);\n    }\n\n\n    public function at($timestamp) {\n      return $this->generateOTP($this->timecode($timestamp));\n    }\n\n\n    public function now() {\n      return $this->generateOTP($this->timecode(time()));\n    }\n\n\n    public function verify($otp, $timestamp = null) {\n      if($timestamp === null)\n        $timestamp = time();\n      return ($otp == $this->at($timestamp));\n    }\n\n\n    public function provisioning_uri($name) {\n      return \"otpauth:\n    }\n\n\n    protected function timecode($timestamp) {\n      return (int)( (((int)$timestamp * 1000) / ($this->interval * 1000)));\n    }\n  }\n\n}\n\n'cpanel-UAPI-php-class/otphp/lib/otphp.php'\n:<?php\n\n\nrequire_once dirname(__FILE__).'/../vendor/libs.php';\nrequire_once dirname(__FILE__).'/otp.php';\nrequire_once dirname(__FILE__).'/hotp.php';\nrequire_once dirname(__FILE__).'/totp.php';\n\n",
        "gt": [
            "'cpanel-UAPI-php-class/otphp/lib/totp.php'",
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/cpaneluapi.class.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}\n'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once(dirname(__DIR__) . '/assets/php/session-header.php');\n\nswitch(getParam('action')){\n    case 'lang-change':\n        $base->unam_checkCondition(!in_array(getParam('newlangID'), array_keys($config['languages'])), 'Language ID invalid.');\n        $_SESSION['lang'] = getParam('newlangID');\n        $base->unam_echoSuccess();\n        break;\n}\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'"
        ]
    },
    {
        "files": [
            "'phansible/public/rewrite.php'",
            "'phansible/config/bootstrap.php'",
            "'phansible/public/index.php'",
            "'phansible/public/front.php'"
        ],
        "content": "'phansible/public/rewrite.php'\n:<?php\nif (preg_match('/\\.(?:png|jpg|jpeg|gif|css|js)$/', $_SERVER[\"REQUEST_URI\"])) {\n    return false;\n} else {\n    include __DIR__ . '/index.php';\n}\n'phansible/config/bootstrap.php'\n:<?php\n\nuse Symfony\\Component\\Dotenv\\Dotenv;\n\nrequire dirname(__DIR__).'/vendor/autoload.php';\n\n\n\nif (is_array($env = @include dirname(__DIR__).'/.env.local.php') && ($_SERVER['APP_ENV'] ?? $_ENV['APP_ENV'] ?? $env['APP_ENV']) === $env['APP_ENV']) {\n    foreach ($env as $k => $v) {\n        $_ENV[$k] = $_ENV[$k] ?? (isset($_SERVER[$k]) && 0 !== strpos($k, 'HTTP_') ? $_SERVER[$k] : $v);\n    }\n} elseif (!class_exists(Dotenv::class)) {\n    throw new RuntimeException('Please run \"composer require symfony/dotenv\" to load the \".env\" files configuring the application.');\n} else {\n\n    (new Dotenv(false))->loadEnv(dirname(__DIR__).'/.env');\n}\n\n$_SERVER += $_ENV;\n$_SERVER['APP_ENV'] = $_ENV['APP_ENV'] = ($_SERVER['APP_ENV'] ?? $_ENV['APP_ENV'] ?? null) ?: 'dev';\n$_SERVER['APP_DEBUG'] = $_SERVER['APP_DEBUG'] ?? $_ENV['APP_DEBUG'] ?? 'prod' !== $_SERVER['APP_ENV'];\n$_SERVER['APP_DEBUG'] = $_ENV['APP_DEBUG'] = (int) $_SERVER['APP_DEBUG'] || filter_var($_SERVER['APP_DEBUG'], FILTER_VALIDATE_BOOLEAN) ? '1' : '0';\n\n'phansible/public/index.php'\n:<?php\n\nrequire __DIR__ . '/front.php';\n\n'phansible/public/front.php'\n:<?php\n\nuse App\\Kernel;\nuse Symfony\\Component\\ErrorHandler\\Debug;\nuse Symfony\\Component\\HttpFoundation\\Request;\n\nrequire dirname(__DIR__).'/config/bootstrap.php';\n\nif ($_SERVER['APP_DEBUG']) {\n    umask(0000);\n\n    Debug::enable();\n}\n\nif ($trustedProxies = $_SERVER['TRUSTED_PROXIES'] ?? $_ENV['TRUSTED_PROXIES'] ?? false) {\n    Request::setTrustedProxies(explode(',', $trustedProxies), Request::HEADER_X_FORWARDED_ALL ^ Request::HEADER_X_FORWARDED_HOST);\n}\n\nif ($trustedHosts = $_SERVER['TRUSTED_HOSTS'] ?? $_ENV['TRUSTED_HOSTS'] ?? false) {\n    Request::setTrustedHosts([$trustedHosts]);\n}\n\n$kernel = new Kernel($_SERVER['APP_ENV'], (bool) $_SERVER['APP_DEBUG']);\n\n$request = Request::createFromGlobals();\n\n$response = $kernel->handle($request);\n$response->send();\n\n$kernel->terminate($request, $response);\n",
        "gt": [
            "'phansible/config/bootstrap.php'",
            "'phansible/public/front.php'",
            "'phansible/public/index.php'",
            "'phansible/public/rewrite.php'"
        ]
    },
    {
        "files": [
            "'runtime/Tests/phpt/kernel-loop.php'",
            "'runtime/Tests/phpt/autoload.php'",
            "'runtime/Tests/phpt/kernel.php'"
        ],
        "content": "'runtime/Tests/phpt/kernel-loop.php'\n:<?php\n\n\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\Runtime\\Runner\\ClosureRunner;\nuse Symfony\\Component\\Runtime\\RunnerInterface;\nuse Symfony\\Component\\Runtime\\SymfonyRuntime;\n\nrequire __DIR__.'/autoload.php';\n\n$runtime = new class(['project_dir' => __DIR__]) extends SymfonyRuntime {\n    public function getRunner(?object $kernel): RunnerInterface\n    {\n        return new ClosureRunner(static function () use ($kernel): int {\n            $kernel->handle(new Request())->send();\n            echo \"\\n\";\n            $kernel->handle(new Request())->send();\n            echo \"\\n\";\n\n            return 0;\n        });\n    }\n};\n\n[$app, $args] = $runtime->getResolver(require __DIR__.'/kernel.php')->resolve();\necho $runtime->getRunner($app(...$args))->run();\n\n'runtime/Tests/phpt/autoload.php'\n:<?php\n\n\n\nuse Symfony\\Component\\Runtime\\SymfonyRuntime;\n\n$_SERVER['APP_RUNTIME_OPTIONS'] ??= [];\n$_SERVER['APP_RUNTIME_OPTIONS'] += [\n    'project_dir' => __DIR__,\n] + ($_SERVER['APP_RUNTIME_OPTIONS'] ?? []);\n\nif (file_exists(dirname(__DIR__, 2).'/vendor/autoload.php')) {\n    if (true === (require_once dirname(__DIR__, 2).'/vendor/autoload.php') || empty($_SERVER['SCRIPT_FILENAME'])) {\n        return;\n    }\n\n    $app = require $_SERVER['SCRIPT_FILENAME'];\n    $runtime = $_SERVER['APP_RUNTIME'] ?? SymfonyRuntime::class;\n    $runtime = new $runtime($_SERVER['APP_RUNTIME_OPTIONS']);\n    [$app, $args] = $runtime->getResolver($app)->resolve();\n    exit($runtime->getRunner($app(...$args))->run());\n}\n\nif (!file_exists(dirname(__DIR__, 6).'/vendor/autoload_runtime.php')) {\n    throw new LogicException('Autoloader not found.');\n}\n\nrequire dirname(__DIR__, 6).'/vendor/autoload_runtime.php';\n\n'runtime/Tests/phpt/kernel.php'\n:<?php\n\n\n\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\Response;\nuse Symfony\\Component\\HttpKernel\\HttpKernelInterface;\n\nrequire __DIR__.'/autoload.php';\n\nclass TestKernel implements HttpKernelInterface\n{\n    private string $var;\n\n    public function __construct(string $var)\n    {\n        $this->var = $var;\n    }\n\n    public function handle(Request $request, $type = self::MAIN_REQUEST, $catch = true): Response\n    {\n        return new Response('OK Kernel '.$this->var);\n    }\n}\n\nreturn fn (array $context) => new TestKernel($context['SOME_VAR']);\n",
        "gt": [
            "'runtime/Tests/phpt/autoload.php'",
            "'runtime/Tests/phpt/kernel.php'",
            "'runtime/Tests/phpt/kernel-loop.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/config.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n\n$config['password'] = 'UnamSanctam';\n\n\n$config['db_file'] = __DIR__.\"/db/unamwebpanel.db\";\n\n\n$config['hashrate_history'] = true;\n\n\n$config['hashrate_history_limit'] = 1440;\n\n\n$config['failedlogin_blocktime'] = 15;\n$config['failedlogin_blocktries'] = 5;\n\n\n$config['errorlog_enable'] = true;\n\n$config['languages'] = [\n    'en'=>'English',\n    'sv'=>'Swedish',\n    'fr'=>'French',\n    'de'=>'German',\n    'pl'=>'Polish',\n    'ru'=>'Russian',\n    'uk'=>'Ukrainian',\n    'es'=>'Spanish'\n];\n\n$config['unam_version'] = \"1.8.0\";\n\nglobal $config;",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/config.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ]
    },
    {
        "files": [
            "'litefilesystem.js/src/include/core.php'",
            "'litefilesystem.js/src/server.php'",
            "'litefilesystem.js/src/include/extra/Predis/Autoloader.php'"
        ],
        "content": "'litefilesystem.js/src/include/core.php'\n:<?php\n\n\n\n\n\nerror_reporting(E_ALL);\n\n\n\n\n\n$is_console = php_sapi_name() == \"cli\";\n\nif($is_console && count($argv) > 1)\n\n{\n\n\t$params = explode( \"&\",  $argv[1] );\n\n\tforeach($params as $p => $param)\n\n\t{\n\n\t\t$t = explode( \"=\", $param );\n\n\t\tif( count($t) > 1 )\n\n\t\t\t$_REQUEST[ $t[0] ] = $t[1];\n\n\t}\n\n}\n\n\n\nif( !$is_console )\n\n\t$global_url = \"http:\n\nelse\n\n\t$global_url = \"localhost/\";\n\n\n\n\n\n\n\nif (!file_exists(__DIR__ . \"/config.php\"))\n\n\tdie(\"config.php not found, check include/config.sample-php, change it and rename it to include/config.php\");\n\n\n\nrequire_once __DIR__ . \"/config.php\";\n\n\n\n\n\n$session_enabled = false;\n\nif(!headers_sent())\n\n\t$session_enabled = session_start();\n\n\n\n\n\nfunction trace($str)\n\n{\n\n\n\n\t$f = fopen(__DIR__.\"/trace.log\",\"a\");\n\n\tfwrite($f, date(\"Y-m-d H:i:s\") . \": \" . $str.\"\\n\");\n\n\tfclose($f);\n\n}\n\n\n\n$debug_buffer = Array();\n\nfunction debug($str, $color = null)\n\n{\n\n\tglobal $debug_buffer, $is_console;\n\n\n\n\tif($color && $is_console)\n\n\t{\n\n\t\t$colors = Array(\"\"=>\"\\033[0m\", \"black\"=>\"\\033[30m\", \"red\"=>\"\\033[31m\", \"green\"=>\"\\033[32m\", \"yellow\"=>\"\\033[33m\", \"blue\"=>\"\\033[34m\" );\n\n\t\tif( isset($colors[$color]))\n\n\t\t\t$str = $colors[$color] . $str . $colors[\"\"];\n\n\t}\n\n\n\n\tif($is_console)\n\n\t\techo(\" LOG: \" . $str.\"\\n\");\n\n\telse\n\n\t\t$debug_buffer[] = $str;\n\n}\n\n\n\nfunction clearDebugLog()\n\n{\n\n\tglobal $debug_buffer;\n\n\t$debug_buffer = Array();\n\n}\n\n\n\nfunction getDebugLog()\n\n{\n\n\tglobal $debug_buffer;\n\n\treturn $debug_buffer;\n\n}\n\n\n\n\n\n$loaded_modules = array();\n\n\n\nfunction registerModule($modulename, $class)\n\n{\n\n\tglobal $loaded_modules;\n\n\t$loaded_modules[$modulename] = new $class();\n\n}\n\n\n\nfunction getModule($modulename)\n\n{\n\n\tglobal $loaded_modules;\n\n\n\n\tif( strpos(\"..\",$modulename) != FALSE)\n\n\t\treturn null;\n\n\n\n\tif( isset( $loaded_modules[$modulename] ) )\n\n\t\treturn $loaded_modules[$modulename];\n\n\n\n\tif( file_exists(__DIR__ . \"/modules/\" . $modulename . \".php\") == FALSE)\n\n\t\treturn NULL;\n\n\n\n\n\n\trequire_once \"modules/\" . $modulename . \".php\";\n\n\n\n\treturn $loaded_modules[$modulename];\n\n}\n\n\n\nfunction loadModules($str)\n\n{\n\n\t$result = Array();\n\n\tif($str == \"*\")\n\n\t{\n\n\t\t$files = scandir(__DIR__ . '/modules/');\n\n\t\tforeach($files as $file)\n\n\t\t{\n\n\t\t\tif ($file == '.' || $file == '..' || substr($file,-4) != \".php\") continue;\n\n\n\n\t\t\t$module = getModule( substr($file,0,-4) );\n\n\t\t\t$result[] = $module;\n\n\t\t}\n\n\t\treturn $result;\n\n\t}\n\n\n\n\t$tokens = explode(\",\",$str);\n\n\tforeach($tokens as $k=>$v)\n\n\t\t$result[] = getModule($v);\n\n\treturn $result;\n\n}\n\n\n\n\n\nfunction dispatchEventToModules($event_type, &$data )\n\n{\n\n\t$modules = loadModules(\"*\");\n\n\t$result = true;\n\n\tforeach($modules as $module)\n\n\t{\n\n\t\tif( !method_exists($module, $event_type) )\n\n\t\t\tcontinue;\n\n\n\n\t\t$r = call_user_func_array( array($module , $event_type), array(&$data));\n\n\t\tif( $r === false)\n\n\t\t\t$result = false;\n\n\t}\n\n\treturn $result;\n\n}\n\n\n\n\n\n\n\n\n\n$mysqli = null;\n\n\n\nfunction getSQLDB()\n\n{\n\n\tglobal $mysqli;\n\n\tif( $mysqli )\n\n\t\treturn $mysqli;\n\n\n\n\t$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD);\n\n\tif (mysqli_connect_errno())\n\n\t\treturn null;\n\n\n\n\tif( $mysqli->select_db(DB_NAME) == FALSE)\n\n\t\treturn null;\n\n\n\n\treturn $mysqli;\n\n}\n\n\n\nfunction closeSQLDB()\n\n{\n\n\tglobal $mysqli;\n\n\tif( $mysqli ) $mysqli->close();\n\n}\n\n\n\n\n\n$redis = null;\n\nrequire_once 'extra/Predis/Autoloader.php';\n\n\n\nfunction getRedisDB()\n\n{\n\n\tglobal $redis;\n\n\tif ($redis) return $redis;\n\n\n\n\tPredis\\Autoloader::register();\n\n\t$redis = new Predis\\Client();\n\n\treturn $redis;\n\n}\n\n\n\n?>\n'litefilesystem.js/src/server.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n\n\nheader('Content-Type: application/json');\n\n\n\n\n\nif (!file_exists(__DIR__ . \"/include/config.php\"))\n\n\tdie('{\"status\":-10, \"msg\":\"config.php not found, check include/config.sample-php, change it and rename it to include/config.php\"}');\n\nrequire_once 'include/core.php';\n\n\n\n\n\nif( !isset($_REQUEST[\"action\"]) )\n\n{\n\n\tloadModules(\"*\");\n\n\tdie('{\"msg\":\"no action\"}');\n\n}\n\n\n\n\n\n$action = $_REQUEST[\"action\"];\n\n\n\n$pos = strpos($action,\"/\");\n\nif ($pos == false)\n\n\tdie('{\"msg\":\"no module in action\"}' . \"\\n\");\n\n\n\n$module_name = substr($action,0,$pos);\n\n$module_action = substr($action, $pos + 1, strlen($action) - $pos - 1);\n\n\n\n\n\n$module = getModule($module_name);\n\nif($module && method_exists($module,\"processAction\"))\n\n\t$module->processAction($module_action);\n\nelse\n\n\techo('{\"msg\":\"module not found\"}');\n\n\n\necho \"\\n\";\n\ncloseSQLDB();\n\n?>\n'litefilesystem.js/src/include/extra/Predis/Autoloader.php'\n:<?php\n\n\n\nnamespace Predis;\n\n\nclass Autoloader\n{\n    private $directory;\n    private $prefix;\n    private $prefixLength;\n\n\n    public function __construct($baseDirectory = __DIR__)\n    {\n        $this->directory = $baseDirectory;\n        $this->prefix = __NAMESPACE__ . '\\\\';\n        $this->prefixLength = strlen($this->prefix);\n    }\n\n\n    public static function register($prepend = false)\n    {\n        spl_autoload_register(array(new self, 'autoload'), true, $prepend);\n    }\n\n\n    public function autoload($className)\n    {\n        if (0 === strpos($className, $this->prefix)) {\n            $parts = explode('\\\\', substr($className, $this->prefixLength));\n            $filepath = $this->directory.DIRECTORY_SEPARATOR.implode(DIRECTORY_SEPARATOR, $parts).'.php';\n            if (is_file($filepath)) {\n                require($filepath);\n            }\n        }\n    }\n}\n",
        "gt": [
            "'litefilesystem.js/src/include/extra/Predis/Autoloader.php'",
            "'litefilesystem.js/src/include/core.php'",
            "'litefilesystem.js/src/server.php'"
        ]
    },
    {
        "files": [
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/config/config.php'",
            "'shiny_geoip/cli/app.php'",
            "'shiny_geoip/src/bootstrap.php'"
        ],
        "content": "'shiny_geoip/src/bootstrap_cli.php'\n:<?php\n\ndeclare(strict_types=1);\n\n\ninclude __DIR__ . '/bootstrap.php';\n\n\nrequire_once __DIR__ . '/ShinyGeoipCli.php';\nrequire_once __DIR__ . '/Action/Cli/CliAction.php';\nrequire_once __DIR__ . '/Action/Cli/BenchmarkAction.php';\nrequire_once __DIR__ . '/Action/Cli/ShowHelpAction.php';\nrequire_once __DIR__ . '/Action/Cli/UpdateMmdbAction.php';\nrequire_once __DIR__ . '/Responder/CliResponder.php';\n\n'shiny_geoip/config/config.php'\n:<?php\n\ndeclare(strict_types=1);\n\nreturn [\n\n\n    'mmdb_path' => __DIR__ . '/../data/GeoLite2-City.mmdb',\n\n\n    'mmdb_url' => 'http:\n];\n\n'shiny_geoip/cli/app.php'\n:<?php\n\nrequire_once __DIR__ . '/../src/bootstrap_cli.php';\n\n$app = new \\Nekudo\\ShinyGeoip\\ShinyGeoipCli($config);\n$app->dispatch($argv);\n\n'shiny_geoip/src/bootstrap.php'\n:<?php\n\ndeclare(strict_types=1);\n\ndefine('PROJECT_ROOT', __DIR__ . '/../');\n\n$config = include PROJECT_ROOT . 'config/config.php';\n\nrequire_once PROJECT_ROOT . 'src/ShinyGeoip.php';\nrequire_once PROJECT_ROOT . 'src/Action/ShowHomepageAction.php';\nrequire_once PROJECT_ROOT . 'src/Action/ShowLocationAction.php';\nrequire_once PROJECT_ROOT . 'src/Domain/LocationDomain.php';\nrequire_once PROJECT_ROOT . 'src/Responder/HttpResponder.php';\nrequire_once PROJECT_ROOT . 'src/Responder/ShowLocationResponder.php';\nrequire_once PROJECT_ROOT . 'src/Responder/ShowHomepageResponder.php';\n\n\nif (!class_exists('MaxMind\\Db\\Reader')) {\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Decoder.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Util.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Metadata.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/InvalidDatabaseException.php';\n}\n",
        "gt": [
            "'shiny_geoip/config/config.php'",
            "'shiny_geoip/src/bootstrap.php'",
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/cli/app.php'"
        ]
    },
    {
        "files": [
            "'EvilPortalNano/EvilPortal/includes/api/index.php'",
            "'EvilPortalNano/EvilPortal/includes/targeted_skeleton/MyPortal.php'",
            "'EvilPortalNano/EvilPortal/includes/api/API.php'"
        ],
        "content": "'EvilPortalNano/EvilPortal/includes/api/index.php'\n:<?php namespace evilportal;\n\nheader('Content-Type: application/json');\n\nrequire_once(\"API.php\");\n$api = new API();\necho $api->go();\n\n'EvilPortalNano/EvilPortal/includes/targeted_skeleton/MyPortal.php'\n:<?php namespace evilportal;\n\nclass MyPortal extends Portal\n{\n\n    public function handleAuthorization()\n    {\n\n\n\n        parent::handleAuthorization();\n    }\n\n\n    public function onSuccess()\n    {\n\n        parent::onSuccess();\n    }\n\n\n    public function showError()\n    {\n\n        parent::showError();\n    }\n}\n\n'EvilPortalNano/EvilPortal/includes/api/API.php'\n:<?php namespace evilportal;\n\nclass API\n{\n    private $request;\n    private $error;\n\n    public function __construct()\n    {\n        $this->request = (object)$_POST;\n    }\n\n    public function route()\n    {\n        $portalPath = \"/www/MyPortal.php\";\n        $portalClass = \"evilportal\\\\MyPortal\";\n\n        if (!file_exists($portalPath)) {\n            $this->error = \"MyPortal.php does not exist in {$portalPath}\";\n            return;\n        }\n\n        require_once(\"Portal.php\");\n        require_once($portalPath);\n\n        if (!class_exists($portalClass)) {\n            $this->error = \"The class {$portalClass} does not exist in {$portalPath}\";\n            return;\n        }\n\n        $portal = new $portalClass($this->request);\n        $portal->handleAuthorization();\n        $this->response = $portal->getResponse();\n    }\n\n    public function finalize()\n    {\n        if ($this->error) {\n            return json_encode(array(\"error\" => $this->error));\n        } elseif ($this->response) {\n            return json_encode($this->response);\n        }\n    }\n\n    public function go()\n    {\n        $this->route();\n    }\n}\n",
        "gt": [
            "'EvilPortalNano/EvilPortal/includes/targeted_skeleton/MyPortal.php'",
            "'EvilPortalNano/EvilPortal/includes/api/API.php'",
            "'EvilPortalNano/EvilPortal/includes/api/index.php'"
        ]
    },
    {
        "files": [
            "'es-wp-query/es-wp-query.php'",
            "'es-wp-query/tests/bootstrap.php'",
            "'es-wp-query/class-es-wp-query-shoehorn.php'"
        ],
        "content": "'es-wp-query/es-wp-query.php'\n:<?php\n\n\n\n\ndefine( 'ES_WP_QUERY_PATH', dirname( __FILE__ ) );\n\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-query-wrapper.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-tax-query.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-date-query.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-meta-query.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-query-shoehorn.php';\nrequire_once ES_WP_QUERY_PATH . '/functions.php';\n\n'es-wp-query/tests/bootstrap.php'\n:<?php\n\ndefine( 'ES_WP_QUERY_TEST_ENV', true );\n\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\nif ( ! $_tests_dir ) {\n\t$_tests_dir = '/tmp/wordpress-tests-lib';\n}\n\n$_es_version = getenv( 'ES_VERSION' );\nif ( ! defined( 'ES_VERSION' ) && $_es_version ) {\n\tdefine( 'ES_VERSION', $_es_version );\n}\n\nrequire_once $_tests_dir . '/includes/functions.php';\n\nfunction _manually_load_plugin() {\n\trequire dirname( __FILE__ ) . '/../es-wp-query.php';\n\n\tif ( file_exists( dirname( __FILE__ ) . '/es.php' ) ) {\n\t\trequire_once( dirname( __FILE__ ) . '/es.php' );\n\t} elseif ( getenv( 'TRAVIS' ) ) {\n\t\tes_wp_query_load_adapter( 'travis' );\n\t} else {\n\t\techo \"\\n\\nSetup Required\\n\"\n\t\t\t. \"===========================================================\\n\"\n\t\t\t. \"You must add an adapter to the plugin for this to work.\\n\"\n\t\t\t. \"You can add it to the plugin in es-wp-query/tests/es.php\\n\"\n\t\t\t. \"or elsewhere in your code using es_wp_query_load_adapter().\\n\"\n\t\t\t. \"See the readme for more details.\\n\\n\";\n\t\texit( 1 );\n\t}\n\n\tif ( ! es_wp_query_verify_es_is_running() ) {\n\t\techo \"\\n\\nFatal: bootstrap check failed!\\n\";\n\t\texit( 1 );\n\t}\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\n\n\nfunction _es_wp_query_set_es_to_true( \\WP_Query $query ) {\n\t$query->set( 'es', true );\n}\n\nrequire $_tests_dir . '/includes/bootstrap.php';\n\n'es-wp-query/class-es-wp-query-shoehorn.php'\n:<?php\n\n\n\n\n\nfunction es_wp_query_arg( $vars ) {\n\t$vars[] = 'es';\n\treturn $vars;\n}\nadd_filter( 'query_vars', 'es_wp_query_arg' );\n\n\n\nfunction es_wp_query_shoehorn( &$query ) {\n\n\tif ( $query instanceof ES_WP_Query ) {\n\t\treturn;\n\t}\n\n\tif ( ! empty( $query->get( 'es' ) ) ) {\n\n\t\t$conditionals = array(\n\t\t\t'is_single'            => false,\n\t\t\t'is_preview'           => false,\n\t\t\t'is_page'              => false,\n\t\t\t'is_archive'           => false,\n\t\t\t'is_date'              => false,\n\t\t\t'is_year'              => false,\n\t\t\t'is_month'             => false,\n\t\t\t'is_day'               => false,\n\t\t\t'is_time'              => false,\n\t\t\t'is_author'            => false,\n\t\t\t'is_category'          => false,\n\t\t\t'is_tag'               => false,\n\t\t\t'is_tax'               => false,\n\t\t\t'is_search'            => false,\n\t\t\t'is_feed'              => false,\n\t\t\t'is_comment_feed'      => false,\n\t\t\t'is_trackback'         => false,\n\t\t\t'is_home'              => false,\n\t\t\t'is_404'               => false,\n\t\t\t'is_comments_popup'    => false,\n\t\t\t'is_paged'             => false,\n\t\t\t'is_admin'             => false,\n\t\t\t'is_attachment'        => false,\n\t\t\t'is_singular'          => false,\n\t\t\t'is_robots'            => false,\n\t\t\t'is_posts_page'        => false,\n\t\t\t'is_post_type_archive' => false,\n\t\t);\n\t\tforeach ( $conditionals as $key => $value ) {\n\t\t\t$conditionals[ $key ] = $query->$key;\n\t\t}\n\n\n\t\t$query_args = $query->query;\n\n\n\t\t$es_query_args           = $query->query;\n\t\t$es_query_args['fields'] = 'ids';\n\t\t$es_query_args['es_is_main_query'] = $query->is_main_query();\n\t\t$es_query                = new ES_WP_Query( $es_query_args );\n\n\n\t\t$query->parse_query(\n\t\t\tarray(\n\t\t\t\t'post_type'      => $query->get( 'post_type' ),\n\t\t\t\t'post_status'    => $query->get( 'post_status' ),\n\t\t\t\t'post__in'       => $es_query->posts,\n\t\t\t\t'posts_per_page' => $es_query->post_count,\n\t\t\t\t'fields'         => $query->get( 'fields' ),\n\t\t\t\t'orderby'        => 'post__in',\n\t\t\t\t'order'          => 'ASC',\n\t\t\t)\n\t\t);\n\n\n\t\tforeach ( $conditionals as $key => $value ) {\n\t\t\t$query->$key = $value;\n\t\t}\n\n\t\tnew ES_WP_Query_Shoehorn( $query, $es_query, $query_args );\n\t}\n}\nadd_action( 'pre_get_posts', 'es_wp_query_shoehorn', 1000 );\n\n\n\nclass ES_WP_Query_Shoehorn {\n\n\n\tprivate $hash;\n\n\n\tprivate $do_found_posts = true;\n\n\n\tprivate $post_count;\n\n\n\tprivate $found_posts;\n\n\n\tprivate $original_query_args;\n\n\n\tprivate $posts_per_page;\n\n\n\tpublic function __construct( &$query, &$es_query, $query_args ) {\n\t\t$this->hash           = spl_object_hash( $query );\n\t\t$this->posts_per_page = $es_query->get( 'posts_per_page' );\n\n\t\tif ( $query->get( 'no_found_rows' ) || -1 === intval( $query->get( 'posts_per_page' ) ) || true === $query->get( 'nopaging' ) ) {\n\t\t\t$this->do_found_posts = false;\n\t\t} else {\n\t\t\t$this->do_found_posts = true;\n\t\t\t$this->found_posts    = $es_query->found_posts;\n\t\t}\n\t\t$this->post_count          = $es_query->post_count;\n\t\t$this->original_query_args = $query_args;\n\t\t$this->add_query_hooks();\n\t}\n\n\n\tpublic function add_query_hooks() {\n\t\tif ( $this->post_count ) {\n\n\t\t\tadd_filter( 'found_posts_query', array( $this, 'filter__found_posts_query' ), 1000, 2 );\n\n\t\t\tadd_filter( 'found_posts', array( $this, 'filter__found_posts' ), 1000, 2 );\n\t\t}\n\n\t\tadd_filter( 'posts_request', array( $this, 'filter__posts_request' ), 1000, 2 );\n\t}\n\n\n\tpublic function filter__found_posts_query( $sql, $query ) {\n\t\tif ( spl_object_hash( $query ) === $this->hash ) {\n\t\t\tremove_filter( 'found_posts_query', array( $this, 'filter__found_posts_query' ), 1000, 2 );\n\t\t\tif ( $this->do_found_posts ) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t}\n\t\treturn $sql;\n\t}\n\n\n\tpublic function filter__found_posts( $found_posts, $query ) {\n\t\tif ( spl_object_hash( $query ) === $this->hash ) {\n\t\t\tremove_filter( 'found_posts', array( $this, 'filter__found_posts' ), 1000, 2 );\n\t\t\tif ( $this->do_found_posts ) {\n\t\t\t\treturn $this->found_posts;\n\t\t\t}\n\t\t}\n\t\treturn $found_posts;\n\t}\n\n\n\tpublic function filter__posts_request( $sql, $query ) {\n\t\tif ( spl_object_hash( $query ) === $this->hash ) {\n\t\t\tremove_filter( 'posts_request', array( $this, 'filter__posts_request' ), 1000, 2 );\n\t\t\t$this->reboot_query_vars( $query );\n\n\t\t\tif ( ! $this->post_count ) {\n\t\t\t\tglobal $wpdb;\n\t\t\t\treturn \"SELECT * FROM {$wpdb->posts} WHERE 1=0 \";\n\t\t\t} elseif ( ! empty( $sql ) ) {\n\t\t\t\treturn $sql . ' ';\n\t\t\t}\n\t\t}\n\t\treturn $sql;\n\t}\n\n\n\tprivate function reboot_query_vars( &$query ) {\n\t\t$q =& $query->query_vars;\n\n\n\t\t$current_query_vars = $q;\n\t\tunset(\n\t\t\t$current_query_vars['post_type'],\n\t\t\t$current_query_vars['post_status'],\n\t\t\t$current_query_vars['post__in'],\n\t\t\t$current_query_vars['posts_per_page'],\n\t\t\t$current_query_vars['fields'],\n\t\t\t$current_query_vars['orderby'],\n\t\t\t$current_query_vars['order']\n\t\t);\n\n\t\t$query->query = $this->original_query_args;\n\t\t$q            = $query->query;\n\t\t$query->parse_query();\n\t\t$q = array_merge( $current_query_vars, $q );\n\n\n\t\tif ( empty( $q['posts_per_page'] ) ) {\n\t\t\t$q['posts_per_page'] = $this->posts_per_page;\n\t\t}\n\n\n\t\tif ( 'sitemap.xml' === $q['pagename'] ) {\n\t\t\t$q['pagename'] = sanitize_title_for_query( wp_basename( $q['pagename'] ) );\n\t\t}\n\n\n\n\t\tif ( $query->is_author() && ! empty( $q['author_name'] ) ) {\n\t\t\tif ( false !== strpos( $q['author_name'], '/' ) ) {\n\t\t\t\t$q['author_name'] = explode( '/', $q['author_name'] );\n\t\t\t\tif ( $q['author_name'][ count( $q['author_name'] ) - 1 ] ) {\n\t\t\t\t\t$q['author_name'] = $q['author_name'][ count( $q['author_name'] ) - 1 ];\n\t\t\t\t} else {\n\t\t\t\t\t$q['author_name'] = $q['author_name'][ count( $q['author_name'] ) - 2 ];\n\t\t\t\t}\n\t\t\t}\n\t\t\t$author = get_user_by( 'slug', sanitize_title_for_query( $q['author_name'] ) );\n\n\t\t\tif ( isset( $author->ID ) ) {\n\t\t\t\t$q['author'] = $author->ID;\n\t\t\t}\n\t\t}\n\t}\n}\n",
        "gt": [
            "'es-wp-query/class-es-wp-query-shoehorn.php'",
            "'es-wp-query/es-wp-query.php'",
            "'es-wp-query/tests/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'laravel-seo/public/index.php'",
            "'laravel-seo/bootstrap/start.php'",
            "'laravel-seo/server.php'",
            "'laravel-seo/bootstrap/paths.php'"
        ],
        "content": "'laravel-seo/public/index.php'\n:<?php\n\n\n\n\nrequire __DIR__.'/../bootstrap/autoload.php';\n\n\n\n$app = require_once __DIR__.'/../bootstrap/start.php';\n\n\n\n$app->run();\n'laravel-seo/bootstrap/start.php'\n:<?php\n\n\n\n$app = new Illuminate\\Foundation\\Application;\n\n\n\n$env = $app->detectEnvironment(array(\n\n\t'local' => array('Maxoffsky-PC'),\n\n));\n\n\n\n$app->bindInstallPaths(require __DIR__.'/paths.php');\n\n\n\n$framework = $app['path.base'].'/vendor/laravel/framework/src';\n\nrequire $framework.'/Illuminate/Foundation/start.php';\n\n\n\nreturn $app;\n\n'laravel-seo/server.php'\n:<?php\n\n$uri = parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH);\n\n$uri = urldecode($uri);\n\n$paths = require __DIR__.'/bootstrap/paths.php';\n\n$requested = $paths['public'].$uri;\n\n\n\n\nif ($uri !== '/' and file_exists($requested))\n{\n\treturn false;\n}\n\nrequire_once $paths['public'].'/index.php';\n\n'laravel-seo/bootstrap/paths.php'\n:<?php\n\nreturn array(\n\n\n\n\t'app' => __DIR__.'/../app',\n\n\n\n\t'public' => __DIR__.'/../public',\n\n\n\n\t'base' => __DIR__.'/..',\n\n\n\n\t'storage' => __DIR__.'/../app/storage',\n\n);\n",
        "gt": [
            "'laravel-seo/bootstrap/paths.php'",
            "'laravel-seo/bootstrap/start.php'",
            "'laravel-seo/public/index.php'",
            "'laravel-seo/server.php'"
        ]
    },
    {
        "files": [
            "'es-wp-query/tests/bootstrap.php'",
            "'es-wp-query/functions.php'",
            "'es-wp-query/es-wp-query.php'"
        ],
        "content": "'es-wp-query/tests/bootstrap.php'\n:<?php\n\ndefine( 'ES_WP_QUERY_TEST_ENV', true );\n\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\nif ( ! $_tests_dir ) {\n\t$_tests_dir = '/tmp/wordpress-tests-lib';\n}\n\n$_es_version = getenv( 'ES_VERSION' );\nif ( ! defined( 'ES_VERSION' ) && $_es_version ) {\n\tdefine( 'ES_VERSION', $_es_version );\n}\n\nrequire_once $_tests_dir . '/includes/functions.php';\n\nfunction _manually_load_plugin() {\n\trequire dirname( __FILE__ ) . '/../es-wp-query.php';\n\n\tif ( file_exists( dirname( __FILE__ ) . '/es.php' ) ) {\n\t\trequire_once( dirname( __FILE__ ) . '/es.php' );\n\t} elseif ( getenv( 'TRAVIS' ) ) {\n\t\tes_wp_query_load_adapter( 'travis' );\n\t} else {\n\t\techo \"\\n\\nSetup Required\\n\"\n\t\t\t. \"===========================================================\\n\"\n\t\t\t. \"You must add an adapter to the plugin for this to work.\\n\"\n\t\t\t. \"You can add it to the plugin in es-wp-query/tests/es.php\\n\"\n\t\t\t. \"or elsewhere in your code using es_wp_query_load_adapter().\\n\"\n\t\t\t. \"See the readme for more details.\\n\\n\";\n\t\texit( 1 );\n\t}\n\n\tif ( ! es_wp_query_verify_es_is_running() ) {\n\t\techo \"\\n\\nFatal: bootstrap check failed!\\n\";\n\t\texit( 1 );\n\t}\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\n\n\nfunction _es_wp_query_set_es_to_true( \\WP_Query $query ) {\n\t$query->set( 'es', true );\n}\n\nrequire $_tests_dir . '/includes/bootstrap.php';\n\n'es-wp-query/functions.php'\n:<?php\n\n\n\n\nif ( ! function_exists( 'es_get_posts' ) ) {\n\n\n\tfunction es_get_posts( $args = null ) {\n\t\t$defaults = array(\n\t\t\t'numberposts'      => 5,\n\t\t\t'offset'           => 0,\n\t\t\t'category'         => 0,\n\t\t\t'orderby'          => 'date',\n\t\t\t'order'            => 'DESC',\n\t\t\t'include'          => array(),\n\t\t\t'exclude'          => array(),\n\t\t\t'meta_key'         => '',\n\t\t\t'meta_value'       => '',\n\t\t\t'post_type'        => 'post',\n\t\t\t'suppress_filters' => true,\n\t\t);\n\n\t\t$r = wp_parse_args( $args, $defaults );\n\t\tif ( empty( $r['post_status'] ) ) {\n\t\t\t$r['post_status'] = ( 'attachment' === $r['post_type'] ) ? 'inherit' : 'publish';\n\t\t}\n\t\tif ( ! empty( $r['numberposts'] ) && empty( $r['posts_per_page'] ) ) {\n\t\t\t$r['posts_per_page'] = $r['numberposts'];\n\t\t}\n\t\tif ( ! empty( $r['category'] ) ) {\n\t\t\t$r['cat'] = $r['category'];\n\t\t}\n\t\tif ( ! empty( $r['include'] ) ) {\n\t\t\t$incposts            = wp_parse_id_list( $r['include'] );\n\t\t\t$r['posts_per_page'] = count( $incposts );\n\t\t\t$r['post__in']       = $incposts;\n\t\t} elseif ( ! empty( $r['exclude'] ) ) {\n\t\t\t$r['post__not_in'] = wp_parse_id_list( $r['exclude'] );\n\t\t}\n\n\t\t$r['ignore_sticky_posts'] = true;\n\t\t$r['no_found_rows']       = true;\n\n\t\t$get_posts = new ES_WP_Query();\n\t\treturn $get_posts->query( $r );\n\n\t}\n}\n\n\n\nfunction es_wp_query_load_adapter( $adapter ) {\n\tif ( in_array( $adapter, array( 'searchpress', 'travis', 'jetpack-search', 'vip-search' ), true ) ) {\n\t\trequire_once ES_WP_QUERY_PATH . \"/adapters/{$adapter}.php\";\n\t}\n}\n\n'es-wp-query/es-wp-query.php'\n:<?php\n\n\n\n\ndefine( 'ES_WP_QUERY_PATH', dirname( __FILE__ ) );\n\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-query-wrapper.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-tax-query.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-date-query.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-meta-query.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-query-shoehorn.php';\nrequire_once ES_WP_QUERY_PATH . '/functions.php';\n",
        "gt": [
            "'es-wp-query/functions.php'",
            "'es-wp-query/es-wp-query.php'",
            "'es-wp-query/tests/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/class/db.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/class/db.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once dirname(__DIR__).'/config.php';\n$conn = null;\n\nfunction getConn() {\n    global $conn, $config;\n    if($conn) {\n        return $conn;\n    } else {\n        $connectionString = \"sqlite:{$config['db_file']}\";\n        try {\n            $conn = new PDO($connectionString, NULL, NULL, [\n                PDO::ATTR_TIMEOUT=>60,\n                PDO::ATTR_PERSISTENT=>false,\n                PDO::ATTR_ERRMODE=>PDO::ERRMODE_EXCEPTION,\n                PDO::ATTR_EMULATE_PREPARES=>false,\n                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC\n            ]);\n            $conn->exec('PRAGMA journal_mode = WAL;PRAGMA synchronous = OFF;PRAGMA temp_store = MEMORY;PRAGMA foreign_keys = OFF;PRAGMA mmap_size = 268435456;PRAGMA cache_size = -32000;PRAGMA journal_size_limit = 10000000;');\n            return $conn;\n        } catch(PDOException $e) {\n            if($config['errorlog_enable']) {\n                file_put_contents(dirname(__DIR__).\"/__UNAM_LIB/Logs/db-error-\".date('d-m-Y').\".log\", \"ERROR: {$e->getMessage()}\\r\\n\", FILE_APPEND);\n            }\n        }\n    }\n    return false;\n}\n\nfunction closeConn() {\n    global $conn;\n    $conn = null;\n}\n'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}\n'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/assets/php/styles.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'security.php';\n?><meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<meta name=\"robots\" content=\"noindex, nofollow\">\n\n<link rel=\"icon\" type=\"image/png\" href=\"../assets/img/favicon.png\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/fontawesome.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/solid.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/izitoast/iziToast.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/select2/select2.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/jquery-confirm/jquery-confirm.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/datatables/datatables.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/adminlte.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/custom.css\">",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/class/db.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}\n'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once(dirname(__DIR__) . '/assets/php/session-header.php');\n\nswitch(getParam('action')){\n    case 'lang-change':\n        $base->unam_checkCondition(!in_array(getParam('newlangID'), array_keys($config['languages'])), 'Language ID invalid.');\n        $_SESSION['lang'] = getParam('newlangID');\n        $base->unam_echoSuccess();\n        break;\n}\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/lang/lang.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'security.php';\n?><meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<meta name=\"robots\" content=\"noindex, nofollow\">\n\n<link rel=\"icon\" type=\"image/png\" href=\"../assets/img/favicon.png\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/fontawesome.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/solid.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/izitoast/iziToast.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/select2/select2.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/jquery-confirm/jquery-confirm.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/datatables/datatables.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/adminlte.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/custom.css\">\n'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/lang/lang.php'\n:\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/lang/lang.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/devdocs.php'\n:<?php\n\nini_set('display_errors', 0);\nini_set('memory_limit', '-1');\n\nuse CFPropertyList\\CFPropertyList;\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocs {\n  private static $cacheDirectory = 'cache/';\n\n  private $workflows;\n  private $results;\n  private $baseUrl;\n  private $cacheLife;\n  private $template;\n\n  public function __construct($query, $doc) {\n    $this->baseUrl = getenv('BASE_URL') ?: 'https:\n    $this->cacheLife = (int)(getenv('CACHE_LIFE') ?: '7');\n    $this->template = getenv('TEMPLATE') ?: '$baseUrl$documentation/$path';\n    $this->workflows = new Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n    $this->results = [\n      0 => [],\n      1 => [],\n      2 => []\n    ];\n\n    $documentations = $this->getDocumentations();\n    if (!isset($doc) || empty($doc)) {\n      $rootPath = str_replace('/scripts', '', $this->workflows->path());\n      $pList = (new CFPropertyList($rootPath . '/info.plist'))->toArray();\n      foreach ($pList['connections'] as $key => $value) {\n        if (array_key_exists($key, $documentations)) {\n          $this->checkCache($key);\n          $this->processDocumentation($key, $query);\n        }\n      }\n    } else {\n      $this->checkCache($doc);\n      $this->processDocumentation($doc, $query);\n    }\n    $this->render();\n  }\n\n  private function getDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      $docContent = $this->workflows->fetch($this->baseUrl . 'docs/docs.json');\n      file_put_contents($docFile, $docContent);\n    } else {\n      $docContent = file_get_contents($docFile);\n    }\n    $docs = json_decode($docContent);\n    $documentations = [];\n    foreach ($docs as $doc) {\n      $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n      $documentations[$doc->slug] = $doc;\n    }\n    return $documentations;\n  }\n\n  private function checkCache($documentation) {\n    if (!file_exists(self::$cacheDirectory)) {\n      mkdir(self::$cacheDirectory);\n    }\n    $docFile = self::$cacheDirectory . $documentation . '.json';\n    error_log(\"Checking existence of cache at $docFile\");\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      error_log(\"Download doc for $documentation at \\\"\" . $this->baseUrl . 'docs/' . $documentation . '/index.json') . \"\\\"\";\n      file_put_contents($docFile, file_get_contents($this->baseUrl . 'docs/' . $documentation . '/index.json'));\n    }\n  }\n\n  private function processDocumentation($documentation, $query) {\n\n    $query = strtolower($query);\n    $data = json_decode(file_get_contents(self::$cacheDirectory . $documentation . '.json'));\n    if ($data === null) {\n      unlink(self::$cacheDirectory . $documentation . '.json');\n    }\n\n    $entries = $data->entries;\n\n    $found = [];\n    foreach ($entries as $key => $result) {\n      $value = strtolower(trim($result->name));\n      $description = strtolower(utf8_decode(strip_tags($result->type)));\n\n      if (empty($query)) {\n        $found[$value] = true;\n        $result->documentation = $documentation;\n        $this->results[0][] = $result;\n      } else if (strpos($value, $query) === 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[0][] = $result;\n        }\n      } else if (strpos($value, $query) > 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[1][] = $result;\n        }\n      } else if (strpos($description, $query) !== false) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[2][] = $result;\n        }\n      }\n    }\n\n    if ((count($this->results[0]) === 0) && (count($this->results[1]) === 0) && (count($this->results[2]) === 0)) {\n      $this->results[0][] = (object) [\n        'name' => 'No results.',\n        'documentation' => $documentation\n      ];\n    }\n\n  }\n\n  private function render() {\n    foreach ($this->results as $level => $results) {\n      foreach ($results as $result) {\n        $title = empty($result->type) ? $result->name : \"$result->name ($result->type)\";\n        $vars = array(\n          '$baseUrl' => $this->baseUrl,\n          '$documentation' => $result->documentation,\n          '$docalt' => str_replace(\"~\", \"-\", $result->documentation),\n          '$name' => $result->name,\n          '$path' => $result->path\n        );\n\n        $url = strtr($this->template, $vars);\n        $this->workflows->result($result->name, $url, $title, $result->path, $result->documentation . '.png', 'yes', $result->name);\n      }\n    }\n    echo $this->workflows->toxml();\n  }\n}\n\n$query = isset($query) ? $query : '';\n$documentation = isset($documentation) ? $documentation : '';\nnew DevDocs($query, $documentation);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-actions.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}\n'UnamWebPanel/UnamWebPanel/api/ajax-actions.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once dirname(__DIR__).'/assets/php/security.php';\n\nfunction checkJSON($input) {\n    json_decode($input, true);\n    if(json_last_error() != JSON_ERROR_NONE) {\n        return false;\n    }\n    return true;\n}\n\nif(!empty(getParam('action'))) {\n    switch (getParam('action')) {\n        case 'config-add':\n            $base->unam_checkCondition(!checkJSON($_POST['data']), \"{$larr['invalid']} JSON.\");\n            $base->unam_dbInsert(getConn(), 'configs', ['cf_name'=>getParam('name'), 'cf_data'=>$_POST['data']]);\n            $base->unam_echoSuccess($larr['status_added']);\n            break;\n        case 'config-update':\n            $base->unam_checkCondition(!checkJSON($_POST['data']), \"{$larr['invalid']} JSON.\");\n            $base->unam_dbUpdate(getConn(), 'configs', ['cf_data'=>$_POST['data']], ['cf_configID'=>getParam('index')]);\n            $base->unam_echoSuccess($larr['status_updated']);\n            break;\n        case 'config-remove':\n            $base->unam_checkCondition(getParam('index') <= 2, $larr['cannot_remove_default_configuration']);\n            $base->unam_dbDelete(getConn(), 'configs', ['cf_configID'=>getParam('index')]);\n            $base->unam_echoSuccess($larr['status_removed']);\n            break;\n        case 'miner-config':\n            $base->unam_dbUpdate(getConn(), 'miners', ['ms_config'=>getParam('config')], ['ms_minerID'=>getParam('index')]);\n            $base->unam_echoSuccess($larr['status_updated']);\n            break;\n        case 'miner-remove':\n            getConn()->exec('PRAGMA foreign_keys = ON;');\n            $base->unam_dbDelete(getConn(), 'miners', ['ms_minerID'=>getParam('index')]);\n            getConn()->exec('PRAGMA wal_checkpoint(TRUNCATE);VACUUM;PRAGMA OPTIMIZE;PRAGMA foreign_keys = OFF;');\n            $base->unam_echoSuccess($larr['status_removed']);\n            break;\n        case 'miner-clean':\n            $base->unam_checkCondition(!preg_match(\"/^\\d+$/\", getParam('amount')) || getParam('amount') < 1, \"{$larr['invalid_input']}.\");\n            getConn()->exec('PRAGMA foreign_keys = ON;');\n            $minerclean = getConn()->prepare('DELETE FROM miners WHERE ms_lastConnection < ?;');\n            $minerclean->execute([date('Y-m-d H:i:s', strtotime('-'.getParam('amount').' day'))]);\n            getConn()->exec('PRAGMA wal_checkpoint(TRUNCATE);VACUUM;PRAGMA OPTIMIZE;PRAGMA foreign_keys = OFF;');\n            $base->unam_echoSuccess(\"{$larr['success']}!\");\n            break;\n        case 'miner-offline':\n            $_SESSION['hide_offline_miners'] = !($_SESSION['hide_offline_miners'] ?? false);\n            $base->unam_echoSuccess(\"{$larr['success']}!\");\n            break;\n        case 'miner-history':\n            $base->unam_checkCondition(!getParam('index'), \"{$larr['invalid']} ID.\");\n            $hashratecon = getConn()->prepare(\"SELECT hr_algorithm, SUM(hr_hashrate) AS hashrate, hr_date FROM hashrate WHERE hr_minerID = ? GROUP BY hr_date, hr_algorithm ORDER BY hr_date\");\n            $hashratecon->execute([getParam('index')]);\n            $hashrate = $hashratecon->fetchAll(PDO::FETCH_ASSOC);\n\n            if (!empty($hashrate)) {\n                $hashratearr = [];\n                foreach ($hashrate as $value) {\n                    $hashratearr[] = ['x' => date('Y-m-d H:i:s', $value['hr_date']), 'y' => $base->unam_sanitize($value['hashrate'])];\n                }\n                $base->unam_echoSuccess(\"<canvas class='hook-chart' data-chart-type='hashrate' data-chart-config='\".json_encode(['type'=>'bar', 'data'=>['datasets'=>[['label'=>$hashrate[0]['hr_algorithm'], 'data'=>$hashratearr, 'fill'=>true]]], 'options'=>['responsive'=>true, 'scales'=>['x'=>['type'=>'time', 'max'=>date('Y-m-d H:i:00'), 'min'=>$hashratearr[0]['x'], 'time'=>['minUnit'=>'minute']], 'y'=>['min'=>0]]]]).\"'></canvas>\");\n            } else {\n                $base->unam_echoFailure($larr['no_hashrate_for_miner']);\n            }\n            break;\n        case 'ipblock-add':\n            $ip = getParam('ip') ?: getParam('index');\n            $base->unam_checkCondition(!filter_var($ip, FILTER_VALIDATE_IP), \"{$larr['invalid']} IP.\");\n            $base->unam_checkCondition(!empty($base->unam_dbSelect(getConn(), 'ipblocking', '*', ['ipb_ip'=>$ip])), $larr['ip_already_blocked']);\n            $base->unam_dbInsert(getConn(), 'ipblocking', ['ipb_ip'=>$ip, 'ipb_note'=>getParam('note'), 'ipb_datetime'=>$currentDate]);\n            $base->unam_echoSuccess($larr['status_added']);\n            break;\n        case 'ipblock-remove':\n            $base->unam_checkCondition(!getParam('index'), \"{$larr['invalid']} ID.\");\n            $base->unam_dbDelete(getConn(), 'ipblocking', ['ipb_blockID'=>getParam('index')]);\n            $base->unam_echoSuccess($larr['status_removed']);\n            break;\n    }\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-actions.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/config.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n\n$config['password'] = 'UnamSanctam';\n\n\n$config['db_file'] = __DIR__.\"/db/unamwebpanel.db\";\n\n\n$config['hashrate_history'] = true;\n\n\n$config['hashrate_history_limit'] = 1440;\n\n\n$config['failedlogin_blocktime'] = 15;\n$config['failedlogin_blocktries'] = 5;\n\n\n$config['errorlog_enable'] = true;\n\n$config['languages'] = [\n    'en'=>'English',\n    'sv'=>'Swedish',\n    'fr'=>'French',\n    'de'=>'German',\n    'pl'=>'Polish',\n    'ru'=>'Russian',\n    'uk'=>'Ukrainian',\n    'es'=>'Spanish'\n];\n\n$config['unam_version'] = \"1.8.0\";\n\nglobal $config;",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/config.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ]
    },
    {
        "files": [
            "'software-license-manager/software-license-manager/slm_bootstrap.php'",
            "'software-license-manager/software-license-manager/includes/slm-utility.php'",
            "'software-license-manager/software-license-manager/slm_plugin_core.php'"
        ],
        "content": "'software-license-manager/software-license-manager/slm_bootstrap.php'\n:<?php\n\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\n\ndefine( 'WP_LICENSE_MANAGER_VERSION', '4.5.7' );\ndefine( 'WP_LICENSE_MANAGER_DB_VERSION', '1.6' );\ndefine( 'WP_LICENSE_MANAGER_FOLDER', dirname( plugin_basename( __FILE__ ) ) );\ndefine( 'WP_LICENSE_MANAGER_URL', plugins_url( '', __FILE__ ) );\ndefine( 'WP_LICENSE_MANAGER_PATH', plugin_dir_path( __FILE__ ) );\ndefine( 'SLM_SITE_HOME_URL', home_url() );\ndefine( 'SLM_WP_SITE_URL', site_url() );\n\nrequire_once 'slm_plugin_core.php';\n\n\nfunction slm_activate_handler() {\n\n\tslm_db_install();\n\n\n\twp_schedule_event( time(), 'daily', 'slm_daily_cron_event' );\n\n\tdo_action( 'slm_activation_complete' );\n}\nregister_activation_hook( __FILE__, 'slm_activate_handler' );\n\n\nfunction slm_deactivate_handler() {\n\n\twp_clear_scheduled_hook( 'slm_daily_cron_event' );\n\n\tdo_action( 'slm_deactivation_complete' );\n}\nregister_deactivation_hook( __FILE__, 'slm_deactivate_handler' );\n\n\nfunction slm_db_install() {\n\n\trequire_once dirname( __FILE__ ) . '/slm_installer.php';\n}\n\n'software-license-manager/software-license-manager/includes/slm-utility.php'\n:<?php\n\n\nclass SLM_Utility {\n\n\tstatic function do_auto_key_expiry() {\n\t\tglobal $wpdb;\n\t\t$current_date = ( date( 'Y-m-d' ) );\n\t\t$tbl_name     = SLM_TBL_LICENSE_KEYS;\n\n\t\t$sql_prep = $wpdb->prepare( \"SELECT * FROM $tbl_name WHERE lic_status !=%s\", 'expired' );\n\t\t$licenses = $wpdb->get_results( $sql_prep, OBJECT );\n\t\tif ( ! $licenses ) {\n\t\t\tSLM_Debug_Logger::log_debug_st( 'do_auto_key_expiry() - no license keys found.' );\n\t\t\treturn false;\n\t\t}\n\n\t\tforeach ( $licenses as $license ) {\n\t\t\t$key         = $license->license_key;\n\t\t\t$expiry_date = $license->date_expiry;\n\t\t\tif ( $expiry_date == '0000-00-00' ) {\n\t\t\t\tSLM_Debug_Logger::log_debug_st( 'This key (' . $key . \") doesn't have a valid expiry date set. The expiry of this key will not be checked.\" );\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t$today_dt  = new DateTime( $current_date );\n\t\t\t$expire_dt = new DateTime( $expiry_date );\n\t\t\tif ( $today_dt > $expire_dt ) {\n\n\t\t\t\tSLM_Debug_Logger::log_debug_st( 'This key (' . $key . ') has expired. Expiry date: ' . $expiry_date . '. Setting license key status to expired.' );\n\t\t\t\t$data    = array( 'lic_status' => 'expired' );\n\t\t\t\t$where   = array( 'id' => $license->id );\n\t\t\t\t$updated = $wpdb->update( $tbl_name, $data, $where );\n\t\t\t\tdo_action( 'slm_license_key_expired', $license->id );\n\t\t\t}\n\t\t}\n\t}\n\n\n\tstatic function delete_license_key_by_row_id( $key_row_id ) {\n\t\tglobal $wpdb;\n\t\t$license_table = SLM_TBL_LICENSE_KEYS;\n\n\n\t\tSLM_Utility::delete_registered_domains_of_key( $key_row_id );\n\n\n\t\t$wpdb->delete( $license_table, array( 'id' => $key_row_id ) );\n\n\t}\n\n\n\tstatic function delete_registered_domains_of_key( $key_row_id ) {\n\t\tglobal $slm_debug_logger;\n\t\tglobal $wpdb;\n\t\t$reg_table   = SLM_TBL_LIC_DOMAIN;\n\t\t$sql_prep    = $wpdb->prepare( \"SELECT * FROM $reg_table WHERE lic_key_id = %s\", $key_row_id );\n\t\t$reg_domains = $wpdb->get_results( $sql_prep, OBJECT );\n\t\tforeach ( $reg_domains as $domain ) {\n\t\t\t$row_to_delete = $domain->id;\n\t\t\t$wpdb->delete( $reg_table, array( 'id' => $row_to_delete ) );\n\n\t\t}\n\t}\n\n\n\n\tstatic function get_ip_address( $ignore_private_and_reserved = false ) {\n\t\t$flags = $ignore_private_and_reserved ? ( FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE ) : 0;\n\t\tforeach ( array( 'HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_X_FORWARDED', 'HTTP_X_CLUSTER_CLIENT_IP', 'HTTP_FORWARDED_FOR', 'HTTP_FORWARDED', 'REMOTE_ADDR' ) as $key ) {\n\t\t\tif ( array_key_exists( $key, $_SERVER ) === true ) {\n\t\t\t\tforeach ( explode( ',', $_SERVER[ $key ] ) as $ip ) {\n\t\t\t\t\t$ip = trim( $ip );\n\n\t\t\t\t\tif ( filter_var( $ip, FILTER_VALIDATE_IP, $flags ) !== false ) {\n\t\t\t\t\t\treturn $ip;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn '';\n\t}\n\n\tstatic function sanitize_strip_trim_slm_text( $text ) {\n\t\t$text = strip_tags( $text );\n\t\t$text = htmlspecialchars( $text );\n\t\t$text = sanitize_text_field( $text );\n\t\t$text = trim( $text );\n\t\treturn $text;\n\t}\n}\n\n\n'software-license-manager/software-license-manager/slm_plugin_core.php'\n:<?php\n\n\nglobal $wpdb;\ndefine( 'SLM_TBL_LICENSE_KEYS', $wpdb->prefix . 'lic_key_tbl' );\ndefine( 'SLM_TBL_LIC_DOMAIN', $wpdb->prefix . 'lic_reg_domain_tbl' );\ndefine( 'SLM_MANAGEMENT_PERMISSION', apply_filters( 'slm_management_permission_role', 'manage_options' ) );\ndefine( 'SLM_MAIN_MENU_SLUG', 'slm-main' );\ndefine( 'SLM_MENU_ICON', 'dashicons-lock' );\n\n\nrequire_once 'includes/slm-debug-logger.php';\nrequire_once 'includes/slm-error-codes.php';\nrequire_once 'includes/slm-utility.php';\nrequire_once 'includes/slm-init-time-tasks.php';\nrequire_once 'includes/slm-api-utility.php';\nrequire_once 'includes/slm-api-listener.php';\nrequire_once 'includes/slm-third-party-integration.php';\n\nif ( is_admin() ) {\n\tinclude_once 'menu/slm-admin-init.php';\n}\n\n\nadd_action( 'init', 'slm_init_handler' );\nadd_action( 'plugins_loaded', 'slm_plugins_loaded_handler' );\n\n\nglobal $slm_debug_logger;\n$slm_debug_logger = new SLM_Debug_Logger();\n\n\nfunction slm_init_handler() {\n\t$init_task    = new SLM_Init_Time_Tasks();\n\t$api_listener = new SLM_API_Listener();\n}\n\n\nfunction slm_plugins_loaded_handler() {\n\n\tif ( is_admin() ) {\n\n\t\tif ( get_option( 'wp_lic_mgr_db_version' ) != WP_LICENSE_MANAGER_DB_VERSION ) {\n\t\t\trequire_once dirname( __FILE__ ) . '/slm_installer.php';\n\t\t}\n\t}\n\n}\n\n\nadd_action( 'wp_ajax_slm_delete_domain', 'slm_del_reg_dom' );\nfunction slm_del_reg_dom() {\n\t$out = array( 'status' => 'fail' );\n\n\tif ( ! current_user_can( 'administrator' ) ) {\n\t\twp_send_json( $out );\n\t}\n\n\tglobal $wpdb;\n\n\t$lic_id    = filter_input( INPUT_POST, 'lic_id', FILTER_SANITIZE_NUMBER_INT, FILTER_VALIDATE_INT );\n\t$domain_id = filter_input( INPUT_POST, 'domain_id', FILTER_SANITIZE_NUMBER_INT, FILTER_VALIDATE_INT );\n\n\tif ( empty( $lic_id ) || empty( $domain_id ) ) {\n\t\twp_send_json( $out );\n\t}\n\n\t$reg_table = SLM_TBL_LIC_DOMAIN;\n\n\tif ( ! check_ajax_referer( sprintf( 'slm_delete_domain_lic_%s_id_%s', $lic_id, $domain_id ), false, false ) ) {\n\t\twp_send_json( $out );\n\t}\n\n        do_action( 'slm_before_registered_domain_delete', $domain_id );\n\n\t$wpdb->query( $wpdb->prepare( \"DELETE FROM $reg_table WHERE id=%d\", $domain_id ) );\n\n\t$out['status'] = 'success';\n        $out = apply_filters( 'slm_registered_domain_delete_response', $out );\n\n\twp_send_json( $out );\n}\n",
        "gt": [
            "'software-license-manager/software-license-manager/includes/slm-utility.php'",
            "'software-license-manager/software-license-manager/slm_plugin_core.php'",
            "'software-license-manager/software-license-manager/slm_bootstrap.php'"
        ]
    },
    {
        "files": [
            "'litefilesystem.js/src/include/core.php'",
            "'litefilesystem.js/src/server.php'",
            "'litefilesystem.js/src/include/extra/Predis/Autoloader.php'"
        ],
        "content": "'litefilesystem.js/src/include/core.php'\n:<?php\n\n\n\n\n\nerror_reporting(E_ALL);\n\n\n\n\n\n$is_console = php_sapi_name() == \"cli\";\n\nif($is_console && count($argv) > 1)\n\n{\n\n\t$params = explode( \"&\",  $argv[1] );\n\n\tforeach($params as $p => $param)\n\n\t{\n\n\t\t$t = explode( \"=\", $param );\n\n\t\tif( count($t) > 1 )\n\n\t\t\t$_REQUEST[ $t[0] ] = $t[1];\n\n\t}\n\n}\n\n\n\nif( !$is_console )\n\n\t$global_url = \"http:\n\nelse\n\n\t$global_url = \"localhost/\";\n\n\n\n\n\n\n\nif (!file_exists(__DIR__ . \"/config.php\"))\n\n\tdie(\"config.php not found, check include/config.sample-php, change it and rename it to include/config.php\");\n\n\n\nrequire_once __DIR__ . \"/config.php\";\n\n\n\n\n\n$session_enabled = false;\n\nif(!headers_sent())\n\n\t$session_enabled = session_start();\n\n\n\n\n\nfunction trace($str)\n\n{\n\n\n\n\t$f = fopen(__DIR__.\"/trace.log\",\"a\");\n\n\tfwrite($f, date(\"Y-m-d H:i:s\") . \": \" . $str.\"\\n\");\n\n\tfclose($f);\n\n}\n\n\n\n$debug_buffer = Array();\n\nfunction debug($str, $color = null)\n\n{\n\n\tglobal $debug_buffer, $is_console;\n\n\n\n\tif($color && $is_console)\n\n\t{\n\n\t\t$colors = Array(\"\"=>\"\\033[0m\", \"black\"=>\"\\033[30m\", \"red\"=>\"\\033[31m\", \"green\"=>\"\\033[32m\", \"yellow\"=>\"\\033[33m\", \"blue\"=>\"\\033[34m\" );\n\n\t\tif( isset($colors[$color]))\n\n\t\t\t$str = $colors[$color] . $str . $colors[\"\"];\n\n\t}\n\n\n\n\tif($is_console)\n\n\t\techo(\" LOG: \" . $str.\"\\n\");\n\n\telse\n\n\t\t$debug_buffer[] = $str;\n\n}\n\n\n\nfunction clearDebugLog()\n\n{\n\n\tglobal $debug_buffer;\n\n\t$debug_buffer = Array();\n\n}\n\n\n\nfunction getDebugLog()\n\n{\n\n\tglobal $debug_buffer;\n\n\treturn $debug_buffer;\n\n}\n\n\n\n\n\n$loaded_modules = array();\n\n\n\nfunction registerModule($modulename, $class)\n\n{\n\n\tglobal $loaded_modules;\n\n\t$loaded_modules[$modulename] = new $class();\n\n}\n\n\n\nfunction getModule($modulename)\n\n{\n\n\tglobal $loaded_modules;\n\n\n\n\tif( strpos(\"..\",$modulename) != FALSE)\n\n\t\treturn null;\n\n\n\n\tif( isset( $loaded_modules[$modulename] ) )\n\n\t\treturn $loaded_modules[$modulename];\n\n\n\n\tif( file_exists(__DIR__ . \"/modules/\" . $modulename . \".php\") == FALSE)\n\n\t\treturn NULL;\n\n\n\n\n\n\trequire_once \"modules/\" . $modulename . \".php\";\n\n\n\n\treturn $loaded_modules[$modulename];\n\n}\n\n\n\nfunction loadModules($str)\n\n{\n\n\t$result = Array();\n\n\tif($str == \"*\")\n\n\t{\n\n\t\t$files = scandir(__DIR__ . '/modules/');\n\n\t\tforeach($files as $file)\n\n\t\t{\n\n\t\t\tif ($file == '.' || $file == '..' || substr($file,-4) != \".php\") continue;\n\n\n\n\t\t\t$module = getModule( substr($file,0,-4) );\n\n\t\t\t$result[] = $module;\n\n\t\t}\n\n\t\treturn $result;\n\n\t}\n\n\n\n\t$tokens = explode(\",\",$str);\n\n\tforeach($tokens as $k=>$v)\n\n\t\t$result[] = getModule($v);\n\n\treturn $result;\n\n}\n\n\n\n\n\nfunction dispatchEventToModules($event_type, &$data )\n\n{\n\n\t$modules = loadModules(\"*\");\n\n\t$result = true;\n\n\tforeach($modules as $module)\n\n\t{\n\n\t\tif( !method_exists($module, $event_type) )\n\n\t\t\tcontinue;\n\n\n\n\t\t$r = call_user_func_array( array($module , $event_type), array(&$data));\n\n\t\tif( $r === false)\n\n\t\t\t$result = false;\n\n\t}\n\n\treturn $result;\n\n}\n\n\n\n\n\n\n\n\n\n$mysqli = null;\n\n\n\nfunction getSQLDB()\n\n{\n\n\tglobal $mysqli;\n\n\tif( $mysqli )\n\n\t\treturn $mysqli;\n\n\n\n\t$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD);\n\n\tif (mysqli_connect_errno())\n\n\t\treturn null;\n\n\n\n\tif( $mysqli->select_db(DB_NAME) == FALSE)\n\n\t\treturn null;\n\n\n\n\treturn $mysqli;\n\n}\n\n\n\nfunction closeSQLDB()\n\n{\n\n\tglobal $mysqli;\n\n\tif( $mysqli ) $mysqli->close();\n\n}\n\n\n\n\n\n$redis = null;\n\nrequire_once 'extra/Predis/Autoloader.php';\n\n\n\nfunction getRedisDB()\n\n{\n\n\tglobal $redis;\n\n\tif ($redis) return $redis;\n\n\n\n\tPredis\\Autoloader::register();\n\n\t$redis = new Predis\\Client();\n\n\treturn $redis;\n\n}\n\n\n\n?>\n'litefilesystem.js/src/server.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n\n\nheader('Content-Type: application/json');\n\n\n\n\n\nif (!file_exists(__DIR__ . \"/include/config.php\"))\n\n\tdie('{\"status\":-10, \"msg\":\"config.php not found, check include/config.sample-php, change it and rename it to include/config.php\"}');\n\nrequire_once 'include/core.php';\n\n\n\n\n\nif( !isset($_REQUEST[\"action\"]) )\n\n{\n\n\tloadModules(\"*\");\n\n\tdie('{\"msg\":\"no action\"}');\n\n}\n\n\n\n\n\n$action = $_REQUEST[\"action\"];\n\n\n\n$pos = strpos($action,\"/\");\n\nif ($pos == false)\n\n\tdie('{\"msg\":\"no module in action\"}' . \"\\n\");\n\n\n\n$module_name = substr($action,0,$pos);\n\n$module_action = substr($action, $pos + 1, strlen($action) - $pos - 1);\n\n\n\n\n\n$module = getModule($module_name);\n\nif($module && method_exists($module,\"processAction\"))\n\n\t$module->processAction($module_action);\n\nelse\n\n\techo('{\"msg\":\"module not found\"}');\n\n\n\necho \"\\n\";\n\ncloseSQLDB();\n\n?>\n'litefilesystem.js/src/include/extra/Predis/Autoloader.php'\n:<?php\n\n\n\nnamespace Predis;\n\n\nclass Autoloader\n{\n    private $directory;\n    private $prefix;\n    private $prefixLength;\n\n\n    public function __construct($baseDirectory = __DIR__)\n    {\n        $this->directory = $baseDirectory;\n        $this->prefix = __NAMESPACE__ . '\\\\';\n        $this->prefixLength = strlen($this->prefix);\n    }\n\n\n    public static function register($prepend = false)\n    {\n        spl_autoload_register(array(new self, 'autoload'), true, $prepend);\n    }\n\n\n    public function autoload($className)\n    {\n        if (0 === strpos($className, $this->prefix)) {\n            $parts = explode('\\\\', substr($className, $this->prefixLength));\n            $filepath = $this->directory.DIRECTORY_SEPARATOR.implode(DIRECTORY_SEPARATOR, $parts).'.php';\n            if (is_file($filepath)) {\n                require($filepath);\n            }\n        }\n    }\n}\n",
        "gt": [
            "'litefilesystem.js/src/include/extra/Predis/Autoloader.php'",
            "'litefilesystem.js/src/include/core.php'",
            "'litefilesystem.js/src/server.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/config.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n\n$config['password'] = 'UnamSanctam';\n\n\n$config['db_file'] = __DIR__.\"/db/unamwebpanel.db\";\n\n\n$config['hashrate_history'] = true;\n\n\n$config['hashrate_history_limit'] = 1440;\n\n\n$config['failedlogin_blocktime'] = 15;\n$config['failedlogin_blocktries'] = 5;\n\n\n$config['errorlog_enable'] = true;\n\n$config['languages'] = [\n    'en'=>'English',\n    'sv'=>'Swedish',\n    'fr'=>'French',\n    'de'=>'German',\n    'pl'=>'Polish',\n    'ru'=>'Russian',\n    'uk'=>'Ukrainian',\n    'es'=>'Spanish'\n];\n\n$config['unam_version'] = \"1.8.0\";\n\nglobal $config;",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/config.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ]
    },
    {
        "files": [
            "'system/admin/footer.php'",
            "'system/admin/db_profiling.php'",
            "'system/admin/publish.php'"
        ],
        "content": "'system/admin/footer.php'\n:<?php namespace Habari; ?>\n<?php if ( !defined( 'HABARI_PATH' ) ) { die('No direct access'); } ?>\n\n</div>\n\n\t<div id=\"footer\" class=\"columns sixteen\">\n\t\t<p>\n\t\t\t<span><a href=\"http:\n\t\t<?php\n\t\techo Version::get_habariversion();\n\t\t?> </a></span>\n\t\t <span class=\"middot\">&middot;</span>\n\t\t <span><?php _e('Logged in as'); ?></span>\n\t\t <?php if ( User::identify()->can( 'manage_users' ) || User::identify()->can( 'manage_self' ) ) { ?>\n\t\t\t\t <a href=\"<?php Site::out_url( 'admin' ); ?>/user\" title=\"<?php _e('Go to your user page'); ?>\"><?php echo User::identify()->displayname ?></a>\n\t\t<?php } else { ?>\n\t\t\t\t <span><?php echo User::identify()->displayname ?></span>\n\t\t<?php } ?>\n\t\t <span class=\"middot\">&middot;</span>\n\t\t <span><a href=\"<?php Site::out_url( 'habari' ); ?>/doc/manual/index.html\" onclick=\"popUp(this.href); return false;\" title=\"<?php _e('Open the Habari manual in a new window'); ?>\"><?php _e('Manual'); ?></a></span>\n\t\t<?php\n\t\t\tif ( User::identify()->can('super_user') ) {\n\t\t\t\t?>\n\t\t\t\t\t<span class=\"middot\">&middot;</span>\n\t\t\t\t\t<span><a href=\"<?php Site::out_url( 'admin' ); ?>/sysinfo\" title=\"<?php _e('Display information about the server and Habari'); ?>\"> <?php _e( 'System Information'); ?></a></span>\n\t\t\t\t<?php\n\t\t\t}\n\t\t?>\n\n\t\t</p>\n\t</div>\n<?php\n\tPlugins::act( 'admin_footer', $this );\n\tStack::out( 'admin_footer_javascript', Method::create('\\\\Habari\\\\Stack', 'scripts') );\n\tinclude ('db_profiling.php');\n?>\n\n<?php if ( Session::has_messages() ): ?>\n\t<script type=\"text/javascript\">\n\tjQuery(document).ready(function() {\n\t\t<?php Session::messages_out( true, Method::create( '\\\\Habari\\\\Format', 'humane_messages' ) ); ?>\n\t})\n  </script>\n<?php endif; ?>\n\n</body>\n</html>\n\n'system/admin/db_profiling.php'\n:<?php namespace Habari; ?>\n<?php if ( !defined( 'HABARI_PATH' ) ) { die('No direct access'); } ?>\n<?php\nif (! isset($_GET['db_profile']) ||  ( !User::identify()->loggedin ) )\n{\n\treturn;\n}\nelse\n{\n?>\n<style>\n.prof_container {\n  margin: 10 100;\n  text-align: center;\n  border: solid 1px\n  background-color:\n  padding: 15;\n}\n.prof_header {\n  font: 320% Arial, Helvetica;\n  color:\n  text-align: left;\n  margin: 0 0 6 0;\n  padding: 0;\n}\n.prof_sql {\n  font: 240% monospace, Courier;\n  font-weight: bold;\n  text-align: left;\n  padding: 4 4 4 30;\n  margin: 4 100;\n  display: block;\n}\n.prof_time {\n  font: 180%/2.0 Verdana, Tahoma, sans;\n  color: red;\n  text-align: left;\n}\n</style>\n<div class=\"prof_container\">\n<h1 class=\"prof_header\"><?php _e('DB Profiling'); ?></h1>\n<?php\n$profiles = DB::get_profiles();\n$total_time_querying = 0;\nforeach ($profiles as $profile) {\n?>\n<div>\n<code class=\"prof_sql\"><?php echo $profile->query_text;?></code>\n<div class=\"prof_time\"><?php _e('Time to Execute:'); ?> <strong><?php echo $profile->total_time;?></strong></div>\n<?php if (! empty($profile->backtrace)) {?>\n<pre style=\"text-align: left;\"><strong><?php _e('BACKTRACE:'); ?></strong><br><?php print_r($profile->backtrace);?></pre>\n<?php }?>\n</div>\n<?php\n  $total_time_querying+= $profile->total_time;\n}\n?>\n<div class=\"prof_time_total\"><?php _e('Total Time Executing Queries:'); ?> <?php echo $total_time_querying;?></div>\n</div>\n<?php\n}\n?>\n\n'system/admin/publish.php'\n:<?php\nnamespace Habari;\nif ( !defined( 'HABARI_PATH' ) ) { die('No direct access'); }\n?>\n<?php include('header.php'); ?>\n\n\t<?php $form->out(); ?>\n\n\n<script type=\"text/javascript\">\n$(document).ready(function(){\n\n\n\n\t$('\n\t\t$('\n\t});\n\n\t$('\n\t\t$('.check-change').each(function() {\n\t\t\t$(this).data('checksum', crc32($(this).val()));\n\t\t});\n\t});\n\n\t$('.check-change').each(function() {\n\t\t$(this).data('checksum', crc32($(this).val()));\n\t\t$(this).data('oldvalue', $(this).val());\n\t});\n\n\twindow.onbeforeunload = function(){\n\t\tchanged = false;\n\t\t$('.check-change').each(function() {\n\t\t\tif ($(this).data('checksum') != crc32($(this).val())) {\n\t\t\t\tconsole.log([$(this).data('oldvalue'), $(this).val()]);\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t});\n\t\tif (changed) {\n\t\t\tspinner.start(); spinner.stop();\n\t\t\treturn '<?php\n\n\t\t\t\t_e('You did not save the changes you made. \\nLeaving this page will result in the loss of data.');\n\t\t\t\t?>';\n\t\t}\n\t};\n\n});\n</script>\n\n<?php include('footer.php'); ?>\n",
        "gt": [
            "'system/admin/db_profiling.php'",
            "'system/admin/footer.php'",
            "'system/admin/publish.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/devdocs.php'\n:<?php\n\nini_set('display_errors', 0);\nini_set('memory_limit', '-1');\n\nuse CFPropertyList\\CFPropertyList;\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocs {\n  private static $cacheDirectory = 'cache/';\n\n  private $workflows;\n  private $results;\n  private $baseUrl;\n  private $cacheLife;\n  private $template;\n\n  public function __construct($query, $doc) {\n    $this->baseUrl = getenv('BASE_URL') ?: 'https:\n    $this->cacheLife = (int)(getenv('CACHE_LIFE') ?: '7');\n    $this->template = getenv('TEMPLATE') ?: '$baseUrl$documentation/$path';\n    $this->workflows = new Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n    $this->results = [\n      0 => [],\n      1 => [],\n      2 => []\n    ];\n\n    $documentations = $this->getDocumentations();\n    if (!isset($doc) || empty($doc)) {\n      $rootPath = str_replace('/scripts', '', $this->workflows->path());\n      $pList = (new CFPropertyList($rootPath . '/info.plist'))->toArray();\n      foreach ($pList['connections'] as $key => $value) {\n        if (array_key_exists($key, $documentations)) {\n          $this->checkCache($key);\n          $this->processDocumentation($key, $query);\n        }\n      }\n    } else {\n      $this->checkCache($doc);\n      $this->processDocumentation($doc, $query);\n    }\n    $this->render();\n  }\n\n  private function getDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      $docContent = $this->workflows->fetch($this->baseUrl . 'docs/docs.json');\n      file_put_contents($docFile, $docContent);\n    } else {\n      $docContent = file_get_contents($docFile);\n    }\n    $docs = json_decode($docContent);\n    $documentations = [];\n    foreach ($docs as $doc) {\n      $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n      $documentations[$doc->slug] = $doc;\n    }\n    return $documentations;\n  }\n\n  private function checkCache($documentation) {\n    if (!file_exists(self::$cacheDirectory)) {\n      mkdir(self::$cacheDirectory);\n    }\n    $docFile = self::$cacheDirectory . $documentation . '.json';\n    error_log(\"Checking existence of cache at $docFile\");\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      error_log(\"Download doc for $documentation at \\\"\" . $this->baseUrl . 'docs/' . $documentation . '/index.json') . \"\\\"\";\n      file_put_contents($docFile, file_get_contents($this->baseUrl . 'docs/' . $documentation . '/index.json'));\n    }\n  }\n\n  private function processDocumentation($documentation, $query) {\n\n    $query = strtolower($query);\n    $data = json_decode(file_get_contents(self::$cacheDirectory . $documentation . '.json'));\n    if ($data === null) {\n      unlink(self::$cacheDirectory . $documentation . '.json');\n    }\n\n    $entries = $data->entries;\n\n    $found = [];\n    foreach ($entries as $key => $result) {\n      $value = strtolower(trim($result->name));\n      $description = strtolower(utf8_decode(strip_tags($result->type)));\n\n      if (empty($query)) {\n        $found[$value] = true;\n        $result->documentation = $documentation;\n        $this->results[0][] = $result;\n      } else if (strpos($value, $query) === 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[0][] = $result;\n        }\n      } else if (strpos($value, $query) > 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[1][] = $result;\n        }\n      } else if (strpos($description, $query) !== false) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[2][] = $result;\n        }\n      }\n    }\n\n    if ((count($this->results[0]) === 0) && (count($this->results[1]) === 0) && (count($this->results[2]) === 0)) {\n      $this->results[0][] = (object) [\n        'name' => 'No results.',\n        'documentation' => $documentation\n      ];\n    }\n\n  }\n\n  private function render() {\n    foreach ($this->results as $level => $results) {\n      foreach ($results as $result) {\n        $title = empty($result->type) ? $result->name : \"$result->name ($result->type)\";\n        $vars = array(\n          '$baseUrl' => $this->baseUrl,\n          '$documentation' => $result->documentation,\n          '$docalt' => str_replace(\"~\", \"-\", $result->documentation),\n          '$name' => $result->name,\n          '$path' => $result->path\n        );\n\n        $url = strtr($this->template, $vars);\n        $this->workflows->result($result->name, $url, $title, $result->path, $result->documentation . '.png', 'yes', $result->name);\n      }\n    }\n    echo $this->workflows->toxml();\n  }\n}\n\n$query = isset($query) ? $query : '';\n$documentation = isset($documentation) ? $documentation : '';\nnew DevDocs($query, $documentation);\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'"
        ]
    },
    {
        "files": [
            "'PHPCourse2020/14_oop/index.php'",
            "'PHPCourse2020/14_oop/Student.php'",
            "'PHPCourse2020/16_autoloading/app/Person.php'"
        ],
        "content": "'PHPCourse2020/14_oop/index.php'\n:<?php\n\n\n\nrequire_once './Person.php';\nrequire_once './Student.php';\n\n\n\n\n\n\n\n\n$s = new Student(\"Zura\", '28', 1234);\necho $s->name.'<br>';\n\n'PHPCourse2020/14_oop/Student.php'\n:<?php\n\n\nrequire_once './Person.php';\n\nclass Student extends Person\n{\n    public int $stId;\n    public function __construct($name, $age, $stId)\n    {\n        $this->stId = $stId;\n        parent::__construct($name, $age, null);\n    }\n}\n\n'PHPCourse2020/16_autoloading/app/Person.php'\n:<?php\n\n\nnamespace app;\n\nclass Person\n{\n\n}\n",
        "gt": [
            "'PHPCourse2020/16_autoloading/app/Person.php'",
            "'PHPCourse2020/14_oop/Student.php'",
            "'PHPCourse2020/14_oop/index.php'"
        ]
    },
    {
        "files": [
            "'spa-starter-kit/webservice/server.php'",
            "'spa-starter-kit/webservice/public/index.php'",
            "'spa-starter-kit/webservice/bootstrap/app.php'"
        ],
        "content": "'spa-starter-kit/webservice/server.php'\n:<?php\n\n\n\n$uri = urldecode(\n    parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH)\n);\n\n\n\n\nif ($uri !== '/' && file_exists(__DIR__.'/public'.$uri)) {\n    return false;\n}\n\nrequire_once __DIR__.'/public/index.php';\n\n'spa-starter-kit/webservice/public/index.php'\n:<?php\n\n\n\n\n\nrequire __DIR__.'/../bootstrap/autoload.php';\n\n\n\n$app = require_once __DIR__.'/../bootstrap/app.php';\n\n\n\n$kernel = $app->make(Illuminate\\Contracts\\Http\\Kernel::class);\n\n$response = $kernel->handle(\n    $request = Illuminate\\Http\\Request::capture()\n);\n\n$response->send();\n\n$kernel->terminate($request, $response);\n\n'spa-starter-kit/webservice/bootstrap/app.php'\n:<?php\n\n\n\n$app = new Illuminate\\Foundation\\Application(\n    realpath(__DIR__.'/../')\n);\n\n\n\n$app->singleton(\n    Illuminate\\Contracts\\Http\\Kernel::class,\n    App\\Http\\Kernel::class\n);\n\n$app->singleton(\n    Illuminate\\Contracts\\Console\\Kernel::class,\n    App\\Console\\Kernel::class\n);\n\n$app->singleton(\n    Illuminate\\Contracts\\Debug\\ExceptionHandler::class,\n    App\\Exceptions\\Handler::class\n);\n\n\n\nreturn $app;\n",
        "gt": [
            "'spa-starter-kit/webservice/bootstrap/app.php'",
            "'spa-starter-kit/webservice/public/index.php'",
            "'spa-starter-kit/webservice/server.php'"
        ]
    },
    {
        "files": [
            "'shiny_geoip/src/Action/ShowHomepageAction.php'",
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/cli/app.php'",
            "'shiny_geoip/src/bootstrap.php'"
        ],
        "content": "'shiny_geoip/src/Action/ShowHomepageAction.php'\n:<?php\n\ndeclare(strict_types=1);\n\nnamespace Nekudo\\ShinyGeoip\\Action;\n\nuse Nekudo\\ShinyGeoip\\Domain\\LocationDomain;\nuse Nekudo\\ShinyGeoip\\Responder\\ShowHomepageResponder;\n\nclass ShowHomepageAction\n{\n\n    protected $config = [];\n\n    public function __construct(array $config)\n    {\n        $this->config = $config;\n    }\n\n\n    public function __invoke()\n    {\n\n        $domain = new LocationDomain($this->config);\n        $userIp = $_SERVER['REMOTE_ADDR'];\n        if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n            $userIp = $_SERVER['HTTP_X_FORWARDED_FOR'];\n        }\n        $record = $domain->getRecord($userIp);\n        if (!empty($record)) {\n            $record = $domain->shortenRecord($record, 'en');\n        }\n\n\n        $responder = new ShowHomepageResponder;\n        $responder->showHomepage($record);\n    }\n}\n\n'shiny_geoip/src/bootstrap_cli.php'\n:<?php\n\ndeclare(strict_types=1);\n\n\ninclude __DIR__ . '/bootstrap.php';\n\n\nrequire_once __DIR__ . '/ShinyGeoipCli.php';\nrequire_once __DIR__ . '/Action/Cli/CliAction.php';\nrequire_once __DIR__ . '/Action/Cli/BenchmarkAction.php';\nrequire_once __DIR__ . '/Action/Cli/ShowHelpAction.php';\nrequire_once __DIR__ . '/Action/Cli/UpdateMmdbAction.php';\nrequire_once __DIR__ . '/Responder/CliResponder.php';\n\n'shiny_geoip/cli/app.php'\n:<?php\n\nrequire_once __DIR__ . '/../src/bootstrap_cli.php';\n\n$app = new \\Nekudo\\ShinyGeoip\\ShinyGeoipCli($config);\n$app->dispatch($argv);\n\n'shiny_geoip/src/bootstrap.php'\n:<?php\n\ndeclare(strict_types=1);\n\ndefine('PROJECT_ROOT', __DIR__ . '/../');\n\n$config = include PROJECT_ROOT . 'config/config.php';\n\nrequire_once PROJECT_ROOT . 'src/ShinyGeoip.php';\nrequire_once PROJECT_ROOT . 'src/Action/ShowHomepageAction.php';\nrequire_once PROJECT_ROOT . 'src/Action/ShowLocationAction.php';\nrequire_once PROJECT_ROOT . 'src/Domain/LocationDomain.php';\nrequire_once PROJECT_ROOT . 'src/Responder/HttpResponder.php';\nrequire_once PROJECT_ROOT . 'src/Responder/ShowLocationResponder.php';\nrequire_once PROJECT_ROOT . 'src/Responder/ShowHomepageResponder.php';\n\n\nif (!class_exists('MaxMind\\Db\\Reader')) {\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Decoder.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Util.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Metadata.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/InvalidDatabaseException.php';\n}\n",
        "gt": [
            "'shiny_geoip/src/Action/ShowHomepageAction.php'",
            "'shiny_geoip/src/bootstrap.php'",
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/cli/app.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/navbar.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/config.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/navbar.php'\n:<?php\n\n$config['password'] = 'UnamSanctam';\n\n\n$config['db_file'] = __DIR__.\"/db/unamwebpanel.db\";\n\n\n$config['hashrate_history'] = true;\n\n\n$config['hashrate_history_limit'] = 1440;\n\n\n$config['failedlogin_blocktime'] = 15;\n$config['failedlogin_blocktries'] = 5;\n\n\n$config['errorlog_enable'] = true;\n\n$config['languages'] = [\n    'en'=>'English',\n    'sv'=>'Swedish',\n    'fr'=>'French',\n    'de'=>'German',\n    'pl'=>'Polish',\n    'ru'=>'Russian',\n    'uk'=>'Ukrainian',\n    'es'=>'Spanish'\n];\n\n$config['unam_version'] = \"1.8.0\";\n\nglobal $config;\n'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/config.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/navbar.php'"
        ]
    },
    {
        "files": [
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'",
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'"
        ],
        "content": "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'\n:<?php\n\n\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE' ) ) {\n\tdefine( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE', __FILE__ );\n}\n\n\nif ( ! class_exists( \\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::class ) ) {\n\trequire_once plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'src/class-wp-bootstrap-blocks.php';\n}\n\n\n\\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::instance();\n\n'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'\n:<?php\n\n\n\nrequire_once dirname( __DIR__ ) . '/vendor/autoload.php';\n\n\n\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\n\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = getenv( 'WP_PHPUNIT__DIR' );\n}\n\n\nif ( ! $_tests_dir ) {\n\t$_try_tests_dir = __DIR__ . '/../../../../../tests/phpunit';\n\tif ( file_exists( $_try_tests_dir . '/includes/functions.php' ) ) {\n\t\t$_tests_dir = $_try_tests_dir;\n\t}\n}\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = '/tmp/wordpress-tests-lib';\n}\n\n\nrequire_once $_tests_dir . '/includes/functions.php';\n\n\n\ndefine( 'GUTENBERG_LOAD_VENDOR_SCRIPTS', false );\n\n\nfunction _manually_load_plugin() {\n\trequire dirname( __DIR__ ) . '/wp-bootstrap-blocks.php';\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\n\n\nrequire $_tests_dir . '/includes/bootstrap.php';\n\n\nrequire_once __DIR__ . '/wp-bootstrap-blocks-unittestcase.php';\n\n'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'\n:<?php\n\n\nnamespace WP_Bootstrap_Blocks;\n\nuse WP_Bootstrap_Blocks\\Button\\Button_Block_Type;\nuse WP_Bootstrap_Blocks\\Column\\Column_Block_Type;\nuse WP_Bootstrap_Blocks\\Container\\Container_Block_Type;\nuse WP_Bootstrap_Blocks\\Row\\Row_Block_Type;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nclass WP_Bootstrap_Blocks {\n\n\n\tprotected static $instance = null;\n\n\n\tpublic static $version = '5.2.0';\n\n\n\tpublic $token = 'wp-bootstrap-blocks';\n\n\n\tpublic $assets_dir;\n\n\n\tpublic $assets_url;\n\n\n\tpublic $languages_dir;\n\n\n\tpublic $languages_dir_full;\n\n\n\tpublic function __construct() {\n\t\t$this->define_constants();\n\t\t$this->init_plugin_environment();\n\t\t$this->includes();\n\t\t$this->init_hooks();\n\t\t$this->register_block_types();\n\t\tSettings::init( $this->assets_dir, $this->assets_url );\n\t}\n\n\n\tprotected function define_constants() {\n\t\tif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_ABSPATH' ) ) {\n\t\t\tdefine( 'WP_BOOTSTRAP_BLOCKS_ABSPATH', trailingslashit( dirname( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t}\n\t}\n\n\n\tprotected function init_plugin_environment() {\n\n\t\t$this->assets_dir = WP_BOOTSTRAP_BLOCKS_ABSPATH . 'build/';\n\t\t$this->assets_url = esc_url( trailingslashit( plugins_url( '/build/', WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t$this->languages_dir = dirname( plugin_basename( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) . '/languages/';\n\t\t$this->languages_dir_full = plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'languages/';\n\t}\n\n\n\tpublic function includes() {\n\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/wp-bootstrap-blocks-functions.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/class-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/container/class-container-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/row/class-row-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/column/class-column-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/button/class-button-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/settings/class-settings.php';\n\t}\n\n\n\tprotected function init_hooks() {\n\n\t\tadd_action( 'enqueue_block_assets', array( $this, 'enqueue_block_assets' ) );\n\n\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'enqueue_block_editor_assets' ), 99 );\n\n\n\t\tif ( class_exists( 'WP_Block_Editor_Context' ) ) {\n\n\t\t\tadd_filter( 'block_categories_all', array( $this, 'register_custom_block_category' ), 10, 2 );\n\t\t} else {\n\t\t\tadd_filter( 'block_categories', array( $this, 'register_custom_block_category_old' ), 10, 2 );\n\t\t}\n\n\n\t\tadd_action( 'plugins_loaded', array( $this, 'load_plugin_textdomain' ) );\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'set_script_translations' ), 100 );\n\n\n\t\tadd_action( 'init', array( $this, 'check_version' ) );\n\t}\n\n\n\tpublic function enqueue_block_assets() {\n\n\t\t$enqueue_block_assets = apply_filters( 'wp_bootstrap_blocks_enqueue_block_assets', true );\n\t\tif ( ! $enqueue_block_assets ) {\n\t\t\treturn;\n\t\t}\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-styles',\n\t\t\tesc_url( $this->assets_url ) . 'style-index.css',\n\t\t\tarray(),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function enqueue_block_editor_assets() {\n\n\t\t$index_path = $this->assets_dir . 'index.js';\n\t\t$index_url = esc_url( $this->assets_url ) . 'index.js';\n\t\t$index_asset_file = $this->assets_dir . 'index.asset.php';\n\t\t$index_asset = file_exists( $index_asset_file )\n\t\t\t? require_once $index_asset_file\n\t\t\t: null;\n\t\t$index_dependencies = isset( $index_asset['dependencies'] ) ? $index_asset['dependencies'] : array();\n\t\t$index_version = isset( $index_asset['version'] ) ? $index_asset['version'] : filemtime( $index_path );\n\n\t\twp_enqueue_script(\n\t\t\t$this->token . '-js',\n\t\t\t$index_url,\n\t\t\t$index_dependencies,\n\t\t\t$index_version,\n\t\t\ttrue\n\t\t);\n\n\t\twp_localize_script(\n\t\t\t$this->token . '-js',\n\t\t\t'wpBootstrapBlocks',\n\t\t\tarray(\n\t\t\t\t'bootstrapVersion' => Settings::get_bootstrap_version(),\n\t\t\t\t'isBootstrap5Active' => Settings::is_bootstrap_5_active(),\n\t\t\t\t'isCssGridEnabled' => Settings::is_css_grid_enabled(),\n\t\t\t)\n\t\t);\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-editor-styles',\n\t\t\tesc_url( $this->assets_url ) . 'index.css',\n\t\t\tarray( 'wp-edit-blocks' ),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function register_custom_block_category( $block_categories, $block_editor_context ) {\n\t\treturn $this->add_custom_block_category( $block_categories );\n\t}\n\n\n\tpublic function register_custom_block_category_old( $categories, $post ) {\n\t\treturn $this->add_custom_block_category( $categories );\n\t}\n\n\n\tprotected function add_custom_block_category( $block_categories ) {\n\t\treturn array_merge(\n\t\t\t$block_categories,\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'slug' => 'wp-bootstrap-blocks',\n\t\t\t\t\t'title' => __( 'Bootstrap Blocks', 'wp-bootstrap-blocks' ),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t}\n\n\n\tpublic function load_plugin_textdomain() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\tload_plugin_textdomain( $domain, false, $this->languages_dir );\n\t}\n\n\n\tpublic function set_script_translations() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\twp_set_script_translations( $this->token . '-js', $domain, $this->languages_dir_full );\n\t}\n\n\n\tpublic function register_block_types() {\n\t\tnew Container_Block_Type();\n\t\tnew Row_Block_Type();\n\t\tnew Column_Block_Type();\n\t\tnew Button_Block_Type();\n\t}\n\n\n\tpublic static function instance() {\n\t\tif ( is_null( self::$instance ) ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\n\t\treturn self::$instance;\n\t}\n\n\n\tpublic function __clone() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function __wakeup() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function check_version() {\n\t\tif ( defined( 'IFRAME_REQUEST' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$transient_name = 'wp_bootstrap_blocks_version';\n\n\t\t$old_version = get_transient( $transient_name );\n\t\tif ( false === $old_version ) {\n\t\t\t$old_version = get_option( $this->token . '_version' );\n\t\t\tset_transient( $transient_name, $old_version, 5 * MINUTE_IN_SECONDS );\n\t\t}\n\t\t$new_version = self::$version;\n\t\tif ( $old_version !== $new_version ) {\n\t\t\t$this->log_version_number();\n\t\t\tdelete_transient( $transient_name );\n\n\n\t\t\tdo_action( $this->token . '_updated', $new_version, $old_version );\n\t\t}\n\t}\n\n\n\tprotected function log_version_number() {\n\t\tdelete_option( $this->token . '_version' );\n\t\tupdate_option( $this->token . '_version', self::$version );\n\t}\n}\n",
        "gt": [
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'laravel-shopping-cart-tutorial/server.php'",
            "'laravel-shopping-cart-tutorial/bootstrap/app.php'",
            "'laravel-shopping-cart-tutorial/public/index.php'"
        ],
        "content": "'laravel-shopping-cart-tutorial/server.php'\n:<?php\n\n\n\n$uri = urldecode(\n    parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH)\n);\n\n\n\n\nif ($uri !== '/' && file_exists(__DIR__.'/public'.$uri)) {\n    return false;\n}\n\nrequire_once __DIR__.'/public/index.php';\n\n'laravel-shopping-cart-tutorial/bootstrap/app.php'\n:<?php\n\n\n\n$app = new Illuminate\\Foundation\\Application(\n    realpath(__DIR__.'/../')\n);\n\n\n\n$app->singleton(\n    Illuminate\\Contracts\\Http\\Kernel::class,\n    App\\Http\\Kernel::class\n);\n\n$app->singleton(\n    Illuminate\\Contracts\\Console\\Kernel::class,\n    App\\Console\\Kernel::class\n);\n\n$app->singleton(\n    Illuminate\\Contracts\\Debug\\ExceptionHandler::class,\n    App\\Exceptions\\Handler::class\n);\n\n\n\nreturn $app;\n\n'laravel-shopping-cart-tutorial/public/index.php'\n:<?php\n\n\n\n\n\nrequire __DIR__.'/../bootstrap/autoload.php';\n\n\n\n$app = require_once __DIR__.'/../bootstrap/app.php';\n\n\n\n$kernel = $app->make(Illuminate\\Contracts\\Http\\Kernel::class);\n\n$response = $kernel->handle(\n    $request = Illuminate\\Http\\Request::capture()\n);\n\n$response->send();\n\n$kernel->terminate($request, $response);\n",
        "gt": [
            "'laravel-shopping-cart-tutorial/bootstrap/app.php'",
            "'laravel-shopping-cart-tutorial/public/index.php'",
            "'laravel-shopping-cart-tutorial/server.php'"
        ]
    },
    {
        "files": [
            "'shiny_geoip/src/Responder/html/home.html.php'",
            "'shiny_geoip/src/Responder/ShowHomepageResponder.php'",
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/cli/app.php'",
            "'shiny_geoip/src/bootstrap.php'"
        ],
        "content": "'shiny_geoip/src/Responder/html/home.html.php'\n:<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n    <meta name=\"description\" content=\"Free GeoIP/Geolocation REST API. An open-source project by nekudo.com.\">\n    <title>Free IP GeoLocation/GeoIp API - geoip.nekudo.com</title>\n    <link rel=\"canonical\" href=\"http:\n    <link rel=\"stylesheet\" href=\"/css/base.css\">\n</head>\n<body>\n\n<div class=\"container\">\n\n    <header>\n        <h1>Free IP GeoLocation/GeoIp API</h1>\n        <p class=\"h2\">A free REST API to get location information for IP addresses.</p>\n    </header>\n\n\n    <div class=\"clearfix\">\n        <div class=\"left\">\n            <p>\n                This project is open source. Setup your own instance if you like.\n            </p>\n            <p>\n                <a href=\"https:\n                    Sourcecode at GitHub\n                </a>\n            </p>\n        </div>\n\n        <div class=\"right\">\n            <table class=\"bordered\">\n                <caption align=\"bottom\">Location data for your current IP address</caption>\n                <tbody>\n                    <?php if (!empty($record['city'])): ?>\n                        <tr>\n                            <td>City</td>\n                            <td><?php echo htmlspecialchars($record['city']); ?></td>\n                        </tr>\n                    <?php endif; ?>\n                    <?php if (!empty($record['country'])): ?>\n                        <tr>\n                            <td>Country</td>\n                            <td>\n                                <?php echo htmlspecialchars($record['country']['name']); ?>\n                                (<?php echo htmlspecialchars($record['country']['code']); ?>)\n                            </td>\n                        </tr>\n                    <?php endif; ?>\n                    <?php if (!empty($record['location'])): ?>\n                        <tr>\n                            <td>Latitute</td>\n                            <td>\n                                <?php echo htmlspecialchars($record['location']['latitude']); ?>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Longitude</td>\n                            <td>\n                                <?php echo htmlspecialchars($record['location']['longitude']); ?>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td>Time zone</td>\n                            <td>\n                                <?php echo htmlspecialchars($record['location']['time_zone']); ?>\n                            </td>\n                        </tr>\n                    <?php endif; ?>\n                    <?php if (empty($record)): ?>\n                        <tr><td><em>No record found.</em></td></tr>\n                    <?php endif; ?>\n                </tbody>\n            </table>\n\n        </div>\n    </div>\n\n    <div class=\"mt-60\">\n        <h3>API Documentation</h3>\n\n        <h4>Requests</h4>\n        <p>\n            All requests have to be HTTP GET requests in the following schema:\n        </p>\n        <pre>http:\n\n        <h4>Parameters</h4>\n        <table>\n            <tbody>\n            <tr>\n                <td class=\"param-name\">ip</td>\n                <td class=\"param-required\">optional</td>\n                <td>Valid IP address in IPv4 or IPv6 format.</td>\n            </tr>\n            <tr>\n                <td class=\"param-name\">language</td>\n                <td class=\"param-required\">optional</td>\n                <td>Two character language code like <em>en</em> or <em>de</em>.</td>\n            </tr>\n            <tr>\n                <td class=\"param-name\">type</td>\n                <td class=\"param-required\">optional</td>\n                <td>\n                    Possible values are <em>short</em> to get a response conataining only most relevant data or\n                    <em>full</em> to get a response containing all available data.\n                </td>\n            </tr>\n            </tbody>\n        </table>\n\n        <h4>Responses</h4>\n        <p class=\"textblock\">\n            By default all responses are JSON encoded strings.<br />\n            It is also possible to get JSONP responses for direct usage in javascripts. To get a JSONP response\n            a callback function has to be provided within the request using the <em>?callback=</em> parameter.\n        </p>\n\n\n        <h4>Examples</h4>\n        <pre>http:\n        <pre>http:\n        <pre>http:\n        <pre>http:\n        <pre>http:\n        <pre>\n&lt;script&gt;\nfunction foo(data) {\n    document.write(&quot;City: &quot;, data.city);\n    document.write(&quot;Country: &quot;, data.country.name);\n    document.write(&quot;Latitude: &quot;, data.location.latitude);\n    document.write(&quot;Longitude: &quot;, data.location.longitude);\n}\n&lt;/script&gt;\n&lt;script src=&quot;http:\n\n        <h4>SSL</h4>\n        <p class=\"textblock\">This service is also available via <a href=\"https:\n\n        <h4>Limits</h4>\n        <p class=\"textblock\">The API follows a fair use policy. There are no limits by default but if the service is\n            abused your IP may get blocked.</p>\n\n        <h4>Support/Donate</h4>\n        <p class=\"textblock\">\n            This API is totally free, however there are a few expenses to run the servers. In case you like this project\n            and use it regularly please consider\n            <a href=\"https:\n        </p>\n    </div>\n\n    <footer>\n        <p>\n            <small>\n                This product includes GeoLite2 data created by MaxMind, available from\n                <a href=\"http:\n                This website is another shiny project by <a href=\"https:\n            </small>\n        </p>\n    </footer>\n\n</div>\n\n\n</body>\n</html>\n'shiny_geoip/src/Responder/ShowHomepageResponder.php'\n:<?php\n\ndeclare(strict_types=1);\n\nnamespace Nekudo\\ShinyGeoip\\Responder;\n\nclass ShowHomepageResponder extends HttpResponder\n{\n\n    public function showHomepage(array $record)\n    {\n        ob_start();\n        require PROJECT_ROOT . '/src/Responder/html/home.html.php';\n        $payload = ob_get_clean();\n        $this->found($payload);\n    }\n}\n\n'shiny_geoip/src/bootstrap_cli.php'\n:<?php\n\ndeclare(strict_types=1);\n\n\ninclude __DIR__ . '/bootstrap.php';\n\n\nrequire_once __DIR__ . '/ShinyGeoipCli.php';\nrequire_once __DIR__ . '/Action/Cli/CliAction.php';\nrequire_once __DIR__ . '/Action/Cli/BenchmarkAction.php';\nrequire_once __DIR__ . '/Action/Cli/ShowHelpAction.php';\nrequire_once __DIR__ . '/Action/Cli/UpdateMmdbAction.php';\nrequire_once __DIR__ . '/Responder/CliResponder.php';\n\n'shiny_geoip/cli/app.php'\n:<?php\n\nrequire_once __DIR__ . '/../src/bootstrap_cli.php';\n\n$app = new \\Nekudo\\ShinyGeoip\\ShinyGeoipCli($config);\n$app->dispatch($argv);\n\n'shiny_geoip/src/bootstrap.php'\n:<?php\n\ndeclare(strict_types=1);\n\ndefine('PROJECT_ROOT', __DIR__ . '/../');\n\n$config = include PROJECT_ROOT . 'config/config.php';\n\nrequire_once PROJECT_ROOT . 'src/ShinyGeoip.php';\nrequire_once PROJECT_ROOT . 'src/Action/ShowHomepageAction.php';\nrequire_once PROJECT_ROOT . 'src/Action/ShowLocationAction.php';\nrequire_once PROJECT_ROOT . 'src/Domain/LocationDomain.php';\nrequire_once PROJECT_ROOT . 'src/Responder/HttpResponder.php';\nrequire_once PROJECT_ROOT . 'src/Responder/ShowLocationResponder.php';\nrequire_once PROJECT_ROOT . 'src/Responder/ShowHomepageResponder.php';\n\n\nif (!class_exists('MaxMind\\Db\\Reader')) {\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Decoder.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Util.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Metadata.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/InvalidDatabaseException.php';\n}\n",
        "gt": [
            "'shiny_geoip/src/Responder/html/home.html.php'",
            "'shiny_geoip/src/Responder/ShowHomepageResponder.php'",
            "'shiny_geoip/src/bootstrap.php'",
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/cli/app.php'"
        ]
    },
    {
        "files": [
            "'imagecow/src/autoloader.php'",
            "'imagecow/tests/bootstrap.php'",
            "'imagecow/example/quality.php'"
        ],
        "content": "'imagecow/src/autoloader.php'\n:<?php\n\nspl_autoload_register(function ($class) {\n    if (strpos($class, 'Imagecow\\\\') !== 0) {\n        return;\n    }\n\n    $file = __DIR__.str_replace('\\\\', DIRECTORY_SEPARATOR, substr($class, strlen('Imagecow'))).'.php';\n\n    if (is_file($file)) {\n        require_once $file;\n    }\n});\n\n'imagecow/tests/bootstrap.php'\n:<?php\n\nerror_reporting(E_ALL);\n\ninclude_once dirname(__DIR__).'/vendor/autoload.php';\ninclude_once dirname(__DIR__).'/src/autoloader.php';\n\n\nif (!class_exists('PHPUnit_Framework_TestCase') && class_exists('\\PHPUnit\\Framework\\TestCase')) {\n    class_alias('\\PHPUnit\\Framework\\TestCase', 'PHPUnit_Framework_TestCase');\n}\n\nif (!class_exists('PHPUnit_Framework_Error_Notice') && class_exists('\\PHPUnit\\Framework\\Error\\Notice')) {\n    class_alias('\\PHPUnit\\Framework\\Error\\Notice', 'PHPUnit_Framework_Error_Notice');\n}\n\ninclude_once __DIR__.'/ImageTest_.php';\n\nPHPUnit_Framework_Error_Notice::$enabled = true;\n\n'imagecow/example/quality.php'\n:<?php\n\nrequire __DIR__.'/bootstrap.php';\n\nuse Imagecow\\Image;\n\n$quality = 8;\n$image = Image::fromFile(__DIR__.'/my-image.jpg');\n$image->autoRotate();\n\n$watermark = Image::fromFile('logo.png');\n$image->watermark($watermark, $x = 'right', $y = 'bottom');\n\n$image->quality($quality);\n$image->resize(500, 500);\n\n\n$image->show();",
        "gt": [
            "'imagecow/src/autoloader.php'",
            "'imagecow/tests/bootstrap.php'",
            "'imagecow/example/quality.php'"
        ]
    },
    {
        "files": [
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/composer/autoload_psr4.php'",
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/2.php'",
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/autoload.php'",
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/composer/autoload_real.php'"
        ],
        "content": "'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/composer/autoload_psr4.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'Tarsana\\\\UnitTests\\\\Functional\\\\' => array($vendorDir . '/tarsana/functional/tests'),\n    'Tarsana\\\\Functional\\\\' => array($vendorDir . '/tarsana/functional/src/Classes'),\n);\n\n'PHP7-Data-Structures-and-Algorithms/Chapter13/2.php'\n:<?php\n\n\nrequire __DIR__ . '/vendor/autoload.php';\n\nuse Tarsana\\Functional as F;\n\n$add = F\\curry(function($x, $y, $z) {\n    return $x + $y + $z;\n});\n\necho $add(1, 2, 4).\"\\n\";\n$addFive = $add(5);\n$addSix = $addFive(6);\necho $addSix(2);\n\n\n$reduce = F\\curry('array_reduce');\n$sum = $reduce(F\\__(), F\\plus());\necho $sum([1, 2, 3, 4, 5], 0);\n\n$square = function($x) { return $x * $x; };\n$addThenSquare = F\\pipe(F\\plus(), $square);\necho $addThenSquare(2, 3);\n'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer/autoload_real.php';\n\nreturn ComposerAutoloaderInit162d5f8ec26d0f35f7a435b58f506e91::getLoader();\n\n'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit162d5f8ec26d0f35f7a435b58f506e91\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit162d5f8ec26d0f35f7a435b58f506e91', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit162d5f8ec26d0f35f7a435b58f506e91', 'loadClassLoader'));\n\n        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());\n        if ($useStaticLoader) {\n            require_once __DIR__ . '/autoload_static.php';\n\n            call_user_func(\\Composer\\Autoload\\ComposerStaticInit162d5f8ec26d0f35f7a435b58f506e91::getInitializer($loader));\n        } else {\n            $map = require __DIR__ . '/autoload_namespaces.php';\n            foreach ($map as $namespace => $path) {\n                $loader->set($namespace, $path);\n            }\n\n            $map = require __DIR__ . '/autoload_psr4.php';\n            foreach ($map as $namespace => $path) {\n                $loader->setPsr4($namespace, $path);\n            }\n\n            $classMap = require __DIR__ . '/autoload_classmap.php';\n            if ($classMap) {\n                $loader->addClassMap($classMap);\n            }\n        }\n\n        $loader->register(true);\n\n        if ($useStaticLoader) {\n            $includeFiles = Composer\\Autoload\\ComposerStaticInit162d5f8ec26d0f35f7a435b58f506e91::$files;\n        } else {\n            $includeFiles = require __DIR__ . '/autoload_files.php';\n        }\n        foreach ($includeFiles as $fileIdentifier => $file) {\n            composerRequire162d5f8ec26d0f35f7a435b58f506e91($fileIdentifier, $file);\n        }\n\n        return $loader;\n    }\n}\n\nfunction composerRequire162d5f8ec26d0f35f7a435b58f506e91($fileIdentifier, $file)\n{\n    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {\n        require $file;\n\n        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;\n    }\n}\n",
        "gt": [
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/composer/autoload_psr4.php'",
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/composer/autoload_real.php'",
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/vendor/autoload.php'",
            "'PHP7-Data-Structures-and-Algorithms/Chapter13/2.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-actions.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}\n'UnamWebPanel/UnamWebPanel/api/ajax-actions.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once dirname(__DIR__).'/assets/php/security.php';\n\nfunction checkJSON($input) {\n    json_decode($input, true);\n    if(json_last_error() != JSON_ERROR_NONE) {\n        return false;\n    }\n    return true;\n}\n\nif(!empty(getParam('action'))) {\n    switch (getParam('action')) {\n        case 'config-add':\n            $base->unam_checkCondition(!checkJSON($_POST['data']), \"{$larr['invalid']} JSON.\");\n            $base->unam_dbInsert(getConn(), 'configs', ['cf_name'=>getParam('name'), 'cf_data'=>$_POST['data']]);\n            $base->unam_echoSuccess($larr['status_added']);\n            break;\n        case 'config-update':\n            $base->unam_checkCondition(!checkJSON($_POST['data']), \"{$larr['invalid']} JSON.\");\n            $base->unam_dbUpdate(getConn(), 'configs', ['cf_data'=>$_POST['data']], ['cf_configID'=>getParam('index')]);\n            $base->unam_echoSuccess($larr['status_updated']);\n            break;\n        case 'config-remove':\n            $base->unam_checkCondition(getParam('index') <= 2, $larr['cannot_remove_default_configuration']);\n            $base->unam_dbDelete(getConn(), 'configs', ['cf_configID'=>getParam('index')]);\n            $base->unam_echoSuccess($larr['status_removed']);\n            break;\n        case 'miner-config':\n            $base->unam_dbUpdate(getConn(), 'miners', ['ms_config'=>getParam('config')], ['ms_minerID'=>getParam('index')]);\n            $base->unam_echoSuccess($larr['status_updated']);\n            break;\n        case 'miner-remove':\n            getConn()->exec('PRAGMA foreign_keys = ON;');\n            $base->unam_dbDelete(getConn(), 'miners', ['ms_minerID'=>getParam('index')]);\n            getConn()->exec('PRAGMA wal_checkpoint(TRUNCATE);VACUUM;PRAGMA OPTIMIZE;PRAGMA foreign_keys = OFF;');\n            $base->unam_echoSuccess($larr['status_removed']);\n            break;\n        case 'miner-clean':\n            $base->unam_checkCondition(!preg_match(\"/^\\d+$/\", getParam('amount')) || getParam('amount') < 1, \"{$larr['invalid_input']}.\");\n            getConn()->exec('PRAGMA foreign_keys = ON;');\n            $minerclean = getConn()->prepare('DELETE FROM miners WHERE ms_lastConnection < ?;');\n            $minerclean->execute([date('Y-m-d H:i:s', strtotime('-'.getParam('amount').' day'))]);\n            getConn()->exec('PRAGMA wal_checkpoint(TRUNCATE);VACUUM;PRAGMA OPTIMIZE;PRAGMA foreign_keys = OFF;');\n            $base->unam_echoSuccess(\"{$larr['success']}!\");\n            break;\n        case 'miner-offline':\n            $_SESSION['hide_offline_miners'] = !($_SESSION['hide_offline_miners'] ?? false);\n            $base->unam_echoSuccess(\"{$larr['success']}!\");\n            break;\n        case 'miner-history':\n            $base->unam_checkCondition(!getParam('index'), \"{$larr['invalid']} ID.\");\n            $hashratecon = getConn()->prepare(\"SELECT hr_algorithm, SUM(hr_hashrate) AS hashrate, hr_date FROM hashrate WHERE hr_minerID = ? GROUP BY hr_date, hr_algorithm ORDER BY hr_date\");\n            $hashratecon->execute([getParam('index')]);\n            $hashrate = $hashratecon->fetchAll(PDO::FETCH_ASSOC);\n\n            if (!empty($hashrate)) {\n                $hashratearr = [];\n                foreach ($hashrate as $value) {\n                    $hashratearr[] = ['x' => date('Y-m-d H:i:s', $value['hr_date']), 'y' => $base->unam_sanitize($value['hashrate'])];\n                }\n                $base->unam_echoSuccess(\"<canvas class='hook-chart' data-chart-type='hashrate' data-chart-config='\".json_encode(['type'=>'bar', 'data'=>['datasets'=>[['label'=>$hashrate[0]['hr_algorithm'], 'data'=>$hashratearr, 'fill'=>true]]], 'options'=>['responsive'=>true, 'scales'=>['x'=>['type'=>'time', 'max'=>date('Y-m-d H:i:00'), 'min'=>$hashratearr[0]['x'], 'time'=>['minUnit'=>'minute']], 'y'=>['min'=>0]]]]).\"'></canvas>\");\n            } else {\n                $base->unam_echoFailure($larr['no_hashrate_for_miner']);\n            }\n            break;\n        case 'ipblock-add':\n            $ip = getParam('ip') ?: getParam('index');\n            $base->unam_checkCondition(!filter_var($ip, FILTER_VALIDATE_IP), \"{$larr['invalid']} IP.\");\n            $base->unam_checkCondition(!empty($base->unam_dbSelect(getConn(), 'ipblocking', '*', ['ipb_ip'=>$ip])), $larr['ip_already_blocked']);\n            $base->unam_dbInsert(getConn(), 'ipblocking', ['ipb_ip'=>$ip, 'ipb_note'=>getParam('note'), 'ipb_datetime'=>$currentDate]);\n            $base->unam_echoSuccess($larr['status_added']);\n            break;\n        case 'ipblock-remove':\n            $base->unam_checkCondition(!getParam('index'), \"{$larr['invalid']} ID.\");\n            $base->unam_dbDelete(getConn(), 'ipblocking', ['ipb_blockID'=>getParam('index')]);\n            $base->unam_echoSuccess($larr['status_removed']);\n            break;\n    }\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-actions.php'"
        ]
    },
    {
        "files": [
            "'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/Exception.php'",
            "'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/ConnectionException.php'",
            "'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/Observer/Log.php'"
        ],
        "content": "'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/Exception.php'\n:<?php\n\n\n\nrequire_once 'PEAR/Exception.php';\n\n\nclass HTTP_Request2_Exception extends PEAR_Exception\n{\n\n    const INVALID_ARGUMENT   = 1;\n\n    const MISSING_VALUE      = 2;\n\n    const MISCONFIGURATION   = 3;\n\n    const READ_ERROR         = 4;\n\n\n    const MALFORMED_RESPONSE = 10;\n\n    const DECODE_ERROR       = 20;\n\n    const TIMEOUT            = 30;\n\n    const TOO_MANY_REDIRECTS = 40;\n\n    private $_nativeCode;\n\n\n    public function __construct($message = null, $code = null, $nativeCode = null)\n    {\n        parent::__construct($message, $code);\n        $this->_nativeCode = $nativeCode;\n    }\n\n\n    public function getNativeCode()\n    {\n        return $this->_nativeCode;\n    }\n}\n\n\nrequire_once 'HTTP/Request2/ConnectionException.php';\nrequire_once 'HTTP/Request2/LogicException.php';\nrequire_once 'HTTP/Request2/MessageException.php';\nrequire_once 'HTTP/Request2/NotImplementedException.php';\n\n?>\n'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/ConnectionException.php'\n:<?php\n\n\n\nclass HTTP_Request2_ConnectionException extends HTTP_Request2_Exception\n{\n}\n\n?>\n'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/Observer/Log.php'\n:<?php\n\n\n\nrequire_once 'HTTP/Request2/Exception.php';\n\n\nclass HTTP_Request2_Observer_Log implements SplObserver\n{\n\n\n\n    protected $target = null;\n\n\n    public $events = [\n        'connect',\n        'sentHeaders',\n        'sentBody',\n        'receivedHeaders',\n        'receivedBody',\n        'disconnect',\n    ];\n\n\n\n\n\n    public function __construct($target = 'php:\n    {\n        if (!empty($events)) {\n            $this->events = $events;\n        }\n        if (is_resource($target) || $target instanceof Log) {\n            $this->target = $target;\n        } elseif (false === ($this->target = @fopen($target, 'ab'))) {\n            throw new HTTP_Request2_Exception(\"Unable to open '{$target}'\");\n        }\n    }\n\n\n\n\n\n    public function update(SplSubject $subject)\n    {\n        $event = $subject->getLastEvent();\n        if (!in_array($event['name'], $this->events)) {\n            return;\n        }\n\n        switch ($event['name']) {\n        case 'connect':\n            $this->log('* Connected to ' . $event['data']);\n            break;\n        case 'sentHeaders':\n            $headers = explode(\"\\r\\n\", $event['data']);\n            array_pop($headers);\n            foreach ($headers as $header) {\n                $this->log('> ' . $header);\n            }\n            break;\n        case 'sentBody':\n            $this->log('> ' . $event['data'] . ' byte(s) sent');\n            break;\n        case 'receivedHeaders':\n            $this->log(sprintf(\n                '< HTTP/%s %s %s', $event['data']->getVersion(),\n                $event['data']->getStatus(), $event['data']->getReasonPhrase()\n            ));\n            $headers = $event['data']->getHeader();\n            foreach ($headers as $key => $val) {\n                $this->log('< ' . $key . ': ' . $val);\n            }\n            $this->log('< ');\n            break;\n        case 'receivedBody':\n            $this->log($event['data']->getBody());\n            break;\n        case 'disconnect':\n            $this->log('* Disconnected');\n            break;\n        }\n    }\n\n\n\n\n\n    protected function log($message)\n    {\n        if ($this->target instanceof Log) {\n            $this->target->debug($message);\n        } elseif (is_resource($this->target)) {\n            fwrite($this->target, $message . \"\\r\\n\");\n        }\n    }\n\n\n}\n\n?>",
        "gt": [
            "'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/ConnectionException.php'",
            "'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/Exception.php'",
            "'XVideos-PornHub-RedTube-API/api-for-own-servers/HTTP/Request2/Observer/Log.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/class/db.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/class/db.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once dirname(__DIR__).'/config.php';\n$conn = null;\n\nfunction getConn() {\n    global $conn, $config;\n    if($conn) {\n        return $conn;\n    } else {\n        $connectionString = \"sqlite:{$config['db_file']}\";\n        try {\n            $conn = new PDO($connectionString, NULL, NULL, [\n                PDO::ATTR_TIMEOUT=>60,\n                PDO::ATTR_PERSISTENT=>false,\n                PDO::ATTR_ERRMODE=>PDO::ERRMODE_EXCEPTION,\n                PDO::ATTR_EMULATE_PREPARES=>false,\n                PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC\n            ]);\n            $conn->exec('PRAGMA journal_mode = WAL;PRAGMA synchronous = OFF;PRAGMA temp_store = MEMORY;PRAGMA foreign_keys = OFF;PRAGMA mmap_size = 268435456;PRAGMA cache_size = -32000;PRAGMA journal_size_limit = 10000000;');\n            return $conn;\n        } catch(PDOException $e) {\n            if($config['errorlog_enable']) {\n                file_put_contents(dirname(__DIR__).\"/__UNAM_LIB/Logs/db-error-\".date('d-m-Y').\".log\", \"ERROR: {$e->getMessage()}\\r\\n\", FILE_APPEND);\n            }\n        }\n    }\n    return false;\n}\n\nfunction closeConn() {\n    global $conn;\n    $conn = null;\n}\n'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}\n'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/assets/php/styles.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'security.php';\n?><meta charset=\"utf-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n<meta name=\"robots\" content=\"noindex, nofollow\">\n\n<link rel=\"icon\" type=\"image/png\" href=\"../assets/img/favicon.png\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/fontawesome.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/fontawesome-free/css/solid.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/izitoast/iziToast.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/select2/select2.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/jquery-confirm/jquery-confirm.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/modules/datatables/datatables.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/adminlte.min.css\">\n<link rel=\"stylesheet\" href=\"../assets/css/custom.css\">",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/class/db.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/styles.php'"
        ]
    },
    {
        "files": [
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/otphp/lib/hotp.php'",
            "'cpanel-UAPI-php-class/cpaneluapi.class.php'"
        ],
        "content": "'cpanel-UAPI-php-class/otphp/lib/otphp.php'\n:<?php\n\n\nrequire_once dirname(__FILE__).'/../vendor/libs.php';\nrequire_once dirname(__FILE__).'/otp.php';\nrequire_once dirname(__FILE__).'/hotp.php';\nrequire_once dirname(__FILE__).'/totp.php';\n\n\n'cpanel-UAPI-php-class/otphp/lib/hotp.php'\n:<?php\n\n\nnamespace OTPHP {\n\n  class HOTP extends OTP {\n\n    public function at($count) {\n      return $this->generateOTP($count);\n    }\n\n\n\n    public function verify($otp, $counter) {\n      return ($otp == $this->at($counter));\n    }\n\n\n    public function provisioning_uri($name, $initial_count) {\n      return \"otpauth:\n    }\n  }\n\n}\n\n'cpanel-UAPI-php-class/cpaneluapi.class.php'\n:<?php\n\n\n\n\nclass cpanelAPI\n{\n    public $version = '2.0';\n    public $ssl = 1;\n    public $port = 2083;\n    public $server;\n    public $maxredirect = 0;\n    public $user;\n    public $json = '';\n\n    protected $scope;\n    protected $api;\n    protected $auth;\n    protected $pass;\n    protected $secret;\n    protected $type;\n    protected $session;\n    protected $method;\n    protected $requestUrl;\n    protected $eno;\n    protected $emes;\n    protected $token = FALSE;\n    protected $httpMethod = 'GET';\n    protected $postData = '';\n\n    function __construct($user, $pass, $server, $secret = FALSE)\n    {\n        $this->user = $user;\n        $this->pass = $pass;\n        $this->server = $server;\n        if ($secret) {\n            $this->secret = $secret;\n            $this->set2Fa();\n        }\n    }\n\n\n    protected function set2Fa()\n    {\n        require 'otphp/lib/otphp.php';\n        $totp = new \\OTPHP\\TOTP($this->secret);\n        $this->token = $totp->now();\n    }\n\n    public function __get($name)\n    {\n        switch (strtolower($name)) {\n            case 'get':\n                $this->httpMethod = 'GET';\n                break;\n            case 'post':\n                $this->httpMethod = 'POST';\n                break;\n            case 'api2':\n                $this->setApi('api2');\n                break;\n            case 'uapi':\n                $this->setApi('uapi');\n                break;\n            default:\n                $this->scope = $name;\n        }\n        return $this;\n    }\n\n\n    protected function setApi($api)\n    {\n        $this->api = $api;\n        $this->setMethod();\n        return $this;\n    }\n\n\n    protected function setMethod()\n    {\n        switch ($this->api) {\n            case 'uapi':\n                $this->method = '/execute/';\n                break;\n            case 'api2':\n                $this->method = '/json-api/cpanel/';\n                break;\n            default:\n                throw new Exception('$this->api is not set or is incorrectly set. The only available options are \\'uapi\\' or \\'api2\\'');\n        }\n        return $this;\n    }\n\n\n    public function __toString()\n    {\n        return $this->json;\n    }\n\n\n    public function __call($name, $arguments)\n    {\n        if (count($arguments) < 1 || !is_array($arguments[0]))\n            $arguments[0] = [];\n        $this->json = $this->APIcall($name, $arguments[0]);\n        return json_decode($this->json);\n    }\n\n\n    protected function APIcall($name, $arguments)\n    {\n        $this->auth = base64_encode($this->user . \":\" . $this->pass);\n        $this->type = $this->ssl == 1 ? \"https:\n        $this->requestUrl = $this->type . $this->server . ':' . $this->port . $this->method;\n        switch ($this->api) {\n            case 'uapi':\n                $this->requestUrl .= ($this->scope != '' ? $this->scope . \"/\" : '') . $name . '?';\n                break;\n            case 'api2':\n                if ($this->scope == '') {\n                    throw new Exception('Scope must be set.');\n                }\n                $this->requestUrl .= '?cpanel_jsonapi_user=' . $this->user . '&cpanel_jsonapi_apiversion=2&cpanel_jsonapi_module=' . $this->scope . '&cpanel_jsonapi_func=' . $name . '&';\n                break;\n            default:\n                throw new Exception('$this->api is not set or is incorrectly set. The only available options are \\'uapi\\' or \\'api2\\'');\n        }\n        if($this->httpMethod == 'GET') {\n            $this->requestUrl .= http_build_query($arguments);\n        }\n        if($this->httpMethod == 'POST'){\n            $this->postData = $arguments;\n        }\n\n        return $this->curl_request($this->requestUrl);\n    }\n\n\n    protected function curl_request($url)\n    {\n        $httpHeaders = array(\"Authorization: Basic \" . $this->auth);\n\n        if ($this->token) {\n            $httpHeaders[] = \"X-CPANEL-OTP: \" . $this->token;\n        }\n        $ch = curl_init();\n        if($this->httpMethod == 'POST'){\n            $httpHeaders[] = \"Content-type: multipart/form-data\";\n            curl_setopt($ch,CURLOPT_POSTFIELDS, $this->postData);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $httpHeaders);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 100020);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n\n        $content = $this->curl_exec_follow($ch, $this->maxredirect);\n        $this->eno = curl_errno($ch);\n        $this->emes = curl_error($ch);\n\n        curl_close($ch);\n\n        return $content;\n    }\n\n\n    protected function curl_exec_follow($ch, &$maxredirect = null)\n    {\n\n\n        $user_agent = \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.5)\" .\n            \" Gecko/20041107 Firefox/1.0\";\n        curl_setopt($ch, CURLOPT_USERAGENT, $user_agent);\n\n        $mr = $maxredirect === null ? 5 : intval($maxredirect);\n\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $mr > 0);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $mr);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n        return curl_exec($ch);\n    }\n\n\n    public function getLastRequest()\n    {\n        return $this->requestUrl;\n    }\n\n\n    public function getError()\n    {\n        if (!empty($this->eno)) {\n            return ['no' => $this->eno, 'message' => $this->emes];\n        }\n        return FALSE;\n    }\n}\n",
        "gt": [
            "'cpanel-UAPI-php-class/otphp/lib/hotp.php'",
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/cpaneluapi.class.php'"
        ]
    },
    {
        "files": [
            "'woocommerce-product-tables-feature-plugin/includes/data-stores/class-wc-product-grouped-data-store-custom-table.php'",
            "'woocommerce-product-tables-feature-plugin/tests/class-wcpt-disabled-bw-compat-unit-tests-bootstrap.php'",
            "'woocommerce-product-tables-feature-plugin/woocommerce-product-tables-feature-plugin.php'",
            "'woocommerce-product-tables-feature-plugin/includes/class-wc-product-tables-bootstrap.php'"
        ],
        "content": "'woocommerce-product-tables-feature-plugin/includes/data-stores/class-wc-product-grouped-data-store-custom-table.php'\n:<?php\n\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nclass WC_Product_Grouped_Data_Store_Custom_Table extends WC_Product_Data_Store_Custom_Table implements WC_Object_Data_Store_Interface {\n\n\n\tprotected function handle_updated_props( &$product ) {\n\t\tif ( in_array( 'children', $this->updated_props, true ) ) {\n\t\t\t$this->update_prices_from_children( $product );\n\t\t}\n\t\tparent::handle_updated_props( $product );\n\t}\n\n\n\tpublic function sync_price( &$product ) {\n\t\t$this->update_prices_from_children( $product );\n\t}\n\n\n\tprotected function update_prices_from_children( &$product ) {\n\t\tglobal $wpdb;\n\n\t\t$min_price = $wpdb->get_var(\n\t\t\t$wpdb->prepare(\n\t\t\t\t\"SELECT price\n\t\t\t\tFROM {$wpdb->prefix}wc_products as products\n\t\t\t\tLEFT JOIN {$wpdb->posts} as posts ON products.product_id = posts.ID\n\t\t\t\tWHERE posts.post_parent = %d\n\t\t\t\torder by price ASC\",\n\t\t\t\t$product->get_id()\n\t\t\t)\n\t\t);\n\n\t\t$wpdb->update(\n\t\t\t\"{$wpdb->prefix}wc_products\",\n\t\t\tarray(\n\t\t\t\t'price' => wc_format_decimal( $min_price ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'product_id' => $product->get_id(),\n\t\t\t)\n\t\t);\n\t}\n\n\n\tprotected function read_extra_data( &$product ) {}\n}\n\n'woocommerce-product-tables-feature-plugin/tests/class-wcpt-disabled-bw-compat-unit-tests-bootstrap.php'\n:<?php\n\n\n\nclass WCPT_Disabled_BW_Compat_Unit_Tests_Bootstrap {\n\n\n\tprotected static $instance = null;\n\n\n\tpublic $wp_tests_dir;\n\n\n\tpublic function __construct() {\n\t\t$this->wp_tests_dir = getenv( 'WP_TESTS_DIR' ) ? getenv( 'WP_TESTS_DIR' ) : '/tmp/wordpress-tests-lib';\n\n\n\t\trequire_once $this->wp_tests_dir . '/includes/functions.php';\n\n\t\ttests_add_filter( 'muplugins_loaded', array( $this, 'load_plugin' ) );\n\t\ttests_add_filter( 'setup_theme', array( $this, 'install' ) );\n\n\t\trequire_once dirname( dirname( dirname( __FILE__ ) ) ) . '/woocommerce/tests/bootstrap.php';\n\t}\n\n\n\tpublic function load_plugin() {\n\t\tdefine( 'WC_PRODUCT_TABLES_DISABLE_BW_COMPAT', true );\n\t\trequire_once dirname( dirname( __FILE__ ) ) . '/woocommerce-product-tables-feature-plugin.php';\n\t}\n\n\n\tpublic function install() {\n\t\tglobal $wpdb;\n\n\t\t$wpdb->query( \"DROP TABLE IF EXISTS {$wpdb->prefix}wc_products\" );\n\t\t$wpdb->query( \"DROP TABLE IF EXISTS {$wpdb->prefix}wc_product_attributes\" );\n\t\t$wpdb->query( \"DROP TABLE IF EXISTS {$wpdb->prefix}wc_product_attribute_values\" );\n\t\t$wpdb->query( \"DROP TABLE IF EXISTS {$wpdb->prefix}wc_product_downloads\" );\n\t\t$wpdb->query( \"DROP TABLE IF EXISTS {$wpdb->prefix}wc_product_relationships\" );\n\t\t$wpdb->query( \"DROP TABLE IF EXISTS {$wpdb->prefix}wc_product_variation_attribute_values\" );\n\n\t\tWC_Product_Tables_Install::activate();\n\t}\n\n\n\tpublic static function instance() {\n\t\tif ( is_null( self::$instance ) ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\t\treturn self::$instance;\n\t}\n}\n\nWCPT_Disabled_BW_Compat_Unit_Tests_Bootstrap::instance();\n\n'woocommerce-product-tables-feature-plugin/woocommerce-product-tables-feature-plugin.php'\n:<?php\n\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\ndefine( 'WC_PRODUCT_TABLES_FILE', __FILE__ );\n\n\nfunction wc_custom_product_tables_need_wc() {\n\tprintf( '<div class=\"%1$s\"><p>%2$s</p></div>', esc_attr( 'notice notice-error' ), esc_html( 'You need to have WooCommerce 3.5 development version or above installed to run the Custom Product Tables plugin.', 'woocommerce' ) );\n}\n\n\nfunction wc_custom_product_tables_bootstrap() {\n\tif ( ! class_exists( 'WooCommerce' ) ) {\n\t\tif ( is_admin() ) {\n\t\t\tadd_action( 'admin_notices', 'wc_custom_product_tables_need_wc' );\n\t\t}\n\t\treturn;\n\t}\n\n\tif ( version_compare( WC_VERSION, '3.5.dev', '<' ) ) {\n\t\tWC_Admin_Notices::add_custom_notice( 'wc_custom_product_tables_need_wc', __( 'You need WooCommerce 3.5 development version or higher to run the Custom Product Tables plugin.', 'woocommerce' ) );\n\n\t\treturn;\n\t}\n\n\n\trequire_once dirname( __FILE__ ) . '/includes/class-wc-product-tables-bootstrap.php';\n}\n\nadd_action( 'plugins_loaded', 'wc_custom_product_tables_bootstrap' );\n\n\nfunction wc_custom_product_tables_activate() {\n\tinclude_once dirname( __FILE__ ) . '/includes/class-wc-product-tables-install.php';\n\tWC_Product_Tables_Install::activate();\n}\n\nregister_activation_hook( WC_PRODUCT_TABLES_FILE, 'wc_custom_product_tables_activate' );\n\n'woocommerce-product-tables-feature-plugin/includes/class-wc-product-tables-bootstrap.php'\n:<?php\n\n\nif ( ! defined( 'ABSPATH' ) ) {\n\treturn;\n}\n\n\nclass WC_Product_Tables_Bootstrap {\n\n\n\tpublic function __construct() {\n\t\t$this->includes();\n\t\tadd_filter( 'woocommerce_data_stores', array( $this, 'replace_core_data_stores' ) );\n\t}\n\n\n\tpublic function includes() {\n\t\tinclude_once dirname( __FILE__ ) . '/class-wc-product-tables-backwards-compatibility.php';\n\t\tinclude_once dirname( __FILE__ ) . '/class-wc-product-tables-install.php';\n\t\tinclude_once dirname( __FILE__ ) . '/class-wc-product-tables-migrate-data.php';\n\t\tinclude_once dirname( __FILE__ ) . '/class-wc-product-tables-query.php';\n\t\tinclude_once dirname( __FILE__ ) . '/class-wc-product-tables-post-data.php';\n\t\tinclude_once dirname( __FILE__ ) . '/compatibility/hacks.php';\n\t\tinclude_once dirname( __FILE__ ) . '/compatibility/class-wc-product-attribute.php';\n\n\t\tif ( defined( 'WP_CLI' ) && WP_CLI ) {\n\t\t\tinclude_once dirname( __FILE__ ) . '/class-wc-product-tables-cli.php';\n\t\t}\n\n\t\tif ( is_admin() ) {\n\t\t\tinclude_once dirname( __FILE__ ) . '/admin/meta-boxes/class-wc-product-tables-meta-box-product-data.php';\n\t\t}\n\n\t\t$this->query = new WC_Product_Tables_Query();\n\t}\n\n\n\tpublic function replace_core_data_stores( $stores ) {\n\t\tinclude_once dirname( __FILE__ ) . '/data-stores/class-wc-product-data-store-custom-table.php';\n\t\tinclude_once dirname( __FILE__ ) . '/data-stores/class-wc-product-grouped-data-store-custom-table.php';\n\t\tinclude_once dirname( __FILE__ ) . '/data-stores/class-wc-product-variable-data-store-custom-table.php';\n\t\tinclude_once dirname( __FILE__ ) . '/data-stores/class-wc-product-variation-data-store-custom-table.php';\n\n\t\t$stores['product']           = 'WC_Product_Data_Store_Custom_Table';\n\t\t$stores['product-grouped']   = 'WC_Product_Grouped_Data_Store_Custom_Table';\n\t\t$stores['product-variable']  = 'WC_Product_Variable_Data_Store_Custom_Table';\n\t\t$stores['product-variation'] = 'WC_Product_Variation_Data_Store_Custom_Table';\n\n\t\treturn $stores;\n\t}\n}\n\nnew WC_Product_Tables_Bootstrap();\n",
        "gt": [
            "'woocommerce-product-tables-feature-plugin/includes/data-stores/class-wc-product-grouped-data-store-custom-table.php'",
            "'woocommerce-product-tables-feature-plugin/includes/class-wc-product-tables-bootstrap.php'",
            "'woocommerce-product-tables-feature-plugin/woocommerce-product-tables-feature-plugin.php'",
            "'woocommerce-product-tables-feature-plugin/tests/class-wcpt-disabled-bw-compat-unit-tests-bootstrap.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-actions.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}\n'UnamWebPanel/UnamWebPanel/api/ajax-actions.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once dirname(__DIR__).'/assets/php/security.php';\n\nfunction checkJSON($input) {\n    json_decode($input, true);\n    if(json_last_error() != JSON_ERROR_NONE) {\n        return false;\n    }\n    return true;\n}\n\nif(!empty(getParam('action'))) {\n    switch (getParam('action')) {\n        case 'config-add':\n            $base->unam_checkCondition(!checkJSON($_POST['data']), \"{$larr['invalid']} JSON.\");\n            $base->unam_dbInsert(getConn(), 'configs', ['cf_name'=>getParam('name'), 'cf_data'=>$_POST['data']]);\n            $base->unam_echoSuccess($larr['status_added']);\n            break;\n        case 'config-update':\n            $base->unam_checkCondition(!checkJSON($_POST['data']), \"{$larr['invalid']} JSON.\");\n            $base->unam_dbUpdate(getConn(), 'configs', ['cf_data'=>$_POST['data']], ['cf_configID'=>getParam('index')]);\n            $base->unam_echoSuccess($larr['status_updated']);\n            break;\n        case 'config-remove':\n            $base->unam_checkCondition(getParam('index') <= 2, $larr['cannot_remove_default_configuration']);\n            $base->unam_dbDelete(getConn(), 'configs', ['cf_configID'=>getParam('index')]);\n            $base->unam_echoSuccess($larr['status_removed']);\n            break;\n        case 'miner-config':\n            $base->unam_dbUpdate(getConn(), 'miners', ['ms_config'=>getParam('config')], ['ms_minerID'=>getParam('index')]);\n            $base->unam_echoSuccess($larr['status_updated']);\n            break;\n        case 'miner-remove':\n            getConn()->exec('PRAGMA foreign_keys = ON;');\n            $base->unam_dbDelete(getConn(), 'miners', ['ms_minerID'=>getParam('index')]);\n            getConn()->exec('PRAGMA wal_checkpoint(TRUNCATE);VACUUM;PRAGMA OPTIMIZE;PRAGMA foreign_keys = OFF;');\n            $base->unam_echoSuccess($larr['status_removed']);\n            break;\n        case 'miner-clean':\n            $base->unam_checkCondition(!preg_match(\"/^\\d+$/\", getParam('amount')) || getParam('amount') < 1, \"{$larr['invalid_input']}.\");\n            getConn()->exec('PRAGMA foreign_keys = ON;');\n            $minerclean = getConn()->prepare('DELETE FROM miners WHERE ms_lastConnection < ?;');\n            $minerclean->execute([date('Y-m-d H:i:s', strtotime('-'.getParam('amount').' day'))]);\n            getConn()->exec('PRAGMA wal_checkpoint(TRUNCATE);VACUUM;PRAGMA OPTIMIZE;PRAGMA foreign_keys = OFF;');\n            $base->unam_echoSuccess(\"{$larr['success']}!\");\n            break;\n        case 'miner-offline':\n            $_SESSION['hide_offline_miners'] = !($_SESSION['hide_offline_miners'] ?? false);\n            $base->unam_echoSuccess(\"{$larr['success']}!\");\n            break;\n        case 'miner-history':\n            $base->unam_checkCondition(!getParam('index'), \"{$larr['invalid']} ID.\");\n            $hashratecon = getConn()->prepare(\"SELECT hr_algorithm, SUM(hr_hashrate) AS hashrate, hr_date FROM hashrate WHERE hr_minerID = ? GROUP BY hr_date, hr_algorithm ORDER BY hr_date\");\n            $hashratecon->execute([getParam('index')]);\n            $hashrate = $hashratecon->fetchAll(PDO::FETCH_ASSOC);\n\n            if (!empty($hashrate)) {\n                $hashratearr = [];\n                foreach ($hashrate as $value) {\n                    $hashratearr[] = ['x' => date('Y-m-d H:i:s', $value['hr_date']), 'y' => $base->unam_sanitize($value['hashrate'])];\n                }\n                $base->unam_echoSuccess(\"<canvas class='hook-chart' data-chart-type='hashrate' data-chart-config='\".json_encode(['type'=>'bar', 'data'=>['datasets'=>[['label'=>$hashrate[0]['hr_algorithm'], 'data'=>$hashratearr, 'fill'=>true]]], 'options'=>['responsive'=>true, 'scales'=>['x'=>['type'=>'time', 'max'=>date('Y-m-d H:i:00'), 'min'=>$hashratearr[0]['x'], 'time'=>['minUnit'=>'minute']], 'y'=>['min'=>0]]]]).\"'></canvas>\");\n            } else {\n                $base->unam_echoFailure($larr['no_hashrate_for_miner']);\n            }\n            break;\n        case 'ipblock-add':\n            $ip = getParam('ip') ?: getParam('index');\n            $base->unam_checkCondition(!filter_var($ip, FILTER_VALIDATE_IP), \"{$larr['invalid']} IP.\");\n            $base->unam_checkCondition(!empty($base->unam_dbSelect(getConn(), 'ipblocking', '*', ['ipb_ip'=>$ip])), $larr['ip_already_blocked']);\n            $base->unam_dbInsert(getConn(), 'ipblocking', ['ipb_ip'=>$ip, 'ipb_note'=>getParam('note'), 'ipb_datetime'=>$currentDate]);\n            $base->unam_echoSuccess($larr['status_added']);\n            break;\n        case 'ipblock-remove':\n            $base->unam_checkCondition(!getParam('index'), \"{$larr['invalid']} ID.\");\n            $base->unam_dbDelete(getConn(), 'ipblocking', ['ipb_blockID'=>getParam('index')]);\n            $base->unam_echoSuccess($larr['status_removed']);\n            break;\n    }\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-actions.php'"
        ]
    },
    {
        "files": [
            "'shiny_geoip/src/Action/ShowHomepageAction.php'",
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/cli/app.php'",
            "'shiny_geoip/src/bootstrap.php'"
        ],
        "content": "'shiny_geoip/src/Action/ShowHomepageAction.php'\n:<?php\n\ndeclare(strict_types=1);\n\nnamespace Nekudo\\ShinyGeoip\\Action;\n\nuse Nekudo\\ShinyGeoip\\Domain\\LocationDomain;\nuse Nekudo\\ShinyGeoip\\Responder\\ShowHomepageResponder;\n\nclass ShowHomepageAction\n{\n\n    protected $config = [];\n\n    public function __construct(array $config)\n    {\n        $this->config = $config;\n    }\n\n\n    public function __invoke()\n    {\n\n        $domain = new LocationDomain($this->config);\n        $userIp = $_SERVER['REMOTE_ADDR'];\n        if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n            $userIp = $_SERVER['HTTP_X_FORWARDED_FOR'];\n        }\n        $record = $domain->getRecord($userIp);\n        if (!empty($record)) {\n            $record = $domain->shortenRecord($record, 'en');\n        }\n\n\n        $responder = new ShowHomepageResponder;\n        $responder->showHomepage($record);\n    }\n}\n\n'shiny_geoip/src/bootstrap_cli.php'\n:<?php\n\ndeclare(strict_types=1);\n\n\ninclude __DIR__ . '/bootstrap.php';\n\n\nrequire_once __DIR__ . '/ShinyGeoipCli.php';\nrequire_once __DIR__ . '/Action/Cli/CliAction.php';\nrequire_once __DIR__ . '/Action/Cli/BenchmarkAction.php';\nrequire_once __DIR__ . '/Action/Cli/ShowHelpAction.php';\nrequire_once __DIR__ . '/Action/Cli/UpdateMmdbAction.php';\nrequire_once __DIR__ . '/Responder/CliResponder.php';\n\n'shiny_geoip/cli/app.php'\n:<?php\n\nrequire_once __DIR__ . '/../src/bootstrap_cli.php';\n\n$app = new \\Nekudo\\ShinyGeoip\\ShinyGeoipCli($config);\n$app->dispatch($argv);\n\n'shiny_geoip/src/bootstrap.php'\n:<?php\n\ndeclare(strict_types=1);\n\ndefine('PROJECT_ROOT', __DIR__ . '/../');\n\n$config = include PROJECT_ROOT . 'config/config.php';\n\nrequire_once PROJECT_ROOT . 'src/ShinyGeoip.php';\nrequire_once PROJECT_ROOT . 'src/Action/ShowHomepageAction.php';\nrequire_once PROJECT_ROOT . 'src/Action/ShowLocationAction.php';\nrequire_once PROJECT_ROOT . 'src/Domain/LocationDomain.php';\nrequire_once PROJECT_ROOT . 'src/Responder/HttpResponder.php';\nrequire_once PROJECT_ROOT . 'src/Responder/ShowLocationResponder.php';\nrequire_once PROJECT_ROOT . 'src/Responder/ShowHomepageResponder.php';\n\n\nif (!class_exists('MaxMind\\Db\\Reader')) {\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Decoder.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Util.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/Metadata.php';\n    require_once PROJECT_ROOT . 'vendor/MaxMind/Db/Reader/InvalidDatabaseException.php';\n}\n",
        "gt": [
            "'shiny_geoip/src/Action/ShowHomepageAction.php'",
            "'shiny_geoip/src/bootstrap.php'",
            "'shiny_geoip/src/bootstrap_cli.php'",
            "'shiny_geoip/cli/app.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/devdocs.php'\n:<?php\n\nini_set('display_errors', 0);\nini_set('memory_limit', '-1');\n\nuse CFPropertyList\\CFPropertyList;\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocs {\n  private static $cacheDirectory = 'cache/';\n\n  private $workflows;\n  private $results;\n  private $baseUrl;\n  private $cacheLife;\n  private $template;\n\n  public function __construct($query, $doc) {\n    $this->baseUrl = getenv('BASE_URL') ?: 'https:\n    $this->cacheLife = (int)(getenv('CACHE_LIFE') ?: '7');\n    $this->template = getenv('TEMPLATE') ?: '$baseUrl$documentation/$path';\n    $this->workflows = new Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n    $this->results = [\n      0 => [],\n      1 => [],\n      2 => []\n    ];\n\n    $documentations = $this->getDocumentations();\n    if (!isset($doc) || empty($doc)) {\n      $rootPath = str_replace('/scripts', '', $this->workflows->path());\n      $pList = (new CFPropertyList($rootPath . '/info.plist'))->toArray();\n      foreach ($pList['connections'] as $key => $value) {\n        if (array_key_exists($key, $documentations)) {\n          $this->checkCache($key);\n          $this->processDocumentation($key, $query);\n        }\n      }\n    } else {\n      $this->checkCache($doc);\n      $this->processDocumentation($doc, $query);\n    }\n    $this->render();\n  }\n\n  private function getDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      $docContent = $this->workflows->fetch($this->baseUrl . 'docs/docs.json');\n      file_put_contents($docFile, $docContent);\n    } else {\n      $docContent = file_get_contents($docFile);\n    }\n    $docs = json_decode($docContent);\n    $documentations = [];\n    foreach ($docs as $doc) {\n      $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n      $documentations[$doc->slug] = $doc;\n    }\n    return $documentations;\n  }\n\n  private function checkCache($documentation) {\n    if (!file_exists(self::$cacheDirectory)) {\n      mkdir(self::$cacheDirectory);\n    }\n    $docFile = self::$cacheDirectory . $documentation . '.json';\n    error_log(\"Checking existence of cache at $docFile\");\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      error_log(\"Download doc for $documentation at \\\"\" . $this->baseUrl . 'docs/' . $documentation . '/index.json') . \"\\\"\";\n      file_put_contents($docFile, file_get_contents($this->baseUrl . 'docs/' . $documentation . '/index.json'));\n    }\n  }\n\n  private function processDocumentation($documentation, $query) {\n\n    $query = strtolower($query);\n    $data = json_decode(file_get_contents(self::$cacheDirectory . $documentation . '.json'));\n    if ($data === null) {\n      unlink(self::$cacheDirectory . $documentation . '.json');\n    }\n\n    $entries = $data->entries;\n\n    $found = [];\n    foreach ($entries as $key => $result) {\n      $value = strtolower(trim($result->name));\n      $description = strtolower(utf8_decode(strip_tags($result->type)));\n\n      if (empty($query)) {\n        $found[$value] = true;\n        $result->documentation = $documentation;\n        $this->results[0][] = $result;\n      } else if (strpos($value, $query) === 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[0][] = $result;\n        }\n      } else if (strpos($value, $query) > 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[1][] = $result;\n        }\n      } else if (strpos($description, $query) !== false) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[2][] = $result;\n        }\n      }\n    }\n\n    if ((count($this->results[0]) === 0) && (count($this->results[1]) === 0) && (count($this->results[2]) === 0)) {\n      $this->results[0][] = (object) [\n        'name' => 'No results.',\n        'documentation' => $documentation\n      ];\n    }\n\n  }\n\n  private function render() {\n    foreach ($this->results as $level => $results) {\n      foreach ($results as $result) {\n        $title = empty($result->type) ? $result->name : \"$result->name ($result->type)\";\n        $vars = array(\n          '$baseUrl' => $this->baseUrl,\n          '$documentation' => $result->documentation,\n          '$docalt' => str_replace(\"~\", \"-\", $result->documentation),\n          '$name' => $result->name,\n          '$path' => $result->path\n        );\n\n        $url = strtr($this->template, $vars);\n        $this->workflows->result($result->name, $url, $title, $result->path, $result->documentation . '.png', 'yes', $result->name);\n      }\n    }\n    echo $this->workflows->toxml();\n  }\n}\n\n$query = isset($query) ? $query : '';\n$documentation = isset($documentation) ? $documentation : '';\nnew DevDocs($query, $documentation);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/config.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/safety-check.php'",
            "'UnamWebPanel/UnamWebPanel/index.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/config.php'\n:<?php\n\n$config['password'] = 'UnamSanctam';\n\n\n$config['db_file'] = __DIR__.\"/db/unamwebpanel.db\";\n\n\n$config['hashrate_history'] = true;\n\n\n$config['hashrate_history_limit'] = 1440;\n\n\n$config['failedlogin_blocktime'] = 15;\n$config['failedlogin_blocktries'] = 5;\n\n\n$config['errorlog_enable'] = true;\n\n$config['languages'] = [\n    'en'=>'English',\n    'sv'=>'Swedish',\n    'fr'=>'French',\n    'de'=>'German',\n    'pl'=>'Polish',\n    'ru'=>'Russian',\n    'uk'=>'Ukrainian',\n    'es'=>'Spanish'\n];\n\n$config['unam_version'] = \"1.8.0\";\n\nglobal $config;\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/assets/php/safety-check.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once dirname(__DIR__, 2).'/config.php';\n\nif (!class_exists('PDO')) {\n    echo '<p style=\"color:red\">The required class PDO could not be found.</p>';\n    die();\n}\n\nif (!in_array('sqlite', PDO::getAvailableDrivers())) {\n    echo '<p style=\"color:red\">The required SQLite PDO driver is not enabled.</p>';\n    die();\n}\n\nif (!file_exists($config['db_file'])) {\n    echo \"<p style='color:red'>The SQLite database file specified in the configuration could not be found.</p>\";\n    die();\n}\n\n$db_folder = dirname($config['db_file']);\nif (!is_readable($db_folder)) {\n    echo \"<p style='color:red'>The folder containing the SQLite database ({$db_folder}) is not readable, please give the folder appropriate read permissions.</p>\";\n    die();\n}\n\nif (!is_writable($db_folder)) {\n    echo \"<p style='color:red'>The folder containing the SQLite database ({$db_folder}) is not writable, please give the folder appropriate write permissions.</p>\";\n    die();\n}\n\nif (!is_readable($config['db_file'])) {\n    echo \"<p style='color:red'>The SQLite database file ({$config['db_file']}) is not writable, please give the file appropriate write permissions.</p>\";\n    die();\n}\n\nif (!is_writable($config['db_file'])) {\n    echo \"<p style='color:red'>The SQLite database file ({$config['db_file']}) is not writable, please give the file appropriate write permissions.</p>\";\n    die();\n}\n'UnamWebPanel/UnamWebPanel/index.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'assets/php/session-header.php';\n\nif($loggedin) {\n    header('Location: pages/miners.php');\n} else {\n    header('Location: pages/login.php');\n}\ndie();",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/config.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/safety-check.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/index.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/devdocs.php'\n:<?php\n\nini_set('display_errors', 0);\nini_set('memory_limit', '-1');\n\nuse CFPropertyList\\CFPropertyList;\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocs {\n  private static $cacheDirectory = 'cache/';\n\n  private $workflows;\n  private $results;\n  private $baseUrl;\n  private $cacheLife;\n  private $template;\n\n  public function __construct($query, $doc) {\n    $this->baseUrl = getenv('BASE_URL') ?: 'https:\n    $this->cacheLife = (int)(getenv('CACHE_LIFE') ?: '7');\n    $this->template = getenv('TEMPLATE') ?: '$baseUrl$documentation/$path';\n    $this->workflows = new Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n    $this->results = [\n      0 => [],\n      1 => [],\n      2 => []\n    ];\n\n    $documentations = $this->getDocumentations();\n    if (!isset($doc) || empty($doc)) {\n      $rootPath = str_replace('/scripts', '', $this->workflows->path());\n      $pList = (new CFPropertyList($rootPath . '/info.plist'))->toArray();\n      foreach ($pList['connections'] as $key => $value) {\n        if (array_key_exists($key, $documentations)) {\n          $this->checkCache($key);\n          $this->processDocumentation($key, $query);\n        }\n      }\n    } else {\n      $this->checkCache($doc);\n      $this->processDocumentation($doc, $query);\n    }\n    $this->render();\n  }\n\n  private function getDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      $docContent = $this->workflows->fetch($this->baseUrl . 'docs/docs.json');\n      file_put_contents($docFile, $docContent);\n    } else {\n      $docContent = file_get_contents($docFile);\n    }\n    $docs = json_decode($docContent);\n    $documentations = [];\n    foreach ($docs as $doc) {\n      $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n      $documentations[$doc->slug] = $doc;\n    }\n    return $documentations;\n  }\n\n  private function checkCache($documentation) {\n    if (!file_exists(self::$cacheDirectory)) {\n      mkdir(self::$cacheDirectory);\n    }\n    $docFile = self::$cacheDirectory . $documentation . '.json';\n    error_log(\"Checking existence of cache at $docFile\");\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      error_log(\"Download doc for $documentation at \\\"\" . $this->baseUrl . 'docs/' . $documentation . '/index.json') . \"\\\"\";\n      file_put_contents($docFile, file_get_contents($this->baseUrl . 'docs/' . $documentation . '/index.json'));\n    }\n  }\n\n  private function processDocumentation($documentation, $query) {\n\n    $query = strtolower($query);\n    $data = json_decode(file_get_contents(self::$cacheDirectory . $documentation . '.json'));\n    if ($data === null) {\n      unlink(self::$cacheDirectory . $documentation . '.json');\n    }\n\n    $entries = $data->entries;\n\n    $found = [];\n    foreach ($entries as $key => $result) {\n      $value = strtolower(trim($result->name));\n      $description = strtolower(utf8_decode(strip_tags($result->type)));\n\n      if (empty($query)) {\n        $found[$value] = true;\n        $result->documentation = $documentation;\n        $this->results[0][] = $result;\n      } else if (strpos($value, $query) === 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[0][] = $result;\n        }\n      } else if (strpos($value, $query) > 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[1][] = $result;\n        }\n      } else if (strpos($description, $query) !== false) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[2][] = $result;\n        }\n      }\n    }\n\n    if ((count($this->results[0]) === 0) && (count($this->results[1]) === 0) && (count($this->results[2]) === 0)) {\n      $this->results[0][] = (object) [\n        'name' => 'No results.',\n        'documentation' => $documentation\n      ];\n    }\n\n  }\n\n  private function render() {\n    foreach ($this->results as $level => $results) {\n      foreach ($results as $result) {\n        $title = empty($result->type) ? $result->name : \"$result->name ($result->type)\";\n        $vars = array(\n          '$baseUrl' => $this->baseUrl,\n          '$documentation' => $result->documentation,\n          '$docalt' => str_replace(\"~\", \"-\", $result->documentation),\n          '$name' => $result->name,\n          '$path' => $result->path\n        );\n\n        $url = strtr($this->template, $vars);\n        $this->workflows->result($result->name, $url, $title, $result->path, $result->documentation . '.png', 'yes', $result->name);\n      }\n    }\n    echo $this->workflows->toxml();\n  }\n}\n\n$query = isset($query) ? $query : '';\n$documentation = isset($documentation) ? $documentation : '';\nnew DevDocs($query, $documentation);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'"
        ]
    },
    {
        "files": [
            "'es-wp-query/es-wp-query.php'",
            "'es-wp-query/class-es-wp-meta-query.php'",
            "'es-wp-query/tests/bootstrap.php'"
        ],
        "content": "'es-wp-query/es-wp-query.php'\n:<?php\n\n\n\n\ndefine( 'ES_WP_QUERY_PATH', dirname( __FILE__ ) );\n\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-query-wrapper.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-tax-query.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-date-query.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-meta-query.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-query-shoehorn.php';\nrequire_once ES_WP_QUERY_PATH . '/functions.php';\n\n'es-wp-query/class-es-wp-meta-query.php'\n:<?php\n\n\n\nclass ES_WP_Meta_Query extends WP_Meta_Query {\n\n\n\tprotected $es_query;\n\n\n\tpublic function __construct( $meta_query = false ) {\n\n\t\tparent::__construct( $meta_query );\n\n\t\t$this->queries_types_all = $this->queries_types_all_get(\n\t\t\t$this->queries\n\t\t);\n\t}\n\n\n\tprotected function queries_types_all_get( $meta_clauses ) {\n\t\t$queries_types = array();\n\n\t\tif ( ! is_array( $meta_clauses ) ) {\n\t\t\treturn array();\n\t\t}\n\n\t\tif ( empty( $meta_clauses ) ) {\n\t\t\treturn $meta_clauses;\n\t\t}\n\n\t\tforeach ( array_keys( $meta_clauses ) as $meta_clause_key ) {\n\t\t\tif ( $this->is_first_order_clause(\n\t\t\t\t$meta_clauses[ $meta_clause_key ]\n\t\t\t) ) {\n\n\n\n\t\t\t\tif ( isset( $meta_clauses[ $meta_clause_key ]['key'] ) ) {\n\t\t\t\t\t$queries_types[\n\t\t\t\t\t\t$meta_clause_key\n\t\t\t\t\t] = array(\n\t\t\t\t\t\t'key' => $meta_clauses[ $meta_clause_key ]['key'],\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t$queries_types[\n\t\t\t\t\t\t$meta_clause_key\n\t\t\t\t\t] = array(\n\t\t\t\t\t\t'key' => $meta_clause_key,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\n\t\t\t\tif ( isset(\n\t\t\t\t\t$meta_clauses[ $meta_clause_key ]['type']\n\t\t\t\t) ) {\n\t\t\t\t\t$queries_types[ $meta_clause_key ]['type'] =\n\t\t\t\t\t\t$meta_clauses[ $meta_clause_key ]['type'];\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t$recursive_result = $this->queries_types_all_get(\n\t\t\t\t\t$meta_clauses[ $meta_clause_key ]\n\t\t\t\t);\n\n\n\t\t\t\tif (\n\t\t\t\t\t( is_array( $recursive_result ) ) &&\n\t\t\t\t\t( ! empty( $recursive_result ) )\n\t\t\t\t) {\n\t\t\t\t\t$queries_types = array_merge(\n\t\t\t\t\t\t$queries_types,\n\t\t\t\t\t\t$recursive_result\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $queries_types;\n\t}\n\n\n\tpublic function get_dsl( $es_query, $type ) {\n\n\t\tif ( 'post' !== $type ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->es_query = $es_query;\n\n\t\t$filters = $this->get_dsl_clauses();\n\n\t\treturn apply_filters_ref_array( 'get_meta_dsl', array( $filters, $this->queries, $type, $this->es_query ) );\n\t}\n\n\n\tprotected function get_dsl_clauses() {\n\n\t\t$queries = $this->queries;\n\t\treturn $this->get_dsl_for_query( $queries );\n\t}\n\n\n\tprotected function get_dsl_for_query( &$query ) {\n\t\t$filters = array();\n\n\t\tforeach ( $query as $key => &$clause ) {\n\t\t\tif ( 'relation' === $key ) {\n\t\t\t\t$relation = $query['relation'];\n\t\t\t} elseif ( is_array( $clause ) ) {\n\t\t\t\tif ( $this->is_first_order_clause( $clause ) ) {\n\n\t\t\t\t\t$filters[] = $this->get_dsl_for_clause( $clause, $query, $key );\n\t\t\t\t} else {\n\n\t\t\t\t\t$filters[] = $this->get_dsl_for_query( $clause );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t$filters       = array_filter( $filters );\n\t\t$this->clauses = array_filter( $this->clauses );\n\n\t\tif ( ! empty( $relation ) && 'or' === strtolower( $relation ) ) {\n\t\t\t$relation = 'should';\n\t\t} else {\n\t\t\t$relation = 'filter';\n\t\t}\n\n\t\tif ( count( $filters ) > 1 ) {\n\t\t\t$filters = array(\n\t\t\t\t'bool' => array(\n\t\t\t\t\t$relation => $filters,\n\t\t\t\t),\n\t\t\t);\n\t\t} elseif ( ! empty( $filters ) ) {\n\t\t\t$filters = reset( $filters );\n\t\t}\n\n\t\treturn $filters;\n\t}\n\n\n\tpublic function get_dsl_for_clause( &$clause, $query, $clause_key = '' ) {\n\n\t\tif ( is_int( $clause_key ) || ! $clause_key ) {\n\t\t\t$clause_key = 'meta-clause';\n\t\t}\n\n\n\t\t$iterator        = 1;\n\t\t$clause_key_base = $clause_key;\n\t\twhile ( isset( $this->clauses[ $clause_key ] ) ) {\n\t\t\t$clause_key = $clause_key_base . '-' . $iterator;\n\t\t\t$iterator++;\n\t\t}\n\n\n\n\t\tif ( isset( $clause['compare'] ) && ! empty( $clause['value'] ) ) {\n\t\t\tif ( 'EXISTS' === strtoupper( $clause['compare'] ) ) {\n\t\t\t\t$clause['compare'] = is_array( $clause['value'] ) ? 'IN' : '=';\n\t\t\t} elseif ( 'NOT EXISTS' === strtoupper( $clause['compare'] ) ) {\n\t\t\t\tunset( $clause['value'] );\n\t\t\t}\n\t\t}\n\n\t\tif ( ( isset( $clause['value'] ) && is_array( $clause['value'] ) && empty( $clause['value'] ) ) || ( ! array_key_exists( 'value', $clause ) && ! empty( $clause['key'] ) ) ) {\n\t\t\t$this->clauses[ $clause_key ] =& $clause;\n\t\t\tif ( isset( $clause['compare'] ) && 'NOT EXISTS' === strtoupper( $clause['compare'] ) ) {\n\t\t\t\treturn $this->es_query->dsl_missing( $this->es_query->meta_map( trim( $clause['key'] ) ) );\n\t\t\t} else {\n\t\t\t\treturn $this->es_query->dsl_exists( $this->es_query->meta_map( trim( $clause['key'] ) ) );\n\t\t\t}\n\t\t}\n\n\t\t$clause['key'] = isset( $clause['key'] ) ? trim( $clause['key'] ) : '*';\n\n\t\tif ( array_key_exists( 'value', $clause ) && is_null( $clause['value'] ) ) {\n\t\t\t$clause['value'] = '';\n\t\t}\n\n\t\t$clause['value'] = isset( $clause['value'] ) ? $clause['value'] : null;\n\n\t\tif ( isset( $clause['compare'] ) ) {\n\t\t\t$clause['compare'] = strtoupper( $clause['compare'] );\n\t\t} else {\n\t\t\t$clause['compare'] = is_array( $clause['value'] ) ? 'IN' : '=';\n\t\t}\n\n\t\tif ( in_array( $clause['compare'], array( 'IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN' ), true ) ) {\n\t\t\tif ( ! is_array( $clause['value'] ) ) {\n\t\t\t\t$clause['value'] = preg_split( '/[,\\s]+/', $clause['value'] );\n\t\t\t}\n\n\t\t\tif ( empty( $clause['value'] ) ) {\n\n\n\t\t\t\treturn array();\n\t\t\t}\n\t\t} else {\n\t\t\t$clause['value'] = trim( $clause['value'] );\n\t\t}\n\n\n\t\t$this->clauses[ $clause_key ] =& $clause;\n\n\t\tif ( '*' === $clause['key'] && ! in_array( $clause['compare'], array( '=', '!=', 'LIKE', 'NOT LIKE' ), true ) ) {\n\t\t\treturn apply_filters( 'es_meta_query_keyless_query', array(), $clause['value'], $clause['compare'], $this, $this->es_query );\n\t\t}\n\n\t\t$clause['type'] = $this->get_cast_for_type( isset( $clause['type'] ) ? $clause['type'] : '' );\n\n\n\t\t$clause['value'] = apply_filters( 'es_meta_query_meta_value', $clause['value'], $clause['key'], $clause['compare'], $clause['type'] );\n\n\t\tswitch ( $clause['compare'] ) {\n\t\t\tcase '>':\n\t\t\tcase '>=':\n\t\t\tcase '<':\n\t\t\tcase '<=':\n\t\t\t\tswitch ( $clause['compare'] ) {\n\t\t\t\t\tcase '>':\n\t\t\t\t\t\t$operator = 'gt';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '>=':\n\t\t\t\t\t\t$operator = 'gte';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '<':\n\t\t\t\t\t\t$operator = 'lt';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '<=':\n\t\t\t\t\t\t$operator = 'lte';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$filter = $this->es_query->dsl_range( $this->es_query->meta_map( $clause['key'], $clause['type'] ), array( $operator => $clause['value'] ) );\n\t\t\t\tbreak;\n\n\t\t\tcase 'LIKE':\n\t\t\tcase 'NOT LIKE':\n\t\t\t\tif ( '*' === $clause['key'] ) {\n\t\t\t\t\t$filter = $this->es_query->dsl_multi_match( $this->es_query->meta_map( $clause['key'], 'analyzed' ), $clause['value'] );\n\t\t\t\t} else {\n\t\t\t\t\t$filter = $this->es_query->dsl_match( $this->es_query->meta_map( $clause['key'], 'analyzed' ), $clause['value'] );\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'BETWEEN':\n\t\t\tcase 'NOT BETWEEN':\n\n\t\t\t\t$clause['value'] = array_slice( $clause['value'], 0, 2 );\n\t\t\t\tif ( 'DATETIME' === $clause['type'] ) {\n\t\t\t\t\t$date1 = strtotime( $clause['value'][0] );\n\t\t\t\t\t$date2 = strtotime( $clause['value'][1] );\n\t\t\t\t\tif ( $date1 && $date2 ) {\n\t\t\t\t\t\t$clause['value'] = array( $date1, $date2 );\n\t\t\t\t\t\tsort( $clause['value'] );\n\t\t\t\t\t\t$filter = $this->es_query->dsl_range(\n\t\t\t\t\t\t\t$this->es_query->meta_map( $clause['key'], $clause['type'] ),\n\t\t\t\t\t\t\tES_WP_Date_Query::build_date_range( $clause['value'][0], '>=', $clause['value'][1], '<=' )\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnatcasesort( $clause['value'] );\n\t\t\t\t\t$filter = $this->es_query->dsl_range(\n\t\t\t\t\t\t$this->es_query->meta_map( $clause['key'], $clause['type'] ),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'gte' => $clause['value'][0],\n\t\t\t\t\t\t\t'lte' => $clause['value'][1],\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'REGEXP':\n\t\t\tcase 'NOT REGEXP':\n\t\t\tcase 'RLIKE':\n\t\t\t\t_doing_it_wrong( 'ES_WP_Query', esc_html__( 'ES_WP_Query does not support regular expression meta queries.', 'es-wp-query' ), '0.1' );\n\n\t\t\t\t$clause = array();\n\t\t\t\treturn array();\n\n\t\t\tdefault:\n\t\t\t\tif ( '*' === $clause['key'] ) {\n\t\t\t\t\t$filter = $this->es_query->dsl_multi_match( $this->es_query->meta_map( $clause['key'], $clause['type'] ), $clause['value'] );\n\t\t\t\t} else {\n\t\t\t\t\t$filter = $this->es_query->dsl_terms( $this->es_query->meta_map( $clause['key'], $clause['type'] ), $clause['value'] );\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( ! empty( $filter ) ) {\n\n\n\t\t\tif ( in_array( $clause['compare'], array( 'NOT IN', '!=', 'NOT BETWEEN', 'NOT LIKE' ), true ) ) {\n\t\t\t\treturn array(\n\t\t\t\t\t'bool' => array(\n\t\t\t\t\t\t'filter'   => array(\n\t\t\t\t\t\t\t$this->es_query->dsl_exists( $this->es_query->meta_map( $clause['key'] ) ),\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'must_not' => $filter,\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn $filter;\n\t\t\t}\n\t\t}\n\n\t}\n\n\n\tpublic function get_cast_for_type( $type = '' ) {\n\t\t$type = preg_replace( '/^([A-Z]+).*$/', '$1', strtoupper( $type ) );\n\t\tswitch ( $type ) {\n\t\t\tcase 'NUMERIC':\n\t\t\t\treturn 'long';\n\t\t\tcase 'SIGNED':\n\t\t\t\treturn 'long';\n\t\t\tcase 'UNSIGNED':\n\t\t\t\treturn 'long';\n\t\t\tcase 'BINARY':\n\t\t\t\treturn 'boolean';\n\t\t\tcase 'DECIMAL':\n\t\t\t\treturn 'double';\n\t\t\tcase 'DATE':\n\t\t\t\treturn 'date';\n\t\t\tcase 'DATETIME':\n\t\t\t\treturn 'datetime';\n\t\t\tcase 'TIME':\n\t\t\t\treturn 'time';\n\t\t}\n\t\treturn '';\n\t}\n}\n\n'es-wp-query/tests/bootstrap.php'\n:<?php\n\ndefine( 'ES_WP_QUERY_TEST_ENV', true );\n\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\nif ( ! $_tests_dir ) {\n\t$_tests_dir = '/tmp/wordpress-tests-lib';\n}\n\n$_es_version = getenv( 'ES_VERSION' );\nif ( ! defined( 'ES_VERSION' ) && $_es_version ) {\n\tdefine( 'ES_VERSION', $_es_version );\n}\n\nrequire_once $_tests_dir . '/includes/functions.php';\n\nfunction _manually_load_plugin() {\n\trequire dirname( __FILE__ ) . '/../es-wp-query.php';\n\n\tif ( file_exists( dirname( __FILE__ ) . '/es.php' ) ) {\n\t\trequire_once( dirname( __FILE__ ) . '/es.php' );\n\t} elseif ( getenv( 'TRAVIS' ) ) {\n\t\tes_wp_query_load_adapter( 'travis' );\n\t} else {\n\t\techo \"\\n\\nSetup Required\\n\"\n\t\t\t. \"===========================================================\\n\"\n\t\t\t. \"You must add an adapter to the plugin for this to work.\\n\"\n\t\t\t. \"You can add it to the plugin in es-wp-query/tests/es.php\\n\"\n\t\t\t. \"or elsewhere in your code using es_wp_query_load_adapter().\\n\"\n\t\t\t. \"See the readme for more details.\\n\\n\";\n\t\texit( 1 );\n\t}\n\n\tif ( ! es_wp_query_verify_es_is_running() ) {\n\t\techo \"\\n\\nFatal: bootstrap check failed!\\n\";\n\t\texit( 1 );\n\t}\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\n\n\nfunction _es_wp_query_set_es_to_true( \\WP_Query $query ) {\n\t$query->set( 'es', true );\n}\n\nrequire $_tests_dir . '/includes/bootstrap.php';\n",
        "gt": [
            "'es-wp-query/class-es-wp-meta-query.php'",
            "'es-wp-query/es-wp-query.php'",
            "'es-wp-query/tests/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'cpanel-UAPI-php-class/otphp/vendor/libs.php'",
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/otphp/vendor/base32.php'",
            "'cpanel-UAPI-php-class/cpaneluapi.class.php'"
        ],
        "content": "'cpanel-UAPI-php-class/otphp/vendor/libs.php'\n:<?php\n\n\n\n\n\nrequire_once dirname(__FILE__).'/base32.php';\n\n'cpanel-UAPI-php-class/otphp/lib/otphp.php'\n:<?php\n\n\nrequire_once dirname(__FILE__).'/../vendor/libs.php';\nrequire_once dirname(__FILE__).'/otp.php';\nrequire_once dirname(__FILE__).'/hotp.php';\nrequire_once dirname(__FILE__).'/totp.php';\n\n\n'cpanel-UAPI-php-class/otphp/vendor/base32.php'\n:<?php\n\n\nclass Base32 {\n\n   private static $map = array(\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n        'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n        'Y', 'Z', '2', '3', '4', '5', '6', '7',\n        '='\n    );\n\n   private static $flippedMap = array(\n        'A'=>'0', 'B'=>'1', 'C'=>'2', 'D'=>'3', 'E'=>'4', 'F'=>'5', 'G'=>'6', 'H'=>'7',\n        'I'=>'8', 'J'=>'9', 'K'=>'10', 'L'=>'11', 'M'=>'12', 'N'=>'13', 'O'=>'14', 'P'=>'15',\n        'Q'=>'16', 'R'=>'17', 'S'=>'18', 'T'=>'19', 'U'=>'20', 'V'=>'21', 'W'=>'22', 'X'=>'23',\n        'Y'=>'24', 'Z'=>'25', '2'=>'26', '3'=>'27', '4'=>'28', '5'=>'29', '6'=>'30', '7'=>'31'\n    );\n\n\n    public static function encode($input, $padding = true) {\n        if(empty($input)) return \"\";\n        $input = str_split($input);\n        $binaryString = \"\";\n        for($i = 0; $i < count($input); $i++) {\n            $binaryString .= str_pad(base_convert(ord($input[$i]), 10, 2), 8, '0', STR_PAD_LEFT);\n        }\n        $fiveBitBinaryArray = str_split($binaryString, 5);\n        $base32 = \"\";\n        $i=0;\n        while($i < count($fiveBitBinaryArray)) {\n            $base32 .= self::$map[base_convert(str_pad($fiveBitBinaryArray[$i], 5,'0'), 2, 10)];\n            $i++;\n        }\n        if($padding && ($x = strlen($binaryString) % 40) != 0) {\n            if($x == 8) $base32 .= str_repeat(self::$map[32], 6);\n            else if($x == 16) $base32 .= str_repeat(self::$map[32], 4);\n            else if($x == 24) $base32 .= str_repeat(self::$map[32], 3);\n            else if($x == 32) $base32 .= self::$map[32];\n        }\n        return $base32;\n    }\n\n    public static function decode($input) {\n        if(empty($input)) return;\n        $paddingCharCount = substr_count($input, self::$map[32]);\n        $allowedValues = array(6,4,3,1,0);\n        if(!in_array($paddingCharCount, $allowedValues)) return false;\n        for($i=0; $i<4; $i++){\n            if($paddingCharCount == $allowedValues[$i] &&\n                substr($input, -($allowedValues[$i])) != str_repeat(self::$map[32], $allowedValues[$i])) return false;\n        }\n        $input = str_replace('=','', $input);\n        $input = str_split($input);\n        $binaryString = \"\";\n        for($i=0; $i < count($input); $i = $i+8) {\n            $x = \"\";\n            if(!in_array($input[$i], self::$map)) return false;\n            for($j=0; $j < 8; $j++) {\n                $x .= str_pad(base_convert(@self::$flippedMap[@$input[$i + $j]], 10, 2), 5, '0', STR_PAD_LEFT);\n            }\n            $eightBits = str_split($x, 8);\n            for($z = 0; $z < count($eightBits); $z++) {\n                $binaryString .= ( ($y = chr(base_convert($eightBits[$z], 2, 10))) || ord($y) == 48 ) ? $y:\"\";\n            }\n        }\n        return $binaryString;\n    }\n}\n\n\n'cpanel-UAPI-php-class/cpaneluapi.class.php'\n:<?php\n\n\n\n\nclass cpanelAPI\n{\n    public $version = '2.0';\n    public $ssl = 1;\n    public $port = 2083;\n    public $server;\n    public $maxredirect = 0;\n    public $user;\n    public $json = '';\n\n    protected $scope;\n    protected $api;\n    protected $auth;\n    protected $pass;\n    protected $secret;\n    protected $type;\n    protected $session;\n    protected $method;\n    protected $requestUrl;\n    protected $eno;\n    protected $emes;\n    protected $token = FALSE;\n    protected $httpMethod = 'GET';\n    protected $postData = '';\n\n    function __construct($user, $pass, $server, $secret = FALSE)\n    {\n        $this->user = $user;\n        $this->pass = $pass;\n        $this->server = $server;\n        if ($secret) {\n            $this->secret = $secret;\n            $this->set2Fa();\n        }\n    }\n\n\n    protected function set2Fa()\n    {\n        require 'otphp/lib/otphp.php';\n        $totp = new \\OTPHP\\TOTP($this->secret);\n        $this->token = $totp->now();\n    }\n\n    public function __get($name)\n    {\n        switch (strtolower($name)) {\n            case 'get':\n                $this->httpMethod = 'GET';\n                break;\n            case 'post':\n                $this->httpMethod = 'POST';\n                break;\n            case 'api2':\n                $this->setApi('api2');\n                break;\n            case 'uapi':\n                $this->setApi('uapi');\n                break;\n            default:\n                $this->scope = $name;\n        }\n        return $this;\n    }\n\n\n    protected function setApi($api)\n    {\n        $this->api = $api;\n        $this->setMethod();\n        return $this;\n    }\n\n\n    protected function setMethod()\n    {\n        switch ($this->api) {\n            case 'uapi':\n                $this->method = '/execute/';\n                break;\n            case 'api2':\n                $this->method = '/json-api/cpanel/';\n                break;\n            default:\n                throw new Exception('$this->api is not set or is incorrectly set. The only available options are \\'uapi\\' or \\'api2\\'');\n        }\n        return $this;\n    }\n\n\n    public function __toString()\n    {\n        return $this->json;\n    }\n\n\n    public function __call($name, $arguments)\n    {\n        if (count($arguments) < 1 || !is_array($arguments[0]))\n            $arguments[0] = [];\n        $this->json = $this->APIcall($name, $arguments[0]);\n        return json_decode($this->json);\n    }\n\n\n    protected function APIcall($name, $arguments)\n    {\n        $this->auth = base64_encode($this->user . \":\" . $this->pass);\n        $this->type = $this->ssl == 1 ? \"https:\n        $this->requestUrl = $this->type . $this->server . ':' . $this->port . $this->method;\n        switch ($this->api) {\n            case 'uapi':\n                $this->requestUrl .= ($this->scope != '' ? $this->scope . \"/\" : '') . $name . '?';\n                break;\n            case 'api2':\n                if ($this->scope == '') {\n                    throw new Exception('Scope must be set.');\n                }\n                $this->requestUrl .= '?cpanel_jsonapi_user=' . $this->user . '&cpanel_jsonapi_apiversion=2&cpanel_jsonapi_module=' . $this->scope . '&cpanel_jsonapi_func=' . $name . '&';\n                break;\n            default:\n                throw new Exception('$this->api is not set or is incorrectly set. The only available options are \\'uapi\\' or \\'api2\\'');\n        }\n        if($this->httpMethod == 'GET') {\n            $this->requestUrl .= http_build_query($arguments);\n        }\n        if($this->httpMethod == 'POST'){\n            $this->postData = $arguments;\n        }\n\n        return $this->curl_request($this->requestUrl);\n    }\n\n\n    protected function curl_request($url)\n    {\n        $httpHeaders = array(\"Authorization: Basic \" . $this->auth);\n\n        if ($this->token) {\n            $httpHeaders[] = \"X-CPANEL-OTP: \" . $this->token;\n        }\n        $ch = curl_init();\n        if($this->httpMethod == 'POST'){\n            $httpHeaders[] = \"Content-type: multipart/form-data\";\n            curl_setopt($ch,CURLOPT_POSTFIELDS, $this->postData);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $httpHeaders);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 100020);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n\n        $content = $this->curl_exec_follow($ch, $this->maxredirect);\n        $this->eno = curl_errno($ch);\n        $this->emes = curl_error($ch);\n\n        curl_close($ch);\n\n        return $content;\n    }\n\n\n    protected function curl_exec_follow($ch, &$maxredirect = null)\n    {\n\n\n        $user_agent = \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.5)\" .\n            \" Gecko/20041107 Firefox/1.0\";\n        curl_setopt($ch, CURLOPT_USERAGENT, $user_agent);\n\n        $mr = $maxredirect === null ? 5 : intval($maxredirect);\n\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $mr > 0);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $mr);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n        return curl_exec($ch);\n    }\n\n\n    public function getLastRequest()\n    {\n        return $this->requestUrl;\n    }\n\n\n    public function getError()\n    {\n        if (!empty($this->eno)) {\n            return ['no' => $this->eno, 'message' => $this->emes];\n        }\n        return FALSE;\n    }\n}\n",
        "gt": [
            "'cpanel-UAPI-php-class/otphp/vendor/base32.php'",
            "'cpanel-UAPI-php-class/otphp/vendor/libs.php'",
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/cpaneluapi.class.php'"
        ]
    },
    {
        "files": [
            "'ZnoteAAC/engine/init.php'",
            "'ZnoteAAC/engine/function/cache.php'",
            "'ZnoteAAC/adminempty.php'"
        ],
        "content": "'ZnoteAAC/engine/init.php'\n:<?php if (version_compare(phpversion(), '5.6', '<')) die('PHP version 5.6 or higher is required.');\n\n$l_time = microtime(true);\n$l_start = $l_time;\n\nfunction elapsedTime($l_start = false, $l_time = false) {\n\tif ($l_start === false) global $l_start;\n\tif ($l_time === false) global $l_time;\n\n\t$l_time = explode(' ', microtime());\n\t$l_finish = $l_time[1] + $l_time[0];\n\treturn round(($l_finish - $l_start), 4);\n}\n\n$time = time();\n$version = '1.6';\n\n$aacQueries = 0;\n$accQueriesData = array();\n\nsession_start();\nob_start();\nrequire_once 'config.php';\n$sessionPrefix = $config['session_prefix'];\nif ($config['paypal']['enabled'] || $config['use_captcha']) {\n\t$curlcheck = extension_loaded('curl');\n\tif (!$curlcheck) die(\"php cURL is not enabled. It is required to for paypal or captcha services.<br>1. Find your php.ini file.<br>2. Uncomment extension=php_curl<br>Restart web server.<br><br><b>If you don't want this then disable paypal & use_captcha in config.php.</b>\");\n}\nif ($config['use_captcha'] && !extension_loaded('openssl')) {\n\tdie(\"php openSSL is not enabled. It is required to for captcha services.<br>1. Find your php.ini file.<br>2. Uncomment extension=php_openssl<br>Restart web server.<br><br><b>If you don't want this then disable use_captcha in config.php.</b>\");\n}\n\n\n\nif (!isset($config['TFSVersion'])) $config['TFSVersion'] = &$config['ServerEngine'];\nif (!isset($config['ServerEngine'])) $config['ServerEngine'] = &$config['TFSVersion'];\n\nrequire_once 'database/connect.php';\nrequire_once 'function/general.php';\nrequire_once 'function/users.php';\nrequire_once 'function/cache.php';\nrequire_once 'function/mail.php';\nrequire_once 'function/token.php';\nrequire_once 'function/itemparser/itemlistparser.php';\n\nif (isset($_SESSION['token'])) {\n\t$_SESSION['old_token'] = $_SESSION['token'];\n}\nToken::generate();\n\n$tfs_10_hasPremDays = true;\n\nif (user_logged_in() === true) {\n\t$session_user_id = getSession('user_id');\n\tif ($config['ServerEngine'] !== 'OTHIRE') {\n\t\tif ($config['ServerEngine'] == 'TFS_10') {\n\t\t\t$hasPremDays = mysql_select_single(\"SHOW COLUMNS from `accounts` WHERE `Field` = 'premdays'\");\n\t\t\tif ($hasPremDays === false) {\n\t\t\t\t$tfs_10_hasPremDays = false;\n\t\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premium_ends_at');\n\t\t\t\t$user_data['premdays'] = ($user_data['premium_ends_at'] - time() > 0) ? floor(($user_data['premium_ends_at'] - time()) / 86400) : 0;\n\t\t\t} else {\n\t\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premdays');\n\t\t\t}\n\t\t} else {\n\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premdays');\n\t\t}\n\t} else\n\t\t$user_data = user_data($session_user_id, 'id', 'password', 'email', 'premend');\n\t$user_znote_data = user_znote_account_data($session_user_id, 'ip', 'created', 'points', 'cooldown', 'flag' ,'active_email');\n}\n$errors = array();\n\nif ($config['log_ip']) {\n\t$visitor_config = $config['ip_security'];\n\n\t$flush = $config['flush_ip_logs'];\n\tif ($flush != false) {\n\t\t$timef = $time - $flush;\n\t\tif (getCache() < $timef) {\n\t\t\t$timef = $time - $visitor_config['time_period'];\n\t\t\tmysql_delete(\"DELETE FROM znote_visitors_details WHERE time <= '$timef'\");\n\t\t\tsetCache($time);\n\t\t}\n\t}\n\n\t$visitor_data = znote_visitors_get_data();\n\n\tznote_visitor_set_data($visitor_data);\n\tznote_visitor_insert_detailed_data(0);\n\n\t$visitor_detailed = znote_visitors_get_detailed_data($visitor_config['time_period']);\n\n\n\t$v_activity = 0;\n\t$v_register = 0;\n\t$v_highscore = 0;\n\t$v_c_char = 0;\n\t$v_s_char = 0;\n\t$v_form = 0;\n\tforeach ((array)$visitor_detailed as $v_d) {\n\n\t\tif ($v_d['ip'] == getIPLong()) {\n\n\t\t\tswitch ($v_d['type']) {\n\t\t\t\tcase 0:\n\t\t\t\t\t$v_activity++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\t$v_register++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\t$v_c_char++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\t$v_highscore++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 4:\n\t\t\t\t\t$v_s_char++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 5:\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\t}\n\n\n\tif ($v_activity > $visitor_config['max_activity']) die(\"Chill down. Your web activity is too big. max_activity\");\n\tif ($v_register > $visitor_config['max_account']) die(\"Chill down. You can't create multiple accounts that fast. max_account\");\n\tif ($v_c_char > $visitor_config['max_character']) die(\"Chill down. Your web activity is too big. max_character\");\n\tif ($v_form > $visitor_config['max_post']) die(\"Chill down. Your web activity is too big. max_post\");\n\n\n\n}\n\n\n$filename = explode('/', $_SERVER['SCRIPT_NAME']);\n$filename = $filename[count($filename) - 1];\n$page_filename = str_replace('.php', '', $filename);\nif ($config['allowSubPages']) {\n\trequire_once 'layout/sub.php';\n\tif (isset($subpages) && !empty($subpages)) {\n\t\tforeach ($subpages as $page) {\n\t\t\tif ($page['override'] && $page['file'] === $filename) {\n\t\t\t\trequire_once 'layout/overall/header.php';\n\t\t\t\trequire_once 'layout/sub/'.$page['file'];\n\t\t\t\trequire_once 'layout/overall/footer.php';\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t?>\n\t\t<div style=\"background-color: white; padding: 20px; width: 100%; float:left;\">\n\t\t\t<h2 style=\"color: black;\">Old layout!</h2>\n\t\t\t<p style=\"color: black;\">The layout is running an outdated sub system which is not compatible with this version of Znote AAC.</p>\n\t\t\t<p style=\"color: black;\">The file /layout/sub.php is outdated.\n\t\t\t<br>Please update it to look like <a style=\"color: orange;\" target=\"_BLANK\" href=\"https:\n\t\t\t</p>\n\t\t</div>\n\t\t<?php\n\t}\n}\n?>\n\n'ZnoteAAC/engine/function/cache.php'\n:<?php\n\nclass Cache\n{\n\tprotected $_file = false;\n\tprotected $_lifespan = 0;\n\tprotected $_content;\n\tprotected $_memory = false;\n\tprotected $_canMemory = false;\n\n\tconst EXT = '.cache.php';\n\n\n\n\tpublic function __construct($file) {\n\t\t$cfg = config('cache');\n\n\t\t$this->setExpiration($cfg['lifespan']);\n\t\tif (function_exists('apcu_fetch')) {\n\t\t\t$this->_canMemory = true;\n\t\t\t$this->_memory = $cfg['memory'];\n\t\t}\n\t\t$this->_file = $file . self::EXT;\n\n\t\tif (!$this->_memory && $cfg['memory']) die(\"\n\t\t\t<p><strong>Configuration error!</strong>\n\t\t\t<br>Cannot save cache to memory, but it is configured to do so.\n\t\t\t<br>You need to enable PHP extension APCu to enable memory cache.\n\t\t\t<br>Install it or set \\$config['cache']['memory'] to false!\n\t\t\t<br><strong>Ubuntu install:</strong> sudo apt install php-apcu</p>\n\t\t\");\n\t}\n\n\n\n\tpublic function setExpiration($span) {\n\t\t$this->_lifespan = $span;\n\t}\n\n\n\n\tpublic function useMemory($bool) {\n\t\tif ($bool and $this->_canMemory) {\n\t\t\t$this->_memory = true;\n\t\t\treturn true;\n\t\t}\n\t\t$this->_memory = false;\n\t\treturn false;\n\t}\n\n\n\n\tpublic function setContent($content) {\n\t\t$this->_content = (!$this->_memory && strtolower(gettype($content)) == 'array') ? json_encode($content) : $content;\n\t}\n\n\n\n\tpublic function hasExpired() {\n\t\tif ($this->_memory) {\n\t\t\treturn !apcu_exists($this->_file);\n\t\t}\n\t\tif (is_file($this->_file) && time() < filemtime($this->_file) + $this->_lifespan) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\n\tpublic function remainingTime() {\n\t\t$remaining = 0;\n\t\tif ($this->_memory) {\n\t\t\tif (apcu_exists($this->_file)) {\n\t\t\t\t$meta = apcu_cache_info();\n\t\t\t\tforeach ($meta['cache_list'] AS $item) {\n\t\t\t\t\tif ($item['info'] == $this->_file) {\n\t\t\t\t\t\t$remaining = ($item['creation_time'] + $item['ttl']) - time();\n\t\t\t\t\t\treturn ($remaining > 0) ? $remaining : 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $remaining;\n\t\t}\n\t\tif (!$this->hasExpired()) {\n\t\t\t$remaining = (filemtime($this->_file) + $this->_lifespan) - time();\n\t\t}\n\t\treturn $remaining;\n\t}\n\n\n\n\tpublic function save() {\n\t\tif ($this->_memory) {\n\t\t\treturn apcu_store($this->_file, $this->_content, $this->_lifespan);\n\t\t}\n\t\t$handle = fopen($this->_file, 'w');\n\t\tfwrite($handle, $this->_content);\n\t\tfclose($handle);\n\t}\n\n\n\n\tpublic function load() {\n\t\tif ($this->_memory) {\n\t\t\treturn apcu_fetch($this->_file);\n\t\t}\n\t\tif (!is_file($this->_file)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tob_start();\n\t\tinclude_once($this->_file);\n\t\t$content = ob_get_clean();\n\n\t\tif (!isset($content) && strlen($content) == 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($content = json_decode($content, true)) {\n\t\t\treturn (array) $content;\n\t\t} else {\n\t\t\treturn $content;\n\t\t}\n\t}\n}\n\n'ZnoteAAC/adminempty.php'\n:<?php require_once 'engine/init.php'; include 'layout/overall/header.php';\nprotect_page();\nadmin_only($user_data);\n\n\n\n\n\n include 'layout/overall/footer.php'; ?>\n",
        "gt": [
            "'ZnoteAAC/engine/function/cache.php'",
            "'ZnoteAAC/engine/init.php'",
            "'ZnoteAAC/adminempty.php'"
        ]
    },
    {
        "files": [
            "'grav-plugin-git-sync/vendor/composer/autoload_real.php'",
            "'grav-plugin-git-sync/vendor/autoload.php'",
            "'grav-plugin-git-sync/vendor/composer/platform_check.php'",
            "'grav-plugin-git-sync/cli/StatusCommand.php'"
        ],
        "content": "'grav-plugin-git-sync/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        require __DIR__ . '/platform_check.php';\n\n        spl_autoload_register(array('ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader(\\dirname(\\dirname(__FILE__)));\n        spl_autoload_unregister(array('ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854', 'loadClassLoader'));\n\n        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());\n        if ($useStaticLoader) {\n            require __DIR__ . '/autoload_static.php';\n\n            call_user_func(\\Composer\\Autoload\\ComposerStaticInitc058e1b5c686df0909ec1cc39bb5d854::getInitializer($loader));\n        } else {\n            $map = require __DIR__ . '/autoload_namespaces.php';\n            foreach ($map as $namespace => $path) {\n                $loader->set($namespace, $path);\n            }\n\n            $map = require __DIR__ . '/autoload_psr4.php';\n            foreach ($map as $namespace => $path) {\n                $loader->setPsr4($namespace, $path);\n            }\n\n            $classMap = require __DIR__ . '/autoload_classmap.php';\n            if ($classMap) {\n                $loader->addClassMap($classMap);\n            }\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\n'grav-plugin-git-sync/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer/autoload_real.php';\n\nreturn ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854::getLoader();\n\n'grav-plugin-git-sync/vendor/composer/platform_check.php'\n:<?php\n\n\n\n$issues = array();\n\nif (!(PHP_VERSION_ID >= 70103)) {\n    $issues[] = 'Your Composer dependencies require a PHP version \">= 7.1.3\". You are running ' . PHP_VERSION . '.';\n}\n\nif ($issues) {\n    if (!headers_sent()) {\n        header('HTTP/1.1 500 Internal Server Error');\n    }\n    if (!ini_get('display_errors')) {\n        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {\n            fwrite(STDERR, 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . implode(PHP_EOL, $issues) . PHP_EOL.PHP_EOL);\n        } elseif (!headers_sent()) {\n            echo 'Composer detected issues in your platform:' . PHP_EOL.PHP_EOL . str_replace('You are running '.PHP_VERSION.'.', '', implode(PHP_EOL, $issues)) . PHP_EOL.PHP_EOL;\n        }\n    }\n    trigger_error(\n        'Composer detected issues in your platform: ' . implode(' ', $issues),\n        E_USER_ERROR\n    );\n}\n\n'grav-plugin-git-sync/cli/StatusCommand.php'\n:<?php\nnamespace Grav\\Plugin\\Console;\n\nuse Grav\\Console\\ConsoleCommand;\nuse Grav\\Plugin\\GitSync\\GitSync;\nuse Grav\\Plugin\\GitSync\\Helper;\nuse Symfony\\Component\\Console\\Exception\\RuntimeException;\nuse Symfony\\Component\\Console\\Input\\InputOption;\n\n\nclass StatusCommand extends ConsoleCommand\n{\n    protected function configure()\n    {\n        $this\n            ->setName('status')\n            ->setDescription('Checks the status of plugin config, git and git workspace. No files get modified!')\n            ->addOption(\n              'fetch', 'f',\n              InputOption::VALUE_NONE,\n              'additionally do a git fetch to look updates (changes not files in workspace)'\n            )\n            ->setHelp(<<<'EOF'\nThe <info>%command.name%</info> command checks if the plugin is usable the way it has been configured.\nWhile doing this it prints the available information for your inspection.\n\n<comment>No files in the workspace are modified when running this test.</comment>\n\nThe <info>--fetch</info> option can be used to see differences between the remote in the <info>git status</info> (last check)\n\nIt also returns with an error code and a helpful message when something is not normal:\n\n  <error>100</error> : <info>git</info> binary not working as expected\n  <error>50</error>  : <info>repositoryFolder</info> and git workspace root do not match\n  <error>10</error>  : <info>repository</info> is not configured\n  <error>5</error>   : state of workspace not clean\n  <error>1</error>   : Some checks can throw a <info>RuntimeException</info> which is not caught, read the message for details\n\nEOF\n)\n        ;\n    }\n\n    protected function serve()\n    {\n        require_once __DIR__ . '/../vendor/autoload.php';\n\n        $plugin = new GitSync();\n        $this->output->writeln('');\n\n\n        $this->console_header('plugin runtime information:');\n        $info = $plugin->getRuntimeInformation();\n        $info['isGitInitialized'] = Helper::isGitInitialized();\n        $info['gitVersion'] = Helper::isGitInstalled(true);\n        ksort($info);\n        dump($info);\n        if (!Helper::isGitInstalled()) {\n          throw new RuntimeException('git binary not found', 100);\n        }\n\n        $this->console_header('detect git workspace root:');\n        $git_root = $plugin->execute('rev-parse --show-toplevel');\n        $this->console_log($git_root, '');\n        if (rtrim($info['repositoryPath'], '/') !== rtrim($git_root[0], '/')) {\n            throw new RuntimeException('git root and repositoryPath do not match', 50);\n        }\n\n\n        $password = Helper::decrypt($plugin->getPassword() ?? '');\n\n        $this->console_header('local git config:');\n        $this->console_log(\n          $plugin->execute('config --local -l'), $password\n        );\n\n\n        $this->console_header(\n          'Testing connection to repository', 'git ls-remote', true\n        );\n        $repository = $plugin->getConfig('repository', false);\n        if (!$repository) {\n          throw new RuntimeException('No repository has been configured', 10);\n        }\n        $testRepository = $plugin->testRepository(\n            Helper::prepareRepository(\n              $plugin->getUser() ?? '',\n              $password,\n              $repository),\n            $plugin->getRemote('branch', null),\n        );\n        $this->console_log($testRepository, $password);\n\n        $fetched = false;\n        if ($this->input->getOption('fetch')) {\n            $remote = $plugin->getRemote('name', '');\n            $this->console_header(\n              'Looking for updates', \"git fetch $remote\", true\n            );\n            $this->console_log($plugin->fetch($remote), $password);\n            $fetched = true;\n        }\n\n        $this->console_header(\n          'Checking workspace status', 'git status', true\n        );\n        $git_status = $plugin->execute('status');\n        $this->console_log($git_status, $password);\n        if (!$plugin->isWorkingCopyClean()) {\n          throw new RuntimeException('Working state is not clean.', 5);\n        }\n\n\n        if ($fetched) {\n          $uptodate = strpos($git_status[1], 'branch is up-to-date with') > 0;\n          if ($uptodate) {\n            $this->console_header(\n              'Congrats: You should be able to run the <info>sync</info> command without problems!'\n            );\n          } else {\n            $this->output->writeln('<yellow>You are not in sync!</yellow>');\n            $this->output->writeln('Take a look at the output of git status to see more details.');\n            $this->output->writeln('In most cases the <info>sync</info> command is able to fix this.');\n          }\n        } else {\n          $this->console_header('Looks good: use <info>--fetch</info> option to check for updates.');\n        }\n    }\n\n    private function console_header($readable, $cmd = '', $remote_action = false)\n    {\n        $this->output->writeln(\n            \"<yellow>$readable</yellow>\" . ($cmd ? \"(<info>$cmd</info>)\" : ''). ($remote_action ? '...' : '')\n        );\n    }\n\n    private function console_log($lines, $password)\n    {\n        foreach ($lines as $line) {\n            $this->output->writeln('  ' . Helper::preventReadablePassword($line, $password));\n        }\n    }\n\n\n}\n",
        "gt": [
            "'grav-plugin-git-sync/vendor/composer/platform_check.php'",
            "'grav-plugin-git-sync/vendor/composer/autoload_real.php'",
            "'grav-plugin-git-sync/vendor/autoload.php'",
            "'grav-plugin-git-sync/cli/StatusCommand.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'\n:<?php\n\n\n\nnamespace Composer\\Autoload;\n\n\nclass ClassLoader\n{\n\n    private $prefixLengthsPsr4 = array();\n    private $prefixDirsPsr4 = array();\n    private $fallbackDirsPsr4 = array();\n\n\n    private $prefixesPsr0 = array();\n    private $fallbackDirsPsr0 = array();\n\n    private $useIncludePath = false;\n    private $classMap = array();\n\n    public function getPrefixes()\n    {\n        return call_user_func_array('array_merge', $this->prefixesPsr0);\n    }\n\n    public function getPrefixesPsr4()\n    {\n        return $this->prefixDirsPsr4;\n    }\n\n    public function getFallbackDirs()\n    {\n        return $this->fallbackDirsPsr0;\n    }\n\n    public function getFallbackDirsPsr4()\n    {\n        return $this->fallbackDirsPsr4;\n    }\n\n    public function getClassMap()\n    {\n        return $this->classMap;\n    }\n\n\n    public function addClassMap(array $classMap)\n    {\n        if ($this->classMap) {\n            $this->classMap = array_merge($this->classMap, $classMap);\n        } else {\n            $this->classMap = $classMap;\n        }\n    }\n\n\n    public function add($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n            if ($prepend) {\n                $this->fallbackDirsPsr0 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr0\n                );\n            } else {\n                $this->fallbackDirsPsr0 = array_merge(\n                    $this->fallbackDirsPsr0,\n                    (array) $paths\n                );\n            }\n\n            return;\n        }\n\n        $first = $prefix[0];\n        if (!isset($this->prefixesPsr0[$first][$prefix])) {\n            $this->prefixesPsr0[$first][$prefix] = (array) $paths;\n\n            return;\n        }\n        if ($prepend) {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixesPsr0[$first][$prefix]\n            );\n        } else {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                $this->prefixesPsr0[$first][$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function addPsr4($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n\n            if ($prepend) {\n                $this->fallbackDirsPsr4 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr4\n                );\n            } else {\n                $this->fallbackDirsPsr4 = array_merge(\n                    $this->fallbackDirsPsr4,\n                    (array) $paths\n                );\n            }\n        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {\n\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        } elseif ($prepend) {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixDirsPsr4[$prefix]\n            );\n        } else {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                $this->prefixDirsPsr4[$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function set($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr0 = (array) $paths;\n        } else {\n            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setPsr4($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr4 = (array) $paths;\n        } else {\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setUseIncludePath($useIncludePath)\n    {\n        $this->useIncludePath = $useIncludePath;\n    }\n\n\n    public function getUseIncludePath()\n    {\n        return $this->useIncludePath;\n    }\n\n\n    public function register($prepend = false)\n    {\n        spl_autoload_register(array($this, 'loadClass'), true, $prepend);\n    }\n\n\n    public function unregister()\n    {\n        spl_autoload_unregister(array($this, 'loadClass'));\n    }\n\n\n    public function loadClass($class)\n    {\n        if ($file = $this->findFile($class)) {\n            includeFile($file);\n\n            return true;\n        }\n    }\n\n\n    public function findFile($class)\n    {\n\n        if ('\\\\' == $class[0]) {\n            $class = substr($class, 1);\n        }\n\n\n        if (isset($this->classMap[$class])) {\n            return $this->classMap[$class];\n        }\n\n        $file = $this->findFileWithExtension($class, '.php');\n\n\n        if ($file === null && defined('HHVM_VERSION')) {\n            $file = $this->findFileWithExtension($class, '.hh');\n        }\n\n        if ($file === null) {\n\n            return $this->classMap[$class] = false;\n        }\n\n        return $file;\n    }\n\n    private function findFileWithExtension($class, $ext)\n    {\n\n        $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . $ext;\n\n        $first = $class[0];\n        if (isset($this->prefixLengthsPsr4[$first])) {\n            foreach ($this->prefixLengthsPsr4[$first] as $prefix => $length) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($this->prefixDirsPsr4[$prefix] as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $length))) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr4 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {\n                return $file;\n            }\n        }\n\n\n        if (false !== $pos = strrpos($class, '\\\\')) {\n\n            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)\n                . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);\n        } else {\n\n            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;\n        }\n\n        if (isset($this->prefixesPsr0[$first])) {\n            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($dirs as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr0 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                return $file;\n            }\n        }\n\n\n        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {\n            return $file;\n        }\n    }\n}\n\n\nfunction includeFile($file)\n{\n    include $file;\n}\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/devdocs.php'\n:<?php\n\nini_set('display_errors', 0);\nini_set('memory_limit', '-1');\n\nuse CFPropertyList\\CFPropertyList;\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocs {\n  private static $cacheDirectory = 'cache/';\n\n  private $workflows;\n  private $results;\n  private $baseUrl;\n  private $cacheLife;\n  private $template;\n\n  public function __construct($query, $doc) {\n    $this->baseUrl = getenv('BASE_URL') ?: 'https:\n    $this->cacheLife = (int)(getenv('CACHE_LIFE') ?: '7');\n    $this->template = getenv('TEMPLATE') ?: '$baseUrl$documentation/$path';\n    $this->workflows = new Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n    $this->results = [\n      0 => [],\n      1 => [],\n      2 => []\n    ];\n\n    $documentations = $this->getDocumentations();\n    if (!isset($doc) || empty($doc)) {\n      $rootPath = str_replace('/scripts', '', $this->workflows->path());\n      $pList = (new CFPropertyList($rootPath . '/info.plist'))->toArray();\n      foreach ($pList['connections'] as $key => $value) {\n        if (array_key_exists($key, $documentations)) {\n          $this->checkCache($key);\n          $this->processDocumentation($key, $query);\n        }\n      }\n    } else {\n      $this->checkCache($doc);\n      $this->processDocumentation($doc, $query);\n    }\n    $this->render();\n  }\n\n  private function getDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      $docContent = $this->workflows->fetch($this->baseUrl . 'docs/docs.json');\n      file_put_contents($docFile, $docContent);\n    } else {\n      $docContent = file_get_contents($docFile);\n    }\n    $docs = json_decode($docContent);\n    $documentations = [];\n    foreach ($docs as $doc) {\n      $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n      $documentations[$doc->slug] = $doc;\n    }\n    return $documentations;\n  }\n\n  private function checkCache($documentation) {\n    if (!file_exists(self::$cacheDirectory)) {\n      mkdir(self::$cacheDirectory);\n    }\n    $docFile = self::$cacheDirectory . $documentation . '.json';\n    error_log(\"Checking existence of cache at $docFile\");\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      error_log(\"Download doc for $documentation at \\\"\" . $this->baseUrl . 'docs/' . $documentation . '/index.json') . \"\\\"\";\n      file_put_contents($docFile, file_get_contents($this->baseUrl . 'docs/' . $documentation . '/index.json'));\n    }\n  }\n\n  private function processDocumentation($documentation, $query) {\n\n    $query = strtolower($query);\n    $data = json_decode(file_get_contents(self::$cacheDirectory . $documentation . '.json'));\n    if ($data === null) {\n      unlink(self::$cacheDirectory . $documentation . '.json');\n    }\n\n    $entries = $data->entries;\n\n    $found = [];\n    foreach ($entries as $key => $result) {\n      $value = strtolower(trim($result->name));\n      $description = strtolower(utf8_decode(strip_tags($result->type)));\n\n      if (empty($query)) {\n        $found[$value] = true;\n        $result->documentation = $documentation;\n        $this->results[0][] = $result;\n      } else if (strpos($value, $query) === 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[0][] = $result;\n        }\n      } else if (strpos($value, $query) > 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[1][] = $result;\n        }\n      } else if (strpos($description, $query) !== false) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[2][] = $result;\n        }\n      }\n    }\n\n    if ((count($this->results[0]) === 0) && (count($this->results[1]) === 0) && (count($this->results[2]) === 0)) {\n      $this->results[0][] = (object) [\n        'name' => 'No results.',\n        'documentation' => $documentation\n      ];\n    }\n\n  }\n\n  private function render() {\n    foreach ($this->results as $level => $results) {\n      foreach ($results as $result) {\n        $title = empty($result->type) ? $result->name : \"$result->name ($result->type)\";\n        $vars = array(\n          '$baseUrl' => $this->baseUrl,\n          '$documentation' => $result->documentation,\n          '$docalt' => str_replace(\"~\", \"-\", $result->documentation),\n          '$name' => $result->name,\n          '$path' => $result->path\n        );\n\n        $url = strtr($this->template, $vars);\n        $this->workflows->result($result->name, $url, $title, $result->path, $result->documentation . '.png', 'yes', $result->name);\n      }\n    }\n    echo $this->workflows->toxml();\n  }\n}\n\n$query = isset($query) ? $query : '';\n$documentation = isset($documentation) ? $documentation : '';\nnew DevDocs($query, $documentation);\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'"
        ]
    },
    {
        "files": [
            "'BP-REST/includes/bp-groups/classes/class-bp-rest-attachments-group-cover-endpoint.php'",
            "'BP-REST/tests/bootstrap.php'",
            "'BP-REST/bp-rest.php'"
        ],
        "content": "'BP-REST/includes/bp-groups/classes/class-bp-rest-attachments-group-cover-endpoint.php'\n:<?php\n\n\ndefined( 'ABSPATH' ) || exit;\n\n\nclass BP_REST_Attachments_Group_Cover_Endpoint extends WP_REST_Controller {\n\tuse BP_REST_Attachments;\n\n\n\tprotected $attachment_instance;\n\n\n\tprotected $groups_endpoint;\n\n\n\tprotected $group;\n\n\n\tprotected $object = 'group';\n\n\n\tpublic function __construct() {\n\t\t$this->namespace           = bp_rest_namespace() . '/' . bp_rest_version();\n\t\t$this->rest_base           = buddypress()->groups->id;\n\t\t$this->groups_endpoint     = new BP_REST_Groups_Endpoint();\n\t\t$this->attachment_instance = new BP_Attachment_Cover_Image();\n\t}\n\n\n\tpublic function register_routes() {\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/(?P<group_id>[\\d]+)/cover',\n\t\t\tarray(\n\t\t\t\t'args'   => array(\n\t\t\t\t\t'group_id' => array(\n\t\t\t\t\t\t'description' => __( 'A unique numeric ID for the Group.', 'buddypress' ),\n\t\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_item_permissions_check' ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'create_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::DELETABLE,\n\t\t\t\t\t'callback'            => array( $this, 'delete_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'delete_item_permissions_check' ),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_item_schema' ),\n\t\t\t)\n\t\t);\n\t}\n\n\n\tpublic function get_item( $request ) {\n\t\t$cover_url = bp_get_group_cover_url( $this->group );\n\n\t\tif ( empty( $cover_url ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'bp_rest_attachments_group_cover_no_image',\n\t\t\t\t__( 'Sorry, there was a problem fetching this group cover.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t$retval = array(\n\t\t\t$this->prepare_response_for_collection(\n\t\t\t\t$this->prepare_item_for_response( $cover_url, $request )\n\t\t\t),\n\t\t);\n\n\t\t$response = rest_ensure_response( $retval );\n\n\n\t\tdo_action( 'bp_rest_attachments_group_cover_get_item', $cover_url, $response, $request );\n\n\t\treturn $response;\n\t}\n\n\n\tpublic function get_item_permissions_check( $request ) {\n\t\t$retval = new WP_Error(\n\t\t\t'bp_rest_authorization_required',\n\t\t\t__( 'Sorry, you cannot view group details.', 'buddypress' ),\n\t\t\tarray(\n\t\t\t\t'status' => rest_authorization_required_code(),\n\t\t\t)\n\t\t);\n\n\t\tif ( bp_current_user_can( 'bp_view', array( 'bp_component' => 'groups' ) ) ) {\n\t\t\t$retval = new WP_Error(\n\t\t\t\t'bp_rest_group_invalid_id',\n\t\t\t\t__( 'Invalid group ID.', 'buddypress' ),\n\t\t\t\tarray( 'status' => 404 )\n\t\t\t);\n\n\t\t\t$this->group = $this->groups_endpoint->get_group_object( $request );\n\n\t\t\tif ( false !== $this->group && $this->groups_endpoint->can_see( $this->group ) ) {\n\t\t\t\t$retval = true;\n\t\t\t}\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_get_item_permissions_check', $retval, $request );\n\t}\n\n\n\tpublic function create_item( $request ) {\n\t\t$request->set_param( 'context', 'edit' );\n\n\n\t\t$files = $request->get_file_params();\n\n\t\tif ( empty( $files ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'bp_rest_attachments_group_cover_no_image_file',\n\t\t\t\t__( 'Sorry, you need an image file to upload.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\t$cover_url = $this->upload_cover_from_file( $files );\n\t\tif ( is_wp_error( $cover_url ) ) {\n\t\t\treturn $cover_url;\n\t\t}\n\n\t\t$retval = array(\n\t\t\t$this->prepare_response_for_collection(\n\t\t\t\t$this->prepare_item_for_response( $cover_url, $request )\n\t\t\t),\n\t\t);\n\n\t\t$response = rest_ensure_response( $retval );\n\n\n\t\tdo_action( 'bp_rest_attachments_group_cover_create_item', $cover_url, $response, $request );\n\n\t\treturn $response;\n\t}\n\n\n\tpublic function create_item_permissions_check( $request ) {\n\t\t$retval = $this->delete_item_permissions_check( $request );\n\n\t\tif ( ! is_wp_error( $retval ) && bp_disable_group_cover_image_uploads() ) {\n\t\t\t$retval = new WP_Error(\n\t\t\t\t'bp_rest_attachments_group_cover_disabled',\n\t\t\t\t__( 'Sorry, group cover upload is disabled.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_create_item_permissions_check', $retval, $request );\n\t}\n\n\n\tpublic function delete_item( $request ) {\n\t\t$request->set_param( 'context', 'edit' );\n\n\t\t$cover_url = bp_get_group_cover_url( $this->group );\n\t\t$deleted   = bp_attachments_delete_file(\n\t\t\tarray(\n\t\t\t\t'item_id'    => (int) $this->group->id,\n\t\t\t\t'object_dir' => $this->get_cover_object_component(),\n\t\t\t\t'type'       => 'cover-image',\n\t\t\t)\n\t\t);\n\n\t\tif ( ! $deleted ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'bp_rest_attachments_group_cover_delete_failed',\n\t\t\t\t__( 'Sorry, there was a problem deleting this group cover.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\t$response = new WP_REST_Response();\n\t\t$response->set_data(\n\t\t\tarray(\n\t\t\t\t'deleted'  => true,\n\t\t\t\t'previous' => $cover_url,\n\t\t\t)\n\t\t);\n\n\n\t\tdo_action( 'bp_rest_attachments_group_cover_delete_item', $this->group, $response, $request );\n\n\t\treturn $response;\n\t}\n\n\n\tpublic function delete_item_permissions_check( $request ) {\n\t\t$retval = $this->get_item_permissions_check( $request );\n\n\t\tif ( ! is_wp_error( $retval ) ) {\n\t\t\t$args  = array();\n\t\t\t$error = new WP_Error(\n\t\t\t\t'bp_rest_authorization_required',\n\t\t\t\t__( 'Sorry, you are not allowed to perform this action.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => rest_authorization_required_code(),\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tif ( ! isset( $this->group->id ) || ! isset( $this->object ) ) {\n\t\t\t\t$retval = $error;\n\t\t\t} else {\n\t\t\t\t$args = array(\n\t\t\t\t\t'item_id' => (int) $this->group->id,\n\t\t\t\t\t'object'  => $this->object,\n\t\t\t\t);\n\n\t\t\t\tif ( ! is_user_logged_in() ) {\n\t\t\t\t\t$retval = new WP_Error(\n\t\t\t\t\t\t'bp_rest_authorization_required',\n\t\t\t\t\t\t__( 'Sorry, you need to be logged in to perform this action.', 'buddypress' ),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'status' => rest_authorization_required_code(),\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t} elseif ( bp_attachments_current_user_can( 'edit_cover_image', $args ) ) {\n\t\t\t\t\t$retval = true;\n\t\t\t\t} else {\n\t\t\t\t\t$retval = $error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_delete_item_permissions_check', $retval, $request );\n\t}\n\n\n\tpublic function prepare_item_for_response( $cover_url, $request ) {\n\t\t$data = array(\n\t\t\t'image' => $cover_url,\n\t\t);\n\n\t\t$context  = ! empty( $request->get_param( 'context' ) ) ? $request->get_param( 'context' ) : 'view';\n\t\t$data     = $this->add_additional_fields_to_object( $data, $request );\n\t\t$data     = $this->filter_response_by_context( $data, $context );\n\t\t$response = rest_ensure_response( $data );\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_prepare_value', $response, $request, $cover_url );\n\t}\n\n\n\tpublic function get_item_schema() {\n\t\tif ( is_null( $this->schema ) ) {\n\t\t\t$this->schema = array(\n\t\t\t\t'$schema'    => 'http:\n\t\t\t\t'title'      => 'bp_attachments_group_cover',\n\t\t\t\t'type'       => 'object',\n\t\t\t\t'properties' => array(\n\t\t\t\t\t'image' => array(\n\t\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t\t\t'description' => __( 'Full size of the image file.', 'buddypress' ),\n\t\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t\t'format'      => 'uri',\n\t\t\t\t\t\t'readonly'    => true,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_schema', $this->add_additional_fields_schema( $this->schema ) );\n\t}\n}\n\n'BP-REST/tests/bootstrap.php'\n:<?php\n\n\n\nconst WP_TESTS_PHPUNIT_POLYFILLS_PATH = __DIR__ . '/../vendor/yoast/phpunit-polyfills';\n\n\nrequire( dirname( __FILE__ ) . '/define-constants.php' );\n\nif ( ! file_exists( WP_TESTS_DIR . '/includes/functions.php' ) ) {\n\tdie( \"The WordPress PHPUnit test suite could not be found.\\n\" );\n}\n\nif ( ! file_exists( BP_TESTS_DIR . '/includes/loader.php' ) ) {\n\tdie( \"The BuddyPress plugin could not be found.\\n\" );\n}\n\n\nrequire_once WP_TESTS_DIR . '/includes/functions.php';\n\n\nfunction _manually_load_plugins() {\n\n\n\trequire_once BP_TESTS_DIR . '/includes/loader.php';\n\n\n\trequire_once dirname( __FILE__ ) . '/../bp-rest.php';\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugins' );\n\necho \"Loading WP Testing environment...\\n\";\nrequire_once WP_TESTS_DIR . '/includes/bootstrap.php';\n\necho \"Loading BuddyPress testcases...\\n\";\nrequire_once BP_TESTS_DIR . '/includes/testcase.php';\nrequire_once BP_TESTS_DIR . '/includes/testcase-emails.php';\n\n\nfunction toggle_component_visibility( $visibility = true ) {\n\t$visibility = $visibility ? 'members' : 'anyone';\n\n\tupdate_option(\n\t\t'_bp_community_visibility',\n\t\tarray(\n\t\t\t'global'   => $visibility,\n\t\t\t'activity' => $visibility,\n\t\t\t'members'  => $visibility,\n\t\t\t'groups'   => $visibility,\n\t\t\t'blogs'    => $visibility,\n\t\t)\n\t);\n}\n\n'BP-REST/bp-rest.php'\n:<?php\n\n\n\n\ndefined( 'ABSPATH' ) || exit;\n\n\nfunction bp_rest() {\n\n\tif ( ! class_exists( 'WP_REST_Controller' ) ) {\n\t\treturn;\n\t}\n\n\trequire_once __DIR__ . '/includes/bp-components/classes/class-bp-rest-components-endpoint.php';\n\t$controller = new BP_REST_Components_Endpoint();\n\t$controller->register_routes();\n\n\tif ( bp_is_active( 'members' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-members-endpoint.php';\n\t\t$controller = new BP_REST_Members_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-attachments/classes/trait-attachments.php';\n\n\n\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-attachments-member-avatar-endpoint.php';\n\t\t$controller = new BP_REST_Attachments_Member_Avatar_Endpoint();\n\t\t$controller->register_routes();\n\n\n\t\tif ( bp_is_active( 'members', 'cover_image' ) ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-attachments-member-cover-endpoint.php';\n\t\t\t$controller = new BP_REST_Attachments_Member_Cover_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\n\t\tif ( bp_get_signup_allowed() ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-signup-endpoint.php';\n\t\t\t$controller = new BP_REST_Signup_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\t}\n\n\tif ( bp_is_active( 'activity' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-activity/classes/class-bp-rest-activity-endpoint.php';\n\t\t$controller = new BP_REST_Activity_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( is_multisite() && bp_is_active( 'blogs' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-blogs/classes/class-bp-rest-blogs-endpoint.php';\n\t\t$controller = new BP_REST_Blogs_Endpoint();\n\t\t$controller->register_routes();\n\n\n\t\tif ( bp_is_active( 'blogs', 'site-icon' ) ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-attachments/classes/trait-attachments.php';\n\t\t\trequire_once __DIR__ . '/includes/bp-blogs/classes/class-bp-rest-attachments-blog-avatar-endpoint.php';\n\t\t\t$controller = new BP_REST_Attachments_Blog_Avatar_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\t}\n\n\tif ( bp_is_active( 'xprofile' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-xprofile/classes/class-bp-rest-xprofile-fields-endpoint.php';\n\t\t$controller = new BP_REST_XProfile_Fields_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-xprofile/classes/class-bp-rest-xprofile-field-groups-endpoint.php';\n\t\t$controller = new BP_REST_XProfile_Field_Groups_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-xprofile/classes/class-bp-rest-xprofile-data-endpoint.php';\n\t\t$controller = new BP_REST_XProfile_Data_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( bp_is_active( 'groups' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-groups-endpoint.php';\n\t\t$controller = new BP_REST_Groups_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-group-membership-endpoint.php';\n\t\t$controller = new BP_REST_Group_Membership_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-group-invites-endpoint.php';\n\t\t$controller = new BP_REST_Group_Invites_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-group-membership-request-endpoint.php';\n\t\t$controller = new BP_REST_Group_Membership_Request_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-attachments/classes/trait-attachments.php';\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-attachments-group-avatar-endpoint.php';\n\t\t$controller = new BP_REST_Attachments_Group_Avatar_Endpoint();\n\t\t$controller->register_routes();\n\n\n\t\tif ( bp_is_active( 'groups', 'cover_image' ) ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-attachments-group-cover-endpoint.php';\n\t\t\t$controller = new BP_REST_Attachments_Group_Cover_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\t}\n\n\tif ( bp_is_active( 'messages' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-messages/classes/class-bp-rest-messages-endpoint.php';\n\t\t$controller = new BP_REST_Messages_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-messages/classes/class-bp-rest-sitewide-notices-endpoint.php';\n\t\t$controller = new BP_REST_Sitewide_Notices_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( bp_is_active( 'notifications' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-notifications/classes/class-bp-rest-notifications-endpoint.php';\n\t\t$controller = new BP_REST_Notifications_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( bp_is_active( 'friends' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-friends/classes/class-bp-rest-friends-endpoint.php';\n\t\t$controller = new BP_REST_Friends_Endpoint();\n\t\t$controller->register_routes();\n\t}\n}\nadd_action( 'bp_rest_api_init', 'bp_rest', 5 );\n\n\nfunction bp_filter_rest_request_blog_url( $request, $url ) {\n\n\tif ( ! bp_is_active( 'blogs' ) || empty( $url ) ) {\n\t\treturn $request;\n\t}\n\n\n\t$bits      = wp_parse_url( $url );\n\t$home_bits = wp_parse_url( get_home_url() );\n\n\tif ( empty( $bits['host'] ) || empty( $home_bits['host'] ) ) {\n\t\treturn $request;\n\t}\n\n\n\tif ( $bits['host'] === $home_bits['host'] ) {\n\t\treturn $request;\n\t}\n\n\n\t$request = new WP_REST_Request( 'GET', $bits['path'] );\n\t$request->set_query_params( array( 'bp_blogs_url' => $url ) );\n\n\treturn $request;\n}\nadd_filter( 'rest_request_from_url', 'bp_filter_rest_request_blog_url', 10, 2 );\n\n\nfunction bp_rest_post_dispatch( $response, $instance, $request ) {\n\tif (\n\t\t! bp_is_active( 'blogs' )\n\t\t|| 404 !== $response->get_status()\n\t\t|| 'embed' !== $request->get_param( 'context' )\n\t\t|| empty( $request->get_param( 'bp_blogs_url' ) )\n\t\t|| empty( $request->get_route() )\n\t) {\n\t\treturn $response;\n\t}\n\n\n\t$bits = wp_parse_url( $request->get_param( 'bp_blogs_url' ) );\n\n\n\tif ( empty( $bits['host'] ) || empty( $bits['path'] ) ) {\n\t\treturn $response;\n\t}\n\n\n\tif ( $request->get_route() !== $bits['path'] ) {\n\t\treturn $response;\n\t}\n\n\n\t$site = get_site_by_path( $bits['host'], $bits['path'] );\n\n\tif ( ! $site instanceof WP_Site || empty( $site->blog_id ) ) {\n\t\treturn $response;\n\t}\n\n\tswitch_to_blog( absint( $site->blog_id ) );\n\n\t$response = rest_do_request(\n\t\tnew WP_REST_Request(\n\t\t\t'GET',\n\t\t\tstr_replace(\n\t\t\t\t'/wp-json',\n\t\t\t\t'',\n\t\t\t\t$request->get_route()\n\t\t\t)\n\t\t)\n\t);\n\n\trestore_current_blog();\n\n\n\treturn $response;\n}\nadd_filter( 'rest_post_dispatch', 'bp_rest_post_dispatch', 10, 3 );\n",
        "gt": [
            "'BP-REST/includes/bp-groups/classes/class-bp-rest-attachments-group-cover-endpoint.php'",
            "'BP-REST/bp-rest.php'",
            "'BP-REST/tests/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'laravel-pug/tests/PugCompilerTest.php'",
            "'laravel-pug/tests/helpers.php'",
            "'laravel-pug/tests/config-helper.php'"
        ],
        "content": "'laravel-pug/tests/PugCompilerTest.php'\n:<?php\n\nnamespace Phug\\Test;\n\nuse Bkwld\\LaravelPug\\PugCompiler;\nuse Bkwld\\LaravelPug\\ServiceProvider;\nuse Illuminate\\Filesystem\\Filesystem;\nuse InvalidArgumentException;\nuse PHPUnit\\Framework\\TestCase;\nuse Pug\\Pug;\n\nclass PugCompilerGetAndSetPath extends PugCompiler\n{\n    protected $overriddenPath;\n\n    public function getPath()\n    {\n        return $this->overriddenPath;\n    }\n\n    public function setPath($path)\n    {\n        $this->overriddenPath = $path;\n    }\n}\n\n\nclass PugCompilerTest extends TestCase\n{\n\n    public function testIsExpired()\n    {\n        $pug = new Pug([\n            'cache'        => true,\n            'defaultCache' => sys_get_temp_dir(),\n        ]);\n        $compiler = new PugCompiler([[$pug], 0], new Filesystem(), [], sys_get_temp_dir());\n        $path = realpath(__DIR__.'/example.pug');\n        $compiledPath = $compiler->getCompiledPath($path);\n\n        self::assertSame(sys_get_temp_dir(), dirname($compiledPath));\n\n\n        if (file_exists($compiledPath)) {\n            unlink($compiledPath);\n            clearstatcache();\n        }\n\n        self::assertTrue($compiler->isExpired($path));\n\n        $compiler->compile($path);\n        touch(__DIR__.'/example.pug', time() - 3600);\n        clearstatcache();\n\n        self::assertFalse($compiler->isExpired($path));\n\n        $compiler->setCachePath(null);\n\n        self::assertTrue($compiler->isExpired($path));\n\n\n        if (file_exists($compiledPath)) {\n            unlink($compiledPath);\n            clearstatcache();\n        }\n    }\n\n\n    public function testIncludeIsExpired()\n    {\n        $cache = sys_get_temp_dir().DIRECTORY_SEPARATOR.'foo';\n        $pug = new Pug([\n            'cache'        => $cache,\n            'defaultCache' => sys_get_temp_dir(),\n        ]);\n\n        if (!($pug instanceof \\Phug\\Renderer)) {\n            self::markTestSkipped('Include cache expiration only available since pug-php 3.');\n        }\n\n        $files = new Filesystem();\n        if (!$files->exists($cache)) {\n            $files->makeDirectory($cache);\n        }\n        $path = realpath(__DIR__.'/example.pug');\n        $compiler = new PugCompiler([[$pug], 0], $files, [], $cache);\n        $compiledPath = $compiler->getCompiledPath($path);\n\n        self::assertSame($cache, dirname($compiledPath));\n\n        $pug->setOption('cache', true);\n        $path = realpath(__DIR__.'/include.pug');\n        $compiledPath = $compiler->getCompiledPath($path);\n\n        touch(__DIR__.'/include.pug', time() - 3600);\n        touch(__DIR__.'/example.pug', time() - 3600);\n        $compiler->compile($path);\n        clearstatcache();\n\n        self::assertFalse($compiler->isExpired($path));\n\n        touch(__DIR__.'/example.pug', time() + 3600);\n        clearstatcache();\n\n        self::assertTrue($compiler->isExpired($path));\n\n        touch(__DIR__.'/example.pug', time() - 3600);\n        unlink($compiledPath.'.imports.serialize.txt');\n        clearstatcache();\n\n        self::assertTrue($compiler->isExpired($path));\n\n\n        if (file_exists($compiledPath)) {\n            unlink($compiledPath);\n            clearstatcache();\n        }\n    }\n\n\n    public function testCompile()\n    {\n        $pug = new Pug([\n            'defaultCache' => sys_get_temp_dir(),\n        ]);\n        $compiler = new PugCompiler([[$pug], 0], new Filesystem(), [], sys_get_temp_dir());\n        $path = realpath(__DIR__.'/example.pug');\n        $compiledPath = $compiler->getCompiledPath($path);\n        $compiler->compile($path);\n        ob_start();\n        include $compiledPath;\n        $contents = ob_get_contents();\n        ob_end_clean();\n\n        self::assertSame('<h1>Pug is there</h1><p>{{ $sentence }}</p>@if (1 === 1)<div>Go</div>@endif', $contents);\n\n\n        if (file_exists($compiledPath)) {\n            unlink($compiledPath);\n            clearstatcache();\n        }\n    }\n\n\n    public function testGetAndSetPath()\n    {\n        $pug = new Pug([\n            'defaultCache' => sys_get_temp_dir(),\n        ]);\n        $compiler = new PugCompilerGetAndSetPath([[$pug], 0], new Filesystem(), [], sys_get_temp_dir());\n        $compiledPath = $compiler->getCompiledPath('foo');\n\n        try {\n            $compiler->compile('foo');\n        } catch (\\Exception $exception) {\n\n        }\n\n\n        if (file_exists($compiledPath)) {\n            unlink($compiledPath);\n            clearstatcache();\n        }\n\n        self::assertSame('foo', $compiler->getPath());\n\n        $path = realpath(__DIR__.'/example.pug');\n        $compiledPath = $compiler->getCompiledPath($path);\n        $compiler->setPath($path);\n        $compiler->compile(null);\n\n        $sentence = 'By HTML syntax!';\n        ob_start();\n        include $compiledPath;\n        $contents = ob_get_contents();\n        ob_end_clean();\n\n        self::assertSame('<h1>Pug is there</h1><p>{{ $sentence }}</p>@if (1 === 1)<div>Go</div>@endif', $contents);\n\n\n        if (file_exists($compiledPath)) {\n            unlink($compiledPath);\n            clearstatcache();\n        }\n    }\n\n\n    public function testGetCachePath()\n    {\n        $compiler = new PugCompiler([[new Pug()], 0], new Filesystem(), [], sys_get_temp_dir().'/foo');\n\n        self::assertSame(sys_get_temp_dir().'/foo', $compiler->getCachePath());\n\n        $compiler = new PugCompiler([[new Pug([\n            'cache'        => sys_get_temp_dir().'/foo',\n            'defaultCache' => sys_get_temp_dir().'/bar',\n        ])], 0], new Filesystem(), []);\n\n        self::assertSame(sys_get_temp_dir().'/foo', $compiler->getCachePath());\n\n        $compiler = new PugCompiler([[new Pug([\n            'cache'        => sys_get_temp_dir().'/foo',\n            'defaultCache' => sys_get_temp_dir().'/bar',\n        ])], 0], new Filesystem(), [], sys_get_temp_dir().'/biz');\n\n        self::assertSame(sys_get_temp_dir().'/biz', $compiler->getCachePath());\n\n        $compiler = new PugCompiler([[new Pug([\n            'defaultCache' => sys_get_temp_dir().'/bar',\n        ])], 0], new Filesystem(), []);\n\n        self::assertSame(sys_get_temp_dir().'/bar', $compiler->getCachePath());\n    }\n\n\n    public function testGetOption()\n    {\n        $compiler = new PugCompiler([[new Pug([\n            'foo' => 'bar',\n        ])], 0], new Filesystem(), [], 'i');\n\n        self::assertSame('bar', $compiler->getOption('foo', 'bop'));\n        self::assertSame('bidoup', $compiler->getOption('biz', 'bidoup'));\n    }\n\n\n    public function testSetCachePath()\n    {\n        $pug = new Pug([\n            'defaultCache' => sys_get_temp_dir(),\n        ]);\n        $compiler = new PugCompiler([[$pug], 0], new Filesystem(), [], sys_get_temp_dir());\n        $compiler->setCachePath('foo');\n\n        self::assertStringStartsWith('foo/', $compiler->getCompiledPath('bar.pug'));\n        self::assertSame('foo', $pug->getOption('cache'));\n    }\n\n\n    public function testCompilePathException()\n    {\n        $this->expectException(InvalidArgumentException::class);\n        $this->expectExceptionMessage('Missing path argument.');\n\n        $pug = new Pug([\n            'defaultCache' => sys_get_temp_dir(),\n        ]);\n        $compiler = new PugCompiler([[$pug], 0], new Filesystem(), [], sys_get_temp_dir());\n        $compiler->compile(null);\n    }\n\n\n    public function testRender()\n    {\n        $pug = new Pug([\n            'defaultCache' => sys_get_temp_dir(),\n        ]);\n        $compiler = new PugCompiler([[$pug], 0], new Filesystem(), [], sys_get_temp_dir());\n        $path = __DIR__.'/js-expression.pug';\n        $php = $compiler->compile($path);\n        $items = ['a', 'b', 'c'];\n        ob_start();\n        include $compiler->getCompiledPath($path);\n        $html = ob_get_contents();\n        ob_end_clean();\n\n        self::assertSame('<a href=\"?item=a\">a</a><a href=\"?item=b\">b</a><a href=\"?item=c\">c</a>', $html);\n    }\n\n\n    public function testRenderComponent()\n    {\n        include_once __DIR__.'/LaravelTestApp.php';\n        include_once __DIR__.'/helpers.php';\n\n        $app = new LaravelTestApp();\n        $app->singleton('files', function () {\n            return new Filesystem();\n        });\n        $provider = new ServiceProvider($app);\n\n        self::assertSame(\n            '<header>Sure?</header>Are you sure?<button>Yes</button>',\n            $provider->getPugEngine()->renderFile(__DIR__.'/component.pug')\n        );\n    }\n}\n\n'laravel-pug/tests/helpers.php'\n:<?php\n\nuse Phug\\Test\\Config;\n\nif (!interface_exists('Illuminate\\Contracts\\Foundation\\Application')) {\n    include_once __DIR__.'/LaravelLegacyApplicationInterface.php';\n    include_once __DIR__.'/LaravelApplicationInterface.php';\n}\n\nif (!class_exists(Config::class)) {\n    include_once __DIR__.'/config-helper.php';\n}\n\nif (!class_exists('Facade\\Ignition\\Exceptions\\ViewException')) {\n    include_once __DIR__.'/ViewException.php';\n}\n\nif (!function_exists('config_path')) {\n    function config_path($input)\n    {\n        return $input;\n    }\n}\n\nif (!function_exists('storage_path')) {\n    function storage_path($input)\n    {\n        return $input;\n    }\n}\n\nif (!function_exists('resource_path')) {\n    function resource_path($input)\n    {\n        return \"resource/$input\";\n    }\n}\n\n'laravel-pug/tests/config-helper.php'\n:<?php\n\nnamespace Phug\\Test;\n\nuse ArrayAccess;\n\nclass Config implements ArrayAccess\n{\n    protected $useSysTempDir = false;\n\n    protected $data = [];\n\n    public function __construct($source = null)\n    {\n        $this->data['source'] = $source;\n    }\n\n    public function setUseSysTempDir($useSysTempDir)\n    {\n        $this->useSysTempDir = $useSysTempDir;\n    }\n\n    public function get($input)\n    {\n        if ($this->useSysTempDir && in_array($input, ['laravel-pug'])) {\n            return [\n                'assetDirectory'  => __DIR__.'/assets',\n                'outputDirectory' => sys_get_temp_dir(),\n                'defaultCache'    => sys_get_temp_dir(),\n            ];\n        }\n\n        return isset($this->data[$input]) ? $this->data[$input] : [\n            'input' => $input,\n        ];\n    }\n\n    public function set($offset, $value)\n    {\n        $this->data[$offset] = $value;\n    }\n\n    public function offsetExists($offset)\n    {\n        return isset($this->data[$offset]);\n    }\n\n    public function offsetGet($offset)\n    {\n        return $this->data[$offset];\n    }\n\n    public function offsetSet($offset, $value)\n    {\n        $this->data[$offset] = $value;\n    }\n\n    public function offsetUnset($offset)\n    {\n        unset($this->data[$offset]);\n    }\n\n    public function __toString()\n    {\n        return strval($this->data['source']);\n    }\n}\n",
        "gt": [
            "'laravel-pug/tests/config-helper.php'",
            "'laravel-pug/tests/helpers.php'",
            "'laravel-pug/tests/PugCompilerTest.php'"
        ]
    },
    {
        "files": [
            "'litefilesystem.js/src/include/core.php'",
            "'litefilesystem.js/src/server.php'",
            "'litefilesystem.js/src/install.php'"
        ],
        "content": "'litefilesystem.js/src/include/core.php'\n:<?php\n\n\n\n\n\nerror_reporting(E_ALL);\n\n\n\n\n\n$is_console = php_sapi_name() == \"cli\";\n\nif($is_console && count($argv) > 1)\n\n{\n\n\t$params = explode( \"&\",  $argv[1] );\n\n\tforeach($params as $p => $param)\n\n\t{\n\n\t\t$t = explode( \"=\", $param );\n\n\t\tif( count($t) > 1 )\n\n\t\t\t$_REQUEST[ $t[0] ] = $t[1];\n\n\t}\n\n}\n\n\n\nif( !$is_console )\n\n\t$global_url = \"http:\n\nelse\n\n\t$global_url = \"localhost/\";\n\n\n\n\n\n\n\nif (!file_exists(__DIR__ . \"/config.php\"))\n\n\tdie(\"config.php not found, check include/config.sample-php, change it and rename it to include/config.php\");\n\n\n\nrequire_once __DIR__ . \"/config.php\";\n\n\n\n\n\n$session_enabled = false;\n\nif(!headers_sent())\n\n\t$session_enabled = session_start();\n\n\n\n\n\nfunction trace($str)\n\n{\n\n\n\n\t$f = fopen(__DIR__.\"/trace.log\",\"a\");\n\n\tfwrite($f, date(\"Y-m-d H:i:s\") . \": \" . $str.\"\\n\");\n\n\tfclose($f);\n\n}\n\n\n\n$debug_buffer = Array();\n\nfunction debug($str, $color = null)\n\n{\n\n\tglobal $debug_buffer, $is_console;\n\n\n\n\tif($color && $is_console)\n\n\t{\n\n\t\t$colors = Array(\"\"=>\"\\033[0m\", \"black\"=>\"\\033[30m\", \"red\"=>\"\\033[31m\", \"green\"=>\"\\033[32m\", \"yellow\"=>\"\\033[33m\", \"blue\"=>\"\\033[34m\" );\n\n\t\tif( isset($colors[$color]))\n\n\t\t\t$str = $colors[$color] . $str . $colors[\"\"];\n\n\t}\n\n\n\n\tif($is_console)\n\n\t\techo(\" LOG: \" . $str.\"\\n\");\n\n\telse\n\n\t\t$debug_buffer[] = $str;\n\n}\n\n\n\nfunction clearDebugLog()\n\n{\n\n\tglobal $debug_buffer;\n\n\t$debug_buffer = Array();\n\n}\n\n\n\nfunction getDebugLog()\n\n{\n\n\tglobal $debug_buffer;\n\n\treturn $debug_buffer;\n\n}\n\n\n\n\n\n$loaded_modules = array();\n\n\n\nfunction registerModule($modulename, $class)\n\n{\n\n\tglobal $loaded_modules;\n\n\t$loaded_modules[$modulename] = new $class();\n\n}\n\n\n\nfunction getModule($modulename)\n\n{\n\n\tglobal $loaded_modules;\n\n\n\n\tif( strpos(\"..\",$modulename) != FALSE)\n\n\t\treturn null;\n\n\n\n\tif( isset( $loaded_modules[$modulename] ) )\n\n\t\treturn $loaded_modules[$modulename];\n\n\n\n\tif( file_exists(__DIR__ . \"/modules/\" . $modulename . \".php\") == FALSE)\n\n\t\treturn NULL;\n\n\n\n\n\n\trequire_once \"modules/\" . $modulename . \".php\";\n\n\n\n\treturn $loaded_modules[$modulename];\n\n}\n\n\n\nfunction loadModules($str)\n\n{\n\n\t$result = Array();\n\n\tif($str == \"*\")\n\n\t{\n\n\t\t$files = scandir(__DIR__ . '/modules/');\n\n\t\tforeach($files as $file)\n\n\t\t{\n\n\t\t\tif ($file == '.' || $file == '..' || substr($file,-4) != \".php\") continue;\n\n\n\n\t\t\t$module = getModule( substr($file,0,-4) );\n\n\t\t\t$result[] = $module;\n\n\t\t}\n\n\t\treturn $result;\n\n\t}\n\n\n\n\t$tokens = explode(\",\",$str);\n\n\tforeach($tokens as $k=>$v)\n\n\t\t$result[] = getModule($v);\n\n\treturn $result;\n\n}\n\n\n\n\n\nfunction dispatchEventToModules($event_type, &$data )\n\n{\n\n\t$modules = loadModules(\"*\");\n\n\t$result = true;\n\n\tforeach($modules as $module)\n\n\t{\n\n\t\tif( !method_exists($module, $event_type) )\n\n\t\t\tcontinue;\n\n\n\n\t\t$r = call_user_func_array( array($module , $event_type), array(&$data));\n\n\t\tif( $r === false)\n\n\t\t\t$result = false;\n\n\t}\n\n\treturn $result;\n\n}\n\n\n\n\n\n\n\n\n\n$mysqli = null;\n\n\n\nfunction getSQLDB()\n\n{\n\n\tglobal $mysqli;\n\n\tif( $mysqli )\n\n\t\treturn $mysqli;\n\n\n\n\t$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD);\n\n\tif (mysqli_connect_errno())\n\n\t\treturn null;\n\n\n\n\tif( $mysqli->select_db(DB_NAME) == FALSE)\n\n\t\treturn null;\n\n\n\n\treturn $mysqli;\n\n}\n\n\n\nfunction closeSQLDB()\n\n{\n\n\tglobal $mysqli;\n\n\tif( $mysqli ) $mysqli->close();\n\n}\n\n\n\n\n\n$redis = null;\n\nrequire_once 'extra/Predis/Autoloader.php';\n\n\n\nfunction getRedisDB()\n\n{\n\n\tglobal $redis;\n\n\tif ($redis) return $redis;\n\n\n\n\tPredis\\Autoloader::register();\n\n\t$redis = new Predis\\Client();\n\n\treturn $redis;\n\n}\n\n\n\n?>\n'litefilesystem.js/src/server.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n\n\nheader('Content-Type: application/json');\n\n\n\n\n\nif (!file_exists(__DIR__ . \"/include/config.php\"))\n\n\tdie('{\"status\":-10, \"msg\":\"config.php not found, check include/config.sample-php, change it and rename it to include/config.php\"}');\n\nrequire_once 'include/core.php';\n\n\n\n\n\nif( !isset($_REQUEST[\"action\"]) )\n\n{\n\n\tloadModules(\"*\");\n\n\tdie('{\"msg\":\"no action\"}');\n\n}\n\n\n\n\n\n$action = $_REQUEST[\"action\"];\n\n\n\n$pos = strpos($action,\"/\");\n\nif ($pos == false)\n\n\tdie('{\"msg\":\"no module in action\"}' . \"\\n\");\n\n\n\n$module_name = substr($action,0,$pos);\n\n$module_action = substr($action, $pos + 1, strlen($action) - $pos - 1);\n\n\n\n\n\n$module = getModule($module_name);\n\nif($module && method_exists($module,\"processAction\"))\n\n\t$module->processAction($module_action);\n\nelse\n\n\techo('{\"msg\":\"module not found\"}');\n\n\n\necho \"\\n\";\n\ncloseSQLDB();\n\n?>\n'litefilesystem.js/src/install.php'\n:<?php\n\n\n\n\t$allow_restart = true;\n\n\n\n\n\n\n\n\n\n\t$force = false;\n\n\t$restart_code = \"YES\";\n\n\n\n\t$console = php_sapi_name() == \"cli\";\n\n\t$end_string = $console ? \"\" : \"</div></body></html>\";\n\n\n\n\n\n\tif( $console && count($argv) > 1 && $argv[1] == \"force\" )\n\n\t\t$force = true;\n\n\n\n\tfunction showMessage($msg, $type = \"danger\")\n\n\t{\n\n\t\tglobal $console;\n\n\n\n\t\tif($console)\n\n\t\t{\n\n\t\t\t$msg = strip_tags($msg);\n\n\t\t\techo ($type == \"danger\" ? \"\\033[31m - \" : \" + \") . $msg.\"\\033[0m\\n\";\n\n\t\t\treturn;\n\n\t\t}\n\n\n\n\t\t?>\n\n\t\t<div class=\"bs-callout bs-callout-<?=$type?>\" id=\"callout-glyphicons-empty-only\">\n\n\t\t\t<p><?=$msg?></p>\n\n\t\t</div>\n\n\t\t<?php\n\n\t}\n\n\n\n\tfunction getLog()\n\n\t{\n\n\t\tglobal $console;\n\n\t\t$result = \"\";\n\n\n\n\t\t$log = getDebugLog();\n\n\t\tforeach($log as $i => $line)\n\n\t\t\tif($console)\n\n\t\t\t\t$result .= \"  .- \". $line.\"\\n\";\n\n\t\t\telse\n\n\t\t\t\t$result .= \"<p>\".$line.\"</p>\";\n\n\n\n\t\treturn $result;\n\n\t}\n\n\n\n\tregister_shutdown_function( \"fatal_handler\" );\n\n\n\n\tfunction fatal_handler() {\n\n\t\tglobal $end_string;\n\n\t\t$errfile = \"unknown file\";\n\n\t\t$errstr  = \"shutdown\";\n\n\t\t$errno   = E_CORE_ERROR;\n\n\t\t$errline = 0;\n\n\n\n\t\t$error = error_get_last();\n\n\t\tif( $error !== NULL)\n\n\t\t{\n\n\t\t\t$errno   = $error[\"type\"];\n\n\t\t\t$errfile = $error[\"file\"];\n\n\t\t\t$errline = $error[\"line\"];\n\n\t\t\t$errstr  = $error[\"message\"];\n\n\t\t\tshowMessage( \"Code: \" . $errno . \" \\\"\" . $errstr . \"\\\" File: \" . $errfile . \" Ln: \" . $errline );\n\n\t\t\tdie($end_string);\n\n\t\t}\n\n\t}\n\n\n\n\tfunction read_input( $msg )\n\n\t{\n\n\t\techo $msg;\n\n\t\t$handle = fopen (\"php:\n\n\t\t$line = fgets($handle);\n\n\t\treturn trim($line);\n\n\t}\n\n\n\n\n\nif(!$console)\n\n{\n\n?>\n\n<!DOCTYPE html>\n\n<html lang=\"en\">\n\n  <head>\n\n    <meta charset=\"utf-8\">\n\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    <meta name=\"description\" content=\"\">\n\n    <meta name=\"author\" content=\"\">\n\n    <link rel=\"shortcut icon\" href=\"assets/ico/favicon.ico\">\n\n\n\n    <title>LiteFileServer</title>\n\n\n\n    <!-- Bootstrap core CSS -->\n\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <link href=\"css/bootstrap-callouts.css\" rel=\"stylesheet\">\n\n\n\n    <!-- Custom styles for this template -->\n\n    <link href=\"css/style.css\" rel=\"stylesheet\">\n\n\t<link href=\"js/extra/ladda.min.css\" rel=\"stylesheet\" >\n\n  </head>\n\n  <body>\n\n  <div class=\"container\">\n\n\t<h1>LiteFileServer installer</h1>\n\n\n\n<?php\n\n}\n\n\n\n\tif (!file_exists(__DIR__ . \"/include/config.php\"))\n\n\t{\n\n\t\tshowMessage(\"Cannot find <strong>include/config.php</strong> file, please remember to create a copy of  <strong>config.sample.php</strong> as  <strong>config.php </strong> and edit it with your DB values.\");\n\n\t\tdie($end_string);\n\n\t}\n\n\telse\n\n\t\tshowMessage(\"config.php found, testing database connection\",\"success\");\n\n\n\n\n\n\trequire_once 'include/core.php';\n\n\tloadModules(\"*\");\n\n\n\n\n\n\tif(ADMIN_PASS == \"\" || ADMIN_MAIL == \"\")\n\n\t{\n\n\t\tshowMessage(\"Error: Config.php must be changed, edit the config.php and add a password and an email for the admin account.\");\n\n\t\tdie($end_string);\n\n\t}\n\n\n\n\n\n\n\n\t$database = getSQLDB();\n\n\tif(!$database)\n\n\t{\n\n\t\tshowMessage(\"Cannot connect to database, check that the info inside config.php is correct and your databse running.\");\n\n\t\tdie($end_string);\n\n\t}\n\n\telse\n\n\t\tshowMessage(\"Database connection established\",\"success\");\n\n\n\n\n\n\t$system = getModule(\"system\");\n\n\t$is_ready = $system->checkReady();\n\n\n\n\tif( $is_ready && $console && count($argv) > 1 && $argv[1] == \"upgrade\" )\n\n\t{\n\n\t\tshowMessage(\"Upgrading system...\",\"primary\");\n\n\t\t$system->upgradeSystem();\n\n\t\tshowMessage(\"System upgraded\",\"success\");\n\n\t\tdie($end_string);\n\n\t}\n\n\n\n\n\n\t$owner = posix_getgrgid( filegroup( __FILE__) );\n\n\tif($owner && $owner[\"name\"] != \"www-data\")\n\n\t{\n\n\t\tshowMessage(\"The group of this script is not 'www-data', this could be a problem. Ensure that all files inside this folder belong to the www-data by running this command from inside the folder: su chown -R :www-data *\",\"danger\");\n\n\t}\n\n\n\n\tif( $is_ready && !$force )\n\n\t{\n\n\t\tshowMessage(\"All modules seem ready, nothing to do.\",\"warning\");\n\n\t\tdie($end_string);\n\n\t}\n\n\n\n\n\n\tif( ($force || !$is_ready))\n\n\t{\n\n\t\tif(!$allow_restart)\n\n\t\t\tshowMessage(\"RESTART is blocked, allow_restart in install.php is set to false.\",\"warning\");\n\n\t\telse\n\n\t\t{\n\n\t\t\tclearDebugLog();\n\n\t\t\tshowMessage(\"Creating databases and folders\",\"primary\");\n\n\n\n\n\n\t\t\tif($is_ready)\n\n\t\t\t{\n\n\t\t\t\tif($console)\n\n\t\t\t\t{\n\n\t\t\t\t\t$input = read_input(\"\\033[1;33mYou are about to erase all the data and files inside LFS.\\nIf you are sure type '\".$restart_code.\"': \\033[0m\");\n\n\t\t\t\t\tif($input != $restart_code)\n\n\t\t\t\t\t{\n\n\t\t\t\t\t\tshowMessage(\"Operation canceled.\");\n\n\t\t\t\t\t\tdie($end_string);\n\n\t\t\t\t\t}\n\n\t\t\t\t\telse\n\n\t\t\t\t\t\tshowMessage(\"Database restart in course.\");\n\n\t\t\t\t}\n\n\t\t\t\telse\n\n\t\t\t\t{\n\n\t\t\t\t\tshowMessage(\"Complete DATABASE restart can only be performed from the console using: php install.php force\");\n\n\t\t\t\t\tdie($end_string);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\n\t\t\t$system->restartSystem();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\tif( $system->checkReady() )\n\n\t\t\t{\n\n\t\t\t\tshowMessage(\"LiteFileServer installed, you can go to the <a href='index.html'>main page</a>.\",\"success\");\n\n\t\t\t\tif($console)\n\n\t\t\t\t\tchgrp( FILES_PATH, \"www-data\" );\n\n\t\t\t}\n\n\t\t\telse\n\n\t\t\t{\n\n\t\t\t\tshowMessage(\"Something went wrong.\",\"warning\");\n\n\t\t\t\tif(!$console)\n\n\t\t\t\t\techo('<div class=\"bs-callout bs-callout-<?=$type?>\" id=\"callout-glyphicons-empty-only\">' . getLog() . \"</div>\");\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\nif(!$console)\n\n\techo $end_string;\n\n\n\n?>",
        "gt": [
            "'litefilesystem.js/src/server.php'",
            "'litefilesystem.js/src/include/core.php'",
            "'litefilesystem.js/src/install.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'",
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/iframe_content.php'",
            "'firebirdwebadmin/inc/debug_funcs.inc.php'",
            "'firebirdwebadmin/inc/configuration.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'"
        ],
        "content": "'firebirdwebadmin/iframe_content.php'\n:<?php\n\n\n\n\n\n\n\n\n$no_session_referer = true;\n\nrequire './inc/script_start.inc.php';\n\n$key = get_request_data('key', 'GET');\n\nif ($job = get_iframejob($s_iframejobs, $key)) {\n    switch ($job['job']) {\n    case 'metadata':\n        list($content, $error) = isql_get_metadata($s_login['user'], $s_login['password'], $s_login['database'], $s_login['host']);\n        $content = implode(\"\\n\", $content);\n        break;\n\n    case 'dbstat':\n        if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            $content = fbird_db_info($service, $s_login['database'], $job['option']);\n            $content = trim(str_replace(array(chr(0x01), \"\\n\\n\"), array('', \"\\n\"), $content));\n            fbird_service_detach($service);\n        } else {\n            $error = fbird_errmsg();\n        }\n        break;\n\n    case 'backup':\n        if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            $content = fbird_backup($service, $job['source'], $job['target'], $job['options'], true);\n            $content = str_replace(array(chr(0x01).chr(0x0a), 'gbak: '), '', $content);\n            fbird_service_detach($service);\n        } else {\n            $error = fbird_errmsg();\n        }\n        break;\n\n    case 'restore':\n        if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            $content = fbird_restore($service, $job['source'], $job['target'], $job['options'], true);\n            $content = str_replace(array(chr(0x01).chr(0x0a), 'gbak: '), '', $content);\n            fbird_service_detach($service);\n\n\n            if ($job['connect']) {\n                $s_login['database'] = $job['target'];\n                if (!empty($s_sysdba_pw)) {\n                    $s_login['user'] = 'SYSDBA';\n                    $s_login['password'] = $s_sysdba_pw;\n                }\n\n                if ($dbhandle = db_connect()) {\n\n                    $s_connected = true;\n                    remove_edit_panels();\n                } else {\n\n                    $content .= '<p><span class=\"err\">'.$info_strings['FBError'].':</span>'.fbird_errmsg().\"</p>\\n\";\n                    $s_login['password'] = '';\n                    $s_connected = false;\n                }\n                cleanup_session();\n            }\n        } else {\n            $error = fbird_errmsg();\n        }\n        break;\n\n    case 'export':\n\n        include './inc/export.inc.php';\n\n        ob_start();\n        export_data($job['data']);\n        $content = ob_get_contents();\n        ob_end_clean();\n        break;\n    }\n\n    echo iframe_content($content, $error);\n\n    unset($s_iframejobs[$key]);\n    globalize_session_vars();\n}\n\nfunction get_iframejob($iframejobs, $key)\n{\n    if (isset($iframejobs[$key])) {\n        return $iframejobs[$key];\n    }\n\n    return  false;\n}\n\nfunction iframe_content($content, $error)\n{\n    return html_head('FirebirdWebAdmin '.VERSION)\n         .\"<body class=\\\"if\\\">\\n\"\n         .($error ? '<p><span class=\"err\">'.$GLOBALS['info_strings']['Error'].':</span> '.$error.\"</p>\\n\" : '')\n         .\"<pre>\\n\"\n         .htmlspecialchars($content).\"\\n\"\n         .\"</pre>\\n\"\n         .\"</body>\\n\"\n         .\"</html>\\n\";\n}\n\n'firebirdwebadmin/inc/debug_funcs.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\nfunction write_output_buffer($fname)\n{\n    $fp = fopen($fname, 'w')\n        or die('Error opening file '.$fname);\n    fwrite($fp, ob_get_contents())\n        or die('Error writing to file '.$fname);\n    ob_end_flush();\n}\n\n\n\n\n\nfunction show_time_consumption($start, $end)\n{\n    list($sm, $ss) = explode(' ', $start);\n    list($em, $es) = explode(' ', $end);\n    $elapsed = $es - $ss + $em - $sm;\n    echo 'time consumption: '.$elapsed.\"<br>\\n\";\n}\n\n\n\n\n\n\n\nfunction add_debug($str, $file = null, $line = null)\n{\n    if ($file == null || $line == null) {\n        $dstr = \"<tr>\\n<td colspan=\\\"2\\\">\";\n        if (isset($GLOBALS[$str])) {\n            $dstr .= add_var_debug($str, \"<br>\\n\");\n        } else {\n            $dstr .= \"$str<br>\\n\";\n        }\n    } else {\n        $dstr = \"<tr>\\n<td>$file, $line:</td>\\n\";\n        if (isset($GLOBALS[$str])) {\n            $dstr .= '<td>'.add_var_debug($str, \"<br>\\n\");\n        } else {\n            $dstr .= \"<td>$str<br>\\n\";\n        }\n    }\n    $dstr .= \"</td>\\n</tr>\\n\";\n    $GLOBALS['debug'][] = $dstr;\n}\n\nfunction add_var_debug($var, $separator)\n{\n    if (!is_array($GLOBALS[$var])) {\n        return($var.' = '.$GLOBALS[$var]);\n    } else {\n        $str = $var.' = array('.$separator;\n        $arr = $GLOBALS[$var];\n        foreach ($arr as $key => $val) {\n            $str .= $key.' => '.$val.$separator;\n        }\n        $str .= ')'.$separator;\n\n        return $str;\n    }\n}\n\n\n\n\nfunction file_debug($str)\n{\n    include_once 'inc/configuration.inc.php';\n\n    $fp = fopen(TMPPATH.'debug.txt', 'a') or die('Error: cannot open file for debug output');\n    fwrite($fp, $str);\n    fclose($fp);\n}\n\n\n\n\nfunction js_alert($string)\n{\n    ?>\n<script language=\"JavaScript\">\n  <!--\n   alert(\"<?php echo $string;\n    ?>\");\n\n  </script>\n<?php\n\n}\n\n\n\n\nfunction show_session()\n{\n    debug_var($GLOBALS['HTTP_SESSION_VAR']);\n}\n\n\nfunction debug_die($var)\n{\n    debug_var($var);\n    die();\n}\n\n\nfunction debug_var($var)\n{\n    @include_once 'Var_Dump.php';\n    if (class_exists('Var_Dump')) {\n        Var_Dump::displayInit(array('display_mode' => 'HTML4_Text'),\n                              array('mode' => 'normal',\n                                    'offset' => 3,\n                                    'before_type' => '<font color=\"\n                                    'after_type' => '</font>',\n                                    'before_value' => '<font color=\"\n                                    'after_value' => '</font>',\n                                    )\n                              );\n        Var_Dump::display($var);\n    } else {\n        echo \"<pre>\\n\";\n        print_r($var);\n        echo \"</pre>\\n\";\n    }\n}\n\n?>\n\n'firebirdwebadmin/inc/configuration.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n\n\ndefine('VERSION', '3.4.1');\n\ndefine('BINPATH', '/usr/sbin/');\n\ndefine('TMPPATH', '/tmp/');\n\n\ndefine('DEFAULT_USER',    'SYSDBA');\ndefine('DEFAULT_DB',      'employee.fdb');\ndefine('DEFAULT_PATH',    '/var/lib/firebird/2.5/data/');\ndefine('DEFAULT_HOST',    'localhost');\ndefine('DEFAULT_ROLE',    '');\ndefine('DEFAULT_CACHE',   75);\ndefine('DEFAULT_CHARSET', 'NONE');\ndefine('DEFAULT_DIALECT', 3);\ndefine('DEFAULT_SERVER',  'FB_2.5');\n\n\ndefine('PROTOCOL', 'http');\n\n\ndefine('SP_LIMIT_NAME', '');\n\n\n\n\n\n\n\n$ALLOWED_DIRS = array();\n\n\n\n\n\n\n\n\n$ALLOWED_FILES = array();\n\ndefine('BACKUP_DIR', '/var/lib/firebird/2.5');\n\ndefine('LANGUAGE', 'english');\n\n\n\n$HIDE_PANELS = array(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                     );\n\n\n\n$SQL_DISABLE = array('CREATE DATABASE',\n                     'CREATE SCHEMA'\n\n\n                     );\n\ndefine('SYSDBA_GET_ALL', true);\n\n\n\ndefine('CONFIRM_DELETE', true);\n\ndefine('SQL_AREA_COLS', 80);\ndefine('SQL_AREA_ROWS', 6);\n\ndefine('IFRAME_HEIGHT', 350);\n\ndefine('SQL_MAXSAVE', 100);\n\n\n\ndefine('SQL_HISTORY_SIZE', 25);\n\ndefine('SHOW_OUTPUT_ROWS', 100);\n\n\ndefine('DATA_MAXWIDTH', 50);\n\ndefine('FKLOOKUP_ENTRIES', 1000);\n\ndefine('MAX_CSV_LINE', 50000);\n\n\ndefine('DEFAULT_ROWS', 25);\n\ndefine('BLOB_WINDOW_WIDTH', 600);\ndefine('BLOB_WINDOW_HEIGHT', 800);\n\ndefine('SESSION_NAME', 'firebirdwebadmin');\n\n\ndefine('TRANS_READ', IBASE_COMMITTED | IBASE_NOWAIT | IBASE_READ);\ndefine('TRANS_WRITE', IBASE_COMMITTED | IBASE_NOWAIT | IBASE_WRITE);\n\ndefine('META_REDIRECT', false);\n\n\ndefine('DEBUG', false);\ndefine('DEBUG_HTML', false);\n\ndefine('DEBUG_COMMANDS', false);\ndefine('DEBUG_FILES', true);\n\n\n\nif ('' != SESSION_NAME) {\n    session_name(SESSION_NAME);\n}\n\nif (DEBUG === true) {\n    error_reporting(E_ALL | E_NOTICE | E_STRICT);\n}\n\n'firebirdwebadmin/inc/script_start.inc.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/configuration.inc.php';\n\nif (DEBUG) {\n    $start_time = @microtime();\n}\n\nrequire './inc/functions.inc.php';\n\nsession_start();\nset_error_handler('error_handler');\n\nrequire get_language_file('./lang/');\nrequire './inc/session.inc.php';\nrequire './inc/firebird.inc.php';\nrequire './inc/panel_elements.inc.php';\nrequire './inc/javascript.inc.php';\n\nif (DEBUG || DEBUG_HTML) {\n    include './inc/debug_funcs.inc.php';\n}\n\nif (!extension_loaded('interbase')) {\n    die($ERRORS['NO_IBASE_MODULE']);\n}\n\nif (!isset($_SESSION['s_init'])\n    || ($_SESSION['s_cookies'] === 'untested')\n) {\n    initialize_session();\n    fallback_session();\n} else {\n    localize_session_vars();\n}\n\nif (!isset($no_session_referer) || $no_session_referer !== true) {\n\n    $s_referer = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n}\n\nsend_http_headers();\n\n\n$message = '';\n$warning = '';\n$error = '';\n$fb_error = '';\n$php_error = '';\n$debug = array();\n$externcmd = '';\n\n\n\n$js_stack = '';\n\n\n\n$sql = '';\n\n\n\nif ($s_connected == true && !isset($_GET['unconnected'])) {\n    $dbhandle = db_connect();\n\n    if ($dbhandle === false) {\n        $fb_error = fbird_errmsg();\n        $s_connected = false;\n        $s_tables_valid = false;\n        $s_wt['table'] = '';\n    }\n\n    if (empty($s_charsets)) {\n        $s_charsets = get_charsets();\n    }\n}\n\n\nlist($family, $version) = server_info($s_login['server']);\ndefine('SERVER_FAMILY', $family);\ndefine('SERVER_VERSION', $version);\n\nif ($s_binpath != BINPATH) {\n\n\n    if (!is_dir(BINPATH)\n        || (!is_file(BINPATH.'isql') && !is_file(BINPATH.'isql-fb') && !is_file(BINPATH.'isql.exe'))\n    ) {\n        $warning = sprintf($WARNINGS['BAD_ISQLPATH'], BINPATH);\n    }\n\n\n    if (!is_dir(TMPPATH) || !is_writeable(TMPPATH)) {\n        $warning .= sprintf($WARNINGS['BAD_TMPPATH'], TMPPATH);\n    }\n\n    $s_binpath = BINPATH;\n}\n\nif (DEBUG_HTML) {\n    ob_start();\n}\n",
        "gt": [
            "'firebirdwebadmin/inc/configuration.inc.php'",
            "'firebirdwebadmin/inc/debug_funcs.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/iframe_content.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/inc/script_end.inc.php'",
            "'firebirdwebadmin/lang/Czech.inc.php'",
            "'firebirdwebadmin/admin.php'"
        ],
        "content": "'firebirdwebadmin/inc/script_end.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n$title = build_title($menu_strings[$s_page]);\nrequire_once './views/header.php';\n\n\n\n\n\n\n\n\n\n\n\nforeach ($panels as $nr => $panel) {\n\n\n    if (in_array($panel[0], $HIDE_PANELS)\n    &&  ($s_login['user'] != 'SYSDBA'  ||  SYSDBA_GET_ALL == false  ||  $s_connected == false)) {\n        continue;\n    }\n\n    echo '<div id=\"p'.$nr.\"\\\">\\n\"\n       .'<a name=\"'.$panel[0].'\"></a>'.\"\\n\";\n\n    if ($panel[2] == 'open'  ||\n        ($panel[0] == 'info'  &&  critical_error())) {\n        echo get_open_panel_start($panel[1], $nr);\n\n\n\n        if (preg_match('/dt_(edit|delete)([0-9]+)/', $panel[0], $matches)) {\n            $instance = $matches[2];\n            if ($matches[1] == 'edit') {\n                include './panels/dt_edit.php';\n            } else {\n                $subject = 'row';\n                include './panels/confirm.php';\n            }\n        } else {\n            include './panels/'.$panel[0].'.php';\n        }\n\n        echo get_open_panel_end();\n    } else {\n        echo get_closed_panel($panel[1], $nr);\n    }\n\n    echo \"</div>\\n\";\n}\n\n\nif (isset($dbhandle)  &&  is_resource($dbhandle)) {\n\n\n\n}\n\nif (DEBUG_HTML) {\n    $fname = TMPPATH.substr_replace(basename($_SERVER['PHP_SELF']), 'html', -3);\n    write_output_buffer($fname);\n\n\n\n\n\n}\n\nrequire_once './views/footer.php';\nglobalize_session_vars();\n\n\n\n\nfunction critical_error()\n{\n    return !empty($GLOBALS['error'])  ||\n           !empty($GLOBALS['fb_error'])  ||\n           !empty($GLOBALS['php_error'])  ||\n           !empty($GLOBALS['externcmd']);\n}\n\n'firebirdwebadmin/lang/Czech.inc.php'\n:\n'firebirdwebadmin/admin.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/script_start.inc.php';\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_gfix')) {\n    $action = $argument = '';\n    $logout = $redirect = false;\n\n    if (isset($_POST['gfix_doit'])) {\n        $s_sysdba_pw = get_sysdba_pw();\n\n        $s_gfix = array('buffers' => get_request_data('adm_buffers'),\n                        'dialect' => get_request_data('adm_sql_dialect'),\n                        'access_mode' => get_request_data('adm_access_mode'),\n                        'write_mode' => get_request_data('adm_write_mode'),\n                        'use_space' => get_request_data('adm_use_space'),\n                        'sweep_interval' => (int) get_request_data('adm_housekeeping'),\n                        'sweep_ignore' => (boolean) get_request_data('adm_sweep_ignore'),\n                        'repair' => get_request_data('adm_repair'),\n                        'repair_ignore' => (boolean) get_request_data('adm_repair_ignore'),\n                        'shutdown' => get_request_data('adm_shutdown'),\n                        'shutdown_seconds' => (int) get_request_data('adm_shut_secs'),\n                        'reconnect' => (boolean) get_request_data('adm_shut_reconnect'),\n                        );\n    }\n\n\n    if (isset($_POST['adm_gfix_buffers'])  &&  !empty($s_gfix['buffers'])) {\n        $action = IBASE_PRP_PAGE_BUFFERS;\n        $argument = $s_gfix['buffers'];\n    }\n\n\n    if (isset($_POST['adm_gfix_dialect'])  &&  !empty($s_gfix['dialect'])) {\n        $action = IBASE_PRP_SET_SQL_DIALECT;\n        $argument = $s_gfix['dialect'];\n    }\n\n\n    if (isset($_POST['adm_gfix_access_mode'])  &&  !empty($s_gfix['access_mode'])) {\n        $action = IBASE_PRP_ACCESS_MODE;\n        $argument = $s_gfix['access_mode'] == $adm_strings['ReadWrite'] ? IBASE_PRP_AM_READWRITE : IBASE_PRP_AM_READONLY;\n    }\n\n\n    if (isset($_POST['adm_gfix_write_mode'])  &&  !empty($s_gfix['write_mode'])) {\n        $action = IBASE_PRP_WRITE_MODE;\n        $argument = $s_gfix['write_mode'] == $adm_strings['Sync'] ? IBASE_PRP_WM_SYNC : IBASE_PRP_WM_ASYNC;\n    }\n\n\n    if (isset($_POST['adm_gfix_use_space'])  &&  !empty($s_gfix['use_space'])) {\n        $action = IBASE_PRP_RESERVE_SPACE;\n        $argument = $s_gfix['use_space'] == $adm_strings['SmallFull'] ? IBASE_PRP_RES_USE_FULL : IBASE_PRP_RES;\n    }\n\n\n    if (isset($_POST['adm_gfix_housekeeping'])) {\n        $action = IBASE_PRP_SWEEP_INTERVAL;\n        $argument = $s_gfix['sweep_interval'];\n    }\n\n\n    if (isset($_POST['adm_gfix_sweep'])) {\n        $action = IBASE_RPR_SWEEP_DB;\n        $argument = $s_gfix['sweep_ignore'] ? IBASE_RPR_IGNORE_CHECKSUM : '';\n    }\n\n\n    if (isset($_POST['adm_gfix_repair'])  &&  !empty($s_gfix['repair'])) {\n        switch ($s_gfix['repair']) {\n        case 'mend':\n            $action = IBASE_RPR_MEND_DB;\n            break;\n        case 'validate':\n            $action = IBASE_RPR_VALIDATE_DB;\n            break;\n        case 'full':\n            $action = IBASE_RPR_FULL;\n            break;\n        case 'no_update':\n            $action = IBASE_RPR_CHECK_DB;\n            break;\n        }\n        $argument = $s_gfix['repair_ignore'] ? IBASE_RPR_IGNORE_CHECKSUM : '';\n    }\n\n\n    if (isset($_POST['adm_gfix_shutdown'])  && !empty($s_gfix['shutdown'])) {\n        switch ($s_gfix['shutdown']) {\n        case 'noconns':\n            $action = IBASE_PRP_DENY_NEW_ATTACHMENTS;\n            break;\n        case 'notrans':\n            $action = IBASE_PRP_DENY_NEW_TRANSACTIONS;\n            break;\n        case 'force':\n            $action = IBASE_PRP_SHUTDOWN_DB;\n            break;\n        }\n        $argument = $s_gfix['shutdown_seconds'];\n        $logout = $s_gfix['reconnect'] ? false : true;\n    }\n\n\n    if (isset($_POST['adm_gfix_rescind'])) {\n        $action = IBASE_PRP_DB_ONLINE;\n    }\n\n    if (!empty($action)) {\n        if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            if (empty($argument)) {\n                $result = fbird_maintain_db($service, $s_login['database'], $action);\n            } else {\n                $result = fbird_maintain_db($service, $s_login['database'], $action, $argument);\n            }\n            fbird_service_detach($service);\n            if (!$result) {\n                $fb_error = fbird_errmsg();\n            }\n        } else {\n            $fb_error = fbird_errmsg();\n        }\n\n        if ($logout == true) {\n            remove_edit_panels();\n            cleanup_session();\n            $s_connected = false;\n        }\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_dbstat', true)) {\n    if (isset($_POST['db_stat_select'])) {\n        $s_dbstat_option = get_request_data('db_stat_option');\n    }\n\n    if (!empty($s_dbstat_option)) {\n\n\n        $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"dbstat\";';});\n\n        $iframekey_dbstat = md5(uniqid('dbstat'));\n        $s_iframejobs[$iframekey_dbstat] = array('job' => 'dbstat',\n                                                 'option' => $s_dbstat_option,\n                                                 'timestamp' => time(), );\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_server')) {\n    $exe = 'fb_lock_print';\n\n\n    list($iblockpr_output, $binary_error) = exec_command($exe, ' -o');\n\n    $lock_header = '';\n    unset($iblockpr_output[0]);\n    foreach ($iblockpr_output as $line) {\n        if (strlen(trim($line)) == 0) {\n            break;\n        }\n        $lock_header .= $line.\"<br>\\n\";\n    }\n\n\n    list($iblockpr_output, $binray_error) = exec_command($exe, ' -i');\n\n    if (count($iblockpr_output) > 3) {\n        $iblock['names'] = preg_split('/[\\s,]+/', $iblockpr_output[0]);\n        $iblock['last'] = preg_split('/[\\s,]+/', $iblockpr_output[1]);\n        $iblock['avg'] = preg_split('/[\\s,]+/', $iblockpr_output[3]);\n    }\n\n\n    if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n        $server_info = fbird_server_info($service, IBASE_SVC_SERVER_VERSION)\n                      .' / '\n                      .fbird_server_info($service, IBASE_SVC_IMPLEMENTATION);\n        fbird_service_detach($service);\n    } else {\n        $fb_error = fbird_errmsg();\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_backup')) {\n    if (isset($_POST['adm_backup_doit'])) {\n        $s_backup = array('target' => get_request_data('adm_bu_target'),\n                          'mdonly' => (boolean) get_request_data('adm_bu_mdonly'),\n                          'mdoldstyle' => (boolean) get_request_data('adm_bu_mdoldstyle'),\n                          'transport' => (boolean) get_request_data('adm_bu_transport'),\n                          'convert' => (boolean) get_request_data('adm_bu_convert'),\n                          'nogc' => (boolean) get_request_data('adm_bu_nogc'),\n                          'ignorecs' => (boolean) get_request_data('adm_bu_ignorecs'),\n                          'ignorelt' => (boolean) get_request_data('adm_bu_ignorelt'),\n                          'verbose' => (boolean) get_request_data('adm_bu_verbose'),\n                          );\n    }\n\n    if (isset($_POST['adm_backup_doit'])  &&  !empty($s_backup['target'])) {\n        $s_sysdba_pw = get_sysdba_pw();\n\n        $backup_options = array('mdonly' => IBASE_BKP_METADATA_ONLY,\n                                'mdoldstyle' => IBASE_BKP_OLD_DESCRIPTIONS,\n                                'transport' => IBASE_BKP_NON_TRANSPORTABLE,\n                                'convert' => IBASE_BKP_CONVERT,\n                                'nogc' => IBASE_BKP_NO_GARBAGE_COLLECT,\n                                'ignorecs' => IBASE_BKP_IGNORE_CHECKSUMS,\n                                'ignorelt' => IBASE_BKP_IGNORE_LIMBO,\n                                );\n        $options = 0;\n        foreach ($backup_options as $idx => $option) {\n            if ($s_backup[$idx]) {\n                $options |= $option;\n            }\n        }\n\n        $source_db = !empty($s_login['host']) ? $s_login['host'].':'.$s_login['database'] : $s_login['database'];\n        $target_file = get_backup_filename($s_backup['target']);\n\n        if ($s_backup['verbose']) {\n\n            $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"backup\";';});\n\n            $iframekey_backup = md5(uniqid('backup'));\n            $s_iframejobs[$iframekey_backup] = array('job' => 'backup',\n                                                     'source' => $source_db,\n                                                     'target' => $target_file,\n                                                     'options' => $options,\n                                                     'timestamp' => time(), );\n        } elseif (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            $result = fbird_backup($service, $source_db, $target_file, $options, $s_backup['verbose']);\n            $message = nl2br(str_replace(array(chr(0x01).chr(0x0a), 'gbak: '), '', $result));\n            fbird_service_detach($service);\n        } else {\n            $fb_error = fbird_errmsg();\n        }\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_restore')) {\n    if (isset($_POST['adm_restore_doit'])) {\n        $s_restore = array('source' => get_request_data('adm_re_source'),\n                           'target' => get_request_data('adm_re_target'),\n                           'overwrite' => (boolean) get_request_data('adm_re_overwrite'),\n                           'inactive' => (boolean) get_request_data('adm_re_inactive'),\n                           'oneattime' => (boolean) get_request_data('adm_re_oneattime'),\n                           'useall' => (boolean) get_request_data('adm_re_useall'),\n                           'novalidity' => (boolean) get_request_data('adm_re_novalidity'),\n                           'kill' => (boolean) get_request_data('adm_re_kill'),\n                           'verbose' => (boolean) get_request_data('adm_re_verbose'),\n                           'connect' => (boolean) get_request_data('adm_re_connect'),\n                           );\n\n        if ($s_restore['connect']) {\n            $s_restore['verbose'] = true;\n        }\n    }\n\n    if (isset($_POST['adm_restore_doit'])  &&  !empty($s_restore['source'])  &&  !empty($s_restore['target'])) {\n        $s_sysdba_pw = get_sysdba_pw();\n\n        if (!is_allowed_db($s_restore['target'])) {\n            $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_restore['target']);\n        }\n\n        $restore_options = array('inactive' => IBASE_RES_DEACTIVATE_IDX,\n                                 'oneattime' => IBASE_RES_ONE_AT_A_TIME,\n                                 'useall' => IBASE_RES_USE_ALL_SPACE,\n                                 'novalidity' => IBASE_RES_NO_VALIDATE,\n                                 'kill' => IBASE_RES_NO_SHADOW,\n                                 );\n        $options = 0;\n        foreach ($restore_options as $idx => $option) {\n            if ($s_restore[$idx]) {\n                $options |= $option;\n            }\n        }\n        if ($s_restore['overwrite']) {\n            $options |= IBASE_RES_REPLACE;\n        } else {\n            $options |= IBASE_RES_CREATE;\n        }\n\n        if (empty($error)) {\n            $source_file = defined('BACKUP_DIR')  &&  BACKUP_DIR !== '' ? BACKUP_DIR.$s_restore['source'] : $s_restore['source'];\n\n            if ($s_restore['verbose']) {\n\n                $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"restore\";';});\n\n                $iframekey_restore = md5(uniqid('restore'));\n                $s_iframejobs[$iframekey_restore] = array('job' => 'restore',\n                                                      'source' => $source_file,\n                                                      'target' => $s_restore['target'],\n                                                      'options' => $options,\n                                                      'connect' => $s_restore['connect'],\n                                                      'timestamp' => time(), );\n            } elseif (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n                fbird_restore($service, $source_file, $s_restore['target'], $options, $s_restore['verbose']);\n                $message = 'restore started';\n                fbird_service_detach($service);\n            } else {\n                $fb_error = fbird_errmsg();\n            }\n        }\n    }\n}\n\n\n\n$s_page = 'Admin';\n$panels = $s_admin_panels;\n\nrequire './inc/script_end.inc.php';\n\nfunction get_backup_filename($pname)\n{\n    return (defined('BACKUP_DIR')  &&  BACKUP_DIR !== '')\n        ?  BACKUP_DIR.basename($pname)\n        : $pname;\n}\n\n\n\n\nfunction database_statistic_options()\n{\n    $options = array(IBASE_STS_HDR_PAGES => 'header page',\n                     IBASE_STS_DB_LOG => 'log page',\n                     IBASE_STS_DATA_PAGES => 'data pages',\n                     IBASE_STS_IDX_PAGES => 'index leaf pages',\n                     IBASE_STS_SYS_RELATIONS => 'system relations',\n                     );\n\n    return $options;\n}\n",
        "gt": [
            "'firebirdwebadmin/lang/Czech.inc.php'",
            "'firebirdwebadmin/inc/script_end.inc.php'",
            "'firebirdwebadmin/admin.php'"
        ]
    },
    {
        "files": [
            "'grav-plugin-git-sync/vendor/composer/autoload_psr4.php'",
            "'grav-plugin-git-sync/vendor/composer/autoload_real.php'",
            "'grav-plugin-git-sync/git-sync.php'",
            "'grav-plugin-git-sync/vendor/autoload.php'"
        ],
        "content": "'grav-plugin-git-sync/vendor/composer/autoload_psr4.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'Grav\\\\Plugin\\\\GitSync\\\\' => array($baseDir . '/classes'),\n    'Grav\\\\Plugin\\\\Console\\\\' => array($baseDir . '/cli'),\n    'Defuse\\\\Crypto\\\\' => array($vendorDir . '/defuse/php-encryption/src'),\n);\n\n'grav-plugin-git-sync/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        require __DIR__ . '/platform_check.php';\n\n        spl_autoload_register(array('ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader(\\dirname(\\dirname(__FILE__)));\n        spl_autoload_unregister(array('ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854', 'loadClassLoader'));\n\n        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());\n        if ($useStaticLoader) {\n            require __DIR__ . '/autoload_static.php';\n\n            call_user_func(\\Composer\\Autoload\\ComposerStaticInitc058e1b5c686df0909ec1cc39bb5d854::getInitializer($loader));\n        } else {\n            $map = require __DIR__ . '/autoload_namespaces.php';\n            foreach ($map as $namespace => $path) {\n                $loader->set($namespace, $path);\n            }\n\n            $map = require __DIR__ . '/autoload_psr4.php';\n            foreach ($map as $namespace => $path) {\n                $loader->setPsr4($namespace, $path);\n            }\n\n            $classMap = require __DIR__ . '/autoload_classmap.php';\n            if ($classMap) {\n                $loader->addClassMap($classMap);\n            }\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\n'grav-plugin-git-sync/git-sync.php'\n:<?php\n\nnamespace Grav\\Plugin;\n\nuse Composer\\Autoload\\ClassLoader;\nuse Grav\\Common\\Config\\Config;\nuse Grav\\Common\\Data\\Data;\nuse Grav\\Common\\Grav;\nuse Grav\\Common\\Page\\Interfaces\\PageInterface;\nuse Grav\\Common\\Plugin;\nuse Grav\\Common\\Scheduler\\Scheduler;\nuse Grav\\Plugin\\GitSync\\AdminController;\nuse Grav\\Plugin\\GitSync\\GitSync;\nuse Grav\\Plugin\\GitSync\\Helper;\nuse RocketTheme\\Toolbox\\Event\\Event;\n\n\nclass GitSyncPlugin extends Plugin\n{\n\n    protected $controller;\n\n    protected $git;\n\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            'onPluginsInitialized'   => [\n                ['autoload', 100000],\n                ['onPluginsInitialized', 1000]\n            ],\n            'onPageInitialized'      => ['onPageInitialized', 0],\n            'onFormProcessed'        => ['onFormProcessed', 0],\n            'onSchedulerInitialized' => ['onSchedulerInitialized', 0]\n        ];\n    }\n\n\n    public function autoload() : ClassLoader\n    {\n        return require __DIR__ . '/vendor/autoload.php';\n    }\n\n\n    public static function generateWebhookSecret()\n    {\n        return static::generateHash(24);\n    }\n\n\n    public static function generateRandomWebhook()\n    {\n        return '/_git-sync-' . static::generateHash(6);\n    }\n\n\n    public function onPluginsInitialized()\n    {\n        $this->enable(['gitsync' => ['synchronize', 0]]);\n        $this->init();\n\n        if ($this->isAdmin()) {\n            $this->enable([\n                'onTwigTemplatePaths'  => ['onTwigTemplatePaths', 0],\n                'onTwigSiteVariables'  => ['onTwigSiteVariables', 0],\n                'onAdminMenu'          => ['onAdminMenu', 0],\n                'onAdminSave'          => ['onAdminSave', 0],\n                'onAdminAfterSave'     => ['onAdminAfterSave', 0],\n                'onAdminAfterSaveAs'   => ['onAdminAfterSaveAs', 0],\n                'onAdminAfterDelete'   => ['onAdminAfterDelete', 0],\n                'onAdminAfterAddMedia' => ['onAdminAfterMedia', 0],\n                'onAdminAfterDelMedia' => ['onAdminAfterMedia', 0],\n            ]);\n\n            return;\n        }\n\n        $config = $this->config->get('plugins.' . $this->name);\n        $route = $this->grav['uri']->route();\n        $webhook = $config['webhook'] ?? false;\n        $secret = $config['webhook_secret'] ?? false;\n        $enabled = $config['webhook_enabled'] ?? false;\n\n        if ($enabled && $route === $webhook && $_SERVER['REQUEST_METHOD'] === 'POST') {\n            if ($secret) {\n                if (!$this->isRequestAuthorized($secret)) {\n                    http_response_code(401);\n                    header('Content-Type: application/json');\n                    echo json_encode([\n                        'status' => 'error',\n                        'message' => 'Unauthorized request'\n                    ]);\n                    exit;\n                }\n            }\n            try {\n                $this->synchronize();\n                header('Content-Type: application/json');\n                echo json_encode([\n                    'status' => 'success',\n                    'message' => 'GitSync completed the synchronization'\n                ]);\n            } catch (\\Exception $e) {\n                http_response_code(500);\n                header('Content-Type: application/json');\n                echo json_encode([\n                    'status' => 'error',\n                    'message' => 'GitSync failed to synchronize'\n                ]);\n            }\n            exit;\n        }\n    }\n\n\n    public function isRequestAuthorized($secret)\n    {\n        if (isset($_SERVER['HTTP_X_HUB_SIGNATURE'])) {\n            $payload = file_get_contents('php:\n\n            return $this->isGithubSignatureValid($secret, $_SERVER['HTTP_X_HUB_SIGNATURE'], $payload);\n        }\n        if (isset($_SERVER['HTTP_X_GITLAB_TOKEN'])) {\n            return $this->isGitlabTokenValid($secret, $_SERVER['HTTP_X_GITLAB_TOKEN']);\n        } else {\n            $payload = file_get_contents('php:\n            return $this->isGiteaSecretValid($secret, $payload);\n        }\n\n        return false;\n    }\n\n\n    public function isGithubSignatureValid($secret, $signatureHeader, $payload)\n    {\n        [$algorithm, $signature] = explode('=', $signatureHeader);\n\n        return $signature === hash_hmac($algorithm, $payload, $secret);\n    }\n\n\n    public function isGitlabTokenValid($secret, $token)\n    {\n        return $secret === $token;\n    }\n\n\n    public function isGiteaSecretValid($secret, $payload)\n    {\n        $payload = json_decode($payload, true);\n        if (!empty($payload) && isset($payload['secret'])) {\n            return $secret === $payload['secret'];\n        }\n\n        return false;\n    }\n\n    public function onAdminMenu()\n    {\n        $base = rtrim($this->grav['base_url'], '/') . '/' . trim($this->grav['admin']->base, '/');\n        $options = [\n            'hint' => Helper::isGitInitialized() ? 'Synchronize GitSync' : 'Configure GitSync',\n            'class' => 'gitsync-sync',\n            'location' => 'pages',\n            'route' => Helper::isGitInitialized() ? 'admin' : 'admin/plugins/git-sync',\n            'icon' => 'fa-' . $this->grav['plugins']->get('git-sync')->blueprints()->get('icon')\n        ];\n\n        if (Helper::isGitInstalled()) {\n            if (Helper::isGitInitialized()) {\n                $options['data'] = [\n                    'gitsync-useraction' => 'sync',\n                    'gitsync-uri' => $base . '/plugins/git-sync'\n                ];\n            }\n\n            $this->grav['twig']->plugins_quick_tray['GitSync'] = $options;\n        }\n    }\n\n    public function init()\n    {\n        if ($this->isAdmin()) {\n\n            $this->controller = new AdminController($this);\n            $this->git = &$this->controller->git;\n        } else {\n            $this->git = new GitSync();\n        }\n    }\n\n\n    public function synchronize()\n    {\n        if (!Helper::isGitInstalled() || !Helper::isGitInitialized()) {\n            return true;\n        }\n\n        $this->grav->fireEvent('onGitSyncBeforeSynchronize');\n\n        if ($this->git->hasChangesToCommit()) {\n            $this->git->commit();\n        }\n\n\n        $this->git->sync();\n\n        $this->grav->fireEvent('onGitSyncAfterSynchronize');\n\n        return true;\n    }\n\n    public function onSchedulerInitialized(Event $event)\n    {\n\n        $config = Grav::instance()['config'];\n        $run_at = $config->get('plugins.git-sync.sync.cron_at', '0 12,23 * * *');\n\n        if ($config->get('plugins.git-sync.sync.cron_enable', false)) {\n\n            $scheduler = $event['scheduler'];\n            $job = $scheduler->addFunction('Grav\\Plugin\\GitSync\\Helper::synchronize', [], 'GitSync');\n            $job->at($run_at);\n        }\n    }\n\n\n    public function reset()\n    {\n        if (!Helper::isGitInstalled() || !Helper::isGitInitialized()) {\n            return true;\n        }\n\n        $this->grav->fireEvent('onGitSyncBeforeReset');\n\n        $this->git->reset();\n\n        $this->grav->fireEvent('onGitSyncAfterReset');\n\n        return true;\n    }\n\n\n    public function onTwigTemplatePaths()\n    {\n        $this->grav['twig']->twig_paths[] = __DIR__ . '/templates';\n    }\n\n\n    public function onTwigSiteVariables()\n    {\n\n        if (!class_exists(Helper::class)) {\n            return false;\n        }\n\n        $user = $this->grav['user'];\n        if (!$user->authenticated) {\n            return false;\n        }\n\n        $settings = [\n            'first_time'    => !Helper::isGitInitialized(),\n            'git_installed' => Helper::isGitInstalled()\n        ];\n\n        $this->grav['twig']->twig_vars['git_sync'] = $settings;\n\n        $adminPath = trim($this->grav['admin']->base, '/');\n        if ($this->grav['uri']->path() === \"/$adminPath/plugins/git-sync\") {\n            $this->grav['assets']->addCss('plugin:\n        } else {\n            $this->grav['assets']->addInlineJs('var GitSync = ' . json_encode($settings) . ';');\n        }\n\n        $this->grav['assets']->addJs('plugin:\n        $this->grav['assets']->addJs('plugin:\n        $this->grav['assets']->addCss('plugin:\n\n        return true;\n    }\n\n    public function onPageInitialized()\n    {\n        if ($this->controller && $this->controller->isActive()) {\n            $this->controller->execute();\n            $this->controller->redirect();\n        }\n    }\n\n\n    public function onAdminSave(Event $event)\n    {\n        $obj           = $event['object'];\n        $adminPath \t   = trim($this->grav['admin']->base, '/');\n        $isPluginRoute = $this->grav['uri']->path() === \"/$adminPath/plugins/\" . $this->name;\n\n        if ($obj instanceof Data) {\n            if (!$isPluginRoute || !Helper::isGitInstalled()) {\n                return true;\n            }\n\n\n            $password = $obj->get('password', false);\n            if (!$password) {\n                $current_password = $this->git->getPassword();\n\n                if ($current_password && strpos($current_password, 'gitsync-') !== 0) {\n                    $current_password = Helper::encrypt($current_password);\n                }\n            } else {\n\n                $current_password = Helper::encrypt($password);\n            }\n\n            $obj->set('password', $current_password);\n        }\n\n        return $obj;\n    }\n\n\n    public function onAdminAfterSave(Event $event)\n    {\n        $obj           = $event['object'];\n        $adminPath\t   = trim($this->grav['admin']->base, '/');\n        $uriPath       = $this->grav['uri']->path();\n        $isPluginRoute = $uriPath === \"/$adminPath/plugins/\" . $this->name;\n\n        if ($obj instanceof PageInterface && !$this->grav['config']->get('plugins.git-sync.sync.on_save', true)) {\n            return;\n        }\n\n        if ($obj instanceof Data) {\n            $folders = $this->git->getConfig('folders', $event['object']->get('folders', []));\n            $data_type = preg_replace('\n            $data_type = explode('/', $data_type);\n            $data_type = array_shift($data_type);\n\n            if (null === $data_type || !Helper::isGitInstalled() || (!$isPluginRoute && !in_array($this->getFolderMapping($data_type), $folders, true))) {\n                return;\n            }\n\n            if ($isPluginRoute) {\n                $this->git->setConfig($obj->toArray());\n\n\n                $this->git->initializeRepository();\n\n\n                $this->git->setUser();\n                $this->git->addRemote();\n            }\n        }\n\n        $this->synchronize();\n    }\n\n    public function onAdminAfterSaveAs()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_save', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n    public function onAdminAfterDelete()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_delete', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n    public function onAdminAfterMedia()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_media', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n\n    public function onFormProcessed(Event $event)\n    {\n        $action = $event['action'];\n\n        if ($action === 'gitsync') {\n            $this->synchronize();\n        }\n    }\n\n\n    public function getFolderMapping($data_type)\n    {\n        switch ($data_type) {\n            case 'user':\n                return 'accounts';\n            case 'themes':\n                return 'config';\n            case 'config':\n            case 'data':\n            case 'plugins':\n            case 'pages':\n                return $data_type;\n        }\n\n        return null;\n    }\n\n\n    protected static function generateHash(int $len): string\n    {\n        $bytes = openssl_random_pseudo_bytes($len, $isStrong);\n\n        if ($bytes === false) {\n            throw new \\RuntimeException('Could not generate hash');\n        }\n\n        if ($isStrong === false) {\n\n            $isStrong = true;\n        }\n\n        return bin2hex($bytes);\n    }\n}\n\n'grav-plugin-git-sync/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer/autoload_real.php';\n\nreturn ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854::getLoader();\n",
        "gt": [
            "'grav-plugin-git-sync/vendor/composer/autoload_psr4.php'",
            "'grav-plugin-git-sync/vendor/composer/autoload_real.php'",
            "'grav-plugin-git-sync/vendor/autoload.php'",
            "'grav-plugin-git-sync/git-sync.php'"
        ]
    },
    {
        "files": [
            "'litefilesystem.js/src/include/core.php'",
            "'litefilesystem.js/src/server.php'",
            "'litefilesystem.js/src/install.php'"
        ],
        "content": "'litefilesystem.js/src/include/core.php'\n:<?php\n\n\n\n\n\nerror_reporting(E_ALL);\n\n\n\n\n\n$is_console = php_sapi_name() == \"cli\";\n\nif($is_console && count($argv) > 1)\n\n{\n\n\t$params = explode( \"&\",  $argv[1] );\n\n\tforeach($params as $p => $param)\n\n\t{\n\n\t\t$t = explode( \"=\", $param );\n\n\t\tif( count($t) > 1 )\n\n\t\t\t$_REQUEST[ $t[0] ] = $t[1];\n\n\t}\n\n}\n\n\n\nif( !$is_console )\n\n\t$global_url = \"http:\n\nelse\n\n\t$global_url = \"localhost/\";\n\n\n\n\n\n\n\nif (!file_exists(__DIR__ . \"/config.php\"))\n\n\tdie(\"config.php not found, check include/config.sample-php, change it and rename it to include/config.php\");\n\n\n\nrequire_once __DIR__ . \"/config.php\";\n\n\n\n\n\n$session_enabled = false;\n\nif(!headers_sent())\n\n\t$session_enabled = session_start();\n\n\n\n\n\nfunction trace($str)\n\n{\n\n\n\n\t$f = fopen(__DIR__.\"/trace.log\",\"a\");\n\n\tfwrite($f, date(\"Y-m-d H:i:s\") . \": \" . $str.\"\\n\");\n\n\tfclose($f);\n\n}\n\n\n\n$debug_buffer = Array();\n\nfunction debug($str, $color = null)\n\n{\n\n\tglobal $debug_buffer, $is_console;\n\n\n\n\tif($color && $is_console)\n\n\t{\n\n\t\t$colors = Array(\"\"=>\"\\033[0m\", \"black\"=>\"\\033[30m\", \"red\"=>\"\\033[31m\", \"green\"=>\"\\033[32m\", \"yellow\"=>\"\\033[33m\", \"blue\"=>\"\\033[34m\" );\n\n\t\tif( isset($colors[$color]))\n\n\t\t\t$str = $colors[$color] . $str . $colors[\"\"];\n\n\t}\n\n\n\n\tif($is_console)\n\n\t\techo(\" LOG: \" . $str.\"\\n\");\n\n\telse\n\n\t\t$debug_buffer[] = $str;\n\n}\n\n\n\nfunction clearDebugLog()\n\n{\n\n\tglobal $debug_buffer;\n\n\t$debug_buffer = Array();\n\n}\n\n\n\nfunction getDebugLog()\n\n{\n\n\tglobal $debug_buffer;\n\n\treturn $debug_buffer;\n\n}\n\n\n\n\n\n$loaded_modules = array();\n\n\n\nfunction registerModule($modulename, $class)\n\n{\n\n\tglobal $loaded_modules;\n\n\t$loaded_modules[$modulename] = new $class();\n\n}\n\n\n\nfunction getModule($modulename)\n\n{\n\n\tglobal $loaded_modules;\n\n\n\n\tif( strpos(\"..\",$modulename) != FALSE)\n\n\t\treturn null;\n\n\n\n\tif( isset( $loaded_modules[$modulename] ) )\n\n\t\treturn $loaded_modules[$modulename];\n\n\n\n\tif( file_exists(__DIR__ . \"/modules/\" . $modulename . \".php\") == FALSE)\n\n\t\treturn NULL;\n\n\n\n\n\n\trequire_once \"modules/\" . $modulename . \".php\";\n\n\n\n\treturn $loaded_modules[$modulename];\n\n}\n\n\n\nfunction loadModules($str)\n\n{\n\n\t$result = Array();\n\n\tif($str == \"*\")\n\n\t{\n\n\t\t$files = scandir(__DIR__ . '/modules/');\n\n\t\tforeach($files as $file)\n\n\t\t{\n\n\t\t\tif ($file == '.' || $file == '..' || substr($file,-4) != \".php\") continue;\n\n\n\n\t\t\t$module = getModule( substr($file,0,-4) );\n\n\t\t\t$result[] = $module;\n\n\t\t}\n\n\t\treturn $result;\n\n\t}\n\n\n\n\t$tokens = explode(\",\",$str);\n\n\tforeach($tokens as $k=>$v)\n\n\t\t$result[] = getModule($v);\n\n\treturn $result;\n\n}\n\n\n\n\n\nfunction dispatchEventToModules($event_type, &$data )\n\n{\n\n\t$modules = loadModules(\"*\");\n\n\t$result = true;\n\n\tforeach($modules as $module)\n\n\t{\n\n\t\tif( !method_exists($module, $event_type) )\n\n\t\t\tcontinue;\n\n\n\n\t\t$r = call_user_func_array( array($module , $event_type), array(&$data));\n\n\t\tif( $r === false)\n\n\t\t\t$result = false;\n\n\t}\n\n\treturn $result;\n\n}\n\n\n\n\n\n\n\n\n\n$mysqli = null;\n\n\n\nfunction getSQLDB()\n\n{\n\n\tglobal $mysqli;\n\n\tif( $mysqli )\n\n\t\treturn $mysqli;\n\n\n\n\t$mysqli = new mysqli(DB_HOST, DB_USER, DB_PASSWORD);\n\n\tif (mysqli_connect_errno())\n\n\t\treturn null;\n\n\n\n\tif( $mysqli->select_db(DB_NAME) == FALSE)\n\n\t\treturn null;\n\n\n\n\treturn $mysqli;\n\n}\n\n\n\nfunction closeSQLDB()\n\n{\n\n\tglobal $mysqli;\n\n\tif( $mysqli ) $mysqli->close();\n\n}\n\n\n\n\n\n$redis = null;\n\nrequire_once 'extra/Predis/Autoloader.php';\n\n\n\nfunction getRedisDB()\n\n{\n\n\tglobal $redis;\n\n\tif ($redis) return $redis;\n\n\n\n\tPredis\\Autoloader::register();\n\n\t$redis = new Predis\\Client();\n\n\treturn $redis;\n\n}\n\n\n\n?>\n'litefilesystem.js/src/server.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n\n\nheader('Content-Type: application/json');\n\n\n\n\n\nif (!file_exists(__DIR__ . \"/include/config.php\"))\n\n\tdie('{\"status\":-10, \"msg\":\"config.php not found, check include/config.sample-php, change it and rename it to include/config.php\"}');\n\nrequire_once 'include/core.php';\n\n\n\n\n\nif( !isset($_REQUEST[\"action\"]) )\n\n{\n\n\tloadModules(\"*\");\n\n\tdie('{\"msg\":\"no action\"}');\n\n}\n\n\n\n\n\n$action = $_REQUEST[\"action\"];\n\n\n\n$pos = strpos($action,\"/\");\n\nif ($pos == false)\n\n\tdie('{\"msg\":\"no module in action\"}' . \"\\n\");\n\n\n\n$module_name = substr($action,0,$pos);\n\n$module_action = substr($action, $pos + 1, strlen($action) - $pos - 1);\n\n\n\n\n\n$module = getModule($module_name);\n\nif($module && method_exists($module,\"processAction\"))\n\n\t$module->processAction($module_action);\n\nelse\n\n\techo('{\"msg\":\"module not found\"}');\n\n\n\necho \"\\n\";\n\ncloseSQLDB();\n\n?>\n'litefilesystem.js/src/install.php'\n:<?php\n\n\n\n\t$allow_restart = true;\n\n\n\n\n\n\n\n\n\n\t$force = false;\n\n\t$restart_code = \"YES\";\n\n\n\n\t$console = php_sapi_name() == \"cli\";\n\n\t$end_string = $console ? \"\" : \"</div></body></html>\";\n\n\n\n\n\n\tif( $console && count($argv) > 1 && $argv[1] == \"force\" )\n\n\t\t$force = true;\n\n\n\n\tfunction showMessage($msg, $type = \"danger\")\n\n\t{\n\n\t\tglobal $console;\n\n\n\n\t\tif($console)\n\n\t\t{\n\n\t\t\t$msg = strip_tags($msg);\n\n\t\t\techo ($type == \"danger\" ? \"\\033[31m - \" : \" + \") . $msg.\"\\033[0m\\n\";\n\n\t\t\treturn;\n\n\t\t}\n\n\n\n\t\t?>\n\n\t\t<div class=\"bs-callout bs-callout-<?=$type?>\" id=\"callout-glyphicons-empty-only\">\n\n\t\t\t<p><?=$msg?></p>\n\n\t\t</div>\n\n\t\t<?php\n\n\t}\n\n\n\n\tfunction getLog()\n\n\t{\n\n\t\tglobal $console;\n\n\t\t$result = \"\";\n\n\n\n\t\t$log = getDebugLog();\n\n\t\tforeach($log as $i => $line)\n\n\t\t\tif($console)\n\n\t\t\t\t$result .= \"  .- \". $line.\"\\n\";\n\n\t\t\telse\n\n\t\t\t\t$result .= \"<p>\".$line.\"</p>\";\n\n\n\n\t\treturn $result;\n\n\t}\n\n\n\n\tregister_shutdown_function( \"fatal_handler\" );\n\n\n\n\tfunction fatal_handler() {\n\n\t\tglobal $end_string;\n\n\t\t$errfile = \"unknown file\";\n\n\t\t$errstr  = \"shutdown\";\n\n\t\t$errno   = E_CORE_ERROR;\n\n\t\t$errline = 0;\n\n\n\n\t\t$error = error_get_last();\n\n\t\tif( $error !== NULL)\n\n\t\t{\n\n\t\t\t$errno   = $error[\"type\"];\n\n\t\t\t$errfile = $error[\"file\"];\n\n\t\t\t$errline = $error[\"line\"];\n\n\t\t\t$errstr  = $error[\"message\"];\n\n\t\t\tshowMessage( \"Code: \" . $errno . \" \\\"\" . $errstr . \"\\\" File: \" . $errfile . \" Ln: \" . $errline );\n\n\t\t\tdie($end_string);\n\n\t\t}\n\n\t}\n\n\n\n\tfunction read_input( $msg )\n\n\t{\n\n\t\techo $msg;\n\n\t\t$handle = fopen (\"php:\n\n\t\t$line = fgets($handle);\n\n\t\treturn trim($line);\n\n\t}\n\n\n\n\n\nif(!$console)\n\n{\n\n?>\n\n<!DOCTYPE html>\n\n<html lang=\"en\">\n\n  <head>\n\n    <meta charset=\"utf-8\">\n\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n\n    <meta name=\"description\" content=\"\">\n\n    <meta name=\"author\" content=\"\">\n\n    <link rel=\"shortcut icon\" href=\"assets/ico/favicon.ico\">\n\n\n\n    <title>LiteFileServer</title>\n\n\n\n    <!-- Bootstrap core CSS -->\n\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\n\n    <link href=\"css/bootstrap-callouts.css\" rel=\"stylesheet\">\n\n\n\n    <!-- Custom styles for this template -->\n\n    <link href=\"css/style.css\" rel=\"stylesheet\">\n\n\t<link href=\"js/extra/ladda.min.css\" rel=\"stylesheet\" >\n\n  </head>\n\n  <body>\n\n  <div class=\"container\">\n\n\t<h1>LiteFileServer installer</h1>\n\n\n\n<?php\n\n}\n\n\n\n\tif (!file_exists(__DIR__ . \"/include/config.php\"))\n\n\t{\n\n\t\tshowMessage(\"Cannot find <strong>include/config.php</strong> file, please remember to create a copy of  <strong>config.sample.php</strong> as  <strong>config.php </strong> and edit it with your DB values.\");\n\n\t\tdie($end_string);\n\n\t}\n\n\telse\n\n\t\tshowMessage(\"config.php found, testing database connection\",\"success\");\n\n\n\n\n\n\trequire_once 'include/core.php';\n\n\tloadModules(\"*\");\n\n\n\n\n\n\tif(ADMIN_PASS == \"\" || ADMIN_MAIL == \"\")\n\n\t{\n\n\t\tshowMessage(\"Error: Config.php must be changed, edit the config.php and add a password and an email for the admin account.\");\n\n\t\tdie($end_string);\n\n\t}\n\n\n\n\n\n\n\n\t$database = getSQLDB();\n\n\tif(!$database)\n\n\t{\n\n\t\tshowMessage(\"Cannot connect to database, check that the info inside config.php is correct and your databse running.\");\n\n\t\tdie($end_string);\n\n\t}\n\n\telse\n\n\t\tshowMessage(\"Database connection established\",\"success\");\n\n\n\n\n\n\t$system = getModule(\"system\");\n\n\t$is_ready = $system->checkReady();\n\n\n\n\tif( $is_ready && $console && count($argv) > 1 && $argv[1] == \"upgrade\" )\n\n\t{\n\n\t\tshowMessage(\"Upgrading system...\",\"primary\");\n\n\t\t$system->upgradeSystem();\n\n\t\tshowMessage(\"System upgraded\",\"success\");\n\n\t\tdie($end_string);\n\n\t}\n\n\n\n\n\n\t$owner = posix_getgrgid( filegroup( __FILE__) );\n\n\tif($owner && $owner[\"name\"] != \"www-data\")\n\n\t{\n\n\t\tshowMessage(\"The group of this script is not 'www-data', this could be a problem. Ensure that all files inside this folder belong to the www-data by running this command from inside the folder: su chown -R :www-data *\",\"danger\");\n\n\t}\n\n\n\n\tif( $is_ready && !$force )\n\n\t{\n\n\t\tshowMessage(\"All modules seem ready, nothing to do.\",\"warning\");\n\n\t\tdie($end_string);\n\n\t}\n\n\n\n\n\n\tif( ($force || !$is_ready))\n\n\t{\n\n\t\tif(!$allow_restart)\n\n\t\t\tshowMessage(\"RESTART is blocked, allow_restart in install.php is set to false.\",\"warning\");\n\n\t\telse\n\n\t\t{\n\n\t\t\tclearDebugLog();\n\n\t\t\tshowMessage(\"Creating databases and folders\",\"primary\");\n\n\n\n\n\n\t\t\tif($is_ready)\n\n\t\t\t{\n\n\t\t\t\tif($console)\n\n\t\t\t\t{\n\n\t\t\t\t\t$input = read_input(\"\\033[1;33mYou are about to erase all the data and files inside LFS.\\nIf you are sure type '\".$restart_code.\"': \\033[0m\");\n\n\t\t\t\t\tif($input != $restart_code)\n\n\t\t\t\t\t{\n\n\t\t\t\t\t\tshowMessage(\"Operation canceled.\");\n\n\t\t\t\t\t\tdie($end_string);\n\n\t\t\t\t\t}\n\n\t\t\t\t\telse\n\n\t\t\t\t\t\tshowMessage(\"Database restart in course.\");\n\n\t\t\t\t}\n\n\t\t\t\telse\n\n\t\t\t\t{\n\n\t\t\t\t\tshowMessage(\"Complete DATABASE restart can only be performed from the console using: php install.php force\");\n\n\t\t\t\t\tdie($end_string);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\n\n\t\t\t$system->restartSystem();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\t\tif( $system->checkReady() )\n\n\t\t\t{\n\n\t\t\t\tshowMessage(\"LiteFileServer installed, you can go to the <a href='index.html'>main page</a>.\",\"success\");\n\n\t\t\t\tif($console)\n\n\t\t\t\t\tchgrp( FILES_PATH, \"www-data\" );\n\n\t\t\t}\n\n\t\t\telse\n\n\t\t\t{\n\n\t\t\t\tshowMessage(\"Something went wrong.\",\"warning\");\n\n\t\t\t\tif(!$console)\n\n\t\t\t\t\techo('<div class=\"bs-callout bs-callout-<?=$type?>\" id=\"callout-glyphicons-empty-only\">' . getLog() . \"</div>\");\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\n\nif(!$console)\n\n\techo $end_string;\n\n\n\n?>",
        "gt": [
            "'litefilesystem.js/src/server.php'",
            "'litefilesystem.js/src/include/core.php'",
            "'litefilesystem.js/src/install.php'"
        ]
    },
    {
        "files": [
            "'ZnoteAAC/engine/function/token.php'",
            "'ZnoteAAC/admin_helpdesk.php'",
            "'ZnoteAAC/engine/init.php'"
        ],
        "content": "'ZnoteAAC/engine/function/token.php'\n:<?php\n\n\tclass Token {\n\t\tpublic static function generate() {\n\t\t\t$token = sha1(uniqid(time(), true));\n\n\t\t\t$_SESSION['token'] = $token;\n\t\t}\n\n\t\tpublic static function create() {\n\t\t\techo '<input type=\"hidden\" name=\"token\" value=\"' . self::get() . '\" />';\n\t\t}\n\n\n\n\t\tpublic static function get() {\n\t\t\treturn isset($_SESSION['token']) ? $_SESSION['token'] : false;\n\t\t}\n\n\n\n\t\tpublic static function isValid($post) {\n\t\t\tif (config('use_token')) {\n\n\t\t\t\tif (!self::get()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\n\t\t\t\tif ($post == $_SESSION['old_token'] || $post == $_SESSION['token']) {\n\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\n\n\t\tprotected static function _reset() {\n\t\t\tunset($_SESSION['token']);\n\t\t}\n\n\n\n\t\tpublic static function debug($post) {\n\t\t\techo '<pre>', var_dump(array(\n\t\t\t\t'post' => $post,\n\t\t\t\t'old_token' => $_SESSION['old_token'],\n\t\t\t\t'token' => self::get()\n\t\t\t)), '</pre>';\n\t\t}\n\t}\n?>\n\n'ZnoteAAC/admin_helpdesk.php'\n:<?php require_once 'engine/init.php'; include 'layout/overall/header.php';\nprotect_page();\nadmin_only($user_data);\n\n\n$view = (isset($_GET['view']) && (int)$_GET['view'] > 0) ? (int)$_GET['view'] : false;\nif ($view !== false){\n\tif (!empty($_POST['reply_text'])) {\n\t\tsanitize($_POST['reply_text']);\n\n\n\t\t$query = array(\n\t\t\t'tid'   =>\t$view,\n\t\t\t'username'=>\tgetValue($_POST['username']),\n\t\t\t'message' =>\tgetValue($_POST['reply_text']),\n\t\t\t'created' =>\ttime(),\n\t\t);\n\t\t$fields = '`'. implode('`, `', array_keys($query)) .'`';\n\t\t$data = '\\''. implode('\\', \\'', $query) .'\\'';\n\n\t\tmysql_insert(\"INSERT INTO `znote_tickets_replies` ($fields) VALUES ($data)\");\n\t\tmysql_update(\"UPDATE `znote_tickets` SET `status`='Staff-Reply' WHERE `id`='$view' LIMIT 1;\");\n\n\t} else if (!empty($_POST['admin_ticket_close'])) {\n\t\t$ticketId = (int) $_POST['admin_ticket_id'];\n\t\tmysql_update(\"UPDATE `znote_tickets` SET `status` = 'CLOSED' WHERE `id` ='$ticketId' LIMIT 1;\");\n\n\t} else if (!empty($_POST['admin_ticket_open'])) {\n\t\t$ticketId = (int) $_POST['admin_ticket_id'];\n\t\tmysql_update(\"UPDATE `znote_tickets` SET `status` = 'Open' WHERE `id` ='$ticketId' LIMIT 1;\");\n\n\t} else if (!empty($_POST['admin_ticket_delete'])) {\n\t\t$ticketId = (int) $_POST['admin_ticket_id'];\n\t\tmysql_delete(\"DELETE FROM `znote_tickets` WHERE `id`='$ticketId' LIMIT 1;\");\n\t\theader(\"Location: admin_helpdesk.php\");\n\t}\n\n\t$ticketData = mysql_select_single(\"SELECT * FROM znote_tickets WHERE id='$view' LIMIT 1;\");\n\t?>\n\t<h1>View Ticket\n\t<table class=\"znoteTable ThreadTable table table-striped\">\n\t\t<tr class=\"yellow\">\n\t\t\t<th>\n\t\t\t\t<?php\n\t\t\t\t\techo getClock($ticketData['creation'], true);\n\t\t\t\t?>\n\t\t\t\t - Created by:\n\t\t\t\t <?php\n\t\t\t\t \techo $ticketData['username'];\n\t\t\t\t ?>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<p><?php echo nl2br($ticketData['message']); ?></p>\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n\t<?php\n\t$replies = mysql_select_multi(\"SELECT * FROM znote_tickets_replies WHERE tid='$view' ORDER BY `created`;\");\n\tif ($replies !== false) {\n\t\tforeach($replies as $reply) {\n\t\t\t?>\n\t\t\t<table class=\"znoteTable ThreadTable table table-striped\">\n\t\t\t\t<tr class=\"yellow\">\n\t\t\t\t\t<th>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\techo getClock($reply['created'], true);\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t - Posted by:\n\t\t\t\t\t\t <?php\n\t\t\t\t\t\t \techo $reply['username'];\n\t\t\t\t\t\t ?>\n\t\t\t\t\t</th>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<p><?php echo nl2br($reply['message']); ?></p>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t<?php\n\t\t}\n\t}\n\t?>\n\n\t<!-- Open/Close Ticket -->\n\t<table class=\"znoteTable ThreadTable table table-striped\">\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<form action=\"\" method=\"post\" align=\"center\">\n\t\t\t\t\t<input type=\"hidden\" name=\"admin_ticket_id\" value=\"<?php echo $ticketData['id']; ?>\">\n\t\t\t\t<?php if ($ticketData['status'] !== 'CLOSED') { ?>\n\t\t\t\t\t<input type=\"submit\" name=\"admin_ticket_close\" value=\"Close Ticket\" class=\"btn btn-warning\">\n\t\t\t\t<?php } else { ?>\n\t\t\t\t\t<input type=\"submit\" name=\"admin_ticket_open\" value=\"Open Ticket\" class=\"btn btn-success\">\n\t\t\t\t<?php } ?>\n\t\t\t\t</form>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<form action=\"\" method=\"post\" align=\"center\" onClick=\"return confirm('Are you sure you want to delete this ticket?');\">\n\t\t\t\t\t<input type=\"hidden\" name=\"admin_ticket_id\" value=\"<?php echo $ticketData['id']; ?>\">\n\t\t\t\t\t<input type=\"submit\" name=\"admin_ticket_delete\" value=\"Delete Ticket\" class=\"btn btn-danger\">\n\t\t\t\t</form>\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n\n\t<?php if ($ticketData['status'] !== 'CLOSED') { ?>\n\t\t<hr class=\"bighr\">\n\t\t<form action=\"\" method=\"post\">\n\t\t\t<input type=\"hidden\" name=\"username\" value=\"ADMIN\"><br>\n\t\t\t<textarea class=\"forumReply\" name=\"reply_text\" style=\"width: 610px; height: 150px\"></textarea><br>\n\t\t\t<input name=\"\" type=\"submit\" value=\"Post Reply\" class=\"btn btn-primary\">\n\t\t</form>\n\t<?php } ?>\n\t<?php\n} else {\n\t?>\n\t<h1>Latest Tickets</h1>\n\t<?php\n\t$tickets = mysql_select_multi(\"SELECT id,subject,creation,status FROM znote_tickets ORDER BY creation DESC\");\n\tif ($tickets !== false) {\n\t\t?>\n\t\t<table>\n\t\t\t<tr class=\"yellow\">\n\t\t\t\t<td>ID:</td>\n\t\t\t\t<td>Subject:</td>\n\t\t\t\t<td>Creation:</td>\n\t\t\t\t<td>Status:</td>\n\t\t\t</tr>\n\t\t\t\t<?php\n\t\t\t\tforeach ($tickets as $ticket) {\n\t\t\t\t\techo '<tr class=\"special\">';\n\t\t\t\t\t\techo '<td>'. $ticket['id'] .'</td>';\n\t\t\t\t\t\techo '<td><a href=\"admin_helpdesk.php?view='. $ticket['id'] .'\">'. $ticket['subject'] .'</a></td>';\n\t\t\t\t\t\techo '<td>'. getClock($ticket['creation'], true) .'</td>';\n\t\t\t\t\t\techo '<td>'. $ticket['status'] .'</td>';\n\t\t\t\t\techo '</tr>';\n\t\t\t\t}\n\t\t\t\t?>\n\t\t</table>\n\t\t<?php\n\t} else echo 'No helpdesk tickets has been submitted.';\n}\ninclude 'layout/overall/footer.php';\n?>\n'ZnoteAAC/engine/init.php'\n:<?php if (version_compare(phpversion(), '5.6', '<')) die('PHP version 5.6 or higher is required.');\n\n$l_time = microtime(true);\n$l_start = $l_time;\n\nfunction elapsedTime($l_start = false, $l_time = false) {\n\tif ($l_start === false) global $l_start;\n\tif ($l_time === false) global $l_time;\n\n\t$l_time = explode(' ', microtime());\n\t$l_finish = $l_time[1] + $l_time[0];\n\treturn round(($l_finish - $l_start), 4);\n}\n\n$time = time();\n$version = '1.6';\n\n$aacQueries = 0;\n$accQueriesData = array();\n\nsession_start();\nob_start();\nrequire_once 'config.php';\n$sessionPrefix = $config['session_prefix'];\nif ($config['paypal']['enabled'] || $config['use_captcha']) {\n\t$curlcheck = extension_loaded('curl');\n\tif (!$curlcheck) die(\"php cURL is not enabled. It is required to for paypal or captcha services.<br>1. Find your php.ini file.<br>2. Uncomment extension=php_curl<br>Restart web server.<br><br><b>If you don't want this then disable paypal & use_captcha in config.php.</b>\");\n}\nif ($config['use_captcha'] && !extension_loaded('openssl')) {\n\tdie(\"php openSSL is not enabled. It is required to for captcha services.<br>1. Find your php.ini file.<br>2. Uncomment extension=php_openssl<br>Restart web server.<br><br><b>If you don't want this then disable use_captcha in config.php.</b>\");\n}\n\n\n\nif (!isset($config['TFSVersion'])) $config['TFSVersion'] = &$config['ServerEngine'];\nif (!isset($config['ServerEngine'])) $config['ServerEngine'] = &$config['TFSVersion'];\n\nrequire_once 'database/connect.php';\nrequire_once 'function/general.php';\nrequire_once 'function/users.php';\nrequire_once 'function/cache.php';\nrequire_once 'function/mail.php';\nrequire_once 'function/token.php';\nrequire_once 'function/itemparser/itemlistparser.php';\n\nif (isset($_SESSION['token'])) {\n\t$_SESSION['old_token'] = $_SESSION['token'];\n}\nToken::generate();\n\n$tfs_10_hasPremDays = true;\n\nif (user_logged_in() === true) {\n\t$session_user_id = getSession('user_id');\n\tif ($config['ServerEngine'] !== 'OTHIRE') {\n\t\tif ($config['ServerEngine'] == 'TFS_10') {\n\t\t\t$hasPremDays = mysql_select_single(\"SHOW COLUMNS from `accounts` WHERE `Field` = 'premdays'\");\n\t\t\tif ($hasPremDays === false) {\n\t\t\t\t$tfs_10_hasPremDays = false;\n\t\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premium_ends_at');\n\t\t\t\t$user_data['premdays'] = ($user_data['premium_ends_at'] - time() > 0) ? floor(($user_data['premium_ends_at'] - time()) / 86400) : 0;\n\t\t\t} else {\n\t\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premdays');\n\t\t\t}\n\t\t} else {\n\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premdays');\n\t\t}\n\t} else\n\t\t$user_data = user_data($session_user_id, 'id', 'password', 'email', 'premend');\n\t$user_znote_data = user_znote_account_data($session_user_id, 'ip', 'created', 'points', 'cooldown', 'flag' ,'active_email');\n}\n$errors = array();\n\nif ($config['log_ip']) {\n\t$visitor_config = $config['ip_security'];\n\n\t$flush = $config['flush_ip_logs'];\n\tif ($flush != false) {\n\t\t$timef = $time - $flush;\n\t\tif (getCache() < $timef) {\n\t\t\t$timef = $time - $visitor_config['time_period'];\n\t\t\tmysql_delete(\"DELETE FROM znote_visitors_details WHERE time <= '$timef'\");\n\t\t\tsetCache($time);\n\t\t}\n\t}\n\n\t$visitor_data = znote_visitors_get_data();\n\n\tznote_visitor_set_data($visitor_data);\n\tznote_visitor_insert_detailed_data(0);\n\n\t$visitor_detailed = znote_visitors_get_detailed_data($visitor_config['time_period']);\n\n\n\t$v_activity = 0;\n\t$v_register = 0;\n\t$v_highscore = 0;\n\t$v_c_char = 0;\n\t$v_s_char = 0;\n\t$v_form = 0;\n\tforeach ((array)$visitor_detailed as $v_d) {\n\n\t\tif ($v_d['ip'] == getIPLong()) {\n\n\t\t\tswitch ($v_d['type']) {\n\t\t\t\tcase 0:\n\t\t\t\t\t$v_activity++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\t$v_register++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\t$v_c_char++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\t$v_highscore++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 4:\n\t\t\t\t\t$v_s_char++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 5:\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\t}\n\n\n\tif ($v_activity > $visitor_config['max_activity']) die(\"Chill down. Your web activity is too big. max_activity\");\n\tif ($v_register > $visitor_config['max_account']) die(\"Chill down. You can't create multiple accounts that fast. max_account\");\n\tif ($v_c_char > $visitor_config['max_character']) die(\"Chill down. Your web activity is too big. max_character\");\n\tif ($v_form > $visitor_config['max_post']) die(\"Chill down. Your web activity is too big. max_post\");\n\n\n\n}\n\n\n$filename = explode('/', $_SERVER['SCRIPT_NAME']);\n$filename = $filename[count($filename) - 1];\n$page_filename = str_replace('.php', '', $filename);\nif ($config['allowSubPages']) {\n\trequire_once 'layout/sub.php';\n\tif (isset($subpages) && !empty($subpages)) {\n\t\tforeach ($subpages as $page) {\n\t\t\tif ($page['override'] && $page['file'] === $filename) {\n\t\t\t\trequire_once 'layout/overall/header.php';\n\t\t\t\trequire_once 'layout/sub/'.$page['file'];\n\t\t\t\trequire_once 'layout/overall/footer.php';\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t?>\n\t\t<div style=\"background-color: white; padding: 20px; width: 100%; float:left;\">\n\t\t\t<h2 style=\"color: black;\">Old layout!</h2>\n\t\t\t<p style=\"color: black;\">The layout is running an outdated sub system which is not compatible with this version of Znote AAC.</p>\n\t\t\t<p style=\"color: black;\">The file /layout/sub.php is outdated.\n\t\t\t<br>Please update it to look like <a style=\"color: orange;\" target=\"_BLANK\" href=\"https:\n\t\t\t</p>\n\t\t</div>\n\t\t<?php\n\t}\n}\n?>\n",
        "gt": [
            "'ZnoteAAC/engine/function/token.php'",
            "'ZnoteAAC/engine/init.php'",
            "'ZnoteAAC/admin_helpdesk.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'CFPropertyList' => array($vendorDir . '/rodneyrehm/plist/classes'),\n);\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/__UNAM_LIB/unam_lib.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once(dirname(__DIR__) . '/assets/php/session-header.php');\n\nswitch(getParam('action')){\n    case 'lang-change':\n        $base->unam_checkCondition(!in_array(getParam('newlangID'), array_keys($config['languages'])), 'Language ID invalid.');\n        $_SESSION['lang'] = getParam('newlangID');\n        $base->unam_echoSuccess();\n        break;\n}\n'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/__UNAM_LIB/unam_lib.php'\n:<?php\n/* Made by Unam Sanctam https:\n\nclass unam_lib {\n    private static $usingCustomErrorHandler;\n\n    function __construct() {\n        self::$usingCustomErrorHandler = false;\n    }\n\n    function unam_dbSelect($conn, $table_name, $fields, $where_array = null, $rowcount=false, $fetchAll=false, $extras=''){\n        $where_flag = [];\n        $where_flag_values = [];\n        if(isset($where_array) && is_array($where_array)){\n            foreach($where_array as $key=>$value) {\n                if($key == '$CUSTOM'){\n                    $where_flag[] = \"$value\";\n                }else if(is_array($value)){\n                    $where_flag[] = \"$key $value[0] ?\";\n                    $where_flag_values[] = $value[1];\n                }else{\n                    $where_flag[] = \"$key = ?\";\n                    $where_flag_values[] = $value;\n                }\n            }\n            $where_flag_string = implode(' AND ', $where_flag);\n        }\n        try{\n            $s = $conn->prepare(\"SELECT \".($rowcount ? \"COUNT(*) as unam_totalCount\" : $fields).\" FROM $table_name\".($where_array && count($where_array) > 0 ? \" WHERE $where_flag_string\" : \"\").\" $extras\");\n            $s->execute($where_flag_values);\n            if($rowcount){\n                return $s->fetch(PDO::FETCH_ASSOC)['unam_totalCount'];\n            }\n            if($fetchAll) {\n                return $s->fetchAll(PDO::FETCH_ASSOC);\n            }\n            return $s->fetch(PDO::FETCH_ASSOC);\n        }\n        catch(PDOException $e){\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return [];\n        }\n    }\n\n    function unam_dbInsert($conn, $table, $arr)\n    {\n        try {\n            $names = join(',', array_keys($arr));\n            $params = [];\n            $valcount = (is_array(reset($arr)) ? count(reset($arr))  : 1);\n            $keycount = count(array_keys($arr));\n            if(is_array(reset($arr))){\n                for($i = 0; $i < $valcount; $i++){\n                    $params = array_merge($params, array_column($arr, $i));\n                }\n            }else{\n                $params = array_values($arr);\n            }\n            $values =  substr(str_repeat(',('.substr(str_repeat(',?', $keycount), 1).')', $valcount), 1);\n            $s = $conn->prepare(\"INSERT INTO $table ($names) VALUES $values\");\n            return $s->execute($params);\n        }\n        catch(PDOException $e){\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return [];\n        }\n    }\n\n    function unam_dbUpdate($conn, $tableName, $colsArray, $where_array)\n    {\n        $UpdateString = [];\n        $ExecuteString = [];\n        foreach($colsArray as $key=>$value)\n        {\n            $UpdateString[] = \"$key = ?\";\n            $ExecuteString[] = $value;\n        }\n\n        $where_flag = [];\n        foreach($where_array as $key=>$value)\n        {\n            if($key == '$CUSTOM'){\n                $where_flag[] = \"$value\";\n            }else if(is_array($value)){\n                $where_flag[] = \"$key $value[0] ?\";\n                $ExecuteString[] = $value[1];\n            }else{\n                $where_flag[] = \"$key = ?\";\n                $ExecuteString[] = $value;\n            }\n        }\n\n        try {\n            $s = $conn->prepare(\"UPDATE $tableName SET \".implode(', ', $UpdateString).\" WHERE \".implode(' AND ', $where_flag));\n            return $s->execute($ExecuteString);\n        }\n        catch(PDOException $e){\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return false;\n        }\n    }\n\n    function unam_dbDelete($conn, $table_name, $where_array)\n    {\n        $where_flag = [];\n        $where_flag_values = [];\n        foreach($where_array as $key=>$value)\n        {\n            if($key == '$CUSTOM'){\n                $where_flag[] = \"$value\";\n            }else if(is_array($value)){\n                $where_flag[] = \"$key $value[0] ?\";\n                $where_flag_values[] = $value[1];\n            }else{\n                $where_flag[] = \"$key = ?\";\n                $where_flag_values[] = $value;\n            }\n        }\n\n        $where_flag_string = implode(' AND ', $where_flag);\n        try {\n            $s = $conn->prepare(\"DELETE FROM $table_name WHERE $where_flag_string\");\n            return $s->execute($where_flag_values);\n        }\n        catch(PDOException $e) {\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return [];\n        }\n    }\n\n    function unam_sanitize($input) {\n        if (is_array($input)) {\n            foreach ($input as $key => $value) {\n                $input[$key] = self::unam_sanitize($value);\n            }\n            return $input;\n        }\n        return htmlspecialchars($input, ENT_QUOTES, 'UTF-8', false);\n    }\n\n\n    function unam_filterParameter($param, $maxlength = 1000, $default = ''){\n        if(!isset($_POST[$param]) && !isset($_GET[$param])) {\n            return $default;\n        }\n        $fparam = self::unam_arrayWalkRecursive($_POST[$param] ?? $_GET[$param], function(&$v) use(&$maxlength){ $v = self::unam_sanitize(substr($v, 0, $maxlength)); });\n        return (count($fparam) == 1 ? $fparam[0] : $fparam);\n    }\n\n    function unam_filterAllParameters($maxlength = 1000, $default = '') {\n        $paramarr = array_merge($_POST, $_GET);\n        $outarr = [];\n        if(is_array($paramarr)){\n            foreach($paramarr as $param=>$data){\n                $outarr[$param] = self::unam_filterParameter($param, $maxlength, $default);\n            }\n        }\n        return $outarr;\n    }\n\n    function unam_arrayWalkRecursive($arr, $function){\n        $arr = is_array($arr) ? $arr : [$arr];\n        array_walk_recursive($arr, $function);\n        return $arr;\n    }\n\n    function unam_checkCondition($cond, $resp){\n        if($cond === true){\n            self::unam_echoFailure($resp);\n            die();\n        }\n    }\n\n    function unam_echoSuccess($successmsg=''){\n        echo json_encode(['response' => 'success', 'successmsg'=>$successmsg]);\n    }\n\n    function unam_echoFailure($errormsg){\n        echo json_encode(['response'=>'failure', 'errormsg'=>$errormsg]);\n    }\n\n    function unam_getBrowserLanguages($available = [], $default = 'en') {\n        if (isset( $_SERVER[ 'HTTP_ACCEPT_LANGUAGE' ])) {\n            $langs = explode( ',', $_SERVER['HTTP_ACCEPT_LANGUAGE'] );\n            if(empty($available)) {\n                return $langs[0];\n            }\n            foreach($langs as $lang){\n                $lang = substr($lang, 0, 2);\n                if(in_array( $lang, $available)){\n                    return $lang;\n                }\n            }\n        }\n        return $default;\n    }\n\n    function unam_toggleCustomErrorHandling() {\n        if(self::$usingCustomErrorHandler){\n            restore_error_handler();\n            self::$usingCustomErrorHandler = false;\n            return false;\n        }else{\n            set_error_handler([$this, 'unam_customErrorHandler']);\n            self::$usingCustomErrorHandler = true;\n            return true;\n        }\n    }\n\n    function unam_customErrorHandler($errno, $errstr, $error_file, $error_line, $error_context = null) {\n        global $SYSTEM_PHP_ERROR;\n        $SYSTEM_PHP_ERROR=false;\n        $err_hostname_ip = $_SERVER['REMOTE_ADDR'] ;\n\n        $errout = \"<br/><b>Date and Time:</b> \".date('Y/m/d H:i:s');\n        $errout .= \"<br/><b>In file:</b> $error_file\";\n        $errout .= \"<br/><b>On line:</b> $error_line\";\n        $errout .= \"<br/><b>Error was: </b> [$errno] $errstr\";\n        $errout .= \"<br/><b>Remote IP:</b> $err_hostname_ip\";\n        $errout .= \"<hr/>\";\n\n        self::unam_writeError($errout);\n        $SYSTEM_PHP_ERROR=true;\n    }\n\n    function unam_writeError($errormessage){\n        if(self::$usingCustomErrorHandler) {\n            file_put_contents(__DIR__.\"/Logs/php-error-\".date('d-m-Y').\".html\", \"ERROR: $errormessage\", FILE_APPEND);\n        }\n    }\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/__UNAM_LIB/unam_lib.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'"
        ]
    },
    {
        "files": [
            "'grav-plugin-git-sync/vendor/composer/autoload_real.php'",
            "'grav-plugin-git-sync/vendor/composer/autoload_classmap.php'",
            "'grav-plugin-git-sync/vendor/autoload.php'",
            "'grav-plugin-git-sync/git-sync.php'"
        ],
        "content": "'grav-plugin-git-sync/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        require __DIR__ . '/platform_check.php';\n\n        spl_autoload_register(array('ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader(\\dirname(\\dirname(__FILE__)));\n        spl_autoload_unregister(array('ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854', 'loadClassLoader'));\n\n        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());\n        if ($useStaticLoader) {\n            require __DIR__ . '/autoload_static.php';\n\n            call_user_func(\\Composer\\Autoload\\ComposerStaticInitc058e1b5c686df0909ec1cc39bb5d854::getInitializer($loader));\n        } else {\n            $map = require __DIR__ . '/autoload_namespaces.php';\n            foreach ($map as $namespace => $path) {\n                $loader->set($namespace, $path);\n            }\n\n            $map = require __DIR__ . '/autoload_psr4.php';\n            foreach ($map as $namespace => $path) {\n                $loader->setPsr4($namespace, $path);\n            }\n\n            $classMap = require __DIR__ . '/autoload_classmap.php';\n            if ($classMap) {\n                $loader->addClassMap($classMap);\n            }\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\n'grav-plugin-git-sync/vendor/composer/autoload_classmap.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'Composer\\\\InstalledVersions' => $vendorDir . '/composer/InstalledVersions.php',\n    'Grav\\\\Plugin\\\\GitSyncPlugin' => $baseDir . '/git-sync.php',\n    'SebastianBergmann\\\\Git\\\\Exception' => $vendorDir . '/sebastian/git/src/Exception/Exception.php',\n    'SebastianBergmann\\\\Git\\\\Git' => $vendorDir . '/sebastian/git/src/Git.php',\n    'SebastianBergmann\\\\Git\\\\RuntimeException' => $vendorDir . '/sebastian/git/src/Exception/RuntimeException.php',\n);\n\n'grav-plugin-git-sync/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer/autoload_real.php';\n\nreturn ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854::getLoader();\n\n'grav-plugin-git-sync/git-sync.php'\n:<?php\n\nnamespace Grav\\Plugin;\n\nuse Composer\\Autoload\\ClassLoader;\nuse Grav\\Common\\Config\\Config;\nuse Grav\\Common\\Data\\Data;\nuse Grav\\Common\\Grav;\nuse Grav\\Common\\Page\\Interfaces\\PageInterface;\nuse Grav\\Common\\Plugin;\nuse Grav\\Common\\Scheduler\\Scheduler;\nuse Grav\\Plugin\\GitSync\\AdminController;\nuse Grav\\Plugin\\GitSync\\GitSync;\nuse Grav\\Plugin\\GitSync\\Helper;\nuse RocketTheme\\Toolbox\\Event\\Event;\n\n\nclass GitSyncPlugin extends Plugin\n{\n\n    protected $controller;\n\n    protected $git;\n\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            'onPluginsInitialized'   => [\n                ['autoload', 100000],\n                ['onPluginsInitialized', 1000]\n            ],\n            'onPageInitialized'      => ['onPageInitialized', 0],\n            'onFormProcessed'        => ['onFormProcessed', 0],\n            'onSchedulerInitialized' => ['onSchedulerInitialized', 0]\n        ];\n    }\n\n\n    public function autoload() : ClassLoader\n    {\n        return require __DIR__ . '/vendor/autoload.php';\n    }\n\n\n    public static function generateWebhookSecret()\n    {\n        return static::generateHash(24);\n    }\n\n\n    public static function generateRandomWebhook()\n    {\n        return '/_git-sync-' . static::generateHash(6);\n    }\n\n\n    public function onPluginsInitialized()\n    {\n        $this->enable(['gitsync' => ['synchronize', 0]]);\n        $this->init();\n\n        if ($this->isAdmin()) {\n            $this->enable([\n                'onTwigTemplatePaths'  => ['onTwigTemplatePaths', 0],\n                'onTwigSiteVariables'  => ['onTwigSiteVariables', 0],\n                'onAdminMenu'          => ['onAdminMenu', 0],\n                'onAdminSave'          => ['onAdminSave', 0],\n                'onAdminAfterSave'     => ['onAdminAfterSave', 0],\n                'onAdminAfterSaveAs'   => ['onAdminAfterSaveAs', 0],\n                'onAdminAfterDelete'   => ['onAdminAfterDelete', 0],\n                'onAdminAfterAddMedia' => ['onAdminAfterMedia', 0],\n                'onAdminAfterDelMedia' => ['onAdminAfterMedia', 0],\n            ]);\n\n            return;\n        }\n\n        $config = $this->config->get('plugins.' . $this->name);\n        $route = $this->grav['uri']->route();\n        $webhook = $config['webhook'] ?? false;\n        $secret = $config['webhook_secret'] ?? false;\n        $enabled = $config['webhook_enabled'] ?? false;\n\n        if ($enabled && $route === $webhook && $_SERVER['REQUEST_METHOD'] === 'POST') {\n            if ($secret) {\n                if (!$this->isRequestAuthorized($secret)) {\n                    http_response_code(401);\n                    header('Content-Type: application/json');\n                    echo json_encode([\n                        'status' => 'error',\n                        'message' => 'Unauthorized request'\n                    ]);\n                    exit;\n                }\n            }\n            try {\n                $this->synchronize();\n                header('Content-Type: application/json');\n                echo json_encode([\n                    'status' => 'success',\n                    'message' => 'GitSync completed the synchronization'\n                ]);\n            } catch (\\Exception $e) {\n                http_response_code(500);\n                header('Content-Type: application/json');\n                echo json_encode([\n                    'status' => 'error',\n                    'message' => 'GitSync failed to synchronize'\n                ]);\n            }\n            exit;\n        }\n    }\n\n\n    public function isRequestAuthorized($secret)\n    {\n        if (isset($_SERVER['HTTP_X_HUB_SIGNATURE'])) {\n            $payload = file_get_contents('php:\n\n            return $this->isGithubSignatureValid($secret, $_SERVER['HTTP_X_HUB_SIGNATURE'], $payload);\n        }\n        if (isset($_SERVER['HTTP_X_GITLAB_TOKEN'])) {\n            return $this->isGitlabTokenValid($secret, $_SERVER['HTTP_X_GITLAB_TOKEN']);\n        } else {\n            $payload = file_get_contents('php:\n            return $this->isGiteaSecretValid($secret, $payload);\n        }\n\n        return false;\n    }\n\n\n    public function isGithubSignatureValid($secret, $signatureHeader, $payload)\n    {\n        [$algorithm, $signature] = explode('=', $signatureHeader);\n\n        return $signature === hash_hmac($algorithm, $payload, $secret);\n    }\n\n\n    public function isGitlabTokenValid($secret, $token)\n    {\n        return $secret === $token;\n    }\n\n\n    public function isGiteaSecretValid($secret, $payload)\n    {\n        $payload = json_decode($payload, true);\n        if (!empty($payload) && isset($payload['secret'])) {\n            return $secret === $payload['secret'];\n        }\n\n        return false;\n    }\n\n    public function onAdminMenu()\n    {\n        $base = rtrim($this->grav['base_url'], '/') . '/' . trim($this->grav['admin']->base, '/');\n        $options = [\n            'hint' => Helper::isGitInitialized() ? 'Synchronize GitSync' : 'Configure GitSync',\n            'class' => 'gitsync-sync',\n            'location' => 'pages',\n            'route' => Helper::isGitInitialized() ? 'admin' : 'admin/plugins/git-sync',\n            'icon' => 'fa-' . $this->grav['plugins']->get('git-sync')->blueprints()->get('icon')\n        ];\n\n        if (Helper::isGitInstalled()) {\n            if (Helper::isGitInitialized()) {\n                $options['data'] = [\n                    'gitsync-useraction' => 'sync',\n                    'gitsync-uri' => $base . '/plugins/git-sync'\n                ];\n            }\n\n            $this->grav['twig']->plugins_quick_tray['GitSync'] = $options;\n        }\n    }\n\n    public function init()\n    {\n        if ($this->isAdmin()) {\n\n            $this->controller = new AdminController($this);\n            $this->git = &$this->controller->git;\n        } else {\n            $this->git = new GitSync();\n        }\n    }\n\n\n    public function synchronize()\n    {\n        if (!Helper::isGitInstalled() || !Helper::isGitInitialized()) {\n            return true;\n        }\n\n        $this->grav->fireEvent('onGitSyncBeforeSynchronize');\n\n        if ($this->git->hasChangesToCommit()) {\n            $this->git->commit();\n        }\n\n\n        $this->git->sync();\n\n        $this->grav->fireEvent('onGitSyncAfterSynchronize');\n\n        return true;\n    }\n\n    public function onSchedulerInitialized(Event $event)\n    {\n\n        $config = Grav::instance()['config'];\n        $run_at = $config->get('plugins.git-sync.sync.cron_at', '0 12,23 * * *');\n\n        if ($config->get('plugins.git-sync.sync.cron_enable', false)) {\n\n            $scheduler = $event['scheduler'];\n            $job = $scheduler->addFunction('Grav\\Plugin\\GitSync\\Helper::synchronize', [], 'GitSync');\n            $job->at($run_at);\n        }\n    }\n\n\n    public function reset()\n    {\n        if (!Helper::isGitInstalled() || !Helper::isGitInitialized()) {\n            return true;\n        }\n\n        $this->grav->fireEvent('onGitSyncBeforeReset');\n\n        $this->git->reset();\n\n        $this->grav->fireEvent('onGitSyncAfterReset');\n\n        return true;\n    }\n\n\n    public function onTwigTemplatePaths()\n    {\n        $this->grav['twig']->twig_paths[] = __DIR__ . '/templates';\n    }\n\n\n    public function onTwigSiteVariables()\n    {\n\n        if (!class_exists(Helper::class)) {\n            return false;\n        }\n\n        $user = $this->grav['user'];\n        if (!$user->authenticated) {\n            return false;\n        }\n\n        $settings = [\n            'first_time'    => !Helper::isGitInitialized(),\n            'git_installed' => Helper::isGitInstalled()\n        ];\n\n        $this->grav['twig']->twig_vars['git_sync'] = $settings;\n\n        $adminPath = trim($this->grav['admin']->base, '/');\n        if ($this->grav['uri']->path() === \"/$adminPath/plugins/git-sync\") {\n            $this->grav['assets']->addCss('plugin:\n        } else {\n            $this->grav['assets']->addInlineJs('var GitSync = ' . json_encode($settings) . ';');\n        }\n\n        $this->grav['assets']->addJs('plugin:\n        $this->grav['assets']->addJs('plugin:\n        $this->grav['assets']->addCss('plugin:\n\n        return true;\n    }\n\n    public function onPageInitialized()\n    {\n        if ($this->controller && $this->controller->isActive()) {\n            $this->controller->execute();\n            $this->controller->redirect();\n        }\n    }\n\n\n    public function onAdminSave(Event $event)\n    {\n        $obj           = $event['object'];\n        $adminPath \t   = trim($this->grav['admin']->base, '/');\n        $isPluginRoute = $this->grav['uri']->path() === \"/$adminPath/plugins/\" . $this->name;\n\n        if ($obj instanceof Data) {\n            if (!$isPluginRoute || !Helper::isGitInstalled()) {\n                return true;\n            }\n\n\n            $password = $obj->get('password', false);\n            if (!$password) {\n                $current_password = $this->git->getPassword();\n\n                if ($current_password && strpos($current_password, 'gitsync-') !== 0) {\n                    $current_password = Helper::encrypt($current_password);\n                }\n            } else {\n\n                $current_password = Helper::encrypt($password);\n            }\n\n            $obj->set('password', $current_password);\n        }\n\n        return $obj;\n    }\n\n\n    public function onAdminAfterSave(Event $event)\n    {\n        $obj           = $event['object'];\n        $adminPath\t   = trim($this->grav['admin']->base, '/');\n        $uriPath       = $this->grav['uri']->path();\n        $isPluginRoute = $uriPath === \"/$adminPath/plugins/\" . $this->name;\n\n        if ($obj instanceof PageInterface && !$this->grav['config']->get('plugins.git-sync.sync.on_save', true)) {\n            return;\n        }\n\n        if ($obj instanceof Data) {\n            $folders = $this->git->getConfig('folders', $event['object']->get('folders', []));\n            $data_type = preg_replace('\n            $data_type = explode('/', $data_type);\n            $data_type = array_shift($data_type);\n\n            if (null === $data_type || !Helper::isGitInstalled() || (!$isPluginRoute && !in_array($this->getFolderMapping($data_type), $folders, true))) {\n                return;\n            }\n\n            if ($isPluginRoute) {\n                $this->git->setConfig($obj->toArray());\n\n\n                $this->git->initializeRepository();\n\n\n                $this->git->setUser();\n                $this->git->addRemote();\n            }\n        }\n\n        $this->synchronize();\n    }\n\n    public function onAdminAfterSaveAs()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_save', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n    public function onAdminAfterDelete()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_delete', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n    public function onAdminAfterMedia()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_media', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n\n    public function onFormProcessed(Event $event)\n    {\n        $action = $event['action'];\n\n        if ($action === 'gitsync') {\n            $this->synchronize();\n        }\n    }\n\n\n    public function getFolderMapping($data_type)\n    {\n        switch ($data_type) {\n            case 'user':\n                return 'accounts';\n            case 'themes':\n                return 'config';\n            case 'config':\n            case 'data':\n            case 'plugins':\n            case 'pages':\n                return $data_type;\n        }\n\n        return null;\n    }\n\n\n    protected static function generateHash(int $len): string\n    {\n        $bytes = openssl_random_pseudo_bytes($len, $isStrong);\n\n        if ($bytes === false) {\n            throw new \\RuntimeException('Could not generate hash');\n        }\n\n        if ($isStrong === false) {\n\n            $isStrong = true;\n        }\n\n        return bin2hex($bytes);\n    }\n}\n",
        "gt": [
            "'grav-plugin-git-sync/vendor/composer/autoload_classmap.php'",
            "'grav-plugin-git-sync/vendor/composer/autoload_real.php'",
            "'grav-plugin-git-sync/vendor/autoload.php'",
            "'grav-plugin-git-sync/git-sync.php'"
        ]
    },
    {
        "files": [
            "'Cavalcade/plugin.php'",
            "'Cavalcade/inc/class-job.php'",
            "'Cavalcade/tests/bootstrap.php'"
        ],
        "content": "'Cavalcade/plugin.php'\n:<?php\n\n\nnamespace HM\\Cavalcade\\Plugin;\n\nconst DATE_FORMAT = 'Y-m-d H:i:s';\nconst DATABASE_VERSION = 4;\n\nrequire __DIR__ . '/inc/namespace.php';\nrequire __DIR__ . '/inc/class-job.php';\nrequire __DIR__ . '/inc/connector/namespace.php';\nrequire __DIR__ . '/inc/upgrade/namespace.php';\n\nbootstrap();\n\n\nif ( function_exists( 'wp_cache_add_global_groups' ) ) {\n\tregister_cache_groups();\n}\n\n'Cavalcade/inc/class-job.php'\n:<?php\n\n\nnamespace HM\\Cavalcade\\Plugin;\n\nuse WP_Error;\n\nclass Job {\n\tpublic $id;\n\tpublic $site;\n\tpublic $hook;\n\tpublic $args;\n\tpublic $start;\n\tpublic $nextrun;\n\tpublic $interval;\n\tpublic $schedule;\n\tpublic $status;\n\n\tpublic function __construct( $id = null ) {\n\t\t$this->id = $id;\n\t}\n\n\n\tpublic function is_created() {\n\t\treturn (bool) $this->id;\n\t}\n\n\n\tpublic function is_recurring() {\n\t\treturn ! empty( $this->interval );\n\t}\n\n\tpublic function save() {\n\t\tglobal $wpdb;\n\n\t\t$data = [\n\t\t\t'hook'    => $this->hook,\n\t\t\t'site'    => $this->site,\n\t\t\t'start'   => gmdate( DATE_FORMAT, $this->start ),\n\t\t\t'nextrun' => gmdate( DATE_FORMAT, $this->nextrun ),\n\t\t\t'args'    => serialize( $this->args ),\n\t\t];\n\n\t\tif ( $this->is_recurring() ) {\n\t\t\t$data['interval'] = $this->interval;\n\t\t\tif ( get_database_version() >= 2 ) {\n\t\t\t\t$data['schedule'] = $this->schedule;\n\t\t\t}\n\t\t}\n\n\t\tif ( $this->is_created() ) {\n\t\t\t$where = [\n\t\t\t\t'id' => $this->id,\n\t\t\t];\n\t\t\t$result = $wpdb->update( $this->get_table(), $data, $where, $this->row_format( $data ), $this->row_format( $where ) );\n\t\t} else {\n\t\t\t$result = $wpdb->insert( $this->get_table(), $data, $this->row_format( $data ) );\n\t\t\t$this->id = $wpdb->insert_id;\n\t\t}\n\n\t\tself::flush_query_cache();\n\t\twp_cache_set( \"job::{$this->id}\", $this, 'cavalcade-jobs' );\n\t\treturn (bool) $result;\n\t}\n\n\tpublic function delete( $options = [] ) {\n\t\tglobal $wpdb;\n\t\t$wpdb->show_errors();\n\n\t\t$defaults = [\n\t\t\t'delete_running' => false,\n\t\t];\n\t\t$options = wp_parse_args( $options, $defaults );\n\n\t\tif ( $this->status === 'running' && ! $options['delete_running'] ) {\n\t\t\treturn new WP_Error( 'cavalcade.job.delete.still_running', __( 'Cannot delete running jobs', 'cavalcade' ) );\n\t\t}\n\n\t\t$where = [\n\t\t\t'id' => $this->id,\n\t\t];\n\t\t$result = $wpdb->delete( $this->get_table(), $where, $this->row_format( $where ) );\n\n\t\tself::flush_query_cache();\n\t\twp_cache_delete( \"job::{$this->id}\", 'cavalcade-jobs' );\n\n\t\treturn (bool) $result;\n\t}\n\n\tpublic static function get_table() {\n\t\tglobal $wpdb;\n\t\treturn $wpdb->base_prefix . 'cavalcade_jobs';\n\t}\n\n\n\tprotected static function to_instance( $row ) {\n\t\t$job = new Job( $row->id );\n\n\n\t\t$job->site     = $row->site;\n\t\t$job->hook     = $row->hook;\n\t\t$job->args     = unserialize( $row->args );\n\t\t$job->start    = mysql2date( 'G', $row->start );\n\t\t$job->nextrun  = mysql2date( 'G', $row->nextrun );\n\t\t$job->interval = $row->interval;\n\t\t$job->status   = $row->status;\n\n\t\tif ( ! $row->interval ) {\n\n\t\t\t$job->schedule = false;\n\t\t} elseif ( ! empty( $row->schedule ) ) {\n\t\t\t$job->schedule = $row->schedule;\n\t\t} else {\n\t\t\t$job->schedule = get_schedule_by_interval( $row->interval );\n\t\t}\n\n\t\twp_cache_set( \"job::{$job->id}\", $job, 'cavalcade-jobs' );\n\t\treturn $job;\n\t}\n\n\n\tprotected static function to_instances( $rows ) {\n\t\treturn array_map( [ get_called_class(), 'to_instance' ], $rows );\n\t}\n\n\n\tpublic static function get( $job ) {\n\t\tglobal $wpdb;\n\n\t\tif ( $job instanceof Job ) {\n\t\t\treturn $job;\n\t\t}\n\n\t\t$job = absint( $job );\n\n\t\t$cached_job = wp_cache_get( \"job::{$job}\", 'cavalcade-jobs' );\n\t\tif ( $cached_job ) {\n\t\t\treturn $cached_job;\n\t\t}\n\n\t\t$suppress = $wpdb->suppress_errors();\n\t\t$job = $wpdb->get_row( $wpdb->prepare( 'SELECT * FROM ' . static::get_table() . ' WHERE id = %d', $job ) );\n\t\t$wpdb->suppress_errors( $suppress );\n\n\t\tif ( ! $job ) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn static::to_instance( $job );\n\t}\n\n\n\tpublic static function get_by_site( $site, $include_completed = false, $include_failed = false, $exclude_future = false ) {\n\n\n\t\tif ( is_object( $site ) && isset( $site->blog_id ) ) {\n\t\t\t$site = $site->blog_id;\n\t\t}\n\n\t\tif ( ! is_numeric( $site ) ) {\n\t\t\treturn new WP_Error( 'cavalcade.job.invalid_site_id' );\n\t\t}\n\n\t\t$args = [\n\t\t\t'site' => $site,\n\t\t\t'args' => null,\n\t\t\t'statuses' => [ 'waiting', 'running' ],\n\t\t\t'limit' => 0,\n\t\t\t'__raw' => true,\n\t\t];\n\n\t\tif ( $include_completed ) {\n\t\t\t$args['statuses'][] = 'completed';\n\t\t}\n\t\tif ( $include_failed ) {\n\t\t\t$args['statuses'][] = 'failed';\n\t\t}\n\t\tif ( $exclude_future ) {\n\t\t\t$args['timestamp'] = 'past';\n\t\t}\n\n\t\t$results = static::get_jobs_by_query( $args );\n\n\t\tif ( empty( $results ) ) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn static::to_instances( $results );\n\t}\n\n\n\tpublic static function get_jobs_by_query( $args = [] ) {\n\t\tglobal $wpdb;\n\t\t$args = (array) $args;\n\t\t$results = [];\n\n\t\t$defaults = [\n\t\t\t'timestamp' => null,\n\t\t\t'hook' => null,\n\t\t\t'args' => [],\n\t\t\t'site' => get_current_blog_id(),\n\t\t\t'statuses' => [ 'waiting', 'running' ],\n\t\t\t'limit' => 1,\n\t\t\t'order' => 'ASC',\n\t\t\t'__raw' => false,\n\t\t];\n\n\t\t$args = wp_parse_args( $args, $defaults );\n\n\n\t\t$args = apply_filters( 'cavalcade.get_jobs_by_query.args', $args );\n\n\n\t\tif ( is_object( $args['site'] ) && isset( $args['site']->blog_id ) ) {\n\t\t\t$args['site'] = $args['site']->blog_id;\n\t\t}\n\n\t\tif ( ! is_numeric( $args['site'] ) ) {\n\t\t\treturn new WP_Error( 'cavalcade.job.invalid_site_id' );\n\t\t}\n\n\t\tif ( ! empty( $args['hook'] ) && ! is_string( $args['hook'] ) ) {\n\t\t\treturn new WP_Error( 'cavalcade.job.invalid_hook_name' );\n\t\t}\n\n\t\tif ( ! is_array( $args['args'] ) && ! is_null( $args['args'] ) ) {\n\t\t\treturn new WP_Error( 'cavalcade.job.invalid_event_arguments' );\n\t\t}\n\n\t\tif ( ! is_numeric( $args['limit'] ) ) {\n\t\t\treturn new WP_Error( 'cavalcade.job.invalid_limit' );\n\t\t}\n\n\t\t$args['limit'] = absint( $args['limit'] );\n\n\n\t\t$table = static::get_table();\n\n\t\t$sql = \"SELECT * FROM `{$table}` WHERE site = %d\";\n\t\t$sql_params[] = $args['site'];\n\n\t\tif ( is_string( $args['hook'] ) ) {\n\t\t\t$sql .= ' AND hook = %s';\n\t\t\t$sql_params[] = $args['hook'];\n\t\t}\n\n\t\tif ( ! is_null( $args['args'] ) ) {\n\t\t\t$sql .= ' AND args = %s';\n\t\t\t$sql_params[] = serialize( $args['args'] );\n\t\t}\n\n\n\t\tif ( $args['timestamp'] === 'future' ) {\n\t\t\t$sql .= \" AND nextrun > %s\";\n\t\t\t$sql_params[] = date( DATE_FORMAT );\n\t\t}\n\n\n\t\tif ( $args['timestamp'] === 'past' ) {\n\t\t\t$sql .= \" AND nextrun <= %s\";\n\t\t\t$sql_params[] = date( DATE_FORMAT );\n\t\t}\n\n\n\t\tif ( is_array( $args['timestamp'] ) && count( $args['timestamp'] ) === 2 ) {\n\t\t\t$sql .= ' AND nextrun BETWEEN %s AND %s';\n\t\t\t$sql_params[] = date( DATE_FORMAT, (int) $args['timestamp'][0] );\n\t\t\t$sql_params[] = date( DATE_FORMAT, (int) $args['timestamp'][1] );\n\t\t}\n\n\n\t\tif ( is_int( $args['timestamp'] ) ) {\n\t\t\t$sql .= ' AND nextrun = %s';\n\t\t\t$sql_params[] = date( DATE_FORMAT, (int) $args['timestamp'] );\n\t\t}\n\n\t\t$sql .= ' AND status IN(' . implode( ',', array_fill( 0, count( $args['statuses'] ), '%s' ) ) . ')';\n\t\t$sql_params = array_merge( $sql_params, $args['statuses'] );\n\n\t\t$sql .= ' ORDER BY nextrun';\n\t\tif ( $args['order'] === 'DESC' ) {\n\t\t\t$sql .= ' DESC';\n\t\t} else {\n\t\t\t$sql .= ' ASC';\n\t\t}\n\n\t\tif ( $args['limit'] > 0 ) {\n\t\t\t$sql .= ' LIMIT %d';\n\t\t\t$sql_params[] = $args['limit'];\n\t\t}\n\n\n\t\t$last_changed = wp_cache_get_last_changed( 'cavalcade-jobs' );\n\t\t$query_hash = sha1( serialize( [ $sql, $sql_params ] ) ) . \"::{$last_changed}\";\n\t\t$results = wp_cache_get( \"jobs::{$query_hash}\", 'cavalcade-jobs' );\n\n\t\tif ( false === $results ) {\n\t\t\t$query = $wpdb->prepare( $sql, $sql_params );\n\t\t\t$results = $wpdb->get_results( $query );\n\t\t\twp_cache_set( \"jobs::{$query_hash}\", $results, 'cavalcade-jobs' );\n\t\t}\n\n\t\tif ( $args['__raw'] === true ) {\n\t\t\treturn $results;\n\t\t}\n\n\t\treturn static::to_instances( $results );\n\t}\n\n\n\tpublic static function flush_query_cache() {\n\t\twp_cache_set( 'last_changed', microtime(), 'cavalcade-jobs' );\n\t}\n\n\n\tprotected static function column_format( $column ) {\n\t\t$columns = [\n\t\t\t'id'   => '%d',\n\t\t\t'site' => '%d',\n\t\t\t'hook' => '%s',\n\t\t\t'args' => '%s',\n\t\t\t'start' => '%s',\n\t\t\t'nextrun' => '%s',\n\t\t\t'interval' => '%d',\n\t\t\t'schedule' => '%s',\n\t\t\t'status' => '%s',\n\t\t];\n\n\t\tif ( isset( $columns[ $column ] ) ) {\n\t\t\treturn $columns[ $column ];\n\t\t}\n\n\t\treturn '%s';\n\t}\n\n\n\tprotected static function row_format( $row ) {\n\t\t$format = [];\n\t\tforeach ( $row as $field => $value ) {\n\t\t\t$format[] = static::column_format( $field );\n\t\t}\n\t\treturn $format;\n\t}\n}\n\n'Cavalcade/tests/bootstrap.php'\n:<?php\n\n\n\n\n\n\nif ( false !== getenv( 'WP_DEVELOP_DIR' ) ) {\n\t$test_root = getenv( 'WP_DEVELOP_DIR' ) . '/tests/phpunit';\n} elseif ( file_exists( '../../../../tests/phpunit/includes/bootstrap.php' ) ) {\n\t$test_root = '../../../../tests/phpunit';\n} elseif ( file_exists( '/tmp/wordpress-tests-lib/includes/bootstrap.php' ) ) {\n\t$test_root = '/tmp/wordpress-tests-lib';\n}\n\nif ( '1' === getenv( 'WP_MULTISITE' ) ) {\n\tdefine( 'MULTISITE', true );\n\tdefine( 'WP_TESTS_MULTISITE', true );\n}\n\nrequire $test_root . '/includes/functions.php';\n\ntests_add_filter( 'muplugins_loaded', function () {\n\trequire_once dirname( __DIR__ ) . '/plugin.php';\n\n\tHM\\Cavalcade\\Plugin\\create_tables();\n});\n\nrequire $test_root . '/includes/bootstrap.php';\n",
        "gt": [
            "'Cavalcade/inc/class-job.php'",
            "'Cavalcade/plugin.php'",
            "'Cavalcade/tests/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'MarginBot/inc/PasswordHash.php'",
            "'MarginBot/inc/header.php'",
            "'MarginBot/index.php'"
        ],
        "content": "'MarginBot/inc/PasswordHash.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nclass PasswordHash {\n\tvar $itoa64;\n\tvar $iteration_count_log2;\n\tvar $portable_hashes;\n\tvar $random_state;\n\n\tfunction PasswordHash($iteration_count_log2, $portable_hashes)\n\t{\n\t\t$this->itoa64 = './0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\n\t\tif ($iteration_count_log2 < 4 || $iteration_count_log2 > 31)\n\t\t\t$iteration_count_log2 = 8;\n\t\t$this->iteration_count_log2 = $iteration_count_log2;\n\n\t\t$this->portable_hashes = $portable_hashes;\n\n\t\t$this->random_state = microtime();\n\t\tif (function_exists('getmypid'))\n\t\t\t$this->random_state .= getmypid();\n\t}\n\n\tfunction get_random_bytes($count)\n\t{\n\t\t$output = '';\n\t\tif (is_readable('/dev/urandom') &&\n\t\t    ($fh = @fopen('/dev/urandom', 'rb'))) {\n\t\t\t$output = fread($fh, $count);\n\t\t\tfclose($fh);\n\t\t}\n\n\t\tif (strlen($output) < $count) {\n\t\t\t$output = '';\n\t\t\tfor ($i = 0; $i < $count; $i += 16) {\n\t\t\t\t$this->random_state =\n\t\t\t\t    md5(microtime() . $this->random_state);\n\t\t\t\t$output .=\n\t\t\t\t    pack('H*', md5($this->random_state));\n\t\t\t}\n\t\t\t$output = substr($output, 0, $count);\n\t\t}\n\n\t\treturn $output;\n\t}\n\n\tfunction encode64($input, $count)\n\t{\n\t\t$output = '';\n\t\t$i = 0;\n\t\tdo {\n\t\t\t$value = ord($input[$i++]);\n\t\t\t$output .= $this->itoa64[$value & 0x3f];\n\t\t\tif ($i < $count)\n\t\t\t\t$value |= ord($input[$i]) << 8;\n\t\t\t$output .= $this->itoa64[($value >> 6) & 0x3f];\n\t\t\tif ($i++ >= $count)\n\t\t\t\tbreak;\n\t\t\tif ($i < $count)\n\t\t\t\t$value |= ord($input[$i]) << 16;\n\t\t\t$output .= $this->itoa64[($value >> 12) & 0x3f];\n\t\t\tif ($i++ >= $count)\n\t\t\t\tbreak;\n\t\t\t$output .= $this->itoa64[($value >> 18) & 0x3f];\n\t\t} while ($i < $count);\n\n\t\treturn $output;\n\t}\n\n\tfunction gensalt_private($input)\n\t{\n\t\t$output = '$P$';\n\t\t$output .= $this->itoa64[min($this->iteration_count_log2 +\n\t\t\t((PHP_VERSION >= '5') ? 5 : 3), 30)];\n\t\t$output .= $this->encode64($input, 6);\n\n\t\treturn $output;\n\t}\n\n\tfunction crypt_private($password, $setting)\n\t{\n\t\t$output = '*0';\n\t\tif (substr($setting, 0, 2) == $output)\n\t\t\t$output = '*1';\n\n\t\t$id = substr($setting, 0, 3);\n\n\t\tif ($id != '$P$' && $id != '$H$')\n\t\t\treturn $output;\n\n\t\t$count_log2 = strpos($this->itoa64, $setting[3]);\n\t\tif ($count_log2 < 7 || $count_log2 > 30)\n\t\t\treturn $output;\n\n\t\t$count = 1 << $count_log2;\n\n\t\t$salt = substr($setting, 4, 8);\n\t\tif (strlen($salt) != 8)\n\t\t\treturn $output;\n\n\n\n\n\n\n\n\t\tif (PHP_VERSION >= '5') {\n\t\t\t$hash = md5($salt . $password, TRUE);\n\t\t\tdo {\n\t\t\t\t$hash = md5($hash . $password, TRUE);\n\t\t\t} while (--$count);\n\t\t} else {\n\t\t\t$hash = pack('H*', md5($salt . $password));\n\t\t\tdo {\n\t\t\t\t$hash = pack('H*', md5($hash . $password));\n\t\t\t} while (--$count);\n\t\t}\n\n\t\t$output = substr($setting, 0, 12);\n\t\t$output .= $this->encode64($hash, 16);\n\n\t\treturn $output;\n\t}\n\n\tfunction gensalt_extended($input)\n\t{\n\t\t$count_log2 = min($this->iteration_count_log2 + 8, 24);\n\n\n\t\t$count = (1 << $count_log2) - 1;\n\n\t\t$output = '_';\n\t\t$output .= $this->itoa64[$count & 0x3f];\n\t\t$output .= $this->itoa64[($count >> 6) & 0x3f];\n\t\t$output .= $this->itoa64[($count >> 12) & 0x3f];\n\t\t$output .= $this->itoa64[($count >> 18) & 0x3f];\n\n\t\t$output .= $this->encode64($input, 3);\n\n\t\treturn $output;\n\t}\n\n\tfunction gensalt_blowfish($input)\n\t{\n\n\n\n\n\n\n\n\n\t\t$itoa64 = './ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n\t\t$output = '$2a$';\n\t\t$output .= chr(ord('0') + $this->iteration_count_log2 / 10);\n\t\t$output .= chr(ord('0') + $this->iteration_count_log2 % 10);\n\t\t$output .= '$';\n\n\t\t$i = 0;\n\t\tdo {\n\t\t\t$c1 = ord($input[$i++]);\n\t\t\t$output .= $itoa64[$c1 >> 2];\n\t\t\t$c1 = ($c1 & 0x03) << 4;\n\t\t\tif ($i >= 16) {\n\t\t\t\t$output .= $itoa64[$c1];\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t$c2 = ord($input[$i++]);\n\t\t\t$c1 |= $c2 >> 4;\n\t\t\t$output .= $itoa64[$c1];\n\t\t\t$c1 = ($c2 & 0x0f) << 2;\n\n\t\t\t$c2 = ord($input[$i++]);\n\t\t\t$c1 |= $c2 >> 6;\n\t\t\t$output .= $itoa64[$c1];\n\t\t\t$output .= $itoa64[$c2 & 0x3f];\n\t\t} while (1);\n\n\t\treturn $output;\n\t}\n\n\tfunction HashPassword($password)\n\t{\n\t\t$random = '';\n\n\t\tif (CRYPT_BLOWFISH == 1 && !$this->portable_hashes) {\n\t\t\t$random = $this->get_random_bytes(16);\n\t\t\t$hash =\n\t\t\t    crypt($password, $this->gensalt_blowfish($random));\n\t\t\tif (strlen($hash) == 60)\n\t\t\t\treturn $hash;\n\t\t}\n\n\t\tif (CRYPT_EXT_DES == 1 && !$this->portable_hashes) {\n\t\t\tif (strlen($random) < 3)\n\t\t\t\t$random = $this->get_random_bytes(3);\n\t\t\t$hash =\n\t\t\t    crypt($password, $this->gensalt_extended($random));\n\t\t\tif (strlen($hash) == 20)\n\t\t\t\treturn $hash;\n\t\t}\n\n\t\tif (strlen($random) < 6)\n\t\t\t$random = $this->get_random_bytes(6);\n\t\t$hash =\n\t\t    $this->crypt_private($password,\n\t\t    $this->gensalt_private($random));\n\t\tif (strlen($hash) == 34)\n\t\t\treturn $hash;\n\n\n\n\n\t\treturn '*';\n\t}\n\n\tfunction CheckPassword($password, $stored_hash)\n\t{\n\t\t$hash = $this->crypt_private($password, $stored_hash);\n\t\tif ($hash[0] == '*')\n\t\t\t$hash = crypt($password, $stored_hash);\n\n\t\treturn $hash == $stored_hash;\n\t}\n}\n\n?>\n\n'MarginBot/inc/header.php'\n:<?\n\n\nerror_reporting(E_ALL & ~E_NOTICE);\nheader( 'Content-type: text/html; charset=utf-8' );\n\n\nrequire_once(\"config.php\");\nif($config['db']['host'] == ''){\n\n\tif (!headers_sent()){\n\t\theader('Location: install.php');\n\t\texit;\n\t}\n\n\telse{\n\t\techo '<script>window.location = \"install.php\";</script>';\n\t\texit;\n\t}\n\n}\n\n\n$alert = array();\n$warning = array();\n$notice = array();\n\n\nrequire_once(\"database.php\");\n$db = new Database();\n\n\n\nrequire_once(\"General.php\");\n$gen = new General();\n\nrequire_once(\"Pages.php\");\n$pages = new Pages();\n\n\n\nrequire_once(\"Accounts.php\");\n$act = new Accounts();\n\nrequire_once('ExchangeAPIs/bitfinex.php');\n\n\nrequire_once(\"PasswordHash.php\");\n$hasher = new PasswordHash(8, false);\n\n\nif($_REQUEST['doLogout']==1){\n\t$act->doLogoutUser();\n}\nelse{\n\tif($_REQUEST['login_email']){\n\n\t\tif(!$act->doLoginUser()){\n\t\t\t$pages->activePage = 'doLogin';\n\t\t}\n\t}\n\telse if(!$act->checkLoggedUser()){\n\n\t\t$pages->activePage = 'doLogin';\n\t}\n\n\n\tif(isset($_SESSION['userid'])){\n\n\n\n\t\t$accounts[$act->userid] = $act;\n\n\t\tif($act->sts == 9 || $act->sts == 8 ){\n\t\t\t$act->getAllAccounts();\n\t\t}\n\n\n\n\t\tif($_REQUEST['new_name']){\n\t\t\t$accStep = $act->doAddAccount();\n\t\t}\n\n\t\tif($_REQUEST['doUpdate']==1){\n\t\t\t$accounts[$_REQUEST['userid']]->updateSettings();\n\t\t}\n\n\t\tif($_REQUEST['doUpdateExtract']==1){\n\t\t\t$accounts[$_REQUEST['userid']]->updateExtractSettings();\n\t\t}\n\t}\n\n}\n\n\n$gen->checkCronStatus();\n\n\n?>\n<!DOCTYPE html>\n<html xmlns=\"http:\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title><?=($pages->title ? $config['app_name'].' '.$config['app_version'].'.'.$config['app_version_minor'].' - '.$pages->title : $config['app_name'].' '.$config['app_version'].'.'.$config['app_version_minor']);?></title>\n\n\t<script type=\"text/javascript\" src=\"https:\n\t<script type=\"text/javascript\" src=\"https:\n    <script type=\"text/javascript\" src=\"js/jquery.formatCurrency-1.4.0.min.js\"></script>\n    <!-- Highcharts, for the stats page -->\n    <script src=\"https:\n\t<script src=\"https:\n\n    <!-- Bootstrap -->\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\n\t<link href=\"css/bootstrap-theme.min.css\" rel=\"stylesheet\">\n\n    <!-- Custom styles for this template -->\n    <link href=\"css/styles.css\" rel=\"stylesheet\">\n\n    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:\n    <!--[if lt IE 9]>\n      <script src=\"https:\n      <script src=\"https:\n    <![endif]-->\n    <link href=\"favicon.ico\" rel=icon>\n</head>\n<body>\n\n\n<? if($_SESSION['userid']!=''){ ?>\n<nav class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\n      <div class=\"container\">\n        <div class=\"navbar-header\">\n          <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </button>\n          <a class=\"navbar-brand\" href=\"index.php\" title=\"Version <?=$config['app_version'].'.'.$config['app_version_minor'];?>\"><img src=\"img/MarginBotLogo.png\" alt=\"MarginBot\" class=\"img-responsive center-block\" style=\"width:250px;\"></a>\n        </div>\n        <div id=\"navbar\" class=\"navbar-collapse collapse\">\n\n\n\n          <ul class=\"nav navbar-nav\">\n          \t <li class=\"dropdown\">\n              <a href=\"\n              <ul class=\"dropdown-menu\" role=\"menu\">\n              <?=$gen->showCurrencyNav();?>\n\n              </ul>\n            </li>\n\n\n\n\n\n\n            <? if($act->sts == 9 || $act->sts == 8){ ?>\n            <li class=\"<?=($pages->activePage == 'addAct' ? 'active' : '');?>\"><a href=\"index.php?page=addAct\">Add Account</a></li>\n            <? } ?>\n\n            <li class=\"dropdown <?=($pages->activePage == 'viewReturns' || $pages->activePage == 'grabHistory' ? 'active' : '');?>\">\n              <a href=\"\n              <ul class=\"dropdown-menu\" role=\"menu\">\n              \t<?=$gen->showReturnsNav();?>\n                <li><a href=\"index.php?page=grabHistory\">Grab Return History From Bitfinex</a></li>\n              </ul>\n            </li>\n\n\n            <li style=\"padding:8px 30px 0px 30px;\">\n            \t<button type=\"button\" class=\"btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"\n                  Sign Up For Bitfinex 10% Off Fees\n                </button>\n            </li>\n\n            <li style=\"padding:8px 30px 0px 30px;\">\n            \t<button type=\"button\" class=\"btn btn-default btn-sm\" data-toggle=\"modal\" data-target=\"\n                  Support Development\n                </button>\n            </li>\n            <li class=\"dropdown\">\n              <a href=\"\n              <ul class=\"dropdown-menu\" role=\"menu\">\n                <li><a href=\"mailto:<?=$config['app_support_email'];?>\">Email</a></li>\n                <li><a href=\"<?=$config['app_support_url'];?>\">Forums</a></li>\n              </ul>\n            </li>\n            <li><a href=\"index.php?doLogout=1\">Logout</a></li>\n          </ul>\n\n        </div><!--/.nav-collapse -->\n      </div>\n    </nav>\n <? } ?>\n\n<?\n$gen->showSiteModals();\n\n\n$configFile = getcwd().'/inc/config.php';\nif (is_writable($configFile) && $_SESSION['userid']!='') {$warning[] = \"Your Config File Seems to be writable.  You should change this to read only for security reasons!<br> (chmod 644 \".$configFile.\" )\";}\n\n\n$installFile = getcwd().'/install.php';\nif (file_exists($installFile) && $_SESSION['userid']!='') {$notice[] = \"Your Install File Seems to still exist.  Its probably a good idea to delete this file, as you won't need it anymore and it could be a secuirty issue.<br>  (Delete the file \".$installFile.\" )\";}\n\n\n?>\n\n<div class=\"container\">\n\n'MarginBot/index.php'\n:<?\nrequire_once('inc/header.php');\n\n$gen->showWarnings($warning);\n$gen->showAlerts($alert);\n$gen->showNotice($notice);\n\n\n\n\n$pages->showPage();\n\n\n\nrequire_once('inc/footer.php');\n?>",
        "gt": [
            "'MarginBot/inc/PasswordHash.php'",
            "'MarginBot/inc/header.php'",
            "'MarginBot/index.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'",
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'CFPropertyList' => array($vendorDir . '/rodneyrehm/plist/classes'),\n);\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/database.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/inc/configuration.inc.php'"
        ],
        "content": "'firebirdwebadmin/database.php'\n:<?php\n\n\n\n\n\n\n\nrequire './inc/script_start.inc.php';\n\n\n\n\nif (isset($_POST['db_login_doit'])) {\n\n    if (!empty($dbhandle)) {\n        fbird_close($dbhandle);\n    }\n    $s_login['database'] = $_POST['db_login_database'];\n    $s_login['user'] = strtoupper($_POST['db_login_user']);\n    $s_login['host'] = $_POST['db_login_host'];\n\n\n\n    $pw = $_POST['db_login_password'];\n    if (strspn($pw, '*') != strlen($pw)) {\n        $s_login['password'] = $pw;\n    }\n\n    $s_login['role'] = !empty($_POST['db_login_role'])  ? $_POST['db_login_role']  : '';\n    $s_login['cache'] = !empty($_POST['db_login_cache']) ? $_POST['db_login_cache'] : '';\n    if ($s_login['cache'] != null  &&  $s_login['cache'] < 10) {\n        $s_login['cache'] = 10;\n    }\n    $s_login['charset'] = !empty($_POST['db_login_charset']) ? $_POST['db_login_charset'] : '';\n    $s_login['dialect'] = !empty($_POST['db_login_dialect']) ? $_POST['db_login_dialect'] : '';\n    $s_login['server'] = !empty($_POST['db_login_server'])  ? $_POST['db_login_server']  : '';\n\n    if ($s_login['database'] == '') {\n        $error = $ERRORS['NO_DB_SELECTED'];\n    } elseif (!is_allowed_db($s_login['database'])) {\n        $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_login['database']);\n    }\n\n    if (empty($error)) {\n        if ($dbhandle = db_connect()) {\n\n\n            $s_connected = true;\n\n            remove_edit_panels();\n            $s_charsets = get_charsets();\n            $message = $info_strings['SuccessLogin'];\n        } else {\n\n            $fb_error = fbird_errmsg();\n            $s_login['password'] = '';\n            $s_connected = false;\n        }\n    }\n    cleanup_session();\n}\n\n\n\n\nif (isset($_POST['db_logout_doit'])) {\n    if (!empty($dbhandle)) {\n        fbird_close($dbhandle);\n    }\n    remove_edit_panels();\n    cleanup_session();\n    $s_login['password'] = '';\n\n    $s_connected = false;\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'db_create')\n&&  isset($_POST['db_create_doit'])\n&&  isset($_POST['db_create_database'])\n&&  !empty($_POST['db_create_database'])) {\n    $s_create_db = trim($_POST['db_create_database']);\n    $s_create_host = trim($_POST['db_create_host']);\n    $s_create_user = trim($_POST['db_create_user']);\n\n\n\n    $pw = $_POST['db_create_password'];\n    if (strspn($pw, '*') != strlen($pw)) {\n        $s_create_pw = $pw;\n    }\n    $s_create_pagesize = $_POST['db_create_pagesize'];\n    $s_create_charset = $_POST['db_create_charset'];\n\n    if (!is_allowed_db($s_create_db)) {\n        $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_create_db);\n    }\n\n\n    if (!empty($dbhandle)  &&  empty($error)) {\n        fbird_close($dbhandle);\n    }\n\n\n\n    if (empty($error)) {\n        $db_str = (!empty($s_create_host)) ? $s_create_host.':'.$s_create_db : $s_create_db;\n\n        $sql = 'CREATE DATABASE \\''.$db_str.'\\'';\n        if (strlen($s_create_user) > 0) {\n            $sql .= ' USER \\''.$s_create_user.'\\'';\n            if (strlen($s_create_pw) > 0) {\n                $sql .= ' PASSWORD \\''.$s_create_pw.'\\'';\n            }\n        }\n        if ($s_create_pagesize !=   4096) {\n\n            $sql .= ' PAGE_SIZE = '.$s_create_pagesize;\n        }\n\n        if ($s_create_charset != 'NONE') {\n\n            $sql .= ' DEFAULT CHARACTER SET '.$s_create_charset;\n        }\n\n        $sql .= ';';\n        list($binary_output, $binary_error) = isql_execute($sql);\n\n        if (empty($binary_error)  &&  !is_file($s_create_db)) {\n            $error = sprintf($ERRORS['CREATE_DB_FAILED'], $s_create_db);\n        } else {\n\n            $s_login['charset'] = $s_create_charset;\n            $s_login['database'] = $s_create_db;\n            $s_login['host'] = $s_create_host;\n            $s_login['user'] = strtoupper($s_create_user);\n            $s_login['password'] = $s_create_pw;\n            if ($dbhandle = db_connect()) {\n                $s_connected = true;\n                remove_edit_panels();\n                cleanup_session();\n                $message = sprintf($MESSAGES['CREATE_DB_SUCCESS'], $s_create_db);\n            } else {\n                $fb_error = fbird_errmsg();\n            }\n        }\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'db_delete')\n&&  isset($_POST['db_delete_doit'])\n&&  isset($_POST['db_delete_database'])\n&&  !empty($_POST['db_delete_database'])) {\n    $pw = get_request_data('db_delete_password');\n    if (strspn($pw, '*') == strlen($pw)) {\n        $pw = $s_delete_db['password'];\n    }\n    $s_delete_db = array('database' => get_request_data('db_delete_database'),\n                         'user' => get_request_data('db_delete_user'),\n                         'host' => get_request_data('db_delete_host'),\n                         'password' => $pw,\n                         );\n\n\n    if ($s_login['database'] == $s_delete_db) {\n        $message = sprintf($MESSAGES['DELETE_CON_DB'], $s_delete_db);\n        $s_login['database'] = '';\n        $s_connected = false;\n        remove_edit_panels();\n        cleanup_session();\n    }\n\n    if (!is_allowed_db($s_delete_db['database'])) {\n        $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_delete_db['database']);\n    } elseif ($s_cust['askdel'] == true) {\n        $s_confirmations['database'] =\n            array('msg' => sprintf($MESSAGES['CONFIRM_DB_DELETE'], $s_delete_db['database']));\n    }\n}\n\n\nif (isset($_POST['confirm_yes'])  ||\n    (isset($_POST['db_delete_doit'])  &&  $s_cust['askdel'] == false  &&  empty($error))) {\n    $fb_error = drop_database($s_delete_db, $s_login);\n    unset($s_confirmations['database']);\n\n    if (empty($fb_error)) {\n        if ($s_login['database'] == $s_delete_db['database']) {\n            $s_login['database'] = '';\n            $s_connected = false;\n            remove_edit_panels();\n            cleanup_session();\n        }\n\n        $s_delete_db['database'] = '';\n    }\n}\n\n\nif (isset($_POST['confirm_no'])) {\n    unset($s_confirmations['database']);\n    $s_delete_db['database'] = '';\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'db_meta', true)) {\n\n\n    $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"metadata\";';} );\n\n    $iframekey_meta = md5(uniqid('meta'));\n    $s_iframejobs[$iframekey_meta] = array('job' => 'metadata',\n                                           'timestamp' => time(), );\n\n\n\n\n    if (isset($_POST['db_meta_save'])) {\n        list($metadata, $binary_error) = isql_get_metadata($s_login['user'], $s_login['password'], $s_login['database'], $s_login['host']);\n\n        if (empty($binary_error)  &&  count($metadata) > 0) {\n            send_export_headers('application/octet-stream', 'meta.sql');\n            print(implode(\"\\n\", $metadata));\n            exit();\n        }\n    }\n}\n\n\n\n\nif (isset($_POST['db_systable_select'])) {\n    if ($s_systable['table'] != $_POST['db_systable']) {\n        $s_systable['order'] = '';\n        $s_systable['dir'] = 'ASC';\n    }\n\n    $s_systable['table'] = $_POST['db_systable'];\n    $s_systable['ffield'] = $_POST['db_sysfield'];\n    $s_systable['fvalue'] = $_POST['db_sysvalue'];\n\n    $s_systable['sysdata'] = (isset($_POST['db_sysdata']) ? true : false);\n}\n\nif (isset($_GET['order'])) {\n    $s_systable['dir'] = ($_GET['order'] == $s_systable['order']  &&  $s_systable['dir'] == 'ASC')\n        ? 'DESC'\n        : 'ASC';\n    $s_systable['order'] = $_GET['order'];\n}\n\n\nif (have_panel_permissions($s_login['user'], 'db_systable', true)) {\n    $js_stack .= js_request_filter_fields();\n\n    if (false  &&  strpos($s_systable['table'], 'MON$') === 0) {\n\n\n        $have_refresh = true;\n\n        $js_stack .= js_jsrs_refresh_systable();\n    } else {\n        $have_refresh = false;\n    }\n\n    if ($s_connected   &&  !empty($s_systable['table'])) {\n        include './inc/system_table.inc.php';\n\n        $systable = get_systable($s_systable);\n    }\n}\n\n\n\n\n$dbfiles = array();\nif (isset($ALLOWED_FILES)  && count($ALLOWED_FILES) > 0) {\n    foreach ($ALLOWED_FILES as $file) {\n        if ((strpos($file, '/') === false  &&  strpos($file, '\\\\') === false)  ||\n            is_file($file)) {\n            $dbfiles[] = $file;\n        }\n    }\n} elseif (isset($ALLOWED_DIRS)  &&  count($ALLOWED_DIRS) > 0) {\n    foreach ($ALLOWED_DIRS as $dir) {\n        if (!@is_readable($dir)) {\n            $warning .= sprintf($WARNINGS['CAN_NOT_ACCESS_DIR'], $dir);\n        } else {\n            $dirhandle = opendir($dir);\n            while ($filename = readdir($dirhandle)) {\n                    $dbfiles[] = $dir.$filename;\n            }\n            closedir($dirhandle);\n        }\n    }\n}\nsort($dbfiles);\n\n\n\n\n$s_page = 'Database';\n$panels = $s_database_panels;\n\nrequire './inc/script_end.inc.php';\n\n\n\n\n\nfunction drop_database($db, $login)\n{\n    $success = '';\n\n\n\n    if ($db['database'] == $login['database']  &&\n        $db['host']  == $login['host']) {\n        $dbh = $GLOBALS['dbhandle'];\n    } else {\n        $db_path = ($db['host'] == '') ? $db['database'] : $db['host'].':'.$db['database'];\n        if (($dbh = fbird_connect($db_path, $db['user'], $db['password'])) == false) {\n            $success = fbird_errmsg();\n        }\n    }\n\n\n    if (is_resource($dbh)  &&\n        fbird_drop_db($dbh) == false) {\n        $success = fbird_errmsg();\n        fbird_close($dbh);\n    }\n\n    return $success;\n}\n\n'firebirdwebadmin/inc/script_start.inc.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/configuration.inc.php';\n\nif (DEBUG) {\n    $start_time = @microtime();\n}\n\nrequire './inc/functions.inc.php';\n\nsession_start();\nset_error_handler('error_handler');\n\nrequire get_language_file('./lang/');\nrequire './inc/session.inc.php';\nrequire './inc/firebird.inc.php';\nrequire './inc/panel_elements.inc.php';\nrequire './inc/javascript.inc.php';\n\nif (DEBUG || DEBUG_HTML) {\n    include './inc/debug_funcs.inc.php';\n}\n\nif (!extension_loaded('interbase')) {\n    die($ERRORS['NO_IBASE_MODULE']);\n}\n\nif (!isset($_SESSION['s_init'])\n    || ($_SESSION['s_cookies'] === 'untested')\n) {\n    initialize_session();\n    fallback_session();\n} else {\n    localize_session_vars();\n}\n\nif (!isset($no_session_referer) || $no_session_referer !== true) {\n\n    $s_referer = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n}\n\nsend_http_headers();\n\n\n$message = '';\n$warning = '';\n$error = '';\n$fb_error = '';\n$php_error = '';\n$debug = array();\n$externcmd = '';\n\n\n\n$js_stack = '';\n\n\n\n$sql = '';\n\n\n\nif ($s_connected == true && !isset($_GET['unconnected'])) {\n    $dbhandle = db_connect();\n\n    if ($dbhandle === false) {\n        $fb_error = fbird_errmsg();\n        $s_connected = false;\n        $s_tables_valid = false;\n        $s_wt['table'] = '';\n    }\n\n    if (empty($s_charsets)) {\n        $s_charsets = get_charsets();\n    }\n}\n\n\nlist($family, $version) = server_info($s_login['server']);\ndefine('SERVER_FAMILY', $family);\ndefine('SERVER_VERSION', $version);\n\nif ($s_binpath != BINPATH) {\n\n\n    if (!is_dir(BINPATH)\n        || (!is_file(BINPATH.'isql') && !is_file(BINPATH.'isql-fb') && !is_file(BINPATH.'isql.exe'))\n    ) {\n        $warning = sprintf($WARNINGS['BAD_ISQLPATH'], BINPATH);\n    }\n\n\n    if (!is_dir(TMPPATH) || !is_writeable(TMPPATH)) {\n        $warning .= sprintf($WARNINGS['BAD_TMPPATH'], TMPPATH);\n    }\n\n    $s_binpath = BINPATH;\n}\n\nif (DEBUG_HTML) {\n    ob_start();\n}\n\n'firebirdwebadmin/inc/configuration.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n\n\ndefine('VERSION', '3.4.1');\n\ndefine('BINPATH', '/usr/sbin/');\n\ndefine('TMPPATH', '/tmp/');\n\n\ndefine('DEFAULT_USER',    'SYSDBA');\ndefine('DEFAULT_DB',      'employee.fdb');\ndefine('DEFAULT_PATH',    '/var/lib/firebird/2.5/data/');\ndefine('DEFAULT_HOST',    'localhost');\ndefine('DEFAULT_ROLE',    '');\ndefine('DEFAULT_CACHE',   75);\ndefine('DEFAULT_CHARSET', 'NONE');\ndefine('DEFAULT_DIALECT', 3);\ndefine('DEFAULT_SERVER',  'FB_2.5');\n\n\ndefine('PROTOCOL', 'http');\n\n\ndefine('SP_LIMIT_NAME', '');\n\n\n\n\n\n\n\n$ALLOWED_DIRS = array();\n\n\n\n\n\n\n\n\n$ALLOWED_FILES = array();\n\ndefine('BACKUP_DIR', '/var/lib/firebird/2.5');\n\ndefine('LANGUAGE', 'english');\n\n\n\n$HIDE_PANELS = array(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                     );\n\n\n\n$SQL_DISABLE = array('CREATE DATABASE',\n                     'CREATE SCHEMA'\n\n\n                     );\n\ndefine('SYSDBA_GET_ALL', true);\n\n\n\ndefine('CONFIRM_DELETE', true);\n\ndefine('SQL_AREA_COLS', 80);\ndefine('SQL_AREA_ROWS', 6);\n\ndefine('IFRAME_HEIGHT', 350);\n\ndefine('SQL_MAXSAVE', 100);\n\n\n\ndefine('SQL_HISTORY_SIZE', 25);\n\ndefine('SHOW_OUTPUT_ROWS', 100);\n\n\ndefine('DATA_MAXWIDTH', 50);\n\ndefine('FKLOOKUP_ENTRIES', 1000);\n\ndefine('MAX_CSV_LINE', 50000);\n\n\ndefine('DEFAULT_ROWS', 25);\n\ndefine('BLOB_WINDOW_WIDTH', 600);\ndefine('BLOB_WINDOW_HEIGHT', 800);\n\ndefine('SESSION_NAME', 'firebirdwebadmin');\n\n\ndefine('TRANS_READ', IBASE_COMMITTED | IBASE_NOWAIT | IBASE_READ);\ndefine('TRANS_WRITE', IBASE_COMMITTED | IBASE_NOWAIT | IBASE_WRITE);\n\ndefine('META_REDIRECT', false);\n\n\ndefine('DEBUG', false);\ndefine('DEBUG_HTML', false);\n\ndefine('DEBUG_COMMANDS', false);\ndefine('DEBUG_FILES', true);\n\n\n\nif ('' != SESSION_NAME) {\n    session_name(SESSION_NAME);\n}\n\nif (DEBUG === true) {\n    error_reporting(E_ALL | E_NOTICE | E_STRICT);\n}\n",
        "gt": [
            "'firebirdwebadmin/inc/configuration.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/database.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_classmap.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'Selective-Tweets/app/TweetQueue.php'",
            "'Selective-Tweets/app/CLIApp.php'",
            "'Selective-Tweets/cli/clean_queue.php'"
        ],
        "content": "'Selective-Tweets/app/TweetQueue.php'\n:<?php\n\n\nclass TweetQueue\n{\n\tconst SOURCE_TRACK = 'track';\n\tconst SOURCE_SEARCH = 'search';\n\n\tprotected $db;\n\tprotected $processGuid;\n\tprotected $initialGetTimestamp;\n\n\n\tpublic function __construct($db)\n\t{\n\t\t$this->db = $db;\n\t\t$this->processGuid = getmypid();\n\t}\n\n\n\tpublic function enqueueTweet($tweet_id, $created_at, $user, $text, $entities, $source)\n\t{\n\t\treturn $this->db->exec('INSERT INTO tweet_queue(tweet_id, created_at, user, text, entities, from_' . ($source == self::SOURCE_TRACK ? 'track' : 'search') . ') values (' . $this->db->quote($tweet_id) . \",\" . $this->db->quote($created_at) . \",\" . $this->db->quote($user) . \",\" . $this->db->quote($text) . \",\" . $this->db->quote($entities) . \", 1) ON DUPLICATE KEY UPDATE from_\" . ($source == self::SOURCE_TRACK ? 'track' : 'search') . \" = 1\");\n\t}\n\n\n\tpublic function getTweets($count = 100)\n\t{\n\t\tif (!$this->initialGetTimestamp) {\n\t\t\t$this->initialGetTimestamp = time();\n\n\t\t\t$affectedRows = $this->db->exec('UPDATE tweet_queue SET processed_guid = 0 WHERE processed_guid > 0 and processed < ' . $this->db->quote($this->initialGetTimestamp - 5*60));\n\t\t\tif ($affectedRows) {\n\t\t\t\ttrigger_error('reset processed_guid for ' . $affectedRows . ' rows');\n\t\t\t}\n\t\t} else {\n\n\t\t\t$this->db->exec('UPDATE tweet_queue SET processed_guid = 0 WHERE processed_guid = ' . $this->db->quote($this->processGuid));\n\t\t}\n\n\t\t$affectedRows = $this->db->exec('UPDATE tweet_queue SET processed_guid = ' . $this->db->quote($this->processGuid) . ', processed = ' . $this->db->quote($this->initialGetTimestamp) . ' WHERE processed_guid = 0 AND processed < ' . $this->db->quote($this->initialGetTimestamp) . ' AND sent = 0 ORDER BY id asc LIMIT ' . $count);\n\t\tif ($affectedRows) {\n\t\t\treturn $this->db->query('SELECT * FROM tweet_queue WHERE processed_guid = ' . $this->db->quote($this->processGuid));\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\n\tpublic function clean()\n\t{\n\t\t$result = $this->db->query('select id from tweet_queue where created_at < date_sub(now(), interval 1 hour) order by sent = 0 desc, id desc limit 1');\n\t\tif ($result && ($row = $result->fetch()) && (is_array($row))) {\n\t\t\t$last_id = $row['id'];\n\t\t\tif ($this->db->exec('insert ignore into tweet_queue2 select * from tweet_queue where id < ' . $last_id) || true) {\n\t\t\t\treturn $this->db->exec('delete from tweet_queue where id < ' . $last_id);\n\t\t\t}\n\t\t}\n\t}\n}\n\n\n'Selective-Tweets/app/CLIApp.php'\n:<?php\n\n$app_dir = dirname(__FILE__) . '/';\nrequire_once $app_dir . 'BaseApp.php';\nrequire_once $app_dir . 'TweetQueue.php';\nrequire_once $app_dir . 'FilterTrack.php';\nrequire_once $app_dir . '../lib/Process.php';\n\nuse Facebook\\FacebookSession;\nuse Facebook\\FacebookRequest;\n\n\nclass SelectiveTweets_CLIApp extends SelectiveTweets_BaseApp\n{\n\n\tprotected function init()\n\t{\n\n\t\t$this->requireCLI();\n\n\t\tparent::init();\n\n\t\t$this->fb = FacebookSession::newAppSession();\n\t\ttry {\n\t\t\t$this->fb->validate();\n\t\t} catch (FacebookRequestException $ex) {\n\n\t\t\terror_log($ex->getMessage());\n\t\t} catch (\\Exception $ex) {\n\n\t\t\terror_log($ex->getMessage());\n\t\t}\n\t}\n\n\n\tprotected function requireCLI()\n\t{\n\t\tif (php_sapi_name() != 'cli') {\n\t\t\tdie(\"I don't think so..\");\n\t\t}\n\t}\n\n\n\tpublic function trackStream()\n\t{\n\t\t$this->log('starting tracker', 'tracker');\n\t\tif (defined('LOG_DIR')) {\n\t\t\tini_set('error_log', LOG_DIR . 'tracker.log');\n\t\t}\n\t\t$this->db->exec('set wait_timeout = 43200');\n\t\t$tweetQueue = new TweetQueue($this->db);\n\t\t$sc = new FilterTrackConsumer(TWITTER_OAUTH_TOKEN, TWITTER_OAUTH_SECRET, Phirehose::METHOD_FILTER);\n\t\t$sc->setTweetQueue($tweetQueue);\n\t\t$sc->setTrack(array('\n\t\t$sc->consume();\n\n\t\t$this->log('exiting tracker', 'tracker');\n\t}\n\n\n\tpublic function ensureTrackerRunning()\n\t{\n\t\t$tracker_script = dirname(dirname(__FILE__)) . '/cli/trackstream.php';\n\t\tif (Process::ensureRunning('php ' . $tracker_script, 'selectivetweets_streamtracker')) {\n\t\t\t$this->log('restarted tracker', 'tracker');\n\t\t} elseif($this->detectTrackerCrash() === self::CRASHED) {\n\t\t\tif (Process::ensureRunning('php ' . $tracker_script, 'selectivetweets_streamtracker', true)) {\n\t\t\t\t$this->log('restarted crashed tracker', 'tracker');\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic function restartTracker()\n\t{\n\t\t$tracker_script = dirname(dirname(__FILE__)) . '/cli/trackstream.php';\n\t\tif (Process::ensureRunning('php ' . $tracker_script, 'selectivetweets_streamtracker', true)) {\n\t\t\t$this->log('restarted tracker', 'tracker');\n\t\t}\n\t}\n\n\n\tpublic function cleanQueue()\n\t{\n\t\t$this->log('clearing queue', 'queue');\n\t\t$tweetQueue = new TweetQueue($this->db);\n\t\t$affected = $tweetQueue->clean();\n\t\t$this->log(\"cleaned $affected tweets from queue\", 'queue');\n\t}\n\n\n\tpublic function processQueue()\n\t{\n\t\t$total_updates = 0;\n\t\t$this->log('processing queue', 'queue');\n\t\t$this->db->exec('set wait_timeout = 43200');\n\t\t$tweetQueue = new TweetQueue($this->db);\n\t\twhile ($tweets = $tweetQueue->getTweets()) {\n\t\t\t$this->log('processing tweets', 'queue');\n\t\t\t$total_updates += $this->processTweets($tweets);\n\t\t}\n\t\t$this->log($total_updates . ' tweets processed', 'queue');\n\t\t$this->log('exiting', 'queue');\n\t}\n\n\n\tprotected function processTweets($tweets)\n\t{\n\t\t$this->log('getting statii', 'queue');\n\n\t\t$updates = array_values($this->processStatii($tweets));\n\t\t$total_updates = count($updates);\n\t\t$this->log('updates size: ' . count($updates), 'queue');\n\t\treset($updates);\n\t\twhile (current($updates)) {\n\t\t\t$i = 0;\n\t\t\t$results = array();\n\t\t\t$batch = array();\n\t\t\t$this_batch_updates = array();\n\t\t\twhile ($i < 25 && current($updates)) {\n\t\t\t\t$i++;\n\t\t\t\tlist($msg_final, $status, $row) = current($updates);\n\t\t\t\t$fbuid = $row['fbuid'];\n\t\t\t\t$user = $status['user'];\n\t\t\t\t$body = array(\n\t\t\t\t\t'message' => urlencode($msg_final),\n\t\t\t\t);\n\t\t\t\tif (!empty($status['link'])) {\n\t\t\t\t\t$body['link'] = urlencode($status['link']);\n\t\t\t\t}\n\t\t\t\tif ($row['fb_oauth_access_token']) {\n\t\t\t\t\t$body['access_token'] = urlencode($row['fb_oauth_access_token']);\n\t\t\t\t}\n\t\t\t\tif ($row['show_twitter_link'] && !$status['clear']) {\n\t\t\t\t\t$body['actions'] = json_encode(array(\n\t\t\t\t\t\t'name' => urlencode('follow @' . $user),\n\t\t\t\t\t\t'link' => urlencode('http:\n\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t\t$body = http_build_query($body);\n\t\t\t\t$body = urldecode($body);\n\t\t\t\t$request = array(\n\t\t\t\t\t'method' => 'POST',\n\t\t\t\t\t'body' => $body,\n\t\t\t\t);\n\t\t\t\tif ($row['fb_oauth_access_token']) {\n\t\t\t\t\t$request['relative_url'] = '/me/feed';\n\t\t\t\t} else {\n\t\t\t\t\t$request['relative_url'] = '/' . $fbuid . '/feed';\n\t\t\t\t}\n\t\t\t\t$batch[] = $request;\n\t\t\t\t$this_batch_updates[] = current($updates);\n\t\t\t\tnext($updates);\n\t\t\t}\n\t\t\t$this->log('BATCH', 'queue');\n\t\t\t$this->log('batch: ' . count($batch), 'queue');\n\n\t\t\ttry {\n\t\t\t\t$response = (new FacebookRequest($this->fb, 'POST', '?batch='.urlencode(json_encode($batch))))->execute();\n\t\t\t\t$results = $response->getGraphObject()->asArray();\n\n\n\t\t\t\t$this->log('results: ' . count($results), 'queue');\n\t\t\t\tforeach ($results as $key => $result) {\n\t\t\t\t\tlist($msg, $status, $row) = $this_batch_updates[$key];\n\t\t\t\t\t$fbuid = $row['fbuid'];\n\t\t\t\t\t$user = $status['user'];\n\t\t\t\t\t$id = $status['id'];\n\t\t\t\t\t$timestamp = $this->getStatusTimestamp($status);\n\t\t\t\t\t$now = date('D, j M H:i:s');\n\t\t\t\t\tif (!empty($result->code) && $result->code == 200) {\n\n\t\t\t\t\t\t$this->db->exec(\"update tweet_queue set sent = 1 where id = \" . $this->db->quote($id));\n\t\t\t\t\t\t$this->log(\"update tweet_queue set sent = 1 where id = \" . $this->db->quote($id), 'queue');\n\t\t\t\t\t\t$this->db->exec(\"update selective_status_users set updated = \" . $this->db->quote($timestamp) . \", exception_count = 0 where twitterid = \" . $this->db->quote($user) . \" and fbuid = \" . $this->db->quote($fbuid) . \" limit 1;\");\n\t\t\t\t\t\t$this->log(\"update selective_status_users set updated = \" . $this->db->quote($timestamp) . \", exception_count = 0 where twitterid = \" . $this->db->quote($user) . \" and fbuid = \" . $this->db->quote($fbuid) . \" limit 1;\", 'queue');\n\t\t\t\t\t\t$this->log(': ' . $timestamp . ' ' . $user . ' - ' . $fbuid . ': ' . $msg, 'queue');\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$this->db->exec(\"update tweet_queue set sent = 3 where id = \" . $this->db->quote($id));\n\t\t\t\t\t\t$this->log(\"update tweet_queue set sent = 3 where id = \" . $this->db->quote($id), 'queue');\n\t\t\t\t\t\tif ($timestamp > max($row['last_update_attempt'], $row['updated'])) {\n\t\t\t\t\t\t\t$this->db->exec(\"UPDATE selective_status_users SET last_update_attempt = \" . $this->db->quote($timestamp) . \", exception_count = 0 WHERE twitterid = \" . $this->db->quote($user) . \" AND fbuid = \" . $this->db->quote($fbuid) . \" LIMIT 1\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$this->log(': ' . $timestamp .  ' ERROR ' . $result->code . ' - ' . $result->body . ' / ' . $user . ' - ' . $fbuid . ': ' . $msg, 'queue');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$this->log('batch done', 'queue');\n\t\t\t} catch (Exception $e) {\n\t\t\t\ttrigger_error('EXCEPTION ' . $e->getCode() . ': ' . $e->getMessage());\n\n\n\n\t\t\t\tforeach ($results as $key => $result) {\n\t\t\t\t\tlist($msg, $status, $row) = $this_batch_updates[$key];\n\t\t\t\t\t$fbuid = $row['fbuid'];\n\t\t\t\t\t$user = $status['user'];\n\t\t\t\t\t$id = $status['id'];\n\t\t\t\t\t$timestamp = $this->getStatusTimestamp($status);\n\t\t\t\t\t$now = date('D, j M H:i:s');\n\t\t\t\t\t$this->db->exec(\"UPDATE selective_status_users SET exception_count = exception_count + 1, last_update_attempt = \" . $this->db->quote($timestamp) . \" WHERE twitterid = \" . $this->db->quote($user) . \" AND fbuid = \" . $this->db->quote($fbuid) . \" LIMIT 1\");\n\t\t\t\t\t$this->db->exec(\"UPDATE tweet_queue SET exception_count = exception_count + 1 WHERE id = \" . $this->db->quote($id));\n\t\t\t\t\t$this->log(': ' . $timestamp . ' ERROR - incrementing exception count: ' . $user . ' - ' . $fbuid . ': ' . $msg, 'queue');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $total_updates;\n\t}\n\n\n\tpublic function processStatii($result)\n\t{\n\t\t$long_time_ago = time() - 12*60*60;\n\t\t$updates = array();\n\t\twhile ($status = $result->fetch()) {\n\n\t\t\t$this->processStatus($status);\n\t\t\t$timestamp = $this->getStatusTimestamp($status);\n\t\t\t$status['clear'] = !(bool) trim($status['msg']);\n\t\t\t$atLeastOneUpdate = false;\n\t\t\tif ($status['user']) {\n\t\t\t\t$rs = $this->db->query(\"SELECT * FROM selective_status_users WHERE twitterid = \" . $this->db->quote($status['user']) . \" limit 50\");\n\t\t\t\t$i = 0;\n\t\t\t\twhile ($row = $rs->fetch()) {\n\t\t\t\t\t$i++;\n\t\t\t\t\tif ($i == 45) {\n\t\t\t\t\t\ttrigger_error('warning: too many user matches found for twitter user: ' . $status['user']);\n\t\t\t\t\t}\n\t\t\t\t\tif (!$row['fbuid'] || !$row['twitterid']) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif ($row['updated'] >= $timestamp) {\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} elseif ( false && ($status['exception_count'] > 2) ) {\n\n\t\t\t\t\t\t$this->log('TOO MANY EXCEPTIONS (' . $status['exception_count'] . '): skipping.. ' . $status['user'] . ' ' . $status['created_at'] . ', ' . $status['text'], true, 'too_many_exceptions', 'queue');\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} elseif ($timestamp < $long_time_ago) {\n\n\t\t\t\t\t\t$this->log('MANY HOURS OLD(!) skipping.. ' . $status['user'] . ' ' . $status['created_at'] . ', ' . $status['text'], 'queue');\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif ($status['tag_anywhere'] && !$row['allow_tag_anywhere']) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t$msg = $status['msg'];\n\n\n\t\t\t\t\tif ($row['replace_names']) {\n\t\t\t\t\t\tif (!empty($status['entities']['user_mentions']) && is_array($status['entities']['user_mentions'])) {\n\t\t\t\t\t\t\tforeach ($status['entities']['user_mentions'] as $mention) {\n\t\t\t\t\t\t\t\tif (!empty($mention['name']) && !empty($mention['screen_name'])) {\n\n\t\t\t\t\t\t\t\t\t$msg = str_ireplace('@' . $mention['screen_name'], ' ' . str_replace('@', '@%^&', $mention['name']) . ' (@%^&' . $mention['screen_name'] . ')', $msg);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$msg = str_replace('@%^&', '@', $msg);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif ($row['prefix']) {\n\t\t\t\t\t\t$msg = trim($row['prefix']) . ' ' . $msg;\n\t\t\t\t\t}\n\n\t\t\t\t\t$updates[$status['id'] . '-' . $row['fbuid']] = array($msg, $status, $row);\n\t\t\t\t\t$atLeastOneUpdate = true;\n\t\t\t\t\t$this->log('.', 'queue', false);\n\t\t\t\t}\n\t\t\t\tif (!$atLeastOneUpdate) {\n\n\t\t\t\t\t$this->db->exec(\"UPDATE tweet_queue SET sent = 5 WHERE id = \" . $this->db->quote($status['id']));\n\t\t\t\t}\n\t\t\t\t$this->log(':', 'queue', false);\n\t\t\t} else {\n\n\t\t\t\t$this->db->exec(\"UPDATE tweet_queue SET sent = 4 WHERE id = \" . $this->db->quote($status['id']));\n\t\t\t}\n\t\t}\n\t\t$this->log(\"\\n\", 'queue', false);\n\t\treturn $updates;\n\t}\n\n\n\tprotected function processStatus(&$status)\n\t{\n\t\t$status['entities'] = json_decode($status['entities'], true);\n\t\tif (!is_array($status['entities'])) {\n\n\t\t\t$status['entities'] = array();\n\t\t}\n\t\t$msg = $status['text'];\n\t\t$msg = trim(html_entity_decode($msg));\n\t\t$msg = trim(preg_replace('/\\s\n\t\t$msg = trim(preg_replace('/\n\t\tpreg_match('/(.*)(\\s((\n\t\tif (!empty($matches[1]) && !empty($matches[2])) {\n\n\t\t\t$matches[2] = preg_replace('/\\s/', ' ', $matches[2]);\n\n\t\t\t$matches[2] = str_ireplace(array('\n\n\t\t\t$msg = trim($matches[1] . $matches[2]);\n\t\t}\n\t\t$tag_anywhere = false;\n\t\tif (strtolower(substr($msg, -3)) != '\n\t\t\tif (empty($matches[2]) || stripos($matches[2], '\n\t\t\t\t$tag_anywhere = true;\n\t\t\t}\n\t\t\t$msg = trim(str_ireplace('\n\t\t} else {\n\t\t\t$msg = trim(substr($msg, 0, strlen($msg) - 3));\n\t\t}\n\n\t\t$link = '';\n\t\tif (!empty($status['entities']['urls'][0]['expanded_url'])) {\n\t\t\t$link = $status['entities']['urls'][0]['expanded_url'];\n\t\t} elseif (!empty($status['entities']['urls'][0]['url'])) {\n\t\t\t$link = $status['entities']['urls'][0]['url'];\n\t\t}\n\n\t\tif (!empty($status['entities']['urls'])) {\n\t\t\tforeach ($status['entities']['urls'] as $url) {\n\t\t\t\tif (!empty($url['expanded_url']) && !empty($url['url'])) {\n\t\t\t\t\t$msg = str_replace($url['url'], $url['expanded_url'], $msg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$status['msg'] = $msg;\n\t\t$status['tag_anywhere'] = $tag_anywhere;\n\t\t$status['link'] = $link;\n\t}\n\n\n\tprotected function getStatusTimestamp($status)\n\t{\n\t\t$datetime = date_create($status['created_at']);\n\t\treturn $datetime->format('U');\n\t}\n}\n\n\n'Selective-Tweets/cli/clean_queue.php'\n:<?php\n\nrequire dirname(dirname(__FILE__)) . '/app/CLIApp.php';\n$controller = SelectiveTweets_CLIApp::factory();\n$controller->cleanQueue();\n\n",
        "gt": [
            "'Selective-Tweets/app/TweetQueue.php'",
            "'Selective-Tweets/app/CLIApp.php'",
            "'Selective-Tweets/cli/clean_queue.php'"
        ]
    },
    {
        "files": [
            "'ZnoteAAC/engine/function/token.php'",
            "'ZnoteAAC/admin_helpdesk.php'",
            "'ZnoteAAC/engine/init.php'"
        ],
        "content": "'ZnoteAAC/engine/function/token.php'\n:<?php\n\n\tclass Token {\n\t\tpublic static function generate() {\n\t\t\t$token = sha1(uniqid(time(), true));\n\n\t\t\t$_SESSION['token'] = $token;\n\t\t}\n\n\t\tpublic static function create() {\n\t\t\techo '<input type=\"hidden\" name=\"token\" value=\"' . self::get() . '\" />';\n\t\t}\n\n\n\n\t\tpublic static function get() {\n\t\t\treturn isset($_SESSION['token']) ? $_SESSION['token'] : false;\n\t\t}\n\n\n\n\t\tpublic static function isValid($post) {\n\t\t\tif (config('use_token')) {\n\n\t\t\t\tif (!self::get()) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\n\t\t\t\tif ($post == $_SESSION['old_token'] || $post == $_SESSION['token']) {\n\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\n\n\t\tprotected static function _reset() {\n\t\t\tunset($_SESSION['token']);\n\t\t}\n\n\n\n\t\tpublic static function debug($post) {\n\t\t\techo '<pre>', var_dump(array(\n\t\t\t\t'post' => $post,\n\t\t\t\t'old_token' => $_SESSION['old_token'],\n\t\t\t\t'token' => self::get()\n\t\t\t)), '</pre>';\n\t\t}\n\t}\n?>\n\n'ZnoteAAC/admin_helpdesk.php'\n:<?php require_once 'engine/init.php'; include 'layout/overall/header.php';\nprotect_page();\nadmin_only($user_data);\n\n\n$view = (isset($_GET['view']) && (int)$_GET['view'] > 0) ? (int)$_GET['view'] : false;\nif ($view !== false){\n\tif (!empty($_POST['reply_text'])) {\n\t\tsanitize($_POST['reply_text']);\n\n\n\t\t$query = array(\n\t\t\t'tid'   =>\t$view,\n\t\t\t'username'=>\tgetValue($_POST['username']),\n\t\t\t'message' =>\tgetValue($_POST['reply_text']),\n\t\t\t'created' =>\ttime(),\n\t\t);\n\t\t$fields = '`'. implode('`, `', array_keys($query)) .'`';\n\t\t$data = '\\''. implode('\\', \\'', $query) .'\\'';\n\n\t\tmysql_insert(\"INSERT INTO `znote_tickets_replies` ($fields) VALUES ($data)\");\n\t\tmysql_update(\"UPDATE `znote_tickets` SET `status`='Staff-Reply' WHERE `id`='$view' LIMIT 1;\");\n\n\t} else if (!empty($_POST['admin_ticket_close'])) {\n\t\t$ticketId = (int) $_POST['admin_ticket_id'];\n\t\tmysql_update(\"UPDATE `znote_tickets` SET `status` = 'CLOSED' WHERE `id` ='$ticketId' LIMIT 1;\");\n\n\t} else if (!empty($_POST['admin_ticket_open'])) {\n\t\t$ticketId = (int) $_POST['admin_ticket_id'];\n\t\tmysql_update(\"UPDATE `znote_tickets` SET `status` = 'Open' WHERE `id` ='$ticketId' LIMIT 1;\");\n\n\t} else if (!empty($_POST['admin_ticket_delete'])) {\n\t\t$ticketId = (int) $_POST['admin_ticket_id'];\n\t\tmysql_delete(\"DELETE FROM `znote_tickets` WHERE `id`='$ticketId' LIMIT 1;\");\n\t\theader(\"Location: admin_helpdesk.php\");\n\t}\n\n\t$ticketData = mysql_select_single(\"SELECT * FROM znote_tickets WHERE id='$view' LIMIT 1;\");\n\t?>\n\t<h1>View Ticket\n\t<table class=\"znoteTable ThreadTable table table-striped\">\n\t\t<tr class=\"yellow\">\n\t\t\t<th>\n\t\t\t\t<?php\n\t\t\t\t\techo getClock($ticketData['creation'], true);\n\t\t\t\t?>\n\t\t\t\t - Created by:\n\t\t\t\t <?php\n\t\t\t\t \techo $ticketData['username'];\n\t\t\t\t ?>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<p><?php echo nl2br($ticketData['message']); ?></p>\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n\t<?php\n\t$replies = mysql_select_multi(\"SELECT * FROM znote_tickets_replies WHERE tid='$view' ORDER BY `created`;\");\n\tif ($replies !== false) {\n\t\tforeach($replies as $reply) {\n\t\t\t?>\n\t\t\t<table class=\"znoteTable ThreadTable table table-striped\">\n\t\t\t\t<tr class=\"yellow\">\n\t\t\t\t\t<th>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\techo getClock($reply['created'], true);\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t - Posted by:\n\t\t\t\t\t\t <?php\n\t\t\t\t\t\t \techo $reply['username'];\n\t\t\t\t\t\t ?>\n\t\t\t\t\t</th>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<p><?php echo nl2br($reply['message']); ?></p>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t<?php\n\t\t}\n\t}\n\t?>\n\n\t<!-- Open/Close Ticket -->\n\t<table class=\"znoteTable ThreadTable table table-striped\">\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<form action=\"\" method=\"post\" align=\"center\">\n\t\t\t\t\t<input type=\"hidden\" name=\"admin_ticket_id\" value=\"<?php echo $ticketData['id']; ?>\">\n\t\t\t\t<?php if ($ticketData['status'] !== 'CLOSED') { ?>\n\t\t\t\t\t<input type=\"submit\" name=\"admin_ticket_close\" value=\"Close Ticket\" class=\"btn btn-warning\">\n\t\t\t\t<?php } else { ?>\n\t\t\t\t\t<input type=\"submit\" name=\"admin_ticket_open\" value=\"Open Ticket\" class=\"btn btn-success\">\n\t\t\t\t<?php } ?>\n\t\t\t\t</form>\n\t\t\t</td>\n\t\t\t<td>\n\t\t\t\t<form action=\"\" method=\"post\" align=\"center\" onClick=\"return confirm('Are you sure you want to delete this ticket?');\">\n\t\t\t\t\t<input type=\"hidden\" name=\"admin_ticket_id\" value=\"<?php echo $ticketData['id']; ?>\">\n\t\t\t\t\t<input type=\"submit\" name=\"admin_ticket_delete\" value=\"Delete Ticket\" class=\"btn btn-danger\">\n\t\t\t\t</form>\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n\n\t<?php if ($ticketData['status'] !== 'CLOSED') { ?>\n\t\t<hr class=\"bighr\">\n\t\t<form action=\"\" method=\"post\">\n\t\t\t<input type=\"hidden\" name=\"username\" value=\"ADMIN\"><br>\n\t\t\t<textarea class=\"forumReply\" name=\"reply_text\" style=\"width: 610px; height: 150px\"></textarea><br>\n\t\t\t<input name=\"\" type=\"submit\" value=\"Post Reply\" class=\"btn btn-primary\">\n\t\t</form>\n\t<?php } ?>\n\t<?php\n} else {\n\t?>\n\t<h1>Latest Tickets</h1>\n\t<?php\n\t$tickets = mysql_select_multi(\"SELECT id,subject,creation,status FROM znote_tickets ORDER BY creation DESC\");\n\tif ($tickets !== false) {\n\t\t?>\n\t\t<table>\n\t\t\t<tr class=\"yellow\">\n\t\t\t\t<td>ID:</td>\n\t\t\t\t<td>Subject:</td>\n\t\t\t\t<td>Creation:</td>\n\t\t\t\t<td>Status:</td>\n\t\t\t</tr>\n\t\t\t\t<?php\n\t\t\t\tforeach ($tickets as $ticket) {\n\t\t\t\t\techo '<tr class=\"special\">';\n\t\t\t\t\t\techo '<td>'. $ticket['id'] .'</td>';\n\t\t\t\t\t\techo '<td><a href=\"admin_helpdesk.php?view='. $ticket['id'] .'\">'. $ticket['subject'] .'</a></td>';\n\t\t\t\t\t\techo '<td>'. getClock($ticket['creation'], true) .'</td>';\n\t\t\t\t\t\techo '<td>'. $ticket['status'] .'</td>';\n\t\t\t\t\techo '</tr>';\n\t\t\t\t}\n\t\t\t\t?>\n\t\t</table>\n\t\t<?php\n\t} else echo 'No helpdesk tickets has been submitted.';\n}\ninclude 'layout/overall/footer.php';\n?>\n'ZnoteAAC/engine/init.php'\n:<?php if (version_compare(phpversion(), '5.6', '<')) die('PHP version 5.6 or higher is required.');\n\n$l_time = microtime(true);\n$l_start = $l_time;\n\nfunction elapsedTime($l_start = false, $l_time = false) {\n\tif ($l_start === false) global $l_start;\n\tif ($l_time === false) global $l_time;\n\n\t$l_time = explode(' ', microtime());\n\t$l_finish = $l_time[1] + $l_time[0];\n\treturn round(($l_finish - $l_start), 4);\n}\n\n$time = time();\n$version = '1.6';\n\n$aacQueries = 0;\n$accQueriesData = array();\n\nsession_start();\nob_start();\nrequire_once 'config.php';\n$sessionPrefix = $config['session_prefix'];\nif ($config['paypal']['enabled'] || $config['use_captcha']) {\n\t$curlcheck = extension_loaded('curl');\n\tif (!$curlcheck) die(\"php cURL is not enabled. It is required to for paypal or captcha services.<br>1. Find your php.ini file.<br>2. Uncomment extension=php_curl<br>Restart web server.<br><br><b>If you don't want this then disable paypal & use_captcha in config.php.</b>\");\n}\nif ($config['use_captcha'] && !extension_loaded('openssl')) {\n\tdie(\"php openSSL is not enabled. It is required to for captcha services.<br>1. Find your php.ini file.<br>2. Uncomment extension=php_openssl<br>Restart web server.<br><br><b>If you don't want this then disable use_captcha in config.php.</b>\");\n}\n\n\n\nif (!isset($config['TFSVersion'])) $config['TFSVersion'] = &$config['ServerEngine'];\nif (!isset($config['ServerEngine'])) $config['ServerEngine'] = &$config['TFSVersion'];\n\nrequire_once 'database/connect.php';\nrequire_once 'function/general.php';\nrequire_once 'function/users.php';\nrequire_once 'function/cache.php';\nrequire_once 'function/mail.php';\nrequire_once 'function/token.php';\nrequire_once 'function/itemparser/itemlistparser.php';\n\nif (isset($_SESSION['token'])) {\n\t$_SESSION['old_token'] = $_SESSION['token'];\n}\nToken::generate();\n\n$tfs_10_hasPremDays = true;\n\nif (user_logged_in() === true) {\n\t$session_user_id = getSession('user_id');\n\tif ($config['ServerEngine'] !== 'OTHIRE') {\n\t\tif ($config['ServerEngine'] == 'TFS_10') {\n\t\t\t$hasPremDays = mysql_select_single(\"SHOW COLUMNS from `accounts` WHERE `Field` = 'premdays'\");\n\t\t\tif ($hasPremDays === false) {\n\t\t\t\t$tfs_10_hasPremDays = false;\n\t\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premium_ends_at');\n\t\t\t\t$user_data['premdays'] = ($user_data['premium_ends_at'] - time() > 0) ? floor(($user_data['premium_ends_at'] - time()) / 86400) : 0;\n\t\t\t} else {\n\t\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premdays');\n\t\t\t}\n\t\t} else {\n\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premdays');\n\t\t}\n\t} else\n\t\t$user_data = user_data($session_user_id, 'id', 'password', 'email', 'premend');\n\t$user_znote_data = user_znote_account_data($session_user_id, 'ip', 'created', 'points', 'cooldown', 'flag' ,'active_email');\n}\n$errors = array();\n\nif ($config['log_ip']) {\n\t$visitor_config = $config['ip_security'];\n\n\t$flush = $config['flush_ip_logs'];\n\tif ($flush != false) {\n\t\t$timef = $time - $flush;\n\t\tif (getCache() < $timef) {\n\t\t\t$timef = $time - $visitor_config['time_period'];\n\t\t\tmysql_delete(\"DELETE FROM znote_visitors_details WHERE time <= '$timef'\");\n\t\t\tsetCache($time);\n\t\t}\n\t}\n\n\t$visitor_data = znote_visitors_get_data();\n\n\tznote_visitor_set_data($visitor_data);\n\tznote_visitor_insert_detailed_data(0);\n\n\t$visitor_detailed = znote_visitors_get_detailed_data($visitor_config['time_period']);\n\n\n\t$v_activity = 0;\n\t$v_register = 0;\n\t$v_highscore = 0;\n\t$v_c_char = 0;\n\t$v_s_char = 0;\n\t$v_form = 0;\n\tforeach ((array)$visitor_detailed as $v_d) {\n\n\t\tif ($v_d['ip'] == getIPLong()) {\n\n\t\t\tswitch ($v_d['type']) {\n\t\t\t\tcase 0:\n\t\t\t\t\t$v_activity++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\t$v_register++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\t$v_c_char++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\t$v_highscore++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 4:\n\t\t\t\t\t$v_s_char++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 5:\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\t}\n\n\n\tif ($v_activity > $visitor_config['max_activity']) die(\"Chill down. Your web activity is too big. max_activity\");\n\tif ($v_register > $visitor_config['max_account']) die(\"Chill down. You can't create multiple accounts that fast. max_account\");\n\tif ($v_c_char > $visitor_config['max_character']) die(\"Chill down. Your web activity is too big. max_character\");\n\tif ($v_form > $visitor_config['max_post']) die(\"Chill down. Your web activity is too big. max_post\");\n\n\n\n}\n\n\n$filename = explode('/', $_SERVER['SCRIPT_NAME']);\n$filename = $filename[count($filename) - 1];\n$page_filename = str_replace('.php', '', $filename);\nif ($config['allowSubPages']) {\n\trequire_once 'layout/sub.php';\n\tif (isset($subpages) && !empty($subpages)) {\n\t\tforeach ($subpages as $page) {\n\t\t\tif ($page['override'] && $page['file'] === $filename) {\n\t\t\t\trequire_once 'layout/overall/header.php';\n\t\t\t\trequire_once 'layout/sub/'.$page['file'];\n\t\t\t\trequire_once 'layout/overall/footer.php';\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t?>\n\t\t<div style=\"background-color: white; padding: 20px; width: 100%; float:left;\">\n\t\t\t<h2 style=\"color: black;\">Old layout!</h2>\n\t\t\t<p style=\"color: black;\">The layout is running an outdated sub system which is not compatible with this version of Znote AAC.</p>\n\t\t\t<p style=\"color: black;\">The file /layout/sub.php is outdated.\n\t\t\t<br>Please update it to look like <a style=\"color: orange;\" target=\"_BLANK\" href=\"https:\n\t\t\t</p>\n\t\t</div>\n\t\t<?php\n\t}\n}\n?>\n",
        "gt": [
            "'ZnoteAAC/engine/function/token.php'",
            "'ZnoteAAC/engine/init.php'",
            "'ZnoteAAC/admin_helpdesk.php'"
        ]
    },
    {
        "files": [
            "'Pandra/lib/thrift/protocol/TBinaryProtocol.php'",
            "'Pandra/lib/loader.php'",
            "'Pandra/tests/lib/PandraValidatorTest.php'",
            "'Pandra/config.php'"
        ],
        "content": "'Pandra/lib/thrift/protocol/TBinaryProtocol.php'\n:<?php\n\n\ninclude_once $GLOBALS['THRIFT_ROOT'].'/transport/TBufferedTransport.php';\n\n\nclass TBinaryProtocol extends TProtocol {\n\n  const VERSION_MASK = 0xffff0000;\n  const VERSION_1 = 0x80010000;\n\n  protected $strictRead_ = false;\n  protected $strictWrite_ = true;\n\n  public function __construct($trans, $strictRead=false, $strictWrite=true) {\n    parent::__construct($trans);\n    $this->strictRead_ = $strictRead;\n    $this->strictWrite_ = $strictWrite;\n  }\n\n  public function writeMessageBegin($name, $type, $seqid) {\n    if ($this->strictWrite_) {\n      $version = self::VERSION_1 | $type;\n      return\n        $this->writeI32($version) +\n        $this->writeString($name) +\n        $this->writeI32($seqid);\n    } else {\n      return\n        $this->writeString($name) +\n        $this->writeByte($type) +\n        $this->writeI32($seqid);\n    }\n  }\n\n  public function writeMessageEnd() {\n    return 0;\n  }\n\n  public function writeStructBegin($name) {\n    return 0;\n  }\n\n  public function writeStructEnd() {\n    return 0;\n  }\n\n  public function writeFieldBegin($fieldName, $fieldType, $fieldId) {\n    return\n      $this->writeByte($fieldType) +\n      $this->writeI16($fieldId);\n  }\n\n  public function writeFieldEnd() {\n    return 0;\n  }\n\n  public function writeFieldStop() {\n    return\n      $this->writeByte(TType::STOP);\n  }\n\n  public function writeMapBegin($keyType, $valType, $size) {\n    return\n      $this->writeByte($keyType) +\n      $this->writeByte($valType) +\n      $this->writeI32($size);\n  }\n\n  public function writeMapEnd() {\n    return 0;\n  }\n\n  public function writeListBegin($elemType, $size) {\n    return\n      $this->writeByte($elemType) +\n      $this->writeI32($size);\n  }\n\n  public function writeListEnd() {\n    return 0;\n  }\n\n  public function writeSetBegin($elemType, $size) {\n    return\n      $this->writeByte($elemType) +\n      $this->writeI32($size);\n  }\n\n  public function writeSetEnd() {\n    return 0;\n  }\n\n  public function writeBool($value) {\n    $data = pack('c', $value ? 1 : 0);\n    $this->trans_->write($data, 1);\n    return 1;\n  }\n\n  public function writeByte($value) {\n    $data = pack('c', $value);\n    $this->trans_->write($data, 1);\n    return 1;\n  }\n\n  public function writeI16($value) {\n    $data = pack('n', $value);\n    $this->trans_->write($data, 2);\n    return 2;\n  }\n\n  public function writeI32($value) {\n    $data = pack('N', $value);\n    $this->trans_->write($data, 4);\n    return 4;\n  }\n\n  public function writeI64($value) {\n\n\n\n    if (PHP_INT_SIZE == 4) {\n      $neg = $value < 0;\n\n      if ($neg) {\n        $value *= -1;\n      }\n\n      $hi = (int)($value / 4294967296);\n      $lo = (int)$value;\n\n      if ($neg) {\n        $hi = ~$hi;\n        $lo = ~$lo;\n        if (($lo & (int)0xffffffff) == (int)0xffffffff) {\n          $lo = 0;\n          $hi++;\n        } else {\n          $lo++;\n        }\n      }\n      $data = pack('N2', $hi, $lo);\n\n    } else {\n      $hi = $value >> 32;\n      $lo = $value & 0xFFFFFFFF;\n      $data = pack('N2', $hi, $lo);\n    }\n\n    $this->trans_->write($data, 8);\n    return 8;\n  }\n\n  public function writeDouble($value) {\n    $data = pack('d', $value);\n    $this->trans_->write(strrev($data), 8);\n    return 8;\n  }\n\n  public function writeString($value) {\n    $len = strlen($value);\n    $result = $this->writeI32($len);\n    if ($len) {\n      $this->trans_->write($value, $len);\n    }\n    return $result + $len;\n  }\n\n  public function readMessageBegin(&$name, &$type, &$seqid) {\n    $result = $this->readI32($sz);\n    if ($sz < 0) {\n      $version = (int) ($sz & self::VERSION_MASK);\n      if ($version != (int) self::VERSION_1) {\n        throw new TProtocolException('Bad version identifier: '.$sz, TProtocolException::BAD_VERSION);\n      }\n      $type = $sz & 0x000000ff;\n      $result +=\n        $this->readString($name) +\n        $this->readI32($seqid);\n    } else {\n      if ($this->strictRead_) {\n        throw new TProtocolException('No version identifier, old protocol client?', TProtocolException::BAD_VERSION);\n      } else {\n\n        $name = $this->trans_->readAll($sz);\n        $result +=\n          $sz +\n          $this->readByte($type) +\n          $this->readI32($seqid);\n      }\n    }\n    return $result;\n  }\n\n  public function readMessageEnd() {\n    return 0;\n  }\n\n  public function readStructBegin(&$name) {\n    $name = '';\n    return 0;\n  }\n\n  public function readStructEnd() {\n    return 0;\n  }\n\n  public function readFieldBegin(&$name, &$fieldType, &$fieldId) {\n    $result = $this->readByte($fieldType);\n    if ($fieldType == TType::STOP) {\n      $fieldId = 0;\n      return $result;\n    }\n    $result += $this->readI16($fieldId);\n    return $result;\n  }\n\n  public function readFieldEnd() {\n    return 0;\n  }\n\n  public function readMapBegin(&$keyType, &$valType, &$size) {\n    return\n      $this->readByte($keyType) +\n      $this->readByte($valType) +\n      $this->readI32($size);\n  }\n\n  public function readMapEnd() {\n    return 0;\n  }\n\n  public function readListBegin(&$elemType, &$size) {\n    return\n      $this->readByte($elemType) +\n      $this->readI32($size);\n  }\n\n  public function readListEnd() {\n    return 0;\n  }\n\n  public function readSetBegin(&$elemType, &$size) {\n    return\n      $this->readByte($elemType) +\n      $this->readI32($size);\n  }\n\n  public function readSetEnd() {\n    return 0;\n  }\n\n  public function readBool(&$value) {\n    $data = $this->trans_->readAll(1);\n    $arr = unpack('c', $data);\n    $value = $arr[1] == 1;\n    return 1;\n  }\n\n  public function readByte(&$value) {\n    $data = $this->trans_->readAll(1);\n    $arr = unpack('c', $data);\n    $value = $arr[1];\n    return 1;\n  }\n\n  public function readI16(&$value) {\n    $data = $this->trans_->readAll(2);\n    $arr = unpack('n', $data);\n    $value = $arr[1];\n    if ($value > 0x7fff) {\n      $value = 0 - (($value - 1) ^ 0xffff);\n    }\n    return 2;\n  }\n\n  public function readI32(&$value) {\n    $data = $this->trans_->readAll(4);\n    $arr = unpack('N', $data);\n    $value = $arr[1];\n    if ($value > 0x7fffffff) {\n      $value = 0 - (($value - 1) ^ 0xffffffff);\n    }\n    return 4;\n  }\n\n  public function readI64(&$value) {\n    $data = $this->trans_->readAll(8);\n\n    $arr = unpack('N2', $data);\n\n\n\n\n    if (PHP_INT_SIZE == 4) {\n\n      $hi = $arr[1];\n      $lo = $arr[2];\n      $isNeg = $hi  < 0;\n\n\n      if ($isNeg) {\n        $hi = ~$hi & (int)0xffffffff;\n        $lo = ~$lo & (int)0xffffffff;\n\n        if ($lo == (int)0xffffffff) {\n          $hi++;\n          $lo = 0;\n        } else {\n          $lo++;\n        }\n      }\n\n\n\n\n      if ($hi & (int)0x80000000) {\n        $hi &= (int)0x7fffffff;\n        $hi += 0x80000000;\n      }\n\n      if ($lo & (int)0x80000000) {\n        $lo &= (int)0x7fffffff;\n        $lo += 0x80000000;\n      }\n\n      $value = $hi * 4294967296 + $lo;\n\n      if ($isNeg) {\n        $value = 0 - $value;\n      }\n    } else {\n\n\n      if ($arr[2] & 0x80000000) {\n        $arr[2] = $arr[2] & 0xffffffff;\n      }\n\n\n      if ($arr[1] & 0x80000000) {\n        $arr[1] = $arr[1] & 0xffffffff;\n        $arr[1] = $arr[1] ^ 0xffffffff;\n        $arr[2] = $arr[2] ^ 0xffffffff;\n        $value = 0 - $arr[1]*4294967296 - $arr[2] - 1;\n      } else {\n        $value = $arr[1]*4294967296 + $arr[2];\n      }\n    }\n\n    return 8;\n  }\n\n  public function readDouble(&$value) {\n    $data = strrev($this->trans_->readAll(8));\n    $arr = unpack('d', $data);\n    $value = $arr[1];\n    return 8;\n  }\n\n  public function readString(&$value) {\n    $result = $this->readI32($len);\n    if ($len) {\n      $value = $this->trans_->readAll($len);\n    } else {\n      $value = '';\n    }\n    return $result + $len;\n  }\n}\n\n\nclass TBinaryProtocolFactory implements TProtocolFactory {\n  private $strictRead_ = false;\n  private $strictWrite_ = false;\n\n  public function __construct($strictRead=false, $strictWrite=false) {\n    $this->strictRead_ = $strictRead;\n    $this->strictWrite_ = $strictWrite;\n  }\n\n  public function getProtocol($trans) {\n    return new TBinaryProtocol($trans, $this->strictRead, $this->strictWrite);\n  }\n}\n\n\nclass TBinaryProtocolAccelerated extends TBinaryProtocol {\n  public function __construct($trans, $strictRead=false, $strictWrite=true) {\n\n\n    if (!method_exists($trans, 'putBack')) {\n      $trans = new TBufferedTransport($trans);\n    }\n    parent::__construct($trans, $strictRead, $strictWrite);\n  }\n  public function isStrictRead() {\n    return $this->strictRead_;\n  }\n  public function isStrictWrite() {\n    return $this->strictWrite_;\n  }\n}\n\n?>\n\n'Pandra/lib/loader.php'\n:<?php\n\nnamespace Pandra;\n\n$GLOBALS['THRIFT_ROOT'] = dirname(__FILE__).'/thrift/';\nrequire_once $GLOBALS['THRIFT_ROOT'].'/packages/cassandra/Cassandra.php';\nrequire_once $GLOBALS['THRIFT_ROOT'].'/transport/TSocket.php';\nrequire_once $GLOBALS['THRIFT_ROOT'].'/protocol/TBinaryProtocol.php';\nrequire_once $GLOBALS['THRIFT_ROOT'].'/transport/TFramedTransport.php';\nrequire_once $GLOBALS['THRIFT_ROOT'].'/transport/TBufferedTransport.php';\n\ndefine('PANDRA_64', PHP_INT_SIZE == 8);\ndefine('PANDRA_REQUEST_MICRO', round(microtime(true) * 1000000, 3));\ndefine('PANDRA_INSTALL_DIR', dirname(__FILE__));\n\nfunction _pandraAutoLoad($className) {\n\n    if (!preg_match(\"/^\".__NAMESPACE__.\"/i\", $className)) return;\n\n    $className = str_replace(__NAMESPACE__ .'\\\\' , '', $className);\n\n\n    $fExt = array('.class.php', '.interface.php');\n\n\n    $classPath = dirname(__FILE__).\"/\";\n\n    if (preg_match('/^(Query|Clause)/', $className)) {\n        $classPath .= 'query/';\n    } elseif (preg_match('/^Log/', $className)) {\n        $classPath .= 'logging/';\n    } elseif (preg_match('/^UUID/', $className)) {\n        $classPath .= 'uuid/';\n    }\n\n    foreach ($fExt as $ext) {\n        $classFile = $classPath.$className.$ext;\n        if (file_exists($classFile)) {\n            require_once($classFile);\n            break;\n        }\n    }\n}\nset_include_path(get_include_path() . PATH_SEPARATOR . __DIR__);\n\n\nspl_autoload_register(__NAMESPACE__ . '\\_pandraAutoLoad');\n\n\n\nCore::setMemcachedAvailable(class_exists('Memcached'));\nCore::setAPCAvailable(function_exists('apc_sma_info') && apc_sma_info() !== FALSE);\n\nUUID::auto();\n'Pandra/tests/lib/PandraValidatorTest.php'\n:<?php\nrequire_once 'PHPUnit/Framework.php';\nrequire_once(dirname(__FILE__).'/../../config.php');\nrequire_once dirname(__FILE__).'/../../lib/Validator.class.php';\n\n\nclass PandraValidatorTest extends PHPUnit_Framework_TestCase {\n\n    protected $object;\n\n\n    protected function setUp() {\n        $this->object = new PandraValidator;\n    }\n\n\n    protected function tearDown() {\n\n    }\n\n    public function test_notempty() {\n        $errors = array();\n        $this->assertTrue(PandraValidator::check('string', 'notemptyLabel', 'notempty', $errors));\n\n        $this->assertFalse(PandraValidator::check('', 'notemptyLabel', 'notempty', $errors));\n        $this->assertTrue(!empty($errors));\n    }\n\n    public function test_isempty() {\n        $errors = array();\n        $this->assertTrue(PandraValidator::check('', 'isemptyLabel', 'isempty', $errors));\n\n        $this->assertFalse(PandraValidator::check('string', 'isemptyLabel', 'isempty', $errors));\n        $this->assertTrue(!empty($errors));\n    }\n\n    public function test_int() {\n        $errors = array();\n        $this->assertTrue(PandraValidator::check(1, 'intLabel', 'int', $errors));\n\n        $this->assertFalse(PandraValidator::check('string', 'intLabel', 'int', $errors));\n        $this->assertTrue(!empty($errors));\n    }\n\n    public function test_float() {\n        $errors = array();\n        $this->assertTrue(PandraValidator::check(1, 'floatLabel', 'float', $errors));\n\n        $this->assertFalse(PandraValidator::check('string', 'floatLabel', 'float', $errors));\n        $this->assertTrue(!empty($errors));\n    }\n\n    public function test_numeric() {\n        $errors = array();\n        $this->assertTrue(PandraValidator::check(1, 'notemptyLabel', 'numeric', $errors));\n\n        $this->assertFalse(PandraValidator::check('', 'notemptyLabel', 'numeric', $errors));\n        $this->assertTrue(!empty($errors));\n    }\n\n    public function test_string() {\n        $errors = array();\n        $this->assertTrue(PandraValidator::check('string', 'stringLabel', 'string', $errors));\n\n        $this->assertFalse(PandraValidator::check(1, 'stringLabel', 'string', $errors));\n        $this->assertTrue(!empty($errors));\n    }\n\n    public function test_bool() {\n        $errors = array();\n        $this->assertTrue(PandraValidator::check(true, 'boolLabel', 'bool', $errors));\n\n        $this->assertFalse(PandraValidator::check('NO', 'boolLabel', 'bool', $errors));\n        $this->assertTrue(!empty($errors));\n    }\n\n    public function test_maxlength() {\n        $errors = array();\n        $this->assertTrue(PandraValidator::check('string', 'maxLabel', 'maxlength=20', $errors));\n\n        $this->assertFalse(PandraValidator::check('abc', 'maxLabel', 'maxlength=2', $errors));\n        $this->assertTrue(!empty($errors));\n    }\n\n    public function test_minlength() {\n        $errors = array();\n        $this->assertTrue(PandraValidator::check('string', 'minLabel', 'minlength=2', $errors));\n\n        $this->assertFalse(PandraValidator::check('string', 'minLabel', 'minlength=20', $errors));\n        $this->assertTrue(!empty($errors));\n    }\n\n    public function test_enum() {\n        $errors = array();\n        $this->assertTrue(PandraValidator::check('c', 'enumLabel', 'enum=a,b,c', $errors));\n\n        $this->assertFalse(PandraValidator::check('d', 'enumLabel', 'enum=a,b,c', $errors));\n        $this->assertTrue(!empty($errors));\n    }\n\n    public function test_email() {\n        $errors = array();\n        $this->assertTrue(PandraValidator::check('foo@bar.com', 'emailLabel', 'email', $errors));\n\n        $this->assertFalse(PandraValidator::check('foobar.com', 'emailLabel', 'email', $errors));\n        $this->assertTrue(!empty($errors));\n    }\n\n    public function test_url() {\n        $errors = array();\n        $this->assertTrue(PandraValidator::check('http:\n\n        $this->assertFalse(PandraValidator::check('foobar', 'urlLabel', 'url', $errors));\n        $this->assertTrue(!empty($errors));\n    }\n\n    public function test_uuid() {\n        $errors = array();\n        $this->assertTrue(PandraValidator::check(UUID::generate(), 'timeuuid', 'uuid', $errors));\n\n        $this->assertFalse(PandraValidator::check('foobar', 'timeuuid', 'uuid', $errors));\n        $this->assertTrue(!empty($errors));\n    }\n\n\n    public function testComplex() {\n        $errors = array();\n\n\n        $this->assertTrue(PandraValidator::check('http:\n\n        $this->assertFalse(PandraValidator::check('wwwphpgrease', 'urlLabel', array('url', 'maxlength=10'), $errors));\n\n        $fieldError = array_pop($errors);\n        $this->assertTrue(count($fieldError['urlLabel']) == 2);\n\n\n        $this->assertTrue(PandraValidator::check('hello world', 'strRegularLabel', 'stringregular', $errors));\n        $this->assertFalse(PandraValidator::check('', 'strRegularLabel', 'stringregular', $errors));\n\n        $this->assertTrue(PandraValidator::check('hello world', 'str20Label', 'string20', $errors));\n        $this->assertFalse(PandraValidator::check('abcdefghijklmnopqrstuvwxyz', 'str20Label', 'string20', $errors));\n    }\n}\n?>\n\n'Pandra/config.php'\n:<?php\n\nnamespace Pandra;\n\ndefine('MODEL_OUT_DIR', dirname(__FILE__).'/models/');\ndefine('SCHEMA_PATH', dirname(__FILE__).'/schemas/');\ndefine('THRIFT_PORT_DEFAULT', 9160);\ndefine('DEFAULT_ROW_LIMIT', 10);\ndefine('PERSIST_CONNECTIONS', TRUE);\ndefine('CASSANDRA_CONF_PATH', '/usr/local/cassandra/conf/cassandra.yaml');\n\ndefine('DEFAULT_POOL_NAME', 'system');\ndefine('MAX_RETRIES', 2);\ndefine('RETRY_COOLDOWN', 10);\n\ndefine('THRIFT_TRANSPORT_BUFFERED', 1);\ndefine('THRIFT_TRANSPORT_FRAMED', 2);\ndefine('THRIFT_TRANSPORT', THRIFT_TRANSPORT_FRAMED);\n\nrequire_once dirname(__FILE__).'/lib/loader.php';\n\n\n\n\nif (file_exists(dirname(__FILE__).'/project_config.php')) {\n    require_once(dirname(__FILE__).'/project_config.php');\n}",
        "gt": [
            "'Pandra/lib/thrift/protocol/TBinaryProtocol.php'",
            "'Pandra/lib/loader.php'",
            "'Pandra/config.php'",
            "'Pandra/tests/lib/PandraValidatorTest.php'"
        ]
    },
    {
        "files": [
            "'cpanel-UAPI-php-class/otphp/vendor/libs.php'",
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/otphp/vendor/base32.php'",
            "'cpanel-UAPI-php-class/cpaneluapi.class.php'"
        ],
        "content": "'cpanel-UAPI-php-class/otphp/vendor/libs.php'\n:<?php\n\n\n\n\n\nrequire_once dirname(__FILE__).'/base32.php';\n\n'cpanel-UAPI-php-class/otphp/lib/otphp.php'\n:<?php\n\n\nrequire_once dirname(__FILE__).'/../vendor/libs.php';\nrequire_once dirname(__FILE__).'/otp.php';\nrequire_once dirname(__FILE__).'/hotp.php';\nrequire_once dirname(__FILE__).'/totp.php';\n\n\n'cpanel-UAPI-php-class/otphp/vendor/base32.php'\n:<?php\n\n\nclass Base32 {\n\n   private static $map = array(\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',\n        'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',\n        'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',\n        'Y', 'Z', '2', '3', '4', '5', '6', '7',\n        '='\n    );\n\n   private static $flippedMap = array(\n        'A'=>'0', 'B'=>'1', 'C'=>'2', 'D'=>'3', 'E'=>'4', 'F'=>'5', 'G'=>'6', 'H'=>'7',\n        'I'=>'8', 'J'=>'9', 'K'=>'10', 'L'=>'11', 'M'=>'12', 'N'=>'13', 'O'=>'14', 'P'=>'15',\n        'Q'=>'16', 'R'=>'17', 'S'=>'18', 'T'=>'19', 'U'=>'20', 'V'=>'21', 'W'=>'22', 'X'=>'23',\n        'Y'=>'24', 'Z'=>'25', '2'=>'26', '3'=>'27', '4'=>'28', '5'=>'29', '6'=>'30', '7'=>'31'\n    );\n\n\n    public static function encode($input, $padding = true) {\n        if(empty($input)) return \"\";\n        $input = str_split($input);\n        $binaryString = \"\";\n        for($i = 0; $i < count($input); $i++) {\n            $binaryString .= str_pad(base_convert(ord($input[$i]), 10, 2), 8, '0', STR_PAD_LEFT);\n        }\n        $fiveBitBinaryArray = str_split($binaryString, 5);\n        $base32 = \"\";\n        $i=0;\n        while($i < count($fiveBitBinaryArray)) {\n            $base32 .= self::$map[base_convert(str_pad($fiveBitBinaryArray[$i], 5,'0'), 2, 10)];\n            $i++;\n        }\n        if($padding && ($x = strlen($binaryString) % 40) != 0) {\n            if($x == 8) $base32 .= str_repeat(self::$map[32], 6);\n            else if($x == 16) $base32 .= str_repeat(self::$map[32], 4);\n            else if($x == 24) $base32 .= str_repeat(self::$map[32], 3);\n            else if($x == 32) $base32 .= self::$map[32];\n        }\n        return $base32;\n    }\n\n    public static function decode($input) {\n        if(empty($input)) return;\n        $paddingCharCount = substr_count($input, self::$map[32]);\n        $allowedValues = array(6,4,3,1,0);\n        if(!in_array($paddingCharCount, $allowedValues)) return false;\n        for($i=0; $i<4; $i++){\n            if($paddingCharCount == $allowedValues[$i] &&\n                substr($input, -($allowedValues[$i])) != str_repeat(self::$map[32], $allowedValues[$i])) return false;\n        }\n        $input = str_replace('=','', $input);\n        $input = str_split($input);\n        $binaryString = \"\";\n        for($i=0; $i < count($input); $i = $i+8) {\n            $x = \"\";\n            if(!in_array($input[$i], self::$map)) return false;\n            for($j=0; $j < 8; $j++) {\n                $x .= str_pad(base_convert(@self::$flippedMap[@$input[$i + $j]], 10, 2), 5, '0', STR_PAD_LEFT);\n            }\n            $eightBits = str_split($x, 8);\n            for($z = 0; $z < count($eightBits); $z++) {\n                $binaryString .= ( ($y = chr(base_convert($eightBits[$z], 2, 10))) || ord($y) == 48 ) ? $y:\"\";\n            }\n        }\n        return $binaryString;\n    }\n}\n\n\n'cpanel-UAPI-php-class/cpaneluapi.class.php'\n:<?php\n\n\n\n\nclass cpanelAPI\n{\n    public $version = '2.0';\n    public $ssl = 1;\n    public $port = 2083;\n    public $server;\n    public $maxredirect = 0;\n    public $user;\n    public $json = '';\n\n    protected $scope;\n    protected $api;\n    protected $auth;\n    protected $pass;\n    protected $secret;\n    protected $type;\n    protected $session;\n    protected $method;\n    protected $requestUrl;\n    protected $eno;\n    protected $emes;\n    protected $token = FALSE;\n    protected $httpMethod = 'GET';\n    protected $postData = '';\n\n    function __construct($user, $pass, $server, $secret = FALSE)\n    {\n        $this->user = $user;\n        $this->pass = $pass;\n        $this->server = $server;\n        if ($secret) {\n            $this->secret = $secret;\n            $this->set2Fa();\n        }\n    }\n\n\n    protected function set2Fa()\n    {\n        require 'otphp/lib/otphp.php';\n        $totp = new \\OTPHP\\TOTP($this->secret);\n        $this->token = $totp->now();\n    }\n\n    public function __get($name)\n    {\n        switch (strtolower($name)) {\n            case 'get':\n                $this->httpMethod = 'GET';\n                break;\n            case 'post':\n                $this->httpMethod = 'POST';\n                break;\n            case 'api2':\n                $this->setApi('api2');\n                break;\n            case 'uapi':\n                $this->setApi('uapi');\n                break;\n            default:\n                $this->scope = $name;\n        }\n        return $this;\n    }\n\n\n    protected function setApi($api)\n    {\n        $this->api = $api;\n        $this->setMethod();\n        return $this;\n    }\n\n\n    protected function setMethod()\n    {\n        switch ($this->api) {\n            case 'uapi':\n                $this->method = '/execute/';\n                break;\n            case 'api2':\n                $this->method = '/json-api/cpanel/';\n                break;\n            default:\n                throw new Exception('$this->api is not set or is incorrectly set. The only available options are \\'uapi\\' or \\'api2\\'');\n        }\n        return $this;\n    }\n\n\n    public function __toString()\n    {\n        return $this->json;\n    }\n\n\n    public function __call($name, $arguments)\n    {\n        if (count($arguments) < 1 || !is_array($arguments[0]))\n            $arguments[0] = [];\n        $this->json = $this->APIcall($name, $arguments[0]);\n        return json_decode($this->json);\n    }\n\n\n    protected function APIcall($name, $arguments)\n    {\n        $this->auth = base64_encode($this->user . \":\" . $this->pass);\n        $this->type = $this->ssl == 1 ? \"https:\n        $this->requestUrl = $this->type . $this->server . ':' . $this->port . $this->method;\n        switch ($this->api) {\n            case 'uapi':\n                $this->requestUrl .= ($this->scope != '' ? $this->scope . \"/\" : '') . $name . '?';\n                break;\n            case 'api2':\n                if ($this->scope == '') {\n                    throw new Exception('Scope must be set.');\n                }\n                $this->requestUrl .= '?cpanel_jsonapi_user=' . $this->user . '&cpanel_jsonapi_apiversion=2&cpanel_jsonapi_module=' . $this->scope . '&cpanel_jsonapi_func=' . $name . '&';\n                break;\n            default:\n                throw new Exception('$this->api is not set or is incorrectly set. The only available options are \\'uapi\\' or \\'api2\\'');\n        }\n        if($this->httpMethod == 'GET') {\n            $this->requestUrl .= http_build_query($arguments);\n        }\n        if($this->httpMethod == 'POST'){\n            $this->postData = $arguments;\n        }\n\n        return $this->curl_request($this->requestUrl);\n    }\n\n\n    protected function curl_request($url)\n    {\n        $httpHeaders = array(\"Authorization: Basic \" . $this->auth);\n\n        if ($this->token) {\n            $httpHeaders[] = \"X-CPANEL-OTP: \" . $this->token;\n        }\n        $ch = curl_init();\n        if($this->httpMethod == 'POST'){\n            $httpHeaders[] = \"Content-type: multipart/form-data\";\n            curl_setopt($ch,CURLOPT_POSTFIELDS, $this->postData);\n        }\n        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0);\n        curl_setopt($ch, CURLOPT_HEADER, 0);\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $httpHeaders);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 100020);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n\n        $content = $this->curl_exec_follow($ch, $this->maxredirect);\n        $this->eno = curl_errno($ch);\n        $this->emes = curl_error($ch);\n\n        curl_close($ch);\n\n        return $content;\n    }\n\n\n    protected function curl_exec_follow($ch, &$maxredirect = null)\n    {\n\n\n        $user_agent = \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.5)\" .\n            \" Gecko/20041107 Firefox/1.0\";\n        curl_setopt($ch, CURLOPT_USERAGENT, $user_agent);\n\n        $mr = $maxredirect === null ? 5 : intval($maxredirect);\n\n        curl_setopt($ch, CURLOPT_FOLLOWLOCATION, $mr > 0);\n        curl_setopt($ch, CURLOPT_MAXREDIRS, $mr);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n        return curl_exec($ch);\n    }\n\n\n    public function getLastRequest()\n    {\n        return $this->requestUrl;\n    }\n\n\n    public function getError()\n    {\n        if (!empty($this->eno)) {\n            return ['no' => $this->eno, 'message' => $this->emes];\n        }\n        return FALSE;\n    }\n}\n",
        "gt": [
            "'cpanel-UAPI-php-class/otphp/vendor/base32.php'",
            "'cpanel-UAPI-php-class/otphp/vendor/libs.php'",
            "'cpanel-UAPI-php-class/otphp/lib/otphp.php'",
            "'cpanel-UAPI-php-class/cpaneluapi.class.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/datatables.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-datatable.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/templates.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/safety-check.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/datatables.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'templates.php';\n\n$datatables = [\n    'tables'=>[\n        'miner-table'=>[\n            'db_table'=>'miners',\n            'db_primary_key'=>'ms_minerID',\n            'enabled'=>true,\n            'columns'=>[\n                [\n                    'db_column'=>'ms_minerID',\n                    'display'=>$larr['miner'].' ID'\n                ],\n                [\n                    'db_column'=>'ms_uqhash',\n                    'display'=>$larr['unique_id']\n                ],\n                [\n                    'db_column'=>'ms_ip',\n                    'display'=>'IP'\n                ],\n                [\n                    'db_column'=>'ms_stealthfound',\n                    'hidden'=>true\n                ],\n                [\n                    'db_column'=>'ms_status',\n                    'display'=>$larr['status'],\n                    'formatter'=>function($d, $s){\n                        global $larr;\n                        $offline = isset($s['ms_lastConnection']) && ((strtotime(date(\"Y-m-d H:i:s\")) - strtotime($s['ms_lastConnection'])) > 180);\n                        $status = unamMinerStatus($offline ? -1 : (empty($s['ms_pool']) && $d != 6 ? 7 : $d));\n                        if($offline) {\n                            $status .= '<span class=\"text-status-red\">('.unamTimeFormat((strtotime(date(\"Y-m-d H:i:s\")) - strtotime($s['ms_lastConnection'])), true).')</span>';\n                        }\n                        if($d == 4) {\n                            $status = str_replace('{REASON}', !empty($s['ms_stealthfound']) ? $s['ms_stealthfound'] : $larr['unknown'], $status);\n                        }\n                        return $status;\n                    }\n                ],\n                [\n                    'db_column'=>'ms_algorithm',\n                    'display'=>$larr['algorithm']\n                ],\n                [\n                    'db_column'=>'ms_hashrate',\n                    'display'=>$larr['hashrate'],\n                    'formatter'=>function($d){\n                        return unamFormatHashrate($d);\n                    }\n                ],\n                [\n                    'db_column'=>'ms_pool',\n                    'display'=>$larr['pool'],\n                    'formatter'=>function($d){\n                        global $larr;\n                        return  empty($d) ? \"<span class='text-status-red'>{$larr['pool_connection_error']}</span>\" : $d;\n                    }\n                ],\n                [\n                    'db_column'=>'ms_port',\n                    'display'=>$larr['port']\n                ],\n                [\n                    'db_column'=>'ms_user',\n                    'display'=>$larr['user']\n                ],\n                [\n                    'db_column'=>'ms_worker',\n                    'display'=>$larr['worker']\n                ],\n                [\n                    'db_column'=>'ms_password',\n                    'display'=>$larr['password']\n                ],\n                [\n                    'db_column'=>'ms_username',\n                    'display'=>$larr['username']\n                ],\n                [\n                    'db_column'=>'ms_computername',\n                    'display'=>$larr['computer_name']\n                ],\n                [\n                    'db_column'=>'ms_type',\n                    'display'=>$larr['type'],\n                    'formatter'=>function($d){\n                        global $larr;\n                        return $d == 'xmrig' ? 'CPU Miner' : ($d == 'ethminer' ? 'GPU Miner' : $larr['unknown']);\n                    }\n                ],\n                [\n                    'db_column'=>'ms_version',\n                    'display'=>$larr['version']\n                ],\n                [\n                    'db_column'=>'ms_gpu',\n                    'display'=>'GPU'\n                ],\n                [\n                    'db_column'=>'ms_cpu',\n                    'display'=>'CPU'\n                ],\n                [\n                    'db_column'=>'ms_activewindow',\n                    'display'=>$larr['active_window'],\n                    'formatter'=>function($d){\n                        global $larr;\n                        return $d == 'Running as System' ? $larr['running_as_system']: $d;\n                    }\n                ],\n                [\n                    'db_column'=>'ms_runtime',\n                    'display'=>$larr['run_time'],\n                    'formatter'=>function($d){\n                        return unamTimeFormat($d, false);\n                    }\n                ],\n                [\n                    'db_column'=>'ms_remoteURL',\n                    'display'=>\"{$larr['remote']} {$larr['url']}\"\n                ],\n                [\n                    'db_column'=>'ms_extra',\n                    'display'=>$larr['extra_data']\n                ],\n                [\n                    'db_column'=>'ms_lastConnection',\n                    'display'=>$larr['last_connection'],\n                ],\n                [\n                    'db_column'=>'ms_creationDate',\n                    'display'=>$larr['first_connection'],\n                ],\n                [\n                    'db_column'=>'ms_minerID',\n                    'display'=>$larr['hashrate_history'],\n                    'hidden'=>!$config['hashrate_history'],\n                    'formatter'=>function($d){\n                        global $larr;\n                        return \"<span><a href='\n                    }\n                ],\n                [\n                    'db_column'=>'ms_config',\n                    'display'=>$larr['configuration'],\n                    'formatter'=>function($d, $s){\n                        global $larr;\n                        $configs = getMinerConfigurations();\n                        $configOptions = \"<option value='0'>{$larr['none']}</option>\";\n                        foreach ($configs as $configdata) {\n                            $configOptions .= \"<option value='{$configdata['cf_configID']}' \" . ($configdata['cf_configID'] == $d ? 'selected' : '') . \">\".$configdata['cf_name'].\"</option>\";\n                        }\n                        return \"<select class='form-control select-miner-config' data-index='{$s['ms_minerID']}'>{$configOptions}</select>\";\n                    }\n                ],\n                [\n                    'db_column'=>'ms_minerID',\n                    'display'=>$larr['actions'],\n                    'formatter'=>function($d, $s){\n                        global $larr;\n                        return \"<div class='btn-group'><a href='\n                    }\n                ]\n            ]\n        ],\n        'ipblocking-table'=>[\n            'db_table'=>'ipblocking',\n            'db_primary_key'=>'ipb_blockID',\n            'enabled'=>true,\n            'columns'=>[\n                [\n                    'db_column'=>'ipb_blockID',\n                    'display'=>'ID'\n                ],\n                [\n                    'db_column'=>'ipb_ip',\n                    'display'=>'IP'\n                ],\n                [\n                    'db_column'=>'ipb_note',\n                    'display'=>$larr['note'],\n                    'formatter'=>function($d){\n                        return nl2br($d);\n                    }\n                ],\n                [\n                    'db_column'=>'ipb_datetime',\n                    'display'=>$larr['date']\n                ],\n                [\n                    'db_column'=>'ipb_blockID',\n                    'display'=>$larr['actions'],\n                    'formatter'=>function($d){\n                        global $larr;\n                        return \"<a href='\n                    }\n                ]\n            ]\n        ]\n    ]\n];\n\nfunction generateDatatable($id) {\n    global $larr, $datatables;\n    if(!empty($datatables['tables'][$id])) {\n        $tabledata = [];\n        foreach ($datatables['tables'][$id]['columns'] as $column) {\n            if (!isset($column['hidden']) || !$column['hidden']) {\n                $tabledata['display'][] = $column['display'];\n            }\n        }\n\n        $columns = implode('</th><th>', $tabledata['display']);\n        return \"<div class='hook-datatable container-fluid' data-tableid='{$id}'>\n                    <table class='table table-bordered table-hover' id='{$id}'>\n                        <thead>\n                        <tr>\n                            <th>{$columns}</th>\n                        </tr>\n                        </thead>\n                    </table>\n                </div>\";\n    }\n    return \"Datatable '{$id}' not found.\";\n}\n'UnamWebPanel/UnamWebPanel/api/ajax-datatable.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once dirname(__DIR__).'/assets/php/datatables.php';\nrequire_once dirname(__DIR__).'/class/class.ssp.php';\n\nif($loggedin && !empty([$datatables['tables'][getParam('tableid')]]) && $datatables['tables'][getParam('tableid')]['enabled']){\n    $table = $datatables['tables'][getParam('tableid')];\n\n    $where = [];\n    if(getParam('tableid') == 'miner-table' && isset($_SESSION['hide_offline_miners']) && $_SESSION['hide_offline_miners']) {\n        $where[] = [\n            'db_column' => 'ms_lastConnection',\n            'db_operation' => '>',\n            'db_value' => date('Y-m-d H:i:s', strtotime('-3 minutes'))\n        ];\n    }\n\n    echo json_encode(SSP::simple($_POST, getConn(), $table['db_table'], $table['db_primary_key'], $table['columns'], $where));\n} else {\n    echo json_encode([]);\n}\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/assets/php/templates.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'security.php';\n\nfunction unamMinerStatus($status){\n    global $larr;\n    switch($status){\n        case 1:\n            return \"<span class='text-status-red'>{$larr['stopped']}</span>\";\n        case 2:\n            return \"<span class='text-status-green'>{$larr['mining']}</span>\";\n        case 3:\n            return \"<span class='text-status-green'>{$larr['mining']} ({$larr['idle']})</span>\";\n        case 4:\n            return \"<span class='text-status-yellow'>{$larr['paused']} ({$larr['stealth']} - {REASON})</span>\";\n        case 5:\n            return \"<span class='text-status-yellow'>{$larr['not_enough_free_vram']}</span>\";\n        case 6:\n            return \"<span class='text-status-yellow'>{$larr['starting']}</span>\";\n        case 7:\n            return \"<span class='text-status-red'>{$larr['error']}</span>\";\n        case -1:\n            return \"<span class='text-status-red'>{$larr['offline']}</span>\";\n        default:\n            return \"<span class='text-status-red'>{$larr['unknown']}</span>\";\n    }\n}\n\nfunction unamTimeFormat($timeline, $shortform) {\n    $periods = [($shortform ? 'd' : 'day') => 86400, ($shortform ? 'h' : 'hour') => 3600, ($shortform ? 'm' : 'minute') => 60, ($shortform ? 's' : 'second') => 1];\n    $ret = \"\";\n    if($timeline) {\n        foreach ($periods as $name => $seconds) {\n            $num = floor($timeline / $seconds);\n            $timeline -= ($num * $seconds);\n            if ($num > 0) {\n                $ret .= ($shortform ? \"{$num}{$name} \" : \"{$num} {$name}\" . (($num > 1) ? 's' : '') . ' ');\n            }\n        }\n    }\n    return trim($ret);\n}\n\nfunction unamFormatHashrate($num) {\n    $num = $num ?: 0;\n    $units = ['H/s', 'KH/s', 'MH/s', 'GH/s', 'TH/s', 'PH/s', 'EH/s'];\n    for ($i = 0; $num >= 1000; $i++) {\n        $num /= 1000;\n    }\n    return round($num, 1).\" {$units[$i]}\";\n}\n'UnamWebPanel/UnamWebPanel/assets/php/safety-check.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once dirname(__DIR__, 2).'/config.php';\n\nif (!class_exists('PDO')) {\n    echo '<p style=\"color:red\">The required class PDO could not be found.</p>';\n    die();\n}\n\nif (!in_array('sqlite', PDO::getAvailableDrivers())) {\n    echo '<p style=\"color:red\">The required SQLite PDO driver is not enabled.</p>';\n    die();\n}\n\nif (!file_exists($config['db_file'])) {\n    echo \"<p style='color:red'>The SQLite database file specified in the configuration could not be found.</p>\";\n    die();\n}\n\n$db_folder = dirname($config['db_file']);\nif (!is_readable($db_folder)) {\n    echo \"<p style='color:red'>The folder containing the SQLite database ({$db_folder}) is not readable, please give the folder appropriate read permissions.</p>\";\n    die();\n}\n\nif (!is_writable($db_folder)) {\n    echo \"<p style='color:red'>The folder containing the SQLite database ({$db_folder}) is not writable, please give the folder appropriate write permissions.</p>\";\n    die();\n}\n\nif (!is_readable($config['db_file'])) {\n    echo \"<p style='color:red'>The SQLite database file ({$config['db_file']}) is not writable, please give the file appropriate write permissions.</p>\";\n    die();\n}\n\nif (!is_writable($config['db_file'])) {\n    echo \"<p style='color:red'>The SQLite database file ({$config['db_file']}) is not writable, please give the file appropriate write permissions.</p>\";\n    die();\n}\n'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/assets/php/safety-check.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/templates.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/datatables.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-datatable.php'"
        ]
    },
    {
        "files": [
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'",
            "'bootstrap-blocks-wordpress-plugin/src/row/class-row-block-type.php'",
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'"
        ],
        "content": "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'\n:<?php\n\n\nnamespace WP_Bootstrap_Blocks;\n\nuse WP_Bootstrap_Blocks\\Button\\Button_Block_Type;\nuse WP_Bootstrap_Blocks\\Column\\Column_Block_Type;\nuse WP_Bootstrap_Blocks\\Container\\Container_Block_Type;\nuse WP_Bootstrap_Blocks\\Row\\Row_Block_Type;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nclass WP_Bootstrap_Blocks {\n\n\n\tprotected static $instance = null;\n\n\n\tpublic static $version = '5.2.0';\n\n\n\tpublic $token = 'wp-bootstrap-blocks';\n\n\n\tpublic $assets_dir;\n\n\n\tpublic $assets_url;\n\n\n\tpublic $languages_dir;\n\n\n\tpublic $languages_dir_full;\n\n\n\tpublic function __construct() {\n\t\t$this->define_constants();\n\t\t$this->init_plugin_environment();\n\t\t$this->includes();\n\t\t$this->init_hooks();\n\t\t$this->register_block_types();\n\t\tSettings::init( $this->assets_dir, $this->assets_url );\n\t}\n\n\n\tprotected function define_constants() {\n\t\tif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_ABSPATH' ) ) {\n\t\t\tdefine( 'WP_BOOTSTRAP_BLOCKS_ABSPATH', trailingslashit( dirname( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t}\n\t}\n\n\n\tprotected function init_plugin_environment() {\n\n\t\t$this->assets_dir = WP_BOOTSTRAP_BLOCKS_ABSPATH . 'build/';\n\t\t$this->assets_url = esc_url( trailingslashit( plugins_url( '/build/', WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t$this->languages_dir = dirname( plugin_basename( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) . '/languages/';\n\t\t$this->languages_dir_full = plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'languages/';\n\t}\n\n\n\tpublic function includes() {\n\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/wp-bootstrap-blocks-functions.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/class-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/container/class-container-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/row/class-row-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/column/class-column-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/button/class-button-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/settings/class-settings.php';\n\t}\n\n\n\tprotected function init_hooks() {\n\n\t\tadd_action( 'enqueue_block_assets', array( $this, 'enqueue_block_assets' ) );\n\n\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'enqueue_block_editor_assets' ), 99 );\n\n\n\t\tif ( class_exists( 'WP_Block_Editor_Context' ) ) {\n\n\t\t\tadd_filter( 'block_categories_all', array( $this, 'register_custom_block_category' ), 10, 2 );\n\t\t} else {\n\t\t\tadd_filter( 'block_categories', array( $this, 'register_custom_block_category_old' ), 10, 2 );\n\t\t}\n\n\n\t\tadd_action( 'plugins_loaded', array( $this, 'load_plugin_textdomain' ) );\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'set_script_translations' ), 100 );\n\n\n\t\tadd_action( 'init', array( $this, 'check_version' ) );\n\t}\n\n\n\tpublic function enqueue_block_assets() {\n\n\t\t$enqueue_block_assets = apply_filters( 'wp_bootstrap_blocks_enqueue_block_assets', true );\n\t\tif ( ! $enqueue_block_assets ) {\n\t\t\treturn;\n\t\t}\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-styles',\n\t\t\tesc_url( $this->assets_url ) . 'style-index.css',\n\t\t\tarray(),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function enqueue_block_editor_assets() {\n\n\t\t$index_path = $this->assets_dir . 'index.js';\n\t\t$index_url = esc_url( $this->assets_url ) . 'index.js';\n\t\t$index_asset_file = $this->assets_dir . 'index.asset.php';\n\t\t$index_asset = file_exists( $index_asset_file )\n\t\t\t? require_once $index_asset_file\n\t\t\t: null;\n\t\t$index_dependencies = isset( $index_asset['dependencies'] ) ? $index_asset['dependencies'] : array();\n\t\t$index_version = isset( $index_asset['version'] ) ? $index_asset['version'] : filemtime( $index_path );\n\n\t\twp_enqueue_script(\n\t\t\t$this->token . '-js',\n\t\t\t$index_url,\n\t\t\t$index_dependencies,\n\t\t\t$index_version,\n\t\t\ttrue\n\t\t);\n\n\t\twp_localize_script(\n\t\t\t$this->token . '-js',\n\t\t\t'wpBootstrapBlocks',\n\t\t\tarray(\n\t\t\t\t'bootstrapVersion' => Settings::get_bootstrap_version(),\n\t\t\t\t'isBootstrap5Active' => Settings::is_bootstrap_5_active(),\n\t\t\t\t'isCssGridEnabled' => Settings::is_css_grid_enabled(),\n\t\t\t)\n\t\t);\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-editor-styles',\n\t\t\tesc_url( $this->assets_url ) . 'index.css',\n\t\t\tarray( 'wp-edit-blocks' ),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function register_custom_block_category( $block_categories, $block_editor_context ) {\n\t\treturn $this->add_custom_block_category( $block_categories );\n\t}\n\n\n\tpublic function register_custom_block_category_old( $categories, $post ) {\n\t\treturn $this->add_custom_block_category( $categories );\n\t}\n\n\n\tprotected function add_custom_block_category( $block_categories ) {\n\t\treturn array_merge(\n\t\t\t$block_categories,\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'slug' => 'wp-bootstrap-blocks',\n\t\t\t\t\t'title' => __( 'Bootstrap Blocks', 'wp-bootstrap-blocks' ),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t}\n\n\n\tpublic function load_plugin_textdomain() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\tload_plugin_textdomain( $domain, false, $this->languages_dir );\n\t}\n\n\n\tpublic function set_script_translations() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\twp_set_script_translations( $this->token . '-js', $domain, $this->languages_dir_full );\n\t}\n\n\n\tpublic function register_block_types() {\n\t\tnew Container_Block_Type();\n\t\tnew Row_Block_Type();\n\t\tnew Column_Block_Type();\n\t\tnew Button_Block_Type();\n\t}\n\n\n\tpublic static function instance() {\n\t\tif ( is_null( self::$instance ) ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\n\t\treturn self::$instance;\n\t}\n\n\n\tpublic function __clone() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function __wakeup() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function check_version() {\n\t\tif ( defined( 'IFRAME_REQUEST' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$transient_name = 'wp_bootstrap_blocks_version';\n\n\t\t$old_version = get_transient( $transient_name );\n\t\tif ( false === $old_version ) {\n\t\t\t$old_version = get_option( $this->token . '_version' );\n\t\t\tset_transient( $transient_name, $old_version, 5 * MINUTE_IN_SECONDS );\n\t\t}\n\t\t$new_version = self::$version;\n\t\tif ( $old_version !== $new_version ) {\n\t\t\t$this->log_version_number();\n\t\t\tdelete_transient( $transient_name );\n\n\n\t\t\tdo_action( $this->token . '_updated', $new_version, $old_version );\n\t\t}\n\t}\n\n\n\tprotected function log_version_number() {\n\t\tdelete_option( $this->token . '_version' );\n\t\tupdate_option( $this->token . '_version', self::$version );\n\t}\n}\n\n'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'\n:<?php\n\n\n\nrequire_once dirname( __DIR__ ) . '/vendor/autoload.php';\n\n\n\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\n\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = getenv( 'WP_PHPUNIT__DIR' );\n}\n\n\nif ( ! $_tests_dir ) {\n\t$_try_tests_dir = __DIR__ . '/../../../../../tests/phpunit';\n\tif ( file_exists( $_try_tests_dir . '/includes/functions.php' ) ) {\n\t\t$_tests_dir = $_try_tests_dir;\n\t}\n}\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = '/tmp/wordpress-tests-lib';\n}\n\n\nrequire_once $_tests_dir . '/includes/functions.php';\n\n\n\ndefine( 'GUTENBERG_LOAD_VENDOR_SCRIPTS', false );\n\n\nfunction _manually_load_plugin() {\n\trequire dirname( __DIR__ ) . '/wp-bootstrap-blocks.php';\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\n\n\nrequire $_tests_dir . '/includes/bootstrap.php';\n\n\nrequire_once __DIR__ . '/wp-bootstrap-blocks-unittestcase.php';\n\n'bootstrap-blocks-wordpress-plugin/src/row/class-row-block-type.php'\n:<?php\n\n\nnamespace WP_Bootstrap_Blocks\\Row;\n\nuse WP_Bootstrap_Blocks\\Block_Type;\nuse WP_Bootstrap_Blocks\\Settings;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\nif ( ! class_exists( '\\WP_Bootstrap_Blocks\\Row\\Row_Block_Type', false ) ) :\n\n\n\tclass Row_Block_Type extends Block_Type {\n\n\t\tprotected $name = 'wp-bootstrap-blocks/row';\n\n\n\t\tprotected $attributes = array(\n\t\t\t'template' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'noGutters' => array(\n\t\t\t\t'type' => 'boolean',\n\t\t\t),\n\t\t\t'alignment' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'verticalAlignment' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'editorStackColumns' => array(\n\t\t\t\t'type' => 'boolean',\n\t\t\t),\n\t\t\t'horizontalGutters' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'verticalGutters' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'cssGridGutters' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t);\n\n\n\t\tprotected $default_attributes = array(\n\t\t\t'template' => '1-1',\n\t\t\t'noGutters' => false,\n\t\t\t'alignment' => '',\n\t\t\t'verticalAlignment' => '',\n\t\t\t'editorStackColumns' => false,\n\t\t\t'horizontalGutters' => '',\n\t\t\t'verticalGutters' => '',\n\t\t\t'cssGridGutters' => '',\n\t\t);\n\n\n\t\tprotected function get_template_name() {\n\t\t\t$template_name = parent::get_template_name();\n\t\t\tif ( Settings::is_css_grid_enabled() ) {\n\t\t\t\t$template_name .= '-css-grid';\n\t\t\t}\n\t\t\treturn $template_name;\n\t\t}\n\t}\n\nendif;\n\n'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'\n:<?php\n\n\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE' ) ) {\n\tdefine( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE', __FILE__ );\n}\n\n\nif ( ! class_exists( \\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::class ) ) {\n\trequire_once plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'src/class-wp-bootstrap-blocks.php';\n}\n\n\n\\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::instance();\n",
        "gt": [
            "'bootstrap-blocks-wordpress-plugin/src/row/class-row-block-type.php'",
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/__UNAM_LIB/unam_lib.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once(dirname(__DIR__) . '/assets/php/session-header.php');\n\nswitch(getParam('action')){\n    case 'lang-change':\n        $base->unam_checkCondition(!in_array(getParam('newlangID'), array_keys($config['languages'])), 'Language ID invalid.');\n        $_SESSION['lang'] = getParam('newlangID');\n        $base->unam_echoSuccess();\n        break;\n}\n'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/__UNAM_LIB/unam_lib.php'\n:<?php\n/* Made by Unam Sanctam https:\n\nclass unam_lib {\n    private static $usingCustomErrorHandler;\n\n    function __construct() {\n        self::$usingCustomErrorHandler = false;\n    }\n\n    function unam_dbSelect($conn, $table_name, $fields, $where_array = null, $rowcount=false, $fetchAll=false, $extras=''){\n        $where_flag = [];\n        $where_flag_values = [];\n        if(isset($where_array) && is_array($where_array)){\n            foreach($where_array as $key=>$value) {\n                if($key == '$CUSTOM'){\n                    $where_flag[] = \"$value\";\n                }else if(is_array($value)){\n                    $where_flag[] = \"$key $value[0] ?\";\n                    $where_flag_values[] = $value[1];\n                }else{\n                    $where_flag[] = \"$key = ?\";\n                    $where_flag_values[] = $value;\n                }\n            }\n            $where_flag_string = implode(' AND ', $where_flag);\n        }\n        try{\n            $s = $conn->prepare(\"SELECT \".($rowcount ? \"COUNT(*) as unam_totalCount\" : $fields).\" FROM $table_name\".($where_array && count($where_array) > 0 ? \" WHERE $where_flag_string\" : \"\").\" $extras\");\n            $s->execute($where_flag_values);\n            if($rowcount){\n                return $s->fetch(PDO::FETCH_ASSOC)['unam_totalCount'];\n            }\n            if($fetchAll) {\n                return $s->fetchAll(PDO::FETCH_ASSOC);\n            }\n            return $s->fetch(PDO::FETCH_ASSOC);\n        }\n        catch(PDOException $e){\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return [];\n        }\n    }\n\n    function unam_dbInsert($conn, $table, $arr)\n    {\n        try {\n            $names = join(',', array_keys($arr));\n            $params = [];\n            $valcount = (is_array(reset($arr)) ? count(reset($arr))  : 1);\n            $keycount = count(array_keys($arr));\n            if(is_array(reset($arr))){\n                for($i = 0; $i < $valcount; $i++){\n                    $params = array_merge($params, array_column($arr, $i));\n                }\n            }else{\n                $params = array_values($arr);\n            }\n            $values =  substr(str_repeat(',('.substr(str_repeat(',?', $keycount), 1).')', $valcount), 1);\n            $s = $conn->prepare(\"INSERT INTO $table ($names) VALUES $values\");\n            return $s->execute($params);\n        }\n        catch(PDOException $e){\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return [];\n        }\n    }\n\n    function unam_dbUpdate($conn, $tableName, $colsArray, $where_array)\n    {\n        $UpdateString = [];\n        $ExecuteString = [];\n        foreach($colsArray as $key=>$value)\n        {\n            $UpdateString[] = \"$key = ?\";\n            $ExecuteString[] = $value;\n        }\n\n        $where_flag = [];\n        foreach($where_array as $key=>$value)\n        {\n            if($key == '$CUSTOM'){\n                $where_flag[] = \"$value\";\n            }else if(is_array($value)){\n                $where_flag[] = \"$key $value[0] ?\";\n                $ExecuteString[] = $value[1];\n            }else{\n                $where_flag[] = \"$key = ?\";\n                $ExecuteString[] = $value;\n            }\n        }\n\n        try {\n            $s = $conn->prepare(\"UPDATE $tableName SET \".implode(', ', $UpdateString).\" WHERE \".implode(' AND ', $where_flag));\n            return $s->execute($ExecuteString);\n        }\n        catch(PDOException $e){\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return false;\n        }\n    }\n\n    function unam_dbDelete($conn, $table_name, $where_array)\n    {\n        $where_flag = [];\n        $where_flag_values = [];\n        foreach($where_array as $key=>$value)\n        {\n            if($key == '$CUSTOM'){\n                $where_flag[] = \"$value\";\n            }else if(is_array($value)){\n                $where_flag[] = \"$key $value[0] ?\";\n                $where_flag_values[] = $value[1];\n            }else{\n                $where_flag[] = \"$key = ?\";\n                $where_flag_values[] = $value;\n            }\n        }\n\n        $where_flag_string = implode(' AND ', $where_flag);\n        try {\n            $s = $conn->prepare(\"DELETE FROM $table_name WHERE $where_flag_string\");\n            return $s->execute($where_flag_values);\n        }\n        catch(PDOException $e) {\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return [];\n        }\n    }\n\n    function unam_sanitize($input) {\n        if (is_array($input)) {\n            foreach ($input as $key => $value) {\n                $input[$key] = self::unam_sanitize($value);\n            }\n            return $input;\n        }\n        return htmlspecialchars($input, ENT_QUOTES, 'UTF-8', false);\n    }\n\n\n    function unam_filterParameter($param, $maxlength = 1000, $default = ''){\n        if(!isset($_POST[$param]) && !isset($_GET[$param])) {\n            return $default;\n        }\n        $fparam = self::unam_arrayWalkRecursive($_POST[$param] ?? $_GET[$param], function(&$v) use(&$maxlength){ $v = self::unam_sanitize(substr($v, 0, $maxlength)); });\n        return (count($fparam) == 1 ? $fparam[0] : $fparam);\n    }\n\n    function unam_filterAllParameters($maxlength = 1000, $default = '') {\n        $paramarr = array_merge($_POST, $_GET);\n        $outarr = [];\n        if(is_array($paramarr)){\n            foreach($paramarr as $param=>$data){\n                $outarr[$param] = self::unam_filterParameter($param, $maxlength, $default);\n            }\n        }\n        return $outarr;\n    }\n\n    function unam_arrayWalkRecursive($arr, $function){\n        $arr = is_array($arr) ? $arr : [$arr];\n        array_walk_recursive($arr, $function);\n        return $arr;\n    }\n\n    function unam_checkCondition($cond, $resp){\n        if($cond === true){\n            self::unam_echoFailure($resp);\n            die();\n        }\n    }\n\n    function unam_echoSuccess($successmsg=''){\n        echo json_encode(['response' => 'success', 'successmsg'=>$successmsg]);\n    }\n\n    function unam_echoFailure($errormsg){\n        echo json_encode(['response'=>'failure', 'errormsg'=>$errormsg]);\n    }\n\n    function unam_getBrowserLanguages($available = [], $default = 'en') {\n        if (isset( $_SERVER[ 'HTTP_ACCEPT_LANGUAGE' ])) {\n            $langs = explode( ',', $_SERVER['HTTP_ACCEPT_LANGUAGE'] );\n            if(empty($available)) {\n                return $langs[0];\n            }\n            foreach($langs as $lang){\n                $lang = substr($lang, 0, 2);\n                if(in_array( $lang, $available)){\n                    return $lang;\n                }\n            }\n        }\n        return $default;\n    }\n\n    function unam_toggleCustomErrorHandling() {\n        if(self::$usingCustomErrorHandler){\n            restore_error_handler();\n            self::$usingCustomErrorHandler = false;\n            return false;\n        }else{\n            set_error_handler([$this, 'unam_customErrorHandler']);\n            self::$usingCustomErrorHandler = true;\n            return true;\n        }\n    }\n\n    function unam_customErrorHandler($errno, $errstr, $error_file, $error_line, $error_context = null) {\n        global $SYSTEM_PHP_ERROR;\n        $SYSTEM_PHP_ERROR=false;\n        $err_hostname_ip = $_SERVER['REMOTE_ADDR'] ;\n\n        $errout = \"<br/><b>Date and Time:</b> \".date('Y/m/d H:i:s');\n        $errout .= \"<br/><b>In file:</b> $error_file\";\n        $errout .= \"<br/><b>On line:</b> $error_line\";\n        $errout .= \"<br/><b>Error was: </b> [$errno] $errstr\";\n        $errout .= \"<br/><b>Remote IP:</b> $err_hostname_ip\";\n        $errout .= \"<hr/>\";\n\n        self::unam_writeError($errout);\n        $SYSTEM_PHP_ERROR=true;\n    }\n\n    function unam_writeError($errormessage){\n        if(self::$usingCustomErrorHandler) {\n            file_put_contents(__DIR__.\"/Logs/php-error-\".date('d-m-Y').\".html\", \"ERROR: $errormessage\", FILE_APPEND);\n        }\n    }\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/__UNAM_LIB/unam_lib.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'"
        ]
    },
    {
        "files": [
            "'twich/www/redis/Rediska/Command/Interface.php'",
            "'twich/www/redis/Rediska.php'",
            "'twich/www/redis/Rediska/Zend/Application/Resource/Rediska.php'"
        ],
        "content": "'twich/www/redis/Rediska/Command/Interface.php'\n:<?php\n\n\ninterface Rediska_Command_Interface\n{\n    public function __construct(Rediska $rediska, $name, $arguments);\n    public function write();\n    public function read();\n    public function isAtomic();\n}\n'twich/www/redis/Rediska.php'\n:<?php\n\n\nrequire_once 'Rediska/Exception.php';\n\n\nrequire_once 'Rediska/Connection.php';\n\n\nrequire_once 'Rediska/Connection/Specified.php';\n\n\nrequire_once 'Rediska/Command/Interface.php';\n\n\nrequire_once 'Rediska/Command/Abstract.php';\n\n\nrequire_once 'Rediska/KeyDistributor/Interface.php';\n\n\nclass Rediska\n{\n    const EOL = \"\\r\\n\";\n\n    const STABLE_REDIS_VERSION = '1.2.6';\n\n\n    protected static $_defaultInstance;\n\n\n    protected $_connections = array();\n\n\n    protected $_specifiedConnection;\n\n\n    protected static $_commands = array(\n\n        'exists'           => 'Rediska_Command_Exists',\n        'delete'           => 'Rediska_Command_Delete',\n        'gettype'          => 'Rediska_Command_GetType',\n        'getkeysbypattern' => 'Rediska_Command_GetKeysByPattern',\n        'getrandomkey'     => 'Rediska_Command_GetRandomKey',\n        'rename'           => 'Rediska_Command_Rename',\n        'getkeyscount'     => 'Rediska_Command_GetKeysCount',\n        'expire'           => 'Rediska_Command_Expire',\n        'getlifetime'      => 'Rediska_Command_GetLifetime',\n        'selectdb'         => 'Rediska_Command_SelectDb',\n        'movetodb'         => 'Rediska_Command_MoveToDb',\n        'flushdb'          => 'Rediska_Command_FlushDb',\n\n\n        'set'       => 'Rediska_Command_Set',\n        'setandget' => 'Rediska_Command_SetAndGet',\n        'get'       => 'Rediska_Command_Get',\n        'increment' => 'Rediska_Command_Increment',\n        'decrement' => 'Rediska_Command_Decrement',\n\n\n        'appendtolist'   => 'Rediska_Command_AppendToList',\n        'prependtolist'  => 'Rediska_Command_PrependToList',\n        'getlistlength'  => 'Rediska_Command_GetListLength',\n        'getlist'        => 'Rediska_Command_GetList',\n        'truncatelist'   => 'Rediska_Command_TruncateList',\n        'getfromlist'    => 'Rediska_Command_GetFromList',\n        'settolist'      => 'Rediska_Command_SetToList',\n        'deletefromlist' => 'Rediska_Command_DeleteFromList',\n        'shiftfromlist'  => 'Rediska_Command_ShiftFromList',\n        'popfromlist'    => 'Rediska_Command_PopFromList',\n\n\n        'addtoset'         => 'Rediska_Command_AddToSet',\n        'deletefromset'    => 'Rediska_Command_DeleteFromSet',\n        'getrandomfromset' => 'Rediska_Command_GetRandomFromSet',\n    \t'getsetlength'     => 'Rediska_Command_GetSetLength',\n        'existsinset'      => 'Rediska_Command_ExistsInSet',\n        'intersectsets'    => 'Rediska_Command_IntersectSets',\n        'unionsets'        => 'Rediska_Command_UnionSets',\n        'diffsets'         => 'Rediska_Command_DiffSets',\n        'getset'           => 'Rediska_Command_GetSet',\n        'movetoset'        => 'Rediska_Command_MoveToSet',\n\n\n        'addtosortedset'             => 'Rediska_Command_AddToSortedSet',\n        'deletefromsortedset'        => 'Rediska_Command_DeleteFromSortedSet',\n        'getsortedset'               => 'Rediska_Command_GetSortedSet',\n        'incrementscoreinsortedset'  => 'Rediska_Command_IncrementScoreInSortedSet',\n        'getrankfromsortedset'       => 'Rediska_Command_GetRankFromSortedSet',\n        'getfromsortedsetbyscore'    => 'Rediska_Command_GetFromSortedSetByScore',\n        'deletefromsortedsetbyscore' => 'Rediska_Command_DeleteFromSortedSetByScore',\n        'deletefromsortedsetbyrank'  => 'Rediska_Command_DeleteFromSortedSetByRank',\n        'getsortedsetlength'         => 'Rediska_Command_GetSortedSetLength',\n        'getscorefromsortedset'      => 'Rediska_Command_GetScoreFromSortedSet',\n        'unionsortedsets'            => 'Rediska_Command_UnionSortedSets',\n        'intersectsortedsets'        => 'Rediska_Command_IntersectSortedSets',\n\n\n        'sort' => 'Rediska_Command_Sort',\n\n\n        'save'                  => 'Rediska_Command_Save',\n        'getlastsavetime'       => 'Rediska_Command_GetLastSaveTime',\n        'info'                  => 'Rediska_Command_Info',\n        'quit'                  => 'Rediska_Command_Quit',\n        'shutdown'              => 'Rediska_Command_Shutdown',\n        'rewriteappendonlyfile' => 'Rediska_Command_RewriteAppendOnlyFile',\n        'slaveof'               => 'Rediska_Command_SlaveOf',\n    );\n\n\n    protected $_keyDistributor;\n\n\n    protected $_options = array(\n        'namespace'           => '',\n        'servers'             => array(\n            array(\n                'host'   => Rediska_Connection::DEFAULT_HOST,\n                'port'   => Rediska_Connection::DEFAULT_PORT,\n                'weight' => Rediska_Connection::DEFAULT_WEIGHT,\n            )\n        ),\n        'serializer'          => 'serialize',\n        'unserializer'        => 'unserialize',\n        'keydistributor'      => 'consistentHashing',\n        'redisversion'        => self::STABLE_REDIS_VERSION,\n    );\n\n\n    public function __construct(array $options = array())\n    {\n    \t$options = array_change_key_case($options, CASE_LOWER);\n        $options = array_merge($this->_options, $options);\n\n\n        $this->setKeyDistributor($options['keydistributor']);\n        unset($options['keydistributor']);\n\n        $this->setOptions($options);\n\n        self::setDefaultInstace($this);\n\n        $this->_specifiedConnection = new Rediska_Connection_Specified($this);\n    }\n\n\n    public static function getDefaultInstance()\n    {\n    \treturn self::$_defaultInstance;\n    }\n\n\n    public static function setDefaultInstace(Rediska $instance)\n    {\n    \tself::$_defaultInstance = $instance;\n    }\n\n\n    public function setOptions(array $options)\n    {\n        foreach($options as $name => $value) {\n            if (method_exists($this, \"set$name\")) {\n                call_user_func(array($this, \"set$name\"), $value);\n            } else {\n                $this->setOption($name, $value);\n            }\n        }\n\n        return $this;\n    }\n\n\n    public function setOption($name, $value)\n    {\n    \t$lowerName = strtolower($name);\n\n        if (!array_key_exists($lowerName, $this->_options)) {\n            throw new Rediska_Exception(\"Unknown option '$name'\");\n        }\n\n        $this->_options[$lowerName] = $value;\n\n        return $this;\n    }\n\n\n    public function getOption($name)\n    {\n    \t$lowerName = strtolower($name);\n\n        if (!array_key_exists($lowerName, $this->_options)) {\n            throw new Rediska_Exception(\"Unknown option '$name'\");\n        }\n\n        return $this->_options[$lowerName];\n    }\n\n\n    public function setServers(array $servers)\n    {\n        $this->_connections = array();\n        foreach($servers as $alias => $serverOptions) {\n            if (!isset($serverOptions['alias']) && is_string($alias)) {\n                $serverOptions['alias'] = $alias;\n            }\n\n            $this->addServer(\n                isset($serverOptions['host']) ? $serverOptions['host'] : Rediska_Connection::DEFAULT_HOST,\n                isset($serverOptions['port']) ? $serverOptions['port'] : Rediska_Connection::DEFAULT_PORT,\n                $serverOptions);\n        }\n\n        return $this;\n    }\n\n\n    public function addServer($host, $port = Rediska_Connection::DEFAULT_PORT, array $options = array())\n    {\n        if (!isset($options['alias'])) {\n            $connectionString = \"$host:$port\";\n        } else {\n            $connectionString = $options['alias'];\n        }\n\n    \tif (array_key_exists($connectionString, $this->_connections)) {\n    \t\tthrow new Rediska_Exception(\"Server '$connectionString' already added.\");\n    \t}\n\n    \t$options['host'] = $host;\n    \t$options['port'] = $port;\n\n    \t$this->_connections[$connectionString] = new Rediska_Connection($options);\n\n        $this->_keyDistributor->addConnection(\n            $connectionString,\n            isset($options['weight']) ? $options['weight'] : Rediska_Connection::DEFAULT_WEIGHT\n        );\n\n        return $this;\n    }\n\n\n    public function getConnectionByKeyName($name)\n    {\n        if (count($this->_connections) == 1) {\n            $connections = array_values($this->_connections);\n            $connection = $connections[0];\n        } else if ($this->_specifiedConnection->getConnection()) {\n            $connection = $this->_specifiedConnection->getConnection();\n        } else {\n            $alias = $this->_keyDistributor->getConnectionByKeyName($name);\n            $connection = $this->_connections[$alias];\n        }\n\n        return $connection;\n    }\n\n\n    public function getConnectionByAlias($alias)\n    {\n        if (!isset($this->_connections[$alias])) {\n            throw new Rediska_Exception(\"Can't find connection '$alias'\");\n        }\n\n        return $this->_connections[$alias];\n    }\n\n\n    public function getConnections()\n    {\n        if ($this->_specifiedConnection->getConnection()) {\n            return array($this->_specifiedConnection->getConnection());\n        } else {\n            return array_values($this->_connections);\n        }\n    }\n\n\n    public function on($aliasOrConnection)\n    {\n        if ($aliasOrConnection instanceof Rediska_Connection) {\n            $connection = $aliasOrConnection;\n        } else {\n            $alias = $aliasOrConnection;\n            $connection = $this->getConnectionByAlias($alias);\n        }\n\n        $this->_specifiedConnection->setConnection($connection);\n\n        return $this->_specifiedConnection;\n    }\n\n\n    public function pipeline()\n    {\n        require_once 'Rediska/Pipeline.php';\n\n        return new Rediska_Pipeline($this, $this->_specifiedConnection);\n    }\n\n\n    public static function addCommand($name, $className)\n    {\n        if (!class_exists($className)) {\n            throw new Rediska_Exception(\"Class '$className' not found. You must include before or setup autoload\");\n        }\n\n\n        $classReflection = new ReflectionClass($className);\n        if (!in_array('Rediska_Command_Interface', $classReflection->getInterfaceNames())) {\n            throw new Rediska_Exception(\"Class '$className' must implement Rediska_Command_Interface interface\");\n        }\n        $methodCreate = $classReflection->getMethod('create');\n        if (!$methodCreate || !$methodCreate->isPublic()) {\n            throw new Rediska_Exception(\"Class '$className' must have public method 'create'\");\n        }\n\n        $lowerName = strtolower($name);\n        self::$_commands[$lowerName] = $className;\n\n        return true;\n    }\n\n\n    public static function removeCommand($name)\n    {\n        $lowerName = strtolower($name);\n        if (!isset(self::$_commands[$lowerName])) {\n            throw new Rediska_Exception(\"Command '$name' not found\");\n        }\n        unset(self::$_commands[$lowerName]);\n\n        return true;\n    }\n\n\n    public function getCommand($name, $arguments)\n    {\n        $lowerName = strtolower($name);\n        if (!isset(self::$_commands[$lowerName])) {\n            throw new Rediska_Exception(\"Command '$name' not found\");\n        }\n\n\n        if (strpos(self::$_commands[$lowerName], 'Rediska_Command_') === 0) {\n            require_once 'Rediska/Command/' . substr(self::$_commands[$lowerName], 16) . '.php';\n        }\n\n\n        return new self::$_commands[$lowerName]($this, $name, $arguments);\n    }\n\n\n    public function __call($name, $args)\n    {\n        $this->_specifiedConnection->resetConnection();\n\n        $command = $this->getCommand($name, $args);\n        $command->write();\n        return $command->read();\n    }\n\n\n    public function setKeyDistributor($name)\n    {\n        if (is_object($name)) {\n            $this->_keyDistributor = $name;\n        } else if (in_array($name, array('crc32', 'consistentHashing'))) {\n            $name = ucfirst($name);\n            require_once \"Rediska/KeyDistributor/$name.php\";\n            $className = \"Rediska_KeyDistributor_$name\";\n            $this->_keyDistributor = new $className;\n        } else {\n            if (!@class_exists($name)) {\n                throw new Rediska_Exception(\"Key distributor '$name' not found. You need include it before or setup autoload.\");\n            }\n            $this->_keyDistributor = new $name;\n        }\n\n        if (!$this->_keyDistributor instanceof Rediska_KeyDistributor_Interface) {\n            throw new Rediska_Exception(\"'$name' must implement Rediska_KeyDistributor_Interface\");\n        }\n\n\n        foreach($this->_connections as $connectionString => $connection) {\n            $this->_keyDistributor->addConnection($connectionString);\n        }\n\n        return $this;\n    }\n\n\n    public function setSerializer($callback)\n    {\n        if (!is_callable($callback)) {\n            throw new Rediska_Exception(\"Wrong serialize callback\");\n        }\n\n        $this->_options['serializer'] = $callback;\n\n        return $this;\n    }\n\n\n    public function setUnserializer($callback)\n    {\n        if (!is_callable($callback)) {\n            throw new Rediska_Exception(\"Wrong unserialize callback\");\n        }\n\n        $this->_options['unserializer'] = $callback;\n\n        return $this;\n    }\n\n\n    public function serialize($value)\n    {\n        if (is_numeric($value)) {\n            return (string)$value;\n        } else {\n            return call_user_func($this->_options['serializer'], $value);\n        }\n    }\n\n\n    public function unserialize($value)\n    {\n        if (is_null($value)) {\n            return null;\n        } else if (is_numeric($value)) {\n            if (strpos($value, '.') !== false) {\n                $number = (integer)$value;\n            } else {\n                $number = (float)$value;\n            }\n\n            if ((string)$number != $value) {\n                $number = $value;\n            }\n\n            return $number;\n        } else {\n            return call_user_func($this->_options['unserializer'], $value);\n        }\n    }\n}\n'twich/www/redis/Rediska/Zend/Application/Resource/Rediska.php'\n:<?php\n\n\nrequire_once 'Rediska.php';\n\n\nrequire_once 'Zend/Application/Resource/ResourceAbstract.php';\n\n\nclass Rediska_Zend_Application_Resource_Rediska extends Zend_Application_Resource_ResourceAbstract\n{\n    const DEFAULT_REGISTRY_KEY = 'rediska';\n\n    public function init()\n    {\n        $options = $this->getOptions();\n\n        if (isset($options['registry_key'])) {\n        \t$key = $options['registry_key'];\n        \tunset($options['registry_key']);\n        } else {\n        \t$key = self::DEFAULT_REGISTRY_KEY;\n        }\n\n        $rediska = new Rediska($options);\n\n        Zend_Registry::set($key, $rediska);\n\n        return $rediska;\n    }\n}",
        "gt": [
            "'twich/www/redis/Rediska/Command/Interface.php'",
            "'twich/www/redis/Rediska.php'",
            "'twich/www/redis/Rediska/Zend/Application/Resource/Rediska.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/index.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/__UNAM_LIB/unam_lib.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/index.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'assets/php/session-header.php';\n\nif($loggedin) {\n    header('Location: pages/miners.php');\n} else {\n    header('Location: pages/login.php');\n}\ndie();\n'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}\n'UnamWebPanel/UnamWebPanel/__UNAM_LIB/unam_lib.php'\n:<?php\n/* Made by Unam Sanctam https:\n\nclass unam_lib {\n    private static $usingCustomErrorHandler;\n\n    function __construct() {\n        self::$usingCustomErrorHandler = false;\n    }\n\n    function unam_dbSelect($conn, $table_name, $fields, $where_array = null, $rowcount=false, $fetchAll=false, $extras=''){\n        $where_flag = [];\n        $where_flag_values = [];\n        if(isset($where_array) && is_array($where_array)){\n            foreach($where_array as $key=>$value) {\n                if($key == '$CUSTOM'){\n                    $where_flag[] = \"$value\";\n                }else if(is_array($value)){\n                    $where_flag[] = \"$key $value[0] ?\";\n                    $where_flag_values[] = $value[1];\n                }else{\n                    $where_flag[] = \"$key = ?\";\n                    $where_flag_values[] = $value;\n                }\n            }\n            $where_flag_string = implode(' AND ', $where_flag);\n        }\n        try{\n            $s = $conn->prepare(\"SELECT \".($rowcount ? \"COUNT(*) as unam_totalCount\" : $fields).\" FROM $table_name\".($where_array && count($where_array) > 0 ? \" WHERE $where_flag_string\" : \"\").\" $extras\");\n            $s->execute($where_flag_values);\n            if($rowcount){\n                return $s->fetch(PDO::FETCH_ASSOC)['unam_totalCount'];\n            }\n            if($fetchAll) {\n                return $s->fetchAll(PDO::FETCH_ASSOC);\n            }\n            return $s->fetch(PDO::FETCH_ASSOC);\n        }\n        catch(PDOException $e){\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return [];\n        }\n    }\n\n    function unam_dbInsert($conn, $table, $arr)\n    {\n        try {\n            $names = join(',', array_keys($arr));\n            $params = [];\n            $valcount = (is_array(reset($arr)) ? count(reset($arr))  : 1);\n            $keycount = count(array_keys($arr));\n            if(is_array(reset($arr))){\n                for($i = 0; $i < $valcount; $i++){\n                    $params = array_merge($params, array_column($arr, $i));\n                }\n            }else{\n                $params = array_values($arr);\n            }\n            $values =  substr(str_repeat(',('.substr(str_repeat(',?', $keycount), 1).')', $valcount), 1);\n            $s = $conn->prepare(\"INSERT INTO $table ($names) VALUES $values\");\n            return $s->execute($params);\n        }\n        catch(PDOException $e){\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return [];\n        }\n    }\n\n    function unam_dbUpdate($conn, $tableName, $colsArray, $where_array)\n    {\n        $UpdateString = [];\n        $ExecuteString = [];\n        foreach($colsArray as $key=>$value)\n        {\n            $UpdateString[] = \"$key = ?\";\n            $ExecuteString[] = $value;\n        }\n\n        $where_flag = [];\n        foreach($where_array as $key=>$value)\n        {\n            if($key == '$CUSTOM'){\n                $where_flag[] = \"$value\";\n            }else if(is_array($value)){\n                $where_flag[] = \"$key $value[0] ?\";\n                $ExecuteString[] = $value[1];\n            }else{\n                $where_flag[] = \"$key = ?\";\n                $ExecuteString[] = $value;\n            }\n        }\n\n        try {\n            $s = $conn->prepare(\"UPDATE $tableName SET \".implode(', ', $UpdateString).\" WHERE \".implode(' AND ', $where_flag));\n            return $s->execute($ExecuteString);\n        }\n        catch(PDOException $e){\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return false;\n        }\n    }\n\n    function unam_dbDelete($conn, $table_name, $where_array)\n    {\n        $where_flag = [];\n        $where_flag_values = [];\n        foreach($where_array as $key=>$value)\n        {\n            if($key == '$CUSTOM'){\n                $where_flag[] = \"$value\";\n            }else if(is_array($value)){\n                $where_flag[] = \"$key $value[0] ?\";\n                $where_flag_values[] = $value[1];\n            }else{\n                $where_flag[] = \"$key = ?\";\n                $where_flag_values[] = $value;\n            }\n        }\n\n        $where_flag_string = implode(' AND ', $where_flag);\n        try {\n            $s = $conn->prepare(\"DELETE FROM $table_name WHERE $where_flag_string\");\n            return $s->execute($where_flag_values);\n        }\n        catch(PDOException $e) {\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return [];\n        }\n    }\n\n    function unam_sanitize($input) {\n        if (is_array($input)) {\n            foreach ($input as $key => $value) {\n                $input[$key] = self::unam_sanitize($value);\n            }\n            return $input;\n        }\n        return htmlspecialchars($input, ENT_QUOTES, 'UTF-8', false);\n    }\n\n\n    function unam_filterParameter($param, $maxlength = 1000, $default = ''){\n        if(!isset($_POST[$param]) && !isset($_GET[$param])) {\n            return $default;\n        }\n        $fparam = self::unam_arrayWalkRecursive($_POST[$param] ?? $_GET[$param], function(&$v) use(&$maxlength){ $v = self::unam_sanitize(substr($v, 0, $maxlength)); });\n        return (count($fparam) == 1 ? $fparam[0] : $fparam);\n    }\n\n    function unam_filterAllParameters($maxlength = 1000, $default = '') {\n        $paramarr = array_merge($_POST, $_GET);\n        $outarr = [];\n        if(is_array($paramarr)){\n            foreach($paramarr as $param=>$data){\n                $outarr[$param] = self::unam_filterParameter($param, $maxlength, $default);\n            }\n        }\n        return $outarr;\n    }\n\n    function unam_arrayWalkRecursive($arr, $function){\n        $arr = is_array($arr) ? $arr : [$arr];\n        array_walk_recursive($arr, $function);\n        return $arr;\n    }\n\n    function unam_checkCondition($cond, $resp){\n        if($cond === true){\n            self::unam_echoFailure($resp);\n            die();\n        }\n    }\n\n    function unam_echoSuccess($successmsg=''){\n        echo json_encode(['response' => 'success', 'successmsg'=>$successmsg]);\n    }\n\n    function unam_echoFailure($errormsg){\n        echo json_encode(['response'=>'failure', 'errormsg'=>$errormsg]);\n    }\n\n    function unam_getBrowserLanguages($available = [], $default = 'en') {\n        if (isset( $_SERVER[ 'HTTP_ACCEPT_LANGUAGE' ])) {\n            $langs = explode( ',', $_SERVER['HTTP_ACCEPT_LANGUAGE'] );\n            if(empty($available)) {\n                return $langs[0];\n            }\n            foreach($langs as $lang){\n                $lang = substr($lang, 0, 2);\n                if(in_array( $lang, $available)){\n                    return $lang;\n                }\n            }\n        }\n        return $default;\n    }\n\n    function unam_toggleCustomErrorHandling() {\n        if(self::$usingCustomErrorHandler){\n            restore_error_handler();\n            self::$usingCustomErrorHandler = false;\n            return false;\n        }else{\n            set_error_handler([$this, 'unam_customErrorHandler']);\n            self::$usingCustomErrorHandler = true;\n            return true;\n        }\n    }\n\n    function unam_customErrorHandler($errno, $errstr, $error_file, $error_line, $error_context = null) {\n        global $SYSTEM_PHP_ERROR;\n        $SYSTEM_PHP_ERROR=false;\n        $err_hostname_ip = $_SERVER['REMOTE_ADDR'] ;\n\n        $errout = \"<br/><b>Date and Time:</b> \".date('Y/m/d H:i:s');\n        $errout .= \"<br/><b>In file:</b> $error_file\";\n        $errout .= \"<br/><b>On line:</b> $error_line\";\n        $errout .= \"<br/><b>Error was: </b> [$errno] $errstr\";\n        $errout .= \"<br/><b>Remote IP:</b> $err_hostname_ip\";\n        $errout .= \"<hr/>\";\n\n        self::unam_writeError($errout);\n        $SYSTEM_PHP_ERROR=true;\n    }\n\n    function unam_writeError($errormessage){\n        if(self::$usingCustomErrorHandler) {\n            file_put_contents(__DIR__.\"/Logs/php-error-\".date('d-m-Y').\".html\", \"ERROR: $errormessage\", FILE_APPEND);\n        }\n    }\n}\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/__UNAM_LIB/unam_lib.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/index.php'"
        ]
    },
    {
        "files": [
            "'es-wp-query/es-wp-query.php'",
            "'es-wp-query/class-es-wp-date-query.php'",
            "'es-wp-query/tests/bootstrap.php'"
        ],
        "content": "'es-wp-query/es-wp-query.php'\n:<?php\n\n\n\n\ndefine( 'ES_WP_QUERY_PATH', dirname( __FILE__ ) );\n\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-query-wrapper.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-tax-query.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-date-query.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-meta-query.php';\nrequire_once ES_WP_QUERY_PATH . '/class-es-wp-query-shoehorn.php';\nrequire_once ES_WP_QUERY_PATH . '/functions.php';\n\n'es-wp-query/class-es-wp-date-query.php'\n:<?php\n\n\n\nclass ES_WP_Date_Query extends WP_Date_Query {\n\n\n\tpublic function get_dsl( $es_query ) {\n\n\t\t$filter = array();\n\n\t\tforeach ( $this->queries as $query ) {\n\t\t\t$filter_parts = $this->get_es_subquery( $query, $es_query );\n\t\t\tif ( ! empty( $filter_parts ) ) {\n\n\t\t\t\tif ( 1 === count( $filter_parts ) ) {\n\t\t\t\t\t$filter[] = reset( $filter_parts );\n\t\t\t\t} else {\n\t\t\t\t\t$filter[] = array(\n\t\t\t\t\t\t'bool' => array(\n\t\t\t\t\t\t\t'filter' => $filter_parts,\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tif ( 1 === count( $filter ) ) {\n\t\t\t$filter = reset( $filter );\n\t\t} elseif ( ! empty( $filter ) ) {\n\t\t\tif ( 'or' === strtolower( $this->relation ) ) {\n\t\t\t\t$relation = 'should';\n\t\t\t} else {\n\t\t\t\t$relation = 'filter';\n\t\t\t}\n\t\t\t$filter = array(\n\t\t\t\t'bool' => array(\n\t\t\t\t\t$relation => $filter,\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\t$filter = array();\n\t\t}\n\n\n\t\treturn apply_filters( 'get_date_dsl', $filter, $this );\n\t}\n\n\n\tprotected function get_es_subquery( $query, $es_query ) {\n\n\t\tif ( ! is_array( $query ) ) {\n\t\t\treturn array();\n\t\t}\n\n\n\t\t$filter_parts = array();\n\n\t\t$field = ( ! empty( $query['column'] ) ) ? esc_sql( $query['column'] ) : $this->column;\n\t\t$field = $this->validate_column( $field );\n\n\n\t\t$field = preg_replace( '/^.*\\./', '', $field );\n\n\t\t$compare = $this->get_compare( $query );\n\n\n\t\tif ( ! empty( $query['after'] ) || ! empty( $query['before'] ) ) {\n\t\t\t$inclusive = ! empty( $query['inclusive'] );\n\n\t\t\tif ( $inclusive ) {\n\t\t\t\t$lt = 'lte';\n\t\t\t\t$gt = 'gte';\n\t\t\t} else {\n\t\t\t\t$lt = 'lt';\n\t\t\t\t$gt = 'gt';\n\t\t\t}\n\n\t\t\t$range = array();\n\n\t\t\tif ( ! empty( $query['after'] ) ) {\n\t\t\t\t$range[ $gt ] = $this->build_datetime( $query['after'], ! $inclusive );\n\t\t\t}\n\n\t\t\tif ( ! empty( $query['before'] ) ) {\n\t\t\t\t$range[ $lt ] = $this->build_datetime( $query['before'], $inclusive );\n\t\t\t}\n\n\t\t\tif ( ! empty( $range ) ) {\n\t\t\t\t$filter_parts[] = $es_query->dsl_range( $es_query->es_map( $field ), $range );\n\t\t\t}\n\t\t\tunset( $range );\n\t\t}\n\n\n\t\tif ( isset( $query['monthnum'] ) ) {\n\t\t\t$query['month'] = $query['monthnum'];\n\t\t}\n\t\tif ( isset( $query['w'] ) ) {\n\t\t\t$query['week'] = $query['w'];\n\t\t}\n\t\tif ( isset( $query['w'] ) ) {\n\t\t\t$query['week'] = $query['w'];\n\t\t}\n\t\tif ( isset( $query['dayofyear'] ) ) {\n\t\t\t$query['day_of_year'] = $query['dayofyear'];\n\t\t}\n\t\tif ( isset( $query['dayofweek'] ) ) {\n\n\t\t\t$day_of_week = 1 === $query['dayofweek'] ? 7 : $query['dayofweek'] - 1;\n\n\n\t\t\t$query['day_of_week'] = apply_filters( 'es_date_query_dayofweek', $day_of_week, $query['dayofweek'] );\n\t\t}\n\n\t\tforeach ( array( 'year', 'month', 'week', 'day', 'day_of_year', 'day_of_week' ) as $date_token ) {\n\t\t\tif ( isset( $query[ $date_token ] ) ) {\n\t\t\t\t$part = $this->build_dsl_part(\n\t\t\t\t\t$es_query->es_map( \"{$field}.{$date_token}\" ),\n\t\t\t\t\t$query[ $date_token ],\n\t\t\t\t\t$compare\n\t\t\t\t);\n\t\t\t\tif ( false !== $part ) {\n\t\t\t\t\t$filter_parts[] = $part;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t$query = wp_parse_args(\n\t\t\t$query,\n\t\t\tarray(\n\t\t\t\t'hour'   => null,\n\t\t\t\t'minute' => null,\n\t\t\t\t'second' => null,\n\t\t\t)\n\t\t);\n\n\t\t$time = $this->build_es_time( $compare, $query['hour'], $query['minute'], $query['second'] );\n\t\tif ( false === $time ) {\n\t\t\tforeach ( array( 'hour', 'minute', 'second' ) as $date_token ) {\n\t\t\t\tif ( isset( $query[ $date_token ] ) ) {\n\t\t\t\t\t$part = $this->build_dsl_part(\n\t\t\t\t\t\t$es_query->es_map( \"{$field}.{$date_token}\" ),\n\t\t\t\t\t\t$query[ $date_token ],\n\t\t\t\t\t\t$compare\n\t\t\t\t\t);\n\t\t\t\t\tif ( false !== $part ) {\n\t\t\t\t\t\t$filter_parts[] = $part;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif ( 1 > $time ) {\n\t\t\t\t$filter_parts[] = $this->build_dsl_part( $es_query->es_map( \"{$field}.seconds_from_hour\" ), $time, $compare, 'floatval' );\n\t\t\t} else {\n\t\t\t\t$filter_parts[] = $this->build_dsl_part( $es_query->es_map( \"{$field}.seconds_from_day\" ), $time, $compare, 'floatval' );\n\t\t\t}\n\t\t}\n\n\t\treturn $filter_parts;\n\t}\n\n\n\tpublic static function build_datetime( $datetime, $default_to_max = false ) {\n\t\t$now = current_time( 'timestamp' );\n\n\t\tif ( ! is_array( $datetime ) ) {\n\n\t\t\treturn gmdate( 'Y-m-d H:i:s', strtotime( $datetime, $now ) );\n\t\t}\n\n\t\t$datetime = array_map( 'absint', $datetime );\n\n\t\tif ( ! isset( $datetime['year'] ) ) {\n\t\t\t$datetime['year'] = gmdate( 'Y', $now );\n\t\t}\n\n\t\tif ( ! isset( $datetime['month'] ) ) {\n\t\t\t$datetime['month'] = ( $default_to_max ) ? 12 : 1;\n\t\t}\n\n\t\tif ( ! isset( $datetime['day'] ) ) {\n\t\t\t$datetime['day'] = ( $default_to_max ) ? (int) date( 't', mktime( 0, 0, 0, $datetime['month'], 1, $datetime['year'] ) ) : 1;\n\t\t}\n\n\t\tif ( ! isset( $datetime['hour'] ) ) {\n\t\t\t$datetime['hour'] = ( $default_to_max ) ? 23 : 0;\n\t\t}\n\n\t\tif ( ! isset( $datetime['minute'] ) ) {\n\t\t\t$datetime['minute'] = ( $default_to_max ) ? 59 : 0;\n\t\t}\n\n\t\tif ( ! isset( $datetime['second'] ) ) {\n\t\t\t$datetime['second'] = ( $default_to_max ) ? 59 : 0;\n\t\t}\n\n\t\treturn sprintf( '%04d-%02d-%02d %02d:%02d:%02d', $datetime['year'], $datetime['month'], $datetime['day'], $datetime['hour'], $datetime['minute'], $datetime['second'] );\n\t}\n\n\n\tpublic static function build_date_range( $date, $compare, $date2 = null, $compare2 = null ) {\n\n\t\tif ( isset( $date2 ) && isset( $compare2 ) ) {\n\t\t\treturn array_merge( self::build_date_range( $date, $compare ), self::build_date_range( $date2, $compare2 ) );\n\t\t}\n\n\n\t\t$upper_edge = true;\n\t\t$lower_edge = false;\n\n\t\tswitch ( $compare ) {\n\t\t\tcase '!=':\n\t\t\tcase '=':\n\t\t\t\treturn array(\n\t\t\t\t\t'gte' => self::build_datetime( $date, $lower_edge ),\n\t\t\t\t\t'lte' => self::build_datetime( $date, $upper_edge ),\n\t\t\t\t);\n\n\t\t\tcase '>':\n\t\t\t\treturn array( 'gt' => self::build_datetime( $date, $upper_edge ) );\n\t\t\tcase '>=':\n\t\t\t\treturn array( 'gte' => self::build_datetime( $date, $lower_edge ) );\n\n\t\t\tcase '<':\n\t\t\t\treturn array( 'lt' => self::build_datetime( $date, $lower_edge ) );\n\t\t\tcase '<=':\n\t\t\t\treturn array( 'lte' => self::build_datetime( $date, $upper_edge ) );\n\t\t}\n\t}\n\n\n\tpublic function build_dsl_part( $field, $value, $compare, $sanitize = 'intval' ) {\n\t\tif ( ! isset( $value ) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$part = false;\n\t\tswitch ( $compare ) {\n\t\t\tcase 'IN':\n\t\t\tcase 'NOT IN':\n\t\t\t\t$part = ES_WP_Query_Wrapper::dsl_terms( $field, array_map( $sanitize, (array) $value ) );\n\t\t\t\tbreak;\n\n\t\t\tcase 'BETWEEN':\n\t\t\tcase 'NOT BETWEEN':\n\t\t\t\tif ( ! is_array( $value ) ) {\n\t\t\t\t\t$value = array( $value, $value );\n\t\t\t\t} elseif ( count( $value ) >= 2 && ( ! isset( $value[0] ) || ! isset( $value[1] ) ) ) {\n\t\t\t\t\t$value = array( array_shift( $value ), array_shift( $value ) );\n\t\t\t\t} elseif ( count( $value ) ) {\n\t\t\t\t\t$value = reset( $value );\n\t\t\t\t\t$value = array( $value, $value );\n\t\t\t\t}\n\n\t\t\t\tif ( ! isset( $value[0] ) || ! isset( $value[1] ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t$value = array_map( $sanitize, $value );\n\t\t\t\tsort( $value );\n\n\t\t\t\t$part = ES_WP_Query_Wrapper::dsl_range(\n\t\t\t\t\t$field,\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'gte' => $value[0],\n\t\t\t\t\t\t'lte' => $value[1],\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tbreak;\n\n\t\t\tcase '>':\n\t\t\tcase '>=':\n\t\t\tcase '<':\n\t\t\tcase '<=':\n\t\t\t\tswitch ( $compare ) {\n\t\t\t\t\tcase '>':\n\t\t\t\t\t\t$operator = 'gt';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '>=':\n\t\t\t\t\t\t$operator = 'gte';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '<':\n\t\t\t\t\t\t$operator = 'lt';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '<=':\n\t\t\t\t\t\t$operator = 'lte';\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$part = ES_WP_Query_Wrapper::dsl_range( $field, array( $operator => $sanitize( $value ) ) );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$part = ES_WP_Query_Wrapper::dsl_terms( $field, $sanitize( $value ) );\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif ( ! empty( $part ) && in_array( $compare, array( '!=', 'NOT IN', 'NOT BETWEEN' ), true ) ) {\n\t\t\treturn array(\n\t\t\t\t'bool' => array(\n\t\t\t\t\t'must_not' => $part,\n\t\t\t\t),\n\t\t\t);\n\t\t} else {\n\t\t\treturn $part;\n\t\t}\n\t}\n\n\n\tpublic function build_es_time( $compare, $hour = null, $minute = null, $second = null ) {\n\n\t\tif ( in_array( $compare, array( 'IN', 'NOT IN', 'BETWEEN', 'NOT BETWEEN' ), true ) ) {\n\t\t\treturn false;\n\t\t}\n\n\n\t\tif ( count( array_filter( array( $hour, $minute, $second ), 'is_null' ) ) > 1 || is_null( $minute ) ) {\n\t\t\treturn false;\n\t\t}\n\n\n\t\tif ( ! $hour ) {\n\t\t\t$hour = 0;\n\t\t}\n\n\t\treturn mktime( $hour, $minute, $second, 1, 1, 1970 );\n\t}\n}\n\n'es-wp-query/tests/bootstrap.php'\n:<?php\n\ndefine( 'ES_WP_QUERY_TEST_ENV', true );\n\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\nif ( ! $_tests_dir ) {\n\t$_tests_dir = '/tmp/wordpress-tests-lib';\n}\n\n$_es_version = getenv( 'ES_VERSION' );\nif ( ! defined( 'ES_VERSION' ) && $_es_version ) {\n\tdefine( 'ES_VERSION', $_es_version );\n}\n\nrequire_once $_tests_dir . '/includes/functions.php';\n\nfunction _manually_load_plugin() {\n\trequire dirname( __FILE__ ) . '/../es-wp-query.php';\n\n\tif ( file_exists( dirname( __FILE__ ) . '/es.php' ) ) {\n\t\trequire_once( dirname( __FILE__ ) . '/es.php' );\n\t} elseif ( getenv( 'TRAVIS' ) ) {\n\t\tes_wp_query_load_adapter( 'travis' );\n\t} else {\n\t\techo \"\\n\\nSetup Required\\n\"\n\t\t\t. \"===========================================================\\n\"\n\t\t\t. \"You must add an adapter to the plugin for this to work.\\n\"\n\t\t\t. \"You can add it to the plugin in es-wp-query/tests/es.php\\n\"\n\t\t\t. \"or elsewhere in your code using es_wp_query_load_adapter().\\n\"\n\t\t\t. \"See the readme for more details.\\n\\n\";\n\t\texit( 1 );\n\t}\n\n\tif ( ! es_wp_query_verify_es_is_running() ) {\n\t\techo \"\\n\\nFatal: bootstrap check failed!\\n\";\n\t\texit( 1 );\n\t}\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\n\n\nfunction _es_wp_query_set_es_to_true( \\WP_Query $query ) {\n\t$query->set( 'es', true );\n}\n\nrequire $_tests_dir . '/includes/bootstrap.php';\n",
        "gt": [
            "'es-wp-query/class-es-wp-date-query.php'",
            "'es-wp-query/es-wp-query.php'",
            "'es-wp-query/tests/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'craft-golive/golive/vendor/phpseclib/phpseclib/phpseclib/Crypt/TripleDES.php'",
            "'craft-golive/golive/vendor/phpseclib/phpseclib/tests/bootstrap.php'",
            "'craft-golive/golive/vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php'"
        ],
        "content": "'craft-golive/golive/vendor/phpseclib/phpseclib/phpseclib/Crypt/TripleDES.php'\n:<?php\n\n\n\n\nif (!class_exists('Crypt_DES')) {\n    include_once 'DES.php';\n}\n\n\ndefine('CRYPT_DES_MODE_3CBC', -2);\n\n\ndefine('CRYPT_DES_MODE_CBC3', CRYPT_DES_MODE_CBC);\n\n\nclass Crypt_TripleDES extends Crypt_DES\n{\n\n    var $password_key_size = 24;\n\n\n    var $password_default_salt = 'phpseclib';\n\n\n    var $const_namespace = 'DES';\n\n\n    var $cipher_name_mcrypt = 'tripledes';\n\n\n    var $cfb_init_len = 750;\n\n\n    var $key_size_max = 24;\n\n\n    var $mode_3cbc;\n\n\n    var $des;\n\n\n    function Crypt_TripleDES($mode = CRYPT_DES_MODE_CBC)\n    {\n        switch ($mode) {\n\n\n            case CRYPT_DES_MODE_3CBC:\n                parent::Crypt_Base(CRYPT_DES_MODE_CBC);\n                $this->mode_3cbc = true;\n\n\n                $this->des = array(\n                    new Crypt_DES(CRYPT_DES_MODE_CBC),\n                    new Crypt_DES(CRYPT_DES_MODE_CBC),\n                    new Crypt_DES(CRYPT_DES_MODE_CBC),\n                );\n\n\n                $this->des[0]->disablePadding();\n                $this->des[1]->disablePadding();\n                $this->des[2]->disablePadding();\n                break;\n\n            default:\n                parent::Crypt_Base($mode);\n        }\n    }\n\n\n    function setIV($iv)\n    {\n        parent::setIV($iv);\n        if ($this->mode_3cbc) {\n            $this->des[0]->setIV($iv);\n            $this->des[1]->setIV($iv);\n            $this->des[2]->setIV($iv);\n        }\n    }\n\n\n    function setKey($key)\n    {\n        $length = strlen($key);\n        if ($length > 8) {\n            $key = str_pad(substr($key, 0, 24), 24, chr(0));\n\n\n\n        } else {\n            $key = str_pad($key, 8, chr(0));\n        }\n        parent::setKey($key);\n\n\n\n\n\n        if ($this->mode_3cbc && $length > 8) {\n            $this->des[0]->setKey(substr($key,  0, 8));\n            $this->des[1]->setKey(substr($key,  8, 8));\n            $this->des[2]->setKey(substr($key, 16, 8));\n        }\n    }\n\n\n    function encrypt($plaintext)\n    {\n\n\n\n\n        if ($this->mode_3cbc && strlen($this->key) > 8) {\n            return $this->des[2]->encrypt(\n                $this->des[1]->decrypt(\n                    $this->des[0]->encrypt(\n                        $this->_pad($plaintext)\n                    )\n                )\n            );\n        }\n\n        return parent::encrypt($plaintext);\n    }\n\n\n    function decrypt($ciphertext)\n    {\n        if ($this->mode_3cbc && strlen($this->key) > 8) {\n            return $this->_unpad(\n                $this->des[0]->decrypt(\n                    $this->des[1]->encrypt(\n                        $this->des[2]->decrypt(\n                            str_pad($ciphertext, (strlen($ciphertext) + 7) & 0xFFFFFFF8, \"\\0\")\n                        )\n                    )\n                )\n            );\n        }\n\n        return parent::decrypt($ciphertext);\n    }\n\n\n    function enableContinuousBuffer()\n    {\n        parent::enableContinuousBuffer();\n        if ($this->mode_3cbc) {\n            $this->des[0]->enableContinuousBuffer();\n            $this->des[1]->enableContinuousBuffer();\n            $this->des[2]->enableContinuousBuffer();\n        }\n    }\n\n\n    function disableContinuousBuffer()\n    {\n        parent::disableContinuousBuffer();\n        if ($this->mode_3cbc) {\n            $this->des[0]->disableContinuousBuffer();\n            $this->des[1]->disableContinuousBuffer();\n            $this->des[2]->disableContinuousBuffer();\n        }\n    }\n\n\n    function _setupKey()\n    {\n        switch (true) {\n\n\n            case strlen($this->key) <= 8:\n                $this->des_rounds = 1;\n                break;\n\n\n            default:\n                $this->des_rounds = 3;\n\n\n                if ($this->mode_3cbc) {\n                    $this->des[0]->_setupKey();\n                    $this->des[1]->_setupKey();\n                    $this->des[2]->_setupKey();\n\n\n\n                    return;\n                }\n        }\n\n        parent::_setupKey();\n    }\n}\n\n'craft-golive/golive/vendor/phpseclib/phpseclib/tests/bootstrap.php'\n:<?php\n\n\ndate_default_timezone_set('UTC');\n\n\n\nset_include_path(implode(PATH_SEPARATOR, array(\n    dirname(__FILE__) . '/../phpseclib/',\n    dirname(__FILE__) . '/',\n    get_include_path(),\n)));\n\nrequire_once 'Crypt/Random.php';\n\nfunction phpseclib_autoload($class)\n{\n    $file = str_replace('_', '/', $class) . '.php';\n\n    if (phpseclib_resolve_include_path($file)) {\n\n        require $file;\n\n    }\n}\n\nspl_autoload_register('phpseclib_autoload');\n\n'craft-golive/golive/vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php'\n:<?php\n\n\n\n\n\n\nif (!function_exists('crypt_random_string')) {\n\n    define('CRYPT_RANDOM_IS_WINDOWS', strtoupper(substr(PHP_OS, 0, 3)) === 'WIN');\n\n\n    function crypt_random_string($length)\n    {\n        if (CRYPT_RANDOM_IS_WINDOWS) {\n\n\n            if (function_exists('mcrypt_create_iv') && function_exists('class_alias')) {\n                return mcrypt_create_iv($length);\n            }\n\n\n\n\n\n\n\n\n\n\n\n\n\n            if (function_exists('openssl_random_pseudo_bytes') && version_compare(PHP_VERSION, '5.3.4', '>=')) {\n                return openssl_random_pseudo_bytes($length);\n            }\n        } else {\n\n            if (function_exists('openssl_random_pseudo_bytes')) {\n                return openssl_random_pseudo_bytes($length);\n            }\n\n            static $fp = true;\n            if ($fp === true) {\n\n\n                $fp = @fopen('/dev/urandom', 'rb');\n            }\n            if ($fp !== true && $fp !== false) {\n                return fread($fp, $length);\n            }\n\n\n\n\n\n            if (function_exists('mcrypt_create_iv')) {\n                return mcrypt_create_iv($length, MCRYPT_DEV_URANDOM);\n            }\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        static $crypto = false, $v;\n        if ($crypto === false) {\n\n            $old_session_id = session_id();\n            $old_use_cookies = ini_get('session.use_cookies');\n            $old_session_cache_limiter = session_cache_limiter();\n            $_OLD_SESSION = isset($_SESSION) ? $_SESSION : false;\n            if ($old_session_id != '') {\n                session_write_close();\n            }\n\n            session_id(1);\n            ini_set('session.use_cookies', 0);\n            session_cache_limiter('');\n            session_start();\n\n            $v = $seed = $_SESSION['seed'] = pack('H*', sha1(\n                serialize($_SERVER) .\n                serialize($_POST) .\n                serialize($_GET) .\n                serialize($_COOKIE) .\n                serialize($GLOBALS) .\n                serialize($_SESSION) .\n                serialize($_OLD_SESSION)\n            ));\n            if (!isset($_SESSION['count'])) {\n                $_SESSION['count'] = 0;\n            }\n            $_SESSION['count']++;\n\n            session_write_close();\n\n\n            if ($old_session_id != '') {\n                session_id($old_session_id);\n                session_start();\n                ini_set('session.use_cookies', $old_use_cookies);\n                session_cache_limiter($old_session_cache_limiter);\n            } else {\n               if ($_OLD_SESSION !== false) {\n                   $_SESSION = $_OLD_SESSION;\n                   unset($_OLD_SESSION);\n                } else {\n                    unset($_SESSION);\n                }\n            }\n\n\n\n\n\n\n\n\n\n            $key = pack('H*', sha1($seed . 'A'));\n            $iv = pack('H*', sha1($seed . 'C'));\n\n\n\n\n            switch (true) {\n                case phpseclib_resolve_include_path('Crypt/AES.php'):\n                    if (!class_exists('Crypt_AES')) {\n                        include_once 'AES.php';\n                    }\n                    $crypto = new Crypt_AES(CRYPT_AES_MODE_CTR);\n                    break;\n                case phpseclib_resolve_include_path('Crypt/Twofish.php'):\n                    if (!class_exists('Crypt_Twofish')) {\n                        include_once 'Twofish.php';\n                    }\n                    $crypto = new Crypt_Twofish(CRYPT_TWOFISH_MODE_CTR);\n                    break;\n                case phpseclib_resolve_include_path('Crypt/Blowfish.php'):\n                    if (!class_exists('Crypt_Blowfish')) {\n                        include_once 'Blowfish.php';\n                    }\n                    $crypto = new Crypt_Blowfish(CRYPT_BLOWFISH_MODE_CTR);\n                    break;\n                case phpseclib_resolve_include_path('Crypt/TripleDES.php'):\n                    if (!class_exists('Crypt_TripleDES')) {\n                        include_once 'TripleDES.php';\n                    }\n                    $crypto = new Crypt_TripleDES(CRYPT_DES_MODE_CTR);\n                    break;\n                case phpseclib_resolve_include_path('Crypt/DES.php'):\n                    if (!class_exists('Crypt_DES')) {\n                        include_once 'DES.php';\n                    }\n                    $crypto = new Crypt_DES(CRYPT_DES_MODE_CTR);\n                    break;\n                case phpseclib_resolve_include_path('Crypt/RC4.php'):\n                    if (!class_exists('Crypt_RC4')) {\n                        include_once 'RC4.php';\n                    }\n                    $crypto = new Crypt_RC4();\n                    break;\n                default:\n                    user_error('crypt_random_string requires at least one symmetric cipher be loaded');\n                    return false;\n            }\n\n            $crypto->setKey($key);\n            $crypto->setIV($iv);\n            $crypto->enableContinuousBuffer();\n        }\n\n\n\n\n\n\n\n\n\n\n\n        $result = '';\n        while (strlen($result) < $length) {\n            $i = $crypto->encrypt(microtime());\n            $r = $crypto->encrypt($i ^ $v);\n            $v = $crypto->encrypt($r ^ $i);\n            $result.= $r;\n        }\n        return substr($result, 0, $length);\n    }\n}\n\nif (!function_exists('phpseclib_resolve_include_path')) {\n\n    function phpseclib_resolve_include_path($filename)\n    {\n        if (function_exists('stream_resolve_include_path')) {\n            return stream_resolve_include_path($filename);\n        }\n\n\n        if (file_exists($filename)) {\n            return realpath($filename);\n        }\n\n        $paths = PATH_SEPARATOR == ':' ?\n            preg_split('\n            explode(PATH_SEPARATOR, get_include_path());\n        foreach ($paths as $prefix) {\n\n            $ds = substr($prefix, -1) == DIRECTORY_SEPARATOR ? '' : DIRECTORY_SEPARATOR;\n            $file = $prefix . $ds . $filename;\n            if (file_exists($file)) {\n                return realpath($file);\n            }\n        }\n\n        return false;\n    }\n}\n",
        "gt": [
            "'craft-golive/golive/vendor/phpseclib/phpseclib/phpseclib/Crypt/TripleDES.php'",
            "'craft-golive/golive/vendor/phpseclib/phpseclib/phpseclib/Crypt/Random.php'",
            "'craft-golive/golive/vendor/phpseclib/phpseclib/tests/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'Cavalcade/inc/namespace.php'",
            "'Cavalcade/inc/class-command.php'",
            "'Cavalcade/tests/bootstrap.php'",
            "'Cavalcade/plugin.php'"
        ],
        "content": "'Cavalcade/inc/namespace.php'\n:<?php\n\n\nnamespace HM\\Cavalcade\\Plugin;\n\nuse WP_CLI;\n\n\nfunction bootstrap() {\n\tregister_cache_groups();\n\n\tif ( ! is_installed() && ! create_tables() ) {\n\t\tadd_action( 'wp_install', __NAMESPACE__ . '\\\\bootstrap' );\n\t\treturn;\n\t}\n\n\tregister_cli_commands();\n\tmaybe_populate_site_option();\n\tConnector\\bootstrap();\n}\n\n\nfunction register_cache_groups() {\n\twp_cache_add_global_groups( [ 'cavalcade' ] );\n\twp_cache_add_non_persistent_groups( [ 'cavalcade-jobs' ] );\n}\n\n\nfunction register_cli_commands() {\n\tif ( ! defined( 'WP_CLI' ) || ! WP_CLI ) {\n\t\treturn;\n\t}\n\n\trequire __DIR__ . '/class-command.php';\n\tWP_CLI::add_command( 'cavalcade', __NAMESPACE__ . '\\\\Command' );\n}\n\n\nfunction is_installed() {\n\tglobal $wpdb;\n\n\tif ( wp_cache_get( 'installed', 'cavalcade' ) ) {\n\t\treturn true;\n\t}\n\n\t$installed = ( count( $wpdb->get_col( \"SHOW TABLES LIKE '{$wpdb->base_prefix}cavalcade_%'\" ) ) === 2 );\n\n\tif ( $installed ) {\n\n\t\twp_cache_set( 'installed', $installed, 'cavalcade' );\n\t}\n\n\treturn $installed;\n}\n\nfunction create_tables() {\n\tif ( ! is_blog_installed() ) {\n\n\t\treturn false;\n\t}\n\n\tglobal $wpdb;\n\n\t$charset_collate = $wpdb->get_charset_collate();\n\n\t$query = \"CREATE TABLE IF NOT EXISTS `{$wpdb->base_prefix}cavalcade_jobs` (\n\t\t`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n\t\t`site` bigint(20) unsigned NOT NULL,\n\n\t\t`hook` varchar(255) NOT NULL,\n\t\t`args` longtext NOT NULL,\n\n\t\t`start` datetime NOT NULL,\n\t\t`nextrun` datetime NOT NULL,\n\t\t`interval` int unsigned DEFAULT NULL,\n\t\t`status` varchar(255) NOT NULL DEFAULT 'waiting',\n\t\t`schedule` varchar(255) DEFAULT NULL,\n\n\t\tPRIMARY KEY (`id`),\n\t\tKEY `status` (`status`),\n\t\tKEY `site` (`site`),\n\t\tKEY `hook` (`hook`)\n\t) ENGINE=InnoDB {$charset_collate};\\n\";\n\n\n\t$wpdb->query( $query );\n\n\t$query = \"CREATE TABLE IF NOT EXISTS `{$wpdb->base_prefix}cavalcade_logs` (\n\t\t`id` bigint(20) unsigned NOT NULL AUTO_INCREMENT,\n\t\t`job` bigint(20) NOT NULL,\n\t\t`status` varchar(255) NOT NULL DEFAULT '',\n\t\t`timestamp` datetime NOT NULL,\n\t\t`content` longtext NOT NULL,\n\t\tPRIMARY KEY (`id`),\n\t\tKEY `job` (`job`),\n\t\tKEY `status` (`status`)\n\t) ENGINE=InnoDB {$charset_collate};\\n\";\n\n\t$wpdb->query( $query );\n\n\twp_cache_set( 'installed', true, 'cavalcade' );\n\tupdate_site_option( 'cavalcade_db_version', DATABASE_VERSION );\n\n\n\tadd_filter( 'populate_network_meta', function ( $site_meta ) {\n\t\t$site_meta['cavalcade_db_version'] = DATABASE_VERSION;\n\t\treturn $site_meta;\n\t} );\n\treturn true;\n}\n\n\nfunction maybe_populate_site_option() {\n\tif ( is_multisite() ) {\n\t\treturn;\n\t}\n\n\t$set_site_meta = function ( $site_meta ) {\n\t\t$site_meta['cavalcade_db_version'] = get_option( 'cavalcade_db_version' );\n\t\treturn $site_meta;\n\t};\n\n\tadd_filter( 'populate_network_meta', $set_site_meta );\n}\n\n\nfunction get_jobs( $site = null ) {\n\tglobal $wpdb;\n\n\tif ( empty( $site ) ) {\n\t\t$site = get_current_blog_id();\n\t}\n\n\treturn Job::get_by_site( $site );\n}\n\n\nfunction get_schedules_by_interval() {\n\t$schedules = [];\n\n\tforeach ( wp_get_schedules() as $name => $schedule ) {\n\t\t$schedules[ (int) $schedule['interval'] ] = $name;\n\t}\n\n\treturn $schedules;\n}\n\n\nfunction get_schedule_by_interval( $interval = null ) {\n\tif ( empty( $interval ) ) {\n\t\treturn '__fake_schedule';\n\t}\n\n\t$schedules = get_schedules_by_interval();\n\n\tif ( ! empty ( $schedules[ (int) $interval ] ) ) {\n\t\treturn $schedules[ (int) $interval ];\n\t}\n\n\treturn '__fake_schedule';\n}\n\n\nfunction get_database_version() {\n\t$version = (int) get_site_option( 'cavalcade_db_version' );\n\n\n\tif ( $version < 2 ) {\n\t\t$version = 1;\n\t}\n\n\treturn $version;\n}\n\n'Cavalcade/inc/class-command.php'\n:<?php\n\n\nnamespace HM\\Cavalcade\\Plugin;\n\nuse WP_CLI;\nuse WP_CLI_Command;\n\nclass Command extends WP_CLI_Command {\n\n\tpublic function run( $args, $assoc_args ) {\n\t\t$job = Job::get( $args[0] );\n\t\tif ( empty( $job ) ) {\n\t\t\tWP_CLI::error( 'Invalid job ID' );\n\t\t}\n\n\t\tdefine( 'CAVALCADE_JOB_ID', $job->id );\n\n\n\t\tpcntl_signal( SIGTERM, SIG_IGN );\n\n\n\t\tdefined( 'DOING_CRON' ) or define( 'DOING_CRON', true );\n\n\n\t\tdo_action_ref_array( $job->hook, $job->args );\n\t}\n\n\n\tpublic function log( $args, $assoc_args ) {\n\n\t\tglobal $wpdb;\n\n\t\t$log_table = $wpdb->base_prefix . 'cavalcade_logs';\n\t\t$job_table = $wpdb->base_prefix . 'cavalcade_jobs';\n\n\t\t$assoc_args = wp_parse_args( $assoc_args, [\n\t\t\t'format'  => 'table',\n\t\t\t'fields'  => 'job,hook,timestamp,status',\n\t\t\t'hook'    => null,\n\t\t\t'job'     => null,\n\t\t]);\n\n\t\t$where = [];\n\t\t$data  = [];\n\n\t\tif ( $assoc_args['job'] ) {\n\t\t\t$where[] = 'job = %d';\n\t\t\t$data[]  = $assoc_args['job'];\n\t\t}\n\n\t\tif ( $assoc_args['hook'] ) {\n\t\t\t$where[] = 'hook = %s';\n\t\t\t$data[] = $assoc_args['hook'];\n\t\t}\n\n\t\t$where = $where ? 'WHERE ' . implode( ' AND ', $where ) : '';\n\n\t\t$query = \"SELECT $log_table.*, $job_table.hook,$job_table.args FROM {$wpdb->base_prefix}cavalcade_logs INNER JOIN $job_table ON $log_table.job = $job_table.id $where\";\n\n\t\tif ( $data ) {\n\t\t\t$query = $wpdb->prepare( $query, $data );\n\t\t}\n\n\t\t$logs = $wpdb->get_results( $query );\n\n\t\t\\WP_CLI\\Utils\\format_items( $assoc_args['format'], $logs, explode( ',', $assoc_args['fields'] ) );\n\t}\n\n\n\tpublic function jobs( $args, $assoc_args ) {\n\n\t\tglobal $wpdb;\n\n\t\t$assoc_args = wp_parse_args(\n\t\t\t$assoc_args,\n\t\t\t[\n\t\t\t\t'format'  => 'table',\n\t\t\t\t'fields'  => 'id,site,hook,start,nextrun,status',\n\t\t\t\t'id'      => null,\n\t\t\t\t'site'    => null,\n\t\t\t\t'hook'    => null,\n\t\t\t\t'status'  => null,\n\t\t\t\t'limit'   => 20,\n\t\t\t\t'page'    => 1,\n\t\t\t\t'order'   => null,\n\t\t\t\t'orderby' => null,\n\t\t\t]\n\t\t);\n\n\t\t$where    = [];\n\t\t$data     = [];\n\t\t$_order   = [\n\t\t\t'ASC',\n\t\t\t'DESC',\n\t\t];\n\t\t$_orderby = [\n\t\t\t'id',\n\t\t\t'site',\n\t\t\t'hook',\n\t\t\t'args',\n\t\t\t'start',\n\t\t\t'nextrun',\n\t\t\t'interval',\n\t\t\t'status',\n\t\t];\n\t\t$order    = 'DESC';\n\t\t$orderby  = 'id';\n\n\t\tif ( $assoc_args['id'] ) {\n\t\t\t$where[] = 'id = %d';\n\t\t\t$data[]  = $assoc_args['id'];\n\t\t}\n\n\t\tif ( $assoc_args['site'] ) {\n\t\t\t$where[] = 'site = %d';\n\t\t\t$data[]  = $assoc_args['site'];\n\t\t}\n\n\t\tif ( $assoc_args['hook'] ) {\n\t\t\t$where[] = 'hook = %s';\n\t\t\t$data[]  = $assoc_args['hook'];\n\t\t}\n\n\t\tif ( $assoc_args['status'] ) {\n\t\t\t$where[] = 'status = %s';\n\t\t\t$data[]  = $assoc_args['status'];\n\t\t}\n\n\t\tif ( $assoc_args['order'] && in_array( strtoupper( $assoc_args['order'] ), $_order, true ) ) {\n\t\t\t$order = strtoupper( $assoc_args['order'] );\n\t\t}\n\n\t\tif ( $assoc_args['orderby'] && in_array( $assoc_args['orderby'], $_orderby, true ) ) {\n\t\t\t$orderby = $assoc_args['orderby'];\n\t\t}\n\n\t\t$where = $where ? 'WHERE ' . implode( ' AND ', $where ) : '';\n\n\t\t$limit  = 'LIMIT %d';\n\t\t$data[] = absint( $assoc_args['limit'] );\n\t\t$offset = 'OFFSET %d';\n\t\t$data[] = absint( ( $assoc_args['page'] - 1 ) * $assoc_args['limit'] );\n\n\t\t$query = \"SELECT * FROM {$wpdb->base_prefix}cavalcade_jobs $where ORDER BY $orderby $order $limit $offset\";\n\n\t\tif ( $data ) {\n\t\t\t$query = $wpdb->prepare( $query, $data );\n\t\t}\n\n\t\t$logs = $wpdb->get_results( $query );\n\n\t\tif ( empty( $logs ) ) {\n\t\t\t\\WP_CLI::error( 'No Cavalcade jobs found.' );\n\t\t} else {\n\t\t\t\\WP_CLI\\Utils\\format_items( $assoc_args['format'], $logs, explode( ',', $assoc_args['fields'] ) );\n\t\t}\n\n\t}\n\n\n\tpublic function upgrade() {\n\t\tif ( Upgrade\\upgrade_database() ) {\n\t\t\tWP_CLI::success( 'Database version upgraded.' );\n\t\t\treturn;\n\t\t}\n\n\t\tWP_CLI::success( 'Database upgrade not required.' );\n\t}\n}\n\n'Cavalcade/tests/bootstrap.php'\n:<?php\n\n\n\n\n\n\nif ( false !== getenv( 'WP_DEVELOP_DIR' ) ) {\n\t$test_root = getenv( 'WP_DEVELOP_DIR' ) . '/tests/phpunit';\n} elseif ( file_exists( '../../../../tests/phpunit/includes/bootstrap.php' ) ) {\n\t$test_root = '../../../../tests/phpunit';\n} elseif ( file_exists( '/tmp/wordpress-tests-lib/includes/bootstrap.php' ) ) {\n\t$test_root = '/tmp/wordpress-tests-lib';\n}\n\nif ( '1' === getenv( 'WP_MULTISITE' ) ) {\n\tdefine( 'MULTISITE', true );\n\tdefine( 'WP_TESTS_MULTISITE', true );\n}\n\nrequire $test_root . '/includes/functions.php';\n\ntests_add_filter( 'muplugins_loaded', function () {\n\trequire_once dirname( __DIR__ ) . '/plugin.php';\n\n\tHM\\Cavalcade\\Plugin\\create_tables();\n});\n\nrequire $test_root . '/includes/bootstrap.php';\n\n'Cavalcade/plugin.php'\n:<?php\n\n\nnamespace HM\\Cavalcade\\Plugin;\n\nconst DATE_FORMAT = 'Y-m-d H:i:s';\nconst DATABASE_VERSION = 4;\n\nrequire __DIR__ . '/inc/namespace.php';\nrequire __DIR__ . '/inc/class-job.php';\nrequire __DIR__ . '/inc/connector/namespace.php';\nrequire __DIR__ . '/inc/upgrade/namespace.php';\n\nbootstrap();\n\n\nif ( function_exists( 'wp_cache_add_global_groups' ) ) {\n\tregister_cache_groups();\n}\n",
        "gt": [
            "'Cavalcade/inc/class-command.php'",
            "'Cavalcade/inc/namespace.php'",
            "'Cavalcade/plugin.php'",
            "'Cavalcade/tests/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'",
            "'bootstrap-blocks-wordpress-plugin/src/wp-bootstrap-blocks-functions.php'"
        ],
        "content": "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'\n:<?php\n\n\nnamespace WP_Bootstrap_Blocks;\n\nuse WP_Bootstrap_Blocks\\Button\\Button_Block_Type;\nuse WP_Bootstrap_Blocks\\Column\\Column_Block_Type;\nuse WP_Bootstrap_Blocks\\Container\\Container_Block_Type;\nuse WP_Bootstrap_Blocks\\Row\\Row_Block_Type;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nclass WP_Bootstrap_Blocks {\n\n\n\tprotected static $instance = null;\n\n\n\tpublic static $version = '5.2.0';\n\n\n\tpublic $token = 'wp-bootstrap-blocks';\n\n\n\tpublic $assets_dir;\n\n\n\tpublic $assets_url;\n\n\n\tpublic $languages_dir;\n\n\n\tpublic $languages_dir_full;\n\n\n\tpublic function __construct() {\n\t\t$this->define_constants();\n\t\t$this->init_plugin_environment();\n\t\t$this->includes();\n\t\t$this->init_hooks();\n\t\t$this->register_block_types();\n\t\tSettings::init( $this->assets_dir, $this->assets_url );\n\t}\n\n\n\tprotected function define_constants() {\n\t\tif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_ABSPATH' ) ) {\n\t\t\tdefine( 'WP_BOOTSTRAP_BLOCKS_ABSPATH', trailingslashit( dirname( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t}\n\t}\n\n\n\tprotected function init_plugin_environment() {\n\n\t\t$this->assets_dir = WP_BOOTSTRAP_BLOCKS_ABSPATH . 'build/';\n\t\t$this->assets_url = esc_url( trailingslashit( plugins_url( '/build/', WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t$this->languages_dir = dirname( plugin_basename( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) . '/languages/';\n\t\t$this->languages_dir_full = plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'languages/';\n\t}\n\n\n\tpublic function includes() {\n\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/wp-bootstrap-blocks-functions.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/class-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/container/class-container-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/row/class-row-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/column/class-column-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/button/class-button-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/settings/class-settings.php';\n\t}\n\n\n\tprotected function init_hooks() {\n\n\t\tadd_action( 'enqueue_block_assets', array( $this, 'enqueue_block_assets' ) );\n\n\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'enqueue_block_editor_assets' ), 99 );\n\n\n\t\tif ( class_exists( 'WP_Block_Editor_Context' ) ) {\n\n\t\t\tadd_filter( 'block_categories_all', array( $this, 'register_custom_block_category' ), 10, 2 );\n\t\t} else {\n\t\t\tadd_filter( 'block_categories', array( $this, 'register_custom_block_category_old' ), 10, 2 );\n\t\t}\n\n\n\t\tadd_action( 'plugins_loaded', array( $this, 'load_plugin_textdomain' ) );\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'set_script_translations' ), 100 );\n\n\n\t\tadd_action( 'init', array( $this, 'check_version' ) );\n\t}\n\n\n\tpublic function enqueue_block_assets() {\n\n\t\t$enqueue_block_assets = apply_filters( 'wp_bootstrap_blocks_enqueue_block_assets', true );\n\t\tif ( ! $enqueue_block_assets ) {\n\t\t\treturn;\n\t\t}\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-styles',\n\t\t\tesc_url( $this->assets_url ) . 'style-index.css',\n\t\t\tarray(),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function enqueue_block_editor_assets() {\n\n\t\t$index_path = $this->assets_dir . 'index.js';\n\t\t$index_url = esc_url( $this->assets_url ) . 'index.js';\n\t\t$index_asset_file = $this->assets_dir . 'index.asset.php';\n\t\t$index_asset = file_exists( $index_asset_file )\n\t\t\t? require_once $index_asset_file\n\t\t\t: null;\n\t\t$index_dependencies = isset( $index_asset['dependencies'] ) ? $index_asset['dependencies'] : array();\n\t\t$index_version = isset( $index_asset['version'] ) ? $index_asset['version'] : filemtime( $index_path );\n\n\t\twp_enqueue_script(\n\t\t\t$this->token . '-js',\n\t\t\t$index_url,\n\t\t\t$index_dependencies,\n\t\t\t$index_version,\n\t\t\ttrue\n\t\t);\n\n\t\twp_localize_script(\n\t\t\t$this->token . '-js',\n\t\t\t'wpBootstrapBlocks',\n\t\t\tarray(\n\t\t\t\t'bootstrapVersion' => Settings::get_bootstrap_version(),\n\t\t\t\t'isBootstrap5Active' => Settings::is_bootstrap_5_active(),\n\t\t\t\t'isCssGridEnabled' => Settings::is_css_grid_enabled(),\n\t\t\t)\n\t\t);\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-editor-styles',\n\t\t\tesc_url( $this->assets_url ) . 'index.css',\n\t\t\tarray( 'wp-edit-blocks' ),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function register_custom_block_category( $block_categories, $block_editor_context ) {\n\t\treturn $this->add_custom_block_category( $block_categories );\n\t}\n\n\n\tpublic function register_custom_block_category_old( $categories, $post ) {\n\t\treturn $this->add_custom_block_category( $categories );\n\t}\n\n\n\tprotected function add_custom_block_category( $block_categories ) {\n\t\treturn array_merge(\n\t\t\t$block_categories,\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'slug' => 'wp-bootstrap-blocks',\n\t\t\t\t\t'title' => __( 'Bootstrap Blocks', 'wp-bootstrap-blocks' ),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t}\n\n\n\tpublic function load_plugin_textdomain() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\tload_plugin_textdomain( $domain, false, $this->languages_dir );\n\t}\n\n\n\tpublic function set_script_translations() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\twp_set_script_translations( $this->token . '-js', $domain, $this->languages_dir_full );\n\t}\n\n\n\tpublic function register_block_types() {\n\t\tnew Container_Block_Type();\n\t\tnew Row_Block_Type();\n\t\tnew Column_Block_Type();\n\t\tnew Button_Block_Type();\n\t}\n\n\n\tpublic static function instance() {\n\t\tif ( is_null( self::$instance ) ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\n\t\treturn self::$instance;\n\t}\n\n\n\tpublic function __clone() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function __wakeup() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function check_version() {\n\t\tif ( defined( 'IFRAME_REQUEST' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$transient_name = 'wp_bootstrap_blocks_version';\n\n\t\t$old_version = get_transient( $transient_name );\n\t\tif ( false === $old_version ) {\n\t\t\t$old_version = get_option( $this->token . '_version' );\n\t\t\tset_transient( $transient_name, $old_version, 5 * MINUTE_IN_SECONDS );\n\t\t}\n\t\t$new_version = self::$version;\n\t\tif ( $old_version !== $new_version ) {\n\t\t\t$this->log_version_number();\n\t\t\tdelete_transient( $transient_name );\n\n\n\t\t\tdo_action( $this->token . '_updated', $new_version, $old_version );\n\t\t}\n\t}\n\n\n\tprotected function log_version_number() {\n\t\tdelete_option( $this->token . '_version' );\n\t\tupdate_option( $this->token . '_version', self::$version );\n\t}\n}\n\n'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'\n:<?php\n\n\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE' ) ) {\n\tdefine( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE', __FILE__ );\n}\n\n\nif ( ! class_exists( \\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::class ) ) {\n\trequire_once plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'src/class-wp-bootstrap-blocks.php';\n}\n\n\n\\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::instance();\n\n'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'\n:<?php\n\n\n\nrequire_once dirname( __DIR__ ) . '/vendor/autoload.php';\n\n\n\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\n\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = getenv( 'WP_PHPUNIT__DIR' );\n}\n\n\nif ( ! $_tests_dir ) {\n\t$_try_tests_dir = __DIR__ . '/../../../../../tests/phpunit';\n\tif ( file_exists( $_try_tests_dir . '/includes/functions.php' ) ) {\n\t\t$_tests_dir = $_try_tests_dir;\n\t}\n}\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = '/tmp/wordpress-tests-lib';\n}\n\n\nrequire_once $_tests_dir . '/includes/functions.php';\n\n\n\ndefine( 'GUTENBERG_LOAD_VENDOR_SCRIPTS', false );\n\n\nfunction _manually_load_plugin() {\n\trequire dirname( __DIR__ ) . '/wp-bootstrap-blocks.php';\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\n\n\nrequire $_tests_dir . '/includes/bootstrap.php';\n\n\nrequire_once __DIR__ . '/wp-bootstrap-blocks-unittestcase.php';\n\n'bootstrap-blocks-wordpress-plugin/src/wp-bootstrap-blocks-functions.php'\n:<?php\n\n\nuse WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks;\n\n\nfunction wp_bootstrap_blocks_get_template( $template_name, $attributes, $content = '', $template_path = '', $default_path = '' ) {\n\t$located = wp_bootstrap_blocks_locate_template( $template_name, $template_path, $default_path );\n\n\tif ( ! file_exists( $located ) ) {\n\n\t\t_doing_it_wrong( __FUNCTION__, sprintf( esc_html__( '%s does not exist.', 'wp-bootstrap-blocks' ), '<code>' . esc_html( $located ) . '</code>' ), esc_attr( WP_Bootstrap_Blocks::$version ) );\n\t\treturn '';\n\t}\n\n\n\t$located = apply_filters( 'wp_bootstrap_blocks_get_template', $located, $template_name, $template_path, $default_path );\n\n\n\tob_start();\n\n\trequire $located;\n\n\n\t$html = ob_get_contents();\n\tob_end_clean();\n\n\treturn $html;\n}\n\n\nfunction wp_bootstrap_blocks_locate_template( $template_name, $template_path = '', $default_path = '' ) {\n\n\tif ( ! $template_path ) {\n\n\t\t$template_path = apply_filters( 'wp_bootstrap_blocks_template_path', 'wp-bootstrap-blocks/' );\n\t}\n\n\n\tif ( ! $default_path ) {\n\t\t$default_path = untrailingslashit( plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) . '/src/templates/';\n\t}\n\n\n\tif ( ! preg_match( '/(\\.php)$/i', $template_name ) ) {\n\t\t$template_name .= '.php';\n\t}\n\n\n\t$template = locate_template(\n\t\tarray(\n\t\t\ttrailingslashit( $template_path ) . $template_name,\n\t\t\t$template_name,\n\t\t)\n\t);\n\n\n\tif ( ! $template ) {\n\t\t$template = $default_path . $template_name;\n\t}\n\n\n\treturn apply_filters( 'wp_bootstrap_blocks_locate_template', $template, $template_name, $template_path );\n}\n",
        "gt": [
            "'bootstrap-blocks-wordpress-plugin/src/wp-bootstrap-blocks-functions.php'",
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'locomotive/locomotive.php'",
            "'locomotive/tests/bootstrap.php'",
            "'locomotive/includes/abstracts/abstract-batch.php'"
        ],
        "content": "'locomotive/locomotive.php'\n:<?php\n\n\nnamespace Rkv\\Locomotive;\n\nuse Rkv\\Locomotive\\Abstracts\\Batch;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nfinal class Loader {\n\n\tpublic function define_constants() {\n\t\tdefine( 'LOCO_VERSION', '0.1.0' );\n\t\tdefine( 'LOCO_PLUGIN_DIR', plugin_dir_path( __FILE__ ) );\n\t\tdefine( 'LOCO_PLUGIN_URL', plugin_dir_url( __FILE__ ) );\n\t\tdefine( 'LOCO_PLUGIN_FILE', __FILE__ );\n\t}\n\n\n\tpublic function add_dashboard() {\n\t\tadd_management_page(\n\t\t\t__( 'Batch Processes' ),\n\t\t\t__( 'Batches' ),\n\t\t\t'manage_options',\n\t\t\t'locomotive',\n\t\t\tarray( $this, 'dashboard_display' )\n\t\t);\n\n\n\t\tadd_action( 'load-tools_page_locomotive', array( $this, 'dashboard_help_tab' ) );\n\t}\n\n\n\tpublic function dashboard_display() {\n\t\t$registered_batches = locomotive_get_all_batches();\n\t\tinclude LOCO_PLUGIN_DIR . 'templates/dashboard.php';\n\t}\n\n\n\tpublic function dashboard_help_tab() {\n\n\n\t\tif ( ! function_exists( 'get_current_screen' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$screen = get_current_screen();\n\n\n\t\tif ( ! is_object( $screen ) || empty( $screen->id ) || 'tools_page_locomotive' !== $screen->id ) {\n\t\t\treturn;\n\t\t}\n\n\n\t\t$screen->add_help_tab( array(\n\t\t\t'id'        => 'help-overview',\n\t\t\t'title'     => esc_html__( 'Overview', 'locomotive' ),\n\t\t\t'content'   => '<p>' . esc_html__( 'Locomotive is a batch processing library that can be used to write a single or set of functions to be processed across a large data set, right from the WordPress admin. You can use it to add meta values to posts based on arbitrary data, process and delete spam comments and revisions, submit posts through external API\\'s, or simply change data on a large amount of posts at the same time.', 'locomotive' ) . '</p>',\n\t\t) );\n\n\n\t\t$side   = '<p><strong>' . esc_html__( 'More on GitHub:', 'locomotive' ) . '</strong></p>';\n\t\t$side  .= '<ul>';\n\t\t\t$side  .= '<li><a href=\"https:\n\t\t\t$side  .= '<li><a href=\"https:\n\t\t\t$side  .= '<li><a href=\"https:\n\t\t\t$side  .= '<li><a href=\"https:\n\t\t$side  .= '</ul>';\n\n\n\t\t$side   = apply_filters( 'loco_help_tab_sidebar', $side );\n\n\n\t\t$screen->set_help_sidebar( $side );\n\t}\n\n\n\tpublic function load_includes() {\n\t\trequire_once( LOCO_PLUGIN_DIR . 'includes/abstracts/abstract-batch.php' );\n\t\trequire_once( LOCO_PLUGIN_DIR . 'includes/batches/class-batch-posts.php' );\n\t\trequire_once( LOCO_PLUGIN_DIR . 'includes/batches/class-batch-users.php' );\n\t\trequire_once( LOCO_PLUGIN_DIR . 'includes/batches/class-batch-sites.php' );\n\t\trequire_once( LOCO_PLUGIN_DIR . 'includes/batches/class-batch-terms.php' );\n\t\trequire_once( LOCO_PLUGIN_DIR . 'includes/batches/class-batch-comments.php' );\n\t\trequire_once( LOCO_PLUGIN_DIR . 'includes/functions.php' );\n\t}\n\n\n\tpublic function attach_hooks() {\n\t\tadd_action( 'admin_menu', array( $this, 'add_dashboard' ) );\n\t\tadd_action( 'after_setup_theme', array( $this, 'loaded' ) );\n\t\tadd_action( 'admin_enqueue_scripts', array( $this, 'scripts' ) );\n\n\t\tadd_action( 'wp_ajax_run_batch', array( $this, 'run' ) );\n\t\tadd_action( 'wp_ajax_reset_batch', array( $this, 'reset' ) );\n\t}\n\n\n\tpublic function scripts( $hook ) {\n\n\n\t\tif ( 'tools_page_locomotive' !== $hook ) {\n\t\t\treturn;\n\t\t}\n\n\t\twp_enqueue_style( 'batch-process-styles', LOCO_PLUGIN_URL . 'assets/main.css' );\n\t\twp_enqueue_script( 'batch-js', LOCO_PLUGIN_URL . 'assets/dist/batch.min.js', array( 'jquery' ), '0.1.0', true );\n\n\t\twp_localize_script( 'batch-js', 'batch', array(\n\t\t\t'nonce' => wp_create_nonce( 'run-batch-process' ),\n\t\t\t'ajaxurl' => admin_url( 'admin-ajax.php' ),\n\t\t\t'batches' => locomotive_get_all_batches(),\n\t\t\t'page_title' => esc_html( get_admin_page_title() ),\n\t\t) );\n\t}\n\n\n\tpublic function loaded() {\n\t\tif ( is_admin() ) {\n\t\t\tlocomotive_clear_existing_batches();\n\t\t\tdo_action( 'locomotive_init' );\n\t\t}\n\t}\n\n\n\tpublic function run() {\n\t\t$batch_process = '';\n\t\t$step = 0;\n\t\t$errors = array();\n\n\t\tcheck_ajax_referer( 'run-batch-process', 'nonce' );\n\n\t\tif ( empty( $_POST['batch_process'] ) ) {\n\t\t\t$errors[] = __( 'Batch process not specified.', 'locomotive' );\n\t\t} else {\n\t\t\t$batch_process = sanitize_text_field( wp_unslash( $_POST['batch_process'] ) );\n\t\t}\n\n\t\tif ( empty( $_POST['step'] ) ) {\n\t\t\t$errors[] = __( 'Step must be defined.', 'locomotive' );\n\t\t} else {\n\t\t\t$step = absint( $_POST['step'] );\n\t\t}\n\n\t\tif ( ! empty( $errors ) ) {\n\t\t\twp_send_json( array(\n\t\t\t\t'success' => false,\n\t\t\t\t'errors' => $errors,\n\t\t\t) );\n\t\t}\n\n\t\tdo_action( 'loco_batch_' . $batch_process, $step );\n\t}\n\n\n\tpublic function reset() {\n\t\t$batch_process = '';\n\t\t$errors = array();\n\n\t\tcheck_ajax_referer( 'run-batch-process', 'nonce' );\n\n\t\tif ( empty( $_POST['batch_process'] ) ) {\n\t\t\t$errors[] = __( 'Batch process not specified.', 'locomotive' );\n\t\t} else {\n\t\t\t$batch_process = sanitize_text_field( wp_unslash( $_POST['batch_process'] ) );\n\t\t}\n\n\t\tif ( ! empty( $errors ) ) {\n\t\t\twp_send_json( array(\n\t\t\t\t'success' => false,\n\t\t\t\t'errors' => $errors,\n\t\t\t) );\n\t\t}\n\n\t\tdo_action( 'loco_batch_' . $batch_process . '_reset' );\n\n\t\twp_send_json( array( 'success' => true ) );\n\t}\n\n\n\tpublic function init() {\n\t\t$this->define_constants();\n\t\t$this->load_includes();\n\t\t$this->attach_hooks();\n\t}\n}\n\n$batch_processing = new Loader();\n$batch_processing->init();\n\n'locomotive/tests/bootstrap.php'\n:<?php\n\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\nif ( ! $_tests_dir ) {\n\t$_tests_dir = '/tmp/wordpress-tests-lib';\n}\n\nrequire_once $_tests_dir . '/includes/functions.php';\n\nfunction _manually_load_plugin() {\n\trequire dirname( dirname( __FILE__ ) ) . '/locomotive.php';\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\n\nrequire $_tests_dir . '/includes/bootstrap.php';\n\n'locomotive/includes/abstracts/abstract-batch.php'\n:<?php\n\n\nnamespace Rkv\\Locomotive\\Abstracts;\n\nuse Exception;\n\n\nabstract class Batch {\n\n\tpublic $name;\n\n\n\tpublic $slug;\n\n\n\tpublic $per_batch_param = 'posts_per_page';\n\n\n\tpublic $args = array();\n\n\n\tpublic $default_args = array();\n\n\n\tpublic $type;\n\n\n\tpublic $callback;\n\n\n\tpublic $status;\n\n\n\tpublic $currently_registered = array();\n\n\n\tpublic $current_step = 0;\n\n\n\tpublic $total_num_results;\n\n\n\tpublic $difference_in_result_totals = 0;\n\n\n\tpublic $result_errors = array();\n\n\n\tabstract public function batch_get_results();\n\n\n\tabstract public function batch_clear_result_status();\n\n\n\tabstract public function get_result_item_status( $result );\n\n\n\tabstract public function update_result_item_status( $result, $status );\n\n\n\tpublic function get_results() {\n\t\t$this->args = wp_parse_args( $this->args, $this->default_args );\n\t\t$this->batch_get_results();\n\t\t$this->calculate_offset();\n\n\n\t\t$results = $this->batch_get_results();\n\t\treturn $results;\n\t}\n\n\n\tpublic function set_total_num_results( $total_from_query ) {\n\n\n\t\t$total_from_request = isset( $_POST['total_num_results'] ) ? absint( $_POST['total_num_results'] ) : 0;\n\n\n\n\n\n\t\tif ( $total_from_query > $total_from_request ) {\n\t\t\t$this->total_num_results = (int) $total_from_query;\n\t\t} else {\n\t\t\t$this->total_num_results = (int) $total_from_request;\n\t\t}\n\n\t\t$this->record_change_if_totals_differ( $total_from_request, $total_from_query );\n\t}\n\n\n\tpublic function record_change_if_totals_differ( $total_from_request, $total_from_query ) {\n\t\tif ( $total_from_query !== $total_from_request && $total_from_request > 0 ) {\n\t\t\t$this->difference_in_result_totals = $total_from_request - $total_from_query;\n\t\t}\n\t}\n\n\n\tpublic function calculate_offset() {\n\t\tif ( 1 !== $this->current_step ) {\n\n\n\n\t\t\t$this->args['offset'] = ( ( $this->current_step - 1 ) * $this->args[ $this->per_batch_param ] ) - $this->difference_in_result_totals;\n\t\t}\n\t}\n\n\n\tpublic function register( $args ) {\n\t\tif ( $this->setup( $args ) ) {\n\t\t\tif ( ! defined( 'DOING_AJAX' ) ) {\n\t\t\t\t$this->add();\n\t\t\t}\n\t\t}\n\t}\n\n\n\tprivate function add() {\n\t\tif ( ! isset( $this->currently_registered[ $this->slug ] ) ) {\n\t\t\t$this->currently_registered[ $this->slug ] = array(\n\t\t\t\t'name' => $this->name,\n\t\t\t);\n\t\t} else {\n\t\t\t$this->currently_registered[ $this->slug ]['name'] = $this->name;\n\t\t}\n\n\t\treturn locomotive_update_registered_batches( $this->currently_registered );\n\t}\n\n\n\tprivate function setup( $args ) {\n\t\tif ( empty( $args['name'] ) ) {\n\t\t\tthrow new Exception( __( 'Batch name must be defined.', 'locomotive' ) );\n\t\t} else {\n\t\t\t$this->name = $args['name'];\n\t\t}\n\n\t\tif ( empty( $args['slug'] ) ) {\n\t\t\t$this->slug = sanitize_title_with_dashes( $args['name'] );\n\t\t} else {\n\t\t\t$this->slug = $args['slug'];\n\t\t}\n\n\t\tif ( empty( $args['type'] ) ) {\n\t\t\tthrow new Exception( __( 'Batch type must be defined.', 'locomotive' ) );\n\t\t} else {\n\t\t\t$this->type = $args['type'];\n\t\t}\n\n\t\tif ( empty( $args['args'] ) || ! is_array( $args['args'] ) ) {\n\t\t\t$this->args = array();\n\t\t} else {\n\t\t\t$this->args = $args['args'];\n\t\t}\n\n\t\tif ( empty( $args['callback'] ) ) {\n\t\t\tthrow new Exception( __( 'A callback must be defined.', 'locomotive' ) );\n\t\t} else {\n\t\t\t$this->callback = $args['callback'];\n\t\t}\n\n\t\t$this->currently_registered = locomotive_get_all_batches();\n\n\t\tadd_action( 'loco_batch_' . $this->slug, array( $this, 'run_ajax' ) );\n\t\tadd_action( 'loco_batch_' . $this->slug . '_reset', array( $this, 'clear_result_status' ) );\n\n\t\treturn true;\n\t}\n\n\n\tpublic function run_ajax( $current_step ) {\n\t\twp_send_json( $this->run( $current_step ) );\n\t}\n\n\n\tpublic function run( $current_step ) {\n\t\t$this->current_step = $current_step;\n\n\t\t$results = $this->get_results();\n\n\t\tif ( empty( $results ) ) {\n\t\t\t$this->update_status( 'no results found' );\n\t\t\treturn $this->format_ajax_details( array(\n\t\t\t\t'success' => true,\n\t\t\t\t'message' => __( 'No results found.', 'locomotive' ),\n\t\t\t) );\n\t\t}\n\n\t\t$this->process_results( $results );\n\n\t\t$per_page = get_option( 'posts_per_page' );\n\t\tif ( isset( $this->per_batch_param ) ) {\n\t\t\t$per_page = $this->args[ $this->per_batch_param ];\n\t\t}\n\n\n\t\t$per_page = apply_filters( 'loco_batch_' . $this->slug . '_per_page', $per_page );\n\n\t\t$total_steps = ceil( $this->total_num_results / $per_page );\n\n\t\tif ( (int) $this->current_step === (int) $total_steps ) {\n\n\n\n\n\n\n\n\n\t\t\t$difference = $this->total_num_results - $this->difference_in_result_totals;\n\t\t\tif ( $difference <= $per_page || $difference === $this->total_num_results ) {\n\t\t\t\t$this->update_status( 'finished' );\n\t\t\t} else {\n\t\t\t\t$this->current_step = $this->current_step - 1;\n\t\t\t\t$this->update_status( 'running' );\n\t\t\t}\n\t\t} else {\n\t\t\t$this->update_status( 'running' );\n\t\t}\n\n\t\t$progress = ( 0 === (int) $total_steps ) ? 100 : round( ( $this->current_step / $total_steps ) * 100 );\n\n\n\t\tif ( is_array( $this->result_errors ) && count( $this->result_errors ) > 0  ) {\n\t\t\treturn $this->format_ajax_details( array(\n\t\t\t\t'error'         => true,\n\t\t\t\t'errors'        => $this->result_errors,\n\t\t\t\t'total_steps'   => $total_steps,\n\t\t\t\t'query_results' => $results,\n\t\t\t\t'progress'      => $progress,\n\t\t\t) );\n\t\t}\n\n\t\treturn $this->format_ajax_details( array(\n\t\t\t'total_steps'   => $total_steps,\n\t\t\t'query_results' => $results,\n\t\t\t'progress'      => $progress,\n\t\t) );\n\t}\n\n\n\tprivate function format_ajax_details( $details = array() ) {\n\t\treturn wp_parse_args( $details, array(\n\t\t\t'success'           => true,\n\t\t\t'current_step'      => $this->current_step,\n\t\t\t'callback'          => $this->callback,\n\t\t\t'status'            => $this->status,\n\t\t\t'batch'             => $this->name,\n\t\t\t'total_num_results' => $this->total_num_results,\n\t\t) );\n\t}\n\n\n\tprivate function update_status( $status ) {\n\t\tupdate_option( 'loco_batch_' . $this->slug, array(\n\t\t\t'status' => $status,\n\t\t\t'timestamp' => current_time( 'timestamp' ),\n\t\t) );\n\n\t\t$this->status = __( ucfirst( $status ) );\n\t}\n\n\n\tpublic function process_results( $results ) {\n\n\t\t$success_status = apply_filters( 'loco_batch_success_status', 'success' );\n\n\n\t\t$failed_status = apply_filters( 'loco_batch_failed_status', 'failed' );\n\n\t\tforeach ( $results as $result ) {\n\n\t\t\tif ( $success_status === $this->get_result_status( $result ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tcall_user_func_array( $this->callback, array( $result ) );\n\t\t\t\t$this->update_result_status( $result, $success_status );\n\t\t\t} catch ( Exception $e ) {\n\t\t\t\t$this->update_status( $failed_status );\n\t\t\t\t$this->update_result_status( $result, $failed_status );\n\t\t\t\t$this->result_errors[] = array(\n\t\t\t\t\t'item' => $result->ID,\n\t\t\t\t\t'message' => $e->getMessage(),\n\t\t\t\t);\n\n\t\t\t}\n\t\t}\n\t}\n\n\n\tpublic function update_result_status( $result, $status ) {\n\n\t\tdo_action( 'loco_batch_' . $this->slug . '_update_result_status', $result, $status );\n\n\t\treturn $this->update_result_item_status( $result, $status );\n\t}\n\n\n\tpublic function get_result_status( $result ) {\n\n\t\tdo_action( 'loco_batch_' . $this->slug . '_get_result_status', $result );\n\n\t\treturn $this->get_result_item_status( $result );\n\t}\n\n\n\tpublic function clear_result_status() {\n\n\t\tdo_action( 'loco_batch_' . $this->slug . '_clear', $this );\n\n\t\t$this->batch_clear_result_status();\n\t\t$this->update_status( 'reset' );\n\t}\n}\n",
        "gt": [
            "'locomotive/includes/abstracts/abstract-batch.php'",
            "'locomotive/locomotive.php'",
            "'locomotive/tests/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'twich/www/redis/Rediska/Key/Set.php'",
            "'twich/www/redis/Rediska/Key/Abstract.php'",
            "'twich/www/redis/Rediska/Zend/Queue/Adapter/Redis.php'",
            "'twich/www/redis/Rediska/Key/Exception.php'"
        ],
        "content": "'twich/www/redis/Rediska/Key/Set.php'\n:<?php\n\n\nrequire_once 'Rediska/Key/Abstract.php';\n\n\nclass Rediska_Key_Set extends Rediska_Key_Abstract implements IteratorAggregate, ArrayAccess, Countable\n{\n\n    public function add($value)\n    {\n        $result = $this->_getRediskaOn()->addToSet($this->_name, $value);\n\n        if ($result && !is_null($this->_expire)) {\n            $this->expire($this->_expire, $this->_isExpireTimestamp);\n        }\n\n        return $result;\n    }\n\n\n    public function remove($value)\n    {\n        $result = $this->_getRediskaOn()->deleteFromSet($this->_name, $value);\n\n        if ($result && !is_null($this->_expire)) {\n        \t$this->expire($this->_expire, $this->_isExpireTimestamp);\n        }\n\n        return $result;\n    }\n\n\n    public function move($set, $value)\n    {\n    \tif ($set instanceof Rediska_Key_Set) {\n    \t\t$set = $set->getName();\n    \t}\n\n    \treturn $this->_getRediskaOn()->moveToSet($this->_name, $set, $value);\n    }\n\n\n    public function count()\n    {\n        return $this->_getRediskaOn()->getSetLength($this->_name);\n    }\n\n\n    public function exists($value)\n    {\n        return $this->_getRediskaOn()->existsInSet($this->_name, $value);\n    }\n\n\n    public function intersect($setOrSets, $storeKeyName = null)\n    {\n    \t$sets = $this->_prepareSetsForCompare($setOrSets);\n\n    \treturn $this->_getRediskaOn()->intersectSets($sets, $storeKeyName);\n    }\n\n\n    public function union($setOrSets, $storeKeyName = null)\n    {\n        $sets = $this->_prepareSetsForCompare($setOrSets);\n\n        return $this->_getRediskaOn()->unionSets($sets, $storeKeyName);\n    }\n\n\n    public function diff($setOrSets, $storeKeyName = null)\n    {\n        $sets = $this->_prepareSetsForCompare($setOrSets);\n\n        return $this->_getRediskaOn()->diffSets($sets, $storeKeyName);\n    }\n\n\n    public function sort($options = array())\n    {\n        return $this->_getRediskaOn()->sort($this->_name, $options);\n    }\n\n\n    public function toArray($sort = null)\n    {\n        return $this->_getRediskaOn()->getSet($this->_name, $sort);\n    }\n\n\n    public function fromArray(array $array)\n    {\n\n        $pipeline = $this->_getRediskaOn()->pipeline();\n        foreach($array as $item) {\n            $pipeline->addToSet($this->_name, $item);\n        }\n\n        if (!is_null($this->_expire)) {\n        \t$pipeline->expire($this->_name, $this->_expire, $this->_isExpireTimestamp);\n        }\n\n        $pipeline->execute();\n\n        return true;\n    }\n\n\n\n    public function getIterator()\n    {\n        return new ArrayObject($this->toArray());\n    }\n\n    public function offsetSet($offset, $value)\n    {\n        if (!is_null($offset)) {\n            throw new Rediska_Key_Exception('Offset is not allowed in sets');\n        }\n\n        $this->add($value);\n\n        return $value;\n    }\n\n    public function offsetExists($value)\n    {\n        throw new Rediska_Key_Exception('Offset is not allowed in sets');\n    }\n\n    public function offsetUnset($value)\n    {\n        throw new Rediska_Key_Exception('Offset is not allowed in sets');\n    }\n\n    public function offsetGet($value)\n    {\n        throw new Rediska_Key_Exception('Offset is not allowed in sets');\n    }\n\n    protected function _prepareSetsForCompare($setOrSets)\n    {\n        if (!is_array($setOrSets)) {\n            $sets = array($setOrSets);\n        } else {\n            $sets = $setOrSets;\n        }\n\n        foreach($sets as &$set) {\n            if ($set instanceof Rediska_Key_Set) {\n                $set = $set->getName();\n            }\n        }\n\n        if (!in_array($this->_name, $sets)) {\n            array_unshift($sets, $this->_name);\n        }\n\n        return $sets;\n    }\n}\n'twich/www/redis/Rediska/Key/Abstract.php'\n:<?php\n\n\nrequire_once 'Rediska.php';\n\n\nrequire_once 'Rediska/Key/Exception.php';\n\n\nabstract class Rediska_Key_Abstract\n{\n\n\tprotected $_name;\n\n\n\tprotected $_rediska;\n\n\n    protected $_expire;\n\n\n    protected $_isExpireTimestamp = false;\n\n\n    protected $_serverAlias;\n\n\n\tpublic function __construct($name, $expire = null, $serverAlias = null)\n\t{\n\t\t$this->_name        = $name;\n\t\t$this->_expire      = $expire;\n\t\t$this->_serverAlias = $serverAlias;\n\n\t\t$this->_setupRediskaDefaultInstance();\n\t}\n\n\n\tpublic function delete()\n\t{\n\t\treturn $this->_getRediskaOn()->delete($this->_name);\n\t}\n\n\n\tpublic function isExists()\n\t{\n\t\treturn $this->_getRediskaOn()->exists($this->_name);\n\t}\n\n\n\tpublic function getType()\n\t{\n\t\treturn $this->_getRediskaOn()->getType($this->_name);\n\t}\n\n\n\tpublic function rename($newName, $overwrite = true)\n\t{\n\t\ttry {\n            $this->_getRediskaOn()->rename($this->_name, $newName, $overwrite);\n\t\t} catch (Rediska_Exception $e) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->_name = $newName;\n\n        if (!is_null($this->_expire)) {\n            $this->expire($this->_expire, $this->_isExpireTimestamp);\n        }\n\n\t\treturn true;\n\t}\n\n\n\tpublic function expire($secondsOrTimestamp, $isTimestamp = false)\n\t{\n\t\treturn $this->_getRediskaOn()->expire($this->_name, $secondsOrTimestamp, $isTimestamp);\n\t}\n\n\n\tpublic function getLifetime()\n\t{\n\t\treturn $this->_getRediskaOn()->getLifetime($this->_name);\n\t}\n\n\n\tpublic function moveToDb($dbIndex)\n\t{\n\t\t$result = $this->_getRediskaOn()->moveToDb($this->_name, $dbIndex);\n\n        if ($result && !is_null($this->_expire)) {\n            $this->expire($this->_expire, $this->_isExpireTimestamp);\n        }\n\n        return $result;\n\t}\n\n\n\tpublic function getName()\n\t{\n\t\treturn $this->_name;\n\t}\n\n\n\tpublic function setName($name)\n\t{\n\t\t$this->name = $name;\n\n\t\treturn $this;\n\t}\n\n\n    public function setExpire($secondsOrTimestamp, $isTimestamp = false)\n    {\n        $this->_expire = $secondsOrTimestamp;\n        $this->_isExpireTimestamp = $isTimestamp;\n\n        return $this;\n    }\n\n\n    public function getExpire()\n    {\n        return $this->_expire;\n    }\n\n\n    public function isExpireTimestamp()\n    {\n        return $this->_isExpireTimestamp;\n    }\n\n\n    public function setServerAlias($serverAlias)\n    {\n    \t$this->_serverAlias = $serverAlias;\n\n    \treturn $this;\n    }\n\n\n    public function getServerAlias()\n    {\n    \treturn $this->_serverAlias;\n    }\n\n\n    public function setRediska(Rediska $rediska)\n    {\n        $this->_rediska = $rediska;\n\n        return $this;\n    }\n\n\n    public function getRediska()\n    {\n        if (!$this->_rediska instanceof Rediska) {\n            throw new Rediska_Key_Exception('Rediska instance not found for ' . get_class($this));\n        }\n\n        return $this->_rediska;\n    }\n\n\n    protected function _getRediskaOn()\n    {\n    \t$rediska = $this->getRediska();\n\n    \tif (!is_null($this->_serverAlias)) {\n    \t\t$rediska = $rediska->on($this->_serverAlias);\n    \t}\n\n    \treturn $rediska;\n    }\n\n\n    protected function _setupRediskaDefaultInstance()\n    {\n        $this->_rediska = Rediska::getDefaultInstance();\n        if (!$this->_rediska) {\n            $this->_rediska = new Rediska();\n        }\n    }\n}\n'twich/www/redis/Rediska/Zend/Queue/Adapter/Redis.php'\n:<?php\n\n\nrequire_once 'Rediska.php';\n\n\nrequire_once 'Rediska/Key/List.php';\n\n\nrequire_once 'Rediska/Key/Set.php';\n\n\nrequire_once 'Zend/Queue/Adapter/AdapterAbstract.php';\n\n\nclass Rediska_Zend_Queue_Adapter_Redis extends Zend_Queue_Adapter_AdapterAbstract\n{\n\tconst KEY_PREFIX = 'Zend_Queue_';\n\n\n\tprotected $_rediska;\n\n\n\tprotected $_queues;\n\n\n\tprotected $_queueObjects;\n\n\n    public function __construct($options, Zend_Queue $queue = null)\n    {\n        parent::__construct($options, $queue);\n\n        $defaultInstance = Rediska::getDefaultInstance();\n        if (empty($this->_options['driverOptions']) && $defaultInstance) {\n        \t$this->_rediska = $defaultInstance;\n        } else {\n        \t$this->_rediska = new Rediska($this->_options['driverOptions']);\n        }\n\n        $this->_queues = new Rediska_Key_Set($this->_getKeyName('queues'));\n        $this->_queues->setRediska($this->_rediska);\n    }\n\n\n    public function isExists($name)\n    {\n    \tif (isset($this->_queueObjects[$name])) {\n    \t\treturn true;\n    \t} else {\n    \t\treturn $this->_queues->exists($name);\n    \t}\n    }\n\n\n    public function create($name, $timeout = null)\n    {\n        $this->_queues->add($name);\n        $this->_queueObjects[$name] = new Rediska_Key_List($this->_getKeyName(\"queue_$name\"));\n\n        return true;\n    }\n\n\n    public function delete($name)\n    {\n        if ($this->_queues->remove($name)) {\n        \tif (isset($this->_queueObjects[$name])) {\n        \t\tunset($this->_queueObjects[$name]);\n        \t}\n\n        \treturn $this->_rediska->delete($this->_getKeyName(\"queue_$name\"));\n        }\n    }\n\n\n    public function getQueues()\n    {\n        return $this->_queues->toArray();\n    }\n\n    protected function _getKeyName($name)\n    {\n    \treturn self::KEY_PREFIX . $name;\n    }\n\n\n    public function count(Zend_Queue $queue=null)\n    {\n        if ($queue === null) {\n            $queue = $this->_queue;\n        }\n\n        $queueName = $queue->getName();\n\n        if (!$this->isExists($queueName)) {\n            require_once 'Zend/Queue/Exception.php';\n            throw new Zend_Queue_Exception('Queue does not exist:' . $queueName);\n        }\n\n        if (!isset($this->_queueObjects[$queueName])) {\n            $this->_queueObjects[$queueName] = new Rediska_Key_List($this->_getKeyName(\"queue_$queueName\"));\n        }\n\n        return count($this->_queueObjects[$queueName]);\n    }\n\n\n\n\n    public function send($message, Zend_Queue $queue=null)\n    {\n        if ($queue === null) {\n            $queue = $this->_queue;\n        }\n\n        $queueName = $queue->getName();\n\n        if (!$this->isExists($queueName)) {\n        \trequire_once 'Zend/Queue/Exception.php';\n            throw new Zend_Queue_Exception('Queue does not exist:' . $queueName);\n        }\n\n        if (!isset($this->_queueObjects[$queueName])) {\n        \t$this->_queueObjects[$queueName] = new Rediska_Key_List($this->_getKeyName(\"queue_$queueName\"));\n        }\n\n        $result = $this->_queueObjects[$queueName]->prepend($message);\n\n        if ($result === false) {\n        \trequire_once 'Zend/Queue/Exception.php';\n            throw new Zend_Queue_Exception('Failed to insert message into queue:' . $queueName);\n        }\n\n        $options = array(\n            'queue' => $queue,\n            'data'  => array('body' => $message),\n        );\n\n        $classname = $queue->getMessageClass();\n        if (!class_exists($classname)) {\n            require_once 'Zend/Loader.php';\n            Zend_Loader::loadClass($classname);\n        }\n        return new $classname($options);\n    }\n\n\n    public function receive($maxMessages=null, $timeout=null, Zend_Queue $queue=null)\n    {\n        if ($maxMessages === null) {\n            $maxMessages = 1;\n        }\n        if ($queue === null) {\n            $queue = $this->_queue;\n        }\n\n        $queueName = $queue->getName();\n\n        if (!$this->isExists($queueName)) {\n            require_once 'Zend/Queue/Exception.php';\n            throw new Zend_Queue_Exception('Queue does not exist:' . $queueName);\n        }\n\n        if (!isset($this->_queueObjects[$queueName])) {\n            $this->_queueObjects[$queueName] = new Rediska_Key_List($this->_getKeyName(\"queue_$queueName\"));\n        }\n\n        $messages = array();\n        for ($i = 0; $i < $maxMessages; $i++) {\n        \t$message = $this->_queueObjects[$queueName]->pop();\n        \tif (!is_null($message)) {\n                $messages[] = array('body' => $message);\n        \t}\n        }\n\n        $options = array(\n            'queue'        => $queue,\n            'data'         => $messages,\n            'messageClass' => $queue->getMessageClass(),\n        );\n\n        $classname = $queue->getMessageSetClass();\n        if (!class_exists($classname)) {\n            require_once 'Zend/Loader.php';\n            Zend_Loader::loadClass($classname);\n        }\n        return new $classname($options);\n    }\n\n\n    public function deleteMessage(Zend_Queue_Message $message)\n    {\n    \t$queueName = $this->_queue->getName();\n\n        if (!isset($this->_queueObjects[$queueName])) {\n            $this->_queueObjects[$queueName] = new Rediska_Key_List($this->_getKeyName(\"queue_$queueName\"));\n        }\n\n        return (boolean)$this->_queueObjects[$queueName]->remove($message->body);\n    }\n\n\n\n\n    public function getCapabilities()\n    {\n        return array(\n            'create'        => true,\n            'delete'        => true,\n            'send'          => true,\n            'receive'       => true,\n            'deleteMessage' => true,\n            'getQueues'     => true,\n            'count'         => true,\n            'isExists'      => true,\n        );\n    }\n}\n'twich/www/redis/Rediska/Key/Exception.php'\n:<?php\n\n\nrequire_once 'Rediska/Exception.php';\n\n\nclass Rediska_Key_Exception extends Rediska_Exception\n{\n\n}",
        "gt": [
            "'twich/www/redis/Rediska/Key/Exception.php'",
            "'twich/www/redis/Rediska/Key/Abstract.php'",
            "'twich/www/redis/Rediska/Key/Set.php'",
            "'twich/www/redis/Rediska/Zend/Queue/Adapter/Redis.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'\n:<?php\n\n\n\nnamespace Composer\\Autoload;\n\n\nclass ClassLoader\n{\n\n    private $prefixLengthsPsr4 = array();\n    private $prefixDirsPsr4 = array();\n    private $fallbackDirsPsr4 = array();\n\n\n    private $prefixesPsr0 = array();\n    private $fallbackDirsPsr0 = array();\n\n    private $useIncludePath = false;\n    private $classMap = array();\n\n    public function getPrefixes()\n    {\n        return call_user_func_array('array_merge', $this->prefixesPsr0);\n    }\n\n    public function getPrefixesPsr4()\n    {\n        return $this->prefixDirsPsr4;\n    }\n\n    public function getFallbackDirs()\n    {\n        return $this->fallbackDirsPsr0;\n    }\n\n    public function getFallbackDirsPsr4()\n    {\n        return $this->fallbackDirsPsr4;\n    }\n\n    public function getClassMap()\n    {\n        return $this->classMap;\n    }\n\n\n    public function addClassMap(array $classMap)\n    {\n        if ($this->classMap) {\n            $this->classMap = array_merge($this->classMap, $classMap);\n        } else {\n            $this->classMap = $classMap;\n        }\n    }\n\n\n    public function add($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n            if ($prepend) {\n                $this->fallbackDirsPsr0 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr0\n                );\n            } else {\n                $this->fallbackDirsPsr0 = array_merge(\n                    $this->fallbackDirsPsr0,\n                    (array) $paths\n                );\n            }\n\n            return;\n        }\n\n        $first = $prefix[0];\n        if (!isset($this->prefixesPsr0[$first][$prefix])) {\n            $this->prefixesPsr0[$first][$prefix] = (array) $paths;\n\n            return;\n        }\n        if ($prepend) {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixesPsr0[$first][$prefix]\n            );\n        } else {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                $this->prefixesPsr0[$first][$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function addPsr4($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n\n            if ($prepend) {\n                $this->fallbackDirsPsr4 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr4\n                );\n            } else {\n                $this->fallbackDirsPsr4 = array_merge(\n                    $this->fallbackDirsPsr4,\n                    (array) $paths\n                );\n            }\n        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {\n\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        } elseif ($prepend) {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixDirsPsr4[$prefix]\n            );\n        } else {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                $this->prefixDirsPsr4[$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function set($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr0 = (array) $paths;\n        } else {\n            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setPsr4($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr4 = (array) $paths;\n        } else {\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setUseIncludePath($useIncludePath)\n    {\n        $this->useIncludePath = $useIncludePath;\n    }\n\n\n    public function getUseIncludePath()\n    {\n        return $this->useIncludePath;\n    }\n\n\n    public function register($prepend = false)\n    {\n        spl_autoload_register(array($this, 'loadClass'), true, $prepend);\n    }\n\n\n    public function unregister()\n    {\n        spl_autoload_unregister(array($this, 'loadClass'));\n    }\n\n\n    public function loadClass($class)\n    {\n        if ($file = $this->findFile($class)) {\n            includeFile($file);\n\n            return true;\n        }\n    }\n\n\n    public function findFile($class)\n    {\n\n        if ('\\\\' == $class[0]) {\n            $class = substr($class, 1);\n        }\n\n\n        if (isset($this->classMap[$class])) {\n            return $this->classMap[$class];\n        }\n\n        $file = $this->findFileWithExtension($class, '.php');\n\n\n        if ($file === null && defined('HHVM_VERSION')) {\n            $file = $this->findFileWithExtension($class, '.hh');\n        }\n\n        if ($file === null) {\n\n            return $this->classMap[$class] = false;\n        }\n\n        return $file;\n    }\n\n    private function findFileWithExtension($class, $ext)\n    {\n\n        $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . $ext;\n\n        $first = $class[0];\n        if (isset($this->prefixLengthsPsr4[$first])) {\n            foreach ($this->prefixLengthsPsr4[$first] as $prefix => $length) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($this->prefixDirsPsr4[$prefix] as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $length))) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr4 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {\n                return $file;\n            }\n        }\n\n\n        if (false !== $pos = strrpos($class, '\\\\')) {\n\n            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)\n                . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);\n        } else {\n\n            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;\n        }\n\n        if (isset($this->prefixesPsr0[$first])) {\n            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($dirs as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr0 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                return $file;\n            }\n        }\n\n\n        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {\n            return $file;\n        }\n    }\n}\n\n\nfunction includeFile($file)\n{\n    include $file;\n}\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/devdocs.php'\n:<?php\n\nini_set('display_errors', 0);\nini_set('memory_limit', '-1');\n\nuse CFPropertyList\\CFPropertyList;\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocs {\n  private static $cacheDirectory = 'cache/';\n\n  private $workflows;\n  private $results;\n  private $baseUrl;\n  private $cacheLife;\n  private $template;\n\n  public function __construct($query, $doc) {\n    $this->baseUrl = getenv('BASE_URL') ?: 'https:\n    $this->cacheLife = (int)(getenv('CACHE_LIFE') ?: '7');\n    $this->template = getenv('TEMPLATE') ?: '$baseUrl$documentation/$path';\n    $this->workflows = new Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n    $this->results = [\n      0 => [],\n      1 => [],\n      2 => []\n    ];\n\n    $documentations = $this->getDocumentations();\n    if (!isset($doc) || empty($doc)) {\n      $rootPath = str_replace('/scripts', '', $this->workflows->path());\n      $pList = (new CFPropertyList($rootPath . '/info.plist'))->toArray();\n      foreach ($pList['connections'] as $key => $value) {\n        if (array_key_exists($key, $documentations)) {\n          $this->checkCache($key);\n          $this->processDocumentation($key, $query);\n        }\n      }\n    } else {\n      $this->checkCache($doc);\n      $this->processDocumentation($doc, $query);\n    }\n    $this->render();\n  }\n\n  private function getDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      $docContent = $this->workflows->fetch($this->baseUrl . 'docs/docs.json');\n      file_put_contents($docFile, $docContent);\n    } else {\n      $docContent = file_get_contents($docFile);\n    }\n    $docs = json_decode($docContent);\n    $documentations = [];\n    foreach ($docs as $doc) {\n      $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n      $documentations[$doc->slug] = $doc;\n    }\n    return $documentations;\n  }\n\n  private function checkCache($documentation) {\n    if (!file_exists(self::$cacheDirectory)) {\n      mkdir(self::$cacheDirectory);\n    }\n    $docFile = self::$cacheDirectory . $documentation . '.json';\n    error_log(\"Checking existence of cache at $docFile\");\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      error_log(\"Download doc for $documentation at \\\"\" . $this->baseUrl . 'docs/' . $documentation . '/index.json') . \"\\\"\";\n      file_put_contents($docFile, file_get_contents($this->baseUrl . 'docs/' . $documentation . '/index.json'));\n    }\n  }\n\n  private function processDocumentation($documentation, $query) {\n\n    $query = strtolower($query);\n    $data = json_decode(file_get_contents(self::$cacheDirectory . $documentation . '.json'));\n    if ($data === null) {\n      unlink(self::$cacheDirectory . $documentation . '.json');\n    }\n\n    $entries = $data->entries;\n\n    $found = [];\n    foreach ($entries as $key => $result) {\n      $value = strtolower(trim($result->name));\n      $description = strtolower(utf8_decode(strip_tags($result->type)));\n\n      if (empty($query)) {\n        $found[$value] = true;\n        $result->documentation = $documentation;\n        $this->results[0][] = $result;\n      } else if (strpos($value, $query) === 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[0][] = $result;\n        }\n      } else if (strpos($value, $query) > 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[1][] = $result;\n        }\n      } else if (strpos($description, $query) !== false) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[2][] = $result;\n        }\n      }\n    }\n\n    if ((count($this->results[0]) === 0) && (count($this->results[1]) === 0) && (count($this->results[2]) === 0)) {\n      $this->results[0][] = (object) [\n        'name' => 'No results.',\n        'documentation' => $documentation\n      ];\n    }\n\n  }\n\n  private function render() {\n    foreach ($this->results as $level => $results) {\n      foreach ($results as $result) {\n        $title = empty($result->type) ? $result->name : \"$result->name ($result->type)\";\n        $vars = array(\n          '$baseUrl' => $this->baseUrl,\n          '$documentation' => $result->documentation,\n          '$docalt' => str_replace(\"~\", \"-\", $result->documentation),\n          '$name' => $result->name,\n          '$path' => $result->path\n        );\n\n        $url = strtr($this->template, $vars);\n        $this->workflows->result($result->name, $url, $title, $result->path, $result->documentation . '.png', 'yes', $result->name);\n      }\n    }\n    echo $this->workflows->toxml();\n  }\n}\n\n$query = isset($query) ? $query : '';\n$documentation = isset($documentation) ? $documentation : '';\nnew DevDocs($query, $documentation);\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'"
        ]
    },
    {
        "files": [
            "'ZnoteAAC/engine/init.php'",
            "'ZnoteAAC/engine/function/cache.php'",
            "'ZnoteAAC/adminempty.php'"
        ],
        "content": "'ZnoteAAC/engine/init.php'\n:<?php if (version_compare(phpversion(), '5.6', '<')) die('PHP version 5.6 or higher is required.');\n\n$l_time = microtime(true);\n$l_start = $l_time;\n\nfunction elapsedTime($l_start = false, $l_time = false) {\n\tif ($l_start === false) global $l_start;\n\tif ($l_time === false) global $l_time;\n\n\t$l_time = explode(' ', microtime());\n\t$l_finish = $l_time[1] + $l_time[0];\n\treturn round(($l_finish - $l_start), 4);\n}\n\n$time = time();\n$version = '1.6';\n\n$aacQueries = 0;\n$accQueriesData = array();\n\nsession_start();\nob_start();\nrequire_once 'config.php';\n$sessionPrefix = $config['session_prefix'];\nif ($config['paypal']['enabled'] || $config['use_captcha']) {\n\t$curlcheck = extension_loaded('curl');\n\tif (!$curlcheck) die(\"php cURL is not enabled. It is required to for paypal or captcha services.<br>1. Find your php.ini file.<br>2. Uncomment extension=php_curl<br>Restart web server.<br><br><b>If you don't want this then disable paypal & use_captcha in config.php.</b>\");\n}\nif ($config['use_captcha'] && !extension_loaded('openssl')) {\n\tdie(\"php openSSL is not enabled. It is required to for captcha services.<br>1. Find your php.ini file.<br>2. Uncomment extension=php_openssl<br>Restart web server.<br><br><b>If you don't want this then disable use_captcha in config.php.</b>\");\n}\n\n\n\nif (!isset($config['TFSVersion'])) $config['TFSVersion'] = &$config['ServerEngine'];\nif (!isset($config['ServerEngine'])) $config['ServerEngine'] = &$config['TFSVersion'];\n\nrequire_once 'database/connect.php';\nrequire_once 'function/general.php';\nrequire_once 'function/users.php';\nrequire_once 'function/cache.php';\nrequire_once 'function/mail.php';\nrequire_once 'function/token.php';\nrequire_once 'function/itemparser/itemlistparser.php';\n\nif (isset($_SESSION['token'])) {\n\t$_SESSION['old_token'] = $_SESSION['token'];\n}\nToken::generate();\n\n$tfs_10_hasPremDays = true;\n\nif (user_logged_in() === true) {\n\t$session_user_id = getSession('user_id');\n\tif ($config['ServerEngine'] !== 'OTHIRE') {\n\t\tif ($config['ServerEngine'] == 'TFS_10') {\n\t\t\t$hasPremDays = mysql_select_single(\"SHOW COLUMNS from `accounts` WHERE `Field` = 'premdays'\");\n\t\t\tif ($hasPremDays === false) {\n\t\t\t\t$tfs_10_hasPremDays = false;\n\t\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premium_ends_at');\n\t\t\t\t$user_data['premdays'] = ($user_data['premium_ends_at'] - time() > 0) ? floor(($user_data['premium_ends_at'] - time()) / 86400) : 0;\n\t\t\t} else {\n\t\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premdays');\n\t\t\t}\n\t\t} else {\n\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premdays');\n\t\t}\n\t} else\n\t\t$user_data = user_data($session_user_id, 'id', 'password', 'email', 'premend');\n\t$user_znote_data = user_znote_account_data($session_user_id, 'ip', 'created', 'points', 'cooldown', 'flag' ,'active_email');\n}\n$errors = array();\n\nif ($config['log_ip']) {\n\t$visitor_config = $config['ip_security'];\n\n\t$flush = $config['flush_ip_logs'];\n\tif ($flush != false) {\n\t\t$timef = $time - $flush;\n\t\tif (getCache() < $timef) {\n\t\t\t$timef = $time - $visitor_config['time_period'];\n\t\t\tmysql_delete(\"DELETE FROM znote_visitors_details WHERE time <= '$timef'\");\n\t\t\tsetCache($time);\n\t\t}\n\t}\n\n\t$visitor_data = znote_visitors_get_data();\n\n\tznote_visitor_set_data($visitor_data);\n\tznote_visitor_insert_detailed_data(0);\n\n\t$visitor_detailed = znote_visitors_get_detailed_data($visitor_config['time_period']);\n\n\n\t$v_activity = 0;\n\t$v_register = 0;\n\t$v_highscore = 0;\n\t$v_c_char = 0;\n\t$v_s_char = 0;\n\t$v_form = 0;\n\tforeach ((array)$visitor_detailed as $v_d) {\n\n\t\tif ($v_d['ip'] == getIPLong()) {\n\n\t\t\tswitch ($v_d['type']) {\n\t\t\t\tcase 0:\n\t\t\t\t\t$v_activity++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\t$v_register++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\t$v_c_char++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\t$v_highscore++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 4:\n\t\t\t\t\t$v_s_char++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 5:\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\t}\n\n\n\tif ($v_activity > $visitor_config['max_activity']) die(\"Chill down. Your web activity is too big. max_activity\");\n\tif ($v_register > $visitor_config['max_account']) die(\"Chill down. You can't create multiple accounts that fast. max_account\");\n\tif ($v_c_char > $visitor_config['max_character']) die(\"Chill down. Your web activity is too big. max_character\");\n\tif ($v_form > $visitor_config['max_post']) die(\"Chill down. Your web activity is too big. max_post\");\n\n\n\n}\n\n\n$filename = explode('/', $_SERVER['SCRIPT_NAME']);\n$filename = $filename[count($filename) - 1];\n$page_filename = str_replace('.php', '', $filename);\nif ($config['allowSubPages']) {\n\trequire_once 'layout/sub.php';\n\tif (isset($subpages) && !empty($subpages)) {\n\t\tforeach ($subpages as $page) {\n\t\t\tif ($page['override'] && $page['file'] === $filename) {\n\t\t\t\trequire_once 'layout/overall/header.php';\n\t\t\t\trequire_once 'layout/sub/'.$page['file'];\n\t\t\t\trequire_once 'layout/overall/footer.php';\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t?>\n\t\t<div style=\"background-color: white; padding: 20px; width: 100%; float:left;\">\n\t\t\t<h2 style=\"color: black;\">Old layout!</h2>\n\t\t\t<p style=\"color: black;\">The layout is running an outdated sub system which is not compatible with this version of Znote AAC.</p>\n\t\t\t<p style=\"color: black;\">The file /layout/sub.php is outdated.\n\t\t\t<br>Please update it to look like <a style=\"color: orange;\" target=\"_BLANK\" href=\"https:\n\t\t\t</p>\n\t\t</div>\n\t\t<?php\n\t}\n}\n?>\n\n'ZnoteAAC/engine/function/cache.php'\n:<?php\n\nclass Cache\n{\n\tprotected $_file = false;\n\tprotected $_lifespan = 0;\n\tprotected $_content;\n\tprotected $_memory = false;\n\tprotected $_canMemory = false;\n\n\tconst EXT = '.cache.php';\n\n\n\n\tpublic function __construct($file) {\n\t\t$cfg = config('cache');\n\n\t\t$this->setExpiration($cfg['lifespan']);\n\t\tif (function_exists('apcu_fetch')) {\n\t\t\t$this->_canMemory = true;\n\t\t\t$this->_memory = $cfg['memory'];\n\t\t}\n\t\t$this->_file = $file . self::EXT;\n\n\t\tif (!$this->_memory && $cfg['memory']) die(\"\n\t\t\t<p><strong>Configuration error!</strong>\n\t\t\t<br>Cannot save cache to memory, but it is configured to do so.\n\t\t\t<br>You need to enable PHP extension APCu to enable memory cache.\n\t\t\t<br>Install it or set \\$config['cache']['memory'] to false!\n\t\t\t<br><strong>Ubuntu install:</strong> sudo apt install php-apcu</p>\n\t\t\");\n\t}\n\n\n\n\tpublic function setExpiration($span) {\n\t\t$this->_lifespan = $span;\n\t}\n\n\n\n\tpublic function useMemory($bool) {\n\t\tif ($bool and $this->_canMemory) {\n\t\t\t$this->_memory = true;\n\t\t\treturn true;\n\t\t}\n\t\t$this->_memory = false;\n\t\treturn false;\n\t}\n\n\n\n\tpublic function setContent($content) {\n\t\t$this->_content = (!$this->_memory && strtolower(gettype($content)) == 'array') ? json_encode($content) : $content;\n\t}\n\n\n\n\tpublic function hasExpired() {\n\t\tif ($this->_memory) {\n\t\t\treturn !apcu_exists($this->_file);\n\t\t}\n\t\tif (is_file($this->_file) && time() < filemtime($this->_file) + $this->_lifespan) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\n\tpublic function remainingTime() {\n\t\t$remaining = 0;\n\t\tif ($this->_memory) {\n\t\t\tif (apcu_exists($this->_file)) {\n\t\t\t\t$meta = apcu_cache_info();\n\t\t\t\tforeach ($meta['cache_list'] AS $item) {\n\t\t\t\t\tif ($item['info'] == $this->_file) {\n\t\t\t\t\t\t$remaining = ($item['creation_time'] + $item['ttl']) - time();\n\t\t\t\t\t\treturn ($remaining > 0) ? $remaining : 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $remaining;\n\t\t}\n\t\tif (!$this->hasExpired()) {\n\t\t\t$remaining = (filemtime($this->_file) + $this->_lifespan) - time();\n\t\t}\n\t\treturn $remaining;\n\t}\n\n\n\n\tpublic function save() {\n\t\tif ($this->_memory) {\n\t\t\treturn apcu_store($this->_file, $this->_content, $this->_lifespan);\n\t\t}\n\t\t$handle = fopen($this->_file, 'w');\n\t\tfwrite($handle, $this->_content);\n\t\tfclose($handle);\n\t}\n\n\n\n\tpublic function load() {\n\t\tif ($this->_memory) {\n\t\t\treturn apcu_fetch($this->_file);\n\t\t}\n\t\tif (!is_file($this->_file)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tob_start();\n\t\tinclude_once($this->_file);\n\t\t$content = ob_get_clean();\n\n\t\tif (!isset($content) && strlen($content) == 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif ($content = json_decode($content, true)) {\n\t\t\treturn (array) $content;\n\t\t} else {\n\t\t\treturn $content;\n\t\t}\n\t}\n}\n\n'ZnoteAAC/adminempty.php'\n:<?php require_once 'engine/init.php'; include 'layout/overall/header.php';\nprotect_page();\nadmin_only($user_data);\n\n\n\n\n\n include 'layout/overall/footer.php'; ?>\n",
        "gt": [
            "'ZnoteAAC/engine/function/cache.php'",
            "'ZnoteAAC/engine/init.php'",
            "'ZnoteAAC/adminempty.php'"
        ]
    },
    {
        "files": [
            "'BP-REST/includes/bp-groups/classes/class-bp-rest-attachments-group-cover-endpoint.php'",
            "'BP-REST/tests/bootstrap.php'",
            "'BP-REST/bp-rest.php'"
        ],
        "content": "'BP-REST/includes/bp-groups/classes/class-bp-rest-attachments-group-cover-endpoint.php'\n:<?php\n\n\ndefined( 'ABSPATH' ) || exit;\n\n\nclass BP_REST_Attachments_Group_Cover_Endpoint extends WP_REST_Controller {\n\tuse BP_REST_Attachments;\n\n\n\tprotected $attachment_instance;\n\n\n\tprotected $groups_endpoint;\n\n\n\tprotected $group;\n\n\n\tprotected $object = 'group';\n\n\n\tpublic function __construct() {\n\t\t$this->namespace           = bp_rest_namespace() . '/' . bp_rest_version();\n\t\t$this->rest_base           = buddypress()->groups->id;\n\t\t$this->groups_endpoint     = new BP_REST_Groups_Endpoint();\n\t\t$this->attachment_instance = new BP_Attachment_Cover_Image();\n\t}\n\n\n\tpublic function register_routes() {\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/(?P<group_id>[\\d]+)/cover',\n\t\t\tarray(\n\t\t\t\t'args'   => array(\n\t\t\t\t\t'group_id' => array(\n\t\t\t\t\t\t'description' => __( 'A unique numeric ID for the Group.', 'buddypress' ),\n\t\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_item_permissions_check' ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'create_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::DELETABLE,\n\t\t\t\t\t'callback'            => array( $this, 'delete_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'delete_item_permissions_check' ),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_item_schema' ),\n\t\t\t)\n\t\t);\n\t}\n\n\n\tpublic function get_item( $request ) {\n\t\t$cover_url = bp_get_group_cover_url( $this->group );\n\n\t\tif ( empty( $cover_url ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'bp_rest_attachments_group_cover_no_image',\n\t\t\t\t__( 'Sorry, there was a problem fetching this group cover.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t$retval = array(\n\t\t\t$this->prepare_response_for_collection(\n\t\t\t\t$this->prepare_item_for_response( $cover_url, $request )\n\t\t\t),\n\t\t);\n\n\t\t$response = rest_ensure_response( $retval );\n\n\n\t\tdo_action( 'bp_rest_attachments_group_cover_get_item', $cover_url, $response, $request );\n\n\t\treturn $response;\n\t}\n\n\n\tpublic function get_item_permissions_check( $request ) {\n\t\t$retval = new WP_Error(\n\t\t\t'bp_rest_authorization_required',\n\t\t\t__( 'Sorry, you cannot view group details.', 'buddypress' ),\n\t\t\tarray(\n\t\t\t\t'status' => rest_authorization_required_code(),\n\t\t\t)\n\t\t);\n\n\t\tif ( bp_current_user_can( 'bp_view', array( 'bp_component' => 'groups' ) ) ) {\n\t\t\t$retval = new WP_Error(\n\t\t\t\t'bp_rest_group_invalid_id',\n\t\t\t\t__( 'Invalid group ID.', 'buddypress' ),\n\t\t\t\tarray( 'status' => 404 )\n\t\t\t);\n\n\t\t\t$this->group = $this->groups_endpoint->get_group_object( $request );\n\n\t\t\tif ( false !== $this->group && $this->groups_endpoint->can_see( $this->group ) ) {\n\t\t\t\t$retval = true;\n\t\t\t}\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_get_item_permissions_check', $retval, $request );\n\t}\n\n\n\tpublic function create_item( $request ) {\n\t\t$request->set_param( 'context', 'edit' );\n\n\n\t\t$files = $request->get_file_params();\n\n\t\tif ( empty( $files ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'bp_rest_attachments_group_cover_no_image_file',\n\t\t\t\t__( 'Sorry, you need an image file to upload.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\t$cover_url = $this->upload_cover_from_file( $files );\n\t\tif ( is_wp_error( $cover_url ) ) {\n\t\t\treturn $cover_url;\n\t\t}\n\n\t\t$retval = array(\n\t\t\t$this->prepare_response_for_collection(\n\t\t\t\t$this->prepare_item_for_response( $cover_url, $request )\n\t\t\t),\n\t\t);\n\n\t\t$response = rest_ensure_response( $retval );\n\n\n\t\tdo_action( 'bp_rest_attachments_group_cover_create_item', $cover_url, $response, $request );\n\n\t\treturn $response;\n\t}\n\n\n\tpublic function create_item_permissions_check( $request ) {\n\t\t$retval = $this->delete_item_permissions_check( $request );\n\n\t\tif ( ! is_wp_error( $retval ) && bp_disable_group_cover_image_uploads() ) {\n\t\t\t$retval = new WP_Error(\n\t\t\t\t'bp_rest_attachments_group_cover_disabled',\n\t\t\t\t__( 'Sorry, group cover upload is disabled.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_create_item_permissions_check', $retval, $request );\n\t}\n\n\n\tpublic function delete_item( $request ) {\n\t\t$request->set_param( 'context', 'edit' );\n\n\t\t$cover_url = bp_get_group_cover_url( $this->group );\n\t\t$deleted   = bp_attachments_delete_file(\n\t\t\tarray(\n\t\t\t\t'item_id'    => (int) $this->group->id,\n\t\t\t\t'object_dir' => $this->get_cover_object_component(),\n\t\t\t\t'type'       => 'cover-image',\n\t\t\t)\n\t\t);\n\n\t\tif ( ! $deleted ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'bp_rest_attachments_group_cover_delete_failed',\n\t\t\t\t__( 'Sorry, there was a problem deleting this group cover.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\t$response = new WP_REST_Response();\n\t\t$response->set_data(\n\t\t\tarray(\n\t\t\t\t'deleted'  => true,\n\t\t\t\t'previous' => $cover_url,\n\t\t\t)\n\t\t);\n\n\n\t\tdo_action( 'bp_rest_attachments_group_cover_delete_item', $this->group, $response, $request );\n\n\t\treturn $response;\n\t}\n\n\n\tpublic function delete_item_permissions_check( $request ) {\n\t\t$retval = $this->get_item_permissions_check( $request );\n\n\t\tif ( ! is_wp_error( $retval ) ) {\n\t\t\t$args  = array();\n\t\t\t$error = new WP_Error(\n\t\t\t\t'bp_rest_authorization_required',\n\t\t\t\t__( 'Sorry, you are not allowed to perform this action.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => rest_authorization_required_code(),\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tif ( ! isset( $this->group->id ) || ! isset( $this->object ) ) {\n\t\t\t\t$retval = $error;\n\t\t\t} else {\n\t\t\t\t$args = array(\n\t\t\t\t\t'item_id' => (int) $this->group->id,\n\t\t\t\t\t'object'  => $this->object,\n\t\t\t\t);\n\n\t\t\t\tif ( ! is_user_logged_in() ) {\n\t\t\t\t\t$retval = new WP_Error(\n\t\t\t\t\t\t'bp_rest_authorization_required',\n\t\t\t\t\t\t__( 'Sorry, you need to be logged in to perform this action.', 'buddypress' ),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'status' => rest_authorization_required_code(),\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t} elseif ( bp_attachments_current_user_can( 'edit_cover_image', $args ) ) {\n\t\t\t\t\t$retval = true;\n\t\t\t\t} else {\n\t\t\t\t\t$retval = $error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_delete_item_permissions_check', $retval, $request );\n\t}\n\n\n\tpublic function prepare_item_for_response( $cover_url, $request ) {\n\t\t$data = array(\n\t\t\t'image' => $cover_url,\n\t\t);\n\n\t\t$context  = ! empty( $request->get_param( 'context' ) ) ? $request->get_param( 'context' ) : 'view';\n\t\t$data     = $this->add_additional_fields_to_object( $data, $request );\n\t\t$data     = $this->filter_response_by_context( $data, $context );\n\t\t$response = rest_ensure_response( $data );\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_prepare_value', $response, $request, $cover_url );\n\t}\n\n\n\tpublic function get_item_schema() {\n\t\tif ( is_null( $this->schema ) ) {\n\t\t\t$this->schema = array(\n\t\t\t\t'$schema'    => 'http:\n\t\t\t\t'title'      => 'bp_attachments_group_cover',\n\t\t\t\t'type'       => 'object',\n\t\t\t\t'properties' => array(\n\t\t\t\t\t'image' => array(\n\t\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t\t\t'description' => __( 'Full size of the image file.', 'buddypress' ),\n\t\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t\t'format'      => 'uri',\n\t\t\t\t\t\t'readonly'    => true,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_schema', $this->add_additional_fields_schema( $this->schema ) );\n\t}\n}\n\n'BP-REST/tests/bootstrap.php'\n:<?php\n\n\n\nconst WP_TESTS_PHPUNIT_POLYFILLS_PATH = __DIR__ . '/../vendor/yoast/phpunit-polyfills';\n\n\nrequire( dirname( __FILE__ ) . '/define-constants.php' );\n\nif ( ! file_exists( WP_TESTS_DIR . '/includes/functions.php' ) ) {\n\tdie( \"The WordPress PHPUnit test suite could not be found.\\n\" );\n}\n\nif ( ! file_exists( BP_TESTS_DIR . '/includes/loader.php' ) ) {\n\tdie( \"The BuddyPress plugin could not be found.\\n\" );\n}\n\n\nrequire_once WP_TESTS_DIR . '/includes/functions.php';\n\n\nfunction _manually_load_plugins() {\n\n\n\trequire_once BP_TESTS_DIR . '/includes/loader.php';\n\n\n\trequire_once dirname( __FILE__ ) . '/../bp-rest.php';\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugins' );\n\necho \"Loading WP Testing environment...\\n\";\nrequire_once WP_TESTS_DIR . '/includes/bootstrap.php';\n\necho \"Loading BuddyPress testcases...\\n\";\nrequire_once BP_TESTS_DIR . '/includes/testcase.php';\nrequire_once BP_TESTS_DIR . '/includes/testcase-emails.php';\n\n\nfunction toggle_component_visibility( $visibility = true ) {\n\t$visibility = $visibility ? 'members' : 'anyone';\n\n\tupdate_option(\n\t\t'_bp_community_visibility',\n\t\tarray(\n\t\t\t'global'   => $visibility,\n\t\t\t'activity' => $visibility,\n\t\t\t'members'  => $visibility,\n\t\t\t'groups'   => $visibility,\n\t\t\t'blogs'    => $visibility,\n\t\t)\n\t);\n}\n\n'BP-REST/bp-rest.php'\n:<?php\n\n\n\n\ndefined( 'ABSPATH' ) || exit;\n\n\nfunction bp_rest() {\n\n\tif ( ! class_exists( 'WP_REST_Controller' ) ) {\n\t\treturn;\n\t}\n\n\trequire_once __DIR__ . '/includes/bp-components/classes/class-bp-rest-components-endpoint.php';\n\t$controller = new BP_REST_Components_Endpoint();\n\t$controller->register_routes();\n\n\tif ( bp_is_active( 'members' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-members-endpoint.php';\n\t\t$controller = new BP_REST_Members_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-attachments/classes/trait-attachments.php';\n\n\n\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-attachments-member-avatar-endpoint.php';\n\t\t$controller = new BP_REST_Attachments_Member_Avatar_Endpoint();\n\t\t$controller->register_routes();\n\n\n\t\tif ( bp_is_active( 'members', 'cover_image' ) ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-attachments-member-cover-endpoint.php';\n\t\t\t$controller = new BP_REST_Attachments_Member_Cover_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\n\t\tif ( bp_get_signup_allowed() ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-signup-endpoint.php';\n\t\t\t$controller = new BP_REST_Signup_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\t}\n\n\tif ( bp_is_active( 'activity' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-activity/classes/class-bp-rest-activity-endpoint.php';\n\t\t$controller = new BP_REST_Activity_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( is_multisite() && bp_is_active( 'blogs' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-blogs/classes/class-bp-rest-blogs-endpoint.php';\n\t\t$controller = new BP_REST_Blogs_Endpoint();\n\t\t$controller->register_routes();\n\n\n\t\tif ( bp_is_active( 'blogs', 'site-icon' ) ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-attachments/classes/trait-attachments.php';\n\t\t\trequire_once __DIR__ . '/includes/bp-blogs/classes/class-bp-rest-attachments-blog-avatar-endpoint.php';\n\t\t\t$controller = new BP_REST_Attachments_Blog_Avatar_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\t}\n\n\tif ( bp_is_active( 'xprofile' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-xprofile/classes/class-bp-rest-xprofile-fields-endpoint.php';\n\t\t$controller = new BP_REST_XProfile_Fields_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-xprofile/classes/class-bp-rest-xprofile-field-groups-endpoint.php';\n\t\t$controller = new BP_REST_XProfile_Field_Groups_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-xprofile/classes/class-bp-rest-xprofile-data-endpoint.php';\n\t\t$controller = new BP_REST_XProfile_Data_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( bp_is_active( 'groups' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-groups-endpoint.php';\n\t\t$controller = new BP_REST_Groups_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-group-membership-endpoint.php';\n\t\t$controller = new BP_REST_Group_Membership_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-group-invites-endpoint.php';\n\t\t$controller = new BP_REST_Group_Invites_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-group-membership-request-endpoint.php';\n\t\t$controller = new BP_REST_Group_Membership_Request_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-attachments/classes/trait-attachments.php';\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-attachments-group-avatar-endpoint.php';\n\t\t$controller = new BP_REST_Attachments_Group_Avatar_Endpoint();\n\t\t$controller->register_routes();\n\n\n\t\tif ( bp_is_active( 'groups', 'cover_image' ) ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-attachments-group-cover-endpoint.php';\n\t\t\t$controller = new BP_REST_Attachments_Group_Cover_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\t}\n\n\tif ( bp_is_active( 'messages' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-messages/classes/class-bp-rest-messages-endpoint.php';\n\t\t$controller = new BP_REST_Messages_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-messages/classes/class-bp-rest-sitewide-notices-endpoint.php';\n\t\t$controller = new BP_REST_Sitewide_Notices_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( bp_is_active( 'notifications' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-notifications/classes/class-bp-rest-notifications-endpoint.php';\n\t\t$controller = new BP_REST_Notifications_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( bp_is_active( 'friends' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-friends/classes/class-bp-rest-friends-endpoint.php';\n\t\t$controller = new BP_REST_Friends_Endpoint();\n\t\t$controller->register_routes();\n\t}\n}\nadd_action( 'bp_rest_api_init', 'bp_rest', 5 );\n\n\nfunction bp_filter_rest_request_blog_url( $request, $url ) {\n\n\tif ( ! bp_is_active( 'blogs' ) || empty( $url ) ) {\n\t\treturn $request;\n\t}\n\n\n\t$bits      = wp_parse_url( $url );\n\t$home_bits = wp_parse_url( get_home_url() );\n\n\tif ( empty( $bits['host'] ) || empty( $home_bits['host'] ) ) {\n\t\treturn $request;\n\t}\n\n\n\tif ( $bits['host'] === $home_bits['host'] ) {\n\t\treturn $request;\n\t}\n\n\n\t$request = new WP_REST_Request( 'GET', $bits['path'] );\n\t$request->set_query_params( array( 'bp_blogs_url' => $url ) );\n\n\treturn $request;\n}\nadd_filter( 'rest_request_from_url', 'bp_filter_rest_request_blog_url', 10, 2 );\n\n\nfunction bp_rest_post_dispatch( $response, $instance, $request ) {\n\tif (\n\t\t! bp_is_active( 'blogs' )\n\t\t|| 404 !== $response->get_status()\n\t\t|| 'embed' !== $request->get_param( 'context' )\n\t\t|| empty( $request->get_param( 'bp_blogs_url' ) )\n\t\t|| empty( $request->get_route() )\n\t) {\n\t\treturn $response;\n\t}\n\n\n\t$bits = wp_parse_url( $request->get_param( 'bp_blogs_url' ) );\n\n\n\tif ( empty( $bits['host'] ) || empty( $bits['path'] ) ) {\n\t\treturn $response;\n\t}\n\n\n\tif ( $request->get_route() !== $bits['path'] ) {\n\t\treturn $response;\n\t}\n\n\n\t$site = get_site_by_path( $bits['host'], $bits['path'] );\n\n\tif ( ! $site instanceof WP_Site || empty( $site->blog_id ) ) {\n\t\treturn $response;\n\t}\n\n\tswitch_to_blog( absint( $site->blog_id ) );\n\n\t$response = rest_do_request(\n\t\tnew WP_REST_Request(\n\t\t\t'GET',\n\t\t\tstr_replace(\n\t\t\t\t'/wp-json',\n\t\t\t\t'',\n\t\t\t\t$request->get_route()\n\t\t\t)\n\t\t)\n\t);\n\n\trestore_current_blog();\n\n\n\treturn $response;\n}\nadd_filter( 'rest_post_dispatch', 'bp_rest_post_dispatch', 10, 3 );\n",
        "gt": [
            "'BP-REST/includes/bp-groups/classes/class-bp-rest-attachments-group-cover-endpoint.php'",
            "'BP-REST/bp-rest.php'",
            "'BP-REST/tests/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'",
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'",
            "'bootstrap-blocks-wordpress-plugin/src/container/class-container-block-type.php'",
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'"
        ],
        "content": "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'\n:<?php\n\n\nnamespace WP_Bootstrap_Blocks;\n\nuse WP_Bootstrap_Blocks\\Button\\Button_Block_Type;\nuse WP_Bootstrap_Blocks\\Column\\Column_Block_Type;\nuse WP_Bootstrap_Blocks\\Container\\Container_Block_Type;\nuse WP_Bootstrap_Blocks\\Row\\Row_Block_Type;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nclass WP_Bootstrap_Blocks {\n\n\n\tprotected static $instance = null;\n\n\n\tpublic static $version = '5.2.0';\n\n\n\tpublic $token = 'wp-bootstrap-blocks';\n\n\n\tpublic $assets_dir;\n\n\n\tpublic $assets_url;\n\n\n\tpublic $languages_dir;\n\n\n\tpublic $languages_dir_full;\n\n\n\tpublic function __construct() {\n\t\t$this->define_constants();\n\t\t$this->init_plugin_environment();\n\t\t$this->includes();\n\t\t$this->init_hooks();\n\t\t$this->register_block_types();\n\t\tSettings::init( $this->assets_dir, $this->assets_url );\n\t}\n\n\n\tprotected function define_constants() {\n\t\tif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_ABSPATH' ) ) {\n\t\t\tdefine( 'WP_BOOTSTRAP_BLOCKS_ABSPATH', trailingslashit( dirname( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t}\n\t}\n\n\n\tprotected function init_plugin_environment() {\n\n\t\t$this->assets_dir = WP_BOOTSTRAP_BLOCKS_ABSPATH . 'build/';\n\t\t$this->assets_url = esc_url( trailingslashit( plugins_url( '/build/', WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t$this->languages_dir = dirname( plugin_basename( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) . '/languages/';\n\t\t$this->languages_dir_full = plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'languages/';\n\t}\n\n\n\tpublic function includes() {\n\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/wp-bootstrap-blocks-functions.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/class-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/container/class-container-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/row/class-row-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/column/class-column-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/button/class-button-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/settings/class-settings.php';\n\t}\n\n\n\tprotected function init_hooks() {\n\n\t\tadd_action( 'enqueue_block_assets', array( $this, 'enqueue_block_assets' ) );\n\n\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'enqueue_block_editor_assets' ), 99 );\n\n\n\t\tif ( class_exists( 'WP_Block_Editor_Context' ) ) {\n\n\t\t\tadd_filter( 'block_categories_all', array( $this, 'register_custom_block_category' ), 10, 2 );\n\t\t} else {\n\t\t\tadd_filter( 'block_categories', array( $this, 'register_custom_block_category_old' ), 10, 2 );\n\t\t}\n\n\n\t\tadd_action( 'plugins_loaded', array( $this, 'load_plugin_textdomain' ) );\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'set_script_translations' ), 100 );\n\n\n\t\tadd_action( 'init', array( $this, 'check_version' ) );\n\t}\n\n\n\tpublic function enqueue_block_assets() {\n\n\t\t$enqueue_block_assets = apply_filters( 'wp_bootstrap_blocks_enqueue_block_assets', true );\n\t\tif ( ! $enqueue_block_assets ) {\n\t\t\treturn;\n\t\t}\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-styles',\n\t\t\tesc_url( $this->assets_url ) . 'style-index.css',\n\t\t\tarray(),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function enqueue_block_editor_assets() {\n\n\t\t$index_path = $this->assets_dir . 'index.js';\n\t\t$index_url = esc_url( $this->assets_url ) . 'index.js';\n\t\t$index_asset_file = $this->assets_dir . 'index.asset.php';\n\t\t$index_asset = file_exists( $index_asset_file )\n\t\t\t? require_once $index_asset_file\n\t\t\t: null;\n\t\t$index_dependencies = isset( $index_asset['dependencies'] ) ? $index_asset['dependencies'] : array();\n\t\t$index_version = isset( $index_asset['version'] ) ? $index_asset['version'] : filemtime( $index_path );\n\n\t\twp_enqueue_script(\n\t\t\t$this->token . '-js',\n\t\t\t$index_url,\n\t\t\t$index_dependencies,\n\t\t\t$index_version,\n\t\t\ttrue\n\t\t);\n\n\t\twp_localize_script(\n\t\t\t$this->token . '-js',\n\t\t\t'wpBootstrapBlocks',\n\t\t\tarray(\n\t\t\t\t'bootstrapVersion' => Settings::get_bootstrap_version(),\n\t\t\t\t'isBootstrap5Active' => Settings::is_bootstrap_5_active(),\n\t\t\t\t'isCssGridEnabled' => Settings::is_css_grid_enabled(),\n\t\t\t)\n\t\t);\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-editor-styles',\n\t\t\tesc_url( $this->assets_url ) . 'index.css',\n\t\t\tarray( 'wp-edit-blocks' ),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function register_custom_block_category( $block_categories, $block_editor_context ) {\n\t\treturn $this->add_custom_block_category( $block_categories );\n\t}\n\n\n\tpublic function register_custom_block_category_old( $categories, $post ) {\n\t\treturn $this->add_custom_block_category( $categories );\n\t}\n\n\n\tprotected function add_custom_block_category( $block_categories ) {\n\t\treturn array_merge(\n\t\t\t$block_categories,\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'slug' => 'wp-bootstrap-blocks',\n\t\t\t\t\t'title' => __( 'Bootstrap Blocks', 'wp-bootstrap-blocks' ),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t}\n\n\n\tpublic function load_plugin_textdomain() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\tload_plugin_textdomain( $domain, false, $this->languages_dir );\n\t}\n\n\n\tpublic function set_script_translations() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\twp_set_script_translations( $this->token . '-js', $domain, $this->languages_dir_full );\n\t}\n\n\n\tpublic function register_block_types() {\n\t\tnew Container_Block_Type();\n\t\tnew Row_Block_Type();\n\t\tnew Column_Block_Type();\n\t\tnew Button_Block_Type();\n\t}\n\n\n\tpublic static function instance() {\n\t\tif ( is_null( self::$instance ) ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\n\t\treturn self::$instance;\n\t}\n\n\n\tpublic function __clone() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function __wakeup() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function check_version() {\n\t\tif ( defined( 'IFRAME_REQUEST' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$transient_name = 'wp_bootstrap_blocks_version';\n\n\t\t$old_version = get_transient( $transient_name );\n\t\tif ( false === $old_version ) {\n\t\t\t$old_version = get_option( $this->token . '_version' );\n\t\t\tset_transient( $transient_name, $old_version, 5 * MINUTE_IN_SECONDS );\n\t\t}\n\t\t$new_version = self::$version;\n\t\tif ( $old_version !== $new_version ) {\n\t\t\t$this->log_version_number();\n\t\t\tdelete_transient( $transient_name );\n\n\n\t\t\tdo_action( $this->token . '_updated', $new_version, $old_version );\n\t\t}\n\t}\n\n\n\tprotected function log_version_number() {\n\t\tdelete_option( $this->token . '_version' );\n\t\tupdate_option( $this->token . '_version', self::$version );\n\t}\n}\n\n'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'\n:<?php\n\n\n\nrequire_once dirname( __DIR__ ) . '/vendor/autoload.php';\n\n\n\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\n\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = getenv( 'WP_PHPUNIT__DIR' );\n}\n\n\nif ( ! $_tests_dir ) {\n\t$_try_tests_dir = __DIR__ . '/../../../../../tests/phpunit';\n\tif ( file_exists( $_try_tests_dir . '/includes/functions.php' ) ) {\n\t\t$_tests_dir = $_try_tests_dir;\n\t}\n}\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = '/tmp/wordpress-tests-lib';\n}\n\n\nrequire_once $_tests_dir . '/includes/functions.php';\n\n\n\ndefine( 'GUTENBERG_LOAD_VENDOR_SCRIPTS', false );\n\n\nfunction _manually_load_plugin() {\n\trequire dirname( __DIR__ ) . '/wp-bootstrap-blocks.php';\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\n\n\nrequire $_tests_dir . '/includes/bootstrap.php';\n\n\nrequire_once __DIR__ . '/wp-bootstrap-blocks-unittestcase.php';\n\n'bootstrap-blocks-wordpress-plugin/src/container/class-container-block-type.php'\n:<?php\n\n\nnamespace WP_Bootstrap_Blocks\\Container;\n\nuse WP_Bootstrap_Blocks\\Block_Type;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\nif ( ! class_exists( '\\WP_Bootstrap_Blocks\\Container\\Container_Block_Type', false ) ) :\n\n\n\tclass Container_Block_Type extends Block_Type {\n\n\t\tprotected $name = 'wp-bootstrap-blocks/container';\n\n\n\t\tprotected $attributes = array(\n\t\t\t'isFluid' => array(\n\t\t\t\t'type' => 'boolean',\n\t\t\t),\n\t\t\t'fluidBreakpoint' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'marginAfter' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t);\n\n\n\t\tprotected $default_attributes = array(\n\t\t\t'isFluid' => false,\n\t\t\t'fluidBreakpoint' => '',\n\t\t\t'marginAfter' => 'mb-2',\n\t\t);\n\t}\n\nendif;\n\n'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'\n:<?php\n\n\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE' ) ) {\n\tdefine( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE', __FILE__ );\n}\n\n\nif ( ! class_exists( \\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::class ) ) {\n\trequire_once plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'src/class-wp-bootstrap-blocks.php';\n}\n\n\n\\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::instance();\n",
        "gt": [
            "'bootstrap-blocks-wordpress-plugin/src/container/class-container-block-type.php'",
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'CFPropertyList' => array($vendorDir . '/rodneyrehm/plist/classes'),\n);\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'",
            "'bootstrap-blocks-wordpress-plugin/src/button/class-button-block-type.php'"
        ],
        "content": "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'\n:<?php\n\n\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE' ) ) {\n\tdefine( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE', __FILE__ );\n}\n\n\nif ( ! class_exists( \\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::class ) ) {\n\trequire_once plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'src/class-wp-bootstrap-blocks.php';\n}\n\n\n\\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::instance();\n\n'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'\n:<?php\n\n\nnamespace WP_Bootstrap_Blocks;\n\nuse WP_Bootstrap_Blocks\\Button\\Button_Block_Type;\nuse WP_Bootstrap_Blocks\\Column\\Column_Block_Type;\nuse WP_Bootstrap_Blocks\\Container\\Container_Block_Type;\nuse WP_Bootstrap_Blocks\\Row\\Row_Block_Type;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nclass WP_Bootstrap_Blocks {\n\n\n\tprotected static $instance = null;\n\n\n\tpublic static $version = '5.2.0';\n\n\n\tpublic $token = 'wp-bootstrap-blocks';\n\n\n\tpublic $assets_dir;\n\n\n\tpublic $assets_url;\n\n\n\tpublic $languages_dir;\n\n\n\tpublic $languages_dir_full;\n\n\n\tpublic function __construct() {\n\t\t$this->define_constants();\n\t\t$this->init_plugin_environment();\n\t\t$this->includes();\n\t\t$this->init_hooks();\n\t\t$this->register_block_types();\n\t\tSettings::init( $this->assets_dir, $this->assets_url );\n\t}\n\n\n\tprotected function define_constants() {\n\t\tif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_ABSPATH' ) ) {\n\t\t\tdefine( 'WP_BOOTSTRAP_BLOCKS_ABSPATH', trailingslashit( dirname( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t}\n\t}\n\n\n\tprotected function init_plugin_environment() {\n\n\t\t$this->assets_dir = WP_BOOTSTRAP_BLOCKS_ABSPATH . 'build/';\n\t\t$this->assets_url = esc_url( trailingslashit( plugins_url( '/build/', WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t$this->languages_dir = dirname( plugin_basename( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) . '/languages/';\n\t\t$this->languages_dir_full = plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'languages/';\n\t}\n\n\n\tpublic function includes() {\n\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/wp-bootstrap-blocks-functions.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/class-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/container/class-container-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/row/class-row-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/column/class-column-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/button/class-button-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/settings/class-settings.php';\n\t}\n\n\n\tprotected function init_hooks() {\n\n\t\tadd_action( 'enqueue_block_assets', array( $this, 'enqueue_block_assets' ) );\n\n\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'enqueue_block_editor_assets' ), 99 );\n\n\n\t\tif ( class_exists( 'WP_Block_Editor_Context' ) ) {\n\n\t\t\tadd_filter( 'block_categories_all', array( $this, 'register_custom_block_category' ), 10, 2 );\n\t\t} else {\n\t\t\tadd_filter( 'block_categories', array( $this, 'register_custom_block_category_old' ), 10, 2 );\n\t\t}\n\n\n\t\tadd_action( 'plugins_loaded', array( $this, 'load_plugin_textdomain' ) );\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'set_script_translations' ), 100 );\n\n\n\t\tadd_action( 'init', array( $this, 'check_version' ) );\n\t}\n\n\n\tpublic function enqueue_block_assets() {\n\n\t\t$enqueue_block_assets = apply_filters( 'wp_bootstrap_blocks_enqueue_block_assets', true );\n\t\tif ( ! $enqueue_block_assets ) {\n\t\t\treturn;\n\t\t}\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-styles',\n\t\t\tesc_url( $this->assets_url ) . 'style-index.css',\n\t\t\tarray(),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function enqueue_block_editor_assets() {\n\n\t\t$index_path = $this->assets_dir . 'index.js';\n\t\t$index_url = esc_url( $this->assets_url ) . 'index.js';\n\t\t$index_asset_file = $this->assets_dir . 'index.asset.php';\n\t\t$index_asset = file_exists( $index_asset_file )\n\t\t\t? require_once $index_asset_file\n\t\t\t: null;\n\t\t$index_dependencies = isset( $index_asset['dependencies'] ) ? $index_asset['dependencies'] : array();\n\t\t$index_version = isset( $index_asset['version'] ) ? $index_asset['version'] : filemtime( $index_path );\n\n\t\twp_enqueue_script(\n\t\t\t$this->token . '-js',\n\t\t\t$index_url,\n\t\t\t$index_dependencies,\n\t\t\t$index_version,\n\t\t\ttrue\n\t\t);\n\n\t\twp_localize_script(\n\t\t\t$this->token . '-js',\n\t\t\t'wpBootstrapBlocks',\n\t\t\tarray(\n\t\t\t\t'bootstrapVersion' => Settings::get_bootstrap_version(),\n\t\t\t\t'isBootstrap5Active' => Settings::is_bootstrap_5_active(),\n\t\t\t\t'isCssGridEnabled' => Settings::is_css_grid_enabled(),\n\t\t\t)\n\t\t);\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-editor-styles',\n\t\t\tesc_url( $this->assets_url ) . 'index.css',\n\t\t\tarray( 'wp-edit-blocks' ),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function register_custom_block_category( $block_categories, $block_editor_context ) {\n\t\treturn $this->add_custom_block_category( $block_categories );\n\t}\n\n\n\tpublic function register_custom_block_category_old( $categories, $post ) {\n\t\treturn $this->add_custom_block_category( $categories );\n\t}\n\n\n\tprotected function add_custom_block_category( $block_categories ) {\n\t\treturn array_merge(\n\t\t\t$block_categories,\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'slug' => 'wp-bootstrap-blocks',\n\t\t\t\t\t'title' => __( 'Bootstrap Blocks', 'wp-bootstrap-blocks' ),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t}\n\n\n\tpublic function load_plugin_textdomain() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\tload_plugin_textdomain( $domain, false, $this->languages_dir );\n\t}\n\n\n\tpublic function set_script_translations() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\twp_set_script_translations( $this->token . '-js', $domain, $this->languages_dir_full );\n\t}\n\n\n\tpublic function register_block_types() {\n\t\tnew Container_Block_Type();\n\t\tnew Row_Block_Type();\n\t\tnew Column_Block_Type();\n\t\tnew Button_Block_Type();\n\t}\n\n\n\tpublic static function instance() {\n\t\tif ( is_null( self::$instance ) ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\n\t\treturn self::$instance;\n\t}\n\n\n\tpublic function __clone() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function __wakeup() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function check_version() {\n\t\tif ( defined( 'IFRAME_REQUEST' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$transient_name = 'wp_bootstrap_blocks_version';\n\n\t\t$old_version = get_transient( $transient_name );\n\t\tif ( false === $old_version ) {\n\t\t\t$old_version = get_option( $this->token . '_version' );\n\t\t\tset_transient( $transient_name, $old_version, 5 * MINUTE_IN_SECONDS );\n\t\t}\n\t\t$new_version = self::$version;\n\t\tif ( $old_version !== $new_version ) {\n\t\t\t$this->log_version_number();\n\t\t\tdelete_transient( $transient_name );\n\n\n\t\t\tdo_action( $this->token . '_updated', $new_version, $old_version );\n\t\t}\n\t}\n\n\n\tprotected function log_version_number() {\n\t\tdelete_option( $this->token . '_version' );\n\t\tupdate_option( $this->token . '_version', self::$version );\n\t}\n}\n\n'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'\n:<?php\n\n\n\nrequire_once dirname( __DIR__ ) . '/vendor/autoload.php';\n\n\n\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\n\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = getenv( 'WP_PHPUNIT__DIR' );\n}\n\n\nif ( ! $_tests_dir ) {\n\t$_try_tests_dir = __DIR__ . '/../../../../../tests/phpunit';\n\tif ( file_exists( $_try_tests_dir . '/includes/functions.php' ) ) {\n\t\t$_tests_dir = $_try_tests_dir;\n\t}\n}\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = '/tmp/wordpress-tests-lib';\n}\n\n\nrequire_once $_tests_dir . '/includes/functions.php';\n\n\n\ndefine( 'GUTENBERG_LOAD_VENDOR_SCRIPTS', false );\n\n\nfunction _manually_load_plugin() {\n\trequire dirname( __DIR__ ) . '/wp-bootstrap-blocks.php';\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\n\n\nrequire $_tests_dir . '/includes/bootstrap.php';\n\n\nrequire_once __DIR__ . '/wp-bootstrap-blocks-unittestcase.php';\n\n'bootstrap-blocks-wordpress-plugin/src/button/class-button-block-type.php'\n:<?php\n\n\nnamespace WP_Bootstrap_Blocks\\Button;\n\nuse WP_Bootstrap_Blocks\\Block_Type;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\nif ( ! class_exists( '\\WP_Bootstrap_Blocks\\Button\\Button_Block_Type', false ) ) :\n\n\n\tclass Button_Block_Type extends Block_Type {\n\n\t\tprotected $name = 'wp-bootstrap-blocks/button';\n\n\n\t\tprotected $attributes = array(\n\t\t\t'url' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'linkTarget' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'rel' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'text' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'style' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'alignment' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t);\n\n\n\t\tprotected $default_attributes = array(\n\t\t\t'url' => '',\n\t\t\t'linkTarget' => '',\n\t\t\t'rel' => '',\n\t\t\t'text' => '',\n\t\t\t'style' => 'primary',\n\t\t\t'alignment' => '',\n\t\t);\n\t}\n\nendif;\n",
        "gt": [
            "'bootstrap-blocks-wordpress-plugin/src/button/class-button-block-type.php'",
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'BP-REST/includes/bp-groups/classes/class-bp-rest-attachments-group-cover-endpoint.php'",
            "'BP-REST/tests/bootstrap.php'",
            "'BP-REST/bp-rest.php'"
        ],
        "content": "'BP-REST/includes/bp-groups/classes/class-bp-rest-attachments-group-cover-endpoint.php'\n:<?php\n\n\ndefined( 'ABSPATH' ) || exit;\n\n\nclass BP_REST_Attachments_Group_Cover_Endpoint extends WP_REST_Controller {\n\tuse BP_REST_Attachments;\n\n\n\tprotected $attachment_instance;\n\n\n\tprotected $groups_endpoint;\n\n\n\tprotected $group;\n\n\n\tprotected $object = 'group';\n\n\n\tpublic function __construct() {\n\t\t$this->namespace           = bp_rest_namespace() . '/' . bp_rest_version();\n\t\t$this->rest_base           = buddypress()->groups->id;\n\t\t$this->groups_endpoint     = new BP_REST_Groups_Endpoint();\n\t\t$this->attachment_instance = new BP_Attachment_Cover_Image();\n\t}\n\n\n\tpublic function register_routes() {\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/(?P<group_id>[\\d]+)/cover',\n\t\t\tarray(\n\t\t\t\t'args'   => array(\n\t\t\t\t\t'group_id' => array(\n\t\t\t\t\t\t'description' => __( 'A unique numeric ID for the Group.', 'buddypress' ),\n\t\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_item_permissions_check' ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'create_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::DELETABLE,\n\t\t\t\t\t'callback'            => array( $this, 'delete_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'delete_item_permissions_check' ),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_item_schema' ),\n\t\t\t)\n\t\t);\n\t}\n\n\n\tpublic function get_item( $request ) {\n\t\t$cover_url = bp_get_group_cover_url( $this->group );\n\n\t\tif ( empty( $cover_url ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'bp_rest_attachments_group_cover_no_image',\n\t\t\t\t__( 'Sorry, there was a problem fetching this group cover.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t$retval = array(\n\t\t\t$this->prepare_response_for_collection(\n\t\t\t\t$this->prepare_item_for_response( $cover_url, $request )\n\t\t\t),\n\t\t);\n\n\t\t$response = rest_ensure_response( $retval );\n\n\n\t\tdo_action( 'bp_rest_attachments_group_cover_get_item', $cover_url, $response, $request );\n\n\t\treturn $response;\n\t}\n\n\n\tpublic function get_item_permissions_check( $request ) {\n\t\t$retval = new WP_Error(\n\t\t\t'bp_rest_authorization_required',\n\t\t\t__( 'Sorry, you cannot view group details.', 'buddypress' ),\n\t\t\tarray(\n\t\t\t\t'status' => rest_authorization_required_code(),\n\t\t\t)\n\t\t);\n\n\t\tif ( bp_current_user_can( 'bp_view', array( 'bp_component' => 'groups' ) ) ) {\n\t\t\t$retval = new WP_Error(\n\t\t\t\t'bp_rest_group_invalid_id',\n\t\t\t\t__( 'Invalid group ID.', 'buddypress' ),\n\t\t\t\tarray( 'status' => 404 )\n\t\t\t);\n\n\t\t\t$this->group = $this->groups_endpoint->get_group_object( $request );\n\n\t\t\tif ( false !== $this->group && $this->groups_endpoint->can_see( $this->group ) ) {\n\t\t\t\t$retval = true;\n\t\t\t}\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_get_item_permissions_check', $retval, $request );\n\t}\n\n\n\tpublic function create_item( $request ) {\n\t\t$request->set_param( 'context', 'edit' );\n\n\n\t\t$files = $request->get_file_params();\n\n\t\tif ( empty( $files ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'bp_rest_attachments_group_cover_no_image_file',\n\t\t\t\t__( 'Sorry, you need an image file to upload.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\t$cover_url = $this->upload_cover_from_file( $files );\n\t\tif ( is_wp_error( $cover_url ) ) {\n\t\t\treturn $cover_url;\n\t\t}\n\n\t\t$retval = array(\n\t\t\t$this->prepare_response_for_collection(\n\t\t\t\t$this->prepare_item_for_response( $cover_url, $request )\n\t\t\t),\n\t\t);\n\n\t\t$response = rest_ensure_response( $retval );\n\n\n\t\tdo_action( 'bp_rest_attachments_group_cover_create_item', $cover_url, $response, $request );\n\n\t\treturn $response;\n\t}\n\n\n\tpublic function create_item_permissions_check( $request ) {\n\t\t$retval = $this->delete_item_permissions_check( $request );\n\n\t\tif ( ! is_wp_error( $retval ) && bp_disable_group_cover_image_uploads() ) {\n\t\t\t$retval = new WP_Error(\n\t\t\t\t'bp_rest_attachments_group_cover_disabled',\n\t\t\t\t__( 'Sorry, group cover upload is disabled.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_create_item_permissions_check', $retval, $request );\n\t}\n\n\n\tpublic function delete_item( $request ) {\n\t\t$request->set_param( 'context', 'edit' );\n\n\t\t$cover_url = bp_get_group_cover_url( $this->group );\n\t\t$deleted   = bp_attachments_delete_file(\n\t\t\tarray(\n\t\t\t\t'item_id'    => (int) $this->group->id,\n\t\t\t\t'object_dir' => $this->get_cover_object_component(),\n\t\t\t\t'type'       => 'cover-image',\n\t\t\t)\n\t\t);\n\n\t\tif ( ! $deleted ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'bp_rest_attachments_group_cover_delete_failed',\n\t\t\t\t__( 'Sorry, there was a problem deleting this group cover.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\t$response = new WP_REST_Response();\n\t\t$response->set_data(\n\t\t\tarray(\n\t\t\t\t'deleted'  => true,\n\t\t\t\t'previous' => $cover_url,\n\t\t\t)\n\t\t);\n\n\n\t\tdo_action( 'bp_rest_attachments_group_cover_delete_item', $this->group, $response, $request );\n\n\t\treturn $response;\n\t}\n\n\n\tpublic function delete_item_permissions_check( $request ) {\n\t\t$retval = $this->get_item_permissions_check( $request );\n\n\t\tif ( ! is_wp_error( $retval ) ) {\n\t\t\t$args  = array();\n\t\t\t$error = new WP_Error(\n\t\t\t\t'bp_rest_authorization_required',\n\t\t\t\t__( 'Sorry, you are not allowed to perform this action.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => rest_authorization_required_code(),\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tif ( ! isset( $this->group->id ) || ! isset( $this->object ) ) {\n\t\t\t\t$retval = $error;\n\t\t\t} else {\n\t\t\t\t$args = array(\n\t\t\t\t\t'item_id' => (int) $this->group->id,\n\t\t\t\t\t'object'  => $this->object,\n\t\t\t\t);\n\n\t\t\t\tif ( ! is_user_logged_in() ) {\n\t\t\t\t\t$retval = new WP_Error(\n\t\t\t\t\t\t'bp_rest_authorization_required',\n\t\t\t\t\t\t__( 'Sorry, you need to be logged in to perform this action.', 'buddypress' ),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'status' => rest_authorization_required_code(),\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t} elseif ( bp_attachments_current_user_can( 'edit_cover_image', $args ) ) {\n\t\t\t\t\t$retval = true;\n\t\t\t\t} else {\n\t\t\t\t\t$retval = $error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_delete_item_permissions_check', $retval, $request );\n\t}\n\n\n\tpublic function prepare_item_for_response( $cover_url, $request ) {\n\t\t$data = array(\n\t\t\t'image' => $cover_url,\n\t\t);\n\n\t\t$context  = ! empty( $request->get_param( 'context' ) ) ? $request->get_param( 'context' ) : 'view';\n\t\t$data     = $this->add_additional_fields_to_object( $data, $request );\n\t\t$data     = $this->filter_response_by_context( $data, $context );\n\t\t$response = rest_ensure_response( $data );\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_prepare_value', $response, $request, $cover_url );\n\t}\n\n\n\tpublic function get_item_schema() {\n\t\tif ( is_null( $this->schema ) ) {\n\t\t\t$this->schema = array(\n\t\t\t\t'$schema'    => 'http:\n\t\t\t\t'title'      => 'bp_attachments_group_cover',\n\t\t\t\t'type'       => 'object',\n\t\t\t\t'properties' => array(\n\t\t\t\t\t'image' => array(\n\t\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t\t\t'description' => __( 'Full size of the image file.', 'buddypress' ),\n\t\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t\t'format'      => 'uri',\n\t\t\t\t\t\t'readonly'    => true,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_group_cover_schema', $this->add_additional_fields_schema( $this->schema ) );\n\t}\n}\n\n'BP-REST/tests/bootstrap.php'\n:<?php\n\n\n\nconst WP_TESTS_PHPUNIT_POLYFILLS_PATH = __DIR__ . '/../vendor/yoast/phpunit-polyfills';\n\n\nrequire( dirname( __FILE__ ) . '/define-constants.php' );\n\nif ( ! file_exists( WP_TESTS_DIR . '/includes/functions.php' ) ) {\n\tdie( \"The WordPress PHPUnit test suite could not be found.\\n\" );\n}\n\nif ( ! file_exists( BP_TESTS_DIR . '/includes/loader.php' ) ) {\n\tdie( \"The BuddyPress plugin could not be found.\\n\" );\n}\n\n\nrequire_once WP_TESTS_DIR . '/includes/functions.php';\n\n\nfunction _manually_load_plugins() {\n\n\n\trequire_once BP_TESTS_DIR . '/includes/loader.php';\n\n\n\trequire_once dirname( __FILE__ ) . '/../bp-rest.php';\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugins' );\n\necho \"Loading WP Testing environment...\\n\";\nrequire_once WP_TESTS_DIR . '/includes/bootstrap.php';\n\necho \"Loading BuddyPress testcases...\\n\";\nrequire_once BP_TESTS_DIR . '/includes/testcase.php';\nrequire_once BP_TESTS_DIR . '/includes/testcase-emails.php';\n\n\nfunction toggle_component_visibility( $visibility = true ) {\n\t$visibility = $visibility ? 'members' : 'anyone';\n\n\tupdate_option(\n\t\t'_bp_community_visibility',\n\t\tarray(\n\t\t\t'global'   => $visibility,\n\t\t\t'activity' => $visibility,\n\t\t\t'members'  => $visibility,\n\t\t\t'groups'   => $visibility,\n\t\t\t'blogs'    => $visibility,\n\t\t)\n\t);\n}\n\n'BP-REST/bp-rest.php'\n:<?php\n\n\n\n\ndefined( 'ABSPATH' ) || exit;\n\n\nfunction bp_rest() {\n\n\tif ( ! class_exists( 'WP_REST_Controller' ) ) {\n\t\treturn;\n\t}\n\n\trequire_once __DIR__ . '/includes/bp-components/classes/class-bp-rest-components-endpoint.php';\n\t$controller = new BP_REST_Components_Endpoint();\n\t$controller->register_routes();\n\n\tif ( bp_is_active( 'members' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-members-endpoint.php';\n\t\t$controller = new BP_REST_Members_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-attachments/classes/trait-attachments.php';\n\n\n\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-attachments-member-avatar-endpoint.php';\n\t\t$controller = new BP_REST_Attachments_Member_Avatar_Endpoint();\n\t\t$controller->register_routes();\n\n\n\t\tif ( bp_is_active( 'members', 'cover_image' ) ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-attachments-member-cover-endpoint.php';\n\t\t\t$controller = new BP_REST_Attachments_Member_Cover_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\n\t\tif ( bp_get_signup_allowed() ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-signup-endpoint.php';\n\t\t\t$controller = new BP_REST_Signup_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\t}\n\n\tif ( bp_is_active( 'activity' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-activity/classes/class-bp-rest-activity-endpoint.php';\n\t\t$controller = new BP_REST_Activity_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( is_multisite() && bp_is_active( 'blogs' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-blogs/classes/class-bp-rest-blogs-endpoint.php';\n\t\t$controller = new BP_REST_Blogs_Endpoint();\n\t\t$controller->register_routes();\n\n\n\t\tif ( bp_is_active( 'blogs', 'site-icon' ) ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-attachments/classes/trait-attachments.php';\n\t\t\trequire_once __DIR__ . '/includes/bp-blogs/classes/class-bp-rest-attachments-blog-avatar-endpoint.php';\n\t\t\t$controller = new BP_REST_Attachments_Blog_Avatar_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\t}\n\n\tif ( bp_is_active( 'xprofile' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-xprofile/classes/class-bp-rest-xprofile-fields-endpoint.php';\n\t\t$controller = new BP_REST_XProfile_Fields_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-xprofile/classes/class-bp-rest-xprofile-field-groups-endpoint.php';\n\t\t$controller = new BP_REST_XProfile_Field_Groups_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-xprofile/classes/class-bp-rest-xprofile-data-endpoint.php';\n\t\t$controller = new BP_REST_XProfile_Data_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( bp_is_active( 'groups' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-groups-endpoint.php';\n\t\t$controller = new BP_REST_Groups_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-group-membership-endpoint.php';\n\t\t$controller = new BP_REST_Group_Membership_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-group-invites-endpoint.php';\n\t\t$controller = new BP_REST_Group_Invites_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-group-membership-request-endpoint.php';\n\t\t$controller = new BP_REST_Group_Membership_Request_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-attachments/classes/trait-attachments.php';\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-attachments-group-avatar-endpoint.php';\n\t\t$controller = new BP_REST_Attachments_Group_Avatar_Endpoint();\n\t\t$controller->register_routes();\n\n\n\t\tif ( bp_is_active( 'groups', 'cover_image' ) ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-attachments-group-cover-endpoint.php';\n\t\t\t$controller = new BP_REST_Attachments_Group_Cover_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\t}\n\n\tif ( bp_is_active( 'messages' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-messages/classes/class-bp-rest-messages-endpoint.php';\n\t\t$controller = new BP_REST_Messages_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-messages/classes/class-bp-rest-sitewide-notices-endpoint.php';\n\t\t$controller = new BP_REST_Sitewide_Notices_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( bp_is_active( 'notifications' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-notifications/classes/class-bp-rest-notifications-endpoint.php';\n\t\t$controller = new BP_REST_Notifications_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( bp_is_active( 'friends' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-friends/classes/class-bp-rest-friends-endpoint.php';\n\t\t$controller = new BP_REST_Friends_Endpoint();\n\t\t$controller->register_routes();\n\t}\n}\nadd_action( 'bp_rest_api_init', 'bp_rest', 5 );\n\n\nfunction bp_filter_rest_request_blog_url( $request, $url ) {\n\n\tif ( ! bp_is_active( 'blogs' ) || empty( $url ) ) {\n\t\treturn $request;\n\t}\n\n\n\t$bits      = wp_parse_url( $url );\n\t$home_bits = wp_parse_url( get_home_url() );\n\n\tif ( empty( $bits['host'] ) || empty( $home_bits['host'] ) ) {\n\t\treturn $request;\n\t}\n\n\n\tif ( $bits['host'] === $home_bits['host'] ) {\n\t\treturn $request;\n\t}\n\n\n\t$request = new WP_REST_Request( 'GET', $bits['path'] );\n\t$request->set_query_params( array( 'bp_blogs_url' => $url ) );\n\n\treturn $request;\n}\nadd_filter( 'rest_request_from_url', 'bp_filter_rest_request_blog_url', 10, 2 );\n\n\nfunction bp_rest_post_dispatch( $response, $instance, $request ) {\n\tif (\n\t\t! bp_is_active( 'blogs' )\n\t\t|| 404 !== $response->get_status()\n\t\t|| 'embed' !== $request->get_param( 'context' )\n\t\t|| empty( $request->get_param( 'bp_blogs_url' ) )\n\t\t|| empty( $request->get_route() )\n\t) {\n\t\treturn $response;\n\t}\n\n\n\t$bits = wp_parse_url( $request->get_param( 'bp_blogs_url' ) );\n\n\n\tif ( empty( $bits['host'] ) || empty( $bits['path'] ) ) {\n\t\treturn $response;\n\t}\n\n\n\tif ( $request->get_route() !== $bits['path'] ) {\n\t\treturn $response;\n\t}\n\n\n\t$site = get_site_by_path( $bits['host'], $bits['path'] );\n\n\tif ( ! $site instanceof WP_Site || empty( $site->blog_id ) ) {\n\t\treturn $response;\n\t}\n\n\tswitch_to_blog( absint( $site->blog_id ) );\n\n\t$response = rest_do_request(\n\t\tnew WP_REST_Request(\n\t\t\t'GET',\n\t\t\tstr_replace(\n\t\t\t\t'/wp-json',\n\t\t\t\t'',\n\t\t\t\t$request->get_route()\n\t\t\t)\n\t\t)\n\t);\n\n\trestore_current_blog();\n\n\n\treturn $response;\n}\nadd_filter( 'rest_post_dispatch', 'bp_rest_post_dispatch', 10, 3 );\n",
        "gt": [
            "'BP-REST/includes/bp-groups/classes/class-bp-rest-attachments-group-cover-endpoint.php'",
            "'BP-REST/bp-rest.php'",
            "'BP-REST/tests/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/inc/firebird.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/iframe_content.php'"
        ],
        "content": "'firebirdwebadmin/inc/firebird.inc.php'\n:<?php\n\nfunction get_preset_charsets($server_family = null, $server_version = null)\n{\n    $charsets = array('ASCII',\n                      'BIG_5',\n                      'CYRL',\n                      'DOS437',\n                      'DOS850',\n                      'DOS852',\n                      'DOS857',\n                      'DOS860',\n                      'DOS861',\n                      'DOS863',\n                      'DOS865',\n                      'EUCJ_0208',\n                      'GB_2312',\n                      'ISO8859_1',\n                      'KSC_5601',\n                      'NEXT',\n                      'NONE',\n                      'OCTETS',\n                      'SJIS_0208',\n                      'UNICODE_FSS',\n                      'WIN1250',\n                      'WIN1251',\n                      'WIN1252',\n                      'WIN1253',\n                      'WIN1254',\n                      'CP943C',\n                      'DOS737',\n                      'DOS775',\n                      'DOS858',\n                      'DOS862',\n                      'DOS864',\n                      'DOS866',\n                      'DOS869',\n                      'GB18030',\n                      'GBK',\n                      'WIN1255',\n                      'WIN1256',\n                      'WIN1257',\n                      'ISO8859_2',\n                      'ISO8859_3',\n                      'ISO8859_4',\n                      'ISO8859_5',\n                      'ISO8859_6',\n                      'ISO8859_7',\n                      'ISO8859_8',\n                      'ISO8859_9',\n                      'ISO8859_13',\n                      'KOI8R',\n                      'KOI8U',\n                      'TIS620',\n                      'UTF8',\n                      'WIN1258'\n                    );\n    asort($charsets);\n\n    return $charsets;\n}\n\n$fieldtypes = array(7 => 'SMALLINT',\n            8 => 'INTEGER',\n            9 => 'QUAD',\n           10 => 'FLOAT',\n           11 => 'D_FLOAT',\n           12 => 'DATE',\n           13 => 'TIME',\n           14 => 'CHAR',\n           16 => 'INT64',\n           27 => 'DOUBLE',\n           35 => 'TIMESTAMP',\n           37 => 'VARCHAR',\n           40 => 'CSTRING',\n          261 => 'BLOB', );\n\n\n\n\nfunction get_datatypes($server_family = null, $server_version = null)\n{\n    $datatypes = array(7 => 'SMALLINT',\n                       8 => 'INTEGER',\n                       10 => 'FLOAT',\n                       27 => 'DOUBLE',\n                       701 => 'DECIMAL',\n                       702 => 'NUMERIC',\n                       14 => 'CHARACTER',\n                       37 => 'VARCHAR',\n                       12 => 'DATE',\n                       13 => 'TIME',\n                       35 => 'TIMESTAMP',\n                       261 => 'BLOB',\n                       40 => 'CSTRING',\n                       16 => 'BIGINT',\n                       );\n\n    return $datatypes;\n}\n\n$fk_actions = array(0 => 'NO ACTION',\n                    1 => 'CASCADE',\n                    2 => 'SET DEFAULT',\n                    3 => 'SET NULL',\n                    );\n\n$pagesizes = array(4096, 8192, 16384);\n\n$server_types = array('other',\n                      'FB_2.1',\n                      'FB_2.5',\n                      'FB_3.0',\n                      'FB_3.5',\n                      'FB_4.0',\n                      );\n\n\n\n\nfunction get_reserved_words($server_family, $server_version)\n{\n    $reserved_words =\n        array('ACTION', 'ACTIVE', 'ADD', 'ADMIN', 'AFTER', 'ALL', 'ALTER', 'AND', 'ANY',\n              'AS', 'ASC', 'ASCENDING', 'AT', 'AUTO', 'AUTODLL', 'AVG', 'BASED', 'BASENAME',\n              'BASE_NAME', 'BEFORE', 'BEGIN', 'BETWEEN', 'BLOB', 'BLOBEDIT', 'BUFFER', 'BY',\n              'CACHE', 'CASCADE', 'CAST', 'CHAR', 'CHARACTER', 'CHARACTER_LENGTH',\n              'CHAR_LENGTH', 'CHECK', 'CHECK_POINT_LEN', 'CHECK_POINT_LENGTH', 'COLLATE',\n              'COLUMN', 'COMMIT', 'COMMITTED', 'COMPILETIME', 'COMPUTED', 'CLOSE',\n              'CONDITIONAL', 'CONNECT', 'CONSTRAINT', 'CONTAINING', 'CONTINUE', 'COUNT',\n              'CREATE', 'CSTRING', 'CURRENT', 'CURRENT_DATE', 'CURRENT_TIME',\n              'CURRENT_TIMESTAMP', 'CURSOR', 'DATABASE', 'DATE', 'DAY', 'DB_KEY', 'DEBUG',\n              'DEC', 'DECIMAL', 'DECLARE', 'DEFAULT', 'DELETE', 'DESC', 'DESCENDING',\n              'DESCRIBE', 'DESCRIPTOR', 'DISCONNECT', 'DISPLAY', 'DISTINCT', 'DO', 'DOMAIN',\n              'DOUBLE', 'DROP', 'ECHO', 'EDIT', 'ELSE', 'END', 'ENTRY_POINT', 'ESCAPE',\n              'EVENT', 'EXCEPTION', 'EXECUTE', 'EXISTS', 'EXIT', 'EXTERN', 'EXTERNAL',\n              'EXTRACT', 'FETCH', 'FILE', 'FILTER', 'FLOAT', 'FOR', 'FOREIGN', 'FOUND',\n              'FREE_IT', 'FROM', 'FULL', 'FUNCTION', 'GDSCODE', 'GENERATOR', 'GEN_ID',\n              'GLOBAL', 'GOTO', 'GRANT', 'GROUP', 'GROUP_COMMIT_WAIT',\n              'GROUP_COMMIT_WAIT_TIME', 'HAVING', 'HELP', 'HOUR', 'IF', 'IMMEDIATE', 'IN',\n              'INACTIVE', 'INDEX', 'INDICATOR', 'INIT', 'INNER', 'INPUT', 'INPUT_TYPE',\n              'INSERT', 'INT', 'INTEGER', 'INTO', 'IS', 'ISOLATION', 'ISQL', 'JOIN', 'KEY',\n              'LC_MESSAGES', 'LC_TYPE', 'LEFT', 'LENGTH', 'LEV', 'LEVEL', 'LIKE', 'LOGFILE',\n              'LOG_BUFFER_SIZE', 'LOG_BUF_SIZE', 'LONG', 'MANUAL', 'MAX', 'MAXIMUM',\n              'MAXIMUM_SEGMENT', 'MAX_SEGMENT', 'MERGE', 'MESSAGE', 'MIN', 'MINIMUM',\n              'MINUTE', 'MODULE_NAME', 'MONTH', 'NAMES', 'NATIONAL', 'NATURAL', 'NCHAR',\n              'NO', 'NOAUTO', 'NOT', 'NULL', 'NUMERIC', 'NUM_LOG_BUFS', 'NUM_LOG_BUFFERS',\n              'OCTET_LENGTH', 'OF', 'ON', 'ONLY', 'OPEN', 'OPTION', 'OR', 'ORDER', 'OUTER',\n              'OUTPUT', 'OUTPUT_TYPE', 'OVERFLOW', 'PAGE', 'PAGELENGTH', 'PAGES',\n              'PAGE_SIZE', 'PARAMETER', 'PASSWORD', 'PLAN', 'POSITION', 'POST_EVENT',\n              'PRECISION', 'PREPARE', 'PROCEDURE', 'PROTECTED', 'PRIMARY', 'PRIVILEGES',\n              'PUBLIC', 'QUIT', 'RAW_PARTITIONS', 'RDB\\$DB_KEY', 'READ', 'REAL',\n              'RECORD-VERSION', 'REFERENCES', 'RELEASE', 'RESERV', 'RESERVING', 'RESTRICT',\n              'RETAIN', 'RETURN', 'RETURNING_VALUES', 'RETURNS', 'REVOKE', 'RIGHT', 'ROLE',\n              'ROLLBACK', 'RUNTIME', 'SCHEMA', 'SECOND', 'SEGMENT', 'SELECT', 'SET',\n              'SHADOW', 'SHARED', 'SHELL', 'SHOW', 'SINGULAR', 'SIZE', 'SMALLINT',\n              'SNAPSHOT', 'SOME', 'SORT', 'SQLCODE', 'SQLERROR', 'SQLWARNING', 'STABILITY',\n              'STARTING', 'STARTS', 'STATEMENT', 'STATIC', 'STATISTICS', 'SUB_TYPE', 'SUM',\n              'SUSPEND', 'TABLE', 'TERMINATOR', 'THEN', 'TIME', 'TIMESTAMP', 'TO',\n              'TRANSACTION', 'TRANSLATE', 'TRANSLATION', 'TRIGGER', 'TRIM', 'TYPE',\n              'UNCOMMITTED', 'UNION', 'UNIQUE', 'UPDATE', 'UPPER', 'USER', 'USING', 'VALUE',\n              'VALUES', 'VARCHAR', 'VARIABLE', 'VARYING', 'VERSION', 'VIEW', 'WAIT',\n              'WEEKDAY', 'WHEN', 'WHENEVER', 'WHERE', 'WHILE', 'WITH', 'WORK', 'WRITE',\n              'YEAR', 'YEARDAY','BIGINT', 'CASE', 'CURRENT_CONNECTION', 'CURRENT_ROLE', 'CURRENT_USER', 'CURRENT_TRANSACTION',\n              'RECREATE', 'ROW_COUNT', 'RELEASE', 'SAVEPOINT', 'ABS', 'BOOLEAN', 'BOTH', 'CHAR_LENGTH',\n              'CHARCTER_LENGTH', 'FALSE', 'LEADING', 'OCTET_LENGTH', 'TRIM', 'TRAILING', 'TRUE', 'UNKNOWN',\n               );\n\n    return $reserved_words;\n}\n\n\n\n\nfunction get_context_variables($server_family, $server_version)\n{\n    $context_variables = array('USER', 'CURRENT_DATE', 'CURRENT_CONNECTION' , 'CURRENT_ROLE' , 'CURRENT_TIME' ,'CURRENT_TIMESTAMP','CURRENT_TRANSACTION','CURRENT_USER');\n\n    return $context_variables;\n}\n\n\n\n\nfunction get_system_tables($server_family, $server_version)\n{\n    $system_tables =\n        array('RDB$CHARACTER_SETS',\n              'RDB$CHECK_CONSTRAINTS',\n              'RDB$COLLATIONS',\n              'RDB$DATABASE',\n              'RDB$DEPENDENCIES',\n              'RDB$EXCEPTIONS',\n              'RDB$FIELD_DIMENSIONS',\n              'RDB$FIELDS',\n              'RDB$FILES',\n              'RDB$FILTERS',\n              'RDB$FORMATS',\n              'RDB$FUNCTION_ARGUMENTS',\n              'RDB$FUNCTIONS',\n              'RDB$GENERATORS',\n              'RDB$INDEX_SEGMENTS',\n              'RDB$INDICES',\n              'RDB$LOG_FILES',\n              'RDB$PAGES',\n              'RDB$PROCEDURE_PARAMETERS',\n              'RDB$PROCEDURES',\n              'RDB$REF_CONSTRAINTS',\n              'RDB$RELATION_CONSTRAINTS',\n              'RDB$RELATION_FIELDS',\n              'RDB$RELATIONS',\n              'RDB$ROLES',\n              'RDB$SECURITY_CLASSES',\n              'RDB$TRANSACTIONS',\n              'RDB$TRIGGER_MESSAGES',\n              'RDB$TRIGGERS',\n              'RDB$TYPES',\n              'RDB$USER_PRIVILEGES',\n              'RDB$VIEW_RELATIONS', );\n\n    return $system_tables;\n}\n\n\ndefine('OT_RELATION', 0);\ndefine('OT_VIEW', 1);\ndefine('OT_TRIGGER', 2);\ndefine('OT_COMPUTED_FIELD', 3);\ndefine('OT_VALIDATION', 4);\ndefine('OT_PROCEDURE', 5);\ndefine('OT_EXPRESSION_INDEX', 6);\ndefine('OT_EXCEPTION', 7);\ndefine('OT_USER', 8);\ndefine('OT_FIELD', 9);\ndefine('OT_INDEX', 10);\ndefine('OT_DEPENDENT_COUNT', 11);\ndefine('OT_USER_GROUP', 12);\ndefine('OT_ROLE', 13);\ndefine('OT_GENERATOR', 14);\ndefine('OT_UDF', 15);\ndefine('OT_BLOB_FILTER', 16);\n\n'firebirdwebadmin/inc/script_start.inc.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/configuration.inc.php';\n\nif (DEBUG) {\n    $start_time = @microtime();\n}\n\nrequire './inc/functions.inc.php';\n\nsession_start();\nset_error_handler('error_handler');\n\nrequire get_language_file('./lang/');\nrequire './inc/session.inc.php';\nrequire './inc/firebird.inc.php';\nrequire './inc/panel_elements.inc.php';\nrequire './inc/javascript.inc.php';\n\nif (DEBUG || DEBUG_HTML) {\n    include './inc/debug_funcs.inc.php';\n}\n\nif (!extension_loaded('interbase')) {\n    die($ERRORS['NO_IBASE_MODULE']);\n}\n\nif (!isset($_SESSION['s_init'])\n    || ($_SESSION['s_cookies'] === 'untested')\n) {\n    initialize_session();\n    fallback_session();\n} else {\n    localize_session_vars();\n}\n\nif (!isset($no_session_referer) || $no_session_referer !== true) {\n\n    $s_referer = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n}\n\nsend_http_headers();\n\n\n$message = '';\n$warning = '';\n$error = '';\n$fb_error = '';\n$php_error = '';\n$debug = array();\n$externcmd = '';\n\n\n\n$js_stack = '';\n\n\n\n$sql = '';\n\n\n\nif ($s_connected == true && !isset($_GET['unconnected'])) {\n    $dbhandle = db_connect();\n\n    if ($dbhandle === false) {\n        $fb_error = fbird_errmsg();\n        $s_connected = false;\n        $s_tables_valid = false;\n        $s_wt['table'] = '';\n    }\n\n    if (empty($s_charsets)) {\n        $s_charsets = get_charsets();\n    }\n}\n\n\nlist($family, $version) = server_info($s_login['server']);\ndefine('SERVER_FAMILY', $family);\ndefine('SERVER_VERSION', $version);\n\nif ($s_binpath != BINPATH) {\n\n\n    if (!is_dir(BINPATH)\n        || (!is_file(BINPATH.'isql') && !is_file(BINPATH.'isql-fb') && !is_file(BINPATH.'isql.exe'))\n    ) {\n        $warning = sprintf($WARNINGS['BAD_ISQLPATH'], BINPATH);\n    }\n\n\n    if (!is_dir(TMPPATH) || !is_writeable(TMPPATH)) {\n        $warning .= sprintf($WARNINGS['BAD_TMPPATH'], TMPPATH);\n    }\n\n    $s_binpath = BINPATH;\n}\n\nif (DEBUG_HTML) {\n    ob_start();\n}\n\n'firebirdwebadmin/iframe_content.php'\n:<?php\n\n\n\n\n\n\n\n\n$no_session_referer = true;\n\nrequire './inc/script_start.inc.php';\n\n$key = get_request_data('key', 'GET');\n\nif ($job = get_iframejob($s_iframejobs, $key)) {\n    switch ($job['job']) {\n    case 'metadata':\n        list($content, $error) = isql_get_metadata($s_login['user'], $s_login['password'], $s_login['database'], $s_login['host']);\n        $content = implode(\"\\n\", $content);\n        break;\n\n    case 'dbstat':\n        if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            $content = fbird_db_info($service, $s_login['database'], $job['option']);\n            $content = trim(str_replace(array(chr(0x01), \"\\n\\n\"), array('', \"\\n\"), $content));\n            fbird_service_detach($service);\n        } else {\n            $error = fbird_errmsg();\n        }\n        break;\n\n    case 'backup':\n        if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            $content = fbird_backup($service, $job['source'], $job['target'], $job['options'], true);\n            $content = str_replace(array(chr(0x01).chr(0x0a), 'gbak: '), '', $content);\n            fbird_service_detach($service);\n        } else {\n            $error = fbird_errmsg();\n        }\n        break;\n\n    case 'restore':\n        if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            $content = fbird_restore($service, $job['source'], $job['target'], $job['options'], true);\n            $content = str_replace(array(chr(0x01).chr(0x0a), 'gbak: '), '', $content);\n            fbird_service_detach($service);\n\n\n            if ($job['connect']) {\n                $s_login['database'] = $job['target'];\n                if (!empty($s_sysdba_pw)) {\n                    $s_login['user'] = 'SYSDBA';\n                    $s_login['password'] = $s_sysdba_pw;\n                }\n\n                if ($dbhandle = db_connect()) {\n\n                    $s_connected = true;\n                    remove_edit_panels();\n                } else {\n\n                    $content .= '<p><span class=\"err\">'.$info_strings['FBError'].':</span>'.fbird_errmsg().\"</p>\\n\";\n                    $s_login['password'] = '';\n                    $s_connected = false;\n                }\n                cleanup_session();\n            }\n        } else {\n            $error = fbird_errmsg();\n        }\n        break;\n\n    case 'export':\n\n        include './inc/export.inc.php';\n\n        ob_start();\n        export_data($job['data']);\n        $content = ob_get_contents();\n        ob_end_clean();\n        break;\n    }\n\n    echo iframe_content($content, $error);\n\n    unset($s_iframejobs[$key]);\n    globalize_session_vars();\n}\n\nfunction get_iframejob($iframejobs, $key)\n{\n    if (isset($iframejobs[$key])) {\n        return $iframejobs[$key];\n    }\n\n    return  false;\n}\n\nfunction iframe_content($content, $error)\n{\n    return html_head('FirebirdWebAdmin '.VERSION)\n         .\"<body class=\\\"if\\\">\\n\"\n         .($error ? '<p><span class=\"err\">'.$GLOBALS['info_strings']['Error'].':</span> '.$error.\"</p>\\n\" : '')\n         .\"<pre>\\n\"\n         .htmlspecialchars($content).\"\\n\"\n         .\"</pre>\\n\"\n         .\"</body>\\n\"\n         .\"</html>\\n\";\n}\n",
        "gt": [
            "'firebirdwebadmin/inc/firebird.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/iframe_content.php'"
        ]
    },
    {
        "files": [
            "'openfuego/lib/TwitterOAuth/TwitterOAuth.class.php'",
            "'openfuego/consume.php'",
            "'openfuego/fetch.php'",
            "'openfuego/init.php'"
        ],
        "content": "'openfuego/lib/TwitterOAuth/TwitterOAuth.class.php'\n:<?php\n\n\n\n\n\nrequire_once('OAuth.class.php');\n\nclass TwitterOAuth {\n\n  public $http_code;\n\n  public $url;\n\n  public $host = \"https:\n\n  public $timeout = 30;\n\n  public $connecttimeout = 30;\n\n  public $ssl_verifypeer = FALSE;\n\n  public $format = 'json';\n\n  public $decode_json = TRUE;\n\n  public $http_info;\n\n  public $useragent = 'TwitterOAuth v0.2.0-beta2';\n\n\n\n\n\n\n\n  function accessTokenURL()  { return 'https:\n  function authenticateURL() { return 'https:\n  function authorizeURL()    { return 'https:\n  function requestTokenURL() { return 'https:\n\n\n  function lastStatusCode() { return $this->http_status; }\n  function lastAPICall() { return $this->last_api_call; }\n\n\n  function __construct($consumer_key, $consumer_secret, $oauth_token = NULL, $oauth_token_secret = NULL) {\n    $this->sha1_method = new OAuthSignatureMethod_HMAC_SHA1();\n    $this->consumer = new OAuthConsumer($consumer_key, $consumer_secret);\n    if (!empty($oauth_token) && !empty($oauth_token_secret)) {\n      $this->token = new OAuthConsumer($oauth_token, $oauth_token_secret);\n    } else {\n      $this->token = NULL;\n    }\n  }\n\n\n\n  function getRequestToken($oauth_callback) {\n    $parameters = array();\n    $parameters['oauth_callback'] = $oauth_callback;\n    $request = $this->oAuthRequest($this->requestTokenURL(), 'GET', $parameters);\n    $token = OAuthUtil::parse_parameters($request);\n    $this->token = new OAuthConsumer($token['oauth_token'], $token['oauth_token_secret']);\n    return $token;\n  }\n\n\n  function getAuthorizeURL($token, $sign_in_with_twitter = TRUE) {\n    if (is_array($token)) {\n      $token = $token['oauth_token'];\n    }\n    if (empty($sign_in_with_twitter)) {\n      return $this->authorizeURL() . \"?oauth_token={$token}\";\n    } else {\n       return $this->authenticateURL() . \"?oauth_token={$token}\";\n    }\n  }\n\n\n  function getAccessToken($oauth_verifier) {\n    $parameters = array();\n    $parameters['oauth_verifier'] = $oauth_verifier;\n    $request = $this->oAuthRequest($this->accessTokenURL(), 'GET', $parameters);\n    $token = OAuthUtil::parse_parameters($request);\n    $this->token = new OAuthConsumer($token['oauth_token'], $token['oauth_token_secret']);\n    return $token;\n  }\n\n\n  function getXAuthToken($username, $password) {\n    $parameters = array();\n    $parameters['x_auth_username'] = $username;\n    $parameters['x_auth_password'] = $password;\n    $parameters['x_auth_mode'] = 'client_auth';\n    $request = $this->oAuthRequest($this->accessTokenURL(), 'POST', $parameters);\n    $token = OAuthUtil::parse_parameters($request);\n    $this->token = new OAuthConsumer($token['oauth_token'], $token['oauth_token_secret']);\n    return $token;\n  }\n\n\n  function get($url, $parameters = array()) {\n    $response = $this->oAuthRequest($url, 'GET', $parameters);\n    if ($this->format === 'json' && $this->decode_json) {\n      return json_decode($response);\n    }\n    return $response;\n  }\n\n\n  function post($url, $parameters = array()) {\n    $response = $this->oAuthRequest($url, 'POST', $parameters);\n    if ($this->format === 'json' && $this->decode_json) {\n      return json_decode($response);\n    }\n    return $response;\n  }\n\n\n  function delete($url, $parameters = array()) {\n    $response = $this->oAuthRequest($url, 'DELETE', $parameters);\n    if ($this->format === 'json' && $this->decode_json) {\n      return json_decode($response);\n    }\n    return $response;\n  }\n\n\n  function oAuthRequest($url, $method, $parameters) {\n    if (strrpos($url, 'https:\n      $url = \"{$this->host}{$url}.{$this->format}\";\n    }\n    $request = OAuthRequest::from_consumer_and_token($this->consumer, $this->token, $method, $url, $parameters);\n    $request->sign_request($this->sha1_method, $this->consumer, $this->token);\n    switch ($method) {\n    case 'GET':\n      return $this->http($request->to_url(), 'GET');\n    default:\n      return $this->http($request->get_normalized_http_url(), $method, $request->to_postdata());\n    }\n  }\n\n\n  function http($url, $method, $postfields = NULL) {\n    $this->http_info = array();\n    $ci = curl_init();\n\n    curl_setopt($ci, CURLOPT_USERAGENT, $this->useragent);\n    curl_setopt($ci, CURLOPT_CONNECTTIMEOUT, $this->connecttimeout);\n    curl_setopt($ci, CURLOPT_TIMEOUT, $this->timeout);\n    curl_setopt($ci, CURLOPT_RETURNTRANSFER, TRUE);\n    curl_setopt($ci, CURLOPT_HTTPHEADER, array('Expect:'));\n    curl_setopt($ci, CURLOPT_SSL_VERIFYPEER, $this->ssl_verifypeer);\n    curl_setopt($ci, CURLOPT_HEADERFUNCTION, array($this, 'getHeader'));\n    curl_setopt($ci, CURLOPT_HEADER, FALSE);\n\n    switch ($method) {\n      case 'POST':\n        curl_setopt($ci, CURLOPT_POST, TRUE);\n        if (!empty($postfields)) {\n          curl_setopt($ci, CURLOPT_POSTFIELDS, $postfields);\n        }\n        break;\n      case 'DELETE':\n        curl_setopt($ci, CURLOPT_CUSTOMREQUEST, 'DELETE');\n        if (!empty($postfields)) {\n          $url = \"{$url}?{$postfields}\";\n        }\n    }\n\n    curl_setopt($ci, CURLOPT_URL, $url);\n    $response = curl_exec($ci);\n    $this->http_code = curl_getinfo($ci, CURLINFO_HTTP_CODE);\n    $this->http_info = array_merge($this->http_info, curl_getinfo($ci));\n    $this->url = $url;\n    curl_close ($ci);\n    return $response;\n  }\n\n\n  function getHeader($ch, $header) {\n    $i = strpos($header, ':');\n    if (!empty($i)) {\n      $key = str_replace('-', '_', strtolower(substr($header, 0, $i)));\n      $value = trim(substr($header, $i + 2));\n      $this->http_header[$key] = $value;\n    }\n    return strlen($header);\n  }\n}\n\n'openfuego/consume.php'\n:<?php namespace OpenFuego;\n\n\n\nuse OpenFuego\\lib\\DbHandle as DbHandle;\nuse OpenFuego\\app\\Consumer as Consumer;\nuse OpenFuego\\lib\\Logger as Logger;\n\nif (!defined('PHP_VERSION_ID') || PHP_VERSION_ID < 50300) {\n\tdie(__NAMESPACE__ . ' requires PHP 5.3.0 or higher.');\n}\n\nif (php_sapi_name() != 'cli') {\n\tdie('This script must be invoked from the command line.');\n}\n\nif (!defined('OPENFUEGO') && function_exists('pcntl_fork')) {\n\t$error_message = \"\\n\"\n\t\t. 'Do not run this script directly. Run fetch.php to start.'\n\t\t. \"\\n\\n\";\n\tdie($error_message);\n}\n\nrequire_once(__DIR__ . '/init.php');\n\nregister_shutdown_function(function() {\n\tLogger::fatal(__NAMESPACE__ . \" consumer was terminated.\");\n});\n\n$dbh = new DbHandle();\n\n$sql = \"\nCREATE TABLE IF NOT EXISTS `openfuego_citizens` (\n  `user_id` bigint(20) unsigned NOT NULL,\n  `influence` tinyint(2) unsigned NOT NULL,\n  PRIMARY KEY (`user_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n\nCREATE TABLE IF NOT EXISTS `openfuego_links` (\n  `link_id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `url` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',\n  `first_seen` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  `first_tweet` bigint(20) unsigned NOT NULL,\n  `first_user` varchar(20) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',\n  `first_user_id` bigint(20) unsigned DEFAULT NULL,\n  `weighted_count` smallint(5) unsigned NOT NULL,\n  `count` smallint(5) unsigned NOT NULL DEFAULT '1',\n  `last_seen` timestamp NOT NULL DEFAULT '0000-00-00 00:00:00',\n  PRIMARY KEY (`link_id`),\n  UNIQUE KEY `url` (`url`)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n\nCREATE TABLE IF NOT EXISTS `openfuego_short_links` (\n  `id` mediumint(8) unsigned NOT NULL AUTO_INCREMENT,\n  `input_url` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\n  `long_url` text COLLATE utf8_unicode_ci NOT NULL,\n  `last_seen` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`input_url`),\n  UNIQUE KEY `id` (`id`)\n) ENGINE=InnoDB  DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n\nCREATE TABLE IF NOT EXISTS `openfuego_tweets_cache` (\n  `link_id` mediumint(8) unsigned NOT NULL,\n  `id_str` bigint(20) unsigned NOT NULL,\n  `screen_name` varchar(15) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',\n  `text` varchar(140) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',\n  `profile_image_url` varchar(255) COLLATE utf8_unicode_ci NOT NULL DEFAULT '',\n  `modified` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,\n  PRIMARY KEY (`link_id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;\n\nALTER TABLE `openfuego_tweets_cache`\n  ADD CONSTRAINT `FK.openfuego_tweets_cache.link_id` FOREIGN KEY (`link_id`) REFERENCES `openfuego_links` (`link_id`) ON DELETE CASCADE ON UPDATE CASCADE;\n\";\n\ntry {\n\t$sth = $dbh->prepare($sql);\n\t$sth->execute();\n\n} catch (\\PDOException $e) {\n\tdie($e);\n}\n\n$dbh = NULL;\n\n$consumer = new Consumer();\n$consumer->process();\n\nexit;\n\n'openfuego/fetch.php'\n:<?php namespace OpenFuego;\n\nuse OpenFuego\\lib\\Logger as Logger;\n\nif (!defined('PHP_VERSION_ID') || PHP_VERSION_ID < 50300) {\n\tdie(__NAMESPACE__ . ' requires PHP 5.3.0 or higher.');\n}\n\nif (php_sapi_name() != 'cli') {\n\tdie('This script must be invoked from the command line.');\n}\n\nrequire_once(__DIR__ . '/init.php');\n\nif (!function_exists('pcntl_fork')) {\n\t$error_message = \"\\n\"\n\t\t. 'To start OpenFuego, run these commands:'\n\t\t. \"\\n\\n\"\n\t\t. \"\\tnohup \" . \\PHP_BINDIR . '/php ' . BASE_DIR . '/collect.php > /dev/null 2> /dev/null & echo $!'\n\t\t. \"\\n\"\n\t\t. \"\\tnohup \" . \\PHP_BINDIR . '/php ' . BASE_DIR . '/consume.php > /dev/null 2> /dev/null & echo $!'\n\t\t. \"\\n\\n\";\n\n\tdie($error_message);\n}\n\n\npcntl_signal(SIGHUP, SIG_IGN);\n\n\npcntl_signal(SIGTERM, function() {\n\n\tglobal $_should_stop;\n\t$_should_stop = TRUE;\n\n\tLogger::info(\"Received shutdown request, finishing up.\");\n\n\treturn;\n});\n\n$pids = array();\n\n$pids[0] = pcntl_fork();\n\nif (!$pids[0]) {\n\tinclude_once(__DIR__ . '/collect.php');\n}\n\n$pids[1] = pcntl_fork();\n\nif (!$pids[1]) {\n\tinclude_once(__DIR__ . '/consume.php');\n}\n\necho __NAMESPACE__ . ' collector running as PID ' . $pids[0] . \"\\n\";\necho __NAMESPACE__ . ' consumer running as PID ' . $pids[1] . \"\\n\";\n\n@file_put_contents(\\OpenFuego\\TMP_DIR . '/OpenFuego-collect.pid', $pids[0]);\n@file_put_contents(\\OpenFuego\\TMP_DIR . '/OpenFuego-consume.pid', $pids[1]);\n\nexit;\n?>\n'openfuego/init.php'\n:<?php namespace OpenFuego;\n\n\n\n\n\nif (!defined('PHP_VERSION_ID') || PHP_VERSION_ID < 50300) {\n\n\tdie(__NAMESPACE__ . ' requires PHP 5.3.0 or higher.');\n\n}\n\n\n\ndefine('OPENFUEGO', TRUE);\n\n\n\nrequire(__DIR__ . '/config.php');\n\n\n\nif (isset($argv) && in_array('-v', $argv)) {\n\n\tdefine(__NAMESPACE__ . '\\VERBOSE', TRUE);\n\n}\n\n\n\nelse {\n\n\tdefine(__NAMESPACE__ . '\\VERBOSE', FALSE);\n\n}\n\n\n\nif (\\OpenFuego\\VERBOSE == TRUE) {\n\n\tini_set('display_errors', 1);\n\n\tini_set('error_reporting', E_ALL);\n\n}\n\nelse {\n\n\tini_set('display_errors', 0);\n\n}\n\n\n\nrequire_once(__DIR__ . '/lib/TwitterOAuth/TwitterOAuth.class.php');\n\nrequire_once(__DIR__ . '/lib/Phirehose/OAuthPhirehose.class.php');\n\n\n\nspl_autoload_register(function($className) {\n\n\t$className = str_replace('OpenFuego' . '\\\\', '', $className);\n\n\t$className = strtr($className, '\\\\', DIRECTORY_SEPARATOR);\n\n\t$path = __DIR__ . '/' . $className . '.class.php';\n\n\n\n\tif (is_readable($path)) {\n\n\t\tinclude_once($path);\n\n\t}\n\n});\n\n\n\n\n\ndefine(__NAMESPACE__ . '\\BASE_DIR', __DIR__);\n\ndefine(__NAMESPACE__ . '\\TMP_DIR', BASE_DIR . '/tmp');\n\ndefine(__NAMESPACE__ . '\\POSTMASTER', __NAMESPACE__ . '@' . __NAMESPACE__ . '.local');\n\n\n\nif (!is_dir(TMP_DIR)) {\n\n\tmkdir(TMP_DIR);\n\n\tfile_put_contents(TMP_DIR . '/nothing', 'This file was created to initialize the cache directory. You can delete it.');\n\n}\n\n\n\nconst TWITTER_PREDICATE_LIMIT = 5000;\n\n\n\ndefine(__NAMESPACE__ . '\\BITLY_PRO_DOMAINS', serialize(\n\n\tarray(\n\n\t\t'bit.ly',\n\n\t\t'bitly.com',\n\n\t\t'j.mp'\n\n\t)\n\n));\n\n\n\ndefine(__NAMESPACE__ . '\\SHORT_DOMAINS', serialize(\n\n\tarray(\n\n\t\t'twitpic.com',\n\n\t\t'instagr.am',\n\n\t\t'instagram.com',\n\n\t\t'yfrog.com',\n\n\t\t'twitpic.com',\n\n\t\t'vimeo.com',\n\n\t\t'i.imgur.com',\n\n\t\t'mlkshk.com',\n\n\t\t'lockerz.com',\n\n\t\t'path.com',\n\n\t\t'vine.co'\n\n\t)\n\n));\n\n\n\nconst\n\n\tDB_DRIVER = 'mysql',\n\n\tUSER_AGENT = 'Mozilla/5.0 (compatible; Googlebot/2.1; +http:\n\n\tREFERRER = 'http:\n\n",
        "gt": [
            "'openfuego/lib/TwitterOAuth/TwitterOAuth.class.php'",
            "'openfuego/init.php'",
            "'openfuego/consume.php'",
            "'openfuego/fetch.php'"
        ]
    },
    {
        "files": [
            "'twich/www/redis/Rediska/Exception.php'",
            "'twich/www/redis/Rediska.php'",
            "'twich/www/redis/Rediska/Zend/Application/Resource/Rediska.php'"
        ],
        "content": "'twich/www/redis/Rediska/Exception.php'\n:<?php\n\n\nclass Rediska_Exception extends Exception\n{\n\n}\n'twich/www/redis/Rediska.php'\n:<?php\n\n\nrequire_once 'Rediska/Exception.php';\n\n\nrequire_once 'Rediska/Connection.php';\n\n\nrequire_once 'Rediska/Connection/Specified.php';\n\n\nrequire_once 'Rediska/Command/Interface.php';\n\n\nrequire_once 'Rediska/Command/Abstract.php';\n\n\nrequire_once 'Rediska/KeyDistributor/Interface.php';\n\n\nclass Rediska\n{\n    const EOL = \"\\r\\n\";\n\n    const STABLE_REDIS_VERSION = '1.2.6';\n\n\n    protected static $_defaultInstance;\n\n\n    protected $_connections = array();\n\n\n    protected $_specifiedConnection;\n\n\n    protected static $_commands = array(\n\n        'exists'           => 'Rediska_Command_Exists',\n        'delete'           => 'Rediska_Command_Delete',\n        'gettype'          => 'Rediska_Command_GetType',\n        'getkeysbypattern' => 'Rediska_Command_GetKeysByPattern',\n        'getrandomkey'     => 'Rediska_Command_GetRandomKey',\n        'rename'           => 'Rediska_Command_Rename',\n        'getkeyscount'     => 'Rediska_Command_GetKeysCount',\n        'expire'           => 'Rediska_Command_Expire',\n        'getlifetime'      => 'Rediska_Command_GetLifetime',\n        'selectdb'         => 'Rediska_Command_SelectDb',\n        'movetodb'         => 'Rediska_Command_MoveToDb',\n        'flushdb'          => 'Rediska_Command_FlushDb',\n\n\n        'set'       => 'Rediska_Command_Set',\n        'setandget' => 'Rediska_Command_SetAndGet',\n        'get'       => 'Rediska_Command_Get',\n        'increment' => 'Rediska_Command_Increment',\n        'decrement' => 'Rediska_Command_Decrement',\n\n\n        'appendtolist'   => 'Rediska_Command_AppendToList',\n        'prependtolist'  => 'Rediska_Command_PrependToList',\n        'getlistlength'  => 'Rediska_Command_GetListLength',\n        'getlist'        => 'Rediska_Command_GetList',\n        'truncatelist'   => 'Rediska_Command_TruncateList',\n        'getfromlist'    => 'Rediska_Command_GetFromList',\n        'settolist'      => 'Rediska_Command_SetToList',\n        'deletefromlist' => 'Rediska_Command_DeleteFromList',\n        'shiftfromlist'  => 'Rediska_Command_ShiftFromList',\n        'popfromlist'    => 'Rediska_Command_PopFromList',\n\n\n        'addtoset'         => 'Rediska_Command_AddToSet',\n        'deletefromset'    => 'Rediska_Command_DeleteFromSet',\n        'getrandomfromset' => 'Rediska_Command_GetRandomFromSet',\n    \t'getsetlength'     => 'Rediska_Command_GetSetLength',\n        'existsinset'      => 'Rediska_Command_ExistsInSet',\n        'intersectsets'    => 'Rediska_Command_IntersectSets',\n        'unionsets'        => 'Rediska_Command_UnionSets',\n        'diffsets'         => 'Rediska_Command_DiffSets',\n        'getset'           => 'Rediska_Command_GetSet',\n        'movetoset'        => 'Rediska_Command_MoveToSet',\n\n\n        'addtosortedset'             => 'Rediska_Command_AddToSortedSet',\n        'deletefromsortedset'        => 'Rediska_Command_DeleteFromSortedSet',\n        'getsortedset'               => 'Rediska_Command_GetSortedSet',\n        'incrementscoreinsortedset'  => 'Rediska_Command_IncrementScoreInSortedSet',\n        'getrankfromsortedset'       => 'Rediska_Command_GetRankFromSortedSet',\n        'getfromsortedsetbyscore'    => 'Rediska_Command_GetFromSortedSetByScore',\n        'deletefromsortedsetbyscore' => 'Rediska_Command_DeleteFromSortedSetByScore',\n        'deletefromsortedsetbyrank'  => 'Rediska_Command_DeleteFromSortedSetByRank',\n        'getsortedsetlength'         => 'Rediska_Command_GetSortedSetLength',\n        'getscorefromsortedset'      => 'Rediska_Command_GetScoreFromSortedSet',\n        'unionsortedsets'            => 'Rediska_Command_UnionSortedSets',\n        'intersectsortedsets'        => 'Rediska_Command_IntersectSortedSets',\n\n\n        'sort' => 'Rediska_Command_Sort',\n\n\n        'save'                  => 'Rediska_Command_Save',\n        'getlastsavetime'       => 'Rediska_Command_GetLastSaveTime',\n        'info'                  => 'Rediska_Command_Info',\n        'quit'                  => 'Rediska_Command_Quit',\n        'shutdown'              => 'Rediska_Command_Shutdown',\n        'rewriteappendonlyfile' => 'Rediska_Command_RewriteAppendOnlyFile',\n        'slaveof'               => 'Rediska_Command_SlaveOf',\n    );\n\n\n    protected $_keyDistributor;\n\n\n    protected $_options = array(\n        'namespace'           => '',\n        'servers'             => array(\n            array(\n                'host'   => Rediska_Connection::DEFAULT_HOST,\n                'port'   => Rediska_Connection::DEFAULT_PORT,\n                'weight' => Rediska_Connection::DEFAULT_WEIGHT,\n            )\n        ),\n        'serializer'          => 'serialize',\n        'unserializer'        => 'unserialize',\n        'keydistributor'      => 'consistentHashing',\n        'redisversion'        => self::STABLE_REDIS_VERSION,\n    );\n\n\n    public function __construct(array $options = array())\n    {\n    \t$options = array_change_key_case($options, CASE_LOWER);\n        $options = array_merge($this->_options, $options);\n\n\n        $this->setKeyDistributor($options['keydistributor']);\n        unset($options['keydistributor']);\n\n        $this->setOptions($options);\n\n        self::setDefaultInstace($this);\n\n        $this->_specifiedConnection = new Rediska_Connection_Specified($this);\n    }\n\n\n    public static function getDefaultInstance()\n    {\n    \treturn self::$_defaultInstance;\n    }\n\n\n    public static function setDefaultInstace(Rediska $instance)\n    {\n    \tself::$_defaultInstance = $instance;\n    }\n\n\n    public function setOptions(array $options)\n    {\n        foreach($options as $name => $value) {\n            if (method_exists($this, \"set$name\")) {\n                call_user_func(array($this, \"set$name\"), $value);\n            } else {\n                $this->setOption($name, $value);\n            }\n        }\n\n        return $this;\n    }\n\n\n    public function setOption($name, $value)\n    {\n    \t$lowerName = strtolower($name);\n\n        if (!array_key_exists($lowerName, $this->_options)) {\n            throw new Rediska_Exception(\"Unknown option '$name'\");\n        }\n\n        $this->_options[$lowerName] = $value;\n\n        return $this;\n    }\n\n\n    public function getOption($name)\n    {\n    \t$lowerName = strtolower($name);\n\n        if (!array_key_exists($lowerName, $this->_options)) {\n            throw new Rediska_Exception(\"Unknown option '$name'\");\n        }\n\n        return $this->_options[$lowerName];\n    }\n\n\n    public function setServers(array $servers)\n    {\n        $this->_connections = array();\n        foreach($servers as $alias => $serverOptions) {\n            if (!isset($serverOptions['alias']) && is_string($alias)) {\n                $serverOptions['alias'] = $alias;\n            }\n\n            $this->addServer(\n                isset($serverOptions['host']) ? $serverOptions['host'] : Rediska_Connection::DEFAULT_HOST,\n                isset($serverOptions['port']) ? $serverOptions['port'] : Rediska_Connection::DEFAULT_PORT,\n                $serverOptions);\n        }\n\n        return $this;\n    }\n\n\n    public function addServer($host, $port = Rediska_Connection::DEFAULT_PORT, array $options = array())\n    {\n        if (!isset($options['alias'])) {\n            $connectionString = \"$host:$port\";\n        } else {\n            $connectionString = $options['alias'];\n        }\n\n    \tif (array_key_exists($connectionString, $this->_connections)) {\n    \t\tthrow new Rediska_Exception(\"Server '$connectionString' already added.\");\n    \t}\n\n    \t$options['host'] = $host;\n    \t$options['port'] = $port;\n\n    \t$this->_connections[$connectionString] = new Rediska_Connection($options);\n\n        $this->_keyDistributor->addConnection(\n            $connectionString,\n            isset($options['weight']) ? $options['weight'] : Rediska_Connection::DEFAULT_WEIGHT\n        );\n\n        return $this;\n    }\n\n\n    public function getConnectionByKeyName($name)\n    {\n        if (count($this->_connections) == 1) {\n            $connections = array_values($this->_connections);\n            $connection = $connections[0];\n        } else if ($this->_specifiedConnection->getConnection()) {\n            $connection = $this->_specifiedConnection->getConnection();\n        } else {\n            $alias = $this->_keyDistributor->getConnectionByKeyName($name);\n            $connection = $this->_connections[$alias];\n        }\n\n        return $connection;\n    }\n\n\n    public function getConnectionByAlias($alias)\n    {\n        if (!isset($this->_connections[$alias])) {\n            throw new Rediska_Exception(\"Can't find connection '$alias'\");\n        }\n\n        return $this->_connections[$alias];\n    }\n\n\n    public function getConnections()\n    {\n        if ($this->_specifiedConnection->getConnection()) {\n            return array($this->_specifiedConnection->getConnection());\n        } else {\n            return array_values($this->_connections);\n        }\n    }\n\n\n    public function on($aliasOrConnection)\n    {\n        if ($aliasOrConnection instanceof Rediska_Connection) {\n            $connection = $aliasOrConnection;\n        } else {\n            $alias = $aliasOrConnection;\n            $connection = $this->getConnectionByAlias($alias);\n        }\n\n        $this->_specifiedConnection->setConnection($connection);\n\n        return $this->_specifiedConnection;\n    }\n\n\n    public function pipeline()\n    {\n        require_once 'Rediska/Pipeline.php';\n\n        return new Rediska_Pipeline($this, $this->_specifiedConnection);\n    }\n\n\n    public static function addCommand($name, $className)\n    {\n        if (!class_exists($className)) {\n            throw new Rediska_Exception(\"Class '$className' not found. You must include before or setup autoload\");\n        }\n\n\n        $classReflection = new ReflectionClass($className);\n        if (!in_array('Rediska_Command_Interface', $classReflection->getInterfaceNames())) {\n            throw new Rediska_Exception(\"Class '$className' must implement Rediska_Command_Interface interface\");\n        }\n        $methodCreate = $classReflection->getMethod('create');\n        if (!$methodCreate || !$methodCreate->isPublic()) {\n            throw new Rediska_Exception(\"Class '$className' must have public method 'create'\");\n        }\n\n        $lowerName = strtolower($name);\n        self::$_commands[$lowerName] = $className;\n\n        return true;\n    }\n\n\n    public static function removeCommand($name)\n    {\n        $lowerName = strtolower($name);\n        if (!isset(self::$_commands[$lowerName])) {\n            throw new Rediska_Exception(\"Command '$name' not found\");\n        }\n        unset(self::$_commands[$lowerName]);\n\n        return true;\n    }\n\n\n    public function getCommand($name, $arguments)\n    {\n        $lowerName = strtolower($name);\n        if (!isset(self::$_commands[$lowerName])) {\n            throw new Rediska_Exception(\"Command '$name' not found\");\n        }\n\n\n        if (strpos(self::$_commands[$lowerName], 'Rediska_Command_') === 0) {\n            require_once 'Rediska/Command/' . substr(self::$_commands[$lowerName], 16) . '.php';\n        }\n\n\n        return new self::$_commands[$lowerName]($this, $name, $arguments);\n    }\n\n\n    public function __call($name, $args)\n    {\n        $this->_specifiedConnection->resetConnection();\n\n        $command = $this->getCommand($name, $args);\n        $command->write();\n        return $command->read();\n    }\n\n\n    public function setKeyDistributor($name)\n    {\n        if (is_object($name)) {\n            $this->_keyDistributor = $name;\n        } else if (in_array($name, array('crc32', 'consistentHashing'))) {\n            $name = ucfirst($name);\n            require_once \"Rediska/KeyDistributor/$name.php\";\n            $className = \"Rediska_KeyDistributor_$name\";\n            $this->_keyDistributor = new $className;\n        } else {\n            if (!@class_exists($name)) {\n                throw new Rediska_Exception(\"Key distributor '$name' not found. You need include it before or setup autoload.\");\n            }\n            $this->_keyDistributor = new $name;\n        }\n\n        if (!$this->_keyDistributor instanceof Rediska_KeyDistributor_Interface) {\n            throw new Rediska_Exception(\"'$name' must implement Rediska_KeyDistributor_Interface\");\n        }\n\n\n        foreach($this->_connections as $connectionString => $connection) {\n            $this->_keyDistributor->addConnection($connectionString);\n        }\n\n        return $this;\n    }\n\n\n    public function setSerializer($callback)\n    {\n        if (!is_callable($callback)) {\n            throw new Rediska_Exception(\"Wrong serialize callback\");\n        }\n\n        $this->_options['serializer'] = $callback;\n\n        return $this;\n    }\n\n\n    public function setUnserializer($callback)\n    {\n        if (!is_callable($callback)) {\n            throw new Rediska_Exception(\"Wrong unserialize callback\");\n        }\n\n        $this->_options['unserializer'] = $callback;\n\n        return $this;\n    }\n\n\n    public function serialize($value)\n    {\n        if (is_numeric($value)) {\n            return (string)$value;\n        } else {\n            return call_user_func($this->_options['serializer'], $value);\n        }\n    }\n\n\n    public function unserialize($value)\n    {\n        if (is_null($value)) {\n            return null;\n        } else if (is_numeric($value)) {\n            if (strpos($value, '.') !== false) {\n                $number = (integer)$value;\n            } else {\n                $number = (float)$value;\n            }\n\n            if ((string)$number != $value) {\n                $number = $value;\n            }\n\n            return $number;\n        } else {\n            return call_user_func($this->_options['unserializer'], $value);\n        }\n    }\n}\n'twich/www/redis/Rediska/Zend/Application/Resource/Rediska.php'\n:<?php\n\n\nrequire_once 'Rediska.php';\n\n\nrequire_once 'Zend/Application/Resource/ResourceAbstract.php';\n\n\nclass Rediska_Zend_Application_Resource_Rediska extends Zend_Application_Resource_ResourceAbstract\n{\n    const DEFAULT_REGISTRY_KEY = 'rediska';\n\n    public function init()\n    {\n        $options = $this->getOptions();\n\n        if (isset($options['registry_key'])) {\n        \t$key = $options['registry_key'];\n        \tunset($options['registry_key']);\n        } else {\n        \t$key = self::DEFAULT_REGISTRY_KEY;\n        }\n\n        $rediska = new Rediska($options);\n\n        Zend_Registry::set($key, $rediska);\n\n        return $rediska;\n    }\n}",
        "gt": [
            "'twich/www/redis/Rediska/Exception.php'",
            "'twich/www/redis/Rediska.php'",
            "'twich/www/redis/Rediska/Zend/Application/Resource/Rediska.php'"
        ]
    },
    {
        "files": [
            "'bitcoind-status/index.php'",
            "'bitcoind-status/php/functions.php'",
            "'bitcoind-status/php/easybitcoin.php'"
        ],
        "content": "'bitcoind-status/index.php'\n:<?php\n\n\nif (!is_file('./php/config.php')) {\n    die(\"Configuration file not found. To continue, please create a config.php file.\");\n}\n\nrequire_once './php/config.php';\nrequire_once './php/functions.php';\n\n\nif ($config['timezone'] !== null) {\n    date_default_timezone_set($config['timezone']);\n}\n\n\nif (isset($_GET['clearcache']) & in_array($_SERVER['REMOTE_ADDR'], $config['nocache_whitelist']) & is_file($config['cache_file'])) {\n    unlink($config['cache_file']);\n    $cache_message = 'Cache has been cleared!';\n}\n\n\nif ($config['use_cache'] === false) {\n    $use_cache = false;\n} elseif (isset($_GET['nocache']) & in_array($_SERVER['REMOTE_ADDR'], $config['nocache_whitelist'])) {\n    $use_cache = false;\n    $cache_message = 'Cache has been bypassed!';\n} else {\n    $use_cache = true;\n}\n\n\n$data = getData($use_cache);\n\n\nrequire_once './html/template.html';\n\n'bitcoind-status/php/functions.php'\n:<?php\n\n\n$curl_requests = 0;\n$default_app_title = 'Bitcoin Node Status';\n\n\nfunction getData($from_cache = false)\n{\n    global $config;\n    global $cache_message;\n    global $geo_cache;\n    global $curl_requests;\n\n\n    if (($from_cache === true) && (is_file($config['cache_file']))) {\n        $cache = json_decode(file_get_contents($config['cache_file']), true);\n\n\n        if (is_array($cache)) {\n            if ($cache['config_hash'] == md5(json_encode($config))) {\n                if (time() < $cache['cache_expiry']) {\n                    return $cache;\n                }\n            } else {\n                $cache_message = 'Configuration has changed, cache has been refreshed.';\n            }\n        }\n    }\n\n\n    include_once './php/easybitcoin.php';\n    $bitcoin = new Bitcoin($config['rpc_user'], $config['rpc_pass'], $config['rpc_host'], $config['rpc_port']);\n\n\n    if ($config['rpc_ssl'] === true) {\n        $bitcoin->setSSL($config['rpc_ssl_ca']);\n    }\n\n\n    $data = $bitcoin->getblockchaininfo();\n    $net_info = $bitcoin->getnetworkinfo();\n    $data['connections'] = $net_info['connections'];\n    $data['subversion'] = $net_info['subversion'];\n\n\n    if (!$data) {\n        $return_data['error'] = $bitcoin->error;\n        $return_data['status'] = $bitcoin->status;\n        $return_data['display_connection_chart'] = false;\n        $return_data['display_peer_chart'] = false;\n        writeToCache($return_data);\n        return $return_data;\n    }\n\n\n    if ($config['cache_geo_data'] === true) {\n        $geo_cache = getGeoCache($config['geo_cache_file']);\n        $data['geo'] = $geo_cache;\n    }\n\n\n    if ($config['display_free_disk_space'] === true) {\n        $data['free_disk_space'] = getFreeDiskSpace($config['disk_space_mount_point']);\n    }\n\n    if ($config['display_ip'] === true) {\n\n        if ($config['use_bitcoind_ip'] === true) {\n            $data['node_ip'] = $net_info['localaddresses'][0]['address'];\n        } else {\n            $data['node_ip'] = $_SERVER['SERVER_ADDR'];\n        }\n    }\n\n\n    if (($config['display_ip_location'] === true) || ($config['geolocate_peer_ip'] === true)) {\n        $geo_curl = curl_init();\n    } else {\n        $geo_curl = false;\n    }\n\n\n    if ($config['display_peer_info'] === true) {\n        $data['peers'] = parsePeers($bitcoin->getpeerinfo(), $geo_curl);\n    }\n\n\n    if (($config['display_ip_location'] === true) && ($config['display_ip'] === true)) {\n        $data['ip_location'] = getGeolocation($data['node_ip'], $geo_curl);\n    }\n\n\n    if (($config['display_bitcoind_uptime'] === true) && (strcmp(PHP_OS, \"Linux\") == 0)) {\n        $data['bitcoind_uptime'] = getProcessUptime($config['bitcoind_process_name']);\n    }\n\n\n    if ($config['display_max_height'] || $config['display_bitnodes_info']) {\n        $bitnodes_curl = curl_init();\n    }\n\n\n    if ($config['display_max_height'] === true) {\n        if ($config['display_testnet'] === true) {\n            $exec_result = json_decode(curlRequest(\"https:\n        } else {\n            $exec_result = json_decode(curlRequest(\"https:\n        }\n        $data['max_height'] = $exec_result['data']['blocks'];\n        $data['node_height_percent'] = round(($data['blocks']/$data['max_height'])*100, 1);\n    }\n\n\n    if ($config['display_bitnodes_info'] === true) {\n        $data['bitnodes_info'] = json_decode(curlRequest(\"https:\n        $latency = json_decode(curlRequest(\"https:\n        $data['bitnodes_info']['latest_latency'] = $latency['daily_latency'][0]['v'];\n    }\n\n\n    if ($config['display_max_height'] || $config['display_bitnodes_info']) {\n        curl_close($bitnodes_curl);\n    }\n\n    if (($config['display_ip_location'] === true) || ($config['geolocate_peer_ip'] === true)) {\n        curl_close($geo_curl);\n    }\n\n\n    $data['display_connection_chart'] = displayChart($config['display_chart'], $config['stats_file'], $config['stats_min_data_points']);\n    $data['display_peer_chart'] = displayChart($config['display_peer_chart'], $config['peercount_file'], $config['peercount_min_data_points']);\n\n\n    if ($config['cache_geo_data'] === true) {\n        file_put_contents($config['geo_cache_file'], json_encode($geo_cache), LOCK_EX);\n    }\n\n    writeToCache($data);\n    return $data;\n\n}\n\n\nfunction writeToCache($data)\n{\n    global $config;\n    if ($config['use_cache'] === true) {\n        $data['cache_time'] = time();\n        $data['cache_expiry'] = $data['cache_time']+$config['max_cache_time'];\n        $data['config_hash'] = md5(json_encode($config));\n        $raw_data = json_encode($data);\n        file_put_contents($config['cache_file'], $raw_data, LOCK_EX);\n    }\n}\n\n\nfunction parsePeers($peers, $curl_handle)\n{\n    global $config;\n    $to_return = array();\n\n    foreach ($peers as $peer) {\n\n\n        $peer_addr_array = preg_split('/\\:(?=[^:]*$)/', $peer['addr']);\n        $peer_ip = $peer_addr_array[0];\n\n\n        if ($config['hide_dark_peers'] === true) {\n            if ((strcmp($peer_ip, '127.0.0.1') == 0) || (strpos($peer_ip, '.onion') !== false)) {\n                continue;\n            }\n        }\n\n\n        if (is_array($config['peers_to_ignore']) & in_array($peer_ip, $config['peers_to_ignore'])) {\n            continue;\n        }\n\n\n        if ($config['ignore_unknown_ping'] === true) {\n            if (!array_key_exists('pingtime', $peer)) {\n                continue;\n            }\n        }\n\n\n        if ($config['geolocate_peer_ip'] === true) {\n            $peer['geo_data'] = getGeolocation($peer_ip, $curl_handle);\n        }\n\n\n        if ($config['display_peer_port'] === false) {\n            array_pop($peer_addr_array);\n            $peer['addr'] = str_replace(array('[',']'), '', implode(':', $peer_addr_array));\n        }\n\n        $to_return[] = $peer;\n\n    }\n\n    return $to_return;\n\n}\n\n\n\nfunction getGeoCache($file_path)\n{\n\n    global $config;\n    $to_return = array();\n\n    if ($config['cache_geo_data'] === true) {\n        if (is_file($file_path)) {\n            $raw = json_decode(file_get_contents($file_path), true);\n            if (is_array($raw)) {\n                $cache = $raw;\n            } else {\n                $cache = array();\n            }\n        } else {\n            $cache = array();\n        }\n    } else {\n        $cache = array();\n    }\n\n    foreach ($cache as $ip => $data) {\n        if (!array_key_exists('expiry', $data)) {\n            continue;\n        } elseif (time() > $data['expiry']) {\n            continue;\n        } else {\n            $to_return[$ip] = $data;\n        }\n    }\n\n    return $cache;\n}\n\n\nfunction getGeolocation($ip_address, $curl_handle)\n{\n    global $config;\n    global $geo_cache;\n\n\n    $run_curl = false;\n    $to_return = array(\n        'country_code' => 'blank',\n        'country_name' => 'Unavailable',\n    );\n\n\n    if ($config['cache_geo_data'] === true) {\n        if (array_key_exists($ip_address, $geo_cache)) {\n            return $geo_cache[$ip_address];\n        }\n    }\n\n\n    $exec_result = curlRequest(\"http:\n    if ($exec_result !== false) {\n        $array = unserialize($exec_result);\n\n\n        $to_return['country_code'] = $array['geoplugin_countryCode'];\n        $to_return['country_name'] = $array['geoplugin_countryName'];\n\n\n        if ($config['cache_geo_data'] === true) {\n            $geo_cache[$ip_address]['expiry'] = time() + $config['geo_cache_time'];\n            $geo_cache[$ip_address]['country_code'] = $array['geoplugin_countryCode'];\n            $geo_cache[$ip_address]['country_name'] = $array['geoplugin_countryName'];\n        }\n    }\n\n    return $to_return;\n}\n\n\nfunction curlRequest($url, $curl_handle, $fail_on_error = false)\n{\n    global $curl_requests;\n\n    if ($curl_handle === false) {\n        return false;\n    }\n\n    if ($fail_on_error === true) {\n        curl_setopt($curl_handle, CURLOPT_FAILONERROR, true);\n    }\n\n    curl_setopt($curl_handle, CURLOPT_SSL_VERIFYPEER, false);\n    curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, true);\n    curl_setopt($curl_handle, CURLOPT_USERAGENT, 'Bitcoin Node Status Page');\n    curl_setopt($curl_handle, CURLOPT_URL, $url);\n\n    $curl_requests++;\n    return curl_exec($curl_handle);\n}\n\n\nfunction generateDonationImage()\n{\n    global $config;\n    $alt_text = 'Donate ' . $config['donation_amount'] . ' BTC to ' . $config['donation_address'];\n    return \"\\n\" . '<img src=\"https:\n}\n\n\nfunction displayChart($config_var, $data_file, $min_data_points)\n{\n    if (($config_var === true) & (is_file($data_file))) {\n        if (count(json_decode(file_get_contents($data_file), true)) > $min_data_points) {\n            return true;\n        } else {\n            return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n\nfunction getFreeDiskSpace($mount_point)\n{\n    return convertToSI(disk_free_space($mount_point)) . '<br />';\n}\n\n\nfunction convertToSI($bytes)\n{\n    if ($bytes === 0) {\n        return '0B';\n    } else {\n        $si_prefix = array( 'B', 'KB', 'MB', 'GB', 'TB', 'EB', 'ZB', 'YB' );\n        $base = 1024;\n        $return_class = min((int)log($bytes, $base), count($si_prefix) - 1);\n        return sprintf('%1.2f', $bytes / pow($base, $return_class)) . ' ' . $si_prefix[$return_class];\n    }\n}\n\n\nfunction elapsedTime($ptime)\n{\n    $etime = time() - $ptime;\n\n    if ($etime < 1) {\n        return '0 seconds';\n    }\n\n    $a = array( 365 * 24 * 60 * 60  =>  'year',\n                 30 * 24 * 60 * 60  =>  'month',\n                      24 * 60 * 60  =>  'day',\n                           60 * 60  =>  'hour',\n                                60  =>  'minute',\n                                 1  =>  'second'\n                );\n    $a_plural = array( 'year'   => 'years',\n                       'month'  => 'months',\n                       'day'    => 'days',\n                       'hour'   => 'hours',\n                       'minute' => 'minutes',\n                       'second' => 'seconds'\n                );\n\n    foreach ($a as $secs => $str) {\n        $d = $etime / $secs;\n        if ($d >= 1) {\n            $r = round($d);\n            return $r . ' ' . ($r > 1 ? $a_plural[$str] : $str);\n        }\n    }\n}\n\n\nfunction getProcessUptime($process)\n{\n    $process_pid = exec(\"pidof $process\");\n    $system_uptime = exec('cut -d \".\" -f1 /proc/uptime');\n    $pid_uptime = round((intval(exec(\"cut -d \\\" \\\" -f22 /proc/$process_pid\n    $seconds = $system_uptime-$pid_uptime;\n    $days = floor($seconds / 86400);\n    $hours = str_pad(floor(($seconds - ($days*86400)) / 3600), 2, \"0\", STR_PAD_LEFT);\n    $mins = str_pad(floor(($seconds - ($days*86400) - ($hours*3600)) / 60), 2, \"0\", STR_PAD_LEFT);\n    $secs = str_pad(floor($seconds % 60), 2, \"0\", STR_PAD_LEFT);\n    return \"$days days, $hours:$mins:$secs\";\n}\n\n'bitcoind-status/php/easybitcoin.php'\n:<?php\n\n\nclass Bitcoin\n{\n\n    private $username;\n    private $password;\n    private $proto;\n    private $host;\n    private $port;\n    private $url;\n    private $CACertificate;\n\n\n    public $status;\n    public $error;\n    public $raw_response;\n    public $response;\n\n    private $id = 0;\n\n\n    public function __construct($username, $password, $host = 'localhost', $port = 8332, $url = null)\n    {\n        $this->username      = $username;\n        $this->password      = $password;\n        $this->host          = $host;\n        $this->port          = $port;\n        $this->url           = $url;\n\n\n        $this->proto         = 'http';\n        $this->CACertificate = null;\n    }\n\n\n    public function setSSL($certificate = null)\n    {\n        $this->proto         = 'https';\n        $this->CACertificate = $certificate;\n    }\n\n    public function __call($method, $params)\n    {\n        $this->status       = null;\n        $this->error        = null;\n        $this->raw_response = null;\n        $this->response     = null;\n\n\n        $params = array_values($params);\n\n\n        $this->id++;\n\n\n        $request = json_encode(array(\n            'method' => $method,\n            'params' => $params,\n            'id'     => $this->id\n        ));\n\n\n        $curl    = curl_init(\"{$this->proto}:\n        $options = array(\n            CURLOPT_HTTPAUTH       => CURLAUTH_BASIC,\n            CURLOPT_USERPWD        => $this->username . ':' . $this->password,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_FOLLOWLOCATION => true,\n            CURLOPT_MAXREDIRS      => 10,\n            CURLOPT_HTTPHEADER     => array('Content-type: application/json'),\n            CURLOPT_POST           => true,\n            CURLOPT_POSTFIELDS     => $request\n        );\n\n\n\n\n        if (ini_get('open_basedir')) {\n            unset($options[CURLOPT_FOLLOWLOCATION]);\n        }\n\n        if ($this->proto == 'https') {\n\n            if (!empty($this->CACertificate)) {\n                $options[CURLOPT_CAINFO] = $this->CACertificate;\n                $options[CURLOPT_CAPATH] = DIRNAME($this->CACertificate);\n            } else {\n\n\n                $options[CURLOPT_SSL_VERIFYPEER] = false;\n            }\n        }\n\n        curl_setopt_array($curl, $options);\n\n\n        $this->raw_response = curl_exec($curl);\n        $this->response     = json_decode($this->raw_response, true);\n\n\n        $this->status = curl_getinfo($curl, CURLINFO_HTTP_CODE);\n\n\n        $curl_error = curl_error($curl);\n\n        curl_close($curl);\n\n        if (!empty($curl_error)) {\n            $this->error = $curl_error;\n        }\n\n        if ($this->response['error']) {\n\n            $this->error = $this->response['error']['message'];\n        } elseif ($this->status != 200) {\n\n            switch ($this->status) {\n                case 400:\n                    $this->error = 'HTTP_BAD_REQUEST';\n                    break;\n                case 401:\n                    $this->error = 'HTTP_UNAUTHORIZED';\n                    break;\n                case 403:\n                    $this->error = 'HTTP_FORBIDDEN';\n                    break;\n                case 404:\n                    $this->error = 'HTTP_NOT_FOUND';\n                    break;\n            }\n        }\n\n        if ($this->error) {\n            return false;\n        }\n\n        return $this->response['result'];\n    }\n}\n",
        "gt": [
            "'bitcoind-status/php/easybitcoin.php'",
            "'bitcoind-status/php/functions.php'",
            "'bitcoind-status/index.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'\n:<?php\n\n\n\nnamespace Composer\\Autoload;\n\n\nclass ClassLoader\n{\n\n    private $prefixLengthsPsr4 = array();\n    private $prefixDirsPsr4 = array();\n    private $fallbackDirsPsr4 = array();\n\n\n    private $prefixesPsr0 = array();\n    private $fallbackDirsPsr0 = array();\n\n    private $useIncludePath = false;\n    private $classMap = array();\n\n    public function getPrefixes()\n    {\n        return call_user_func_array('array_merge', $this->prefixesPsr0);\n    }\n\n    public function getPrefixesPsr4()\n    {\n        return $this->prefixDirsPsr4;\n    }\n\n    public function getFallbackDirs()\n    {\n        return $this->fallbackDirsPsr0;\n    }\n\n    public function getFallbackDirsPsr4()\n    {\n        return $this->fallbackDirsPsr4;\n    }\n\n    public function getClassMap()\n    {\n        return $this->classMap;\n    }\n\n\n    public function addClassMap(array $classMap)\n    {\n        if ($this->classMap) {\n            $this->classMap = array_merge($this->classMap, $classMap);\n        } else {\n            $this->classMap = $classMap;\n        }\n    }\n\n\n    public function add($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n            if ($prepend) {\n                $this->fallbackDirsPsr0 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr0\n                );\n            } else {\n                $this->fallbackDirsPsr0 = array_merge(\n                    $this->fallbackDirsPsr0,\n                    (array) $paths\n                );\n            }\n\n            return;\n        }\n\n        $first = $prefix[0];\n        if (!isset($this->prefixesPsr0[$first][$prefix])) {\n            $this->prefixesPsr0[$first][$prefix] = (array) $paths;\n\n            return;\n        }\n        if ($prepend) {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixesPsr0[$first][$prefix]\n            );\n        } else {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                $this->prefixesPsr0[$first][$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function addPsr4($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n\n            if ($prepend) {\n                $this->fallbackDirsPsr4 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr4\n                );\n            } else {\n                $this->fallbackDirsPsr4 = array_merge(\n                    $this->fallbackDirsPsr4,\n                    (array) $paths\n                );\n            }\n        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {\n\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        } elseif ($prepend) {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixDirsPsr4[$prefix]\n            );\n        } else {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                $this->prefixDirsPsr4[$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function set($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr0 = (array) $paths;\n        } else {\n            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setPsr4($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr4 = (array) $paths;\n        } else {\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setUseIncludePath($useIncludePath)\n    {\n        $this->useIncludePath = $useIncludePath;\n    }\n\n\n    public function getUseIncludePath()\n    {\n        return $this->useIncludePath;\n    }\n\n\n    public function register($prepend = false)\n    {\n        spl_autoload_register(array($this, 'loadClass'), true, $prepend);\n    }\n\n\n    public function unregister()\n    {\n        spl_autoload_unregister(array($this, 'loadClass'));\n    }\n\n\n    public function loadClass($class)\n    {\n        if ($file = $this->findFile($class)) {\n            includeFile($file);\n\n            return true;\n        }\n    }\n\n\n    public function findFile($class)\n    {\n\n        if ('\\\\' == $class[0]) {\n            $class = substr($class, 1);\n        }\n\n\n        if (isset($this->classMap[$class])) {\n            return $this->classMap[$class];\n        }\n\n        $file = $this->findFileWithExtension($class, '.php');\n\n\n        if ($file === null && defined('HHVM_VERSION')) {\n            $file = $this->findFileWithExtension($class, '.hh');\n        }\n\n        if ($file === null) {\n\n            return $this->classMap[$class] = false;\n        }\n\n        return $file;\n    }\n\n    private function findFileWithExtension($class, $ext)\n    {\n\n        $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . $ext;\n\n        $first = $class[0];\n        if (isset($this->prefixLengthsPsr4[$first])) {\n            foreach ($this->prefixLengthsPsr4[$first] as $prefix => $length) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($this->prefixDirsPsr4[$prefix] as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $length))) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr4 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {\n                return $file;\n            }\n        }\n\n\n        if (false !== $pos = strrpos($class, '\\\\')) {\n\n            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)\n                . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);\n        } else {\n\n            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;\n        }\n\n        if (isset($this->prefixesPsr0[$first])) {\n            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($dirs as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr0 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                return $file;\n            }\n        }\n\n\n        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {\n            return $file;\n        }\n    }\n}\n\n\nfunction includeFile($file)\n{\n    include $file;\n}\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/devdocs.php'\n:<?php\n\nini_set('display_errors', 0);\nini_set('memory_limit', '-1');\n\nuse CFPropertyList\\CFPropertyList;\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocs {\n  private static $cacheDirectory = 'cache/';\n\n  private $workflows;\n  private $results;\n  private $baseUrl;\n  private $cacheLife;\n  private $template;\n\n  public function __construct($query, $doc) {\n    $this->baseUrl = getenv('BASE_URL') ?: 'https:\n    $this->cacheLife = (int)(getenv('CACHE_LIFE') ?: '7');\n    $this->template = getenv('TEMPLATE') ?: '$baseUrl$documentation/$path';\n    $this->workflows = new Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n    $this->results = [\n      0 => [],\n      1 => [],\n      2 => []\n    ];\n\n    $documentations = $this->getDocumentations();\n    if (!isset($doc) || empty($doc)) {\n      $rootPath = str_replace('/scripts', '', $this->workflows->path());\n      $pList = (new CFPropertyList($rootPath . '/info.plist'))->toArray();\n      foreach ($pList['connections'] as $key => $value) {\n        if (array_key_exists($key, $documentations)) {\n          $this->checkCache($key);\n          $this->processDocumentation($key, $query);\n        }\n      }\n    } else {\n      $this->checkCache($doc);\n      $this->processDocumentation($doc, $query);\n    }\n    $this->render();\n  }\n\n  private function getDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      $docContent = $this->workflows->fetch($this->baseUrl . 'docs/docs.json');\n      file_put_contents($docFile, $docContent);\n    } else {\n      $docContent = file_get_contents($docFile);\n    }\n    $docs = json_decode($docContent);\n    $documentations = [];\n    foreach ($docs as $doc) {\n      $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n      $documentations[$doc->slug] = $doc;\n    }\n    return $documentations;\n  }\n\n  private function checkCache($documentation) {\n    if (!file_exists(self::$cacheDirectory)) {\n      mkdir(self::$cacheDirectory);\n    }\n    $docFile = self::$cacheDirectory . $documentation . '.json';\n    error_log(\"Checking existence of cache at $docFile\");\n\n    if (!file_exists($docFile) || ($this->cacheLife >= 0 && filemtime($docFile) <= time() - 86400 * $this->cacheLife)) {\n      error_log(\"Download doc for $documentation at \\\"\" . $this->baseUrl . 'docs/' . $documentation . '/index.json') . \"\\\"\";\n      file_put_contents($docFile, file_get_contents($this->baseUrl . 'docs/' . $documentation . '/index.json'));\n    }\n  }\n\n  private function processDocumentation($documentation, $query) {\n\n    $query = strtolower($query);\n    $data = json_decode(file_get_contents(self::$cacheDirectory . $documentation . '.json'));\n    if ($data === null) {\n      unlink(self::$cacheDirectory . $documentation . '.json');\n    }\n\n    $entries = $data->entries;\n\n    $found = [];\n    foreach ($entries as $key => $result) {\n      $value = strtolower(trim($result->name));\n      $description = strtolower(utf8_decode(strip_tags($result->type)));\n\n      if (empty($query)) {\n        $found[$value] = true;\n        $result->documentation = $documentation;\n        $this->results[0][] = $result;\n      } else if (strpos($value, $query) === 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[0][] = $result;\n        }\n      } else if (strpos($value, $query) > 0) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[1][] = $result;\n        }\n      } else if (strpos($description, $query) !== false) {\n        if (!isset($found[$value])) {\n          $found[$value] = true;\n          $result->documentation = $documentation;\n          $this->results[2][] = $result;\n        }\n      }\n    }\n\n    if ((count($this->results[0]) === 0) && (count($this->results[1]) === 0) && (count($this->results[2]) === 0)) {\n      $this->results[0][] = (object) [\n        'name' => 'No results.',\n        'documentation' => $documentation\n      ];\n    }\n\n  }\n\n  private function render() {\n    foreach ($this->results as $level => $results) {\n      foreach ($results as $result) {\n        $title = empty($result->type) ? $result->name : \"$result->name ($result->type)\";\n        $vars = array(\n          '$baseUrl' => $this->baseUrl,\n          '$documentation' => $result->documentation,\n          '$docalt' => str_replace(\"~\", \"-\", $result->documentation),\n          '$name' => $result->name,\n          '$path' => $result->path\n        );\n\n        $url = strtr($this->template, $vars);\n        $this->workflows->result($result->name, $url, $title, $result->path, $result->documentation . '.png', 'yes', $result->name);\n      }\n    }\n    echo $this->workflows->toxml();\n  }\n}\n\n$query = isset($query) ? $query : '';\n$documentation = isset($documentation) ? $documentation : '';\nnew DevDocs($query, $documentation);\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/devdocs.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/inc/debug_funcs.inc.php'",
            "'firebirdwebadmin/database.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/inc/configuration.inc.php'"
        ],
        "content": "'firebirdwebadmin/inc/debug_funcs.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\nfunction write_output_buffer($fname)\n{\n    $fp = fopen($fname, 'w')\n        or die('Error opening file '.$fname);\n    fwrite($fp, ob_get_contents())\n        or die('Error writing to file '.$fname);\n    ob_end_flush();\n}\n\n\n\n\n\nfunction show_time_consumption($start, $end)\n{\n    list($sm, $ss) = explode(' ', $start);\n    list($em, $es) = explode(' ', $end);\n    $elapsed = $es - $ss + $em - $sm;\n    echo 'time consumption: '.$elapsed.\"<br>\\n\";\n}\n\n\n\n\n\n\n\nfunction add_debug($str, $file = null, $line = null)\n{\n    if ($file == null || $line == null) {\n        $dstr = \"<tr>\\n<td colspan=\\\"2\\\">\";\n        if (isset($GLOBALS[$str])) {\n            $dstr .= add_var_debug($str, \"<br>\\n\");\n        } else {\n            $dstr .= \"$str<br>\\n\";\n        }\n    } else {\n        $dstr = \"<tr>\\n<td>$file, $line:</td>\\n\";\n        if (isset($GLOBALS[$str])) {\n            $dstr .= '<td>'.add_var_debug($str, \"<br>\\n\");\n        } else {\n            $dstr .= \"<td>$str<br>\\n\";\n        }\n    }\n    $dstr .= \"</td>\\n</tr>\\n\";\n    $GLOBALS['debug'][] = $dstr;\n}\n\nfunction add_var_debug($var, $separator)\n{\n    if (!is_array($GLOBALS[$var])) {\n        return($var.' = '.$GLOBALS[$var]);\n    } else {\n        $str = $var.' = array('.$separator;\n        $arr = $GLOBALS[$var];\n        foreach ($arr as $key => $val) {\n            $str .= $key.' => '.$val.$separator;\n        }\n        $str .= ')'.$separator;\n\n        return $str;\n    }\n}\n\n\n\n\nfunction file_debug($str)\n{\n    include_once 'inc/configuration.inc.php';\n\n    $fp = fopen(TMPPATH.'debug.txt', 'a') or die('Error: cannot open file for debug output');\n    fwrite($fp, $str);\n    fclose($fp);\n}\n\n\n\n\nfunction js_alert($string)\n{\n    ?>\n<script language=\"JavaScript\">\n  <!--\n   alert(\"<?php echo $string;\n    ?>\");\n\n  </script>\n<?php\n\n}\n\n\n\n\nfunction show_session()\n{\n    debug_var($GLOBALS['HTTP_SESSION_VAR']);\n}\n\n\nfunction debug_die($var)\n{\n    debug_var($var);\n    die();\n}\n\n\nfunction debug_var($var)\n{\n    @include_once 'Var_Dump.php';\n    if (class_exists('Var_Dump')) {\n        Var_Dump::displayInit(array('display_mode' => 'HTML4_Text'),\n                              array('mode' => 'normal',\n                                    'offset' => 3,\n                                    'before_type' => '<font color=\"\n                                    'after_type' => '</font>',\n                                    'before_value' => '<font color=\"\n                                    'after_value' => '</font>',\n                                    )\n                              );\n        Var_Dump::display($var);\n    } else {\n        echo \"<pre>\\n\";\n        print_r($var);\n        echo \"</pre>\\n\";\n    }\n}\n\n?>\n\n'firebirdwebadmin/database.php'\n:<?php\n\n\n\n\n\n\n\nrequire './inc/script_start.inc.php';\n\n\n\n\nif (isset($_POST['db_login_doit'])) {\n\n    if (!empty($dbhandle)) {\n        fbird_close($dbhandle);\n    }\n    $s_login['database'] = $_POST['db_login_database'];\n    $s_login['user'] = strtoupper($_POST['db_login_user']);\n    $s_login['host'] = $_POST['db_login_host'];\n\n\n\n    $pw = $_POST['db_login_password'];\n    if (strspn($pw, '*') != strlen($pw)) {\n        $s_login['password'] = $pw;\n    }\n\n    $s_login['role'] = !empty($_POST['db_login_role'])  ? $_POST['db_login_role']  : '';\n    $s_login['cache'] = !empty($_POST['db_login_cache']) ? $_POST['db_login_cache'] : '';\n    if ($s_login['cache'] != null  &&  $s_login['cache'] < 10) {\n        $s_login['cache'] = 10;\n    }\n    $s_login['charset'] = !empty($_POST['db_login_charset']) ? $_POST['db_login_charset'] : '';\n    $s_login['dialect'] = !empty($_POST['db_login_dialect']) ? $_POST['db_login_dialect'] : '';\n    $s_login['server'] = !empty($_POST['db_login_server'])  ? $_POST['db_login_server']  : '';\n\n    if ($s_login['database'] == '') {\n        $error = $ERRORS['NO_DB_SELECTED'];\n    } elseif (!is_allowed_db($s_login['database'])) {\n        $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_login['database']);\n    }\n\n    if (empty($error)) {\n        if ($dbhandle = db_connect()) {\n\n\n            $s_connected = true;\n\n            remove_edit_panels();\n            $s_charsets = get_charsets();\n            $message = $info_strings['SuccessLogin'];\n        } else {\n\n            $fb_error = fbird_errmsg();\n            $s_login['password'] = '';\n            $s_connected = false;\n        }\n    }\n    cleanup_session();\n}\n\n\n\n\nif (isset($_POST['db_logout_doit'])) {\n    if (!empty($dbhandle)) {\n        fbird_close($dbhandle);\n    }\n    remove_edit_panels();\n    cleanup_session();\n    $s_login['password'] = '';\n\n    $s_connected = false;\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'db_create')\n&&  isset($_POST['db_create_doit'])\n&&  isset($_POST['db_create_database'])\n&&  !empty($_POST['db_create_database'])) {\n    $s_create_db = trim($_POST['db_create_database']);\n    $s_create_host = trim($_POST['db_create_host']);\n    $s_create_user = trim($_POST['db_create_user']);\n\n\n\n    $pw = $_POST['db_create_password'];\n    if (strspn($pw, '*') != strlen($pw)) {\n        $s_create_pw = $pw;\n    }\n    $s_create_pagesize = $_POST['db_create_pagesize'];\n    $s_create_charset = $_POST['db_create_charset'];\n\n    if (!is_allowed_db($s_create_db)) {\n        $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_create_db);\n    }\n\n\n    if (!empty($dbhandle)  &&  empty($error)) {\n        fbird_close($dbhandle);\n    }\n\n\n\n    if (empty($error)) {\n        $db_str = (!empty($s_create_host)) ? $s_create_host.':'.$s_create_db : $s_create_db;\n\n        $sql = 'CREATE DATABASE \\''.$db_str.'\\'';\n        if (strlen($s_create_user) > 0) {\n            $sql .= ' USER \\''.$s_create_user.'\\'';\n            if (strlen($s_create_pw) > 0) {\n                $sql .= ' PASSWORD \\''.$s_create_pw.'\\'';\n            }\n        }\n        if ($s_create_pagesize !=   4096) {\n\n            $sql .= ' PAGE_SIZE = '.$s_create_pagesize;\n        }\n\n        if ($s_create_charset != 'NONE') {\n\n            $sql .= ' DEFAULT CHARACTER SET '.$s_create_charset;\n        }\n\n        $sql .= ';';\n        list($binary_output, $binary_error) = isql_execute($sql);\n\n        if (empty($binary_error)  &&  !is_file($s_create_db)) {\n            $error = sprintf($ERRORS['CREATE_DB_FAILED'], $s_create_db);\n        } else {\n\n            $s_login['charset'] = $s_create_charset;\n            $s_login['database'] = $s_create_db;\n            $s_login['host'] = $s_create_host;\n            $s_login['user'] = strtoupper($s_create_user);\n            $s_login['password'] = $s_create_pw;\n            if ($dbhandle = db_connect()) {\n                $s_connected = true;\n                remove_edit_panels();\n                cleanup_session();\n                $message = sprintf($MESSAGES['CREATE_DB_SUCCESS'], $s_create_db);\n            } else {\n                $fb_error = fbird_errmsg();\n            }\n        }\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'db_delete')\n&&  isset($_POST['db_delete_doit'])\n&&  isset($_POST['db_delete_database'])\n&&  !empty($_POST['db_delete_database'])) {\n    $pw = get_request_data('db_delete_password');\n    if (strspn($pw, '*') == strlen($pw)) {\n        $pw = $s_delete_db['password'];\n    }\n    $s_delete_db = array('database' => get_request_data('db_delete_database'),\n                         'user' => get_request_data('db_delete_user'),\n                         'host' => get_request_data('db_delete_host'),\n                         'password' => $pw,\n                         );\n\n\n    if ($s_login['database'] == $s_delete_db) {\n        $message = sprintf($MESSAGES['DELETE_CON_DB'], $s_delete_db);\n        $s_login['database'] = '';\n        $s_connected = false;\n        remove_edit_panels();\n        cleanup_session();\n    }\n\n    if (!is_allowed_db($s_delete_db['database'])) {\n        $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_delete_db['database']);\n    } elseif ($s_cust['askdel'] == true) {\n        $s_confirmations['database'] =\n            array('msg' => sprintf($MESSAGES['CONFIRM_DB_DELETE'], $s_delete_db['database']));\n    }\n}\n\n\nif (isset($_POST['confirm_yes'])  ||\n    (isset($_POST['db_delete_doit'])  &&  $s_cust['askdel'] == false  &&  empty($error))) {\n    $fb_error = drop_database($s_delete_db, $s_login);\n    unset($s_confirmations['database']);\n\n    if (empty($fb_error)) {\n        if ($s_login['database'] == $s_delete_db['database']) {\n            $s_login['database'] = '';\n            $s_connected = false;\n            remove_edit_panels();\n            cleanup_session();\n        }\n\n        $s_delete_db['database'] = '';\n    }\n}\n\n\nif (isset($_POST['confirm_no'])) {\n    unset($s_confirmations['database']);\n    $s_delete_db['database'] = '';\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'db_meta', true)) {\n\n\n    $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"metadata\";';} );\n\n    $iframekey_meta = md5(uniqid('meta'));\n    $s_iframejobs[$iframekey_meta] = array('job' => 'metadata',\n                                           'timestamp' => time(), );\n\n\n\n\n    if (isset($_POST['db_meta_save'])) {\n        list($metadata, $binary_error) = isql_get_metadata($s_login['user'], $s_login['password'], $s_login['database'], $s_login['host']);\n\n        if (empty($binary_error)  &&  count($metadata) > 0) {\n            send_export_headers('application/octet-stream', 'meta.sql');\n            print(implode(\"\\n\", $metadata));\n            exit();\n        }\n    }\n}\n\n\n\n\nif (isset($_POST['db_systable_select'])) {\n    if ($s_systable['table'] != $_POST['db_systable']) {\n        $s_systable['order'] = '';\n        $s_systable['dir'] = 'ASC';\n    }\n\n    $s_systable['table'] = $_POST['db_systable'];\n    $s_systable['ffield'] = $_POST['db_sysfield'];\n    $s_systable['fvalue'] = $_POST['db_sysvalue'];\n\n    $s_systable['sysdata'] = (isset($_POST['db_sysdata']) ? true : false);\n}\n\nif (isset($_GET['order'])) {\n    $s_systable['dir'] = ($_GET['order'] == $s_systable['order']  &&  $s_systable['dir'] == 'ASC')\n        ? 'DESC'\n        : 'ASC';\n    $s_systable['order'] = $_GET['order'];\n}\n\n\nif (have_panel_permissions($s_login['user'], 'db_systable', true)) {\n    $js_stack .= js_request_filter_fields();\n\n    if (false  &&  strpos($s_systable['table'], 'MON$') === 0) {\n\n\n        $have_refresh = true;\n\n        $js_stack .= js_jsrs_refresh_systable();\n    } else {\n        $have_refresh = false;\n    }\n\n    if ($s_connected   &&  !empty($s_systable['table'])) {\n        include './inc/system_table.inc.php';\n\n        $systable = get_systable($s_systable);\n    }\n}\n\n\n\n\n$dbfiles = array();\nif (isset($ALLOWED_FILES)  && count($ALLOWED_FILES) > 0) {\n    foreach ($ALLOWED_FILES as $file) {\n        if ((strpos($file, '/') === false  &&  strpos($file, '\\\\') === false)  ||\n            is_file($file)) {\n            $dbfiles[] = $file;\n        }\n    }\n} elseif (isset($ALLOWED_DIRS)  &&  count($ALLOWED_DIRS) > 0) {\n    foreach ($ALLOWED_DIRS as $dir) {\n        if (!@is_readable($dir)) {\n            $warning .= sprintf($WARNINGS['CAN_NOT_ACCESS_DIR'], $dir);\n        } else {\n            $dirhandle = opendir($dir);\n            while ($filename = readdir($dirhandle)) {\n                    $dbfiles[] = $dir.$filename;\n            }\n            closedir($dirhandle);\n        }\n    }\n}\nsort($dbfiles);\n\n\n\n\n$s_page = 'Database';\n$panels = $s_database_panels;\n\nrequire './inc/script_end.inc.php';\n\n\n\n\n\nfunction drop_database($db, $login)\n{\n    $success = '';\n\n\n\n    if ($db['database'] == $login['database']  &&\n        $db['host']  == $login['host']) {\n        $dbh = $GLOBALS['dbhandle'];\n    } else {\n        $db_path = ($db['host'] == '') ? $db['database'] : $db['host'].':'.$db['database'];\n        if (($dbh = fbird_connect($db_path, $db['user'], $db['password'])) == false) {\n            $success = fbird_errmsg();\n        }\n    }\n\n\n    if (is_resource($dbh)  &&\n        fbird_drop_db($dbh) == false) {\n        $success = fbird_errmsg();\n        fbird_close($dbh);\n    }\n\n    return $success;\n}\n\n'firebirdwebadmin/inc/script_start.inc.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/configuration.inc.php';\n\nif (DEBUG) {\n    $start_time = @microtime();\n}\n\nrequire './inc/functions.inc.php';\n\nsession_start();\nset_error_handler('error_handler');\n\nrequire get_language_file('./lang/');\nrequire './inc/session.inc.php';\nrequire './inc/firebird.inc.php';\nrequire './inc/panel_elements.inc.php';\nrequire './inc/javascript.inc.php';\n\nif (DEBUG || DEBUG_HTML) {\n    include './inc/debug_funcs.inc.php';\n}\n\nif (!extension_loaded('interbase')) {\n    die($ERRORS['NO_IBASE_MODULE']);\n}\n\nif (!isset($_SESSION['s_init'])\n    || ($_SESSION['s_cookies'] === 'untested')\n) {\n    initialize_session();\n    fallback_session();\n} else {\n    localize_session_vars();\n}\n\nif (!isset($no_session_referer) || $no_session_referer !== true) {\n\n    $s_referer = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n}\n\nsend_http_headers();\n\n\n$message = '';\n$warning = '';\n$error = '';\n$fb_error = '';\n$php_error = '';\n$debug = array();\n$externcmd = '';\n\n\n\n$js_stack = '';\n\n\n\n$sql = '';\n\n\n\nif ($s_connected == true && !isset($_GET['unconnected'])) {\n    $dbhandle = db_connect();\n\n    if ($dbhandle === false) {\n        $fb_error = fbird_errmsg();\n        $s_connected = false;\n        $s_tables_valid = false;\n        $s_wt['table'] = '';\n    }\n\n    if (empty($s_charsets)) {\n        $s_charsets = get_charsets();\n    }\n}\n\n\nlist($family, $version) = server_info($s_login['server']);\ndefine('SERVER_FAMILY', $family);\ndefine('SERVER_VERSION', $version);\n\nif ($s_binpath != BINPATH) {\n\n\n    if (!is_dir(BINPATH)\n        || (!is_file(BINPATH.'isql') && !is_file(BINPATH.'isql-fb') && !is_file(BINPATH.'isql.exe'))\n    ) {\n        $warning = sprintf($WARNINGS['BAD_ISQLPATH'], BINPATH);\n    }\n\n\n    if (!is_dir(TMPPATH) || !is_writeable(TMPPATH)) {\n        $warning .= sprintf($WARNINGS['BAD_TMPPATH'], TMPPATH);\n    }\n\n    $s_binpath = BINPATH;\n}\n\nif (DEBUG_HTML) {\n    ob_start();\n}\n\n'firebirdwebadmin/inc/configuration.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n\n\ndefine('VERSION', '3.4.1');\n\ndefine('BINPATH', '/usr/sbin/');\n\ndefine('TMPPATH', '/tmp/');\n\n\ndefine('DEFAULT_USER',    'SYSDBA');\ndefine('DEFAULT_DB',      'employee.fdb');\ndefine('DEFAULT_PATH',    '/var/lib/firebird/2.5/data/');\ndefine('DEFAULT_HOST',    'localhost');\ndefine('DEFAULT_ROLE',    '');\ndefine('DEFAULT_CACHE',   75);\ndefine('DEFAULT_CHARSET', 'NONE');\ndefine('DEFAULT_DIALECT', 3);\ndefine('DEFAULT_SERVER',  'FB_2.5');\n\n\ndefine('PROTOCOL', 'http');\n\n\ndefine('SP_LIMIT_NAME', '');\n\n\n\n\n\n\n\n$ALLOWED_DIRS = array();\n\n\n\n\n\n\n\n\n$ALLOWED_FILES = array();\n\ndefine('BACKUP_DIR', '/var/lib/firebird/2.5');\n\ndefine('LANGUAGE', 'english');\n\n\n\n$HIDE_PANELS = array(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                     );\n\n\n\n$SQL_DISABLE = array('CREATE DATABASE',\n                     'CREATE SCHEMA'\n\n\n                     );\n\ndefine('SYSDBA_GET_ALL', true);\n\n\n\ndefine('CONFIRM_DELETE', true);\n\ndefine('SQL_AREA_COLS', 80);\ndefine('SQL_AREA_ROWS', 6);\n\ndefine('IFRAME_HEIGHT', 350);\n\ndefine('SQL_MAXSAVE', 100);\n\n\n\ndefine('SQL_HISTORY_SIZE', 25);\n\ndefine('SHOW_OUTPUT_ROWS', 100);\n\n\ndefine('DATA_MAXWIDTH', 50);\n\ndefine('FKLOOKUP_ENTRIES', 1000);\n\ndefine('MAX_CSV_LINE', 50000);\n\n\ndefine('DEFAULT_ROWS', 25);\n\ndefine('BLOB_WINDOW_WIDTH', 600);\ndefine('BLOB_WINDOW_HEIGHT', 800);\n\ndefine('SESSION_NAME', 'firebirdwebadmin');\n\n\ndefine('TRANS_READ', IBASE_COMMITTED | IBASE_NOWAIT | IBASE_READ);\ndefine('TRANS_WRITE', IBASE_COMMITTED | IBASE_NOWAIT | IBASE_WRITE);\n\ndefine('META_REDIRECT', false);\n\n\ndefine('DEBUG', false);\ndefine('DEBUG_HTML', false);\n\ndefine('DEBUG_COMMANDS', false);\ndefine('DEBUG_FILES', true);\n\n\n\nif ('' != SESSION_NAME) {\n    session_name(SESSION_NAME);\n}\n\nif (DEBUG === true) {\n    error_reporting(E_ALL | E_NOTICE | E_STRICT);\n}\n",
        "gt": [
            "'firebirdwebadmin/inc/configuration.inc.php'",
            "'firebirdwebadmin/inc/debug_funcs.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/database.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/data.php'",
            "'firebirdwebadmin/inc/configuration.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'"
        ],
        "content": "'firebirdwebadmin/data.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/script_start.inc.php';\nrequire './inc/foreign_keys.inc.php';\nrequire './inc/DataForm.php';\n\n\n\n\nif ($s_connected && $s_tables_valid == false) {\n    include_once './inc/get_tables.inc.php';\n    if (get_tables($dbhandle)) {\n        $s_tables_valid = true;\n    }\n}\n\nrequire './inc/handle_watchtable.inc.php';\n\n\n\n\n$customize_changed = false;\nif (isset($_POST['dt_column_config_save'])) {\n    $column = get_request_data('dt_column_config_column');\n    $table = get_request_data('dt_column_config_table');\n    $fk_column = get_request_data('dt_column_config_fk_column');\n    if ($fk_column == '') {\n        unset($s_cust['fk_lookups'][$table][$column]);\n        if (empty($s_cust['fk_lookups'][$table])) {\n            unset($s_cust['fk_lookups'][$table]);\n        }\n    } else {\n        $s_cust['fk_lookups'][$table][$column] = $fk_column;\n    }\n    $customize_changed = true;\n}\n\n\n\n\nif (array_filter(array_keys($_POST), function($a) {return preg_match(\"/dt_(enter|edit)_(insert|ready|save|cancel)/\", $a);} )) {\n    if ((isset($_POST['dt_config_fk_lookup'])  &&  $s_cust['enter']['fk_lookup'] == false)  ||\n        (!isset($_POST['dt_config_fk_lookup'])  &&  $s_cust['enter']['fk_lookup'] == true)) {\n\n\n        $s_cust['enter']['fk_lookup'] = isset($_POST['dt_config_fk_lookup']);\n        $customize_changed = true;\n    }\n\n    if (isset($_POST['dt_enter_insert'])  ||  isset($_POST['dt_enter_ready'])) {\n        if ((isset($_POST['dt_config_more'])  &&  $s_cust['enter']['another_row'] == false)  ||\n            (!isset($_POST['dt_config_more'])  &&  $s_cust['enter']['another_row'] == true)) {\n\n\n            $s_cust['enter']['another_row'] = isset($_POST['dt_config_more']);\n            $customize_changed = true;\n        }\n    } else {\n        if ((isset($_POST['dt_config_as_new'])  &&  $s_cust['enter']['as_new'] == false)  ||\n            (!isset($_POST['dt_config_as_new'])  &&  $s_cust['enter']['as_new'] == true)) {\n\n\n            $s_cust['enter']['as_new'] = isset($_POST['dt_config_as_new']);\n            $customize_changed = true;\n        }\n    }\n}\nif ($customize_changed == true) {\n    set_customize_cookie($s_cust);\n}\n\nif (isset($s_edit_where)  && count($s_edit_where) > 0) {\n    include './inc/handle_editdata.inc.php';\n}\n\n\n\n\nif (isset($_POST['dt_enter_select'])) {\n    $s_enter_name = get_request_data('dt_enter_name');\n\n    if (is_array($s_fields[$s_enter_name])) {\n        $s_fields = get_table_defaults_sources($s_enter_name, $s_fields);\n        $s_fields = get_table_computed_sources($s_enter_name, $s_fields);\n\n        $s_enter_values = init_enter_values($s_fields[$s_enter_name]);\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'dt_enter', true)\n&&  isset($_POST['dt_enter_insert'])) {\n\n\n    if (!$s_domains_valid) {\n        include_once './inc/domains.inc.php';\n\n        $s_domains = get_domain_definitions($s_domains);\n        $s_domains_valid = true;\n    }\n\n\n    include_once './inc/triggers.inc.php';\n    if ($s_triggers_valid == false) {\n        $s_triggers = get_triggers($s_triggers);\n        $s_triggers_valid = true;\n    }\n\n    $idx = 0;\n    $bindargs = $cols = $s_enter_values = array();\n    foreach ($s_fields[$s_enter_name] as $field) {\n        if (isset($field['comp'])) {\n            $s_enter_values[] = $field['csource'];\n            ++$idx;\n            continue;\n        }\n\n        if (isset($_FILES['dt_enter_file_'.$idx])  &&\n            !empty($_FILES['dt_enter_file_'.$idx]['name'])) {\n            $value = $_FILES['dt_enter_file_'.$idx];\n            $s_enter_values[] = $value;\n        } else {\n            $value = get_request_data('dt_enter_field_'.$idx);\n            $s_enter_values[] = $value;\n        }\n\n\n        $type = !isset($field['domain']) ? $field['type'] : $s_domains[$field['type']]['type'];\n\n\n        if ($idx == 0  &&  $value === ''  &&\n            in_array($type, array('INTEGER', 'BIGINT', 'SMALLINT'))  &&\n            isset($field['notnull'])  &&  $field['notnull'] == 'Yes'  &&\n            have_active_trigger($s_triggers, $s_enter_name, 'before', 'insert')) {\n            ++$idx;\n            continue;\n        }\n\n        switch ($type) {\n        case 'CHARACTER':\n        case 'VARCHAR':\n        case 'DATE':\n        case 'TIME':\n        case 'TIMESTAMP':\n            $bindargs[] = empty($field['notnull'])  &&  empty($value) ? null : \"$value\";\n            break;\n        case 'BLOB' :\n\n            if (is_array($value)  &&  !empty($value['name'])) {\n                $bfname = $value['tmp_name'];\n                $bfhandle = fopen($bfname, 'r') or die('cannot open file '.$bfname);\n                $bstr = fbird_blob_import($dbhandle, $bfhandle);\n                fclose($bfhandle);\n                $bindargs[] = $bstr;\n            }\n\n            elseif (!empty($value)) {\n                $bhandle = fbird_blob_create($dbhandle) or die('cannot create blob: '.__FILE__.', '.__LINE__);\n                fbird_blob_add($bhandle, $value);\n                $bstr = fbird_blob_close($bhandle);\n                $bindargs[] = $bstr;\n            } else {\n                $bindargs[] = null;\n            }\n            break;\n        default:\n            if ($value === '') {\n                $value = null;\n            }\n\n            $bindargs[] = $value;\n        }\n        $cols[] = $field['name'];\n        ++$idx;\n    }\n\n    if (count($cols) > 0) {\n        $fb_error = insert_row($s_enter_name, $cols, $bindargs);\n\n        if (empty($fb_error)) {\n            $s_watch_buffer = '';\n            $s_enter_values = $s_cust['enter']['another_row'] == false\n                ? array()\n                : init_enter_values($s_fields[$s_enter_name]);\n        }\n    }\n}\n\n\n\n\nif (isset($_POST['dt_enter_ready'])  ||\n    (isset($_POST['dt_enter_insert'])  &&  $s_cust['enter']['another_row'] == false  &&  empty($fb_error))) {\n    $s_enter_name = '';\n    $s_enter_values = array();\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'dt_export', true)) {\n    include './inc/export.inc.php';\n\n    if (empty($s_export)) {\n        $s_export = get_export_defaults();\n    }\n\n\n    if (isset($_POST['dt_export_defaults'])) {\n        $s_export = set_export_defaults($s_export['format'], $s_export);\n    }\n\n    if (isset($_POST['dt_export_doit'])) {\n        $s_export = get_export_form_data($s_export);\n        list($warning, $error) = check_export_form_data($s_export);\n\n        if (empty($error)  &&  empty($warning)) {\n\n\n            if ($s_export['target']['option'] == 'screen') {\n\n\n                $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"export\";';});\n\n                $iframekey_export = md5(uniqid('export'));\n                $s_iframejobs[$iframekey_export] = array('job' => 'export',\n                                                         'data' => $s_export,\n                                                         'timestamp' => time(), );\n            }\n\n\n            else {\n                $filename = export_filename($s_export);\n                send_export_headers(get_export_mimetype($s_export['format']), $filename);\n\n                export_data($s_export);\n\n\n\n                globalize_session_vars();\n                exit();\n            }\n        }\n    }\n\n    $js_stack .= js_data_export();\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'dt_import', true)\n&&  isset($_POST['dt_import_doit'])) {\n\n\n    $s_csv['import_null'] = isset($_POST['dt_import_null']) ? true : false;\n\n    if ($_POST['dt_import_table'] == '') {\n        $warning .= $WARNINGS['SELECT_TABLE_FIRST'];\n    } elseif (isset($_FILES['dt_import_file']['name'])\n        &&  $_FILES['dt_import_file']['name'] == '') {\n        $warning .= $WARNINGS['SELECT_FILE_FIRST'];\n    } else {\n        $ifile = $_FILES['dt_import_file']['tmp_name'];\n        $itable = $_POST['dt_import_table'];\n        $ihandle = fopen($ifile, 'r') or die('Error opening '.$ifile);\n\n\n\n        foreach ($s_fields[$itable] as $field) {\n            if (($field['type'] == 'BLOB'  &&  $field['stype'] != 1)  ||\n                (isset($field['comp'])  &&  $field['comp'] == 'Yes')) {\n\n                continue;\n            }\n            $col_names[] = $field['name'];\n            $columns[] = $field;\n        }\n\n        $sql = 'INSERT INTO '.$itable.'('.implode(', ', $col_names).')'\n                              .' VALUES ('.implode(', ', array_fill(0, count($col_names), '?')).')';\n        $query = fbird_prepare($sql) or fb_error(__FILE__, __LINE__, $sql);\n\n\n        $var_string = '';\n        foreach (array_keys($col_names) as $idx) {\n            $var_string .= '$data['.$idx.'],';\n        }\n        $var_string = substr($var_string, 0, -1);\n\n\n        $blob_fields = array();\n        $null_fields = array();\n        $idx = 0;\n        foreach ($s_fields[$itable] as $field) {\n            if ($field['type'] == 'BLOB') {\n                $blob_fields[] = $idx;\n            }\n\n            if ($s_csv['import_null'] == true &&\n                (!isset($field['notnull'])  || empty($field['notnull']))) {\n                $null_fields[] = $idx;\n            }\n            ++$idx;\n        }\n\n\n\n        $csv_cnt = 0;\n        while ($data = fgetcsv($ihandle, MAX_CSV_LINE)) {\n\n\n            if (!empty($null_fields)) {\n                foreach ($null_fields as $idx) {\n                    if ($data[$idx] == '') {\n                        $data[$idx] = null;\n                    }\n                }\n            }\n\n\n            if (!empty($blob_fields)) {\n                foreach ($blob_fields as $idx) {\n                    if (empty($data[$idx])) {\n                        $data[$idx] = null;\n                    } else {\n                        $blob_handle = fbird_blob_create($dbhandle) or fb_error(__FILE__, __LINE__);\n                        fbird_blob_add($blob_handle, $data[$idx]);\n                        $data[$idx] = fbird_blob_close($blob_handle) or fb_error(__FILE__, __LINE__);\n                    }\n                }\n            }\n\n            call_user_func_array('fbird_execute', array_merge(array($query), $data))\n                or $fb_error = fb_error(__FILE__, __LINE__, $query);\n\n\n            if (!empty($fb_error)) {\n                break;\n            }\n            ++$csv_cnt;\n        }\n        fclose($ihandle);\n        $sql = '';\n\n\n        $s_watch_buffer = '';\n\n        $message .= sprintf($MESSAGES['CSV_IMPORT_COUNT'], $csv_cnt, $itable);\n    }\n}\n\n$js_stack .= js_request_column_config_form();\n\n\n\n\n$s_page = 'Data';\n$panels = $s_data_panels;\n\nrequire './inc/script_end.inc.php';\n\nfunction init_enter_values($fields)\n{\n    $values = array();\n    foreach ($fields as $field) {\n        if (isset($field['default'])) {\n            $values[] = $field['dsource'];\n        } elseif (isset($field['comp'])) {\n            $values[] = $field['csource'];\n        } else {\n            $values[] = '';\n        }\n    }\n\n    return $values;\n}\n\n'firebirdwebadmin/inc/configuration.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n\n\ndefine('VERSION', '3.4.1');\n\ndefine('BINPATH', '/usr/sbin/');\n\ndefine('TMPPATH', '/tmp/');\n\n\ndefine('DEFAULT_USER',    'SYSDBA');\ndefine('DEFAULT_DB',      'employee.fdb');\ndefine('DEFAULT_PATH',    '/var/lib/firebird/2.5/data/');\ndefine('DEFAULT_HOST',    'localhost');\ndefine('DEFAULT_ROLE',    '');\ndefine('DEFAULT_CACHE',   75);\ndefine('DEFAULT_CHARSET', 'NONE');\ndefine('DEFAULT_DIALECT', 3);\ndefine('DEFAULT_SERVER',  'FB_2.5');\n\n\ndefine('PROTOCOL', 'http');\n\n\ndefine('SP_LIMIT_NAME', '');\n\n\n\n\n\n\n\n$ALLOWED_DIRS = array();\n\n\n\n\n\n\n\n\n$ALLOWED_FILES = array();\n\ndefine('BACKUP_DIR', '/var/lib/firebird/2.5');\n\ndefine('LANGUAGE', 'english');\n\n\n\n$HIDE_PANELS = array(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                     );\n\n\n\n$SQL_DISABLE = array('CREATE DATABASE',\n                     'CREATE SCHEMA'\n\n\n                     );\n\ndefine('SYSDBA_GET_ALL', true);\n\n\n\ndefine('CONFIRM_DELETE', true);\n\ndefine('SQL_AREA_COLS', 80);\ndefine('SQL_AREA_ROWS', 6);\n\ndefine('IFRAME_HEIGHT', 350);\n\ndefine('SQL_MAXSAVE', 100);\n\n\n\ndefine('SQL_HISTORY_SIZE', 25);\n\ndefine('SHOW_OUTPUT_ROWS', 100);\n\n\ndefine('DATA_MAXWIDTH', 50);\n\ndefine('FKLOOKUP_ENTRIES', 1000);\n\ndefine('MAX_CSV_LINE', 50000);\n\n\ndefine('DEFAULT_ROWS', 25);\n\ndefine('BLOB_WINDOW_WIDTH', 600);\ndefine('BLOB_WINDOW_HEIGHT', 800);\n\ndefine('SESSION_NAME', 'firebirdwebadmin');\n\n\ndefine('TRANS_READ', IBASE_COMMITTED | IBASE_NOWAIT | IBASE_READ);\ndefine('TRANS_WRITE', IBASE_COMMITTED | IBASE_NOWAIT | IBASE_WRITE);\n\ndefine('META_REDIRECT', false);\n\n\ndefine('DEBUG', false);\ndefine('DEBUG_HTML', false);\n\ndefine('DEBUG_COMMANDS', false);\ndefine('DEBUG_FILES', true);\n\n\n\nif ('' != SESSION_NAME) {\n    session_name(SESSION_NAME);\n}\n\nif (DEBUG === true) {\n    error_reporting(E_ALL | E_NOTICE | E_STRICT);\n}\n\n'firebirdwebadmin/inc/script_start.inc.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/configuration.inc.php';\n\nif (DEBUG) {\n    $start_time = @microtime();\n}\n\nrequire './inc/functions.inc.php';\n\nsession_start();\nset_error_handler('error_handler');\n\nrequire get_language_file('./lang/');\nrequire './inc/session.inc.php';\nrequire './inc/firebird.inc.php';\nrequire './inc/panel_elements.inc.php';\nrequire './inc/javascript.inc.php';\n\nif (DEBUG || DEBUG_HTML) {\n    include './inc/debug_funcs.inc.php';\n}\n\nif (!extension_loaded('interbase')) {\n    die($ERRORS['NO_IBASE_MODULE']);\n}\n\nif (!isset($_SESSION['s_init'])\n    || ($_SESSION['s_cookies'] === 'untested')\n) {\n    initialize_session();\n    fallback_session();\n} else {\n    localize_session_vars();\n}\n\nif (!isset($no_session_referer) || $no_session_referer !== true) {\n\n    $s_referer = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n}\n\nsend_http_headers();\n\n\n$message = '';\n$warning = '';\n$error = '';\n$fb_error = '';\n$php_error = '';\n$debug = array();\n$externcmd = '';\n\n\n\n$js_stack = '';\n\n\n\n$sql = '';\n\n\n\nif ($s_connected == true && !isset($_GET['unconnected'])) {\n    $dbhandle = db_connect();\n\n    if ($dbhandle === false) {\n        $fb_error = fbird_errmsg();\n        $s_connected = false;\n        $s_tables_valid = false;\n        $s_wt['table'] = '';\n    }\n\n    if (empty($s_charsets)) {\n        $s_charsets = get_charsets();\n    }\n}\n\n\nlist($family, $version) = server_info($s_login['server']);\ndefine('SERVER_FAMILY', $family);\ndefine('SERVER_VERSION', $version);\n\nif ($s_binpath != BINPATH) {\n\n\n    if (!is_dir(BINPATH)\n        || (!is_file(BINPATH.'isql') && !is_file(BINPATH.'isql-fb') && !is_file(BINPATH.'isql.exe'))\n    ) {\n        $warning = sprintf($WARNINGS['BAD_ISQLPATH'], BINPATH);\n    }\n\n\n    if (!is_dir(TMPPATH) || !is_writeable(TMPPATH)) {\n        $warning .= sprintf($WARNINGS['BAD_TMPPATH'], TMPPATH);\n    }\n\n    $s_binpath = BINPATH;\n}\n\nif (DEBUG_HTML) {\n    ob_start();\n}\n",
        "gt": [
            "'firebirdwebadmin/inc/configuration.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/data.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'CFPropertyList' => array($vendorDir . '/rodneyrehm/plist/classes'),\n);\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'laravel-pug/tests/PugCompilerTest.php'",
            "'laravel-pug/tests/helpers.php'",
            "'laravel-pug/tests/config-helper.php'"
        ],
        "content": "'laravel-pug/tests/PugCompilerTest.php'\n:<?php\n\nnamespace Phug\\Test;\n\nuse Bkwld\\LaravelPug\\PugCompiler;\nuse Bkwld\\LaravelPug\\ServiceProvider;\nuse Illuminate\\Filesystem\\Filesystem;\nuse InvalidArgumentException;\nuse PHPUnit\\Framework\\TestCase;\nuse Pug\\Pug;\n\nclass PugCompilerGetAndSetPath extends PugCompiler\n{\n    protected $overriddenPath;\n\n    public function getPath()\n    {\n        return $this->overriddenPath;\n    }\n\n    public function setPath($path)\n    {\n        $this->overriddenPath = $path;\n    }\n}\n\n\nclass PugCompilerTest extends TestCase\n{\n\n    public function testIsExpired()\n    {\n        $pug = new Pug([\n            'cache'        => true,\n            'defaultCache' => sys_get_temp_dir(),\n        ]);\n        $compiler = new PugCompiler([[$pug], 0], new Filesystem(), [], sys_get_temp_dir());\n        $path = realpath(__DIR__.'/example.pug');\n        $compiledPath = $compiler->getCompiledPath($path);\n\n        self::assertSame(sys_get_temp_dir(), dirname($compiledPath));\n\n\n        if (file_exists($compiledPath)) {\n            unlink($compiledPath);\n            clearstatcache();\n        }\n\n        self::assertTrue($compiler->isExpired($path));\n\n        $compiler->compile($path);\n        touch(__DIR__.'/example.pug', time() - 3600);\n        clearstatcache();\n\n        self::assertFalse($compiler->isExpired($path));\n\n        $compiler->setCachePath(null);\n\n        self::assertTrue($compiler->isExpired($path));\n\n\n        if (file_exists($compiledPath)) {\n            unlink($compiledPath);\n            clearstatcache();\n        }\n    }\n\n\n    public function testIncludeIsExpired()\n    {\n        $cache = sys_get_temp_dir().DIRECTORY_SEPARATOR.'foo';\n        $pug = new Pug([\n            'cache'        => $cache,\n            'defaultCache' => sys_get_temp_dir(),\n        ]);\n\n        if (!($pug instanceof \\Phug\\Renderer)) {\n            self::markTestSkipped('Include cache expiration only available since pug-php 3.');\n        }\n\n        $files = new Filesystem();\n        if (!$files->exists($cache)) {\n            $files->makeDirectory($cache);\n        }\n        $path = realpath(__DIR__.'/example.pug');\n        $compiler = new PugCompiler([[$pug], 0], $files, [], $cache);\n        $compiledPath = $compiler->getCompiledPath($path);\n\n        self::assertSame($cache, dirname($compiledPath));\n\n        $pug->setOption('cache', true);\n        $path = realpath(__DIR__.'/include.pug');\n        $compiledPath = $compiler->getCompiledPath($path);\n\n        touch(__DIR__.'/include.pug', time() - 3600);\n        touch(__DIR__.'/example.pug', time() - 3600);\n        $compiler->compile($path);\n        clearstatcache();\n\n        self::assertFalse($compiler->isExpired($path));\n\n        touch(__DIR__.'/example.pug', time() + 3600);\n        clearstatcache();\n\n        self::assertTrue($compiler->isExpired($path));\n\n        touch(__DIR__.'/example.pug', time() - 3600);\n        unlink($compiledPath.'.imports.serialize.txt');\n        clearstatcache();\n\n        self::assertTrue($compiler->isExpired($path));\n\n\n        if (file_exists($compiledPath)) {\n            unlink($compiledPath);\n            clearstatcache();\n        }\n    }\n\n\n    public function testCompile()\n    {\n        $pug = new Pug([\n            'defaultCache' => sys_get_temp_dir(),\n        ]);\n        $compiler = new PugCompiler([[$pug], 0], new Filesystem(), [], sys_get_temp_dir());\n        $path = realpath(__DIR__.'/example.pug');\n        $compiledPath = $compiler->getCompiledPath($path);\n        $compiler->compile($path);\n        ob_start();\n        include $compiledPath;\n        $contents = ob_get_contents();\n        ob_end_clean();\n\n        self::assertSame('<h1>Pug is there</h1><p>{{ $sentence }}</p>@if (1 === 1)<div>Go</div>@endif', $contents);\n\n\n        if (file_exists($compiledPath)) {\n            unlink($compiledPath);\n            clearstatcache();\n        }\n    }\n\n\n    public function testGetAndSetPath()\n    {\n        $pug = new Pug([\n            'defaultCache' => sys_get_temp_dir(),\n        ]);\n        $compiler = new PugCompilerGetAndSetPath([[$pug], 0], new Filesystem(), [], sys_get_temp_dir());\n        $compiledPath = $compiler->getCompiledPath('foo');\n\n        try {\n            $compiler->compile('foo');\n        } catch (\\Exception $exception) {\n\n        }\n\n\n        if (file_exists($compiledPath)) {\n            unlink($compiledPath);\n            clearstatcache();\n        }\n\n        self::assertSame('foo', $compiler->getPath());\n\n        $path = realpath(__DIR__.'/example.pug');\n        $compiledPath = $compiler->getCompiledPath($path);\n        $compiler->setPath($path);\n        $compiler->compile(null);\n\n        $sentence = 'By HTML syntax!';\n        ob_start();\n        include $compiledPath;\n        $contents = ob_get_contents();\n        ob_end_clean();\n\n        self::assertSame('<h1>Pug is there</h1><p>{{ $sentence }}</p>@if (1 === 1)<div>Go</div>@endif', $contents);\n\n\n        if (file_exists($compiledPath)) {\n            unlink($compiledPath);\n            clearstatcache();\n        }\n    }\n\n\n    public function testGetCachePath()\n    {\n        $compiler = new PugCompiler([[new Pug()], 0], new Filesystem(), [], sys_get_temp_dir().'/foo');\n\n        self::assertSame(sys_get_temp_dir().'/foo', $compiler->getCachePath());\n\n        $compiler = new PugCompiler([[new Pug([\n            'cache'        => sys_get_temp_dir().'/foo',\n            'defaultCache' => sys_get_temp_dir().'/bar',\n        ])], 0], new Filesystem(), []);\n\n        self::assertSame(sys_get_temp_dir().'/foo', $compiler->getCachePath());\n\n        $compiler = new PugCompiler([[new Pug([\n            'cache'        => sys_get_temp_dir().'/foo',\n            'defaultCache' => sys_get_temp_dir().'/bar',\n        ])], 0], new Filesystem(), [], sys_get_temp_dir().'/biz');\n\n        self::assertSame(sys_get_temp_dir().'/biz', $compiler->getCachePath());\n\n        $compiler = new PugCompiler([[new Pug([\n            'defaultCache' => sys_get_temp_dir().'/bar',\n        ])], 0], new Filesystem(), []);\n\n        self::assertSame(sys_get_temp_dir().'/bar', $compiler->getCachePath());\n    }\n\n\n    public function testGetOption()\n    {\n        $compiler = new PugCompiler([[new Pug([\n            'foo' => 'bar',\n        ])], 0], new Filesystem(), [], 'i');\n\n        self::assertSame('bar', $compiler->getOption('foo', 'bop'));\n        self::assertSame('bidoup', $compiler->getOption('biz', 'bidoup'));\n    }\n\n\n    public function testSetCachePath()\n    {\n        $pug = new Pug([\n            'defaultCache' => sys_get_temp_dir(),\n        ]);\n        $compiler = new PugCompiler([[$pug], 0], new Filesystem(), [], sys_get_temp_dir());\n        $compiler->setCachePath('foo');\n\n        self::assertStringStartsWith('foo/', $compiler->getCompiledPath('bar.pug'));\n        self::assertSame('foo', $pug->getOption('cache'));\n    }\n\n\n    public function testCompilePathException()\n    {\n        $this->expectException(InvalidArgumentException::class);\n        $this->expectExceptionMessage('Missing path argument.');\n\n        $pug = new Pug([\n            'defaultCache' => sys_get_temp_dir(),\n        ]);\n        $compiler = new PugCompiler([[$pug], 0], new Filesystem(), [], sys_get_temp_dir());\n        $compiler->compile(null);\n    }\n\n\n    public function testRender()\n    {\n        $pug = new Pug([\n            'defaultCache' => sys_get_temp_dir(),\n        ]);\n        $compiler = new PugCompiler([[$pug], 0], new Filesystem(), [], sys_get_temp_dir());\n        $path = __DIR__.'/js-expression.pug';\n        $php = $compiler->compile($path);\n        $items = ['a', 'b', 'c'];\n        ob_start();\n        include $compiler->getCompiledPath($path);\n        $html = ob_get_contents();\n        ob_end_clean();\n\n        self::assertSame('<a href=\"?item=a\">a</a><a href=\"?item=b\">b</a><a href=\"?item=c\">c</a>', $html);\n    }\n\n\n    public function testRenderComponent()\n    {\n        include_once __DIR__.'/LaravelTestApp.php';\n        include_once __DIR__.'/helpers.php';\n\n        $app = new LaravelTestApp();\n        $app->singleton('files', function () {\n            return new Filesystem();\n        });\n        $provider = new ServiceProvider($app);\n\n        self::assertSame(\n            '<header>Sure?</header>Are you sure?<button>Yes</button>',\n            $provider->getPugEngine()->renderFile(__DIR__.'/component.pug')\n        );\n    }\n}\n\n'laravel-pug/tests/helpers.php'\n:<?php\n\nuse Phug\\Test\\Config;\n\nif (!interface_exists('Illuminate\\Contracts\\Foundation\\Application')) {\n    include_once __DIR__.'/LaravelLegacyApplicationInterface.php';\n    include_once __DIR__.'/LaravelApplicationInterface.php';\n}\n\nif (!class_exists(Config::class)) {\n    include_once __DIR__.'/config-helper.php';\n}\n\nif (!class_exists('Facade\\Ignition\\Exceptions\\ViewException')) {\n    include_once __DIR__.'/ViewException.php';\n}\n\nif (!function_exists('config_path')) {\n    function config_path($input)\n    {\n        return $input;\n    }\n}\n\nif (!function_exists('storage_path')) {\n    function storage_path($input)\n    {\n        return $input;\n    }\n}\n\nif (!function_exists('resource_path')) {\n    function resource_path($input)\n    {\n        return \"resource/$input\";\n    }\n}\n\n'laravel-pug/tests/config-helper.php'\n:<?php\n\nnamespace Phug\\Test;\n\nuse ArrayAccess;\n\nclass Config implements ArrayAccess\n{\n    protected $useSysTempDir = false;\n\n    protected $data = [];\n\n    public function __construct($source = null)\n    {\n        $this->data['source'] = $source;\n    }\n\n    public function setUseSysTempDir($useSysTempDir)\n    {\n        $this->useSysTempDir = $useSysTempDir;\n    }\n\n    public function get($input)\n    {\n        if ($this->useSysTempDir && in_array($input, ['laravel-pug'])) {\n            return [\n                'assetDirectory'  => __DIR__.'/assets',\n                'outputDirectory' => sys_get_temp_dir(),\n                'defaultCache'    => sys_get_temp_dir(),\n            ];\n        }\n\n        return isset($this->data[$input]) ? $this->data[$input] : [\n            'input' => $input,\n        ];\n    }\n\n    public function set($offset, $value)\n    {\n        $this->data[$offset] = $value;\n    }\n\n    public function offsetExists($offset)\n    {\n        return isset($this->data[$offset]);\n    }\n\n    public function offsetGet($offset)\n    {\n        return $this->data[$offset];\n    }\n\n    public function offsetSet($offset, $value)\n    {\n        $this->data[$offset] = $value;\n    }\n\n    public function offsetUnset($offset)\n    {\n        unset($this->data[$offset]);\n    }\n\n    public function __toString()\n    {\n        return strval($this->data['source']);\n    }\n}\n",
        "gt": [
            "'laravel-pug/tests/config-helper.php'",
            "'laravel-pug/tests/helpers.php'",
            "'laravel-pug/tests/PugCompilerTest.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'",
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_psr4.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/assets/php/datatables.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-datatable.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/templates.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/safety-check.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/assets/php/datatables.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'templates.php';\n\n$datatables = [\n    'tables'=>[\n        'miner-table'=>[\n            'db_table'=>'miners',\n            'db_primary_key'=>'ms_minerID',\n            'enabled'=>true,\n            'columns'=>[\n                [\n                    'db_column'=>'ms_minerID',\n                    'display'=>$larr['miner'].' ID'\n                ],\n                [\n                    'db_column'=>'ms_uqhash',\n                    'display'=>$larr['unique_id']\n                ],\n                [\n                    'db_column'=>'ms_ip',\n                    'display'=>'IP'\n                ],\n                [\n                    'db_column'=>'ms_stealthfound',\n                    'hidden'=>true\n                ],\n                [\n                    'db_column'=>'ms_status',\n                    'display'=>$larr['status'],\n                    'formatter'=>function($d, $s){\n                        global $larr;\n                        $offline = isset($s['ms_lastConnection']) && ((strtotime(date(\"Y-m-d H:i:s\")) - strtotime($s['ms_lastConnection'])) > 180);\n                        $status = unamMinerStatus($offline ? -1 : (empty($s['ms_pool']) && $d != 6 ? 7 : $d));\n                        if($offline) {\n                            $status .= '<span class=\"text-status-red\">('.unamTimeFormat((strtotime(date(\"Y-m-d H:i:s\")) - strtotime($s['ms_lastConnection'])), true).')</span>';\n                        }\n                        if($d == 4) {\n                            $status = str_replace('{REASON}', !empty($s['ms_stealthfound']) ? $s['ms_stealthfound'] : $larr['unknown'], $status);\n                        }\n                        return $status;\n                    }\n                ],\n                [\n                    'db_column'=>'ms_algorithm',\n                    'display'=>$larr['algorithm']\n                ],\n                [\n                    'db_column'=>'ms_hashrate',\n                    'display'=>$larr['hashrate'],\n                    'formatter'=>function($d){\n                        return unamFormatHashrate($d);\n                    }\n                ],\n                [\n                    'db_column'=>'ms_pool',\n                    'display'=>$larr['pool'],\n                    'formatter'=>function($d){\n                        global $larr;\n                        return  empty($d) ? \"<span class='text-status-red'>{$larr['pool_connection_error']}</span>\" : $d;\n                    }\n                ],\n                [\n                    'db_column'=>'ms_port',\n                    'display'=>$larr['port']\n                ],\n                [\n                    'db_column'=>'ms_user',\n                    'display'=>$larr['user']\n                ],\n                [\n                    'db_column'=>'ms_worker',\n                    'display'=>$larr['worker']\n                ],\n                [\n                    'db_column'=>'ms_password',\n                    'display'=>$larr['password']\n                ],\n                [\n                    'db_column'=>'ms_username',\n                    'display'=>$larr['username']\n                ],\n                [\n                    'db_column'=>'ms_computername',\n                    'display'=>$larr['computer_name']\n                ],\n                [\n                    'db_column'=>'ms_type',\n                    'display'=>$larr['type'],\n                    'formatter'=>function($d){\n                        global $larr;\n                        return $d == 'xmrig' ? 'CPU Miner' : ($d == 'ethminer' ? 'GPU Miner' : $larr['unknown']);\n                    }\n                ],\n                [\n                    'db_column'=>'ms_version',\n                    'display'=>$larr['version']\n                ],\n                [\n                    'db_column'=>'ms_gpu',\n                    'display'=>'GPU'\n                ],\n                [\n                    'db_column'=>'ms_cpu',\n                    'display'=>'CPU'\n                ],\n                [\n                    'db_column'=>'ms_activewindow',\n                    'display'=>$larr['active_window'],\n                    'formatter'=>function($d){\n                        global $larr;\n                        return $d == 'Running as System' ? $larr['running_as_system']: $d;\n                    }\n                ],\n                [\n                    'db_column'=>'ms_runtime',\n                    'display'=>$larr['run_time'],\n                    'formatter'=>function($d){\n                        return unamTimeFormat($d, false);\n                    }\n                ],\n                [\n                    'db_column'=>'ms_remoteURL',\n                    'display'=>\"{$larr['remote']} {$larr['url']}\"\n                ],\n                [\n                    'db_column'=>'ms_extra',\n                    'display'=>$larr['extra_data']\n                ],\n                [\n                    'db_column'=>'ms_lastConnection',\n                    'display'=>$larr['last_connection'],\n                ],\n                [\n                    'db_column'=>'ms_creationDate',\n                    'display'=>$larr['first_connection'],\n                ],\n                [\n                    'db_column'=>'ms_minerID',\n                    'display'=>$larr['hashrate_history'],\n                    'hidden'=>!$config['hashrate_history'],\n                    'formatter'=>function($d){\n                        global $larr;\n                        return \"<span><a href='\n                    }\n                ],\n                [\n                    'db_column'=>'ms_config',\n                    'display'=>$larr['configuration'],\n                    'formatter'=>function($d, $s){\n                        global $larr;\n                        $configs = getMinerConfigurations();\n                        $configOptions = \"<option value='0'>{$larr['none']}</option>\";\n                        foreach ($configs as $configdata) {\n                            $configOptions .= \"<option value='{$configdata['cf_configID']}' \" . ($configdata['cf_configID'] == $d ? 'selected' : '') . \">\".$configdata['cf_name'].\"</option>\";\n                        }\n                        return \"<select class='form-control select-miner-config' data-index='{$s['ms_minerID']}'>{$configOptions}</select>\";\n                    }\n                ],\n                [\n                    'db_column'=>'ms_minerID',\n                    'display'=>$larr['actions'],\n                    'formatter'=>function($d, $s){\n                        global $larr;\n                        return \"<div class='btn-group'><a href='\n                    }\n                ]\n            ]\n        ],\n        'ipblocking-table'=>[\n            'db_table'=>'ipblocking',\n            'db_primary_key'=>'ipb_blockID',\n            'enabled'=>true,\n            'columns'=>[\n                [\n                    'db_column'=>'ipb_blockID',\n                    'display'=>'ID'\n                ],\n                [\n                    'db_column'=>'ipb_ip',\n                    'display'=>'IP'\n                ],\n                [\n                    'db_column'=>'ipb_note',\n                    'display'=>$larr['note'],\n                    'formatter'=>function($d){\n                        return nl2br($d);\n                    }\n                ],\n                [\n                    'db_column'=>'ipb_datetime',\n                    'display'=>$larr['date']\n                ],\n                [\n                    'db_column'=>'ipb_blockID',\n                    'display'=>$larr['actions'],\n                    'formatter'=>function($d){\n                        global $larr;\n                        return \"<a href='\n                    }\n                ]\n            ]\n        ]\n    ]\n];\n\nfunction generateDatatable($id) {\n    global $larr, $datatables;\n    if(!empty($datatables['tables'][$id])) {\n        $tabledata = [];\n        foreach ($datatables['tables'][$id]['columns'] as $column) {\n            if (!isset($column['hidden']) || !$column['hidden']) {\n                $tabledata['display'][] = $column['display'];\n            }\n        }\n\n        $columns = implode('</th><th>', $tabledata['display']);\n        return \"<div class='hook-datatable container-fluid' data-tableid='{$id}'>\n                    <table class='table table-bordered table-hover' id='{$id}'>\n                        <thead>\n                        <tr>\n                            <th>{$columns}</th>\n                        </tr>\n                        </thead>\n                    </table>\n                </div>\";\n    }\n    return \"Datatable '{$id}' not found.\";\n}\n'UnamWebPanel/UnamWebPanel/api/ajax-datatable.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once dirname(__DIR__).'/assets/php/datatables.php';\nrequire_once dirname(__DIR__).'/class/class.ssp.php';\n\nif($loggedin && !empty([$datatables['tables'][getParam('tableid')]]) && $datatables['tables'][getParam('tableid')]['enabled']){\n    $table = $datatables['tables'][getParam('tableid')];\n\n    $where = [];\n    if(getParam('tableid') == 'miner-table' && isset($_SESSION['hide_offline_miners']) && $_SESSION['hide_offline_miners']) {\n        $where[] = [\n            'db_column' => 'ms_lastConnection',\n            'db_operation' => '>',\n            'db_value' => date('Y-m-d H:i:s', strtotime('-3 minutes'))\n        ];\n    }\n\n    echo json_encode(SSP::simple($_POST, getConn(), $table['db_table'], $table['db_primary_key'], $table['columns'], $where));\n} else {\n    echo json_encode([]);\n}\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/assets/php/templates.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'security.php';\n\nfunction unamMinerStatus($status){\n    global $larr;\n    switch($status){\n        case 1:\n            return \"<span class='text-status-red'>{$larr['stopped']}</span>\";\n        case 2:\n            return \"<span class='text-status-green'>{$larr['mining']}</span>\";\n        case 3:\n            return \"<span class='text-status-green'>{$larr['mining']} ({$larr['idle']})</span>\";\n        case 4:\n            return \"<span class='text-status-yellow'>{$larr['paused']} ({$larr['stealth']} - {REASON})</span>\";\n        case 5:\n            return \"<span class='text-status-yellow'>{$larr['not_enough_free_vram']}</span>\";\n        case 6:\n            return \"<span class='text-status-yellow'>{$larr['starting']}</span>\";\n        case 7:\n            return \"<span class='text-status-red'>{$larr['error']}</span>\";\n        case -1:\n            return \"<span class='text-status-red'>{$larr['offline']}</span>\";\n        default:\n            return \"<span class='text-status-red'>{$larr['unknown']}</span>\";\n    }\n}\n\nfunction unamTimeFormat($timeline, $shortform) {\n    $periods = [($shortform ? 'd' : 'day') => 86400, ($shortform ? 'h' : 'hour') => 3600, ($shortform ? 'm' : 'minute') => 60, ($shortform ? 's' : 'second') => 1];\n    $ret = \"\";\n    if($timeline) {\n        foreach ($periods as $name => $seconds) {\n            $num = floor($timeline / $seconds);\n            $timeline -= ($num * $seconds);\n            if ($num > 0) {\n                $ret .= ($shortform ? \"{$num}{$name} \" : \"{$num} {$name}\" . (($num > 1) ? 's' : '') . ' ');\n            }\n        }\n    }\n    return trim($ret);\n}\n\nfunction unamFormatHashrate($num) {\n    $num = $num ?: 0;\n    $units = ['H/s', 'KH/s', 'MH/s', 'GH/s', 'TH/s', 'PH/s', 'EH/s'];\n    for ($i = 0; $num >= 1000; $i++) {\n        $num /= 1000;\n    }\n    return round($num, 1).\" {$units[$i]}\";\n}\n'UnamWebPanel/UnamWebPanel/assets/php/safety-check.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once dirname(__DIR__, 2).'/config.php';\n\nif (!class_exists('PDO')) {\n    echo '<p style=\"color:red\">The required class PDO could not be found.</p>';\n    die();\n}\n\nif (!in_array('sqlite', PDO::getAvailableDrivers())) {\n    echo '<p style=\"color:red\">The required SQLite PDO driver is not enabled.</p>';\n    die();\n}\n\nif (!file_exists($config['db_file'])) {\n    echo \"<p style='color:red'>The SQLite database file specified in the configuration could not be found.</p>\";\n    die();\n}\n\n$db_folder = dirname($config['db_file']);\nif (!is_readable($db_folder)) {\n    echo \"<p style='color:red'>The folder containing the SQLite database ({$db_folder}) is not readable, please give the folder appropriate read permissions.</p>\";\n    die();\n}\n\nif (!is_writable($db_folder)) {\n    echo \"<p style='color:red'>The folder containing the SQLite database ({$db_folder}) is not writable, please give the folder appropriate write permissions.</p>\";\n    die();\n}\n\nif (!is_readable($config['db_file'])) {\n    echo \"<p style='color:red'>The SQLite database file ({$config['db_file']}) is not writable, please give the file appropriate write permissions.</p>\";\n    die();\n}\n\nif (!is_writable($config['db_file'])) {\n    echo \"<p style='color:red'>The SQLite database file ({$config['db_file']}) is not writable, please give the file appropriate write permissions.</p>\";\n    die();\n}\n'UnamWebPanel/UnamWebPanel/assets/php/security.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'session-header.php';\n\nif(!$loggedin) {\n    $base->logout();\n}\n\nif (!empty($_SESSION['HTTP_USER_AGENT'])) {\n    if ($_SESSION['HTTP_USER_AGENT'] != $_SERVER['HTTP_USER_AGENT']) {\n        $base->logout();\n    }\n} else {\n    $_SESSION['HTTP_USER_AGENT'] = $_SERVER['HTTP_USER_AGENT'];\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/assets/php/safety-check.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/security.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/templates.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/datatables.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-datatable.php'"
        ]
    },
    {
        "files": [
            "'simple-jwt-authentication/includes/vendor/donatj/phpuseragentparser/Tools/user_agent_sorter.php'",
            "'simple-jwt-authentication/includes/vendor/composer/ClassLoader.php'",
            "'simple-jwt-authentication/includes/vendor/autoload.php'",
            "'simple-jwt-authentication/includes/vendor/composer/autoload_real.php'"
        ],
        "content": "'simple-jwt-authentication/includes/vendor/donatj/phpuseragentparser/Tools/user_agent_sorter.php'\n:<?php\n\nrequire(__DIR__ . '/../vendor/autoload.php');\n\n$jsonfile = __DIR__ . '/../Tests/user_agents.json';\n\n$uas = json_decode(file_get_contents($jsonfile), true);\n\nforeach( $uas as $key => &$val ) {\n\t$val['key'] = $key;\n}\n\nuasort($uas, function ( $a, $b ) {\n\n\tif($a['platform'] === null && $b['platform'] !== null) return 1;\n\tif($b['platform'] === null && $a['platform'] !== null) return -1;\n\n\t$desktop = array( 'Windows', 'Linux', 'Macintosh', 'Chrome OS' );\n\n\t$ad = in_array($a['platform'], $desktop);\n\t$bd = in_array($b['platform'], $desktop);\n\n\tif( !$ad && $bd ) return 1;\n\tif( $ad && !$bd ) return -1;\n\n\tif( $ad ) {\n\t\t$result = strnatcasecmp($a['browser'], $b['browser']);\n\t\tif( $result == 0 ) {\n\n\t\t\t$result = strnatcasecmp($a['platform'], $b['platform']);\n\n\t\t\tif( $result == 0 ) {\n\t\t\t\t$result = compare_version($a['version'], $b['version']);\n\t\t\t}\n\n\t\t}\n\t} else {\n\t\t$result = strnatcasecmp($a['platform'], $b['platform']);\n\t\tif( $result == 0 ) {\n\n\t\t\t$result = strnatcasecmp($a['browser'], $b['browser']);\n\n\t\t\tif( $result == 0 ) {\n\t\t\t\t$result = compare_version($a['version'], $b['version']);\n\t\t\t}\n\n\t\t}\n\t}\n\n\tif( $result == 0 ) {\n\t\t$result = strnatcasecmp($a['key'], $b['key']);\n\t}\n\n\treturn $result;\n});\n\nforeach( $uas as &$val ) {\n\tunset($val['key']);\n}\n\n$jsonPretty = new Camspiers\\JsonPretty\\JsonPretty;\necho $jsonPretty->prettify($uas);\nfile_put_contents($jsonfile, $jsonPretty->prettify($uas));\n\n\nfunction compare_version( $a, $b ) {\n\t$cmp_a = explode('.', $a);\n\t$cmp_b = explode('.', $b);\n\n\t$max = max(count($cmp_a), count($cmp_b));\n\n\t$value = 0;\n\n\tfor( $i = 0; $i < $max; $i++ ) {\n\t\t$aa = strtolower(isset($cmp_a[$i]) ? $cmp_a[$i] : '0');\n\t\t$bb = strtolower(isset($cmp_b[$i]) ? $cmp_b[$i] : '0');\n\n\t\tif( is_numeric($aa) && is_numeric($bb) ) {\n\t\t\tif( $aa != $bb ) {\n\t\t\t\t$value = ($aa > $bb ? 1 : -1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if( $cmp = strcmp($aa, $bb) ) {\n\t\t\t$value = $cmp / abs($cmp);\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn $value;\n}\n'simple-jwt-authentication/includes/vendor/composer/ClassLoader.php'\n:<?php\n\n\n\nnamespace Composer\\Autoload;\n\n\nclass ClassLoader\n{\n\n    private $prefixLengthsPsr4 = array();\n    private $prefixDirsPsr4 = array();\n    private $fallbackDirsPsr4 = array();\n\n\n    private $prefixesPsr0 = array();\n    private $fallbackDirsPsr0 = array();\n\n    private $useIncludePath = false;\n    private $classMap = array();\n    private $classMapAuthoritative = false;\n    private $missingClasses = array();\n    private $apcuPrefix;\n\n    public function getPrefixes()\n    {\n        if (!empty($this->prefixesPsr0)) {\n            return call_user_func_array('array_merge', $this->prefixesPsr0);\n        }\n\n        return array();\n    }\n\n    public function getPrefixesPsr4()\n    {\n        return $this->prefixDirsPsr4;\n    }\n\n    public function getFallbackDirs()\n    {\n        return $this->fallbackDirsPsr0;\n    }\n\n    public function getFallbackDirsPsr4()\n    {\n        return $this->fallbackDirsPsr4;\n    }\n\n    public function getClassMap()\n    {\n        return $this->classMap;\n    }\n\n\n    public function addClassMap(array $classMap)\n    {\n        if ($this->classMap) {\n            $this->classMap = array_merge($this->classMap, $classMap);\n        } else {\n            $this->classMap = $classMap;\n        }\n    }\n\n\n    public function add($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n            if ($prepend) {\n                $this->fallbackDirsPsr0 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr0\n                );\n            } else {\n                $this->fallbackDirsPsr0 = array_merge(\n                    $this->fallbackDirsPsr0,\n                    (array) $paths\n                );\n            }\n\n            return;\n        }\n\n        $first = $prefix[0];\n        if (!isset($this->prefixesPsr0[$first][$prefix])) {\n            $this->prefixesPsr0[$first][$prefix] = (array) $paths;\n\n            return;\n        }\n        if ($prepend) {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixesPsr0[$first][$prefix]\n            );\n        } else {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                $this->prefixesPsr0[$first][$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function addPsr4($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n\n            if ($prepend) {\n                $this->fallbackDirsPsr4 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr4\n                );\n            } else {\n                $this->fallbackDirsPsr4 = array_merge(\n                    $this->fallbackDirsPsr4,\n                    (array) $paths\n                );\n            }\n        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {\n\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        } elseif ($prepend) {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixDirsPsr4[$prefix]\n            );\n        } else {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                $this->prefixDirsPsr4[$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function set($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr0 = (array) $paths;\n        } else {\n            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setPsr4($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr4 = (array) $paths;\n        } else {\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setUseIncludePath($useIncludePath)\n    {\n        $this->useIncludePath = $useIncludePath;\n    }\n\n\n    public function getUseIncludePath()\n    {\n        return $this->useIncludePath;\n    }\n\n\n    public function setClassMapAuthoritative($classMapAuthoritative)\n    {\n        $this->classMapAuthoritative = $classMapAuthoritative;\n    }\n\n\n    public function isClassMapAuthoritative()\n    {\n        return $this->classMapAuthoritative;\n    }\n\n\n    public function setApcuPrefix($apcuPrefix)\n    {\n        $this->apcuPrefix = function_exists('apcu_fetch') && ini_get('apc.enabled') ? $apcuPrefix : null;\n    }\n\n\n    public function getApcuPrefix()\n    {\n        return $this->apcuPrefix;\n    }\n\n\n    public function register($prepend = false)\n    {\n        spl_autoload_register(array($this, 'loadClass'), true, $prepend);\n    }\n\n\n    public function unregister()\n    {\n        spl_autoload_unregister(array($this, 'loadClass'));\n    }\n\n\n    public function loadClass($class)\n    {\n        if ($file = $this->findFile($class)) {\n            includeFile($file);\n\n            return true;\n        }\n    }\n\n\n    public function findFile($class)\n    {\n\n        if (isset($this->classMap[$class])) {\n            return $this->classMap[$class];\n        }\n        if ($this->classMapAuthoritative || isset($this->missingClasses[$class])) {\n            return false;\n        }\n        if (null !== $this->apcuPrefix) {\n            $file = apcu_fetch($this->apcuPrefix.$class, $hit);\n            if ($hit) {\n                return $file;\n            }\n        }\n\n        $file = $this->findFileWithExtension($class, '.php');\n\n\n        if (false === $file && defined('HHVM_VERSION')) {\n            $file = $this->findFileWithExtension($class, '.hh');\n        }\n\n        if (null !== $this->apcuPrefix) {\n            apcu_add($this->apcuPrefix.$class, $file);\n        }\n\n        if (false === $file) {\n\n            $this->missingClasses[$class] = true;\n        }\n\n        return $file;\n    }\n\n    private function findFileWithExtension($class, $ext)\n    {\n\n        $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . $ext;\n\n        $first = $class[0];\n        if (isset($this->prefixLengthsPsr4[$first])) {\n            $subPath = $class;\n            while (false !== $lastPos = strrpos($subPath, '\\\\')) {\n                $subPath = substr($subPath, 0, $lastPos);\n                $search = $subPath.'\\\\';\n                if (isset($this->prefixDirsPsr4[$search])) {\n                    foreach ($this->prefixDirsPsr4[$search] as $dir) {\n                        $length = $this->prefixLengthsPsr4[$first][$search];\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $length))) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr4 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {\n                return $file;\n            }\n        }\n\n\n        if (false !== $pos = strrpos($class, '\\\\')) {\n\n            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)\n                . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);\n        } else {\n\n            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;\n        }\n\n        if (isset($this->prefixesPsr0[$first])) {\n            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($dirs as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr0 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                return $file;\n            }\n        }\n\n\n        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {\n            return $file;\n        }\n\n        return false;\n    }\n}\n\n\nfunction includeFile($file)\n{\n    include $file;\n}\n\n'simple-jwt-authentication/includes/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer/autoload_real.php';\n\nreturn ComposerAutoloaderInit89ab54d4543c163039c2cf5235fd7e1a::getLoader();\n\n'simple-jwt-authentication/includes/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit89ab54d4543c163039c2cf5235fd7e1a\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit89ab54d4543c163039c2cf5235fd7e1a', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit89ab54d4543c163039c2cf5235fd7e1a', 'loadClassLoader'));\n\n        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());\n        if ($useStaticLoader) {\n            require_once __DIR__ . '/autoload_static.php';\n\n            call_user_func(\\Composer\\Autoload\\ComposerStaticInit89ab54d4543c163039c2cf5235fd7e1a::getInitializer($loader));\n        } else {\n            $map = require __DIR__ . '/autoload_namespaces.php';\n            foreach ($map as $namespace => $path) {\n                $loader->set($namespace, $path);\n            }\n\n            $map = require __DIR__ . '/autoload_psr4.php';\n            foreach ($map as $namespace => $path) {\n                $loader->setPsr4($namespace, $path);\n            }\n\n            $classMap = require __DIR__ . '/autoload_classmap.php';\n            if ($classMap) {\n                $loader->addClassMap($classMap);\n            }\n        }\n\n        $loader->register(true);\n\n        if ($useStaticLoader) {\n            $includeFiles = Composer\\Autoload\\ComposerStaticInit89ab54d4543c163039c2cf5235fd7e1a::$files;\n        } else {\n            $includeFiles = require __DIR__ . '/autoload_files.php';\n        }\n        foreach ($includeFiles as $fileIdentifier => $file) {\n            composerRequire89ab54d4543c163039c2cf5235fd7e1a($fileIdentifier, $file);\n        }\n\n        return $loader;\n    }\n}\n\nfunction composerRequire89ab54d4543c163039c2cf5235fd7e1a($fileIdentifier, $file)\n{\n    if (empty($GLOBALS['__composer_autoload_files'][$fileIdentifier])) {\n        require $file;\n\n        $GLOBALS['__composer_autoload_files'][$fileIdentifier] = true;\n    }\n}\n",
        "gt": [
            "'simple-jwt-authentication/includes/vendor/composer/ClassLoader.php'",
            "'simple-jwt-authentication/includes/vendor/composer/autoload_real.php'",
            "'simple-jwt-authentication/includes/vendor/autoload.php'",
            "'simple-jwt-authentication/includes/vendor/donatj/phpuseragentparser/Tools/user_agent_sorter.php'"
        ]
    },
    {
        "files": [
            "'grav-plugin-git-sync/vendor/composer/autoload_psr4.php'",
            "'grav-plugin-git-sync/vendor/composer/autoload_real.php'",
            "'grav-plugin-git-sync/git-sync.php'",
            "'grav-plugin-git-sync/vendor/autoload.php'"
        ],
        "content": "'grav-plugin-git-sync/vendor/composer/autoload_psr4.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'Grav\\\\Plugin\\\\GitSync\\\\' => array($baseDir . '/classes'),\n    'Grav\\\\Plugin\\\\Console\\\\' => array($baseDir . '/cli'),\n    'Defuse\\\\Crypto\\\\' => array($vendorDir . '/defuse/php-encryption/src'),\n);\n\n'grav-plugin-git-sync/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        require __DIR__ . '/platform_check.php';\n\n        spl_autoload_register(array('ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader(\\dirname(\\dirname(__FILE__)));\n        spl_autoload_unregister(array('ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854', 'loadClassLoader'));\n\n        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());\n        if ($useStaticLoader) {\n            require __DIR__ . '/autoload_static.php';\n\n            call_user_func(\\Composer\\Autoload\\ComposerStaticInitc058e1b5c686df0909ec1cc39bb5d854::getInitializer($loader));\n        } else {\n            $map = require __DIR__ . '/autoload_namespaces.php';\n            foreach ($map as $namespace => $path) {\n                $loader->set($namespace, $path);\n            }\n\n            $map = require __DIR__ . '/autoload_psr4.php';\n            foreach ($map as $namespace => $path) {\n                $loader->setPsr4($namespace, $path);\n            }\n\n            $classMap = require __DIR__ . '/autoload_classmap.php';\n            if ($classMap) {\n                $loader->addClassMap($classMap);\n            }\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\n'grav-plugin-git-sync/git-sync.php'\n:<?php\n\nnamespace Grav\\Plugin;\n\nuse Composer\\Autoload\\ClassLoader;\nuse Grav\\Common\\Config\\Config;\nuse Grav\\Common\\Data\\Data;\nuse Grav\\Common\\Grav;\nuse Grav\\Common\\Page\\Interfaces\\PageInterface;\nuse Grav\\Common\\Plugin;\nuse Grav\\Common\\Scheduler\\Scheduler;\nuse Grav\\Plugin\\GitSync\\AdminController;\nuse Grav\\Plugin\\GitSync\\GitSync;\nuse Grav\\Plugin\\GitSync\\Helper;\nuse RocketTheme\\Toolbox\\Event\\Event;\n\n\nclass GitSyncPlugin extends Plugin\n{\n\n    protected $controller;\n\n    protected $git;\n\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            'onPluginsInitialized'   => [\n                ['autoload', 100000],\n                ['onPluginsInitialized', 1000]\n            ],\n            'onPageInitialized'      => ['onPageInitialized', 0],\n            'onFormProcessed'        => ['onFormProcessed', 0],\n            'onSchedulerInitialized' => ['onSchedulerInitialized', 0]\n        ];\n    }\n\n\n    public function autoload() : ClassLoader\n    {\n        return require __DIR__ . '/vendor/autoload.php';\n    }\n\n\n    public static function generateWebhookSecret()\n    {\n        return static::generateHash(24);\n    }\n\n\n    public static function generateRandomWebhook()\n    {\n        return '/_git-sync-' . static::generateHash(6);\n    }\n\n\n    public function onPluginsInitialized()\n    {\n        $this->enable(['gitsync' => ['synchronize', 0]]);\n        $this->init();\n\n        if ($this->isAdmin()) {\n            $this->enable([\n                'onTwigTemplatePaths'  => ['onTwigTemplatePaths', 0],\n                'onTwigSiteVariables'  => ['onTwigSiteVariables', 0],\n                'onAdminMenu'          => ['onAdminMenu', 0],\n                'onAdminSave'          => ['onAdminSave', 0],\n                'onAdminAfterSave'     => ['onAdminAfterSave', 0],\n                'onAdminAfterSaveAs'   => ['onAdminAfterSaveAs', 0],\n                'onAdminAfterDelete'   => ['onAdminAfterDelete', 0],\n                'onAdminAfterAddMedia' => ['onAdminAfterMedia', 0],\n                'onAdminAfterDelMedia' => ['onAdminAfterMedia', 0],\n            ]);\n\n            return;\n        }\n\n        $config = $this->config->get('plugins.' . $this->name);\n        $route = $this->grav['uri']->route();\n        $webhook = $config['webhook'] ?? false;\n        $secret = $config['webhook_secret'] ?? false;\n        $enabled = $config['webhook_enabled'] ?? false;\n\n        if ($enabled && $route === $webhook && $_SERVER['REQUEST_METHOD'] === 'POST') {\n            if ($secret) {\n                if (!$this->isRequestAuthorized($secret)) {\n                    http_response_code(401);\n                    header('Content-Type: application/json');\n                    echo json_encode([\n                        'status' => 'error',\n                        'message' => 'Unauthorized request'\n                    ]);\n                    exit;\n                }\n            }\n            try {\n                $this->synchronize();\n                header('Content-Type: application/json');\n                echo json_encode([\n                    'status' => 'success',\n                    'message' => 'GitSync completed the synchronization'\n                ]);\n            } catch (\\Exception $e) {\n                http_response_code(500);\n                header('Content-Type: application/json');\n                echo json_encode([\n                    'status' => 'error',\n                    'message' => 'GitSync failed to synchronize'\n                ]);\n            }\n            exit;\n        }\n    }\n\n\n    public function isRequestAuthorized($secret)\n    {\n        if (isset($_SERVER['HTTP_X_HUB_SIGNATURE'])) {\n            $payload = file_get_contents('php:\n\n            return $this->isGithubSignatureValid($secret, $_SERVER['HTTP_X_HUB_SIGNATURE'], $payload);\n        }\n        if (isset($_SERVER['HTTP_X_GITLAB_TOKEN'])) {\n            return $this->isGitlabTokenValid($secret, $_SERVER['HTTP_X_GITLAB_TOKEN']);\n        } else {\n            $payload = file_get_contents('php:\n            return $this->isGiteaSecretValid($secret, $payload);\n        }\n\n        return false;\n    }\n\n\n    public function isGithubSignatureValid($secret, $signatureHeader, $payload)\n    {\n        [$algorithm, $signature] = explode('=', $signatureHeader);\n\n        return $signature === hash_hmac($algorithm, $payload, $secret);\n    }\n\n\n    public function isGitlabTokenValid($secret, $token)\n    {\n        return $secret === $token;\n    }\n\n\n    public function isGiteaSecretValid($secret, $payload)\n    {\n        $payload = json_decode($payload, true);\n        if (!empty($payload) && isset($payload['secret'])) {\n            return $secret === $payload['secret'];\n        }\n\n        return false;\n    }\n\n    public function onAdminMenu()\n    {\n        $base = rtrim($this->grav['base_url'], '/') . '/' . trim($this->grav['admin']->base, '/');\n        $options = [\n            'hint' => Helper::isGitInitialized() ? 'Synchronize GitSync' : 'Configure GitSync',\n            'class' => 'gitsync-sync',\n            'location' => 'pages',\n            'route' => Helper::isGitInitialized() ? 'admin' : 'admin/plugins/git-sync',\n            'icon' => 'fa-' . $this->grav['plugins']->get('git-sync')->blueprints()->get('icon')\n        ];\n\n        if (Helper::isGitInstalled()) {\n            if (Helper::isGitInitialized()) {\n                $options['data'] = [\n                    'gitsync-useraction' => 'sync',\n                    'gitsync-uri' => $base . '/plugins/git-sync'\n                ];\n            }\n\n            $this->grav['twig']->plugins_quick_tray['GitSync'] = $options;\n        }\n    }\n\n    public function init()\n    {\n        if ($this->isAdmin()) {\n\n            $this->controller = new AdminController($this);\n            $this->git = &$this->controller->git;\n        } else {\n            $this->git = new GitSync();\n        }\n    }\n\n\n    public function synchronize()\n    {\n        if (!Helper::isGitInstalled() || !Helper::isGitInitialized()) {\n            return true;\n        }\n\n        $this->grav->fireEvent('onGitSyncBeforeSynchronize');\n\n        if ($this->git->hasChangesToCommit()) {\n            $this->git->commit();\n        }\n\n\n        $this->git->sync();\n\n        $this->grav->fireEvent('onGitSyncAfterSynchronize');\n\n        return true;\n    }\n\n    public function onSchedulerInitialized(Event $event)\n    {\n\n        $config = Grav::instance()['config'];\n        $run_at = $config->get('plugins.git-sync.sync.cron_at', '0 12,23 * * *');\n\n        if ($config->get('plugins.git-sync.sync.cron_enable', false)) {\n\n            $scheduler = $event['scheduler'];\n            $job = $scheduler->addFunction('Grav\\Plugin\\GitSync\\Helper::synchronize', [], 'GitSync');\n            $job->at($run_at);\n        }\n    }\n\n\n    public function reset()\n    {\n        if (!Helper::isGitInstalled() || !Helper::isGitInitialized()) {\n            return true;\n        }\n\n        $this->grav->fireEvent('onGitSyncBeforeReset');\n\n        $this->git->reset();\n\n        $this->grav->fireEvent('onGitSyncAfterReset');\n\n        return true;\n    }\n\n\n    public function onTwigTemplatePaths()\n    {\n        $this->grav['twig']->twig_paths[] = __DIR__ . '/templates';\n    }\n\n\n    public function onTwigSiteVariables()\n    {\n\n        if (!class_exists(Helper::class)) {\n            return false;\n        }\n\n        $user = $this->grav['user'];\n        if (!$user->authenticated) {\n            return false;\n        }\n\n        $settings = [\n            'first_time'    => !Helper::isGitInitialized(),\n            'git_installed' => Helper::isGitInstalled()\n        ];\n\n        $this->grav['twig']->twig_vars['git_sync'] = $settings;\n\n        $adminPath = trim($this->grav['admin']->base, '/');\n        if ($this->grav['uri']->path() === \"/$adminPath/plugins/git-sync\") {\n            $this->grav['assets']->addCss('plugin:\n        } else {\n            $this->grav['assets']->addInlineJs('var GitSync = ' . json_encode($settings) . ';');\n        }\n\n        $this->grav['assets']->addJs('plugin:\n        $this->grav['assets']->addJs('plugin:\n        $this->grav['assets']->addCss('plugin:\n\n        return true;\n    }\n\n    public function onPageInitialized()\n    {\n        if ($this->controller && $this->controller->isActive()) {\n            $this->controller->execute();\n            $this->controller->redirect();\n        }\n    }\n\n\n    public function onAdminSave(Event $event)\n    {\n        $obj           = $event['object'];\n        $adminPath \t   = trim($this->grav['admin']->base, '/');\n        $isPluginRoute = $this->grav['uri']->path() === \"/$adminPath/plugins/\" . $this->name;\n\n        if ($obj instanceof Data) {\n            if (!$isPluginRoute || !Helper::isGitInstalled()) {\n                return true;\n            }\n\n\n            $password = $obj->get('password', false);\n            if (!$password) {\n                $current_password = $this->git->getPassword();\n\n                if ($current_password && strpos($current_password, 'gitsync-') !== 0) {\n                    $current_password = Helper::encrypt($current_password);\n                }\n            } else {\n\n                $current_password = Helper::encrypt($password);\n            }\n\n            $obj->set('password', $current_password);\n        }\n\n        return $obj;\n    }\n\n\n    public function onAdminAfterSave(Event $event)\n    {\n        $obj           = $event['object'];\n        $adminPath\t   = trim($this->grav['admin']->base, '/');\n        $uriPath       = $this->grav['uri']->path();\n        $isPluginRoute = $uriPath === \"/$adminPath/plugins/\" . $this->name;\n\n        if ($obj instanceof PageInterface && !$this->grav['config']->get('plugins.git-sync.sync.on_save', true)) {\n            return;\n        }\n\n        if ($obj instanceof Data) {\n            $folders = $this->git->getConfig('folders', $event['object']->get('folders', []));\n            $data_type = preg_replace('\n            $data_type = explode('/', $data_type);\n            $data_type = array_shift($data_type);\n\n            if (null === $data_type || !Helper::isGitInstalled() || (!$isPluginRoute && !in_array($this->getFolderMapping($data_type), $folders, true))) {\n                return;\n            }\n\n            if ($isPluginRoute) {\n                $this->git->setConfig($obj->toArray());\n\n\n                $this->git->initializeRepository();\n\n\n                $this->git->setUser();\n                $this->git->addRemote();\n            }\n        }\n\n        $this->synchronize();\n    }\n\n    public function onAdminAfterSaveAs()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_save', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n    public function onAdminAfterDelete()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_delete', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n    public function onAdminAfterMedia()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_media', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n\n    public function onFormProcessed(Event $event)\n    {\n        $action = $event['action'];\n\n        if ($action === 'gitsync') {\n            $this->synchronize();\n        }\n    }\n\n\n    public function getFolderMapping($data_type)\n    {\n        switch ($data_type) {\n            case 'user':\n                return 'accounts';\n            case 'themes':\n                return 'config';\n            case 'config':\n            case 'data':\n            case 'plugins':\n            case 'pages':\n                return $data_type;\n        }\n\n        return null;\n    }\n\n\n    protected static function generateHash(int $len): string\n    {\n        $bytes = openssl_random_pseudo_bytes($len, $isStrong);\n\n        if ($bytes === false) {\n            throw new \\RuntimeException('Could not generate hash');\n        }\n\n        if ($isStrong === false) {\n\n            $isStrong = true;\n        }\n\n        return bin2hex($bytes);\n    }\n}\n\n'grav-plugin-git-sync/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer/autoload_real.php';\n\nreturn ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854::getLoader();\n",
        "gt": [
            "'grav-plugin-git-sync/vendor/composer/autoload_psr4.php'",
            "'grav-plugin-git-sync/vendor/composer/autoload_real.php'",
            "'grav-plugin-git-sync/vendor/autoload.php'",
            "'grav-plugin-git-sync/git-sync.php'"
        ]
    },
    {
        "files": [
            "'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/__UNAM_LIB/unam_lib.php'"
        ],
        "content": "'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once(dirname(__DIR__) . '/assets/php/session-header.php');\n\nswitch(getParam('action')){\n    case 'lang-change':\n        $base->unam_checkCondition(!in_array(getParam('newlangID'), array_keys($config['languages'])), 'Language ID invalid.');\n        $_SESSION['lang'] = getParam('newlangID');\n        $base->unam_echoSuccess();\n        break;\n}\n'UnamWebPanel/UnamWebPanel/class/class.base.php'\n:<?php\n/* Made by Unam Sanctam https:\n$csp_nonce = base64_encode(random_bytes(16));\nheader(\"Content-Security-Policy: default-src 'self'; script-src 'self' 'nonce-{$csp_nonce}'; style-src 'self'; img-src 'self' data:; object-src 'none'; frame-src 'none'; child-src 'none'; worker-src 'none'; media-src 'none'; manifest-src 'none'; base-uri 'none'; form-action 'none';\");\nheader(\"Feature-Policy: geolocation 'none'; microphone 'none'; camera 'none'\");\nheader(\"Permissions-Policy: geolocation=(), microphone=(), camera=()\");\nheader(\"Referrer-Policy: no-referrer\");\nheader(\"X-Content-Type-Options: nosniff\");\nheader(\"X-Frame-Options: DENY\");\nheader('X-Robots-Tag: noindex, nofollow');\nheader(\"Cross-Origin-Resource-Policy: same-origin\");\nrequire_once dirname(__DIR__).'/__UNAM_LIB/unam_lib.php';\nrequire_once dirname(__DIR__).'/config.php';\nrequire_once 'db.php';\n\nclass base extends unam_lib {\n    function logout() {\n        unset($_SESSION['HTTP_USER_AGENT']);\n        unset($_SESSION['logged_in']);\n        header(\"Location: login.php\");\n        die();\n    }\n}\n'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'\n:<?php\n/* Made by Unam Sanctam https:\nrequire_once 'safety-check.php';\nrequire_once dirname(__DIR__, 2).'/class/class.base.php';\nif(session_status() !== PHP_SESSION_ACTIVE) {\n    session_set_cookie_params([\n        'lifetime' => 0,\n        'httponly' => true,\n        'samesite' => 'Strict'\n    ]);\n    session_start();\n}\n\n$base = new base();\n\nif($config['errorlog_enable']) {\n    $base->unam_toggleCustomErrorHandling();\n}\n\nif(!isset($_SESSION['csrf_token'])){\n    $_SESSION['csrf_token'] = bin2hex(random_bytes(32));\n}\n\n$loggedin = !empty($_SESSION['logged_in']) && password_verify($config['password'], $_SESSION['logged_in']);\n\n$currentDate = date('Y-m-d H:i:s');\n\nif(empty($_SESSION['lang'])){\n    $_SESSION['lang'] = $base->unam_getBrowserLanguages(array_keys($config['languages']));\n}\n\n$langID = !empty($_SESSION['lang']) ? $_SESSION['lang'] : 'en';\n\nrequire_once dirname(__DIR__, 2).'/lang/lang.php';\n\n$larr = [];\nforeach($langarr as $key=>$val){\n    $larr[$key] = $val[$langID] ?? $val['en'];\n}\n\n$paramsarr = $base->unam_filterAllParameters(10000);\nfunction getParam($param, $default=''){\n    global $paramsarr;\n    return ($paramsarr[$param] ?? $default);\n}\n\n$cf = function($function) {\n    return $function;\n};\n\n$minerconfigs = null;\nfunction getMinerConfigurations(){\n    global $base, $minerconfigs;\n    if(empty($minerconfigs)){\n        $minerconfigs = $base->unam_dbSelect(getConn(), 'configs', 'cf_configID, cf_name, cf_data', [], 0, 1);\n    }\n    return $minerconfigs;\n}\n'UnamWebPanel/UnamWebPanel/__UNAM_LIB/unam_lib.php'\n:<?php\n/* Made by Unam Sanctam https:\n\nclass unam_lib {\n    private static $usingCustomErrorHandler;\n\n    function __construct() {\n        self::$usingCustomErrorHandler = false;\n    }\n\n    function unam_dbSelect($conn, $table_name, $fields, $where_array = null, $rowcount=false, $fetchAll=false, $extras=''){\n        $where_flag = [];\n        $where_flag_values = [];\n        if(isset($where_array) && is_array($where_array)){\n            foreach($where_array as $key=>$value) {\n                if($key == '$CUSTOM'){\n                    $where_flag[] = \"$value\";\n                }else if(is_array($value)){\n                    $where_flag[] = \"$key $value[0] ?\";\n                    $where_flag_values[] = $value[1];\n                }else{\n                    $where_flag[] = \"$key = ?\";\n                    $where_flag_values[] = $value;\n                }\n            }\n            $where_flag_string = implode(' AND ', $where_flag);\n        }\n        try{\n            $s = $conn->prepare(\"SELECT \".($rowcount ? \"COUNT(*) as unam_totalCount\" : $fields).\" FROM $table_name\".($where_array && count($where_array) > 0 ? \" WHERE $where_flag_string\" : \"\").\" $extras\");\n            $s->execute($where_flag_values);\n            if($rowcount){\n                return $s->fetch(PDO::FETCH_ASSOC)['unam_totalCount'];\n            }\n            if($fetchAll) {\n                return $s->fetchAll(PDO::FETCH_ASSOC);\n            }\n            return $s->fetch(PDO::FETCH_ASSOC);\n        }\n        catch(PDOException $e){\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return [];\n        }\n    }\n\n    function unam_dbInsert($conn, $table, $arr)\n    {\n        try {\n            $names = join(',', array_keys($arr));\n            $params = [];\n            $valcount = (is_array(reset($arr)) ? count(reset($arr))  : 1);\n            $keycount = count(array_keys($arr));\n            if(is_array(reset($arr))){\n                for($i = 0; $i < $valcount; $i++){\n                    $params = array_merge($params, array_column($arr, $i));\n                }\n            }else{\n                $params = array_values($arr);\n            }\n            $values =  substr(str_repeat(',('.substr(str_repeat(',?', $keycount), 1).')', $valcount), 1);\n            $s = $conn->prepare(\"INSERT INTO $table ($names) VALUES $values\");\n            return $s->execute($params);\n        }\n        catch(PDOException $e){\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return [];\n        }\n    }\n\n    function unam_dbUpdate($conn, $tableName, $colsArray, $where_array)\n    {\n        $UpdateString = [];\n        $ExecuteString = [];\n        foreach($colsArray as $key=>$value)\n        {\n            $UpdateString[] = \"$key = ?\";\n            $ExecuteString[] = $value;\n        }\n\n        $where_flag = [];\n        foreach($where_array as $key=>$value)\n        {\n            if($key == '$CUSTOM'){\n                $where_flag[] = \"$value\";\n            }else if(is_array($value)){\n                $where_flag[] = \"$key $value[0] ?\";\n                $ExecuteString[] = $value[1];\n            }else{\n                $where_flag[] = \"$key = ?\";\n                $ExecuteString[] = $value;\n            }\n        }\n\n        try {\n            $s = $conn->prepare(\"UPDATE $tableName SET \".implode(', ', $UpdateString).\" WHERE \".implode(' AND ', $where_flag));\n            return $s->execute($ExecuteString);\n        }\n        catch(PDOException $e){\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return false;\n        }\n    }\n\n    function unam_dbDelete($conn, $table_name, $where_array)\n    {\n        $where_flag = [];\n        $where_flag_values = [];\n        foreach($where_array as $key=>$value)\n        {\n            if($key == '$CUSTOM'){\n                $where_flag[] = \"$value\";\n            }else if(is_array($value)){\n                $where_flag[] = \"$key $value[0] ?\";\n                $where_flag_values[] = $value[1];\n            }else{\n                $where_flag[] = \"$key = ?\";\n                $where_flag_values[] = $value;\n            }\n        }\n\n        $where_flag_string = implode(' AND ', $where_flag);\n        try {\n            $s = $conn->prepare(\"DELETE FROM $table_name WHERE $where_flag_string\");\n            return $s->execute($where_flag_values);\n        }\n        catch(PDOException $e) {\n            self::unam_writeError(\"</br><b>An error occured: </b> </br>{$e->getMessage()}\");\n            return [];\n        }\n    }\n\n    function unam_sanitize($input) {\n        if (is_array($input)) {\n            foreach ($input as $key => $value) {\n                $input[$key] = self::unam_sanitize($value);\n            }\n            return $input;\n        }\n        return htmlspecialchars($input, ENT_QUOTES, 'UTF-8', false);\n    }\n\n\n    function unam_filterParameter($param, $maxlength = 1000, $default = ''){\n        if(!isset($_POST[$param]) && !isset($_GET[$param])) {\n            return $default;\n        }\n        $fparam = self::unam_arrayWalkRecursive($_POST[$param] ?? $_GET[$param], function(&$v) use(&$maxlength){ $v = self::unam_sanitize(substr($v, 0, $maxlength)); });\n        return (count($fparam) == 1 ? $fparam[0] : $fparam);\n    }\n\n    function unam_filterAllParameters($maxlength = 1000, $default = '') {\n        $paramarr = array_merge($_POST, $_GET);\n        $outarr = [];\n        if(is_array($paramarr)){\n            foreach($paramarr as $param=>$data){\n                $outarr[$param] = self::unam_filterParameter($param, $maxlength, $default);\n            }\n        }\n        return $outarr;\n    }\n\n    function unam_arrayWalkRecursive($arr, $function){\n        $arr = is_array($arr) ? $arr : [$arr];\n        array_walk_recursive($arr, $function);\n        return $arr;\n    }\n\n    function unam_checkCondition($cond, $resp){\n        if($cond === true){\n            self::unam_echoFailure($resp);\n            die();\n        }\n    }\n\n    function unam_echoSuccess($successmsg=''){\n        echo json_encode(['response' => 'success', 'successmsg'=>$successmsg]);\n    }\n\n    function unam_echoFailure($errormsg){\n        echo json_encode(['response'=>'failure', 'errormsg'=>$errormsg]);\n    }\n\n    function unam_getBrowserLanguages($available = [], $default = 'en') {\n        if (isset( $_SERVER[ 'HTTP_ACCEPT_LANGUAGE' ])) {\n            $langs = explode( ',', $_SERVER['HTTP_ACCEPT_LANGUAGE'] );\n            if(empty($available)) {\n                return $langs[0];\n            }\n            foreach($langs as $lang){\n                $lang = substr($lang, 0, 2);\n                if(in_array( $lang, $available)){\n                    return $lang;\n                }\n            }\n        }\n        return $default;\n    }\n\n    function unam_toggleCustomErrorHandling() {\n        if(self::$usingCustomErrorHandler){\n            restore_error_handler();\n            self::$usingCustomErrorHandler = false;\n            return false;\n        }else{\n            set_error_handler([$this, 'unam_customErrorHandler']);\n            self::$usingCustomErrorHandler = true;\n            return true;\n        }\n    }\n\n    function unam_customErrorHandler($errno, $errstr, $error_file, $error_line, $error_context = null) {\n        global $SYSTEM_PHP_ERROR;\n        $SYSTEM_PHP_ERROR=false;\n        $err_hostname_ip = $_SERVER['REMOTE_ADDR'] ;\n\n        $errout = \"<br/><b>Date and Time:</b> \".date('Y/m/d H:i:s');\n        $errout .= \"<br/><b>In file:</b> $error_file\";\n        $errout .= \"<br/><b>On line:</b> $error_line\";\n        $errout .= \"<br/><b>Error was: </b> [$errno] $errstr\";\n        $errout .= \"<br/><b>Remote IP:</b> $err_hostname_ip\";\n        $errout .= \"<hr/>\";\n\n        self::unam_writeError($errout);\n        $SYSTEM_PHP_ERROR=true;\n    }\n\n    function unam_writeError($errormessage){\n        if(self::$usingCustomErrorHandler) {\n            file_put_contents(__DIR__.\"/Logs/php-error-\".date('d-m-Y').\".html\", \"ERROR: $errormessage\", FILE_APPEND);\n        }\n    }\n}",
        "gt": [
            "'UnamWebPanel/UnamWebPanel/__UNAM_LIB/unam_lib.php'",
            "'UnamWebPanel/UnamWebPanel/class/class.base.php'",
            "'UnamWebPanel/UnamWebPanel/assets/php/session-header.php'",
            "'UnamWebPanel/UnamWebPanel/api/ajax-sitewide.php'"
        ]
    },
    {
        "files": [
            "'ZnoteAAC/helpdesk.php'",
            "'ZnoteAAC/engine/init.php'",
            "'ZnoteAAC/engine/function/itemparser/itemlistparser.php'"
        ],
        "content": "'ZnoteAAC/helpdesk.php'\n:<?php\nrequire_once 'engine/init.php';\nprotect_page();\ninclude 'layout/overall/header.php';\n\n$view = (isset($_GET['view']) && (int)$_GET['view'] > 0) ? (int)$_GET['view'] : false;\nif ($view !== false) {\n\tif (!empty($_POST['reply_text'])) {\n\n\n\t\t$query = array(\n\t\t\t'tid'   =>\t$view,\n\t\t\t'username'=>\tgetValue($_POST['username']),\n\t\t\t'message' =>\tgetValue($_POST['reply_text']),\n\t\t\t'created' =>\ttime(),\n\t\t);\n\t\t$fields = '`'. implode('`, `', array_keys($query)) .'`';\n\t\t$data = '\\''. implode('\\', \\'', $query) .'\\'';\n\t\tmysql_insert(\"INSERT INTO `znote_tickets_replies` ($fields) VALUES ($data)\");\n\t\tmysql_update(\"UPDATE `znote_tickets` SET `status`='Player-Reply' WHERE `id`='$view' LIMIT 1;\");\n\t}\n\t$ticketData = mysql_select_single(\"SELECT * FROM znote_tickets WHERE id='$view' LIMIT 1;\");\n\n\tif($ticketData['owner'] != $session_user_id) {\n\t\techo 'You can not view this ticket!';\n\t\tinclude 'layout/overall/footer.php';\n\t\tdie;\n\t}\n\t?>\n\t<h1>View Ticket\n\t<?php\n\t\techo $ticketData['id'];\n\t\tif ($ticketData['status'] === 'CLOSED') {\n\t\t\techo '<span style=\"color:red\">[CLOSED]</SPAN>';\n\t\t}\n\t?></h1>\n\t<table class=\"znoteTable ThreadTable table table-striped\">\n\t\t<tr class=\"yellow\">\n\t\t\t<th>\n\t\t\t\t<?php\n\t\t\t\t\techo getClock($ticketData['creation'], true);\n\t\t\t\t?>\n\t\t\t\t - Created by:\n\t\t\t\t <?php\n\t\t\t\t \techo $ticketData['username'];\n\t\t\t\t ?>\n\t\t\t</th>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>\n\t\t\t\t<p><?php echo nl2br($ticketData['message']); ?></p>\n\t\t\t</td>\n\t\t</tr>\n\t</table>\n\t<?php\n\t$replies = mysql_select_multi(\"SELECT * FROM znote_tickets_replies WHERE tid='$view' ORDER BY `created`;\");\n\tif ($replies !== false) {\n\t\tforeach($replies as $reply) {\n\t\t\t?>\n\t\t\t<table class=\"znoteTable ThreadTable table table-striped\">\n\t\t\t\t<tr class=\"yellow\">\n\t\t\t\t\t<th>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\techo getClock($reply['created'], true);\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t - Posted by:\n\t\t\t\t\t\t <?php\n\t\t\t\t\t\t \techo $reply['username'];\n\t\t\t\t\t\t ?>\n\t\t\t\t\t</th>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>\n\t\t\t\t\t\t<p><?php echo nl2br($reply['message']); ?></p>\n\t\t\t\t\t</td>\n\t\t\t\t</tr>\n\t\t\t</table>\n\t\t\t<hr class=\"bighr\">\n\t\t<?php\n\t\t}\n\t}\n\t?>\n\n\t<?php if ($ticketData['status'] !== 'CLOSED') { ?>\n\t\t<form action=\"\" method=\"post\">\n\t\t\t<input type=\"hidden\" name=\"username\" value=\"<?php echo $ticketData['username']; ?>\"><br>\n\t\t\t<textarea class=\"forumReply\" name=\"reply_text\" style=\"width: 610px; height: 150px\"></textarea><br>\n\t\t\t<input name=\"\" type=\"submit\" value=\"Post Reply\" class=\"btn btn-primary\">\n\t\t</form>\n\t<?php } ?>\n\t<?php\n} else {\n\n\t$account = mysql_select_single(\"SELECT name,email FROM accounts WHERE id = $session_user_id\");\n\tif (!empty($_POST)) {\n\t\t$required_fields = array('username', 'email', 'subject', 'message');\n\t\tforeach($_POST as $key=>$value) {\n\t\t\tif (empty($value) && in_array($key, $required_fields) === true) {\n\t\t\t\t$errors[] = 'You need to fill in all fields.';\n\t\t\t\tbreak 1;\n\t\t\t}\n\t\t}\n\n\n\t\tif (empty($errors) === true) {\n\n\t\t\tif (!Token::isValid($_POST['token'])) {\n\t\t\t\t$errors[] = 'Token is invalid.';\n\t\t\t}\n\t\t\tif ($config['use_captcha']) {\n\t\t\t\tif(!verifyGoogleReCaptcha($_POST['g-recaptcha-response'])) {\n\t\t\t\t\t$errors[] = \"Please confirm that you're not a robot.\";\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($config['validate_IP'] === true && validate_ip(getIP()) === false) {\n\t\t\t\t$errors[] = 'Failed to recognize your IP address. (Not a valid IPv4 address).';\n\t\t\t}\n\t\t}\n\t}\n\t?>\n\t<h1>Latest Tickets</h1>\n\t<?php\n\t$tickets = mysql_select_multi(\"SELECT id,subject,creation,status FROM znote_tickets WHERE owner=$session_user_id ORDER BY creation DESC\");\n\tif ($tickets !== false) {\n\t\t?>\n\t\t<table>\n\t\t\t<tr class=\"yellow\">\n\t\t\t\t<td>ID:</td>\n\t\t\t\t<td>Subject:</td>\n\t\t\t\t<td>Creation:</td>\n\t\t\t\t<td>Status:</td>\n\t\t\t</tr>\n\t\t\t\t<?php\n\t\t\t\tforeach ($tickets as $ticket) {\n\t\t\t\t\techo '<tr class=\"special\">';\n\t\t\t\t\t\techo '<td>'. $ticket['id'] .'</td>';\n\t\t\t\t\t\techo '<td><a href=\"helpdesk.php?view='. $ticket['id'] .'\">'. $ticket['subject'] .'</a></td>';\n\t\t\t\t\t\techo '<td>'. getClock($ticket['creation'], true) .'</td>';\n\t\t\t\t\t\techo '<td>'. $ticket['status'] .'</td>';\n\t\t\t\t\techo '</tr>';\n\t\t\t\t}\n\t\t\t\t?>\n\t\t</table>\n\t\t<?php\n\t}\n\t?>\n\n\t<h1>Helpdesk</h1>\n\t<?php\n\tif (isset($_GET['success']) && empty($_GET['success'])) {\n\t\techo 'Congratulations! Your ticket has been created. We will reply up to 24 hours.';\n\t} else {\n\n\t\tif (empty($_POST) === false && empty($errors) === true) {\n\t\t\tif ($config['log_ip']) {\n\t\t\t\tznote_visitor_insert_detailed_data(1);\n\t\t\t}\n\n\n\t\t\t$query = array(\n\t\t\t\t'owner'   =>\t$session_user_id,\n\t\t\t\t'username'=>\tgetValue($_POST['username']),\n\t\t\t\t'subject' =>\tgetValue($_POST['subject']),\n\t\t\t\t'message' =>\tgetValue($_POST['message']),\n\t\t\t\t'ip'\t  =>\tgetIPLong(),\n\t\t\t\t'creation' =>\ttime(),\n\t\t\t\t'status'  =>\t'Open'\n\t\t\t);\n\n\t\t\t$fields = '`'. implode('`, `', array_keys($query)) .'`';\n\t\t\t$data = '\\''. implode('\\', \\'', $query) .'\\'';\n\t\t\tmysql_insert(\"INSERT INTO `znote_tickets` ($fields) VALUES ($data)\");\n\n\t\t\theader('Location: helpdesk.php?success');\n\t\t\texit();\n\n\t\t} else if (empty($errors) === false) {\n\t\t\techo '<font color=\"red\"><b>';\n\t\t\techo output_errors($errors);\n\t\t\techo '</b></font>';\n\t\t}\n\t\t?>\n\t\t<form action=\"\" method=\"post\">\n\t\t\t<ul>\n\t\t\t\t<li>\n\t\t\t\t\tAccount Name:<br>\n\t\t\t\t\t<input type=\"text\" name=\"username\" size=\"40\" value=\"<?php echo $account['name']; ?>\" disabled>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\tEmail:<br>\n\t\t\t\t\t<input type=\"text\" name=\"email\" size=\"40\" value=\"<?php echo $account['email']; ?>\" disabled>\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\tSubject:<br>\n\t\t\t\t\t<input type=\"text\" name=\"subject\" size=\"40\">\n\t\t\t\t</li>\n\t\t\t\t<li>\n\t\t\t\t\tMessage:<br>\n\t\t\t\t\t<textarea name=\"message\" rows=\"7\" cols=\"30\"></textarea>\n\t\t\t\t</li>\n\t\t\t\t<?php\n\t\t\t\tif ($config['use_captcha']) {\n\t\t\t\t\t?>\n\t\t\t\t\t<li>\n\t\t\t\t\t\t <div class=\"g-recaptcha\" data-sitekey=\"<?php echo $config['captcha_site_key']; ?>\"></div>\n\t\t\t\t\t</li>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\t\t\t\t?>\n\t\t\t\t<?php\n\n\t\t\t\t\tToken::create();\n\t\t\t\t?>\n\t\t\t\t<li>\n\t\t\t\t\t<input type=\"hidden\" name=\"username\" value=\"<?php echo $account['name']; ?>\">\n\t\t\t\t\t<input type=\"submit\" value=\"Submit ticket\">\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t</form>\n\t\t<?php\n\t}\n}\ninclude 'layout/overall/footer.php';\n?>\n\n'ZnoteAAC/engine/init.php'\n:<?php if (version_compare(phpversion(), '5.6', '<')) die('PHP version 5.6 or higher is required.');\n\n$l_time = microtime(true);\n$l_start = $l_time;\n\nfunction elapsedTime($l_start = false, $l_time = false) {\n\tif ($l_start === false) global $l_start;\n\tif ($l_time === false) global $l_time;\n\n\t$l_time = explode(' ', microtime());\n\t$l_finish = $l_time[1] + $l_time[0];\n\treturn round(($l_finish - $l_start), 4);\n}\n\n$time = time();\n$version = '1.6';\n\n$aacQueries = 0;\n$accQueriesData = array();\n\nsession_start();\nob_start();\nrequire_once 'config.php';\n$sessionPrefix = $config['session_prefix'];\nif ($config['paypal']['enabled'] || $config['use_captcha']) {\n\t$curlcheck = extension_loaded('curl');\n\tif (!$curlcheck) die(\"php cURL is not enabled. It is required to for paypal or captcha services.<br>1. Find your php.ini file.<br>2. Uncomment extension=php_curl<br>Restart web server.<br><br><b>If you don't want this then disable paypal & use_captcha in config.php.</b>\");\n}\nif ($config['use_captcha'] && !extension_loaded('openssl')) {\n\tdie(\"php openSSL is not enabled. It is required to for captcha services.<br>1. Find your php.ini file.<br>2. Uncomment extension=php_openssl<br>Restart web server.<br><br><b>If you don't want this then disable use_captcha in config.php.</b>\");\n}\n\n\n\nif (!isset($config['TFSVersion'])) $config['TFSVersion'] = &$config['ServerEngine'];\nif (!isset($config['ServerEngine'])) $config['ServerEngine'] = &$config['TFSVersion'];\n\nrequire_once 'database/connect.php';\nrequire_once 'function/general.php';\nrequire_once 'function/users.php';\nrequire_once 'function/cache.php';\nrequire_once 'function/mail.php';\nrequire_once 'function/token.php';\nrequire_once 'function/itemparser/itemlistparser.php';\n\nif (isset($_SESSION['token'])) {\n\t$_SESSION['old_token'] = $_SESSION['token'];\n}\nToken::generate();\n\n$tfs_10_hasPremDays = true;\n\nif (user_logged_in() === true) {\n\t$session_user_id = getSession('user_id');\n\tif ($config['ServerEngine'] !== 'OTHIRE') {\n\t\tif ($config['ServerEngine'] == 'TFS_10') {\n\t\t\t$hasPremDays = mysql_select_single(\"SHOW COLUMNS from `accounts` WHERE `Field` = 'premdays'\");\n\t\t\tif ($hasPremDays === false) {\n\t\t\t\t$tfs_10_hasPremDays = false;\n\t\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premium_ends_at');\n\t\t\t\t$user_data['premdays'] = ($user_data['premium_ends_at'] - time() > 0) ? floor(($user_data['premium_ends_at'] - time()) / 86400) : 0;\n\t\t\t} else {\n\t\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premdays');\n\t\t\t}\n\t\t} else {\n\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premdays');\n\t\t}\n\t} else\n\t\t$user_data = user_data($session_user_id, 'id', 'password', 'email', 'premend');\n\t$user_znote_data = user_znote_account_data($session_user_id, 'ip', 'created', 'points', 'cooldown', 'flag' ,'active_email');\n}\n$errors = array();\n\nif ($config['log_ip']) {\n\t$visitor_config = $config['ip_security'];\n\n\t$flush = $config['flush_ip_logs'];\n\tif ($flush != false) {\n\t\t$timef = $time - $flush;\n\t\tif (getCache() < $timef) {\n\t\t\t$timef = $time - $visitor_config['time_period'];\n\t\t\tmysql_delete(\"DELETE FROM znote_visitors_details WHERE time <= '$timef'\");\n\t\t\tsetCache($time);\n\t\t}\n\t}\n\n\t$visitor_data = znote_visitors_get_data();\n\n\tznote_visitor_set_data($visitor_data);\n\tznote_visitor_insert_detailed_data(0);\n\n\t$visitor_detailed = znote_visitors_get_detailed_data($visitor_config['time_period']);\n\n\n\t$v_activity = 0;\n\t$v_register = 0;\n\t$v_highscore = 0;\n\t$v_c_char = 0;\n\t$v_s_char = 0;\n\t$v_form = 0;\n\tforeach ((array)$visitor_detailed as $v_d) {\n\n\t\tif ($v_d['ip'] == getIPLong()) {\n\n\t\t\tswitch ($v_d['type']) {\n\t\t\t\tcase 0:\n\t\t\t\t\t$v_activity++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\t$v_register++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\t$v_c_char++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\t$v_highscore++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 4:\n\t\t\t\t\t$v_s_char++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 5:\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\t}\n\n\n\tif ($v_activity > $visitor_config['max_activity']) die(\"Chill down. Your web activity is too big. max_activity\");\n\tif ($v_register > $visitor_config['max_account']) die(\"Chill down. You can't create multiple accounts that fast. max_account\");\n\tif ($v_c_char > $visitor_config['max_character']) die(\"Chill down. Your web activity is too big. max_character\");\n\tif ($v_form > $visitor_config['max_post']) die(\"Chill down. Your web activity is too big. max_post\");\n\n\n\n}\n\n\n$filename = explode('/', $_SERVER['SCRIPT_NAME']);\n$filename = $filename[count($filename) - 1];\n$page_filename = str_replace('.php', '', $filename);\nif ($config['allowSubPages']) {\n\trequire_once 'layout/sub.php';\n\tif (isset($subpages) && !empty($subpages)) {\n\t\tforeach ($subpages as $page) {\n\t\t\tif ($page['override'] && $page['file'] === $filename) {\n\t\t\t\trequire_once 'layout/overall/header.php';\n\t\t\t\trequire_once 'layout/sub/'.$page['file'];\n\t\t\t\trequire_once 'layout/overall/footer.php';\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t?>\n\t\t<div style=\"background-color: white; padding: 20px; width: 100%; float:left;\">\n\t\t\t<h2 style=\"color: black;\">Old layout!</h2>\n\t\t\t<p style=\"color: black;\">The layout is running an outdated sub system which is not compatible with this version of Znote AAC.</p>\n\t\t\t<p style=\"color: black;\">The file /layout/sub.php is outdated.\n\t\t\t<br>Please update it to look like <a style=\"color: orange;\" target=\"_BLANK\" href=\"https:\n\t\t\t</p>\n\t\t</div>\n\t\t<?php\n\t}\n}\n?>\n\n'ZnoteAAC/engine/function/itemparser/itemlistparser.php'\n:<?php\n\n\nfunction getItemList() {\n\treturn parseItems();\n}\n\nfunction getItemById($id) {\n\t$items = parseItems();\n\tif(isset($items[$id])) {\n\t\treturn $items[$id];\n\t}\n\treturn false;\n}\n\nfunction parseItems() {\n\t$file = Config('server_path') . '/data/items/items.xml';\n\tif (file_exists($file)) {\n\t\t$itemList = array();\n\t\t$items = simplexml_load_file($file);\n\n\t\tforeach ($items->children() as $item) {\n\t\t\tif ($item['id'] && $item['name'] != NULL) {\n\t\t\t\t$itemList[(int)$item['id']] = (string)$item['name'];\n\t\t\t}\n\t\t}\n\t\treturn $itemList;\n\t}\n\treturn $file;\n}\n?>\n",
        "gt": [
            "'ZnoteAAC/engine/function/itemparser/itemlistparser.php'",
            "'ZnoteAAC/engine/init.php'",
            "'ZnoteAAC/helpdesk.php'"
        ]
    },
    {
        "files": [
            "'laravel-pug/tests/ServiceProviderTest.php'",
            "'laravel-pug/tests/helpers.php'",
            "'laravel-pug/tests/LaravelApplicationInterface.php'"
        ],
        "content": "'laravel-pug/tests/ServiceProviderTest.php'\n:<?php\n\nnamespace Phug\\Test;\n\nuse Bkwld\\LaravelPug\\Exception;\nuse Bkwld\\LaravelPug\\PugBladeCompiler;\nuse Bkwld\\LaravelPug\\PugCompiler;\nuse Bkwld\\LaravelPug\\ServiceProvider;\nuse Illuminate\\Filesystem\\Filesystem;\nuse Illuminate\\Support\\Facades\\Facade;\nuse Illuminate\\View\\Engines\\CompilerEngine;\nuse PHPUnit\\Framework\\TestCase;\nuse Pug\\Assets;\nuse Pug\\Pug;\n\ninclude_once __DIR__.'/helpers.php';\ninclude_once __DIR__.'/LaravelTestApp.php';\ninclude_once __DIR__.'/Laravel5ServiceProvider.php';\ninclude_once __DIR__.'/Resolver.php';\ninclude_once __DIR__.'/View.php';\n\n\nclass ServiceProviderTest extends TestCase\n{\n\n    protected $app;\n\n\n    protected $provider;\n\n    protected function setUp(): void\n    {\n        $this->app = new LaravelTestApp();\n        $this->app->singleton('files', function () {\n            return new Filesystem();\n        });\n        Facade::setFacadeApplication($this->app);\n        $this->provider = new Laravel5ServiceProvider($this->app);\n    }\n\n\n    public function testRegister()\n    {\n        self::assertNull($this->app->getSingleton('laravel-pug.pug'));\n        self::assertNull($this->app->getSingleton(PugCompiler::class));\n        self::assertNull($this->app->getSingleton(PugBladeCompiler::class));\n\n        $this->provider->register();\n\n        $pug = $this->app->getSingleton('laravel-pug.pug');\n        $defaultCache = $pug->getOption('defaultCache');\n        if (!is_string($defaultCache)) {\n            $defaultCache = $defaultCache->get('source');\n        }\n        if ($defaultCache === 'path.storage') {\n            $defaultCache = '/views';\n        }\n\n        self::assertInstanceOf(Pug::class, $pug);\n        self::assertInstanceOf(\n            PugCompiler::class,\n            $this->app->getSingleton(PugCompiler::class)\n        );\n        self::assertInstanceOf(\n            PugBladeCompiler::class,\n            $this->app->getSingleton(PugBladeCompiler::class)\n        );\n        self::assertStringEndsWith('/views', $defaultCache);\n    }\n\n\n    public function testRegisterLaravel5()\n    {\n        $app = new LaravelTestApp();\n        $app->singleton('files', function () {\n            return new Filesystem();\n        });\n        $provider = new Laravel5ServiceProvider($app);\n\n        self::assertNull($app->getSingleton('laravel-pug.pug'));\n        self::assertNull($app->getSingleton(PugCompiler::class));\n        self::assertNull($app->getSingleton(PugBladeCompiler::class));\n\n        $provider->register();\n\n        $pug = $app->getSingleton('laravel-pug.pug');\n        $defaultCache = $pug->getOption('defaultCache');\n        if (!is_string($defaultCache)) {\n            $defaultCache = $defaultCache->get('source');\n        }\n        if ($defaultCache === 'path.storage') {\n            $defaultCache = '/framework/views';\n        }\n        $configs = $provider->getMergedConfig();\n\n        self::assertInstanceOf(Pug::class, $pug);\n        self::assertInstanceOf(\n            PugCompiler::class,\n            $app->getSingleton(PugCompiler::class)\n        );\n        self::assertInstanceOf(\n            PugBladeCompiler::class,\n            $app->getSingleton(PugBladeCompiler::class)\n        );\n        self::assertStringEndsWith('/framework/views', $defaultCache);\n        self::assertCount(2, $configs);\n        self::assertStringEndsWith('config.php', $configs[0]);\n        self::assertSame('laravel-pug', $configs[1]);\n    }\n\n\n    public function testGetConfig()\n    {\n        $app = new LaravelTestApp();\n        $app->singleton('files', function () {\n            return new Filesystem();\n        });\n        $provider = new ServiceProvider($app);\n\n        self::assertSame('laravel-pug', $provider->getConfig()['input']);\n    }\n\n\n    public function testProvides()\n    {\n        self::assertSame([\n            PugCompiler::class,\n            PugBladeCompiler::class,\n            'laravel-pug.pug',\n        ], $this->provider->provides());\n    }\n\n\n    public function testBoot()\n    {\n        $view = new View();\n        $resolver = new Resolver();\n        $this->app['view.engine.resolver'] = $resolver;\n        $this->app['view'] = $view;\n        $this->provider->register();\n        $this->provider->boot();\n\n        self::assertSame(\n            ['pug', 'pug.blade', 'blade.pug'],\n            array_keys($view->getExtensions())\n        );\n        self::assertInstanceOf(CompilerEngine::class, $resolver->get('pug'));\n        self::assertInstanceOf(CompilerEngine::class, $resolver->get('pug.blade'));\n\n        $app = new LaravelTestApp();\n        $app->singleton('files', function () {\n            return new Filesystem();\n        });\n        $provider = new Laravel5ServiceProvider($app);\n        $resolver = new Resolver();\n        $app['view.engine.resolver'] = $resolver;\n        $view = new View();\n        $pug = $view;\n        $app['view'] = $pug;\n        $provider->register();\n        $provider->boot();\n\n        self::assertSame(\n            ['pug', 'pug.blade', 'blade.pug'],\n            array_keys($view->getExtensions())\n        );\n        self::assertCount(1, $provider->getPub());\n        self::assertStringEndsWith('config.php', array_keys($provider->getPub())[0]);\n        self::assertSame('laravel-pug.php', array_values($provider->getPub())[0]);\n        self::assertInstanceOf(CompilerEngine::class, $resolver->get('pug'));\n        self::assertInstanceOf(CompilerEngine::class, $resolver->get('pug.blade'));\n    }\n\n\n    public function testView()\n    {\n        $this->app->setUseSysTempDir(true);\n        $view = new View();\n        $resolver = new Resolver();\n        $this->app['view.engine.resolver'] = $resolver;\n        $this->app['view'] = $view;\n        $this->provider->register();\n        $this->provider->boot();\n        $path = __DIR__.'/assets.pug';\n\n\n        $pug = $resolver->get('pug');\n\n        self::assertSame(\n            '<head><script src=\"js/app.min.js\"></script></head>',\n            preg_replace(\n                '/\\s{2,}/',\n                '',\n                $this->app['view.engine.resolver']->get('pug')->get($path)\n            )\n        );\n\n        $contents = file_get_contents(sys_get_temp_dir().'/js/app.min.js');\n\n        self::assertSame('a();b();', trim($contents));\n\n        unlink(sys_get_temp_dir().'/js/app.min.js');\n        unlink($pug->getCompiler()->getCompiledPath($path));\n\n\n        $pugEngine = $this->app['laravel-pug.pug'];\n        $method = method_exists($pugEngine, 'renderFile') ? [$pugEngine, 'renderFile'] : [$pugEngine, 'render'];\n\n\n        $assets = $this->app['laravel-pug.pug-assets'];\n        $assets->setEnvironment('dev');\n\n        self::assertSame(\n            '<head><minify>app<script src=\"foo.js\"></script><script src=\"bar.js\"></script></minify></head>',\n            preg_replace('/\\s{2,}/', '', call_user_func($method, $path))\n        );\n\n        @unlink($pug->getCompiler()->getCompiledPath($path));\n\n        $assets->setEnvironment('production');\n\n        self::assertSame(\n            '<head><script src=\"js/app.min.js\"></script></head>',\n            preg_replace(\n                '/\\s{2,}/',\n                '',\n                $this->app['view.engine.resolver']->get('pug')->get($path)\n            )\n        );\n\n        self::assertSame('a();b();', trim($contents));\n\n        unlink(sys_get_temp_dir().'/js/app.min.js');\n        unlink($pug->getCompiler()->getCompiledPath($path));\n\n        $assets->unsetMinify();\n\n        self::assertSame(\n            '<head><minify>app<script src=\"foo.js\"></script><script src=\"bar.js\"></script></minify></head>',\n            preg_replace('/\\s{2,}/', '', call_user_func($method, $path))\n        );\n\n        @unlink($pug->getCompiler()->getCompiledPath($path));\n\n        if (!method_exists($pugEngine, 'renderFile')) {\n            return;\n        }\n\n        $path = __DIR__.'/example2.pug.blade';\n\n        self::assertSame(\n            '<h1>{{ \\'Start\\' }}</h1><h1>Pug is there</h1><p>{{ $sentence }}</p>@if (1 === 1)<div>Go</div>@endif',\n            preg_replace('/\\s{2,}/', '', call_user_func($method, $path))\n        );\n\n        @unlink($pug->getCompiler()->getCompiledPath($path));\n\n        $path = __DIR__.'/composite-extension/welcome.pug.blade';\n\n        self::assertSame(\n            '<h2>test from layout block content</h2><h2>test from welcome</h2>',\n            preg_replace('/\\s{2,}/', '', call_user_func($method, $path))\n        );\n\n        @unlink($pug->getCompiler()->getCompiledPath($path));\n    }\n\n    public function testWithEmptyConfig()\n    {\n        $app = new LaravelTestApp();\n        $provider = new ServiceProvider($app);\n\n        self::assertSame(['resource/views'], $provider->getPugEngine()->getOption('paths'));\n    }\n}\n\n'laravel-pug/tests/helpers.php'\n:<?php\n\nuse Phug\\Test\\Config;\n\nif (!interface_exists('Illuminate\\Contracts\\Foundation\\Application')) {\n    include_once __DIR__.'/LaravelLegacyApplicationInterface.php';\n    include_once __DIR__.'/LaravelApplicationInterface.php';\n}\n\nif (!class_exists(Config::class)) {\n    include_once __DIR__.'/config-helper.php';\n}\n\nif (!class_exists('Facade\\Ignition\\Exceptions\\ViewException')) {\n    include_once __DIR__.'/ViewException.php';\n}\n\nif (!function_exists('config_path')) {\n    function config_path($input)\n    {\n        return $input;\n    }\n}\n\nif (!function_exists('storage_path')) {\n    function storage_path($input)\n    {\n        return $input;\n    }\n}\n\nif (!function_exists('resource_path')) {\n    function resource_path($input)\n    {\n        return \"resource/$input\";\n    }\n}\n\n'laravel-pug/tests/LaravelApplicationInterface.php'\n:<?php\n\nnamespace Illuminate\\Contracts\\Foundation;\n\ninterface Application extends \\Illuminate\\Foundation\\Application\n{\n}\n",
        "gt": [
            "'laravel-pug/tests/LaravelApplicationInterface.php'",
            "'laravel-pug/tests/helpers.php'",
            "'laravel-pug/tests/ServiceProviderTest.php'"
        ]
    },
    {
        "files": [
            "'grav-plugin-git-sync/git-sync.php'",
            "'grav-plugin-git-sync/vendor/composer/autoload_namespaces.php'",
            "'grav-plugin-git-sync/vendor/autoload.php'",
            "'grav-plugin-git-sync/vendor/composer/autoload_real.php'"
        ],
        "content": "'grav-plugin-git-sync/git-sync.php'\n:<?php\n\nnamespace Grav\\Plugin;\n\nuse Composer\\Autoload\\ClassLoader;\nuse Grav\\Common\\Config\\Config;\nuse Grav\\Common\\Data\\Data;\nuse Grav\\Common\\Grav;\nuse Grav\\Common\\Page\\Interfaces\\PageInterface;\nuse Grav\\Common\\Plugin;\nuse Grav\\Common\\Scheduler\\Scheduler;\nuse Grav\\Plugin\\GitSync\\AdminController;\nuse Grav\\Plugin\\GitSync\\GitSync;\nuse Grav\\Plugin\\GitSync\\Helper;\nuse RocketTheme\\Toolbox\\Event\\Event;\n\n\nclass GitSyncPlugin extends Plugin\n{\n\n    protected $controller;\n\n    protected $git;\n\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            'onPluginsInitialized'   => [\n                ['autoload', 100000],\n                ['onPluginsInitialized', 1000]\n            ],\n            'onPageInitialized'      => ['onPageInitialized', 0],\n            'onFormProcessed'        => ['onFormProcessed', 0],\n            'onSchedulerInitialized' => ['onSchedulerInitialized', 0]\n        ];\n    }\n\n\n    public function autoload() : ClassLoader\n    {\n        return require __DIR__ . '/vendor/autoload.php';\n    }\n\n\n    public static function generateWebhookSecret()\n    {\n        return static::generateHash(24);\n    }\n\n\n    public static function generateRandomWebhook()\n    {\n        return '/_git-sync-' . static::generateHash(6);\n    }\n\n\n    public function onPluginsInitialized()\n    {\n        $this->enable(['gitsync' => ['synchronize', 0]]);\n        $this->init();\n\n        if ($this->isAdmin()) {\n            $this->enable([\n                'onTwigTemplatePaths'  => ['onTwigTemplatePaths', 0],\n                'onTwigSiteVariables'  => ['onTwigSiteVariables', 0],\n                'onAdminMenu'          => ['onAdminMenu', 0],\n                'onAdminSave'          => ['onAdminSave', 0],\n                'onAdminAfterSave'     => ['onAdminAfterSave', 0],\n                'onAdminAfterSaveAs'   => ['onAdminAfterSaveAs', 0],\n                'onAdminAfterDelete'   => ['onAdminAfterDelete', 0],\n                'onAdminAfterAddMedia' => ['onAdminAfterMedia', 0],\n                'onAdminAfterDelMedia' => ['onAdminAfterMedia', 0],\n            ]);\n\n            return;\n        }\n\n        $config = $this->config->get('plugins.' . $this->name);\n        $route = $this->grav['uri']->route();\n        $webhook = $config['webhook'] ?? false;\n        $secret = $config['webhook_secret'] ?? false;\n        $enabled = $config['webhook_enabled'] ?? false;\n\n        if ($enabled && $route === $webhook && $_SERVER['REQUEST_METHOD'] === 'POST') {\n            if ($secret) {\n                if (!$this->isRequestAuthorized($secret)) {\n                    http_response_code(401);\n                    header('Content-Type: application/json');\n                    echo json_encode([\n                        'status' => 'error',\n                        'message' => 'Unauthorized request'\n                    ]);\n                    exit;\n                }\n            }\n            try {\n                $this->synchronize();\n                header('Content-Type: application/json');\n                echo json_encode([\n                    'status' => 'success',\n                    'message' => 'GitSync completed the synchronization'\n                ]);\n            } catch (\\Exception $e) {\n                http_response_code(500);\n                header('Content-Type: application/json');\n                echo json_encode([\n                    'status' => 'error',\n                    'message' => 'GitSync failed to synchronize'\n                ]);\n            }\n            exit;\n        }\n    }\n\n\n    public function isRequestAuthorized($secret)\n    {\n        if (isset($_SERVER['HTTP_X_HUB_SIGNATURE'])) {\n            $payload = file_get_contents('php:\n\n            return $this->isGithubSignatureValid($secret, $_SERVER['HTTP_X_HUB_SIGNATURE'], $payload);\n        }\n        if (isset($_SERVER['HTTP_X_GITLAB_TOKEN'])) {\n            return $this->isGitlabTokenValid($secret, $_SERVER['HTTP_X_GITLAB_TOKEN']);\n        } else {\n            $payload = file_get_contents('php:\n            return $this->isGiteaSecretValid($secret, $payload);\n        }\n\n        return false;\n    }\n\n\n    public function isGithubSignatureValid($secret, $signatureHeader, $payload)\n    {\n        [$algorithm, $signature] = explode('=', $signatureHeader);\n\n        return $signature === hash_hmac($algorithm, $payload, $secret);\n    }\n\n\n    public function isGitlabTokenValid($secret, $token)\n    {\n        return $secret === $token;\n    }\n\n\n    public function isGiteaSecretValid($secret, $payload)\n    {\n        $payload = json_decode($payload, true);\n        if (!empty($payload) && isset($payload['secret'])) {\n            return $secret === $payload['secret'];\n        }\n\n        return false;\n    }\n\n    public function onAdminMenu()\n    {\n        $base = rtrim($this->grav['base_url'], '/') . '/' . trim($this->grav['admin']->base, '/');\n        $options = [\n            'hint' => Helper::isGitInitialized() ? 'Synchronize GitSync' : 'Configure GitSync',\n            'class' => 'gitsync-sync',\n            'location' => 'pages',\n            'route' => Helper::isGitInitialized() ? 'admin' : 'admin/plugins/git-sync',\n            'icon' => 'fa-' . $this->grav['plugins']->get('git-sync')->blueprints()->get('icon')\n        ];\n\n        if (Helper::isGitInstalled()) {\n            if (Helper::isGitInitialized()) {\n                $options['data'] = [\n                    'gitsync-useraction' => 'sync',\n                    'gitsync-uri' => $base . '/plugins/git-sync'\n                ];\n            }\n\n            $this->grav['twig']->plugins_quick_tray['GitSync'] = $options;\n        }\n    }\n\n    public function init()\n    {\n        if ($this->isAdmin()) {\n\n            $this->controller = new AdminController($this);\n            $this->git = &$this->controller->git;\n        } else {\n            $this->git = new GitSync();\n        }\n    }\n\n\n    public function synchronize()\n    {\n        if (!Helper::isGitInstalled() || !Helper::isGitInitialized()) {\n            return true;\n        }\n\n        $this->grav->fireEvent('onGitSyncBeforeSynchronize');\n\n        if ($this->git->hasChangesToCommit()) {\n            $this->git->commit();\n        }\n\n\n        $this->git->sync();\n\n        $this->grav->fireEvent('onGitSyncAfterSynchronize');\n\n        return true;\n    }\n\n    public function onSchedulerInitialized(Event $event)\n    {\n\n        $config = Grav::instance()['config'];\n        $run_at = $config->get('plugins.git-sync.sync.cron_at', '0 12,23 * * *');\n\n        if ($config->get('plugins.git-sync.sync.cron_enable', false)) {\n\n            $scheduler = $event['scheduler'];\n            $job = $scheduler->addFunction('Grav\\Plugin\\GitSync\\Helper::synchronize', [], 'GitSync');\n            $job->at($run_at);\n        }\n    }\n\n\n    public function reset()\n    {\n        if (!Helper::isGitInstalled() || !Helper::isGitInitialized()) {\n            return true;\n        }\n\n        $this->grav->fireEvent('onGitSyncBeforeReset');\n\n        $this->git->reset();\n\n        $this->grav->fireEvent('onGitSyncAfterReset');\n\n        return true;\n    }\n\n\n    public function onTwigTemplatePaths()\n    {\n        $this->grav['twig']->twig_paths[] = __DIR__ . '/templates';\n    }\n\n\n    public function onTwigSiteVariables()\n    {\n\n        if (!class_exists(Helper::class)) {\n            return false;\n        }\n\n        $user = $this->grav['user'];\n        if (!$user->authenticated) {\n            return false;\n        }\n\n        $settings = [\n            'first_time'    => !Helper::isGitInitialized(),\n            'git_installed' => Helper::isGitInstalled()\n        ];\n\n        $this->grav['twig']->twig_vars['git_sync'] = $settings;\n\n        $adminPath = trim($this->grav['admin']->base, '/');\n        if ($this->grav['uri']->path() === \"/$adminPath/plugins/git-sync\") {\n            $this->grav['assets']->addCss('plugin:\n        } else {\n            $this->grav['assets']->addInlineJs('var GitSync = ' . json_encode($settings) . ';');\n        }\n\n        $this->grav['assets']->addJs('plugin:\n        $this->grav['assets']->addJs('plugin:\n        $this->grav['assets']->addCss('plugin:\n\n        return true;\n    }\n\n    public function onPageInitialized()\n    {\n        if ($this->controller && $this->controller->isActive()) {\n            $this->controller->execute();\n            $this->controller->redirect();\n        }\n    }\n\n\n    public function onAdminSave(Event $event)\n    {\n        $obj           = $event['object'];\n        $adminPath \t   = trim($this->grav['admin']->base, '/');\n        $isPluginRoute = $this->grav['uri']->path() === \"/$adminPath/plugins/\" . $this->name;\n\n        if ($obj instanceof Data) {\n            if (!$isPluginRoute || !Helper::isGitInstalled()) {\n                return true;\n            }\n\n\n            $password = $obj->get('password', false);\n            if (!$password) {\n                $current_password = $this->git->getPassword();\n\n                if ($current_password && strpos($current_password, 'gitsync-') !== 0) {\n                    $current_password = Helper::encrypt($current_password);\n                }\n            } else {\n\n                $current_password = Helper::encrypt($password);\n            }\n\n            $obj->set('password', $current_password);\n        }\n\n        return $obj;\n    }\n\n\n    public function onAdminAfterSave(Event $event)\n    {\n        $obj           = $event['object'];\n        $adminPath\t   = trim($this->grav['admin']->base, '/');\n        $uriPath       = $this->grav['uri']->path();\n        $isPluginRoute = $uriPath === \"/$adminPath/plugins/\" . $this->name;\n\n        if ($obj instanceof PageInterface && !$this->grav['config']->get('plugins.git-sync.sync.on_save', true)) {\n            return;\n        }\n\n        if ($obj instanceof Data) {\n            $folders = $this->git->getConfig('folders', $event['object']->get('folders', []));\n            $data_type = preg_replace('\n            $data_type = explode('/', $data_type);\n            $data_type = array_shift($data_type);\n\n            if (null === $data_type || !Helper::isGitInstalled() || (!$isPluginRoute && !in_array($this->getFolderMapping($data_type), $folders, true))) {\n                return;\n            }\n\n            if ($isPluginRoute) {\n                $this->git->setConfig($obj->toArray());\n\n\n                $this->git->initializeRepository();\n\n\n                $this->git->setUser();\n                $this->git->addRemote();\n            }\n        }\n\n        $this->synchronize();\n    }\n\n    public function onAdminAfterSaveAs()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_save', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n    public function onAdminAfterDelete()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_delete', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n    public function onAdminAfterMedia()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_media', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n\n    public function onFormProcessed(Event $event)\n    {\n        $action = $event['action'];\n\n        if ($action === 'gitsync') {\n            $this->synchronize();\n        }\n    }\n\n\n    public function getFolderMapping($data_type)\n    {\n        switch ($data_type) {\n            case 'user':\n                return 'accounts';\n            case 'themes':\n                return 'config';\n            case 'config':\n            case 'data':\n            case 'plugins':\n            case 'pages':\n                return $data_type;\n        }\n\n        return null;\n    }\n\n\n    protected static function generateHash(int $len): string\n    {\n        $bytes = openssl_random_pseudo_bytes($len, $isStrong);\n\n        if ($bytes === false) {\n            throw new \\RuntimeException('Could not generate hash');\n        }\n\n        if ($isStrong === false) {\n\n            $isStrong = true;\n        }\n\n        return bin2hex($bytes);\n    }\n}\n\n'grav-plugin-git-sync/vendor/composer/autoload_namespaces.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n);\n\n'grav-plugin-git-sync/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer/autoload_real.php';\n\nreturn ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854::getLoader();\n\n'grav-plugin-git-sync/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        require __DIR__ . '/platform_check.php';\n\n        spl_autoload_register(array('ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader(\\dirname(\\dirname(__FILE__)));\n        spl_autoload_unregister(array('ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854', 'loadClassLoader'));\n\n        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());\n        if ($useStaticLoader) {\n            require __DIR__ . '/autoload_static.php';\n\n            call_user_func(\\Composer\\Autoload\\ComposerStaticInitc058e1b5c686df0909ec1cc39bb5d854::getInitializer($loader));\n        } else {\n            $map = require __DIR__ . '/autoload_namespaces.php';\n            foreach ($map as $namespace => $path) {\n                $loader->set($namespace, $path);\n            }\n\n            $map = require __DIR__ . '/autoload_psr4.php';\n            foreach ($map as $namespace => $path) {\n                $loader->setPsr4($namespace, $path);\n            }\n\n            $classMap = require __DIR__ . '/autoload_classmap.php';\n            if ($classMap) {\n                $loader->addClassMap($classMap);\n            }\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n",
        "gt": [
            "'grav-plugin-git-sync/vendor/composer/autoload_namespaces.php'",
            "'grav-plugin-git-sync/vendor/composer/autoload_real.php'",
            "'grav-plugin-git-sync/vendor/autoload.php'",
            "'grav-plugin-git-sync/git-sync.php'"
        ]
    },
    {
        "files": [
            "'twich/www/redis/Rediska/Zend/Session/SaveHandler/Redis.php'",
            "'twich/www/redis/Rediska/Exception.php'",
            "'twich/www/redis/Rediska/Zend/Session/Set.php'",
            "'twich/www/redis/Rediska/Key/Exception.php'",
            "'twich/www/redis/Rediska/Key/Set.php'",
            "'twich/www/redis/Rediska/Key/Abstract.php'"
        ],
        "content": "'twich/www/redis/Rediska/Zend/Session/SaveHandler/Redis.php'\n:<?php\n\n\nrequire_once 'Rediska.php';\n\n\nrequire_once 'Rediska/Zend/Session/Set.php';\n\n\nrequire_once 'Zend/Session.php';\n\n\nrequire_once 'Zend/Config.php';\n\n\nrequire_once 'Zend/Session/SaveHandler/Interface.php';\n\n\nrequire_once 'Zend/Session/SaveHandler/Exception.php';\n\n\nclass Rediska_Zend_Session_SaveHandler_Redis implements Zend_Session_SaveHandler_Interface\n{\n\n    protected $_rediska;\n\n\n    protected $_set;\n\n\n    protected $_options = array(\n        'keyprefix'      => 'PHPSESSIONS_',\n        'lifetime'       => null,\n    );\n\n\n    public function __construct($options = array())\n    {\n    \tif ($options instanceof Zend_Config) {\n    \t\t$options = $options->toArray();\n    \t}\n\n\n    \t$this->_options['lifetime'] = (integer)ini_get('session.gc_maxlifetime');\n\n\n        $defaultInstance = Rediska::getDefaultInstance();\n        if ($defaultInstance && !isset($options['rediskaOptions'])) {\n            $this->_rediska = $defaultInstance;\n        } else {\n            $this->_rediska = new Rediska($options['rediskaOptions']);\n            unset($options['rediskaOptions']);\n        }\n\n    \t$this->setOptions($options);\n\n        Rediska_Zend_Session_Set::setSaveHandler($this);\n\n        $this->_set = new Rediska_Zend_Session_Set();\n    }\n\n\n    public function __destruct()\n    {\n        Zend_Session::writeClose();\n    }\n\n\n    public function open($save_path, $name)\n    {\n        return true;\n    }\n\n\n    public function close()\n    {\n        return true;\n    }\n\n\n    public function read($id)\n    {\n        return $this->_rediska->get($this->_getKeyName($id));\n    }\n\n\n    public function write($id, $data)\n    {\n    \t$this->_set[] = $id;\n\n        $reply = $this->_rediska->set($this->_getKeyName($id), $data);\n\n        if ($reply) {\n            $this->_rediska->expire($this->_getKeyName($id), $this->_options['lifetime']);\n        }\n\n        return $reply;\n    }\n\n\n    public function destroy($id)\n    {\n        $this->_set->remove($id);\n\n        $this->_rediska->delete($this->_getKeyName($id));\n\n        return true;\n    }\n\n\n    public function gc($maxlifetime)\n    {\n    \t$sessions = $this->_set->toArray();\n\n    \tif (!empty($sessions)) {\n        \tforeach($sessions as &$session) {\n        \t\t$session = $this->_getKeyName($session);\n        \t}\n\n\n        \t$lifeSession = $this->_rediska->get($sessions);\n        \tforeach($sessions as $session) {\n        \t\tif (!isset($lifeSession[$session])) {\n        \t\t\t$sessionWithoutPrefix = substr($session, strlen($this->_options['keyprefix']));\n        \t\t\t$this->_set->remove($sessionWithoutPrefix);\n        \t\t}\n        \t}\n    \t}\n\n    \treturn true;\n    }\n\n\n    public function setOptions(array $options)\n    {\n        foreach($options as $name => $value) {\n            if (method_exists($this, \"set$name\")) {\n                call_user_func(array($this, \"set$name\"), $value);\n            } else {\n                $this->setOption($name, $value);\n            }\n        }\n\n        return $this;\n    }\n\n\n    public function setOption($name, $value)\n    {\n    \t$lowerName = strtolower($name);\n\n        if (!array_key_exists($lowerName, $this->_options)) {\n            throw new Zend_Session_SaveHandler_Exception(\"Unknown option '$name'\");\n        }\n\n        $this->_options[$lowerName] = $value;\n\n        return $this;\n    }\n\n\n    public function getOption($name)\n    {\n    \t$lowerName = strtolower($name);\n\n        if (!array_key_exists($lowerName, $this->_options)) {\n            throw new Zend_Session_SaveHandler_Exception(\"Unknown option '$name'\");\n        }\n\n        return $this->_options[$lowerName];\n    }\n\n\n    public function setRediska(Rediska $rediska)\n    {\n        $this->_rediska = $rediska;\n\n        return $this;\n    }\n\n\n    public function getRediska()\n    {\n        return $this->_rediska;\n    }\n\n\n    protected function _getKeyName($id)\n    {\n        return $this->_options['keyprefix'] . $id;\n    }\n}\n'twich/www/redis/Rediska/Exception.php'\n:<?php\n\n\nclass Rediska_Exception extends Exception\n{\n\n}\n'twich/www/redis/Rediska/Zend/Session/Set.php'\n:<?php\n\n\nrequire_once 'Rediska/Key/Set.php';\n\n\nclass Rediska_Zend_Session_Set extends Rediska_Key_Set\n{\n\n\tprotected static $_saveHandler;\n\n\n\tpublic function __construct()\n\t{\n\t\tif (!self::$_saveHandler) {\n\t\t\tthrow new Rediska_Key_Exception('You must initialize Rediska_Zend_Session_SaveHandler_Redis before');\n\t\t}\n\n\t\t$this->setRediska(self::getSaveHandler()->getRediska());\n\n\t\tparent::__construct(self::getSaveHandler()->getOption('keyPrefix') . 'sessions');\n\t}\n\n\n\tpublic static function getSaveHandler()\n\t{\n\t\treturn self::$_saveHandler;\n\t}\n\n\n\tpublic static function setSaveHandler(Rediska_Zend_Session_SaveHandler_Redis $saveHandler)\n\t{\n\t\tself::$_saveHandler = $saveHandler;\n\n\t\treturn true;\n\t}\n}\n'twich/www/redis/Rediska/Key/Exception.php'\n:<?php\n\n\nrequire_once 'Rediska/Exception.php';\n\n\nclass Rediska_Key_Exception extends Rediska_Exception\n{\n\n}\n'twich/www/redis/Rediska/Key/Set.php'\n:<?php\n\n\nrequire_once 'Rediska/Key/Abstract.php';\n\n\nclass Rediska_Key_Set extends Rediska_Key_Abstract implements IteratorAggregate, ArrayAccess, Countable\n{\n\n    public function add($value)\n    {\n        $result = $this->_getRediskaOn()->addToSet($this->_name, $value);\n\n        if ($result && !is_null($this->_expire)) {\n            $this->expire($this->_expire, $this->_isExpireTimestamp);\n        }\n\n        return $result;\n    }\n\n\n    public function remove($value)\n    {\n        $result = $this->_getRediskaOn()->deleteFromSet($this->_name, $value);\n\n        if ($result && !is_null($this->_expire)) {\n        \t$this->expire($this->_expire, $this->_isExpireTimestamp);\n        }\n\n        return $result;\n    }\n\n\n    public function move($set, $value)\n    {\n    \tif ($set instanceof Rediska_Key_Set) {\n    \t\t$set = $set->getName();\n    \t}\n\n    \treturn $this->_getRediskaOn()->moveToSet($this->_name, $set, $value);\n    }\n\n\n    public function count()\n    {\n        return $this->_getRediskaOn()->getSetLength($this->_name);\n    }\n\n\n    public function exists($value)\n    {\n        return $this->_getRediskaOn()->existsInSet($this->_name, $value);\n    }\n\n\n    public function intersect($setOrSets, $storeKeyName = null)\n    {\n    \t$sets = $this->_prepareSetsForCompare($setOrSets);\n\n    \treturn $this->_getRediskaOn()->intersectSets($sets, $storeKeyName);\n    }\n\n\n    public function union($setOrSets, $storeKeyName = null)\n    {\n        $sets = $this->_prepareSetsForCompare($setOrSets);\n\n        return $this->_getRediskaOn()->unionSets($sets, $storeKeyName);\n    }\n\n\n    public function diff($setOrSets, $storeKeyName = null)\n    {\n        $sets = $this->_prepareSetsForCompare($setOrSets);\n\n        return $this->_getRediskaOn()->diffSets($sets, $storeKeyName);\n    }\n\n\n    public function sort($options = array())\n    {\n        return $this->_getRediskaOn()->sort($this->_name, $options);\n    }\n\n\n    public function toArray($sort = null)\n    {\n        return $this->_getRediskaOn()->getSet($this->_name, $sort);\n    }\n\n\n    public function fromArray(array $array)\n    {\n\n        $pipeline = $this->_getRediskaOn()->pipeline();\n        foreach($array as $item) {\n            $pipeline->addToSet($this->_name, $item);\n        }\n\n        if (!is_null($this->_expire)) {\n        \t$pipeline->expire($this->_name, $this->_expire, $this->_isExpireTimestamp);\n        }\n\n        $pipeline->execute();\n\n        return true;\n    }\n\n\n\n    public function getIterator()\n    {\n        return new ArrayObject($this->toArray());\n    }\n\n    public function offsetSet($offset, $value)\n    {\n        if (!is_null($offset)) {\n            throw new Rediska_Key_Exception('Offset is not allowed in sets');\n        }\n\n        $this->add($value);\n\n        return $value;\n    }\n\n    public function offsetExists($value)\n    {\n        throw new Rediska_Key_Exception('Offset is not allowed in sets');\n    }\n\n    public function offsetUnset($value)\n    {\n        throw new Rediska_Key_Exception('Offset is not allowed in sets');\n    }\n\n    public function offsetGet($value)\n    {\n        throw new Rediska_Key_Exception('Offset is not allowed in sets');\n    }\n\n    protected function _prepareSetsForCompare($setOrSets)\n    {\n        if (!is_array($setOrSets)) {\n            $sets = array($setOrSets);\n        } else {\n            $sets = $setOrSets;\n        }\n\n        foreach($sets as &$set) {\n            if ($set instanceof Rediska_Key_Set) {\n                $set = $set->getName();\n            }\n        }\n\n        if (!in_array($this->_name, $sets)) {\n            array_unshift($sets, $this->_name);\n        }\n\n        return $sets;\n    }\n}\n'twich/www/redis/Rediska/Key/Abstract.php'\n:<?php\n\n\nrequire_once 'Rediska.php';\n\n\nrequire_once 'Rediska/Key/Exception.php';\n\n\nabstract class Rediska_Key_Abstract\n{\n\n\tprotected $_name;\n\n\n\tprotected $_rediska;\n\n\n    protected $_expire;\n\n\n    protected $_isExpireTimestamp = false;\n\n\n    protected $_serverAlias;\n\n\n\tpublic function __construct($name, $expire = null, $serverAlias = null)\n\t{\n\t\t$this->_name        = $name;\n\t\t$this->_expire      = $expire;\n\t\t$this->_serverAlias = $serverAlias;\n\n\t\t$this->_setupRediskaDefaultInstance();\n\t}\n\n\n\tpublic function delete()\n\t{\n\t\treturn $this->_getRediskaOn()->delete($this->_name);\n\t}\n\n\n\tpublic function isExists()\n\t{\n\t\treturn $this->_getRediskaOn()->exists($this->_name);\n\t}\n\n\n\tpublic function getType()\n\t{\n\t\treturn $this->_getRediskaOn()->getType($this->_name);\n\t}\n\n\n\tpublic function rename($newName, $overwrite = true)\n\t{\n\t\ttry {\n            $this->_getRediskaOn()->rename($this->_name, $newName, $overwrite);\n\t\t} catch (Rediska_Exception $e) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->_name = $newName;\n\n        if (!is_null($this->_expire)) {\n            $this->expire($this->_expire, $this->_isExpireTimestamp);\n        }\n\n\t\treturn true;\n\t}\n\n\n\tpublic function expire($secondsOrTimestamp, $isTimestamp = false)\n\t{\n\t\treturn $this->_getRediskaOn()->expire($this->_name, $secondsOrTimestamp, $isTimestamp);\n\t}\n\n\n\tpublic function getLifetime()\n\t{\n\t\treturn $this->_getRediskaOn()->getLifetime($this->_name);\n\t}\n\n\n\tpublic function moveToDb($dbIndex)\n\t{\n\t\t$result = $this->_getRediskaOn()->moveToDb($this->_name, $dbIndex);\n\n        if ($result && !is_null($this->_expire)) {\n            $this->expire($this->_expire, $this->_isExpireTimestamp);\n        }\n\n        return $result;\n\t}\n\n\n\tpublic function getName()\n\t{\n\t\treturn $this->_name;\n\t}\n\n\n\tpublic function setName($name)\n\t{\n\t\t$this->name = $name;\n\n\t\treturn $this;\n\t}\n\n\n    public function setExpire($secondsOrTimestamp, $isTimestamp = false)\n    {\n        $this->_expire = $secondsOrTimestamp;\n        $this->_isExpireTimestamp = $isTimestamp;\n\n        return $this;\n    }\n\n\n    public function getExpire()\n    {\n        return $this->_expire;\n    }\n\n\n    public function isExpireTimestamp()\n    {\n        return $this->_isExpireTimestamp;\n    }\n\n\n    public function setServerAlias($serverAlias)\n    {\n    \t$this->_serverAlias = $serverAlias;\n\n    \treturn $this;\n    }\n\n\n    public function getServerAlias()\n    {\n    \treturn $this->_serverAlias;\n    }\n\n\n    public function setRediska(Rediska $rediska)\n    {\n        $this->_rediska = $rediska;\n\n        return $this;\n    }\n\n\n    public function getRediska()\n    {\n        if (!$this->_rediska instanceof Rediska) {\n            throw new Rediska_Key_Exception('Rediska instance not found for ' . get_class($this));\n        }\n\n        return $this->_rediska;\n    }\n\n\n    protected function _getRediskaOn()\n    {\n    \t$rediska = $this->getRediska();\n\n    \tif (!is_null($this->_serverAlias)) {\n    \t\t$rediska = $rediska->on($this->_serverAlias);\n    \t}\n\n    \treturn $rediska;\n    }\n\n\n    protected function _setupRediskaDefaultInstance()\n    {\n        $this->_rediska = Rediska::getDefaultInstance();\n        if (!$this->_rediska) {\n            $this->_rediska = new Rediska();\n        }\n    }\n}",
        "gt": [
            "'twich/www/redis/Rediska/Exception.php'",
            "'twich/www/redis/Rediska/Key/Exception.php'",
            "'twich/www/redis/Rediska/Key/Abstract.php'",
            "'twich/www/redis/Rediska/Key/Set.php'",
            "'twich/www/redis/Rediska/Zend/Session/Set.php'",
            "'twich/www/redis/Rediska/Zend/Session/SaveHandler/Redis.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/data.php'",
            "'firebirdwebadmin/inc/debug_funcs.inc.php'"
        ],
        "content": "'firebirdwebadmin/inc/script_start.inc.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/configuration.inc.php';\n\nif (DEBUG) {\n    $start_time = @microtime();\n}\n\nrequire './inc/functions.inc.php';\n\nsession_start();\nset_error_handler('error_handler');\n\nrequire get_language_file('./lang/');\nrequire './inc/session.inc.php';\nrequire './inc/firebird.inc.php';\nrequire './inc/panel_elements.inc.php';\nrequire './inc/javascript.inc.php';\n\nif (DEBUG || DEBUG_HTML) {\n    include './inc/debug_funcs.inc.php';\n}\n\nif (!extension_loaded('interbase')) {\n    die($ERRORS['NO_IBASE_MODULE']);\n}\n\nif (!isset($_SESSION['s_init'])\n    || ($_SESSION['s_cookies'] === 'untested')\n) {\n    initialize_session();\n    fallback_session();\n} else {\n    localize_session_vars();\n}\n\nif (!isset($no_session_referer) || $no_session_referer !== true) {\n\n    $s_referer = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n}\n\nsend_http_headers();\n\n\n$message = '';\n$warning = '';\n$error = '';\n$fb_error = '';\n$php_error = '';\n$debug = array();\n$externcmd = '';\n\n\n\n$js_stack = '';\n\n\n\n$sql = '';\n\n\n\nif ($s_connected == true && !isset($_GET['unconnected'])) {\n    $dbhandle = db_connect();\n\n    if ($dbhandle === false) {\n        $fb_error = fbird_errmsg();\n        $s_connected = false;\n        $s_tables_valid = false;\n        $s_wt['table'] = '';\n    }\n\n    if (empty($s_charsets)) {\n        $s_charsets = get_charsets();\n    }\n}\n\n\nlist($family, $version) = server_info($s_login['server']);\ndefine('SERVER_FAMILY', $family);\ndefine('SERVER_VERSION', $version);\n\nif ($s_binpath != BINPATH) {\n\n\n    if (!is_dir(BINPATH)\n        || (!is_file(BINPATH.'isql') && !is_file(BINPATH.'isql-fb') && !is_file(BINPATH.'isql.exe'))\n    ) {\n        $warning = sprintf($WARNINGS['BAD_ISQLPATH'], BINPATH);\n    }\n\n\n    if (!is_dir(TMPPATH) || !is_writeable(TMPPATH)) {\n        $warning .= sprintf($WARNINGS['BAD_TMPPATH'], TMPPATH);\n    }\n\n    $s_binpath = BINPATH;\n}\n\nif (DEBUG_HTML) {\n    ob_start();\n}\n\n'firebirdwebadmin/data.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/script_start.inc.php';\nrequire './inc/foreign_keys.inc.php';\nrequire './inc/DataForm.php';\n\n\n\n\nif ($s_connected && $s_tables_valid == false) {\n    include_once './inc/get_tables.inc.php';\n    if (get_tables($dbhandle)) {\n        $s_tables_valid = true;\n    }\n}\n\nrequire './inc/handle_watchtable.inc.php';\n\n\n\n\n$customize_changed = false;\nif (isset($_POST['dt_column_config_save'])) {\n    $column = get_request_data('dt_column_config_column');\n    $table = get_request_data('dt_column_config_table');\n    $fk_column = get_request_data('dt_column_config_fk_column');\n    if ($fk_column == '') {\n        unset($s_cust['fk_lookups'][$table][$column]);\n        if (empty($s_cust['fk_lookups'][$table])) {\n            unset($s_cust['fk_lookups'][$table]);\n        }\n    } else {\n        $s_cust['fk_lookups'][$table][$column] = $fk_column;\n    }\n    $customize_changed = true;\n}\n\n\n\n\nif (array_filter(array_keys($_POST), function($a) {return preg_match(\"/dt_(enter|edit)_(insert|ready|save|cancel)/\", $a);} )) {\n    if ((isset($_POST['dt_config_fk_lookup'])  &&  $s_cust['enter']['fk_lookup'] == false)  ||\n        (!isset($_POST['dt_config_fk_lookup'])  &&  $s_cust['enter']['fk_lookup'] == true)) {\n\n\n        $s_cust['enter']['fk_lookup'] = isset($_POST['dt_config_fk_lookup']);\n        $customize_changed = true;\n    }\n\n    if (isset($_POST['dt_enter_insert'])  ||  isset($_POST['dt_enter_ready'])) {\n        if ((isset($_POST['dt_config_more'])  &&  $s_cust['enter']['another_row'] == false)  ||\n            (!isset($_POST['dt_config_more'])  &&  $s_cust['enter']['another_row'] == true)) {\n\n\n            $s_cust['enter']['another_row'] = isset($_POST['dt_config_more']);\n            $customize_changed = true;\n        }\n    } else {\n        if ((isset($_POST['dt_config_as_new'])  &&  $s_cust['enter']['as_new'] == false)  ||\n            (!isset($_POST['dt_config_as_new'])  &&  $s_cust['enter']['as_new'] == true)) {\n\n\n            $s_cust['enter']['as_new'] = isset($_POST['dt_config_as_new']);\n            $customize_changed = true;\n        }\n    }\n}\nif ($customize_changed == true) {\n    set_customize_cookie($s_cust);\n}\n\nif (isset($s_edit_where)  && count($s_edit_where) > 0) {\n    include './inc/handle_editdata.inc.php';\n}\n\n\n\n\nif (isset($_POST['dt_enter_select'])) {\n    $s_enter_name = get_request_data('dt_enter_name');\n\n    if (is_array($s_fields[$s_enter_name])) {\n        $s_fields = get_table_defaults_sources($s_enter_name, $s_fields);\n        $s_fields = get_table_computed_sources($s_enter_name, $s_fields);\n\n        $s_enter_values = init_enter_values($s_fields[$s_enter_name]);\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'dt_enter', true)\n&&  isset($_POST['dt_enter_insert'])) {\n\n\n    if (!$s_domains_valid) {\n        include_once './inc/domains.inc.php';\n\n        $s_domains = get_domain_definitions($s_domains);\n        $s_domains_valid = true;\n    }\n\n\n    include_once './inc/triggers.inc.php';\n    if ($s_triggers_valid == false) {\n        $s_triggers = get_triggers($s_triggers);\n        $s_triggers_valid = true;\n    }\n\n    $idx = 0;\n    $bindargs = $cols = $s_enter_values = array();\n    foreach ($s_fields[$s_enter_name] as $field) {\n        if (isset($field['comp'])) {\n            $s_enter_values[] = $field['csource'];\n            ++$idx;\n            continue;\n        }\n\n        if (isset($_FILES['dt_enter_file_'.$idx])  &&\n            !empty($_FILES['dt_enter_file_'.$idx]['name'])) {\n            $value = $_FILES['dt_enter_file_'.$idx];\n            $s_enter_values[] = $value;\n        } else {\n            $value = get_request_data('dt_enter_field_'.$idx);\n            $s_enter_values[] = $value;\n        }\n\n\n        $type = !isset($field['domain']) ? $field['type'] : $s_domains[$field['type']]['type'];\n\n\n        if ($idx == 0  &&  $value === ''  &&\n            in_array($type, array('INTEGER', 'BIGINT', 'SMALLINT'))  &&\n            isset($field['notnull'])  &&  $field['notnull'] == 'Yes'  &&\n            have_active_trigger($s_triggers, $s_enter_name, 'before', 'insert')) {\n            ++$idx;\n            continue;\n        }\n\n        switch ($type) {\n        case 'CHARACTER':\n        case 'VARCHAR':\n        case 'DATE':\n        case 'TIME':\n        case 'TIMESTAMP':\n            $bindargs[] = empty($field['notnull'])  &&  empty($value) ? null : \"$value\";\n            break;\n        case 'BLOB' :\n\n            if (is_array($value)  &&  !empty($value['name'])) {\n                $bfname = $value['tmp_name'];\n                $bfhandle = fopen($bfname, 'r') or die('cannot open file '.$bfname);\n                $bstr = fbird_blob_import($dbhandle, $bfhandle);\n                fclose($bfhandle);\n                $bindargs[] = $bstr;\n            }\n\n            elseif (!empty($value)) {\n                $bhandle = fbird_blob_create($dbhandle) or die('cannot create blob: '.__FILE__.', '.__LINE__);\n                fbird_blob_add($bhandle, $value);\n                $bstr = fbird_blob_close($bhandle);\n                $bindargs[] = $bstr;\n            } else {\n                $bindargs[] = null;\n            }\n            break;\n        default:\n            if ($value === '') {\n                $value = null;\n            }\n\n            $bindargs[] = $value;\n        }\n        $cols[] = $field['name'];\n        ++$idx;\n    }\n\n    if (count($cols) > 0) {\n        $fb_error = insert_row($s_enter_name, $cols, $bindargs);\n\n        if (empty($fb_error)) {\n            $s_watch_buffer = '';\n            $s_enter_values = $s_cust['enter']['another_row'] == false\n                ? array()\n                : init_enter_values($s_fields[$s_enter_name]);\n        }\n    }\n}\n\n\n\n\nif (isset($_POST['dt_enter_ready'])  ||\n    (isset($_POST['dt_enter_insert'])  &&  $s_cust['enter']['another_row'] == false  &&  empty($fb_error))) {\n    $s_enter_name = '';\n    $s_enter_values = array();\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'dt_export', true)) {\n    include './inc/export.inc.php';\n\n    if (empty($s_export)) {\n        $s_export = get_export_defaults();\n    }\n\n\n    if (isset($_POST['dt_export_defaults'])) {\n        $s_export = set_export_defaults($s_export['format'], $s_export);\n    }\n\n    if (isset($_POST['dt_export_doit'])) {\n        $s_export = get_export_form_data($s_export);\n        list($warning, $error) = check_export_form_data($s_export);\n\n        if (empty($error)  &&  empty($warning)) {\n\n\n            if ($s_export['target']['option'] == 'screen') {\n\n\n                $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"export\";';});\n\n                $iframekey_export = md5(uniqid('export'));\n                $s_iframejobs[$iframekey_export] = array('job' => 'export',\n                                                         'data' => $s_export,\n                                                         'timestamp' => time(), );\n            }\n\n\n            else {\n                $filename = export_filename($s_export);\n                send_export_headers(get_export_mimetype($s_export['format']), $filename);\n\n                export_data($s_export);\n\n\n\n                globalize_session_vars();\n                exit();\n            }\n        }\n    }\n\n    $js_stack .= js_data_export();\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'dt_import', true)\n&&  isset($_POST['dt_import_doit'])) {\n\n\n    $s_csv['import_null'] = isset($_POST['dt_import_null']) ? true : false;\n\n    if ($_POST['dt_import_table'] == '') {\n        $warning .= $WARNINGS['SELECT_TABLE_FIRST'];\n    } elseif (isset($_FILES['dt_import_file']['name'])\n        &&  $_FILES['dt_import_file']['name'] == '') {\n        $warning .= $WARNINGS['SELECT_FILE_FIRST'];\n    } else {\n        $ifile = $_FILES['dt_import_file']['tmp_name'];\n        $itable = $_POST['dt_import_table'];\n        $ihandle = fopen($ifile, 'r') or die('Error opening '.$ifile);\n\n\n\n        foreach ($s_fields[$itable] as $field) {\n            if (($field['type'] == 'BLOB'  &&  $field['stype'] != 1)  ||\n                (isset($field['comp'])  &&  $field['comp'] == 'Yes')) {\n\n                continue;\n            }\n            $col_names[] = $field['name'];\n            $columns[] = $field;\n        }\n\n        $sql = 'INSERT INTO '.$itable.'('.implode(', ', $col_names).')'\n                              .' VALUES ('.implode(', ', array_fill(0, count($col_names), '?')).')';\n        $query = fbird_prepare($sql) or fb_error(__FILE__, __LINE__, $sql);\n\n\n        $var_string = '';\n        foreach (array_keys($col_names) as $idx) {\n            $var_string .= '$data['.$idx.'],';\n        }\n        $var_string = substr($var_string, 0, -1);\n\n\n        $blob_fields = array();\n        $null_fields = array();\n        $idx = 0;\n        foreach ($s_fields[$itable] as $field) {\n            if ($field['type'] == 'BLOB') {\n                $blob_fields[] = $idx;\n            }\n\n            if ($s_csv['import_null'] == true &&\n                (!isset($field['notnull'])  || empty($field['notnull']))) {\n                $null_fields[] = $idx;\n            }\n            ++$idx;\n        }\n\n\n\n        $csv_cnt = 0;\n        while ($data = fgetcsv($ihandle, MAX_CSV_LINE)) {\n\n\n            if (!empty($null_fields)) {\n                foreach ($null_fields as $idx) {\n                    if ($data[$idx] == '') {\n                        $data[$idx] = null;\n                    }\n                }\n            }\n\n\n            if (!empty($blob_fields)) {\n                foreach ($blob_fields as $idx) {\n                    if (empty($data[$idx])) {\n                        $data[$idx] = null;\n                    } else {\n                        $blob_handle = fbird_blob_create($dbhandle) or fb_error(__FILE__, __LINE__);\n                        fbird_blob_add($blob_handle, $data[$idx]);\n                        $data[$idx] = fbird_blob_close($blob_handle) or fb_error(__FILE__, __LINE__);\n                    }\n                }\n            }\n\n            call_user_func_array('fbird_execute', array_merge(array($query), $data))\n                or $fb_error = fb_error(__FILE__, __LINE__, $query);\n\n\n            if (!empty($fb_error)) {\n                break;\n            }\n            ++$csv_cnt;\n        }\n        fclose($ihandle);\n        $sql = '';\n\n\n        $s_watch_buffer = '';\n\n        $message .= sprintf($MESSAGES['CSV_IMPORT_COUNT'], $csv_cnt, $itable);\n    }\n}\n\n$js_stack .= js_request_column_config_form();\n\n\n\n\n$s_page = 'Data';\n$panels = $s_data_panels;\n\nrequire './inc/script_end.inc.php';\n\nfunction init_enter_values($fields)\n{\n    $values = array();\n    foreach ($fields as $field) {\n        if (isset($field['default'])) {\n            $values[] = $field['dsource'];\n        } elseif (isset($field['comp'])) {\n            $values[] = $field['csource'];\n        } else {\n            $values[] = '';\n        }\n    }\n\n    return $values;\n}\n\n'firebirdwebadmin/inc/debug_funcs.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\nfunction write_output_buffer($fname)\n{\n    $fp = fopen($fname, 'w')\n        or die('Error opening file '.$fname);\n    fwrite($fp, ob_get_contents())\n        or die('Error writing to file '.$fname);\n    ob_end_flush();\n}\n\n\n\n\n\nfunction show_time_consumption($start, $end)\n{\n    list($sm, $ss) = explode(' ', $start);\n    list($em, $es) = explode(' ', $end);\n    $elapsed = $es - $ss + $em - $sm;\n    echo 'time consumption: '.$elapsed.\"<br>\\n\";\n}\n\n\n\n\n\n\n\nfunction add_debug($str, $file = null, $line = null)\n{\n    if ($file == null || $line == null) {\n        $dstr = \"<tr>\\n<td colspan=\\\"2\\\">\";\n        if (isset($GLOBALS[$str])) {\n            $dstr .= add_var_debug($str, \"<br>\\n\");\n        } else {\n            $dstr .= \"$str<br>\\n\";\n        }\n    } else {\n        $dstr = \"<tr>\\n<td>$file, $line:</td>\\n\";\n        if (isset($GLOBALS[$str])) {\n            $dstr .= '<td>'.add_var_debug($str, \"<br>\\n\");\n        } else {\n            $dstr .= \"<td>$str<br>\\n\";\n        }\n    }\n    $dstr .= \"</td>\\n</tr>\\n\";\n    $GLOBALS['debug'][] = $dstr;\n}\n\nfunction add_var_debug($var, $separator)\n{\n    if (!is_array($GLOBALS[$var])) {\n        return($var.' = '.$GLOBALS[$var]);\n    } else {\n        $str = $var.' = array('.$separator;\n        $arr = $GLOBALS[$var];\n        foreach ($arr as $key => $val) {\n            $str .= $key.' => '.$val.$separator;\n        }\n        $str .= ')'.$separator;\n\n        return $str;\n    }\n}\n\n\n\n\nfunction file_debug($str)\n{\n    include_once 'inc/configuration.inc.php';\n\n    $fp = fopen(TMPPATH.'debug.txt', 'a') or die('Error: cannot open file for debug output');\n    fwrite($fp, $str);\n    fclose($fp);\n}\n\n\n\n\nfunction js_alert($string)\n{\n    ?>\n<script language=\"JavaScript\">\n  <!--\n   alert(\"<?php echo $string;\n    ?>\");\n\n  </script>\n<?php\n\n}\n\n\n\n\nfunction show_session()\n{\n    debug_var($GLOBALS['HTTP_SESSION_VAR']);\n}\n\n\nfunction debug_die($var)\n{\n    debug_var($var);\n    die();\n}\n\n\nfunction debug_var($var)\n{\n    @include_once 'Var_Dump.php';\n    if (class_exists('Var_Dump')) {\n        Var_Dump::displayInit(array('display_mode' => 'HTML4_Text'),\n                              array('mode' => 'normal',\n                                    'offset' => 3,\n                                    'before_type' => '<font color=\"\n                                    'after_type' => '</font>',\n                                    'before_value' => '<font color=\"\n                                    'after_value' => '</font>',\n                                    )\n                              );\n        Var_Dump::display($var);\n    } else {\n        echo \"<pre>\\n\";\n        print_r($var);\n        echo \"</pre>\\n\";\n    }\n}\n\n?>\n",
        "gt": [
            "'firebirdwebadmin/inc/debug_funcs.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/data.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/database.php'",
            "'firebirdwebadmin/inc/debug_funcs.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'"
        ],
        "content": "'firebirdwebadmin/database.php'\n:<?php\n\n\n\n\n\n\n\nrequire './inc/script_start.inc.php';\n\n\n\n\nif (isset($_POST['db_login_doit'])) {\n\n    if (!empty($dbhandle)) {\n        fbird_close($dbhandle);\n    }\n    $s_login['database'] = $_POST['db_login_database'];\n    $s_login['user'] = strtoupper($_POST['db_login_user']);\n    $s_login['host'] = $_POST['db_login_host'];\n\n\n\n    $pw = $_POST['db_login_password'];\n    if (strspn($pw, '*') != strlen($pw)) {\n        $s_login['password'] = $pw;\n    }\n\n    $s_login['role'] = !empty($_POST['db_login_role'])  ? $_POST['db_login_role']  : '';\n    $s_login['cache'] = !empty($_POST['db_login_cache']) ? $_POST['db_login_cache'] : '';\n    if ($s_login['cache'] != null  &&  $s_login['cache'] < 10) {\n        $s_login['cache'] = 10;\n    }\n    $s_login['charset'] = !empty($_POST['db_login_charset']) ? $_POST['db_login_charset'] : '';\n    $s_login['dialect'] = !empty($_POST['db_login_dialect']) ? $_POST['db_login_dialect'] : '';\n    $s_login['server'] = !empty($_POST['db_login_server'])  ? $_POST['db_login_server']  : '';\n\n    if ($s_login['database'] == '') {\n        $error = $ERRORS['NO_DB_SELECTED'];\n    } elseif (!is_allowed_db($s_login['database'])) {\n        $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_login['database']);\n    }\n\n    if (empty($error)) {\n        if ($dbhandle = db_connect()) {\n\n\n            $s_connected = true;\n\n            remove_edit_panels();\n            $s_charsets = get_charsets();\n            $message = $info_strings['SuccessLogin'];\n        } else {\n\n            $fb_error = fbird_errmsg();\n            $s_login['password'] = '';\n            $s_connected = false;\n        }\n    }\n    cleanup_session();\n}\n\n\n\n\nif (isset($_POST['db_logout_doit'])) {\n    if (!empty($dbhandle)) {\n        fbird_close($dbhandle);\n    }\n    remove_edit_panels();\n    cleanup_session();\n    $s_login['password'] = '';\n\n    $s_connected = false;\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'db_create')\n&&  isset($_POST['db_create_doit'])\n&&  isset($_POST['db_create_database'])\n&&  !empty($_POST['db_create_database'])) {\n    $s_create_db = trim($_POST['db_create_database']);\n    $s_create_host = trim($_POST['db_create_host']);\n    $s_create_user = trim($_POST['db_create_user']);\n\n\n\n    $pw = $_POST['db_create_password'];\n    if (strspn($pw, '*') != strlen($pw)) {\n        $s_create_pw = $pw;\n    }\n    $s_create_pagesize = $_POST['db_create_pagesize'];\n    $s_create_charset = $_POST['db_create_charset'];\n\n    if (!is_allowed_db($s_create_db)) {\n        $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_create_db);\n    }\n\n\n    if (!empty($dbhandle)  &&  empty($error)) {\n        fbird_close($dbhandle);\n    }\n\n\n\n    if (empty($error)) {\n        $db_str = (!empty($s_create_host)) ? $s_create_host.':'.$s_create_db : $s_create_db;\n\n        $sql = 'CREATE DATABASE \\''.$db_str.'\\'';\n        if (strlen($s_create_user) > 0) {\n            $sql .= ' USER \\''.$s_create_user.'\\'';\n            if (strlen($s_create_pw) > 0) {\n                $sql .= ' PASSWORD \\''.$s_create_pw.'\\'';\n            }\n        }\n        if ($s_create_pagesize !=   4096) {\n\n            $sql .= ' PAGE_SIZE = '.$s_create_pagesize;\n        }\n\n        if ($s_create_charset != 'NONE') {\n\n            $sql .= ' DEFAULT CHARACTER SET '.$s_create_charset;\n        }\n\n        $sql .= ';';\n        list($binary_output, $binary_error) = isql_execute($sql);\n\n        if (empty($binary_error)  &&  !is_file($s_create_db)) {\n            $error = sprintf($ERRORS['CREATE_DB_FAILED'], $s_create_db);\n        } else {\n\n            $s_login['charset'] = $s_create_charset;\n            $s_login['database'] = $s_create_db;\n            $s_login['host'] = $s_create_host;\n            $s_login['user'] = strtoupper($s_create_user);\n            $s_login['password'] = $s_create_pw;\n            if ($dbhandle = db_connect()) {\n                $s_connected = true;\n                remove_edit_panels();\n                cleanup_session();\n                $message = sprintf($MESSAGES['CREATE_DB_SUCCESS'], $s_create_db);\n            } else {\n                $fb_error = fbird_errmsg();\n            }\n        }\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'db_delete')\n&&  isset($_POST['db_delete_doit'])\n&&  isset($_POST['db_delete_database'])\n&&  !empty($_POST['db_delete_database'])) {\n    $pw = get_request_data('db_delete_password');\n    if (strspn($pw, '*') == strlen($pw)) {\n        $pw = $s_delete_db['password'];\n    }\n    $s_delete_db = array('database' => get_request_data('db_delete_database'),\n                         'user' => get_request_data('db_delete_user'),\n                         'host' => get_request_data('db_delete_host'),\n                         'password' => $pw,\n                         );\n\n\n    if ($s_login['database'] == $s_delete_db) {\n        $message = sprintf($MESSAGES['DELETE_CON_DB'], $s_delete_db);\n        $s_login['database'] = '';\n        $s_connected = false;\n        remove_edit_panels();\n        cleanup_session();\n    }\n\n    if (!is_allowed_db($s_delete_db['database'])) {\n        $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_delete_db['database']);\n    } elseif ($s_cust['askdel'] == true) {\n        $s_confirmations['database'] =\n            array('msg' => sprintf($MESSAGES['CONFIRM_DB_DELETE'], $s_delete_db['database']));\n    }\n}\n\n\nif (isset($_POST['confirm_yes'])  ||\n    (isset($_POST['db_delete_doit'])  &&  $s_cust['askdel'] == false  &&  empty($error))) {\n    $fb_error = drop_database($s_delete_db, $s_login);\n    unset($s_confirmations['database']);\n\n    if (empty($fb_error)) {\n        if ($s_login['database'] == $s_delete_db['database']) {\n            $s_login['database'] = '';\n            $s_connected = false;\n            remove_edit_panels();\n            cleanup_session();\n        }\n\n        $s_delete_db['database'] = '';\n    }\n}\n\n\nif (isset($_POST['confirm_no'])) {\n    unset($s_confirmations['database']);\n    $s_delete_db['database'] = '';\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'db_meta', true)) {\n\n\n    $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"metadata\";';} );\n\n    $iframekey_meta = md5(uniqid('meta'));\n    $s_iframejobs[$iframekey_meta] = array('job' => 'metadata',\n                                           'timestamp' => time(), );\n\n\n\n\n    if (isset($_POST['db_meta_save'])) {\n        list($metadata, $binary_error) = isql_get_metadata($s_login['user'], $s_login['password'], $s_login['database'], $s_login['host']);\n\n        if (empty($binary_error)  &&  count($metadata) > 0) {\n            send_export_headers('application/octet-stream', 'meta.sql');\n            print(implode(\"\\n\", $metadata));\n            exit();\n        }\n    }\n}\n\n\n\n\nif (isset($_POST['db_systable_select'])) {\n    if ($s_systable['table'] != $_POST['db_systable']) {\n        $s_systable['order'] = '';\n        $s_systable['dir'] = 'ASC';\n    }\n\n    $s_systable['table'] = $_POST['db_systable'];\n    $s_systable['ffield'] = $_POST['db_sysfield'];\n    $s_systable['fvalue'] = $_POST['db_sysvalue'];\n\n    $s_systable['sysdata'] = (isset($_POST['db_sysdata']) ? true : false);\n}\n\nif (isset($_GET['order'])) {\n    $s_systable['dir'] = ($_GET['order'] == $s_systable['order']  &&  $s_systable['dir'] == 'ASC')\n        ? 'DESC'\n        : 'ASC';\n    $s_systable['order'] = $_GET['order'];\n}\n\n\nif (have_panel_permissions($s_login['user'], 'db_systable', true)) {\n    $js_stack .= js_request_filter_fields();\n\n    if (false  &&  strpos($s_systable['table'], 'MON$') === 0) {\n\n\n        $have_refresh = true;\n\n        $js_stack .= js_jsrs_refresh_systable();\n    } else {\n        $have_refresh = false;\n    }\n\n    if ($s_connected   &&  !empty($s_systable['table'])) {\n        include './inc/system_table.inc.php';\n\n        $systable = get_systable($s_systable);\n    }\n}\n\n\n\n\n$dbfiles = array();\nif (isset($ALLOWED_FILES)  && count($ALLOWED_FILES) > 0) {\n    foreach ($ALLOWED_FILES as $file) {\n        if ((strpos($file, '/') === false  &&  strpos($file, '\\\\') === false)  ||\n            is_file($file)) {\n            $dbfiles[] = $file;\n        }\n    }\n} elseif (isset($ALLOWED_DIRS)  &&  count($ALLOWED_DIRS) > 0) {\n    foreach ($ALLOWED_DIRS as $dir) {\n        if (!@is_readable($dir)) {\n            $warning .= sprintf($WARNINGS['CAN_NOT_ACCESS_DIR'], $dir);\n        } else {\n            $dirhandle = opendir($dir);\n            while ($filename = readdir($dirhandle)) {\n                    $dbfiles[] = $dir.$filename;\n            }\n            closedir($dirhandle);\n        }\n    }\n}\nsort($dbfiles);\n\n\n\n\n$s_page = 'Database';\n$panels = $s_database_panels;\n\nrequire './inc/script_end.inc.php';\n\n\n\n\n\nfunction drop_database($db, $login)\n{\n    $success = '';\n\n\n\n    if ($db['database'] == $login['database']  &&\n        $db['host']  == $login['host']) {\n        $dbh = $GLOBALS['dbhandle'];\n    } else {\n        $db_path = ($db['host'] == '') ? $db['database'] : $db['host'].':'.$db['database'];\n        if (($dbh = fbird_connect($db_path, $db['user'], $db['password'])) == false) {\n            $success = fbird_errmsg();\n        }\n    }\n\n\n    if (is_resource($dbh)  &&\n        fbird_drop_db($dbh) == false) {\n        $success = fbird_errmsg();\n        fbird_close($dbh);\n    }\n\n    return $success;\n}\n\n'firebirdwebadmin/inc/debug_funcs.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\nfunction write_output_buffer($fname)\n{\n    $fp = fopen($fname, 'w')\n        or die('Error opening file '.$fname);\n    fwrite($fp, ob_get_contents())\n        or die('Error writing to file '.$fname);\n    ob_end_flush();\n}\n\n\n\n\n\nfunction show_time_consumption($start, $end)\n{\n    list($sm, $ss) = explode(' ', $start);\n    list($em, $es) = explode(' ', $end);\n    $elapsed = $es - $ss + $em - $sm;\n    echo 'time consumption: '.$elapsed.\"<br>\\n\";\n}\n\n\n\n\n\n\n\nfunction add_debug($str, $file = null, $line = null)\n{\n    if ($file == null || $line == null) {\n        $dstr = \"<tr>\\n<td colspan=\\\"2\\\">\";\n        if (isset($GLOBALS[$str])) {\n            $dstr .= add_var_debug($str, \"<br>\\n\");\n        } else {\n            $dstr .= \"$str<br>\\n\";\n        }\n    } else {\n        $dstr = \"<tr>\\n<td>$file, $line:</td>\\n\";\n        if (isset($GLOBALS[$str])) {\n            $dstr .= '<td>'.add_var_debug($str, \"<br>\\n\");\n        } else {\n            $dstr .= \"<td>$str<br>\\n\";\n        }\n    }\n    $dstr .= \"</td>\\n</tr>\\n\";\n    $GLOBALS['debug'][] = $dstr;\n}\n\nfunction add_var_debug($var, $separator)\n{\n    if (!is_array($GLOBALS[$var])) {\n        return($var.' = '.$GLOBALS[$var]);\n    } else {\n        $str = $var.' = array('.$separator;\n        $arr = $GLOBALS[$var];\n        foreach ($arr as $key => $val) {\n            $str .= $key.' => '.$val.$separator;\n        }\n        $str .= ')'.$separator;\n\n        return $str;\n    }\n}\n\n\n\n\nfunction file_debug($str)\n{\n    include_once 'inc/configuration.inc.php';\n\n    $fp = fopen(TMPPATH.'debug.txt', 'a') or die('Error: cannot open file for debug output');\n    fwrite($fp, $str);\n    fclose($fp);\n}\n\n\n\n\nfunction js_alert($string)\n{\n    ?>\n<script language=\"JavaScript\">\n  <!--\n   alert(\"<?php echo $string;\n    ?>\");\n\n  </script>\n<?php\n\n}\n\n\n\n\nfunction show_session()\n{\n    debug_var($GLOBALS['HTTP_SESSION_VAR']);\n}\n\n\nfunction debug_die($var)\n{\n    debug_var($var);\n    die();\n}\n\n\nfunction debug_var($var)\n{\n    @include_once 'Var_Dump.php';\n    if (class_exists('Var_Dump')) {\n        Var_Dump::displayInit(array('display_mode' => 'HTML4_Text'),\n                              array('mode' => 'normal',\n                                    'offset' => 3,\n                                    'before_type' => '<font color=\"\n                                    'after_type' => '</font>',\n                                    'before_value' => '<font color=\"\n                                    'after_value' => '</font>',\n                                    )\n                              );\n        Var_Dump::display($var);\n    } else {\n        echo \"<pre>\\n\";\n        print_r($var);\n        echo \"</pre>\\n\";\n    }\n}\n\n?>\n\n'firebirdwebadmin/inc/script_start.inc.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/configuration.inc.php';\n\nif (DEBUG) {\n    $start_time = @microtime();\n}\n\nrequire './inc/functions.inc.php';\n\nsession_start();\nset_error_handler('error_handler');\n\nrequire get_language_file('./lang/');\nrequire './inc/session.inc.php';\nrequire './inc/firebird.inc.php';\nrequire './inc/panel_elements.inc.php';\nrequire './inc/javascript.inc.php';\n\nif (DEBUG || DEBUG_HTML) {\n    include './inc/debug_funcs.inc.php';\n}\n\nif (!extension_loaded('interbase')) {\n    die($ERRORS['NO_IBASE_MODULE']);\n}\n\nif (!isset($_SESSION['s_init'])\n    || ($_SESSION['s_cookies'] === 'untested')\n) {\n    initialize_session();\n    fallback_session();\n} else {\n    localize_session_vars();\n}\n\nif (!isset($no_session_referer) || $no_session_referer !== true) {\n\n    $s_referer = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n}\n\nsend_http_headers();\n\n\n$message = '';\n$warning = '';\n$error = '';\n$fb_error = '';\n$php_error = '';\n$debug = array();\n$externcmd = '';\n\n\n\n$js_stack = '';\n\n\n\n$sql = '';\n\n\n\nif ($s_connected == true && !isset($_GET['unconnected'])) {\n    $dbhandle = db_connect();\n\n    if ($dbhandle === false) {\n        $fb_error = fbird_errmsg();\n        $s_connected = false;\n        $s_tables_valid = false;\n        $s_wt['table'] = '';\n    }\n\n    if (empty($s_charsets)) {\n        $s_charsets = get_charsets();\n    }\n}\n\n\nlist($family, $version) = server_info($s_login['server']);\ndefine('SERVER_FAMILY', $family);\ndefine('SERVER_VERSION', $version);\n\nif ($s_binpath != BINPATH) {\n\n\n    if (!is_dir(BINPATH)\n        || (!is_file(BINPATH.'isql') && !is_file(BINPATH.'isql-fb') && !is_file(BINPATH.'isql.exe'))\n    ) {\n        $warning = sprintf($WARNINGS['BAD_ISQLPATH'], BINPATH);\n    }\n\n\n    if (!is_dir(TMPPATH) || !is_writeable(TMPPATH)) {\n        $warning .= sprintf($WARNINGS['BAD_TMPPATH'], TMPPATH);\n    }\n\n    $s_binpath = BINPATH;\n}\n\nif (DEBUG_HTML) {\n    ob_start();\n}\n",
        "gt": [
            "'firebirdwebadmin/inc/debug_funcs.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/database.php'"
        ]
    },
    {
        "files": [
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'",
            "'bootstrap-blocks-wordpress-plugin/src/column/class-column-block-type.php'"
        ],
        "content": "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'\n:<?php\n\n\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE' ) ) {\n\tdefine( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE', __FILE__ );\n}\n\n\nif ( ! class_exists( \\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::class ) ) {\n\trequire_once plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'src/class-wp-bootstrap-blocks.php';\n}\n\n\n\\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::instance();\n\n'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'\n:<?php\n\n\nnamespace WP_Bootstrap_Blocks;\n\nuse WP_Bootstrap_Blocks\\Button\\Button_Block_Type;\nuse WP_Bootstrap_Blocks\\Column\\Column_Block_Type;\nuse WP_Bootstrap_Blocks\\Container\\Container_Block_Type;\nuse WP_Bootstrap_Blocks\\Row\\Row_Block_Type;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nclass WP_Bootstrap_Blocks {\n\n\n\tprotected static $instance = null;\n\n\n\tpublic static $version = '5.2.0';\n\n\n\tpublic $token = 'wp-bootstrap-blocks';\n\n\n\tpublic $assets_dir;\n\n\n\tpublic $assets_url;\n\n\n\tpublic $languages_dir;\n\n\n\tpublic $languages_dir_full;\n\n\n\tpublic function __construct() {\n\t\t$this->define_constants();\n\t\t$this->init_plugin_environment();\n\t\t$this->includes();\n\t\t$this->init_hooks();\n\t\t$this->register_block_types();\n\t\tSettings::init( $this->assets_dir, $this->assets_url );\n\t}\n\n\n\tprotected function define_constants() {\n\t\tif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_ABSPATH' ) ) {\n\t\t\tdefine( 'WP_BOOTSTRAP_BLOCKS_ABSPATH', trailingslashit( dirname( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t}\n\t}\n\n\n\tprotected function init_plugin_environment() {\n\n\t\t$this->assets_dir = WP_BOOTSTRAP_BLOCKS_ABSPATH . 'build/';\n\t\t$this->assets_url = esc_url( trailingslashit( plugins_url( '/build/', WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t$this->languages_dir = dirname( plugin_basename( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) . '/languages/';\n\t\t$this->languages_dir_full = plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'languages/';\n\t}\n\n\n\tpublic function includes() {\n\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/wp-bootstrap-blocks-functions.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/class-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/container/class-container-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/row/class-row-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/column/class-column-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/button/class-button-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/settings/class-settings.php';\n\t}\n\n\n\tprotected function init_hooks() {\n\n\t\tadd_action( 'enqueue_block_assets', array( $this, 'enqueue_block_assets' ) );\n\n\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'enqueue_block_editor_assets' ), 99 );\n\n\n\t\tif ( class_exists( 'WP_Block_Editor_Context' ) ) {\n\n\t\t\tadd_filter( 'block_categories_all', array( $this, 'register_custom_block_category' ), 10, 2 );\n\t\t} else {\n\t\t\tadd_filter( 'block_categories', array( $this, 'register_custom_block_category_old' ), 10, 2 );\n\t\t}\n\n\n\t\tadd_action( 'plugins_loaded', array( $this, 'load_plugin_textdomain' ) );\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'set_script_translations' ), 100 );\n\n\n\t\tadd_action( 'init', array( $this, 'check_version' ) );\n\t}\n\n\n\tpublic function enqueue_block_assets() {\n\n\t\t$enqueue_block_assets = apply_filters( 'wp_bootstrap_blocks_enqueue_block_assets', true );\n\t\tif ( ! $enqueue_block_assets ) {\n\t\t\treturn;\n\t\t}\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-styles',\n\t\t\tesc_url( $this->assets_url ) . 'style-index.css',\n\t\t\tarray(),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function enqueue_block_editor_assets() {\n\n\t\t$index_path = $this->assets_dir . 'index.js';\n\t\t$index_url = esc_url( $this->assets_url ) . 'index.js';\n\t\t$index_asset_file = $this->assets_dir . 'index.asset.php';\n\t\t$index_asset = file_exists( $index_asset_file )\n\t\t\t? require_once $index_asset_file\n\t\t\t: null;\n\t\t$index_dependencies = isset( $index_asset['dependencies'] ) ? $index_asset['dependencies'] : array();\n\t\t$index_version = isset( $index_asset['version'] ) ? $index_asset['version'] : filemtime( $index_path );\n\n\t\twp_enqueue_script(\n\t\t\t$this->token . '-js',\n\t\t\t$index_url,\n\t\t\t$index_dependencies,\n\t\t\t$index_version,\n\t\t\ttrue\n\t\t);\n\n\t\twp_localize_script(\n\t\t\t$this->token . '-js',\n\t\t\t'wpBootstrapBlocks',\n\t\t\tarray(\n\t\t\t\t'bootstrapVersion' => Settings::get_bootstrap_version(),\n\t\t\t\t'isBootstrap5Active' => Settings::is_bootstrap_5_active(),\n\t\t\t\t'isCssGridEnabled' => Settings::is_css_grid_enabled(),\n\t\t\t)\n\t\t);\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-editor-styles',\n\t\t\tesc_url( $this->assets_url ) . 'index.css',\n\t\t\tarray( 'wp-edit-blocks' ),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function register_custom_block_category( $block_categories, $block_editor_context ) {\n\t\treturn $this->add_custom_block_category( $block_categories );\n\t}\n\n\n\tpublic function register_custom_block_category_old( $categories, $post ) {\n\t\treturn $this->add_custom_block_category( $categories );\n\t}\n\n\n\tprotected function add_custom_block_category( $block_categories ) {\n\t\treturn array_merge(\n\t\t\t$block_categories,\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'slug' => 'wp-bootstrap-blocks',\n\t\t\t\t\t'title' => __( 'Bootstrap Blocks', 'wp-bootstrap-blocks' ),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t}\n\n\n\tpublic function load_plugin_textdomain() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\tload_plugin_textdomain( $domain, false, $this->languages_dir );\n\t}\n\n\n\tpublic function set_script_translations() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\twp_set_script_translations( $this->token . '-js', $domain, $this->languages_dir_full );\n\t}\n\n\n\tpublic function register_block_types() {\n\t\tnew Container_Block_Type();\n\t\tnew Row_Block_Type();\n\t\tnew Column_Block_Type();\n\t\tnew Button_Block_Type();\n\t}\n\n\n\tpublic static function instance() {\n\t\tif ( is_null( self::$instance ) ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\n\t\treturn self::$instance;\n\t}\n\n\n\tpublic function __clone() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function __wakeup() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function check_version() {\n\t\tif ( defined( 'IFRAME_REQUEST' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$transient_name = 'wp_bootstrap_blocks_version';\n\n\t\t$old_version = get_transient( $transient_name );\n\t\tif ( false === $old_version ) {\n\t\t\t$old_version = get_option( $this->token . '_version' );\n\t\t\tset_transient( $transient_name, $old_version, 5 * MINUTE_IN_SECONDS );\n\t\t}\n\t\t$new_version = self::$version;\n\t\tif ( $old_version !== $new_version ) {\n\t\t\t$this->log_version_number();\n\t\t\tdelete_transient( $transient_name );\n\n\n\t\t\tdo_action( $this->token . '_updated', $new_version, $old_version );\n\t\t}\n\t}\n\n\n\tprotected function log_version_number() {\n\t\tdelete_option( $this->token . '_version' );\n\t\tupdate_option( $this->token . '_version', self::$version );\n\t}\n}\n\n'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'\n:<?php\n\n\n\nrequire_once dirname( __DIR__ ) . '/vendor/autoload.php';\n\n\n\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\n\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = getenv( 'WP_PHPUNIT__DIR' );\n}\n\n\nif ( ! $_tests_dir ) {\n\t$_try_tests_dir = __DIR__ . '/../../../../../tests/phpunit';\n\tif ( file_exists( $_try_tests_dir . '/includes/functions.php' ) ) {\n\t\t$_tests_dir = $_try_tests_dir;\n\t}\n}\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = '/tmp/wordpress-tests-lib';\n}\n\n\nrequire_once $_tests_dir . '/includes/functions.php';\n\n\n\ndefine( 'GUTENBERG_LOAD_VENDOR_SCRIPTS', false );\n\n\nfunction _manually_load_plugin() {\n\trequire dirname( __DIR__ ) . '/wp-bootstrap-blocks.php';\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\n\n\nrequire $_tests_dir . '/includes/bootstrap.php';\n\n\nrequire_once __DIR__ . '/wp-bootstrap-blocks-unittestcase.php';\n\n'bootstrap-blocks-wordpress-plugin/src/column/class-column-block-type.php'\n:<?php\n\n\nnamespace WP_Bootstrap_Blocks\\Column;\n\nuse WP_Bootstrap_Blocks\\Block_Type;\nuse WP_Bootstrap_Blocks\\Settings;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\nif ( ! class_exists( '\\WP_Bootstrap_Blocks\\Column\\Column_Block_Type', false ) ) :\n\n\n\tclass Column_Block_Type extends Block_Type {\n\n\t\tprotected $name = 'wp-bootstrap-blocks/column';\n\n\n\t\tprotected $attributes = array(\n\t\t\t'sizeXxl' => array(\n\t\t\t\t'type' => 'number',\n\t\t\t),\n\t\t\t'sizeXl' => array(\n\t\t\t\t'type' => 'number',\n\t\t\t),\n\t\t\t'sizeLg' => array(\n\t\t\t\t'type' => 'number',\n\t\t\t),\n\t\t\t'sizeMd' => array(\n\t\t\t\t'type' => 'number',\n\t\t\t),\n\t\t\t'sizeSm' => array(\n\t\t\t\t'type' => 'number',\n\t\t\t),\n\t\t\t'sizeXs' => array(\n\t\t\t\t'type' => 'number',\n\t\t\t),\n\t\t\t'equalWidthXxl' => array(\n\t\t\t\t'type' => 'boolean',\n\t\t\t),\n\t\t\t'equalWidthXl' => array(\n\t\t\t\t'type' => 'boolean',\n\t\t\t),\n\t\t\t'equalWidthLg' => array(\n\t\t\t\t'type' => 'boolean',\n\t\t\t),\n\t\t\t'equalWidthMd' => array(\n\t\t\t\t'type' => 'boolean',\n\t\t\t),\n\t\t\t'equalWidthSm' => array(\n\t\t\t\t'type' => 'boolean',\n\t\t\t),\n\t\t\t'equalWidthXs' => array(\n\t\t\t\t'type' => 'boolean',\n\t\t\t),\n\t\t\t'bgColor' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'padding' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'centerContent' => array(\n\t\t\t\t'type' => 'boolean',\n\t\t\t),\n\t\t\t'contentVerticalAlignment' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t);\n\n\n\t\tprotected $default_attributes = array(\n\t\t\t'sizeXxl' => 0,\n\t\t\t'sizeXl' => 0,\n\t\t\t'sizeLg' => 0,\n\t\t\t'sizeMd' => 0,\n\t\t\t'sizeSm' => 0,\n\t\t\t'sizeXs' => 12,\n\t\t\t'equalWidthXxl' => false,\n\t\t\t'equalWidthXl' => false,\n\t\t\t'equalWidthLg' => false,\n\t\t\t'equalWidthMd' => false,\n\t\t\t'equalWidthSm' => false,\n\t\t\t'equalWidthXs' => false,\n\t\t\t'bgColor' => '',\n\t\t\t'padding' => '',\n\t\t\t'centerContent' => false,\n\t\t\t'contentVerticalAlignment' => '',\n\t\t);\n\n\n\t\tprotected function get_template_name() {\n\t\t\t$template_name = parent::get_template_name();\n\t\t\tif ( Settings::is_css_grid_enabled() ) {\n\t\t\t\t$template_name .= '-css-grid';\n\t\t\t}\n\t\t\treturn $template_name;\n\t\t}\n\t}\n\nendif;\n",
        "gt": [
            "'bootstrap-blocks-wordpress-plugin/src/column/class-column-block-type.php'",
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'grav-plugin-git-sync/vendor/composer/autoload_real.php'",
            "'grav-plugin-git-sync/vendor/composer/autoload_classmap.php'",
            "'grav-plugin-git-sync/vendor/autoload.php'",
            "'grav-plugin-git-sync/git-sync.php'"
        ],
        "content": "'grav-plugin-git-sync/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        require __DIR__ . '/platform_check.php';\n\n        spl_autoload_register(array('ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader(\\dirname(\\dirname(__FILE__)));\n        spl_autoload_unregister(array('ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854', 'loadClassLoader'));\n\n        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());\n        if ($useStaticLoader) {\n            require __DIR__ . '/autoload_static.php';\n\n            call_user_func(\\Composer\\Autoload\\ComposerStaticInitc058e1b5c686df0909ec1cc39bb5d854::getInitializer($loader));\n        } else {\n            $map = require __DIR__ . '/autoload_namespaces.php';\n            foreach ($map as $namespace => $path) {\n                $loader->set($namespace, $path);\n            }\n\n            $map = require __DIR__ . '/autoload_psr4.php';\n            foreach ($map as $namespace => $path) {\n                $loader->setPsr4($namespace, $path);\n            }\n\n            $classMap = require __DIR__ . '/autoload_classmap.php';\n            if ($classMap) {\n                $loader->addClassMap($classMap);\n            }\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\n'grav-plugin-git-sync/vendor/composer/autoload_classmap.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'Composer\\\\InstalledVersions' => $vendorDir . '/composer/InstalledVersions.php',\n    'Grav\\\\Plugin\\\\GitSyncPlugin' => $baseDir . '/git-sync.php',\n    'SebastianBergmann\\\\Git\\\\Exception' => $vendorDir . '/sebastian/git/src/Exception/Exception.php',\n    'SebastianBergmann\\\\Git\\\\Git' => $vendorDir . '/sebastian/git/src/Git.php',\n    'SebastianBergmann\\\\Git\\\\RuntimeException' => $vendorDir . '/sebastian/git/src/Exception/RuntimeException.php',\n);\n\n'grav-plugin-git-sync/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer/autoload_real.php';\n\nreturn ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854::getLoader();\n\n'grav-plugin-git-sync/git-sync.php'\n:<?php\n\nnamespace Grav\\Plugin;\n\nuse Composer\\Autoload\\ClassLoader;\nuse Grav\\Common\\Config\\Config;\nuse Grav\\Common\\Data\\Data;\nuse Grav\\Common\\Grav;\nuse Grav\\Common\\Page\\Interfaces\\PageInterface;\nuse Grav\\Common\\Plugin;\nuse Grav\\Common\\Scheduler\\Scheduler;\nuse Grav\\Plugin\\GitSync\\AdminController;\nuse Grav\\Plugin\\GitSync\\GitSync;\nuse Grav\\Plugin\\GitSync\\Helper;\nuse RocketTheme\\Toolbox\\Event\\Event;\n\n\nclass GitSyncPlugin extends Plugin\n{\n\n    protected $controller;\n\n    protected $git;\n\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            'onPluginsInitialized'   => [\n                ['autoload', 100000],\n                ['onPluginsInitialized', 1000]\n            ],\n            'onPageInitialized'      => ['onPageInitialized', 0],\n            'onFormProcessed'        => ['onFormProcessed', 0],\n            'onSchedulerInitialized' => ['onSchedulerInitialized', 0]\n        ];\n    }\n\n\n    public function autoload() : ClassLoader\n    {\n        return require __DIR__ . '/vendor/autoload.php';\n    }\n\n\n    public static function generateWebhookSecret()\n    {\n        return static::generateHash(24);\n    }\n\n\n    public static function generateRandomWebhook()\n    {\n        return '/_git-sync-' . static::generateHash(6);\n    }\n\n\n    public function onPluginsInitialized()\n    {\n        $this->enable(['gitsync' => ['synchronize', 0]]);\n        $this->init();\n\n        if ($this->isAdmin()) {\n            $this->enable([\n                'onTwigTemplatePaths'  => ['onTwigTemplatePaths', 0],\n                'onTwigSiteVariables'  => ['onTwigSiteVariables', 0],\n                'onAdminMenu'          => ['onAdminMenu', 0],\n                'onAdminSave'          => ['onAdminSave', 0],\n                'onAdminAfterSave'     => ['onAdminAfterSave', 0],\n                'onAdminAfterSaveAs'   => ['onAdminAfterSaveAs', 0],\n                'onAdminAfterDelete'   => ['onAdminAfterDelete', 0],\n                'onAdminAfterAddMedia' => ['onAdminAfterMedia', 0],\n                'onAdminAfterDelMedia' => ['onAdminAfterMedia', 0],\n            ]);\n\n            return;\n        }\n\n        $config = $this->config->get('plugins.' . $this->name);\n        $route = $this->grav['uri']->route();\n        $webhook = $config['webhook'] ?? false;\n        $secret = $config['webhook_secret'] ?? false;\n        $enabled = $config['webhook_enabled'] ?? false;\n\n        if ($enabled && $route === $webhook && $_SERVER['REQUEST_METHOD'] === 'POST') {\n            if ($secret) {\n                if (!$this->isRequestAuthorized($secret)) {\n                    http_response_code(401);\n                    header('Content-Type: application/json');\n                    echo json_encode([\n                        'status' => 'error',\n                        'message' => 'Unauthorized request'\n                    ]);\n                    exit;\n                }\n            }\n            try {\n                $this->synchronize();\n                header('Content-Type: application/json');\n                echo json_encode([\n                    'status' => 'success',\n                    'message' => 'GitSync completed the synchronization'\n                ]);\n            } catch (\\Exception $e) {\n                http_response_code(500);\n                header('Content-Type: application/json');\n                echo json_encode([\n                    'status' => 'error',\n                    'message' => 'GitSync failed to synchronize'\n                ]);\n            }\n            exit;\n        }\n    }\n\n\n    public function isRequestAuthorized($secret)\n    {\n        if (isset($_SERVER['HTTP_X_HUB_SIGNATURE'])) {\n            $payload = file_get_contents('php:\n\n            return $this->isGithubSignatureValid($secret, $_SERVER['HTTP_X_HUB_SIGNATURE'], $payload);\n        }\n        if (isset($_SERVER['HTTP_X_GITLAB_TOKEN'])) {\n            return $this->isGitlabTokenValid($secret, $_SERVER['HTTP_X_GITLAB_TOKEN']);\n        } else {\n            $payload = file_get_contents('php:\n            return $this->isGiteaSecretValid($secret, $payload);\n        }\n\n        return false;\n    }\n\n\n    public function isGithubSignatureValid($secret, $signatureHeader, $payload)\n    {\n        [$algorithm, $signature] = explode('=', $signatureHeader);\n\n        return $signature === hash_hmac($algorithm, $payload, $secret);\n    }\n\n\n    public function isGitlabTokenValid($secret, $token)\n    {\n        return $secret === $token;\n    }\n\n\n    public function isGiteaSecretValid($secret, $payload)\n    {\n        $payload = json_decode($payload, true);\n        if (!empty($payload) && isset($payload['secret'])) {\n            return $secret === $payload['secret'];\n        }\n\n        return false;\n    }\n\n    public function onAdminMenu()\n    {\n        $base = rtrim($this->grav['base_url'], '/') . '/' . trim($this->grav['admin']->base, '/');\n        $options = [\n            'hint' => Helper::isGitInitialized() ? 'Synchronize GitSync' : 'Configure GitSync',\n            'class' => 'gitsync-sync',\n            'location' => 'pages',\n            'route' => Helper::isGitInitialized() ? 'admin' : 'admin/plugins/git-sync',\n            'icon' => 'fa-' . $this->grav['plugins']->get('git-sync')->blueprints()->get('icon')\n        ];\n\n        if (Helper::isGitInstalled()) {\n            if (Helper::isGitInitialized()) {\n                $options['data'] = [\n                    'gitsync-useraction' => 'sync',\n                    'gitsync-uri' => $base . '/plugins/git-sync'\n                ];\n            }\n\n            $this->grav['twig']->plugins_quick_tray['GitSync'] = $options;\n        }\n    }\n\n    public function init()\n    {\n        if ($this->isAdmin()) {\n\n            $this->controller = new AdminController($this);\n            $this->git = &$this->controller->git;\n        } else {\n            $this->git = new GitSync();\n        }\n    }\n\n\n    public function synchronize()\n    {\n        if (!Helper::isGitInstalled() || !Helper::isGitInitialized()) {\n            return true;\n        }\n\n        $this->grav->fireEvent('onGitSyncBeforeSynchronize');\n\n        if ($this->git->hasChangesToCommit()) {\n            $this->git->commit();\n        }\n\n\n        $this->git->sync();\n\n        $this->grav->fireEvent('onGitSyncAfterSynchronize');\n\n        return true;\n    }\n\n    public function onSchedulerInitialized(Event $event)\n    {\n\n        $config = Grav::instance()['config'];\n        $run_at = $config->get('plugins.git-sync.sync.cron_at', '0 12,23 * * *');\n\n        if ($config->get('plugins.git-sync.sync.cron_enable', false)) {\n\n            $scheduler = $event['scheduler'];\n            $job = $scheduler->addFunction('Grav\\Plugin\\GitSync\\Helper::synchronize', [], 'GitSync');\n            $job->at($run_at);\n        }\n    }\n\n\n    public function reset()\n    {\n        if (!Helper::isGitInstalled() || !Helper::isGitInitialized()) {\n            return true;\n        }\n\n        $this->grav->fireEvent('onGitSyncBeforeReset');\n\n        $this->git->reset();\n\n        $this->grav->fireEvent('onGitSyncAfterReset');\n\n        return true;\n    }\n\n\n    public function onTwigTemplatePaths()\n    {\n        $this->grav['twig']->twig_paths[] = __DIR__ . '/templates';\n    }\n\n\n    public function onTwigSiteVariables()\n    {\n\n        if (!class_exists(Helper::class)) {\n            return false;\n        }\n\n        $user = $this->grav['user'];\n        if (!$user->authenticated) {\n            return false;\n        }\n\n        $settings = [\n            'first_time'    => !Helper::isGitInitialized(),\n            'git_installed' => Helper::isGitInstalled()\n        ];\n\n        $this->grav['twig']->twig_vars['git_sync'] = $settings;\n\n        $adminPath = trim($this->grav['admin']->base, '/');\n        if ($this->grav['uri']->path() === \"/$adminPath/plugins/git-sync\") {\n            $this->grav['assets']->addCss('plugin:\n        } else {\n            $this->grav['assets']->addInlineJs('var GitSync = ' . json_encode($settings) . ';');\n        }\n\n        $this->grav['assets']->addJs('plugin:\n        $this->grav['assets']->addJs('plugin:\n        $this->grav['assets']->addCss('plugin:\n\n        return true;\n    }\n\n    public function onPageInitialized()\n    {\n        if ($this->controller && $this->controller->isActive()) {\n            $this->controller->execute();\n            $this->controller->redirect();\n        }\n    }\n\n\n    public function onAdminSave(Event $event)\n    {\n        $obj           = $event['object'];\n        $adminPath \t   = trim($this->grav['admin']->base, '/');\n        $isPluginRoute = $this->grav['uri']->path() === \"/$adminPath/plugins/\" . $this->name;\n\n        if ($obj instanceof Data) {\n            if (!$isPluginRoute || !Helper::isGitInstalled()) {\n                return true;\n            }\n\n\n            $password = $obj->get('password', false);\n            if (!$password) {\n                $current_password = $this->git->getPassword();\n\n                if ($current_password && strpos($current_password, 'gitsync-') !== 0) {\n                    $current_password = Helper::encrypt($current_password);\n                }\n            } else {\n\n                $current_password = Helper::encrypt($password);\n            }\n\n            $obj->set('password', $current_password);\n        }\n\n        return $obj;\n    }\n\n\n    public function onAdminAfterSave(Event $event)\n    {\n        $obj           = $event['object'];\n        $adminPath\t   = trim($this->grav['admin']->base, '/');\n        $uriPath       = $this->grav['uri']->path();\n        $isPluginRoute = $uriPath === \"/$adminPath/plugins/\" . $this->name;\n\n        if ($obj instanceof PageInterface && !$this->grav['config']->get('plugins.git-sync.sync.on_save', true)) {\n            return;\n        }\n\n        if ($obj instanceof Data) {\n            $folders = $this->git->getConfig('folders', $event['object']->get('folders', []));\n            $data_type = preg_replace('\n            $data_type = explode('/', $data_type);\n            $data_type = array_shift($data_type);\n\n            if (null === $data_type || !Helper::isGitInstalled() || (!$isPluginRoute && !in_array($this->getFolderMapping($data_type), $folders, true))) {\n                return;\n            }\n\n            if ($isPluginRoute) {\n                $this->git->setConfig($obj->toArray());\n\n\n                $this->git->initializeRepository();\n\n\n                $this->git->setUser();\n                $this->git->addRemote();\n            }\n        }\n\n        $this->synchronize();\n    }\n\n    public function onAdminAfterSaveAs()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_save', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n    public function onAdminAfterDelete()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_delete', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n    public function onAdminAfterMedia()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_media', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n\n    public function onFormProcessed(Event $event)\n    {\n        $action = $event['action'];\n\n        if ($action === 'gitsync') {\n            $this->synchronize();\n        }\n    }\n\n\n    public function getFolderMapping($data_type)\n    {\n        switch ($data_type) {\n            case 'user':\n                return 'accounts';\n            case 'themes':\n                return 'config';\n            case 'config':\n            case 'data':\n            case 'plugins':\n            case 'pages':\n                return $data_type;\n        }\n\n        return null;\n    }\n\n\n    protected static function generateHash(int $len): string\n    {\n        $bytes = openssl_random_pseudo_bytes($len, $isStrong);\n\n        if ($bytes === false) {\n            throw new \\RuntimeException('Could not generate hash');\n        }\n\n        if ($isStrong === false) {\n\n            $isStrong = true;\n        }\n\n        return bin2hex($bytes);\n    }\n}\n",
        "gt": [
            "'grav-plugin-git-sync/vendor/composer/autoload_classmap.php'",
            "'grav-plugin-git-sync/vendor/composer/autoload_real.php'",
            "'grav-plugin-git-sync/vendor/autoload.php'",
            "'grav-plugin-git-sync/git-sync.php'"
        ]
    },
    {
        "files": [
            "'grav-plugin-git-sync/vendor/composer/autoload_real.php'",
            "'grav-plugin-git-sync/vendor/composer/autoload_classmap.php'",
            "'grav-plugin-git-sync/vendor/autoload.php'",
            "'grav-plugin-git-sync/git-sync.php'"
        ],
        "content": "'grav-plugin-git-sync/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        require __DIR__ . '/platform_check.php';\n\n        spl_autoload_register(array('ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader(\\dirname(\\dirname(__FILE__)));\n        spl_autoload_unregister(array('ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854', 'loadClassLoader'));\n\n        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());\n        if ($useStaticLoader) {\n            require __DIR__ . '/autoload_static.php';\n\n            call_user_func(\\Composer\\Autoload\\ComposerStaticInitc058e1b5c686df0909ec1cc39bb5d854::getInitializer($loader));\n        } else {\n            $map = require __DIR__ . '/autoload_namespaces.php';\n            foreach ($map as $namespace => $path) {\n                $loader->set($namespace, $path);\n            }\n\n            $map = require __DIR__ . '/autoload_psr4.php';\n            foreach ($map as $namespace => $path) {\n                $loader->setPsr4($namespace, $path);\n            }\n\n            $classMap = require __DIR__ . '/autoload_classmap.php';\n            if ($classMap) {\n                $loader->addClassMap($classMap);\n            }\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\n'grav-plugin-git-sync/vendor/composer/autoload_classmap.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'Composer\\\\InstalledVersions' => $vendorDir . '/composer/InstalledVersions.php',\n    'Grav\\\\Plugin\\\\GitSyncPlugin' => $baseDir . '/git-sync.php',\n    'SebastianBergmann\\\\Git\\\\Exception' => $vendorDir . '/sebastian/git/src/Exception/Exception.php',\n    'SebastianBergmann\\\\Git\\\\Git' => $vendorDir . '/sebastian/git/src/Git.php',\n    'SebastianBergmann\\\\Git\\\\RuntimeException' => $vendorDir . '/sebastian/git/src/Exception/RuntimeException.php',\n);\n\n'grav-plugin-git-sync/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer/autoload_real.php';\n\nreturn ComposerAutoloaderInitc058e1b5c686df0909ec1cc39bb5d854::getLoader();\n\n'grav-plugin-git-sync/git-sync.php'\n:<?php\n\nnamespace Grav\\Plugin;\n\nuse Composer\\Autoload\\ClassLoader;\nuse Grav\\Common\\Config\\Config;\nuse Grav\\Common\\Data\\Data;\nuse Grav\\Common\\Grav;\nuse Grav\\Common\\Page\\Interfaces\\PageInterface;\nuse Grav\\Common\\Plugin;\nuse Grav\\Common\\Scheduler\\Scheduler;\nuse Grav\\Plugin\\GitSync\\AdminController;\nuse Grav\\Plugin\\GitSync\\GitSync;\nuse Grav\\Plugin\\GitSync\\Helper;\nuse RocketTheme\\Toolbox\\Event\\Event;\n\n\nclass GitSyncPlugin extends Plugin\n{\n\n    protected $controller;\n\n    protected $git;\n\n\n    public static function getSubscribedEvents()\n    {\n        return [\n            'onPluginsInitialized'   => [\n                ['autoload', 100000],\n                ['onPluginsInitialized', 1000]\n            ],\n            'onPageInitialized'      => ['onPageInitialized', 0],\n            'onFormProcessed'        => ['onFormProcessed', 0],\n            'onSchedulerInitialized' => ['onSchedulerInitialized', 0]\n        ];\n    }\n\n\n    public function autoload() : ClassLoader\n    {\n        return require __DIR__ . '/vendor/autoload.php';\n    }\n\n\n    public static function generateWebhookSecret()\n    {\n        return static::generateHash(24);\n    }\n\n\n    public static function generateRandomWebhook()\n    {\n        return '/_git-sync-' . static::generateHash(6);\n    }\n\n\n    public function onPluginsInitialized()\n    {\n        $this->enable(['gitsync' => ['synchronize', 0]]);\n        $this->init();\n\n        if ($this->isAdmin()) {\n            $this->enable([\n                'onTwigTemplatePaths'  => ['onTwigTemplatePaths', 0],\n                'onTwigSiteVariables'  => ['onTwigSiteVariables', 0],\n                'onAdminMenu'          => ['onAdminMenu', 0],\n                'onAdminSave'          => ['onAdminSave', 0],\n                'onAdminAfterSave'     => ['onAdminAfterSave', 0],\n                'onAdminAfterSaveAs'   => ['onAdminAfterSaveAs', 0],\n                'onAdminAfterDelete'   => ['onAdminAfterDelete', 0],\n                'onAdminAfterAddMedia' => ['onAdminAfterMedia', 0],\n                'onAdminAfterDelMedia' => ['onAdminAfterMedia', 0],\n            ]);\n\n            return;\n        }\n\n        $config = $this->config->get('plugins.' . $this->name);\n        $route = $this->grav['uri']->route();\n        $webhook = $config['webhook'] ?? false;\n        $secret = $config['webhook_secret'] ?? false;\n        $enabled = $config['webhook_enabled'] ?? false;\n\n        if ($enabled && $route === $webhook && $_SERVER['REQUEST_METHOD'] === 'POST') {\n            if ($secret) {\n                if (!$this->isRequestAuthorized($secret)) {\n                    http_response_code(401);\n                    header('Content-Type: application/json');\n                    echo json_encode([\n                        'status' => 'error',\n                        'message' => 'Unauthorized request'\n                    ]);\n                    exit;\n                }\n            }\n            try {\n                $this->synchronize();\n                header('Content-Type: application/json');\n                echo json_encode([\n                    'status' => 'success',\n                    'message' => 'GitSync completed the synchronization'\n                ]);\n            } catch (\\Exception $e) {\n                http_response_code(500);\n                header('Content-Type: application/json');\n                echo json_encode([\n                    'status' => 'error',\n                    'message' => 'GitSync failed to synchronize'\n                ]);\n            }\n            exit;\n        }\n    }\n\n\n    public function isRequestAuthorized($secret)\n    {\n        if (isset($_SERVER['HTTP_X_HUB_SIGNATURE'])) {\n            $payload = file_get_contents('php:\n\n            return $this->isGithubSignatureValid($secret, $_SERVER['HTTP_X_HUB_SIGNATURE'], $payload);\n        }\n        if (isset($_SERVER['HTTP_X_GITLAB_TOKEN'])) {\n            return $this->isGitlabTokenValid($secret, $_SERVER['HTTP_X_GITLAB_TOKEN']);\n        } else {\n            $payload = file_get_contents('php:\n            return $this->isGiteaSecretValid($secret, $payload);\n        }\n\n        return false;\n    }\n\n\n    public function isGithubSignatureValid($secret, $signatureHeader, $payload)\n    {\n        [$algorithm, $signature] = explode('=', $signatureHeader);\n\n        return $signature === hash_hmac($algorithm, $payload, $secret);\n    }\n\n\n    public function isGitlabTokenValid($secret, $token)\n    {\n        return $secret === $token;\n    }\n\n\n    public function isGiteaSecretValid($secret, $payload)\n    {\n        $payload = json_decode($payload, true);\n        if (!empty($payload) && isset($payload['secret'])) {\n            return $secret === $payload['secret'];\n        }\n\n        return false;\n    }\n\n    public function onAdminMenu()\n    {\n        $base = rtrim($this->grav['base_url'], '/') . '/' . trim($this->grav['admin']->base, '/');\n        $options = [\n            'hint' => Helper::isGitInitialized() ? 'Synchronize GitSync' : 'Configure GitSync',\n            'class' => 'gitsync-sync',\n            'location' => 'pages',\n            'route' => Helper::isGitInitialized() ? 'admin' : 'admin/plugins/git-sync',\n            'icon' => 'fa-' . $this->grav['plugins']->get('git-sync')->blueprints()->get('icon')\n        ];\n\n        if (Helper::isGitInstalled()) {\n            if (Helper::isGitInitialized()) {\n                $options['data'] = [\n                    'gitsync-useraction' => 'sync',\n                    'gitsync-uri' => $base . '/plugins/git-sync'\n                ];\n            }\n\n            $this->grav['twig']->plugins_quick_tray['GitSync'] = $options;\n        }\n    }\n\n    public function init()\n    {\n        if ($this->isAdmin()) {\n\n            $this->controller = new AdminController($this);\n            $this->git = &$this->controller->git;\n        } else {\n            $this->git = new GitSync();\n        }\n    }\n\n\n    public function synchronize()\n    {\n        if (!Helper::isGitInstalled() || !Helper::isGitInitialized()) {\n            return true;\n        }\n\n        $this->grav->fireEvent('onGitSyncBeforeSynchronize');\n\n        if ($this->git->hasChangesToCommit()) {\n            $this->git->commit();\n        }\n\n\n        $this->git->sync();\n\n        $this->grav->fireEvent('onGitSyncAfterSynchronize');\n\n        return true;\n    }\n\n    public function onSchedulerInitialized(Event $event)\n    {\n\n        $config = Grav::instance()['config'];\n        $run_at = $config->get('plugins.git-sync.sync.cron_at', '0 12,23 * * *');\n\n        if ($config->get('plugins.git-sync.sync.cron_enable', false)) {\n\n            $scheduler = $event['scheduler'];\n            $job = $scheduler->addFunction('Grav\\Plugin\\GitSync\\Helper::synchronize', [], 'GitSync');\n            $job->at($run_at);\n        }\n    }\n\n\n    public function reset()\n    {\n        if (!Helper::isGitInstalled() || !Helper::isGitInitialized()) {\n            return true;\n        }\n\n        $this->grav->fireEvent('onGitSyncBeforeReset');\n\n        $this->git->reset();\n\n        $this->grav->fireEvent('onGitSyncAfterReset');\n\n        return true;\n    }\n\n\n    public function onTwigTemplatePaths()\n    {\n        $this->grav['twig']->twig_paths[] = __DIR__ . '/templates';\n    }\n\n\n    public function onTwigSiteVariables()\n    {\n\n        if (!class_exists(Helper::class)) {\n            return false;\n        }\n\n        $user = $this->grav['user'];\n        if (!$user->authenticated) {\n            return false;\n        }\n\n        $settings = [\n            'first_time'    => !Helper::isGitInitialized(),\n            'git_installed' => Helper::isGitInstalled()\n        ];\n\n        $this->grav['twig']->twig_vars['git_sync'] = $settings;\n\n        $adminPath = trim($this->grav['admin']->base, '/');\n        if ($this->grav['uri']->path() === \"/$adminPath/plugins/git-sync\") {\n            $this->grav['assets']->addCss('plugin:\n        } else {\n            $this->grav['assets']->addInlineJs('var GitSync = ' . json_encode($settings) . ';');\n        }\n\n        $this->grav['assets']->addJs('plugin:\n        $this->grav['assets']->addJs('plugin:\n        $this->grav['assets']->addCss('plugin:\n\n        return true;\n    }\n\n    public function onPageInitialized()\n    {\n        if ($this->controller && $this->controller->isActive()) {\n            $this->controller->execute();\n            $this->controller->redirect();\n        }\n    }\n\n\n    public function onAdminSave(Event $event)\n    {\n        $obj           = $event['object'];\n        $adminPath \t   = trim($this->grav['admin']->base, '/');\n        $isPluginRoute = $this->grav['uri']->path() === \"/$adminPath/plugins/\" . $this->name;\n\n        if ($obj instanceof Data) {\n            if (!$isPluginRoute || !Helper::isGitInstalled()) {\n                return true;\n            }\n\n\n            $password = $obj->get('password', false);\n            if (!$password) {\n                $current_password = $this->git->getPassword();\n\n                if ($current_password && strpos($current_password, 'gitsync-') !== 0) {\n                    $current_password = Helper::encrypt($current_password);\n                }\n            } else {\n\n                $current_password = Helper::encrypt($password);\n            }\n\n            $obj->set('password', $current_password);\n        }\n\n        return $obj;\n    }\n\n\n    public function onAdminAfterSave(Event $event)\n    {\n        $obj           = $event['object'];\n        $adminPath\t   = trim($this->grav['admin']->base, '/');\n        $uriPath       = $this->grav['uri']->path();\n        $isPluginRoute = $uriPath === \"/$adminPath/plugins/\" . $this->name;\n\n        if ($obj instanceof PageInterface && !$this->grav['config']->get('plugins.git-sync.sync.on_save', true)) {\n            return;\n        }\n\n        if ($obj instanceof Data) {\n            $folders = $this->git->getConfig('folders', $event['object']->get('folders', []));\n            $data_type = preg_replace('\n            $data_type = explode('/', $data_type);\n            $data_type = array_shift($data_type);\n\n            if (null === $data_type || !Helper::isGitInstalled() || (!$isPluginRoute && !in_array($this->getFolderMapping($data_type), $folders, true))) {\n                return;\n            }\n\n            if ($isPluginRoute) {\n                $this->git->setConfig($obj->toArray());\n\n\n                $this->git->initializeRepository();\n\n\n                $this->git->setUser();\n                $this->git->addRemote();\n            }\n        }\n\n        $this->synchronize();\n    }\n\n    public function onAdminAfterSaveAs()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_save', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n    public function onAdminAfterDelete()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_delete', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n    public function onAdminAfterMedia()\n    {\n        if ($this->grav['config']->get('plugins.git-sync.sync.on_media', true))\n        {\n            $this->synchronize();\n        }\n    }\n\n\n    public function onFormProcessed(Event $event)\n    {\n        $action = $event['action'];\n\n        if ($action === 'gitsync') {\n            $this->synchronize();\n        }\n    }\n\n\n    public function getFolderMapping($data_type)\n    {\n        switch ($data_type) {\n            case 'user':\n                return 'accounts';\n            case 'themes':\n                return 'config';\n            case 'config':\n            case 'data':\n            case 'plugins':\n            case 'pages':\n                return $data_type;\n        }\n\n        return null;\n    }\n\n\n    protected static function generateHash(int $len): string\n    {\n        $bytes = openssl_random_pseudo_bytes($len, $isStrong);\n\n        if ($bytes === false) {\n            throw new \\RuntimeException('Could not generate hash');\n        }\n\n        if ($isStrong === false) {\n\n            $isStrong = true;\n        }\n\n        return bin2hex($bytes);\n    }\n}\n",
        "gt": [
            "'grav-plugin-git-sync/vendor/composer/autoload_classmap.php'",
            "'grav-plugin-git-sync/vendor/composer/autoload_real.php'",
            "'grav-plugin-git-sync/vendor/autoload.php'",
            "'grav-plugin-git-sync/git-sync.php'"
        ]
    },
    {
        "files": [
            "'httpclient/tests/bootstrap.php'",
            "'httpclient/httpclient.inc.php'",
            "'httpclient/src/Request.php'"
        ],
        "content": "'httpclient/tests/bootstrap.php'\n:<?php\n\nrequire_once __DIR__ . '/../httpclient.inc.php';\n\n'httpclient/httpclient.inc.php'\n:<?php\n\n\nrequire_once __DIR__ . '/src/ParseInterface.php';\nrequire_once __DIR__ . '/src/HeaderTrait.php';\nrequire_once __DIR__ . '/src/Client.php';\nrequire_once __DIR__ . '/src/Connection.php';\nrequire_once __DIR__ . '/src/Response.php';\nrequire_once __DIR__ . '/src/Request.php';\nrequire_once __DIR__ . '/src/Processor.php';\n\n'httpclient/src/Request.php'\n:<?php\n\n\nnamespace hightman\\http;\n\n\nclass Request\n{\n    use HeaderTrait;\n\n\n    public $contextOptions;\n\n\n    public $disableProxy = false;\n\n    private $_url, $_urlParams, $_rawUrl, $_body;\n    private $_method = 'GET';\n    private $_maxRedirect = 5;\n    private $_postFields = [];\n    private $_postFiles = [];\n    private static $_dns = [];\n    private static $_mimes = [\n        'gif' => 'image/gif', 'png' => 'image/png', 'bmp' => 'image/bmp',\n        'jpeg' => 'image/jpeg', 'pjpg' => 'image/pjpg', 'jpg' => 'image/jpeg',\n        'tif' => 'image/tiff', 'htm' => 'text/html', 'css' => 'text/css',\n        'html' => 'text/html', 'txt' => 'text/plain', 'gz' => 'application/x-gzip',\n        'tgz' => 'application/x-gzip', 'tar' => 'application/x-tar',\n        'zip' => 'application/zip', 'hqx' => 'application/mac-binhex40',\n        'doc' => 'application/msword', 'pdf' => 'application/pdf',\n        'ps' => 'application/postcript', 'rtf' => 'application/rtf',\n        'dvi' => 'application/x-dvi', 'latex' => 'application/x-latex',\n        'swf' => 'application/x-shockwave-flash', 'tex' => 'application/x-tex',\n        'mid' => 'audio/midi', 'au' => 'audio/basic', 'mp3' => 'audio/mpeg',\n        'ram' => 'audio/x-pn-realaudio', 'ra' => 'audio/x-realaudio',\n        'rm' => 'audio/x-pn-realaudio', 'wav' => 'audio/x-wav', 'wma' => 'audio/x-ms-media',\n        'wmv' => 'video/x-ms-media', 'mpg' => 'video/mpeg', 'mpga' => 'video/mpeg',\n        'wrl' => 'model/vrml', 'mov' => 'video/quicktime', 'avi' => 'video/x-msvideo',\n    ];\n\n\n    public function __construct($url = null, $method = null)\n    {\n        if ($url !== null) {\n            $this->setUrl($url);\n        }\n        if ($method !== null) {\n            $this->setMethod($method);\n        }\n    }\n\n\n    public function __toString()\n    {\n        return $this->getUrl();\n    }\n\n\n    public function getMaxRedirect()\n    {\n        return $this->_maxRedirect;\n    }\n\n\n    public function setMaxRedirect($num)\n    {\n        $this->_maxRedirect = intval($num);\n    }\n\n\n    public function getRawUrl()\n    {\n        return $this->_rawUrl;\n    }\n\n\n    public function getUrl()\n    {\n        return $this->_url;\n    }\n\n\n    public function setUrl($url)\n    {\n        $this->_rawUrl = $url;\n        if (strncasecmp($url, 'http:\n            if (substr($url, 0, 1) != '/') {\n                $url = substr($_SERVER['SCRIPT_NAME'], 0, strrpos($_SERVER['SCRIPT_NAME'], '/') + 1) . $url;\n            }\n            $url = 'http:\n        }\n        $this->_url = str_replace('&amp;', '&', $url);\n        $this->_urlParams = null;\n    }\n\n\n    public function getUrlParams()\n    {\n        if ($this->_urlParams === null) {\n            $pa = @parse_url($this->getUrl());\n            $pa['scheme'] = isset($pa['scheme']) ? strtolower($pa['scheme']) : 'http';\n            if ($pa['scheme'] !== 'http' && $pa['scheme'] !== 'https') {\n                return false;\n            }\n            if (!isset($pa['host'])) {\n                return false;\n            }\n            if (!isset($pa['path'])) {\n                $pa['path'] = '/';\n            }\n\n            if (isset($pa['user']) && isset($pa['pass'])) {\n                $this->applyBasicAuth($pa['user'], $pa['pass']);\n            }\n\n            $port = isset($pa['port']) ? intval($pa['port']) : ($pa['scheme'] === 'https' ? 443 : 80);\n            $pa['ip'] = $this->hasHeader('x-server-ip') ?\n                $this->getHeader('x-server-ip') : self::getIp($pa['host']);\n            $pa['conn'] = ($pa['scheme'] === 'https' ? 'ssl' : 'tcp') . ':\n\n            if (!$this->hasHeader('host')) {\n                $this->setHeader('host', strtolower($pa['host']));\n            } else {\n                $pa['host'] = $this->getHeader('host');\n            }\n            $this->_urlParams = $pa;\n        }\n        return $this->_urlParams;\n    }\n\n\n    public function getUrlParam($key)\n    {\n        $pa = $this->getUrlParams();\n        return isset($pa[$key]) ? $pa[$key] : null;\n    }\n\n\n    public function getMethod()\n    {\n        return $this->_method;\n    }\n\n\n    public function setMethod($method)\n    {\n        $this->_method = strtoupper($method);\n    }\n\n\n    public function getBody()\n    {\n        $body = '';\n        if ($this->_method === 'POST' || $this->_method === 'PUT') {\n            if ($this->_body === null) {\n                $this->_body = $this->getPostBody();\n            }\n            $this->setHeader('content-length', strlen($this->_body));\n            $body = $this->_body . Client::CRLF;\n        }\n        return $body;\n    }\n\n\n    public function setBody($body)\n    {\n        $this->_body = $body;\n        $this->setHeader('content-length', $body === null ? null : strlen($body));\n    }\n\n\n    public function setJsonBody($data)\n    {\n        $body = json_encode($data, JSON_UNESCAPED_UNICODE);\n        $this->setHeader('content-type', 'application/json');\n        $this->setBody($body);\n    }\n\n\n    public function addPostField($key, $value)\n    {\n        $this->setMethod('POST');\n        $this->setBody(null);\n        if (!is_array($value)) {\n            $this->_postFields[$key] = strval($value);\n        } else {\n            $value = $this->formatArrayField($value);\n            foreach ($value as $k => $v) {\n                $k = $key . '[' . $k . ']';\n                $this->_postFields[$k] = $v;\n            }\n        }\n    }\n\n\n    public function addPostFile($key, $file, $content = null)\n    {\n        $this->setMethod('POST');\n        $this->setBody(null);\n        if ($content === null && is_file($file)) {\n            $content = @file_get_contents($file);\n        }\n        $this->_postFiles[$key] = [basename($file), $content];\n    }\n\n\n    protected function getPostBody()\n    {\n        $data = '';\n        if (count($this->_postFiles) > 0) {\n            $boundary = md5($this->_rawUrl . microtime());\n            foreach ($this->_postFields as $k => $v) {\n                $data .= '--' . $boundary . Client::CRLF . 'Content-Disposition: form-data; name=\"' . $k . '\"'\n                    . Client::CRLF . Client::CRLF . $v . Client::CRLF;\n            }\n            foreach ($this->_postFiles as $k => $v) {\n                $ext = strtolower(substr($v[0], strrpos($v[0], '.') + 1));\n                $type = isset(self::$_mimes[$ext]) ? self::$_mimes[$ext] : 'application/octet-stream';\n                $data .= '--' . $boundary . Client::CRLF . 'Content-Disposition: form-data; name=\"' . $k . '\"; filename=\"' . $v[0] . '\"'\n                    . Client::CRLF . 'Content-Type: ' . $type . Client::CRLF . 'Content-Transfer-Encoding: binary'\n                    . Client::CRLF . Client::CRLF . $v[1] . Client::CRLF;\n            }\n            $data .= '--' . $boundary . '--' . Client::CRLF;\n            $this->setHeader('content-type', 'multipart/form-data; boundary=' . $boundary);\n        } else {\n            if (count($this->_postFields) > 0) {\n                foreach ($this->_postFields as $k => $v) {\n                    $data .= '&' . rawurlencode($k) . '=' . rawurlencode($v);\n                }\n                $data = substr($data, 1);\n                $this->setHeader('content-type', 'application/x-www-form-urlencoded');\n            }\n        }\n        return $data;\n    }\n\n\n    protected static function getIp($host)\n    {\n        if (!isset(self::$_dns[$host])) {\n            self::$_dns[$host] = gethostbyname($host);\n        }\n        return self::$_dns[$host];\n    }\n\n\n    private function formatArrayField($arr, $pk = null)\n    {\n        $ret = [];\n        foreach ($arr as $k => $v) {\n            if ($pk !== null) {\n                $k = $pk . $k;\n            }\n            if (is_array($v)) {\n                $ret = array_merge($ret, $this->formatArrayField($v, $k . ']['));\n            } else {\n                $ret[$k] = $v;\n            }\n        }\n        return $ret;\n    }\n\n\n    private function applyBasicAuth($user, $pass)\n    {\n        $this->setHeader('authorization', 'Basic ' . base64_encode($user . ':' . $pass));\n    }\n}\n",
        "gt": [
            "'httpclient/src/Request.php'",
            "'httpclient/httpclient.inc.php'",
            "'httpclient/tests/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'\n:<?php\n\n\n\n$vendorDir = dirname(dirname(__FILE__));\n$baseDir = dirname($vendorDir);\n\nreturn array(\n    'CFPropertyList' => array($vendorDir . '/rodneyrehm/plist/classes'),\n);\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_namespaces.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'",
            "'bootstrap-blocks-wordpress-plugin/src/row/class-row-block-type.php'",
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'"
        ],
        "content": "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'\n:<?php\n\n\nnamespace WP_Bootstrap_Blocks;\n\nuse WP_Bootstrap_Blocks\\Button\\Button_Block_Type;\nuse WP_Bootstrap_Blocks\\Column\\Column_Block_Type;\nuse WP_Bootstrap_Blocks\\Container\\Container_Block_Type;\nuse WP_Bootstrap_Blocks\\Row\\Row_Block_Type;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nclass WP_Bootstrap_Blocks {\n\n\n\tprotected static $instance = null;\n\n\n\tpublic static $version = '5.2.0';\n\n\n\tpublic $token = 'wp-bootstrap-blocks';\n\n\n\tpublic $assets_dir;\n\n\n\tpublic $assets_url;\n\n\n\tpublic $languages_dir;\n\n\n\tpublic $languages_dir_full;\n\n\n\tpublic function __construct() {\n\t\t$this->define_constants();\n\t\t$this->init_plugin_environment();\n\t\t$this->includes();\n\t\t$this->init_hooks();\n\t\t$this->register_block_types();\n\t\tSettings::init( $this->assets_dir, $this->assets_url );\n\t}\n\n\n\tprotected function define_constants() {\n\t\tif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_ABSPATH' ) ) {\n\t\t\tdefine( 'WP_BOOTSTRAP_BLOCKS_ABSPATH', trailingslashit( dirname( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t}\n\t}\n\n\n\tprotected function init_plugin_environment() {\n\n\t\t$this->assets_dir = WP_BOOTSTRAP_BLOCKS_ABSPATH . 'build/';\n\t\t$this->assets_url = esc_url( trailingslashit( plugins_url( '/build/', WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t$this->languages_dir = dirname( plugin_basename( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) . '/languages/';\n\t\t$this->languages_dir_full = plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'languages/';\n\t}\n\n\n\tpublic function includes() {\n\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/wp-bootstrap-blocks-functions.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/class-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/container/class-container-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/row/class-row-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/column/class-column-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/button/class-button-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/settings/class-settings.php';\n\t}\n\n\n\tprotected function init_hooks() {\n\n\t\tadd_action( 'enqueue_block_assets', array( $this, 'enqueue_block_assets' ) );\n\n\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'enqueue_block_editor_assets' ), 99 );\n\n\n\t\tif ( class_exists( 'WP_Block_Editor_Context' ) ) {\n\n\t\t\tadd_filter( 'block_categories_all', array( $this, 'register_custom_block_category' ), 10, 2 );\n\t\t} else {\n\t\t\tadd_filter( 'block_categories', array( $this, 'register_custom_block_category_old' ), 10, 2 );\n\t\t}\n\n\n\t\tadd_action( 'plugins_loaded', array( $this, 'load_plugin_textdomain' ) );\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'set_script_translations' ), 100 );\n\n\n\t\tadd_action( 'init', array( $this, 'check_version' ) );\n\t}\n\n\n\tpublic function enqueue_block_assets() {\n\n\t\t$enqueue_block_assets = apply_filters( 'wp_bootstrap_blocks_enqueue_block_assets', true );\n\t\tif ( ! $enqueue_block_assets ) {\n\t\t\treturn;\n\t\t}\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-styles',\n\t\t\tesc_url( $this->assets_url ) . 'style-index.css',\n\t\t\tarray(),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function enqueue_block_editor_assets() {\n\n\t\t$index_path = $this->assets_dir . 'index.js';\n\t\t$index_url = esc_url( $this->assets_url ) . 'index.js';\n\t\t$index_asset_file = $this->assets_dir . 'index.asset.php';\n\t\t$index_asset = file_exists( $index_asset_file )\n\t\t\t? require_once $index_asset_file\n\t\t\t: null;\n\t\t$index_dependencies = isset( $index_asset['dependencies'] ) ? $index_asset['dependencies'] : array();\n\t\t$index_version = isset( $index_asset['version'] ) ? $index_asset['version'] : filemtime( $index_path );\n\n\t\twp_enqueue_script(\n\t\t\t$this->token . '-js',\n\t\t\t$index_url,\n\t\t\t$index_dependencies,\n\t\t\t$index_version,\n\t\t\ttrue\n\t\t);\n\n\t\twp_localize_script(\n\t\t\t$this->token . '-js',\n\t\t\t'wpBootstrapBlocks',\n\t\t\tarray(\n\t\t\t\t'bootstrapVersion' => Settings::get_bootstrap_version(),\n\t\t\t\t'isBootstrap5Active' => Settings::is_bootstrap_5_active(),\n\t\t\t\t'isCssGridEnabled' => Settings::is_css_grid_enabled(),\n\t\t\t)\n\t\t);\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-editor-styles',\n\t\t\tesc_url( $this->assets_url ) . 'index.css',\n\t\t\tarray( 'wp-edit-blocks' ),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function register_custom_block_category( $block_categories, $block_editor_context ) {\n\t\treturn $this->add_custom_block_category( $block_categories );\n\t}\n\n\n\tpublic function register_custom_block_category_old( $categories, $post ) {\n\t\treturn $this->add_custom_block_category( $categories );\n\t}\n\n\n\tprotected function add_custom_block_category( $block_categories ) {\n\t\treturn array_merge(\n\t\t\t$block_categories,\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'slug' => 'wp-bootstrap-blocks',\n\t\t\t\t\t'title' => __( 'Bootstrap Blocks', 'wp-bootstrap-blocks' ),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t}\n\n\n\tpublic function load_plugin_textdomain() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\tload_plugin_textdomain( $domain, false, $this->languages_dir );\n\t}\n\n\n\tpublic function set_script_translations() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\twp_set_script_translations( $this->token . '-js', $domain, $this->languages_dir_full );\n\t}\n\n\n\tpublic function register_block_types() {\n\t\tnew Container_Block_Type();\n\t\tnew Row_Block_Type();\n\t\tnew Column_Block_Type();\n\t\tnew Button_Block_Type();\n\t}\n\n\n\tpublic static function instance() {\n\t\tif ( is_null( self::$instance ) ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\n\t\treturn self::$instance;\n\t}\n\n\n\tpublic function __clone() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function __wakeup() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function check_version() {\n\t\tif ( defined( 'IFRAME_REQUEST' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$transient_name = 'wp_bootstrap_blocks_version';\n\n\t\t$old_version = get_transient( $transient_name );\n\t\tif ( false === $old_version ) {\n\t\t\t$old_version = get_option( $this->token . '_version' );\n\t\t\tset_transient( $transient_name, $old_version, 5 * MINUTE_IN_SECONDS );\n\t\t}\n\t\t$new_version = self::$version;\n\t\tif ( $old_version !== $new_version ) {\n\t\t\t$this->log_version_number();\n\t\t\tdelete_transient( $transient_name );\n\n\n\t\t\tdo_action( $this->token . '_updated', $new_version, $old_version );\n\t\t}\n\t}\n\n\n\tprotected function log_version_number() {\n\t\tdelete_option( $this->token . '_version' );\n\t\tupdate_option( $this->token . '_version', self::$version );\n\t}\n}\n\n'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'\n:<?php\n\n\n\nrequire_once dirname( __DIR__ ) . '/vendor/autoload.php';\n\n\n\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\n\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = getenv( 'WP_PHPUNIT__DIR' );\n}\n\n\nif ( ! $_tests_dir ) {\n\t$_try_tests_dir = __DIR__ . '/../../../../../tests/phpunit';\n\tif ( file_exists( $_try_tests_dir . '/includes/functions.php' ) ) {\n\t\t$_tests_dir = $_try_tests_dir;\n\t}\n}\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = '/tmp/wordpress-tests-lib';\n}\n\n\nrequire_once $_tests_dir . '/includes/functions.php';\n\n\n\ndefine( 'GUTENBERG_LOAD_VENDOR_SCRIPTS', false );\n\n\nfunction _manually_load_plugin() {\n\trequire dirname( __DIR__ ) . '/wp-bootstrap-blocks.php';\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\n\n\nrequire $_tests_dir . '/includes/bootstrap.php';\n\n\nrequire_once __DIR__ . '/wp-bootstrap-blocks-unittestcase.php';\n\n'bootstrap-blocks-wordpress-plugin/src/row/class-row-block-type.php'\n:<?php\n\n\nnamespace WP_Bootstrap_Blocks\\Row;\n\nuse WP_Bootstrap_Blocks\\Block_Type;\nuse WP_Bootstrap_Blocks\\Settings;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\nif ( ! class_exists( '\\WP_Bootstrap_Blocks\\Row\\Row_Block_Type', false ) ) :\n\n\n\tclass Row_Block_Type extends Block_Type {\n\n\t\tprotected $name = 'wp-bootstrap-blocks/row';\n\n\n\t\tprotected $attributes = array(\n\t\t\t'template' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'noGutters' => array(\n\t\t\t\t'type' => 'boolean',\n\t\t\t),\n\t\t\t'alignment' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'verticalAlignment' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'editorStackColumns' => array(\n\t\t\t\t'type' => 'boolean',\n\t\t\t),\n\t\t\t'horizontalGutters' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'verticalGutters' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t\t'cssGridGutters' => array(\n\t\t\t\t'type' => 'string',\n\t\t\t),\n\t\t);\n\n\n\t\tprotected $default_attributes = array(\n\t\t\t'template' => '1-1',\n\t\t\t'noGutters' => false,\n\t\t\t'alignment' => '',\n\t\t\t'verticalAlignment' => '',\n\t\t\t'editorStackColumns' => false,\n\t\t\t'horizontalGutters' => '',\n\t\t\t'verticalGutters' => '',\n\t\t\t'cssGridGutters' => '',\n\t\t);\n\n\n\t\tprotected function get_template_name() {\n\t\t\t$template_name = parent::get_template_name();\n\t\t\tif ( Settings::is_css_grid_enabled() ) {\n\t\t\t\t$template_name .= '-css-grid';\n\t\t\t}\n\t\t\treturn $template_name;\n\t\t}\n\t}\n\nendif;\n\n'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'\n:<?php\n\n\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE' ) ) {\n\tdefine( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE', __FILE__ );\n}\n\n\nif ( ! class_exists( \\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::class ) ) {\n\trequire_once plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'src/class-wp-bootstrap-blocks.php';\n}\n\n\n\\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::instance();\n",
        "gt": [
            "'bootstrap-blocks-wordpress-plugin/src/row/class-row-block-type.php'",
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'twich/www/redis/Rediska/Zend/Session/SaveHandler/Redis.php'",
            "'twich/www/redis/Rediska/Exception.php'",
            "'twich/www/redis/Rediska/Zend/Session/Set.php'",
            "'twich/www/redis/Rediska/Key/Exception.php'",
            "'twich/www/redis/Rediska/Key/Set.php'",
            "'twich/www/redis/Rediska/Key/Abstract.php'"
        ],
        "content": "'twich/www/redis/Rediska/Zend/Session/SaveHandler/Redis.php'\n:<?php\n\n\nrequire_once 'Rediska.php';\n\n\nrequire_once 'Rediska/Zend/Session/Set.php';\n\n\nrequire_once 'Zend/Session.php';\n\n\nrequire_once 'Zend/Config.php';\n\n\nrequire_once 'Zend/Session/SaveHandler/Interface.php';\n\n\nrequire_once 'Zend/Session/SaveHandler/Exception.php';\n\n\nclass Rediska_Zend_Session_SaveHandler_Redis implements Zend_Session_SaveHandler_Interface\n{\n\n    protected $_rediska;\n\n\n    protected $_set;\n\n\n    protected $_options = array(\n        'keyprefix'      => 'PHPSESSIONS_',\n        'lifetime'       => null,\n    );\n\n\n    public function __construct($options = array())\n    {\n    \tif ($options instanceof Zend_Config) {\n    \t\t$options = $options->toArray();\n    \t}\n\n\n    \t$this->_options['lifetime'] = (integer)ini_get('session.gc_maxlifetime');\n\n\n        $defaultInstance = Rediska::getDefaultInstance();\n        if ($defaultInstance && !isset($options['rediskaOptions'])) {\n            $this->_rediska = $defaultInstance;\n        } else {\n            $this->_rediska = new Rediska($options['rediskaOptions']);\n            unset($options['rediskaOptions']);\n        }\n\n    \t$this->setOptions($options);\n\n        Rediska_Zend_Session_Set::setSaveHandler($this);\n\n        $this->_set = new Rediska_Zend_Session_Set();\n    }\n\n\n    public function __destruct()\n    {\n        Zend_Session::writeClose();\n    }\n\n\n    public function open($save_path, $name)\n    {\n        return true;\n    }\n\n\n    public function close()\n    {\n        return true;\n    }\n\n\n    public function read($id)\n    {\n        return $this->_rediska->get($this->_getKeyName($id));\n    }\n\n\n    public function write($id, $data)\n    {\n    \t$this->_set[] = $id;\n\n        $reply = $this->_rediska->set($this->_getKeyName($id), $data);\n\n        if ($reply) {\n            $this->_rediska->expire($this->_getKeyName($id), $this->_options['lifetime']);\n        }\n\n        return $reply;\n    }\n\n\n    public function destroy($id)\n    {\n        $this->_set->remove($id);\n\n        $this->_rediska->delete($this->_getKeyName($id));\n\n        return true;\n    }\n\n\n    public function gc($maxlifetime)\n    {\n    \t$sessions = $this->_set->toArray();\n\n    \tif (!empty($sessions)) {\n        \tforeach($sessions as &$session) {\n        \t\t$session = $this->_getKeyName($session);\n        \t}\n\n\n        \t$lifeSession = $this->_rediska->get($sessions);\n        \tforeach($sessions as $session) {\n        \t\tif (!isset($lifeSession[$session])) {\n        \t\t\t$sessionWithoutPrefix = substr($session, strlen($this->_options['keyprefix']));\n        \t\t\t$this->_set->remove($sessionWithoutPrefix);\n        \t\t}\n        \t}\n    \t}\n\n    \treturn true;\n    }\n\n\n    public function setOptions(array $options)\n    {\n        foreach($options as $name => $value) {\n            if (method_exists($this, \"set$name\")) {\n                call_user_func(array($this, \"set$name\"), $value);\n            } else {\n                $this->setOption($name, $value);\n            }\n        }\n\n        return $this;\n    }\n\n\n    public function setOption($name, $value)\n    {\n    \t$lowerName = strtolower($name);\n\n        if (!array_key_exists($lowerName, $this->_options)) {\n            throw new Zend_Session_SaveHandler_Exception(\"Unknown option '$name'\");\n        }\n\n        $this->_options[$lowerName] = $value;\n\n        return $this;\n    }\n\n\n    public function getOption($name)\n    {\n    \t$lowerName = strtolower($name);\n\n        if (!array_key_exists($lowerName, $this->_options)) {\n            throw new Zend_Session_SaveHandler_Exception(\"Unknown option '$name'\");\n        }\n\n        return $this->_options[$lowerName];\n    }\n\n\n    public function setRediska(Rediska $rediska)\n    {\n        $this->_rediska = $rediska;\n\n        return $this;\n    }\n\n\n    public function getRediska()\n    {\n        return $this->_rediska;\n    }\n\n\n    protected function _getKeyName($id)\n    {\n        return $this->_options['keyprefix'] . $id;\n    }\n}\n'twich/www/redis/Rediska/Exception.php'\n:<?php\n\n\nclass Rediska_Exception extends Exception\n{\n\n}\n'twich/www/redis/Rediska/Zend/Session/Set.php'\n:<?php\n\n\nrequire_once 'Rediska/Key/Set.php';\n\n\nclass Rediska_Zend_Session_Set extends Rediska_Key_Set\n{\n\n\tprotected static $_saveHandler;\n\n\n\tpublic function __construct()\n\t{\n\t\tif (!self::$_saveHandler) {\n\t\t\tthrow new Rediska_Key_Exception('You must initialize Rediska_Zend_Session_SaveHandler_Redis before');\n\t\t}\n\n\t\t$this->setRediska(self::getSaveHandler()->getRediska());\n\n\t\tparent::__construct(self::getSaveHandler()->getOption('keyPrefix') . 'sessions');\n\t}\n\n\n\tpublic static function getSaveHandler()\n\t{\n\t\treturn self::$_saveHandler;\n\t}\n\n\n\tpublic static function setSaveHandler(Rediska_Zend_Session_SaveHandler_Redis $saveHandler)\n\t{\n\t\tself::$_saveHandler = $saveHandler;\n\n\t\treturn true;\n\t}\n}\n'twich/www/redis/Rediska/Key/Exception.php'\n:<?php\n\n\nrequire_once 'Rediska/Exception.php';\n\n\nclass Rediska_Key_Exception extends Rediska_Exception\n{\n\n}\n'twich/www/redis/Rediska/Key/Set.php'\n:<?php\n\n\nrequire_once 'Rediska/Key/Abstract.php';\n\n\nclass Rediska_Key_Set extends Rediska_Key_Abstract implements IteratorAggregate, ArrayAccess, Countable\n{\n\n    public function add($value)\n    {\n        $result = $this->_getRediskaOn()->addToSet($this->_name, $value);\n\n        if ($result && !is_null($this->_expire)) {\n            $this->expire($this->_expire, $this->_isExpireTimestamp);\n        }\n\n        return $result;\n    }\n\n\n    public function remove($value)\n    {\n        $result = $this->_getRediskaOn()->deleteFromSet($this->_name, $value);\n\n        if ($result && !is_null($this->_expire)) {\n        \t$this->expire($this->_expire, $this->_isExpireTimestamp);\n        }\n\n        return $result;\n    }\n\n\n    public function move($set, $value)\n    {\n    \tif ($set instanceof Rediska_Key_Set) {\n    \t\t$set = $set->getName();\n    \t}\n\n    \treturn $this->_getRediskaOn()->moveToSet($this->_name, $set, $value);\n    }\n\n\n    public function count()\n    {\n        return $this->_getRediskaOn()->getSetLength($this->_name);\n    }\n\n\n    public function exists($value)\n    {\n        return $this->_getRediskaOn()->existsInSet($this->_name, $value);\n    }\n\n\n    public function intersect($setOrSets, $storeKeyName = null)\n    {\n    \t$sets = $this->_prepareSetsForCompare($setOrSets);\n\n    \treturn $this->_getRediskaOn()->intersectSets($sets, $storeKeyName);\n    }\n\n\n    public function union($setOrSets, $storeKeyName = null)\n    {\n        $sets = $this->_prepareSetsForCompare($setOrSets);\n\n        return $this->_getRediskaOn()->unionSets($sets, $storeKeyName);\n    }\n\n\n    public function diff($setOrSets, $storeKeyName = null)\n    {\n        $sets = $this->_prepareSetsForCompare($setOrSets);\n\n        return $this->_getRediskaOn()->diffSets($sets, $storeKeyName);\n    }\n\n\n    public function sort($options = array())\n    {\n        return $this->_getRediskaOn()->sort($this->_name, $options);\n    }\n\n\n    public function toArray($sort = null)\n    {\n        return $this->_getRediskaOn()->getSet($this->_name, $sort);\n    }\n\n\n    public function fromArray(array $array)\n    {\n\n        $pipeline = $this->_getRediskaOn()->pipeline();\n        foreach($array as $item) {\n            $pipeline->addToSet($this->_name, $item);\n        }\n\n        if (!is_null($this->_expire)) {\n        \t$pipeline->expire($this->_name, $this->_expire, $this->_isExpireTimestamp);\n        }\n\n        $pipeline->execute();\n\n        return true;\n    }\n\n\n\n    public function getIterator()\n    {\n        return new ArrayObject($this->toArray());\n    }\n\n    public function offsetSet($offset, $value)\n    {\n        if (!is_null($offset)) {\n            throw new Rediska_Key_Exception('Offset is not allowed in sets');\n        }\n\n        $this->add($value);\n\n        return $value;\n    }\n\n    public function offsetExists($value)\n    {\n        throw new Rediska_Key_Exception('Offset is not allowed in sets');\n    }\n\n    public function offsetUnset($value)\n    {\n        throw new Rediska_Key_Exception('Offset is not allowed in sets');\n    }\n\n    public function offsetGet($value)\n    {\n        throw new Rediska_Key_Exception('Offset is not allowed in sets');\n    }\n\n    protected function _prepareSetsForCompare($setOrSets)\n    {\n        if (!is_array($setOrSets)) {\n            $sets = array($setOrSets);\n        } else {\n            $sets = $setOrSets;\n        }\n\n        foreach($sets as &$set) {\n            if ($set instanceof Rediska_Key_Set) {\n                $set = $set->getName();\n            }\n        }\n\n        if (!in_array($this->_name, $sets)) {\n            array_unshift($sets, $this->_name);\n        }\n\n        return $sets;\n    }\n}\n'twich/www/redis/Rediska/Key/Abstract.php'\n:<?php\n\n\nrequire_once 'Rediska.php';\n\n\nrequire_once 'Rediska/Key/Exception.php';\n\n\nabstract class Rediska_Key_Abstract\n{\n\n\tprotected $_name;\n\n\n\tprotected $_rediska;\n\n\n    protected $_expire;\n\n\n    protected $_isExpireTimestamp = false;\n\n\n    protected $_serverAlias;\n\n\n\tpublic function __construct($name, $expire = null, $serverAlias = null)\n\t{\n\t\t$this->_name        = $name;\n\t\t$this->_expire      = $expire;\n\t\t$this->_serverAlias = $serverAlias;\n\n\t\t$this->_setupRediskaDefaultInstance();\n\t}\n\n\n\tpublic function delete()\n\t{\n\t\treturn $this->_getRediskaOn()->delete($this->_name);\n\t}\n\n\n\tpublic function isExists()\n\t{\n\t\treturn $this->_getRediskaOn()->exists($this->_name);\n\t}\n\n\n\tpublic function getType()\n\t{\n\t\treturn $this->_getRediskaOn()->getType($this->_name);\n\t}\n\n\n\tpublic function rename($newName, $overwrite = true)\n\t{\n\t\ttry {\n            $this->_getRediskaOn()->rename($this->_name, $newName, $overwrite);\n\t\t} catch (Rediska_Exception $e) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->_name = $newName;\n\n        if (!is_null($this->_expire)) {\n            $this->expire($this->_expire, $this->_isExpireTimestamp);\n        }\n\n\t\treturn true;\n\t}\n\n\n\tpublic function expire($secondsOrTimestamp, $isTimestamp = false)\n\t{\n\t\treturn $this->_getRediskaOn()->expire($this->_name, $secondsOrTimestamp, $isTimestamp);\n\t}\n\n\n\tpublic function getLifetime()\n\t{\n\t\treturn $this->_getRediskaOn()->getLifetime($this->_name);\n\t}\n\n\n\tpublic function moveToDb($dbIndex)\n\t{\n\t\t$result = $this->_getRediskaOn()->moveToDb($this->_name, $dbIndex);\n\n        if ($result && !is_null($this->_expire)) {\n            $this->expire($this->_expire, $this->_isExpireTimestamp);\n        }\n\n        return $result;\n\t}\n\n\n\tpublic function getName()\n\t{\n\t\treturn $this->_name;\n\t}\n\n\n\tpublic function setName($name)\n\t{\n\t\t$this->name = $name;\n\n\t\treturn $this;\n\t}\n\n\n    public function setExpire($secondsOrTimestamp, $isTimestamp = false)\n    {\n        $this->_expire = $secondsOrTimestamp;\n        $this->_isExpireTimestamp = $isTimestamp;\n\n        return $this;\n    }\n\n\n    public function getExpire()\n    {\n        return $this->_expire;\n    }\n\n\n    public function isExpireTimestamp()\n    {\n        return $this->_isExpireTimestamp;\n    }\n\n\n    public function setServerAlias($serverAlias)\n    {\n    \t$this->_serverAlias = $serverAlias;\n\n    \treturn $this;\n    }\n\n\n    public function getServerAlias()\n    {\n    \treturn $this->_serverAlias;\n    }\n\n\n    public function setRediska(Rediska $rediska)\n    {\n        $this->_rediska = $rediska;\n\n        return $this;\n    }\n\n\n    public function getRediska()\n    {\n        if (!$this->_rediska instanceof Rediska) {\n            throw new Rediska_Key_Exception('Rediska instance not found for ' . get_class($this));\n        }\n\n        return $this->_rediska;\n    }\n\n\n    protected function _getRediskaOn()\n    {\n    \t$rediska = $this->getRediska();\n\n    \tif (!is_null($this->_serverAlias)) {\n    \t\t$rediska = $rediska->on($this->_serverAlias);\n    \t}\n\n    \treturn $rediska;\n    }\n\n\n    protected function _setupRediskaDefaultInstance()\n    {\n        $this->_rediska = Rediska::getDefaultInstance();\n        if (!$this->_rediska) {\n            $this->_rediska = new Rediska();\n        }\n    }\n}",
        "gt": [
            "'twich/www/redis/Rediska/Exception.php'",
            "'twich/www/redis/Rediska/Key/Exception.php'",
            "'twich/www/redis/Rediska/Key/Abstract.php'",
            "'twich/www/redis/Rediska/Key/Set.php'",
            "'twich/www/redis/Rediska/Zend/Session/Set.php'",
            "'twich/www/redis/Rediska/Zend/Session/SaveHandler/Redis.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/inc/firebird.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/iframe_content.php'"
        ],
        "content": "'firebirdwebadmin/inc/firebird.inc.php'\n:<?php\n\nfunction get_preset_charsets($server_family = null, $server_version = null)\n{\n    $charsets = array('ASCII',\n                      'BIG_5',\n                      'CYRL',\n                      'DOS437',\n                      'DOS850',\n                      'DOS852',\n                      'DOS857',\n                      'DOS860',\n                      'DOS861',\n                      'DOS863',\n                      'DOS865',\n                      'EUCJ_0208',\n                      'GB_2312',\n                      'ISO8859_1',\n                      'KSC_5601',\n                      'NEXT',\n                      'NONE',\n                      'OCTETS',\n                      'SJIS_0208',\n                      'UNICODE_FSS',\n                      'WIN1250',\n                      'WIN1251',\n                      'WIN1252',\n                      'WIN1253',\n                      'WIN1254',\n                      'CP943C',\n                      'DOS737',\n                      'DOS775',\n                      'DOS858',\n                      'DOS862',\n                      'DOS864',\n                      'DOS866',\n                      'DOS869',\n                      'GB18030',\n                      'GBK',\n                      'WIN1255',\n                      'WIN1256',\n                      'WIN1257',\n                      'ISO8859_2',\n                      'ISO8859_3',\n                      'ISO8859_4',\n                      'ISO8859_5',\n                      'ISO8859_6',\n                      'ISO8859_7',\n                      'ISO8859_8',\n                      'ISO8859_9',\n                      'ISO8859_13',\n                      'KOI8R',\n                      'KOI8U',\n                      'TIS620',\n                      'UTF8',\n                      'WIN1258'\n                    );\n    asort($charsets);\n\n    return $charsets;\n}\n\n$fieldtypes = array(7 => 'SMALLINT',\n            8 => 'INTEGER',\n            9 => 'QUAD',\n           10 => 'FLOAT',\n           11 => 'D_FLOAT',\n           12 => 'DATE',\n           13 => 'TIME',\n           14 => 'CHAR',\n           16 => 'INT64',\n           27 => 'DOUBLE',\n           35 => 'TIMESTAMP',\n           37 => 'VARCHAR',\n           40 => 'CSTRING',\n          261 => 'BLOB', );\n\n\n\n\nfunction get_datatypes($server_family = null, $server_version = null)\n{\n    $datatypes = array(7 => 'SMALLINT',\n                       8 => 'INTEGER',\n                       10 => 'FLOAT',\n                       27 => 'DOUBLE',\n                       701 => 'DECIMAL',\n                       702 => 'NUMERIC',\n                       14 => 'CHARACTER',\n                       37 => 'VARCHAR',\n                       12 => 'DATE',\n                       13 => 'TIME',\n                       35 => 'TIMESTAMP',\n                       261 => 'BLOB',\n                       40 => 'CSTRING',\n                       16 => 'BIGINT',\n                       );\n\n    return $datatypes;\n}\n\n$fk_actions = array(0 => 'NO ACTION',\n                    1 => 'CASCADE',\n                    2 => 'SET DEFAULT',\n                    3 => 'SET NULL',\n                    );\n\n$pagesizes = array(4096, 8192, 16384);\n\n$server_types = array('other',\n                      'FB_2.1',\n                      'FB_2.5',\n                      'FB_3.0',\n                      'FB_3.5',\n                      'FB_4.0',\n                      );\n\n\n\n\nfunction get_reserved_words($server_family, $server_version)\n{\n    $reserved_words =\n        array('ACTION', 'ACTIVE', 'ADD', 'ADMIN', 'AFTER', 'ALL', 'ALTER', 'AND', 'ANY',\n              'AS', 'ASC', 'ASCENDING', 'AT', 'AUTO', 'AUTODLL', 'AVG', 'BASED', 'BASENAME',\n              'BASE_NAME', 'BEFORE', 'BEGIN', 'BETWEEN', 'BLOB', 'BLOBEDIT', 'BUFFER', 'BY',\n              'CACHE', 'CASCADE', 'CAST', 'CHAR', 'CHARACTER', 'CHARACTER_LENGTH',\n              'CHAR_LENGTH', 'CHECK', 'CHECK_POINT_LEN', 'CHECK_POINT_LENGTH', 'COLLATE',\n              'COLUMN', 'COMMIT', 'COMMITTED', 'COMPILETIME', 'COMPUTED', 'CLOSE',\n              'CONDITIONAL', 'CONNECT', 'CONSTRAINT', 'CONTAINING', 'CONTINUE', 'COUNT',\n              'CREATE', 'CSTRING', 'CURRENT', 'CURRENT_DATE', 'CURRENT_TIME',\n              'CURRENT_TIMESTAMP', 'CURSOR', 'DATABASE', 'DATE', 'DAY', 'DB_KEY', 'DEBUG',\n              'DEC', 'DECIMAL', 'DECLARE', 'DEFAULT', 'DELETE', 'DESC', 'DESCENDING',\n              'DESCRIBE', 'DESCRIPTOR', 'DISCONNECT', 'DISPLAY', 'DISTINCT', 'DO', 'DOMAIN',\n              'DOUBLE', 'DROP', 'ECHO', 'EDIT', 'ELSE', 'END', 'ENTRY_POINT', 'ESCAPE',\n              'EVENT', 'EXCEPTION', 'EXECUTE', 'EXISTS', 'EXIT', 'EXTERN', 'EXTERNAL',\n              'EXTRACT', 'FETCH', 'FILE', 'FILTER', 'FLOAT', 'FOR', 'FOREIGN', 'FOUND',\n              'FREE_IT', 'FROM', 'FULL', 'FUNCTION', 'GDSCODE', 'GENERATOR', 'GEN_ID',\n              'GLOBAL', 'GOTO', 'GRANT', 'GROUP', 'GROUP_COMMIT_WAIT',\n              'GROUP_COMMIT_WAIT_TIME', 'HAVING', 'HELP', 'HOUR', 'IF', 'IMMEDIATE', 'IN',\n              'INACTIVE', 'INDEX', 'INDICATOR', 'INIT', 'INNER', 'INPUT', 'INPUT_TYPE',\n              'INSERT', 'INT', 'INTEGER', 'INTO', 'IS', 'ISOLATION', 'ISQL', 'JOIN', 'KEY',\n              'LC_MESSAGES', 'LC_TYPE', 'LEFT', 'LENGTH', 'LEV', 'LEVEL', 'LIKE', 'LOGFILE',\n              'LOG_BUFFER_SIZE', 'LOG_BUF_SIZE', 'LONG', 'MANUAL', 'MAX', 'MAXIMUM',\n              'MAXIMUM_SEGMENT', 'MAX_SEGMENT', 'MERGE', 'MESSAGE', 'MIN', 'MINIMUM',\n              'MINUTE', 'MODULE_NAME', 'MONTH', 'NAMES', 'NATIONAL', 'NATURAL', 'NCHAR',\n              'NO', 'NOAUTO', 'NOT', 'NULL', 'NUMERIC', 'NUM_LOG_BUFS', 'NUM_LOG_BUFFERS',\n              'OCTET_LENGTH', 'OF', 'ON', 'ONLY', 'OPEN', 'OPTION', 'OR', 'ORDER', 'OUTER',\n              'OUTPUT', 'OUTPUT_TYPE', 'OVERFLOW', 'PAGE', 'PAGELENGTH', 'PAGES',\n              'PAGE_SIZE', 'PARAMETER', 'PASSWORD', 'PLAN', 'POSITION', 'POST_EVENT',\n              'PRECISION', 'PREPARE', 'PROCEDURE', 'PROTECTED', 'PRIMARY', 'PRIVILEGES',\n              'PUBLIC', 'QUIT', 'RAW_PARTITIONS', 'RDB\\$DB_KEY', 'READ', 'REAL',\n              'RECORD-VERSION', 'REFERENCES', 'RELEASE', 'RESERV', 'RESERVING', 'RESTRICT',\n              'RETAIN', 'RETURN', 'RETURNING_VALUES', 'RETURNS', 'REVOKE', 'RIGHT', 'ROLE',\n              'ROLLBACK', 'RUNTIME', 'SCHEMA', 'SECOND', 'SEGMENT', 'SELECT', 'SET',\n              'SHADOW', 'SHARED', 'SHELL', 'SHOW', 'SINGULAR', 'SIZE', 'SMALLINT',\n              'SNAPSHOT', 'SOME', 'SORT', 'SQLCODE', 'SQLERROR', 'SQLWARNING', 'STABILITY',\n              'STARTING', 'STARTS', 'STATEMENT', 'STATIC', 'STATISTICS', 'SUB_TYPE', 'SUM',\n              'SUSPEND', 'TABLE', 'TERMINATOR', 'THEN', 'TIME', 'TIMESTAMP', 'TO',\n              'TRANSACTION', 'TRANSLATE', 'TRANSLATION', 'TRIGGER', 'TRIM', 'TYPE',\n              'UNCOMMITTED', 'UNION', 'UNIQUE', 'UPDATE', 'UPPER', 'USER', 'USING', 'VALUE',\n              'VALUES', 'VARCHAR', 'VARIABLE', 'VARYING', 'VERSION', 'VIEW', 'WAIT',\n              'WEEKDAY', 'WHEN', 'WHENEVER', 'WHERE', 'WHILE', 'WITH', 'WORK', 'WRITE',\n              'YEAR', 'YEARDAY','BIGINT', 'CASE', 'CURRENT_CONNECTION', 'CURRENT_ROLE', 'CURRENT_USER', 'CURRENT_TRANSACTION',\n              'RECREATE', 'ROW_COUNT', 'RELEASE', 'SAVEPOINT', 'ABS', 'BOOLEAN', 'BOTH', 'CHAR_LENGTH',\n              'CHARCTER_LENGTH', 'FALSE', 'LEADING', 'OCTET_LENGTH', 'TRIM', 'TRAILING', 'TRUE', 'UNKNOWN',\n               );\n\n    return $reserved_words;\n}\n\n\n\n\nfunction get_context_variables($server_family, $server_version)\n{\n    $context_variables = array('USER', 'CURRENT_DATE', 'CURRENT_CONNECTION' , 'CURRENT_ROLE' , 'CURRENT_TIME' ,'CURRENT_TIMESTAMP','CURRENT_TRANSACTION','CURRENT_USER');\n\n    return $context_variables;\n}\n\n\n\n\nfunction get_system_tables($server_family, $server_version)\n{\n    $system_tables =\n        array('RDB$CHARACTER_SETS',\n              'RDB$CHECK_CONSTRAINTS',\n              'RDB$COLLATIONS',\n              'RDB$DATABASE',\n              'RDB$DEPENDENCIES',\n              'RDB$EXCEPTIONS',\n              'RDB$FIELD_DIMENSIONS',\n              'RDB$FIELDS',\n              'RDB$FILES',\n              'RDB$FILTERS',\n              'RDB$FORMATS',\n              'RDB$FUNCTION_ARGUMENTS',\n              'RDB$FUNCTIONS',\n              'RDB$GENERATORS',\n              'RDB$INDEX_SEGMENTS',\n              'RDB$INDICES',\n              'RDB$LOG_FILES',\n              'RDB$PAGES',\n              'RDB$PROCEDURE_PARAMETERS',\n              'RDB$PROCEDURES',\n              'RDB$REF_CONSTRAINTS',\n              'RDB$RELATION_CONSTRAINTS',\n              'RDB$RELATION_FIELDS',\n              'RDB$RELATIONS',\n              'RDB$ROLES',\n              'RDB$SECURITY_CLASSES',\n              'RDB$TRANSACTIONS',\n              'RDB$TRIGGER_MESSAGES',\n              'RDB$TRIGGERS',\n              'RDB$TYPES',\n              'RDB$USER_PRIVILEGES',\n              'RDB$VIEW_RELATIONS', );\n\n    return $system_tables;\n}\n\n\ndefine('OT_RELATION', 0);\ndefine('OT_VIEW', 1);\ndefine('OT_TRIGGER', 2);\ndefine('OT_COMPUTED_FIELD', 3);\ndefine('OT_VALIDATION', 4);\ndefine('OT_PROCEDURE', 5);\ndefine('OT_EXPRESSION_INDEX', 6);\ndefine('OT_EXCEPTION', 7);\ndefine('OT_USER', 8);\ndefine('OT_FIELD', 9);\ndefine('OT_INDEX', 10);\ndefine('OT_DEPENDENT_COUNT', 11);\ndefine('OT_USER_GROUP', 12);\ndefine('OT_ROLE', 13);\ndefine('OT_GENERATOR', 14);\ndefine('OT_UDF', 15);\ndefine('OT_BLOB_FILTER', 16);\n\n'firebirdwebadmin/inc/script_start.inc.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/configuration.inc.php';\n\nif (DEBUG) {\n    $start_time = @microtime();\n}\n\nrequire './inc/functions.inc.php';\n\nsession_start();\nset_error_handler('error_handler');\n\nrequire get_language_file('./lang/');\nrequire './inc/session.inc.php';\nrequire './inc/firebird.inc.php';\nrequire './inc/panel_elements.inc.php';\nrequire './inc/javascript.inc.php';\n\nif (DEBUG || DEBUG_HTML) {\n    include './inc/debug_funcs.inc.php';\n}\n\nif (!extension_loaded('interbase')) {\n    die($ERRORS['NO_IBASE_MODULE']);\n}\n\nif (!isset($_SESSION['s_init'])\n    || ($_SESSION['s_cookies'] === 'untested')\n) {\n    initialize_session();\n    fallback_session();\n} else {\n    localize_session_vars();\n}\n\nif (!isset($no_session_referer) || $no_session_referer !== true) {\n\n    $s_referer = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n}\n\nsend_http_headers();\n\n\n$message = '';\n$warning = '';\n$error = '';\n$fb_error = '';\n$php_error = '';\n$debug = array();\n$externcmd = '';\n\n\n\n$js_stack = '';\n\n\n\n$sql = '';\n\n\n\nif ($s_connected == true && !isset($_GET['unconnected'])) {\n    $dbhandle = db_connect();\n\n    if ($dbhandle === false) {\n        $fb_error = fbird_errmsg();\n        $s_connected = false;\n        $s_tables_valid = false;\n        $s_wt['table'] = '';\n    }\n\n    if (empty($s_charsets)) {\n        $s_charsets = get_charsets();\n    }\n}\n\n\nlist($family, $version) = server_info($s_login['server']);\ndefine('SERVER_FAMILY', $family);\ndefine('SERVER_VERSION', $version);\n\nif ($s_binpath != BINPATH) {\n\n\n    if (!is_dir(BINPATH)\n        || (!is_file(BINPATH.'isql') && !is_file(BINPATH.'isql-fb') && !is_file(BINPATH.'isql.exe'))\n    ) {\n        $warning = sprintf($WARNINGS['BAD_ISQLPATH'], BINPATH);\n    }\n\n\n    if (!is_dir(TMPPATH) || !is_writeable(TMPPATH)) {\n        $warning .= sprintf($WARNINGS['BAD_TMPPATH'], TMPPATH);\n    }\n\n    $s_binpath = BINPATH;\n}\n\nif (DEBUG_HTML) {\n    ob_start();\n}\n\n'firebirdwebadmin/iframe_content.php'\n:<?php\n\n\n\n\n\n\n\n\n$no_session_referer = true;\n\nrequire './inc/script_start.inc.php';\n\n$key = get_request_data('key', 'GET');\n\nif ($job = get_iframejob($s_iframejobs, $key)) {\n    switch ($job['job']) {\n    case 'metadata':\n        list($content, $error) = isql_get_metadata($s_login['user'], $s_login['password'], $s_login['database'], $s_login['host']);\n        $content = implode(\"\\n\", $content);\n        break;\n\n    case 'dbstat':\n        if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            $content = fbird_db_info($service, $s_login['database'], $job['option']);\n            $content = trim(str_replace(array(chr(0x01), \"\\n\\n\"), array('', \"\\n\"), $content));\n            fbird_service_detach($service);\n        } else {\n            $error = fbird_errmsg();\n        }\n        break;\n\n    case 'backup':\n        if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            $content = fbird_backup($service, $job['source'], $job['target'], $job['options'], true);\n            $content = str_replace(array(chr(0x01).chr(0x0a), 'gbak: '), '', $content);\n            fbird_service_detach($service);\n        } else {\n            $error = fbird_errmsg();\n        }\n        break;\n\n    case 'restore':\n        if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            $content = fbird_restore($service, $job['source'], $job['target'], $job['options'], true);\n            $content = str_replace(array(chr(0x01).chr(0x0a), 'gbak: '), '', $content);\n            fbird_service_detach($service);\n\n\n            if ($job['connect']) {\n                $s_login['database'] = $job['target'];\n                if (!empty($s_sysdba_pw)) {\n                    $s_login['user'] = 'SYSDBA';\n                    $s_login['password'] = $s_sysdba_pw;\n                }\n\n                if ($dbhandle = db_connect()) {\n\n                    $s_connected = true;\n                    remove_edit_panels();\n                } else {\n\n                    $content .= '<p><span class=\"err\">'.$info_strings['FBError'].':</span>'.fbird_errmsg().\"</p>\\n\";\n                    $s_login['password'] = '';\n                    $s_connected = false;\n                }\n                cleanup_session();\n            }\n        } else {\n            $error = fbird_errmsg();\n        }\n        break;\n\n    case 'export':\n\n        include './inc/export.inc.php';\n\n        ob_start();\n        export_data($job['data']);\n        $content = ob_get_contents();\n        ob_end_clean();\n        break;\n    }\n\n    echo iframe_content($content, $error);\n\n    unset($s_iframejobs[$key]);\n    globalize_session_vars();\n}\n\nfunction get_iframejob($iframejobs, $key)\n{\n    if (isset($iframejobs[$key])) {\n        return $iframejobs[$key];\n    }\n\n    return  false;\n}\n\nfunction iframe_content($content, $error)\n{\n    return html_head('FirebirdWebAdmin '.VERSION)\n         .\"<body class=\\\"if\\\">\\n\"\n         .($error ? '<p><span class=\"err\">'.$GLOBALS['info_strings']['Error'].':</span> '.$error.\"</p>\\n\" : '')\n         .\"<pre>\\n\"\n         .htmlspecialchars($content).\"\\n\"\n         .\"</pre>\\n\"\n         .\"</body>\\n\"\n         .\"</html>\\n\";\n}\n",
        "gt": [
            "'firebirdwebadmin/inc/firebird.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/iframe_content.php'"
        ]
    },
    {
        "files": [
            "'aurora/Web Interface/functions.php'",
            "'aurora/Web Interface/index.php'",
            "'aurora/Web Interface/config.php'"
        ],
        "content": "'aurora/Web Interface/functions.php'\n:<?php\n\n\nfunction processDirPath($dir) {\n  $dir = preg_replace('/\\.\\./', '', $dir);\n  return preg_replace('/\\\n}\n\nfunction getAllFilesfromDirectory($dir, $sort = true, $sortby = \"name\", $sortorder = SORT_ASC, $ignore = array()) {\n  $files = array();\n  if (!is_dir($dir))\n    return array();\n  $handle = opendir($dir);\n  if ($handle) {\n    $files = array();\n    while (false !== ($entry = readdir($handle))) {\n      if ($entry != \".\" && $entry != \"..\" && !in_array($entry, $ignore)) {\n        $files[$entry] = filectime($dir . \"/\" . $entry);\n      }\n    }\n    closedir($handle);\n  }\n  if (!$sort) {\n    return array_keys($files);\n  }\n  else {\n    if ($sortby == \"date\") {\n      asort($files);\n      if ($sortorder == SORT_DESC) {\n        return array_reverse(array_keys($files));\n      }\n      return array_keys($files);\n    }\n    else if ($sortby == \"name\") {\n      $files = array_keys($files);\n      natsort($files);\n      if ($sortorder == SORT_DESC) {\n        return array_reverse(array_values($files));\n      }\n      return array_values($files);\n    }\n  }\n  return false;\n}\n\nfunction getGeneralCoverImage($category) {\n  foreach (getCoverNames() as $cover) {\n    if (file_exists(GENERAL_PATH . \"/\" . $category . \"/\" . $cover)) {\n      return GENERAL_URL . \"/\" . $category . \"/\" . $cover;\n    }\n  }\n  return NOTFOUND_URL;\n}\n\nfunction getCoverNames() {\n  global $EXTNS;\n  $e = array();\n  foreach ($EXTNS as $extn) {\n    $e[] = \"cover.\" . $extn;\n  }\n  return $e;\n}\n\nfunction saveOrderedImages($uid, $type, $category, $name) {\n  $query = \"select * from orders where deleted = 0 and fk_user_id = :uid and type=:type and category = :category and name = :name\";\n  $res = DB::findOneFromQuery($query, array(\":uid\" => $uid, \":type\" => $type, \":category\" => $category, \":name\" => $name));\n  if (!($res && count($res) > 0)) {\n    return DB::insert(\"orders\", array(\"fk_user_id\" => $uid, \"type\" => $type, \"category\" => $category, \"name\" => $name));\n  }\n  return -1;\n}\n\nfunction getOrderedImages($uid) {\n  $query = \"select * from orders where deleted=0 and fk_user_id = $uid\";\n  $res = DB::findAllFromQuery($query);\n  $img = array();\n  foreach ($res as $value) {\n    if ($value['type'] == \"general\") {\n      $path = GENERAL_PATH;\n      $url = GENERAL_URL;\n    }\n    else if ($value['type'] == \"premium\") {\n      $path = PREMIUM_PATH;\n      $url = PREMIUM_URL;\n    }\n    if (file_exists($path . \"/\" . $value['category'] . \"/\" . $value['name'])) {\n      $value['url'] = $url . \"/\" . $value['category'] . \"/\" . $value['name'];\n    }\n    else {\n      $value['url'] = NOTFOUND_URL;\n    }\n    $img[] = $value;\n  }\n  return $img;\n}\n\nfunction getOrderedImageUrls($uid) {\n  $query = \"select * from orders where deleted = 0 and fk_user_id = $uid\";\n  $res = DB::findAllFromQuery($query);\n  $img = array();\n  foreach ($res as $index => $value) {\n    if ($value['type'] == \"general\") {\n      $path = GENERAL_PATH;\n      $url = GENERAL_URL;\n    }\n    else if ($value['type'] == \"premium\") {\n      $path = PREMIUM_PATH;\n      $url = PREMIUM_URL;\n    }\n    if (file_exists($path . \"/\" . $value['category'] . \"/\" . $value['name'])) {\n      $img[$index] = $url . \"/\" . $value['category'] . \"/\" . $value['name'];\n    }\n    else {\n      $img[$index] = NOTFOUND_URL;\n    }\n  }\n  return $img;\n}\n\nfunction removeFromOrders($uid, $type, $category, $name) {\n  return DB::update(\"orders\", array(\"deleted\" => 1), \"fk_user_id = :uid and type=:type and category = :category and name = :name\", array(\":uid\" => $uid, \":type\" => $type, \":category\" => $category, \":name\" => $name));\n}\n\nfunction checkOrdered($img) {\n  if (isset($_SESSION['loggedin'])) {\n    $images = getOrderedImageUrls($_SESSION['user']['id']);\n    if (in_array($img, $images))\n      return true;\n    return false;\n  }\n  return false;\n}\n\nfunction redirectTo($url, $exit = true) {\n  header(\"Location:\" . $url);\n  if ($exit) {\n    exit;\n  }\n}\n\nfunction redirectAfter($url) {\n  if (isset($_SESSION['RedirectUrl'])) {\n    $url = $_SESSION['RedirectUrl'];\n    unset($_SESSION['RedirectUrl']);\n  }\n  redirectTo($url);\n}\n\nfunction checkLogin() {\n  if (!isset($_SESSION[\"loggedin\"])) {\n    $_SESSION['RedirectUrl'] = $_SERVER['REQUEST_URI'];\n    header(\"Location:\" . SITE_URL);\n    exit;\n  }\n}\n\nfunction getCacheNumber() {\n  return DEBUG ? date(\"YmdHis\") : date(\"YmdH\");\n}\n\nfunction writeFile($filename, $data) {\n  $file = fopen($filename, \"a+\");\n  if ($file) {\n    fputs($file, date(\"[Y-m-d H:i:s]\\n\") . $data\n            . \"\\n======================================================================\\n\");\n    fclose($file);\n  }\n}\n\nfunction writeError($data) {\n  writeFile(ERROR_LOG, $data);\n}\n\nfunction isValidEmail($email) {\n  $pattern = \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\";\n  if (eregi($pattern, $email)) {\n    return true;\n  }\n  return false;\n}\n\nfunction sendMail($subject, $body, $to, $from = \"ACM BIT Mesra <team@bitmesra.acm.org>\") {\n  require_once MAIL_PATH;\n  $headers = array('From' => $from,\n      'To' => $to,\n      'Subject' => $subject,\n      'Date' => date(\"Y-m-d H:i:s\") . \" +0530\",\n      'Content-Type' => 'text/html',\n      'charset' => 'UTF-8'\n  );\n  $smtp = Mail::factory('smtp', array('host' => MAIL_HOST,\n              'port' => MAIL_PORT,\n              'auth' => true,\n              'username' => MAIL_USER,\n              'password' => MAIL_PASS));\n  $mail = $smtp->send($to, $headers, $body);\n  $data = \"Mail:\\n\" . print_r(array(\"To\" => $to, \"From\" => $from, \"Subject\" => $subject, \"Body\" => $body), true);\n  if (PEAR::isError($mail)) {\n    writeError($data);\n    return false;\n  }\n  writeFile(COMMENTS_LOG, $data);\n  return true;\n}\n\nfunction prettyPrint($data, $withType = false) {\n  echo \"<pre>\";\n  $withType ? var_dump($data) : print_r($data);\n  echo \"</pre>\";\n}\n\nfunction printPageNos($total) {\n  if ($total > 1) {\n    parse_str($_SERVER['QUERY_STRING'], $query_string);\n    echo \"<p class='pagenos'>Page: \";\n    for ($i = 1; $i <= $total; $i++) {\n      $query_string['page'] = $i;\n      echo \"<a style='text-decoration:none' href='?\" . http_build_query($query_string) . \"'>$i</a> \";\n    }\n    echo \"</p>\";\n  }\n}\n\nfunction removeSlashes($data) {\n  return str_replace(\"\\\\\", \"\", $data);\n}\n\nfunction getSessionMessage($name) {\n  if (isset($_SESSION[$name])) {\n    $data = $_SESSION[$name];\n    unset($_SESSION[$name]);\n  }\n  else {\n    $data = \"\";\n  }\n  return $data;\n}\n\nfunction isAdmin() {\n    return isset($_SESSION['loggedin']) && $_SESSION['team']['status'] == \"Admin\";\n}\n\nclass DB {\n\n  public static $connection = null;\n\n  public static function initialize() {\n    if (self::$connection != null)\n      return true;\n    try {\n      self::$connection = new PDO(\"mysql:dbname=\" . SQL_DB . \";host=\" . SQL_HOST . \";port=\" . SQL_PORT . \"\", SQL_USER, SQL_PASS, array(\n                  PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true,\n                  PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n                  PDO::MYSQL_ATTR_INIT_COMMAND => \"SET NAMES utf8\"\n              ));\n      self::$connection->exec(\"SET CHARACTER SET utf8\");\n    }\n    catch (PDOException $error) {\n      self::$connection = null;\n      writeError('DB Connection failed:\\n' . $error->getMessage());\n      die(\"Error creating database connection (error log)!\");\n      return false;\n    }\n    return true;\n  }\n\n  public static function closeConnection() {\n    self::$connection = null;\n    return true;\n  }\n\n  private static function handleError($e = null, $data = \"\") {\n    if ($e != null) {\n      $data .= \"\\nError: \" . $e->getMessage() . \"\\n\" . $e->getFile();\n    }\n    writeError(\"Query error:\\n\" . $data);\n  }\n\n  public static function query($query, $values = null) {\n    if (!self::initialize())\n      return false;\n    try {\n      if (is_array($values)) {\n        $stmt = self::$connection->prepare($query);\n        $stmt->execute($values);\n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n      }\n      else {\n        return self::$connection->query($query);\n      }\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function findAllWithCount($select, $body, $page, $limit) {\n    if (!self::initialize())\n      return false;\n    $countselect = \"SELECT count(*) as count \";\n    $limitquery = \" LIMIT \" . ($page - 1) * $limit . \",\" . $limit;\n    $query = $countselect . $body;\n    $count = self::findOneFromQuery($query);\n    $res['total'] = $count['count'];\n    $res['noofpages'] = ceil($count['count'] * 1.0 / $limit);\n    $query = $select . \" \" . $body . $limitquery;\n    $res['data'] = self::findAllFromQuery($query);\n    return $res;\n  }\n\n  public static function insert($table, $data) {\n    if (!self::initialize())\n      return false;\n    $data['createdOn'] = date(\"Y-m-d H:i:s\");\n    $data['updatedOn'] = date(\"Y-m-d H:i:s\");\n    $keys = array();\n    $values = array();\n    foreach ($data as $key => $value) {\n      $keys[] = $key;\n      $values[] = self::$connection->quote($value);\n    }\n    $query = 'INSERT INTO ' . $table . ' (' . join(', ', $keys) . ') VALUES (' . join(', ', $values) . ')';\n    try {\n      return self::$connection->exec($query);\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function update($table, $data, $where, $values = null) {\n    if (!self::initialize())\n      return false;\n    $data['updatedOn'] = date(\"Y-m-d H:i:s\");\n    $setters = array();\n    foreach ($data as $key => $value) {\n      $setters[] = $key . '=' . self::$connection->quote($value);\n    }\n    $query = 'UPDATE ' . $table . ' SET ' . join(', ', $setters) . ' WHERE ' . $where;\n    try {\n      if (is_array($values)) {\n        $stmt = self::$connection->prepare($query);\n        $stmt->execute($values);\n      }\n      else {\n        $stmt = self::$connection->exec($query);\n      }\n      return $stmt;\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function delete($table, $where) {\n    return self::update($table, array(\"deleted\" => 1), $where);\n  }\n\n  public static function findAllFromQuery($query, $values = null) {\n    if (!self::initialize())\n      return false;\n    try {\n      if (is_array($values)) {\n        $stmt = self::$connection->prepare($query);\n        $stmt->execute($values);\n      }\n      else {\n        $stmt = self::$connection->query($query);\n      }\n      return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function findOneFromQuery($query, $values = null) {\n    if (!self::initialize())\n      return false;\n    try {\n      if (is_array($values)) {\n        $stmt = self::$connection->prepare($query);\n        $stmt->execute($values);\n      }\n      else {\n        $stmt = self::$connection->query($query);\n      }\n      return $stmt->fetch(PDO::FETCH_ASSOC);\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function logActivity($activity, $message, $result) {\n    if (!self::initialize()) {\n      writeError(\"No connection error:\\n\" . $activity . \"\\n\" . $message . \"\\n\" . $result);\n      return false;\n    }\n    $createTable = \"CREATE TABLE IF NOT EXISTS `activity_log` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `activity` text NOT NULL,\n  `message` text NOT NULL,\n  `result` text NOT NULL,\n  `session` text NOT NULL,\n  `createdOn` datetime NOT NULL,\n  `updatedOn` datetime NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n    self::query($createTable);\n    $data = array(\"activity\" => $activity, \"message\" => $message, \"result\" => $result);\n    $table = \"activity_log\";\n    $data['session'] = print_r($_SESSION, true);\n    $data['updatedOn'] = date(\"Y-m-d H:i:s\");\n    $data['createdOn'] = date(\"Y-m-d H:i:s\");\n    return self::insert($table, $data);\n  }\n\n  public static function escape($value) {\n    if (!self::initialize())\n      return false;\n    return self::$connection->quote($value);\n  }\n\n  public static function lastInsertId() {\n    if (!self::initialize())\n      return false;\n    return self::$connection->lastInsertId();\n  }\n\n}\n\n?>\n\n'aurora/Web Interface/index.php'\n:<?php\nrequire_once 'config.php';\nrequire_once 'components.php';\n$_SESSION['url'] = $_SERVER['REQUEST_URI'];\n$query = \"select value from admin where variable='mode'\";\n$judge = DB::findOneFromQuery($query);\nif ($judge['value'] == 'Lockdown' && isset($_SESSION['loggedin']) && !isAdmin()) {\n    session_destroy();\n    session_regenerate_id(true);\n    session_start();\n    $_SESSION['msg'] = \"Judge is in Lockdown mode and so you have been logged out.\";\n    redirectTo(SITE_URL . \"/\");\n}\ndoCompetitionCheck();\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"description\" content=\"Aurora is a dockerized open-source online judge. It can be easily deployed and scaled. It also employs the latest security checks to secure the application.\">\n        <meta name=\"keywords\" content=\"open source, online judge, docker, secure, scaleable\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"<?php echo SITE_URL ?>/css/bootstrap.css\" media=\"screen\" />\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"<?php echo SITE_URL ?>/css/style.css\" media=\"screen\" />\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/jquery-3.1.0.min.js\"></script>\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/bootstrap.js\"></script>\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/plugin.js\"></script>\n        <script type=\"text/javascript\">\n            $(window).load(function() {\n                if ($('\n                    $('\n            });\n        </script>\n        <title>Aurora - An open-source online judge</title>\n        <link rel='shortcut icon' href='<?php echo SITE_URL; ?>/img/favicon.png' />\n    </head>\n    <body>\n        <?php if ($judge['value'] == 'Active' && isset($_SESSION['loggedin'])) { ?>\n            <script type='text/javascript'>\n                function settitle() {\n                    var t = window.document.title;\n                    var n = t.match(/(\\d*)\\)/gi);\n                    console.log(n);\n                    if (n != null) {\n                        n = parseInt(n) + 1;\n                    } else {\n                        n = 1;\n                    }\n                    window.document.title = \"(\" + n + \") Aurora\";\n                }\n                function resettile() {\n                    $.ajax({\n                        type: \"GET\",\n                        url: \"<?php echo SITE_URL; ?>/broadcast.php\",\n                        data: {updatetime: \"\"}\n                    });\n                    window.document.title = \"Aurora\";\n                }\n                window.setTimeout(\"bchk();\", <?php echo rand(300000, 600000); ?>);\n                $.ajax(\"<?php echo SITE_URL; ?>/broadcast.php\").done(function(msg) {\n                    var json = eval('(' + msg + ')');\n                    console.log(msg);\n                    if (json.broadcast.length != 0) {\n                        var str, i;\n                        str = \"\";\n                        for (i = 0; i < json.broadcast.length; i++)\n                            str += \"<b>\" + json.broadcast[i].title + \":</b><br/>\" + json.broadcast[i].msg + \"<br/><br/>\";\n                        $(\"\n                        $('\n                            resettile();\n                        });\n                        $(\"\n                        settitle();\n                    }\n                });\n                function bchk() {\n                    $.ajax(\"<?php echo SITE_URL; ?>/broadcast.php\").done(function(msg) {\n                        var json = eval('(' + msg + ')');\n                        console.log(msg);\n                        if (json.broadcast.length != 0) {\n                            var str, i;\n                            str = \"\";\n                            for (i = 0; i < json.broadcast.length; i++)\n                                str += \"<b>\" + json.broadcast[i].title + \":</b><br/>\" + json.broadcast[i].msg + \"<br/><br/>\";\n                            $(\"\n                            $('\n                                resettile();\n                            });\n                            $(\"\n                            settitle();\n                        }\n                    });\n                    window.setTimeout(\"bchk();\", 600000);\n                }\n            </script>\n            <div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n                <div class=\"modal-dialog\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n                            <h4 class=\"modal-title\" id=\"myModalLabel\">Alert</h4>\n                        </div>\n                        <div class=\"modal-body\" id=\"bmsg\">\n\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\">Close</button>\n                        </div>\n                    </div><!-- /.modal-content -->\n                </div><!-- /.modal-dialog -->\n            </div>\n        <?php }\n        ?>\n        <nav class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n            <div class=\"container\">\n                <div class=\"navbar-header\">\n                    <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"\n                        <span class=\"sr-only\">Toggle navigation</span>\n                        <span class=\"icon-bar\"></span>\n                        <span class=\"icon-bar\"></span>\n                        <span class=\"icon-bar\"></span>\n                    </button>\n                    <a class=\"navbar-brand\" href=\"<?php echo SITE_URL; ?>/\">Aurora</a>\n                </div>\n\n                <div class=\"collapse navbar-collapse\" id=\"navbar-collapse-1\">\n                    <ul class=\"nav navbar-nav\">\n                        <!-- <li><a href=\"<?php echo SITE_URL; ?>/home\">Home</a></li> -->\n                        <li><a href=\"<?php echo SITE_URL; ?>/problems\">Problems</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/contests\">Contests</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/rankings\">Rankings</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/submissions\">Submissions</a></li>\n                        <li class=\"dropdown\">\n                            <a href=\"\n                            <ul class=\"dropdown-menu\" role=\"menu\">\n                                <li><a href=\"<?php echo SITE_URL; ?>/faq\">FAQ</a></li>\n                                <li><a href=\"<?php echo SITE_URL; ?>/contact\">Contact Us</a></li>\n                            </ul>\n                        </li>\n                    </ul>\n                    <?php if (isset($_SESSION['loggedin'])) { ?>\n                        <ul class=\"nav navbar-nav pull-right\">\n                            <?php if ($_SESSION['team']['status'] == 'Admin') { ?>\n                                <li class=\"dropdown\">\n                                    <a href=\"\n                                        Admin\n                                        <b class=\"caret\"></b>\n                                    </a>\n                                    <ul class=\"dropdown-menu\">\n                                        <li><a href='<?php echo SITE_URL; ?>/adminjudge'>Judge Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminproblem'>Problem Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/admincontest'>Contest Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminteam'>Team Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/admingroup'>Group Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminclar'>Clarifications</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminbroadcast'>Broadcast</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminlog'>Request Logs</a></li>\n                                    </ul>\n                                </li>\n                            <?php } ?>\n                            <li class=\"dropdown\">\n                                <a href=\"\n                                    Account\n                                    <b class=\"caret\"></b>\n                                </a>\n                                <ul class=\"dropdown-menu\">\n                                    <li><a href='<?php echo SITE_URL; ?>/edit'>Account Settings</a></li>\n                                    <li><a href='<?php echo SITE_URL; ?>/process.php?logout'>Logout</a></li>\n                                </ul>\n                            </li>\n                        </ul>\n                    <?php } ?>\n                </div>\n            </div>\n        </nav>\n        <div class=\"container bodycont\">\n            <div class='row'>\n                <div class='col-md-9' id='mainbar'>\n                    <?php if (isset($_SESSION['msg']) && $_SESSION['msg'] != \"\") { ?>\n                        <div class=\"alert alert-info\" style=\"margin-top: 20px;\">\n                            <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n                            <div class=\"text-center\"><?php\n                                echo $_SESSION['msg'];\n                                unset($_SESSION['msg']);\n                                ?></div>\n                        </div>\n                        <?php\n                    }\n                    if (!isset($_GET['tab']) || $_GET['tab'] == 'home') {\n                        $str = 'files/home.php';\n                    } else {\n                        $str = 'files/' . $_GET['tab'] . '.php';\n                    }\n                    if (file_exists($str))\n                        require $str;\n                    else\n                        echo \"<br/><br/><br/><div style='padding: 10px;'><h1>Page not Found :(</h1>The page you are searching for is not on this site.</div><br/><br/><br/>\";\n                    ?>\n                </div>\n                <div class='col-md-3'>\n                    <!-- Login Panel -->\n                    <div class=\"panel panel-default\">\n                        <?php loginbox(); ?>\n                    </div>\n                    <!-- ./Login Panel -->\n\n                    <!-- Contest Panel -->\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Contest</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <?php contest_status(); ?>\n                        </div>\n                    </div>\n                    <!-- ./Contest Panel -->\n\n                    <!-- Ranking Panel -->\n                    <div class=\"panel panel-default\">\n\n                    <?php if ($judge['value'] == 'Active') { ?>\n                        <!-- Contest Ranking -->\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Contest Ranking</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <div id=\"live-ranking\">\n                            <?php getCurrentContestRanking(); ?>\n                                <a style=\"float:right;\" href=\"<?php echo SITE_URL.'/rank/'.getCurrentContest(); ?>\">View all</a>\n                            </div>\n                        </div>\n\n                    <?php } else { ?>\n                        <!-- Overall Ranking -->\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Overall Rankings</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <?php rankings(); ?>\n                        </div>\n                    <?php } ?>\n                    </div>\n                    <!-- ./Ranking Panel -->\n\n                    <?php\n\n                    if (isset($_SESSION['loggedin'])) mysubs();\n\n                    if ($judge['value'] == 'Active') latestsubs();\n                    ?>\n\n                </div>\n            </div>\n        </div>\n        <div class=\"footer\">\n            <a href=\"https:\n        </div>\n    </body>\n</html>\n\n'aurora/Web Interface/config.php'\n:<?php\n\nfunction getEnvVar($key, $default) {\n  return getenv($key) ? getenv($key) : $default;\n}\n\n\nfunction getDockerSecretValue($key, $fallbackValue) {\n  $file = getEnvVar($key, null);\n  if ($file && file_exists($file)) {\n    return trim(file_get_contents($file));\n  } else {\n    return $fallbackValue;\n  }\n}\n\n\ndefine(\"SITE_URL\", getEnvVar(\"AURORA_BASE_URL\", \"\"));\ndefine(\"SQL_USER\", getDockerSecretValue('AURORA_SQL_USER_FILE', getEnvVar(\"AURORA_SQL_USER\", \"aurora\")));\ndefine(\"SQL_PASS\", getDockerSecretValue('AURORA_SQL_PASS_FILE', getEnvVar(\"AURORA_SQL_PASS\", \"aurora\")));\ndefine(\"SQL_DB\", getDockerSecretValue('AURORA_SQL_DB_FILE', getEnvVar(\"AURORA_SQL_DB\", \"aurora_main\")));\ndefine(\"SQL_HOST\", getDockerSecretValue('AURORA_SQL_HOST_FILE', getEnvVar(\"AURORA_SQL_HOST\", \"127.0.0.1\")));\ndefine(\"SQL_PORT\", getDockerSecretValue('AURORA_SQL_PORT_FILE', getEnvVar(\"AURORA_SQL_PORT\", \"3306\")));\ndisplayErrors(FALSE);\ndate_default_timezone_set(\"Asia/Kolkata\");\n\n$brush = array(\"AWK\" => \"text\", \"Bash\" =>\"sh\", \"Brain\" => \"text\",\"C\" => \"c\", \"C++\" => \"cpp\", \"C\n$cmmode = \"'C': 'text/x-csrc', 'C++': 'text/x-c++src', 'C\n$valtoname = array(\"AWK\"=>\"AWK\", \"Bash\"=>\"Bash\", \"Brain\" => \"Brainf**k\", \"C\" => \"C\", \"C++\" => \"C++\", \"Java\" => \"Java\", \"C\n$valtoext = array(\"AWK\"=>\"awk\", \"Bash\"=>\"sh\", \"Brain\" => \"b\", \"C\" => \"c\", \"C++\" => \"cpp\", \"Java\" => \"java\", \"C\n\n\nini_set(\"session.gc_maxlifetime\", 86400);\nsession_set_cookie_params(array(\n  'lifetime' => 0,\n  'path' => SITE_URL,\n  'samesite' => 'Lax',\n  'httponly' => true\n));\nsession_start();\nfunction displayErrors($option = true) {\n  if ($option) {\n    error_reporting(E_ALL | E_STRICT);\n    ini_set('display_errors', '1');\n  }\n  else {\n    error_reporting(0);\n    ini_set('display_errors', '0');\n  }\n}\n\ndefine(\"DEBUG\", true);\n\nclearstatcache();\n\ndefine(\"JS_URL\", SITE_URL . \"/js\");\ndefine(\"CSS_URL\", SITE_URL . \"/css\");\ndefine(\"IMAGE_URL\", SITE_URL . \"/img\");\ndefine(\"ACCOUNT_URL\", SITE_URL . \"/account\");\n\ndefine(\"PHPSCRIPTS_PATH\", dirname(__FILE__) . \"/php_scripts\");\n\n\n\ndefine(\"MAIL_PATH\", \"Mail.php\");\n\n\n\n\n\ndefine(\"ERROR_LOG\", dirname(__FILE__) . \"/errors.txt\");\n\n\n\nforeach ($_POST as $key => $value) {\n  $_POST[$key] = addslashes($value);\n}\n\n\nforeach ($_GET as $key => $value) {\n  $_GET[$key] = addslashes($value);\n}\n\nrequire_once 'functions.php';\n\n",
        "gt": [
            "'aurora/Web Interface/functions.php'",
            "'aurora/Web Interface/config.php'",
            "'aurora/Web Interface/index.php'"
        ]
    },
    {
        "files": [
            "'MarginBot/inc/config.php'",
            "'MarginBot/inc/version_info.php'",
            "'MarginBot/install.php'"
        ],
        "content": "'MarginBot/inc/config.php'\n:<?php\ndate_default_timezone_set('America/Los_Angeles');\nsetlocale(LC_MONETARY, 'en_US');\nsession_start();\nrequire_once('version_info.php');\n\n\n$config['db']['host'] = '';\n$config['db']['dbname'] = '';\n$config['db']['dbuser'] = '';\n$config['db']['dbpass'] = '';\n\n\n$config['db']['prefix'] = '';\n\n\n$config['admin_email'] = 'marginbot@therovegroup.com';\n\n\n$config['curFeesBFX'] = 15;\n\n\n\n\n\n?>\n'MarginBot/inc/version_info.php'\n:<?\n\n$config['app_support_url'] = 'http:\n$config['app_support_email'] = 'marginbot@therovegroup.com';\n$config['app_name'] = 'MarginBot';\n$config['app_version'] = '0.1';\n$config['app_version_minor'] = '08a';\n\n?>\n'MarginBot/install.php'\n:<?\n\nrequire_once(\"inc/config.php\");\n$alert = array();\n$warning = array();\n\n$configFile = getcwd().'/inc/config.php';\n\nif($_REQUEST['doInstall']==1){\n\n\n\n\n\tif (is_writable($configFile)) {\n\n\n\n\n\t\t$mysqli = new mysqli($_REQUEST['installDBHost'], $_REQUEST['installDBUser'], $_REQUEST['installDBPassword'], $_REQUEST['installDBName']);\n\t\tif ($mysqli->connect_errno) {\n\t\t\t$warning[] = \"Failed to connect to MySQL: (\" . $mysqli->connect_errno . \") \" . $mysqli->connect_error.'<br>Please Fix Your Database Settings.';\n\t\t}\n\t\telse{\n\t\t\t$tablePre = $mysqli->real_escape_string($_REQUEST['installDBPrefix']);\n\n\t\t\t$trackingSQL = 'CREATE TABLE `'.$tablePre.'Tracking` (\n\t\t\t  `id` int(12) NOT NULL AUTO_INCREMENT,\n\t\t\t  `user_id` smallint(4) DEFAULT NULL,\n\t\t\t  `trans_cur` varchar(10) DEFAULT NULL,\n\t\t\t  `trans_id` int(12) DEFAULT NULL,\n\t\t\t  `date` date DEFAULT NULL,\n\t\t\t  `dep_balance` decimal(12,8) DEFAULT NULL,\n\t\t\t  `swap_payment` decimal(12,8) DEFAULT NULL,\n\t\t\t  `average_return` decimal(8,6) DEFAULT NULL,\n\t\t\t  PRIMARY KEY (`id`),\n\t\t\t  UNIQUE KEY `uniquieKeys` (`user_id`,`trans_id`,`trans_cur`) USING BTREE\n\t\t\t) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1';\n\n\t\t\tif ( !$mysqli->query($trackingSQL) ){\n\t\t\t\t $warning[] = \"Table creation failed: (\" . $mysqli->errno . \") \" . $mysqli->error;\n\t\t\t\t}\n\t\t\t$usersSQL = 'CREATE TABLE `'.$tablePre.'Users` (\n\t\t\t  `id` int(4) NOT NULL AUTO_INCREMENT,\n\t\t\t  `name` varchar(256) DEFAULT NULL,\n\t\t\t  `email` varchar(256) DEFAULT NULL,\n\t\t\t  `password` varchar(256) DEFAULT NULL,\n\t\t\t  `bfxapikey` varchar(64) DEFAULT NULL,\n\t\t\t  `bfxapisec` varchar(64) DEFAULT NULL,\n\t\t\t  `status` tinyint(1) DEFAULT NULL,\n\t\t\t  PRIMARY KEY (`id`)\n\t\t\t) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=latin1';\n\t\t\tif ( !$mysqli->query($usersSQL) ){\n\t\t\t\t $warning[] = \"Table creation failed: (\" . $mysqli->errno . \") \" . $mysqli->error;\n\t\t\t\t}\n\n\t\t\t$varsSQL = 'CREATE TABLE `'.$tablePre.'Vars` (\n\t\t\t\t  `id` smallint(4) NOT NULL AUTO_INCREMENT,\n\t\t\t\t  `userid` smallint(4) DEFAULT NULL,\n\t\t\t\t  `curType` varchar(10) DEFAULT NULL,\n\t\t\t\t  `minlendrate` varchar(12) DEFAULT NULL,\n\t\t\t\t  `spreadlend` varchar(12) DEFAULT NULL,\n\t\t\t\t  `USDgapBottom` varchar(12) DEFAULT NULL,\n\t\t\t\t  `USDgapTop` varchar(12) DEFAULT NULL,\n\t\t\t\t  `thirtyDayMin` varchar(12) DEFAULT NULL,\n\t\t\t\t  `highholdlimit` varchar(12) DEFAULT NULL,\n\t\t\t\t  `highholdamt` varchar(12) DEFAULT NULL,\n\t\t\t\t  `extractAmt` varchar(12) DEFAULT NULL,\n\t\t\t\t  PRIMARY KEY (`id`),\n\t\t\t\t  UNIQUE KEY `unqType` (`userid`,`curType`)\n\t\t\t\t) ENGINE=MyISAM AUTO_INCREMENT=14 DEFAULT CHARSET=latin1';\n\t\t\tif ( !$mysqli->query($varsSQL) ){\n\t\t\t\t $warning[] = \"Table creation failed: (\" . $mysqli->errno . \") \" . $mysqli->error;\n\t\t\t\t}\n\n\t\t\t$cronsTableSQL = '\n\t\t\t\tCREATE TABLE  `'.$tablePre.'CronRuns` (\n\t\t\t\t  `id` int(11) NOT NULL AUTO_INCREMENT,\n\t\t\t\t  `cron_id` tinyint(1) NOT NULL,\n\t\t\t\t  `lastrun` datetime NOT NULL,\n\t\t\t\t  `details` varchar(256) NOT NULL,\n\t\t\t\t  PRIMARY KEY (`id`)\n\t\t\t\t) ENGINE=MyISAM AUTO_INCREMENT=1 DEFAULT CHARSET=latin1';\n\t\t\tif ( !$mysqli->query($cronsTableSQL) ){\n\t\t\t\t $warning[] = \"Table creation failed: (\" . $mysqli->errno . \") \" . $mysqli->error;\n\t\t\t\t}\n\t\t\t$pairsTableSQL = '\n\t\t\t\tCREATE TABLE  `'.$tablePre.'CurPairs` (\n\t\t\t\t  `id` smallint(4) NOT NULL AUTO_INCREMENT,\n\t\t\t\t  `curSym` varchar(12) DEFAULT NULL,\n\t\t\t\t  `curName` varchar(100) DEFAULT NULL,\n\t\t\t\t  `status` tinyint(1) DEFAULT NULL,\n\t\t\t\t  PRIMARY KEY (`id`)\n\t\t\t\t) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=latin1';\n\t\t\tif ( !$mysqli->query($pairsTableSQL) ){\n\t\t\t\t $warning[] = \"Table creation failed: (\" . $mysqli->errno . \") \" . $mysqli->error;\n\t\t\t\t}\n\t\t\telse{\n\n\t\t\t\t$mysqli->query(\"INSERT INTO `\".$tablePre.\"CurPairs` VALUES ('1', 'USD', 'US Dollars', '1')\");\n\t\t\t\t$mysqli->query(\"INSERT INTO `\".$tablePre.\"CurPairs` VALUES ('2', 'BTC', 'Bitcoin', '1')\");\n\t\t\t\t$mysqli->query(\"INSERT INTO `\".$tablePre.\"CurPairs` VALUES ('3', 'IOT', 'Iota', '1')\");\n\t\t\t\t$mysqli->query(\"INSERT INTO `\".$tablePre.\"CurPairs` VALUES ('4', 'ETH', 'Ethereum', '1')\");\n\t\t\t\t$mysqli->query(\"INSERT INTO `\".$tablePre.\"CurPairs` VALUES ('5', 'OMG', 'OmiseGO', '1')\");\n\t\t\t\t$mysqli->query(\"INSERT INTO `\".$tablePre.\"CurPairs` VALUES ('6', 'BCH', 'Bcash', '1')\");\n\t\t\t\t$mysqli->query(\"INSERT INTO `\".$tablePre.\"CurPairs` VALUES ('7', 'EOS', 'EOS', '1')\");\n\t\t\t\t$mysqli->query(\"INSERT INTO `\".$tablePre.\"CurPairs` VALUES ('8', 'ETC', 'Ethereum Classic', '1')\");\n\t\t\t\t$mysqli->query(\"INSERT INTO `\".$tablePre.\"CurPairs` VALUES ('9', 'DSH', 'Dash', '1')\");\n\t\t\t\t$mysqli->query(\"INSERT INTO `\".$tablePre.\"CurPairs` VALUES ('10', 'XMR', 'Monero', '1')\");\n\t\t\t\t$mysqli->query(\"INSERT INTO `\".$tablePre.\"CurPairs` VALUES ('11', 'ZEC', 'Zcash', '1')\");\n\t\t\t\t$mysqli->query(\"INSERT INTO `\".$tablePre.\"CurPairs` VALUES ('12', 'XRP', 'Ripple', '1')\");\n\t\t\t\t$mysqli->query(\"INSERT INTO `\".$tablePre.\"CurPairs` VALUES ('13', 'LTC', 'Litecoin', '1')\");\n\n\t\t\t}\n\n\t\t\tif(count($warning)==0){\n\n\n$configData = '<?php\ndate_default_timezone_set(\\'America/Los_Angeles\\');\nsetlocale(LC_MONETARY, \\'en_US\\');\nsession_start();\nrequire_once(\\'version_info.php\\');\n\n\n$config[\\'db\\'][\\'host\\'] = \\''.$_REQUEST['installDBHost'].'\\';\n$config[\\'db\\'][\\'dbname\\'] = \\''.$_REQUEST['installDBName'].'\\';\n$config[\\'db\\'][\\'dbuser\\'] = \\''.$_REQUEST['installDBUser'].'\\';\n$config[\\'db\\'][\\'dbpass\\'] = \\''.$_REQUEST['installDBPassword'].'\\';\n\n\n$config[\\'db\\'][\\'prefix\\'] = \\''.$_REQUEST['installDBPrefix'].'\\';\n\n\n$config[\\'admin_email\\'] = \\''.$_REQUEST['installEmail'].'\\';\n\n\n$config[\\'curFeesBFX\\'] = '.$_REQUEST['installBFXFees'].';\n?>';\n\n\n\t\t\t\tif (!$handle = fopen($configFile, 'w')) {\n\t\t\t\t\t $warning[] = \"Could Not open file ($configFile)\";\n\n\t\t\t\t}\n\n\t\t\t\tif (fwrite($handle, $configData) === FALSE) {\n\t\t\t\t\t$warning[] = \"Cannot write to file ($configFile)\";\n\n\t\t\t\t}\n\t\t\t\telse{\n\n\t\t\t\t\t$alert[] = \"Database Settings Saved and Tables Created.\";\n\t\t\t\t\t$_REQUEST['doInstall'] = 2;\n\t\t\t\t}\n\n\t\t\t\tfclose($handle);\n\n\n\t\t\t}\n\n\n\t\t}\n\n\t} else {\n\t\t$warning[] = \"The Configuration File Doesn't Appear To Be Writable, please set \".$configFile.\" writable (chmod 777 \".$configFile.\" )\";\n\t}\n}\nelse if($_REQUEST['doInstall']==2){\n\n\n\trequire_once(\"inc/database.php\");\n\t$db = new Database();\n\n\n\trequire_once(\"inc/PasswordHash.php\");\n\t$hasher = new PasswordHash(8, false);\n\n\trequire_once(\"inc/ExchangeAPIs/bitfinex.php\");\n\n\n\n\n\n\tif(strlen($_REQUEST['installAdminUser']) < 3){$warning[] = 'Account Name must be at least 3 characters long';}\n\tif(strlen($_REQUEST['installAdminBFXKey']) != 43){$warning[] = 'Bitfinex API Keys are 43 Characters Long';}\n\tif(strlen($_REQUEST['installAdminBFXSec']) != 43){$warning[] = 'Bitfinex API Secrets are 43 Characters Long';}\n\n\tif (strlen($_REQUEST['installAdminPassword']) > 72){$warning[] = 'Passwords must be less than 72 Characters';}\n\tif(count($warning)==0){\n\n\t\t$userCheck = $db->query(\"SELECT name, bfxapikey FROM `\".$config['db']['prefix'].\"Users` WHERE (name = '\".$db->escapeStr($_REQUEST['installAdminUser']).\"' OR bfxapikey = '\".$db->escapeStr($_REQUEST['installAdminBFXKey']).\"' ) LIMIT 1\");\n\t\tif (count($userCheck) ==  1) {\n\t\t\tif($userCheck[0]['name'] == $_REQUEST['installAdminUser'] ){\n\t\t\t\t$warning[] = 'This user name already exists in our database';\n\t\t\t}\n\t\t\tif($userCheck[0]['bfxapikey'] == $_REQUEST['installAdminBFXKey'] ){\n\t\t\t\t$warning[] = 'This bitfinex key already exists in our database';\n\t\t\t}\n\t\t}\n\t}\n\tif(count($warning)==0){\n\n\t\t$bfxTest = new Bitfinex(0, $_REQUEST['installAdminBFXKey'], $_REQUEST['installAdminBFXSec']);\n\t\t$bt = $bfxTest->bitfinex_get('account_infos');\n\t\tif($bt[0]['fees'][0]['pairs']!=''){\n\n\n\n\n\t\t\t$passEnc = $hasher->HashPassword($_REQUEST['installAdminPassword']);\n\n\t\t\t$sql = \"INSERT into `\".$config['db']['prefix'].\"Users` (`name`,`email`,`password`,`bfxapikey`,`bfxapisec`,`status` )\n\t\t\t\t VALUES\n\t\t\t\t ( '\".$db->escapeStr($_REQUEST['installAdminUser']).\"', '\".$db->escapeStr($_REQUEST['installAdminEmail']).\"', '\".$db->escapeStr($passEnc).\"',\n\t\t\t\t '\".$db->escapeStr($_REQUEST['installAdminBFXKey']).\"', '\".$db->escapeStr($_REQUEST['installAdminBFXSec']).\"', '9' )\";\n\t\t\t$newUser = $db->iquery($sql);\n\n\t\t\tif($newUser['id']!=0){\n\n\t\t\t\t$sql = \"INSERT into `\".$config['db']['prefix'].\"Vars` (`userid`,`curType`,`minlendrate`,`spreadlend`,`USDgapBottom`,`USDgapTop`,`thirtyDayMin`,`highholdlimit`,`highholdamt` )\n\t\t\t\t\t VALUES\n\t\t\t\t\t ( '\".$newUser['id'].\"', 'USD', '0.0650', '3', '25000', '100000', '0.1500', '0.3500', '0' )\";\n\t\t\t\t$newActSettings = $db->iquery($sql);\n\t\t\t\t$sql = \"INSERT into `\".$config['db']['prefix'].\"Vars` (`userid`,`curType`,`minlendrate`,`spreadlend`,`USDgapBottom`,`USDgapTop`,`thirtyDayMin`,`highholdlimit`,`highholdamt` )\n\t\t\t\t\t VALUES\n\t\t\t\t\t ( '\".$newUser['id'].\"', 'BTC', '0.0150', '2', '2', '10', '0.1500', '0.3500', '0' )\";\n\t\t\t\t$newActSettings = $db->iquery($sql);\n\n\n\t\t\t\t$alert[] = '<strong>User '.$_REQUEST['new_name'].'</strong> Account Created';\n\t\t\t\t$_REQUEST['doInstall']=3;\n\n\t\t\t}\n\t\t}\n\t\telse{\n\t\t\tif(stristr($bt['message'], \"permission\")){\n\n\t\t\t\t$warning[] = 'Your Bitfinex API Key doesn\\'t seem to have the correct permissions.<br>Make sure you allow the key \"Read\" access to Account Info, Account History, Orders, Margin Trading, Margin Funding, and Wallets.<br>Make sure you allow the key \"Write\" access to Margin Funding and Wallets.<br>Do NOT allow the key any access to Withdraw for security reasons.';\n\t\t\t}\n\t\t\telse{\n\t\t\t\t$warning[] = 'Something doesn\\'t seem to be working.  Most likely you haven\\'t set up your API Key correctly.<br>Make sure you allow the key \"Read\" access to Account Info, Account History, Orders, Margin Trading, Margin Funding, and Wallets.<br>Make sure you allow the key \"Write\" access to Margin Funding and Wallets.<br>Do NOT allow the key any access to Withdraw for security reasons.';\n\t\t\t}\n\t\t\t$_REQUEST['doInstall']==2;\n\t\t}\n\t}\n\telse{\n\n\t\t$warning[] = 'Something doesn\\'t seem to be working.  Most likely you haven\\'t set up your API Key correctly.<br>Make sure you allow the key \"Read\" access to Account Info, Account History, Orders, Margin Trading, Margin Funding, and Wallets.<br>Make sure you allow the key \"Write\" access to Margin Funding and Wallets.<br>Do NOT allow the key any access to Withdraw for security reasons.';\n\t\t$_REQUEST['doInstall']==2;\n\t}\n}\n\n\n\n\nrequire_once(\"inc/General.php\");\n$gen = new General();\n\necho '\n<!DOCTYPE html>\n<html xmlns=\"http:\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title>'.$config['app_name'].' '.$config['app_version'].'.'.$config['app_version_minor'].' - Install</title>\n\t<script type=\"text/javascript\" src=\"http:\n\t<script type=\"text/javascript\" src=\"http:\n    <script type=\"text/javascript\" src=\"js/jquery.formatCurrency-1.4.0.min.js\"></script>\n    <!-- Bootstrap -->\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\n\t<link href=\"css/bootstrap-theme.min.css\" rel=\"stylesheet\">\n    <!-- Custom styles for this template -->\n    <link href=\"css/styles.css\" rel=\"stylesheet\">\n    <!--[if lt IE 9]>\n      <script src=\"https:\n      <script src=\"https:\n    <![endif]-->\n</head>\n<body>\n<nav class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\n      <div class=\"container\">\n        <div class=\"navbar-header\">\n          <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </button>\n          <a class=\"navbar-brand\" href=\"index.php\">'.$config['app_name'].' '.$config['app_version'].'</a>\n        </div>\n        <div id=\"navbar\" class=\"navbar-collapse collapse\">\n            <ul class=\"nav navbar-nav\">\n\t\t\t<li style=\"padding:8px 30px 0px 30px;\">\n            \t<button type=\"button\" class=\"btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"\n                  Sign Up For Bitfinex 10% Off Fees\n                </button>\n            </li>\n            <li style=\"padding:8px 30px 0px 30px;\">\n            \t<button type=\"button\" class=\"btn btn-default btn-sm\" data-toggle=\"modal\" data-target=\"\n                  Support Development\n                </button>\n            </li>\n            <li class=\"dropdown\">\n              <a href=\"\n              <ul class=\"dropdown-menu\" role=\"menu\">\n                <li><a href=\"mailto:'.$config['app_support_email'].'\">Email</a></li>\n                <li><a href=\"'.$config['app_support_url'].'\">Forums</a></li>\n              </ul>\n            </li>\n          </ul>\n\n        </div><!--/.nav-collapse -->\n      </div>\n    </nav>';\n$gen->showSiteModals();\n\necho '\n<div class=\"container\">\n';\n\n\n\n$gen->showWarnings($warning);\n$gen->showAlerts($alert);\n\n\n\nif($_REQUEST['doInstall']<=1){\n\n\t$_REQUEST['installDBHost'] = (!$_REQUEST['installDBHost'] ? 'localhost':$_REQUEST['installDBHost']);\n\t$_REQUEST['installDBPrefix'] = (!$_REQUEST['installDBPrefix'] ? 'BFXLendBot_':$_REQUEST['installDBPrefix']);\n\n\techo '\n\n\t\t<div class=\"panel panel-default\">\n\t\t\t\t<div class=\"panel-heading\">Lets Install '.$config['app_name'].' '.$config['app_version'].'.'.$config['app_version_minor'].'</div>\n\t\t\t\t<div class=\"panel-body table-responsive\">\n\t\t\t\t\tIt looks like you haven\\'t run through the '.$config['app_name'].' '.$config['app_version'].' Installer yet.  Lets do so now!\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t<form action=\"install.php\" method=\"post\" autocomplete=\"off\" >\n\t\t\t<input type=\"hidden\" name=\"doInstall\" value=\"1\">\n\n\t\t<div class=\"panel panel-default\">\n\t\t\t\t<div class=\"panel-heading\">Step 1 - Local Server Settings</div>\n\t\t\t\t<div class=\"panel-body table-responsive\">\n\n\t\t\t\t\t<table class=\"table table-striped table-bordered\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th class=\"mid\" style=\"width:20%;\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Database Host\" data-content=\"Database Host Address.   Unless you\\'re doing something weird, this is probably \\'localhost\\'.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tDatabase Host\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class=\"mid\" style=\"width:20%;\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Database Name\" data-content=\"name of the database you\\'ll be using.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tDatabase Name\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class=\"mid\" style=\"width:20%;\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Database User\" data-content=\"Database user account.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tDatabase User\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class=\"mid\" style=\"width:20%;\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Database Password\" data-content=\"Database User Password.  Make sure this is a good secure password.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tDatabase Password\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class=\"mid\" style=\"width:20%;\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Database Prefix\" data-content=\"This will be appended to the front of each database table. Useful for servers with more than 1 install of the bot. (Ex: BFXLendBot1_ would create the user table as BFXLendBot1_Users)\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tDatabase Prefix\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"inputDBHost\" class=\"form-control\"  required=\"\" autofocus=\"\" name=\"installDBHost\"  autocomplete=\"off\" value=\"'.$_REQUEST['installDBHost'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"inputDBName\" class=\"form-control\" placeholder=\"Database Name\" autofocus=\"\" name=\"installDBName\"  autocomplete=\"off\" value=\"'.$_REQUEST['installDBName'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"inputDBUser\" class=\"form-control\" placeholder=\"Database User\" autofocus=\"\" name=\"installDBUser\"  autocomplete=\"off\" value=\"'.$_REQUEST['installDBUser'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"inputDBPassword\" class=\"form-control\" placeholder=\"Database Password\" autofocus=\"\" name=\"installDBPassword\"  autocomplete=\"off\" value=\"'.$_REQUEST['installDBPassword'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"inputDBPrefix\" class=\"form-control\" placeholder=\"BFXLendBot_\" autofocus=\"\" name=\"installDBPrefix\"  autocomplete=\"off\" value=\"'.$_REQUEST['installDBPrefix'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Site Email Address\" data-content=\"This is shown as the error support address.  Its not really used for much yet.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tSite Email Address\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Bitfinex Margin Fees\" data-content=\"The fee Bitfinex charges for margin lending.  It\\'s used to do various calculations.  You can find the latest fee at https:\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tMargin Fee\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<td class=\"mid\" colspan=\"3\" rowspan=\"2\">\n\t\t\t\t\t\t\t\t<button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" style=\"width:200px;margin: 20px auto;\">Go To Step 2</button>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"inputSiteEmail\" class=\"form-control\" placeholder=\"you@yourdomain.com\" required=\"\" autofocus=\"\" name=\"installEmail\"  autocomplete=\"off\" value=\"'.$_REQUEST['installEmail'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<div class=\"input-group\">\n\t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"installBFXFees\" value=\"15.0000\" class=\"form-control autoPercent\">\n\t\t\t\t\t\t\t\t\t<span class=\"input-group-addon\">%</span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</td>\n\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t</form>\n\n\t\t\t';\n}\nelse if($_REQUEST['doInstall']==2){\n\techo '\n\t\t<form action=\"install.php\" method=\"post\" autocomplete=\"off\" >\n\t\t\t<input type=\"hidden\" name=\"doInstall\" value=\"2\">\n\n\t\t<div class=\"panel panel-default\">\n\t\t\t\t<div class=\"panel-heading\">Step 2 - Admin Account Details</div>\n\t\t\t\t<div class=\"panel-body table-responsive\">\n\t\t\t\t\t<table class=\"table table-striped table-bordered\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th class=\"mid\" style=\"width:20%;\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Database Host\" data-content=\"Database Host Address.   Unless you\\'re doing something weird, this is probably \\'localhost\\'.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tAdmin Username\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class=\"mid\" style=\"width:20%;\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Database Name\" data-content=\"name of the database you\\'ll be using.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tAdmin Email\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class=\"mid\" style=\"width:20%;\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Database User\" data-content=\"Database user account.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tAdmin Password\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class=\"mid\" style=\"width:20%;\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Database Password\" data-content=\"Database User Password.  Make sure this is a good secure password.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tAdmin\\'s Bitfinex API Key\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class=\"mid\" style=\"width:20%;\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Database Prefix\" data-content=\"This will be appended to the front of each database table. Useful for servers with more than 1 install of the bot. (Ex: BFXLendBot1_ would create the user table as BFXLendBot1_Users)\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tAdmin\\'s Bitfinex API Secret\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"inputAdminUser\" class=\"form-control\"  required=\"\" autofocus=\"\" name=\"installAdminUser\"  autocomplete=\"off\" value=\"'.$_REQUEST['installAdminUser'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"inputAdminEmail\" class=\"form-control\" placeholder=\"you@yourdomain.com\" autofocus=\"\" name=\"installAdminEmail\"  autocomplete=\"off\" value=\"'.$_REQUEST['installAdminEmail'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"inputAdminPassword\" class=\"form-control\" placeholder=\"Password\" autofocus=\"\" name=\"installAdminPassword\"  autocomplete=\"off\" value=\"'.$_REQUEST['installAdminPassword'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"inputAdminBFXKey\" class=\"form-control\" placeholder=\"API Key\" autofocus=\"\" name=\"installAdminBFXKey\"  autocomplete=\"off\" value=\"'.$_REQUEST['installAdminBFXKey'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"inputAdminBFXSec\" class=\"form-control\" placeholder=\"API Secret\" autofocus=\"\" name=\"installAdminBFXSec\"  autocomplete=\"off\" value=\"'.$_REQUEST['installAdminBFXSec'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\n\t\t\t\t\t\t\t<td class=\"mid\" colspan=\"5\">\n\t\t\t\t\t\t\t\t<button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" style=\"width:200px;margin: 20px auto;\">Complete Install</button>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t</form>\n\n\t\t\t';\n}\nelse if($_REQUEST['doInstall']==3){\n\t$cronURL = 'http:\n\n\techo '\n\t\t<div class=\"panel panel-default\">\n\t\t\t\t<div class=\"panel-heading\">Install Complete!</div>\n\t\t\t\t<div class=\"panel-body table-responsive\">\n\t\t\t\t\tLooks like everything is ready to go!  Its a good idea to set your config file back to read only (chmod 655 '.$configFile.' ), and maybe even delete this file ( install.php ).<br><Br>\n\n\t\t\t\t\tFinally, if you want this bot to do anything useful, you\\'re going to need to set up 2 cron jobs, one that runs crons/TenMinuteCron.php every 10 minutes, and one that runs crons/HourlyCron.php once an hour.  To do this on linux, set your crons to:\n\t\t\t\t\t<ul>\n\t\t\t\t\t\t<li>01,11,21,31,41,51 * * * * wget -qO- '.$cronURL.'TenMinuteCron.php >/dev/null 2>&1</li>\n\t\t\t\t\t\t<li>5 * * * * wget -qO- '.$cronURL.'HourlyCron.php >/dev/null 2>&1</li>\n\t\t\t\t\t</ul>\n\n\t\t\t\t\tOnce you\\'ve changed config to read only and added the 2 crons, <a href=\"index.php\">Log In</a> to get started!\n\t\t\t\t\t<br>\n\t\t\t\t\t<button onClick=\"window.location=\\'index.php\\'\" class=\"btn btn-lg btn-primary btn-block\" type=\"submit\" style=\"width:200px;margin: 20px auto;\">Log In Now!</button>\n\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t';\n}\n\n\nrequire_once('inc/footer.php');\n?>",
        "gt": [
            "'MarginBot/inc/version_info.php'",
            "'MarginBot/inc/config.php'",
            "'MarginBot/install.php'"
        ]
    },
    {
        "files": [
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'",
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/src/settings/class-settings.php'"
        ],
        "content": "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'\n:<?php\n\n\n\nrequire_once dirname( __DIR__ ) . '/vendor/autoload.php';\n\n\n\n$_tests_dir = getenv( 'WP_TESTS_DIR' );\n\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = getenv( 'WP_PHPUNIT__DIR' );\n}\n\n\nif ( ! $_tests_dir ) {\n\t$_try_tests_dir = __DIR__ . '/../../../../../tests/phpunit';\n\tif ( file_exists( $_try_tests_dir . '/includes/functions.php' ) ) {\n\t\t$_tests_dir = $_try_tests_dir;\n\t}\n}\n\nif ( ! $_tests_dir ) {\n\t$_tests_dir = '/tmp/wordpress-tests-lib';\n}\n\n\nrequire_once $_tests_dir . '/includes/functions.php';\n\n\n\ndefine( 'GUTENBERG_LOAD_VENDOR_SCRIPTS', false );\n\n\nfunction _manually_load_plugin() {\n\trequire dirname( __DIR__ ) . '/wp-bootstrap-blocks.php';\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );\n\n\nrequire $_tests_dir . '/includes/bootstrap.php';\n\n\nrequire_once __DIR__ . '/wp-bootstrap-blocks-unittestcase.php';\n\n'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'\n:<?php\n\n\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE' ) ) {\n\tdefine( 'WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE', __FILE__ );\n}\n\n\nif ( ! class_exists( \\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::class ) ) {\n\trequire_once plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'src/class-wp-bootstrap-blocks.php';\n}\n\n\n\\WP_Bootstrap_Blocks\\WP_Bootstrap_Blocks::instance();\n\n'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'\n:<?php\n\n\nnamespace WP_Bootstrap_Blocks;\n\nuse WP_Bootstrap_Blocks\\Button\\Button_Block_Type;\nuse WP_Bootstrap_Blocks\\Column\\Column_Block_Type;\nuse WP_Bootstrap_Blocks\\Container\\Container_Block_Type;\nuse WP_Bootstrap_Blocks\\Row\\Row_Block_Type;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nclass WP_Bootstrap_Blocks {\n\n\n\tprotected static $instance = null;\n\n\n\tpublic static $version = '5.2.0';\n\n\n\tpublic $token = 'wp-bootstrap-blocks';\n\n\n\tpublic $assets_dir;\n\n\n\tpublic $assets_url;\n\n\n\tpublic $languages_dir;\n\n\n\tpublic $languages_dir_full;\n\n\n\tpublic function __construct() {\n\t\t$this->define_constants();\n\t\t$this->init_plugin_environment();\n\t\t$this->includes();\n\t\t$this->init_hooks();\n\t\t$this->register_block_types();\n\t\tSettings::init( $this->assets_dir, $this->assets_url );\n\t}\n\n\n\tprotected function define_constants() {\n\t\tif ( ! defined( 'WP_BOOTSTRAP_BLOCKS_ABSPATH' ) ) {\n\t\t\tdefine( 'WP_BOOTSTRAP_BLOCKS_ABSPATH', trailingslashit( dirname( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t}\n\t}\n\n\n\tprotected function init_plugin_environment() {\n\n\t\t$this->assets_dir = WP_BOOTSTRAP_BLOCKS_ABSPATH . 'build/';\n\t\t$this->assets_url = esc_url( trailingslashit( plugins_url( '/build/', WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) );\n\t\t$this->languages_dir = dirname( plugin_basename( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) ) . '/languages/';\n\t\t$this->languages_dir_full = plugin_dir_path( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ) . 'languages/';\n\t}\n\n\n\tpublic function includes() {\n\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/wp-bootstrap-blocks-functions.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/class-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/container/class-container-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/row/class-row-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/column/class-column-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/button/class-button-block-type.php';\n\t\trequire_once WP_BOOTSTRAP_BLOCKS_ABSPATH . 'src/settings/class-settings.php';\n\t}\n\n\n\tprotected function init_hooks() {\n\n\t\tadd_action( 'enqueue_block_assets', array( $this, 'enqueue_block_assets' ) );\n\n\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'enqueue_block_editor_assets' ), 99 );\n\n\n\t\tif ( class_exists( 'WP_Block_Editor_Context' ) ) {\n\n\t\t\tadd_filter( 'block_categories_all', array( $this, 'register_custom_block_category' ), 10, 2 );\n\t\t} else {\n\t\t\tadd_filter( 'block_categories', array( $this, 'register_custom_block_category_old' ), 10, 2 );\n\t\t}\n\n\n\t\tadd_action( 'plugins_loaded', array( $this, 'load_plugin_textdomain' ) );\n\t\tadd_action( 'enqueue_block_editor_assets', array( $this, 'set_script_translations' ), 100 );\n\n\n\t\tadd_action( 'init', array( $this, 'check_version' ) );\n\t}\n\n\n\tpublic function enqueue_block_assets() {\n\n\t\t$enqueue_block_assets = apply_filters( 'wp_bootstrap_blocks_enqueue_block_assets', true );\n\t\tif ( ! $enqueue_block_assets ) {\n\t\t\treturn;\n\t\t}\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-styles',\n\t\t\tesc_url( $this->assets_url ) . 'style-index.css',\n\t\t\tarray(),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function enqueue_block_editor_assets() {\n\n\t\t$index_path = $this->assets_dir . 'index.js';\n\t\t$index_url = esc_url( $this->assets_url ) . 'index.js';\n\t\t$index_asset_file = $this->assets_dir . 'index.asset.php';\n\t\t$index_asset = file_exists( $index_asset_file )\n\t\t\t? require_once $index_asset_file\n\t\t\t: null;\n\t\t$index_dependencies = isset( $index_asset['dependencies'] ) ? $index_asset['dependencies'] : array();\n\t\t$index_version = isset( $index_asset['version'] ) ? $index_asset['version'] : filemtime( $index_path );\n\n\t\twp_enqueue_script(\n\t\t\t$this->token . '-js',\n\t\t\t$index_url,\n\t\t\t$index_dependencies,\n\t\t\t$index_version,\n\t\t\ttrue\n\t\t);\n\n\t\twp_localize_script(\n\t\t\t$this->token . '-js',\n\t\t\t'wpBootstrapBlocks',\n\t\t\tarray(\n\t\t\t\t'bootstrapVersion' => Settings::get_bootstrap_version(),\n\t\t\t\t'isBootstrap5Active' => Settings::is_bootstrap_5_active(),\n\t\t\t\t'isCssGridEnabled' => Settings::is_css_grid_enabled(),\n\t\t\t)\n\t\t);\n\n\n\t\twp_enqueue_style(\n\t\t\t$this->token . '-editor-styles',\n\t\t\tesc_url( $this->assets_url ) . 'index.css',\n\t\t\tarray( 'wp-edit-blocks' ),\n\t\t\tself::$version\n\t\t);\n\t}\n\n\n\tpublic function register_custom_block_category( $block_categories, $block_editor_context ) {\n\t\treturn $this->add_custom_block_category( $block_categories );\n\t}\n\n\n\tpublic function register_custom_block_category_old( $categories, $post ) {\n\t\treturn $this->add_custom_block_category( $categories );\n\t}\n\n\n\tprotected function add_custom_block_category( $block_categories ) {\n\t\treturn array_merge(\n\t\t\t$block_categories,\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'slug' => 'wp-bootstrap-blocks',\n\t\t\t\t\t'title' => __( 'Bootstrap Blocks', 'wp-bootstrap-blocks' ),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t}\n\n\n\tpublic function load_plugin_textdomain() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\tload_plugin_textdomain( $domain, false, $this->languages_dir );\n\t}\n\n\n\tpublic function set_script_translations() {\n\t\t$domain = 'wp-bootstrap-blocks';\n\t\twp_set_script_translations( $this->token . '-js', $domain, $this->languages_dir_full );\n\t}\n\n\n\tpublic function register_block_types() {\n\t\tnew Container_Block_Type();\n\t\tnew Row_Block_Type();\n\t\tnew Column_Block_Type();\n\t\tnew Button_Block_Type();\n\t}\n\n\n\tpublic static function instance() {\n\t\tif ( is_null( self::$instance ) ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\n\t\treturn self::$instance;\n\t}\n\n\n\tpublic function __clone() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function __wakeup() {\n\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Cheatin&\n\t}\n\n\n\tpublic function check_version() {\n\t\tif ( defined( 'IFRAME_REQUEST' ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t$transient_name = 'wp_bootstrap_blocks_version';\n\n\t\t$old_version = get_transient( $transient_name );\n\t\tif ( false === $old_version ) {\n\t\t\t$old_version = get_option( $this->token . '_version' );\n\t\t\tset_transient( $transient_name, $old_version, 5 * MINUTE_IN_SECONDS );\n\t\t}\n\t\t$new_version = self::$version;\n\t\tif ( $old_version !== $new_version ) {\n\t\t\t$this->log_version_number();\n\t\t\tdelete_transient( $transient_name );\n\n\n\t\t\tdo_action( $this->token . '_updated', $new_version, $old_version );\n\t\t}\n\t}\n\n\n\tprotected function log_version_number() {\n\t\tdelete_option( $this->token . '_version' );\n\t\tupdate_option( $this->token . '_version', self::$version );\n\t}\n}\n\n'bootstrap-blocks-wordpress-plugin/src/settings/class-settings.php'\n:<?php\n\n\nnamespace WP_Bootstrap_Blocks;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n\nif ( ! class_exists( '\\WP_Bootstrap_Blocks\\Settings', false ) ) :\n\n\tclass Settings {\n\n\n\t\tconst OPTION_PREFIX = 'wp-bootstrap-blocks_';\n\n\n\t\tconst MENU_SLUG = 'wp-bootstrap-blocks_settings';\n\n\n\t\tconst BOOTSTRAP_VERSION_CONSTANT_NAME = 'WP_BOOTSTRAP_BLOCKS_BOOTSTRAP_VERSION';\n\n\n\t\tconst BOOTSTRAP_VERSION_OPTION_NAME = self::OPTION_PREFIX . 'bootstrap_version';\n\n\n\t\tconst BOOTSTRAP_VERSION_DEFAULT_VALUE = '5';\n\n\n\t\tconst ENABLE_CSS_GRID_CONSTANT_NAME = 'WP_BOOTSTRAP_BLOCKS_ENABLE_CSS_GRID';\n\n\n\t\tconst ENABLE_CSS_GRID_OPTION_NAME = self::OPTION_PREFIX . 'enable_css_grid';\n\n\n\t\tconst ENABLE_CSS_GRID_DEFAULT_VALUE = false;\n\n\n\t\tpublic static $assets_dir = '';\n\n\n\t\tpublic static $assets_url = '';\n\n\n\t\tprivate static $initialized = false;\n\n\n\t\tpublic static function init( $assets_dir, $assets_url ) {\n\t\t\tif ( ! self::$initialized ) {\n\t\t\t\tself::$assets_dir = $assets_dir;\n\t\t\t\tself::$assets_url = $assets_url;\n\n\n\t\t\t\tadd_action( 'admin_menu', array( __CLASS__, 'add_menu_item' ) );\n\n\n\t\t\t\tadd_action( 'admin_init', array( __CLASS__, 'register_settings' ) );\n\n\n\t\t\t\tadd_filter(\n\t\t\t\t\t'plugin_action_links_' . plugin_basename( WP_BOOTSTRAP_BLOCKS_PLUGIN_FILE ),\n\t\t\t\t\tarray(\n\t\t\t\t\t\t__CLASS__,\n\t\t\t\t\t\t'add_settings_link',\n\t\t\t\t\t)\n\t\t\t\t);\n\n\n\t\t\t\tadd_filter( 'pre_update_option_' . self::BOOTSTRAP_VERSION_OPTION_NAME, array( __CLASS__, 'pre_update_option_bootstrap_version' ), 10, 2 );\n\n\n\t\t\t\tadd_filter( 'pre_update_option_' . self::ENABLE_CSS_GRID_OPTION_NAME, array( __CLASS__, 'pre_update_option_css_grid_enabled' ), 10, 2 );\n\n\n\t\t\t\tadd_action( 'admin_enqueue_scripts', array( __CLASS__, 'enqueue_styles' ) );\n\n\t\t\t\tself::$initialized = true;\n\t\t\t}\n\t\t}\n\n\n\t\tpublic static function enqueue_styles( $hook ) {\n\t\t\tif ( 'settings_page_' . self::MENU_SLUG !== $hook ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$settings_styles_path = self::$assets_dir . 'settings.css';\n\t\t\t$settings_styles_url = esc_url( self::$assets_url ) . 'settings.css';\n\t\t\t$settings_asset_file = self::$assets_dir . 'settings.asset.php';\n\t\t\t$settings_asset = file_exists( $settings_asset_file )\n\t\t\t\t? require_once $settings_asset_file\n\t\t\t\t: null;\n\t\t\t$settings_version = isset( $settings_asset['version'] ) ? $settings_asset['version'] : filemtime( $settings_styles_path );\n\n\t\t\twp_register_style( self::MENU_SLUG . '_styles', $settings_styles_url, false, $settings_version );\n\t\t\twp_enqueue_style( self::MENU_SLUG . '_styles' );\n\t\t}\n\n\n\t\tpublic static function add_menu_item() {\n\t\t\tadd_options_page( __( 'Bootstrap Blocks Settings', 'wp-bootstrap-blocks' ), __( 'Bootstrap Blocks', 'wp-bootstrap-blocks' ), 'manage_options', self::MENU_SLUG, array( __CLASS__, 'settings_page' ) );\n\t\t}\n\n\n\t\tpublic static function add_settings_link( $links ) {\n\t\t\t$settings_link = '<a href=\"' . esc_url( admin_url( 'options-general.php?page=' . self::MENU_SLUG ) ) . '\">' . esc_html__( 'Settings', 'wp-bootstrap-blocks' ) . '</a>';\n\n\t\t\tarray_unshift( $links, $settings_link );\n\n\t\t\treturn $links;\n\t\t}\n\n\n\t\tpublic static function register_settings() {\n\t\t\t$section = 'default';\n\n\t\t\t$settings_fields = array(\n\t\t\t\tarray(\n\t\t\t\t\t'option_name' => self::BOOTSTRAP_VERSION_OPTION_NAME,\n\t\t\t\t\t'label' => __( 'Bootstrap Version', 'wp-bootstrap-blocks' ),\n\t\t\t\t\t'description' => __( 'Depending on the selected Bootstrap version the blocks will be rendered accordingly and version specific features will be available in the editor.', 'wp-bootstrap-blocks' ),\n\t\t\t\t\t'type' => 'select',\n\t\t\t\t\t'default' => self::BOOTSTRAP_VERSION_DEFAULT_VALUE,\n\t\t\t\t\t'options' => array(\n\t\t\t\t\t\t'4' => '4.x',\n\t\t\t\t\t\t'5' => '5.x',\n\t\t\t\t\t),\n\t\t\t\t\t'constant_name' => self::BOOTSTRAP_VERSION_CONSTANT_NAME,\n\t\t\t\t\t'disabled' => false,\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'option_name' => self::ENABLE_CSS_GRID_OPTION_NAME,\n\t\t\t\t\t'label' => __( 'Enable CSS grid (Experimental)', 'wp-bootstrap-blocks' ),\n\t\t\t\t\t'description' => __( 'If enabled Bootstrap\\'s CSS grid will be used instead of the default flexbox grid system. The CSS grid is supported with Bootstrap >= 5.1.0. The `$enable-cssgrid` Bootstrap setting has to be set to `true` if this option is enabled.', 'wp-bootstrap-blocks' ),\n\t\t\t\t\t'type' => 'checkbox',\n\t\t\t\t\t'default' => self::ENABLE_CSS_GRID_DEFAULT_VALUE,\n\t\t\t\t\t'constant_name' => self::ENABLE_CSS_GRID_CONSTANT_NAME,\n\t\t\t\t\t'disabled' => ! self::is_bootstrap_5_active(),\n\t\t\t\t),\n\t\t\t);\n\n\n\t\t\tadd_settings_section(\n\t\t\t\t$section,\n\t\t\t\t__( 'Main settings', 'wp-bootstrap-blocks' ),\n\t\t\t\tarray(\n\t\t\t\t\t__CLASS__,\n\t\t\t\t\t'settings_section',\n\t\t\t\t),\n\t\t\t\tself::MENU_SLUG\n\t\t\t);\n\n\t\t\tforeach ( $settings_fields as $field ) {\n\n\t\t\t\tregister_setting( self::MENU_SLUG, $field['option_name'] );\n\n\t\t\t\t$field_args = array(\n\t\t\t\t\t'field' => $field,\n\t\t\t\t);\n\n\t\t\t\tif ( 'radio' !== $field['type'] ) {\n\t\t\t\t\t$field_args['label_for'] = $field['option_name'];\n\t\t\t\t}\n\n\n\t\t\t\tadd_settings_field(\n\t\t\t\t\t$field['option_name'],\n\t\t\t\t\t$field['label'],\n\t\t\t\t\tarray(\n\t\t\t\t\t\t__CLASS__,\n\t\t\t\t\t\t'display_field',\n\t\t\t\t\t),\n\t\t\t\t\tself::MENU_SLUG,\n\t\t\t\t\t$section,\n\t\t\t\t\t$field_args\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\n\t\tpublic static function settings_section( $section ) {\n\t\t}\n\n\n\t\tpublic static function settings_page() {\n\t\t\tif ( ! current_user_can( 'manage_options' ) ) {\n\t\t\t\twp_die( esc_html__( 'You do not have sufficient permissions to access this page.', 'wp-bootstrap-blocks' ) );\n\t\t\t}\n\t\t\t?>\n\t\t\t<div class=\"wrap\" id=\"<?php echo esc_attr( self::MENU_SLUG ); ?>\">\n\t\t\t\t<h1><?php esc_html_e( 'Bootstrap Blocks Settings', 'wp-bootstrap-blocks' ); ?></h1>\n\n\t\t\t\t<form method=\"post\" action=\"options.php\" enctype=\"multipart/form-data\">\n\t\t\t\t\t<?php\n\n\t\t\t\t\tsettings_fields( self::MENU_SLUG );\n\t\t\t\t\tdo_settings_sections( self::MENU_SLUG );\n\t\t\t\t\tsubmit_button();\n\t\t\t\t\t?>\n\t\t\t\t</form>\n\n\t\t\t</div><!--end\n\t\t\t<?php\n\t\t}\n\n\n\t\tpublic static function display_field( $data = array() ) {\n\n\t\t\tif ( ! isset( $data['field'] ) ) {\n\t\t\t\t_doing_it_wrong( __FUNCTION__, esc_html__( 'Field data missing.', 'wp-bootstrap-blocks' ), esc_attr( WP_Bootstrap_Blocks::$version ) );\n\t\t\t}\n\n\t\t\t$field = $data['field'];\n\n\t\t\t$is_option_constant_set = ! empty( $field['constant_name'] ) && defined( $field['constant_name'] );\n\t\t\tif ( $is_option_constant_set ) {\n\t\t\t\t$option_value = constant( $field['constant_name'] );\n\t\t\t\t$disabled = true;\n\t\t\t} else {\n\t\t\t\tif ( isset( $field['default'] ) ) {\n\t\t\t\t\t$option_value = get_option( $field['option_name'], $field['default'] );\n\t\t\t\t} else {\n\t\t\t\t\t$option_value = get_option( $field['option_name'], '' );\n\t\t\t\t}\n\t\t\t\t$disabled = array_key_exists( 'disabled', $field ) ? $field['disabled'] : false;\n\t\t\t}\n\n\t\t\t$placeholder = ( array_key_exists( 'placeholder', $field ) ? $field['placeholder'] : '' );\n\t\t\t$html = '';\n\n\t\t\tswitch ( $field['type'] ) {\n\t\t\t\tcase 'text':\n\t\t\t\tcase 'url':\n\t\t\t\tcase 'email':\n\t\t\t\t\t$html .= '<input id=\"' . esc_attr( $field['option_name'] ) . '\" type=\"text\" name=\"' . esc_attr( $field['option_name'] ) . '\" placeholder=\"' . esc_attr( $placeholder ) . '\" value=\"' . esc_attr( $option_value ) . '\" ' . disabled( $disabled, true, false ) . '/>' . \"\\n\";\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'textarea':\n\t\t\t\t\t$html .= '<textarea id=\"' . esc_attr( $field['option_name'] ) . '\" rows=\"5\" cols=\"50\" name=\"' . esc_attr( $field['option_name'] ) . '\" placeholder=\"' . esc_attr( $placeholder ) . '\" ' . disabled( $disabled, true, false ) . '>' . $option_value . '</textarea>' . \"\\n\";\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'checkbox':\n\t\t\t\t\t$html .= '<input id=\"' . esc_attr( $field['option_name'] ) . '\" type=\"checkbox\" name=\"' . esc_attr( $field['option_name'] ) . '\" value=\"1\" ' . checked( '1', $option_value, false ) . ' ' . disabled( $disabled, true, false ) . '/>' . \"\\n\";\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'radio':\n\t\t\t\t\tforeach ( $field['options'] as $k => $v ) {\n\t\t\t\t\t\t$html .= '<p><label for=\"' . esc_attr( $field['option_name'] . '_' . $k ) . '\"><input type=\"radio\" id=\"' . esc_attr( $field['option_name'] . '_' . $k ) . '\" name=\"' . esc_attr( $field['option_name'] ) . '\" value=\"' . esc_attr( $k ) . '\" ' . checked( strval( $k ), strval( $option_value ), false ) . ' ' . disabled( $disabled, true, false ) . ' /> ' . $v . '</label></p>' . \"\\n\";\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'select':\n\t\t\t\t\t$html .= '<select name=\"' . esc_attr( $field['option_name'] ) . '\" id=\"' . esc_attr( $field['option_name'] ) . '\"' . disabled( $disabled, true, false ) . '>' . \"\\n\";\n\t\t\t\t\tforeach ( $field['options'] as $k => $v ) {\n\t\t\t\t\t\t$html .= '<option ' . selected( strval( $k ), strval( $option_value ), false ) . ' value=\"' . esc_attr( $k ) . '\">' . $v . '</option>' . \"\\n\";\n\t\t\t\t\t}\n\t\t\t\t\t$html .= '</select>' . \"\\n\";\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif ( array_key_exists( 'description', $field ) ) {\n\t\t\t\t$html .= '<p class=\"description\">' . esc_html( $field['description'] ) . '</p>' . \"\\n\";\n\t\t\t}\n\n\t\t\tif ( $is_option_constant_set ) {\n\t\t\t\t$html .= '<p class=\"description constant-notice\">' .\n\t\t\t\t\tsprintf(\n\n\t\t\t\t\t\tesc_html_x(\n\t\t\t\t\t\t\t'Option is defined in the following constant: %s',\n\t\t\t\t\t\t\t'%s contains constant name',\n\t\t\t\t\t\t\t'wp-bootstrap-blocks'\n\t\t\t\t\t\t),\n\t\t\t\t\t\t'<code>' . esc_html( $field['constant_name'] ) . '</code>'\n\t\t\t\t\t) . '</p>' . \"\\n\";\n\t\t\t}\n\n\n\t\t\techo $html;\n\n\t\t}\n\n\n\t\tpublic static function pre_update_option_bootstrap_version( $new_value, $old_value ) {\n\t\t\treturn defined( self::BOOTSTRAP_VERSION_CONSTANT_NAME ) ? strval( constant( self::BOOTSTRAP_VERSION_CONSTANT_NAME ) ) : $new_value;\n\t\t}\n\n\n\t\tpublic static function pre_update_option_css_grid_enabled( $new_value, $old_value ) {\n\t\t\treturn self::is_bootstrap_5_active()\n\t\t\t\t? defined( self::ENABLE_CSS_GRID_CONSTANT_NAME ) ? boolval( constant( self::ENABLE_CSS_GRID_CONSTANT_NAME ) ) : $new_value\n\t\t\t\t: false;\n\t\t}\n\n\n\t\tpublic static function get_bootstrap_version() {\n\t\t\treturn strval( self::get_option( self::BOOTSTRAP_VERSION_OPTION_NAME, self::BOOTSTRAP_VERSION_CONSTANT_NAME, self::BOOTSTRAP_VERSION_DEFAULT_VALUE ) );\n\t\t}\n\n\n\t\tpublic static function is_bootstrap_5_active() {\n\t\t\treturn version_compare( self::get_bootstrap_version(), '5', '>=' );\n\t\t}\n\n\n\t\tpublic static function is_css_grid_enabled() {\n\t\t\treturn self::is_bootstrap_5_active() && boolval( self::get_option( self::ENABLE_CSS_GRID_OPTION_NAME, self::ENABLE_CSS_GRID_CONSTANT_NAME, self::ENABLE_CSS_GRID_DEFAULT_VALUE ) );\n\t\t}\n\n\n\t\tpublic static function get_option( $option_name, $constant_name, $default_value ) {\n\t\t\treturn defined( $constant_name ) ? constant( $constant_name ) : get_option( $option_name, $default_value );\n\t\t}\n\t}\nendif;\n",
        "gt": [
            "'bootstrap-blocks-wordpress-plugin/src/settings/class-settings.php'",
            "'bootstrap-blocks-wordpress-plugin/src/class-wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/wp-bootstrap-blocks.php'",
            "'bootstrap-blocks-wordpress-plugin/phpunit/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'aurora/Web Interface/files/Leaderboard.php'",
            "'aurora/Web Interface/index.php'",
            "'aurora/Web Interface/components.php'"
        ],
        "content": "'aurora/Web Interface/files/Leaderboard.php'\n:<?php\ninclude_once(dirname(__FILE__) . '/../functions.php');\n\nclass Leaderboard {\n\tprivate static function cmp($a, $b) {\n\t\tif ($a['score'] > $b['score'])\n\t\t\treturn -1;\n\t\telse if ($a['score'] < $b['score'])\n\t\t\treturn 1;\n\t\telse {\n\t\t\tif ($a['solved'] > $b['solved'])\n\t\t\t\treturn -1;\n\t\t\telse if ($a['solved'] < $b['solved'])\n\t\t\t\treturn 1;\n\t\t\telse {\n\t\t\t\tif ($a['time'] + $a['penalty'] * 20 * 60 < $b['time'] + $b['penalty'] * 20 * 60)\n\t\t\t\t\treturn -1;\n\t\t\t\telse if ($a['time'] + $a['penalty'] * 20 * 60 > $b['time'] + $b['penalty'] * 20 * 60)\n\t\t\t\t\treturn 1;\n\t\t\t\telse\n\t\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic static function updateContestRankings($code) {\n\t\t$query = \"select * from contest where code = '$code'\";\n\t\t$contest = DB::findOneFromQuery($query);\n\t\t$query = \"select runs.tid as tid, teamname, problems.score, submittime as time,\n\t\t\t(select count(rid) from runs r where tid = runs.tid and pid = runs.pid and result != 'AC'\n\t\t\tand result is not NULL and submittime < runs.submittime) as penalty\n\t\t\tfrom runs, teams, problems, contest\n\t\t\twhere\n\t\t\tteams.status = 'Normal' and runs.tid = teams.tid and problems.pid = runs.pid and\n\t\t\truns.pid in (select pid from problems where pgroup ='$code') and result = 'AC' group by runs.tid, runs.pid\";\n\n\t\t$res = DB::findAllFromQuery($query);\n\t\tforeach ($res as $row) {\n\t\t\tif (isset($rank[$row['tid']])) {\n\t\t\t\t$rank[$row['tid']]['time'] += ($row['time'] - $contest['starttime']);\n\t\t\t\t$rank[$row['tid']]['score'] += $row['score'];\n\t\t\t\t$rank[$row['tid']]['penalty'] += $row['penalty'];\n\t\t\t\t$rank[$row['tid']]['solved'] ++;\n\t\t\t} else {\n\t\t\t\t$rank[$row['tid']]['teamname'] = $row['teamname'];\n\t\t\t\t$rank[$row['tid']]['time'] = ($row['time'] - $contest['starttime']);\n\t\t\t\t$rank[$row['tid']]['score'] = $row['score'];\n\t\t\t\t$rank[$row['tid']]['penalty'] = $row['penalty'];\n\t\t\t\t$rank[$row['tid']]['solved'] = 1;\n\t\t\t}\n\t\t}\n\t\tusort($rank, \"self::cmp\");\n\t\t$rankTableJSON = json_encode($rank);\n\t\tDB::query(\"UPDATE contest SET ranktable = '$rankTableJSON' WHERE code = '$code'\");\n\t}\n\n\tpublic static function getStaticRankTableInJSON($contestCode) {\n\t\t$query = \"SELECT ranktable FROM contest WHERE code = '$contestCode'\";\n\t\treturn DB::findOneFromQuery($query);\n\t}\n}\n\n\n\n\n\n\n\n'aurora/Web Interface/index.php'\n:<?php\nrequire_once 'config.php';\nrequire_once 'components.php';\n$_SESSION['url'] = $_SERVER['REQUEST_URI'];\n$query = \"select value from admin where variable='mode'\";\n$judge = DB::findOneFromQuery($query);\nif ($judge['value'] == 'Lockdown' && isset($_SESSION['loggedin']) && !isAdmin()) {\n    session_destroy();\n    session_regenerate_id(true);\n    session_start();\n    $_SESSION['msg'] = \"Judge is in Lockdown mode and so you have been logged out.\";\n    redirectTo(SITE_URL . \"/\");\n}\ndoCompetitionCheck();\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"description\" content=\"Aurora is a dockerized open-source online judge. It can be easily deployed and scaled. It also employs the latest security checks to secure the application.\">\n        <meta name=\"keywords\" content=\"open source, online judge, docker, secure, scaleable\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"<?php echo SITE_URL ?>/css/bootstrap.css\" media=\"screen\" />\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"<?php echo SITE_URL ?>/css/style.css\" media=\"screen\" />\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/jquery-3.1.0.min.js\"></script>\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/bootstrap.js\"></script>\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/plugin.js\"></script>\n        <script type=\"text/javascript\">\n            $(window).load(function() {\n                if ($('\n                    $('\n            });\n        </script>\n        <title>Aurora - An open-source online judge</title>\n        <link rel='shortcut icon' href='<?php echo SITE_URL; ?>/img/favicon.png' />\n    </head>\n    <body>\n        <?php if ($judge['value'] == 'Active' && isset($_SESSION['loggedin'])) { ?>\n            <script type='text/javascript'>\n                function settitle() {\n                    var t = window.document.title;\n                    var n = t.match(/(\\d*)\\)/gi);\n                    console.log(n);\n                    if (n != null) {\n                        n = parseInt(n) + 1;\n                    } else {\n                        n = 1;\n                    }\n                    window.document.title = \"(\" + n + \") Aurora\";\n                }\n                function resettile() {\n                    $.ajax({\n                        type: \"GET\",\n                        url: \"<?php echo SITE_URL; ?>/broadcast.php\",\n                        data: {updatetime: \"\"}\n                    });\n                    window.document.title = \"Aurora\";\n                }\n                window.setTimeout(\"bchk();\", <?php echo rand(300000, 600000); ?>);\n                $.ajax(\"<?php echo SITE_URL; ?>/broadcast.php\").done(function(msg) {\n                    var json = eval('(' + msg + ')');\n                    console.log(msg);\n                    if (json.broadcast.length != 0) {\n                        var str, i;\n                        str = \"\";\n                        for (i = 0; i < json.broadcast.length; i++)\n                            str += \"<b>\" + json.broadcast[i].title + \":</b><br/>\" + json.broadcast[i].msg + \"<br/><br/>\";\n                        $(\"\n                        $('\n                            resettile();\n                        });\n                        $(\"\n                        settitle();\n                    }\n                });\n                function bchk() {\n                    $.ajax(\"<?php echo SITE_URL; ?>/broadcast.php\").done(function(msg) {\n                        var json = eval('(' + msg + ')');\n                        console.log(msg);\n                        if (json.broadcast.length != 0) {\n                            var str, i;\n                            str = \"\";\n                            for (i = 0; i < json.broadcast.length; i++)\n                                str += \"<b>\" + json.broadcast[i].title + \":</b><br/>\" + json.broadcast[i].msg + \"<br/><br/>\";\n                            $(\"\n                            $('\n                                resettile();\n                            });\n                            $(\"\n                            settitle();\n                        }\n                    });\n                    window.setTimeout(\"bchk();\", 600000);\n                }\n            </script>\n            <div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n                <div class=\"modal-dialog\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n                            <h4 class=\"modal-title\" id=\"myModalLabel\">Alert</h4>\n                        </div>\n                        <div class=\"modal-body\" id=\"bmsg\">\n\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\">Close</button>\n                        </div>\n                    </div><!-- /.modal-content -->\n                </div><!-- /.modal-dialog -->\n            </div>\n        <?php }\n        ?>\n        <nav class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n            <div class=\"container\">\n                <div class=\"navbar-header\">\n                    <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"\n                        <span class=\"sr-only\">Toggle navigation</span>\n                        <span class=\"icon-bar\"></span>\n                        <span class=\"icon-bar\"></span>\n                        <span class=\"icon-bar\"></span>\n                    </button>\n                    <a class=\"navbar-brand\" href=\"<?php echo SITE_URL; ?>/\">Aurora</a>\n                </div>\n\n                <div class=\"collapse navbar-collapse\" id=\"navbar-collapse-1\">\n                    <ul class=\"nav navbar-nav\">\n                        <!-- <li><a href=\"<?php echo SITE_URL; ?>/home\">Home</a></li> -->\n                        <li><a href=\"<?php echo SITE_URL; ?>/problems\">Problems</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/contests\">Contests</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/rankings\">Rankings</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/submissions\">Submissions</a></li>\n                        <li class=\"dropdown\">\n                            <a href=\"\n                            <ul class=\"dropdown-menu\" role=\"menu\">\n                                <li><a href=\"<?php echo SITE_URL; ?>/faq\">FAQ</a></li>\n                                <li><a href=\"<?php echo SITE_URL; ?>/contact\">Contact Us</a></li>\n                            </ul>\n                        </li>\n                    </ul>\n                    <?php if (isset($_SESSION['loggedin'])) { ?>\n                        <ul class=\"nav navbar-nav pull-right\">\n                            <?php if ($_SESSION['team']['status'] == 'Admin') { ?>\n                                <li class=\"dropdown\">\n                                    <a href=\"\n                                        Admin\n                                        <b class=\"caret\"></b>\n                                    </a>\n                                    <ul class=\"dropdown-menu\">\n                                        <li><a href='<?php echo SITE_URL; ?>/adminjudge'>Judge Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminproblem'>Problem Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/admincontest'>Contest Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminteam'>Team Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/admingroup'>Group Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminclar'>Clarifications</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminbroadcast'>Broadcast</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminlog'>Request Logs</a></li>\n                                    </ul>\n                                </li>\n                            <?php } ?>\n                            <li class=\"dropdown\">\n                                <a href=\"\n                                    Account\n                                    <b class=\"caret\"></b>\n                                </a>\n                                <ul class=\"dropdown-menu\">\n                                    <li><a href='<?php echo SITE_URL; ?>/edit'>Account Settings</a></li>\n                                    <li><a href='<?php echo SITE_URL; ?>/process.php?logout'>Logout</a></li>\n                                </ul>\n                            </li>\n                        </ul>\n                    <?php } ?>\n                </div>\n            </div>\n        </nav>\n        <div class=\"container bodycont\">\n            <div class='row'>\n                <div class='col-md-9' id='mainbar'>\n                    <?php if (isset($_SESSION['msg']) && $_SESSION['msg'] != \"\") { ?>\n                        <div class=\"alert alert-info\" style=\"margin-top: 20px;\">\n                            <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n                            <div class=\"text-center\"><?php\n                                echo $_SESSION['msg'];\n                                unset($_SESSION['msg']);\n                                ?></div>\n                        </div>\n                        <?php\n                    }\n                    if (!isset($_GET['tab']) || $_GET['tab'] == 'home') {\n                        $str = 'files/home.php';\n                    } else {\n                        $str = 'files/' . $_GET['tab'] . '.php';\n                    }\n                    if (file_exists($str))\n                        require $str;\n                    else\n                        echo \"<br/><br/><br/><div style='padding: 10px;'><h1>Page not Found :(</h1>The page you are searching for is not on this site.</div><br/><br/><br/>\";\n                    ?>\n                </div>\n                <div class='col-md-3'>\n                    <!-- Login Panel -->\n                    <div class=\"panel panel-default\">\n                        <?php loginbox(); ?>\n                    </div>\n                    <!-- ./Login Panel -->\n\n                    <!-- Contest Panel -->\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Contest</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <?php contest_status(); ?>\n                        </div>\n                    </div>\n                    <!-- ./Contest Panel -->\n\n                    <!-- Ranking Panel -->\n                    <div class=\"panel panel-default\">\n\n                    <?php if ($judge['value'] == 'Active') { ?>\n                        <!-- Contest Ranking -->\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Contest Ranking</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <div id=\"live-ranking\">\n                            <?php getCurrentContestRanking(); ?>\n                                <a style=\"float:right;\" href=\"<?php echo SITE_URL.'/rank/'.getCurrentContest(); ?>\">View all</a>\n                            </div>\n                        </div>\n\n                    <?php } else { ?>\n                        <!-- Overall Ranking -->\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Overall Rankings</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <?php rankings(); ?>\n                        </div>\n                    <?php } ?>\n                    </div>\n                    <!-- ./Ranking Panel -->\n\n                    <?php\n\n                    if (isset($_SESSION['loggedin'])) mysubs();\n\n                    if ($judge['value'] == 'Active') latestsubs();\n                    ?>\n\n                </div>\n            </div>\n        </div>\n        <div class=\"footer\">\n            <a href=\"https:\n        </div>\n    </body>\n</html>\n\n'aurora/Web Interface/components.php'\n:<?php\ninclude_once 'functions.php';\ninclude_once 'files/Leaderboard.php';\ninclude_once 'files/LiveContestRanking.php';\nfunction loginbox() {\n    if (!isset($_SESSION['loggedin'])) {\n        ?>\n        <div class=\"panel-heading text-center\">\n            <h3 class=\"panel-title\">Login</h3>\n        </div>\n        <div class=\"panel-body text-center\">\n\n            <form action=\"<?php echo SITE_URL; ?>/process.php\" method=\"post\" role=\"form\">\n                <div class=\"input-group\" style=\"margin-bottom: -1px;\">\n                    <span class=\"input-group-addon\" style=\"border-bottom-left-radius: 0;\"><i class=\"glyphicon glyphicon-user\"></i></span>\n                    <input class=\"form-control\" style=\"border-bottom-right-radius: 0;\" type=\"text\" name=\"teamname\" placeholder=\"Teamname\" required/>\n                </div>\n                <div class=\"input-group\">\n                    <span style=\"border-top-left-radius: 0;\" class=\"input-group-addon\"><i class=\"glyphicon glyphicon-lock\"></i></span>\n                    <input style=\"border-top-right-radius: 0;\" class=\"form-control\" type=\"password\" name=\"password\" placeholder=\"Password\" required/>\n                </div><br/>\n                <input type=\"submit\" name=\"login\" value=\"Log In\" class=\"btn btn-primary btn-block\"/>\n            </form>\n            <a href='<?php echo SITE_URL; ?>/register'>New Team? Register Here.</a>\n        </div>\n        <?php\n    } else {\n        ?>\n        <div class=\"panel-heading text-center\">\n            <h3 class=\"panel-title\">Team</h3>\n        </div>\n        <div class=\"panel-body text-center\">\n\n            <table class='table table-hover'>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Score</th>\n                        <th>Overall Rank</th>\n                    </tr>\n                </thead>\n                <?php\n                $query = \"SELECT count(*)+1 as rank, (select score from teams where tid = \" . $_SESSION['team']['id'] . \") as sco FROM `teams` WHERE (score > (select score from teams where tid = \" . $_SESSION['team']['id'] . \") and status = 'Normal') or (score = (select score from teams where tid = \" . $_SESSION['team']['id'] . \") and penalty < (select penalty from teams where tid = \" . $_SESSION['team']['id'] . \") and status='Normal') \";\n                $res = DB::findOneFromQuery($query);\n                echo \"<tr><td><a href='\" . SITE_URL . \"/teams/\" . $_SESSION['team']['name'] . \"'>\" . $_SESSION['team']['name'] . \"</a></td><td>$res[sco]</td><td style='text-align: center'>$res[rank]</td></tr>\";\n                ?>\n            </table>\n        </div>\n        <?php\n    }\n}\n\nfunction mysubs() { ?>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading text-center\">\n            <h3 class=\"panel-title\">My Submissions</h3>\n        </div>\n        <div class=\"panel-body text-center\">\n            <table class='table table-hover'>\n                <thead>\n                    <tr>\n                        <th>RID</th>\n                        <th>Problem</th>\n                        <th>Result</th>\n                    </tr>\n                </thead>\n                <?php\n                $query = \"SELECT rid, (select name from problems where pid = runs.pid) as pname,(select code from problems where pid = runs.pid) as pcode, result FROM runs WHERE tid = \" . $_SESSION['team']['id'] . \" order by rid desc limit 0, 5\";\n                $res = DB::findAllFromQuery($query);\n                $resAttr = array('AC' => 'success', 'RTE' => 'warning', 'WA' => 'danger', 'TLE' => 'warning', 'CE' => 'warning', 'DQ' => 'danger', 'PE' => 'info', '...' => 'default', '' => 'default');\n                foreach ($res as $row)\n                    echo \"<tr><td><a href='\" . SITE_URL . \"/viewsolution/$row[rid]'>$row[rid]</a></td><td><a href='\" . SITE_URL . \"/problems/$row[pcode]'>$row[pname]</a></td><td><span class='label label-\".$resAttr[$row['result']].\"'>$row[result]</span></td></tr>\";\n                ?>\n            </table>\n        </div>\n    </div>\n<?php }\n\nfunction contest_status() {\n    $status = Array();\n    $query = \"select * from admin where variable = 'endtime' or variable = 'starttime' or variable = 'mode' or variable='ip' or variable='port'\";\n    DB::query($query);\n    $result = DB::findAllFromQuery($query);\n    foreach ($result as $row) {\n        $status[$row['variable']] = $row['value'];\n    }\n    ?>\n\n    <table class='table'>\n        <thead>\n            <tr>\n                <th class=\"text-center\">Mode</th>\n                <th class=\"text-center\">Judge</th>\n            </tr>\n        </thead>\n        <tr>\n            <td>\n                <div id=\"ajax-contest-mode\">\n                    <h4>\n                        <?php\n                        if ($status['mode'] == \"Active\" && $status['endtime'] < time())\n                            echo \"<span class=\\\"label label-danger\\\">Disabled</span>\";\n                        else {\n                            $attributes = array(\n                                \"Active\" => \"success\",\n                                \"Passive\" => \"primary\",\n                                \"Disabled\" => \"default\",\n                                \"Lockdown\" => \"danger\"\n                            );\n                            echo \"<span class=\\\"label label-\" . $attributes[$status['mode']] . \"\\\">\" . $status['mode'] . \"</span>\";\n                        }\n                        ?>\n                    </h4>\n                </div>\n            </td>\n            <td>\n                <h4>\n                    <?php\n                    $client = stream_socket_client($status['ip'] . \":\" . $status['port'], $errno, $errorMessage);\n                    if ($client === false)\n                        echo \"<span class=\\\"label label-danger\\\">Offline</span>\";\n                    else\n                        echo \"<span class=\\\"label label-success\\\">Online</span>\";\n                    fclose($client);\n                    ?>\n                </h4>\n            </td>\n        </tr>\n    </table>\n    <?php\n    if ($status['mode'] == \"Active\") { ?>\n        <div id='ajax-contest-time'></div>\n        <script type='text/javascript'>\n            var totaltime = <?php echo ($status['endtime'] - $status['starttime']); ?>;\n            var countdown = <?php echo $status['endtime'] - time(); ?>;\n            function step() {\n                if (countdown >= 0) {\n                    var currentPercent = (totaltime-countdown)/totaltime*100;\n                    var attribute = currentPercent < 70 ? \"success\" : currentPercent < 90 ? \"warning\" : \"danger\";\n                    $(\"div\n                        \"<h2><span class=\\\"label label-\"+attribute+\"\\\">\" + parseInt(countdown / 3600) + \":\" + parseInt((countdown / 60)) % 60 + \":\" + (countdown % 60)+\"</span></h2>\"\n                    );\n                } else {\n                    $(\"div\n                    $(\"div\n\n                }\n                if (countdown >= 0)\n                    countdown--;\n                window.setTimeout(\"step();\", 1000);\n            }\n            step();\n        </script>\n<?php\n    }\n}\n\nfunction latestsubs() {?>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading text-center\">\n            <h3 class=\"panel-title\">Latest Submissions</h3>\n        </div>\n        <div class=\"panel-body text-center\">\n            <table class='table table-hover'>\n                <thead>\n                <tr>\n                    <th>Team</th>\n                    <th>Problem</th>\n                    <th>Result</th>\n                </tr>\n                </thead>\n                <?php\n                $query = \"SELECT rid, (select teamname from teams where tid = runs.tid) as tname, (select name from problems where pid = runs.pid) as pname,(select code from problems where pid = runs.pid) as pcode, result FROM runs order by rid desc limit 0, 5\";\n                $res = DB::findAllFromQuery($query);\n                $resAttr = array('AC' => 'success', 'RTE' => 'warning', 'WA' => 'danger', 'TLE' => 'warning', 'CE' => 'warning', 'DQ' => 'danger', 'PE' => 'info', '...' => 'default', '' => 'default');\n                foreach ($res as $row)\n                    echo \"<tr><td><a href='\" . SITE_URL . \"/teams/$row[tname]'>$row[tname]</a></td><td><a href='\" . SITE_URL . \"/problems/$row[pcode]'>$row[pname]</a></td><td><span class='label label-\".$resAttr[$row['result']].\"'>$row[result]</span></td></tr>\";\n                ?>\n            </table>\n        </div>\n    </div>\n<?php }\n\nfunction rankings() {\n    $select = \"SELECT * \";\n    $body = \" FROM teams WHERE status='Normal' ORDER BY score DESC, penalty ASC\";\n    $result = DB::findAllWithCount($select, $body, 1, 10);\n    $data = $result['data'];\n    $i = 1;\n    echo \"<table class='table table-hover'><thead><tr><th>Rank</th><th>Name</th><th>Score</th></tr></thead>\";\n    foreach ($data as $row) {\n        echo \"<tr><td>\" . $i++ . \"</td><td><a href='\" . SITE_URL . \"/teams/$row[teamname]'>\" . $row['teamname'] . \"</a></td><td>\" . $row['score'] . \"</td></tr>\";\n    }\n    echo \"</table>\";\n}\n\nfunction pagination($noofpages, $url, $page, $maxcontent) {\n    if ($noofpages > 1) {\n        if ($page - ($maxcontent / 2) > 0)\n            $start = $page - 5;\n        else\n            $start = 1;\n        if ($noofpages >= $start + $maxcontent)\n            $end = $start + $maxcontent;\n        else\n            $end = $noofpages;\n        ?>\n        <div align='center'>\n            <ul class =\"pagination\">\n                <?php if ($page > 1) { ?>\n                    <li><a href=\"<?php echo $url . \"&page=1\"; ?>\">First</a></li>\n                    <li><a href=\"<?php echo $url . \"&page=\" . ($page - 1); ?>\">Prev</a></li>\n                    <?php\n                }\n                for ($i = $start; $i <= $end; $i++) {\n                    ?>\n                    <li <?php echo ($i == $page) ? (\"class='disabled'\") : (''); ?>><a href=\"<?php echo ($i != $page) ? ($url . \"&page=\" . $i) : (\"\n                    <?php\n                }\n                if ($page < $noofpages) {\n                    ?>\n                    <li><a href=\"<?php echo $url . \"&page=\" . ($page + 1); ?>\">Next</a></li>\n                    <li><a href=\"<?php echo $url . \"&page=\" . $noofpages; ?>\">Last</a></li>\n                <?php } ?>\n            </ul>\n        </div>\n        <?php\n    }\n}\n\nfunction getrankings($code) {\n    $result =  Leaderboard::getStaticRankTableInJSON($code);\n    return json_decode($result['ranktable'], true);\n}\n\nfunction getCurrentContest() {\n    $result = DB::findOneFromQuery(\"SELECT value from admin where variable = 'currentContest'\");\n    $contestCode = $result['value'];\n    return $contestCode;\n}\n\nfunction getCurrentContestRanking(){\n    $contestCode = getCurrentContest();\n    $printTable = liveContestRanking($contestCode, 10);\n    echo $printTable;\n}\n\nfunction errorMessageHTML($msg){\n    return '<br /><div class=\"alert alert-danger\" role=\"alert\">'.$msg.'</div>';\n}\n\nfunction doCompetitionCheck(){\n\n\n    $query = \"select value from admin where variable = 'mode'\";\n    $result = DB::findOneFromQuery($query);\n    if($result['value'] == 'Passive') {\n        $curTime = time();\n        $query = \"select endtime from contest where endtime >= $curTime and starttime<=$curTime\";\n        $result = DB::findOneFromQuery($query);\n        if(isset($result['endtime'])) {\n            $admin = Array();\n            $admin['mode'] = 'Active';\n            $admin['endtime'] = $result['endtime'];\n            foreach ($admin as $key => $val) {\n                $query = \"update admin set value = '$val' where variable = '$key'\";\n                DB::query($query);\n            }\n        }\n    }\n}\n\n?>\n",
        "gt": [
            "'aurora/Web Interface/files/Leaderboard.php'",
            "'aurora/Web Interface/components.php'",
            "'aurora/Web Interface/index.php'"
        ]
    },
    {
        "files": [
            "'Pandra/lib/thrift/protocol/TBinaryProtocol.php'",
            "'Pandra/lib/loader.php'",
            "'Pandra/lib/thrift/transport/TBufferedTransport.php'",
            "'Pandra/config.php'",
            "'Pandra/tests/lib/PandraSuperColumnFamilyTest.php'"
        ],
        "content": "'Pandra/lib/thrift/protocol/TBinaryProtocol.php'\n:<?php\n\n\ninclude_once $GLOBALS['THRIFT_ROOT'].'/transport/TBufferedTransport.php';\n\n\nclass TBinaryProtocol extends TProtocol {\n\n  const VERSION_MASK = 0xffff0000;\n  const VERSION_1 = 0x80010000;\n\n  protected $strictRead_ = false;\n  protected $strictWrite_ = true;\n\n  public function __construct($trans, $strictRead=false, $strictWrite=true) {\n    parent::__construct($trans);\n    $this->strictRead_ = $strictRead;\n    $this->strictWrite_ = $strictWrite;\n  }\n\n  public function writeMessageBegin($name, $type, $seqid) {\n    if ($this->strictWrite_) {\n      $version = self::VERSION_1 | $type;\n      return\n        $this->writeI32($version) +\n        $this->writeString($name) +\n        $this->writeI32($seqid);\n    } else {\n      return\n        $this->writeString($name) +\n        $this->writeByte($type) +\n        $this->writeI32($seqid);\n    }\n  }\n\n  public function writeMessageEnd() {\n    return 0;\n  }\n\n  public function writeStructBegin($name) {\n    return 0;\n  }\n\n  public function writeStructEnd() {\n    return 0;\n  }\n\n  public function writeFieldBegin($fieldName, $fieldType, $fieldId) {\n    return\n      $this->writeByte($fieldType) +\n      $this->writeI16($fieldId);\n  }\n\n  public function writeFieldEnd() {\n    return 0;\n  }\n\n  public function writeFieldStop() {\n    return\n      $this->writeByte(TType::STOP);\n  }\n\n  public function writeMapBegin($keyType, $valType, $size) {\n    return\n      $this->writeByte($keyType) +\n      $this->writeByte($valType) +\n      $this->writeI32($size);\n  }\n\n  public function writeMapEnd() {\n    return 0;\n  }\n\n  public function writeListBegin($elemType, $size) {\n    return\n      $this->writeByte($elemType) +\n      $this->writeI32($size);\n  }\n\n  public function writeListEnd() {\n    return 0;\n  }\n\n  public function writeSetBegin($elemType, $size) {\n    return\n      $this->writeByte($elemType) +\n      $this->writeI32($size);\n  }\n\n  public function writeSetEnd() {\n    return 0;\n  }\n\n  public function writeBool($value) {\n    $data = pack('c', $value ? 1 : 0);\n    $this->trans_->write($data, 1);\n    return 1;\n  }\n\n  public function writeByte($value) {\n    $data = pack('c', $value);\n    $this->trans_->write($data, 1);\n    return 1;\n  }\n\n  public function writeI16($value) {\n    $data = pack('n', $value);\n    $this->trans_->write($data, 2);\n    return 2;\n  }\n\n  public function writeI32($value) {\n    $data = pack('N', $value);\n    $this->trans_->write($data, 4);\n    return 4;\n  }\n\n  public function writeI64($value) {\n\n\n\n    if (PHP_INT_SIZE == 4) {\n      $neg = $value < 0;\n\n      if ($neg) {\n        $value *= -1;\n      }\n\n      $hi = (int)($value / 4294967296);\n      $lo = (int)$value;\n\n      if ($neg) {\n        $hi = ~$hi;\n        $lo = ~$lo;\n        if (($lo & (int)0xffffffff) == (int)0xffffffff) {\n          $lo = 0;\n          $hi++;\n        } else {\n          $lo++;\n        }\n      }\n      $data = pack('N2', $hi, $lo);\n\n    } else {\n      $hi = $value >> 32;\n      $lo = $value & 0xFFFFFFFF;\n      $data = pack('N2', $hi, $lo);\n    }\n\n    $this->trans_->write($data, 8);\n    return 8;\n  }\n\n  public function writeDouble($value) {\n    $data = pack('d', $value);\n    $this->trans_->write(strrev($data), 8);\n    return 8;\n  }\n\n  public function writeString($value) {\n    $len = strlen($value);\n    $result = $this->writeI32($len);\n    if ($len) {\n      $this->trans_->write($value, $len);\n    }\n    return $result + $len;\n  }\n\n  public function readMessageBegin(&$name, &$type, &$seqid) {\n    $result = $this->readI32($sz);\n    if ($sz < 0) {\n      $version = (int) ($sz & self::VERSION_MASK);\n      if ($version != (int) self::VERSION_1) {\n        throw new TProtocolException('Bad version identifier: '.$sz, TProtocolException::BAD_VERSION);\n      }\n      $type = $sz & 0x000000ff;\n      $result +=\n        $this->readString($name) +\n        $this->readI32($seqid);\n    } else {\n      if ($this->strictRead_) {\n        throw new TProtocolException('No version identifier, old protocol client?', TProtocolException::BAD_VERSION);\n      } else {\n\n        $name = $this->trans_->readAll($sz);\n        $result +=\n          $sz +\n          $this->readByte($type) +\n          $this->readI32($seqid);\n      }\n    }\n    return $result;\n  }\n\n  public function readMessageEnd() {\n    return 0;\n  }\n\n  public function readStructBegin(&$name) {\n    $name = '';\n    return 0;\n  }\n\n  public function readStructEnd() {\n    return 0;\n  }\n\n  public function readFieldBegin(&$name, &$fieldType, &$fieldId) {\n    $result = $this->readByte($fieldType);\n    if ($fieldType == TType::STOP) {\n      $fieldId = 0;\n      return $result;\n    }\n    $result += $this->readI16($fieldId);\n    return $result;\n  }\n\n  public function readFieldEnd() {\n    return 0;\n  }\n\n  public function readMapBegin(&$keyType, &$valType, &$size) {\n    return\n      $this->readByte($keyType) +\n      $this->readByte($valType) +\n      $this->readI32($size);\n  }\n\n  public function readMapEnd() {\n    return 0;\n  }\n\n  public function readListBegin(&$elemType, &$size) {\n    return\n      $this->readByte($elemType) +\n      $this->readI32($size);\n  }\n\n  public function readListEnd() {\n    return 0;\n  }\n\n  public function readSetBegin(&$elemType, &$size) {\n    return\n      $this->readByte($elemType) +\n      $this->readI32($size);\n  }\n\n  public function readSetEnd() {\n    return 0;\n  }\n\n  public function readBool(&$value) {\n    $data = $this->trans_->readAll(1);\n    $arr = unpack('c', $data);\n    $value = $arr[1] == 1;\n    return 1;\n  }\n\n  public function readByte(&$value) {\n    $data = $this->trans_->readAll(1);\n    $arr = unpack('c', $data);\n    $value = $arr[1];\n    return 1;\n  }\n\n  public function readI16(&$value) {\n    $data = $this->trans_->readAll(2);\n    $arr = unpack('n', $data);\n    $value = $arr[1];\n    if ($value > 0x7fff) {\n      $value = 0 - (($value - 1) ^ 0xffff);\n    }\n    return 2;\n  }\n\n  public function readI32(&$value) {\n    $data = $this->trans_->readAll(4);\n    $arr = unpack('N', $data);\n    $value = $arr[1];\n    if ($value > 0x7fffffff) {\n      $value = 0 - (($value - 1) ^ 0xffffffff);\n    }\n    return 4;\n  }\n\n  public function readI64(&$value) {\n    $data = $this->trans_->readAll(8);\n\n    $arr = unpack('N2', $data);\n\n\n\n\n    if (PHP_INT_SIZE == 4) {\n\n      $hi = $arr[1];\n      $lo = $arr[2];\n      $isNeg = $hi  < 0;\n\n\n      if ($isNeg) {\n        $hi = ~$hi & (int)0xffffffff;\n        $lo = ~$lo & (int)0xffffffff;\n\n        if ($lo == (int)0xffffffff) {\n          $hi++;\n          $lo = 0;\n        } else {\n          $lo++;\n        }\n      }\n\n\n\n\n      if ($hi & (int)0x80000000) {\n        $hi &= (int)0x7fffffff;\n        $hi += 0x80000000;\n      }\n\n      if ($lo & (int)0x80000000) {\n        $lo &= (int)0x7fffffff;\n        $lo += 0x80000000;\n      }\n\n      $value = $hi * 4294967296 + $lo;\n\n      if ($isNeg) {\n        $value = 0 - $value;\n      }\n    } else {\n\n\n      if ($arr[2] & 0x80000000) {\n        $arr[2] = $arr[2] & 0xffffffff;\n      }\n\n\n      if ($arr[1] & 0x80000000) {\n        $arr[1] = $arr[1] & 0xffffffff;\n        $arr[1] = $arr[1] ^ 0xffffffff;\n        $arr[2] = $arr[2] ^ 0xffffffff;\n        $value = 0 - $arr[1]*4294967296 - $arr[2] - 1;\n      } else {\n        $value = $arr[1]*4294967296 + $arr[2];\n      }\n    }\n\n    return 8;\n  }\n\n  public function readDouble(&$value) {\n    $data = strrev($this->trans_->readAll(8));\n    $arr = unpack('d', $data);\n    $value = $arr[1];\n    return 8;\n  }\n\n  public function readString(&$value) {\n    $result = $this->readI32($len);\n    if ($len) {\n      $value = $this->trans_->readAll($len);\n    } else {\n      $value = '';\n    }\n    return $result + $len;\n  }\n}\n\n\nclass TBinaryProtocolFactory implements TProtocolFactory {\n  private $strictRead_ = false;\n  private $strictWrite_ = false;\n\n  public function __construct($strictRead=false, $strictWrite=false) {\n    $this->strictRead_ = $strictRead;\n    $this->strictWrite_ = $strictWrite;\n  }\n\n  public function getProtocol($trans) {\n    return new TBinaryProtocol($trans, $this->strictRead, $this->strictWrite);\n  }\n}\n\n\nclass TBinaryProtocolAccelerated extends TBinaryProtocol {\n  public function __construct($trans, $strictRead=false, $strictWrite=true) {\n\n\n    if (!method_exists($trans, 'putBack')) {\n      $trans = new TBufferedTransport($trans);\n    }\n    parent::__construct($trans, $strictRead, $strictWrite);\n  }\n  public function isStrictRead() {\n    return $this->strictRead_;\n  }\n  public function isStrictWrite() {\n    return $this->strictWrite_;\n  }\n}\n\n?>\n\n'Pandra/lib/loader.php'\n:<?php\n\nnamespace Pandra;\n\n$GLOBALS['THRIFT_ROOT'] = dirname(__FILE__).'/thrift/';\nrequire_once $GLOBALS['THRIFT_ROOT'].'/packages/cassandra/Cassandra.php';\nrequire_once $GLOBALS['THRIFT_ROOT'].'/transport/TSocket.php';\nrequire_once $GLOBALS['THRIFT_ROOT'].'/protocol/TBinaryProtocol.php';\nrequire_once $GLOBALS['THRIFT_ROOT'].'/transport/TFramedTransport.php';\nrequire_once $GLOBALS['THRIFT_ROOT'].'/transport/TBufferedTransport.php';\n\ndefine('PANDRA_64', PHP_INT_SIZE == 8);\ndefine('PANDRA_REQUEST_MICRO', round(microtime(true) * 1000000, 3));\ndefine('PANDRA_INSTALL_DIR', dirname(__FILE__));\n\nfunction _pandraAutoLoad($className) {\n\n    if (!preg_match(\"/^\".__NAMESPACE__.\"/i\", $className)) return;\n\n    $className = str_replace(__NAMESPACE__ .'\\\\' , '', $className);\n\n\n    $fExt = array('.class.php', '.interface.php');\n\n\n    $classPath = dirname(__FILE__).\"/\";\n\n    if (preg_match('/^(Query|Clause)/', $className)) {\n        $classPath .= 'query/';\n    } elseif (preg_match('/^Log/', $className)) {\n        $classPath .= 'logging/';\n    } elseif (preg_match('/^UUID/', $className)) {\n        $classPath .= 'uuid/';\n    }\n\n    foreach ($fExt as $ext) {\n        $classFile = $classPath.$className.$ext;\n        if (file_exists($classFile)) {\n            require_once($classFile);\n            break;\n        }\n    }\n}\nset_include_path(get_include_path() . PATH_SEPARATOR . __DIR__);\n\n\nspl_autoload_register(__NAMESPACE__ . '\\_pandraAutoLoad');\n\n\n\nCore::setMemcachedAvailable(class_exists('Memcached'));\nCore::setAPCAvailable(function_exists('apc_sma_info') && apc_sma_info() !== FALSE);\n\nUUID::auto();\n'Pandra/lib/thrift/transport/TBufferedTransport.php'\n:<?php\n\n\n\n\nclass TBufferedTransport extends TTransport {\n\n\n  public function __construct($transport=null, $rBufSize=512, $wBufSize=512) {\n    $this->transport_ = $transport;\n    $this->rBufSize_ = $rBufSize;\n    $this->wBufSize_ = $wBufSize;\n  }\n\n\n  protected $transport_ = null;\n\n\n  protected $rBufSize_ = 512;\n\n\n  protected $wBufSize_ = 512;\n\n\n  protected $wBuf_ = '';\n\n\n  protected $rBuf_ = '';\n\n  public function isOpen() {\n    return $this->transport_->isOpen();\n  }\n\n  public function open() {\n    $this->transport_->open();\n  }\n\n  public function close() {\n    $this->transport_->close();\n  }\n\n  public function putBack($data) {\n    if (strlen($this->rBuf_) === 0) {\n      $this->rBuf_ = $data;\n    } else {\n      $this->rBuf_ = ($data . $this->rBuf_);\n    }\n  }\n\n\n  public function readAll($len) {\n    $have = strlen($this->rBuf_);\n    if ($have == 0) {\n      $data = $this->transport_->readAll($len);\n    } else if ($have < $len) {\n      $data = $this->rBuf_;\n      $this->rBuf_ = '';\n      $data .= $this->transport_->readAll($len - $have);\n    } else if ($have == $len) {\n      $data = $this->rBuf_;\n      $this->rBuf_ = '';\n    } else if ($have > $len) {\n      $data = substr($this->rBuf_, 0, $len);\n      $this->rBuf_ = substr($this->rBuf_, $len);\n    }\n    return $data;\n  }\n\n  public function read($len) {\n    if (strlen($this->rBuf_) === 0) {\n      $this->rBuf_ = $this->transport_->read($this->rBufSize_);\n    }\n\n    if (strlen($this->rBuf_) <= $len) {\n      $ret = $this->rBuf_;\n      $this->rBuf_ = '';\n      return $ret;\n    }\n\n    $ret = substr($this->rBuf_, 0, $len);\n    $this->rBuf_ = substr($this->rBuf_, $len);\n    return $ret;\n  }\n\n  public function write($buf) {\n    $this->wBuf_ .= $buf;\n    if (strlen($this->wBuf_) >= $this->wBufSize_) {\n      $out = $this->wBuf_;\n\n\n\n\n      $this->wBuf_ = '';\n      $this->transport_->write($out);\n    }\n  }\n\n  public function flush() {\n    if (strlen($this->wBuf_) > 0) {\n      $this->transport_->write($this->wBuf_);\n      $this->wBuf_ = '';\n    }\n    $this->transport_->flush();\n  }\n\n}\n\n?>\n\n'Pandra/config.php'\n:<?php\n\nnamespace Pandra;\n\ndefine('MODEL_OUT_DIR', dirname(__FILE__).'/models/');\ndefine('SCHEMA_PATH', dirname(__FILE__).'/schemas/');\ndefine('THRIFT_PORT_DEFAULT', 9160);\ndefine('DEFAULT_ROW_LIMIT', 10);\ndefine('PERSIST_CONNECTIONS', TRUE);\ndefine('CASSANDRA_CONF_PATH', '/usr/local/cassandra/conf/cassandra.yaml');\n\ndefine('DEFAULT_POOL_NAME', 'system');\ndefine('MAX_RETRIES', 2);\ndefine('RETRY_COOLDOWN', 10);\n\ndefine('THRIFT_TRANSPORT_BUFFERED', 1);\ndefine('THRIFT_TRANSPORT_FRAMED', 2);\ndefine('THRIFT_TRANSPORT', THRIFT_TRANSPORT_FRAMED);\n\nrequire_once dirname(__FILE__).'/lib/loader.php';\n\n\n\n\nif (file_exists(dirname(__FILE__).'/project_config.php')) {\n    require_once(dirname(__FILE__).'/project_config.php');\n}\n'Pandra/tests/lib/PandraSuperColumnFamilyTest.php'\n:<?php\nrequire_once 'PHPUnit/Framework.php';\nrequire_once(dirname(__FILE__).'/../../config.php');\nrequire_once dirname(__FILE__).'/../../lib/SuperColumnFamily.class.php';\n\n\nclass TestSuperColumn extends PandraSuperColumn {\n    public function init() {\n        $this->addColumn('title', 'string');\n        $this->addColumn('content');\n        $this->addColumn('author', 'string');\n    }\n}\n\n\nclass TestCFSuper extends PandraSuperColumnFamily {\n\n    public function init() {\n        $this->setKeySpace('Keyspace1');\n        $this->setName('Super1');\n\n        $this->addSuper(new TestSuperColumn('blog-slug-1'));\n        $this->addSuper(new TestSuperColumn('blog-slug-2'));\n    }\n}\n\n\nclass PandraSuperColumnFamilyTest extends PHPUnit_Framework_TestCase {\n\n    protected $obj;\n\n    private $_keyID = 'PandraCFTest';\n\n\n    protected function setUp() {\n        $this->obj = new TestCFSuper();\n        $this->obj->setKeyID($this->_keyID);\n        PandraCore::connect('default', 'localhost');\n    }\n\n\n    protected function tearDown() {\n        PandraCore::disconnectAll();\n    }\n\n    public function testAddGetColumn() {\n        $newSuperName = 'newGenericSuper';\n        $this->assertTrue($this->obj->addColumn($newSuperName) instanceof PandraSuperColumn);\n        $this->assertTrue($this->obj->getColumn($newSuperName)->getName() == $newSuperName && $this->obj->getColumn($newSuperName) instanceof PandraSuperColumn);\n    }\n\n    public function testAddSuper() {\n        $newSuperName = 'newTestSuperColumn';\n        $this->assertTrue($this->obj->addSuper(new TestSuperColumn($newSuperName)) instanceof PandraSuperColumn);\n        $this->assertTrue($this->obj->getColumn($newSuperName)->getName() == $newSuperName);\n    }\n\n    public function testGetSuper() {\n        $this->assertTrue($this->obj->getSuper('blog-slug-1') instanceof PandraSuperColumn);\n    }\n\n    public function testIsModified() {\n        $this->assertTrue($this->obj->reset());\n\n        $this->obj['blog-slug-1']['title'] = 'NEW TITLE';\n        $this->assertTrue($this->obj->isModified());\n    }\n\n    public function testIsDeleted() {\n        $this->obj->delete();\n        $this->assertTrue($this->obj->getDelete());\n    }\n\n    public function testSaveLoadDelete() {\n\n\n        $this->obj['blog-slug-1']['title'] = 'My First Blog';\n        $this->obj['blog-slug-1']['content'] = 'Can I be in the blog-o-club too?';\n\n        $this->obj['blog-slug-2']['title'] = 'My Second Blog, and maybe the last';\n        $this->obj['blog-slug-2']['content'] = 'I promise to write something soon!';\n\n        $this->assertTrue($this->obj->save(), $this->obj->lastError());\n\n\n        $colTitleValue = $this->obj['blog-slug-1']['title'];\n        $colTitleValue2 = $this->obj['blog-slug-2']['title'];\n\n\n        $this->obj = NULL;\n        $this->obj = new TestCFSuper();\n\n        $this->assertTrue($this->obj->load($this->_keyID), $this->obj->lastError());\n\n\n        $this->assertTrue($colTitleValue == $this->obj['blog-slug-1']['title']);\n        $this->assertTrue($colTitleValue2 == $this->obj['blog-slug-2']['title']);\n\n\n        $this->obj->delete();\n\n        $this->assertTrue($this->obj->save(), $this->obj->lastError());\n\n\n        $this->obj = NULL;\n        $this->obj = new TestCFSuper();\n\n        $this->assertFalse($this->obj->load($this->_keyID), $this->obj->lastError());\n    }\n\n    public function testNotations() {\n\n        $superName = 'blog-slug-3';\n        $colName = 'title';\n        $value = 'Another blog by me';\n\n\n\n\n        $this->obj[$superName] = new TestSuperColumn($superName);\n        $this->assertTrue($this->obj[$superName] instanceof PandraSuperColumn);\n\n\n        $this->obj->reset();\n        $this->assertFalse($this->obj->isModified());\n        $this->obj[$superName][$colName] = $value;\n        $this->assertTrue($this->obj->isModified());\n\n        $this->assertTrue($this->obj[$superName][$colName] == $value);\n        $this->assertFalse($this->obj[$superName]['NOT_'.$colName] == $value);\n\n\n        unset($this->obj[$superName][$colName]);\n        $this->assertTrue($this->obj[$superName][$colName] == NULL);\n\n        unset($this->obj[$superName]);\n        $this->assertTrue($this->obj[$superName] == NULL);\n\n\n\n        $superPath = PandraSuperColumnFamily::_columnNamePrefix.$superName;\n        $columnPath = PandraColumnFamily::_columnNamePrefix.$colName;\n\n        $this->obj->$superPath = new TestSuperColumn($superName);\n        $this->assertTrue($this->obj->$superPath instanceof PandraSuperColumn);\n\n\n        $this->obj->reset();\n        $this->assertFalse($this->obj->isModified());\n        $this->obj->$superPath->$columnPath = $value;\n        $this->assertTrue($this->obj->isModified());\n\n        $this->assertTrue($this->obj->$superPath->$columnPath == $value);\n\n        $nColumnPath = 'NOT_'.$columnPath;\n        $this->assertFalse($this->obj->$superPath->$nColumnPath == $value);\n\n\n\n        $this->obj->$superPath->destroyColumns($colName);\n        $this->assertTrue($this->obj->$superPath->$columnPath == NULL);\n\n        $this->obj->destroyColumns($superName);\n        $this->assertTrue($this->obj->$superPath == NULL);\n\n\n\n        $superPath = PandraSuperColumnFamily::_columnNamePrefix.$superName;\n        $columnPath = PandraColumnFamily::_columnNamePrefix.$colName;\n\n        $this->obj->addSuper(new TestSuperColumn($superName));\n        $this->assertTrue($this->obj->getSuper($superName) instanceof PandraSuperColumn);\n\n\n        $this->obj->reset();\n        $this->assertFalse($this->obj->isModified());\n        $this->obj->getSuper($superName)->getColumn($colName)->setValue($value);\n        $this->assertTrue($this->obj->isModified());\n\n        $this->assertTrue($this->obj->getSuper($superName)->getColumn($colName)->value == $value);\n\n\n\n\n        unset($this->obj[$superName][$colName]);\n        $this->obj->getSuper($superName)->destroyColumns($colName);\n        $this->assertTrue($this->obj->getSuper($superName)->getColumn($colName) == NULL);\n\n        unset($this->obj[$superName]);\n        $this->obj->destroyColumns($superName);\n        $this->assertTrue($this->obj->getSuper($superName) == NULL);\n    }\n}\n?>",
        "gt": [
            "'Pandra/lib/thrift/transport/TBufferedTransport.php'",
            "'Pandra/lib/thrift/protocol/TBinaryProtocol.php'",
            "'Pandra/lib/loader.php'",
            "'Pandra/config.php'",
            "'Pandra/tests/lib/PandraSuperColumnFamilyTest.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/admin.php'",
            "'firebirdwebadmin/inc/firebird.inc.php'"
        ],
        "content": "'firebirdwebadmin/inc/script_start.inc.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/configuration.inc.php';\n\nif (DEBUG) {\n    $start_time = @microtime();\n}\n\nrequire './inc/functions.inc.php';\n\nsession_start();\nset_error_handler('error_handler');\n\nrequire get_language_file('./lang/');\nrequire './inc/session.inc.php';\nrequire './inc/firebird.inc.php';\nrequire './inc/panel_elements.inc.php';\nrequire './inc/javascript.inc.php';\n\nif (DEBUG || DEBUG_HTML) {\n    include './inc/debug_funcs.inc.php';\n}\n\nif (!extension_loaded('interbase')) {\n    die($ERRORS['NO_IBASE_MODULE']);\n}\n\nif (!isset($_SESSION['s_init'])\n    || ($_SESSION['s_cookies'] === 'untested')\n) {\n    initialize_session();\n    fallback_session();\n} else {\n    localize_session_vars();\n}\n\nif (!isset($no_session_referer) || $no_session_referer !== true) {\n\n    $s_referer = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n}\n\nsend_http_headers();\n\n\n$message = '';\n$warning = '';\n$error = '';\n$fb_error = '';\n$php_error = '';\n$debug = array();\n$externcmd = '';\n\n\n\n$js_stack = '';\n\n\n\n$sql = '';\n\n\n\nif ($s_connected == true && !isset($_GET['unconnected'])) {\n    $dbhandle = db_connect();\n\n    if ($dbhandle === false) {\n        $fb_error = fbird_errmsg();\n        $s_connected = false;\n        $s_tables_valid = false;\n        $s_wt['table'] = '';\n    }\n\n    if (empty($s_charsets)) {\n        $s_charsets = get_charsets();\n    }\n}\n\n\nlist($family, $version) = server_info($s_login['server']);\ndefine('SERVER_FAMILY', $family);\ndefine('SERVER_VERSION', $version);\n\nif ($s_binpath != BINPATH) {\n\n\n    if (!is_dir(BINPATH)\n        || (!is_file(BINPATH.'isql') && !is_file(BINPATH.'isql-fb') && !is_file(BINPATH.'isql.exe'))\n    ) {\n        $warning = sprintf($WARNINGS['BAD_ISQLPATH'], BINPATH);\n    }\n\n\n    if (!is_dir(TMPPATH) || !is_writeable(TMPPATH)) {\n        $warning .= sprintf($WARNINGS['BAD_TMPPATH'], TMPPATH);\n    }\n\n    $s_binpath = BINPATH;\n}\n\nif (DEBUG_HTML) {\n    ob_start();\n}\n\n'firebirdwebadmin/admin.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/script_start.inc.php';\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_gfix')) {\n    $action = $argument = '';\n    $logout = $redirect = false;\n\n    if (isset($_POST['gfix_doit'])) {\n        $s_sysdba_pw = get_sysdba_pw();\n\n        $s_gfix = array('buffers' => get_request_data('adm_buffers'),\n                        'dialect' => get_request_data('adm_sql_dialect'),\n                        'access_mode' => get_request_data('adm_access_mode'),\n                        'write_mode' => get_request_data('adm_write_mode'),\n                        'use_space' => get_request_data('adm_use_space'),\n                        'sweep_interval' => (int) get_request_data('adm_housekeeping'),\n                        'sweep_ignore' => (boolean) get_request_data('adm_sweep_ignore'),\n                        'repair' => get_request_data('adm_repair'),\n                        'repair_ignore' => (boolean) get_request_data('adm_repair_ignore'),\n                        'shutdown' => get_request_data('adm_shutdown'),\n                        'shutdown_seconds' => (int) get_request_data('adm_shut_secs'),\n                        'reconnect' => (boolean) get_request_data('adm_shut_reconnect'),\n                        );\n    }\n\n\n    if (isset($_POST['adm_gfix_buffers'])  &&  !empty($s_gfix['buffers'])) {\n        $action = IBASE_PRP_PAGE_BUFFERS;\n        $argument = $s_gfix['buffers'];\n    }\n\n\n    if (isset($_POST['adm_gfix_dialect'])  &&  !empty($s_gfix['dialect'])) {\n        $action = IBASE_PRP_SET_SQL_DIALECT;\n        $argument = $s_gfix['dialect'];\n    }\n\n\n    if (isset($_POST['adm_gfix_access_mode'])  &&  !empty($s_gfix['access_mode'])) {\n        $action = IBASE_PRP_ACCESS_MODE;\n        $argument = $s_gfix['access_mode'] == $adm_strings['ReadWrite'] ? IBASE_PRP_AM_READWRITE : IBASE_PRP_AM_READONLY;\n    }\n\n\n    if (isset($_POST['adm_gfix_write_mode'])  &&  !empty($s_gfix['write_mode'])) {\n        $action = IBASE_PRP_WRITE_MODE;\n        $argument = $s_gfix['write_mode'] == $adm_strings['Sync'] ? IBASE_PRP_WM_SYNC : IBASE_PRP_WM_ASYNC;\n    }\n\n\n    if (isset($_POST['adm_gfix_use_space'])  &&  !empty($s_gfix['use_space'])) {\n        $action = IBASE_PRP_RESERVE_SPACE;\n        $argument = $s_gfix['use_space'] == $adm_strings['SmallFull'] ? IBASE_PRP_RES_USE_FULL : IBASE_PRP_RES;\n    }\n\n\n    if (isset($_POST['adm_gfix_housekeeping'])) {\n        $action = IBASE_PRP_SWEEP_INTERVAL;\n        $argument = $s_gfix['sweep_interval'];\n    }\n\n\n    if (isset($_POST['adm_gfix_sweep'])) {\n        $action = IBASE_RPR_SWEEP_DB;\n        $argument = $s_gfix['sweep_ignore'] ? IBASE_RPR_IGNORE_CHECKSUM : '';\n    }\n\n\n    if (isset($_POST['adm_gfix_repair'])  &&  !empty($s_gfix['repair'])) {\n        switch ($s_gfix['repair']) {\n        case 'mend':\n            $action = IBASE_RPR_MEND_DB;\n            break;\n        case 'validate':\n            $action = IBASE_RPR_VALIDATE_DB;\n            break;\n        case 'full':\n            $action = IBASE_RPR_FULL;\n            break;\n        case 'no_update':\n            $action = IBASE_RPR_CHECK_DB;\n            break;\n        }\n        $argument = $s_gfix['repair_ignore'] ? IBASE_RPR_IGNORE_CHECKSUM : '';\n    }\n\n\n    if (isset($_POST['adm_gfix_shutdown'])  && !empty($s_gfix['shutdown'])) {\n        switch ($s_gfix['shutdown']) {\n        case 'noconns':\n            $action = IBASE_PRP_DENY_NEW_ATTACHMENTS;\n            break;\n        case 'notrans':\n            $action = IBASE_PRP_DENY_NEW_TRANSACTIONS;\n            break;\n        case 'force':\n            $action = IBASE_PRP_SHUTDOWN_DB;\n            break;\n        }\n        $argument = $s_gfix['shutdown_seconds'];\n        $logout = $s_gfix['reconnect'] ? false : true;\n    }\n\n\n    if (isset($_POST['adm_gfix_rescind'])) {\n        $action = IBASE_PRP_DB_ONLINE;\n    }\n\n    if (!empty($action)) {\n        if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            if (empty($argument)) {\n                $result = fbird_maintain_db($service, $s_login['database'], $action);\n            } else {\n                $result = fbird_maintain_db($service, $s_login['database'], $action, $argument);\n            }\n            fbird_service_detach($service);\n            if (!$result) {\n                $fb_error = fbird_errmsg();\n            }\n        } else {\n            $fb_error = fbird_errmsg();\n        }\n\n        if ($logout == true) {\n            remove_edit_panels();\n            cleanup_session();\n            $s_connected = false;\n        }\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_dbstat', true)) {\n    if (isset($_POST['db_stat_select'])) {\n        $s_dbstat_option = get_request_data('db_stat_option');\n    }\n\n    if (!empty($s_dbstat_option)) {\n\n\n        $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"dbstat\";';});\n\n        $iframekey_dbstat = md5(uniqid('dbstat'));\n        $s_iframejobs[$iframekey_dbstat] = array('job' => 'dbstat',\n                                                 'option' => $s_dbstat_option,\n                                                 'timestamp' => time(), );\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_server')) {\n    $exe = 'fb_lock_print';\n\n\n    list($iblockpr_output, $binary_error) = exec_command($exe, ' -o');\n\n    $lock_header = '';\n    unset($iblockpr_output[0]);\n    foreach ($iblockpr_output as $line) {\n        if (strlen(trim($line)) == 0) {\n            break;\n        }\n        $lock_header .= $line.\"<br>\\n\";\n    }\n\n\n    list($iblockpr_output, $binray_error) = exec_command($exe, ' -i');\n\n    if (count($iblockpr_output) > 3) {\n        $iblock['names'] = preg_split('/[\\s,]+/', $iblockpr_output[0]);\n        $iblock['last'] = preg_split('/[\\s,]+/', $iblockpr_output[1]);\n        $iblock['avg'] = preg_split('/[\\s,]+/', $iblockpr_output[3]);\n    }\n\n\n    if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n        $server_info = fbird_server_info($service, IBASE_SVC_SERVER_VERSION)\n                      .' / '\n                      .fbird_server_info($service, IBASE_SVC_IMPLEMENTATION);\n        fbird_service_detach($service);\n    } else {\n        $fb_error = fbird_errmsg();\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_backup')) {\n    if (isset($_POST['adm_backup_doit'])) {\n        $s_backup = array('target' => get_request_data('adm_bu_target'),\n                          'mdonly' => (boolean) get_request_data('adm_bu_mdonly'),\n                          'mdoldstyle' => (boolean) get_request_data('adm_bu_mdoldstyle'),\n                          'transport' => (boolean) get_request_data('adm_bu_transport'),\n                          'convert' => (boolean) get_request_data('adm_bu_convert'),\n                          'nogc' => (boolean) get_request_data('adm_bu_nogc'),\n                          'ignorecs' => (boolean) get_request_data('adm_bu_ignorecs'),\n                          'ignorelt' => (boolean) get_request_data('adm_bu_ignorelt'),\n                          'verbose' => (boolean) get_request_data('adm_bu_verbose'),\n                          );\n    }\n\n    if (isset($_POST['adm_backup_doit'])  &&  !empty($s_backup['target'])) {\n        $s_sysdba_pw = get_sysdba_pw();\n\n        $backup_options = array('mdonly' => IBASE_BKP_METADATA_ONLY,\n                                'mdoldstyle' => IBASE_BKP_OLD_DESCRIPTIONS,\n                                'transport' => IBASE_BKP_NON_TRANSPORTABLE,\n                                'convert' => IBASE_BKP_CONVERT,\n                                'nogc' => IBASE_BKP_NO_GARBAGE_COLLECT,\n                                'ignorecs' => IBASE_BKP_IGNORE_CHECKSUMS,\n                                'ignorelt' => IBASE_BKP_IGNORE_LIMBO,\n                                );\n        $options = 0;\n        foreach ($backup_options as $idx => $option) {\n            if ($s_backup[$idx]) {\n                $options |= $option;\n            }\n        }\n\n        $source_db = !empty($s_login['host']) ? $s_login['host'].':'.$s_login['database'] : $s_login['database'];\n        $target_file = get_backup_filename($s_backup['target']);\n\n        if ($s_backup['verbose']) {\n\n            $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"backup\";';});\n\n            $iframekey_backup = md5(uniqid('backup'));\n            $s_iframejobs[$iframekey_backup] = array('job' => 'backup',\n                                                     'source' => $source_db,\n                                                     'target' => $target_file,\n                                                     'options' => $options,\n                                                     'timestamp' => time(), );\n        } elseif (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            $result = fbird_backup($service, $source_db, $target_file, $options, $s_backup['verbose']);\n            $message = nl2br(str_replace(array(chr(0x01).chr(0x0a), 'gbak: '), '', $result));\n            fbird_service_detach($service);\n        } else {\n            $fb_error = fbird_errmsg();\n        }\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_restore')) {\n    if (isset($_POST['adm_restore_doit'])) {\n        $s_restore = array('source' => get_request_data('adm_re_source'),\n                           'target' => get_request_data('adm_re_target'),\n                           'overwrite' => (boolean) get_request_data('adm_re_overwrite'),\n                           'inactive' => (boolean) get_request_data('adm_re_inactive'),\n                           'oneattime' => (boolean) get_request_data('adm_re_oneattime'),\n                           'useall' => (boolean) get_request_data('adm_re_useall'),\n                           'novalidity' => (boolean) get_request_data('adm_re_novalidity'),\n                           'kill' => (boolean) get_request_data('adm_re_kill'),\n                           'verbose' => (boolean) get_request_data('adm_re_verbose'),\n                           'connect' => (boolean) get_request_data('adm_re_connect'),\n                           );\n\n        if ($s_restore['connect']) {\n            $s_restore['verbose'] = true;\n        }\n    }\n\n    if (isset($_POST['adm_restore_doit'])  &&  !empty($s_restore['source'])  &&  !empty($s_restore['target'])) {\n        $s_sysdba_pw = get_sysdba_pw();\n\n        if (!is_allowed_db($s_restore['target'])) {\n            $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_restore['target']);\n        }\n\n        $restore_options = array('inactive' => IBASE_RES_DEACTIVATE_IDX,\n                                 'oneattime' => IBASE_RES_ONE_AT_A_TIME,\n                                 'useall' => IBASE_RES_USE_ALL_SPACE,\n                                 'novalidity' => IBASE_RES_NO_VALIDATE,\n                                 'kill' => IBASE_RES_NO_SHADOW,\n                                 );\n        $options = 0;\n        foreach ($restore_options as $idx => $option) {\n            if ($s_restore[$idx]) {\n                $options |= $option;\n            }\n        }\n        if ($s_restore['overwrite']) {\n            $options |= IBASE_RES_REPLACE;\n        } else {\n            $options |= IBASE_RES_CREATE;\n        }\n\n        if (empty($error)) {\n            $source_file = defined('BACKUP_DIR')  &&  BACKUP_DIR !== '' ? BACKUP_DIR.$s_restore['source'] : $s_restore['source'];\n\n            if ($s_restore['verbose']) {\n\n                $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"restore\";';});\n\n                $iframekey_restore = md5(uniqid('restore'));\n                $s_iframejobs[$iframekey_restore] = array('job' => 'restore',\n                                                      'source' => $source_file,\n                                                      'target' => $s_restore['target'],\n                                                      'options' => $options,\n                                                      'connect' => $s_restore['connect'],\n                                                      'timestamp' => time(), );\n            } elseif (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n                fbird_restore($service, $source_file, $s_restore['target'], $options, $s_restore['verbose']);\n                $message = 'restore started';\n                fbird_service_detach($service);\n            } else {\n                $fb_error = fbird_errmsg();\n            }\n        }\n    }\n}\n\n\n\n$s_page = 'Admin';\n$panels = $s_admin_panels;\n\nrequire './inc/script_end.inc.php';\n\nfunction get_backup_filename($pname)\n{\n    return (defined('BACKUP_DIR')  &&  BACKUP_DIR !== '')\n        ?  BACKUP_DIR.basename($pname)\n        : $pname;\n}\n\n\n\n\nfunction database_statistic_options()\n{\n    $options = array(IBASE_STS_HDR_PAGES => 'header page',\n                     IBASE_STS_DB_LOG => 'log page',\n                     IBASE_STS_DATA_PAGES => 'data pages',\n                     IBASE_STS_IDX_PAGES => 'index leaf pages',\n                     IBASE_STS_SYS_RELATIONS => 'system relations',\n                     );\n\n    return $options;\n}\n\n'firebirdwebadmin/inc/firebird.inc.php'\n:<?php\n\nfunction get_preset_charsets($server_family = null, $server_version = null)\n{\n    $charsets = array('ASCII',\n                      'BIG_5',\n                      'CYRL',\n                      'DOS437',\n                      'DOS850',\n                      'DOS852',\n                      'DOS857',\n                      'DOS860',\n                      'DOS861',\n                      'DOS863',\n                      'DOS865',\n                      'EUCJ_0208',\n                      'GB_2312',\n                      'ISO8859_1',\n                      'KSC_5601',\n                      'NEXT',\n                      'NONE',\n                      'OCTETS',\n                      'SJIS_0208',\n                      'UNICODE_FSS',\n                      'WIN1250',\n                      'WIN1251',\n                      'WIN1252',\n                      'WIN1253',\n                      'WIN1254',\n                      'CP943C',\n                      'DOS737',\n                      'DOS775',\n                      'DOS858',\n                      'DOS862',\n                      'DOS864',\n                      'DOS866',\n                      'DOS869',\n                      'GB18030',\n                      'GBK',\n                      'WIN1255',\n                      'WIN1256',\n                      'WIN1257',\n                      'ISO8859_2',\n                      'ISO8859_3',\n                      'ISO8859_4',\n                      'ISO8859_5',\n                      'ISO8859_6',\n                      'ISO8859_7',\n                      'ISO8859_8',\n                      'ISO8859_9',\n                      'ISO8859_13',\n                      'KOI8R',\n                      'KOI8U',\n                      'TIS620',\n                      'UTF8',\n                      'WIN1258'\n                    );\n    asort($charsets);\n\n    return $charsets;\n}\n\n$fieldtypes = array(7 => 'SMALLINT',\n            8 => 'INTEGER',\n            9 => 'QUAD',\n           10 => 'FLOAT',\n           11 => 'D_FLOAT',\n           12 => 'DATE',\n           13 => 'TIME',\n           14 => 'CHAR',\n           16 => 'INT64',\n           27 => 'DOUBLE',\n           35 => 'TIMESTAMP',\n           37 => 'VARCHAR',\n           40 => 'CSTRING',\n          261 => 'BLOB', );\n\n\n\n\nfunction get_datatypes($server_family = null, $server_version = null)\n{\n    $datatypes = array(7 => 'SMALLINT',\n                       8 => 'INTEGER',\n                       10 => 'FLOAT',\n                       27 => 'DOUBLE',\n                       701 => 'DECIMAL',\n                       702 => 'NUMERIC',\n                       14 => 'CHARACTER',\n                       37 => 'VARCHAR',\n                       12 => 'DATE',\n                       13 => 'TIME',\n                       35 => 'TIMESTAMP',\n                       261 => 'BLOB',\n                       40 => 'CSTRING',\n                       16 => 'BIGINT',\n                       );\n\n    return $datatypes;\n}\n\n$fk_actions = array(0 => 'NO ACTION',\n                    1 => 'CASCADE',\n                    2 => 'SET DEFAULT',\n                    3 => 'SET NULL',\n                    );\n\n$pagesizes = array(4096, 8192, 16384);\n\n$server_types = array('other',\n                      'FB_2.1',\n                      'FB_2.5',\n                      'FB_3.0',\n                      'FB_3.5',\n                      'FB_4.0',\n                      );\n\n\n\n\nfunction get_reserved_words($server_family, $server_version)\n{\n    $reserved_words =\n        array('ACTION', 'ACTIVE', 'ADD', 'ADMIN', 'AFTER', 'ALL', 'ALTER', 'AND', 'ANY',\n              'AS', 'ASC', 'ASCENDING', 'AT', 'AUTO', 'AUTODLL', 'AVG', 'BASED', 'BASENAME',\n              'BASE_NAME', 'BEFORE', 'BEGIN', 'BETWEEN', 'BLOB', 'BLOBEDIT', 'BUFFER', 'BY',\n              'CACHE', 'CASCADE', 'CAST', 'CHAR', 'CHARACTER', 'CHARACTER_LENGTH',\n              'CHAR_LENGTH', 'CHECK', 'CHECK_POINT_LEN', 'CHECK_POINT_LENGTH', 'COLLATE',\n              'COLUMN', 'COMMIT', 'COMMITTED', 'COMPILETIME', 'COMPUTED', 'CLOSE',\n              'CONDITIONAL', 'CONNECT', 'CONSTRAINT', 'CONTAINING', 'CONTINUE', 'COUNT',\n              'CREATE', 'CSTRING', 'CURRENT', 'CURRENT_DATE', 'CURRENT_TIME',\n              'CURRENT_TIMESTAMP', 'CURSOR', 'DATABASE', 'DATE', 'DAY', 'DB_KEY', 'DEBUG',\n              'DEC', 'DECIMAL', 'DECLARE', 'DEFAULT', 'DELETE', 'DESC', 'DESCENDING',\n              'DESCRIBE', 'DESCRIPTOR', 'DISCONNECT', 'DISPLAY', 'DISTINCT', 'DO', 'DOMAIN',\n              'DOUBLE', 'DROP', 'ECHO', 'EDIT', 'ELSE', 'END', 'ENTRY_POINT', 'ESCAPE',\n              'EVENT', 'EXCEPTION', 'EXECUTE', 'EXISTS', 'EXIT', 'EXTERN', 'EXTERNAL',\n              'EXTRACT', 'FETCH', 'FILE', 'FILTER', 'FLOAT', 'FOR', 'FOREIGN', 'FOUND',\n              'FREE_IT', 'FROM', 'FULL', 'FUNCTION', 'GDSCODE', 'GENERATOR', 'GEN_ID',\n              'GLOBAL', 'GOTO', 'GRANT', 'GROUP', 'GROUP_COMMIT_WAIT',\n              'GROUP_COMMIT_WAIT_TIME', 'HAVING', 'HELP', 'HOUR', 'IF', 'IMMEDIATE', 'IN',\n              'INACTIVE', 'INDEX', 'INDICATOR', 'INIT', 'INNER', 'INPUT', 'INPUT_TYPE',\n              'INSERT', 'INT', 'INTEGER', 'INTO', 'IS', 'ISOLATION', 'ISQL', 'JOIN', 'KEY',\n              'LC_MESSAGES', 'LC_TYPE', 'LEFT', 'LENGTH', 'LEV', 'LEVEL', 'LIKE', 'LOGFILE',\n              'LOG_BUFFER_SIZE', 'LOG_BUF_SIZE', 'LONG', 'MANUAL', 'MAX', 'MAXIMUM',\n              'MAXIMUM_SEGMENT', 'MAX_SEGMENT', 'MERGE', 'MESSAGE', 'MIN', 'MINIMUM',\n              'MINUTE', 'MODULE_NAME', 'MONTH', 'NAMES', 'NATIONAL', 'NATURAL', 'NCHAR',\n              'NO', 'NOAUTO', 'NOT', 'NULL', 'NUMERIC', 'NUM_LOG_BUFS', 'NUM_LOG_BUFFERS',\n              'OCTET_LENGTH', 'OF', 'ON', 'ONLY', 'OPEN', 'OPTION', 'OR', 'ORDER', 'OUTER',\n              'OUTPUT', 'OUTPUT_TYPE', 'OVERFLOW', 'PAGE', 'PAGELENGTH', 'PAGES',\n              'PAGE_SIZE', 'PARAMETER', 'PASSWORD', 'PLAN', 'POSITION', 'POST_EVENT',\n              'PRECISION', 'PREPARE', 'PROCEDURE', 'PROTECTED', 'PRIMARY', 'PRIVILEGES',\n              'PUBLIC', 'QUIT', 'RAW_PARTITIONS', 'RDB\\$DB_KEY', 'READ', 'REAL',\n              'RECORD-VERSION', 'REFERENCES', 'RELEASE', 'RESERV', 'RESERVING', 'RESTRICT',\n              'RETAIN', 'RETURN', 'RETURNING_VALUES', 'RETURNS', 'REVOKE', 'RIGHT', 'ROLE',\n              'ROLLBACK', 'RUNTIME', 'SCHEMA', 'SECOND', 'SEGMENT', 'SELECT', 'SET',\n              'SHADOW', 'SHARED', 'SHELL', 'SHOW', 'SINGULAR', 'SIZE', 'SMALLINT',\n              'SNAPSHOT', 'SOME', 'SORT', 'SQLCODE', 'SQLERROR', 'SQLWARNING', 'STABILITY',\n              'STARTING', 'STARTS', 'STATEMENT', 'STATIC', 'STATISTICS', 'SUB_TYPE', 'SUM',\n              'SUSPEND', 'TABLE', 'TERMINATOR', 'THEN', 'TIME', 'TIMESTAMP', 'TO',\n              'TRANSACTION', 'TRANSLATE', 'TRANSLATION', 'TRIGGER', 'TRIM', 'TYPE',\n              'UNCOMMITTED', 'UNION', 'UNIQUE', 'UPDATE', 'UPPER', 'USER', 'USING', 'VALUE',\n              'VALUES', 'VARCHAR', 'VARIABLE', 'VARYING', 'VERSION', 'VIEW', 'WAIT',\n              'WEEKDAY', 'WHEN', 'WHENEVER', 'WHERE', 'WHILE', 'WITH', 'WORK', 'WRITE',\n              'YEAR', 'YEARDAY','BIGINT', 'CASE', 'CURRENT_CONNECTION', 'CURRENT_ROLE', 'CURRENT_USER', 'CURRENT_TRANSACTION',\n              'RECREATE', 'ROW_COUNT', 'RELEASE', 'SAVEPOINT', 'ABS', 'BOOLEAN', 'BOTH', 'CHAR_LENGTH',\n              'CHARCTER_LENGTH', 'FALSE', 'LEADING', 'OCTET_LENGTH', 'TRIM', 'TRAILING', 'TRUE', 'UNKNOWN',\n               );\n\n    return $reserved_words;\n}\n\n\n\n\nfunction get_context_variables($server_family, $server_version)\n{\n    $context_variables = array('USER', 'CURRENT_DATE', 'CURRENT_CONNECTION' , 'CURRENT_ROLE' , 'CURRENT_TIME' ,'CURRENT_TIMESTAMP','CURRENT_TRANSACTION','CURRENT_USER');\n\n    return $context_variables;\n}\n\n\n\n\nfunction get_system_tables($server_family, $server_version)\n{\n    $system_tables =\n        array('RDB$CHARACTER_SETS',\n              'RDB$CHECK_CONSTRAINTS',\n              'RDB$COLLATIONS',\n              'RDB$DATABASE',\n              'RDB$DEPENDENCIES',\n              'RDB$EXCEPTIONS',\n              'RDB$FIELD_DIMENSIONS',\n              'RDB$FIELDS',\n              'RDB$FILES',\n              'RDB$FILTERS',\n              'RDB$FORMATS',\n              'RDB$FUNCTION_ARGUMENTS',\n              'RDB$FUNCTIONS',\n              'RDB$GENERATORS',\n              'RDB$INDEX_SEGMENTS',\n              'RDB$INDICES',\n              'RDB$LOG_FILES',\n              'RDB$PAGES',\n              'RDB$PROCEDURE_PARAMETERS',\n              'RDB$PROCEDURES',\n              'RDB$REF_CONSTRAINTS',\n              'RDB$RELATION_CONSTRAINTS',\n              'RDB$RELATION_FIELDS',\n              'RDB$RELATIONS',\n              'RDB$ROLES',\n              'RDB$SECURITY_CLASSES',\n              'RDB$TRANSACTIONS',\n              'RDB$TRIGGER_MESSAGES',\n              'RDB$TRIGGERS',\n              'RDB$TYPES',\n              'RDB$USER_PRIVILEGES',\n              'RDB$VIEW_RELATIONS', );\n\n    return $system_tables;\n}\n\n\ndefine('OT_RELATION', 0);\ndefine('OT_VIEW', 1);\ndefine('OT_TRIGGER', 2);\ndefine('OT_COMPUTED_FIELD', 3);\ndefine('OT_VALIDATION', 4);\ndefine('OT_PROCEDURE', 5);\ndefine('OT_EXPRESSION_INDEX', 6);\ndefine('OT_EXCEPTION', 7);\ndefine('OT_USER', 8);\ndefine('OT_FIELD', 9);\ndefine('OT_INDEX', 10);\ndefine('OT_DEPENDENT_COUNT', 11);\ndefine('OT_USER_GROUP', 12);\ndefine('OT_ROLE', 13);\ndefine('OT_GENERATOR', 14);\ndefine('OT_UDF', 15);\ndefine('OT_BLOB_FILTER', 16);\n",
        "gt": [
            "'firebirdwebadmin/inc/firebird.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/admin.php'"
        ]
    },
    {
        "files": [
            "'aurora/Web Interface/index.php'",
            "'aurora/Web Interface/components.php'",
            "'aurora/Web Interface/files/LiveContestRanking.php'"
        ],
        "content": "'aurora/Web Interface/index.php'\n:<?php\nrequire_once 'config.php';\nrequire_once 'components.php';\n$_SESSION['url'] = $_SERVER['REQUEST_URI'];\n$query = \"select value from admin where variable='mode'\";\n$judge = DB::findOneFromQuery($query);\nif ($judge['value'] == 'Lockdown' && isset($_SESSION['loggedin']) && !isAdmin()) {\n    session_destroy();\n    session_regenerate_id(true);\n    session_start();\n    $_SESSION['msg'] = \"Judge is in Lockdown mode and so you have been logged out.\";\n    redirectTo(SITE_URL . \"/\");\n}\ndoCompetitionCheck();\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"description\" content=\"Aurora is a dockerized open-source online judge. It can be easily deployed and scaled. It also employs the latest security checks to secure the application.\">\n        <meta name=\"keywords\" content=\"open source, online judge, docker, secure, scaleable\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"<?php echo SITE_URL ?>/css/bootstrap.css\" media=\"screen\" />\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"<?php echo SITE_URL ?>/css/style.css\" media=\"screen\" />\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/jquery-3.1.0.min.js\"></script>\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/bootstrap.js\"></script>\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/plugin.js\"></script>\n        <script type=\"text/javascript\">\n            $(window).load(function() {\n                if ($('\n                    $('\n            });\n        </script>\n        <title>Aurora - An open-source online judge</title>\n        <link rel='shortcut icon' href='<?php echo SITE_URL; ?>/img/favicon.png' />\n    </head>\n    <body>\n        <?php if ($judge['value'] == 'Active' && isset($_SESSION['loggedin'])) { ?>\n            <script type='text/javascript'>\n                function settitle() {\n                    var t = window.document.title;\n                    var n = t.match(/(\\d*)\\)/gi);\n                    console.log(n);\n                    if (n != null) {\n                        n = parseInt(n) + 1;\n                    } else {\n                        n = 1;\n                    }\n                    window.document.title = \"(\" + n + \") Aurora\";\n                }\n                function resettile() {\n                    $.ajax({\n                        type: \"GET\",\n                        url: \"<?php echo SITE_URL; ?>/broadcast.php\",\n                        data: {updatetime: \"\"}\n                    });\n                    window.document.title = \"Aurora\";\n                }\n                window.setTimeout(\"bchk();\", <?php echo rand(300000, 600000); ?>);\n                $.ajax(\"<?php echo SITE_URL; ?>/broadcast.php\").done(function(msg) {\n                    var json = eval('(' + msg + ')');\n                    console.log(msg);\n                    if (json.broadcast.length != 0) {\n                        var str, i;\n                        str = \"\";\n                        for (i = 0; i < json.broadcast.length; i++)\n                            str += \"<b>\" + json.broadcast[i].title + \":</b><br/>\" + json.broadcast[i].msg + \"<br/><br/>\";\n                        $(\"\n                        $('\n                            resettile();\n                        });\n                        $(\"\n                        settitle();\n                    }\n                });\n                function bchk() {\n                    $.ajax(\"<?php echo SITE_URL; ?>/broadcast.php\").done(function(msg) {\n                        var json = eval('(' + msg + ')');\n                        console.log(msg);\n                        if (json.broadcast.length != 0) {\n                            var str, i;\n                            str = \"\";\n                            for (i = 0; i < json.broadcast.length; i++)\n                                str += \"<b>\" + json.broadcast[i].title + \":</b><br/>\" + json.broadcast[i].msg + \"<br/><br/>\";\n                            $(\"\n                            $('\n                                resettile();\n                            });\n                            $(\"\n                            settitle();\n                        }\n                    });\n                    window.setTimeout(\"bchk();\", 600000);\n                }\n            </script>\n            <div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n                <div class=\"modal-dialog\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n                            <h4 class=\"modal-title\" id=\"myModalLabel\">Alert</h4>\n                        </div>\n                        <div class=\"modal-body\" id=\"bmsg\">\n\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\">Close</button>\n                        </div>\n                    </div><!-- /.modal-content -->\n                </div><!-- /.modal-dialog -->\n            </div>\n        <?php }\n        ?>\n        <nav class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n            <div class=\"container\">\n                <div class=\"navbar-header\">\n                    <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"\n                        <span class=\"sr-only\">Toggle navigation</span>\n                        <span class=\"icon-bar\"></span>\n                        <span class=\"icon-bar\"></span>\n                        <span class=\"icon-bar\"></span>\n                    </button>\n                    <a class=\"navbar-brand\" href=\"<?php echo SITE_URL; ?>/\">Aurora</a>\n                </div>\n\n                <div class=\"collapse navbar-collapse\" id=\"navbar-collapse-1\">\n                    <ul class=\"nav navbar-nav\">\n                        <!-- <li><a href=\"<?php echo SITE_URL; ?>/home\">Home</a></li> -->\n                        <li><a href=\"<?php echo SITE_URL; ?>/problems\">Problems</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/contests\">Contests</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/rankings\">Rankings</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/submissions\">Submissions</a></li>\n                        <li class=\"dropdown\">\n                            <a href=\"\n                            <ul class=\"dropdown-menu\" role=\"menu\">\n                                <li><a href=\"<?php echo SITE_URL; ?>/faq\">FAQ</a></li>\n                                <li><a href=\"<?php echo SITE_URL; ?>/contact\">Contact Us</a></li>\n                            </ul>\n                        </li>\n                    </ul>\n                    <?php if (isset($_SESSION['loggedin'])) { ?>\n                        <ul class=\"nav navbar-nav pull-right\">\n                            <?php if ($_SESSION['team']['status'] == 'Admin') { ?>\n                                <li class=\"dropdown\">\n                                    <a href=\"\n                                        Admin\n                                        <b class=\"caret\"></b>\n                                    </a>\n                                    <ul class=\"dropdown-menu\">\n                                        <li><a href='<?php echo SITE_URL; ?>/adminjudge'>Judge Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminproblem'>Problem Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/admincontest'>Contest Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminteam'>Team Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/admingroup'>Group Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminclar'>Clarifications</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminbroadcast'>Broadcast</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminlog'>Request Logs</a></li>\n                                    </ul>\n                                </li>\n                            <?php } ?>\n                            <li class=\"dropdown\">\n                                <a href=\"\n                                    Account\n                                    <b class=\"caret\"></b>\n                                </a>\n                                <ul class=\"dropdown-menu\">\n                                    <li><a href='<?php echo SITE_URL; ?>/edit'>Account Settings</a></li>\n                                    <li><a href='<?php echo SITE_URL; ?>/process.php?logout'>Logout</a></li>\n                                </ul>\n                            </li>\n                        </ul>\n                    <?php } ?>\n                </div>\n            </div>\n        </nav>\n        <div class=\"container bodycont\">\n            <div class='row'>\n                <div class='col-md-9' id='mainbar'>\n                    <?php if (isset($_SESSION['msg']) && $_SESSION['msg'] != \"\") { ?>\n                        <div class=\"alert alert-info\" style=\"margin-top: 20px;\">\n                            <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n                            <div class=\"text-center\"><?php\n                                echo $_SESSION['msg'];\n                                unset($_SESSION['msg']);\n                                ?></div>\n                        </div>\n                        <?php\n                    }\n                    if (!isset($_GET['tab']) || $_GET['tab'] == 'home') {\n                        $str = 'files/home.php';\n                    } else {\n                        $str = 'files/' . $_GET['tab'] . '.php';\n                    }\n                    if (file_exists($str))\n                        require $str;\n                    else\n                        echo \"<br/><br/><br/><div style='padding: 10px;'><h1>Page not Found :(</h1>The page you are searching for is not on this site.</div><br/><br/><br/>\";\n                    ?>\n                </div>\n                <div class='col-md-3'>\n                    <!-- Login Panel -->\n                    <div class=\"panel panel-default\">\n                        <?php loginbox(); ?>\n                    </div>\n                    <!-- ./Login Panel -->\n\n                    <!-- Contest Panel -->\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Contest</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <?php contest_status(); ?>\n                        </div>\n                    </div>\n                    <!-- ./Contest Panel -->\n\n                    <!-- Ranking Panel -->\n                    <div class=\"panel panel-default\">\n\n                    <?php if ($judge['value'] == 'Active') { ?>\n                        <!-- Contest Ranking -->\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Contest Ranking</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <div id=\"live-ranking\">\n                            <?php getCurrentContestRanking(); ?>\n                                <a style=\"float:right;\" href=\"<?php echo SITE_URL.'/rank/'.getCurrentContest(); ?>\">View all</a>\n                            </div>\n                        </div>\n\n                    <?php } else { ?>\n                        <!-- Overall Ranking -->\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Overall Rankings</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <?php rankings(); ?>\n                        </div>\n                    <?php } ?>\n                    </div>\n                    <!-- ./Ranking Panel -->\n\n                    <?php\n\n                    if (isset($_SESSION['loggedin'])) mysubs();\n\n                    if ($judge['value'] == 'Active') latestsubs();\n                    ?>\n\n                </div>\n            </div>\n        </div>\n        <div class=\"footer\">\n            <a href=\"https:\n        </div>\n    </body>\n</html>\n\n'aurora/Web Interface/components.php'\n:<?php\ninclude_once 'functions.php';\ninclude_once 'files/Leaderboard.php';\ninclude_once 'files/LiveContestRanking.php';\nfunction loginbox() {\n    if (!isset($_SESSION['loggedin'])) {\n        ?>\n        <div class=\"panel-heading text-center\">\n            <h3 class=\"panel-title\">Login</h3>\n        </div>\n        <div class=\"panel-body text-center\">\n\n            <form action=\"<?php echo SITE_URL; ?>/process.php\" method=\"post\" role=\"form\">\n                <div class=\"input-group\" style=\"margin-bottom: -1px;\">\n                    <span class=\"input-group-addon\" style=\"border-bottom-left-radius: 0;\"><i class=\"glyphicon glyphicon-user\"></i></span>\n                    <input class=\"form-control\" style=\"border-bottom-right-radius: 0;\" type=\"text\" name=\"teamname\" placeholder=\"Teamname\" required/>\n                </div>\n                <div class=\"input-group\">\n                    <span style=\"border-top-left-radius: 0;\" class=\"input-group-addon\"><i class=\"glyphicon glyphicon-lock\"></i></span>\n                    <input style=\"border-top-right-radius: 0;\" class=\"form-control\" type=\"password\" name=\"password\" placeholder=\"Password\" required/>\n                </div><br/>\n                <input type=\"submit\" name=\"login\" value=\"Log In\" class=\"btn btn-primary btn-block\"/>\n            </form>\n            <a href='<?php echo SITE_URL; ?>/register'>New Team? Register Here.</a>\n        </div>\n        <?php\n    } else {\n        ?>\n        <div class=\"panel-heading text-center\">\n            <h3 class=\"panel-title\">Team</h3>\n        </div>\n        <div class=\"panel-body text-center\">\n\n            <table class='table table-hover'>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Score</th>\n                        <th>Overall Rank</th>\n                    </tr>\n                </thead>\n                <?php\n                $query = \"SELECT count(*)+1 as rank, (select score from teams where tid = \" . $_SESSION['team']['id'] . \") as sco FROM `teams` WHERE (score > (select score from teams where tid = \" . $_SESSION['team']['id'] . \") and status = 'Normal') or (score = (select score from teams where tid = \" . $_SESSION['team']['id'] . \") and penalty < (select penalty from teams where tid = \" . $_SESSION['team']['id'] . \") and status='Normal') \";\n                $res = DB::findOneFromQuery($query);\n                echo \"<tr><td><a href='\" . SITE_URL . \"/teams/\" . $_SESSION['team']['name'] . \"'>\" . $_SESSION['team']['name'] . \"</a></td><td>$res[sco]</td><td style='text-align: center'>$res[rank]</td></tr>\";\n                ?>\n            </table>\n        </div>\n        <?php\n    }\n}\n\nfunction mysubs() { ?>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading text-center\">\n            <h3 class=\"panel-title\">My Submissions</h3>\n        </div>\n        <div class=\"panel-body text-center\">\n            <table class='table table-hover'>\n                <thead>\n                    <tr>\n                        <th>RID</th>\n                        <th>Problem</th>\n                        <th>Result</th>\n                    </tr>\n                </thead>\n                <?php\n                $query = \"SELECT rid, (select name from problems where pid = runs.pid) as pname,(select code from problems where pid = runs.pid) as pcode, result FROM runs WHERE tid = \" . $_SESSION['team']['id'] . \" order by rid desc limit 0, 5\";\n                $res = DB::findAllFromQuery($query);\n                $resAttr = array('AC' => 'success', 'RTE' => 'warning', 'WA' => 'danger', 'TLE' => 'warning', 'CE' => 'warning', 'DQ' => 'danger', 'PE' => 'info', '...' => 'default', '' => 'default');\n                foreach ($res as $row)\n                    echo \"<tr><td><a href='\" . SITE_URL . \"/viewsolution/$row[rid]'>$row[rid]</a></td><td><a href='\" . SITE_URL . \"/problems/$row[pcode]'>$row[pname]</a></td><td><span class='label label-\".$resAttr[$row['result']].\"'>$row[result]</span></td></tr>\";\n                ?>\n            </table>\n        </div>\n    </div>\n<?php }\n\nfunction contest_status() {\n    $status = Array();\n    $query = \"select * from admin where variable = 'endtime' or variable = 'starttime' or variable = 'mode' or variable='ip' or variable='port'\";\n    DB::query($query);\n    $result = DB::findAllFromQuery($query);\n    foreach ($result as $row) {\n        $status[$row['variable']] = $row['value'];\n    }\n    ?>\n\n    <table class='table'>\n        <thead>\n            <tr>\n                <th class=\"text-center\">Mode</th>\n                <th class=\"text-center\">Judge</th>\n            </tr>\n        </thead>\n        <tr>\n            <td>\n                <div id=\"ajax-contest-mode\">\n                    <h4>\n                        <?php\n                        if ($status['mode'] == \"Active\" && $status['endtime'] < time())\n                            echo \"<span class=\\\"label label-danger\\\">Disabled</span>\";\n                        else {\n                            $attributes = array(\n                                \"Active\" => \"success\",\n                                \"Passive\" => \"primary\",\n                                \"Disabled\" => \"default\",\n                                \"Lockdown\" => \"danger\"\n                            );\n                            echo \"<span class=\\\"label label-\" . $attributes[$status['mode']] . \"\\\">\" . $status['mode'] . \"</span>\";\n                        }\n                        ?>\n                    </h4>\n                </div>\n            </td>\n            <td>\n                <h4>\n                    <?php\n                    $client = stream_socket_client($status['ip'] . \":\" . $status['port'], $errno, $errorMessage);\n                    if ($client === false)\n                        echo \"<span class=\\\"label label-danger\\\">Offline</span>\";\n                    else\n                        echo \"<span class=\\\"label label-success\\\">Online</span>\";\n                    fclose($client);\n                    ?>\n                </h4>\n            </td>\n        </tr>\n    </table>\n    <?php\n    if ($status['mode'] == \"Active\") { ?>\n        <div id='ajax-contest-time'></div>\n        <script type='text/javascript'>\n            var totaltime = <?php echo ($status['endtime'] - $status['starttime']); ?>;\n            var countdown = <?php echo $status['endtime'] - time(); ?>;\n            function step() {\n                if (countdown >= 0) {\n                    var currentPercent = (totaltime-countdown)/totaltime*100;\n                    var attribute = currentPercent < 70 ? \"success\" : currentPercent < 90 ? \"warning\" : \"danger\";\n                    $(\"div\n                        \"<h2><span class=\\\"label label-\"+attribute+\"\\\">\" + parseInt(countdown / 3600) + \":\" + parseInt((countdown / 60)) % 60 + \":\" + (countdown % 60)+\"</span></h2>\"\n                    );\n                } else {\n                    $(\"div\n                    $(\"div\n\n                }\n                if (countdown >= 0)\n                    countdown--;\n                window.setTimeout(\"step();\", 1000);\n            }\n            step();\n        </script>\n<?php\n    }\n}\n\nfunction latestsubs() {?>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading text-center\">\n            <h3 class=\"panel-title\">Latest Submissions</h3>\n        </div>\n        <div class=\"panel-body text-center\">\n            <table class='table table-hover'>\n                <thead>\n                <tr>\n                    <th>Team</th>\n                    <th>Problem</th>\n                    <th>Result</th>\n                </tr>\n                </thead>\n                <?php\n                $query = \"SELECT rid, (select teamname from teams where tid = runs.tid) as tname, (select name from problems where pid = runs.pid) as pname,(select code from problems where pid = runs.pid) as pcode, result FROM runs order by rid desc limit 0, 5\";\n                $res = DB::findAllFromQuery($query);\n                $resAttr = array('AC' => 'success', 'RTE' => 'warning', 'WA' => 'danger', 'TLE' => 'warning', 'CE' => 'warning', 'DQ' => 'danger', 'PE' => 'info', '...' => 'default', '' => 'default');\n                foreach ($res as $row)\n                    echo \"<tr><td><a href='\" . SITE_URL . \"/teams/$row[tname]'>$row[tname]</a></td><td><a href='\" . SITE_URL . \"/problems/$row[pcode]'>$row[pname]</a></td><td><span class='label label-\".$resAttr[$row['result']].\"'>$row[result]</span></td></tr>\";\n                ?>\n            </table>\n        </div>\n    </div>\n<?php }\n\nfunction rankings() {\n    $select = \"SELECT * \";\n    $body = \" FROM teams WHERE status='Normal' ORDER BY score DESC, penalty ASC\";\n    $result = DB::findAllWithCount($select, $body, 1, 10);\n    $data = $result['data'];\n    $i = 1;\n    echo \"<table class='table table-hover'><thead><tr><th>Rank</th><th>Name</th><th>Score</th></tr></thead>\";\n    foreach ($data as $row) {\n        echo \"<tr><td>\" . $i++ . \"</td><td><a href='\" . SITE_URL . \"/teams/$row[teamname]'>\" . $row['teamname'] . \"</a></td><td>\" . $row['score'] . \"</td></tr>\";\n    }\n    echo \"</table>\";\n}\n\nfunction pagination($noofpages, $url, $page, $maxcontent) {\n    if ($noofpages > 1) {\n        if ($page - ($maxcontent / 2) > 0)\n            $start = $page - 5;\n        else\n            $start = 1;\n        if ($noofpages >= $start + $maxcontent)\n            $end = $start + $maxcontent;\n        else\n            $end = $noofpages;\n        ?>\n        <div align='center'>\n            <ul class =\"pagination\">\n                <?php if ($page > 1) { ?>\n                    <li><a href=\"<?php echo $url . \"&page=1\"; ?>\">First</a></li>\n                    <li><a href=\"<?php echo $url . \"&page=\" . ($page - 1); ?>\">Prev</a></li>\n                    <?php\n                }\n                for ($i = $start; $i <= $end; $i++) {\n                    ?>\n                    <li <?php echo ($i == $page) ? (\"class='disabled'\") : (''); ?>><a href=\"<?php echo ($i != $page) ? ($url . \"&page=\" . $i) : (\"\n                    <?php\n                }\n                if ($page < $noofpages) {\n                    ?>\n                    <li><a href=\"<?php echo $url . \"&page=\" . ($page + 1); ?>\">Next</a></li>\n                    <li><a href=\"<?php echo $url . \"&page=\" . $noofpages; ?>\">Last</a></li>\n                <?php } ?>\n            </ul>\n        </div>\n        <?php\n    }\n}\n\nfunction getrankings($code) {\n    $result =  Leaderboard::getStaticRankTableInJSON($code);\n    return json_decode($result['ranktable'], true);\n}\n\nfunction getCurrentContest() {\n    $result = DB::findOneFromQuery(\"SELECT value from admin where variable = 'currentContest'\");\n    $contestCode = $result['value'];\n    return $contestCode;\n}\n\nfunction getCurrentContestRanking(){\n    $contestCode = getCurrentContest();\n    $printTable = liveContestRanking($contestCode, 10);\n    echo $printTable;\n}\n\nfunction errorMessageHTML($msg){\n    return '<br /><div class=\"alert alert-danger\" role=\"alert\">'.$msg.'</div>';\n}\n\nfunction doCompetitionCheck(){\n\n\n    $query = \"select value from admin where variable = 'mode'\";\n    $result = DB::findOneFromQuery($query);\n    if($result['value'] == 'Passive') {\n        $curTime = time();\n        $query = \"select endtime from contest where endtime >= $curTime and starttime<=$curTime\";\n        $result = DB::findOneFromQuery($query);\n        if(isset($result['endtime'])) {\n            $admin = Array();\n            $admin['mode'] = 'Active';\n            $admin['endtime'] = $result['endtime'];\n            foreach ($admin as $key => $val) {\n                $query = \"update admin set value = '$val' where variable = '$key'\";\n                DB::query($query);\n            }\n        }\n    }\n}\n\n?>\n\n'aurora/Web Interface/files/LiveContestRanking.php'\n:<?php\n\ninclude_once(dirname(__FILE__) . '/../functions.php');\ninclude_once 'SSE_Util.php';\n\nfunction liveContestRanking($contestCode, $limit) {\n\t$query = \"SELECT ranktable FROM contest WHERE code = '$contestCode'\";\n\t$table = '<table class=\"table table-hover\">' ;\n\t$result = DB::findOneFromQuery($query);\n\t$rankTable = json_decode($result['ranktable'], true);\n\t$rank = 1;\n\tif ($rankTable) {\n\t\tforeach ($rankTable as $row) {\n\t\t\t$table .= '<tr>';\n\t\t\t$table .= '<td align = \"center\">'.$rank.'</td><td align=\"center\"><a href=\"'.SITE_URL.'/teams/'.$row['teamname'].'\">'.$row['teamname'].'</a></td><td align=\"center\">'.$row['score'].'</td>';\n\t\t\t$table .= '</tr>';\n\t\t\tif($rank >= $limit)\n\t\t\t\tbreak;\n\t\t\t$rank ++;\n\n\t\t}\n\t} else {\n\t\t$table .= \"<tr><td>No Data Available.</td></tr>\";\n\t}\n    $table .= '</table>';\n\treturn $table;\n}\n\n",
        "gt": [
            "'aurora/Web Interface/files/LiveContestRanking.php'",
            "'aurora/Web Interface/components.php'",
            "'aurora/Web Interface/index.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/inc/firebird.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/data.php'"
        ],
        "content": "'firebirdwebadmin/inc/firebird.inc.php'\n:<?php\n\nfunction get_preset_charsets($server_family = null, $server_version = null)\n{\n    $charsets = array('ASCII',\n                      'BIG_5',\n                      'CYRL',\n                      'DOS437',\n                      'DOS850',\n                      'DOS852',\n                      'DOS857',\n                      'DOS860',\n                      'DOS861',\n                      'DOS863',\n                      'DOS865',\n                      'EUCJ_0208',\n                      'GB_2312',\n                      'ISO8859_1',\n                      'KSC_5601',\n                      'NEXT',\n                      'NONE',\n                      'OCTETS',\n                      'SJIS_0208',\n                      'UNICODE_FSS',\n                      'WIN1250',\n                      'WIN1251',\n                      'WIN1252',\n                      'WIN1253',\n                      'WIN1254',\n                      'CP943C',\n                      'DOS737',\n                      'DOS775',\n                      'DOS858',\n                      'DOS862',\n                      'DOS864',\n                      'DOS866',\n                      'DOS869',\n                      'GB18030',\n                      'GBK',\n                      'WIN1255',\n                      'WIN1256',\n                      'WIN1257',\n                      'ISO8859_2',\n                      'ISO8859_3',\n                      'ISO8859_4',\n                      'ISO8859_5',\n                      'ISO8859_6',\n                      'ISO8859_7',\n                      'ISO8859_8',\n                      'ISO8859_9',\n                      'ISO8859_13',\n                      'KOI8R',\n                      'KOI8U',\n                      'TIS620',\n                      'UTF8',\n                      'WIN1258'\n                    );\n    asort($charsets);\n\n    return $charsets;\n}\n\n$fieldtypes = array(7 => 'SMALLINT',\n            8 => 'INTEGER',\n            9 => 'QUAD',\n           10 => 'FLOAT',\n           11 => 'D_FLOAT',\n           12 => 'DATE',\n           13 => 'TIME',\n           14 => 'CHAR',\n           16 => 'INT64',\n           27 => 'DOUBLE',\n           35 => 'TIMESTAMP',\n           37 => 'VARCHAR',\n           40 => 'CSTRING',\n          261 => 'BLOB', );\n\n\n\n\nfunction get_datatypes($server_family = null, $server_version = null)\n{\n    $datatypes = array(7 => 'SMALLINT',\n                       8 => 'INTEGER',\n                       10 => 'FLOAT',\n                       27 => 'DOUBLE',\n                       701 => 'DECIMAL',\n                       702 => 'NUMERIC',\n                       14 => 'CHARACTER',\n                       37 => 'VARCHAR',\n                       12 => 'DATE',\n                       13 => 'TIME',\n                       35 => 'TIMESTAMP',\n                       261 => 'BLOB',\n                       40 => 'CSTRING',\n                       16 => 'BIGINT',\n                       );\n\n    return $datatypes;\n}\n\n$fk_actions = array(0 => 'NO ACTION',\n                    1 => 'CASCADE',\n                    2 => 'SET DEFAULT',\n                    3 => 'SET NULL',\n                    );\n\n$pagesizes = array(4096, 8192, 16384);\n\n$server_types = array('other',\n                      'FB_2.1',\n                      'FB_2.5',\n                      'FB_3.0',\n                      'FB_3.5',\n                      'FB_4.0',\n                      );\n\n\n\n\nfunction get_reserved_words($server_family, $server_version)\n{\n    $reserved_words =\n        array('ACTION', 'ACTIVE', 'ADD', 'ADMIN', 'AFTER', 'ALL', 'ALTER', 'AND', 'ANY',\n              'AS', 'ASC', 'ASCENDING', 'AT', 'AUTO', 'AUTODLL', 'AVG', 'BASED', 'BASENAME',\n              'BASE_NAME', 'BEFORE', 'BEGIN', 'BETWEEN', 'BLOB', 'BLOBEDIT', 'BUFFER', 'BY',\n              'CACHE', 'CASCADE', 'CAST', 'CHAR', 'CHARACTER', 'CHARACTER_LENGTH',\n              'CHAR_LENGTH', 'CHECK', 'CHECK_POINT_LEN', 'CHECK_POINT_LENGTH', 'COLLATE',\n              'COLUMN', 'COMMIT', 'COMMITTED', 'COMPILETIME', 'COMPUTED', 'CLOSE',\n              'CONDITIONAL', 'CONNECT', 'CONSTRAINT', 'CONTAINING', 'CONTINUE', 'COUNT',\n              'CREATE', 'CSTRING', 'CURRENT', 'CURRENT_DATE', 'CURRENT_TIME',\n              'CURRENT_TIMESTAMP', 'CURSOR', 'DATABASE', 'DATE', 'DAY', 'DB_KEY', 'DEBUG',\n              'DEC', 'DECIMAL', 'DECLARE', 'DEFAULT', 'DELETE', 'DESC', 'DESCENDING',\n              'DESCRIBE', 'DESCRIPTOR', 'DISCONNECT', 'DISPLAY', 'DISTINCT', 'DO', 'DOMAIN',\n              'DOUBLE', 'DROP', 'ECHO', 'EDIT', 'ELSE', 'END', 'ENTRY_POINT', 'ESCAPE',\n              'EVENT', 'EXCEPTION', 'EXECUTE', 'EXISTS', 'EXIT', 'EXTERN', 'EXTERNAL',\n              'EXTRACT', 'FETCH', 'FILE', 'FILTER', 'FLOAT', 'FOR', 'FOREIGN', 'FOUND',\n              'FREE_IT', 'FROM', 'FULL', 'FUNCTION', 'GDSCODE', 'GENERATOR', 'GEN_ID',\n              'GLOBAL', 'GOTO', 'GRANT', 'GROUP', 'GROUP_COMMIT_WAIT',\n              'GROUP_COMMIT_WAIT_TIME', 'HAVING', 'HELP', 'HOUR', 'IF', 'IMMEDIATE', 'IN',\n              'INACTIVE', 'INDEX', 'INDICATOR', 'INIT', 'INNER', 'INPUT', 'INPUT_TYPE',\n              'INSERT', 'INT', 'INTEGER', 'INTO', 'IS', 'ISOLATION', 'ISQL', 'JOIN', 'KEY',\n              'LC_MESSAGES', 'LC_TYPE', 'LEFT', 'LENGTH', 'LEV', 'LEVEL', 'LIKE', 'LOGFILE',\n              'LOG_BUFFER_SIZE', 'LOG_BUF_SIZE', 'LONG', 'MANUAL', 'MAX', 'MAXIMUM',\n              'MAXIMUM_SEGMENT', 'MAX_SEGMENT', 'MERGE', 'MESSAGE', 'MIN', 'MINIMUM',\n              'MINUTE', 'MODULE_NAME', 'MONTH', 'NAMES', 'NATIONAL', 'NATURAL', 'NCHAR',\n              'NO', 'NOAUTO', 'NOT', 'NULL', 'NUMERIC', 'NUM_LOG_BUFS', 'NUM_LOG_BUFFERS',\n              'OCTET_LENGTH', 'OF', 'ON', 'ONLY', 'OPEN', 'OPTION', 'OR', 'ORDER', 'OUTER',\n              'OUTPUT', 'OUTPUT_TYPE', 'OVERFLOW', 'PAGE', 'PAGELENGTH', 'PAGES',\n              'PAGE_SIZE', 'PARAMETER', 'PASSWORD', 'PLAN', 'POSITION', 'POST_EVENT',\n              'PRECISION', 'PREPARE', 'PROCEDURE', 'PROTECTED', 'PRIMARY', 'PRIVILEGES',\n              'PUBLIC', 'QUIT', 'RAW_PARTITIONS', 'RDB\\$DB_KEY', 'READ', 'REAL',\n              'RECORD-VERSION', 'REFERENCES', 'RELEASE', 'RESERV', 'RESERVING', 'RESTRICT',\n              'RETAIN', 'RETURN', 'RETURNING_VALUES', 'RETURNS', 'REVOKE', 'RIGHT', 'ROLE',\n              'ROLLBACK', 'RUNTIME', 'SCHEMA', 'SECOND', 'SEGMENT', 'SELECT', 'SET',\n              'SHADOW', 'SHARED', 'SHELL', 'SHOW', 'SINGULAR', 'SIZE', 'SMALLINT',\n              'SNAPSHOT', 'SOME', 'SORT', 'SQLCODE', 'SQLERROR', 'SQLWARNING', 'STABILITY',\n              'STARTING', 'STARTS', 'STATEMENT', 'STATIC', 'STATISTICS', 'SUB_TYPE', 'SUM',\n              'SUSPEND', 'TABLE', 'TERMINATOR', 'THEN', 'TIME', 'TIMESTAMP', 'TO',\n              'TRANSACTION', 'TRANSLATE', 'TRANSLATION', 'TRIGGER', 'TRIM', 'TYPE',\n              'UNCOMMITTED', 'UNION', 'UNIQUE', 'UPDATE', 'UPPER', 'USER', 'USING', 'VALUE',\n              'VALUES', 'VARCHAR', 'VARIABLE', 'VARYING', 'VERSION', 'VIEW', 'WAIT',\n              'WEEKDAY', 'WHEN', 'WHENEVER', 'WHERE', 'WHILE', 'WITH', 'WORK', 'WRITE',\n              'YEAR', 'YEARDAY','BIGINT', 'CASE', 'CURRENT_CONNECTION', 'CURRENT_ROLE', 'CURRENT_USER', 'CURRENT_TRANSACTION',\n              'RECREATE', 'ROW_COUNT', 'RELEASE', 'SAVEPOINT', 'ABS', 'BOOLEAN', 'BOTH', 'CHAR_LENGTH',\n              'CHARCTER_LENGTH', 'FALSE', 'LEADING', 'OCTET_LENGTH', 'TRIM', 'TRAILING', 'TRUE', 'UNKNOWN',\n               );\n\n    return $reserved_words;\n}\n\n\n\n\nfunction get_context_variables($server_family, $server_version)\n{\n    $context_variables = array('USER', 'CURRENT_DATE', 'CURRENT_CONNECTION' , 'CURRENT_ROLE' , 'CURRENT_TIME' ,'CURRENT_TIMESTAMP','CURRENT_TRANSACTION','CURRENT_USER');\n\n    return $context_variables;\n}\n\n\n\n\nfunction get_system_tables($server_family, $server_version)\n{\n    $system_tables =\n        array('RDB$CHARACTER_SETS',\n              'RDB$CHECK_CONSTRAINTS',\n              'RDB$COLLATIONS',\n              'RDB$DATABASE',\n              'RDB$DEPENDENCIES',\n              'RDB$EXCEPTIONS',\n              'RDB$FIELD_DIMENSIONS',\n              'RDB$FIELDS',\n              'RDB$FILES',\n              'RDB$FILTERS',\n              'RDB$FORMATS',\n              'RDB$FUNCTION_ARGUMENTS',\n              'RDB$FUNCTIONS',\n              'RDB$GENERATORS',\n              'RDB$INDEX_SEGMENTS',\n              'RDB$INDICES',\n              'RDB$LOG_FILES',\n              'RDB$PAGES',\n              'RDB$PROCEDURE_PARAMETERS',\n              'RDB$PROCEDURES',\n              'RDB$REF_CONSTRAINTS',\n              'RDB$RELATION_CONSTRAINTS',\n              'RDB$RELATION_FIELDS',\n              'RDB$RELATIONS',\n              'RDB$ROLES',\n              'RDB$SECURITY_CLASSES',\n              'RDB$TRANSACTIONS',\n              'RDB$TRIGGER_MESSAGES',\n              'RDB$TRIGGERS',\n              'RDB$TYPES',\n              'RDB$USER_PRIVILEGES',\n              'RDB$VIEW_RELATIONS', );\n\n    return $system_tables;\n}\n\n\ndefine('OT_RELATION', 0);\ndefine('OT_VIEW', 1);\ndefine('OT_TRIGGER', 2);\ndefine('OT_COMPUTED_FIELD', 3);\ndefine('OT_VALIDATION', 4);\ndefine('OT_PROCEDURE', 5);\ndefine('OT_EXPRESSION_INDEX', 6);\ndefine('OT_EXCEPTION', 7);\ndefine('OT_USER', 8);\ndefine('OT_FIELD', 9);\ndefine('OT_INDEX', 10);\ndefine('OT_DEPENDENT_COUNT', 11);\ndefine('OT_USER_GROUP', 12);\ndefine('OT_ROLE', 13);\ndefine('OT_GENERATOR', 14);\ndefine('OT_UDF', 15);\ndefine('OT_BLOB_FILTER', 16);\n\n'firebirdwebadmin/inc/script_start.inc.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/configuration.inc.php';\n\nif (DEBUG) {\n    $start_time = @microtime();\n}\n\nrequire './inc/functions.inc.php';\n\nsession_start();\nset_error_handler('error_handler');\n\nrequire get_language_file('./lang/');\nrequire './inc/session.inc.php';\nrequire './inc/firebird.inc.php';\nrequire './inc/panel_elements.inc.php';\nrequire './inc/javascript.inc.php';\n\nif (DEBUG || DEBUG_HTML) {\n    include './inc/debug_funcs.inc.php';\n}\n\nif (!extension_loaded('interbase')) {\n    die($ERRORS['NO_IBASE_MODULE']);\n}\n\nif (!isset($_SESSION['s_init'])\n    || ($_SESSION['s_cookies'] === 'untested')\n) {\n    initialize_session();\n    fallback_session();\n} else {\n    localize_session_vars();\n}\n\nif (!isset($no_session_referer) || $no_session_referer !== true) {\n\n    $s_referer = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n}\n\nsend_http_headers();\n\n\n$message = '';\n$warning = '';\n$error = '';\n$fb_error = '';\n$php_error = '';\n$debug = array();\n$externcmd = '';\n\n\n\n$js_stack = '';\n\n\n\n$sql = '';\n\n\n\nif ($s_connected == true && !isset($_GET['unconnected'])) {\n    $dbhandle = db_connect();\n\n    if ($dbhandle === false) {\n        $fb_error = fbird_errmsg();\n        $s_connected = false;\n        $s_tables_valid = false;\n        $s_wt['table'] = '';\n    }\n\n    if (empty($s_charsets)) {\n        $s_charsets = get_charsets();\n    }\n}\n\n\nlist($family, $version) = server_info($s_login['server']);\ndefine('SERVER_FAMILY', $family);\ndefine('SERVER_VERSION', $version);\n\nif ($s_binpath != BINPATH) {\n\n\n    if (!is_dir(BINPATH)\n        || (!is_file(BINPATH.'isql') && !is_file(BINPATH.'isql-fb') && !is_file(BINPATH.'isql.exe'))\n    ) {\n        $warning = sprintf($WARNINGS['BAD_ISQLPATH'], BINPATH);\n    }\n\n\n    if (!is_dir(TMPPATH) || !is_writeable(TMPPATH)) {\n        $warning .= sprintf($WARNINGS['BAD_TMPPATH'], TMPPATH);\n    }\n\n    $s_binpath = BINPATH;\n}\n\nif (DEBUG_HTML) {\n    ob_start();\n}\n\n'firebirdwebadmin/data.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/script_start.inc.php';\nrequire './inc/foreign_keys.inc.php';\nrequire './inc/DataForm.php';\n\n\n\n\nif ($s_connected && $s_tables_valid == false) {\n    include_once './inc/get_tables.inc.php';\n    if (get_tables($dbhandle)) {\n        $s_tables_valid = true;\n    }\n}\n\nrequire './inc/handle_watchtable.inc.php';\n\n\n\n\n$customize_changed = false;\nif (isset($_POST['dt_column_config_save'])) {\n    $column = get_request_data('dt_column_config_column');\n    $table = get_request_data('dt_column_config_table');\n    $fk_column = get_request_data('dt_column_config_fk_column');\n    if ($fk_column == '') {\n        unset($s_cust['fk_lookups'][$table][$column]);\n        if (empty($s_cust['fk_lookups'][$table])) {\n            unset($s_cust['fk_lookups'][$table]);\n        }\n    } else {\n        $s_cust['fk_lookups'][$table][$column] = $fk_column;\n    }\n    $customize_changed = true;\n}\n\n\n\n\nif (array_filter(array_keys($_POST), function($a) {return preg_match(\"/dt_(enter|edit)_(insert|ready|save|cancel)/\", $a);} )) {\n    if ((isset($_POST['dt_config_fk_lookup'])  &&  $s_cust['enter']['fk_lookup'] == false)  ||\n        (!isset($_POST['dt_config_fk_lookup'])  &&  $s_cust['enter']['fk_lookup'] == true)) {\n\n\n        $s_cust['enter']['fk_lookup'] = isset($_POST['dt_config_fk_lookup']);\n        $customize_changed = true;\n    }\n\n    if (isset($_POST['dt_enter_insert'])  ||  isset($_POST['dt_enter_ready'])) {\n        if ((isset($_POST['dt_config_more'])  &&  $s_cust['enter']['another_row'] == false)  ||\n            (!isset($_POST['dt_config_more'])  &&  $s_cust['enter']['another_row'] == true)) {\n\n\n            $s_cust['enter']['another_row'] = isset($_POST['dt_config_more']);\n            $customize_changed = true;\n        }\n    } else {\n        if ((isset($_POST['dt_config_as_new'])  &&  $s_cust['enter']['as_new'] == false)  ||\n            (!isset($_POST['dt_config_as_new'])  &&  $s_cust['enter']['as_new'] == true)) {\n\n\n            $s_cust['enter']['as_new'] = isset($_POST['dt_config_as_new']);\n            $customize_changed = true;\n        }\n    }\n}\nif ($customize_changed == true) {\n    set_customize_cookie($s_cust);\n}\n\nif (isset($s_edit_where)  && count($s_edit_where) > 0) {\n    include './inc/handle_editdata.inc.php';\n}\n\n\n\n\nif (isset($_POST['dt_enter_select'])) {\n    $s_enter_name = get_request_data('dt_enter_name');\n\n    if (is_array($s_fields[$s_enter_name])) {\n        $s_fields = get_table_defaults_sources($s_enter_name, $s_fields);\n        $s_fields = get_table_computed_sources($s_enter_name, $s_fields);\n\n        $s_enter_values = init_enter_values($s_fields[$s_enter_name]);\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'dt_enter', true)\n&&  isset($_POST['dt_enter_insert'])) {\n\n\n    if (!$s_domains_valid) {\n        include_once './inc/domains.inc.php';\n\n        $s_domains = get_domain_definitions($s_domains);\n        $s_domains_valid = true;\n    }\n\n\n    include_once './inc/triggers.inc.php';\n    if ($s_triggers_valid == false) {\n        $s_triggers = get_triggers($s_triggers);\n        $s_triggers_valid = true;\n    }\n\n    $idx = 0;\n    $bindargs = $cols = $s_enter_values = array();\n    foreach ($s_fields[$s_enter_name] as $field) {\n        if (isset($field['comp'])) {\n            $s_enter_values[] = $field['csource'];\n            ++$idx;\n            continue;\n        }\n\n        if (isset($_FILES['dt_enter_file_'.$idx])  &&\n            !empty($_FILES['dt_enter_file_'.$idx]['name'])) {\n            $value = $_FILES['dt_enter_file_'.$idx];\n            $s_enter_values[] = $value;\n        } else {\n            $value = get_request_data('dt_enter_field_'.$idx);\n            $s_enter_values[] = $value;\n        }\n\n\n        $type = !isset($field['domain']) ? $field['type'] : $s_domains[$field['type']]['type'];\n\n\n        if ($idx == 0  &&  $value === ''  &&\n            in_array($type, array('INTEGER', 'BIGINT', 'SMALLINT'))  &&\n            isset($field['notnull'])  &&  $field['notnull'] == 'Yes'  &&\n            have_active_trigger($s_triggers, $s_enter_name, 'before', 'insert')) {\n            ++$idx;\n            continue;\n        }\n\n        switch ($type) {\n        case 'CHARACTER':\n        case 'VARCHAR':\n        case 'DATE':\n        case 'TIME':\n        case 'TIMESTAMP':\n            $bindargs[] = empty($field['notnull'])  &&  empty($value) ? null : \"$value\";\n            break;\n        case 'BLOB' :\n\n            if (is_array($value)  &&  !empty($value['name'])) {\n                $bfname = $value['tmp_name'];\n                $bfhandle = fopen($bfname, 'r') or die('cannot open file '.$bfname);\n                $bstr = fbird_blob_import($dbhandle, $bfhandle);\n                fclose($bfhandle);\n                $bindargs[] = $bstr;\n            }\n\n            elseif (!empty($value)) {\n                $bhandle = fbird_blob_create($dbhandle) or die('cannot create blob: '.__FILE__.', '.__LINE__);\n                fbird_blob_add($bhandle, $value);\n                $bstr = fbird_blob_close($bhandle);\n                $bindargs[] = $bstr;\n            } else {\n                $bindargs[] = null;\n            }\n            break;\n        default:\n            if ($value === '') {\n                $value = null;\n            }\n\n            $bindargs[] = $value;\n        }\n        $cols[] = $field['name'];\n        ++$idx;\n    }\n\n    if (count($cols) > 0) {\n        $fb_error = insert_row($s_enter_name, $cols, $bindargs);\n\n        if (empty($fb_error)) {\n            $s_watch_buffer = '';\n            $s_enter_values = $s_cust['enter']['another_row'] == false\n                ? array()\n                : init_enter_values($s_fields[$s_enter_name]);\n        }\n    }\n}\n\n\n\n\nif (isset($_POST['dt_enter_ready'])  ||\n    (isset($_POST['dt_enter_insert'])  &&  $s_cust['enter']['another_row'] == false  &&  empty($fb_error))) {\n    $s_enter_name = '';\n    $s_enter_values = array();\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'dt_export', true)) {\n    include './inc/export.inc.php';\n\n    if (empty($s_export)) {\n        $s_export = get_export_defaults();\n    }\n\n\n    if (isset($_POST['dt_export_defaults'])) {\n        $s_export = set_export_defaults($s_export['format'], $s_export);\n    }\n\n    if (isset($_POST['dt_export_doit'])) {\n        $s_export = get_export_form_data($s_export);\n        list($warning, $error) = check_export_form_data($s_export);\n\n        if (empty($error)  &&  empty($warning)) {\n\n\n            if ($s_export['target']['option'] == 'screen') {\n\n\n                $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"export\";';});\n\n                $iframekey_export = md5(uniqid('export'));\n                $s_iframejobs[$iframekey_export] = array('job' => 'export',\n                                                         'data' => $s_export,\n                                                         'timestamp' => time(), );\n            }\n\n\n            else {\n                $filename = export_filename($s_export);\n                send_export_headers(get_export_mimetype($s_export['format']), $filename);\n\n                export_data($s_export);\n\n\n\n                globalize_session_vars();\n                exit();\n            }\n        }\n    }\n\n    $js_stack .= js_data_export();\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'dt_import', true)\n&&  isset($_POST['dt_import_doit'])) {\n\n\n    $s_csv['import_null'] = isset($_POST['dt_import_null']) ? true : false;\n\n    if ($_POST['dt_import_table'] == '') {\n        $warning .= $WARNINGS['SELECT_TABLE_FIRST'];\n    } elseif (isset($_FILES['dt_import_file']['name'])\n        &&  $_FILES['dt_import_file']['name'] == '') {\n        $warning .= $WARNINGS['SELECT_FILE_FIRST'];\n    } else {\n        $ifile = $_FILES['dt_import_file']['tmp_name'];\n        $itable = $_POST['dt_import_table'];\n        $ihandle = fopen($ifile, 'r') or die('Error opening '.$ifile);\n\n\n\n        foreach ($s_fields[$itable] as $field) {\n            if (($field['type'] == 'BLOB'  &&  $field['stype'] != 1)  ||\n                (isset($field['comp'])  &&  $field['comp'] == 'Yes')) {\n\n                continue;\n            }\n            $col_names[] = $field['name'];\n            $columns[] = $field;\n        }\n\n        $sql = 'INSERT INTO '.$itable.'('.implode(', ', $col_names).')'\n                              .' VALUES ('.implode(', ', array_fill(0, count($col_names), '?')).')';\n        $query = fbird_prepare($sql) or fb_error(__FILE__, __LINE__, $sql);\n\n\n        $var_string = '';\n        foreach (array_keys($col_names) as $idx) {\n            $var_string .= '$data['.$idx.'],';\n        }\n        $var_string = substr($var_string, 0, -1);\n\n\n        $blob_fields = array();\n        $null_fields = array();\n        $idx = 0;\n        foreach ($s_fields[$itable] as $field) {\n            if ($field['type'] == 'BLOB') {\n                $blob_fields[] = $idx;\n            }\n\n            if ($s_csv['import_null'] == true &&\n                (!isset($field['notnull'])  || empty($field['notnull']))) {\n                $null_fields[] = $idx;\n            }\n            ++$idx;\n        }\n\n\n\n        $csv_cnt = 0;\n        while ($data = fgetcsv($ihandle, MAX_CSV_LINE)) {\n\n\n            if (!empty($null_fields)) {\n                foreach ($null_fields as $idx) {\n                    if ($data[$idx] == '') {\n                        $data[$idx] = null;\n                    }\n                }\n            }\n\n\n            if (!empty($blob_fields)) {\n                foreach ($blob_fields as $idx) {\n                    if (empty($data[$idx])) {\n                        $data[$idx] = null;\n                    } else {\n                        $blob_handle = fbird_blob_create($dbhandle) or fb_error(__FILE__, __LINE__);\n                        fbird_blob_add($blob_handle, $data[$idx]);\n                        $data[$idx] = fbird_blob_close($blob_handle) or fb_error(__FILE__, __LINE__);\n                    }\n                }\n            }\n\n            call_user_func_array('fbird_execute', array_merge(array($query), $data))\n                or $fb_error = fb_error(__FILE__, __LINE__, $query);\n\n\n            if (!empty($fb_error)) {\n                break;\n            }\n            ++$csv_cnt;\n        }\n        fclose($ihandle);\n        $sql = '';\n\n\n        $s_watch_buffer = '';\n\n        $message .= sprintf($MESSAGES['CSV_IMPORT_COUNT'], $csv_cnt, $itable);\n    }\n}\n\n$js_stack .= js_request_column_config_form();\n\n\n\n\n$s_page = 'Data';\n$panels = $s_data_panels;\n\nrequire './inc/script_end.inc.php';\n\nfunction init_enter_values($fields)\n{\n    $values = array();\n    foreach ($fields as $field) {\n        if (isset($field['default'])) {\n            $values[] = $field['dsource'];\n        } elseif (isset($field['comp'])) {\n            $values[] = $field['csource'];\n        } else {\n            $values[] = '';\n        }\n    }\n\n    return $values;\n}\n",
        "gt": [
            "'firebirdwebadmin/inc/firebird.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/data.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'",
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'\n:<?php\n\n\n\nnamespace Composer\\Autoload;\n\n\nclass ClassLoader\n{\n\n    private $prefixLengthsPsr4 = array();\n    private $prefixDirsPsr4 = array();\n    private $fallbackDirsPsr4 = array();\n\n\n    private $prefixesPsr0 = array();\n    private $fallbackDirsPsr0 = array();\n\n    private $useIncludePath = false;\n    private $classMap = array();\n\n    public function getPrefixes()\n    {\n        return call_user_func_array('array_merge', $this->prefixesPsr0);\n    }\n\n    public function getPrefixesPsr4()\n    {\n        return $this->prefixDirsPsr4;\n    }\n\n    public function getFallbackDirs()\n    {\n        return $this->fallbackDirsPsr0;\n    }\n\n    public function getFallbackDirsPsr4()\n    {\n        return $this->fallbackDirsPsr4;\n    }\n\n    public function getClassMap()\n    {\n        return $this->classMap;\n    }\n\n\n    public function addClassMap(array $classMap)\n    {\n        if ($this->classMap) {\n            $this->classMap = array_merge($this->classMap, $classMap);\n        } else {\n            $this->classMap = $classMap;\n        }\n    }\n\n\n    public function add($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n            if ($prepend) {\n                $this->fallbackDirsPsr0 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr0\n                );\n            } else {\n                $this->fallbackDirsPsr0 = array_merge(\n                    $this->fallbackDirsPsr0,\n                    (array) $paths\n                );\n            }\n\n            return;\n        }\n\n        $first = $prefix[0];\n        if (!isset($this->prefixesPsr0[$first][$prefix])) {\n            $this->prefixesPsr0[$first][$prefix] = (array) $paths;\n\n            return;\n        }\n        if ($prepend) {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixesPsr0[$first][$prefix]\n            );\n        } else {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                $this->prefixesPsr0[$first][$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function addPsr4($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n\n            if ($prepend) {\n                $this->fallbackDirsPsr4 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr4\n                );\n            } else {\n                $this->fallbackDirsPsr4 = array_merge(\n                    $this->fallbackDirsPsr4,\n                    (array) $paths\n                );\n            }\n        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {\n\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        } elseif ($prepend) {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixDirsPsr4[$prefix]\n            );\n        } else {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                $this->prefixDirsPsr4[$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function set($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr0 = (array) $paths;\n        } else {\n            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setPsr4($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr4 = (array) $paths;\n        } else {\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setUseIncludePath($useIncludePath)\n    {\n        $this->useIncludePath = $useIncludePath;\n    }\n\n\n    public function getUseIncludePath()\n    {\n        return $this->useIncludePath;\n    }\n\n\n    public function register($prepend = false)\n    {\n        spl_autoload_register(array($this, 'loadClass'), true, $prepend);\n    }\n\n\n    public function unregister()\n    {\n        spl_autoload_unregister(array($this, 'loadClass'));\n    }\n\n\n    public function loadClass($class)\n    {\n        if ($file = $this->findFile($class)) {\n            includeFile($file);\n\n            return true;\n        }\n    }\n\n\n    public function findFile($class)\n    {\n\n        if ('\\\\' == $class[0]) {\n            $class = substr($class, 1);\n        }\n\n\n        if (isset($this->classMap[$class])) {\n            return $this->classMap[$class];\n        }\n\n        $file = $this->findFileWithExtension($class, '.php');\n\n\n        if ($file === null && defined('HHVM_VERSION')) {\n            $file = $this->findFileWithExtension($class, '.hh');\n        }\n\n        if ($file === null) {\n\n            return $this->classMap[$class] = false;\n        }\n\n        return $file;\n    }\n\n    private function findFileWithExtension($class, $ext)\n    {\n\n        $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . $ext;\n\n        $first = $class[0];\n        if (isset($this->prefixLengthsPsr4[$first])) {\n            foreach ($this->prefixLengthsPsr4[$first] as $prefix => $length) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($this->prefixDirsPsr4[$prefix] as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $length))) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr4 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {\n                return $file;\n            }\n        }\n\n\n        if (false !== $pos = strrpos($class, '\\\\')) {\n\n            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)\n                . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);\n        } else {\n\n            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;\n        }\n\n        if (isset($this->prefixesPsr0[$first])) {\n            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($dirs as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr0 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                return $file;\n            }\n        }\n\n\n        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {\n            return $file;\n        }\n    }\n}\n\n\nfunction includeFile($file)\n{\n    include $file;\n}\n\n'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'pomf/static/php/includes/Core.namespace.php'",
            "'pomf/static/php/upload.php'",
            "'pomf/static/php/includes/Upload.class.php'"
        ],
        "content": "'pomf/static/php/includes/Core.namespace.php'\n:<?php\n\n\n\n\nnamespace Core {\n\n    require_once 'Upload.class.php';\n\n    use Exception;\n    use PDO;\n    use Upload as Upload;\n\n    class Settings\n    {\n\n        public static mixed $DB;\n\n        public static string $DB_MODE;\n        public static string $DB_PATH;\n        public static string $DB_USER;\n        public static string $DB_PASS;\n\n        public static bool $LOG_IP;\n        public static bool $ANTI_DUPE;\n        public static bool $BLACKLIST_DB;\n        public static bool $FILTER_MODE;\n\n        public static string $FILES_ROOT;\n        public static int $FILES_RETRIES;\n\n        public static bool $SSL;\n        public static string $URL;\n\n        public static int $NAME_LENGTH;\n        public static string $ID_CHARSET;\n        public static array $BLOCKED_EXTENSIONS;\n        public static array $BLOCKED_MIME;\n\n\n\n        public static function loadConfig()\n        {\n            if (!file_exists('/var/www/pomf/dist.json')) {\n                throw new Exception('Cant read settings file.', 500);\n            }\n            try {\n                $settings_array = json_decode(\n                    file_get_contents('/var/www/pomf/dist.json'),\n                    true\n                );\n                self::$DB_MODE = $settings_array['DB_MODE'];\n                self::$DB_PATH = $settings_array['DB_PATH'];\n                self::$DB_USER = $settings_array['DB_USER'];\n                self::$DB_PASS = $settings_array['DB_PASS'];\n                self::$LOG_IP = $settings_array['LOG_IP'];\n                self::$ANTI_DUPE = $settings_array['ANTI_DUPE'];\n                self::$BLACKLIST_DB = $settings_array['BLACKLIST_DB'];\n                self::$FILTER_MODE = $settings_array['FILTER_MODE'];\n                self::$FILES_ROOT = $settings_array['FILES_ROOT'];\n                self::$FILES_RETRIES = $settings_array['FILES_RETRIES'];\n                self::$SSL = $settings_array['SSL'];\n                self::$URL = $settings_array['URL'];\n                self::$NAME_LENGTH = $settings_array['NAME_LENGTH'];\n                self::$ID_CHARSET = $settings_array['ID_CHARSET'];\n                self::$BLOCKED_EXTENSIONS = $settings_array['BLOCKED_EXTENSIONS'];\n                self::$BLOCKED_MIME = $settings_array['BLOCKED_MIME'];\n            } catch (Exception) {\n                throw new Exception('Cant populate settings.', 500);\n            }\n            Database::assemblePDO();\n        }\n    }\n\n    class cuteGrills\n    {\n        public static array $GRILLS;\n\n        public static function showGrills()\n        {\n            self::loadGrills();\n            if (!headers_sent()) {\n                header(\n                    'Location: /img/grills/' .\n                    self::$GRILLS[array_rand(self::$GRILLS)],\n                    true,\n                    303\n                );\n            }\n        }\n\n        public static function loadGrills()\n        {\n            self::$GRILLS = array_slice(scandir('img/grills/'), 2);\n        }\n    }\n\n    class Response\n    {\n        private mixed $type;\n\n        public function __construct($response_type = null)\n        {\n            switch ($response_type) {\n                case 'csv':\n                    header('Content-Type: text/csv; charset=UTF-8');\n                    $this->type = $response_type;\n                    break;\n                case 'html':\n                    header('Content-Type: text/html; charset=UTF-8');\n                    $this->type = $response_type;\n                    break;\n                case 'json':\n                    header('Content-Type: application/json; charset=UTF-8');\n                    $this->type = $response_type;\n                    break;\n                case 'gyazo':\n                    header('Content-Type: text/plain; charset=UTF-8');\n                    $this->type = 'text';\n                    break;\n                case 'text':\n                    header('Content-Type: text/plain; charset=UTF-8');\n                    $this->type = $response_type;\n                    break;\n                default:\n                    header('Content-Type: application/json; charset=UTF-8');\n                    $this->type = 'json';\n                    $this->error(400, 'Invalid response type. Valid options are: csv, html, json, text.');\n                    break;\n            }\n        }\n\n        public function error($code, $desc)\n        {\n            $response = null;\n\n            switch ($this->type) {\n                case 'csv':\n                    $response = $this->csvError($desc);\n                    break;\n                case 'html':\n                    $response = $this->htmlError($code, $desc);\n                    break;\n                case 'json':\n                    $response = $this->jsonError($code, $desc);\n                    break;\n                case 'text':\n                    $response = $this->textError($code, $desc);\n                    break;\n            }\n            http_response_code($code);\n            echo $response;\n        }\n\n        private static function csvError($description): string\n        {\n            return '\"error\"' . \"\\r\\n\" . \"\\\"$description\\\"\" . \"\\r\\n\";\n        }\n\n        private static function htmlError($code, $description): string\n        {\n            return '<p>ERROR: (' . $code . ') ' . $description . '</p>';\n        }\n\n        private static function jsonError($code, $description): bool|string\n        {\n            return json_encode([\n                'success' => false,\n                'errorcode' => $code,\n                'description' => $description,\n            ], JSON_PRETTY_PRINT);\n        }\n\n\n        private static function textError($code, $description): string\n        {\n            return 'ERROR: (' . $code . ') ' . $description;\n        }\n\n        public function send($files)\n        {\n            $response = null;\n\n            switch ($this->type) {\n                case 'csv':\n                    $response = $this->csvSuccess($files);\n                    break;\n                case 'html':\n                    $response = $this->htmlSuccess($files);\n                    break;\n                case 'json':\n                    $response = $this->jsonSuccess($files);\n                    break;\n                case 'text':\n                    $response = $this->textSuccess($files);\n                    break;\n            }\n\n            http_response_code(200);\n            echo $response;\n        }\n\n        private static function csvSuccess($files): string\n        {\n            $result = '\"name\",\"url\",\"hash\",\"size\"' . \"\\r\\n\";\n            foreach ($files as $file) {\n                $result .= '\"' . $file['name'] . '\"' . ',' .\n                    '\"' . $file['url'] . '\"' . ',' .\n                    '\"' . $file['hash'] . '\"' . ',' .\n                    '\"' . $file['size'] . '\"' . \"\\r\\n\";\n            }\n\n            return $result;\n        }\n\n        private static function htmlSuccess($files): string\n        {\n            $result = '';\n\n            foreach ($files as $file) {\n                $result .= '<a href=\"' . $file['url'] . '\">' . $file['url'] . '</a><br>';\n            }\n\n            return $result;\n        }\n\n        private static function jsonSuccess($files): bool|string\n        {\n            return json_encode([\n                'success' => true,\n                'files' => $files,\n            ], JSON_PRETTY_PRINT);\n        }\n\n        private static function textSuccess($files): string\n        {\n            $result = '';\n\n            foreach ($files as $file) {\n                $result .= $file['url'] . \"\\n\";\n            }\n\n            return $result;\n        }\n    }\n\n    class Database\n    {\n\n        public static function assemblePDO()\n        {\n            try {\n                Settings::$DB = new PDO(\n                    Settings::$DB_MODE . ':' . Settings::$DB_PATH, Settings::$DB_USER,\n                    Settings::$DB_PASS\n                );\n            } catch (Exception) {\n                throw new Exception('Cant connect to DB.', 500);\n            }\n        }\n\n\n        public static function dbCheckNameExists()\n        {\n            try {\n                $q = Settings::$DB->prepare('SELECT COUNT(filename) FROM files WHERE filename = (:name)');\n                $q->bindValue(':name', Upload::$NEW_NAME_FULL);\n                $q->execute();\n                return $q->fetchColumn();\n            } catch (Exception) {\n                throw new Exception('Cant check if name exists in DB.', 500);\n            }\n        }\n\n\n        public static function checkFileBlacklist()\n        {\n            try {\n                $q = Settings::$DB->prepare('SELECT hash, COUNT(*) AS count FROM blacklist WHERE hash = (:hash)');\n                $q->bindValue(':hash', Upload::$SHA1, PDO::PARAM_STR);\n                $q->execute();\n                $result = $q->fetch();\n                if ($result['count'] > 0) {\n                    throw new Exception('File blacklisted!', 415);\n                }\n            } catch (Exception) {\n                throw new Exception('Cant check blacklist DB.', 500);\n            }\n        }\n\n\n        public static function antiDupe()\n        {\n            try {\n                $q = Settings::$DB->prepare(\n                    'SELECT filename, COUNT(*) AS count FROM files WHERE hash = (:hash) AND size = (:size)'\n                );\n                $q->bindValue(':hash', Upload::$SHA1, PDO::PARAM_STR);\n                $q->bindValue(':size', Upload::$FILE_SIZE, PDO::PARAM_INT);\n                $q->execute();\n                $result = $q->fetch();\n                if ($result['count'] > 0) {\n                    Upload::$NEW_NAME_FULL = $result['filename'];\n                } else {\n                    Upload::generateName();\n                }\n            } catch (Exception) {\n                throw new Exception('Cant check for dupes in DB.', 500);\n            }\n        }\n\n\n        public static function newIntoDB()\n        {\n            try {\n                $q = Settings::$DB->prepare(\n                    'INSERT INTO files (hash, originalname, filename, size, date, ip)' .\n                    'VALUES (:hash, :orig, :name, :size, :date, :ip)'\n                );\n                $q->bindValue(':hash', Upload::$SHA1, PDO::PARAM_STR);\n                $q->bindValue(':orig', Upload::$FILE_NAME, PDO::PARAM_STR);\n                $q->bindValue(':name', Upload::$NEW_NAME_FULL, PDO::PARAM_STR);\n                $q->bindValue(':size', Upload::$FILE_SIZE, PDO::PARAM_INT);\n                $q->bindValue(':date', time(), PDO::PARAM_STR);\n                $q->bindValue(':ip', Upload::$IP, PDO::PARAM_STR);\n                $q->execute();\n            } catch (Exception) {\n                throw new Exception('Cant insert into DB.', 500);\n            }\n        }\n    }\n}\n\n\n\n'pomf/static/php/upload.php'\n:<?php\n\n\nrequire_once 'includes/Upload.class.php';\n\n$type = $_GET['output'] ?? 'json';\n$response = (new Core\\Response($type));\n\nif (isset($_FILES['files'])) {\n    $uploads = Upload::reFiles($_FILES['files']);\n\n    try {\n        foreach ($uploads as $upload) {\n            $res[] = Upload::uploadFile();\n        }\n        if (isset($res)) {\n            $response->send($res);\n        }\n    } catch (Exception $e) {\n        $response->error($e->getCode(), $e->getMessage());\n    }\n} else {\n    $response->error(400, 'No input file(s)');\n}\n'pomf/static/php/includes/Upload.class.php'\n:<?php\n\n\n\nrequire_once 'Core.namespace.php';\n\nuse Core\\Database as Database;\nuse Core\\Settings as Settings;\n\nclass Upload\n{\n\n    public static string $FILE_NAME;\n    public static mixed $FILE_EXTENSION;\n    public static string $FILE_MIME;\n    public static string $SHA1;\n    public static string $NEW_NAME;\n    public static string $NEW_NAME_FULL;\n    public static mixed $IP;\n\n    public static string $FILE_SIZE;\n    public static string $TEMP_FILE;\n\n\n    public static function reFiles($files): array\n    {\n        $result = [];\n        $files = self::diverseArray($files);\n\n        foreach ($files as $file) {\n            self::$FILE_NAME = strip_tags($file['name']);\n            self::$FILE_SIZE = $file['size'];\n            self::$TEMP_FILE = $file['tmp_name'];\n            self::$SHA1 = sha1_file(self::$TEMP_FILE);\n            $result[] = [self::$FILE_NAME, self::$FILE_SIZE, self::$TEMP_FILE, self::$SHA1];\n        }\n        return $result;\n    }\n\n    public static function diverseArray($files): array\n    {\n        $result = [];\n\n        foreach ($files as $key1 => $value1) {\n            foreach ($value1 as $key2 => $value2) {\n                $result[$key2][$key1] = $value2;\n            }\n        }\n        return $result;\n    }\n\n\n    public static function uploadFile(): array\n    {\n        Settings::loadConfig();\n        self::fileInfo();\n\n        if (Settings::$BLACKLIST_DB) {\n            Database::checkFileBlacklist();\n        }\n\n        if (Settings::$FILTER_MODE) {\n            self::checkMimeBlacklist();\n            if(!is_null(self::$FILE_EXTENSION)){\n                self::checkExtensionBlacklist();\n            }\n        }\n\n        if (Settings::$ANTI_DUPE) {\n            Database::antiDupe();\n        }\n\n        if (!Settings::$ANTI_DUPE) {\n            self::generateName();\n        }\n\n        if (!is_dir(Settings::$FILES_ROOT)) {\n            throw new Exception('File storage path not accessible.', 500);\n        }\n\n        if (!move_uploaded_file(self::$TEMP_FILE, Settings::$FILES_ROOT . self::$NEW_NAME_FULL)) {\n            throw new Exception('Failed to move file to destination', 500);\n        }\n\n        if (!chmod(Settings::$FILES_ROOT . self::$NEW_NAME_FULL, 0644)) {\n            throw new Exception('Failed to change file permissions', 500);\n        }\n\n        Database::newIntoDB();\n\n        if (Settings::$SSL) {\n            $preURL = 'https:\n        } else {\n            $preURL = 'http:\n        }\n\n        return [\n            'hash' => self::$SHA1,\n            'name' => self::$FILE_NAME,\n            'url' => $preURL . Settings::$URL . '/' . rawurlencode(self::$NEW_NAME_FULL),\n            'size' => self::$FILE_SIZE\n        ];\n    }\n\n    public static function getIP()\n    {\n        if (!empty($_SERVER['HTTP_CLIENT_IP'])) {\n            self::$IP = $_SERVER['HTTP_CLIENT_IP'];\n        }\n        if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n            self::$IP = $_SERVER['HTTP_X_FORWARDED_FOR'];\n        }\n        if (!isset(self::$IP)) {\n            self::$IP = $_SERVER['REMOTE_ADDR'];\n        }\n    }\n\n    public static function fileInfo()\n    {\n        if (isset($_FILES['files'])) {\n            $finfo = finfo_open(FILEINFO_MIME_TYPE);\n            self::$FILE_MIME = finfo_file($finfo, self::$TEMP_FILE);\n            finfo_close($finfo);\n\n            $extension = explode('.', self::$FILE_NAME);\n            if(substr_count(self::$FILE_NAME, '.') > 0) {\n                self::$FILE_EXTENSION = $extension[count($extension)-1];\n            } else {\n                self::$FILE_EXTENSION = null;\n            }\n\n            if (Settings::$LOG_IP) {\n                self::getIP();\n            } else {\n                self::$IP = null;\n            }\n        }\n    }\n\n\n    public static function checkMimeBlacklist()\n    {\n        if (in_array(self::$FILE_MIME, Settings::$BLOCKED_MIME)) {\n            throw new Exception('Filetype not allowed.', 415);\n        }\n    }\n\n\n    public static function checkExtensionBlacklist()\n    {\n        if (in_array(self::$FILE_EXTENSION, Settings::$BLOCKED_EXTENSIONS)) {\n            throw new Exception('Filetype not allowed.', 415);\n        }\n    }\n\n\n    public static function generateName()\n    {\n        do {\n            if (Settings::$FILES_RETRIES === 0) {\n                throw new Exception('Gave up trying to find an unused name!', 500);\n            }\n\n            self::$NEW_NAME = '';\n            for ($i = 0; $i < Settings::$NAME_LENGTH; ++$i) {\n                self::$NEW_NAME .= Settings::$ID_CHARSET[mt_rand(0, strlen(Settings::$ID_CHARSET))];\n            }\n\n            self::$NEW_NAME_FULL = self::$NEW_NAME;\n\n            if (!is_null(self::$FILE_EXTENSION)) {\n                self::$NEW_NAME_FULL .= '.' . self::$FILE_EXTENSION;\n            }\n\n        } while (Database::dbCheckNameExists() > 0);\n    }\n}",
        "gt": [
            "'pomf/static/php/includes/Core.namespace.php'",
            "'pomf/static/php/includes/Upload.class.php'",
            "'pomf/static/php/upload.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/database.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/inc/javascript.inc.php'"
        ],
        "content": "'firebirdwebadmin/database.php'\n:<?php\n\n\n\n\n\n\n\nrequire './inc/script_start.inc.php';\n\n\n\n\nif (isset($_POST['db_login_doit'])) {\n\n    if (!empty($dbhandle)) {\n        fbird_close($dbhandle);\n    }\n    $s_login['database'] = $_POST['db_login_database'];\n    $s_login['user'] = strtoupper($_POST['db_login_user']);\n    $s_login['host'] = $_POST['db_login_host'];\n\n\n\n    $pw = $_POST['db_login_password'];\n    if (strspn($pw, '*') != strlen($pw)) {\n        $s_login['password'] = $pw;\n    }\n\n    $s_login['role'] = !empty($_POST['db_login_role'])  ? $_POST['db_login_role']  : '';\n    $s_login['cache'] = !empty($_POST['db_login_cache']) ? $_POST['db_login_cache'] : '';\n    if ($s_login['cache'] != null  &&  $s_login['cache'] < 10) {\n        $s_login['cache'] = 10;\n    }\n    $s_login['charset'] = !empty($_POST['db_login_charset']) ? $_POST['db_login_charset'] : '';\n    $s_login['dialect'] = !empty($_POST['db_login_dialect']) ? $_POST['db_login_dialect'] : '';\n    $s_login['server'] = !empty($_POST['db_login_server'])  ? $_POST['db_login_server']  : '';\n\n    if ($s_login['database'] == '') {\n        $error = $ERRORS['NO_DB_SELECTED'];\n    } elseif (!is_allowed_db($s_login['database'])) {\n        $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_login['database']);\n    }\n\n    if (empty($error)) {\n        if ($dbhandle = db_connect()) {\n\n\n            $s_connected = true;\n\n            remove_edit_panels();\n            $s_charsets = get_charsets();\n            $message = $info_strings['SuccessLogin'];\n        } else {\n\n            $fb_error = fbird_errmsg();\n            $s_login['password'] = '';\n            $s_connected = false;\n        }\n    }\n    cleanup_session();\n}\n\n\n\n\nif (isset($_POST['db_logout_doit'])) {\n    if (!empty($dbhandle)) {\n        fbird_close($dbhandle);\n    }\n    remove_edit_panels();\n    cleanup_session();\n    $s_login['password'] = '';\n\n    $s_connected = false;\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'db_create')\n&&  isset($_POST['db_create_doit'])\n&&  isset($_POST['db_create_database'])\n&&  !empty($_POST['db_create_database'])) {\n    $s_create_db = trim($_POST['db_create_database']);\n    $s_create_host = trim($_POST['db_create_host']);\n    $s_create_user = trim($_POST['db_create_user']);\n\n\n\n    $pw = $_POST['db_create_password'];\n    if (strspn($pw, '*') != strlen($pw)) {\n        $s_create_pw = $pw;\n    }\n    $s_create_pagesize = $_POST['db_create_pagesize'];\n    $s_create_charset = $_POST['db_create_charset'];\n\n    if (!is_allowed_db($s_create_db)) {\n        $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_create_db);\n    }\n\n\n    if (!empty($dbhandle)  &&  empty($error)) {\n        fbird_close($dbhandle);\n    }\n\n\n\n    if (empty($error)) {\n        $db_str = (!empty($s_create_host)) ? $s_create_host.':'.$s_create_db : $s_create_db;\n\n        $sql = 'CREATE DATABASE \\''.$db_str.'\\'';\n        if (strlen($s_create_user) > 0) {\n            $sql .= ' USER \\''.$s_create_user.'\\'';\n            if (strlen($s_create_pw) > 0) {\n                $sql .= ' PASSWORD \\''.$s_create_pw.'\\'';\n            }\n        }\n        if ($s_create_pagesize !=   4096) {\n\n            $sql .= ' PAGE_SIZE = '.$s_create_pagesize;\n        }\n\n        if ($s_create_charset != 'NONE') {\n\n            $sql .= ' DEFAULT CHARACTER SET '.$s_create_charset;\n        }\n\n        $sql .= ';';\n        list($binary_output, $binary_error) = isql_execute($sql);\n\n        if (empty($binary_error)  &&  !is_file($s_create_db)) {\n            $error = sprintf($ERRORS['CREATE_DB_FAILED'], $s_create_db);\n        } else {\n\n            $s_login['charset'] = $s_create_charset;\n            $s_login['database'] = $s_create_db;\n            $s_login['host'] = $s_create_host;\n            $s_login['user'] = strtoupper($s_create_user);\n            $s_login['password'] = $s_create_pw;\n            if ($dbhandle = db_connect()) {\n                $s_connected = true;\n                remove_edit_panels();\n                cleanup_session();\n                $message = sprintf($MESSAGES['CREATE_DB_SUCCESS'], $s_create_db);\n            } else {\n                $fb_error = fbird_errmsg();\n            }\n        }\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'db_delete')\n&&  isset($_POST['db_delete_doit'])\n&&  isset($_POST['db_delete_database'])\n&&  !empty($_POST['db_delete_database'])) {\n    $pw = get_request_data('db_delete_password');\n    if (strspn($pw, '*') == strlen($pw)) {\n        $pw = $s_delete_db['password'];\n    }\n    $s_delete_db = array('database' => get_request_data('db_delete_database'),\n                         'user' => get_request_data('db_delete_user'),\n                         'host' => get_request_data('db_delete_host'),\n                         'password' => $pw,\n                         );\n\n\n    if ($s_login['database'] == $s_delete_db) {\n        $message = sprintf($MESSAGES['DELETE_CON_DB'], $s_delete_db);\n        $s_login['database'] = '';\n        $s_connected = false;\n        remove_edit_panels();\n        cleanup_session();\n    }\n\n    if (!is_allowed_db($s_delete_db['database'])) {\n        $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_delete_db['database']);\n    } elseif ($s_cust['askdel'] == true) {\n        $s_confirmations['database'] =\n            array('msg' => sprintf($MESSAGES['CONFIRM_DB_DELETE'], $s_delete_db['database']));\n    }\n}\n\n\nif (isset($_POST['confirm_yes'])  ||\n    (isset($_POST['db_delete_doit'])  &&  $s_cust['askdel'] == false  &&  empty($error))) {\n    $fb_error = drop_database($s_delete_db, $s_login);\n    unset($s_confirmations['database']);\n\n    if (empty($fb_error)) {\n        if ($s_login['database'] == $s_delete_db['database']) {\n            $s_login['database'] = '';\n            $s_connected = false;\n            remove_edit_panels();\n            cleanup_session();\n        }\n\n        $s_delete_db['database'] = '';\n    }\n}\n\n\nif (isset($_POST['confirm_no'])) {\n    unset($s_confirmations['database']);\n    $s_delete_db['database'] = '';\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'db_meta', true)) {\n\n\n    $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"metadata\";';} );\n\n    $iframekey_meta = md5(uniqid('meta'));\n    $s_iframejobs[$iframekey_meta] = array('job' => 'metadata',\n                                           'timestamp' => time(), );\n\n\n\n\n    if (isset($_POST['db_meta_save'])) {\n        list($metadata, $binary_error) = isql_get_metadata($s_login['user'], $s_login['password'], $s_login['database'], $s_login['host']);\n\n        if (empty($binary_error)  &&  count($metadata) > 0) {\n            send_export_headers('application/octet-stream', 'meta.sql');\n            print(implode(\"\\n\", $metadata));\n            exit();\n        }\n    }\n}\n\n\n\n\nif (isset($_POST['db_systable_select'])) {\n    if ($s_systable['table'] != $_POST['db_systable']) {\n        $s_systable['order'] = '';\n        $s_systable['dir'] = 'ASC';\n    }\n\n    $s_systable['table'] = $_POST['db_systable'];\n    $s_systable['ffield'] = $_POST['db_sysfield'];\n    $s_systable['fvalue'] = $_POST['db_sysvalue'];\n\n    $s_systable['sysdata'] = (isset($_POST['db_sysdata']) ? true : false);\n}\n\nif (isset($_GET['order'])) {\n    $s_systable['dir'] = ($_GET['order'] == $s_systable['order']  &&  $s_systable['dir'] == 'ASC')\n        ? 'DESC'\n        : 'ASC';\n    $s_systable['order'] = $_GET['order'];\n}\n\n\nif (have_panel_permissions($s_login['user'], 'db_systable', true)) {\n    $js_stack .= js_request_filter_fields();\n\n    if (false  &&  strpos($s_systable['table'], 'MON$') === 0) {\n\n\n        $have_refresh = true;\n\n        $js_stack .= js_jsrs_refresh_systable();\n    } else {\n        $have_refresh = false;\n    }\n\n    if ($s_connected   &&  !empty($s_systable['table'])) {\n        include './inc/system_table.inc.php';\n\n        $systable = get_systable($s_systable);\n    }\n}\n\n\n\n\n$dbfiles = array();\nif (isset($ALLOWED_FILES)  && count($ALLOWED_FILES) > 0) {\n    foreach ($ALLOWED_FILES as $file) {\n        if ((strpos($file, '/') === false  &&  strpos($file, '\\\\') === false)  ||\n            is_file($file)) {\n            $dbfiles[] = $file;\n        }\n    }\n} elseif (isset($ALLOWED_DIRS)  &&  count($ALLOWED_DIRS) > 0) {\n    foreach ($ALLOWED_DIRS as $dir) {\n        if (!@is_readable($dir)) {\n            $warning .= sprintf($WARNINGS['CAN_NOT_ACCESS_DIR'], $dir);\n        } else {\n            $dirhandle = opendir($dir);\n            while ($filename = readdir($dirhandle)) {\n                    $dbfiles[] = $dir.$filename;\n            }\n            closedir($dirhandle);\n        }\n    }\n}\nsort($dbfiles);\n\n\n\n\n$s_page = 'Database';\n$panels = $s_database_panels;\n\nrequire './inc/script_end.inc.php';\n\n\n\n\n\nfunction drop_database($db, $login)\n{\n    $success = '';\n\n\n\n    if ($db['database'] == $login['database']  &&\n        $db['host']  == $login['host']) {\n        $dbh = $GLOBALS['dbhandle'];\n    } else {\n        $db_path = ($db['host'] == '') ? $db['database'] : $db['host'].':'.$db['database'];\n        if (($dbh = fbird_connect($db_path, $db['user'], $db['password'])) == false) {\n            $success = fbird_errmsg();\n        }\n    }\n\n\n    if (is_resource($dbh)  &&\n        fbird_drop_db($dbh) == false) {\n        $success = fbird_errmsg();\n        fbird_close($dbh);\n    }\n\n    return $success;\n}\n\n'firebirdwebadmin/inc/script_start.inc.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/configuration.inc.php';\n\nif (DEBUG) {\n    $start_time = @microtime();\n}\n\nrequire './inc/functions.inc.php';\n\nsession_start();\nset_error_handler('error_handler');\n\nrequire get_language_file('./lang/');\nrequire './inc/session.inc.php';\nrequire './inc/firebird.inc.php';\nrequire './inc/panel_elements.inc.php';\nrequire './inc/javascript.inc.php';\n\nif (DEBUG || DEBUG_HTML) {\n    include './inc/debug_funcs.inc.php';\n}\n\nif (!extension_loaded('interbase')) {\n    die($ERRORS['NO_IBASE_MODULE']);\n}\n\nif (!isset($_SESSION['s_init'])\n    || ($_SESSION['s_cookies'] === 'untested')\n) {\n    initialize_session();\n    fallback_session();\n} else {\n    localize_session_vars();\n}\n\nif (!isset($no_session_referer) || $no_session_referer !== true) {\n\n    $s_referer = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n}\n\nsend_http_headers();\n\n\n$message = '';\n$warning = '';\n$error = '';\n$fb_error = '';\n$php_error = '';\n$debug = array();\n$externcmd = '';\n\n\n\n$js_stack = '';\n\n\n\n$sql = '';\n\n\n\nif ($s_connected == true && !isset($_GET['unconnected'])) {\n    $dbhandle = db_connect();\n\n    if ($dbhandle === false) {\n        $fb_error = fbird_errmsg();\n        $s_connected = false;\n        $s_tables_valid = false;\n        $s_wt['table'] = '';\n    }\n\n    if (empty($s_charsets)) {\n        $s_charsets = get_charsets();\n    }\n}\n\n\nlist($family, $version) = server_info($s_login['server']);\ndefine('SERVER_FAMILY', $family);\ndefine('SERVER_VERSION', $version);\n\nif ($s_binpath != BINPATH) {\n\n\n    if (!is_dir(BINPATH)\n        || (!is_file(BINPATH.'isql') && !is_file(BINPATH.'isql-fb') && !is_file(BINPATH.'isql.exe'))\n    ) {\n        $warning = sprintf($WARNINGS['BAD_ISQLPATH'], BINPATH);\n    }\n\n\n    if (!is_dir(TMPPATH) || !is_writeable(TMPPATH)) {\n        $warning .= sprintf($WARNINGS['BAD_TMPPATH'], TMPPATH);\n    }\n\n    $s_binpath = BINPATH;\n}\n\nif (DEBUG_HTML) {\n    ob_start();\n}\n\n'firebirdwebadmin/inc/javascript.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction js_checkColConstraint()\n{\n    static $done = false;\n\n    if ($done == true) {\n        return '';\n    }\n\n    echo <<<EOT\n<script language=\"JavaScript\" type=\"text/javascript\">\n<!--\nfunction checkColConstraint(form, opt, index) {\n\n    with (form) {\n\n        if ((eval(\"cd_def_unique\" + index).checked == true)\n        ||  (eval(\"cd_def_primary\" + index).checked == true)) {\n            eval(\"cd_def_notnull\" + index).checked = true;\n        }\n\n        if ((\"cd_def_unique\" + index) == opt) {\n            if  ((eval(\"cd_def_primary\" + index).checked == false)\n            &&   (eval(\"cd_def_unique\" + index).checked == true)) {\n                eval(\"cd_def_unique\" + index).checked = true;\n            }\n            else {\n                eval(\"cd_def_unique\" + index).checked = false;\n            }\n        }\n\n        if ((\"cd_def_primary\" + index) == opt) {\n            if ((eval(\"cd_def_unique\" + index).checked == false)\n            &&  (eval(\"cd_def_primary\" + index).checked == true)) {\n                eval(\"cd_def_primary\" + index).checked = true;\n            }\n            else {\n                  eval(\"cd_def_primary\" + index).checked = false;\n            }\n        }\n    }\n}\n\n</script>\n\nEOT;\n\n    $done = true;\n}\n\n\n\n\n\n\nfunction js_giveFocus($form, $field)\n{\n    $js = \"<script language=\\\"JavaScript\\\" type=\\\"text/javascript\\\">\\n<!--\\n\";\n    $js .= \"    window.document.$form.$field.focus();\\n\";\n    $js .= \"\n\n    return $js;\n}\n\n\n\n\nfunction js_window_resize($width, $height)\n{\n    $js = \"<script language=\\\"JavaScript\\\" type=\\\"text/javascript\\\">\\n<!--\\n\"\n           .\"   window.resizeTo($width, $height);\\n\"\n          .\"\n\n    return $js;\n}\n\n\n\n\n\n\n\n\n\n\nfunction js_collations($charsets)\n{\n    static $done = false;\n\n    if ($done == true) {\n        return '';\n    }\n\n    $js = \"<script language=\\\"JavaScript\\\" type=\\\"text/javascript\\\">\\n<!--\\n\"\n          .\"    var collations = new Array();\\n\";\n\n    foreach ($charsets as $cs) {\n        $js .= '    collations[\"'.$cs['name'].\"\\\"] = new Array();\\n\";\n        $n = 0;\n        foreach ($cs['collations'] as $coll) {\n            $js .= '    collations[\"'.$cs['name'].'\"]['.$n.'] = \"'.$coll.\"\\\";\\n\";\n            ++$n;\n        }\n    }\n    $js .= \"\\n\";\n\n    $js .= <<<EOT\n    function adjustCollation(source, target) {\n        var i, charset;\n        for(i=0; i<source.length; i++) {\n            if(source.options[i].selected == true) {\n                charset = source.options[i].value;\n            }\n        }\n        cnt = target.options.length;\n        for (i=0; i<cnt; i++){\n            target.options[0] = null;\n        }\n        target.options[0] = new Option(\"\", \"\");\n        if (typeof(collations[charset]) == \"object\") {\n            for (i=0; i<collations[charset].length; i++){\n                target.options[i+1] = new Option(collations[charset][i], collations[charset][i]);\n            }\n        }\n    }\n\n</script>\n\nEOT;\n\n    $done = true;\n\n    return $js;\n}\n\n\n\n\nfunction js_xml_http_request_client()\n{\n    static $done = false;\n\n    if ($done == true) {\n        return '';\n    }\n    $done = true;\n\n    return js_javascript_file('js/XMLHttpRequestClient.js');\n}\n\n\n\n\nfunction xml_http_request_server_url()\n{\n    static $url;\n\n    if (!isset($url)) {\n        $script = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n        $script = substr($script, 0, strrpos($script, '/')).'/inc/xml_http_request_server.php';\n        $script = url_session($script);\n\n        $url = PROTOCOL.':\n    }\n\n    return $url;\n}\n\n\n\n\nfunction js_request_column_config_form()\n{\n    $server_url = xml_http_request_server_url();\n\n    $js = <<<EOT\n    <script language=\"javascript\"  type=\"text/javascript\">\n    function requestColumnConfigForm(fk_table, table, column, divId) {\n        var req = new XMLHttpRequestClient(\"$server_url\");\n        req.Request(\"column_config_form\", new Array(fk_table, table, column), \"setInnerHtml\", new Array(divId));\n    }\n    </script>\n\nEOT;\n\n    return $js;\n}\n\n\n\n\nfunction js_request_close_panel()\n{\n    $server_url = xml_http_request_server_url();\n\n    $js = <<<EOT\n    <script language=\"javascript\" type=\"text/javascript\">\n    function requestClosedPanel(idx, active) {\n        var req = new XMLHttpRequestClient(\"$server_url\");\n        req.Request(\"closed_panel\", new Array(idx, active), \"setInnerHtml\", new Array(\"p\" + idx));\n    }\n    </script>\n\nEOT;\n\n    return $js;\n}\n\n\n\n\nfunction js_request_details()\n{\n    static $done = false;\n\n    if ($done == true) {\n        return '';\n    }\n\n    $server_url = xml_http_request_server_url();\n\n    $js = <<<EOT\n    <script language=\"javascript\" type=\"text/javascript\">\n    function requestDetail(type, name, title) {\n        var req = new XMLHttpRequestClient(\"$server_url\");\n        req.Request(\"detail_view\", new Array(type, name, title), \"setInnerHtml\", new Array(detailPrefix(type) + '_' + name));\n    }\n    function closeDetail(type, id, name, title) {\n        var req = new XMLHttpRequestClient(\"$server_url\");\n        req.Request(\"detail_close\", new Array(type, name, title), \"setInnerHtml\", new Array(id));\n    }\n    </script>\n\nEOT;\n\n    $done = true;\n\n    return $js;\n}\n\n\n\n\nfunction js_request_fk()\n{\n    $server_url = xml_http_request_server_url();\n\n    $js = <<<EOT\n    <script language=\"javascript\" type=\"text/javascript\">\n    function requestFKValues(table, column, value) {\n        var req = new XMLHttpRequestClient(\"$server_url\");\n        req.Request(\"fk_values\", new Array(table, column, value), \"setInnerHtml\", new Array(\"fk\"));\n    }\n    </script>\n\nEOT;\n\n    return $js;\n}\n\n\n\n\nfunction js_request_filter_fields()\n{\n    $server_url = xml_http_request_server_url();\n\n    $js = <<<EOT\n    <script language=\"javascript\" type=\"text/javascript\">\n    function getFilterFields(table) {\n        var req = new XMLHttpRequestClient(\"$server_url\");\n        req.Request(\"systable_filter_fields\", new Array(table), \"setInnerHtml\", new Array(\"systable_field\"));\n    }\n    function getFilterValues(table, field) {\n        var req = new XMLHttpRequestClient(\"$server_url\");\n        req.Request(\"systable_filter_values\", new Array(table, field), \"setInnerHtml\", new Array(\"systable_value\"));\n    }\n    </script>\n\nEOT;\n\n    return $js;\n}\n\n\n\n\nfunction js_request_table_columns()\n{\n    $server_url = xml_http_request_server_url();\n\n    $js = <<<EOT\n    <script language=\"javascript\" type=\"text/javascript\">\n    function requestTableColumns(table, id, restriction) {\n        var req = new XMLHttpRequestClient(\"$server_url\");\n        req.Request(\"table_columns_selectlist\", new Array(table, id, restriction), \"setInnerHtml\", new Array(id));\n    }\n    </script>\n\nEOT;\n\n    return $js;\n}\n\n\n\n\nfunction js_request_sql_buffer()\n{\n    $server_url = xml_http_request_server_url();\n    $history_size = SQL_HISTORY_SIZE;\n\n    $js = <<<EOT\n    <script language=\"javascript\" type=\"text/javascript\">\n    function requestSqlBuffer(idx) {\n        var req = new XMLHttpRequestClient(\"$server_url\");\n        req.Request(\"sql_buffer\", new Array(idx), \"putSqlBuffer\", new Array(idx));\n    }\n\n    function putSqlBuffer(sql, idx) {\n        $(\"sql_script\").value = sql;\n    }\n    </script>\n\nEOT;\n\n    return $js;\n}\n\n\n\n\nfunction js_data_export()\n{\n    $server_url = xml_http_request_server_url();\n\n    $js = <<<EOT\n    <script language=\"javascript\" type=\"text/javascript\">\n    function replaceExportFormatOptions(format) {\n        var req = new XMLHttpRequestClient(\"$server_url\");\n        req.Request(\"data_export_format_options\", new Array(format), \"setInnerHtml\", new Array(\"dt_export_format_options\"));\n\n        hide(\"dt_export_iframe\");\n\n        var ele =  $(\"dt_export_target_filename\");\n        if (ele) {\n            var filename= ele.value;\n            if (filename.lastIndexOf(\".\") + 4 == filename.length) {\n                ele.value = filename.substring(0, filename.lastIndexOf(\".\") + 1) + format;\n            }\n        }\n    }\n\n    function setExportTarget(target) {\n        var req = new XMLHttpRequestClient(\"$server_url\");\n        req.Request(\"set_export_target\", new Array(target), \"\", new Array());\n    }\n\n    function setExportSource(source) {\n        var req = new XMLHttpRequestClient(\"$server_url\");\n        req.Request(\"set_export_source\", new Array(source), \"\", new Array());\n\n        hide(\"dt_export_iframe\");\n\n        if (source == 'table') {\n            hide(\"dt_export_source_dbtables_span\");\n            hide(\"dt_export_query_div\");\n            display(\"dt_export_source_table_span\")\n        }\n        else if (source == 'db') {\n            hide(\"dt_export_source_table_span\");\n            hide(\"dt_export_query_div\");\n            display(\"dt_export_source_dbtables_span\");\n        }\n        else if (source == \"query\") {\n            hide(\"dt_export_source_table_span\");\n            hide(\"dt_export_source_dbtables_span\");\n            display(\"dt_export_query_div\");\n        }\n    }\n    </script>\n\nEOT;\n\n    return $js;\n}\n\n\n\n\nfunction js_request_comment_area()\n{\n    $server_url = xml_http_request_server_url();\n\n    $js = <<<EOT\n    <script language=\"javascript\" type=\"text/javascript\">\n    function requestCommentArea(type, name) {\n        var req = new XMLHttpRequestClient(\"$server_url\");\n        req.Request(\"comment_area\", new Array(type, name), \"setInnerHtml\", new Array(detailPrefix(type) + 'c_' + name));\n    }\n    </script>\n\nEOT;\n\n    return $js;\n}\n\n\n\n\n\nfunction js_refresh_systable()\n{\n    $js = <<<EOT\n    <script language=\"javascript\" type=\"text/javascript\">\n    var sttimer;\n    function refresh_systable(seconds) {\n        if (sttimer) {\n            window.clearInterval(sttimer);\n        }\n        if (seconds != 0) {\n            sttimer = window.setInterval('requestSystable()', seconds*1000);\n        }\n        else {\n            requestSystable(0);\n        }\n    }\n\n    function requestSystable() {\n        jsrsPOST = true;\n        jsrsExecute(\"%1\\$s\", displaySystable, \"systable\", Array(document.db_systable_form.db_refresh.value));\n    }\n\n    function displaySystable(returnstring) {\n        var result = jsrsArrayFromString(returnstring, \"~\");\n        if (result[0].length > 0) {\n            var target = $(\"st\");\n            target.innerHTML = result[0];\n            if (str) delete str;\n            str = new SelectableTableRows($(\"systable\"), true)\n        }\n    }\n    </script>\n\nEOT;\n\n    return sprintf($js, url_session('jsrs/systable_request.php'));\n}\n\n\n\n\nfunction js_javascript($js)\n{\n    return '<script language=\"JavaScript\" type=\"text/javascript\">'.$js.\"</script>\\n\";\n}\n\nfunction js_javascript_file($file)\n{\n    return '<script src=\"'.$file.\"\\\" type=\\\"text/javascript\\\"></script>\\n\";\n}\n\nfunction js_javascript_variable($type, $name, $value)\n{\n    switch ($type) {\n    case 'string':\n        $value_str = \"'\".$value.\"'\";\n        break;\n    default:\n        $value_str = \"''\";\n    }\n\n    return 'var '.$name.'='.$value_str.\";\\n\";\n}\n\nfunction js_global_variables()\n{\n    return \"<script language=\\\"javascript\\\" type=\\\"text/javascript\\\">\\n\"\n         .js_javascript_variable('string', 'php_session_name', session_name())\n         .js_javascript_variable('string', 'php_session_id', session_id())\n         .js_javascript_variable('string', 'php_xml_http_request_server_url', xml_http_request_server_url())\n         .js_javascript_variable('string', 'php_charset', $GLOBALS['charset'])\n         .\"</script>\\n\";\n}\n",
        "gt": [
            "'firebirdwebadmin/inc/javascript.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/database.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/inc/configuration.inc.php'",
            "'firebirdwebadmin/data.php'",
            "'firebirdwebadmin/inc/debug_funcs.inc.php'"
        ],
        "content": "'firebirdwebadmin/inc/script_start.inc.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/configuration.inc.php';\n\nif (DEBUG) {\n    $start_time = @microtime();\n}\n\nrequire './inc/functions.inc.php';\n\nsession_start();\nset_error_handler('error_handler');\n\nrequire get_language_file('./lang/');\nrequire './inc/session.inc.php';\nrequire './inc/firebird.inc.php';\nrequire './inc/panel_elements.inc.php';\nrequire './inc/javascript.inc.php';\n\nif (DEBUG || DEBUG_HTML) {\n    include './inc/debug_funcs.inc.php';\n}\n\nif (!extension_loaded('interbase')) {\n    die($ERRORS['NO_IBASE_MODULE']);\n}\n\nif (!isset($_SESSION['s_init'])\n    || ($_SESSION['s_cookies'] === 'untested')\n) {\n    initialize_session();\n    fallback_session();\n} else {\n    localize_session_vars();\n}\n\nif (!isset($no_session_referer) || $no_session_referer !== true) {\n\n    $s_referer = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n}\n\nsend_http_headers();\n\n\n$message = '';\n$warning = '';\n$error = '';\n$fb_error = '';\n$php_error = '';\n$debug = array();\n$externcmd = '';\n\n\n\n$js_stack = '';\n\n\n\n$sql = '';\n\n\n\nif ($s_connected == true && !isset($_GET['unconnected'])) {\n    $dbhandle = db_connect();\n\n    if ($dbhandle === false) {\n        $fb_error = fbird_errmsg();\n        $s_connected = false;\n        $s_tables_valid = false;\n        $s_wt['table'] = '';\n    }\n\n    if (empty($s_charsets)) {\n        $s_charsets = get_charsets();\n    }\n}\n\n\nlist($family, $version) = server_info($s_login['server']);\ndefine('SERVER_FAMILY', $family);\ndefine('SERVER_VERSION', $version);\n\nif ($s_binpath != BINPATH) {\n\n\n    if (!is_dir(BINPATH)\n        || (!is_file(BINPATH.'isql') && !is_file(BINPATH.'isql-fb') && !is_file(BINPATH.'isql.exe'))\n    ) {\n        $warning = sprintf($WARNINGS['BAD_ISQLPATH'], BINPATH);\n    }\n\n\n    if (!is_dir(TMPPATH) || !is_writeable(TMPPATH)) {\n        $warning .= sprintf($WARNINGS['BAD_TMPPATH'], TMPPATH);\n    }\n\n    $s_binpath = BINPATH;\n}\n\nif (DEBUG_HTML) {\n    ob_start();\n}\n\n'firebirdwebadmin/inc/configuration.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n\n\ndefine('VERSION', '3.4.1');\n\ndefine('BINPATH', '/usr/sbin/');\n\ndefine('TMPPATH', '/tmp/');\n\n\ndefine('DEFAULT_USER',    'SYSDBA');\ndefine('DEFAULT_DB',      'employee.fdb');\ndefine('DEFAULT_PATH',    '/var/lib/firebird/2.5/data/');\ndefine('DEFAULT_HOST',    'localhost');\ndefine('DEFAULT_ROLE',    '');\ndefine('DEFAULT_CACHE',   75);\ndefine('DEFAULT_CHARSET', 'NONE');\ndefine('DEFAULT_DIALECT', 3);\ndefine('DEFAULT_SERVER',  'FB_2.5');\n\n\ndefine('PROTOCOL', 'http');\n\n\ndefine('SP_LIMIT_NAME', '');\n\n\n\n\n\n\n\n$ALLOWED_DIRS = array();\n\n\n\n\n\n\n\n\n$ALLOWED_FILES = array();\n\ndefine('BACKUP_DIR', '/var/lib/firebird/2.5');\n\ndefine('LANGUAGE', 'english');\n\n\n\n$HIDE_PANELS = array(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                     );\n\n\n\n$SQL_DISABLE = array('CREATE DATABASE',\n                     'CREATE SCHEMA'\n\n\n                     );\n\ndefine('SYSDBA_GET_ALL', true);\n\n\n\ndefine('CONFIRM_DELETE', true);\n\ndefine('SQL_AREA_COLS', 80);\ndefine('SQL_AREA_ROWS', 6);\n\ndefine('IFRAME_HEIGHT', 350);\n\ndefine('SQL_MAXSAVE', 100);\n\n\n\ndefine('SQL_HISTORY_SIZE', 25);\n\ndefine('SHOW_OUTPUT_ROWS', 100);\n\n\ndefine('DATA_MAXWIDTH', 50);\n\ndefine('FKLOOKUP_ENTRIES', 1000);\n\ndefine('MAX_CSV_LINE', 50000);\n\n\ndefine('DEFAULT_ROWS', 25);\n\ndefine('BLOB_WINDOW_WIDTH', 600);\ndefine('BLOB_WINDOW_HEIGHT', 800);\n\ndefine('SESSION_NAME', 'firebirdwebadmin');\n\n\ndefine('TRANS_READ', IBASE_COMMITTED | IBASE_NOWAIT | IBASE_READ);\ndefine('TRANS_WRITE', IBASE_COMMITTED | IBASE_NOWAIT | IBASE_WRITE);\n\ndefine('META_REDIRECT', false);\n\n\ndefine('DEBUG', false);\ndefine('DEBUG_HTML', false);\n\ndefine('DEBUG_COMMANDS', false);\ndefine('DEBUG_FILES', true);\n\n\n\nif ('' != SESSION_NAME) {\n    session_name(SESSION_NAME);\n}\n\nif (DEBUG === true) {\n    error_reporting(E_ALL | E_NOTICE | E_STRICT);\n}\n\n'firebirdwebadmin/data.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/script_start.inc.php';\nrequire './inc/foreign_keys.inc.php';\nrequire './inc/DataForm.php';\n\n\n\n\nif ($s_connected && $s_tables_valid == false) {\n    include_once './inc/get_tables.inc.php';\n    if (get_tables($dbhandle)) {\n        $s_tables_valid = true;\n    }\n}\n\nrequire './inc/handle_watchtable.inc.php';\n\n\n\n\n$customize_changed = false;\nif (isset($_POST['dt_column_config_save'])) {\n    $column = get_request_data('dt_column_config_column');\n    $table = get_request_data('dt_column_config_table');\n    $fk_column = get_request_data('dt_column_config_fk_column');\n    if ($fk_column == '') {\n        unset($s_cust['fk_lookups'][$table][$column]);\n        if (empty($s_cust['fk_lookups'][$table])) {\n            unset($s_cust['fk_lookups'][$table]);\n        }\n    } else {\n        $s_cust['fk_lookups'][$table][$column] = $fk_column;\n    }\n    $customize_changed = true;\n}\n\n\n\n\nif (array_filter(array_keys($_POST), function($a) {return preg_match(\"/dt_(enter|edit)_(insert|ready|save|cancel)/\", $a);} )) {\n    if ((isset($_POST['dt_config_fk_lookup'])  &&  $s_cust['enter']['fk_lookup'] == false)  ||\n        (!isset($_POST['dt_config_fk_lookup'])  &&  $s_cust['enter']['fk_lookup'] == true)) {\n\n\n        $s_cust['enter']['fk_lookup'] = isset($_POST['dt_config_fk_lookup']);\n        $customize_changed = true;\n    }\n\n    if (isset($_POST['dt_enter_insert'])  ||  isset($_POST['dt_enter_ready'])) {\n        if ((isset($_POST['dt_config_more'])  &&  $s_cust['enter']['another_row'] == false)  ||\n            (!isset($_POST['dt_config_more'])  &&  $s_cust['enter']['another_row'] == true)) {\n\n\n            $s_cust['enter']['another_row'] = isset($_POST['dt_config_more']);\n            $customize_changed = true;\n        }\n    } else {\n        if ((isset($_POST['dt_config_as_new'])  &&  $s_cust['enter']['as_new'] == false)  ||\n            (!isset($_POST['dt_config_as_new'])  &&  $s_cust['enter']['as_new'] == true)) {\n\n\n            $s_cust['enter']['as_new'] = isset($_POST['dt_config_as_new']);\n            $customize_changed = true;\n        }\n    }\n}\nif ($customize_changed == true) {\n    set_customize_cookie($s_cust);\n}\n\nif (isset($s_edit_where)  && count($s_edit_where) > 0) {\n    include './inc/handle_editdata.inc.php';\n}\n\n\n\n\nif (isset($_POST['dt_enter_select'])) {\n    $s_enter_name = get_request_data('dt_enter_name');\n\n    if (is_array($s_fields[$s_enter_name])) {\n        $s_fields = get_table_defaults_sources($s_enter_name, $s_fields);\n        $s_fields = get_table_computed_sources($s_enter_name, $s_fields);\n\n        $s_enter_values = init_enter_values($s_fields[$s_enter_name]);\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'dt_enter', true)\n&&  isset($_POST['dt_enter_insert'])) {\n\n\n    if (!$s_domains_valid) {\n        include_once './inc/domains.inc.php';\n\n        $s_domains = get_domain_definitions($s_domains);\n        $s_domains_valid = true;\n    }\n\n\n    include_once './inc/triggers.inc.php';\n    if ($s_triggers_valid == false) {\n        $s_triggers = get_triggers($s_triggers);\n        $s_triggers_valid = true;\n    }\n\n    $idx = 0;\n    $bindargs = $cols = $s_enter_values = array();\n    foreach ($s_fields[$s_enter_name] as $field) {\n        if (isset($field['comp'])) {\n            $s_enter_values[] = $field['csource'];\n            ++$idx;\n            continue;\n        }\n\n        if (isset($_FILES['dt_enter_file_'.$idx])  &&\n            !empty($_FILES['dt_enter_file_'.$idx]['name'])) {\n            $value = $_FILES['dt_enter_file_'.$idx];\n            $s_enter_values[] = $value;\n        } else {\n            $value = get_request_data('dt_enter_field_'.$idx);\n            $s_enter_values[] = $value;\n        }\n\n\n        $type = !isset($field['domain']) ? $field['type'] : $s_domains[$field['type']]['type'];\n\n\n        if ($idx == 0  &&  $value === ''  &&\n            in_array($type, array('INTEGER', 'BIGINT', 'SMALLINT'))  &&\n            isset($field['notnull'])  &&  $field['notnull'] == 'Yes'  &&\n            have_active_trigger($s_triggers, $s_enter_name, 'before', 'insert')) {\n            ++$idx;\n            continue;\n        }\n\n        switch ($type) {\n        case 'CHARACTER':\n        case 'VARCHAR':\n        case 'DATE':\n        case 'TIME':\n        case 'TIMESTAMP':\n            $bindargs[] = empty($field['notnull'])  &&  empty($value) ? null : \"$value\";\n            break;\n        case 'BLOB' :\n\n            if (is_array($value)  &&  !empty($value['name'])) {\n                $bfname = $value['tmp_name'];\n                $bfhandle = fopen($bfname, 'r') or die('cannot open file '.$bfname);\n                $bstr = fbird_blob_import($dbhandle, $bfhandle);\n                fclose($bfhandle);\n                $bindargs[] = $bstr;\n            }\n\n            elseif (!empty($value)) {\n                $bhandle = fbird_blob_create($dbhandle) or die('cannot create blob: '.__FILE__.', '.__LINE__);\n                fbird_blob_add($bhandle, $value);\n                $bstr = fbird_blob_close($bhandle);\n                $bindargs[] = $bstr;\n            } else {\n                $bindargs[] = null;\n            }\n            break;\n        default:\n            if ($value === '') {\n                $value = null;\n            }\n\n            $bindargs[] = $value;\n        }\n        $cols[] = $field['name'];\n        ++$idx;\n    }\n\n    if (count($cols) > 0) {\n        $fb_error = insert_row($s_enter_name, $cols, $bindargs);\n\n        if (empty($fb_error)) {\n            $s_watch_buffer = '';\n            $s_enter_values = $s_cust['enter']['another_row'] == false\n                ? array()\n                : init_enter_values($s_fields[$s_enter_name]);\n        }\n    }\n}\n\n\n\n\nif (isset($_POST['dt_enter_ready'])  ||\n    (isset($_POST['dt_enter_insert'])  &&  $s_cust['enter']['another_row'] == false  &&  empty($fb_error))) {\n    $s_enter_name = '';\n    $s_enter_values = array();\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'dt_export', true)) {\n    include './inc/export.inc.php';\n\n    if (empty($s_export)) {\n        $s_export = get_export_defaults();\n    }\n\n\n    if (isset($_POST['dt_export_defaults'])) {\n        $s_export = set_export_defaults($s_export['format'], $s_export);\n    }\n\n    if (isset($_POST['dt_export_doit'])) {\n        $s_export = get_export_form_data($s_export);\n        list($warning, $error) = check_export_form_data($s_export);\n\n        if (empty($error)  &&  empty($warning)) {\n\n\n            if ($s_export['target']['option'] == 'screen') {\n\n\n                $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"export\";';});\n\n                $iframekey_export = md5(uniqid('export'));\n                $s_iframejobs[$iframekey_export] = array('job' => 'export',\n                                                         'data' => $s_export,\n                                                         'timestamp' => time(), );\n            }\n\n\n            else {\n                $filename = export_filename($s_export);\n                send_export_headers(get_export_mimetype($s_export['format']), $filename);\n\n                export_data($s_export);\n\n\n\n                globalize_session_vars();\n                exit();\n            }\n        }\n    }\n\n    $js_stack .= js_data_export();\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'dt_import', true)\n&&  isset($_POST['dt_import_doit'])) {\n\n\n    $s_csv['import_null'] = isset($_POST['dt_import_null']) ? true : false;\n\n    if ($_POST['dt_import_table'] == '') {\n        $warning .= $WARNINGS['SELECT_TABLE_FIRST'];\n    } elseif (isset($_FILES['dt_import_file']['name'])\n        &&  $_FILES['dt_import_file']['name'] == '') {\n        $warning .= $WARNINGS['SELECT_FILE_FIRST'];\n    } else {\n        $ifile = $_FILES['dt_import_file']['tmp_name'];\n        $itable = $_POST['dt_import_table'];\n        $ihandle = fopen($ifile, 'r') or die('Error opening '.$ifile);\n\n\n\n        foreach ($s_fields[$itable] as $field) {\n            if (($field['type'] == 'BLOB'  &&  $field['stype'] != 1)  ||\n                (isset($field['comp'])  &&  $field['comp'] == 'Yes')) {\n\n                continue;\n            }\n            $col_names[] = $field['name'];\n            $columns[] = $field;\n        }\n\n        $sql = 'INSERT INTO '.$itable.'('.implode(', ', $col_names).')'\n                              .' VALUES ('.implode(', ', array_fill(0, count($col_names), '?')).')';\n        $query = fbird_prepare($sql) or fb_error(__FILE__, __LINE__, $sql);\n\n\n        $var_string = '';\n        foreach (array_keys($col_names) as $idx) {\n            $var_string .= '$data['.$idx.'],';\n        }\n        $var_string = substr($var_string, 0, -1);\n\n\n        $blob_fields = array();\n        $null_fields = array();\n        $idx = 0;\n        foreach ($s_fields[$itable] as $field) {\n            if ($field['type'] == 'BLOB') {\n                $blob_fields[] = $idx;\n            }\n\n            if ($s_csv['import_null'] == true &&\n                (!isset($field['notnull'])  || empty($field['notnull']))) {\n                $null_fields[] = $idx;\n            }\n            ++$idx;\n        }\n\n\n\n        $csv_cnt = 0;\n        while ($data = fgetcsv($ihandle, MAX_CSV_LINE)) {\n\n\n            if (!empty($null_fields)) {\n                foreach ($null_fields as $idx) {\n                    if ($data[$idx] == '') {\n                        $data[$idx] = null;\n                    }\n                }\n            }\n\n\n            if (!empty($blob_fields)) {\n                foreach ($blob_fields as $idx) {\n                    if (empty($data[$idx])) {\n                        $data[$idx] = null;\n                    } else {\n                        $blob_handle = fbird_blob_create($dbhandle) or fb_error(__FILE__, __LINE__);\n                        fbird_blob_add($blob_handle, $data[$idx]);\n                        $data[$idx] = fbird_blob_close($blob_handle) or fb_error(__FILE__, __LINE__);\n                    }\n                }\n            }\n\n            call_user_func_array('fbird_execute', array_merge(array($query), $data))\n                or $fb_error = fb_error(__FILE__, __LINE__, $query);\n\n\n            if (!empty($fb_error)) {\n                break;\n            }\n            ++$csv_cnt;\n        }\n        fclose($ihandle);\n        $sql = '';\n\n\n        $s_watch_buffer = '';\n\n        $message .= sprintf($MESSAGES['CSV_IMPORT_COUNT'], $csv_cnt, $itable);\n    }\n}\n\n$js_stack .= js_request_column_config_form();\n\n\n\n\n$s_page = 'Data';\n$panels = $s_data_panels;\n\nrequire './inc/script_end.inc.php';\n\nfunction init_enter_values($fields)\n{\n    $values = array();\n    foreach ($fields as $field) {\n        if (isset($field['default'])) {\n            $values[] = $field['dsource'];\n        } elseif (isset($field['comp'])) {\n            $values[] = $field['csource'];\n        } else {\n            $values[] = '';\n        }\n    }\n\n    return $values;\n}\n\n'firebirdwebadmin/inc/debug_funcs.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\nfunction write_output_buffer($fname)\n{\n    $fp = fopen($fname, 'w')\n        or die('Error opening file '.$fname);\n    fwrite($fp, ob_get_contents())\n        or die('Error writing to file '.$fname);\n    ob_end_flush();\n}\n\n\n\n\n\nfunction show_time_consumption($start, $end)\n{\n    list($sm, $ss) = explode(' ', $start);\n    list($em, $es) = explode(' ', $end);\n    $elapsed = $es - $ss + $em - $sm;\n    echo 'time consumption: '.$elapsed.\"<br>\\n\";\n}\n\n\n\n\n\n\n\nfunction add_debug($str, $file = null, $line = null)\n{\n    if ($file == null || $line == null) {\n        $dstr = \"<tr>\\n<td colspan=\\\"2\\\">\";\n        if (isset($GLOBALS[$str])) {\n            $dstr .= add_var_debug($str, \"<br>\\n\");\n        } else {\n            $dstr .= \"$str<br>\\n\";\n        }\n    } else {\n        $dstr = \"<tr>\\n<td>$file, $line:</td>\\n\";\n        if (isset($GLOBALS[$str])) {\n            $dstr .= '<td>'.add_var_debug($str, \"<br>\\n\");\n        } else {\n            $dstr .= \"<td>$str<br>\\n\";\n        }\n    }\n    $dstr .= \"</td>\\n</tr>\\n\";\n    $GLOBALS['debug'][] = $dstr;\n}\n\nfunction add_var_debug($var, $separator)\n{\n    if (!is_array($GLOBALS[$var])) {\n        return($var.' = '.$GLOBALS[$var]);\n    } else {\n        $str = $var.' = array('.$separator;\n        $arr = $GLOBALS[$var];\n        foreach ($arr as $key => $val) {\n            $str .= $key.' => '.$val.$separator;\n        }\n        $str .= ')'.$separator;\n\n        return $str;\n    }\n}\n\n\n\n\nfunction file_debug($str)\n{\n    include_once 'inc/configuration.inc.php';\n\n    $fp = fopen(TMPPATH.'debug.txt', 'a') or die('Error: cannot open file for debug output');\n    fwrite($fp, $str);\n    fclose($fp);\n}\n\n\n\n\nfunction js_alert($string)\n{\n    ?>\n<script language=\"JavaScript\">\n  <!--\n   alert(\"<?php echo $string;\n    ?>\");\n\n  </script>\n<?php\n\n}\n\n\n\n\nfunction show_session()\n{\n    debug_var($GLOBALS['HTTP_SESSION_VAR']);\n}\n\n\nfunction debug_die($var)\n{\n    debug_var($var);\n    die();\n}\n\n\nfunction debug_var($var)\n{\n    @include_once 'Var_Dump.php';\n    if (class_exists('Var_Dump')) {\n        Var_Dump::displayInit(array('display_mode' => 'HTML4_Text'),\n                              array('mode' => 'normal',\n                                    'offset' => 3,\n                                    'before_type' => '<font color=\"\n                                    'after_type' => '</font>',\n                                    'before_value' => '<font color=\"\n                                    'after_value' => '</font>',\n                                    )\n                              );\n        Var_Dump::display($var);\n    } else {\n        echo \"<pre>\\n\";\n        print_r($var);\n        echo \"</pre>\\n\";\n    }\n}\n\n?>\n",
        "gt": [
            "'firebirdwebadmin/inc/configuration.inc.php'",
            "'firebirdwebadmin/inc/debug_funcs.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/data.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/inc/configuration.inc.php'",
            "'firebirdwebadmin/admin.php'",
            "'firebirdwebadmin/inc/debug_funcs.inc.php'"
        ],
        "content": "'firebirdwebadmin/inc/script_start.inc.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/configuration.inc.php';\n\nif (DEBUG) {\n    $start_time = @microtime();\n}\n\nrequire './inc/functions.inc.php';\n\nsession_start();\nset_error_handler('error_handler');\n\nrequire get_language_file('./lang/');\nrequire './inc/session.inc.php';\nrequire './inc/firebird.inc.php';\nrequire './inc/panel_elements.inc.php';\nrequire './inc/javascript.inc.php';\n\nif (DEBUG || DEBUG_HTML) {\n    include './inc/debug_funcs.inc.php';\n}\n\nif (!extension_loaded('interbase')) {\n    die($ERRORS['NO_IBASE_MODULE']);\n}\n\nif (!isset($_SESSION['s_init'])\n    || ($_SESSION['s_cookies'] === 'untested')\n) {\n    initialize_session();\n    fallback_session();\n} else {\n    localize_session_vars();\n}\n\nif (!isset($no_session_referer) || $no_session_referer !== true) {\n\n    $s_referer = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n}\n\nsend_http_headers();\n\n\n$message = '';\n$warning = '';\n$error = '';\n$fb_error = '';\n$php_error = '';\n$debug = array();\n$externcmd = '';\n\n\n\n$js_stack = '';\n\n\n\n$sql = '';\n\n\n\nif ($s_connected == true && !isset($_GET['unconnected'])) {\n    $dbhandle = db_connect();\n\n    if ($dbhandle === false) {\n        $fb_error = fbird_errmsg();\n        $s_connected = false;\n        $s_tables_valid = false;\n        $s_wt['table'] = '';\n    }\n\n    if (empty($s_charsets)) {\n        $s_charsets = get_charsets();\n    }\n}\n\n\nlist($family, $version) = server_info($s_login['server']);\ndefine('SERVER_FAMILY', $family);\ndefine('SERVER_VERSION', $version);\n\nif ($s_binpath != BINPATH) {\n\n\n    if (!is_dir(BINPATH)\n        || (!is_file(BINPATH.'isql') && !is_file(BINPATH.'isql-fb') && !is_file(BINPATH.'isql.exe'))\n    ) {\n        $warning = sprintf($WARNINGS['BAD_ISQLPATH'], BINPATH);\n    }\n\n\n    if (!is_dir(TMPPATH) || !is_writeable(TMPPATH)) {\n        $warning .= sprintf($WARNINGS['BAD_TMPPATH'], TMPPATH);\n    }\n\n    $s_binpath = BINPATH;\n}\n\nif (DEBUG_HTML) {\n    ob_start();\n}\n\n'firebirdwebadmin/inc/configuration.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n\n\ndefine('VERSION', '3.4.1');\n\ndefine('BINPATH', '/usr/sbin/');\n\ndefine('TMPPATH', '/tmp/');\n\n\ndefine('DEFAULT_USER',    'SYSDBA');\ndefine('DEFAULT_DB',      'employee.fdb');\ndefine('DEFAULT_PATH',    '/var/lib/firebird/2.5/data/');\ndefine('DEFAULT_HOST',    'localhost');\ndefine('DEFAULT_ROLE',    '');\ndefine('DEFAULT_CACHE',   75);\ndefine('DEFAULT_CHARSET', 'NONE');\ndefine('DEFAULT_DIALECT', 3);\ndefine('DEFAULT_SERVER',  'FB_2.5');\n\n\ndefine('PROTOCOL', 'http');\n\n\ndefine('SP_LIMIT_NAME', '');\n\n\n\n\n\n\n\n$ALLOWED_DIRS = array();\n\n\n\n\n\n\n\n\n$ALLOWED_FILES = array();\n\ndefine('BACKUP_DIR', '/var/lib/firebird/2.5');\n\ndefine('LANGUAGE', 'english');\n\n\n\n$HIDE_PANELS = array(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                     );\n\n\n\n$SQL_DISABLE = array('CREATE DATABASE',\n                     'CREATE SCHEMA'\n\n\n                     );\n\ndefine('SYSDBA_GET_ALL', true);\n\n\n\ndefine('CONFIRM_DELETE', true);\n\ndefine('SQL_AREA_COLS', 80);\ndefine('SQL_AREA_ROWS', 6);\n\ndefine('IFRAME_HEIGHT', 350);\n\ndefine('SQL_MAXSAVE', 100);\n\n\n\ndefine('SQL_HISTORY_SIZE', 25);\n\ndefine('SHOW_OUTPUT_ROWS', 100);\n\n\ndefine('DATA_MAXWIDTH', 50);\n\ndefine('FKLOOKUP_ENTRIES', 1000);\n\ndefine('MAX_CSV_LINE', 50000);\n\n\ndefine('DEFAULT_ROWS', 25);\n\ndefine('BLOB_WINDOW_WIDTH', 600);\ndefine('BLOB_WINDOW_HEIGHT', 800);\n\ndefine('SESSION_NAME', 'firebirdwebadmin');\n\n\ndefine('TRANS_READ', IBASE_COMMITTED | IBASE_NOWAIT | IBASE_READ);\ndefine('TRANS_WRITE', IBASE_COMMITTED | IBASE_NOWAIT | IBASE_WRITE);\n\ndefine('META_REDIRECT', false);\n\n\ndefine('DEBUG', false);\ndefine('DEBUG_HTML', false);\n\ndefine('DEBUG_COMMANDS', false);\ndefine('DEBUG_FILES', true);\n\n\n\nif ('' != SESSION_NAME) {\n    session_name(SESSION_NAME);\n}\n\nif (DEBUG === true) {\n    error_reporting(E_ALL | E_NOTICE | E_STRICT);\n}\n\n'firebirdwebadmin/admin.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/script_start.inc.php';\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_gfix')) {\n    $action = $argument = '';\n    $logout = $redirect = false;\n\n    if (isset($_POST['gfix_doit'])) {\n        $s_sysdba_pw = get_sysdba_pw();\n\n        $s_gfix = array('buffers' => get_request_data('adm_buffers'),\n                        'dialect' => get_request_data('adm_sql_dialect'),\n                        'access_mode' => get_request_data('adm_access_mode'),\n                        'write_mode' => get_request_data('adm_write_mode'),\n                        'use_space' => get_request_data('adm_use_space'),\n                        'sweep_interval' => (int) get_request_data('adm_housekeeping'),\n                        'sweep_ignore' => (boolean) get_request_data('adm_sweep_ignore'),\n                        'repair' => get_request_data('adm_repair'),\n                        'repair_ignore' => (boolean) get_request_data('adm_repair_ignore'),\n                        'shutdown' => get_request_data('adm_shutdown'),\n                        'shutdown_seconds' => (int) get_request_data('adm_shut_secs'),\n                        'reconnect' => (boolean) get_request_data('adm_shut_reconnect'),\n                        );\n    }\n\n\n    if (isset($_POST['adm_gfix_buffers'])  &&  !empty($s_gfix['buffers'])) {\n        $action = IBASE_PRP_PAGE_BUFFERS;\n        $argument = $s_gfix['buffers'];\n    }\n\n\n    if (isset($_POST['adm_gfix_dialect'])  &&  !empty($s_gfix['dialect'])) {\n        $action = IBASE_PRP_SET_SQL_DIALECT;\n        $argument = $s_gfix['dialect'];\n    }\n\n\n    if (isset($_POST['adm_gfix_access_mode'])  &&  !empty($s_gfix['access_mode'])) {\n        $action = IBASE_PRP_ACCESS_MODE;\n        $argument = $s_gfix['access_mode'] == $adm_strings['ReadWrite'] ? IBASE_PRP_AM_READWRITE : IBASE_PRP_AM_READONLY;\n    }\n\n\n    if (isset($_POST['adm_gfix_write_mode'])  &&  !empty($s_gfix['write_mode'])) {\n        $action = IBASE_PRP_WRITE_MODE;\n        $argument = $s_gfix['write_mode'] == $adm_strings['Sync'] ? IBASE_PRP_WM_SYNC : IBASE_PRP_WM_ASYNC;\n    }\n\n\n    if (isset($_POST['adm_gfix_use_space'])  &&  !empty($s_gfix['use_space'])) {\n        $action = IBASE_PRP_RESERVE_SPACE;\n        $argument = $s_gfix['use_space'] == $adm_strings['SmallFull'] ? IBASE_PRP_RES_USE_FULL : IBASE_PRP_RES;\n    }\n\n\n    if (isset($_POST['adm_gfix_housekeeping'])) {\n        $action = IBASE_PRP_SWEEP_INTERVAL;\n        $argument = $s_gfix['sweep_interval'];\n    }\n\n\n    if (isset($_POST['adm_gfix_sweep'])) {\n        $action = IBASE_RPR_SWEEP_DB;\n        $argument = $s_gfix['sweep_ignore'] ? IBASE_RPR_IGNORE_CHECKSUM : '';\n    }\n\n\n    if (isset($_POST['adm_gfix_repair'])  &&  !empty($s_gfix['repair'])) {\n        switch ($s_gfix['repair']) {\n        case 'mend':\n            $action = IBASE_RPR_MEND_DB;\n            break;\n        case 'validate':\n            $action = IBASE_RPR_VALIDATE_DB;\n            break;\n        case 'full':\n            $action = IBASE_RPR_FULL;\n            break;\n        case 'no_update':\n            $action = IBASE_RPR_CHECK_DB;\n            break;\n        }\n        $argument = $s_gfix['repair_ignore'] ? IBASE_RPR_IGNORE_CHECKSUM : '';\n    }\n\n\n    if (isset($_POST['adm_gfix_shutdown'])  && !empty($s_gfix['shutdown'])) {\n        switch ($s_gfix['shutdown']) {\n        case 'noconns':\n            $action = IBASE_PRP_DENY_NEW_ATTACHMENTS;\n            break;\n        case 'notrans':\n            $action = IBASE_PRP_DENY_NEW_TRANSACTIONS;\n            break;\n        case 'force':\n            $action = IBASE_PRP_SHUTDOWN_DB;\n            break;\n        }\n        $argument = $s_gfix['shutdown_seconds'];\n        $logout = $s_gfix['reconnect'] ? false : true;\n    }\n\n\n    if (isset($_POST['adm_gfix_rescind'])) {\n        $action = IBASE_PRP_DB_ONLINE;\n    }\n\n    if (!empty($action)) {\n        if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            if (empty($argument)) {\n                $result = fbird_maintain_db($service, $s_login['database'], $action);\n            } else {\n                $result = fbird_maintain_db($service, $s_login['database'], $action, $argument);\n            }\n            fbird_service_detach($service);\n            if (!$result) {\n                $fb_error = fbird_errmsg();\n            }\n        } else {\n            $fb_error = fbird_errmsg();\n        }\n\n        if ($logout == true) {\n            remove_edit_panels();\n            cleanup_session();\n            $s_connected = false;\n        }\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_dbstat', true)) {\n    if (isset($_POST['db_stat_select'])) {\n        $s_dbstat_option = get_request_data('db_stat_option');\n    }\n\n    if (!empty($s_dbstat_option)) {\n\n\n        $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"dbstat\";';});\n\n        $iframekey_dbstat = md5(uniqid('dbstat'));\n        $s_iframejobs[$iframekey_dbstat] = array('job' => 'dbstat',\n                                                 'option' => $s_dbstat_option,\n                                                 'timestamp' => time(), );\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_server')) {\n    $exe = 'fb_lock_print';\n\n\n    list($iblockpr_output, $binary_error) = exec_command($exe, ' -o');\n\n    $lock_header = '';\n    unset($iblockpr_output[0]);\n    foreach ($iblockpr_output as $line) {\n        if (strlen(trim($line)) == 0) {\n            break;\n        }\n        $lock_header .= $line.\"<br>\\n\";\n    }\n\n\n    list($iblockpr_output, $binray_error) = exec_command($exe, ' -i');\n\n    if (count($iblockpr_output) > 3) {\n        $iblock['names'] = preg_split('/[\\s,]+/', $iblockpr_output[0]);\n        $iblock['last'] = preg_split('/[\\s,]+/', $iblockpr_output[1]);\n        $iblock['avg'] = preg_split('/[\\s,]+/', $iblockpr_output[3]);\n    }\n\n\n    if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n        $server_info = fbird_server_info($service, IBASE_SVC_SERVER_VERSION)\n                      .' / '\n                      .fbird_server_info($service, IBASE_SVC_IMPLEMENTATION);\n        fbird_service_detach($service);\n    } else {\n        $fb_error = fbird_errmsg();\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_backup')) {\n    if (isset($_POST['adm_backup_doit'])) {\n        $s_backup = array('target' => get_request_data('adm_bu_target'),\n                          'mdonly' => (boolean) get_request_data('adm_bu_mdonly'),\n                          'mdoldstyle' => (boolean) get_request_data('adm_bu_mdoldstyle'),\n                          'transport' => (boolean) get_request_data('adm_bu_transport'),\n                          'convert' => (boolean) get_request_data('adm_bu_convert'),\n                          'nogc' => (boolean) get_request_data('adm_bu_nogc'),\n                          'ignorecs' => (boolean) get_request_data('adm_bu_ignorecs'),\n                          'ignorelt' => (boolean) get_request_data('adm_bu_ignorelt'),\n                          'verbose' => (boolean) get_request_data('adm_bu_verbose'),\n                          );\n    }\n\n    if (isset($_POST['adm_backup_doit'])  &&  !empty($s_backup['target'])) {\n        $s_sysdba_pw = get_sysdba_pw();\n\n        $backup_options = array('mdonly' => IBASE_BKP_METADATA_ONLY,\n                                'mdoldstyle' => IBASE_BKP_OLD_DESCRIPTIONS,\n                                'transport' => IBASE_BKP_NON_TRANSPORTABLE,\n                                'convert' => IBASE_BKP_CONVERT,\n                                'nogc' => IBASE_BKP_NO_GARBAGE_COLLECT,\n                                'ignorecs' => IBASE_BKP_IGNORE_CHECKSUMS,\n                                'ignorelt' => IBASE_BKP_IGNORE_LIMBO,\n                                );\n        $options = 0;\n        foreach ($backup_options as $idx => $option) {\n            if ($s_backup[$idx]) {\n                $options |= $option;\n            }\n        }\n\n        $source_db = !empty($s_login['host']) ? $s_login['host'].':'.$s_login['database'] : $s_login['database'];\n        $target_file = get_backup_filename($s_backup['target']);\n\n        if ($s_backup['verbose']) {\n\n            $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"backup\";';});\n\n            $iframekey_backup = md5(uniqid('backup'));\n            $s_iframejobs[$iframekey_backup] = array('job' => 'backup',\n                                                     'source' => $source_db,\n                                                     'target' => $target_file,\n                                                     'options' => $options,\n                                                     'timestamp' => time(), );\n        } elseif (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            $result = fbird_backup($service, $source_db, $target_file, $options, $s_backup['verbose']);\n            $message = nl2br(str_replace(array(chr(0x01).chr(0x0a), 'gbak: '), '', $result));\n            fbird_service_detach($service);\n        } else {\n            $fb_error = fbird_errmsg();\n        }\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_restore')) {\n    if (isset($_POST['adm_restore_doit'])) {\n        $s_restore = array('source' => get_request_data('adm_re_source'),\n                           'target' => get_request_data('adm_re_target'),\n                           'overwrite' => (boolean) get_request_data('adm_re_overwrite'),\n                           'inactive' => (boolean) get_request_data('adm_re_inactive'),\n                           'oneattime' => (boolean) get_request_data('adm_re_oneattime'),\n                           'useall' => (boolean) get_request_data('adm_re_useall'),\n                           'novalidity' => (boolean) get_request_data('adm_re_novalidity'),\n                           'kill' => (boolean) get_request_data('adm_re_kill'),\n                           'verbose' => (boolean) get_request_data('adm_re_verbose'),\n                           'connect' => (boolean) get_request_data('adm_re_connect'),\n                           );\n\n        if ($s_restore['connect']) {\n            $s_restore['verbose'] = true;\n        }\n    }\n\n    if (isset($_POST['adm_restore_doit'])  &&  !empty($s_restore['source'])  &&  !empty($s_restore['target'])) {\n        $s_sysdba_pw = get_sysdba_pw();\n\n        if (!is_allowed_db($s_restore['target'])) {\n            $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_restore['target']);\n        }\n\n        $restore_options = array('inactive' => IBASE_RES_DEACTIVATE_IDX,\n                                 'oneattime' => IBASE_RES_ONE_AT_A_TIME,\n                                 'useall' => IBASE_RES_USE_ALL_SPACE,\n                                 'novalidity' => IBASE_RES_NO_VALIDATE,\n                                 'kill' => IBASE_RES_NO_SHADOW,\n                                 );\n        $options = 0;\n        foreach ($restore_options as $idx => $option) {\n            if ($s_restore[$idx]) {\n                $options |= $option;\n            }\n        }\n        if ($s_restore['overwrite']) {\n            $options |= IBASE_RES_REPLACE;\n        } else {\n            $options |= IBASE_RES_CREATE;\n        }\n\n        if (empty($error)) {\n            $source_file = defined('BACKUP_DIR')  &&  BACKUP_DIR !== '' ? BACKUP_DIR.$s_restore['source'] : $s_restore['source'];\n\n            if ($s_restore['verbose']) {\n\n                $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"restore\";';});\n\n                $iframekey_restore = md5(uniqid('restore'));\n                $s_iframejobs[$iframekey_restore] = array('job' => 'restore',\n                                                      'source' => $source_file,\n                                                      'target' => $s_restore['target'],\n                                                      'options' => $options,\n                                                      'connect' => $s_restore['connect'],\n                                                      'timestamp' => time(), );\n            } elseif (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n                fbird_restore($service, $source_file, $s_restore['target'], $options, $s_restore['verbose']);\n                $message = 'restore started';\n                fbird_service_detach($service);\n            } else {\n                $fb_error = fbird_errmsg();\n            }\n        }\n    }\n}\n\n\n\n$s_page = 'Admin';\n$panels = $s_admin_panels;\n\nrequire './inc/script_end.inc.php';\n\nfunction get_backup_filename($pname)\n{\n    return (defined('BACKUP_DIR')  &&  BACKUP_DIR !== '')\n        ?  BACKUP_DIR.basename($pname)\n        : $pname;\n}\n\n\n\n\nfunction database_statistic_options()\n{\n    $options = array(IBASE_STS_HDR_PAGES => 'header page',\n                     IBASE_STS_DB_LOG => 'log page',\n                     IBASE_STS_DATA_PAGES => 'data pages',\n                     IBASE_STS_IDX_PAGES => 'index leaf pages',\n                     IBASE_STS_SYS_RELATIONS => 'system relations',\n                     );\n\n    return $options;\n}\n\n'firebirdwebadmin/inc/debug_funcs.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\nfunction write_output_buffer($fname)\n{\n    $fp = fopen($fname, 'w')\n        or die('Error opening file '.$fname);\n    fwrite($fp, ob_get_contents())\n        or die('Error writing to file '.$fname);\n    ob_end_flush();\n}\n\n\n\n\n\nfunction show_time_consumption($start, $end)\n{\n    list($sm, $ss) = explode(' ', $start);\n    list($em, $es) = explode(' ', $end);\n    $elapsed = $es - $ss + $em - $sm;\n    echo 'time consumption: '.$elapsed.\"<br>\\n\";\n}\n\n\n\n\n\n\n\nfunction add_debug($str, $file = null, $line = null)\n{\n    if ($file == null || $line == null) {\n        $dstr = \"<tr>\\n<td colspan=\\\"2\\\">\";\n        if (isset($GLOBALS[$str])) {\n            $dstr .= add_var_debug($str, \"<br>\\n\");\n        } else {\n            $dstr .= \"$str<br>\\n\";\n        }\n    } else {\n        $dstr = \"<tr>\\n<td>$file, $line:</td>\\n\";\n        if (isset($GLOBALS[$str])) {\n            $dstr .= '<td>'.add_var_debug($str, \"<br>\\n\");\n        } else {\n            $dstr .= \"<td>$str<br>\\n\";\n        }\n    }\n    $dstr .= \"</td>\\n</tr>\\n\";\n    $GLOBALS['debug'][] = $dstr;\n}\n\nfunction add_var_debug($var, $separator)\n{\n    if (!is_array($GLOBALS[$var])) {\n        return($var.' = '.$GLOBALS[$var]);\n    } else {\n        $str = $var.' = array('.$separator;\n        $arr = $GLOBALS[$var];\n        foreach ($arr as $key => $val) {\n            $str .= $key.' => '.$val.$separator;\n        }\n        $str .= ')'.$separator;\n\n        return $str;\n    }\n}\n\n\n\n\nfunction file_debug($str)\n{\n    include_once 'inc/configuration.inc.php';\n\n    $fp = fopen(TMPPATH.'debug.txt', 'a') or die('Error: cannot open file for debug output');\n    fwrite($fp, $str);\n    fclose($fp);\n}\n\n\n\n\nfunction js_alert($string)\n{\n    ?>\n<script language=\"JavaScript\">\n  <!--\n   alert(\"<?php echo $string;\n    ?>\");\n\n  </script>\n<?php\n\n}\n\n\n\n\nfunction show_session()\n{\n    debug_var($GLOBALS['HTTP_SESSION_VAR']);\n}\n\n\nfunction debug_die($var)\n{\n    debug_var($var);\n    die();\n}\n\n\nfunction debug_var($var)\n{\n    @include_once 'Var_Dump.php';\n    if (class_exists('Var_Dump')) {\n        Var_Dump::displayInit(array('display_mode' => 'HTML4_Text'),\n                              array('mode' => 'normal',\n                                    'offset' => 3,\n                                    'before_type' => '<font color=\"\n                                    'after_type' => '</font>',\n                                    'before_value' => '<font color=\"\n                                    'after_value' => '</font>',\n                                    )\n                              );\n        Var_Dump::display($var);\n    } else {\n        echo \"<pre>\\n\";\n        print_r($var);\n        echo \"</pre>\\n\";\n    }\n}\n\n?>\n",
        "gt": [
            "'firebirdwebadmin/inc/configuration.inc.php'",
            "'firebirdwebadmin/inc/debug_funcs.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/admin.php'"
        ]
    },
    {
        "files": [
            "'aurora/Web Interface/pdf.php'",
            "'aurora/Web Interface/config.php'",
            "'aurora/Web Interface/functions.php'"
        ],
        "content": "'aurora/Web Interface/pdf.php'\n:<?php\nrequire 'config.php';\nif (isset($_SESSION['loggedin']) && $_SESSION['team']['status'] == 'Admin') {\n    ?>\n    <html>\n        <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n            <link type=\"text/css\" rel=\"stylesheet\" href=\"<?php echo CSS_URL; ?>/bootstrap.css\" media=\"screen\" />\n            <link type=\"text/css\" rel=\"stylesheet\" href=\"<?php echo CSS_URL; ?>/bootstrap-responsive.css\" media=\"screen\" />\n            <link type=\"text/css\" rel=\"stylesheet\" href=\"<?php echo CSS_URL; ?>/style.css\" media=\"screen\" />\n            <script type=\"text/javascript\" src=\"<?php echo JS_URL; ?>/jquery.js\"></script>\n            <script type=\"text/javascript\" src=\"<?php echo JS_URL; ?>/bootstrap.js\"></script>\n            <script type=\"text/javascript\" src=\"<?php echo JS_URL; ?>/plugin.js\"></script>\n        </head>\n        <body>\n            <div class='container'>\n                <?php\n                $pgroup = $_GET['code'];\n                $res = DB::findAllFromQuery(\"Select * from problems where pgroup = '$pgroup'\");\n                $i=1;\n                foreach ($res as $result) {\n                    echo \"<div style='page-break-after: \".(($i++ == count($res))?(\"auto\"):(\"always\")).\"; text-align: justify;'><center><h3>$result[name]</h3></center>\";\n                    $statement = stripslashes($result[\"statement\"]);\n                    $statement = preg_replace(\"/\\n/\", \"<br>\", $statement);\n                    $statement = preg_replace(\"/<image \\/>/\", \"<img src='data:image/jpeg;base64,$result[image]' />\", $statement);\n                    echo \" $statement<br/>\n                   <b>Time Limit :</b> $result[timelimit] Second(s)<br/><b>Score :</b> $result[score] Point(s)<br/><b>Input File Limit :</b> $result[maxfilesize] Bytes<br/><b>Languages Allowed :</b> $result[languages]</div>\";\n                }\n                ?>\n            </div>\n        </body>\n    </html>\n    <?php\n} else {\n    $_SESSION['msg'] = \"Access Denied: You need to be administrator to access that page.\";\n    redirectTo(SITE_URL . \"/\");\n}\n?>\n\n'aurora/Web Interface/config.php'\n:<?php\n\nfunction getEnvVar($key, $default) {\n  return getenv($key) ? getenv($key) : $default;\n}\n\n\nfunction getDockerSecretValue($key, $fallbackValue) {\n  $file = getEnvVar($key, null);\n  if ($file && file_exists($file)) {\n    return trim(file_get_contents($file));\n  } else {\n    return $fallbackValue;\n  }\n}\n\n\ndefine(\"SITE_URL\", getEnvVar(\"AURORA_BASE_URL\", \"\"));\ndefine(\"SQL_USER\", getDockerSecretValue('AURORA_SQL_USER_FILE', getEnvVar(\"AURORA_SQL_USER\", \"aurora\")));\ndefine(\"SQL_PASS\", getDockerSecretValue('AURORA_SQL_PASS_FILE', getEnvVar(\"AURORA_SQL_PASS\", \"aurora\")));\ndefine(\"SQL_DB\", getDockerSecretValue('AURORA_SQL_DB_FILE', getEnvVar(\"AURORA_SQL_DB\", \"aurora_main\")));\ndefine(\"SQL_HOST\", getDockerSecretValue('AURORA_SQL_HOST_FILE', getEnvVar(\"AURORA_SQL_HOST\", \"127.0.0.1\")));\ndefine(\"SQL_PORT\", getDockerSecretValue('AURORA_SQL_PORT_FILE', getEnvVar(\"AURORA_SQL_PORT\", \"3306\")));\ndisplayErrors(FALSE);\ndate_default_timezone_set(\"Asia/Kolkata\");\n\n$brush = array(\"AWK\" => \"text\", \"Bash\" =>\"sh\", \"Brain\" => \"text\",\"C\" => \"c\", \"C++\" => \"cpp\", \"C\n$cmmode = \"'C': 'text/x-csrc', 'C++': 'text/x-c++src', 'C\n$valtoname = array(\"AWK\"=>\"AWK\", \"Bash\"=>\"Bash\", \"Brain\" => \"Brainf**k\", \"C\" => \"C\", \"C++\" => \"C++\", \"Java\" => \"Java\", \"C\n$valtoext = array(\"AWK\"=>\"awk\", \"Bash\"=>\"sh\", \"Brain\" => \"b\", \"C\" => \"c\", \"C++\" => \"cpp\", \"Java\" => \"java\", \"C\n\n\nini_set(\"session.gc_maxlifetime\", 86400);\nsession_set_cookie_params(array(\n  'lifetime' => 0,\n  'path' => SITE_URL,\n  'samesite' => 'Lax',\n  'httponly' => true\n));\nsession_start();\nfunction displayErrors($option = true) {\n  if ($option) {\n    error_reporting(E_ALL | E_STRICT);\n    ini_set('display_errors', '1');\n  }\n  else {\n    error_reporting(0);\n    ini_set('display_errors', '0');\n  }\n}\n\ndefine(\"DEBUG\", true);\n\nclearstatcache();\n\ndefine(\"JS_URL\", SITE_URL . \"/js\");\ndefine(\"CSS_URL\", SITE_URL . \"/css\");\ndefine(\"IMAGE_URL\", SITE_URL . \"/img\");\ndefine(\"ACCOUNT_URL\", SITE_URL . \"/account\");\n\ndefine(\"PHPSCRIPTS_PATH\", dirname(__FILE__) . \"/php_scripts\");\n\n\n\ndefine(\"MAIL_PATH\", \"Mail.php\");\n\n\n\n\n\ndefine(\"ERROR_LOG\", dirname(__FILE__) . \"/errors.txt\");\n\n\n\nforeach ($_POST as $key => $value) {\n  $_POST[$key] = addslashes($value);\n}\n\n\nforeach ($_GET as $key => $value) {\n  $_GET[$key] = addslashes($value);\n}\n\nrequire_once 'functions.php';\n\n\n'aurora/Web Interface/functions.php'\n:<?php\n\n\nfunction processDirPath($dir) {\n  $dir = preg_replace('/\\.\\./', '', $dir);\n  return preg_replace('/\\\n}\n\nfunction getAllFilesfromDirectory($dir, $sort = true, $sortby = \"name\", $sortorder = SORT_ASC, $ignore = array()) {\n  $files = array();\n  if (!is_dir($dir))\n    return array();\n  $handle = opendir($dir);\n  if ($handle) {\n    $files = array();\n    while (false !== ($entry = readdir($handle))) {\n      if ($entry != \".\" && $entry != \"..\" && !in_array($entry, $ignore)) {\n        $files[$entry] = filectime($dir . \"/\" . $entry);\n      }\n    }\n    closedir($handle);\n  }\n  if (!$sort) {\n    return array_keys($files);\n  }\n  else {\n    if ($sortby == \"date\") {\n      asort($files);\n      if ($sortorder == SORT_DESC) {\n        return array_reverse(array_keys($files));\n      }\n      return array_keys($files);\n    }\n    else if ($sortby == \"name\") {\n      $files = array_keys($files);\n      natsort($files);\n      if ($sortorder == SORT_DESC) {\n        return array_reverse(array_values($files));\n      }\n      return array_values($files);\n    }\n  }\n  return false;\n}\n\nfunction getGeneralCoverImage($category) {\n  foreach (getCoverNames() as $cover) {\n    if (file_exists(GENERAL_PATH . \"/\" . $category . \"/\" . $cover)) {\n      return GENERAL_URL . \"/\" . $category . \"/\" . $cover;\n    }\n  }\n  return NOTFOUND_URL;\n}\n\nfunction getCoverNames() {\n  global $EXTNS;\n  $e = array();\n  foreach ($EXTNS as $extn) {\n    $e[] = \"cover.\" . $extn;\n  }\n  return $e;\n}\n\nfunction saveOrderedImages($uid, $type, $category, $name) {\n  $query = \"select * from orders where deleted = 0 and fk_user_id = :uid and type=:type and category = :category and name = :name\";\n  $res = DB::findOneFromQuery($query, array(\":uid\" => $uid, \":type\" => $type, \":category\" => $category, \":name\" => $name));\n  if (!($res && count($res) > 0)) {\n    return DB::insert(\"orders\", array(\"fk_user_id\" => $uid, \"type\" => $type, \"category\" => $category, \"name\" => $name));\n  }\n  return -1;\n}\n\nfunction getOrderedImages($uid) {\n  $query = \"select * from orders where deleted=0 and fk_user_id = $uid\";\n  $res = DB::findAllFromQuery($query);\n  $img = array();\n  foreach ($res as $value) {\n    if ($value['type'] == \"general\") {\n      $path = GENERAL_PATH;\n      $url = GENERAL_URL;\n    }\n    else if ($value['type'] == \"premium\") {\n      $path = PREMIUM_PATH;\n      $url = PREMIUM_URL;\n    }\n    if (file_exists($path . \"/\" . $value['category'] . \"/\" . $value['name'])) {\n      $value['url'] = $url . \"/\" . $value['category'] . \"/\" . $value['name'];\n    }\n    else {\n      $value['url'] = NOTFOUND_URL;\n    }\n    $img[] = $value;\n  }\n  return $img;\n}\n\nfunction getOrderedImageUrls($uid) {\n  $query = \"select * from orders where deleted = 0 and fk_user_id = $uid\";\n  $res = DB::findAllFromQuery($query);\n  $img = array();\n  foreach ($res as $index => $value) {\n    if ($value['type'] == \"general\") {\n      $path = GENERAL_PATH;\n      $url = GENERAL_URL;\n    }\n    else if ($value['type'] == \"premium\") {\n      $path = PREMIUM_PATH;\n      $url = PREMIUM_URL;\n    }\n    if (file_exists($path . \"/\" . $value['category'] . \"/\" . $value['name'])) {\n      $img[$index] = $url . \"/\" . $value['category'] . \"/\" . $value['name'];\n    }\n    else {\n      $img[$index] = NOTFOUND_URL;\n    }\n  }\n  return $img;\n}\n\nfunction removeFromOrders($uid, $type, $category, $name) {\n  return DB::update(\"orders\", array(\"deleted\" => 1), \"fk_user_id = :uid and type=:type and category = :category and name = :name\", array(\":uid\" => $uid, \":type\" => $type, \":category\" => $category, \":name\" => $name));\n}\n\nfunction checkOrdered($img) {\n  if (isset($_SESSION['loggedin'])) {\n    $images = getOrderedImageUrls($_SESSION['user']['id']);\n    if (in_array($img, $images))\n      return true;\n    return false;\n  }\n  return false;\n}\n\nfunction redirectTo($url, $exit = true) {\n  header(\"Location:\" . $url);\n  if ($exit) {\n    exit;\n  }\n}\n\nfunction redirectAfter($url) {\n  if (isset($_SESSION['RedirectUrl'])) {\n    $url = $_SESSION['RedirectUrl'];\n    unset($_SESSION['RedirectUrl']);\n  }\n  redirectTo($url);\n}\n\nfunction checkLogin() {\n  if (!isset($_SESSION[\"loggedin\"])) {\n    $_SESSION['RedirectUrl'] = $_SERVER['REQUEST_URI'];\n    header(\"Location:\" . SITE_URL);\n    exit;\n  }\n}\n\nfunction getCacheNumber() {\n  return DEBUG ? date(\"YmdHis\") : date(\"YmdH\");\n}\n\nfunction writeFile($filename, $data) {\n  $file = fopen($filename, \"a+\");\n  if ($file) {\n    fputs($file, date(\"[Y-m-d H:i:s]\\n\") . $data\n            . \"\\n======================================================================\\n\");\n    fclose($file);\n  }\n}\n\nfunction writeError($data) {\n  writeFile(ERROR_LOG, $data);\n}\n\nfunction isValidEmail($email) {\n  $pattern = \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\";\n  if (eregi($pattern, $email)) {\n    return true;\n  }\n  return false;\n}\n\nfunction sendMail($subject, $body, $to, $from = \"ACM BIT Mesra <team@bitmesra.acm.org>\") {\n  require_once MAIL_PATH;\n  $headers = array('From' => $from,\n      'To' => $to,\n      'Subject' => $subject,\n      'Date' => date(\"Y-m-d H:i:s\") . \" +0530\",\n      'Content-Type' => 'text/html',\n      'charset' => 'UTF-8'\n  );\n  $smtp = Mail::factory('smtp', array('host' => MAIL_HOST,\n              'port' => MAIL_PORT,\n              'auth' => true,\n              'username' => MAIL_USER,\n              'password' => MAIL_PASS));\n  $mail = $smtp->send($to, $headers, $body);\n  $data = \"Mail:\\n\" . print_r(array(\"To\" => $to, \"From\" => $from, \"Subject\" => $subject, \"Body\" => $body), true);\n  if (PEAR::isError($mail)) {\n    writeError($data);\n    return false;\n  }\n  writeFile(COMMENTS_LOG, $data);\n  return true;\n}\n\nfunction prettyPrint($data, $withType = false) {\n  echo \"<pre>\";\n  $withType ? var_dump($data) : print_r($data);\n  echo \"</pre>\";\n}\n\nfunction printPageNos($total) {\n  if ($total > 1) {\n    parse_str($_SERVER['QUERY_STRING'], $query_string);\n    echo \"<p class='pagenos'>Page: \";\n    for ($i = 1; $i <= $total; $i++) {\n      $query_string['page'] = $i;\n      echo \"<a style='text-decoration:none' href='?\" . http_build_query($query_string) . \"'>$i</a> \";\n    }\n    echo \"</p>\";\n  }\n}\n\nfunction removeSlashes($data) {\n  return str_replace(\"\\\\\", \"\", $data);\n}\n\nfunction getSessionMessage($name) {\n  if (isset($_SESSION[$name])) {\n    $data = $_SESSION[$name];\n    unset($_SESSION[$name]);\n  }\n  else {\n    $data = \"\";\n  }\n  return $data;\n}\n\nfunction isAdmin() {\n    return isset($_SESSION['loggedin']) && $_SESSION['team']['status'] == \"Admin\";\n}\n\nclass DB {\n\n  public static $connection = null;\n\n  public static function initialize() {\n    if (self::$connection != null)\n      return true;\n    try {\n      self::$connection = new PDO(\"mysql:dbname=\" . SQL_DB . \";host=\" . SQL_HOST . \";port=\" . SQL_PORT . \"\", SQL_USER, SQL_PASS, array(\n                  PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true,\n                  PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n                  PDO::MYSQL_ATTR_INIT_COMMAND => \"SET NAMES utf8\"\n              ));\n      self::$connection->exec(\"SET CHARACTER SET utf8\");\n    }\n    catch (PDOException $error) {\n      self::$connection = null;\n      writeError('DB Connection failed:\\n' . $error->getMessage());\n      die(\"Error creating database connection (error log)!\");\n      return false;\n    }\n    return true;\n  }\n\n  public static function closeConnection() {\n    self::$connection = null;\n    return true;\n  }\n\n  private static function handleError($e = null, $data = \"\") {\n    if ($e != null) {\n      $data .= \"\\nError: \" . $e->getMessage() . \"\\n\" . $e->getFile();\n    }\n    writeError(\"Query error:\\n\" . $data);\n  }\n\n  public static function query($query, $values = null) {\n    if (!self::initialize())\n      return false;\n    try {\n      if (is_array($values)) {\n        $stmt = self::$connection->prepare($query);\n        $stmt->execute($values);\n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n      }\n      else {\n        return self::$connection->query($query);\n      }\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function findAllWithCount($select, $body, $page, $limit) {\n    if (!self::initialize())\n      return false;\n    $countselect = \"SELECT count(*) as count \";\n    $limitquery = \" LIMIT \" . ($page - 1) * $limit . \",\" . $limit;\n    $query = $countselect . $body;\n    $count = self::findOneFromQuery($query);\n    $res['total'] = $count['count'];\n    $res['noofpages'] = ceil($count['count'] * 1.0 / $limit);\n    $query = $select . \" \" . $body . $limitquery;\n    $res['data'] = self::findAllFromQuery($query);\n    return $res;\n  }\n\n  public static function insert($table, $data) {\n    if (!self::initialize())\n      return false;\n    $data['createdOn'] = date(\"Y-m-d H:i:s\");\n    $data['updatedOn'] = date(\"Y-m-d H:i:s\");\n    $keys = array();\n    $values = array();\n    foreach ($data as $key => $value) {\n      $keys[] = $key;\n      $values[] = self::$connection->quote($value);\n    }\n    $query = 'INSERT INTO ' . $table . ' (' . join(', ', $keys) . ') VALUES (' . join(', ', $values) . ')';\n    try {\n      return self::$connection->exec($query);\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function update($table, $data, $where, $values = null) {\n    if (!self::initialize())\n      return false;\n    $data['updatedOn'] = date(\"Y-m-d H:i:s\");\n    $setters = array();\n    foreach ($data as $key => $value) {\n      $setters[] = $key . '=' . self::$connection->quote($value);\n    }\n    $query = 'UPDATE ' . $table . ' SET ' . join(', ', $setters) . ' WHERE ' . $where;\n    try {\n      if (is_array($values)) {\n        $stmt = self::$connection->prepare($query);\n        $stmt->execute($values);\n      }\n      else {\n        $stmt = self::$connection->exec($query);\n      }\n      return $stmt;\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function delete($table, $where) {\n    return self::update($table, array(\"deleted\" => 1), $where);\n  }\n\n  public static function findAllFromQuery($query, $values = null) {\n    if (!self::initialize())\n      return false;\n    try {\n      if (is_array($values)) {\n        $stmt = self::$connection->prepare($query);\n        $stmt->execute($values);\n      }\n      else {\n        $stmt = self::$connection->query($query);\n      }\n      return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function findOneFromQuery($query, $values = null) {\n    if (!self::initialize())\n      return false;\n    try {\n      if (is_array($values)) {\n        $stmt = self::$connection->prepare($query);\n        $stmt->execute($values);\n      }\n      else {\n        $stmt = self::$connection->query($query);\n      }\n      return $stmt->fetch(PDO::FETCH_ASSOC);\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function logActivity($activity, $message, $result) {\n    if (!self::initialize()) {\n      writeError(\"No connection error:\\n\" . $activity . \"\\n\" . $message . \"\\n\" . $result);\n      return false;\n    }\n    $createTable = \"CREATE TABLE IF NOT EXISTS `activity_log` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `activity` text NOT NULL,\n  `message` text NOT NULL,\n  `result` text NOT NULL,\n  `session` text NOT NULL,\n  `createdOn` datetime NOT NULL,\n  `updatedOn` datetime NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n    self::query($createTable);\n    $data = array(\"activity\" => $activity, \"message\" => $message, \"result\" => $result);\n    $table = \"activity_log\";\n    $data['session'] = print_r($_SESSION, true);\n    $data['updatedOn'] = date(\"Y-m-d H:i:s\");\n    $data['createdOn'] = date(\"Y-m-d H:i:s\");\n    return self::insert($table, $data);\n  }\n\n  public static function escape($value) {\n    if (!self::initialize())\n      return false;\n    return self::$connection->quote($value);\n  }\n\n  public static function lastInsertId() {\n    if (!self::initialize())\n      return false;\n    return self::$connection->lastInsertId();\n  }\n\n}\n\n?>\n",
        "gt": [
            "'aurora/Web Interface/functions.php'",
            "'aurora/Web Interface/config.php'",
            "'aurora/Web Interface/pdf.php'"
        ]
    },
    {
        "files": [
            "'twich/www/redis/Rediska/Zend/Session/SaveHandler/Redis.php'",
            "'twich/www/redis/Rediska/Command/Interface.php'",
            "'twich/www/redis/Rediska.php'"
        ],
        "content": "'twich/www/redis/Rediska/Zend/Session/SaveHandler/Redis.php'\n:<?php\n\n\nrequire_once 'Rediska.php';\n\n\nrequire_once 'Rediska/Zend/Session/Set.php';\n\n\nrequire_once 'Zend/Session.php';\n\n\nrequire_once 'Zend/Config.php';\n\n\nrequire_once 'Zend/Session/SaveHandler/Interface.php';\n\n\nrequire_once 'Zend/Session/SaveHandler/Exception.php';\n\n\nclass Rediska_Zend_Session_SaveHandler_Redis implements Zend_Session_SaveHandler_Interface\n{\n\n    protected $_rediska;\n\n\n    protected $_set;\n\n\n    protected $_options = array(\n        'keyprefix'      => 'PHPSESSIONS_',\n        'lifetime'       => null,\n    );\n\n\n    public function __construct($options = array())\n    {\n    \tif ($options instanceof Zend_Config) {\n    \t\t$options = $options->toArray();\n    \t}\n\n\n    \t$this->_options['lifetime'] = (integer)ini_get('session.gc_maxlifetime');\n\n\n        $defaultInstance = Rediska::getDefaultInstance();\n        if ($defaultInstance && !isset($options['rediskaOptions'])) {\n            $this->_rediska = $defaultInstance;\n        } else {\n            $this->_rediska = new Rediska($options['rediskaOptions']);\n            unset($options['rediskaOptions']);\n        }\n\n    \t$this->setOptions($options);\n\n        Rediska_Zend_Session_Set::setSaveHandler($this);\n\n        $this->_set = new Rediska_Zend_Session_Set();\n    }\n\n\n    public function __destruct()\n    {\n        Zend_Session::writeClose();\n    }\n\n\n    public function open($save_path, $name)\n    {\n        return true;\n    }\n\n\n    public function close()\n    {\n        return true;\n    }\n\n\n    public function read($id)\n    {\n        return $this->_rediska->get($this->_getKeyName($id));\n    }\n\n\n    public function write($id, $data)\n    {\n    \t$this->_set[] = $id;\n\n        $reply = $this->_rediska->set($this->_getKeyName($id), $data);\n\n        if ($reply) {\n            $this->_rediska->expire($this->_getKeyName($id), $this->_options['lifetime']);\n        }\n\n        return $reply;\n    }\n\n\n    public function destroy($id)\n    {\n        $this->_set->remove($id);\n\n        $this->_rediska->delete($this->_getKeyName($id));\n\n        return true;\n    }\n\n\n    public function gc($maxlifetime)\n    {\n    \t$sessions = $this->_set->toArray();\n\n    \tif (!empty($sessions)) {\n        \tforeach($sessions as &$session) {\n        \t\t$session = $this->_getKeyName($session);\n        \t}\n\n\n        \t$lifeSession = $this->_rediska->get($sessions);\n        \tforeach($sessions as $session) {\n        \t\tif (!isset($lifeSession[$session])) {\n        \t\t\t$sessionWithoutPrefix = substr($session, strlen($this->_options['keyprefix']));\n        \t\t\t$this->_set->remove($sessionWithoutPrefix);\n        \t\t}\n        \t}\n    \t}\n\n    \treturn true;\n    }\n\n\n    public function setOptions(array $options)\n    {\n        foreach($options as $name => $value) {\n            if (method_exists($this, \"set$name\")) {\n                call_user_func(array($this, \"set$name\"), $value);\n            } else {\n                $this->setOption($name, $value);\n            }\n        }\n\n        return $this;\n    }\n\n\n    public function setOption($name, $value)\n    {\n    \t$lowerName = strtolower($name);\n\n        if (!array_key_exists($lowerName, $this->_options)) {\n            throw new Zend_Session_SaveHandler_Exception(\"Unknown option '$name'\");\n        }\n\n        $this->_options[$lowerName] = $value;\n\n        return $this;\n    }\n\n\n    public function getOption($name)\n    {\n    \t$lowerName = strtolower($name);\n\n        if (!array_key_exists($lowerName, $this->_options)) {\n            throw new Zend_Session_SaveHandler_Exception(\"Unknown option '$name'\");\n        }\n\n        return $this->_options[$lowerName];\n    }\n\n\n    public function setRediska(Rediska $rediska)\n    {\n        $this->_rediska = $rediska;\n\n        return $this;\n    }\n\n\n    public function getRediska()\n    {\n        return $this->_rediska;\n    }\n\n\n    protected function _getKeyName($id)\n    {\n        return $this->_options['keyprefix'] . $id;\n    }\n}\n'twich/www/redis/Rediska/Command/Interface.php'\n:<?php\n\n\ninterface Rediska_Command_Interface\n{\n    public function __construct(Rediska $rediska, $name, $arguments);\n    public function write();\n    public function read();\n    public function isAtomic();\n}\n'twich/www/redis/Rediska.php'\n:<?php\n\n\nrequire_once 'Rediska/Exception.php';\n\n\nrequire_once 'Rediska/Connection.php';\n\n\nrequire_once 'Rediska/Connection/Specified.php';\n\n\nrequire_once 'Rediska/Command/Interface.php';\n\n\nrequire_once 'Rediska/Command/Abstract.php';\n\n\nrequire_once 'Rediska/KeyDistributor/Interface.php';\n\n\nclass Rediska\n{\n    const EOL = \"\\r\\n\";\n\n    const STABLE_REDIS_VERSION = '1.2.6';\n\n\n    protected static $_defaultInstance;\n\n\n    protected $_connections = array();\n\n\n    protected $_specifiedConnection;\n\n\n    protected static $_commands = array(\n\n        'exists'           => 'Rediska_Command_Exists',\n        'delete'           => 'Rediska_Command_Delete',\n        'gettype'          => 'Rediska_Command_GetType',\n        'getkeysbypattern' => 'Rediska_Command_GetKeysByPattern',\n        'getrandomkey'     => 'Rediska_Command_GetRandomKey',\n        'rename'           => 'Rediska_Command_Rename',\n        'getkeyscount'     => 'Rediska_Command_GetKeysCount',\n        'expire'           => 'Rediska_Command_Expire',\n        'getlifetime'      => 'Rediska_Command_GetLifetime',\n        'selectdb'         => 'Rediska_Command_SelectDb',\n        'movetodb'         => 'Rediska_Command_MoveToDb',\n        'flushdb'          => 'Rediska_Command_FlushDb',\n\n\n        'set'       => 'Rediska_Command_Set',\n        'setandget' => 'Rediska_Command_SetAndGet',\n        'get'       => 'Rediska_Command_Get',\n        'increment' => 'Rediska_Command_Increment',\n        'decrement' => 'Rediska_Command_Decrement',\n\n\n        'appendtolist'   => 'Rediska_Command_AppendToList',\n        'prependtolist'  => 'Rediska_Command_PrependToList',\n        'getlistlength'  => 'Rediska_Command_GetListLength',\n        'getlist'        => 'Rediska_Command_GetList',\n        'truncatelist'   => 'Rediska_Command_TruncateList',\n        'getfromlist'    => 'Rediska_Command_GetFromList',\n        'settolist'      => 'Rediska_Command_SetToList',\n        'deletefromlist' => 'Rediska_Command_DeleteFromList',\n        'shiftfromlist'  => 'Rediska_Command_ShiftFromList',\n        'popfromlist'    => 'Rediska_Command_PopFromList',\n\n\n        'addtoset'         => 'Rediska_Command_AddToSet',\n        'deletefromset'    => 'Rediska_Command_DeleteFromSet',\n        'getrandomfromset' => 'Rediska_Command_GetRandomFromSet',\n    \t'getsetlength'     => 'Rediska_Command_GetSetLength',\n        'existsinset'      => 'Rediska_Command_ExistsInSet',\n        'intersectsets'    => 'Rediska_Command_IntersectSets',\n        'unionsets'        => 'Rediska_Command_UnionSets',\n        'diffsets'         => 'Rediska_Command_DiffSets',\n        'getset'           => 'Rediska_Command_GetSet',\n        'movetoset'        => 'Rediska_Command_MoveToSet',\n\n\n        'addtosortedset'             => 'Rediska_Command_AddToSortedSet',\n        'deletefromsortedset'        => 'Rediska_Command_DeleteFromSortedSet',\n        'getsortedset'               => 'Rediska_Command_GetSortedSet',\n        'incrementscoreinsortedset'  => 'Rediska_Command_IncrementScoreInSortedSet',\n        'getrankfromsortedset'       => 'Rediska_Command_GetRankFromSortedSet',\n        'getfromsortedsetbyscore'    => 'Rediska_Command_GetFromSortedSetByScore',\n        'deletefromsortedsetbyscore' => 'Rediska_Command_DeleteFromSortedSetByScore',\n        'deletefromsortedsetbyrank'  => 'Rediska_Command_DeleteFromSortedSetByRank',\n        'getsortedsetlength'         => 'Rediska_Command_GetSortedSetLength',\n        'getscorefromsortedset'      => 'Rediska_Command_GetScoreFromSortedSet',\n        'unionsortedsets'            => 'Rediska_Command_UnionSortedSets',\n        'intersectsortedsets'        => 'Rediska_Command_IntersectSortedSets',\n\n\n        'sort' => 'Rediska_Command_Sort',\n\n\n        'save'                  => 'Rediska_Command_Save',\n        'getlastsavetime'       => 'Rediska_Command_GetLastSaveTime',\n        'info'                  => 'Rediska_Command_Info',\n        'quit'                  => 'Rediska_Command_Quit',\n        'shutdown'              => 'Rediska_Command_Shutdown',\n        'rewriteappendonlyfile' => 'Rediska_Command_RewriteAppendOnlyFile',\n        'slaveof'               => 'Rediska_Command_SlaveOf',\n    );\n\n\n    protected $_keyDistributor;\n\n\n    protected $_options = array(\n        'namespace'           => '',\n        'servers'             => array(\n            array(\n                'host'   => Rediska_Connection::DEFAULT_HOST,\n                'port'   => Rediska_Connection::DEFAULT_PORT,\n                'weight' => Rediska_Connection::DEFAULT_WEIGHT,\n            )\n        ),\n        'serializer'          => 'serialize',\n        'unserializer'        => 'unserialize',\n        'keydistributor'      => 'consistentHashing',\n        'redisversion'        => self::STABLE_REDIS_VERSION,\n    );\n\n\n    public function __construct(array $options = array())\n    {\n    \t$options = array_change_key_case($options, CASE_LOWER);\n        $options = array_merge($this->_options, $options);\n\n\n        $this->setKeyDistributor($options['keydistributor']);\n        unset($options['keydistributor']);\n\n        $this->setOptions($options);\n\n        self::setDefaultInstace($this);\n\n        $this->_specifiedConnection = new Rediska_Connection_Specified($this);\n    }\n\n\n    public static function getDefaultInstance()\n    {\n    \treturn self::$_defaultInstance;\n    }\n\n\n    public static function setDefaultInstace(Rediska $instance)\n    {\n    \tself::$_defaultInstance = $instance;\n    }\n\n\n    public function setOptions(array $options)\n    {\n        foreach($options as $name => $value) {\n            if (method_exists($this, \"set$name\")) {\n                call_user_func(array($this, \"set$name\"), $value);\n            } else {\n                $this->setOption($name, $value);\n            }\n        }\n\n        return $this;\n    }\n\n\n    public function setOption($name, $value)\n    {\n    \t$lowerName = strtolower($name);\n\n        if (!array_key_exists($lowerName, $this->_options)) {\n            throw new Rediska_Exception(\"Unknown option '$name'\");\n        }\n\n        $this->_options[$lowerName] = $value;\n\n        return $this;\n    }\n\n\n    public function getOption($name)\n    {\n    \t$lowerName = strtolower($name);\n\n        if (!array_key_exists($lowerName, $this->_options)) {\n            throw new Rediska_Exception(\"Unknown option '$name'\");\n        }\n\n        return $this->_options[$lowerName];\n    }\n\n\n    public function setServers(array $servers)\n    {\n        $this->_connections = array();\n        foreach($servers as $alias => $serverOptions) {\n            if (!isset($serverOptions['alias']) && is_string($alias)) {\n                $serverOptions['alias'] = $alias;\n            }\n\n            $this->addServer(\n                isset($serverOptions['host']) ? $serverOptions['host'] : Rediska_Connection::DEFAULT_HOST,\n                isset($serverOptions['port']) ? $serverOptions['port'] : Rediska_Connection::DEFAULT_PORT,\n                $serverOptions);\n        }\n\n        return $this;\n    }\n\n\n    public function addServer($host, $port = Rediska_Connection::DEFAULT_PORT, array $options = array())\n    {\n        if (!isset($options['alias'])) {\n            $connectionString = \"$host:$port\";\n        } else {\n            $connectionString = $options['alias'];\n        }\n\n    \tif (array_key_exists($connectionString, $this->_connections)) {\n    \t\tthrow new Rediska_Exception(\"Server '$connectionString' already added.\");\n    \t}\n\n    \t$options['host'] = $host;\n    \t$options['port'] = $port;\n\n    \t$this->_connections[$connectionString] = new Rediska_Connection($options);\n\n        $this->_keyDistributor->addConnection(\n            $connectionString,\n            isset($options['weight']) ? $options['weight'] : Rediska_Connection::DEFAULT_WEIGHT\n        );\n\n        return $this;\n    }\n\n\n    public function getConnectionByKeyName($name)\n    {\n        if (count($this->_connections) == 1) {\n            $connections = array_values($this->_connections);\n            $connection = $connections[0];\n        } else if ($this->_specifiedConnection->getConnection()) {\n            $connection = $this->_specifiedConnection->getConnection();\n        } else {\n            $alias = $this->_keyDistributor->getConnectionByKeyName($name);\n            $connection = $this->_connections[$alias];\n        }\n\n        return $connection;\n    }\n\n\n    public function getConnectionByAlias($alias)\n    {\n        if (!isset($this->_connections[$alias])) {\n            throw new Rediska_Exception(\"Can't find connection '$alias'\");\n        }\n\n        return $this->_connections[$alias];\n    }\n\n\n    public function getConnections()\n    {\n        if ($this->_specifiedConnection->getConnection()) {\n            return array($this->_specifiedConnection->getConnection());\n        } else {\n            return array_values($this->_connections);\n        }\n    }\n\n\n    public function on($aliasOrConnection)\n    {\n        if ($aliasOrConnection instanceof Rediska_Connection) {\n            $connection = $aliasOrConnection;\n        } else {\n            $alias = $aliasOrConnection;\n            $connection = $this->getConnectionByAlias($alias);\n        }\n\n        $this->_specifiedConnection->setConnection($connection);\n\n        return $this->_specifiedConnection;\n    }\n\n\n    public function pipeline()\n    {\n        require_once 'Rediska/Pipeline.php';\n\n        return new Rediska_Pipeline($this, $this->_specifiedConnection);\n    }\n\n\n    public static function addCommand($name, $className)\n    {\n        if (!class_exists($className)) {\n            throw new Rediska_Exception(\"Class '$className' not found. You must include before or setup autoload\");\n        }\n\n\n        $classReflection = new ReflectionClass($className);\n        if (!in_array('Rediska_Command_Interface', $classReflection->getInterfaceNames())) {\n            throw new Rediska_Exception(\"Class '$className' must implement Rediska_Command_Interface interface\");\n        }\n        $methodCreate = $classReflection->getMethod('create');\n        if (!$methodCreate || !$methodCreate->isPublic()) {\n            throw new Rediska_Exception(\"Class '$className' must have public method 'create'\");\n        }\n\n        $lowerName = strtolower($name);\n        self::$_commands[$lowerName] = $className;\n\n        return true;\n    }\n\n\n    public static function removeCommand($name)\n    {\n        $lowerName = strtolower($name);\n        if (!isset(self::$_commands[$lowerName])) {\n            throw new Rediska_Exception(\"Command '$name' not found\");\n        }\n        unset(self::$_commands[$lowerName]);\n\n        return true;\n    }\n\n\n    public function getCommand($name, $arguments)\n    {\n        $lowerName = strtolower($name);\n        if (!isset(self::$_commands[$lowerName])) {\n            throw new Rediska_Exception(\"Command '$name' not found\");\n        }\n\n\n        if (strpos(self::$_commands[$lowerName], 'Rediska_Command_') === 0) {\n            require_once 'Rediska/Command/' . substr(self::$_commands[$lowerName], 16) . '.php';\n        }\n\n\n        return new self::$_commands[$lowerName]($this, $name, $arguments);\n    }\n\n\n    public function __call($name, $args)\n    {\n        $this->_specifiedConnection->resetConnection();\n\n        $command = $this->getCommand($name, $args);\n        $command->write();\n        return $command->read();\n    }\n\n\n    public function setKeyDistributor($name)\n    {\n        if (is_object($name)) {\n            $this->_keyDistributor = $name;\n        } else if (in_array($name, array('crc32', 'consistentHashing'))) {\n            $name = ucfirst($name);\n            require_once \"Rediska/KeyDistributor/$name.php\";\n            $className = \"Rediska_KeyDistributor_$name\";\n            $this->_keyDistributor = new $className;\n        } else {\n            if (!@class_exists($name)) {\n                throw new Rediska_Exception(\"Key distributor '$name' not found. You need include it before or setup autoload.\");\n            }\n            $this->_keyDistributor = new $name;\n        }\n\n        if (!$this->_keyDistributor instanceof Rediska_KeyDistributor_Interface) {\n            throw new Rediska_Exception(\"'$name' must implement Rediska_KeyDistributor_Interface\");\n        }\n\n\n        foreach($this->_connections as $connectionString => $connection) {\n            $this->_keyDistributor->addConnection($connectionString);\n        }\n\n        return $this;\n    }\n\n\n    public function setSerializer($callback)\n    {\n        if (!is_callable($callback)) {\n            throw new Rediska_Exception(\"Wrong serialize callback\");\n        }\n\n        $this->_options['serializer'] = $callback;\n\n        return $this;\n    }\n\n\n    public function setUnserializer($callback)\n    {\n        if (!is_callable($callback)) {\n            throw new Rediska_Exception(\"Wrong unserialize callback\");\n        }\n\n        $this->_options['unserializer'] = $callback;\n\n        return $this;\n    }\n\n\n    public function serialize($value)\n    {\n        if (is_numeric($value)) {\n            return (string)$value;\n        } else {\n            return call_user_func($this->_options['serializer'], $value);\n        }\n    }\n\n\n    public function unserialize($value)\n    {\n        if (is_null($value)) {\n            return null;\n        } else if (is_numeric($value)) {\n            if (strpos($value, '.') !== false) {\n                $number = (integer)$value;\n            } else {\n                $number = (float)$value;\n            }\n\n            if ((string)$number != $value) {\n                $number = $value;\n            }\n\n            return $number;\n        } else {\n            return call_user_func($this->_options['unserializer'], $value);\n        }\n    }\n}",
        "gt": [
            "'twich/www/redis/Rediska/Command/Interface.php'",
            "'twich/www/redis/Rediska.php'",
            "'twich/www/redis/Rediska/Zend/Session/SaveHandler/Redis.php'"
        ]
    },
    {
        "files": [
            "'ZnoteAAC/api/index.php'",
            "'ZnoteAAC/api/module.php'",
            "'ZnoteAAC/api/api.php'",
            "'ZnoteAAC/engine/function/general.php'"
        ],
        "content": "'ZnoteAAC/api/index.php'\n:<?php $filepath = '../'; require_once 'module.php';\n\n\n$directory = 'modules';\n$plugins = array();\n\n\n$plugins['base'] = array(\n\t'player' => 'test.php'\n);\n\n$iterator = new DirectoryIterator($directory);\nforeach($iterator as $entity) {\n\tif($entity->isDot())\n\t\tcontinue;\n\t$iterator = new DirectoryIterator($entity->getPathname());\n\tforeach($iterator as $entity) {\n\t\tif($entity->isFile()) {\n\t\t\t$file_extension = pathinfo($entity->getFilename(), PATHINFO_EXTENSION);\n\t\t\tif ($file_extension == 'php') {\n\t\t\t\t$path = explode('/', $entity->getPathname());\n\t\t\t\tif (count($path) === 1) $path = explode('\\\\', $entity->getPathname());\n\t\t\t\t$plugins[$path[1]] = $path[2];\n\t\t\t}\n\t\t}\n\t}\n}\n\n$response['modules'] = $plugins;\n$response['data']['title'] = $config['site_title'];\n$response['data']['slogan'] = $config['site_title_context'];\n$response['data']['time'] = getClock(time(), false, true);\n$response['data']['time_formatted'] = getClock(time(), true, true);\n\n\n$accounts = mysql_select_single(\"SELECT COUNT('id') AS `count` FROM `accounts`;\");\n$response['data']['accounts'] = ($accounts !== false) ? (int)$accounts['count'] : 0;\n\n$players = mysql_select_single(\"SELECT COUNT('id') AS `count` FROM `players`;\");\n$response['data']['players'] = ($players !== false) ? (int)$players['count'] : 0;\n\nif ($config['ServerEngine'] != 'TFS_10') {\n\t$online = mysql_select_single(\"SELECT COUNT('id') AS `count`, COUNT(DISTINCT `lastip`) AS `unique` FROM `players` WHERE `online`='1';\");\n} else {\n\t$online = mysql_select_single(\"SELECT COUNT(`o`.`player_id`) AS `count`, COUNT(DISTINCT `p`.`lastip`) AS `unique` FROM `players_online` AS `o` INNER JOIN `players` AS `p` ON `o`.`player_id` = `p`.`id`;\");\n}\n$response['data']['online'] = ($online !== false) ? (int)$online['count'] : 0;\n$response['data']['online_unique_ip'] = ($online !== false) ? (int)$online['unique'] : 0;\n$response['data']['client'] = $config['client'];\n$response['data']['port'] = $config['port'];\n$response['data']['guildwar'] = $config['guildwar_enabled'];\n$response['data']['forum'] = $config['forum']['enabled'];\n\nSendResponse($response);\n?>\n'ZnoteAAC/api/module.php'\n:<?php if (!isset($filepath)) $filepath = '../../../';\n$moduleVersion = 1;\nrequire 'api.php'; ?>\n'ZnoteAAC/api/api.php'\n:<?php\n\nif (version_compare(phpversion(), '5.6', '<')) die('PHP version 5.6 or higher is required.');\nif (!isset($filepath)) $filepath = '../';\n\n$version = '1.6';\nsession_start();\nob_start();\nrequire_once $filepath.'config.php';\nrequire_once $filepath.'engine/database/connect.php';\nrequire_once $filepath.'engine/function/general.php';\nrequire_once $filepath.'engine/function/cache.php';\n\n\nif (!isset($config['api']['debug'])) $config['api']['debug'] = false;\n\n$response = array(\n\t'version' => array(\n\t\t'znote' => $version,\n\t\t'ot' => $config['ServerEngine']\n\t),\n);\n\nif (isset($moduleVersion)) $response['version']['module'] = $moduleVersion;\n\nfunction UseClass($name = false, $module = false, $path = false) {\n\tif ($name !== false) {\n\t\tif (!is_array($name)) {\n\t\t\tif (!$module) $module = $name;\n\t\t\tif (!$path) require_once \"modules/base/{$module}/class/{$name}.php\";\n\t\t\telse require_once \"{$path}/{$name}.php\";\n\t\t} else {\n\t\t\tforeach ($name as $class) {\n\t\t\t\tif (!$module) $module = $class;\n\t\t\t\tif (!$path) require_once \"modules/base/{$module}/class/{$class}.php\";\n\t\t\t\telse require_once \"{$path}/{$class}.php\";\n\t\t\t}\n\t\t}\n\t} else die('Error in function UseClass: class parameter is false.');\n}\n\nfunction SendResponse($response) {\n\tglobal $config;\n\tif ($config['api']['debug'] || isset($_GET['debug'])) data_dump($response, false, \"Response (debug mode)\");\n\telse echo json_encode($response);\n}\n?>\n'ZnoteAAC/engine/function/general.php'\n:<?php\n\nfunction setSession($key, $data) {\n\tglobal $sessionPrefix;\n\t$_SESSION[$sessionPrefix.$key] = $data;\n}\nfunction getSession($key) {\n\tglobal $sessionPrefix;\n\treturn (isset($_SESSION[$sessionPrefix.$key])) ? $_SESSION[$sessionPrefix.$key] : false;\n}\n\nfunction getValue($value) {\n\treturn (!empty($value)) ? sanitize($value) : false;\n}\n\nfunction SendGet($getArray, $location = 'error.php') {\n\t$string = \"\";\n\t$count = 0;\n\tforeach ($getArray as $getKey => $getValue) {\n\t\tif ($count > 0) $string .= '&';\n\t\t$string .= \"{$getKey}={$getValue}\";\n\t}\n\theader(\"Location: {$location}?{$string}\");\n\texit();\n}\n\n\nfunction data_dump($print = false, $var = false, $title = false) {\n\tif ($title !== false) echo \"<pre><font color='red' size='5'>$title</font><br>\";\n\telse echo '<pre>';\n\tif ($print !== false) {\n\t\techo 'Print: - ';\n\t\tprint_r($print);\n\t\techo \"<br>\";\n\t}\n\tif ($var !== false) {\n\t\techo 'Var_dump: - ';\n\t\tvar_dump($var);\n\t}\n\techo '</pre><br>';\n}\n\nfunction accountAccess($accountId, $TFS) {\n\t$accountId = (int)$accountId;\n\t$access = 0;\n\n\n\t$yourChars = mysql_select_multi(\"SELECT `name`, `group_id`, `account_id` FROM `players` WHERE `account_id`='$accountId';\");\n\tif ($yourChars !== false) {\n\t\tforeach ($yourChars as $char) {\n\t\t\tif ($TFS === 'TFS_03' || $TFS === 'OTHIRE') {\n\t\t\t\tif ($char['group_id'] > $access) $access = $char['group_id'];\n\t\t\t} else {\n\t\t\t\tif ($char['group_id'] > 1) {\n\t\t\t\t\tif ($access == 0) {\n\t\t\t\t\t\t$acc = mysql_select_single(\"SELECT `type` FROM `accounts` WHERE `id`='\". $char['account_id'] .\"' LIMIT 1;\");\n\t\t\t\t\t\t$access = $acc['type'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($access == 0) $access++;\n\t\treturn $access;\n\t} else return false;\n\n}\n\nfunction generate_recovery_key($lenght) {\n\t$lenght = (int)$lenght;\n\t$tmp = rand(1000, 9000);\n\t$tmp += time();\n\t$tmp = sha1($tmp);\n\n\t$results = '';\n\tfor ($i = 0; $i < $lenght; $i++) $results = $results.''.$tmp[$i];\n\n\treturn $results;\n}\n\n\nfunction calculate_discount($orig, $new) {\n\t$orig = (int)$orig;\n\t$new = (int)$new;\n\n\t$tmp = '';\n\tif ($new >= $orig) {\n\t\tif ($new != $orig) {\n\t\t\t$calc = ($new/$orig) - 1;\n\t\t\t$calc *= 100;\n\t\t\t$tmp = '+'. floor($calc) .'%';\n\t\t} else $tmp = '0%';\n\t} else {\n\t\t$calc = 1 - ($new/$orig);\n\t\t$calc *= 100;\n\t\t$tmp = '-'. floor($calc) .'%';\n\t}\n\treturn $tmp;\n}\n\n\nfunction url($path = false) {\n\t$folder   = dirname($_SERVER['SCRIPT_NAME']);\n\treturn config('site_url') . '/' . $path;\n}\n\nfunction getCache() {\n\t$results = mysql_select_single(\"SELECT `cached` FROM `znote`;\");\n\treturn ($results !== false) ? $results['cached'] : false;\n}\n\nfunction setCache($time) {\n\t$time = (int)$time;\n\tmysql_update(\"UPDATE `znote` set `cached`='$time'\");\n}\n\n\nfunction znote_visitors_get_data() {\n\treturn mysql_select_multi(\"SELECT `ip`, `value` FROM `znote_visitors` ORDER BY `id` DESC LIMIT 1000;\");\n}\n\n\nfunction znote_visitor_set_data($visitor_data) {\n\t$exist = false;\n\t$ip = getIPLong();\n\n\tforeach ((array)$visitor_data as $row) {\n\t\tif ($ip == $row['ip']) {\n\t\t\t$exist = true;\n\t\t\t$value = $row['value'];\n\t\t}\n\t}\n\n\tif ($exist && isset($value)) {\n\n\t\t$value++;\n\t\tmysql_update(\"UPDATE `znote_visitors` SET `value` = '$value' WHERE `ip` = '$ip'\");\n\t} else {\n\n\t\tmysql_insert(\"INSERT INTO `znote_visitors` (`ip`, `value`) VALUES ('$ip', '1')\");\n\t}\n}\n\n\nfunction znote_visitors_get_detailed_data($cache_time) {\n\t$period = (int)time() - (int)$cache_time;\n\treturn mysql_select_multi(\"SELECT `ip`, `time`, `type`, `account_id` FROM `znote_visitors_details` WHERE `time` >= '$period' LIMIT 0, 50\");\n}\n\nfunction znote_visitor_insert_detailed_data($type) {\n\t$type = (int)$type;\n\n\t$time = time();\n\t$ip = getIPLong();\n\tif (user_logged_in()) {\n\t\t$acc = (int)getSession('user_id');\n\t\tmysql_insert(\"INSERT INTO `znote_visitors_details` (`ip`, `time`, `type`, `account_id`) VALUES ('$ip', '$time', '$type', '$acc')\");\n\t} else mysql_insert(\"INSERT INTO `znote_visitors_details` (`ip`, `time`, `type`, `account_id`) VALUES ('$ip', '$time', '$type', '0')\");\n}\n\nfunction something () {\n\n\t$ip = getIPLong();\n}\n\n\nfunction create_token() {\n\techo 'Checking whether to create token or not<br />';\n\n\t\techo 'Creating token<br />';\n\t\t$token = sha1(uniqid(time(), true));\n\t\t$token2 = $token;\n\t\tvar_dump($token, $token2);\n\t\t$_SESSION['token'] = $token2;\n\n\n\techo \"<input type=\\\"hidden\\\" name=\\\"token\\\" value=\\\"\". $_SESSION['token'] .\"\\\" />\";\n}\nfunction reset_token() {\n\techo 'Reseting token<br />';\n\tunset($_SESSION['token']);\n}\n\n\n\nfunction second_to_minute($seconds) {\n\treturn ($seconds / 60);\n}\n\n\nfunction minute_to_seconds($minutes) {\n\treturn ($minutes * 60);\n}\n\n\nfunction minute_to_hour($minutes) {\n\treturn ($minutes / 60);\n}\n\n\nfunction hour_to_minute($hours) {\n\treturn ($hour * 60);\n}\n\n\nfunction seconds_to_hours($seconds) {\n\t$minutes = second_to_minute($seconds);\n\t$hours = minute_to_hour($minutes);\n\treturn $hours;\n}\n\nfunction remaining_seconds_to_clock($seconds) {\n\treturn date(\"(H:i)\",time() + $seconds);\n}\n\n\nfunction validate_name($string) {\n\treturn (str_word_count(trim($string)) > config('maxW')) ? false : trim($string);\n}\n\n\nfunction validate_ip($ip) {\n\t$ipL = safeIp2Long($ip);\n\t$ipR = long2ip((int)$ipL);\n\n\tif ($ip === $ipR) {\n\t\treturn true;\n\t} elseif ($ip=='::1')  {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\nfunction config($value) {\n\tglobal $config;\n\treturn $config[$value];\n}\n\n\n\nfunction fullConfig() {\n\tglobal $config;\n\treturn $config;\n}\n\n\nfunction format_character_name($name) {\n\treturn ucwords(strtolower($name));\n}\n\n\nfunction getIP() {\n\nreturn $_SERVER['REMOTE_ADDR'];\n}\n\nfunction safeIp2Long($ip) {\n\treturn sprintf('%u', ip2long($ip));\n}\n\n\nfunction getIPLong() {\n\treturn safeIp2Long(getIP());\n}\n\n\nfunction array_length($ar) {\n\t$r = 1;\n\tforeach($ar as $a) {\n\t\t$r++;\n\t}\n\treturn $r;\n}\n\nfunction level_to_experience($level) {\n\treturn 50/3*(pow($level, 3) - 6*pow($level, 2) + 17*$level - 12);\n}\n\n\nfunction hide_char_to_name($id) {\n\t$id = (int)$id;\n\tif ($id == 1) {\n\t\treturn 'hidden';\n\t} else {\n\t\treturn 'visible';\n\t}\n}\n\n\nfunction online_id_to_name($id) {\n\t$id = (int)$id;\n\tif ($id == 1) {\n\t\treturn '<font class=\"status_online\">ONLINE</font>';\n\t} else {\n\t\treturn '<font class=\"status_offline\">offline</font>';\n\t}\n}\n\n\nfunction vocation_id_to_name($id) {\n\t$vocations = config('vocations');\n\treturn (isset($vocations[$id]['name'])) ? $vocations[$id]['name'] : \"{$id} - Unknown\";\n}\n\n\nfunction vocation_name_to_id($name) {\n\t$vocations = config('vocations');\n\tforeach ($vocations as $id => $vocation)\n\t\tif ($vocation['name'] == $name)\n\t\t\treturn $id;\n\treturn false;\n}\n\n\nfunction group_id_to_name($id) {\n\t$positions = config('ingame_positions');\n\treturn ($positions[$id] >= 0) ? $positions[$id] : false;\n}\n\nfunction gender_exist($gender) {\n\n\tif ($gender >= 0 && $gender <= 1) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nfunction skillid_to_name($skillid) {\n\t$skillname = array(\n\t\t0 => 'fist fighting',\n\t\t1 => 'club fighting',\n\t\t2 => 'sword fighting',\n\t\t3 => 'axe fighting',\n\t\t4 => 'distance fighting',\n\t\t5 => 'shielding',\n\t\t6 => 'fishing',\n\t\t7 => 'experience',\n\t\t8 => 'magic level'\n\t);\n\n\treturn ($skillname[$skillid] >= 0) ? $skillname[$skillid] : false;\n}\n\n\nfunction town_id_to_name($id) {\n\t$towns = config('towns');\n\treturn (array_key_exists($id, $towns)) ? $towns[$id] : 'Missing Town';\n}\n\n\nfunction email($to, $subject, $body) {\n\tmail($to, $subject, $body, 'From: TEST');\n}\n\nfunction logged_in_redirect() {\n\tif (user_logged_in() === true) {\n\t\theader('Location: myaccount.php');\n\t}\n}\n\nfunction protect_page() {\n\tif (user_logged_in() === false) {\n\t\theader('Location: protected.php');\n\t\texit();\n\t}\n}\n\n\nfunction admin_only($user_data) {\n\n\t$gotAccess = is_admin($user_data);\n\n\tif ($gotAccess == false) {\n\t\tlogged_in_redirect();\n\t\texit();\n\t}\n}\n\nfunction is_admin($user_data) {\n\tif (config('ServerEngine') === 'OTHIRE')\n\t\treturn in_array($user_data['id'], config('page_admin_access')) ? true : false;\n\telse\n\t\treturn in_array($user_data['name'], config('page_admin_access')) ? true : false;\n}\n\nfunction array_sanitize(&$item) {\n\t$item = htmlentities(strip_tags(mysql_znote_escape_string($item)));\n}\n\nfunction sanitize($data) {\n\treturn htmlentities(strip_tags(mysql_znote_escape_string($data)));\n}\n\nfunction output_errors($errors) {\n\treturn '<ul><li>'. implode('</li><li>', $errors) .'</li></ul>';\n}\n\n\n\nfunction resize_imagex($file, $width, $height) {\n\n\tlist($w, $h) = getimagesize($file['tmp']);\n\n\t$ratio = max($width/$w, $height/$h);\n\t$h = ceil($height / $ratio);\n\t$x = ($w - $width / $ratio) / 2;\n\t$w = ceil($width / $ratio);\n\n\t$path = 'engine/guildimg/'.$file['new_name'];\n\n\t$imgString = file_get_contents($file['tmp']);\n\n\t$image = imagecreatefromstring($imgString);\n\t$tmp = imagecreatetruecolor($width, $height);\n\timagecopyresampled($tmp, $image,\n\t    0, 0,\n\t    $x, 0,\n\t    $width, $height,\n\t    $w, $h);\n\n\timagegif($tmp, $path);\n\timagedestroy($image);\n\timagedestroy($tmp);\n\n\treturn true;\n}\n\n\nfunction check_image($image) {\n\n\t$image_data = array('new_name' => $_GET['name'].'.gif', 'name' => $image['name'], 'tmp' => $image['tmp_name'], 'error' => $image['error'], 'size' => $image['size'], 'type' => $image['type']);\n\n\n\tif ($image_data['type'] === 'image/gif') {\n\n\n\t\t$check = getimagesize($image_data['tmp']);\n\n\t\tif ($check) {\n\n\n\t\t\tif ($check['mime'] === 'image/gif') {\n\n\t\t\t\t$path_info = pathinfo($image_data['name']);\n\n\n\t\t\t\tif ($path_info['extension'] === 'gif') {\n\n\n\t\t\t\t\t$img = resize_imagex($image_data, 100, 100);\n\n\t\t\t\t\tif ($img) {\n\n\t\t\t\t\t\theader('Location: guilds.php?name='. $_GET['name']);\n\t\t\t\t\t\texit();\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\theader('Location: guilds.php?error=Only gif images accepted, you uploaded:['.$path_info['extension'].'].&name='. $_GET['name']);\n\t\t\t\t\texit();\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\theader('Location: guilds.php?error=Only gif images accepted, you uploaded:['.$check['mime'].'].&name='. $_GET['name']);\n\t\t\t\texit();\n\t\t\t}\n\n\t\t} else {\n\n\t\t\theader('Location: guilds.php?error=Uploaded image is invalid.&name='. $_GET['name']);\n\t\t\texit();\n\t\t}\n\n\t} else {\n\n\t\theader('Location: guilds.php?error=Only gif images are accepted, you uploaded:['.$image_data['type'].'].&name='. $_GET['name']);\n\t\texit();\n\t}\n}\n\n\nfunction logo_exists($guild) {\n\t$guild = sanitize($guild);\n\tif (file_exists('engine/guildimg/'.$guild.'.gif')) {\n\n\t\techo'engine/guildimg/'.$guild.'.gif';\n\n\t} else {\n\n\t\techo'engine/guildimg/default@logo.gif';\n\t}\n}\n\nfunction generateRandomString($length = 16) {\n\t$characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n\t$charactersLength = strlen($characters);\n\t$randomString = '';\n\tfor ($i = 0; $i < $length; $i++) {\n\t\t$randomString .= $characters[rand(0, $charactersLength - 1)];\n\t}\n\treturn $randomString;\n}\n\nfunction verifyGoogleReCaptcha($postResponse = null) {\n\tif(!isset($postResponse) || empty($postResponse)) {\n\t\treturn false;\n\t}\n\n\t$recaptcha_api_url = 'https:\n\t$secretKey = config('captcha_secret_key');\n\t$ip = $_SERVER['REMOTE_ADDR'];\n\t$params = 'secret='.$secretKey.'&response='.$postResponse.'&remoteip='.$ip;\n\n\t$useCurl = config('captcha_use_curl');\n\tif($useCurl) {\n\t\t$curl_connection = curl_init($recaptcha_api_url);\n\n\t\tcurl_setopt($curl_connection, CURLOPT_CONNECTTIMEOUT, 5);\n\t\tcurl_setopt($curl_connection, CURLOPT_RETURNTRANSFER, true);\n\t\tcurl_setopt($curl_connection, CURLOPT_SSL_VERIFYPEER, false);\n\t\tcurl_setopt($curl_connection, CURLOPT_FOLLOWLOCATION, 0);\n\t\tcurl_setopt($curl_connection, CURLOPT_POSTFIELDS, $params);\n\n\t\t$response = curl_exec($curl_connection);\n\t\tcurl_close($curl_connection);\n\t} else {\n\t\t$response = file_get_contents($recaptcha_api_url . '?' . $params);\n\t}\n\n\t$json = json_decode($response);\n\treturn isset($json->success) && $json->success;\n}\n\n\nfunction hhb_tohtml( $str) {\n\treturn htmlentities($str, ENT_QUOTES | ENT_HTML401 | ENT_SUBSTITUTE | ENT_DISALLOWED, 'UTF-8', true);\n}\n\n\n\nfunction random_bytes_compat($length, &$crypto_strong = null) {\n    $crypto_strong = false;\n    if (!is_int($length)) {\n        throw new \\InvalidArgumentException(\"argument 1 must be an int, is \" . gettype($length));\n    }\n    if ($length < 0) {\n        throw new \\InvalidArgumentException(\"length must be >= 0\");\n    }\n    if (is_callable(\"random_bytes\")) {\n        $crypto_strong = true;\n        return random_bytes($length);\n    }\n    if (is_callable(\"openssl_random_pseudo_bytes\")) {\n        return openssl_random_pseudo_bytes($length, $crypto_strong);\n    }\n    $ret = @file_get_contents(\"/dev/urandom\", false, null, 0, $length);\n    if (is_string($ret) && strlen($ret) === $length) {\n        $crypto_strong = true;\n        return $ret;\n    }\n\n    $crypto_strong = false;\n    $ret = \"\";\n    for ($i = 0; $i < $length; ++$i) {\n        $ret .= chr(mt_rand(0, 255));\n    }\n    return $ret;\n}\n\n\nif(!function_exists('hash_equals')) {\n    function hash_equals($str1, $str2) {\n        if(strlen($str1) != strlen($str2)) {\n            return false;\n        }\n\t\t$res = $str1 ^ $str2;\n\t\t$ret = 0;\n\t\tfor($i = strlen($res) - 1; $i >= 0; $i--) {\n\t\t\t$ret |= ord($res[$i]);\n\t\t}\n\t\treturn !$ret;\n    }\n}\n?>\n",
        "gt": [
            "'ZnoteAAC/engine/function/general.php'",
            "'ZnoteAAC/api/api.php'",
            "'ZnoteAAC/api/module.php'",
            "'ZnoteAAC/api/index.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'",
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'\n:<?php\n\n\n\nnamespace Composer\\Autoload;\n\n\nclass ClassLoader\n{\n\n    private $prefixLengthsPsr4 = array();\n    private $prefixDirsPsr4 = array();\n    private $fallbackDirsPsr4 = array();\n\n\n    private $prefixesPsr0 = array();\n    private $fallbackDirsPsr0 = array();\n\n    private $useIncludePath = false;\n    private $classMap = array();\n\n    public function getPrefixes()\n    {\n        return call_user_func_array('array_merge', $this->prefixesPsr0);\n    }\n\n    public function getPrefixesPsr4()\n    {\n        return $this->prefixDirsPsr4;\n    }\n\n    public function getFallbackDirs()\n    {\n        return $this->fallbackDirsPsr0;\n    }\n\n    public function getFallbackDirsPsr4()\n    {\n        return $this->fallbackDirsPsr4;\n    }\n\n    public function getClassMap()\n    {\n        return $this->classMap;\n    }\n\n\n    public function addClassMap(array $classMap)\n    {\n        if ($this->classMap) {\n            $this->classMap = array_merge($this->classMap, $classMap);\n        } else {\n            $this->classMap = $classMap;\n        }\n    }\n\n\n    public function add($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n            if ($prepend) {\n                $this->fallbackDirsPsr0 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr0\n                );\n            } else {\n                $this->fallbackDirsPsr0 = array_merge(\n                    $this->fallbackDirsPsr0,\n                    (array) $paths\n                );\n            }\n\n            return;\n        }\n\n        $first = $prefix[0];\n        if (!isset($this->prefixesPsr0[$first][$prefix])) {\n            $this->prefixesPsr0[$first][$prefix] = (array) $paths;\n\n            return;\n        }\n        if ($prepend) {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixesPsr0[$first][$prefix]\n            );\n        } else {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                $this->prefixesPsr0[$first][$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function addPsr4($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n\n            if ($prepend) {\n                $this->fallbackDirsPsr4 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr4\n                );\n            } else {\n                $this->fallbackDirsPsr4 = array_merge(\n                    $this->fallbackDirsPsr4,\n                    (array) $paths\n                );\n            }\n        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {\n\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        } elseif ($prepend) {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixDirsPsr4[$prefix]\n            );\n        } else {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                $this->prefixDirsPsr4[$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function set($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr0 = (array) $paths;\n        } else {\n            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setPsr4($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr4 = (array) $paths;\n        } else {\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setUseIncludePath($useIncludePath)\n    {\n        $this->useIncludePath = $useIncludePath;\n    }\n\n\n    public function getUseIncludePath()\n    {\n        return $this->useIncludePath;\n    }\n\n\n    public function register($prepend = false)\n    {\n        spl_autoload_register(array($this, 'loadClass'), true, $prepend);\n    }\n\n\n    public function unregister()\n    {\n        spl_autoload_unregister(array($this, 'loadClass'));\n    }\n\n\n    public function loadClass($class)\n    {\n        if ($file = $this->findFile($class)) {\n            includeFile($file);\n\n            return true;\n        }\n    }\n\n\n    public function findFile($class)\n    {\n\n        if ('\\\\' == $class[0]) {\n            $class = substr($class, 1);\n        }\n\n\n        if (isset($this->classMap[$class])) {\n            return $this->classMap[$class];\n        }\n\n        $file = $this->findFileWithExtension($class, '.php');\n\n\n        if ($file === null && defined('HHVM_VERSION')) {\n            $file = $this->findFileWithExtension($class, '.hh');\n        }\n\n        if ($file === null) {\n\n            return $this->classMap[$class] = false;\n        }\n\n        return $file;\n    }\n\n    private function findFileWithExtension($class, $ext)\n    {\n\n        $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . $ext;\n\n        $first = $class[0];\n        if (isset($this->prefixLengthsPsr4[$first])) {\n            foreach ($this->prefixLengthsPsr4[$first] as $prefix => $length) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($this->prefixDirsPsr4[$prefix] as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $length))) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr4 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {\n                return $file;\n            }\n        }\n\n\n        if (false !== $pos = strrpos($class, '\\\\')) {\n\n            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)\n                . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);\n        } else {\n\n            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;\n        }\n\n        if (isset($this->prefixesPsr0[$first])) {\n            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($dirs as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr0 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                return $file;\n            }\n        }\n\n\n        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {\n            return $file;\n        }\n    }\n}\n\n\nfunction includeFile($file)\n{\n    include $file;\n}\n\n'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'MarginBot/index.php'",
            "'MarginBot/inc/header.php'",
            "'MarginBot/inc/ExchangeAPIs/bitfinex.php'"
        ],
        "content": "'MarginBot/index.php'\n:<?\nrequire_once('inc/header.php');\n\n$gen->showWarnings($warning);\n$gen->showAlerts($alert);\n$gen->showNotice($notice);\n\n\n\n\n$pages->showPage();\n\n\n\nrequire_once('inc/footer.php');\n?>\n'MarginBot/inc/header.php'\n:<?\n\n\nerror_reporting(E_ALL & ~E_NOTICE);\nheader( 'Content-type: text/html; charset=utf-8' );\n\n\nrequire_once(\"config.php\");\nif($config['db']['host'] == ''){\n\n\tif (!headers_sent()){\n\t\theader('Location: install.php');\n\t\texit;\n\t}\n\n\telse{\n\t\techo '<script>window.location = \"install.php\";</script>';\n\t\texit;\n\t}\n\n}\n\n\n$alert = array();\n$warning = array();\n$notice = array();\n\n\nrequire_once(\"database.php\");\n$db = new Database();\n\n\n\nrequire_once(\"General.php\");\n$gen = new General();\n\nrequire_once(\"Pages.php\");\n$pages = new Pages();\n\n\n\nrequire_once(\"Accounts.php\");\n$act = new Accounts();\n\nrequire_once('ExchangeAPIs/bitfinex.php');\n\n\nrequire_once(\"PasswordHash.php\");\n$hasher = new PasswordHash(8, false);\n\n\nif($_REQUEST['doLogout']==1){\n\t$act->doLogoutUser();\n}\nelse{\n\tif($_REQUEST['login_email']){\n\n\t\tif(!$act->doLoginUser()){\n\t\t\t$pages->activePage = 'doLogin';\n\t\t}\n\t}\n\telse if(!$act->checkLoggedUser()){\n\n\t\t$pages->activePage = 'doLogin';\n\t}\n\n\n\tif(isset($_SESSION['userid'])){\n\n\n\n\t\t$accounts[$act->userid] = $act;\n\n\t\tif($act->sts == 9 || $act->sts == 8 ){\n\t\t\t$act->getAllAccounts();\n\t\t}\n\n\n\n\t\tif($_REQUEST['new_name']){\n\t\t\t$accStep = $act->doAddAccount();\n\t\t}\n\n\t\tif($_REQUEST['doUpdate']==1){\n\t\t\t$accounts[$_REQUEST['userid']]->updateSettings();\n\t\t}\n\n\t\tif($_REQUEST['doUpdateExtract']==1){\n\t\t\t$accounts[$_REQUEST['userid']]->updateExtractSettings();\n\t\t}\n\t}\n\n}\n\n\n$gen->checkCronStatus();\n\n\n?>\n<!DOCTYPE html>\n<html xmlns=\"http:\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title><?=($pages->title ? $config['app_name'].' '.$config['app_version'].'.'.$config['app_version_minor'].' - '.$pages->title : $config['app_name'].' '.$config['app_version'].'.'.$config['app_version_minor']);?></title>\n\n\t<script type=\"text/javascript\" src=\"https:\n\t<script type=\"text/javascript\" src=\"https:\n    <script type=\"text/javascript\" src=\"js/jquery.formatCurrency-1.4.0.min.js\"></script>\n    <!-- Highcharts, for the stats page -->\n    <script src=\"https:\n\t<script src=\"https:\n\n    <!-- Bootstrap -->\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\n\t<link href=\"css/bootstrap-theme.min.css\" rel=\"stylesheet\">\n\n    <!-- Custom styles for this template -->\n    <link href=\"css/styles.css\" rel=\"stylesheet\">\n\n    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:\n    <!--[if lt IE 9]>\n      <script src=\"https:\n      <script src=\"https:\n    <![endif]-->\n    <link href=\"favicon.ico\" rel=icon>\n</head>\n<body>\n\n\n<? if($_SESSION['userid']!=''){ ?>\n<nav class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\n      <div class=\"container\">\n        <div class=\"navbar-header\">\n          <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </button>\n          <a class=\"navbar-brand\" href=\"index.php\" title=\"Version <?=$config['app_version'].'.'.$config['app_version_minor'];?>\"><img src=\"img/MarginBotLogo.png\" alt=\"MarginBot\" class=\"img-responsive center-block\" style=\"width:250px;\"></a>\n        </div>\n        <div id=\"navbar\" class=\"navbar-collapse collapse\">\n\n\n\n          <ul class=\"nav navbar-nav\">\n          \t <li class=\"dropdown\">\n              <a href=\"\n              <ul class=\"dropdown-menu\" role=\"menu\">\n              <?=$gen->showCurrencyNav();?>\n\n              </ul>\n            </li>\n\n\n\n\n\n\n            <? if($act->sts == 9 || $act->sts == 8){ ?>\n            <li class=\"<?=($pages->activePage == 'addAct' ? 'active' : '');?>\"><a href=\"index.php?page=addAct\">Add Account</a></li>\n            <? } ?>\n\n            <li class=\"dropdown <?=($pages->activePage == 'viewReturns' || $pages->activePage == 'grabHistory' ? 'active' : '');?>\">\n              <a href=\"\n              <ul class=\"dropdown-menu\" role=\"menu\">\n              \t<?=$gen->showReturnsNav();?>\n                <li><a href=\"index.php?page=grabHistory\">Grab Return History From Bitfinex</a></li>\n              </ul>\n            </li>\n\n\n            <li style=\"padding:8px 30px 0px 30px;\">\n            \t<button type=\"button\" class=\"btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"\n                  Sign Up For Bitfinex 10% Off Fees\n                </button>\n            </li>\n\n            <li style=\"padding:8px 30px 0px 30px;\">\n            \t<button type=\"button\" class=\"btn btn-default btn-sm\" data-toggle=\"modal\" data-target=\"\n                  Support Development\n                </button>\n            </li>\n            <li class=\"dropdown\">\n              <a href=\"\n              <ul class=\"dropdown-menu\" role=\"menu\">\n                <li><a href=\"mailto:<?=$config['app_support_email'];?>\">Email</a></li>\n                <li><a href=\"<?=$config['app_support_url'];?>\">Forums</a></li>\n              </ul>\n            </li>\n            <li><a href=\"index.php?doLogout=1\">Logout</a></li>\n          </ul>\n\n        </div><!--/.nav-collapse -->\n      </div>\n    </nav>\n <? } ?>\n\n<?\n$gen->showSiteModals();\n\n\n$configFile = getcwd().'/inc/config.php';\nif (is_writable($configFile) && $_SESSION['userid']!='') {$warning[] = \"Your Config File Seems to be writable.  You should change this to read only for security reasons!<br> (chmod 644 \".$configFile.\" )\";}\n\n\n$installFile = getcwd().'/install.php';\nif (file_exists($installFile) && $_SESSION['userid']!='') {$notice[] = \"Your Install File Seems to still exist.  Its probably a good idea to delete this file, as you won't need it anymore and it could be a secuirty issue.<br>  (Delete the file \".$installFile.\" )\";}\n\n\n?>\n\n<div class=\"container\">\n\n'MarginBot/inc/ExchangeAPIs/bitfinex.php'\n:<?php\nclass Bitfinex{\n\n\tvar $userid;\n\tvar $apiKey;\n\tvar $apiSec;\n\tvar $nonceInc;\n\n\n\n\n\n\tvar $cryptoBalance = array();\n\tvar $cryptoAvailable = array();\n\n\tvar $cryptoPendingVal = array();\n\tvar $cryptoPendingLends = array();\n\tvar $cryptoPendingOffers = array();\n\tvar $cryptoPendingAvg = array();\n\tvar $cryptoPendingIDS = array();\n\tvar $cryptoCurrentLends = array();\n\tvar $cryptoCurrentLendVal = array();\n\tvar $cryptoCurrentLendAvg = array();\n\n\n\tvar $cryptoCurPrice = array();\n\n\n\n\n\tvar $actSettings = array();\n\n\n\tvar $lendbook = array();\n\n\n    public function __construct($userid, $apiKey, $apiSec, $nonce=0) {\n    \tglobal $config, $db;\n\t\t$this->userid = $userid;\n        $this->apiKey = $apiKey;\n        $this->apiSec = $apiSec;\n\t\t$this->db = $db;\n\t\tif($nonce==0){\n\t\t\t$this->nonceInc = (microtime(true)*100);\n\t\t}\n\t\telse{\n\t\t\t$this->nonceInc = $nonce +1;\n\t\t}\n\t\tif($userid != 0){\n\t\t\t$this->bitfinex_getDepositBalance();\n\t\t\t$this->bitfinex_getPendLoans();\n\t\t\t$this->bitfinex_getCurLoans();\n\t\t\t$this->bitfinex_getAccountSettings();\n\t\t}\n\n \t }\n\n\n\n\t function bitfinex_query($method, array $req = array()) {\n\n\n        $req['request'] = '/v1/'.$method;\n        $this->nonceInc += 1;\n\t\t$req['nonce'] = (string)$this->nonceInc;\n\t\tif(array_key_exists('price', $req)){$req['price'] = (string)$req['price'];}\n\n\n        $reqData = base64_encode(json_encode($req, true));\n\t\t$post_data = http_build_query($req, '', '&');\n\n        $sign = hash_hmac('sha384', $reqData, $this->apiSec);\n\n\n        $headers = array(\n\t\t\t'X-BFX-APIKEY: '.$this->apiKey,\n\t\t\t'X-BFX-PAYLOAD: '.$reqData,\n\t\t\t'X-BFX-SIGNATURE: '.$sign\n        );\n\n\n        static $ch = null;\n        if (is_null($ch)) {\n                $ch = curl_init();\n                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n                curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MarginBot PHP client;)');\n        }\n        curl_setopt($ch, CURLOPT_URL, 'https:\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $post_data);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n\n\n        $res = curl_exec($ch);\n        if ($res === false) throw new Exception('Could not get reply: '.curl_error($ch));\n\t\t$dec = json_decode($res, true);\n\t\treturn $dec;\n\t}\n\n\n\tfunction bitfinex_get($method, $symbol='') {\n\n        $req['request'] = '/v1/'.$method.($symbol != '' ? '/'.$symbol : '');\n        $this->nonceInc += 1;\n\t\t$req['nonce'] = (string)$this->nonceInc;\n\n\n        $reqData = base64_encode(json_encode($req, true));\n        $sign = hash_hmac('sha384', $reqData, $this->apiSec);\n\n\n        $headers = array(\n\t\t\t'X-BFX-APIKEY: '.$this->apiKey,\n\t\t\t'X-BFX-PAYLOAD: '.$reqData,\n\t\t\t'X-BFX-SIGNATURE: '.$sign\n        );\n\n        static $ch = null;\n        if (is_null($ch)) {\n                $ch = curl_init();\n                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n                curl_setopt($ch, CURLOPT_USERAGENT, 'Mozilla/4.0 (compatible; MarginBot PHP client;)');\n        }\n\n\t\tcurl_setopt($ch, CURLOPT_URL, 'https:\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);\n\n\n        $res = curl_exec($ch);\n\t\tif ($res === false) throw new Exception('Could not get reply: '.curl_error($ch));\n\t\t$dec = json_decode($res, true);\n\t\treturn $dec;\n\t}\n\n\n\n\tfunction bitfinex_updateHistory($numDays=10,  $sinceLast=0, $curOverride = '',$showDetails = false){\n\t\tglobal $config;\n\t\tset_time_limit(180);\n\t\tif($curOverride!=''){\n\t\t\t$cryptoPairs[0]['curSym'] = $curOverride;\n\n\t\t}\n\t\telse{\n\n\t\t\t$sql = \"SELECT * from `\".$config['db']['prefix'].\"CurPairs` WHERE status = '1'\";\n\t\t\t$cryptoPairs = $this->db->query($sql);\n\t\t}\n\t\t$splitDays = 25;\n\t\tforeach($cryptoPairs as $c){\n\n\n\t\t\tif($sinceLast==0){\n\t\t\t\t$sql = \"SELECT trans_id from `\".$config['db']['prefix'].\"Tracking` WHERE user_id = '\".$this->db->escapeStr($this->userid).\"' AND trans_cur = '\".$this->db->escapeStr($c['curSym']).\"' ORDER BY trans_id DESC LIMIT 1\";\n\t\t\t\t$lastId = $this->db->query($sql);\n\t\t\t\t$sinceLast = $lastId[0]['id']+1;\n\t\t\t\tif($sinceLast <=1){\n\n\t\t\t\t\t$sinceLast = strtotime(\"-10 day\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif($numDays == 0){\n\n\t\t\t\t$numDays = ceil( (time() - $sinceLast)/86400);\n\t\t\t}\n\t\t\t$return =0;\n\n\t\t\t$numLoops = ceil($numDays / $splitDays);\n\t\t\tfor($x=0;$x<$numLoops;$x++){\n\t\t\t\tif($x%15 == 1 && $x > 1){\n\t\t\t\t\tif($showDetails){echo '<br>Pausing for a few seconds to avoid rate limit...';}\n\t\t\t\t\tsleep(10);\n\t\t\t\t}\n\t\t\t\t$thisSince = ($x * 86400 * $splitDays) + $sinceLast;\n\t\t\t\t$thisEnd = $thisSince + (86400 * $splitDays);\n\t\t\t\tif($showDetails){echo '<br>Running '.$c['curSym'].' Loop '.$x.': Start Time '.$thisSince.' ('.date('Y-m-d', $thisSince).') | End Time '.$thisEnd.' ('.date('Y-m-d', $thisEnd).')';}\n\n\t\t\t\t$ledgerDetails = array('currency' => $c['curSym'], 'since' => (string)$thisSince, 'until' => (string)($thisEnd), 'wallet' => 'deposit');\n\t\t\t\t$ledgerHistory = $this->bitfinex_query('history', $ledgerDetails);\n\n\n\t\t\t\tif(isset($ledgerHistory['error']) && $ledgerHistory['error'] =='ERR_RATE_LIMIT'){\n\n\t\t\t\t\t$x--;\n\t\t\t\t\tif($showDetails){echo '<br>Pausing because of rate limit error...';}\n\t\t\t\t\tsleep(5);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\telse if(count($ledgerHistory) > 0 && !isset($ledgerHistory[0]['description'])){\n\n\t\t\t\t\tif($showDetails){echo '<br>An error occured and we need to stop.  The last day run was '.date('Y-m-d', $lastRunTime);}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse if(count($ledgerHistory)>0){\n\t\t\t\t\tforeach($ledgerHistory as $l){\n\n\t\t\t\t\t\tif(strtolower($l['description']) == strtolower('Swap Payment on wallet deposit') || strtolower($l['description'])==strtolower('Margin Funding Payment on wallet Deposit') ){\n\t\t\t\t\t\t\tif($showDetails){echo '<br>Found Record: '.$l['timestamp'].' - '.$c['curSym'].' '.date('Y-m-d', $l['timestamp']).' '.$l['amount'].' '.$l['balance'];}\n\t\t\t\t\t\t\t$sql = \"INSERT into `\".$config['db']['prefix'].\"Tracking` (`user_id`, `trans_cur`, `trans_id`, `date`, `dep_balance`,`swap_payment`,`average_return`) VALUES\n\t\t\t\t\t\t\t\t('\".$this->db->escapeStr($this->userid).\"', '\".$this->db->escapeStr($c['curSym']).\"', '\".$this->db->escapeStr($l['timestamp']).\"', '\".$this->db->escapeStr(date('Y-m-d', $l['timestamp'])).\"', '\".$this->db->escapeStr($l['balance']).\"','\".$this->db->escapeStr($l['amount']).\"','\".$this->db->escapeStr(round((($l['amount'] / $l['balance']) * 100),6)).\"')\";\n\t\t\t\t\t\t\t$lastRunTime = $l['timestamp'];\n\t\t\t\t\t\t\t$upd = $this->db->iquery($sql);\n\t\t\t\t\t\t\tif($upd['id'] >0){$return++;}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\tif($showDetails){echo '<br><strong>Updated '.$return.' Records!';}\n\t\treturn $return;\n\t}\n\n\tfunction bitfinex_getLendBook($numAsks=500, $currency='USD'){\n\n\t\t$data = file_get_contents('https:\n\t\t$curRates =  json_decode($data, true);\n\t\t$tr=0;\n\t\t$totAmt = 0;\n\t\tunset($rates);\n\t\tunset($this->lendbook);\n\t\tforeach($curRates['asks'] as $b){\n\t\t\t$totAmt += $b['amount'];\n\t\t\t$rt = $b['rate'];\n\t\t\tif($rt == $rates[$tr]['rate']){\n\t\t\t\t$rates[$tr]['rate'] = $rt;\n\t\t\t\t$rates[$tr]['totamt'] = $totAmt;\n\t\t\t\t$rates[$tr]['amt'] = ($b['amount'] + $rates[$tr]['amt']);\n\t\t\t\t$rates[$tr]['totOffers'] += 1;\n\t\t\t}\n\t\t\telse{\n\t\t\t\t$rates[++$tr]['rate'] = $rt;\n\t\t\t\t$rates[$tr]['totamt'] = $totAmt;\n\t\t\t\t$rates[$tr]['amt'] = $b['amount'];\n\t\t\t\t$rates[$tr]['totOffers'] += 1;\n\t\t\t}\n\t\t}\n\t\t$this->lendbook = $rates;\n\t}\n\tfunction bitfinex_updateMyLends(){\n\n\n\n\n\n\n\n\n\n\n\n\t\techo \"\\n<br>Running Bot For User \".$this->userid;\n\n\n\t\t$this->bitfinex_cancelPendingLoans();\n\n\n\n\n\t\tsleep(5);\n\t\t$this->bitfinex_getDepositBalance();\n\n\n\n\t\tforeach($this->cryptoAvailable as $key=>$ca){\n\t\t\tif($this->actSettings['status'][$key]!=2){\n\n\n\t\t\t\tif($key != 'USD'){\n\t\t\t\t\t$this->bitfinex_getCurPrice($key);\n\t\t\t\t\tif($this->cryptoCurPrice[$key] > 0){\n\t\t\t\t\t\t$minForLend = round((50 / $this->cryptoCurPrice[$key]),5);\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\t$minForLend = 50;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t$minForLend = 50;\n\t\t\t\t}\n\n\t\t\t\tif($ca > $minForLend && $this->actSettings['extractAmt'][$key] != -1 && $ca > $this->actSettings['extractAmt'][$key]){\n\t\t\t\t\techo \"\\n<br>Running for \".$key.\" - \".$ca;\n\n\t\t\t\t\t$this->bitfinex_getLendBook(500,$key);\n\n\n\t\t\t\t\t$doLends = $this->bitfinex_getMyLendRates($key, $minForLend);\n\n\n\t\t\t\t\t$this->bitfinex_createLoanOffers($doLends, $key);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\techo \"\\n<Br>Completed\";\n\t}\n\n\tfunction bitfinex_getCurPrice($cur='BTC'){\n\t\tif(!isset($this->cryptoCurPrice[$cur])){\n\t\t\t$curPrice = $this->bitfinex_get('pubticker',strtolower($cur).'usd');\n\t\t\t$this->cryptoCurPrice[$cur] = $curPrice['last_price'];\n\t\t}\n\t\treturn $this->cryptoCurPrice[$cur];\n\t}\n\n\tfunction bitfinex_createLoanOffers($lendArray, $cur='USD'){\n\t\tif(count($lendArray)>0){\n\t\t\tforeach($lendArray[$cur] as $la){\n\t\t\t\tif($la['amt']>0){\n\t\t\t\t\t$offerNew = array('currency' => $cur, 'amount' => (string)$la['amt'],'rate' => (string)$la['rate'] ,'period' => (int)$la['time'],'direction' => 'lend');\n\t\t\t\t\t$newUSD = $this->bitfinex_query('offer/new', $offerNew);\n\t\t\t\t\tif($newUSD['message']!=''){\n\t\t\t\t\t\t$newUSD = $this->bitfinex_query('offer/new', $offerNew);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\tfunction bitfinex_cancelPendingLoans(){\n\t\tif(count($this->cryptoPendingIDS) > 0){\n\t\t\tforeach($this->cryptoPendingIDS as $key=>$p){\n\t\t\t\tforeach($p as $i){\n\t\t\t\t\t$offerCancel = array('offer_id' => $i);\n\t\t\t\t\t$cancel = $this->bitfinex_query('offer/cancel', $offerCancel);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction bitfinex_getMyLendRates($cur='USD', $minForLend = 50){\n\n\n\n\n\n\n\n\t\t$ca = $this->cryptoAvailable[$cur];\n\n\t\tif($ca >= $minForLend ){\n\t\t\t$a = 1;\n\t\t\t$splitAvailable = $ca;\n\n\t\t\tif( $this->actSettings['highholdamt'][$cur] >= $minForLend ){\n\t\t\t\t$splitAvailable = $splitAvailable - $this->actSettings['highholdamt'][$cur];\n\n\t\t\t\t$loans[$cur][0]['amt'] = ($this->actSettings['highholdamt'][$cur] > $ca ? $ca : $this->actSettings['highholdamt'][$cur]);\n\t\t\t\t$loans[$cur][0]['rate'] = ($this->actSettings['highholdlimit'][$cur]*365);\n\n\t\t\t\t$loans[$cur][0]['time'] = 30;\n\t\t\t}\n\n\t\t\tif( $splitAvailable >= $minForLend ){\n\n\n\t\t\t\t$numSplits = $this->actSettings['spreadlend'][$cur];\n\t\t\t\t$amtEach = floor(($splitAvailable / $numSplits)*100)/100;\n\t\t\t\tif($numSplits == 1){\n\t\t\t\t\t$amtEach = $splitAvailable;\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\twhile( $amtEach < $minForLend && $numSplits >= 0 ){\n\t\t\t\t\t\t$amtEach = floor(($splitAvailable / --$numSplits)*100)/100;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\n\t\t\t\tif($numSplits >= 1){\n\t\t\t\t\tif($numSplits > 1){\n\t\t\t\t\t\t$gapClimb = ( ($this->actSettings['USDgapTop'][$cur] - $this->actSettings['USDgapBottom'][$cur])/($numSplits-1));\n\t\t\t\t\t}\n\t\t\t\t\t$nextlend = $this->actSettings['USDgapBottom'][$cur];\n\n\t\t\t\t\t$minLendRateAnnual = ($this->actSettings['minlendrate'][$cur]*365);\n\t\t\t\t\tforeach($this->lendbook as $l){\n\t\t\t\t\t\twhile( ($l['totamt']>=$nextlend) && ($a <= $numSplits) ){\n\t\t\t\t\t\t\t$loans[$cur][$a]['amt'] = $amtEach;\n\n\n\n\n\t\t\t\t\t\t\t$loans[$cur][$a]['rate'] = ( ($l['rate'] - 0.00365) > $minLendRateAnnual ? ($l['rate'] - 0.00365) : $minLendRateAnnual ) ;\n\n\t\t\t\t\t\t\t$lrate=$loans[$cur][$a]['rate']+0.00365;\n\n\n\n\n\n\t\t\t\t\t\t\t$loans[$cur][$a]['time'] = (($this->actSettings['thirtyDayMin'][$cur]>0)&&($lrate >= ($this->actSettings['thirtyDayMin'][$cur] * 365)) ? 30 : 2);\n\t\t\t\t\t\t\t$nextlend += $gapClimb;\n\t\t\t\t\t\t\t$a++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $loans;\n\t}\n\n\n\n\n\n\n\n\n\n\n\tfunction bitfinex_getDepositBalance(){\n\t\t$curBalanceRaw = $this->bitfinex_get('balances');\n\t\tforeach($curBalanceRaw as $key=>$cb){\n\n\t\t\tif($cb['type']=='deposit'){\n\t\t\t\t$this->cryptoBalance[strtoupper($cb['currency'])] = $cb['amount'];\n\t\t\t\t$this->cryptoAvailable[strtoupper($cb['currency'])] = $cb['available'];\n\t\t\t}\n\t\t}\n\t}\n\n\n\tfunction bitfinex_getCurLoans(){\n\t\tunset($intReturn);\n\t\t$curLends = $this->bitfinex_get('credits');\n\t\tforeach($curLends as $c){\n\t\t\t$this->cryptoCurrentLends[strtoupper($c['currency'])][] = $c;\n\t\t\t$this->cryptoCurrentLendVal[strtoupper($c['currency'])] += $c['amount'];\n\t\t\t$intReturn[strtoupper($c['currency'])] += ($c['amount']*( ($c['rate']/365)/100) );\n\t\t}\n\n\t\tif(count($this->cryptoCurrentLendVal)>0){\n\t\t\tforeach($this->cryptoCurrentLendVal as $key=>$lv){\n\t\t\t\tif($lv >0){\n\t\t\t\t\t$this->cryptoCurrentLendAvg[$key] = round( (($intReturn[$key] / $lv )*100),6);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t$this->cryptoCurrentLendAvg[$key] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\n\tfunction bitfinex_getPendLoans(){\n\n\t\tunset($this->cryptoPendingVal);\n\t\tunset($this->cryptoPendingOffers);\n\t\tunset($this->cryptoPendingIDS);\n\t\tunset($this->cryptoPendingLends);\n\t\tunset($intReturn);\n\n\n\t\t$curOffers = $this->bitfinex_get('offers');\n\t\tforeach($curOffers as $o){\n\t\t\tif($o['direction']!=\"loan\") {\n\t\t\t\t$this->cryptoPendingVal[strtoupper($o['currency'])] += $o['remaining_amount'];\n\t\t\t\t$this->cryptoPendingOffers[strtoupper($o['currency'])]++;\n\t\t\t\t$this->cryptoPendingIDS[strtoupper($o['currency'])][] = $o['id'];\n\t\t\t\t$this->cryptoPendingLends[strtoupper($o['currency'])][] = $o;\n\t\t\t\t$intReturn[strtoupper($o['currency'])] += ($o['remaining_amount']*( ($o['rate']/365)/100) );\n\t\t\t}\n\t\t}\n\n\t\tif(count($this->cryptoPendingVal)>0){\n\t\t\tforeach($this->cryptoPendingVal as $key=>$lv){\n\t\t\t\tif($lv >0){\n\t\t\t\t\t$this->cryptoPendingAvg[$key] = round( (($intReturn[$key] / $lv )*100),6);\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\t$this->cryptoPendingAvg[$key] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\n\n\n\n\n\n\tfunction bitfinex_getAccountSettings(){\n\t\tglobal $config;\n\t\t$sql = \"SELECT * from `\".$config['db']['prefix'].\"Vars` WHERE userid = '\".$this->db->escapeStr($this->userid).\"'\";\n\t\t$userSettings = $this->db->query($sql);\n\t\tforeach($userSettings as $u){\n\n\t\t\t$this->actSettings['minlendrate'][strtoupper($u['curType'])] \t= $u['minlendrate'];\n\t\t\t$this->actSettings['spreadlend'][strtoupper($u['curType'])] \t= $u['spreadlend'];\n\t\t\t$this->actSettings['USDgapBottom'][strtoupper($u['curType'])] \t= $u['USDgapBottom'];\n\t\t\t$this->actSettings['USDgapTop'][strtoupper($u['curType'])] \t\t= $u['USDgapTop'];\n\t\t\t$this->actSettings['thirtyDayMin'][strtoupper($u['curType'])] \t= $u['thirtyDayMin'];\n\t\t\t$this->actSettings['highholdlimit'][strtoupper($u['curType'])] \t= $u['highholdlimit'];\n\t\t\t$this->actSettings['highholdamt'][strtoupper($u['curType'])] \t= $u['highholdamt'];\n\t\t\t$this->actSettings['extractAmt'][strtoupper($u['curType'])] \t= $u['extractAmt'];\n\t\t\t$this->actSettings['status'][strtoupper($u['curType'])] \t\t= $u['status'];\n\t\t\t}\n\t}\n\n\n}\n\n?>\n",
        "gt": [
            "'MarginBot/inc/ExchangeAPIs/bitfinex.php'",
            "'MarginBot/inc/header.php'",
            "'MarginBot/index.php'"
        ]
    },
    {
        "files": [
            "'aurora/Web Interface/components.php'",
            "'aurora/Web Interface/files/LiveContestRanking.php'",
            "'aurora/Web Interface/index.php'",
            "'aurora/Web Interface/files/SSE_Util.php'"
        ],
        "content": "'aurora/Web Interface/components.php'\n:<?php\ninclude_once 'functions.php';\ninclude_once 'files/Leaderboard.php';\ninclude_once 'files/LiveContestRanking.php';\nfunction loginbox() {\n    if (!isset($_SESSION['loggedin'])) {\n        ?>\n        <div class=\"panel-heading text-center\">\n            <h3 class=\"panel-title\">Login</h3>\n        </div>\n        <div class=\"panel-body text-center\">\n\n            <form action=\"<?php echo SITE_URL; ?>/process.php\" method=\"post\" role=\"form\">\n                <div class=\"input-group\" style=\"margin-bottom: -1px;\">\n                    <span class=\"input-group-addon\" style=\"border-bottom-left-radius: 0;\"><i class=\"glyphicon glyphicon-user\"></i></span>\n                    <input class=\"form-control\" style=\"border-bottom-right-radius: 0;\" type=\"text\" name=\"teamname\" placeholder=\"Teamname\" required/>\n                </div>\n                <div class=\"input-group\">\n                    <span style=\"border-top-left-radius: 0;\" class=\"input-group-addon\"><i class=\"glyphicon glyphicon-lock\"></i></span>\n                    <input style=\"border-top-right-radius: 0;\" class=\"form-control\" type=\"password\" name=\"password\" placeholder=\"Password\" required/>\n                </div><br/>\n                <input type=\"submit\" name=\"login\" value=\"Log In\" class=\"btn btn-primary btn-block\"/>\n            </form>\n            <a href='<?php echo SITE_URL; ?>/register'>New Team? Register Here.</a>\n        </div>\n        <?php\n    } else {\n        ?>\n        <div class=\"panel-heading text-center\">\n            <h3 class=\"panel-title\">Team</h3>\n        </div>\n        <div class=\"panel-body text-center\">\n\n            <table class='table table-hover'>\n                <thead>\n                    <tr>\n                        <th>Name</th>\n                        <th>Score</th>\n                        <th>Overall Rank</th>\n                    </tr>\n                </thead>\n                <?php\n                $query = \"SELECT count(*)+1 as rank, (select score from teams where tid = \" . $_SESSION['team']['id'] . \") as sco FROM `teams` WHERE (score > (select score from teams where tid = \" . $_SESSION['team']['id'] . \") and status = 'Normal') or (score = (select score from teams where tid = \" . $_SESSION['team']['id'] . \") and penalty < (select penalty from teams where tid = \" . $_SESSION['team']['id'] . \") and status='Normal') \";\n                $res = DB::findOneFromQuery($query);\n                echo \"<tr><td><a href='\" . SITE_URL . \"/teams/\" . $_SESSION['team']['name'] . \"'>\" . $_SESSION['team']['name'] . \"</a></td><td>$res[sco]</td><td style='text-align: center'>$res[rank]</td></tr>\";\n                ?>\n            </table>\n        </div>\n        <?php\n    }\n}\n\nfunction mysubs() { ?>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading text-center\">\n            <h3 class=\"panel-title\">My Submissions</h3>\n        </div>\n        <div class=\"panel-body text-center\">\n            <table class='table table-hover'>\n                <thead>\n                    <tr>\n                        <th>RID</th>\n                        <th>Problem</th>\n                        <th>Result</th>\n                    </tr>\n                </thead>\n                <?php\n                $query = \"SELECT rid, (select name from problems where pid = runs.pid) as pname,(select code from problems where pid = runs.pid) as pcode, result FROM runs WHERE tid = \" . $_SESSION['team']['id'] . \" order by rid desc limit 0, 5\";\n                $res = DB::findAllFromQuery($query);\n                $resAttr = array('AC' => 'success', 'RTE' => 'warning', 'WA' => 'danger', 'TLE' => 'warning', 'CE' => 'warning', 'DQ' => 'danger', 'PE' => 'info', '...' => 'default', '' => 'default');\n                foreach ($res as $row)\n                    echo \"<tr><td><a href='\" . SITE_URL . \"/viewsolution/$row[rid]'>$row[rid]</a></td><td><a href='\" . SITE_URL . \"/problems/$row[pcode]'>$row[pname]</a></td><td><span class='label label-\".$resAttr[$row['result']].\"'>$row[result]</span></td></tr>\";\n                ?>\n            </table>\n        </div>\n    </div>\n<?php }\n\nfunction contest_status() {\n    $status = Array();\n    $query = \"select * from admin where variable = 'endtime' or variable = 'starttime' or variable = 'mode' or variable='ip' or variable='port'\";\n    DB::query($query);\n    $result = DB::findAllFromQuery($query);\n    foreach ($result as $row) {\n        $status[$row['variable']] = $row['value'];\n    }\n    ?>\n\n    <table class='table'>\n        <thead>\n            <tr>\n                <th class=\"text-center\">Mode</th>\n                <th class=\"text-center\">Judge</th>\n            </tr>\n        </thead>\n        <tr>\n            <td>\n                <div id=\"ajax-contest-mode\">\n                    <h4>\n                        <?php\n                        if ($status['mode'] == \"Active\" && $status['endtime'] < time())\n                            echo \"<span class=\\\"label label-danger\\\">Disabled</span>\";\n                        else {\n                            $attributes = array(\n                                \"Active\" => \"success\",\n                                \"Passive\" => \"primary\",\n                                \"Disabled\" => \"default\",\n                                \"Lockdown\" => \"danger\"\n                            );\n                            echo \"<span class=\\\"label label-\" . $attributes[$status['mode']] . \"\\\">\" . $status['mode'] . \"</span>\";\n                        }\n                        ?>\n                    </h4>\n                </div>\n            </td>\n            <td>\n                <h4>\n                    <?php\n                    $client = stream_socket_client($status['ip'] . \":\" . $status['port'], $errno, $errorMessage);\n                    if ($client === false)\n                        echo \"<span class=\\\"label label-danger\\\">Offline</span>\";\n                    else\n                        echo \"<span class=\\\"label label-success\\\">Online</span>\";\n                    fclose($client);\n                    ?>\n                </h4>\n            </td>\n        </tr>\n    </table>\n    <?php\n    if ($status['mode'] == \"Active\") { ?>\n        <div id='ajax-contest-time'></div>\n        <script type='text/javascript'>\n            var totaltime = <?php echo ($status['endtime'] - $status['starttime']); ?>;\n            var countdown = <?php echo $status['endtime'] - time(); ?>;\n            function step() {\n                if (countdown >= 0) {\n                    var currentPercent = (totaltime-countdown)/totaltime*100;\n                    var attribute = currentPercent < 70 ? \"success\" : currentPercent < 90 ? \"warning\" : \"danger\";\n                    $(\"div\n                        \"<h2><span class=\\\"label label-\"+attribute+\"\\\">\" + parseInt(countdown / 3600) + \":\" + parseInt((countdown / 60)) % 60 + \":\" + (countdown % 60)+\"</span></h2>\"\n                    );\n                } else {\n                    $(\"div\n                    $(\"div\n\n                }\n                if (countdown >= 0)\n                    countdown--;\n                window.setTimeout(\"step();\", 1000);\n            }\n            step();\n        </script>\n<?php\n    }\n}\n\nfunction latestsubs() {?>\n    <div class=\"panel panel-default\">\n        <div class=\"panel-heading text-center\">\n            <h3 class=\"panel-title\">Latest Submissions</h3>\n        </div>\n        <div class=\"panel-body text-center\">\n            <table class='table table-hover'>\n                <thead>\n                <tr>\n                    <th>Team</th>\n                    <th>Problem</th>\n                    <th>Result</th>\n                </tr>\n                </thead>\n                <?php\n                $query = \"SELECT rid, (select teamname from teams where tid = runs.tid) as tname, (select name from problems where pid = runs.pid) as pname,(select code from problems where pid = runs.pid) as pcode, result FROM runs order by rid desc limit 0, 5\";\n                $res = DB::findAllFromQuery($query);\n                $resAttr = array('AC' => 'success', 'RTE' => 'warning', 'WA' => 'danger', 'TLE' => 'warning', 'CE' => 'warning', 'DQ' => 'danger', 'PE' => 'info', '...' => 'default', '' => 'default');\n                foreach ($res as $row)\n                    echo \"<tr><td><a href='\" . SITE_URL . \"/teams/$row[tname]'>$row[tname]</a></td><td><a href='\" . SITE_URL . \"/problems/$row[pcode]'>$row[pname]</a></td><td><span class='label label-\".$resAttr[$row['result']].\"'>$row[result]</span></td></tr>\";\n                ?>\n            </table>\n        </div>\n    </div>\n<?php }\n\nfunction rankings() {\n    $select = \"SELECT * \";\n    $body = \" FROM teams WHERE status='Normal' ORDER BY score DESC, penalty ASC\";\n    $result = DB::findAllWithCount($select, $body, 1, 10);\n    $data = $result['data'];\n    $i = 1;\n    echo \"<table class='table table-hover'><thead><tr><th>Rank</th><th>Name</th><th>Score</th></tr></thead>\";\n    foreach ($data as $row) {\n        echo \"<tr><td>\" . $i++ . \"</td><td><a href='\" . SITE_URL . \"/teams/$row[teamname]'>\" . $row['teamname'] . \"</a></td><td>\" . $row['score'] . \"</td></tr>\";\n    }\n    echo \"</table>\";\n}\n\nfunction pagination($noofpages, $url, $page, $maxcontent) {\n    if ($noofpages > 1) {\n        if ($page - ($maxcontent / 2) > 0)\n            $start = $page - 5;\n        else\n            $start = 1;\n        if ($noofpages >= $start + $maxcontent)\n            $end = $start + $maxcontent;\n        else\n            $end = $noofpages;\n        ?>\n        <div align='center'>\n            <ul class =\"pagination\">\n                <?php if ($page > 1) { ?>\n                    <li><a href=\"<?php echo $url . \"&page=1\"; ?>\">First</a></li>\n                    <li><a href=\"<?php echo $url . \"&page=\" . ($page - 1); ?>\">Prev</a></li>\n                    <?php\n                }\n                for ($i = $start; $i <= $end; $i++) {\n                    ?>\n                    <li <?php echo ($i == $page) ? (\"class='disabled'\") : (''); ?>><a href=\"<?php echo ($i != $page) ? ($url . \"&page=\" . $i) : (\"\n                    <?php\n                }\n                if ($page < $noofpages) {\n                    ?>\n                    <li><a href=\"<?php echo $url . \"&page=\" . ($page + 1); ?>\">Next</a></li>\n                    <li><a href=\"<?php echo $url . \"&page=\" . $noofpages; ?>\">Last</a></li>\n                <?php } ?>\n            </ul>\n        </div>\n        <?php\n    }\n}\n\nfunction getrankings($code) {\n    $result =  Leaderboard::getStaticRankTableInJSON($code);\n    return json_decode($result['ranktable'], true);\n}\n\nfunction getCurrentContest() {\n    $result = DB::findOneFromQuery(\"SELECT value from admin where variable = 'currentContest'\");\n    $contestCode = $result['value'];\n    return $contestCode;\n}\n\nfunction getCurrentContestRanking(){\n    $contestCode = getCurrentContest();\n    $printTable = liveContestRanking($contestCode, 10);\n    echo $printTable;\n}\n\nfunction errorMessageHTML($msg){\n    return '<br /><div class=\"alert alert-danger\" role=\"alert\">'.$msg.'</div>';\n}\n\nfunction doCompetitionCheck(){\n\n\n    $query = \"select value from admin where variable = 'mode'\";\n    $result = DB::findOneFromQuery($query);\n    if($result['value'] == 'Passive') {\n        $curTime = time();\n        $query = \"select endtime from contest where endtime >= $curTime and starttime<=$curTime\";\n        $result = DB::findOneFromQuery($query);\n        if(isset($result['endtime'])) {\n            $admin = Array();\n            $admin['mode'] = 'Active';\n            $admin['endtime'] = $result['endtime'];\n            foreach ($admin as $key => $val) {\n                $query = \"update admin set value = '$val' where variable = '$key'\";\n                DB::query($query);\n            }\n        }\n    }\n}\n\n?>\n\n'aurora/Web Interface/files/LiveContestRanking.php'\n:<?php\n\ninclude_once(dirname(__FILE__) . '/../functions.php');\ninclude_once 'SSE_Util.php';\n\nfunction liveContestRanking($contestCode, $limit) {\n\t$query = \"SELECT ranktable FROM contest WHERE code = '$contestCode'\";\n\t$table = '<table class=\"table table-hover\">' ;\n\t$result = DB::findOneFromQuery($query);\n\t$rankTable = json_decode($result['ranktable'], true);\n\t$rank = 1;\n\tif ($rankTable) {\n\t\tforeach ($rankTable as $row) {\n\t\t\t$table .= '<tr>';\n\t\t\t$table .= '<td align = \"center\">'.$rank.'</td><td align=\"center\"><a href=\"'.SITE_URL.'/teams/'.$row['teamname'].'\">'.$row['teamname'].'</a></td><td align=\"center\">'.$row['score'].'</td>';\n\t\t\t$table .= '</tr>';\n\t\t\tif($rank >= $limit)\n\t\t\t\tbreak;\n\t\t\t$rank ++;\n\n\t\t}\n\t} else {\n\t\t$table .= \"<tr><td>No Data Available.</td></tr>\";\n\t}\n    $table .= '</table>';\n\treturn $table;\n}\n\n\n'aurora/Web Interface/index.php'\n:<?php\nrequire_once 'config.php';\nrequire_once 'components.php';\n$_SESSION['url'] = $_SERVER['REQUEST_URI'];\n$query = \"select value from admin where variable='mode'\";\n$judge = DB::findOneFromQuery($query);\nif ($judge['value'] == 'Lockdown' && isset($_SESSION['loggedin']) && !isAdmin()) {\n    session_destroy();\n    session_regenerate_id(true);\n    session_start();\n    $_SESSION['msg'] = \"Judge is in Lockdown mode and so you have been logged out.\";\n    redirectTo(SITE_URL . \"/\");\n}\ndoCompetitionCheck();\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"description\" content=\"Aurora is a dockerized open-source online judge. It can be easily deployed and scaled. It also employs the latest security checks to secure the application.\">\n        <meta name=\"keywords\" content=\"open source, online judge, docker, secure, scaleable\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"<?php echo SITE_URL ?>/css/bootstrap.css\" media=\"screen\" />\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"<?php echo SITE_URL ?>/css/style.css\" media=\"screen\" />\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/jquery-3.1.0.min.js\"></script>\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/bootstrap.js\"></script>\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/plugin.js\"></script>\n        <script type=\"text/javascript\">\n            $(window).load(function() {\n                if ($('\n                    $('\n            });\n        </script>\n        <title>Aurora - An open-source online judge</title>\n        <link rel='shortcut icon' href='<?php echo SITE_URL; ?>/img/favicon.png' />\n    </head>\n    <body>\n        <?php if ($judge['value'] == 'Active' && isset($_SESSION['loggedin'])) { ?>\n            <script type='text/javascript'>\n                function settitle() {\n                    var t = window.document.title;\n                    var n = t.match(/(\\d*)\\)/gi);\n                    console.log(n);\n                    if (n != null) {\n                        n = parseInt(n) + 1;\n                    } else {\n                        n = 1;\n                    }\n                    window.document.title = \"(\" + n + \") Aurora\";\n                }\n                function resettile() {\n                    $.ajax({\n                        type: \"GET\",\n                        url: \"<?php echo SITE_URL; ?>/broadcast.php\",\n                        data: {updatetime: \"\"}\n                    });\n                    window.document.title = \"Aurora\";\n                }\n                window.setTimeout(\"bchk();\", <?php echo rand(300000, 600000); ?>);\n                $.ajax(\"<?php echo SITE_URL; ?>/broadcast.php\").done(function(msg) {\n                    var json = eval('(' + msg + ')');\n                    console.log(msg);\n                    if (json.broadcast.length != 0) {\n                        var str, i;\n                        str = \"\";\n                        for (i = 0; i < json.broadcast.length; i++)\n                            str += \"<b>\" + json.broadcast[i].title + \":</b><br/>\" + json.broadcast[i].msg + \"<br/><br/>\";\n                        $(\"\n                        $('\n                            resettile();\n                        });\n                        $(\"\n                        settitle();\n                    }\n                });\n                function bchk() {\n                    $.ajax(\"<?php echo SITE_URL; ?>/broadcast.php\").done(function(msg) {\n                        var json = eval('(' + msg + ')');\n                        console.log(msg);\n                        if (json.broadcast.length != 0) {\n                            var str, i;\n                            str = \"\";\n                            for (i = 0; i < json.broadcast.length; i++)\n                                str += \"<b>\" + json.broadcast[i].title + \":</b><br/>\" + json.broadcast[i].msg + \"<br/><br/>\";\n                            $(\"\n                            $('\n                                resettile();\n                            });\n                            $(\"\n                            settitle();\n                        }\n                    });\n                    window.setTimeout(\"bchk();\", 600000);\n                }\n            </script>\n            <div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n                <div class=\"modal-dialog\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n                            <h4 class=\"modal-title\" id=\"myModalLabel\">Alert</h4>\n                        </div>\n                        <div class=\"modal-body\" id=\"bmsg\">\n\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\">Close</button>\n                        </div>\n                    </div><!-- /.modal-content -->\n                </div><!-- /.modal-dialog -->\n            </div>\n        <?php }\n        ?>\n        <nav class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n            <div class=\"container\">\n                <div class=\"navbar-header\">\n                    <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"\n                        <span class=\"sr-only\">Toggle navigation</span>\n                        <span class=\"icon-bar\"></span>\n                        <span class=\"icon-bar\"></span>\n                        <span class=\"icon-bar\"></span>\n                    </button>\n                    <a class=\"navbar-brand\" href=\"<?php echo SITE_URL; ?>/\">Aurora</a>\n                </div>\n\n                <div class=\"collapse navbar-collapse\" id=\"navbar-collapse-1\">\n                    <ul class=\"nav navbar-nav\">\n                        <!-- <li><a href=\"<?php echo SITE_URL; ?>/home\">Home</a></li> -->\n                        <li><a href=\"<?php echo SITE_URL; ?>/problems\">Problems</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/contests\">Contests</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/rankings\">Rankings</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/submissions\">Submissions</a></li>\n                        <li class=\"dropdown\">\n                            <a href=\"\n                            <ul class=\"dropdown-menu\" role=\"menu\">\n                                <li><a href=\"<?php echo SITE_URL; ?>/faq\">FAQ</a></li>\n                                <li><a href=\"<?php echo SITE_URL; ?>/contact\">Contact Us</a></li>\n                            </ul>\n                        </li>\n                    </ul>\n                    <?php if (isset($_SESSION['loggedin'])) { ?>\n                        <ul class=\"nav navbar-nav pull-right\">\n                            <?php if ($_SESSION['team']['status'] == 'Admin') { ?>\n                                <li class=\"dropdown\">\n                                    <a href=\"\n                                        Admin\n                                        <b class=\"caret\"></b>\n                                    </a>\n                                    <ul class=\"dropdown-menu\">\n                                        <li><a href='<?php echo SITE_URL; ?>/adminjudge'>Judge Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminproblem'>Problem Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/admincontest'>Contest Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminteam'>Team Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/admingroup'>Group Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminclar'>Clarifications</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminbroadcast'>Broadcast</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminlog'>Request Logs</a></li>\n                                    </ul>\n                                </li>\n                            <?php } ?>\n                            <li class=\"dropdown\">\n                                <a href=\"\n                                    Account\n                                    <b class=\"caret\"></b>\n                                </a>\n                                <ul class=\"dropdown-menu\">\n                                    <li><a href='<?php echo SITE_URL; ?>/edit'>Account Settings</a></li>\n                                    <li><a href='<?php echo SITE_URL; ?>/process.php?logout'>Logout</a></li>\n                                </ul>\n                            </li>\n                        </ul>\n                    <?php } ?>\n                </div>\n            </div>\n        </nav>\n        <div class=\"container bodycont\">\n            <div class='row'>\n                <div class='col-md-9' id='mainbar'>\n                    <?php if (isset($_SESSION['msg']) && $_SESSION['msg'] != \"\") { ?>\n                        <div class=\"alert alert-info\" style=\"margin-top: 20px;\">\n                            <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n                            <div class=\"text-center\"><?php\n                                echo $_SESSION['msg'];\n                                unset($_SESSION['msg']);\n                                ?></div>\n                        </div>\n                        <?php\n                    }\n                    if (!isset($_GET['tab']) || $_GET['tab'] == 'home') {\n                        $str = 'files/home.php';\n                    } else {\n                        $str = 'files/' . $_GET['tab'] . '.php';\n                    }\n                    if (file_exists($str))\n                        require $str;\n                    else\n                        echo \"<br/><br/><br/><div style='padding: 10px;'><h1>Page not Found :(</h1>The page you are searching for is not on this site.</div><br/><br/><br/>\";\n                    ?>\n                </div>\n                <div class='col-md-3'>\n                    <!-- Login Panel -->\n                    <div class=\"panel panel-default\">\n                        <?php loginbox(); ?>\n                    </div>\n                    <!-- ./Login Panel -->\n\n                    <!-- Contest Panel -->\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Contest</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <?php contest_status(); ?>\n                        </div>\n                    </div>\n                    <!-- ./Contest Panel -->\n\n                    <!-- Ranking Panel -->\n                    <div class=\"panel panel-default\">\n\n                    <?php if ($judge['value'] == 'Active') { ?>\n                        <!-- Contest Ranking -->\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Contest Ranking</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <div id=\"live-ranking\">\n                            <?php getCurrentContestRanking(); ?>\n                                <a style=\"float:right;\" href=\"<?php echo SITE_URL.'/rank/'.getCurrentContest(); ?>\">View all</a>\n                            </div>\n                        </div>\n\n                    <?php } else { ?>\n                        <!-- Overall Ranking -->\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Overall Rankings</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <?php rankings(); ?>\n                        </div>\n                    <?php } ?>\n                    </div>\n                    <!-- ./Ranking Panel -->\n\n                    <?php\n\n                    if (isset($_SESSION['loggedin'])) mysubs();\n\n                    if ($judge['value'] == 'Active') latestsubs();\n                    ?>\n\n                </div>\n            </div>\n        </div>\n        <div class=\"footer\">\n            <a href=\"https:\n        </div>\n    </body>\n</html>\n\n'aurora/Web Interface/files/SSE_Util.php'\n:<?php\n\nclass SSE_Util {\n\tpublic static function sendMessageToClient($message) {\n\t\theader('Content-Type: text/event-stream');\n\t\theader('Cache-Control: no-cache');\n\t\techo \"data: $message\".PHP_EOL.PHP_EOL;\n\t\tob_flush();\n\t\tflush();\n\t}\n}\n",
        "gt": [
            "'aurora/Web Interface/files/SSE_Util.php'",
            "'aurora/Web Interface/files/LiveContestRanking.php'",
            "'aurora/Web Interface/components.php'",
            "'aurora/Web Interface/index.php'"
        ]
    },
    {
        "files": [
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/inc/configuration.inc.php'",
            "'firebirdwebadmin/admin.php'",
            "'firebirdwebadmin/inc/debug_funcs.inc.php'"
        ],
        "content": "'firebirdwebadmin/inc/script_start.inc.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/configuration.inc.php';\n\nif (DEBUG) {\n    $start_time = @microtime();\n}\n\nrequire './inc/functions.inc.php';\n\nsession_start();\nset_error_handler('error_handler');\n\nrequire get_language_file('./lang/');\nrequire './inc/session.inc.php';\nrequire './inc/firebird.inc.php';\nrequire './inc/panel_elements.inc.php';\nrequire './inc/javascript.inc.php';\n\nif (DEBUG || DEBUG_HTML) {\n    include './inc/debug_funcs.inc.php';\n}\n\nif (!extension_loaded('interbase')) {\n    die($ERRORS['NO_IBASE_MODULE']);\n}\n\nif (!isset($_SESSION['s_init'])\n    || ($_SESSION['s_cookies'] === 'untested')\n) {\n    initialize_session();\n    fallback_session();\n} else {\n    localize_session_vars();\n}\n\nif (!isset($no_session_referer) || $no_session_referer !== true) {\n\n    $s_referer = !empty($_SERVER['PHP_SELF']) ? $_SERVER['PHP_SELF'] : $_SERVER['SCRIPT_NAME'];\n}\n\nsend_http_headers();\n\n\n$message = '';\n$warning = '';\n$error = '';\n$fb_error = '';\n$php_error = '';\n$debug = array();\n$externcmd = '';\n\n\n\n$js_stack = '';\n\n\n\n$sql = '';\n\n\n\nif ($s_connected == true && !isset($_GET['unconnected'])) {\n    $dbhandle = db_connect();\n\n    if ($dbhandle === false) {\n        $fb_error = fbird_errmsg();\n        $s_connected = false;\n        $s_tables_valid = false;\n        $s_wt['table'] = '';\n    }\n\n    if (empty($s_charsets)) {\n        $s_charsets = get_charsets();\n    }\n}\n\n\nlist($family, $version) = server_info($s_login['server']);\ndefine('SERVER_FAMILY', $family);\ndefine('SERVER_VERSION', $version);\n\nif ($s_binpath != BINPATH) {\n\n\n    if (!is_dir(BINPATH)\n        || (!is_file(BINPATH.'isql') && !is_file(BINPATH.'isql-fb') && !is_file(BINPATH.'isql.exe'))\n    ) {\n        $warning = sprintf($WARNINGS['BAD_ISQLPATH'], BINPATH);\n    }\n\n\n    if (!is_dir(TMPPATH) || !is_writeable(TMPPATH)) {\n        $warning .= sprintf($WARNINGS['BAD_TMPPATH'], TMPPATH);\n    }\n\n    $s_binpath = BINPATH;\n}\n\nif (DEBUG_HTML) {\n    ob_start();\n}\n\n'firebirdwebadmin/inc/configuration.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\n\n\n\ndefine('VERSION', '3.4.1');\n\ndefine('BINPATH', '/usr/sbin/');\n\ndefine('TMPPATH', '/tmp/');\n\n\ndefine('DEFAULT_USER',    'SYSDBA');\ndefine('DEFAULT_DB',      'employee.fdb');\ndefine('DEFAULT_PATH',    '/var/lib/firebird/2.5/data/');\ndefine('DEFAULT_HOST',    'localhost');\ndefine('DEFAULT_ROLE',    '');\ndefine('DEFAULT_CACHE',   75);\ndefine('DEFAULT_CHARSET', 'NONE');\ndefine('DEFAULT_DIALECT', 3);\ndefine('DEFAULT_SERVER',  'FB_2.5');\n\n\ndefine('PROTOCOL', 'http');\n\n\ndefine('SP_LIMIT_NAME', '');\n\n\n\n\n\n\n\n$ALLOWED_DIRS = array();\n\n\n\n\n\n\n\n\n$ALLOWED_FILES = array();\n\ndefine('BACKUP_DIR', '/var/lib/firebird/2.5');\n\ndefine('LANGUAGE', 'english');\n\n\n\n$HIDE_PANELS = array(\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                     );\n\n\n\n$SQL_DISABLE = array('CREATE DATABASE',\n                     'CREATE SCHEMA'\n\n\n                     );\n\ndefine('SYSDBA_GET_ALL', true);\n\n\n\ndefine('CONFIRM_DELETE', true);\n\ndefine('SQL_AREA_COLS', 80);\ndefine('SQL_AREA_ROWS', 6);\n\ndefine('IFRAME_HEIGHT', 350);\n\ndefine('SQL_MAXSAVE', 100);\n\n\n\ndefine('SQL_HISTORY_SIZE', 25);\n\ndefine('SHOW_OUTPUT_ROWS', 100);\n\n\ndefine('DATA_MAXWIDTH', 50);\n\ndefine('FKLOOKUP_ENTRIES', 1000);\n\ndefine('MAX_CSV_LINE', 50000);\n\n\ndefine('DEFAULT_ROWS', 25);\n\ndefine('BLOB_WINDOW_WIDTH', 600);\ndefine('BLOB_WINDOW_HEIGHT', 800);\n\ndefine('SESSION_NAME', 'firebirdwebadmin');\n\n\ndefine('TRANS_READ', IBASE_COMMITTED | IBASE_NOWAIT | IBASE_READ);\ndefine('TRANS_WRITE', IBASE_COMMITTED | IBASE_NOWAIT | IBASE_WRITE);\n\ndefine('META_REDIRECT', false);\n\n\ndefine('DEBUG', false);\ndefine('DEBUG_HTML', false);\n\ndefine('DEBUG_COMMANDS', false);\ndefine('DEBUG_FILES', true);\n\n\n\nif ('' != SESSION_NAME) {\n    session_name(SESSION_NAME);\n}\n\nif (DEBUG === true) {\n    error_reporting(E_ALL | E_NOTICE | E_STRICT);\n}\n\n'firebirdwebadmin/admin.php'\n:<?php\n\n\n\n\n\n\nrequire './inc/script_start.inc.php';\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_gfix')) {\n    $action = $argument = '';\n    $logout = $redirect = false;\n\n    if (isset($_POST['gfix_doit'])) {\n        $s_sysdba_pw = get_sysdba_pw();\n\n        $s_gfix = array('buffers' => get_request_data('adm_buffers'),\n                        'dialect' => get_request_data('adm_sql_dialect'),\n                        'access_mode' => get_request_data('adm_access_mode'),\n                        'write_mode' => get_request_data('adm_write_mode'),\n                        'use_space' => get_request_data('adm_use_space'),\n                        'sweep_interval' => (int) get_request_data('adm_housekeeping'),\n                        'sweep_ignore' => (boolean) get_request_data('adm_sweep_ignore'),\n                        'repair' => get_request_data('adm_repair'),\n                        'repair_ignore' => (boolean) get_request_data('adm_repair_ignore'),\n                        'shutdown' => get_request_data('adm_shutdown'),\n                        'shutdown_seconds' => (int) get_request_data('adm_shut_secs'),\n                        'reconnect' => (boolean) get_request_data('adm_shut_reconnect'),\n                        );\n    }\n\n\n    if (isset($_POST['adm_gfix_buffers'])  &&  !empty($s_gfix['buffers'])) {\n        $action = IBASE_PRP_PAGE_BUFFERS;\n        $argument = $s_gfix['buffers'];\n    }\n\n\n    if (isset($_POST['adm_gfix_dialect'])  &&  !empty($s_gfix['dialect'])) {\n        $action = IBASE_PRP_SET_SQL_DIALECT;\n        $argument = $s_gfix['dialect'];\n    }\n\n\n    if (isset($_POST['adm_gfix_access_mode'])  &&  !empty($s_gfix['access_mode'])) {\n        $action = IBASE_PRP_ACCESS_MODE;\n        $argument = $s_gfix['access_mode'] == $adm_strings['ReadWrite'] ? IBASE_PRP_AM_READWRITE : IBASE_PRP_AM_READONLY;\n    }\n\n\n    if (isset($_POST['adm_gfix_write_mode'])  &&  !empty($s_gfix['write_mode'])) {\n        $action = IBASE_PRP_WRITE_MODE;\n        $argument = $s_gfix['write_mode'] == $adm_strings['Sync'] ? IBASE_PRP_WM_SYNC : IBASE_PRP_WM_ASYNC;\n    }\n\n\n    if (isset($_POST['adm_gfix_use_space'])  &&  !empty($s_gfix['use_space'])) {\n        $action = IBASE_PRP_RESERVE_SPACE;\n        $argument = $s_gfix['use_space'] == $adm_strings['SmallFull'] ? IBASE_PRP_RES_USE_FULL : IBASE_PRP_RES;\n    }\n\n\n    if (isset($_POST['adm_gfix_housekeeping'])) {\n        $action = IBASE_PRP_SWEEP_INTERVAL;\n        $argument = $s_gfix['sweep_interval'];\n    }\n\n\n    if (isset($_POST['adm_gfix_sweep'])) {\n        $action = IBASE_RPR_SWEEP_DB;\n        $argument = $s_gfix['sweep_ignore'] ? IBASE_RPR_IGNORE_CHECKSUM : '';\n    }\n\n\n    if (isset($_POST['adm_gfix_repair'])  &&  !empty($s_gfix['repair'])) {\n        switch ($s_gfix['repair']) {\n        case 'mend':\n            $action = IBASE_RPR_MEND_DB;\n            break;\n        case 'validate':\n            $action = IBASE_RPR_VALIDATE_DB;\n            break;\n        case 'full':\n            $action = IBASE_RPR_FULL;\n            break;\n        case 'no_update':\n            $action = IBASE_RPR_CHECK_DB;\n            break;\n        }\n        $argument = $s_gfix['repair_ignore'] ? IBASE_RPR_IGNORE_CHECKSUM : '';\n    }\n\n\n    if (isset($_POST['adm_gfix_shutdown'])  && !empty($s_gfix['shutdown'])) {\n        switch ($s_gfix['shutdown']) {\n        case 'noconns':\n            $action = IBASE_PRP_DENY_NEW_ATTACHMENTS;\n            break;\n        case 'notrans':\n            $action = IBASE_PRP_DENY_NEW_TRANSACTIONS;\n            break;\n        case 'force':\n            $action = IBASE_PRP_SHUTDOWN_DB;\n            break;\n        }\n        $argument = $s_gfix['shutdown_seconds'];\n        $logout = $s_gfix['reconnect'] ? false : true;\n    }\n\n\n    if (isset($_POST['adm_gfix_rescind'])) {\n        $action = IBASE_PRP_DB_ONLINE;\n    }\n\n    if (!empty($action)) {\n        if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            if (empty($argument)) {\n                $result = fbird_maintain_db($service, $s_login['database'], $action);\n            } else {\n                $result = fbird_maintain_db($service, $s_login['database'], $action, $argument);\n            }\n            fbird_service_detach($service);\n            if (!$result) {\n                $fb_error = fbird_errmsg();\n            }\n        } else {\n            $fb_error = fbird_errmsg();\n        }\n\n        if ($logout == true) {\n            remove_edit_panels();\n            cleanup_session();\n            $s_connected = false;\n        }\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_dbstat', true)) {\n    if (isset($_POST['db_stat_select'])) {\n        $s_dbstat_option = get_request_data('db_stat_option');\n    }\n\n    if (!empty($s_dbstat_option)) {\n\n\n        $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"dbstat\";';});\n\n        $iframekey_dbstat = md5(uniqid('dbstat'));\n        $s_iframejobs[$iframekey_dbstat] = array('job' => 'dbstat',\n                                                 'option' => $s_dbstat_option,\n                                                 'timestamp' => time(), );\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_server')) {\n    $exe = 'fb_lock_print';\n\n\n    list($iblockpr_output, $binary_error) = exec_command($exe, ' -o');\n\n    $lock_header = '';\n    unset($iblockpr_output[0]);\n    foreach ($iblockpr_output as $line) {\n        if (strlen(trim($line)) == 0) {\n            break;\n        }\n        $lock_header .= $line.\"<br>\\n\";\n    }\n\n\n    list($iblockpr_output, $binray_error) = exec_command($exe, ' -i');\n\n    if (count($iblockpr_output) > 3) {\n        $iblock['names'] = preg_split('/[\\s,]+/', $iblockpr_output[0]);\n        $iblock['last'] = preg_split('/[\\s,]+/', $iblockpr_output[1]);\n        $iblock['avg'] = preg_split('/[\\s,]+/', $iblockpr_output[3]);\n    }\n\n\n    if (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n        $server_info = fbird_server_info($service, IBASE_SVC_SERVER_VERSION)\n                      .' / '\n                      .fbird_server_info($service, IBASE_SVC_IMPLEMENTATION);\n        fbird_service_detach($service);\n    } else {\n        $fb_error = fbird_errmsg();\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_backup')) {\n    if (isset($_POST['adm_backup_doit'])) {\n        $s_backup = array('target' => get_request_data('adm_bu_target'),\n                          'mdonly' => (boolean) get_request_data('adm_bu_mdonly'),\n                          'mdoldstyle' => (boolean) get_request_data('adm_bu_mdoldstyle'),\n                          'transport' => (boolean) get_request_data('adm_bu_transport'),\n                          'convert' => (boolean) get_request_data('adm_bu_convert'),\n                          'nogc' => (boolean) get_request_data('adm_bu_nogc'),\n                          'ignorecs' => (boolean) get_request_data('adm_bu_ignorecs'),\n                          'ignorelt' => (boolean) get_request_data('adm_bu_ignorelt'),\n                          'verbose' => (boolean) get_request_data('adm_bu_verbose'),\n                          );\n    }\n\n    if (isset($_POST['adm_backup_doit'])  &&  !empty($s_backup['target'])) {\n        $s_sysdba_pw = get_sysdba_pw();\n\n        $backup_options = array('mdonly' => IBASE_BKP_METADATA_ONLY,\n                                'mdoldstyle' => IBASE_BKP_OLD_DESCRIPTIONS,\n                                'transport' => IBASE_BKP_NON_TRANSPORTABLE,\n                                'convert' => IBASE_BKP_CONVERT,\n                                'nogc' => IBASE_BKP_NO_GARBAGE_COLLECT,\n                                'ignorecs' => IBASE_BKP_IGNORE_CHECKSUMS,\n                                'ignorelt' => IBASE_BKP_IGNORE_LIMBO,\n                                );\n        $options = 0;\n        foreach ($backup_options as $idx => $option) {\n            if ($s_backup[$idx]) {\n                $options |= $option;\n            }\n        }\n\n        $source_db = !empty($s_login['host']) ? $s_login['host'].':'.$s_login['database'] : $s_login['database'];\n        $target_file = get_backup_filename($s_backup['target']);\n\n        if ($s_backup['verbose']) {\n\n            $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"backup\";';});\n\n            $iframekey_backup = md5(uniqid('backup'));\n            $s_iframejobs[$iframekey_backup] = array('job' => 'backup',\n                                                     'source' => $source_db,\n                                                     'target' => $target_file,\n                                                     'options' => $options,\n                                                     'timestamp' => time(), );\n        } elseif (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n            $result = fbird_backup($service, $source_db, $target_file, $options, $s_backup['verbose']);\n            $message = nl2br(str_replace(array(chr(0x01).chr(0x0a), 'gbak: '), '', $result));\n            fbird_service_detach($service);\n        } else {\n            $fb_error = fbird_errmsg();\n        }\n    }\n}\n\n\n\n\nif (have_panel_permissions($s_login['user'], 'adm_restore')) {\n    if (isset($_POST['adm_restore_doit'])) {\n        $s_restore = array('source' => get_request_data('adm_re_source'),\n                           'target' => get_request_data('adm_re_target'),\n                           'overwrite' => (boolean) get_request_data('adm_re_overwrite'),\n                           'inactive' => (boolean) get_request_data('adm_re_inactive'),\n                           'oneattime' => (boolean) get_request_data('adm_re_oneattime'),\n                           'useall' => (boolean) get_request_data('adm_re_useall'),\n                           'novalidity' => (boolean) get_request_data('adm_re_novalidity'),\n                           'kill' => (boolean) get_request_data('adm_re_kill'),\n                           'verbose' => (boolean) get_request_data('adm_re_verbose'),\n                           'connect' => (boolean) get_request_data('adm_re_connect'),\n                           );\n\n        if ($s_restore['connect']) {\n            $s_restore['verbose'] = true;\n        }\n    }\n\n    if (isset($_POST['adm_restore_doit'])  &&  !empty($s_restore['source'])  &&  !empty($s_restore['target'])) {\n        $s_sysdba_pw = get_sysdba_pw();\n\n        if (!is_allowed_db($s_restore['target'])) {\n            $error = sprintf($ERRORS['DB_NOT_ALLOWED'], $s_restore['target']);\n        }\n\n        $restore_options = array('inactive' => IBASE_RES_DEACTIVATE_IDX,\n                                 'oneattime' => IBASE_RES_ONE_AT_A_TIME,\n                                 'useall' => IBASE_RES_USE_ALL_SPACE,\n                                 'novalidity' => IBASE_RES_NO_VALIDATE,\n                                 'kill' => IBASE_RES_NO_SHADOW,\n                                 );\n        $options = 0;\n        foreach ($restore_options as $idx => $option) {\n            if ($s_restore[$idx]) {\n                $options |= $option;\n            }\n        }\n        if ($s_restore['overwrite']) {\n            $options |= IBASE_RES_REPLACE;\n        } else {\n            $options |= IBASE_RES_CREATE;\n        }\n\n        if (empty($error)) {\n            $source_file = defined('BACKUP_DIR')  &&  BACKUP_DIR !== '' ? BACKUP_DIR.$s_restore['source'] : $s_restore['source'];\n\n            if ($s_restore['verbose']) {\n\n                $s_iframejobs = array_filter($s_iframejobs, function($a) {return '$a[\"job\"]!=\"restore\";';});\n\n                $iframekey_restore = md5(uniqid('restore'));\n                $s_iframejobs[$iframekey_restore] = array('job' => 'restore',\n                                                      'source' => $source_file,\n                                                      'target' => $s_restore['target'],\n                                                      'options' => $options,\n                                                      'connect' => $s_restore['connect'],\n                                                      'timestamp' => time(), );\n            } elseif (($service = fbird_service_attach($s_login['host'], $s_login['user'], $s_login['password'])) != false) {\n                fbird_restore($service, $source_file, $s_restore['target'], $options, $s_restore['verbose']);\n                $message = 'restore started';\n                fbird_service_detach($service);\n            } else {\n                $fb_error = fbird_errmsg();\n            }\n        }\n    }\n}\n\n\n\n$s_page = 'Admin';\n$panels = $s_admin_panels;\n\nrequire './inc/script_end.inc.php';\n\nfunction get_backup_filename($pname)\n{\n    return (defined('BACKUP_DIR')  &&  BACKUP_DIR !== '')\n        ?  BACKUP_DIR.basename($pname)\n        : $pname;\n}\n\n\n\n\nfunction database_statistic_options()\n{\n    $options = array(IBASE_STS_HDR_PAGES => 'header page',\n                     IBASE_STS_DB_LOG => 'log page',\n                     IBASE_STS_DATA_PAGES => 'data pages',\n                     IBASE_STS_IDX_PAGES => 'index leaf pages',\n                     IBASE_STS_SYS_RELATIONS => 'system relations',\n                     );\n\n    return $options;\n}\n\n'firebirdwebadmin/inc/debug_funcs.inc.php'\n:<?php\n\n\n\n\n\n\n\n\n\n\nfunction write_output_buffer($fname)\n{\n    $fp = fopen($fname, 'w')\n        or die('Error opening file '.$fname);\n    fwrite($fp, ob_get_contents())\n        or die('Error writing to file '.$fname);\n    ob_end_flush();\n}\n\n\n\n\n\nfunction show_time_consumption($start, $end)\n{\n    list($sm, $ss) = explode(' ', $start);\n    list($em, $es) = explode(' ', $end);\n    $elapsed = $es - $ss + $em - $sm;\n    echo 'time consumption: '.$elapsed.\"<br>\\n\";\n}\n\n\n\n\n\n\n\nfunction add_debug($str, $file = null, $line = null)\n{\n    if ($file == null || $line == null) {\n        $dstr = \"<tr>\\n<td colspan=\\\"2\\\">\";\n        if (isset($GLOBALS[$str])) {\n            $dstr .= add_var_debug($str, \"<br>\\n\");\n        } else {\n            $dstr .= \"$str<br>\\n\";\n        }\n    } else {\n        $dstr = \"<tr>\\n<td>$file, $line:</td>\\n\";\n        if (isset($GLOBALS[$str])) {\n            $dstr .= '<td>'.add_var_debug($str, \"<br>\\n\");\n        } else {\n            $dstr .= \"<td>$str<br>\\n\";\n        }\n    }\n    $dstr .= \"</td>\\n</tr>\\n\";\n    $GLOBALS['debug'][] = $dstr;\n}\n\nfunction add_var_debug($var, $separator)\n{\n    if (!is_array($GLOBALS[$var])) {\n        return($var.' = '.$GLOBALS[$var]);\n    } else {\n        $str = $var.' = array('.$separator;\n        $arr = $GLOBALS[$var];\n        foreach ($arr as $key => $val) {\n            $str .= $key.' => '.$val.$separator;\n        }\n        $str .= ')'.$separator;\n\n        return $str;\n    }\n}\n\n\n\n\nfunction file_debug($str)\n{\n    include_once 'inc/configuration.inc.php';\n\n    $fp = fopen(TMPPATH.'debug.txt', 'a') or die('Error: cannot open file for debug output');\n    fwrite($fp, $str);\n    fclose($fp);\n}\n\n\n\n\nfunction js_alert($string)\n{\n    ?>\n<script language=\"JavaScript\">\n  <!--\n   alert(\"<?php echo $string;\n    ?>\");\n\n  </script>\n<?php\n\n}\n\n\n\n\nfunction show_session()\n{\n    debug_var($GLOBALS['HTTP_SESSION_VAR']);\n}\n\n\nfunction debug_die($var)\n{\n    debug_var($var);\n    die();\n}\n\n\nfunction debug_var($var)\n{\n    @include_once 'Var_Dump.php';\n    if (class_exists('Var_Dump')) {\n        Var_Dump::displayInit(array('display_mode' => 'HTML4_Text'),\n                              array('mode' => 'normal',\n                                    'offset' => 3,\n                                    'before_type' => '<font color=\"\n                                    'after_type' => '</font>',\n                                    'before_value' => '<font color=\"\n                                    'after_value' => '</font>',\n                                    )\n                              );\n        Var_Dump::display($var);\n    } else {\n        echo \"<pre>\\n\";\n        print_r($var);\n        echo \"</pre>\\n\";\n    }\n}\n\n?>\n",
        "gt": [
            "'firebirdwebadmin/inc/configuration.inc.php'",
            "'firebirdwebadmin/inc/debug_funcs.inc.php'",
            "'firebirdwebadmin/inc/script_start.inc.php'",
            "'firebirdwebadmin/admin.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'",
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'\n:<?php\n\n\n\nnamespace Composer\\Autoload;\n\n\nclass ClassLoader\n{\n\n    private $prefixLengthsPsr4 = array();\n    private $prefixDirsPsr4 = array();\n    private $fallbackDirsPsr4 = array();\n\n\n    private $prefixesPsr0 = array();\n    private $fallbackDirsPsr0 = array();\n\n    private $useIncludePath = false;\n    private $classMap = array();\n\n    public function getPrefixes()\n    {\n        return call_user_func_array('array_merge', $this->prefixesPsr0);\n    }\n\n    public function getPrefixesPsr4()\n    {\n        return $this->prefixDirsPsr4;\n    }\n\n    public function getFallbackDirs()\n    {\n        return $this->fallbackDirsPsr0;\n    }\n\n    public function getFallbackDirsPsr4()\n    {\n        return $this->fallbackDirsPsr4;\n    }\n\n    public function getClassMap()\n    {\n        return $this->classMap;\n    }\n\n\n    public function addClassMap(array $classMap)\n    {\n        if ($this->classMap) {\n            $this->classMap = array_merge($this->classMap, $classMap);\n        } else {\n            $this->classMap = $classMap;\n        }\n    }\n\n\n    public function add($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n            if ($prepend) {\n                $this->fallbackDirsPsr0 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr0\n                );\n            } else {\n                $this->fallbackDirsPsr0 = array_merge(\n                    $this->fallbackDirsPsr0,\n                    (array) $paths\n                );\n            }\n\n            return;\n        }\n\n        $first = $prefix[0];\n        if (!isset($this->prefixesPsr0[$first][$prefix])) {\n            $this->prefixesPsr0[$first][$prefix] = (array) $paths;\n\n            return;\n        }\n        if ($prepend) {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixesPsr0[$first][$prefix]\n            );\n        } else {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                $this->prefixesPsr0[$first][$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function addPsr4($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n\n            if ($prepend) {\n                $this->fallbackDirsPsr4 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr4\n                );\n            } else {\n                $this->fallbackDirsPsr4 = array_merge(\n                    $this->fallbackDirsPsr4,\n                    (array) $paths\n                );\n            }\n        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {\n\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        } elseif ($prepend) {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixDirsPsr4[$prefix]\n            );\n        } else {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                $this->prefixDirsPsr4[$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function set($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr0 = (array) $paths;\n        } else {\n            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setPsr4($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr4 = (array) $paths;\n        } else {\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setUseIncludePath($useIncludePath)\n    {\n        $this->useIncludePath = $useIncludePath;\n    }\n\n\n    public function getUseIncludePath()\n    {\n        return $this->useIncludePath;\n    }\n\n\n    public function register($prepend = false)\n    {\n        spl_autoload_register(array($this, 'loadClass'), true, $prepend);\n    }\n\n\n    public function unregister()\n    {\n        spl_autoload_unregister(array($this, 'loadClass'));\n    }\n\n\n    public function loadClass($class)\n    {\n        if ($file = $this->findFile($class)) {\n            includeFile($file);\n\n            return true;\n        }\n    }\n\n\n    public function findFile($class)\n    {\n\n        if ('\\\\' == $class[0]) {\n            $class = substr($class, 1);\n        }\n\n\n        if (isset($this->classMap[$class])) {\n            return $this->classMap[$class];\n        }\n\n        $file = $this->findFileWithExtension($class, '.php');\n\n\n        if ($file === null && defined('HHVM_VERSION')) {\n            $file = $this->findFileWithExtension($class, '.hh');\n        }\n\n        if ($file === null) {\n\n            return $this->classMap[$class] = false;\n        }\n\n        return $file;\n    }\n\n    private function findFileWithExtension($class, $ext)\n    {\n\n        $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . $ext;\n\n        $first = $class[0];\n        if (isset($this->prefixLengthsPsr4[$first])) {\n            foreach ($this->prefixLengthsPsr4[$first] as $prefix => $length) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($this->prefixDirsPsr4[$prefix] as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $length))) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr4 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {\n                return $file;\n            }\n        }\n\n\n        if (false !== $pos = strrpos($class, '\\\\')) {\n\n            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)\n                . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);\n        } else {\n\n            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;\n        }\n\n        if (isset($this->prefixesPsr0[$first])) {\n            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($dirs as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr0 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                return $file;\n            }\n        }\n\n\n        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {\n            return $file;\n        }\n    }\n}\n\n\nfunction includeFile($file)\n{\n    include $file;\n}\n\n'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'",
            "'alfred-devdocs/src/scripts/conf.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'"
        ],
        "content": "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'\n:<?php\n\n\n\nnamespace Composer\\Autoload;\n\n\nclass ClassLoader\n{\n\n    private $prefixLengthsPsr4 = array();\n    private $prefixDirsPsr4 = array();\n    private $fallbackDirsPsr4 = array();\n\n\n    private $prefixesPsr0 = array();\n    private $fallbackDirsPsr0 = array();\n\n    private $useIncludePath = false;\n    private $classMap = array();\n\n    public function getPrefixes()\n    {\n        return call_user_func_array('array_merge', $this->prefixesPsr0);\n    }\n\n    public function getPrefixesPsr4()\n    {\n        return $this->prefixDirsPsr4;\n    }\n\n    public function getFallbackDirs()\n    {\n        return $this->fallbackDirsPsr0;\n    }\n\n    public function getFallbackDirsPsr4()\n    {\n        return $this->fallbackDirsPsr4;\n    }\n\n    public function getClassMap()\n    {\n        return $this->classMap;\n    }\n\n\n    public function addClassMap(array $classMap)\n    {\n        if ($this->classMap) {\n            $this->classMap = array_merge($this->classMap, $classMap);\n        } else {\n            $this->classMap = $classMap;\n        }\n    }\n\n\n    public function add($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n            if ($prepend) {\n                $this->fallbackDirsPsr0 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr0\n                );\n            } else {\n                $this->fallbackDirsPsr0 = array_merge(\n                    $this->fallbackDirsPsr0,\n                    (array) $paths\n                );\n            }\n\n            return;\n        }\n\n        $first = $prefix[0];\n        if (!isset($this->prefixesPsr0[$first][$prefix])) {\n            $this->prefixesPsr0[$first][$prefix] = (array) $paths;\n\n            return;\n        }\n        if ($prepend) {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixesPsr0[$first][$prefix]\n            );\n        } else {\n            $this->prefixesPsr0[$first][$prefix] = array_merge(\n                $this->prefixesPsr0[$first][$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function addPsr4($prefix, $paths, $prepend = false)\n    {\n        if (!$prefix) {\n\n            if ($prepend) {\n                $this->fallbackDirsPsr4 = array_merge(\n                    (array) $paths,\n                    $this->fallbackDirsPsr4\n                );\n            } else {\n                $this->fallbackDirsPsr4 = array_merge(\n                    $this->fallbackDirsPsr4,\n                    (array) $paths\n                );\n            }\n        } elseif (!isset($this->prefixDirsPsr4[$prefix])) {\n\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        } elseif ($prepend) {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                (array) $paths,\n                $this->prefixDirsPsr4[$prefix]\n            );\n        } else {\n\n            $this->prefixDirsPsr4[$prefix] = array_merge(\n                $this->prefixDirsPsr4[$prefix],\n                (array) $paths\n            );\n        }\n    }\n\n\n    public function set($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr0 = (array) $paths;\n        } else {\n            $this->prefixesPsr0[$prefix[0]][$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setPsr4($prefix, $paths)\n    {\n        if (!$prefix) {\n            $this->fallbackDirsPsr4 = (array) $paths;\n        } else {\n            $length = strlen($prefix);\n            if ('\\\\' !== $prefix[$length - 1]) {\n                throw new \\InvalidArgumentException(\"A non-empty PSR-4 prefix must end with a namespace separator.\");\n            }\n            $this->prefixLengthsPsr4[$prefix[0]][$prefix] = $length;\n            $this->prefixDirsPsr4[$prefix] = (array) $paths;\n        }\n    }\n\n\n    public function setUseIncludePath($useIncludePath)\n    {\n        $this->useIncludePath = $useIncludePath;\n    }\n\n\n    public function getUseIncludePath()\n    {\n        return $this->useIncludePath;\n    }\n\n\n    public function register($prepend = false)\n    {\n        spl_autoload_register(array($this, 'loadClass'), true, $prepend);\n    }\n\n\n    public function unregister()\n    {\n        spl_autoload_unregister(array($this, 'loadClass'));\n    }\n\n\n    public function loadClass($class)\n    {\n        if ($file = $this->findFile($class)) {\n            includeFile($file);\n\n            return true;\n        }\n    }\n\n\n    public function findFile($class)\n    {\n\n        if ('\\\\' == $class[0]) {\n            $class = substr($class, 1);\n        }\n\n\n        if (isset($this->classMap[$class])) {\n            return $this->classMap[$class];\n        }\n\n        $file = $this->findFileWithExtension($class, '.php');\n\n\n        if ($file === null && defined('HHVM_VERSION')) {\n            $file = $this->findFileWithExtension($class, '.hh');\n        }\n\n        if ($file === null) {\n\n            return $this->classMap[$class] = false;\n        }\n\n        return $file;\n    }\n\n    private function findFileWithExtension($class, $ext)\n    {\n\n        $logicalPathPsr4 = strtr($class, '\\\\', DIRECTORY_SEPARATOR) . $ext;\n\n        $first = $class[0];\n        if (isset($this->prefixLengthsPsr4[$first])) {\n            foreach ($this->prefixLengthsPsr4[$first] as $prefix => $length) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($this->prefixDirsPsr4[$prefix] as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . substr($logicalPathPsr4, $length))) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr4 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr4)) {\n                return $file;\n            }\n        }\n\n\n        if (false !== $pos = strrpos($class, '\\\\')) {\n\n            $logicalPathPsr0 = substr($logicalPathPsr4, 0, $pos + 1)\n                . strtr(substr($logicalPathPsr4, $pos + 1), '_', DIRECTORY_SEPARATOR);\n        } else {\n\n            $logicalPathPsr0 = strtr($class, '_', DIRECTORY_SEPARATOR) . $ext;\n        }\n\n        if (isset($this->prefixesPsr0[$first])) {\n            foreach ($this->prefixesPsr0[$first] as $prefix => $dirs) {\n                if (0 === strpos($class, $prefix)) {\n                    foreach ($dirs as $dir) {\n                        if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                            return $file;\n                        }\n                    }\n                }\n            }\n        }\n\n\n        foreach ($this->fallbackDirsPsr0 as $dir) {\n            if (file_exists($file = $dir . DIRECTORY_SEPARATOR . $logicalPathPsr0)) {\n                return $file;\n            }\n        }\n\n\n        if ($this->useIncludePath && $file = stream_resolve_include_path($logicalPathPsr0)) {\n            return $file;\n        }\n    }\n}\n\n\nfunction includeFile($file)\n{\n    include $file;\n}\n\n'alfred-devdocs/src/scripts/conf.php'\n:<?php\n\n\n\nnamespace CFPropertyList;\n\nini_set('display_errors', 0);\n\nrequire_once 'vendor/autoload.php';\nrequire_once 'workflows.php';\n\nclass DevDocsConf {\n\n  private static $baseUrl = 'https:\n  private static $cacheDirectory = 'cache/';\n\n  private $commands = ['add' => 1, 'remove' => 1, 'refresh' => 1, 'list' => 1, 'alias' => 1, 'unalias' => 1, 'select' => 0, 'addAll' => 0, 'nuke' => 0];\n  private $currentCmd = [];\n  private $currentConfig;\n  private $query;\n  private $documentations;\n  private $aliases;\n  private $workflows;\n  private $pList;\n  private $rootPath;\n\n  public function __construct($query) {\n    $this->query = $query;\n    $this->workflows = new \\Workflows();\n    $cache = $this->workflows->cache();\n    if ($cache !== false) {\n      self::$cacheDirectory = $cache . '/';\n    }\n\n    $this->loadAliases();\n    $this->loadDocs();\n    $this->parseCommand($query);\n    $this->buildRootPath();\n    $this->openPlist();\n    $this->setDocumentations();\n\n    if (method_exists($this, $this->currentCmd[0] . 'Cmd')) {\n      $this->{$this->currentCmd[0] . 'Cmd'}();\n    }\n  }\n\n  private function openPlist() {\n    $this->pList = new CFPropertyList($this->rootPath . '/info.plist');\n    $this->pList = $this->pList->toArray();\n    $this->regeneratePlist();\n  }\n\n  private function parseCommand($rawQuery) {\n    $this->currentCmd = explode(' ', $rawQuery);\n    if (!empty($this->currentCmd)) {\n      $commandToCheck = (strpos($this->currentCmd[0], 'select') === 0) ? 'select' : $this->currentCmd[0];\n      return (\n        ($commandToCheck === 'select' || key_exists($commandToCheck, $this->commands)) &&\n        (count($this->currentCmd) - 1 >= $this->commands[$commandToCheck])\n      );\n    } else {\n      $this->currentCmd[0] = '';\n    }\n    return false;\n  }\n\n  private function buildRootPath() {\n    $this->rootPath = str_replace('/scripts', '', $this->workflows->path());\n  }\n\n  private function flushToAlfred() {\n    echo $this->workflows->toxml();\n  }\n\n  private function regeneratePlist() {\n    $buildPlist = function ($rootPath, $documentations, $aliases, $variables) {\n      ob_start();\n      include $rootPath . '/scripts/plist.phtml';\n      $fileContent = ob_get_contents();\n      ob_end_clean();\n      file_put_contents($rootPath . '/info.plist', $fileContent);\n    };\n    $buildPlist($this->rootPath, $this->currentConfig, $this->aliases, $this->pList['variables']);\n  }\n\n  private function setDocumentations() {\n    $docFile = self::$cacheDirectory . 'docs.json';\n\n    if (!file_exists($docFile) || (filemtime($docFile) <= time() - 86400 * 7) || is_null(@json_decode(file_get_contents($docFile)))) {\n      file_put_contents($docFile, $this->workflows->fetch(self::$baseUrl . 'docs/docs.json'));\n    }\n    $docs = @json_decode(file_get_contents($docFile));\n    $this->documentations = [];\n    if (is_array($docs)) {\n      foreach ($docs as $doc) {\n        $doc->fullName = $doc->name . (!empty($doc->version) ? ' ' . $doc->version : '');\n        $this->documentations[$doc->slug] = $doc;\n      }\n    }\n  }\n\n  private function loadAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    $this->aliases = @json_decode(file_get_contents($aliasesFile), true);\n    if (!is_array($this->aliases)) {\n      $this->aliases = [];\n      $this->saveAliases();\n    }\n  }\n\n  private function saveAliases() {\n    $aliasesFile = $this->workflows->data() . '/aliases.json';\n    file_put_contents($aliasesFile, json_encode($this->aliases));\n  }\n\n  private function loadDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    $this->currentConfig = @json_decode(file_get_contents($docsFile), true);\n    if (!is_array($this->currentConfig)) {\n      $this->currentConfig = [];\n      $this->saveDocs();\n    } else {\n      foreach ($this->currentConfig as $key => $doc) {\n        $this->currentConfig[$key] = (object) $doc;\n      }\n    }\n  }\n\n  private function saveDocs() {\n    $docsFile = $this->workflows->data() . '/docs.json';\n    file_put_contents($docsFile, json_encode($this->currentConfig));\n  }\n\n  private function filter($search, $collection) {\n    $filtered = array_filter(\n      $collection,\n      function ($element) use ($search) {\n        return ($search !== '') ? stripos($element->slug, $search) !== false : true;\n      }\n    );\n    uasort($filtered, function ($elementA, $elementB) {\n      return $elementA->slug >= $elementB->slug;\n    });\n    return $filtered;\n  }\n\n  private function flatten($arr) {\n    $flattenAliases = [];\n    array_walk_recursive($arr, function ($a) use (&$flattenAliases) {\n      $flattenAliases[] = $a;\n    });\n    return $flattenAliases;\n  }\n\n  private function helpText($title, $subtitle = '') {\n    $this->workflows->result(\n      '',\n      '',\n      $title,\n      $subtitle,\n      '',\n      'no',\n      \"{$this->currentCmd[1]} \"\n    );\n  }\n\n  private function selectAddCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $availableDocs = array_diff_key($this->documentations, $this->currentConfig);\n    $availableDocs = $this->filter($search, $availableDocs);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"add \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function addCmd() {\n    $doc = $this->documentations[$this->currentCmd[1]];\n    $this->currentConfig[$this->currentCmd[1]] = $doc;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    if (!file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      @copy($this->rootPath . '/' . $doc->type . '.png', $this->rootPath . '/' . $doc->slug . '.png');\n    }\n    echo $this->currentCmd[1] . ' added!';\n  }\n\n  private function selectRemoveCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n    foreach ($availableDocs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        \"remove \" . $doc->slug,\n        $doc->fullName,\n        '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function removeCmd() {\n    unset($this->currentConfig[$this->currentCmd[1]]);\n    unset($this->aliases[$this->currentCmd[1]]);\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo $this->currentCmd[1] . ' removed!';\n  }\n\n  private function selectRefreshCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $availableDocs = $this->filter($search, $this->currentConfig);\n\n    if (count($availableDocs) === 0) {\n      $this->helpText('No results.');\n    } else {\n      $this->workflows->result(\n        'all',\n        \"refresh all\",\n        \"All docs\",\n        '',\n        $this->rootPath . '/all.png'\n      );\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"refresh \" . $doc->slug,\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          $doc->slug\n        );\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function refreshCmd() {\n    $updateAll = ($this->currentCmd[1] === 'all');\n    $docToUpdate = $updateAll ? $this->currentConfig : [$this->currentCmd[1] => $this->currentConfig[$this->currentCmd[1]]];\n    foreach ($docToUpdate as $doc) {\n      file_put_contents(\n        self::$cacheDirectory . $doc->slug . '.json',\n        $this->workflows->fetch(self::$baseUrl . 'docs/' . $doc->slug . '/index.json')\n      );\n    }\n    echo (($updateAll) ? 'All data docs' : $this->currentCmd[1] . ' doc') . ' updated!';\n  }\n\n  private function listCmd() {\n    $search = (isset($this->currentCmd[1])) ? $this->currentCmd[1] : '';\n    $docs = $this->filter($search, $this->documentations);\n    foreach ($docs as $doc) {\n      $this->workflows->result(\n        $doc->slug,\n        json_encode($doc),\n        $doc->fullName,\n        (isset($this->currentConfig[$doc->slug])) ? 'Already in your doc list' : '',\n        $this->getIcon($doc),\n        'yes',\n        $doc->slug\n      );\n    }\n    $this->flushToAlfred();\n  }\n\n  private function getIcon($doc) {\n    if (file_exists($this->rootPath . '/' . $doc->slug . '.png')) {\n      return $this->rootPath . '/' . $doc->slug . '.png';\n    } else {\n      return $this->rootPath . '/' . $doc->type . '.png';\n    }\n  }\n\n  private function addAllCmd() {\n    $this->currentConfig = $this->documentations;\n    $this->regeneratePlist();\n    $this->saveDocs();\n    echo 'All docs added!';\n  }\n\n  private function nukeCmd() {\n    $this->currentConfig = [];\n    $this->aliases = [];\n    $this->regeneratePlist();\n    $this->saveDocs();\n    $this->saveAliases();\n    echo 'All docs removed!';\n  }\n\n  private function selectAliasCmd() {\n    if (!isset($this->currentCmd[1]) || empty($this->currentCmd[1]) ||\n      !isset($this->currentCmd[2]) || empty($this->currentCmd[2])\n    ) {\n\n      $this->helpText('Enter an alias and a documentation', 'e.g.: cdoc:alias ng angular~4_typescript');\n    } else {\n      $alias = $this->currentCmd[1];\n      $docName = $this->currentCmd[2];\n\n      $availableDocs = $this->filter($docName, $this->currentConfig);\n      foreach ($availableDocs as $doc) {\n        $this->workflows->result(\n          $doc->slug,\n          \"alias $alias $doc->slug\",\n          $doc->fullName,\n          '',\n          $this->getIcon($doc),\n          'yes',\n          \"$alias $doc->slug\"\n        );\n      }\n      if (count($availableDocs) === 0) {\n        $this->helpText('No results.');\n      }\n    }\n    $this->flushToAlfred();\n  }\n\n  private function aliasCmd() {\n    $alias = $this->currentCmd[1];\n    $docName = $this->currentCmd[2];\n    $docExists = isset($this->documentations[$docName]);\n    if ($docExists) {\n      if (!isset($this->aliases[$docName])) {\n        $this->aliases[$docName] = [];\n      }\n      $this->aliases[$docName][] = $alias;\n    }\n\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName added!\";\n  }\n\n  private function selectUnaliasCmd() {\n    $search = isset($this->currentCmd[1]) ? $this->currentCmd[1] : '';\n    $aliases = $this->flatten($this->aliases);\n    if (!empty($search)) {\n      $aliases = array_filter(\n        $aliases,\n        function ($element) use ($search) {\n          return ($search !== '') ? stripos($element, $search) !== false : true;\n        }\n      );\n    }\n    sort($aliases);\n    foreach ($aliases as $alias) {\n      $this->workflows->result(\n        $alias,\n        \"unalias $alias\",\n        $alias,\n        '',\n        '',\n        'yes',\n        $alias\n      );\n    }\n    if (count($aliases) === 0) {\n      $this->helpText('No results.');\n    }\n    $this->flushToAlfred();\n  }\n\n  private function unaliasCmd() {\n    $alias = $this->currentCmd[1];\n    foreach ($this->aliases as $docName => $docAliases) {\n      if (in_array($alias, $docAliases)) {\n        $this->aliases[$docName] = array_diff($docAliases, [$alias]);\n      }\n      if (count($this->aliases[$docName]) === 0) {\n        unset($this->aliases[$docName]);\n      }\n    }\n    $this->regeneratePlist();\n    $this->saveAliases();\n\n    echo \"Alias $alias to $docName removed!\";\n  }\n\n}\n\n$query = isset($query) ? $query : '';\nnew DevDocsConf($query);\n\n'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'\n:<?php\n\n\n\nclass ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558\n{\n    private static $loader;\n\n    public static function loadClassLoader($class)\n    {\n        if ('Composer\\Autoload\\ClassLoader' === $class) {\n            require __DIR__ . '/ClassLoader.php';\n        }\n    }\n\n    public static function getLoader()\n    {\n        if (null !== self::$loader) {\n            return self::$loader;\n        }\n\n        spl_autoload_register(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'), true, true);\n        self::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();\n        spl_autoload_unregister(array('ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558', 'loadClassLoader'));\n\n        $map = require __DIR__ . '/autoload_namespaces.php';\n        foreach ($map as $namespace => $path) {\n            $loader->set($namespace, $path);\n        }\n\n        $map = require __DIR__ . '/autoload_psr4.php';\n        foreach ($map as $namespace => $path) {\n            $loader->setPsr4($namespace, $path);\n        }\n\n        $classMap = require __DIR__ . '/autoload_classmap.php';\n        if ($classMap) {\n            $loader->addClassMap($classMap);\n        }\n\n        $loader->register(true);\n\n        return $loader;\n    }\n}\n\nfunction composerRequire3d99f8948a728a3257d99fd422135558($file)\n{\n    require $file;\n}\n\n'alfred-devdocs/src/scripts/vendor/autoload.php'\n:<?php\n\n\n\nrequire_once __DIR__ . '/composer' . '/autoload_real.php';\n\nreturn ComposerAutoloaderInit3d99f8948a728a3257d99fd422135558::getLoader();\n",
        "gt": [
            "'alfred-devdocs/src/scripts/vendor/composer/ClassLoader.php'",
            "'alfred-devdocs/src/scripts/vendor/composer/autoload_real.php'",
            "'alfred-devdocs/src/scripts/vendor/autoload.php'",
            "'alfred-devdocs/src/scripts/conf.php'"
        ]
    },
    {
        "files": [
            "'aurora/Web Interface/functions.php'",
            "'aurora/Web Interface/index.php'",
            "'aurora/Web Interface/config.php'"
        ],
        "content": "'aurora/Web Interface/functions.php'\n:<?php\n\n\nfunction processDirPath($dir) {\n  $dir = preg_replace('/\\.\\./', '', $dir);\n  return preg_replace('/\\\n}\n\nfunction getAllFilesfromDirectory($dir, $sort = true, $sortby = \"name\", $sortorder = SORT_ASC, $ignore = array()) {\n  $files = array();\n  if (!is_dir($dir))\n    return array();\n  $handle = opendir($dir);\n  if ($handle) {\n    $files = array();\n    while (false !== ($entry = readdir($handle))) {\n      if ($entry != \".\" && $entry != \"..\" && !in_array($entry, $ignore)) {\n        $files[$entry] = filectime($dir . \"/\" . $entry);\n      }\n    }\n    closedir($handle);\n  }\n  if (!$sort) {\n    return array_keys($files);\n  }\n  else {\n    if ($sortby == \"date\") {\n      asort($files);\n      if ($sortorder == SORT_DESC) {\n        return array_reverse(array_keys($files));\n      }\n      return array_keys($files);\n    }\n    else if ($sortby == \"name\") {\n      $files = array_keys($files);\n      natsort($files);\n      if ($sortorder == SORT_DESC) {\n        return array_reverse(array_values($files));\n      }\n      return array_values($files);\n    }\n  }\n  return false;\n}\n\nfunction getGeneralCoverImage($category) {\n  foreach (getCoverNames() as $cover) {\n    if (file_exists(GENERAL_PATH . \"/\" . $category . \"/\" . $cover)) {\n      return GENERAL_URL . \"/\" . $category . \"/\" . $cover;\n    }\n  }\n  return NOTFOUND_URL;\n}\n\nfunction getCoverNames() {\n  global $EXTNS;\n  $e = array();\n  foreach ($EXTNS as $extn) {\n    $e[] = \"cover.\" . $extn;\n  }\n  return $e;\n}\n\nfunction saveOrderedImages($uid, $type, $category, $name) {\n  $query = \"select * from orders where deleted = 0 and fk_user_id = :uid and type=:type and category = :category and name = :name\";\n  $res = DB::findOneFromQuery($query, array(\":uid\" => $uid, \":type\" => $type, \":category\" => $category, \":name\" => $name));\n  if (!($res && count($res) > 0)) {\n    return DB::insert(\"orders\", array(\"fk_user_id\" => $uid, \"type\" => $type, \"category\" => $category, \"name\" => $name));\n  }\n  return -1;\n}\n\nfunction getOrderedImages($uid) {\n  $query = \"select * from orders where deleted=0 and fk_user_id = $uid\";\n  $res = DB::findAllFromQuery($query);\n  $img = array();\n  foreach ($res as $value) {\n    if ($value['type'] == \"general\") {\n      $path = GENERAL_PATH;\n      $url = GENERAL_URL;\n    }\n    else if ($value['type'] == \"premium\") {\n      $path = PREMIUM_PATH;\n      $url = PREMIUM_URL;\n    }\n    if (file_exists($path . \"/\" . $value['category'] . \"/\" . $value['name'])) {\n      $value['url'] = $url . \"/\" . $value['category'] . \"/\" . $value['name'];\n    }\n    else {\n      $value['url'] = NOTFOUND_URL;\n    }\n    $img[] = $value;\n  }\n  return $img;\n}\n\nfunction getOrderedImageUrls($uid) {\n  $query = \"select * from orders where deleted = 0 and fk_user_id = $uid\";\n  $res = DB::findAllFromQuery($query);\n  $img = array();\n  foreach ($res as $index => $value) {\n    if ($value['type'] == \"general\") {\n      $path = GENERAL_PATH;\n      $url = GENERAL_URL;\n    }\n    else if ($value['type'] == \"premium\") {\n      $path = PREMIUM_PATH;\n      $url = PREMIUM_URL;\n    }\n    if (file_exists($path . \"/\" . $value['category'] . \"/\" . $value['name'])) {\n      $img[$index] = $url . \"/\" . $value['category'] . \"/\" . $value['name'];\n    }\n    else {\n      $img[$index] = NOTFOUND_URL;\n    }\n  }\n  return $img;\n}\n\nfunction removeFromOrders($uid, $type, $category, $name) {\n  return DB::update(\"orders\", array(\"deleted\" => 1), \"fk_user_id = :uid and type=:type and category = :category and name = :name\", array(\":uid\" => $uid, \":type\" => $type, \":category\" => $category, \":name\" => $name));\n}\n\nfunction checkOrdered($img) {\n  if (isset($_SESSION['loggedin'])) {\n    $images = getOrderedImageUrls($_SESSION['user']['id']);\n    if (in_array($img, $images))\n      return true;\n    return false;\n  }\n  return false;\n}\n\nfunction redirectTo($url, $exit = true) {\n  header(\"Location:\" . $url);\n  if ($exit) {\n    exit;\n  }\n}\n\nfunction redirectAfter($url) {\n  if (isset($_SESSION['RedirectUrl'])) {\n    $url = $_SESSION['RedirectUrl'];\n    unset($_SESSION['RedirectUrl']);\n  }\n  redirectTo($url);\n}\n\nfunction checkLogin() {\n  if (!isset($_SESSION[\"loggedin\"])) {\n    $_SESSION['RedirectUrl'] = $_SERVER['REQUEST_URI'];\n    header(\"Location:\" . SITE_URL);\n    exit;\n  }\n}\n\nfunction getCacheNumber() {\n  return DEBUG ? date(\"YmdHis\") : date(\"YmdH\");\n}\n\nfunction writeFile($filename, $data) {\n  $file = fopen($filename, \"a+\");\n  if ($file) {\n    fputs($file, date(\"[Y-m-d H:i:s]\\n\") . $data\n            . \"\\n======================================================================\\n\");\n    fclose($file);\n  }\n}\n\nfunction writeError($data) {\n  writeFile(ERROR_LOG, $data);\n}\n\nfunction isValidEmail($email) {\n  $pattern = \"^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$\";\n  if (eregi($pattern, $email)) {\n    return true;\n  }\n  return false;\n}\n\nfunction sendMail($subject, $body, $to, $from = \"ACM BIT Mesra <team@bitmesra.acm.org>\") {\n  require_once MAIL_PATH;\n  $headers = array('From' => $from,\n      'To' => $to,\n      'Subject' => $subject,\n      'Date' => date(\"Y-m-d H:i:s\") . \" +0530\",\n      'Content-Type' => 'text/html',\n      'charset' => 'UTF-8'\n  );\n  $smtp = Mail::factory('smtp', array('host' => MAIL_HOST,\n              'port' => MAIL_PORT,\n              'auth' => true,\n              'username' => MAIL_USER,\n              'password' => MAIL_PASS));\n  $mail = $smtp->send($to, $headers, $body);\n  $data = \"Mail:\\n\" . print_r(array(\"To\" => $to, \"From\" => $from, \"Subject\" => $subject, \"Body\" => $body), true);\n  if (PEAR::isError($mail)) {\n    writeError($data);\n    return false;\n  }\n  writeFile(COMMENTS_LOG, $data);\n  return true;\n}\n\nfunction prettyPrint($data, $withType = false) {\n  echo \"<pre>\";\n  $withType ? var_dump($data) : print_r($data);\n  echo \"</pre>\";\n}\n\nfunction printPageNos($total) {\n  if ($total > 1) {\n    parse_str($_SERVER['QUERY_STRING'], $query_string);\n    echo \"<p class='pagenos'>Page: \";\n    for ($i = 1; $i <= $total; $i++) {\n      $query_string['page'] = $i;\n      echo \"<a style='text-decoration:none' href='?\" . http_build_query($query_string) . \"'>$i</a> \";\n    }\n    echo \"</p>\";\n  }\n}\n\nfunction removeSlashes($data) {\n  return str_replace(\"\\\\\", \"\", $data);\n}\n\nfunction getSessionMessage($name) {\n  if (isset($_SESSION[$name])) {\n    $data = $_SESSION[$name];\n    unset($_SESSION[$name]);\n  }\n  else {\n    $data = \"\";\n  }\n  return $data;\n}\n\nfunction isAdmin() {\n    return isset($_SESSION['loggedin']) && $_SESSION['team']['status'] == \"Admin\";\n}\n\nclass DB {\n\n  public static $connection = null;\n\n  public static function initialize() {\n    if (self::$connection != null)\n      return true;\n    try {\n      self::$connection = new PDO(\"mysql:dbname=\" . SQL_DB . \";host=\" . SQL_HOST . \";port=\" . SQL_PORT . \"\", SQL_USER, SQL_PASS, array(\n                  PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true,\n                  PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n                  PDO::MYSQL_ATTR_INIT_COMMAND => \"SET NAMES utf8\"\n              ));\n      self::$connection->exec(\"SET CHARACTER SET utf8\");\n    }\n    catch (PDOException $error) {\n      self::$connection = null;\n      writeError('DB Connection failed:\\n' . $error->getMessage());\n      die(\"Error creating database connection (error log)!\");\n      return false;\n    }\n    return true;\n  }\n\n  public static function closeConnection() {\n    self::$connection = null;\n    return true;\n  }\n\n  private static function handleError($e = null, $data = \"\") {\n    if ($e != null) {\n      $data .= \"\\nError: \" . $e->getMessage() . \"\\n\" . $e->getFile();\n    }\n    writeError(\"Query error:\\n\" . $data);\n  }\n\n  public static function query($query, $values = null) {\n    if (!self::initialize())\n      return false;\n    try {\n      if (is_array($values)) {\n        $stmt = self::$connection->prepare($query);\n        $stmt->execute($values);\n        return $stmt->fetchAll(PDO::FETCH_ASSOC);\n      }\n      else {\n        return self::$connection->query($query);\n      }\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function findAllWithCount($select, $body, $page, $limit) {\n    if (!self::initialize())\n      return false;\n    $countselect = \"SELECT count(*) as count \";\n    $limitquery = \" LIMIT \" . ($page - 1) * $limit . \",\" . $limit;\n    $query = $countselect . $body;\n    $count = self::findOneFromQuery($query);\n    $res['total'] = $count['count'];\n    $res['noofpages'] = ceil($count['count'] * 1.0 / $limit);\n    $query = $select . \" \" . $body . $limitquery;\n    $res['data'] = self::findAllFromQuery($query);\n    return $res;\n  }\n\n  public static function insert($table, $data) {\n    if (!self::initialize())\n      return false;\n    $data['createdOn'] = date(\"Y-m-d H:i:s\");\n    $data['updatedOn'] = date(\"Y-m-d H:i:s\");\n    $keys = array();\n    $values = array();\n    foreach ($data as $key => $value) {\n      $keys[] = $key;\n      $values[] = self::$connection->quote($value);\n    }\n    $query = 'INSERT INTO ' . $table . ' (' . join(', ', $keys) . ') VALUES (' . join(', ', $values) . ')';\n    try {\n      return self::$connection->exec($query);\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function update($table, $data, $where, $values = null) {\n    if (!self::initialize())\n      return false;\n    $data['updatedOn'] = date(\"Y-m-d H:i:s\");\n    $setters = array();\n    foreach ($data as $key => $value) {\n      $setters[] = $key . '=' . self::$connection->quote($value);\n    }\n    $query = 'UPDATE ' . $table . ' SET ' . join(', ', $setters) . ' WHERE ' . $where;\n    try {\n      if (is_array($values)) {\n        $stmt = self::$connection->prepare($query);\n        $stmt->execute($values);\n      }\n      else {\n        $stmt = self::$connection->exec($query);\n      }\n      return $stmt;\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function delete($table, $where) {\n    return self::update($table, array(\"deleted\" => 1), $where);\n  }\n\n  public static function findAllFromQuery($query, $values = null) {\n    if (!self::initialize())\n      return false;\n    try {\n      if (is_array($values)) {\n        $stmt = self::$connection->prepare($query);\n        $stmt->execute($values);\n      }\n      else {\n        $stmt = self::$connection->query($query);\n      }\n      return $stmt->fetchAll(PDO::FETCH_ASSOC);\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function findOneFromQuery($query, $values = null) {\n    if (!self::initialize())\n      return false;\n    try {\n      if (is_array($values)) {\n        $stmt = self::$connection->prepare($query);\n        $stmt->execute($values);\n      }\n      else {\n        $stmt = self::$connection->query($query);\n      }\n      return $stmt->fetch(PDO::FETCH_ASSOC);\n    }\n    catch (PDOException $e) {\n      self::handleError($e, $query);\n      return false;\n    }\n  }\n\n  public static function logActivity($activity, $message, $result) {\n    if (!self::initialize()) {\n      writeError(\"No connection error:\\n\" . $activity . \"\\n\" . $message . \"\\n\" . $result);\n      return false;\n    }\n    $createTable = \"CREATE TABLE IF NOT EXISTS `activity_log` (\n  `id` int(11) NOT NULL AUTO_INCREMENT,\n  `activity` text NOT NULL,\n  `message` text NOT NULL,\n  `result` text NOT NULL,\n  `session` text NOT NULL,\n  `createdOn` datetime NOT NULL,\n  `updatedOn` datetime NOT NULL,\n  PRIMARY KEY (`id`)\n) ENGINE=InnoDB DEFAULT CHARSET=utf8;\";\n    self::query($createTable);\n    $data = array(\"activity\" => $activity, \"message\" => $message, \"result\" => $result);\n    $table = \"activity_log\";\n    $data['session'] = print_r($_SESSION, true);\n    $data['updatedOn'] = date(\"Y-m-d H:i:s\");\n    $data['createdOn'] = date(\"Y-m-d H:i:s\");\n    return self::insert($table, $data);\n  }\n\n  public static function escape($value) {\n    if (!self::initialize())\n      return false;\n    return self::$connection->quote($value);\n  }\n\n  public static function lastInsertId() {\n    if (!self::initialize())\n      return false;\n    return self::$connection->lastInsertId();\n  }\n\n}\n\n?>\n\n'aurora/Web Interface/index.php'\n:<?php\nrequire_once 'config.php';\nrequire_once 'components.php';\n$_SESSION['url'] = $_SERVER['REQUEST_URI'];\n$query = \"select value from admin where variable='mode'\";\n$judge = DB::findOneFromQuery($query);\nif ($judge['value'] == 'Lockdown' && isset($_SESSION['loggedin']) && !isAdmin()) {\n    session_destroy();\n    session_regenerate_id(true);\n    session_start();\n    $_SESSION['msg'] = \"Judge is in Lockdown mode and so you have been logged out.\";\n    redirectTo(SITE_URL . \"/\");\n}\ndoCompetitionCheck();\n?>\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"description\" content=\"Aurora is a dockerized open-source online judge. It can be easily deployed and scaled. It also employs the latest security checks to secure the application.\">\n        <meta name=\"keywords\" content=\"open source, online judge, docker, secure, scaleable\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"<?php echo SITE_URL ?>/css/bootstrap.css\" media=\"screen\" />\n        <link type=\"text/css\" rel=\"stylesheet\" href=\"<?php echo SITE_URL ?>/css/style.css\" media=\"screen\" />\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/jquery-3.1.0.min.js\"></script>\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/bootstrap.js\"></script>\n        <script type=\"text/javascript\" src=\"<?php echo SITE_URL ?>/js/plugin.js\"></script>\n        <script type=\"text/javascript\">\n            $(window).load(function() {\n                if ($('\n                    $('\n            });\n        </script>\n        <title>Aurora - An open-source online judge</title>\n        <link rel='shortcut icon' href='<?php echo SITE_URL; ?>/img/favicon.png' />\n    </head>\n    <body>\n        <?php if ($judge['value'] == 'Active' && isset($_SESSION['loggedin'])) { ?>\n            <script type='text/javascript'>\n                function settitle() {\n                    var t = window.document.title;\n                    var n = t.match(/(\\d*)\\)/gi);\n                    console.log(n);\n                    if (n != null) {\n                        n = parseInt(n) + 1;\n                    } else {\n                        n = 1;\n                    }\n                    window.document.title = \"(\" + n + \") Aurora\";\n                }\n                function resettile() {\n                    $.ajax({\n                        type: \"GET\",\n                        url: \"<?php echo SITE_URL; ?>/broadcast.php\",\n                        data: {updatetime: \"\"}\n                    });\n                    window.document.title = \"Aurora\";\n                }\n                window.setTimeout(\"bchk();\", <?php echo rand(300000, 600000); ?>);\n                $.ajax(\"<?php echo SITE_URL; ?>/broadcast.php\").done(function(msg) {\n                    var json = eval('(' + msg + ')');\n                    console.log(msg);\n                    if (json.broadcast.length != 0) {\n                        var str, i;\n                        str = \"\";\n                        for (i = 0; i < json.broadcast.length; i++)\n                            str += \"<b>\" + json.broadcast[i].title + \":</b><br/>\" + json.broadcast[i].msg + \"<br/><br/>\";\n                        $(\"\n                        $('\n                            resettile();\n                        });\n                        $(\"\n                        settitle();\n                    }\n                });\n                function bchk() {\n                    $.ajax(\"<?php echo SITE_URL; ?>/broadcast.php\").done(function(msg) {\n                        var json = eval('(' + msg + ')');\n                        console.log(msg);\n                        if (json.broadcast.length != 0) {\n                            var str, i;\n                            str = \"\";\n                            for (i = 0; i < json.broadcast.length; i++)\n                                str += \"<b>\" + json.broadcast[i].title + \":</b><br/>\" + json.broadcast[i].msg + \"<br/><br/>\";\n                            $(\"\n                            $('\n                                resettile();\n                            });\n                            $(\"\n                            settitle();\n                        }\n                    });\n                    window.setTimeout(\"bchk();\", 600000);\n                }\n            </script>\n            <div class=\"modal fade\" id=\"myModal\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n                <div class=\"modal-dialog\">\n                    <div class=\"modal-content\">\n                        <div class=\"modal-header\">\n                            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\">&times;</button>\n                            <h4 class=\"modal-title\" id=\"myModalLabel\">Alert</h4>\n                        </div>\n                        <div class=\"modal-body\" id=\"bmsg\">\n\n                        </div>\n                        <div class=\"modal-footer\">\n                            <button type=\"button\" class=\"btn btn-primary\" data-dismiss=\"modal\">Close</button>\n                        </div>\n                    </div><!-- /.modal-content -->\n                </div><!-- /.modal-dialog -->\n            </div>\n        <?php }\n        ?>\n        <nav class=\"navbar navbar-default navbar-fixed-top\" role=\"navigation\">\n            <div class=\"container\">\n                <div class=\"navbar-header\">\n                    <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"\n                        <span class=\"sr-only\">Toggle navigation</span>\n                        <span class=\"icon-bar\"></span>\n                        <span class=\"icon-bar\"></span>\n                        <span class=\"icon-bar\"></span>\n                    </button>\n                    <a class=\"navbar-brand\" href=\"<?php echo SITE_URL; ?>/\">Aurora</a>\n                </div>\n\n                <div class=\"collapse navbar-collapse\" id=\"navbar-collapse-1\">\n                    <ul class=\"nav navbar-nav\">\n                        <!-- <li><a href=\"<?php echo SITE_URL; ?>/home\">Home</a></li> -->\n                        <li><a href=\"<?php echo SITE_URL; ?>/problems\">Problems</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/contests\">Contests</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/rankings\">Rankings</a></li>\n                        <li><a href=\"<?php echo SITE_URL; ?>/submissions\">Submissions</a></li>\n                        <li class=\"dropdown\">\n                            <a href=\"\n                            <ul class=\"dropdown-menu\" role=\"menu\">\n                                <li><a href=\"<?php echo SITE_URL; ?>/faq\">FAQ</a></li>\n                                <li><a href=\"<?php echo SITE_URL; ?>/contact\">Contact Us</a></li>\n                            </ul>\n                        </li>\n                    </ul>\n                    <?php if (isset($_SESSION['loggedin'])) { ?>\n                        <ul class=\"nav navbar-nav pull-right\">\n                            <?php if ($_SESSION['team']['status'] == 'Admin') { ?>\n                                <li class=\"dropdown\">\n                                    <a href=\"\n                                        Admin\n                                        <b class=\"caret\"></b>\n                                    </a>\n                                    <ul class=\"dropdown-menu\">\n                                        <li><a href='<?php echo SITE_URL; ?>/adminjudge'>Judge Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminproblem'>Problem Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/admincontest'>Contest Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminteam'>Team Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/admingroup'>Group Settings</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminclar'>Clarifications</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminbroadcast'>Broadcast</a></li>\n                                        <li><a href='<?php echo SITE_URL; ?>/adminlog'>Request Logs</a></li>\n                                    </ul>\n                                </li>\n                            <?php } ?>\n                            <li class=\"dropdown\">\n                                <a href=\"\n                                    Account\n                                    <b class=\"caret\"></b>\n                                </a>\n                                <ul class=\"dropdown-menu\">\n                                    <li><a href='<?php echo SITE_URL; ?>/edit'>Account Settings</a></li>\n                                    <li><a href='<?php echo SITE_URL; ?>/process.php?logout'>Logout</a></li>\n                                </ul>\n                            </li>\n                        </ul>\n                    <?php } ?>\n                </div>\n            </div>\n        </nav>\n        <div class=\"container bodycont\">\n            <div class='row'>\n                <div class='col-md-9' id='mainbar'>\n                    <?php if (isset($_SESSION['msg']) && $_SESSION['msg'] != \"\") { ?>\n                        <div class=\"alert alert-info\" style=\"margin-top: 20px;\">\n                            <button type=\"button\" class=\"close\" data-dismiss=\"alert\">&times;</button>\n                            <div class=\"text-center\"><?php\n                                echo $_SESSION['msg'];\n                                unset($_SESSION['msg']);\n                                ?></div>\n                        </div>\n                        <?php\n                    }\n                    if (!isset($_GET['tab']) || $_GET['tab'] == 'home') {\n                        $str = 'files/home.php';\n                    } else {\n                        $str = 'files/' . $_GET['tab'] . '.php';\n                    }\n                    if (file_exists($str))\n                        require $str;\n                    else\n                        echo \"<br/><br/><br/><div style='padding: 10px;'><h1>Page not Found :(</h1>The page you are searching for is not on this site.</div><br/><br/><br/>\";\n                    ?>\n                </div>\n                <div class='col-md-3'>\n                    <!-- Login Panel -->\n                    <div class=\"panel panel-default\">\n                        <?php loginbox(); ?>\n                    </div>\n                    <!-- ./Login Panel -->\n\n                    <!-- Contest Panel -->\n                    <div class=\"panel panel-default\">\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Contest</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <?php contest_status(); ?>\n                        </div>\n                    </div>\n                    <!-- ./Contest Panel -->\n\n                    <!-- Ranking Panel -->\n                    <div class=\"panel panel-default\">\n\n                    <?php if ($judge['value'] == 'Active') { ?>\n                        <!-- Contest Ranking -->\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Contest Ranking</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <div id=\"live-ranking\">\n                            <?php getCurrentContestRanking(); ?>\n                                <a style=\"float:right;\" href=\"<?php echo SITE_URL.'/rank/'.getCurrentContest(); ?>\">View all</a>\n                            </div>\n                        </div>\n\n                    <?php } else { ?>\n                        <!-- Overall Ranking -->\n                        <div class=\"panel-heading text-center\">\n                            <h3 class=\"panel-title\">Overall Rankings</h3>\n                        </div>\n                        <div class=\"panel-body text-center\">\n                            <?php rankings(); ?>\n                        </div>\n                    <?php } ?>\n                    </div>\n                    <!-- ./Ranking Panel -->\n\n                    <?php\n\n                    if (isset($_SESSION['loggedin'])) mysubs();\n\n                    if ($judge['value'] == 'Active') latestsubs();\n                    ?>\n\n                </div>\n            </div>\n        </div>\n        <div class=\"footer\">\n            <a href=\"https:\n        </div>\n    </body>\n</html>\n\n'aurora/Web Interface/config.php'\n:<?php\n\nfunction getEnvVar($key, $default) {\n  return getenv($key) ? getenv($key) : $default;\n}\n\n\nfunction getDockerSecretValue($key, $fallbackValue) {\n  $file = getEnvVar($key, null);\n  if ($file && file_exists($file)) {\n    return trim(file_get_contents($file));\n  } else {\n    return $fallbackValue;\n  }\n}\n\n\ndefine(\"SITE_URL\", getEnvVar(\"AURORA_BASE_URL\", \"\"));\ndefine(\"SQL_USER\", getDockerSecretValue('AURORA_SQL_USER_FILE', getEnvVar(\"AURORA_SQL_USER\", \"aurora\")));\ndefine(\"SQL_PASS\", getDockerSecretValue('AURORA_SQL_PASS_FILE', getEnvVar(\"AURORA_SQL_PASS\", \"aurora\")));\ndefine(\"SQL_DB\", getDockerSecretValue('AURORA_SQL_DB_FILE', getEnvVar(\"AURORA_SQL_DB\", \"aurora_main\")));\ndefine(\"SQL_HOST\", getDockerSecretValue('AURORA_SQL_HOST_FILE', getEnvVar(\"AURORA_SQL_HOST\", \"127.0.0.1\")));\ndefine(\"SQL_PORT\", getDockerSecretValue('AURORA_SQL_PORT_FILE', getEnvVar(\"AURORA_SQL_PORT\", \"3306\")));\ndisplayErrors(FALSE);\ndate_default_timezone_set(\"Asia/Kolkata\");\n\n$brush = array(\"AWK\" => \"text\", \"Bash\" =>\"sh\", \"Brain\" => \"text\",\"C\" => \"c\", \"C++\" => \"cpp\", \"C\n$cmmode = \"'C': 'text/x-csrc', 'C++': 'text/x-c++src', 'C\n$valtoname = array(\"AWK\"=>\"AWK\", \"Bash\"=>\"Bash\", \"Brain\" => \"Brainf**k\", \"C\" => \"C\", \"C++\" => \"C++\", \"Java\" => \"Java\", \"C\n$valtoext = array(\"AWK\"=>\"awk\", \"Bash\"=>\"sh\", \"Brain\" => \"b\", \"C\" => \"c\", \"C++\" => \"cpp\", \"Java\" => \"java\", \"C\n\n\nini_set(\"session.gc_maxlifetime\", 86400);\nsession_set_cookie_params(array(\n  'lifetime' => 0,\n  'path' => SITE_URL,\n  'samesite' => 'Lax',\n  'httponly' => true\n));\nsession_start();\nfunction displayErrors($option = true) {\n  if ($option) {\n    error_reporting(E_ALL | E_STRICT);\n    ini_set('display_errors', '1');\n  }\n  else {\n    error_reporting(0);\n    ini_set('display_errors', '0');\n  }\n}\n\ndefine(\"DEBUG\", true);\n\nclearstatcache();\n\ndefine(\"JS_URL\", SITE_URL . \"/js\");\ndefine(\"CSS_URL\", SITE_URL . \"/css\");\ndefine(\"IMAGE_URL\", SITE_URL . \"/img\");\ndefine(\"ACCOUNT_URL\", SITE_URL . \"/account\");\n\ndefine(\"PHPSCRIPTS_PATH\", dirname(__FILE__) . \"/php_scripts\");\n\n\n\ndefine(\"MAIL_PATH\", \"Mail.php\");\n\n\n\n\n\ndefine(\"ERROR_LOG\", dirname(__FILE__) . \"/errors.txt\");\n\n\n\nforeach ($_POST as $key => $value) {\n  $_POST[$key] = addslashes($value);\n}\n\n\nforeach ($_GET as $key => $value) {\n  $_GET[$key] = addslashes($value);\n}\n\nrequire_once 'functions.php';\n\n",
        "gt": [
            "'aurora/Web Interface/functions.php'",
            "'aurora/Web Interface/config.php'",
            "'aurora/Web Interface/index.php'"
        ]
    },
    {
        "files": [
            "'ZnoteAAC/api/index.php'",
            "'ZnoteAAC/api/module.php'",
            "'ZnoteAAC/api/api.php'",
            "'ZnoteAAC/engine/function/general.php'"
        ],
        "content": "'ZnoteAAC/api/index.php'\n:<?php $filepath = '../'; require_once 'module.php';\n\n\n$directory = 'modules';\n$plugins = array();\n\n\n$plugins['base'] = array(\n\t'player' => 'test.php'\n);\n\n$iterator = new DirectoryIterator($directory);\nforeach($iterator as $entity) {\n\tif($entity->isDot())\n\t\tcontinue;\n\t$iterator = new DirectoryIterator($entity->getPathname());\n\tforeach($iterator as $entity) {\n\t\tif($entity->isFile()) {\n\t\t\t$file_extension = pathinfo($entity->getFilename(), PATHINFO_EXTENSION);\n\t\t\tif ($file_extension == 'php') {\n\t\t\t\t$path = explode('/', $entity->getPathname());\n\t\t\t\tif (count($path) === 1) $path = explode('\\\\', $entity->getPathname());\n\t\t\t\t$plugins[$path[1]] = $path[2];\n\t\t\t}\n\t\t}\n\t}\n}\n\n$response['modules'] = $plugins;\n$response['data']['title'] = $config['site_title'];\n$response['data']['slogan'] = $config['site_title_context'];\n$response['data']['time'] = getClock(time(), false, true);\n$response['data']['time_formatted'] = getClock(time(), true, true);\n\n\n$accounts = mysql_select_single(\"SELECT COUNT('id') AS `count` FROM `accounts`;\");\n$response['data']['accounts'] = ($accounts !== false) ? (int)$accounts['count'] : 0;\n\n$players = mysql_select_single(\"SELECT COUNT('id') AS `count` FROM `players`;\");\n$response['data']['players'] = ($players !== false) ? (int)$players['count'] : 0;\n\nif ($config['ServerEngine'] != 'TFS_10') {\n\t$online = mysql_select_single(\"SELECT COUNT('id') AS `count`, COUNT(DISTINCT `lastip`) AS `unique` FROM `players` WHERE `online`='1';\");\n} else {\n\t$online = mysql_select_single(\"SELECT COUNT(`o`.`player_id`) AS `count`, COUNT(DISTINCT `p`.`lastip`) AS `unique` FROM `players_online` AS `o` INNER JOIN `players` AS `p` ON `o`.`player_id` = `p`.`id`;\");\n}\n$response['data']['online'] = ($online !== false) ? (int)$online['count'] : 0;\n$response['data']['online_unique_ip'] = ($online !== false) ? (int)$online['unique'] : 0;\n$response['data']['client'] = $config['client'];\n$response['data']['port'] = $config['port'];\n$response['data']['guildwar'] = $config['guildwar_enabled'];\n$response['data']['forum'] = $config['forum']['enabled'];\n\nSendResponse($response);\n?>\n'ZnoteAAC/api/module.php'\n:<?php if (!isset($filepath)) $filepath = '../../../';\n$moduleVersion = 1;\nrequire 'api.php'; ?>\n'ZnoteAAC/api/api.php'\n:<?php\n\nif (version_compare(phpversion(), '5.6', '<')) die('PHP version 5.6 or higher is required.');\nif (!isset($filepath)) $filepath = '../';\n\n$version = '1.6';\nsession_start();\nob_start();\nrequire_once $filepath.'config.php';\nrequire_once $filepath.'engine/database/connect.php';\nrequire_once $filepath.'engine/function/general.php';\nrequire_once $filepath.'engine/function/cache.php';\n\n\nif (!isset($config['api']['debug'])) $config['api']['debug'] = false;\n\n$response = array(\n\t'version' => array(\n\t\t'znote' => $version,\n\t\t'ot' => $config['ServerEngine']\n\t),\n);\n\nif (isset($moduleVersion)) $response['version']['module'] = $moduleVersion;\n\nfunction UseClass($name = false, $module = false, $path = false) {\n\tif ($name !== false) {\n\t\tif (!is_array($name)) {\n\t\t\tif (!$module) $module = $name;\n\t\t\tif (!$path) require_once \"modules/base/{$module}/class/{$name}.php\";\n\t\t\telse require_once \"{$path}/{$name}.php\";\n\t\t} else {\n\t\t\tforeach ($name as $class) {\n\t\t\t\tif (!$module) $module = $class;\n\t\t\t\tif (!$path) require_once \"modules/base/{$module}/class/{$class}.php\";\n\t\t\t\telse require_once \"{$path}/{$class}.php\";\n\t\t\t}\n\t\t}\n\t} else die('Error in function UseClass: class parameter is false.');\n}\n\nfunction SendResponse($response) {\n\tglobal $config;\n\tif ($config['api']['debug'] || isset($_GET['debug'])) data_dump($response, false, \"Response (debug mode)\");\n\telse echo json_encode($response);\n}\n?>\n'ZnoteAAC/engine/function/general.php'\n:<?php\n\nfunction setSession($key, $data) {\n\tglobal $sessionPrefix;\n\t$_SESSION[$sessionPrefix.$key] = $data;\n}\nfunction getSession($key) {\n\tglobal $sessionPrefix;\n\treturn (isset($_SESSION[$sessionPrefix.$key])) ? $_SESSION[$sessionPrefix.$key] : false;\n}\n\nfunction getValue($value) {\n\treturn (!empty($value)) ? sanitize($value) : false;\n}\n\nfunction SendGet($getArray, $location = 'error.php') {\n\t$string = \"\";\n\t$count = 0;\n\tforeach ($getArray as $getKey => $getValue) {\n\t\tif ($count > 0) $string .= '&';\n\t\t$string .= \"{$getKey}={$getValue}\";\n\t}\n\theader(\"Location: {$location}?{$string}\");\n\texit();\n}\n\n\nfunction data_dump($print = false, $var = false, $title = false) {\n\tif ($title !== false) echo \"<pre><font color='red' size='5'>$title</font><br>\";\n\telse echo '<pre>';\n\tif ($print !== false) {\n\t\techo 'Print: - ';\n\t\tprint_r($print);\n\t\techo \"<br>\";\n\t}\n\tif ($var !== false) {\n\t\techo 'Var_dump: - ';\n\t\tvar_dump($var);\n\t}\n\techo '</pre><br>';\n}\n\nfunction accountAccess($accountId, $TFS) {\n\t$accountId = (int)$accountId;\n\t$access = 0;\n\n\n\t$yourChars = mysql_select_multi(\"SELECT `name`, `group_id`, `account_id` FROM `players` WHERE `account_id`='$accountId';\");\n\tif ($yourChars !== false) {\n\t\tforeach ($yourChars as $char) {\n\t\t\tif ($TFS === 'TFS_03' || $TFS === 'OTHIRE') {\n\t\t\t\tif ($char['group_id'] > $access) $access = $char['group_id'];\n\t\t\t} else {\n\t\t\t\tif ($char['group_id'] > 1) {\n\t\t\t\t\tif ($access == 0) {\n\t\t\t\t\t\t$acc = mysql_select_single(\"SELECT `type` FROM `accounts` WHERE `id`='\". $char['account_id'] .\"' LIMIT 1;\");\n\t\t\t\t\t\t$access = $acc['type'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($access == 0) $access++;\n\t\treturn $access;\n\t} else return false;\n\n}\n\nfunction generate_recovery_key($lenght) {\n\t$lenght = (int)$lenght;\n\t$tmp = rand(1000, 9000);\n\t$tmp += time();\n\t$tmp = sha1($tmp);\n\n\t$results = '';\n\tfor ($i = 0; $i < $lenght; $i++) $results = $results.''.$tmp[$i];\n\n\treturn $results;\n}\n\n\nfunction calculate_discount($orig, $new) {\n\t$orig = (int)$orig;\n\t$new = (int)$new;\n\n\t$tmp = '';\n\tif ($new >= $orig) {\n\t\tif ($new != $orig) {\n\t\t\t$calc = ($new/$orig) - 1;\n\t\t\t$calc *= 100;\n\t\t\t$tmp = '+'. floor($calc) .'%';\n\t\t} else $tmp = '0%';\n\t} else {\n\t\t$calc = 1 - ($new/$orig);\n\t\t$calc *= 100;\n\t\t$tmp = '-'. floor($calc) .'%';\n\t}\n\treturn $tmp;\n}\n\n\nfunction url($path = false) {\n\t$folder   = dirname($_SERVER['SCRIPT_NAME']);\n\treturn config('site_url') . '/' . $path;\n}\n\nfunction getCache() {\n\t$results = mysql_select_single(\"SELECT `cached` FROM `znote`;\");\n\treturn ($results !== false) ? $results['cached'] : false;\n}\n\nfunction setCache($time) {\n\t$time = (int)$time;\n\tmysql_update(\"UPDATE `znote` set `cached`='$time'\");\n}\n\n\nfunction znote_visitors_get_data() {\n\treturn mysql_select_multi(\"SELECT `ip`, `value` FROM `znote_visitors` ORDER BY `id` DESC LIMIT 1000;\");\n}\n\n\nfunction znote_visitor_set_data($visitor_data) {\n\t$exist = false;\n\t$ip = getIPLong();\n\n\tforeach ((array)$visitor_data as $row) {\n\t\tif ($ip == $row['ip']) {\n\t\t\t$exist = true;\n\t\t\t$value = $row['value'];\n\t\t}\n\t}\n\n\tif ($exist && isset($value)) {\n\n\t\t$value++;\n\t\tmysql_update(\"UPDATE `znote_visitors` SET `value` = '$value' WHERE `ip` = '$ip'\");\n\t} else {\n\n\t\tmysql_insert(\"INSERT INTO `znote_visitors` (`ip`, `value`) VALUES ('$ip', '1')\");\n\t}\n}\n\n\nfunction znote_visitors_get_detailed_data($cache_time) {\n\t$period = (int)time() - (int)$cache_time;\n\treturn mysql_select_multi(\"SELECT `ip`, `time`, `type`, `account_id` FROM `znote_visitors_details` WHERE `time` >= '$period' LIMIT 0, 50\");\n}\n\nfunction znote_visitor_insert_detailed_data($type) {\n\t$type = (int)$type;\n\n\t$time = time();\n\t$ip = getIPLong();\n\tif (user_logged_in()) {\n\t\t$acc = (int)getSession('user_id');\n\t\tmysql_insert(\"INSERT INTO `znote_visitors_details` (`ip`, `time`, `type`, `account_id`) VALUES ('$ip', '$time', '$type', '$acc')\");\n\t} else mysql_insert(\"INSERT INTO `znote_visitors_details` (`ip`, `time`, `type`, `account_id`) VALUES ('$ip', '$time', '$type', '0')\");\n}\n\nfunction something () {\n\n\t$ip = getIPLong();\n}\n\n\nfunction create_token() {\n\techo 'Checking whether to create token or not<br />';\n\n\t\techo 'Creating token<br />';\n\t\t$token = sha1(uniqid(time(), true));\n\t\t$token2 = $token;\n\t\tvar_dump($token, $token2);\n\t\t$_SESSION['token'] = $token2;\n\n\n\techo \"<input type=\\\"hidden\\\" name=\\\"token\\\" value=\\\"\". $_SESSION['token'] .\"\\\" />\";\n}\nfunction reset_token() {\n\techo 'Reseting token<br />';\n\tunset($_SESSION['token']);\n}\n\n\n\nfunction second_to_minute($seconds) {\n\treturn ($seconds / 60);\n}\n\n\nfunction minute_to_seconds($minutes) {\n\treturn ($minutes * 60);\n}\n\n\nfunction minute_to_hour($minutes) {\n\treturn ($minutes / 60);\n}\n\n\nfunction hour_to_minute($hours) {\n\treturn ($hour * 60);\n}\n\n\nfunction seconds_to_hours($seconds) {\n\t$minutes = second_to_minute($seconds);\n\t$hours = minute_to_hour($minutes);\n\treturn $hours;\n}\n\nfunction remaining_seconds_to_clock($seconds) {\n\treturn date(\"(H:i)\",time() + $seconds);\n}\n\n\nfunction validate_name($string) {\n\treturn (str_word_count(trim($string)) > config('maxW')) ? false : trim($string);\n}\n\n\nfunction validate_ip($ip) {\n\t$ipL = safeIp2Long($ip);\n\t$ipR = long2ip((int)$ipL);\n\n\tif ($ip === $ipR) {\n\t\treturn true;\n\t} elseif ($ip=='::1')  {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\nfunction config($value) {\n\tglobal $config;\n\treturn $config[$value];\n}\n\n\n\nfunction fullConfig() {\n\tglobal $config;\n\treturn $config;\n}\n\n\nfunction format_character_name($name) {\n\treturn ucwords(strtolower($name));\n}\n\n\nfunction getIP() {\n\nreturn $_SERVER['REMOTE_ADDR'];\n}\n\nfunction safeIp2Long($ip) {\n\treturn sprintf('%u', ip2long($ip));\n}\n\n\nfunction getIPLong() {\n\treturn safeIp2Long(getIP());\n}\n\n\nfunction array_length($ar) {\n\t$r = 1;\n\tforeach($ar as $a) {\n\t\t$r++;\n\t}\n\treturn $r;\n}\n\nfunction level_to_experience($level) {\n\treturn 50/3*(pow($level, 3) - 6*pow($level, 2) + 17*$level - 12);\n}\n\n\nfunction hide_char_to_name($id) {\n\t$id = (int)$id;\n\tif ($id == 1) {\n\t\treturn 'hidden';\n\t} else {\n\t\treturn 'visible';\n\t}\n}\n\n\nfunction online_id_to_name($id) {\n\t$id = (int)$id;\n\tif ($id == 1) {\n\t\treturn '<font class=\"status_online\">ONLINE</font>';\n\t} else {\n\t\treturn '<font class=\"status_offline\">offline</font>';\n\t}\n}\n\n\nfunction vocation_id_to_name($id) {\n\t$vocations = config('vocations');\n\treturn (isset($vocations[$id]['name'])) ? $vocations[$id]['name'] : \"{$id} - Unknown\";\n}\n\n\nfunction vocation_name_to_id($name) {\n\t$vocations = config('vocations');\n\tforeach ($vocations as $id => $vocation)\n\t\tif ($vocation['name'] == $name)\n\t\t\treturn $id;\n\treturn false;\n}\n\n\nfunction group_id_to_name($id) {\n\t$positions = config('ingame_positions');\n\treturn ($positions[$id] >= 0) ? $positions[$id] : false;\n}\n\nfunction gender_exist($gender) {\n\n\tif ($gender >= 0 && $gender <= 1) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nfunction skillid_to_name($skillid) {\n\t$skillname = array(\n\t\t0 => 'fist fighting',\n\t\t1 => 'club fighting',\n\t\t2 => 'sword fighting',\n\t\t3 => 'axe fighting',\n\t\t4 => 'distance fighting',\n\t\t5 => 'shielding',\n\t\t6 => 'fishing',\n\t\t7 => 'experience',\n\t\t8 => 'magic level'\n\t);\n\n\treturn ($skillname[$skillid] >= 0) ? $skillname[$skillid] : false;\n}\n\n\nfunction town_id_to_name($id) {\n\t$towns = config('towns');\n\treturn (array_key_exists($id, $towns)) ? $towns[$id] : 'Missing Town';\n}\n\n\nfunction email($to, $subject, $body) {\n\tmail($to, $subject, $body, 'From: TEST');\n}\n\nfunction logged_in_redirect() {\n\tif (user_logged_in() === true) {\n\t\theader('Location: myaccount.php');\n\t}\n}\n\nfunction protect_page() {\n\tif (user_logged_in() === false) {\n\t\theader('Location: protected.php');\n\t\texit();\n\t}\n}\n\n\nfunction admin_only($user_data) {\n\n\t$gotAccess = is_admin($user_data);\n\n\tif ($gotAccess == false) {\n\t\tlogged_in_redirect();\n\t\texit();\n\t}\n}\n\nfunction is_admin($user_data) {\n\tif (config('ServerEngine') === 'OTHIRE')\n\t\treturn in_array($user_data['id'], config('page_admin_access')) ? true : false;\n\telse\n\t\treturn in_array($user_data['name'], config('page_admin_access')) ? true : false;\n}\n\nfunction array_sanitize(&$item) {\n\t$item = htmlentities(strip_tags(mysql_znote_escape_string($item)));\n}\n\nfunction sanitize($data) {\n\treturn htmlentities(strip_tags(mysql_znote_escape_string($data)));\n}\n\nfunction output_errors($errors) {\n\treturn '<ul><li>'. implode('</li><li>', $errors) .'</li></ul>';\n}\n\n\n\nfunction resize_imagex($file, $width, $height) {\n\n\tlist($w, $h) = getimagesize($file['tmp']);\n\n\t$ratio = max($width/$w, $height/$h);\n\t$h = ceil($height / $ratio);\n\t$x = ($w - $width / $ratio) / 2;\n\t$w = ceil($width / $ratio);\n\n\t$path = 'engine/guildimg/'.$file['new_name'];\n\n\t$imgString = file_get_contents($file['tmp']);\n\n\t$image = imagecreatefromstring($imgString);\n\t$tmp = imagecreatetruecolor($width, $height);\n\timagecopyresampled($tmp, $image,\n\t    0, 0,\n\t    $x, 0,\n\t    $width, $height,\n\t    $w, $h);\n\n\timagegif($tmp, $path);\n\timagedestroy($image);\n\timagedestroy($tmp);\n\n\treturn true;\n}\n\n\nfunction check_image($image) {\n\n\t$image_data = array('new_name' => $_GET['name'].'.gif', 'name' => $image['name'], 'tmp' => $image['tmp_name'], 'error' => $image['error'], 'size' => $image['size'], 'type' => $image['type']);\n\n\n\tif ($image_data['type'] === 'image/gif') {\n\n\n\t\t$check = getimagesize($image_data['tmp']);\n\n\t\tif ($check) {\n\n\n\t\t\tif ($check['mime'] === 'image/gif') {\n\n\t\t\t\t$path_info = pathinfo($image_data['name']);\n\n\n\t\t\t\tif ($path_info['extension'] === 'gif') {\n\n\n\t\t\t\t\t$img = resize_imagex($image_data, 100, 100);\n\n\t\t\t\t\tif ($img) {\n\n\t\t\t\t\t\theader('Location: guilds.php?name='. $_GET['name']);\n\t\t\t\t\t\texit();\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\theader('Location: guilds.php?error=Only gif images accepted, you uploaded:['.$path_info['extension'].'].&name='. $_GET['name']);\n\t\t\t\t\texit();\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\theader('Location: guilds.php?error=Only gif images accepted, you uploaded:['.$check['mime'].'].&name='. $_GET['name']);\n\t\t\t\texit();\n\t\t\t}\n\n\t\t} else {\n\n\t\t\theader('Location: guilds.php?error=Uploaded image is invalid.&name='. $_GET['name']);\n\t\t\texit();\n\t\t}\n\n\t} else {\n\n\t\theader('Location: guilds.php?error=Only gif images are accepted, you uploaded:['.$image_data['type'].'].&name='. $_GET['name']);\n\t\texit();\n\t}\n}\n\n\nfunction logo_exists($guild) {\n\t$guild = sanitize($guild);\n\tif (file_exists('engine/guildimg/'.$guild.'.gif')) {\n\n\t\techo'engine/guildimg/'.$guild.'.gif';\n\n\t} else {\n\n\t\techo'engine/guildimg/default@logo.gif';\n\t}\n}\n\nfunction generateRandomString($length = 16) {\n\t$characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n\t$charactersLength = strlen($characters);\n\t$randomString = '';\n\tfor ($i = 0; $i < $length; $i++) {\n\t\t$randomString .= $characters[rand(0, $charactersLength - 1)];\n\t}\n\treturn $randomString;\n}\n\nfunction verifyGoogleReCaptcha($postResponse = null) {\n\tif(!isset($postResponse) || empty($postResponse)) {\n\t\treturn false;\n\t}\n\n\t$recaptcha_api_url = 'https:\n\t$secretKey = config('captcha_secret_key');\n\t$ip = $_SERVER['REMOTE_ADDR'];\n\t$params = 'secret='.$secretKey.'&response='.$postResponse.'&remoteip='.$ip;\n\n\t$useCurl = config('captcha_use_curl');\n\tif($useCurl) {\n\t\t$curl_connection = curl_init($recaptcha_api_url);\n\n\t\tcurl_setopt($curl_connection, CURLOPT_CONNECTTIMEOUT, 5);\n\t\tcurl_setopt($curl_connection, CURLOPT_RETURNTRANSFER, true);\n\t\tcurl_setopt($curl_connection, CURLOPT_SSL_VERIFYPEER, false);\n\t\tcurl_setopt($curl_connection, CURLOPT_FOLLOWLOCATION, 0);\n\t\tcurl_setopt($curl_connection, CURLOPT_POSTFIELDS, $params);\n\n\t\t$response = curl_exec($curl_connection);\n\t\tcurl_close($curl_connection);\n\t} else {\n\t\t$response = file_get_contents($recaptcha_api_url . '?' . $params);\n\t}\n\n\t$json = json_decode($response);\n\treturn isset($json->success) && $json->success;\n}\n\n\nfunction hhb_tohtml( $str) {\n\treturn htmlentities($str, ENT_QUOTES | ENT_HTML401 | ENT_SUBSTITUTE | ENT_DISALLOWED, 'UTF-8', true);\n}\n\n\n\nfunction random_bytes_compat($length, &$crypto_strong = null) {\n    $crypto_strong = false;\n    if (!is_int($length)) {\n        throw new \\InvalidArgumentException(\"argument 1 must be an int, is \" . gettype($length));\n    }\n    if ($length < 0) {\n        throw new \\InvalidArgumentException(\"length must be >= 0\");\n    }\n    if (is_callable(\"random_bytes\")) {\n        $crypto_strong = true;\n        return random_bytes($length);\n    }\n    if (is_callable(\"openssl_random_pseudo_bytes\")) {\n        return openssl_random_pseudo_bytes($length, $crypto_strong);\n    }\n    $ret = @file_get_contents(\"/dev/urandom\", false, null, 0, $length);\n    if (is_string($ret) && strlen($ret) === $length) {\n        $crypto_strong = true;\n        return $ret;\n    }\n\n    $crypto_strong = false;\n    $ret = \"\";\n    for ($i = 0; $i < $length; ++$i) {\n        $ret .= chr(mt_rand(0, 255));\n    }\n    return $ret;\n}\n\n\nif(!function_exists('hash_equals')) {\n    function hash_equals($str1, $str2) {\n        if(strlen($str1) != strlen($str2)) {\n            return false;\n        }\n\t\t$res = $str1 ^ $str2;\n\t\t$ret = 0;\n\t\tfor($i = strlen($res) - 1; $i >= 0; $i--) {\n\t\t\t$ret |= ord($res[$i]);\n\t\t}\n\t\treturn !$ret;\n    }\n}\n?>\n",
        "gt": [
            "'ZnoteAAC/engine/function/general.php'",
            "'ZnoteAAC/api/api.php'",
            "'ZnoteAAC/api/module.php'",
            "'ZnoteAAC/api/index.php'"
        ]
    },
    {
        "files": [
            "'BP-REST/tests/bootstrap.php'",
            "'BP-REST/bp-rest.php'",
            "'BP-REST/includes/bp-members/classes/class-bp-rest-attachments-member-avatar-endpoint.php'"
        ],
        "content": "'BP-REST/tests/bootstrap.php'\n:<?php\n\n\n\nconst WP_TESTS_PHPUNIT_POLYFILLS_PATH = __DIR__ . '/../vendor/yoast/phpunit-polyfills';\n\n\nrequire( dirname( __FILE__ ) . '/define-constants.php' );\n\nif ( ! file_exists( WP_TESTS_DIR . '/includes/functions.php' ) ) {\n\tdie( \"The WordPress PHPUnit test suite could not be found.\\n\" );\n}\n\nif ( ! file_exists( BP_TESTS_DIR . '/includes/loader.php' ) ) {\n\tdie( \"The BuddyPress plugin could not be found.\\n\" );\n}\n\n\nrequire_once WP_TESTS_DIR . '/includes/functions.php';\n\n\nfunction _manually_load_plugins() {\n\n\n\trequire_once BP_TESTS_DIR . '/includes/loader.php';\n\n\n\trequire_once dirname( __FILE__ ) . '/../bp-rest.php';\n}\ntests_add_filter( 'muplugins_loaded', '_manually_load_plugins' );\n\necho \"Loading WP Testing environment...\\n\";\nrequire_once WP_TESTS_DIR . '/includes/bootstrap.php';\n\necho \"Loading BuddyPress testcases...\\n\";\nrequire_once BP_TESTS_DIR . '/includes/testcase.php';\nrequire_once BP_TESTS_DIR . '/includes/testcase-emails.php';\n\n\nfunction toggle_component_visibility( $visibility = true ) {\n\t$visibility = $visibility ? 'members' : 'anyone';\n\n\tupdate_option(\n\t\t'_bp_community_visibility',\n\t\tarray(\n\t\t\t'global'   => $visibility,\n\t\t\t'activity' => $visibility,\n\t\t\t'members'  => $visibility,\n\t\t\t'groups'   => $visibility,\n\t\t\t'blogs'    => $visibility,\n\t\t)\n\t);\n}\n\n'BP-REST/bp-rest.php'\n:<?php\n\n\n\n\ndefined( 'ABSPATH' ) || exit;\n\n\nfunction bp_rest() {\n\n\tif ( ! class_exists( 'WP_REST_Controller' ) ) {\n\t\treturn;\n\t}\n\n\trequire_once __DIR__ . '/includes/bp-components/classes/class-bp-rest-components-endpoint.php';\n\t$controller = new BP_REST_Components_Endpoint();\n\t$controller->register_routes();\n\n\tif ( bp_is_active( 'members' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-members-endpoint.php';\n\t\t$controller = new BP_REST_Members_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-attachments/classes/trait-attachments.php';\n\n\n\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-attachments-member-avatar-endpoint.php';\n\t\t$controller = new BP_REST_Attachments_Member_Avatar_Endpoint();\n\t\t$controller->register_routes();\n\n\n\t\tif ( bp_is_active( 'members', 'cover_image' ) ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-attachments-member-cover-endpoint.php';\n\t\t\t$controller = new BP_REST_Attachments_Member_Cover_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\n\t\tif ( bp_get_signup_allowed() ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-members/classes/class-bp-rest-signup-endpoint.php';\n\t\t\t$controller = new BP_REST_Signup_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\t}\n\n\tif ( bp_is_active( 'activity' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-activity/classes/class-bp-rest-activity-endpoint.php';\n\t\t$controller = new BP_REST_Activity_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( is_multisite() && bp_is_active( 'blogs' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-blogs/classes/class-bp-rest-blogs-endpoint.php';\n\t\t$controller = new BP_REST_Blogs_Endpoint();\n\t\t$controller->register_routes();\n\n\n\t\tif ( bp_is_active( 'blogs', 'site-icon' ) ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-attachments/classes/trait-attachments.php';\n\t\t\trequire_once __DIR__ . '/includes/bp-blogs/classes/class-bp-rest-attachments-blog-avatar-endpoint.php';\n\t\t\t$controller = new BP_REST_Attachments_Blog_Avatar_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\t}\n\n\tif ( bp_is_active( 'xprofile' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-xprofile/classes/class-bp-rest-xprofile-fields-endpoint.php';\n\t\t$controller = new BP_REST_XProfile_Fields_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-xprofile/classes/class-bp-rest-xprofile-field-groups-endpoint.php';\n\t\t$controller = new BP_REST_XProfile_Field_Groups_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-xprofile/classes/class-bp-rest-xprofile-data-endpoint.php';\n\t\t$controller = new BP_REST_XProfile_Data_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( bp_is_active( 'groups' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-groups-endpoint.php';\n\t\t$controller = new BP_REST_Groups_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-group-membership-endpoint.php';\n\t\t$controller = new BP_REST_Group_Membership_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-group-invites-endpoint.php';\n\t\t$controller = new BP_REST_Group_Invites_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-group-membership-request-endpoint.php';\n\t\t$controller = new BP_REST_Group_Membership_Request_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-attachments/classes/trait-attachments.php';\n\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-attachments-group-avatar-endpoint.php';\n\t\t$controller = new BP_REST_Attachments_Group_Avatar_Endpoint();\n\t\t$controller->register_routes();\n\n\n\t\tif ( bp_is_active( 'groups', 'cover_image' ) ) {\n\t\t\trequire_once __DIR__ . '/includes/bp-groups/classes/class-bp-rest-attachments-group-cover-endpoint.php';\n\t\t\t$controller = new BP_REST_Attachments_Group_Cover_Endpoint();\n\t\t\t$controller->register_routes();\n\t\t}\n\t}\n\n\tif ( bp_is_active( 'messages' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-messages/classes/class-bp-rest-messages-endpoint.php';\n\t\t$controller = new BP_REST_Messages_Endpoint();\n\t\t$controller->register_routes();\n\n\t\trequire_once __DIR__ . '/includes/bp-messages/classes/class-bp-rest-sitewide-notices-endpoint.php';\n\t\t$controller = new BP_REST_Sitewide_Notices_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( bp_is_active( 'notifications' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-notifications/classes/class-bp-rest-notifications-endpoint.php';\n\t\t$controller = new BP_REST_Notifications_Endpoint();\n\t\t$controller->register_routes();\n\t}\n\n\tif ( bp_is_active( 'friends' ) ) {\n\t\trequire_once __DIR__ . '/includes/bp-friends/classes/class-bp-rest-friends-endpoint.php';\n\t\t$controller = new BP_REST_Friends_Endpoint();\n\t\t$controller->register_routes();\n\t}\n}\nadd_action( 'bp_rest_api_init', 'bp_rest', 5 );\n\n\nfunction bp_filter_rest_request_blog_url( $request, $url ) {\n\n\tif ( ! bp_is_active( 'blogs' ) || empty( $url ) ) {\n\t\treturn $request;\n\t}\n\n\n\t$bits      = wp_parse_url( $url );\n\t$home_bits = wp_parse_url( get_home_url() );\n\n\tif ( empty( $bits['host'] ) || empty( $home_bits['host'] ) ) {\n\t\treturn $request;\n\t}\n\n\n\tif ( $bits['host'] === $home_bits['host'] ) {\n\t\treturn $request;\n\t}\n\n\n\t$request = new WP_REST_Request( 'GET', $bits['path'] );\n\t$request->set_query_params( array( 'bp_blogs_url' => $url ) );\n\n\treturn $request;\n}\nadd_filter( 'rest_request_from_url', 'bp_filter_rest_request_blog_url', 10, 2 );\n\n\nfunction bp_rest_post_dispatch( $response, $instance, $request ) {\n\tif (\n\t\t! bp_is_active( 'blogs' )\n\t\t|| 404 !== $response->get_status()\n\t\t|| 'embed' !== $request->get_param( 'context' )\n\t\t|| empty( $request->get_param( 'bp_blogs_url' ) )\n\t\t|| empty( $request->get_route() )\n\t) {\n\t\treturn $response;\n\t}\n\n\n\t$bits = wp_parse_url( $request->get_param( 'bp_blogs_url' ) );\n\n\n\tif ( empty( $bits['host'] ) || empty( $bits['path'] ) ) {\n\t\treturn $response;\n\t}\n\n\n\tif ( $request->get_route() !== $bits['path'] ) {\n\t\treturn $response;\n\t}\n\n\n\t$site = get_site_by_path( $bits['host'], $bits['path'] );\n\n\tif ( ! $site instanceof WP_Site || empty( $site->blog_id ) ) {\n\t\treturn $response;\n\t}\n\n\tswitch_to_blog( absint( $site->blog_id ) );\n\n\t$response = rest_do_request(\n\t\tnew WP_REST_Request(\n\t\t\t'GET',\n\t\t\tstr_replace(\n\t\t\t\t'/wp-json',\n\t\t\t\t'',\n\t\t\t\t$request->get_route()\n\t\t\t)\n\t\t)\n\t);\n\n\trestore_current_blog();\n\n\n\treturn $response;\n}\nadd_filter( 'rest_post_dispatch', 'bp_rest_post_dispatch', 10, 3 );\n\n'BP-REST/includes/bp-members/classes/class-bp-rest-attachments-member-avatar-endpoint.php'\n:<?php\n\n\ndefined( 'ABSPATH' ) || exit;\n\n\nclass BP_REST_Attachments_Member_Avatar_Endpoint extends WP_REST_Controller {\n\tuse BP_REST_Attachments;\n\n\n\tprotected $avatar_instance;\n\n\n\tprotected $user;\n\n\n\tprotected $object = 'user';\n\n\n\tpublic function __construct() {\n\t\t$this->namespace       = bp_rest_namespace() . '/' . bp_rest_version();\n\t\t$this->rest_base       = 'members';\n\t\t$this->avatar_instance = new BP_Attachment_Avatar();\n\t}\n\n\n\tpublic function register_routes() {\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/(?P<user_id>[\\d]+)/avatar',\n\t\t\tarray(\n\t\t\t\t'args'   => array(\n\t\t\t\t\t'user_id' => array(\n\t\t\t\t\t\t'description' => __( 'A unique numeric ID for the Member.', 'buddypress' ),\n\t\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_item_collection_params(),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'create_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::DELETABLE,\n\t\t\t\t\t'callback'            => array( $this, 'delete_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'delete_item_permissions_check' ),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_item_schema' ),\n\t\t\t)\n\t\t);\n\t}\n\n\n\tpublic function get_item( $request ) {\n\t\t$args = array();\n\n\t\tforeach ( array( 'full', 'thumb' ) as $type ) {\n\t\t\t$args[ $type ] = bp_core_fetch_avatar(\n\t\t\t\tarray(\n\t\t\t\t\t'object'  => $this->object,\n\t\t\t\t\t'type'    => $type,\n\t\t\t\t\t'item_id' => (int) $this->user->ID,\n\t\t\t\t\t'html'    => (bool) $request->get_param( 'html' ),\n\t\t\t\t\t'alt'     => $request->get_param( 'alt' ),\n\t\t\t\t\t'no_grav' => (bool) $request->get_param( 'no_gravatar' ),\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\t$avatar = $this->get_avatar_object( $args );\n\n\t\tif ( ! $avatar->full && ! $avatar->thumb ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'bp_rest_attachments_member_avatar_no_image',\n\t\t\t\t__( 'Sorry, there was a problem fetching the avatar.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t$retval = array(\n\t\t\t$this->prepare_response_for_collection(\n\t\t\t\t$this->prepare_item_for_response( $avatar, $request )\n\t\t\t),\n\t\t);\n\n\t\t$response = rest_ensure_response( $retval );\n\n\n\t\tdo_action( 'bp_rest_attachments_member_avatar_get_item', $avatar, $response, $request );\n\n\t\treturn $response;\n\t}\n\n\n\tpublic function get_item_permissions_check( $request ) {\n\t\t$retval = new WP_Error(\n\t\t\t'bp_rest_authorization_required',\n\t\t\t__( 'Sorry, you are not authorized to perform this action.', 'buddypress' ),\n\t\t\tarray(\n\t\t\t\t'status' => rest_authorization_required_code(),\n\t\t\t)\n\t\t);\n\n\t\tif ( bp_current_user_can( 'bp_view', array( 'bp_component' => 'members' ) ) ) {\n\t\t\t$retval     = new WP_Error(\n\t\t\t\t'bp_rest_member_invalid_id',\n\t\t\t\t__( 'Invalid member ID.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 404,\n\t\t\t\t)\n\t\t\t);\n\t\t\t$this->user = bp_rest_get_user( $request->get_param( 'user_id' ) );\n\n\t\t\tif ( $this->user instanceof WP_User ) {\n\t\t\t\t$retval = true;\n\t\t\t}\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_member_avatar_get_item_permissions_check', $retval, $request );\n\t}\n\n\n\tpublic function create_item( $request ) {\n\t\t$request->set_param( 'context', 'edit' );\n\n\n\t\t$files = $request->get_file_params();\n\n\t\tif ( empty( $files ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'bp_rest_attachments_member_avatar_no_image_file',\n\t\t\t\t__( 'Sorry, you need an image file to upload.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\t$avatar = $this->upload_avatar_from_file( $files );\n\t\tif ( is_wp_error( $avatar ) ) {\n\t\t\treturn $avatar;\n\t\t}\n\n\t\t$retval = array(\n\t\t\t$this->prepare_response_for_collection(\n\t\t\t\t$this->prepare_item_for_response( $avatar, $request )\n\t\t\t),\n\t\t);\n\n\t\t$response = rest_ensure_response( $retval );\n\n\n\t\tdo_action( 'bp_rest_attachments_member_avatar_create_item', $avatar, $response, $request );\n\n\t\treturn $response;\n\t}\n\n\n\tpublic function create_item_permissions_check( $request ) {\n\t\t$retval = $this->get_item_permissions_check( $request );\n\n\t\tif ( ! is_wp_error( $retval ) ) {\n\t\t\t$args  = array();\n\t\t\t$error = new WP_Error(\n\t\t\t\t'bp_rest_authorization_required',\n\t\t\t\t__( 'Sorry, you are not allowed to perform this action.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => rest_authorization_required_code(),\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tif ( ! isset( $this->user->ID ) || ! isset( $this->object ) ) {\n\t\t\t\t$retval = $error;\n\t\t\t} else {\n\t\t\t\t$args = array(\n\t\t\t\t\t'item_id' => $this->user->ID,\n\t\t\t\t\t'object'  => $this->object,\n\t\t\t\t);\n\n\t\t\t\tif ( ! is_user_logged_in() ) {\n\t\t\t\t\t$retval = new WP_Error(\n\t\t\t\t\t\t'bp_rest_authorization_required',\n\t\t\t\t\t\t__( 'Sorry, you need to be logged in to perform this action.', 'buddypress' ),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'status' => rest_authorization_required_code(),\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t} elseif ( 'POST' === $request->get_method() && bp_disable_avatar_uploads() ) {\n\t\t\t\t\t$retval = new WP_Error(\n\t\t\t\t\t\t'bp_rest_attachments_member_avatar_disabled',\n\t\t\t\t\t\t__( 'Sorry, member avatar upload is disabled.', 'buddypress' ),\n\t\t\t\t\t\tarray(\n\t\t\t\t\t\t\t'status' => 500,\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t} elseif ( bp_attachments_current_user_can( 'edit_avatar', $args ) ) {\n\t\t\t\t\t$retval = true;\n\t\t\t\t} else {\n\t\t\t\t\t$retval = $error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_member_avatar_create_item_permissions_check', $retval, $request );\n\t}\n\n\n\tpublic function delete_item( $request ) {\n\t\t$request->set_param( 'context', 'edit' );\n\t\t$user_id = (int) $this->user->ID;\n\n\t\tif ( ! bp_get_user_has_avatar( $user_id ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'bp_rest_attachments_member_avatar_no_uploaded_avatar',\n\t\t\t\t__( 'Sorry, there are no uploaded avatars for this user on this site.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 404,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\t$args = array();\n\n\t\tforeach ( array( 'full', 'thumb' ) as $type ) {\n\t\t\t$args[ $type ] = bp_core_fetch_avatar(\n\t\t\t\tarray(\n\t\t\t\t\t'object'  => $this->object,\n\t\t\t\t\t'type'    => $type,\n\t\t\t\t\t'item_id' => $user_id,\n\t\t\t\t\t'html'    => false,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\t$avatar = $this->get_avatar_object( $args );\n\n\t\t$deleted = bp_core_delete_existing_avatar(\n\t\t\tarray(\n\t\t\t\t'object'  => $this->object,\n\t\t\t\t'item_id' => $user_id,\n\t\t\t)\n\t\t);\n\n\t\tif ( ! $deleted ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'bp_rest_attachments_member_avatar_delete_failed',\n\t\t\t\t__( 'Sorry, there was a problem deleting the avatar.', 'buddypress' ),\n\t\t\t\tarray(\n\t\t\t\t\t'status' => 500,\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\n\t\t$response = new WP_REST_Response();\n\t\t$response->set_data(\n\t\t\tarray(\n\t\t\t\t'deleted'  => true,\n\t\t\t\t'previous' => $avatar,\n\t\t\t)\n\t\t);\n\n\n\t\tdo_action( 'bp_rest_attachments_member_avatar_delete_item', $response, $request );\n\n\t\treturn $response;\n\t}\n\n\n\tpublic function delete_item_permissions_check( $request ) {\n\t\t$retval = $this->create_item_permissions_check( $request );\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_member_avatar_delete_item_permissions_check', $retval, $request );\n\t}\n\n\n\tpublic function prepare_item_for_response( $avatar, $request ) {\n\t\t$data = array(\n\t\t\t'full'  => $avatar->full,\n\t\t\t'thumb' => $avatar->thumb,\n\t\t);\n\n\t\t$context  = ! empty( $request->get_param( 'context' ) ) ? $request->get_param( 'context' ) : 'view';\n\t\t$data     = $this->add_additional_fields_to_object( $data, $request );\n\t\t$data     = $this->filter_response_by_context( $data, $context );\n\t\t$response = rest_ensure_response( $data );\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_member_avatar_prepare_value', $response, $request, $avatar );\n\t}\n\n\n\tpublic function get_item_schema() {\n\t\tif ( is_null( $this->schema ) ) {\n\t\t\t$this->schema = array(\n\t\t\t\t'$schema'    => 'http:\n\t\t\t\t'title'      => 'bp_attachments_member_avatar',\n\t\t\t\t'type'       => 'object',\n\t\t\t\t'properties' => array(\n\t\t\t\t\t'full'  => array(\n\t\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t\t\t'description' => __( 'Full size of the image file.', 'buddypress' ),\n\t\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t\t'format'      => 'uri',\n\t\t\t\t\t\t'readonly'    => true,\n\t\t\t\t\t),\n\t\t\t\t\t'thumb' => array(\n\t\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t\t\t'description' => __( 'Thumb size of the image file.', 'buddypress' ),\n\t\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t\t'format'      => 'uri',\n\t\t\t\t\t\t'readonly'    => true,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t);\n\t\t}\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_member_avatar_schema', $this->add_additional_fields_schema( $this->schema ) );\n\t}\n\n\n\tpublic function get_item_collection_params() {\n\t\t$params                       = parent::get_collection_params();\n\t\t$params['context']['default'] = 'view';\n\n\n\t\tunset( $params['search'], $params['page'], $params['per_page'] );\n\n\t\t$params['html'] = array(\n\t\t\t'description'       => __( 'Whether to return an <img> HTML element, vs a raw URL to an avatar.', 'buddypress' ),\n\t\t\t'default'           => false,\n\t\t\t'type'              => 'boolean',\n\t\t\t'sanitize_callback' => 'rest_sanitize_boolean',\n\t\t\t'validate_callback' => 'rest_validate_request_arg',\n\t\t);\n\n\t\t$params['alt'] = array(\n\t\t\t'description'       => __( 'The alt attribute for the <img> element.', 'buddypress' ),\n\t\t\t'default'           => '',\n\t\t\t'type'              => 'string',\n\t\t\t'sanitize_callback' => 'sanitize_text_field',\n\t\t\t'validate_callback' => 'rest_validate_request_arg',\n\t\t);\n\n\t\t$params['no_gravatar'] = array(\n\t\t\t'description'       => __( 'Whether to disable the default Gravatar fallback.', 'buddypress' ),\n\t\t\t'default'           => false,\n\t\t\t'type'              => 'boolean',\n\t\t\t'sanitize_callback' => 'rest_sanitize_boolean',\n\t\t\t'validate_callback' => 'rest_validate_request_arg',\n\t\t);\n\n\n\t\treturn apply_filters( 'bp_rest_attachments_member_avatar_collection_params', $params );\n\t}\n}\n",
        "gt": [
            "'BP-REST/includes/bp-members/classes/class-bp-rest-attachments-member-avatar-endpoint.php'",
            "'BP-REST/bp-rest.php'",
            "'BP-REST/tests/bootstrap.php'"
        ]
    },
    {
        "files": [
            "'MarginBot/inc/header.php'",
            "'MarginBot/index.php'",
            "'MarginBot/inc/Pages.php'"
        ],
        "content": "'MarginBot/inc/header.php'\n:<?\n\n\nerror_reporting(E_ALL & ~E_NOTICE);\nheader( 'Content-type: text/html; charset=utf-8' );\n\n\nrequire_once(\"config.php\");\nif($config['db']['host'] == ''){\n\n\tif (!headers_sent()){\n\t\theader('Location: install.php');\n\t\texit;\n\t}\n\n\telse{\n\t\techo '<script>window.location = \"install.php\";</script>';\n\t\texit;\n\t}\n\n}\n\n\n$alert = array();\n$warning = array();\n$notice = array();\n\n\nrequire_once(\"database.php\");\n$db = new Database();\n\n\n\nrequire_once(\"General.php\");\n$gen = new General();\n\nrequire_once(\"Pages.php\");\n$pages = new Pages();\n\n\n\nrequire_once(\"Accounts.php\");\n$act = new Accounts();\n\nrequire_once('ExchangeAPIs/bitfinex.php');\n\n\nrequire_once(\"PasswordHash.php\");\n$hasher = new PasswordHash(8, false);\n\n\nif($_REQUEST['doLogout']==1){\n\t$act->doLogoutUser();\n}\nelse{\n\tif($_REQUEST['login_email']){\n\n\t\tif(!$act->doLoginUser()){\n\t\t\t$pages->activePage = 'doLogin';\n\t\t}\n\t}\n\telse if(!$act->checkLoggedUser()){\n\n\t\t$pages->activePage = 'doLogin';\n\t}\n\n\n\tif(isset($_SESSION['userid'])){\n\n\n\n\t\t$accounts[$act->userid] = $act;\n\n\t\tif($act->sts == 9 || $act->sts == 8 ){\n\t\t\t$act->getAllAccounts();\n\t\t}\n\n\n\n\t\tif($_REQUEST['new_name']){\n\t\t\t$accStep = $act->doAddAccount();\n\t\t}\n\n\t\tif($_REQUEST['doUpdate']==1){\n\t\t\t$accounts[$_REQUEST['userid']]->updateSettings();\n\t\t}\n\n\t\tif($_REQUEST['doUpdateExtract']==1){\n\t\t\t$accounts[$_REQUEST['userid']]->updateExtractSettings();\n\t\t}\n\t}\n\n}\n\n\n$gen->checkCronStatus();\n\n\n?>\n<!DOCTYPE html>\n<html xmlns=\"http:\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title><?=($pages->title ? $config['app_name'].' '.$config['app_version'].'.'.$config['app_version_minor'].' - '.$pages->title : $config['app_name'].' '.$config['app_version'].'.'.$config['app_version_minor']);?></title>\n\n\t<script type=\"text/javascript\" src=\"https:\n\t<script type=\"text/javascript\" src=\"https:\n    <script type=\"text/javascript\" src=\"js/jquery.formatCurrency-1.4.0.min.js\"></script>\n    <!-- Highcharts, for the stats page -->\n    <script src=\"https:\n\t<script src=\"https:\n\n    <!-- Bootstrap -->\n    <link href=\"css/bootstrap.min.css\" rel=\"stylesheet\">\n\t<link href=\"css/bootstrap-theme.min.css\" rel=\"stylesheet\">\n\n    <!-- Custom styles for this template -->\n    <link href=\"css/styles.css\" rel=\"stylesheet\">\n\n    <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\n    <!-- WARNING: Respond.js doesn't work if you view the page via file:\n    <!--[if lt IE 9]>\n      <script src=\"https:\n      <script src=\"https:\n    <![endif]-->\n    <link href=\"favicon.ico\" rel=icon>\n</head>\n<body>\n\n\n<? if($_SESSION['userid']!=''){ ?>\n<nav class=\"navbar navbar-inverse navbar-fixed-top\" role=\"navigation\">\n      <div class=\"container\">\n        <div class=\"navbar-header\">\n          <button type=\"button\" class=\"navbar-toggle collapsed\" data-toggle=\"collapse\" data-target=\"\n            <span class=\"sr-only\">Toggle navigation</span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n            <span class=\"icon-bar\"></span>\n          </button>\n          <a class=\"navbar-brand\" href=\"index.php\" title=\"Version <?=$config['app_version'].'.'.$config['app_version_minor'];?>\"><img src=\"img/MarginBotLogo.png\" alt=\"MarginBot\" class=\"img-responsive center-block\" style=\"width:250px;\"></a>\n        </div>\n        <div id=\"navbar\" class=\"navbar-collapse collapse\">\n\n\n\n          <ul class=\"nav navbar-nav\">\n          \t <li class=\"dropdown\">\n              <a href=\"\n              <ul class=\"dropdown-menu\" role=\"menu\">\n              <?=$gen->showCurrencyNav();?>\n\n              </ul>\n            </li>\n\n\n\n\n\n\n            <? if($act->sts == 9 || $act->sts == 8){ ?>\n            <li class=\"<?=($pages->activePage == 'addAct' ? 'active' : '');?>\"><a href=\"index.php?page=addAct\">Add Account</a></li>\n            <? } ?>\n\n            <li class=\"dropdown <?=($pages->activePage == 'viewReturns' || $pages->activePage == 'grabHistory' ? 'active' : '');?>\">\n              <a href=\"\n              <ul class=\"dropdown-menu\" role=\"menu\">\n              \t<?=$gen->showReturnsNav();?>\n                <li><a href=\"index.php?page=grabHistory\">Grab Return History From Bitfinex</a></li>\n              </ul>\n            </li>\n\n\n            <li style=\"padding:8px 30px 0px 30px;\">\n            \t<button type=\"button\" class=\"btn btn-primary btn-sm\" data-toggle=\"modal\" data-target=\"\n                  Sign Up For Bitfinex 10% Off Fees\n                </button>\n            </li>\n\n            <li style=\"padding:8px 30px 0px 30px;\">\n            \t<button type=\"button\" class=\"btn btn-default btn-sm\" data-toggle=\"modal\" data-target=\"\n                  Support Development\n                </button>\n            </li>\n            <li class=\"dropdown\">\n              <a href=\"\n              <ul class=\"dropdown-menu\" role=\"menu\">\n                <li><a href=\"mailto:<?=$config['app_support_email'];?>\">Email</a></li>\n                <li><a href=\"<?=$config['app_support_url'];?>\">Forums</a></li>\n              </ul>\n            </li>\n            <li><a href=\"index.php?doLogout=1\">Logout</a></li>\n          </ul>\n\n        </div><!--/.nav-collapse -->\n      </div>\n    </nav>\n <? } ?>\n\n<?\n$gen->showSiteModals();\n\n\n$configFile = getcwd().'/inc/config.php';\nif (is_writable($configFile) && $_SESSION['userid']!='') {$warning[] = \"Your Config File Seems to be writable.  You should change this to read only for security reasons!<br> (chmod 644 \".$configFile.\" )\";}\n\n\n$installFile = getcwd().'/install.php';\nif (file_exists($installFile) && $_SESSION['userid']!='') {$notice[] = \"Your Install File Seems to still exist.  Its probably a good idea to delete this file, as you won't need it anymore and it could be a secuirty issue.<br>  (Delete the file \".$installFile.\" )\";}\n\n\n?>\n\n<div class=\"container\">\n\n'MarginBot/index.php'\n:<?\nrequire_once('inc/header.php');\n\n$gen->showWarnings($warning);\n$gen->showAlerts($alert);\n$gen->showNotice($notice);\n\n\n\n\n$pages->showPage();\n\n\n\nrequire_once('inc/footer.php');\n?>\n'MarginBot/inc/Pages.php'\n:<?php\n\nclass Pages {\n\tvar $activePage;\n\tvar $title;\n\n\tfunction __construct() {\n\t\t$this->activePage = $_REQUEST['page'];\n\t\tif($this->activePage==''){\n\t\t\t$this->activePage='home';\n\t\t}\n\t\tswitch ($this->activePage) {\n\t\t\tcase 'doLogin':\n\t\t\t\t$this->title = 'Login';\n\t\t\t\tbreak;\n\t\t\tcase 'addAct':\n\t\t\t\t$this->title = 'Add An Account';\n\t\t\t\tbreak;\n\t\t\tcase 'viewReturns':\n\t\t\t\t$this->title = 'View Detailed Returns';\n\t\t\t\tbreak;\n\t\t\tcase 'grabHistory':\n\t\t\t\t$this->title = 'Grab Past History For Tracking';\n\t\t\t\tbreak;\n\t\t\tcase 'home':\n\t\t\tdefault:\n\t\t\t\t$this->title = 'Dashboard';\n\t\t}\n\n\t}\n\n\n\tfunction showPage(){\n\t\tglobal $accounts;\n\n\t\tswitch ($this->activePage) {\n\t\t\tcase 'doLogin':\n\t\t\t\t$this->showLoginPage();\n\t\t\t\tbreak;\n\t\t\tcase 'addAct':\n\t\t\t\t$this->showAddAccount();\n\t\t\t\tbreak;\n\t\t\tcase 'viewReturns':\n\t\t\t\t$this->showViewReturns();\n\t\t\t\tbreak;\n\t\t\tcase 'grabHistory':\n\t\t\t\t$this->showGrabHistory();\n\t\t\t\tbreak;\n\t\t\tcase 'home':\n\t\t\tdefault:\n\t\t\t\t$this->activePage='home';\n\t\t\t\t$this->showActiveAccounts($accounts);\n\t\t}\n\n\t}\n\tfunction showActiveAccounts($accounts){\n\t\tglobal $config,$gen;\n\n\t\tif($_REQUEST['curType']!= ''){$_REQUEST['funding'] = $_REQUEST['curType'];}\n\n\t\tif($_REQUEST['funding'] == ''){$_REQUEST['funding'] = 'USD';}\n\t\t$fisrtAct = reset($accounts);\n\t\techo '\n\t\t<div class=\"panel panel-default\">\n\t\t  <div class=\"panel-heading\">Current '.$gen->symbol2name($_REQUEST['funding']).' Bitfinex Accounts '.($_REQUEST['funding']!= 'USD' ? ' ( Current Price '.$gen->cryptoFormat($fisrtAct->bfx->bitfinex_getCurPrice($_REQUEST['funding'] ) , 8, 'USD').' ) ':'').'</div>\n\t\t  <div class=\"panel-body table-responsive\">\n\t\t\t<table class=\"table table-striped table-bordered\">\n\t\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th class=\"mid\">ID</td>\n\t\t\t\t\t<th class=\"mid\">Name</td>\n\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t<div style=\"height: 40px;padding-top:12px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Deposit Balance\" data-content=\"How much $USD is in your Bitfinex Deposit Wallet in total, including Active and Pending Loans, as well as Available cash.\">\n\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\tDeposit<Br>Balance\n\t\t\t\t\t</th>\n\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t<div style=\"height: 40px;padding-top:12px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Deposit Available\" data-content=\"How much $USD in your Bitfinex Deposit Wallet is currently not used in either an Active or Pending Loan.\">\n\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\tDeposit<Br>Available\n\t\t\t\t\t</th>\n\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t<div style=\"height: 40px;padding-top:12px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Loans Pending\" data-content=\"How many Pending Loans you have waiting to be accepted, as well as the average rate those loans are offered at before fees ( % / Day ) .\">\n\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\tLoans<Br>Pending\n\t\t\t\t\t</th>\n\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t<div style=\"height: 40px;padding-top:12px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Loans Active\" data-content=\"How many Active Loans you have which have been accepted by a Margin Borrower, and are currently paying you interest, as well as the average rate those loans are paying before fees ( % / Day ) .\">\n\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\tLoans<Br>Active\n\t\t\t\t\t</th>\n\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t<div style=\"height: 40px;padding-top:12px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Estimated Daily Return\" data-content=\"A Rough Estimate of today\\'s return assuming all loans remained open for the full day at the current rate ( which they most likely won\\'t) This includes Bitfinex fees.\">\n\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\tEstimated<Br>Return\n\t\t\t\t\t</th>\n\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t<div style=\"height: 40px;padding-top:12px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Yesterdays Return\" data-content=\"How much your Margin Swaps earned in interest yesterday, after fees ( % / Day ) .\">\n\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\tYesterdays<Br>Return\n\t\t\t\t\t</th>\n\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t<div style=\"height: 40px;padding-top:12px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Thirty Day Return\" data-content=\"How much your Margin Swaps earned in interest over the last 30 days, after fees ( % / Day ) .\">\n\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t30 Day<Br>Returns\n\t\t\t\t\t</th>\n\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t<div style=\"height:40px;padding-top:12px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Lifetime Return\" data-content=\"How much your Margin Swaps earned in interest over the life of using '.$config['app_name'].', after fees ( % / Day )  Note that your if your BFX account existed before you began using '.$config['app_name'].', those returns will not be included here .\">\n\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\tLifetime<Br>Returns\n\t\t\t\t\t</th>\n\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t';\n\t\tforeach($accounts as $a){\n\t\t\t$a->displayDetailsTableRow();\n\t\t}\n\n\t\techo '\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t</div>';\n\t}\n\n\n\tfunction showAddAccount(){\n\t\tglobal $accStep;\n\n\t\tif($accStep['page']==0){\n\t\t\techo '\n\t\t\t<form action=\"index.php\" method=\"post\" autocomplete=\"off\" >\n\t\t\t<input type=\"hidden\" name=\"doAddAccount\" value=\"1\">\n\t\t\t<input type=\"hidden\" name=\"page\" value=\"addAct\">\n\t\t\t<div class=\"panel panel-default\">\n\t\t\t\t<div class=\"panel-heading\">Add Managed Account</div>\n\t\t\t\t<div class=\"panel-body table-responsive\">\n\t\t\t\t\t<table class=\"table table-striped table-bordered\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Account Name\" data-content=\"User name this account will display.  If the account is set to allow login, this will also be their login user name.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tAccount Name\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Account Email\" data-content=\"Email associated with the account, for sending reports and login information.   If the account is set to allow login, they can also use this address to log in.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tAccount Email\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Password\" data-content=\"Account Password.  Only used if the account is set to allow login.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tPassword\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Account Level\" data-content=\"Accounts can be one of 3 types, Admin - which has full access to all accounts and functions, Mananged with login has access to ONLY their account, and Managed No Login, which can only be accessed by Admin accounts.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tAccount Level\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"inputName\" class=\"form-control\" placeholder=\"Account Name\" required=\"\" autofocus=\"\" name=\"new_name\"  autocomplete=\"off\" value=\"'.$_REQUEST['new_name'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"email\" id=\"inputEmail\" class=\"form-control\" placeholder=\"Account Email\" autofocus=\"\" name=\"new_email\"  autocomplete=\"off\" value=\"'.$_REQUEST['new_email'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"Account Password\" autofocus=\"\" name=\"new_password\"  autocomplete=\"off\" value=\"'.$_REQUEST['new_password'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<select  id=\"inputType\" class=\"form-control\" autofocus=\"\" name=\"new_actType\">\n\t\t\t\t\t\t\t\t\t<option value=\"2\">Managed Account (No Login)</option>\n\t\t\t\t\t\t\t\t\t<option value=\"1\">Managed Account (Can Login)</option>\n\t\t\t\t\t\t\t\t\t<option value=\"9\">Admin Account</option>\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th class=\"mid\" colspan=\"2\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Bitfinex API Key\" data-content=\"When setting up a new account, you will need to get this API Key from bitfinex.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tBitfinex API Key\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class=\"mid\" colspan=\"2\">\n\t\t\t\t\t\t\t\t<div style=\"height: 20px;padding-top:2px;\" aria-label=\"Help\" class=\"pull-right\"  data-toggle=\"popover\" data-placement=\"right\" title=\"Bitfinex API Secret\" data-content=\"When setting up a new account, you will need to get this API Secret from bitfinex.\">\n\t\t\t\t\t\t\t\t  <span class=\"glyphicon glyphicon-question-sign\" aria-hidden=\"true\"></span>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\tBitfinex API Secret\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td class=\"mid\" colspan=\"2\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"inputBFXKey\" class=\"form-control\" placeholder=\"Bitfinex API Key\" required=\"\" autofocus=\"\" name=\"new_bfxKey\"  autocomplete=\"off\" value=\"'.$_REQUEST['new_bfxKey'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td class=\"mid\" colspan=\"2\">\n\t\t\t\t\t\t\t\t<input type=\"text\" id=\"inputBFXSec\" class=\"form-control\" placeholder=\"Bitfinex API Secret\" required=\"\" autofocus=\"\" name=\"new_bfxSec\"  autocomplete=\"off\" value=\"'.$_REQUEST['new_bfxSec'].'\">\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td class=\"mid\" colspan=\"4\">\n\t\t\t\t\t\t\t\t<button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Create Account</button>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t</form>';\n\t\t}\n\t\telse{\n\n\n\t\t\t$a[] = new Accounts($accStep['newaccount']);\n\t\t\t$this->showActiveAccounts($a);\n\t\t}\n\n\t}\n\n\tfunction showViewReturns(){\n\t\tglobal $accounts;\n\t\techo \"\n\t\t\t\t<script>\n\t\t\t\t\tvar currency = '\".$_REQUEST['funding'].\"';\n\t\t\t\t</script>\n\t\t\t\";\n\t\tif($_SESSION['user_lvl']==8 || $_SESSION['user_lvl']==9){\n\n\t\t\techo \"\n\t\t\t\t<script type='text/javascript' src='js/global_chart.js'></script>\n\t\t\t\t<div class='bigChart'>\n\t\t\t\t\t<div id='chart_GlobalDailyReturns' class='chartArea'><img src='img/ajax-loader.gif' class='loader'></div>\n\t\t\t\t</div>\n\t\t\t\t\";\n\n\t\t\tif(count($accounts) > 1){\n\t\t\t\tforeach($accounts as $a){\n\t\t\t\t\t$userIds[] = $a->userid;\n\t\t\t\t\t$userNames[] = $a->name;\n\t\t\t\t\techo \"\n\t\t\t\t\t<div class='bigChart'>\n\t\t\t\t\t\t<div id='chart_UserDailyReturns_\".$a->userid.\"' class='chartArea'><img src='img/ajax-loader.gif' class='loader'></div>\n\t\t\t\t\t</div>\n\t\t\t\t\t\t\";\n\t\t\t\t}\n\t\t\t\techo \"\n\t\t\t\t<script>\n\t\t\t\t\tvar userIds = [\".implode(\",\", $userIds).\"];\n\t\t\t\t\tvar userNames = ['\".implode(\"','\", $userNames).\"'];\n\t\t\t\t</script>\n\t\t\t\t<script type='text/javascript' src='js/user_chart.js'></script>\n\t\t\t\t\";\n\t\t\t}\n\t\t}\n\n\t\telse{\n\t\t\techo \"\n\t\t\t\t<div class='bigChart'>\n\t\t\t\t\t<div id='chart_UserDailyReturns_\".$_SESSION['userid'].\"' class='chartArea'><img src='img/ajax-loader.gif' class='loader'></div>\n\t\t\t\t</div>\n\t\t\t\t<script>\n\t\t\t\t\tvar userIds = [\".$_SESSION['userid'].\"];\n\t\t\t\t\tvar userNames = ['\".$_SESSION['username'].\"'];\n\t\t\t\t</script>\n\t\t\t\t<script type='text/javascript' src='js/user_chart.js'></script>\n\n\t\t\t\t\";\n\t\t}\n\t}\n\n\tfunction showGrabHistory(){\n\t\tglobal $gen, $act;\n\t\tif($_REQUEST['doUpdateHistory']==1){\n\n\t\t\techo '\n\t\t\t<div class=\"panel panel-default\">\n\t\t\t\t<div class=\"panel-heading\">Updating Account History From '.date('M jS, Y',strtotime($_REQUEST['startDate'])).'</div>\n\t\t\t\t<div class=\"panel-body table-responsive\">';\n\t\t\t\t$act->bfx->bitfinex_updateHistory(0, strtotime($_REQUEST['startDate']), $_REQUEST['currencyType'],true);\n\n\t\t\t\techo '\n\t\t\t\t</div>\n\t\t\t</div>';\n\n\n\t\t}\n\t\tif($_REQUEST['doUpdateHistory']==0){\n\t\t\techo '\n\t\t\t<form action=\"index.php\" method=\"post\" autocomplete=\"off\" >\n\t\t\t<input type=\"hidden\" name=\"doUpdateHistory\" value=\"1\">\n\t\t\t<input type=\"hidden\" name=\"page\" value=\"grabHistory\">\n\t\t\t<div class=\"panel panel-default\">\n\t\t\t\t<div class=\"panel-heading\">Update Account History</div>\n\t\t\t\t<div class=\"panel-body table-responsive\">\n\t\t\t\t\t<p>If your Bitfinex account is older than the time you\\'ve been using MarginBot, and you\\'d like to import the older history for tracking and stats reasons, you can do so here. </p>\n\t\t\t\t\t<p><em><strong>Note</strong></em>: selecting a large block of time here can take quite a while to run, and depending on your server settings, it may time out.  If that happens, take note of the last day that ran on the next screen, then run this function again, starting on that day.</p>\n\t\t\t\t\t<table class=\"table table-striped table-bordered\">\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t\t\tCurrency To Import\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t<th class=\"mid\">\n\t\t\t\t\t\t\t\tStart Date\n\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<select name=\"currencyType\" class=\"form-control\" >\n\t\t\t\t\t\t\t\t\t'.$gen->showCurSelect($_REQUEST['currencyType']).'\n\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t\t<td class=\"mid\">\n\t\t\t\t\t\t\t\t<input type=\"text\" name=\"startDate\" placeholder=\"Format: YYYY-MM-DD\" value=\"'.$_REQUEST['startDate'].'\" class=\"form-control\" >\n\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td class=\"mid\" colspan=\"4\">\n\t\t\t\t\t\t\t\t<button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Import History</button>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t</form>';\n\t\t}\n\n\n\n\t}\n\n\tfunction showLoginPage(){\n\n\t\techo '\n\t\t<img src=\"img/MarginBotLogo.png\" alt=\"MarginBot\" class=\"img-responsive center-block\">\n\t\t<form class=\"form-signin\" role=\"form\" method=\"post\" action=\"index.php\">\n\t\t<div class=\"panel panel-default\">\n\t\t  <div class=\"panel-heading\">\n\t\t\t<h3 class=\"panel-title\">Please sign in</h3>\n\t\t  </div>\n\t\t  <div class=\"panel-body\">\n\t\t\t<div class=\"form-group\">\n\t\t\t\t<label for=\"inputEmail\" class=\"sr-only\">User Name or Email Address</label>\n\t\t\t\t<input type=\"username\" id=\"inputEmail\" class=\"form-control\" placeholder=\"User Name or Email\" required=\"\" autofocus=\"\" name=\"login_email\">\n\t\t\t</div>\n\t\t\t<div class=\"form-group\">\n\t\t\t\t<label for=\"inputPassword\" class=\"sr-only\">Password</label>\n\t\t\t\t<input type=\"password\" id=\"inputPassword\" class=\"form-control\" placeholder=\"Password\" required=\"\" name=\"login_password\">\n\t\t\t</div>\n\n\t\t\t<button class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button>\n\t\t  </div>\n\t\t</div>\n\n\n\n\t\t  </form>\n\t\t  ';\n\n\t}\n}\n?>",
        "gt": [
            "'MarginBot/inc/Pages.php'",
            "'MarginBot/inc/header.php'",
            "'MarginBot/index.php'"
        ]
    },
    {
        "files": [
            "'ZnoteAAC/engine/init.php'",
            "'ZnoteAAC/failed.php'",
            "'ZnoteAAC/engine/function/general.php'"
        ],
        "content": "'ZnoteAAC/engine/init.php'\n:<?php if (version_compare(phpversion(), '5.6', '<')) die('PHP version 5.6 or higher is required.');\n\n$l_time = microtime(true);\n$l_start = $l_time;\n\nfunction elapsedTime($l_start = false, $l_time = false) {\n\tif ($l_start === false) global $l_start;\n\tif ($l_time === false) global $l_time;\n\n\t$l_time = explode(' ', microtime());\n\t$l_finish = $l_time[1] + $l_time[0];\n\treturn round(($l_finish - $l_start), 4);\n}\n\n$time = time();\n$version = '1.6';\n\n$aacQueries = 0;\n$accQueriesData = array();\n\nsession_start();\nob_start();\nrequire_once 'config.php';\n$sessionPrefix = $config['session_prefix'];\nif ($config['paypal']['enabled'] || $config['use_captcha']) {\n\t$curlcheck = extension_loaded('curl');\n\tif (!$curlcheck) die(\"php cURL is not enabled. It is required to for paypal or captcha services.<br>1. Find your php.ini file.<br>2. Uncomment extension=php_curl<br>Restart web server.<br><br><b>If you don't want this then disable paypal & use_captcha in config.php.</b>\");\n}\nif ($config['use_captcha'] && !extension_loaded('openssl')) {\n\tdie(\"php openSSL is not enabled. It is required to for captcha services.<br>1. Find your php.ini file.<br>2. Uncomment extension=php_openssl<br>Restart web server.<br><br><b>If you don't want this then disable use_captcha in config.php.</b>\");\n}\n\n\n\nif (!isset($config['TFSVersion'])) $config['TFSVersion'] = &$config['ServerEngine'];\nif (!isset($config['ServerEngine'])) $config['ServerEngine'] = &$config['TFSVersion'];\n\nrequire_once 'database/connect.php';\nrequire_once 'function/general.php';\nrequire_once 'function/users.php';\nrequire_once 'function/cache.php';\nrequire_once 'function/mail.php';\nrequire_once 'function/token.php';\nrequire_once 'function/itemparser/itemlistparser.php';\n\nif (isset($_SESSION['token'])) {\n\t$_SESSION['old_token'] = $_SESSION['token'];\n}\nToken::generate();\n\n$tfs_10_hasPremDays = true;\n\nif (user_logged_in() === true) {\n\t$session_user_id = getSession('user_id');\n\tif ($config['ServerEngine'] !== 'OTHIRE') {\n\t\tif ($config['ServerEngine'] == 'TFS_10') {\n\t\t\t$hasPremDays = mysql_select_single(\"SHOW COLUMNS from `accounts` WHERE `Field` = 'premdays'\");\n\t\t\tif ($hasPremDays === false) {\n\t\t\t\t$tfs_10_hasPremDays = false;\n\t\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premium_ends_at');\n\t\t\t\t$user_data['premdays'] = ($user_data['premium_ends_at'] - time() > 0) ? floor(($user_data['premium_ends_at'] - time()) / 86400) : 0;\n\t\t\t} else {\n\t\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premdays');\n\t\t\t}\n\t\t} else {\n\t\t\t$user_data = user_data($session_user_id, 'id', 'name', 'password', 'email', 'premdays');\n\t\t}\n\t} else\n\t\t$user_data = user_data($session_user_id, 'id', 'password', 'email', 'premend');\n\t$user_znote_data = user_znote_account_data($session_user_id, 'ip', 'created', 'points', 'cooldown', 'flag' ,'active_email');\n}\n$errors = array();\n\nif ($config['log_ip']) {\n\t$visitor_config = $config['ip_security'];\n\n\t$flush = $config['flush_ip_logs'];\n\tif ($flush != false) {\n\t\t$timef = $time - $flush;\n\t\tif (getCache() < $timef) {\n\t\t\t$timef = $time - $visitor_config['time_period'];\n\t\t\tmysql_delete(\"DELETE FROM znote_visitors_details WHERE time <= '$timef'\");\n\t\t\tsetCache($time);\n\t\t}\n\t}\n\n\t$visitor_data = znote_visitors_get_data();\n\n\tznote_visitor_set_data($visitor_data);\n\tznote_visitor_insert_detailed_data(0);\n\n\t$visitor_detailed = znote_visitors_get_detailed_data($visitor_config['time_period']);\n\n\n\t$v_activity = 0;\n\t$v_register = 0;\n\t$v_highscore = 0;\n\t$v_c_char = 0;\n\t$v_s_char = 0;\n\t$v_form = 0;\n\tforeach ((array)$visitor_detailed as $v_d) {\n\n\t\tif ($v_d['ip'] == getIPLong()) {\n\n\t\t\tswitch ($v_d['type']) {\n\t\t\t\tcase 0:\n\t\t\t\t\t$v_activity++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 1:\n\t\t\t\t\t$v_register++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 2:\n\t\t\t\t\t$v_c_char++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\t$v_highscore++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 4:\n\t\t\t\t\t$v_s_char++;\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\n\t\t\t\tcase 5:\n\t\t\t\t\t$v_form++;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\t}\n\n\n\tif ($v_activity > $visitor_config['max_activity']) die(\"Chill down. Your web activity is too big. max_activity\");\n\tif ($v_register > $visitor_config['max_account']) die(\"Chill down. You can't create multiple accounts that fast. max_account\");\n\tif ($v_c_char > $visitor_config['max_character']) die(\"Chill down. Your web activity is too big. max_character\");\n\tif ($v_form > $visitor_config['max_post']) die(\"Chill down. Your web activity is too big. max_post\");\n\n\n\n}\n\n\n$filename = explode('/', $_SERVER['SCRIPT_NAME']);\n$filename = $filename[count($filename) - 1];\n$page_filename = str_replace('.php', '', $filename);\nif ($config['allowSubPages']) {\n\trequire_once 'layout/sub.php';\n\tif (isset($subpages) && !empty($subpages)) {\n\t\tforeach ($subpages as $page) {\n\t\t\tif ($page['override'] && $page['file'] === $filename) {\n\t\t\t\trequire_once 'layout/overall/header.php';\n\t\t\t\trequire_once 'layout/sub/'.$page['file'];\n\t\t\t\trequire_once 'layout/overall/footer.php';\n\t\t\t\texit;\n\t\t\t}\n\t\t}\n\t} else {\n\t\t?>\n\t\t<div style=\"background-color: white; padding: 20px; width: 100%; float:left;\">\n\t\t\t<h2 style=\"color: black;\">Old layout!</h2>\n\t\t\t<p style=\"color: black;\">The layout is running an outdated sub system which is not compatible with this version of Znote AAC.</p>\n\t\t\t<p style=\"color: black;\">The file /layout/sub.php is outdated.\n\t\t\t<br>Please update it to look like <a style=\"color: orange;\" target=\"_BLANK\" href=\"https:\n\t\t\t</p>\n\t\t</div>\n\t\t<?php\n\t}\n}\n?>\n\n'ZnoteAAC/failed.php'\n:<?php require_once 'engine/init.php'; include 'layout/overall/header.php'; ?>\n<h1>Failed!</h1>\n<p>Something went wrong. :(</p>\n<?php include 'layout/overall/footer.php'; ?>\n'ZnoteAAC/engine/function/general.php'\n:<?php\n\nfunction setSession($key, $data) {\n\tglobal $sessionPrefix;\n\t$_SESSION[$sessionPrefix.$key] = $data;\n}\nfunction getSession($key) {\n\tglobal $sessionPrefix;\n\treturn (isset($_SESSION[$sessionPrefix.$key])) ? $_SESSION[$sessionPrefix.$key] : false;\n}\n\nfunction getValue($value) {\n\treturn (!empty($value)) ? sanitize($value) : false;\n}\n\nfunction SendGet($getArray, $location = 'error.php') {\n\t$string = \"\";\n\t$count = 0;\n\tforeach ($getArray as $getKey => $getValue) {\n\t\tif ($count > 0) $string .= '&';\n\t\t$string .= \"{$getKey}={$getValue}\";\n\t}\n\theader(\"Location: {$location}?{$string}\");\n\texit();\n}\n\n\nfunction data_dump($print = false, $var = false, $title = false) {\n\tif ($title !== false) echo \"<pre><font color='red' size='5'>$title</font><br>\";\n\telse echo '<pre>';\n\tif ($print !== false) {\n\t\techo 'Print: - ';\n\t\tprint_r($print);\n\t\techo \"<br>\";\n\t}\n\tif ($var !== false) {\n\t\techo 'Var_dump: - ';\n\t\tvar_dump($var);\n\t}\n\techo '</pre><br>';\n}\n\nfunction accountAccess($accountId, $TFS) {\n\t$accountId = (int)$accountId;\n\t$access = 0;\n\n\n\t$yourChars = mysql_select_multi(\"SELECT `name`, `group_id`, `account_id` FROM `players` WHERE `account_id`='$accountId';\");\n\tif ($yourChars !== false) {\n\t\tforeach ($yourChars as $char) {\n\t\t\tif ($TFS === 'TFS_03' || $TFS === 'OTHIRE') {\n\t\t\t\tif ($char['group_id'] > $access) $access = $char['group_id'];\n\t\t\t} else {\n\t\t\t\tif ($char['group_id'] > 1) {\n\t\t\t\t\tif ($access == 0) {\n\t\t\t\t\t\t$acc = mysql_select_single(\"SELECT `type` FROM `accounts` WHERE `id`='\". $char['account_id'] .\"' LIMIT 1;\");\n\t\t\t\t\t\t$access = $acc['type'];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif ($access == 0) $access++;\n\t\treturn $access;\n\t} else return false;\n\n}\n\nfunction generate_recovery_key($lenght) {\n\t$lenght = (int)$lenght;\n\t$tmp = rand(1000, 9000);\n\t$tmp += time();\n\t$tmp = sha1($tmp);\n\n\t$results = '';\n\tfor ($i = 0; $i < $lenght; $i++) $results = $results.''.$tmp[$i];\n\n\treturn $results;\n}\n\n\nfunction calculate_discount($orig, $new) {\n\t$orig = (int)$orig;\n\t$new = (int)$new;\n\n\t$tmp = '';\n\tif ($new >= $orig) {\n\t\tif ($new != $orig) {\n\t\t\t$calc = ($new/$orig) - 1;\n\t\t\t$calc *= 100;\n\t\t\t$tmp = '+'. floor($calc) .'%';\n\t\t} else $tmp = '0%';\n\t} else {\n\t\t$calc = 1 - ($new/$orig);\n\t\t$calc *= 100;\n\t\t$tmp = '-'. floor($calc) .'%';\n\t}\n\treturn $tmp;\n}\n\n\nfunction url($path = false) {\n\t$folder   = dirname($_SERVER['SCRIPT_NAME']);\n\treturn config('site_url') . '/' . $path;\n}\n\nfunction getCache() {\n\t$results = mysql_select_single(\"SELECT `cached` FROM `znote`;\");\n\treturn ($results !== false) ? $results['cached'] : false;\n}\n\nfunction setCache($time) {\n\t$time = (int)$time;\n\tmysql_update(\"UPDATE `znote` set `cached`='$time'\");\n}\n\n\nfunction znote_visitors_get_data() {\n\treturn mysql_select_multi(\"SELECT `ip`, `value` FROM `znote_visitors` ORDER BY `id` DESC LIMIT 1000;\");\n}\n\n\nfunction znote_visitor_set_data($visitor_data) {\n\t$exist = false;\n\t$ip = getIPLong();\n\n\tforeach ((array)$visitor_data as $row) {\n\t\tif ($ip == $row['ip']) {\n\t\t\t$exist = true;\n\t\t\t$value = $row['value'];\n\t\t}\n\t}\n\n\tif ($exist && isset($value)) {\n\n\t\t$value++;\n\t\tmysql_update(\"UPDATE `znote_visitors` SET `value` = '$value' WHERE `ip` = '$ip'\");\n\t} else {\n\n\t\tmysql_insert(\"INSERT INTO `znote_visitors` (`ip`, `value`) VALUES ('$ip', '1')\");\n\t}\n}\n\n\nfunction znote_visitors_get_detailed_data($cache_time) {\n\t$period = (int)time() - (int)$cache_time;\n\treturn mysql_select_multi(\"SELECT `ip`, `time`, `type`, `account_id` FROM `znote_visitors_details` WHERE `time` >= '$period' LIMIT 0, 50\");\n}\n\nfunction znote_visitor_insert_detailed_data($type) {\n\t$type = (int)$type;\n\n\t$time = time();\n\t$ip = getIPLong();\n\tif (user_logged_in()) {\n\t\t$acc = (int)getSession('user_id');\n\t\tmysql_insert(\"INSERT INTO `znote_visitors_details` (`ip`, `time`, `type`, `account_id`) VALUES ('$ip', '$time', '$type', '$acc')\");\n\t} else mysql_insert(\"INSERT INTO `znote_visitors_details` (`ip`, `time`, `type`, `account_id`) VALUES ('$ip', '$time', '$type', '0')\");\n}\n\nfunction something () {\n\n\t$ip = getIPLong();\n}\n\n\nfunction create_token() {\n\techo 'Checking whether to create token or not<br />';\n\n\t\techo 'Creating token<br />';\n\t\t$token = sha1(uniqid(time(), true));\n\t\t$token2 = $token;\n\t\tvar_dump($token, $token2);\n\t\t$_SESSION['token'] = $token2;\n\n\n\techo \"<input type=\\\"hidden\\\" name=\\\"token\\\" value=\\\"\". $_SESSION['token'] .\"\\\" />\";\n}\nfunction reset_token() {\n\techo 'Reseting token<br />';\n\tunset($_SESSION['token']);\n}\n\n\n\nfunction second_to_minute($seconds) {\n\treturn ($seconds / 60);\n}\n\n\nfunction minute_to_seconds($minutes) {\n\treturn ($minutes * 60);\n}\n\n\nfunction minute_to_hour($minutes) {\n\treturn ($minutes / 60);\n}\n\n\nfunction hour_to_minute($hours) {\n\treturn ($hour * 60);\n}\n\n\nfunction seconds_to_hours($seconds) {\n\t$minutes = second_to_minute($seconds);\n\t$hours = minute_to_hour($minutes);\n\treturn $hours;\n}\n\nfunction remaining_seconds_to_clock($seconds) {\n\treturn date(\"(H:i)\",time() + $seconds);\n}\n\n\nfunction validate_name($string) {\n\treturn (str_word_count(trim($string)) > config('maxW')) ? false : trim($string);\n}\n\n\nfunction validate_ip($ip) {\n\t$ipL = safeIp2Long($ip);\n\t$ipR = long2ip((int)$ipL);\n\n\tif ($ip === $ipR) {\n\t\treturn true;\n\t} elseif ($ip=='::1')  {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n\nfunction config($value) {\n\tglobal $config;\n\treturn $config[$value];\n}\n\n\n\nfunction fullConfig() {\n\tglobal $config;\n\treturn $config;\n}\n\n\nfunction format_character_name($name) {\n\treturn ucwords(strtolower($name));\n}\n\n\nfunction getIP() {\n\nreturn $_SERVER['REMOTE_ADDR'];\n}\n\nfunction safeIp2Long($ip) {\n\treturn sprintf('%u', ip2long($ip));\n}\n\n\nfunction getIPLong() {\n\treturn safeIp2Long(getIP());\n}\n\n\nfunction array_length($ar) {\n\t$r = 1;\n\tforeach($ar as $a) {\n\t\t$r++;\n\t}\n\treturn $r;\n}\n\nfunction level_to_experience($level) {\n\treturn 50/3*(pow($level, 3) - 6*pow($level, 2) + 17*$level - 12);\n}\n\n\nfunction hide_char_to_name($id) {\n\t$id = (int)$id;\n\tif ($id == 1) {\n\t\treturn 'hidden';\n\t} else {\n\t\treturn 'visible';\n\t}\n}\n\n\nfunction online_id_to_name($id) {\n\t$id = (int)$id;\n\tif ($id == 1) {\n\t\treturn '<font class=\"status_online\">ONLINE</font>';\n\t} else {\n\t\treturn '<font class=\"status_offline\">offline</font>';\n\t}\n}\n\n\nfunction vocation_id_to_name($id) {\n\t$vocations = config('vocations');\n\treturn (isset($vocations[$id]['name'])) ? $vocations[$id]['name'] : \"{$id} - Unknown\";\n}\n\n\nfunction vocation_name_to_id($name) {\n\t$vocations = config('vocations');\n\tforeach ($vocations as $id => $vocation)\n\t\tif ($vocation['name'] == $name)\n\t\t\treturn $id;\n\treturn false;\n}\n\n\nfunction group_id_to_name($id) {\n\t$positions = config('ingame_positions');\n\treturn ($positions[$id] >= 0) ? $positions[$id] : false;\n}\n\nfunction gender_exist($gender) {\n\n\tif ($gender >= 0 && $gender <= 1) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nfunction skillid_to_name($skillid) {\n\t$skillname = array(\n\t\t0 => 'fist fighting',\n\t\t1 => 'club fighting',\n\t\t2 => 'sword fighting',\n\t\t3 => 'axe fighting',\n\t\t4 => 'distance fighting',\n\t\t5 => 'shielding',\n\t\t6 => 'fishing',\n\t\t7 => 'experience',\n\t\t8 => 'magic level'\n\t);\n\n\treturn ($skillname[$skillid] >= 0) ? $skillname[$skillid] : false;\n}\n\n\nfunction town_id_to_name($id) {\n\t$towns = config('towns');\n\treturn (array_key_exists($id, $towns)) ? $towns[$id] : 'Missing Town';\n}\n\n\nfunction email($to, $subject, $body) {\n\tmail($to, $subject, $body, 'From: TEST');\n}\n\nfunction logged_in_redirect() {\n\tif (user_logged_in() === true) {\n\t\theader('Location: myaccount.php');\n\t}\n}\n\nfunction protect_page() {\n\tif (user_logged_in() === false) {\n\t\theader('Location: protected.php');\n\t\texit();\n\t}\n}\n\n\nfunction admin_only($user_data) {\n\n\t$gotAccess = is_admin($user_data);\n\n\tif ($gotAccess == false) {\n\t\tlogged_in_redirect();\n\t\texit();\n\t}\n}\n\nfunction is_admin($user_data) {\n\tif (config('ServerEngine') === 'OTHIRE')\n\t\treturn in_array($user_data['id'], config('page_admin_access')) ? true : false;\n\telse\n\t\treturn in_array($user_data['name'], config('page_admin_access')) ? true : false;\n}\n\nfunction array_sanitize(&$item) {\n\t$item = htmlentities(strip_tags(mysql_znote_escape_string($item)));\n}\n\nfunction sanitize($data) {\n\treturn htmlentities(strip_tags(mysql_znote_escape_string($data)));\n}\n\nfunction output_errors($errors) {\n\treturn '<ul><li>'. implode('</li><li>', $errors) .'</li></ul>';\n}\n\n\n\nfunction resize_imagex($file, $width, $height) {\n\n\tlist($w, $h) = getimagesize($file['tmp']);\n\n\t$ratio = max($width/$w, $height/$h);\n\t$h = ceil($height / $ratio);\n\t$x = ($w - $width / $ratio) / 2;\n\t$w = ceil($width / $ratio);\n\n\t$path = 'engine/guildimg/'.$file['new_name'];\n\n\t$imgString = file_get_contents($file['tmp']);\n\n\t$image = imagecreatefromstring($imgString);\n\t$tmp = imagecreatetruecolor($width, $height);\n\timagecopyresampled($tmp, $image,\n\t    0, 0,\n\t    $x, 0,\n\t    $width, $height,\n\t    $w, $h);\n\n\timagegif($tmp, $path);\n\timagedestroy($image);\n\timagedestroy($tmp);\n\n\treturn true;\n}\n\n\nfunction check_image($image) {\n\n\t$image_data = array('new_name' => $_GET['name'].'.gif', 'name' => $image['name'], 'tmp' => $image['tmp_name'], 'error' => $image['error'], 'size' => $image['size'], 'type' => $image['type']);\n\n\n\tif ($image_data['type'] === 'image/gif') {\n\n\n\t\t$check = getimagesize($image_data['tmp']);\n\n\t\tif ($check) {\n\n\n\t\t\tif ($check['mime'] === 'image/gif') {\n\n\t\t\t\t$path_info = pathinfo($image_data['name']);\n\n\n\t\t\t\tif ($path_info['extension'] === 'gif') {\n\n\n\t\t\t\t\t$img = resize_imagex($image_data, 100, 100);\n\n\t\t\t\t\tif ($img) {\n\n\t\t\t\t\t\theader('Location: guilds.php?name='. $_GET['name']);\n\t\t\t\t\t\texit();\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\theader('Location: guilds.php?error=Only gif images accepted, you uploaded:['.$path_info['extension'].'].&name='. $_GET['name']);\n\t\t\t\t\texit();\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\theader('Location: guilds.php?error=Only gif images accepted, you uploaded:['.$check['mime'].'].&name='. $_GET['name']);\n\t\t\t\texit();\n\t\t\t}\n\n\t\t} else {\n\n\t\t\theader('Location: guilds.php?error=Uploaded image is invalid.&name='. $_GET['name']);\n\t\t\texit();\n\t\t}\n\n\t} else {\n\n\t\theader('Location: guilds.php?error=Only gif images are accepted, you uploaded:['.$image_data['type'].'].&name='. $_GET['name']);\n\t\texit();\n\t}\n}\n\n\nfunction logo_exists($guild) {\n\t$guild = sanitize($guild);\n\tif (file_exists('engine/guildimg/'.$guild.'.gif')) {\n\n\t\techo'engine/guildimg/'.$guild.'.gif';\n\n\t} else {\n\n\t\techo'engine/guildimg/default@logo.gif';\n\t}\n}\n\nfunction generateRandomString($length = 16) {\n\t$characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n\t$charactersLength = strlen($characters);\n\t$randomString = '';\n\tfor ($i = 0; $i < $length; $i++) {\n\t\t$randomString .= $characters[rand(0, $charactersLength - 1)];\n\t}\n\treturn $randomString;\n}\n\nfunction verifyGoogleReCaptcha($postResponse = null) {\n\tif(!isset($postResponse) || empty($postResponse)) {\n\t\treturn false;\n\t}\n\n\t$recaptcha_api_url = 'https:\n\t$secretKey = config('captcha_secret_key');\n\t$ip = $_SERVER['REMOTE_ADDR'];\n\t$params = 'secret='.$secretKey.'&response='.$postResponse.'&remoteip='.$ip;\n\n\t$useCurl = config('captcha_use_curl');\n\tif($useCurl) {\n\t\t$curl_connection = curl_init($recaptcha_api_url);\n\n\t\tcurl_setopt($curl_connection, CURLOPT_CONNECTTIMEOUT, 5);\n\t\tcurl_setopt($curl_connection, CURLOPT_RETURNTRANSFER, true);\n\t\tcurl_setopt($curl_connection, CURLOPT_SSL_VERIFYPEER, false);\n\t\tcurl_setopt($curl_connection, CURLOPT_FOLLOWLOCATION, 0);\n\t\tcurl_setopt($curl_connection, CURLOPT_POSTFIELDS, $params);\n\n\t\t$response = curl_exec($curl_connection);\n\t\tcurl_close($curl_connection);\n\t} else {\n\t\t$response = file_get_contents($recaptcha_api_url . '?' . $params);\n\t}\n\n\t$json = json_decode($response);\n\treturn isset($json->success) && $json->success;\n}\n\n\nfunction hhb_tohtml( $str) {\n\treturn htmlentities($str, ENT_QUOTES | ENT_HTML401 | ENT_SUBSTITUTE | ENT_DISALLOWED, 'UTF-8', true);\n}\n\n\n\nfunction random_bytes_compat($length, &$crypto_strong = null) {\n    $crypto_strong = false;\n    if (!is_int($length)) {\n        throw new \\InvalidArgumentException(\"argument 1 must be an int, is \" . gettype($length));\n    }\n    if ($length < 0) {\n        throw new \\InvalidArgumentException(\"length must be >= 0\");\n    }\n    if (is_callable(\"random_bytes\")) {\n        $crypto_strong = true;\n        return random_bytes($length);\n    }\n    if (is_callable(\"openssl_random_pseudo_bytes\")) {\n        return openssl_random_pseudo_bytes($length, $crypto_strong);\n    }\n    $ret = @file_get_contents(\"/dev/urandom\", false, null, 0, $length);\n    if (is_string($ret) && strlen($ret) === $length) {\n        $crypto_strong = true;\n        return $ret;\n    }\n\n    $crypto_strong = false;\n    $ret = \"\";\n    for ($i = 0; $i < $length; ++$i) {\n        $ret .= chr(mt_rand(0, 255));\n    }\n    return $ret;\n}\n\n\nif(!function_exists('hash_equals')) {\n    function hash_equals($str1, $str2) {\n        if(strlen($str1) != strlen($str2)) {\n            return false;\n        }\n\t\t$res = $str1 ^ $str2;\n\t\t$ret = 0;\n\t\tfor($i = strlen($res) - 1; $i >= 0; $i--) {\n\t\t\t$ret |= ord($res[$i]);\n\t\t}\n\t\treturn !$ret;\n    }\n}\n?>\n",
        "gt": [
            "'ZnoteAAC/engine/function/general.php'",
            "'ZnoteAAC/engine/init.php'",
            "'ZnoteAAC/failed.php'"
        ]
    },
    {
        "files": [
            "'pomf/static/php/includes/Core.namespace.php'",
            "'pomf/static/php/upload.php'",
            "'pomf/static/php/includes/Upload.class.php'"
        ],
        "content": "'pomf/static/php/includes/Core.namespace.php'\n:<?php\n\n\n\n\nnamespace Core {\n\n    require_once 'Upload.class.php';\n\n    use Exception;\n    use PDO;\n    use Upload as Upload;\n\n    class Settings\n    {\n\n        public static mixed $DB;\n\n        public static string $DB_MODE;\n        public static string $DB_PATH;\n        public static string $DB_USER;\n        public static string $DB_PASS;\n\n        public static bool $LOG_IP;\n        public static bool $ANTI_DUPE;\n        public static bool $BLACKLIST_DB;\n        public static bool $FILTER_MODE;\n\n        public static string $FILES_ROOT;\n        public static int $FILES_RETRIES;\n\n        public static bool $SSL;\n        public static string $URL;\n\n        public static int $NAME_LENGTH;\n        public static string $ID_CHARSET;\n        public static array $BLOCKED_EXTENSIONS;\n        public static array $BLOCKED_MIME;\n\n\n\n        public static function loadConfig()\n        {\n            if (!file_exists('/var/www/pomf/dist.json')) {\n                throw new Exception('Cant read settings file.', 500);\n            }\n            try {\n                $settings_array = json_decode(\n                    file_get_contents('/var/www/pomf/dist.json'),\n                    true\n                );\n                self::$DB_MODE = $settings_array['DB_MODE'];\n                self::$DB_PATH = $settings_array['DB_PATH'];\n                self::$DB_USER = $settings_array['DB_USER'];\n                self::$DB_PASS = $settings_array['DB_PASS'];\n                self::$LOG_IP = $settings_array['LOG_IP'];\n                self::$ANTI_DUPE = $settings_array['ANTI_DUPE'];\n                self::$BLACKLIST_DB = $settings_array['BLACKLIST_DB'];\n                self::$FILTER_MODE = $settings_array['FILTER_MODE'];\n                self::$FILES_ROOT = $settings_array['FILES_ROOT'];\n                self::$FILES_RETRIES = $settings_array['FILES_RETRIES'];\n                self::$SSL = $settings_array['SSL'];\n                self::$URL = $settings_array['URL'];\n                self::$NAME_LENGTH = $settings_array['NAME_LENGTH'];\n                self::$ID_CHARSET = $settings_array['ID_CHARSET'];\n                self::$BLOCKED_EXTENSIONS = $settings_array['BLOCKED_EXTENSIONS'];\n                self::$BLOCKED_MIME = $settings_array['BLOCKED_MIME'];\n            } catch (Exception) {\n                throw new Exception('Cant populate settings.', 500);\n            }\n            Database::assemblePDO();\n        }\n    }\n\n    class cuteGrills\n    {\n        public static array $GRILLS;\n\n        public static function showGrills()\n        {\n            self::loadGrills();\n            if (!headers_sent()) {\n                header(\n                    'Location: /img/grills/' .\n                    self::$GRILLS[array_rand(self::$GRILLS)],\n                    true,\n                    303\n                );\n            }\n        }\n\n        public static function loadGrills()\n        {\n            self::$GRILLS = array_slice(scandir('img/grills/'), 2);\n        }\n    }\n\n    class Response\n    {\n        private mixed $type;\n\n        public function __construct($response_type = null)\n        {\n            switch ($response_type) {\n                case 'csv':\n                    header('Content-Type: text/csv; charset=UTF-8');\n                    $this->type = $response_type;\n                    break;\n                case 'html':\n                    header('Content-Type: text/html; charset=UTF-8');\n                    $this->type = $response_type;\n                    break;\n                case 'json':\n                    header('Content-Type: application/json; charset=UTF-8');\n                    $this->type = $response_type;\n                    break;\n                case 'gyazo':\n                    header('Content-Type: text/plain; charset=UTF-8');\n                    $this->type = 'text';\n                    break;\n                case 'text':\n                    header('Content-Type: text/plain; charset=UTF-8');\n                    $this->type = $response_type;\n                    break;\n                default:\n                    header('Content-Type: application/json; charset=UTF-8');\n                    $this->type = 'json';\n                    $this->error(400, 'Invalid response type. Valid options are: csv, html, json, text.');\n                    break;\n            }\n        }\n\n        public function error($code, $desc)\n        {\n            $response = null;\n\n            switch ($this->type) {\n                case 'csv':\n                    $response = $this->csvError($desc);\n                    break;\n                case 'html':\n                    $response = $this->htmlError($code, $desc);\n                    break;\n                case 'json':\n                    $response = $this->jsonError($code, $desc);\n                    break;\n                case 'text':\n                    $response = $this->textError($code, $desc);\n                    break;\n            }\n            http_response_code($code);\n            echo $response;\n        }\n\n        private static function csvError($description): string\n        {\n            return '\"error\"' . \"\\r\\n\" . \"\\\"$description\\\"\" . \"\\r\\n\";\n        }\n\n        private static function htmlError($code, $description): string\n        {\n            return '<p>ERROR: (' . $code . ') ' . $description . '</p>';\n        }\n\n        private static function jsonError($code, $description): bool|string\n        {\n            return json_encode([\n                'success' => false,\n                'errorcode' => $code,\n                'description' => $description,\n            ], JSON_PRETTY_PRINT);\n        }\n\n\n        private static function textError($code, $description): string\n        {\n            return 'ERROR: (' . $code . ') ' . $description;\n        }\n\n        public function send($files)\n        {\n            $response = null;\n\n            switch ($this->type) {\n                case 'csv':\n                    $response = $this->csvSuccess($files);\n                    break;\n                case 'html':\n                    $response = $this->htmlSuccess($files);\n                    break;\n                case 'json':\n                    $response = $this->jsonSuccess($files);\n                    break;\n                case 'text':\n                    $response = $this->textSuccess($files);\n                    break;\n            }\n\n            http_response_code(200);\n            echo $response;\n        }\n\n        private static function csvSuccess($files): string\n        {\n            $result = '\"name\",\"url\",\"hash\",\"size\"' . \"\\r\\n\";\n            foreach ($files as $file) {\n                $result .= '\"' . $file['name'] . '\"' . ',' .\n                    '\"' . $file['url'] . '\"' . ',' .\n                    '\"' . $file['hash'] . '\"' . ',' .\n                    '\"' . $file['size'] . '\"' . \"\\r\\n\";\n            }\n\n            return $result;\n        }\n\n        private static function htmlSuccess($files): string\n        {\n            $result = '';\n\n            foreach ($files as $file) {\n                $result .= '<a href=\"' . $file['url'] . '\">' . $file['url'] . '</a><br>';\n            }\n\n            return $result;\n        }\n\n        private static function jsonSuccess($files): bool|string\n        {\n            return json_encode([\n                'success' => true,\n                'files' => $files,\n            ], JSON_PRETTY_PRINT);\n        }\n\n        private static function textSuccess($files): string\n        {\n            $result = '';\n\n            foreach ($files as $file) {\n                $result .= $file['url'] . \"\\n\";\n            }\n\n            return $result;\n        }\n    }\n\n    class Database\n    {\n\n        public static function assemblePDO()\n        {\n            try {\n                Settings::$DB = new PDO(\n                    Settings::$DB_MODE . ':' . Settings::$DB_PATH, Settings::$DB_USER,\n                    Settings::$DB_PASS\n                );\n            } catch (Exception) {\n                throw new Exception('Cant connect to DB.', 500);\n            }\n        }\n\n\n        public static function dbCheckNameExists()\n        {\n            try {\n                $q = Settings::$DB->prepare('SELECT COUNT(filename) FROM files WHERE filename = (:name)');\n                $q->bindValue(':name', Upload::$NEW_NAME_FULL);\n                $q->execute();\n                return $q->fetchColumn();\n            } catch (Exception) {\n                throw new Exception('Cant check if name exists in DB.', 500);\n            }\n        }\n\n\n        public static function checkFileBlacklist()\n        {\n            try {\n                $q = Settings::$DB->prepare('SELECT hash, COUNT(*) AS count FROM blacklist WHERE hash = (:hash)');\n                $q->bindValue(':hash', Upload::$SHA1, PDO::PARAM_STR);\n                $q->execute();\n                $result = $q->fetch();\n                if ($result['count'] > 0) {\n                    throw new Exception('File blacklisted!', 415);\n                }\n            } catch (Exception) {\n                throw new Exception('Cant check blacklist DB.', 500);\n            }\n        }\n\n\n        public static function antiDupe()\n        {\n            try {\n                $q = Settings::$DB->prepare(\n                    'SELECT filename, COUNT(*) AS count FROM files WHERE hash = (:hash) AND size = (:size)'\n                );\n                $q->bindValue(':hash', Upload::$SHA1, PDO::PARAM_STR);\n                $q->bindValue(':size', Upload::$FILE_SIZE, PDO::PARAM_INT);\n                $q->execute();\n                $result = $q->fetch();\n                if ($result['count'] > 0) {\n                    Upload::$NEW_NAME_FULL = $result['filename'];\n                } else {\n                    Upload::generateName();\n                }\n            } catch (Exception) {\n                throw new Exception('Cant check for dupes in DB.', 500);\n            }\n        }\n\n\n        public static function newIntoDB()\n        {\n            try {\n                $q = Settings::$DB->prepare(\n                    'INSERT INTO files (hash, originalname, filename, size, date, ip)' .\n                    'VALUES (:hash, :orig, :name, :size, :date, :ip)'\n                );\n                $q->bindValue(':hash', Upload::$SHA1, PDO::PARAM_STR);\n                $q->bindValue(':orig', Upload::$FILE_NAME, PDO::PARAM_STR);\n                $q->bindValue(':name', Upload::$NEW_NAME_FULL, PDO::PARAM_STR);\n                $q->bindValue(':size', Upload::$FILE_SIZE, PDO::PARAM_INT);\n                $q->bindValue(':date', time(), PDO::PARAM_STR);\n                $q->bindValue(':ip', Upload::$IP, PDO::PARAM_STR);\n                $q->execute();\n            } catch (Exception) {\n                throw new Exception('Cant insert into DB.', 500);\n            }\n        }\n    }\n}\n\n\n\n'pomf/static/php/upload.php'\n:<?php\n\n\nrequire_once 'includes/Upload.class.php';\n\n$type = $_GET['output'] ?? 'json';\n$response = (new Core\\Response($type));\n\nif (isset($_FILES['files'])) {\n    $uploads = Upload::reFiles($_FILES['files']);\n\n    try {\n        foreach ($uploads as $upload) {\n            $res[] = Upload::uploadFile();\n        }\n        if (isset($res)) {\n            $response->send($res);\n        }\n    } catch (Exception $e) {\n        $response->error($e->getCode(), $e->getMessage());\n    }\n} else {\n    $response->error(400, 'No input file(s)');\n}\n'pomf/static/php/includes/Upload.class.php'\n:<?php\n\n\n\nrequire_once 'Core.namespace.php';\n\nuse Core\\Database as Database;\nuse Core\\Settings as Settings;\n\nclass Upload\n{\n\n    public static string $FILE_NAME;\n    public static mixed $FILE_EXTENSION;\n    public static string $FILE_MIME;\n    public static string $SHA1;\n    public static string $NEW_NAME;\n    public static string $NEW_NAME_FULL;\n    public static mixed $IP;\n\n    public static string $FILE_SIZE;\n    public static string $TEMP_FILE;\n\n\n    public static function reFiles($files): array\n    {\n        $result = [];\n        $files = self::diverseArray($files);\n\n        foreach ($files as $file) {\n            self::$FILE_NAME = strip_tags($file['name']);\n            self::$FILE_SIZE = $file['size'];\n            self::$TEMP_FILE = $file['tmp_name'];\n            self::$SHA1 = sha1_file(self::$TEMP_FILE);\n            $result[] = [self::$FILE_NAME, self::$FILE_SIZE, self::$TEMP_FILE, self::$SHA1];\n        }\n        return $result;\n    }\n\n    public static function diverseArray($files): array\n    {\n        $result = [];\n\n        foreach ($files as $key1 => $value1) {\n            foreach ($value1 as $key2 => $value2) {\n                $result[$key2][$key1] = $value2;\n            }\n        }\n        return $result;\n    }\n\n\n    public static function uploadFile(): array\n    {\n        Settings::loadConfig();\n        self::fileInfo();\n\n        if (Settings::$BLACKLIST_DB) {\n            Database::checkFileBlacklist();\n        }\n\n        if (Settings::$FILTER_MODE) {\n            self::checkMimeBlacklist();\n            if(!is_null(self::$FILE_EXTENSION)){\n                self::checkExtensionBlacklist();\n            }\n        }\n\n        if (Settings::$ANTI_DUPE) {\n            Database::antiDupe();\n        }\n\n        if (!Settings::$ANTI_DUPE) {\n            self::generateName();\n        }\n\n        if (!is_dir(Settings::$FILES_ROOT)) {\n            throw new Exception('File storage path not accessible.', 500);\n        }\n\n        if (!move_uploaded_file(self::$TEMP_FILE, Settings::$FILES_ROOT . self::$NEW_NAME_FULL)) {\n            throw new Exception('Failed to move file to destination', 500);\n        }\n\n        if (!chmod(Settings::$FILES_ROOT . self::$NEW_NAME_FULL, 0644)) {\n            throw new Exception('Failed to change file permissions', 500);\n        }\n\n        Database::newIntoDB();\n\n        if (Settings::$SSL) {\n            $preURL = 'https:\n        } else {\n            $preURL = 'http:\n        }\n\n        return [\n            'hash' => self::$SHA1,\n            'name' => self::$FILE_NAME,\n            'url' => $preURL . Settings::$URL . '/' . rawurlencode(self::$NEW_NAME_FULL),\n            'size' => self::$FILE_SIZE\n        ];\n    }\n\n    public static function getIP()\n    {\n        if (!empty($_SERVER['HTTP_CLIENT_IP'])) {\n            self::$IP = $_SERVER['HTTP_CLIENT_IP'];\n        }\n        if (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {\n            self::$IP = $_SERVER['HTTP_X_FORWARDED_FOR'];\n        }\n        if (!isset(self::$IP)) {\n            self::$IP = $_SERVER['REMOTE_ADDR'];\n        }\n    }\n\n    public static function fileInfo()\n    {\n        if (isset($_FILES['files'])) {\n            $finfo = finfo_open(FILEINFO_MIME_TYPE);\n            self::$FILE_MIME = finfo_file($finfo, self::$TEMP_FILE);\n            finfo_close($finfo);\n\n            $extension = explode('.', self::$FILE_NAME);\n            if(substr_count(self::$FILE_NAME, '.') > 0) {\n                self::$FILE_EXTENSION = $extension[count($extension)-1];\n            } else {\n                self::$FILE_EXTENSION = null;\n            }\n\n            if (Settings::$LOG_IP) {\n                self::getIP();\n            } else {\n                self::$IP = null;\n            }\n        }\n    }\n\n\n    public static function checkMimeBlacklist()\n    {\n        if (in_array(self::$FILE_MIME, Settings::$BLOCKED_MIME)) {\n            throw new Exception('Filetype not allowed.', 415);\n        }\n    }\n\n\n    public static function checkExtensionBlacklist()\n    {\n        if (in_array(self::$FILE_EXTENSION, Settings::$BLOCKED_EXTENSIONS)) {\n            throw new Exception('Filetype not allowed.', 415);\n        }\n    }\n\n\n    public static function generateName()\n    {\n        do {\n            if (Settings::$FILES_RETRIES === 0) {\n                throw new Exception('Gave up trying to find an unused name!', 500);\n            }\n\n            self::$NEW_NAME = '';\n            for ($i = 0; $i < Settings::$NAME_LENGTH; ++$i) {\n                self::$NEW_NAME .= Settings::$ID_CHARSET[mt_rand(0, strlen(Settings::$ID_CHARSET))];\n            }\n\n            self::$NEW_NAME_FULL = self::$NEW_NAME;\n\n            if (!is_null(self::$FILE_EXTENSION)) {\n                self::$NEW_NAME_FULL .= '.' . self::$FILE_EXTENSION;\n            }\n\n        } while (Database::dbCheckNameExists() > 0);\n    }\n}",
        "gt": [
            "'pomf/static/php/includes/Core.namespace.php'",
            "'pomf/static/php/includes/Upload.class.php'",
            "'pomf/static/php/upload.php'"
        ]
    }
]