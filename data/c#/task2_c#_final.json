[
    {
        "files": [
            "'ecsrx.roguelike2d/Assets/Plugins/UniRx/Scripts/UnityEngineBridge/Operators/DelayFrameSubscription.cs'",
            "'ecsrx.roguelike2d/Assets/Game/Systems/PlayerInteractionSystem.cs'",
            "'ecsrx.roguelike2d/Assets/Plugins/UniRx/Scripts/Observable.Conversions.cs'",
            "'ecsrx.roguelike2d/Assets/Plugins/UniRx/Scripts/Operators/IgnoreElements.cs'"
        ],
        "content": "'ecsrx.roguelike2d/Assets/Plugins/UniRx/Scripts/UnityEngineBridge/Operators/DelayFrameSubscription.cs'\n:﻿using System;\n\n#if UniRxLibrary\nusing UnityObservable = UniRx.ObservableUnity;\n#else\nusing UnityObservable = UniRx.Observable;\n#endif\n\nnamespace UniRx.Operators\n{\n    internal class DelayFrameSubscriptionObservable<T> : OperatorObservableBase<T>\n    {\n        readonly IObservable<T> source;\n        readonly int frameCount;\n        readonly FrameCountType frameCountType;\n\n        public DelayFrameSubscriptionObservable(IObservable<T> source, int frameCount, FrameCountType frameCountType)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n            this.frameCount = frameCount;\n            this.frameCountType = frameCountType;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)\n        {\n            var d = new MultipleAssignmentDisposable();\n            d.Disposable = UnityObservable.TimerFrame(frameCount, frameCountType)\n                .SubscribeWithState3(observer, d, source, (_, o, disp, s) =>\n                {\n                    disp.Disposable = s.Subscribe(o);\n                });\n\n            return d;\n        }\n    }\n}\n'ecsrx.roguelike2d/Assets/Game/Systems/PlayerInteractionSystem.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing SystemsRx.Events;\nusing SystemsRx.Extensions;\nusing SystemsRx.Systems.Conventional;\nusing EcsRx.Collections;\nusing EcsRx.Entities;\nusing EcsRx.Groups;\nusing EcsRx.Groups.Observable;\nusing EcsRx.Plugins.GroupBinding.Attributes;\nusing EcsRx.Systems;\nusing EcsRx.Unity.Extensions;\nusing EcsRx.Unity.MonoBehaviours;\nusing EcsRx.Plugins.Views.Components;\nusing Game.Components;\nusing Game.Events;\nusing UniRx;\nusing UniRx.Triggers;\n\nnamespace Game.Systems\n{\n    public class PlayerInteractionSystem : IManualSystem, IGroupSystem\n    {\n        public IGroup Group { get; } = new Group(typeof (PlayerComponent), typeof (ViewComponent));\n\n        [FromGroup]\n        public IObservableGroup ObservableGroup;\n\n        private readonly IList<IDisposable> _foodTriggers = new List<IDisposable>();\n        private readonly IList<IDisposable> _exitTriggers = new List<IDisposable>();\n        private readonly IEventSystem _eventSystem;\n\n        public PlayerInteractionSystem(IEventSystem eventSystem)\n        {\n            _eventSystem = eventSystem;\n        }\n\n        public void StartSystem()\n        {\n            this.WaitForScene().Subscribe(x =>\n            {\n                foreach(var player in ObservableGroup)\n                { CheckForInteractions(player); }\n            });\n        }\n\n        public void StopSystem()\n        {\n            _foodTriggers.DisposeAll();\n            _exitTriggers.DisposeAll();\n        }\n\n        private void CheckForInteractions(IEntity player)\n        {\n            var currentPlayer = player;\n            var playerView = currentPlayer.GetGameObject();\n            var triggerObservable = playerView.OnTriggerEnter2DAsObservable();\n\n            var foodTrigger = triggerObservable\n                .Where(x => x.gameObject.CompareTag(\"Food\") || x.gameObject.CompareTag(\"Soda\"))\n                .Subscribe(x =>\n                {\n                    var entityView = x.gameObject.GetComponent<EntityView>();\n                    var isSoda = x.gameObject.CompareTag(\"Soda\");\n                    HandleFoodPickup(entityView.Entity, currentPlayer, isSoda);\n                });\n\n            _foodTriggers.Add(foodTrigger);\n\n            var exitTrigger = triggerObservable\n                .Where(x => x.gameObject.CompareTag(\"Exit\"))\n                .Subscribe(x =>\n                {\n                    var entityView = x.gameObject.GetComponent<EntityView>();\n                    HandleExit(entityView.Entity, currentPlayer);\n                });\n\n            _exitTriggers.Add(exitTrigger);\n        }\n\n        private void HandleFoodPickup(IEntity food, IEntity player, bool isSoda)\n        { _eventSystem.Publish(new FoodPickupEvent(food, player, isSoda)); }\n\n        private void HandleExit(IEntity exit, IEntity player)\n        { _eventSystem.Publish(new ExitReachedEvent(exit, player)); }\n    }\n}\n'ecsrx.roguelike2d/Assets/Plugins/UniRx/Scripts/Observable.Conversions.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing UniRx.Operators;\n\nnamespace UniRx\n{\n    public static partial class Observable\n    {\n        public static IObservable<T> AsObservable<T>(this IObservable<T> source)\n        {\n            if (source == null) throw new ArgumentNullException(\"source\");\n\n\n            if (source is UniRx.Operators.AsObservableObservable<T>)\n            {\n                return source;\n            }\n\n            return new AsObservableObservable<T>(source);\n        }\n\n        public static IObservable<T> ToObservable<T>(this IEnumerable<T> source)\n        {\n            return ToObservable(source, Scheduler.DefaultSchedulers.Iteration);\n        }\n\n        public static IObservable<T> ToObservable<T>(this IEnumerable<T> source, IScheduler scheduler)\n        {\n            return new ToObservableObservable<T>(source, scheduler);\n        }\n\n        public static IObservable<TResult> Cast<TSource, TResult>(this IObservable<TSource> source)\n        {\n            return new CastObservable<TSource, TResult>(source);\n        }\n\n\n\n\n        public static IObservable<TResult> Cast<TSource, TResult>(this IObservable<TSource> source, TResult witness)\n        {\n            return new CastObservable<TSource, TResult>(source);\n        }\n\n        public static IObservable<TResult> OfType<TSource, TResult>(this IObservable<TSource> source)\n        {\n            return new OfTypeObservable<TSource, TResult>(source);\n        }\n\n\n\n\n        public static IObservable<TResult> OfType<TSource, TResult>(this IObservable<TSource> source, TResult witness)\n        {\n            return new OfTypeObservable<TSource, TResult>(source);\n        }\n\n\n\n\n        public static IObservable<Unit> AsUnitObservable<T>(this IObservable<T> source)\n        {\n            return new AsUnitObservableObservable<T>(source);\n        }\n\n\n\n\n        public static IObservable<Unit> AsSingleUnitObservable<T>(this IObservable<T> source)\n        {\n            return new AsSingleUnitObservableObservable<T>(source);\n        }\n    }\n}\n'ecsrx.roguelike2d/Assets/Plugins/UniRx/Scripts/Operators/IgnoreElements.cs'\n:﻿using System;\nusing UniRx.Operators;\n\nnamespace UniRx.Operators\n{\n    internal class IgnoreElementsObservable<T> : OperatorObservableBase<T>\n    {\n        readonly IObservable<T> source;\n\n        public IgnoreElementsObservable(IObservable<T> source)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)\n        {\n            return source.Subscribe(new IgnoreElements(observer, cancel));\n        }\n\n        class IgnoreElements : OperatorObserverBase<T, T>\n        {\n            public IgnoreElements(IObserver<T> observer, IDisposable cancel) : base(observer, cancel)\n            {\n            }\n\n            public override void OnNext(T value)\n            {\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); }\n                finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                try { observer.OnCompleted(); }\n                finally { Dispose(); }\n            }\n        }\n    }\n}",
        "gt": [
            "'ecsrx.roguelike2d/Assets/Plugins/UniRx/Scripts/UnityEngineBridge/Operators/DelayFrameSubscription.cs'",
            "'ecsrx.roguelike2d/Assets/Plugins/UniRx/Scripts/Operators/IgnoreElements.cs'",
            "'ecsrx.roguelike2d/Assets/Plugins/UniRx/Scripts/Observable.Conversions.cs'",
            "'ecsrx.roguelike2d/Assets/Game/Systems/PlayerInteractionSystem.cs'"
        ]
    },
    {
        "files": [
            "'iyzipay-dotnet/Iyzipay.Tests/Functional/IyziLinkTest.cs'",
            "'iyzipay-dotnet/Iyzipay/Request/RetrieveCardManagementPageCardRequest.cs'",
            "'iyzipay-dotnet/Iyzipay.Tests/Functional/CardManagementRetrieveCardTest.cs'"
        ],
        "content": "'iyzipay-dotnet/Iyzipay.Tests/Functional/IyziLinkTest.cs'\n:using Iyzipay.Model;\nusing Iyzipay.Model.V2;\nusing Iyzipay.Model.V2.Iyzilink;\nusing Iyzipay.Request;\nusing Iyzipay.Tests.Functional.Util;\nusing NUnit.Framework;\n\nnamespace Iyzipay.Tests.Functional\n{\n    public class IyziLinkTest : BaseTest\n    {\n\n\n\n\n\n\n\n\n\n\n    }\n}\n'iyzipay-dotnet/Iyzipay/Request/RetrieveCardManagementPageCardRequest.cs'\n:using System;\n\nnamespace Iyzipay.Request\n{\n    public class RetrieveCardManagementPageCardRequest : BaseRequest\n    {\n        public string PageToken { get; set; }\n\n        public override string ToPKIRequestString()\n        {\n            return ToStringRequestBuilder.NewInstance()\n                .AppendSuper(base.ToPKIRequestString())\n                .Append(\"token\", PageToken)\n                .GetRequestString();\n        }\n    }\n}\n\n'iyzipay-dotnet/Iyzipay.Tests/Functional/CardManagementRetrieveCardTest.cs'\n:using Iyzipay.Model;\nusing Iyzipay.Request;\nusing Iyzipay.Tests.Functional;\nusing Iyzipay.Tests.Functional.Builder.Request;\nusing NUnit.Framework;\nusing System.Threading.Tasks;\n\nnamespace Iyzipay.Tests.Functional\n{\n    public class CardManagementRetrieveCardTest : BaseTest\n    {\n        [SetUp]\n        public void SetUp()\n        {\n            Initialize();\n            _options.BaseUrl = \"https:\n        }\n\n        [Test]\n        public async Task Should_Retrieve_CardsAsync()\n        {\n            CreateCardManagementPageInitializeRequest initializeRequest = CardManagementPageRequestBuilder.Create().Build();\n            CardManagementPageInitialize cardManagementPageInitialize = CardManagementPageInitialize.Create(initializeRequest, _options);\n\n            RetrieveCardManagementPageCardRequest retrieveCardRequest = CardManagementRetrieveCardBuilder.Create()\n                .PageToken(cardManagementPageInitialize.Token)\n                .Build();\n\n            CardManagementPageCard cardManagementPageCard = CardManagementPageCard.Retrieve(retrieveCardRequest, _options);\n            PrintResponse(cardManagementPageCard);\n\n            Assert.AreEqual(Status.SUCCESS.ToString(), cardManagementPageCard.Status);\n            Assert.AreEqual(Locale.TR.ToString(), cardManagementPageCard.Locale);\n            Assert.Null(cardManagementPageCard.ErrorMessage);\n            Assert.NotNull(cardManagementPageCard);\n        }\n\n        [Test]\n        public void Should_Not_Retrieve_Cards_When_PageToken_Is_Not_Exist()\n        {\n            RetrieveCardManagementPageCardRequest retrieveCardRequest = CardManagementRetrieveCardBuilder.Create()\n                .PageToken(\"pagetoken\")\n                .Build();\n\n            CardManagementPageCard cardManagementPageCard = CardManagementPageCard.Retrieve(retrieveCardRequest, _options);\n            PrintResponse(cardManagementPageCard);\n\n            Assert.AreEqual(Status.FAILURE.ToString(), cardManagementPageCard.Status);\n            Assert.AreEqual(\"Geçersiz token\",cardManagementPageCard.ErrorMessage);\n        }\n    }\n}",
        "gt": [
            "'iyzipay-dotnet/Iyzipay/Request/RetrieveCardManagementPageCardRequest.cs'",
            "'iyzipay-dotnet/Iyzipay.Tests/Functional/IyziLinkTest.cs'",
            "'iyzipay-dotnet/Iyzipay.Tests/Functional/CardManagementRetrieveCardTest.cs'"
        ]
    },
    {
        "files": [
            "'MultiTenancyServer/src/Core/Configuration/TenancyBuilder.cs'",
            "'MultiTenancyServer/src/EFCore/Extensions/TenancyBuilderExtensions.cs'",
            "'MultiTenancyServer/src/Core/Services/ITenantValidator.cs'"
        ],
        "content": "'MultiTenancyServer/src/Core/Configuration/TenancyBuilder.cs'\n:﻿\n\n\nusing System;\nusing Microsoft.Extensions.DependencyInjection;\nusing MultiTenancyServer.Services;\nusing MultiTenancyServer.Stores;\n\nnamespace MultiTenancyServer.Configuration.DependencyInjection\n{\n\n\n\n\n\n    public class TenancyBuilder<TTenant, TKey>\n        where TTenant : class\n        where TKey : IEquatable<TKey>\n    {\n\n\n\n\n        public TenancyBuilder(IServiceCollection services)\n        {\n            Services = services;\n        }\n\n\n\n\n\n\n\n        public IServiceCollection Services { get; private set; }\n\n\n\n\n\n\n        public virtual TenancyBuilder<TTenant, TKey> AddTenantValidator<TValidator>()\n            where TValidator : class, ITenantValidator<TTenant>\n        {\n            Services.AddScoped<ITenantValidator<TTenant>, TValidator>();\n            return this;\n        }\n\n\n\n\n\n\n        public virtual TenancyBuilder<TTenant, TKey> AddTenantValidator<TValidator>(Func<IServiceProvider, TValidator> validatorFactory)\n            where TValidator : class, ITenantValidator<TTenant>\n        {\n            Services.AddScoped<ITenantValidator<TTenant>, TValidator>(validatorFactory);\n            return this;\n        }\n\n\n\n\n\n\n        public virtual TenancyBuilder<TTenant, TKey> AddErrorDescriber<TDescriber>()\n            where TDescriber : TenancyErrorDescriber\n        {\n            Services.AddScoped<TenancyErrorDescriber, TDescriber>();\n            return this;\n        }\n\n\n\n\n\n\n        public virtual TenancyBuilder<TTenant, TKey> AddErrorDescriber<TDescriber>(Func<IServiceProvider, TDescriber> describerFactory)\n            where TDescriber : TenancyErrorDescriber\n        {\n            Services.AddScoped<TenancyErrorDescriber, TDescriber>(describerFactory);\n            return this;\n        }\n\n\n\n\n\n\n        public virtual TenancyBuilder<TTenant, TKey> AddTenantStore<TStore>()\n            where TStore : class, ITenantStore<TTenant>\n        {\n            Services.AddScoped<ITenantStore<TTenant>, TStore>();\n            return this;\n        }\n\n\n\n\n\n\n        public virtual TenancyBuilder<TTenant, TKey> AddTenantStore<TStore>(Func<IServiceProvider, TStore> storeFactory)\n            where TStore : class, ITenantStore<TTenant>\n        {\n            Services.AddScoped<ITenantStore<TTenant>, TStore>(storeFactory);\n            return this;\n        }\n\n\n\n\n\n\n        public virtual TenancyBuilder<TTenant, TKey> AddTenantManager<TManager>()\n            where TManager : TenantManager<TTenant>\n        {\n            Services.AddScoped<TenantManager<TTenant>, TManager>();\n            return this;\n        }\n\n\n\n\n\n\n        public virtual TenancyBuilder<TTenant, TKey> AddTenantManager<TManager>(Func<IServiceProvider, TManager> managerFactory)\n            where TManager : TenantManager<TTenant>\n        {\n            Services.AddScoped<TenantManager<TTenant>, TManager>(managerFactory);\n            return this;\n        }\n\n\n\n\n\n\n        public virtual TenancyBuilder<TTenant, TKey> AddTenancyProvider<TProvider>()\n            where TProvider : class, ITenancyProvider<TTenant>\n        {\n            Services.AddScoped<ITenancyProvider<TTenant>, TProvider>();\n            return this;\n        }\n\n\n\n\n\n\n        public virtual TenancyBuilder<TTenant, TKey> AddTenancyProvider<TProvider>(Func<IServiceProvider, TProvider> providerFactory)\n            where TProvider : class, ITenancyProvider<TTenant>\n        {\n            Services.AddScoped<ITenancyProvider<TTenant>, TProvider>(providerFactory);\n            return this;\n        }\n\n\n\n\n\n\n        public virtual TenancyBuilder<TTenant, TKey> AddTenancyContext<TContext>()\n            where TContext : class, ITenancyContext<TTenant>\n        {\n            Services.AddScoped<ITenancyContext<TTenant>, TContext>();\n            return this;\n        }\n\n\n\n\n\n\n        public virtual TenancyBuilder<TTenant, TKey> AddTenancyContext<TContext>(Func<IServiceProvider, TContext> contextFactory)\n            where TContext : class, ITenancyContext<TTenant>\n        {\n            Services.AddScoped<ITenancyContext<TTenant>, TContext>(contextFactory);\n            return this;\n        }\n    }\n}\n\n'MultiTenancyServer/src/EFCore/Extensions/TenancyBuilderExtensions.cs'\n:﻿\n\n\nusing System;\nusing System.Reflection;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.DependencyInjection.Extensions;\nusing Microsoft.Extensions.Logging;\nusing MultiTenancyServer;\nusing MultiTenancyServer.Configuration.DependencyInjection;\nusing MultiTenancyServer.EntityFramework;\nusing MultiTenancyServer.Stores;\n\nnamespace Microsoft.Extensions.DependencyInjection\n{\n\n\n\n    public static class TenancyBuilderExtensions\n    {\n\n\n\n\n\n\n        public static TenancyBuilder<TTenant, TKey> AddEntityFrameworkStore<TContext, TTenant, TKey>(\n            this TenancyBuilder<TTenant, TKey> builder,\n            Func<IServiceProvider, TContext> contextFactory = null)\n            where TContext : DbContext, ITenantDbContext<TTenant, TKey>\n            where TTenant : TenancyTenant<TKey>\n            where TKey : IEquatable<TKey>\n        {\n            if (contextFactory != null)\n            {\n                builder.Services.TryAddScoped<ITenantStore<TTenant>>(sp =>\n                    new TenantStore<TTenant, TContext, TKey>(\n                        contextFactory(sp),\n                        sp.GetRequiredService<ILogger<TenantStore<TTenant, TContext, TKey>>>(),\n                        sp.GetService<TenancyErrorDescriber>()));\n            }\n            else\n            {\n                builder.Services.TryAddScoped<ITenantStore<TTenant>, TenantStore<TTenant, TContext, TKey>>();\n            }\n\n            return builder;\n        }\n\n        private static TypeInfo FindGenericBaseType(Type currentType, Type genericBaseType)\n        {\n            var type = currentType;\n\n            while (type != null)\n            {\n                var typeInfo = type.GetTypeInfo();\n                var genericType = type.IsGenericType ? type.GetGenericTypeDefinition() : null;\n\n                if (genericType != null && genericType == genericBaseType)\n                {\n                    return typeInfo;\n                }\n\n                type = type.BaseType;\n            }\n\n            return null;\n        }\n    }\n}\n\n'MultiTenancyServer/src/Core/Services/ITenantValidator.cs'\n:﻿\n\n\nusing System.Threading.Tasks;\n\nnamespace MultiTenancyServer.Services\n{\n\n\n\n\n    public interface ITenantValidator<TTenant>\n        where TTenant : class\n    {\n\n\n\n\n\n\n        ValueTask<TenancyResult> ValidateAsync(TenantManager<TTenant> manager, TTenant tenant);\n    }\n}\n",
        "gt": [
            "'MultiTenancyServer/src/Core/Services/ITenantValidator.cs'",
            "'MultiTenancyServer/src/Core/Configuration/TenancyBuilder.cs'",
            "'MultiTenancyServer/src/EFCore/Extensions/TenancyBuilderExtensions.cs'"
        ]
    },
    {
        "files": [
            "'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Hud/HudMediator.cs'",
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Operators/Wait.cs'",
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Observable.ErrorHandling.cs'"
        ],
        "content": "'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Hud/HudMediator.cs'\n:﻿using System;\nusing PG.Core.Contexts;\nusing PG.IdleMiner.Models.MediatorModels;\nusing PG.IdleMiner.Models.RemoteDataModels;\nusing PG.IdleMiner.Views.Hud;\nusing UniRx;\nusing Zenject;\n\nnamespace PG.IdleMiner.view\n{\n    public partial class HudMediator : StateMachineMediator\n    {\n        [Inject] private readonly HudView _view;\n\n        [Inject] private readonly HudModel _hudModel;\n        [Inject] private readonly RemoteDataModel _remoteDataModel;\n\n        public HudMediator()\n        {\n            Disposables = new CompositeDisposable();\n        }\n\n        public override void Initialize()\n        {\n            base.Initialize();\n\n            StateBehaviours.Add((int)HudModel.EHudState.StartupScreen, new HudStateStartup(this));\n\n            _remoteDataModel.IdleCash.Subscribe(OnIdleCashUpdate).AddTo(Disposables);\n            _remoteDataModel.Cash.Subscribe(OnCashUpdate).AddTo(Disposables);\n            _remoteDataModel.SuperCash.Subscribe(OnSuperCashUpdate).AddTo(Disposables);\n\n            _hudModel.HudState.Subscribe(OnHudStateChanged).AddTo(Disposables);\n        }\n\n        private void OnIdleCashUpdate(double idleCash)\n        {\n            _view._idleCashWidget.SetData(idleCash, idleCash);\n        }\n\n        private void OnCashUpdate(double cash)\n        {\n            _view._cashWidget.SetData(cash, cash);\n        }\n\n        private void OnSuperCashUpdate(double superCash)\n        {\n            _view._superCashWidget.SetData(superCash, superCash);\n        }\n\n        private void OnHudStateChanged(HudModel.EHudState hudState)\n        {\n            GoToState((int)hudState);\n        }\n    }\n}\n\n\n'Idle-Miner/Assets/Plugins/UniRx/Scripts/Operators/Wait.cs'\n:﻿using System;\nusing UniRx.InternalUtil;\n\nnamespace UniRx.Operators\n{\n    internal class Wait<T> : IObserver<T>\n    {\n        static readonly TimeSpan InfiniteTimeSpan = new TimeSpan(0, 0, 0, 0, -1);\n\n        readonly IObservable<T> source;\n        readonly TimeSpan timeout;\n\n        System.Threading.ManualResetEvent semaphore;\n\n        bool seenValue = false;\n        T value = default(T);\n        Exception ex = default(Exception);\n\n        public Wait(IObservable<T> source, TimeSpan timeout)\n        {\n            this.source = source;\n            this.timeout = timeout;\n        }\n\n        public T Run()\n        {\n            semaphore = new System.Threading.ManualResetEvent(false);\n            using (source.Subscribe(this))\n            {\n                var waitComplete = (timeout == InfiniteTimeSpan)\n                    ? semaphore.WaitOne()\n                    : semaphore.WaitOne(timeout);\n\n                if (!waitComplete)\n                {\n                    throw new TimeoutException(\"OnCompleted not fired.\");\n                }\n            }\n\n            if (ex != null) ex.Throw();\n            if (!seenValue) throw new InvalidOperationException(\"No Elements.\");\n\n            return value;\n        }\n\n        public void OnNext(T value)\n        {\n            seenValue = true;\n            this.value = value;\n        }\n\n        public void OnError(Exception error)\n        {\n            this.ex = error;\n            semaphore.Set();\n        }\n\n        public void OnCompleted()\n        {\n            semaphore.Set();\n        }\n    }\n}\n'Idle-Miner/Assets/Plugins/UniRx/Scripts/Observable.ErrorHandling.cs'\n:﻿using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UniRx.Operators;\n\nnamespace UniRx\n{\n    public static partial class Observable\n    {\n        public static IObservable<T> Finally<T>(this IObservable<T> source, Action finallyAction)\n        {\n            return new FinallyObservable<T>(source, finallyAction);\n        }\n\n        public static IObservable<T> Catch<T, TException>(this IObservable<T> source, Func<TException, IObservable<T>> errorHandler)\n            where TException : Exception\n        {\n            return new CatchObservable<T, TException>(source, errorHandler);\n        }\n\n        public static IObservable<TSource> Catch<TSource>(this IEnumerable<IObservable<TSource>> sources)\n        {\n            return new CatchObservable<TSource>(sources);\n        }\n\n\n        public static IObservable<TSource> CatchIgnore<TSource>(this IObservable<TSource> source)\n        {\n            return source.Catch<TSource, Exception>(Stubs.CatchIgnore<TSource>);\n        }\n\n\n        public static IObservable<TSource> CatchIgnore<TSource, TException>(this IObservable<TSource> source, Action<TException> errorAction)\n            where TException : Exception\n        {\n            var result = source.Catch((TException ex) =>\n            {\n                errorAction(ex);\n                return Observable.Empty<TSource>();\n            });\n            return result;\n        }\n\n        public static IObservable<TSource> Retry<TSource>(this IObservable<TSource> source)\n        {\n            return RepeatInfinite(source).Catch();\n        }\n\n        public static IObservable<TSource> Retry<TSource>(this IObservable<TSource> source, int retryCount)\n        {\n            return System.Linq.Enumerable.Repeat(source, retryCount).Catch();\n        }\n\n\n\n\n\n        public static IObservable<TSource> OnErrorRetry<TSource>(\n            this IObservable<TSource> source)\n        {\n            var result = source.Retry();\n            return result;\n        }\n\n\n\n\n        public static IObservable<TSource> OnErrorRetry<TSource, TException>(\n            this IObservable<TSource> source, Action<TException> onError)\n            where TException : Exception\n        {\n            return source.OnErrorRetry(onError, TimeSpan.Zero);\n        }\n\n\n\n\n        public static IObservable<TSource> OnErrorRetry<TSource, TException>(\n            this IObservable<TSource> source, Action<TException> onError, TimeSpan delay)\n            where TException : Exception\n        {\n            return source.OnErrorRetry(onError, int.MaxValue, delay);\n        }\n\n\n\n\n        public static IObservable<TSource> OnErrorRetry<TSource, TException>(\n            this IObservable<TSource> source, Action<TException> onError, int retryCount)\n            where TException : Exception\n        {\n            return source.OnErrorRetry(onError, retryCount, TimeSpan.Zero);\n        }\n\n\n\n\n        public static IObservable<TSource> OnErrorRetry<TSource, TException>(\n            this IObservable<TSource> source, Action<TException> onError, int retryCount, TimeSpan delay)\n            where TException : Exception\n        {\n            return source.OnErrorRetry(onError, retryCount, delay, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n\n\n\n        public static IObservable<TSource> OnErrorRetry<TSource, TException>(\n            this IObservable<TSource> source, Action<TException> onError, int retryCount, TimeSpan delay, IScheduler delayScheduler)\n            where TException : Exception\n        {\n            var result = Observable.Defer(() =>\n            {\n                var dueTime = (delay.Ticks < 0) ? TimeSpan.Zero : delay;\n                var count = 0;\n\n                IObservable<TSource> self = null;\n                self = source.Catch((TException ex) =>\n                {\n                    onError(ex);\n\n                    return (++count < retryCount)\n                        ? (dueTime == TimeSpan.Zero)\n                            ? self.SubscribeOn(Scheduler.CurrentThread)\n                            : self.DelaySubscription(dueTime, delayScheduler).SubscribeOn(Scheduler.CurrentThread)\n                        : Observable.Throw<TSource>(ex);\n                });\n                return self;\n            });\n\n            return result;\n        }\n    }\n}",
        "gt": [
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Operators/Wait.cs'",
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Observable.ErrorHandling.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Hud/HudMediator.cs'"
        ]
    },
    {
        "files": [
            "'dotnetlabs/MiscLabs/ChainOfResponsibility/UserRegistration/Handlers/UserValidation/AgeValidationHandler.cs'",
            "'dotnetlabs/MiscLabs/ChainOfResponsibility/UserRegistration/Models/User.cs'",
            "'dotnetlabs/MiscLabs/ChainOfResponsibility/UserRegistration/Exceptions/UserValidationException.cs'"
        ],
        "content": "'dotnetlabs/MiscLabs/ChainOfResponsibility/UserRegistration/Handlers/UserValidation/AgeValidationHandler.cs'\n:﻿using UserRegistration.Exceptions;\nusing UserRegistration.Models;\n\nnamespace UserRegistration.Handlers.UserValidation\n{\n    public class AgeValidationHandler : Handler<User>\n    {\n        public override void Handle(User user)\n        {\n            if (user.Age < 18)\n            {\n                throw new UserValidationException(\"You have to be 18 years or older\");\n            }\n\n            base.Handle(user);\n        }\n    }\n}\n\n'dotnetlabs/MiscLabs/ChainOfResponsibility/UserRegistration/Models/User.cs'\n:﻿using System;\nusing UserRegistration.Exceptions;\nusing UserRegistration.Handlers.UserValidation;\n\nnamespace UserRegistration.Models\n{\n    public class User\n    {\n        public string Name { get; }\n        public DateTime DateOfBirth { get; }\n        public string Department { get; }\n\n        public int Age\n        {\n            get\n            {\n                var today = DateTime.Today;\n                var age = today.Year - DateOfBirth.Year;\n                if (DateOfBirth.Date > today.AddYears(-age)) age--;\n                return age;\n            }\n        }\n\n        public User(string name, string department, DateTime dateOfBirth)\n        {\n            Name = name;\n            DateOfBirth = dateOfBirth;\n            Department = department;\n        }\n\n        public bool Register()\n        {\n            try\n            {\n                var handler = new AgeValidationHandler();\n                handler.SetNext(new NameValidationHandler())\n                    .SetNext(new DepartmentValidationHandler());\n                handler.Handle(this);\n            }\n            catch (UserValidationException)\n            {\n                return false;\n            }\n\n            return true;\n        }\n    }\n}\n\n'dotnetlabs/MiscLabs/ChainOfResponsibility/UserRegistration/Exceptions/UserValidationException.cs'\n:﻿using System;\n\nnamespace UserRegistration.Exceptions\n{\n    [Serializable]\n    public class UserValidationException : ArgumentException\n    {\n        public UserValidationException(string message) : base(message)\n        {\n\n        }\n    }\n}\n",
        "gt": [
            "'dotnetlabs/MiscLabs/ChainOfResponsibility/UserRegistration/Exceptions/UserValidationException.cs'",
            "'dotnetlabs/MiscLabs/ChainOfResponsibility/UserRegistration/Models/User.cs'",
            "'dotnetlabs/MiscLabs/ChainOfResponsibility/UserRegistration/Handlers/UserValidation/AgeValidationHandler.cs'"
        ]
    },
    {
        "files": [
            "'ETCore/ETServer/Server/ET.Core/Module/Message/Network/WebSocket/WService.cs'",
            "'ETCore/ETServer/Server/Hotfix/Handler/M2M_TrasferUnitRequest.cs'",
            "'ETCore/ETClient/Unity/Assets/ETFramework/ETCore/Module/Message/OuterOpcode.cs'"
        ],
        "content": "'ETCore/ETServer/Server/ET.Core/Module/Message/Network/WebSocket/WService.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.WebSockets;\nusing Microsoft.IO;\n\nnamespace ETModel\n{\n    public class WService: AService\n    {\n        private readonly HttpListener httpListener;\n\n        private readonly Dictionary<long, WChannel> channels = new Dictionary<long, WChannel>();\n\n        public RecyclableMemoryStreamManager MemoryStreamManager = new RecyclableMemoryStreamManager();\n\n        public WService(IEnumerable<string> prefixs, Action<AChannel> acceptCallback)\n        {\n            this.AcceptCallback += acceptCallback;\n\n            this.httpListener = new HttpListener();\n\n            StartAccept(prefixs).Coroutine();\n        }\n\n        public WService()\n        {\n        }\n\n        public override AChannel GetChannel(long id)\n        {\n            WChannel channel;\n            this.channels.TryGetValue(id, out channel);\n            return channel;\n        }\n\n        public override AChannel ConnectChannel(IPEndPoint ipEndPoint)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override AChannel ConnectChannel(string address)\n        {\n\t\t\tClientWebSocket webSocket = new ClientWebSocket();\n            WChannel channel = new WChannel(webSocket, this);\n            this.channels[channel.Id] = channel;\n            channel.ConnectAsync(address).Coroutine();\n            return channel;\n        }\n\n        public override void Remove(long id)\n        {\n            WChannel channel;\n            if (!this.channels.TryGetValue(id, out channel))\n            {\n                return;\n            }\n\n            this.channels.Remove(id);\n            channel.Dispose();\n        }\n\n        public override void Update()\n        {\n\n        }\n\n        public async ETVoid StartAccept(IEnumerable<string> prefixs)\n        {\n            try\n            {\n                foreach (string prefix in prefixs)\n                {\n                    this.httpListener.Prefixes.Add(prefix);\n                }\n\n                httpListener.Start();\n\n                while (true)\n                {\n                    try\n                    {\n                        HttpListenerContext httpListenerContext = await this.httpListener.GetContextAsync();\n\n                        HttpListenerWebSocketContext webSocketContext = await httpListenerContext.AcceptWebSocketAsync(null);\n\n                        WChannel channel = new WChannel(webSocketContext, this);\n\n                        this.channels[channel.Id] = channel;\n\n                        this.OnAccept(channel);\n                    }\n                    catch (Exception e)\n                    {\n                        Log.Error(e);\n                    }\n                }\n            }\n            catch (HttpListenerException e)\n            {\n                if (e.ErrorCode == 5)\n                {\n                    throw new Exception($\"CMD管理员中输入: netsh http add urlacl url=http:\n                }\n\n                Log.Error(e);\n            }\n            catch (Exception e)\n            {\n                Log.Error(e);\n            }\n        }\n    }\n}\n'ETCore/ETServer/Server/Hotfix/Handler/M2M_TrasferUnitRequest.cs'\n:﻿using System;\nusing ETModel;\n\nnamespace ETHotfix\n{\n\t[MessageHandler(AppType.Map)]\n\tpublic class M2M_TrasferUnitRequestHandler : AMRpcHandler<M2M_TrasferUnitRequest, M2M_TrasferUnitResponse>\n\t{\n\t\tprotected override async ETTask Run(Session session, M2M_TrasferUnitRequest request, M2M_TrasferUnitResponse response, Action reply)\n\t\t{\n\t\t\tUnit unit = request.Unit;\n\n\t\t\tGame.EventSystem.Add(unit);\n\t\t\tLog.Debug(MongoHelper.ToJson(request.Unit));\n\n\t\t\tunit.AddComponent<MailBoxComponent>();\n\t\t\tGame.Scene.GetComponent<UnitComponent>().Add(unit);\n\t\t\tresponse.InstanceId = unit.InstanceId;\n\t\t\treply();\n\t\t\tawait ETTask.CompletedTask;\n\t\t}\n\t}\n}\n'ETCore/ETClient/Unity/Assets/ETFramework/ETCore/Module/Message/OuterOpcode.cs'\n:using ETModel;\nnamespace ETModel\n{\n\t[Message(OuterOpcode.C2M_TestRequest)]\n\tpublic partial class C2M_TestRequest : IActorLocationRequest {}\n\n\t[Message(OuterOpcode.M2C_TestResponse)]\n\tpublic partial class M2C_TestResponse : IActorLocationResponse {}\n\n\t[Message(OuterOpcode.Actor_TransferRequest)]\n\tpublic partial class Actor_TransferRequest : IActorLocationRequest {}\n\n\t[Message(OuterOpcode.Actor_TransferResponse)]\n\tpublic partial class Actor_TransferResponse : IActorLocationResponse {}\n\n\t[Message(OuterOpcode.C2G_EnterMap)]\n\tpublic partial class C2G_EnterMap : IRequest {}\n\n\t[Message(OuterOpcode.G2C_EnterMap)]\n\tpublic partial class G2C_EnterMap : IResponse {}\n\n\n\n\t[Message(OuterOpcode.UnitInfo)]\n\tpublic partial class UnitInfo {}\n\n\t[Message(OuterOpcode.M2C_CreateUnits)]\n\tpublic partial class M2C_CreateUnits : IActorMessage {}\n\n\t[Message(OuterOpcode.M2C_PathfindingResult)]\n\tpublic partial class M2C_PathfindingResult : IActorMessage {}\n\n\t[Message(OuterOpcode.C2R_Ping)]\n\tpublic partial class C2R_Ping : IRequest {}\n\n\t[Message(OuterOpcode.R2C_Ping)]\n\tpublic partial class R2C_Ping : IResponse {}\n\n\t[Message(OuterOpcode.G2C_Test)]\n\tpublic partial class G2C_Test : IMessage {}\n\n\t[Message(OuterOpcode.C2M_Reload)]\n\tpublic partial class C2M_Reload : IRequest {}\n\n\t[Message(OuterOpcode.M2C_Reload)]\n\tpublic partial class M2C_Reload : IResponse {}\n\n}\nnamespace ETModel\n{\n\tpublic static partial class OuterOpcode\n\t{\n\t\t public const ushort C2M_TestRequest = 101;\n\t\t public const ushort M2C_TestResponse = 102;\n\t\t public const ushort Actor_TransferRequest = 103;\n\t\t public const ushort Actor_TransferResponse = 104;\n\t\t public const ushort C2G_EnterMap = 105;\n\t\t public const ushort G2C_EnterMap = 106;\n\t\t public const ushort UnitInfo = 107;\n\t\t public const ushort M2C_CreateUnits = 108;\n\t\t public const ushort M2C_PathfindingResult = 109;\n\t\t public const ushort C2R_Ping = 110;\n\t\t public const ushort R2C_Ping = 111;\n\t\t public const ushort G2C_Test = 112;\n\t\t public const ushort C2M_Reload = 113;\n\t\t public const ushort M2C_Reload = 114;\n\t}\n}\n",
        "gt": [
            "'ETCore/ETServer/Server/ET.Core/Module/Message/Network/WebSocket/WService.cs'",
            "'ETCore/ETClient/Unity/Assets/ETFramework/ETCore/Module/Message/OuterOpcode.cs'",
            "'ETCore/ETServer/Server/Hotfix/Handler/M2M_TrasferUnitRequest.cs'"
        ]
    },
    {
        "files": [
            "'functional-csharp-code/Examples/Startup.cs'",
            "'functional-csharp-code/Examples/Chapter07/DbQueries/ConnectionString.cs'",
            "'functional-csharp-code/Examples/Chapter07/Boc/FP/ControllerActivator.cs'"
        ],
        "content": "'functional-csharp-code/Examples/Startup.cs'\n:﻿using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Mvc.Controllers;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing Boc.Chapter7.Delegate;\nusing Microsoft.AspNetCore.Routing;\nusing Microsoft.AspNetCore.Http;\nusing System.IO;\nusing System;\nusing System.Threading.Tasks;\nusing Boc.Commands;\nusing Microsoft.AspNetCore.Mvc;\n\nusing LaYumba.Functional;\n\nnamespace Boc\n{\n   public class ConnectionStrings\n   {\n      public string Default { get; set; }\n   }\n\n   public class Startup\n   {\n      public Startup(IHostingEnvironment env)\n      {\n         var builder = new ConfigurationBuilder()\n             .SetBasePath(env.ContentRootPath)\n             .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\n             .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n             .AddEnvironmentVariables();\n         Configuration = builder.Build();\n      }\n\n      string DefaultApiRoot => \"localhost:8000/api\";\n      string GetApiRoot(IConfigurationRoot config)\n         => config.Lookup(\"ApiRoot\").GetOrElse(\"localhost\");\n\n      public IConfigurationRoot Configuration { get; }\n\n\n      public void ConfigureServices(IServiceCollection services)\n      {\n         services.AddMvc();\n         services.AddLogging();\n\n\n         services.AddOptions();\n         services.Configure<ConnectionStrings>(Configuration.GetSection(\"ConnectionStrings\"));\n\n\n         var ctrlActivator = new ControllerActivator(Configuration);\n         services.AddSingleton<IControllerActivator>(ctrlActivator);\n         services.AddSingleton<ControllerActivator>(ctrlActivator);\n\n         services.AddSwaggerGen();\n\n\n\n\n\n\n\n\n\n\n\n      }\n\n\n      public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory, ControllerActivator ctrlActivator)\n      {\n         ctrlActivator.loggerFactory = loggerFactory;\n\n         loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n         loggerFactory.AddDebug();\n\n\n\n\n\n\n\n\n\n\n\n\n         var useCases = new UseCaseFactory(Configuration, loggerFactory);\n\n\n\n         app.Map(\"/api/transferOn\", a => a.Run(async ctx =>\n         {\n            BookTransfer transfer = await Parse<BookTransfer>(ctx.Request.Body);\n            IActionResult result = useCases.PersistTransferOn()(transfer);\n            await WriteResponse(ctx.Response, result);\n         }));\n\n         app.UseMvcWithDefaultRoute();\n\n         app.UseSwagger();\n         app.UseSwaggerUi();\n      }\n\n      private Task WriteResponse(HttpResponse response, IActionResult result)\n      {\n         throw new NotImplementedException();\n      }\n\n      private Task<T> Parse<T>(Object body)\n      {\n         throw new NotImplementedException();\n      }\n   }\n}\n\n'functional-csharp-code/Examples/Chapter07/DbQueries/ConnectionString.cs'\n:namespace Examples\n{\n   public class ConnectionString\n   {\n      string Value { get; }\n      public ConnectionString(string value) { Value = value; }\n\n      public static implicit operator string(ConnectionString c)\n         => c.Value;\n      public static implicit operator ConnectionString(string s)\n         => new ConnectionString(s);\n\n      public override string ToString() => Value;\n   }\n}\n\n'functional-csharp-code/Examples/Chapter07/Boc/FP/ControllerActivator.cs'\n:﻿using Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Controllers;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.AspNetCore.Mvc.Internal;\nusing System;\nusing Microsoft.Extensions.Configuration;\nusing System.Linq;\nusing Boc.Commands;\nusing LaYumba.Functional;\nusing System.Collections.Generic;\nusing Examples;\nusing Boc.Chapter7.FunctionsEverywhere;\n\nnamespace Boc.Chapter7.Delegate\n{\n   public class ControllerActivator : IControllerActivator\n   {\n      internal ILoggerFactory loggerFactory { get; set; }\n      DefaultControllerActivator defaultActivator;\n      TypeActivatorCache typeActivatorCache;\n      IConfigurationRoot configuration;\n\n      public ControllerActivator(IConfigurationRoot configuration)\n      {\n         typeActivatorCache = new TypeActivatorCache();\n         defaultActivator = new DefaultControllerActivator(typeActivatorCache);\n         this.configuration = configuration;\n      }\n\n      public object Create(ControllerContext context)\n      {\n         var type = context.ActionDescriptor.ControllerTypeInfo;\n         if (type.AsType().Equals(typeof(BookTransferController_FunctionDependencies)))\n            return ConfigureTransferOnsController(context.HttpContext.RequestServices);\n\n         return defaultActivator.Create(context);\n      }\n\n      BookTransferController_FunctionDependencies ConfigureTransferOnsController(IServiceProvider serviceProvider)\n      {\n         ConnectionString connString = configuration.GetSection(\"ConnectionString\").Value;\n         var save = Sql.TryExecute.Apply(connString).Apply(Sql.Queries.InsertTransferOn);\n\n         var validate = Validation.DateNotPast(() => DateTime.UtcNow);\n\n\n         return new BookTransferController_FunctionDependencies(validate, save);\n      }\n\n      public void Release(ControllerContext context, object controller)\n      {\n         var disposable = controller as IDisposable;\n         if (disposable != null) disposable.Dispose();\n      }\n   }\n\n   public class UseCaseFactory\n   {\n      ILoggerFactory loggerFactory;\n      IConfigurationRoot configuration;\n\n      public UseCaseFactory(IConfigurationRoot configuration\n         , ILoggerFactory loggerFactory)\n      {\n         this.loggerFactory = loggerFactory;\n         this.configuration = configuration;\n      }\n\n\n\n\n\n\n\n      public Func<BookTransfer, IActionResult> PersistTransferOn()\n      {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n         throw new NotImplementedException();\n      }\n\n      public void Release(ControllerContext context, object controller)\n      {\n         var disposable = controller as IDisposable;\n         if (disposable != null) disposable.Dispose();\n      }\n   }\n}\n",
        "gt": [
            "'functional-csharp-code/Examples/Chapter07/DbQueries/ConnectionString.cs'",
            "'functional-csharp-code/Examples/Chapter07/Boc/FP/ControllerActivator.cs'",
            "'functional-csharp-code/Examples/Startup.cs'"
        ]
    },
    {
        "files": [
            "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'",
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/Partial/CCutsceneTemplate.cs'",
            "'WolvenKit-7/WolvenKit/FlowTreeEditors/Quest/QuestPhaseInputEditor.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/Program.cs'"
        ],
        "content": "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'\n:﻿using System.Linq;\nusing System.Xml.Linq;\nusing WolvenKit;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit.Nvidia.HairWorks\n{\n    class NvHairAssetDescriptor\n    {\n\n        public string checksum = \"0x299b335f 0x2cad8b54 0xcaf3c98f 0xa3094fa7\";\n\n        public XElement serialize(CFurMeshResource chunk)\n        {\n\n\n            var ret = NvidiaXML.CreateStructHeader(\"\", \"Ref\", \"HairSceneDescriptor\", \"1.0\", checksum);\n            ret.AddNvValue(\"numGuideHairs\", \"U32\", chunk.BoneIndices.Count.ToString());\n            ret.AddNvValue(\"numVertices\",\"U32\", chunk.Positions.Count.ToString());\n            ret.AddNvArray(\"vertices\",\"Vec3\",\"\",Apex.FormatCoordinateArray(chunk.Positions));\n            var endindicies = chunk.EndIndices;\n            ret.AddNvArray(\"endIndices\",\"U32\",endindicies.Count.ToString(),endindicies.Aggregate(\"\",(c,n) => c += \" \" + n));\n            ret.AddNvValue(\"numFaces\",\"U32\",\"\");\n            var faceIndices = chunk.FaceIndices;\n            ret.AddNvArray(\"faceIndices\",\"U32\",faceIndices.Count.ToString(),faceIndices.Aggregate(\"\",(c,n) => c += \" \" + n));\n            ret.AddNvArray(\"faceUVs\",\"Vec2\",\"\",\"\");\n            ret.AddNvValue(\"numBones\", \"U32\", chunk.BoneCount.ToString());\n            ret.AddNvArray(\"boneIndices\",\"Vec4\",\"\",\"\");\n            ret.AddNvArray(\"boneWeights\",\"Vec4\",\"\",\"\");\n            ret.AddNvArray(\"boneNames\",\"U8\",\"\",\"\");\n            ret.AddNvArray(\"boneNameList\",\"String\",\"\",\"\");\n            ret.AddNvArray(\"bindPoses\",\"Mat44\",\"\",\"\");\n            ret.AddNvArray(\"boneParents\",\"I32\",\"\",\"\");\n            ret.AddNvValue(\"numBoneSpheres\",\"U32\",\"\");\n            ret.AddNvArray(\"boneSpheres\",\"Struct\",\"\",\"\");\n            ret.AddNvValue(\"numBoneCapsules\",\"U32\",\"\");\n            ret.AddNvArray(\"boneCapsuleIndices\",\"U32\",\"\",\"\");\n            ret.AddNvValue(\"numPinConstraints\",\"U32\",\"\");\n            ret.AddNvArray(\"pinConstraints\",\"Struct\",\"\",\"\");\n            ret.AddNvValue(\"sceneUnit\",\"F32\",\"\");\n            ret.AddNvValue(\"upAxis\",\"U32\",\"\");\n            ret.AddNvValue(\"handedness\",\"U32\",\"\");\n            return ret;\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.CR2W/Types/W3/Partial/CCutsceneTemplate.cs'\n:using System.IO;\nusing System.Runtime.Serialization;\nusing WolvenKit.CR2W.Reflection;\nusing FastMember;\nusing static WolvenKit.CR2W.Types.Enums;\n\n\nnamespace WolvenKit.CR2W.Types\n{\n\t[DataContract(Namespace = \"\")]\n\t[REDMeta]\n\tpublic partial class CCutsceneTemplate : CSkeletalAnimationSet\n\t{\n\t\t[Ordinal(1)] [RED(\"modifiers\", 2,0)] \t\tpublic CArray<CPtr<ICutsceneModifier>> Modifiers { get; set;}\n\n\t\t[Ordinal(2)] [RED(\"point\")] \t\tpublic TagList Point { get; set;}\n\n\t\t[Ordinal(3)] [RED(\"lastLevelLoaded\")] \t\tpublic CString LastLevelLoaded { get; set;}\n\n\t\t[Ordinal(4)] [RED(\"actorsDef\", 2,0)] \t\tpublic CArray<SCutsceneActorDef> ActorsDef { get; set;}\n\n\t\t[Ordinal(5)] [RED(\"isValid\")] \t\tpublic CBool IsValid { get; set;}\n\n\t\t[Ordinal(6)] [RED(\"fadeBefore\")] \t\tpublic CFloat FadeBefore { get; set;}\n\n\t\t[Ordinal(7)] [RED(\"fadeAfter\")] \t\tpublic CFloat FadeAfter { get; set;}\n\n\t\t[Ordinal(8)] [RED(\"cameraBlendInTime\")] \t\tpublic CFloat CameraBlendInTime { get; set;}\n\n\t\t[Ordinal(9)] [RED(\"cameraBlendOutTime\")] \t\tpublic CFloat CameraBlendOutTime { get; set;}\n\n\t\t[Ordinal(10)] [RED(\"blackscreenWhenLoading\")] \t\tpublic CBool BlackscreenWhenLoading { get; set;}\n\n\t\t[Ordinal(11)] [RED(\"checkActorsPosition\")] \t\tpublic CBool CheckActorsPosition { get; set;}\n\n\t\t[Ordinal(12)] [RED(\"entToHideTags\", 2,0)] \t\tpublic CArray<CName> EntToHideTags { get; set;}\n\n\t\t[Ordinal(13)] [RED(\"usedInFiles\", 2,0)] \t\tpublic CArray<CString> UsedInFiles { get; set;}\n\n\t\t[Ordinal(14)] [RED(\"resourcesToPreloadManually\", 2,0)] \t\tpublic CArray<CHandle<CResource>> ResourcesToPreloadManually { get; set;}\n\n\t\t[Ordinal(15)] [RED(\"resourcesToPreloadManuallyPaths\", 2,0)] \t\tpublic CArray<CString> ResourcesToPreloadManuallyPaths { get; set;}\n\n\t\t[Ordinal(16)] [RED(\"reverbName\")] \t\tpublic CString ReverbName { get; set;}\n\n\t\t[Ordinal(17)] [RED(\"burnedAudioTrackName\")] \t\tpublic StringAnsi BurnedAudioTrackName { get; set;}\n\n\t\t[Ordinal(18)] [RED(\"banksDependency\", 2,0)] \t\tpublic CArray<CName> BanksDependency { get; set;}\n\n\t\t[Ordinal(19)] [RED(\"streamable\")] \t\tpublic CBool Streamable { get; set;}\n\n\t\t[Ordinal(20)] [RED(\"effects\", 2,0)] \t\tpublic CArray<CPtr<CFXDefinition>> Effects { get; set;}\n\n\t\tpublic CCutsceneTemplate(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name){ }\n\n\t\tpublic static new CVariable Create(CR2WFile cr2w, CVariable parent, string name) => new CCutsceneTemplate(cr2w, parent, name);\n\n\t\tpublic override void Read(BinaryReader file, uint size) => base.Read(file, size);\n\n\t\tpublic override void Write(BinaryWriter file) => base.Write(file);\n\n\t}\n}\n'WolvenKit-7/WolvenKit/FlowTreeEditors/Quest/QuestPhaseInputEditor.cs'\n:using WolvenKit.CR2W;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit {\n    public class QuestPhaseInputEditor: QuestLinkEditor {\n\n    }\n}\n'WolvenKit-7/WolvenKit.Nvidia/Program.cs'\n:﻿using System;\nusing System.IO;\nusing WolvenKit.Nvidia.HairWorks;\nusing WolvenKit.CR2W;\n\nnamespace WolvenKit.Nvidia\n{\n    class Program\n    {\n\n        [STAThread]\n        static void Main(string[] args)\n        {\n            var br = new BinaryReader(new FileStream(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\hw.redfur\",FileMode.Open));\n            var redfur = new CR2WFile();\n            redfur.Read(br);\n            Apex.HairWorks.ConvertToApexXml(redfur).Save(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\out.apx\");\n            NvidiaXML.BreakXmlHeader(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\out.apx\");\n        }\n    }\n}\n",
        "gt": [
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/Partial/CCutsceneTemplate.cs'",
            "'WolvenKit-7/WolvenKit/FlowTreeEditors/Quest/QuestPhaseInputEditor.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/Program.cs'"
        ]
    },
    {
        "files": [
            "'xamarin-samples/TaskyProIntegrated/Tasky.Core/BL/Contracts/BusinessEntityBase.cs'",
            "'xamarin-samples/TaskyProIntegrated/Tasky.Core/BL/Task.cs'",
            "'xamarin-samples/TaskyProShared/TaskyAndroid/Adapters/TaskListAdapter.cs'"
        ],
        "content": "'xamarin-samples/TaskyProIntegrated/Tasky.Core/BL/Contracts/BusinessEntityBase.cs'\n:using System;\nusing Tasky.DL.SQLite;\n\nnamespace Tasky.BL.Contracts {\n\n\n\n\tpublic abstract class BusinessEntityBase : IBusinessEntity {\n\t\tpublic BusinessEntityBase ()\n\t\t{\n\t\t}\n\n\n\n\n\t\t[PrimaryKey, AutoIncrement]\n        public int ID { get; set; }\n\t}\n}\n\n\n'xamarin-samples/TaskyProIntegrated/Tasky.Core/BL/Task.cs'\n:using System;\nusing Tasky.BL.Contracts;\nusing Tasky.DL.SQLite;\n\nnamespace Tasky.BL\n{\n\n\n\n\tpublic class Task : IBusinessEntity\n\t{\n\t\tpublic Task ()\n\t\t{\n\t\t}\n\n\t\t[PrimaryKey, AutoIncrement]\n        public int ID { get; set; }\n\t\tpublic string Name { get; set; }\n\t\tpublic string Notes { get; set; }\n\n\t\tpublic bool Done { get; set; }\n\t}\n}\n\n\n'xamarin-samples/TaskyProShared/TaskyAndroid/Adapters/TaskListAdapter.cs'\n:using System;\nusing System.Collections.Generic;\nusing Android.Widget;\nusing Tasky.BL;\nusing Android.App;\nusing Android;\n\nnamespace TaskyAndroid.Adapters {\n\tpublic class TaskListAdapter : BaseAdapter<Task> {\n\t\tprotected Activity context = null;\n\t\tprotected IList<Task> tasks = new List<Task>();\n\n\t\tpublic TaskListAdapter (Activity context, IList<Task> tasks) : base ()\n\t\t{\n\t\t\tthis.context = context;\n\t\t\tthis.tasks = tasks;\n\t\t}\n\n\t\tpublic override Task this[int position]\n\t\t{\n\t\t\tget { return tasks[position]; }\n\t\t}\n\n\t\tpublic override long GetItemId (int position)\n\t\t{\n\t\t\treturn position;\n\t\t}\n\n\t\tpublic override int Count\n\t\t{\n\t\t\tget { return tasks.Count; }\n\t\t}\n\n\t\tpublic override Android.Views.View GetView (int position, Android.Views.View convertView, Android.Views.ViewGroup parent)\n\t\t{\n\n\t\t\tvar item = tasks[position];\n\n\n\n\n\t\t\tvar view = (convertView ??\n\t\t\t\t\tcontext.LayoutInflater.Inflate(\n\t\t\t\t\tAndroid.Resource.Layout.SimpleListItemChecked,\n\t\t\t\t\tparent,\n\t\t\t\t\tfalse)) as CheckedTextView;\n\n\t\t\tview.SetText (item.Name==\"\"?\"<new task>\":item.Name, TextView.BufferType.Normal);\n\t\t\tview.Checked = item.Done;\n\n\n\t\t\treturn view;\n\t\t}\n\t}\n}",
        "gt": [
            "'xamarin-samples/TaskyProIntegrated/Tasky.Core/BL/Contracts/BusinessEntityBase.cs'",
            "'xamarin-samples/TaskyProIntegrated/Tasky.Core/BL/Task.cs'",
            "'xamarin-samples/TaskyProShared/TaskyAndroid/Adapters/TaskListAdapter.cs'"
        ]
    },
    {
        "files": [
            "'Angular-Core-IdentityServer/IdentityApp/Controllers/HomeController.cs'",
            "'Angular-Core-IdentityServer/IdentityApp/Extensions/UrlHelperExtensions.cs'",
            "'Angular-Core-IdentityServer/IdentityApp/Quickstart/Consent/ConsentOptions.cs'"
        ],
        "content": "'Angular-Core-IdentityServer/IdentityApp/Controllers/HomeController.cs'\n:﻿using System.Threading.Tasks;\nusing Microsoft.AspNetCore.Mvc;\nusing IdentityServer4.Services;\nusing IdentityServer4.Quickstart.UI;\n\nnamespace IdentityApp.Controllers\n{\n    [SecurityHeaders]\n    public class HomeController : Controller\n    {\n        private readonly IIdentityServerInteractionService _interaction;\n\n        public HomeController(IIdentityServerInteractionService interaction)\n        {\n            _interaction = interaction;\n        }\n\n        public IActionResult Index()\n        {\n            return View();\n        }\n\n        public IActionResult About()\n        {\n            ViewData[\"Message\"] = \"Your application description page.\";\n\n            return View();\n        }\n\n        public IActionResult Contact()\n        {\n            ViewData[\"Message\"] = \"Your contact page.\";\n\n            return View();\n        }\n\n        public async Task<IActionResult> Error(string errorId)\n        {\n            var vm = new ErrorViewModel();\n\n\n            var message = await _interaction.GetErrorContextAsync(errorId);\n            if (message != null)\n            {\n                vm.Error = message;\n            }\n\n            return View(\"Error\", vm);\n        }\n    }\n}\n\n'Angular-Core-IdentityServer/IdentityApp/Extensions/UrlHelperExtensions.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing IdentityApp.Controllers;\n\nnamespace Microsoft.AspNetCore.Mvc\n{\n    public static class UrlHelperExtensions\n    {\n        public static string EmailConfirmationLink(this IUrlHelper urlHelper, string userId, string code, string scheme)\n        {\n            return urlHelper.Action(\n                action: nameof(AccountController.ConfirmEmail),\n                controller: \"Account\",\n                values: new { userId, code },\n                protocol: scheme);\n        }\n\n        public static string ResetPasswordCallbackLink(this IUrlHelper urlHelper, string userId, string code, string scheme)\n        {\n            return urlHelper.Action(\n                action: nameof(AccountController.ResetPassword),\n                controller: \"Account\",\n                values: new { userId, code },\n                protocol: scheme);\n        }\n    }\n}\n\n'Angular-Core-IdentityServer/IdentityApp/Quickstart/Consent/ConsentOptions.cs'\n:﻿\n\n\n\nnamespace IdentityServer4.Quickstart.UI\n{\n    public class ConsentOptions\n    {\n        public static bool EnableOfflineAccess = true;\n        public static string OfflineAccessDisplayName = \"Offline Access\";\n        public static string OfflineAccessDescription = \"Access to your applications and resources, even when you are offline\";\n\n        public static readonly string MustChooseOneErrorMessage = \"You must pick at least one permission\";\n        public static readonly string InvalidSelectionErrorMessage = \"Invalid selection\";\n    }\n}\n",
        "gt": [
            "'Angular-Core-IdentityServer/IdentityApp/Quickstart/Consent/ConsentOptions.cs'",
            "'Angular-Core-IdentityServer/IdentityApp/Controllers/HomeController.cs'",
            "'Angular-Core-IdentityServer/IdentityApp/Extensions/UrlHelperExtensions.cs'"
        ]
    },
    {
        "files": [
            "'onion-architecture-aspnetcore/OnionArchitecutre/Persistence/Repositories/OwnerRepository.cs'",
            "'onion-architecture-aspnetcore/OnionArchitecutre/Domain/Repositories/IAccountRepository.cs'",
            "'onion-architecture-aspnetcore/OnionArchitecutre/Web/Startup.cs'",
            "'onion-architecture-aspnetcore/OnionArchitecutre/Domain/Entities/Owner.cs'"
        ],
        "content": "'onion-architecture-aspnetcore/OnionArchitecutre/Persistence/Repositories/OwnerRepository.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Domain.Entities;\nusing Domain.Repositories;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Persistence.Repositories\n{\n    internal sealed class OwnerRepository : IOwnerRepository\n    {\n        private readonly RepositoryDbContext _dbContext;\n\n        public OwnerRepository(RepositoryDbContext dbContext) => _dbContext = dbContext;\n\n        public async Task<IEnumerable<Owner>> GetAllAsync(CancellationToken cancellationToken = default) =>\n            await _dbContext.Owners.Include(x => x.Accounts).ToListAsync(cancellationToken);\n\n        public async Task<Owner> GetByIdAsync(Guid ownerId, CancellationToken cancellationToken = default) =>\n            await _dbContext.Owners.Include(x => x.Accounts).FirstOrDefaultAsync(x => x.Id == ownerId, cancellationToken);\n\n        public void Insert(Owner owner) => _dbContext.Owners.Add(owner);\n\n        public void Remove(Owner owner) => _dbContext.Owners.Remove(owner);\n    }\n}\n\n'onion-architecture-aspnetcore/OnionArchitecutre/Domain/Repositories/IAccountRepository.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Domain.Entities;\n\nnamespace Domain.Repositories\n{\n    public interface IAccountRepository\n    {\n        Task<IEnumerable<Account>> GetAllByOwnerIdAsync(Guid ownerId, CancellationToken cancellationToken = default);\n\n        Task<Account> GetByIdAsync(Guid accountId, CancellationToken cancellationToken = default);\n\n        void Insert(Account account);\n\n        void Remove(Account account);\n    }\n}\n\n'onion-architecture-aspnetcore/OnionArchitecutre/Web/Startup.cs'\n:using Domain.Repositories;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.OpenApi.Models;\nusing Persistence;\nusing Persistence.Repositories;\nusing Services;\nusing Services.Abstractions;\nusing Web.Middleware;\n\nnamespace Web\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration) => Configuration = configuration;\n\n        public IConfiguration Configuration { get; }\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers()\n                .AddApplicationPart(typeof(Presentation.AssemblyReference).Assembly);\n\n            services.AddSwaggerGen(c =>\n                c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"Web\", Version = \"v1\" }));\n\n            services.AddScoped<IServiceManager, ServiceManager>();\n\n            services.AddScoped<IRepositoryManager, RepositoryManager>();\n\n            services.AddDbContextPool<RepositoryDbContext>(builder =>\n            {\n                var connectionString = Configuration.GetConnectionString(\"Database\");\n\n                builder.UseNpgsql(connectionString);\n            });\n\n            services.AddTransient<ExceptionHandlingMiddleware>();\n        }\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n\n                app.UseSwagger();\n\n                app.UseSwaggerUI(c => c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Web v1\"));\n            }\n\n            app.UseMiddleware<ExceptionHandlingMiddleware>();\n\n            app.UseHttpsRedirection();\n\n            app.UseRouting();\n\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints => endpoints.MapControllers());\n        }\n    }\n}\n\n'onion-architecture-aspnetcore/OnionArchitecutre/Domain/Entities/Owner.cs'\n:﻿using System;\nusing System.Collections.Generic;\n\nnamespace Domain.Entities\n{\n    public class Owner\n    {\n        public Guid Id { get; set; }\n\n        public string Name { get; set; }\n\n        public DateTime DateOfBirth { get; set; }\n\n        public string Address { get; set; }\n\n        public ICollection<Account> Accounts { get; set; }\n    }\n}\n",
        "gt": [
            "'onion-architecture-aspnetcore/OnionArchitecutre/Domain/Entities/Owner.cs'",
            "'onion-architecture-aspnetcore/OnionArchitecutre/Domain/Repositories/IAccountRepository.cs'",
            "'onion-architecture-aspnetcore/OnionArchitecutre/Persistence/Repositories/OwnerRepository.cs'",
            "'onion-architecture-aspnetcore/OnionArchitecutre/Web/Startup.cs'"
        ]
    },
    {
        "files": [
            "'ReCapProject/Business/DependencyResolvers/Autofac/AutofacBusinessModule.cs'",
            "'ReCapProject/WebAPI/Program.cs'",
            "'ReCapProject/Core/Utilities/Results/SuccessResult.cs'",
            "'ReCapProject/Business/Concrete/RentalManager.cs'"
        ],
        "content": "'ReCapProject/Business/DependencyResolvers/Autofac/AutofacBusinessModule.cs'\n:﻿using Autofac;\nusing Autofac.Extras.DynamicProxy;\nusing Business.Abstract;\nusing Business.Concrete;\nusing Castle.DynamicProxy;\nusing Core.Utilities.Interceptors;\nusing DataAccess.Abstract;\nusing DataAccess.Concrete.EntityFramework;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Business.DependencyResolvers.Autofac\n{\n    public class AutofacBusinessModule:Module\n    {\n        protected override void Load(ContainerBuilder builder)\n        {\n            builder.RegisterType<BrandManager>().As<IBrandService>().SingleInstance();\n            builder.RegisterType<EfBrandDal>().As<IBrandDal>().SingleInstance();\n\n            builder.RegisterType<CarManager>().As<ICarService>().SingleInstance();\n            builder.RegisterType<EfCarDal>().As<ICarDal>().SingleInstance();\n\n            builder.RegisterType<ColorManager>().As<IColorService>().SingleInstance();\n            builder.RegisterType<EfColorDal>().As<IColorDal>().SingleInstance();\n\n            builder.RegisterType<CustomerManager>().As<ICustomerService>().SingleInstance();\n            builder.RegisterType<EfCustomerDal>().As<ICustomerDal>().SingleInstance();\n\n            builder.RegisterType<RentalManager>().As<IRentalService>().SingleInstance();\n            builder.RegisterType<EfRentalDal>().As<IRentalDal>().SingleInstance();\n\n            builder.RegisterType<UserManager>().As<IUserService>().SingleInstance();\n            builder.RegisterType<EfUserDal>().As<IUserDal>().SingleInstance();\n\n            var assembly = System.Reflection.Assembly.GetExecutingAssembly();\n            builder.RegisterAssemblyTypes(assembly).AsImplementedInterfaces()\n                .EnableInterfaceInterceptors(new ProxyGenerationOptions()\n                {\n                    Selector = new AspectInterceptorSelector()\n                }).SingleInstance();\n\n        }\n    }\n}\n\n'ReCapProject/WebAPI/Program.cs'\n:using Autofac;\nusing Autofac.Extensions.DependencyInjection;\nusing Business.DependencyResolvers.Autofac;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace WebAPI\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n           Host.CreateDefaultBuilder(args)\n               .UseServiceProviderFactory(new AutofacServiceProviderFactory())\n               .ConfigureContainer<ContainerBuilder>(builder =>\n               {\n                   builder.RegisterModule(new AutofacBusinessModule());\n               })\n               .ConfigureWebHostDefaults(webBuilder =>\n               {\n                   webBuilder.UseStartup<Startup>();\n               });\n    }\n}\n\n'ReCapProject/Core/Utilities/Results/SuccessResult.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Core.Utilities.Results\n{\n    public class SuccessResult : Result\n    {\n        public SuccessResult(string message) : base(true,message)\n        {\n\n        }\n        public SuccessResult() : base(true)\n        {\n\n        }\n    }\n}\n\n'ReCapProject/Business/Concrete/RentalManager.cs'\n:﻿using Business.Abstract;\nusing Business.Constants;\nusing Business.ValidationRules.FluentValidation;\nusing Core.Aspects.Autofac.Validation;\nusing Core.Utilities.Results;\nusing DataAccess.Abstract;\nusing Entities.Concrete;\nusing Entities.DTOs;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Business.Concrete\n{\n    public class RentalManager : IRentalService\n    {\n        IRentalDal _rentalDal;\n        public RentalManager(IRentalDal rentalDal)\n        {\n            _rentalDal = rentalDal;\n        }\n        [ValidationAspect(typeof(RentalValidator))]\n        public IResult Add(Rental rental)\n        {\n            _rentalDal.Add(rental);\n            return new SuccessResult(Messages.RentalAdded);\n        }\n\n        public IResult CheckReturnDate(int carId)\n        {\n            throw new NotImplementedException();\n        }\n\n        public IDataResult<List<Rental>> GetAll()\n        {\n            return new SuccessDataResult<List<Rental>>(_rentalDal.GetAll());\n        }\n\n        public IDataResult<List<RentalDetailDto>> GetRentalDetails()\n        {\n            return _rentalDal.GetRentalDetails();\n        }\n\n        public IResult UpdateReturnDate(int carId)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n",
        "gt": [
            "'ReCapProject/Core/Utilities/Results/SuccessResult.cs'",
            "'ReCapProject/Business/Concrete/RentalManager.cs'",
            "'ReCapProject/Business/DependencyResolvers/Autofac/AutofacBusinessModule.cs'",
            "'ReCapProject/WebAPI/Program.cs'"
        ]
    },
    {
        "files": [
            "'QuanLib.Minecraft/QuanLib.Minecraft.Instance/McapiMinecraftServer.cs'",
            "'QuanLib.Minecraft/QuanLib.Minecraft.API/Packet/LoginPacket.cs'",
            "'QuanLib.Minecraft/QuanLib.Minecraft.API/NetworkTask.cs'"
        ],
        "content": "'QuanLib.Minecraft/QuanLib.Minecraft.Instance/McapiMinecraftServer.cs'\n:﻿using QuanLib.Core;\nusing QuanLib.Minecraft.API;\nusing QuanLib.Minecraft.Command.Senders;\nusing QuanLib.Minecraft.Instance.CommandSenders;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace QuanLib.Minecraft.Instance\n{\n    public class McapiMinecraftServer : MinecraftServer, IMcapiInstance\n    {\n        public McapiMinecraftServer(string serverPath, string serverAddress, ushort serverPort, ushort mcapiPort, string mcapiPassword, ILoggerGetter? loggerGetter = null) : base(serverPath, serverAddress, serverPort, loggerGetter)\n        {\n            ArgumentException.ThrowIfNullOrEmpty(mcapiPassword, nameof(mcapiPassword));\n\n            McapiPort = mcapiPort;\n            McapiPassword = mcapiPassword;\n            McapiClient = new(ServerAddress, McapiPort, loggerGetter);\n            McapiCommandSender = new(McapiClient);\n            CommandSender = new(McapiCommandSender, McapiCommandSender);\n        }\n\n        public ushort McapiPort { get; }\n\n        public string McapiPassword { get; }\n\n        public McapiClient McapiClient { get; }\n\n        public McapiCommandSender McapiCommandSender { get; }\n\n        public override CommandSender CommandSender { get; }\n\n        public override string InstanceKey => IMcapiInstance.INSTANCE_KEY;\n\n        protected override void Run()\n        {\n            LogFileListener.Start(\"LogFileListener Thread\");\n            McapiClient.Start(\"McapiClient Thread\");\n            McapiClient.LoginAsync(McapiPassword).Wait();\n\n            Task.WaitAll(LogFileListener.WaitForStopAsync(), McapiClient.WaitForStopAsync());\n        }\n\n        protected override void DisposeUnmanaged()\n        {\n            LogFileListener.Stop();\n            McapiClient.Stop();\n        }\n\n        public override bool TestConnectivity()\n        {\n            Task<bool> server = NetworkUtil.TestTcpConnectivityAsync(ServerAddress, ServerPort);\n            Task<bool> mcapi = NetworkUtil.TestTcpConnectivityAsync(ServerAddress, McapiPort);\n            Task.WaitAll(server, mcapi);\n            return server.Result && mcapi.Result;\n        }\n\n        public override async Task<bool> TestConnectivityAsync()\n        {\n            Task<bool> server = NetworkUtil.TestTcpConnectivityAsync(ServerAddress, ServerPort);\n            Task<bool> mcapi = NetworkUtil.TestTcpConnectivityAsync(ServerAddress, McapiPort);\n            return await server && await mcapi;\n        }\n    }\n}\n\n'QuanLib.Minecraft/QuanLib.Minecraft.API/Packet/LoginPacket.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace QuanLib.Minecraft.API.Packet\n{\n    public static class LoginPacket\n    {\n        public static RequestPacket CreateRequestPacket(string password, int id)\n        {\n            ArgumentException.ThrowIfNullOrEmpty(password, nameof(password));\n\n            return new(PacketKey.Login, PacketType.String, Encoding.UTF8.GetBytes(password), id, true);\n        }\n\n        public static ResponseData ParseResponsePacket(ResponsePacket responsePacket)\n        {\n            ArgumentNullException.ThrowIfNull(responsePacket, nameof(responsePacket));\n\n            return responsePacket.Data.DeserializeBson<ResponseData>();\n        }\n\n        public static async Task<ResponseData> SendLoginAsync(this McapiClient client, string password)\n        {\n            RequestPacket request = CreateRequestPacket(password, client.GetNextID());\n            ResponsePacket response = await client.SendRequestPacketAsync(request);\n            response.ValidateStatusCode();\n            return ParseResponsePacket(response);\n        }\n\n        public class ResponseData\n        {\n            public bool? IsSuccessful { get; set; }\n\n            public string? Message { get; set; }\n        }\n    }\n}\n\n'QuanLib.Minecraft/QuanLib.Minecraft.API/NetworkTask.cs'\n:﻿using QuanLib.Core;\nusing QuanLib.Minecraft.API.Packet;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Net.Sockets;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace QuanLib.Minecraft.API\n{\n    public class NetworkTask\n    {\n        public NetworkTask(Func<byte[], ValueTask> write, RequestPacket request)\n        {\n            ArgumentNullException.ThrowIfNull(write, nameof(write));\n            ArgumentNullException.ThrowIfNull(request, nameof(request));\n\n            _sendSemaphore = new(0);\n            _receiveSemaphore = new(0);\n            State = NetworkTaskState.Notsent;\n\n            _write = write;\n            _request = request;\n            _sendTask = WaitForSendAsync();\n            _receiveTask = WaitForReceiveAsync();\n\n            if (!_request.NeedResponse)\n            {\n                _receiveSemaphore.Release();\n                _receiveTask.ContinueWith((task) =>\n                {\n                    State = NetworkTaskState.Completed;\n                });\n            }\n        }\n\n        private readonly SemaphoreSlim _sendSemaphore;\n\n        private readonly SemaphoreSlim _receiveSemaphore;\n\n        private readonly Task _sendTask;\n\n        private readonly Task _receiveTask;\n\n        private readonly Func<byte[], ValueTask> _write;\n\n        private readonly RequestPacket _request;\n\n        private ResponsePacket? _response;\n\n        public NetworkTaskState State { get; private set; }\n\n        public bool IsCompleted => State is NetworkTaskState.Completed or NetworkTaskState.Timeout;\n\n        public int DataPacketID => _request.ID;\n\n        internal void Send()\n        {\n            _sendSemaphore.Release();\n        }\n\n        internal void Receive(ResponsePacket response)\n        {\n            ArgumentNullException.ThrowIfNull(response, nameof(response));\n            if (response.ID != _request.ID)\n                throw new InvalidOperationException(\"请求数据包与响应数据包的ID不一致\");\n\n            _sendTask.Wait();\n            _response = response;\n            _receiveSemaphore.Release();\n            _receiveTask.ContinueWith((task) =>\n            {\n                State = NetworkTaskState.Completed;\n            });\n        }\n\n        public async Task<ResponsePacket?> WaitForCompleteAsync()\n        {\n            await _sendTask;\n            await _receiveTask;\n            return _response;\n        }\n\n        private async Task WaitForSendAsync()\n        {\n            byte[] datapacket = _request.Serialize();\n            await _sendSemaphore.WaitAsync();\n            State = NetworkTaskState.Sending;\n            await _write.Invoke(datapacket);\n        }\n\n        private async Task WaitForReceiveAsync()\n        {\n            await _sendTask;\n            State = NetworkTaskState.Receiving;\n            int millisecondsTimeout = 30 * 1000;\n            Stopwatch stopwatch = Stopwatch.StartNew();\n            await _receiveSemaphore.WaitAsync(millisecondsTimeout);\n            stopwatch.Stop();\n            if (stopwatch.ElapsedMilliseconds >= millisecondsTimeout)\n                State = NetworkTaskState.Timeout;\n        }\n    }\n}\n",
        "gt": [
            "'QuanLib.Minecraft/QuanLib.Minecraft.API/Packet/LoginPacket.cs'",
            "'QuanLib.Minecraft/QuanLib.Minecraft.API/NetworkTask.cs'",
            "'QuanLib.Minecraft/QuanLib.Minecraft.Instance/McapiMinecraftServer.cs'"
        ]
    },
    {
        "files": [
            "'DotRas/examples/DialConnectionAsynchronously/Program.cs'",
            "'DotRas/src/DotRas/RasConnection.cs'",
            "'DotRas/src/DotRas/Internal/Abstractions/Services/IRasEnumDevices.cs'"
        ],
        "content": "'DotRas/examples/DialConnectionAsynchronously/Program.cs'\n:﻿using System.Net;\nusing DotRas;\n\nnamespace DialConnectionAsynchronously;\n\nclass Program\n{\n    private readonly RasDialer dialer;\n\n    static async Task Main()\n    {\n        try\n        {\n            await new Program().RunAsync();\n        }\n        catch (Exception ex)\n        {\n            await Console.Error.WriteLineAsync(ex.ToString());\n        }\n\n        await Console.Out.WriteLineAsync(\"Press any key to terminate...\");\n        Console.ReadKey(true);\n    }\n\n    public Program()\n    {\n        dialer = new RasDialer();\n        dialer.StateChanged += OnDialerStateChanged;\n    }\n\n    private void OnDialerStateChanged(object sender, StateChangedEventArgs e)\n    {\n        Console.WriteLine($\"State: {e.State}\");\n    }\n\n    private async Task RunAsync()\n    {\n\n        dialer.EntryName = \"Your Entry\";\n\n\n        dialer.Credentials = new NetworkCredential(\"Username\", \"Password\");\n\n\n        dialer.PhoneBookPath = Path.Combine(\n            Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData),\n            @\"Microsoft\\Network\\Connections\\Pbk\\rasphone.pbk\");\n\n        await Console.Out.WriteLineAsync(\"Connecting...\");\n\n\n\n        var connection = await dialer.ConnectAsync();\n\n        await Console.Out.WriteLineAsync($\"Connected: [{connection.EntryName}] @ {connection.Handle}\");\n    }\n}\n'DotRas/src/DotRas/RasConnection.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing DotRas.Internal;\nusing DotRas.Internal.Abstractions.Services;\n\nnamespace DotRas\n{\n\n\n\n    public class RasConnection : IRasConnection, IEquatable<RasConnection>\n    {\n        #region Fields and Properties\n\n\n\n\n        private const bool DefaultCloseAllReferences = true;\n\n\n\n\n        public virtual IntPtr Handle { get; }\n\n\n\n\n        public virtual RasDevice Device { get; }\n\n\n\n\n        public virtual string EntryName { get; }\n\n\n\n\n        public virtual string PhoneBookPath { get; }\n\n\n\n\n        public virtual Guid EntryId { get; }\n\n\n\n\n        public virtual RasConnectionOptions Options { get; }\n\n\n\n\n        public virtual Luid SessionId { get; }\n\n\n\n\n        public virtual Guid CorrelationId { get; }\n\n\n\n\n        protected IServiceProvider Services { get; }\n\n        #endregion\n\n        internal RasConnection(IntPtr handle, RasDevice device, string entryName, string phoneBookPath, Guid entryId, RasConnectionOptions options, Luid sessionId, Guid correlationId, IServiceProvider services)\n        {\n            if (handle == IntPtr.Zero)\n            {\n                throw new ArgumentNullException(nameof(handle));\n            }\n            else if (string.IsNullOrWhiteSpace(entryName))\n            {\n                throw new ArgumentNullException(nameof(entryName));\n            }\n            else if (string.IsNullOrWhiteSpace(phoneBookPath))\n            {\n                throw new ArgumentNullException(nameof(phoneBookPath));\n            }\n\n            EntryName = entryName;\n            PhoneBookPath = phoneBookPath;\n            Handle = handle;\n            Device = device ?? throw new ArgumentNullException(nameof(device));\n            EntryId = entryId;\n            Options = options ?? throw new ArgumentNullException(nameof(options));\n            SessionId = sessionId;\n            CorrelationId = correlationId;\n            Services = services;\n        }\n\n\n\n\n        protected RasConnection()\n        {\n        }\n\n\n\n\n\n        public static IEnumerable<RasConnection> EnumerateConnections()\n        {\n            return ServiceLocator.Default.GetRequiredService<IRasEnumConnections>()\n                .EnumerateConnections();\n        }\n\n\n\n\n\n        public virtual void ClearStatistics()\n        {\n            Services.GetRequiredService<IRasClearConnectionStatistics>()\n                .ClearConnectionStatistics(this);\n        }\n\n\n\n\n\n        public virtual RasConnectionStatistics GetStatistics()\n        {\n            return Services.GetRequiredService<IRasGetConnectionStatistics>()\n                .GetConnectionStatistics(this);\n        }\n\n\n\n\n\n        public virtual RasConnectionStatus GetStatus()\n        {\n            return Services.GetRequiredService<IRasGetConnectStatus>()\n                .GetConnectionStatus(this);\n        }\n\n\n\n\n\n\n        public virtual void Disconnect()\n        {\n            Disconnect(CancellationToken.None);\n        }\n\n\n\n\n\n\n\n        public virtual void Disconnect(CancellationToken cancellationToken)\n        {\n            Disconnect(cancellationToken, DefaultCloseAllReferences);\n        }\n\n\n\n\n\n\n\n\n        public virtual void Disconnect(CancellationToken cancellationToken, bool closeAllReferences)\n        {\n            DisconnectAsync(cancellationToken, closeAllReferences).GetResultSynchronously();\n        }\n\n\n\n\n\n\n\n        public virtual Task DisconnectAsync()\n        {\n            return DisconnectAsync(CancellationToken.None);\n        }\n\n\n\n\n\n\n\n\n        public virtual Task DisconnectAsync(CancellationToken cancellationToken)\n        {\n            return DisconnectAsync(cancellationToken, DefaultCloseAllReferences);\n        }\n\n\n\n\n\n\n\n\n\n        public virtual Task DisconnectAsync(CancellationToken cancellationToken, bool closeAllReferences)\n        {\n            return Services.GetRequiredService<IRasHangUp>()\n                .HangUpAsync(this, closeAllReferences, cancellationToken);\n        }\n\n\n\n\n\n\n\n        public static bool operator ==(RasConnection objA, RasConnection objB)\n        {\n#pragma warning disable IDE0041\n            if (ReferenceEquals(objA, null) && ReferenceEquals(objB, null))\n            {\n                return true;\n            }\n            else if (ReferenceEquals(objA, null) || ReferenceEquals(objB, null))\n            {\n                return false;\n            }\n#pragma warning restore IDE0041\n\n            return objA.Equals(objB);\n        }\n\n\n\n\n\n\n\n\n        public static bool operator !=(RasConnection objA, RasConnection objB)\n        {\n            return !(objA == objB);\n        }\n\n\n        public override bool Equals(object obj)\n        {\n            var other = obj as RasConnection;\n            if (other == null)\n            {\n                return false;\n            }\n\n            return Equals(other);\n        }\n\n\n        public virtual bool Equals(RasConnection other)\n        {\n            if (other == null)\n            {\n                return false;\n            }\n\n            return Handle == other.Handle;\n        }\n\n\n        public override int GetHashCode()\n        {\n            return Handle.GetHashCode();\n        }\n    }\n}\n'DotRas/src/DotRas/Internal/Abstractions/Services/IRasEnumDevices.cs'\n:﻿using System.Collections.Generic;\n\nnamespace DotRas.Internal.Abstractions.Services\n{\n    internal interface IRasEnumDevices\n    {\n        IEnumerable<RasDevice> EnumerateDevices();\n    }\n}",
        "gt": [
            "'DotRas/src/DotRas/Internal/Abstractions/Services/IRasEnumDevices.cs'",
            "'DotRas/src/DotRas/RasConnection.cs'",
            "'DotRas/examples/DialConnectionAsynchronously/Program.cs'"
        ]
    },
    {
        "files": [
            "'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Hud/HudMediator.cs'",
            "'Idle-Miner/Assets/Scripts/core/Contexts/FSM/StateMachineMediator.cs'",
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Operators/Timestamp.cs'",
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Observable.Conversions.cs'"
        ],
        "content": "'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Hud/HudMediator.cs'\n:﻿using System;\nusing PG.Core.Contexts;\nusing PG.IdleMiner.Models.MediatorModels;\nusing PG.IdleMiner.Models.RemoteDataModels;\nusing PG.IdleMiner.Views.Hud;\nusing UniRx;\nusing Zenject;\n\nnamespace PG.IdleMiner.view\n{\n    public partial class HudMediator : StateMachineMediator\n    {\n        [Inject] private readonly HudView _view;\n\n        [Inject] private readonly HudModel _hudModel;\n        [Inject] private readonly RemoteDataModel _remoteDataModel;\n\n        public HudMediator()\n        {\n            Disposables = new CompositeDisposable();\n        }\n\n        public override void Initialize()\n        {\n            base.Initialize();\n\n            StateBehaviours.Add((int)HudModel.EHudState.StartupScreen, new HudStateStartup(this));\n\n            _remoteDataModel.IdleCash.Subscribe(OnIdleCashUpdate).AddTo(Disposables);\n            _remoteDataModel.Cash.Subscribe(OnCashUpdate).AddTo(Disposables);\n            _remoteDataModel.SuperCash.Subscribe(OnSuperCashUpdate).AddTo(Disposables);\n\n            _hudModel.HudState.Subscribe(OnHudStateChanged).AddTo(Disposables);\n        }\n\n        private void OnIdleCashUpdate(double idleCash)\n        {\n            _view._idleCashWidget.SetData(idleCash, idleCash);\n        }\n\n        private void OnCashUpdate(double cash)\n        {\n            _view._cashWidget.SetData(cash, cash);\n        }\n\n        private void OnSuperCashUpdate(double superCash)\n        {\n            _view._superCashWidget.SetData(superCash, superCash);\n        }\n\n        private void OnHudStateChanged(HudModel.EHudState hudState)\n        {\n            GoToState((int)hudState);\n        }\n    }\n}\n\n\n'Idle-Miner/Assets/Scripts/core/Contexts/FSM/StateMachineMediator.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing PG.Core.Contexts.Popup;\nusing RSG;\nusing UniRx;\nusing UnityEngine;\nusing Zenject;\n\nnamespace PG.Core.Contexts\n{\n    public partial class StateMachineMediator : IInitializable, ITickable, IDisposable\n    {\n        protected StateBehaviour CurrentStateBehaviour;\n        protected Dictionary<int, StateBehaviour> StateBehaviours = new Dictionary<int, StateBehaviour>();\n\n        protected CompositeDisposable Disposables;\n\n        [Inject] protected SignalBus SignalBus;\n\n        public virtual void Initialize()\n\t\t{\n\t\t\tDisposables = new CompositeDisposable();\n        }\n\n        public virtual void GoToState(int stateType)\n        {\n            if (!StateBehaviours.ContainsKey(stateType))\n            {\n                Debug.LogError(\"State Missing in Mediator.\");\n            }\n            else if(CurrentStateBehaviour == null || StateBehaviours[stateType] != CurrentStateBehaviour)\n            {\n                GoToStateInternal(stateType);\n            }\n        }\n\n        private void GoToStateInternal(int stateType)\n        {\n            if (StateBehaviours.ContainsKey(stateType))\n            {\n                CurrentStateBehaviour?.OnStateExit();\n                CurrentStateBehaviour = StateBehaviours[stateType];\n\n                CurrentStateBehaviour.OnStateEnter();\n            }\n            else\n            {\n                Debug.LogError($\"State Id[{stateType}] doesn't Exist in the Dictionary.\");\n            }\n        }\n\n        public virtual Promise<IPopupResult> ShowPopup(IPopupConfig popupConfig)\n        {\n            return OpenPopupSignal.ShowPopup(popupConfig, SignalBus);\n        }\n\n        public virtual void Tick()\n        {\n            CurrentStateBehaviour?.Tick();\n        }\n\n        public virtual void Dispose()\n        {\n            CurrentStateBehaviour?.OnStateExit();\n\n            Disposables.Dispose();\n\n            StateBehaviours.Clear();\n        }\n    }\n}\n\n'Idle-Miner/Assets/Plugins/UniRx/Scripts/Operators/Timestamp.cs'\n:﻿using System;\n\nnamespace UniRx.Operators\n{\n    internal class TimestampObservable<T> : OperatorObservableBase<Timestamped<T>>\n    {\n        readonly IObservable<T> source;\n        readonly IScheduler scheduler;\n\n        public TimestampObservable(IObservable<T> source, IScheduler scheduler)\n            : base(scheduler == Scheduler.CurrentThread || source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n            this.scheduler = scheduler;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<Timestamped<T>> observer, IDisposable cancel)\n        {\n            return source.Subscribe(new Timestamp(this, observer, cancel));\n        }\n\n        class Timestamp : OperatorObserverBase<T, Timestamped<T>>\n        {\n            readonly TimestampObservable<T> parent;\n\n            public Timestamp(TimestampObservable<T> parent, IObserver<Timestamped<T>> observer, IDisposable cancel)\n                : base(observer, cancel)\n            {\n                this.parent = parent;\n            }\n\n            public override void OnNext(T value)\n            {\n                base.observer.OnNext(new Timestamped<T>(value, parent.scheduler.Now));\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); }\n                finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                try { observer.OnCompleted(); }\n                finally { Dispose(); }\n            }\n        }\n    }\n}\n'Idle-Miner/Assets/Plugins/UniRx/Scripts/Observable.Conversions.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing UniRx.Operators;\n\nnamespace UniRx\n{\n    public static partial class Observable\n    {\n        public static IObservable<T> AsObservable<T>(this IObservable<T> source)\n        {\n            if (source == null) throw new ArgumentNullException(\"source\");\n\n\n            if (source is UniRx.Operators.AsObservableObservable<T>)\n            {\n                return source;\n            }\n\n            return new AsObservableObservable<T>(source);\n        }\n\n        public static IObservable<T> ToObservable<T>(this IEnumerable<T> source)\n        {\n            return ToObservable(source, Scheduler.DefaultSchedulers.Iteration);\n        }\n\n        public static IObservable<T> ToObservable<T>(this IEnumerable<T> source, IScheduler scheduler)\n        {\n            return new ToObservableObservable<T>(source, scheduler);\n        }\n\n        public static IObservable<TResult> Cast<TSource, TResult>(this IObservable<TSource> source)\n        {\n            return new CastObservable<TSource, TResult>(source);\n        }\n\n\n\n\n        public static IObservable<TResult> Cast<TSource, TResult>(this IObservable<TSource> source, TResult witness)\n        {\n            return new CastObservable<TSource, TResult>(source);\n        }\n\n        public static IObservable<TResult> OfType<TSource, TResult>(this IObservable<TSource> source)\n        {\n            return new OfTypeObservable<TSource, TResult>(source);\n        }\n\n\n\n\n        public static IObservable<TResult> OfType<TSource, TResult>(this IObservable<TSource> source, TResult witness)\n        {\n            return new OfTypeObservable<TSource, TResult>(source);\n        }\n\n\n\n\n        public static IObservable<Unit> AsUnitObservable<T>(this IObservable<T> source)\n        {\n            return new AsUnitObservableObservable<T>(source);\n        }\n\n\n\n\n        public static IObservable<Unit> AsSingleUnitObservable<T>(this IObservable<T> source)\n        {\n            return new AsSingleUnitObservableObservable<T>(source);\n        }\n    }\n}",
        "gt": [
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Operators/Timestamp.cs'",
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Observable.Conversions.cs'",
            "'Idle-Miner/Assets/Scripts/core/Contexts/FSM/StateMachineMediator.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Hud/HudMediator.cs'"
        ]
    },
    {
        "files": [
            "'WebApi2Book/src/WebApi2Book.Web.Api/Controllers/V1/TaskUsersController.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api.Tests/Controllers/V1/TasksControllerTest.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api/LinkServices/ICommonLinkService.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api/InquiryProcessing/TaskByIdInquiryProcessor.cs'"
        ],
        "content": "'WebApi2Book/src/WebApi2Book.Web.Api/Controllers/V1/TaskUsersController.cs'\n:\n\n\nusing System.Collections.Generic;\nusing System.Web.Http;\nusing WebApi2Book.Common;\nusing WebApi2Book.Web.Api.InquiryProcessing;\nusing WebApi2Book.Web.Api.MaintenanceProcessing;\nusing WebApi2Book.Web.Api.Models;\nusing WebApi2Book.Web.Common;\nusing WebApi2Book.Web.Common.Routing;\n\nnamespace WebApi2Book.Web.Api.Controllers.V1\n{\n    [ApiVersion1RoutePrefix(\"tasks\")]\n    [UnitOfWorkActionFilter]\n    [Authorize(Roles = Constants.RoleNames.SeniorWorker)]\n    public class TaskUsersController : ApiController\n    {\n        private readonly ITaskUsersInquiryProcessor _taskUsersInquiryProcessor;\n        private readonly ITaskUsersMaintenanceProcessor _taskUsersMaintenanceProcessor;\n\n        public TaskUsersController(ITaskUsersInquiryProcessor taskUsersInquiryProcessor,\n            ITaskUsersMaintenanceProcessor taskUsersMaintenanceProcessor)\n        {\n            _taskUsersInquiryProcessor = taskUsersInquiryProcessor;\n            _taskUsersMaintenanceProcessor = taskUsersMaintenanceProcessor;\n        }\n\n        [Route(\"{taskId:long}/users\", Name = \"GetTaskUsersRoute\")]\n        public TaskUsersInquiryResponse GetTaskUsers(long taskId)\n        {\n            var users = _taskUsersInquiryProcessor.GetTaskUsers(taskId);\n            return users;\n        }\n\n        [Route(\"{taskId:long}/users\", Name = \"ReplaceTaskUsersRoute\")]\n        [HttpPut]\n        public Task ReplaceTaskUsers(long taskId, [FromBody] IEnumerable<long> userIds)\n        {\n            var task = _taskUsersMaintenanceProcessor.ReplaceTaskUsers(taskId, userIds);\n            return task;\n        }\n\n        [Route(\"{taskId:long}/users\", Name = \"DeleteTaskUsersRoute\")]\n        [HttpDelete]\n        public Task DeleteTaskUsers(long taskId)\n        {\n            var task = _taskUsersMaintenanceProcessor.DeleteTaskUsers(taskId);\n            return task;\n        }\n\n        [Route(\"{taskId:long}/users/{userId:long}\", Name = \"AddTaskUserRoute\")]\n        [HttpPut]\n        public Task AddTaskUser(long taskId, long userId)\n        {\n            var task = _taskUsersMaintenanceProcessor.AddTaskUser(taskId, userId);\n            return task;\n        }\n\n        [Route(\"{taskId:long}/users/{userId:long}\", Name = \"DeleteTaskUserRoute\")]\n        [HttpDelete]\n        public Task DeleteTaskUser(long taskId, long userId)\n        {\n            var task = _taskUsersMaintenanceProcessor.DeleteTaskUser(taskId, userId);\n            return task;\n        }\n    }\n}\n'WebApi2Book/src/WebApi2Book.Web.Api.Tests/Controllers/V1/TasksControllerTest.cs'\n:﻿\n\n\nusing NUnit.Framework;\nusing WebApi2Book.Data;\nusing WebApi2Book.Web.Api.Controllers.V1;\nusing WebApi2Book.Web.Api.Models;\nusing WebApi2Book.Web.Common.Tests;\n\nnamespace WebApi2Book.Web.Api.Tests.Controllers.V1\n{\n    [TestFixture]\n    public class TasksControllerTest\n    {\n        [SetUp]\n        public void SetUp()\n        {\n            _tasksControllerDependencyBlockMock = new TasksControllerDependencyBlockMock();\n\n            _controller = new TasksController(_tasksControllerDependencyBlockMock.Object);\n        }\n\n        private TasksControllerDependencyBlockMock _tasksControllerDependencyBlockMock;\n\n        private TasksController _controller;\n\n        [Test]\n        public void GetTasks_returns_correct_response()\n        {\n            var requestMessage = HttpRequestMessageFactory.CreateRequestMessage();\n            var request = new PagedDataRequest(1, 25);\n            var response = new PagedDataInquiryResponse<Task>();\n\n            _tasksControllerDependencyBlockMock.PagedDataRequestFactoryMock.Setup(\n                x => x.Create(requestMessage.RequestUri)).Returns(request);\n            _tasksControllerDependencyBlockMock.AllTasksInquiryProcessorMock.Setup(x => x.GetTasks(request))\n                .Returns(response);\n\n            var actualResponse = _controller.GetTasks(requestMessage);\n\n            Assert.AreSame(response, actualResponse);\n        }\n    }\n}\n'WebApi2Book/src/WebApi2Book.Web.Api/LinkServices/ICommonLinkService.cs'\n:﻿\n\n\nusing System.Net.Http;\nusing WebApi2Book.Web.Api.Models;\n\nnamespace WebApi2Book.Web.Api.LinkServices\n{\n    public interface ICommonLinkService\n    {\n        void AddPageLinks(IPageLinkContaining linkContainer,\n            string currentPageQueryString,\n            string previousPageQueryString,\n            string nextPageQueryString);\n\n        Link GetLink(string pathFragment, string relValue, HttpMethod httpMethod);\n    }\n}\n'WebApi2Book/src/WebApi2Book.Web.Api/InquiryProcessing/TaskByIdInquiryProcessor.cs'\n:﻿\n\n\nusing WebApi2Book.Common.TypeMapping;\nusing WebApi2Book.Data.Exceptions;\nusing WebApi2Book.Data.QueryProcessors;\nusing WebApi2Book.Web.Api.LinkServices;\nusing WebApi2Book.Web.Api.Models;\n\nnamespace WebApi2Book.Web.Api.InquiryProcessing\n{\n    public class TaskByIdInquiryProcessor : ITaskByIdInquiryProcessor\n    {\n        private readonly IAutoMapper _autoMapper;\n        private readonly ITaskByIdQueryProcessor _queryProcessor;\n        private readonly ITaskLinkService _taskLinkService;\n\n        public TaskByIdInquiryProcessor(ITaskByIdQueryProcessor queryProcessor, IAutoMapper autoMapper,\n            ITaskLinkService taskLinkService)\n        {\n            _queryProcessor = queryProcessor;\n            _autoMapper = autoMapper;\n            _taskLinkService = taskLinkService;\n        }\n\n        public Task GetTask(long taskId)\n        {\n            var taskEntity = _queryProcessor.GetTask(taskId);\n            if (taskEntity == null)\n            {\n                throw new RootObjectNotFoundException(\"Task not found\");\n            }\n\n            var task = _autoMapper.Map<Task>(taskEntity);\n\n            _taskLinkService.AddLinks(task);\n\n            return task;\n        }\n    }\n}",
        "gt": [
            "'WebApi2Book/src/WebApi2Book.Web.Api/LinkServices/ICommonLinkService.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api/InquiryProcessing/TaskByIdInquiryProcessor.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api/Controllers/V1/TaskUsersController.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api.Tests/Controllers/V1/TasksControllerTest.cs'"
        ]
    },
    {
        "files": [
            "'openstack.net/src/corelib/Networking/v2/TrafficDirection.cs'",
            "'openstack.net/src/testing/integration/Networking/v2/Layer3/Layer3ExtensionTests.cs'",
            "'openstack.net/src/corelib/Networking/v2/Serialization/SecurityGroupRuleCollection.cs'",
            "'openstack.net/src/corelib/Compute/v2_1/ServerUpdateDefinition.cs'",
            "'openstack.net/src/testing/migration/Program.cs'"
        ],
        "content": "'openstack.net/src/corelib/Networking/v2/TrafficDirection.cs'\n:using OpenStack.Networking.v2.Serialization;\n\nnamespace OpenStack.Networking.v2\n{\n\n    public class TrafficDirection : TrafficDirection<TrafficDirection>\n    { }\n}\n'openstack.net/src/testing/integration/Networking/v2/Layer3/Layer3ExtensionTests.cs'\n:﻿using System;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing OpenStack.Compute.v2_1;\nusing Xunit;\nusing Xunit.Abstractions;\n\nnamespace OpenStack.Networking.v2.Layer3\n{\n    public class Layer3ExtensionTests : IDisposable\n    {\n        private readonly NetworkingService _networkingService;\n        private readonly NetworkingTestDataManager _testData;\n        private readonly ComputeTestDataManager _computeTestData;\n\n        public Layer3ExtensionTests(ITestOutputHelper testLog)\n        {\n            var testOutput = new XunitTraceListener(testLog);\n            Trace.Listeners.Add(testOutput);\n            OpenStackNet.Tracing.Http.Listeners.Add(testOutput);\n\n\n            var authenticationProvider = TestIdentityProvider.GetOperatorIdentity();\n            _networkingService = new NetworkingService(authenticationProvider, \"RegionOne\");\n\n            _testData = new NetworkingTestDataManager(_networkingService);\n            var compute = new ComputeService(authenticationProvider, \"RegionOne\");\n            _computeTestData = new ComputeTestDataManager(compute);\n        }\n\n        public void Dispose()\n        {\n            _computeTestData.Dispose();\n            _testData.Dispose();\n\n            Trace.Listeners.Clear();\n            OpenStackNet.Tracing.Http.Listeners.Clear();\n        }\n\n        [Fact]\n        public async Task AssignFloatingIP()\n        {\n\n            var internalNetwork = await _testData.CreateNetwork();\n            var internalSubnet = await _testData.CreateSubnet(internalNetwork);\n\n\n            Operator.NetworkDefinition externalNetworkDefinition = _testData.BuildNetwork();\n            externalNetworkDefinition.IsExternal = true;\n            var externalNetwork = await _testData.CreateNetwork(externalNetworkDefinition);\n            var externalSubnet = await _testData.CreateSubnet(externalNetwork);\n\n\n            var routerDefinition = new RouterCreateDefinition\n            {\n                Name = TestData.GenerateName(),\n                ExternalGateway = new ExternalGatewayDefinition(externalNetwork.Id)\n            };\n            var router = await _networkingService.CreateRouterAsync(routerDefinition);\n            _testData.Register(router);\n\n\n            var internalPortId = await router.AttachSubnetAsync(internalSubnet.Id);\n            _testData.Register(new Port {Id = internalPortId});\n\n\n            var floatingIPDefinition = new FloatingIPCreateDefinition(externalNetwork.Id);\n            var floatingIP = await _networkingService.CreateFloatingIPAsync(floatingIPDefinition);\n            _testData.Register(floatingIP);\n\n\n            var serverDefinition = _computeTestData.BuildServer();\n            serverDefinition.Networks.Add(new ServerNetworkDefinition {NetworkId = internalNetwork.Id });\n            var server = await _computeTestData.CreateServer(serverDefinition);\n            await server.WaitUntilActiveAsync();\n\n\n            await server.AssociateFloatingIPAsync(new AssociateFloatingIPRequest(floatingIP.FloatingIPAddress));\n\n\n            await server.DisassociateFloatingIPAsync(floatingIP.FloatingIPAddress);\n        }\n\n        [Fact]\n        public async Task ListSecurityGroups()\n        {\n            var groups = await _networkingService.ListSecurityGroupsAsync(new SecurityGroupListOptions {Name = \"default\"});\n\n            Assert.NotEmpty(groups);\n\n            var defaultGroup = groups.First();\n            Assert.NotNull(defaultGroup);\n            Assert.NotNull(defaultGroup.Name);\n            Assert.NotNull(defaultGroup.Description);\n            Assert.NotNull(defaultGroup.Id);\n            Assert.NotEmpty(defaultGroup.SecurityGroupRules);\n\n            var defaultRule = defaultGroup.SecurityGroupRules.First();\n            Assert.NotNull(defaultRule.Id);\n            Assert.NotNull(defaultRule.Direction);\n#pragma warning disable xUnit2002\n            Assert.NotNull(defaultRule.Ethertype);\n#pragma warning restore xUnit2002\n            Assert.NotNull(defaultRule.SecurityGroupId);\n        }\n    }\n}\n'openstack.net/src/corelib/Networking/v2/Serialization/SecurityGroupRuleCollection.cs'\n:﻿using System.Collections.Generic;\nusing OpenStack.Networking.v2.Layer3;\nusing OpenStack.Serialization;\n\nnamespace OpenStack.Networking.v2.Serialization\n{\n\n\n\n\n    [JsonConverterWithConstructor(typeof(RootWrapperConverter), \"security_group_rules\")]\n    public class SecurityGroupRuleCollection : List<SecurityGroupRule>\n    {\n\n\n\n\n        public SecurityGroupRuleCollection()\n        {\n\n        }\n\n\n\n\n\n        public SecurityGroupRuleCollection(IEnumerable<SecurityGroupRule> items) : base(items)\n        {\n\n        }\n    }\n}\n'openstack.net/src/corelib/Compute/v2_1/ServerUpdateDefinition.cs'\n:using Newtonsoft.Json;\nusing OpenStack.Serialization;\n\nnamespace OpenStack.Compute.v2_1\n{\n\n\n\n    [JsonConverterWithConstructor(typeof(RootWrapperConverter), \"server\")]\n    public class ServerUpdateDefinition\n    {\n        private string _ipv4Address;\n        private string _ipv6Address;\n\n\n        [JsonProperty(\"name\")]\n        public string Name { get; set; }\n\n\n        [JsonProperty(\"accessIPv4\")]\n        public string IPv4Address\n        {\n            get { return _ipv4Address; }\n            set\n            {\n\n                _ipv4Address = !string.IsNullOrEmpty(value) ? value : null;\n            }\n        }\n\n\n        [JsonProperty(\"accessIPv6\")]\n        public string IPv6Address\n        {\n            get { return _ipv6Address; }\n            set\n            {\n\n                _ipv6Address = !string.IsNullOrEmpty(value) ? value : null;\n            }\n        }\n    }\n}\n'openstack.net/src/testing/migration/Program.cs'\n:﻿using System;\nusing net.openstack.Core.Domain;\nusing net.openstack.Core.Providers;\nusing net.openstack.Providers.Rackspace;\nusing OpenStack;\nusing OpenStack.Compute.v2_1;\nusing OpenStack.Networking.v2;\nusing OpenStack.Synchronous;\n\nnamespace migration\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            const string region = \"RegionOne\";\n\n\n            OpenStackNet.Configure(options => options.DefaultTimeout=TimeSpan.FromSeconds(5));\n\n\n            var identityUrl = new Uri(\"http:\n            var user = new CloudIdentityWithProject();\n            var identity = new OpenStackIdentityProvider(identityUrl, user);\n            identity.Authenticate();\n\n\n            var legacyNetworking = new CloudNetworksProvider(null, identity);\n            legacyNetworking.ListNetworks();\n            var networks = new NetworkingService(identity, region);\n            networks.ListNetworks();\n\n            var legacyCompute = new CloudServersProvider(null, identity);\n            legacyCompute.ListServers();\n            var compute = new ComputeService(identity, region);\n            compute.ListServers();\n        }\n    }\n}\n",
        "gt": [
            "'openstack.net/src/corelib/Compute/v2_1/ServerUpdateDefinition.cs'",
            "'openstack.net/src/testing/integration/Networking/v2/Layer3/Layer3ExtensionTests.cs'",
            "'openstack.net/src/corelib/Networking/v2/Serialization/SecurityGroupRuleCollection.cs'",
            "'openstack.net/src/corelib/Networking/v2/TrafficDirection.cs'",
            "'openstack.net/src/testing/migration/Program.cs'"
        ]
    },
    {
        "files": [
            "'Plugin.CloudFirestore/Plugin.CloudFirestore/Shared/Attributes/IgnoredAttribute.cs'",
            "'Plugin.CloudFirestore/Plugin.CloudFirestore.Sample/Plugin.CloudFirestore.Sample/Models/TodoItem.cs'",
            "'Plugin.CloudFirestore/Plugin.CloudFirestore.Sample/Plugin.CloudFirestore.Sample/App.xaml.cs'",
            "'Plugin.CloudFirestore/Plugin.CloudFirestore.Sample/Plugin.CloudFirestore.Sample/Extensions/NavigationExtensions.cs'",
            "'Plugin.CloudFirestore/Plugin.CloudFirestore.Sample/Plugin.CloudFirestore.Sample/ViewModels/NewTodoItemPageViewModel.cs'"
        ],
        "content": "'Plugin.CloudFirestore/Plugin.CloudFirestore/Shared/Attributes/IgnoredAttribute.cs'\n:﻿using System;\nnamespace Plugin.CloudFirestore.Attributes\n{\n    [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field)]\n    public sealed class IgnoredAttribute : Attribute\n    {\n    }\n}\n\n'Plugin.CloudFirestore/Plugin.CloudFirestore.Sample/Plugin.CloudFirestore.Sample/Models/TodoItem.cs'\n:﻿using System;\nusing Plugin.CloudFirestore.Attributes;\nnamespace Plugin.CloudFirestore.Sample.Models\n{\n    public class TodoItem\n    {\n        public static string CollectionPath = \"todoItems\";\n\n        [Id]\n        public string? Id { get; set; }\n\n        public string? Name { get; set; }\n\n        public string? Notes { get; set; }\n\n        [ServerTimestamp(CanReplace = false)]\n        public Timestamp CreatedAt { get; set; }\n\n        [ServerTimestamp]\n        public Timestamp UpdatedAt { get; set; }\n    }\n}\n\n'Plugin.CloudFirestore/Plugin.CloudFirestore.Sample/Plugin.CloudFirestore.Sample/App.xaml.cs'\n:﻿using Prism;\nusing Prism.Ioc;\nusing Plugin.CloudFirestore.Sample.ViewModels;\nusing Plugin.CloudFirestore.Sample.Views;\nusing Xamarin.Forms;\nusing Xamarin.Forms.Xaml;\nusing Prism.DryIoc;\nusing Plugin.CloudFirestore.Sample.Extensions;\n\n[assembly: XamlCompilation(XamlCompilationOptions.Compile)]\nnamespace Plugin.CloudFirestore.Sample\n{\n    public partial class App : PrismApplication\n    {\n\n        public App() : this(null) { }\n\n        public App(IPlatformInitializer? initializer) : base(initializer) { }\n\n        protected override async void OnInitialized()\n        {\n            InitializeComponent();\n\n            await NavigationService.NavigateAsync<MainPageViewModel>(wrapInNavigationPage: true);\n        }\n\n        protected override void RegisterTypes(IContainerRegistry containerRegistry)\n        {\n            containerRegistry.RegisterForNavigation<NavigationPage>();\n            containerRegistry.RegisterForNavigation<MainPage>();\n            containerRegistry.RegisterForNavigation<NewTodoItemPage>();\n            containerRegistry.RegisterForNavigation<TodoItemDetailPage>();\n        }\n    }\n}\n\n'Plugin.CloudFirestore/Plugin.CloudFirestore.Sample/Plugin.CloudFirestore.Sample/Extensions/NavigationExtensions.cs'\n:﻿using Prism.Mvvm;\nusing Prism.Navigation;\nusing System;\nusing System.Threading.Tasks;\nusing Plugin.CloudFirestore.Sample.ViewModels;\n\nnamespace Plugin.CloudFirestore.Sample.Extensions\n{\n    public static class NavigationExtensions\n    {\n        public static Task NavigateAsync<TViewModel>(this INavigationService navigationService, NavigationParameters? parameters = null, bool? useModalNavigation = null, bool animated = true, bool wrapInNavigationPage = false, bool noHistory = false) where TViewModel : BindableBase\n        {\n            var name = typeof(TViewModel).Name.Replace(\"ViewModel\", \"\");\n\n            if (wrapInNavigationPage)\n            {\n                name = \"NavigationPage/\" + name;\n            }\n\n            if (noHistory)\n            {\n                name = \"/\" + name;\n            }\n\n            return navigationService.NavigateAsync(name, parameters, useModalNavigation, animated);\n        }\n\n        public static Task NavigateAsync<TViewModel, TParameter>(this INavigationService navigationService, TParameter parameter, bool? useModalNavigation = null, bool animated = true, bool wrapInNavigationPage = false, bool noHistory = false) where TViewModel : ViewModelBase<TParameter>\n        {\n            var parameters = new NavigationParameters\n            {\n                {ViewModelBase.ParameterKey,  parameter}\n            };\n\n            return navigationService.NavigateAsync<TViewModel>(parameters, useModalNavigation, animated, wrapInNavigationPage, noHistory);\n        }\n    }\n}\n\n'Plugin.CloudFirestore/Plugin.CloudFirestore.Sample/Plugin.CloudFirestore.Sample/ViewModels/NewTodoItemPageViewModel.cs'\n:﻿using System;\nusing Reactive.Bindings;\nusing System.Reactive.Linq;\nusing Reactive.Bindings.Extensions;\nusing Plugin.CloudFirestore.Sample.Models;\nusing Prism.Services;\nusing Prism.Navigation;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace Plugin.CloudFirestore.Sample.ViewModels\n{\n    public class NewTodoItemPageViewModel : ViewModelBase\n    {\n        public ReactivePropertySlim<string?> Name { get; set; } = new ReactivePropertySlim<string?>();\n        public ReactivePropertySlim<string?> Notes { get; set; } = new ReactivePropertySlim<string?>();\n\n        public AsyncReactiveCommand CreateCommand { get; }\n        public ReactiveCommand CancelCommand { get; }\n\n        private readonly IPageDialogService _pageDialogService;\n\n        public NewTodoItemPageViewModel(INavigationService navigationService, IPageDialogService pageDialogService) : base(navigationService)\n        {\n            _pageDialogService = pageDialogService;\n\n            Title = \"New Todo Item\";\n\n            CreateCommand = new[] {\n                Name.Select(x => string.IsNullOrEmpty(x))\n            }.CombineLatestValuesAreAllFalse()\n             .ObserveOn(SynchronizationContext.Current)\n             .ToAsyncReactiveCommand();\n\n            _ = CreateCommand.Subscribe(async () =>\n              {\n                  var item = new TodoItem\n                  {\n                      Name = Name.Value,\n                      Notes = Notes.Value,\n                  };\n\n                  _ = CrossCloudFirestore.Current\n                                     .Instance\n                                     .Collection(TodoItem.CollectionPath)\n                                     .AddAsync(item)\n                                     .ContinueWith(t =>\n                                     {\n                                         System.Diagnostics.Debug.WriteLine(t.Exception);\n                                     }, TaskContinuationOptions.OnlyOnFaulted);\n\n                  await navigationService.GoBackAsync();\n              });\n\n            CancelCommand = new ReactiveCommand();\n            CancelCommand.Subscribe(() => NavigationService.GoBackAsync());\n        }\n    }\n}\n",
        "gt": [
            "'Plugin.CloudFirestore/Plugin.CloudFirestore/Shared/Attributes/IgnoredAttribute.cs'",
            "'Plugin.CloudFirestore/Plugin.CloudFirestore.Sample/Plugin.CloudFirestore.Sample/Models/TodoItem.cs'",
            "'Plugin.CloudFirestore/Plugin.CloudFirestore.Sample/Plugin.CloudFirestore.Sample/ViewModels/NewTodoItemPageViewModel.cs'",
            "'Plugin.CloudFirestore/Plugin.CloudFirestore.Sample/Plugin.CloudFirestore.Sample/Extensions/NavigationExtensions.cs'",
            "'Plugin.CloudFirestore/Plugin.CloudFirestore.Sample/Plugin.CloudFirestore.Sample/App.xaml.cs'"
        ]
    },
    {
        "files": [
            "'vsi-lldb/YetiCommon/SSH/SshManagerBase.cs'",
            "'vsi-lldb/YetiVSI.Shared/Profiling/SshTunnelProcess.cs'",
            "'vsi-lldb/YetiVSI.Tests/Profiling/GameLifetimeWatcherTests.cs'"
        ],
        "content": "'vsi-lldb/YetiCommon/SSH/SshManagerBase.cs'\n:﻿using GgpGrpc.Cloud;\nusing GgpGrpc.Models;\nusing System.Diagnostics;\nusing System.Threading.Tasks;\n\nnamespace YetiCommon.SSH\n{\n\n    public class SshManagerBase\n    {\n        protected readonly ISshKeyLoader sshKeyLoader;\n        protected readonly ISshKnownHostsWriter sshKnownHostsWriter;\n        protected readonly IRemoteCommand remoteCommand;\n\n        public SshManagerBase(ISshKeyLoader sshKeyLoader,\n            ISshKnownHostsWriter sshKnownHostsWriter, IRemoteCommand remoteCommand)\n        {\n            this.sshKeyLoader = sshKeyLoader;\n            this.sshKnownHostsWriter = sshKnownHostsWriter;\n            this.remoteCommand = remoteCommand;\n        }\n\n        public async Task EnableSshForGameletAsync(Gamelet gamelet, IGameletClient gameletClient)\n        {\n            var sshKey = await sshKeyLoader.LoadOrCreateAsync();\n            sshKnownHostsWriter.CreateOrUpdate(gamelet);\n\n\n            try\n            {\n                await remoteCommand.RunWithSuccessAsync(new SshTarget(gamelet), \"/bin/true\");\n                return;\n            }\n            catch (ProcessException e)\n            {\n                Trace.WriteLine(\n                    $\"SSH check failed; fallback to calling EnableSSH; error: {e}\");\n            }\n            await gameletClient.EnableSshAsync(gamelet.Id, sshKey.PublicKey);\n        }\n    }\n}\n\n'vsi-lldb/YetiVSI.Shared/Profiling/SshTunnelProcess.cs'\n:﻿\n\n\n\n\n\n\n\n\n\n\n\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing YetiCommon;\nusing YetiCommon.SSH;\n\nnamespace YetiVSI.Profiling\n{\n\n\n\n    public class SshTunnelProcess\n    {\n        readonly string _name;\n\n        IProcess _process;\n\n\n\n\n\n\n\n\n\n\n\n\n        public SshTunnelProcess(int localPort, int remotePort, string name, SshTarget target,\n                                ManagedProcess.Factory managedProcessFactory)\n        {\n            _name = name;\n\n            var ports = new List<ProcessStartInfoBuilder.PortForwardEntry>()\n            {\n                new ProcessStartInfoBuilder.PortForwardEntry\n                {\n                    LocalPort = localPort,\n                    RemotePort = remotePort,\n                }\n            };\n            ProcessStartInfo startInfo =\n                ProcessStartInfoBuilder.BuildForSshPortForward(ports, target);\n\n            Trace.WriteLine($\"Starting SSH Tunnel for {_name}, \" +\n                            $\"local port={localPort}, remote port={remotePort}\");\n\n            _process = managedProcessFactory.Create(startInfo);\n            _process.OnExit += HandleExit;\n            _process.Start();\n        }\n\n\n\n\n        public void Stop()\n        {\n\n            lock (this)\n            {\n                if (_process == null)\n                {\n                    return;\n                }\n\n                Trace.WriteLine($\"Stopping SSH Tunnel for {_name}.\");\n\n                _process.Kill();\n                _process.Dispose();\n                _process = null;\n            }\n        }\n\n\n\n\n\n        void HandleExit(object sender, EventArgs e)\n        {\n\n            lock (this)\n            {\n                if (_process == null)\n                {\n\n                    return;\n                }\n\n                Trace.WriteLine($\"SSH Tunnel for {_name} exited unexpectedly.\");\n\n                _process.Dispose();\n                _process = null;\n            }\n        }\n    }\n}\n'vsi-lldb/YetiVSI.Tests/Profiling/GameLifetimeWatcherTests.cs'\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing GgpGrpc.Models;\nusing Microsoft.VisualStudio.Threading;\nusing NSubstitute;\nusing NUnit.Framework;\nusing YetiVSI.GameLaunch;\nusing YetiVSI.Profiling;\n\nnamespace YetiVSI.Test.Profiling\n{\n    class GameLifetimeWatcherTests\n    {\n        static readonly TimeSpan _startupTimeout = TimeSpan.FromSeconds(60);\n\n        static readonly GgpGrpc.Models.GameLaunch _launchPrepping = new GgpGrpc.Models.GameLaunch\n            { GameLaunchState = GameLaunchState.ReadyToPlay, GameletName = \"gamelet\" };\n\n        static readonly GgpGrpc.Models.GameLaunch _launchRunning = new GgpGrpc.Models.GameLaunch\n            { GameLaunchState = GameLaunchState.RunningGame, GameletName = \"gamelet\" };\n\n        static readonly GgpGrpc.Models.GameLaunch _launchEnded = new GgpGrpc.Models.GameLaunch\n        {\n            GameLaunchState = GameLaunchState.GameLaunchEnded,\n            GameLaunchEnded = new GameLaunchEnded(EndReason.ExitedByUser),\n            GameletName = \"gamelet\"\n        };\n\n        IVsiGameLaunch _launch;\n        AsyncManualResetEvent _onDoneCalled;\n        GameLifetimeWatcher.DoneHandler _onDone;\n        GameLifetimeWatcher _watcher;\n\n        [SetUp]\n        public void SetUp()\n        {\n            _launch = Substitute.For<IVsiGameLaunch>();\n            _onDoneCalled = new AsyncManualResetEvent();\n            _watcher = new GameLifetimeWatcher();\n            _onDone = Substitute.For<GameLifetimeWatcher.DoneHandler>();\n            _onDone.When(x => x.Invoke(_watcher, Arg.Any<bool>(), Arg.Any<string>()))\n                .Do(x => _onDoneCalled.Set());\n        }\n\n        [Test]\n        public void StopWithoutStart()\n        {\n            _watcher.Stop();\n        }\n\n        [Test]\n        public void StartStartThrows()\n        {\n            _launch.GetLaunchStateAsync(null).Returns(Task.FromResult(_launchPrepping));\n            _watcher.Start(_launch, _startupTimeout, _onDone);\n            Assert.Throws(typeof(InvalidOperationException),\n                          () => _watcher.Start(_launch, _startupTimeout, _onDone));\n        }\n\n        [Test]\n        public void StartStopNotLaunched()\n        {\n            _launch.GetLaunchStateAsync(null).Returns(Task.FromResult(_launchPrepping));\n\n            _watcher.Start(_launch, _startupTimeout, _onDone);\n            _watcher.Stop();\n\n            _onDone.DidNotReceive().Invoke(_watcher, Arg.Any<bool>(), Arg.Any<string>());\n        }\n\n        [Test]\n        public void DoubleStop()\n        {\n            _launch.GetLaunchStateAsync(null).Returns(Task.FromResult(_launchPrepping));\n            _watcher.Start(_launch, _startupTimeout, _onDone);\n\n            _watcher.Stop();\n            _watcher.Stop();\n        }\n\n        [Test]\n        public async Task StartLaunchedSucceedsAsync()\n        {\n            _launch.GetLaunchStateAsync(null).Returns(Task.FromResult(_launchEnded));\n\n            _watcher.Start(_launch, _startupTimeout, _onDone);\n\n            await _onDoneCalled.WaitAsync().WithTimeout(TimeSpan.FromSeconds(5));\n            _onDone.Received().Invoke(_watcher, true, null);\n        }\n\n        [Test]\n        public async Task StartupTimesOutWhenNotRunningAsync()\n        {\n            _launch.GetLaunchStateAsync(null).Returns(Task.FromResult(_launchPrepping));\n\n            _watcher.Start(_launch, TimeSpan.Zero, _onDone);\n\n            await _onDoneCalled.WaitAsync().WithTimeout(TimeSpan.FromSeconds(5));\n            _onDone.Received().Invoke(_watcher, false,\n                                      Arg.Do<string>(errorMsg =>\n                                                         StringAssert.Contains(\n                                                             \"Timed out\", errorMsg)));\n        }\n\n        [Test]\n        public void StartupDoesNotTimeOutWhenRunning()\n        {\n            _launch.GetLaunchStateAsync(null).Returns(Task.FromResult(_launchRunning));\n\n            _watcher.Start(_launch, TimeSpan.Zero, _onDone);\n\n\n            Thread.Sleep(10);\n            Assert.False(_onDoneCalled.IsSet);\n        }\n    }\n}",
        "gt": [
            "'vsi-lldb/YetiCommon/SSH/SshManagerBase.cs'",
            "'vsi-lldb/YetiVSI.Shared/Profiling/SshTunnelProcess.cs'",
            "'vsi-lldb/YetiVSI.Tests/Profiling/GameLifetimeWatcherTests.cs'"
        ]
    },
    {
        "files": [
            "'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.Actors/AuctionItem/AuctionItemActorStateLoaderFactory.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.Actors/ActorsModule.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.BackendServer/Startup.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap/ClaptrapActivitySourceExtensions.cs'"
        ],
        "content": "'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.Actors/AuctionItem/AuctionItemActorStateLoaderFactory.cs'\n:﻿using System.Threading.Tasks;\nusing HelloClaptrap.Models.AuctionItem;\nusing Newbe.Claptrap;\nusing Newbe.Claptrap.StorageProvider.Relational.StateStore;\n\nnamespace HelloClaptrap.Actors.AuctionItem\n{\n    public class AuctionItemActorStateLoader : DecoratedStateLoader\n    {\n        public AuctionItemActorStateLoader(IStateLoader stateLoader) : base(stateLoader)\n        {\n        }\n\n        public override async Task<IState?> GetStateSnapshotAsync()\n        {\n            var state = await StateLoader.GetStateSnapshotAsync();\n            if (state == null)\n            {\n                return null;\n            }\n\n            var itemState = (AuctionItemState) state.Data;\n            var records = itemState.BiddingRecords;\n            itemState.InitBiddingRecords();\n            if (records != null)\n            {\n                foreach (var (key, value) in records)\n                {\n                    itemState.BiddingRecords.Add(key, value);\n                }\n            }\n\n            return state;\n        }\n    }\n}\n'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.Actors/ActorsModule.cs'\n:﻿using Autofac;\nusing HelloClaptrap.Actors.AuctionItem;\n\nnamespace HelloClaptrap.Actors\n{\n    public class ActorsModule : Module\n    {\n        protected override void Load(ContainerBuilder builder)\n        {\n            base.Load(builder);\n            builder.RegisterType<AuctionItemActorStateLoader>()\n                .AsSelf();\n        }\n    }\n}\n'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.BackendServer/Startup.cs'\n:using System;\nusing Autofac;\nusing HelloClaptrap.Actors;\nusing HelloClaptrap.Actors.AuctionItem;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.OpenApi.Models;\nusing Newbe.Claptrap;\nusing Newbe.Claptrap.Bootstrapper;\nusing OpenTelemetry.Trace;\n\nnamespace HelloClaptrap.BackendServer\n{\n    public class Startup\n    {\n        private readonly AutofacClaptrapBootstrapper _claptrapBootstrapper;\n        private readonly IClaptrapDesignStore _claptrapDesignStore;\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n            var loggerFactory = new ServiceCollection()\n                .AddLogging(logging => logging.AddConsole())\n                .BuildServiceProvider()\n                .GetRequiredService<ILoggerFactory>();\n\n            var bootstrapperBuilder = new AutofacClaptrapBootstrapperBuilder(loggerFactory);\n            _claptrapBootstrapper = (AutofacClaptrapBootstrapper) bootstrapperBuilder\n                .ScanClaptrapModule()\n                .AddConfiguration(configuration)\n                .ScanClaptrapDesigns(new[] {typeof(AuctionItemActor).Assembly})\n                .UseDaprPubsub(pubsub => pubsub.AsEventCenter())\n                .Build();\n            _claptrapDesignStore = _claptrapBootstrapper.DumpDesignStore();\n        }\n\n        public IConfiguration Configuration { get; }\n\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddClaptrapServerOptions();\n            services.AddOpenTelemetryTracing(\n                builder => builder\n                    .AddSource(ClaptrapActivitySource.Instance.Name)\n                    .SetSampler(new ParentBasedSampler(new AlwaysOnSampler()))\n                    .AddAspNetCoreInstrumentation()\n                    .AddGrpcClientInstrumentation()\n                    .AddHttpClientInstrumentation()\n                    .AddZipkinExporter(options =>\n                    {\n                        var zipkinBaseUri = Configuration.GetServiceUri(\"zipkin\", \"http\");\n                        options.Endpoint = new Uri(zipkinBaseUri!, \"/api/v2/spans\");\n                    })\n            );\n            services.AddClaptrapServerOptions();\n            services.AddActors(options => { options.AddClaptrapDesign(_claptrapDesignStore); });\n            services.AddControllers()\n                .AddDapr();\n            services.AddSwaggerGen(c =>\n            {\n                c.SwaggerDoc(\"v1\", new OpenApiInfo {Title = \"HelloClaptrap.BackendServer\", Version = \"v1\"});\n            });\n        }\n\n\n\n\n\n        public void ConfigureContainer(ContainerBuilder builder)\n        {\n\n\n\n            builder.RegisterModule<ActorsModule>();\n            _claptrapBootstrapper.Boot(builder);\n        }\n\n\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n                app.UseSwagger();\n                app.UseSwaggerUI(c => c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"HelloClaptrap.BackendServer v1\"));\n            }\n\n            app.UseRouting();\n\n            app.UseCloudEvents();\n\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapActorsHandlers();\n                endpoints.MapSubscribeHandler();\n                endpoints.MapControllers();\n            });\n        }\n    }\n}\n'Newbe.Claptrap/src/Newbe.Claptrap/ClaptrapActivitySourceExtensions.cs'\n:﻿using System.Diagnostics;\nusing Newbe.Claptrap.Extensions;\nusing static Newbe.Claptrap.ClaptrapActivitySource.Tags;\n\nnamespace Newbe.Claptrap\n{\n    public static class ClaptrapActivitySourceExtensions\n    {\n        public static Activity? AddClaptrapTags(this Activity? activity, IClaptrapDesign design, IClaptrapIdentity identity)\n        {\n            return activity?\n                .AddTag(IsMinion, design.IsMinion())\n                .AddTag(TypeCode, identity.TypeCode)\n                .AddTag(Id, identity.Id);\n        }\n    }\n}",
        "gt": [
            "'Newbe.Claptrap/src/Newbe.Claptrap/ClaptrapActivitySourceExtensions.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.Actors/AuctionItem/AuctionItemActorStateLoaderFactory.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.Actors/ActorsModule.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.BackendServer/Startup.cs'"
        ]
    },
    {
        "files": [
            "'ReCapProject/Business/Concrete/CarManager.cs'",
            "'ReCapProject/Core/Aspects/Autofac/Validation/ValidationAspect.cs'",
            "'ReCapProject/Core/Utilities/Interceptors/MethodInterception.cs'",
            "'ReCapProject/Business/DependencyResolvers/Autofac/AutofacBusinessModule.cs'",
            "'ReCapProject/WebAPI/Program.cs'"
        ],
        "content": "'ReCapProject/Business/Concrete/CarManager.cs'\n:﻿using Business.Abstract;\nusing Business.Constants;\nusing Business.ValidationRules.FluentValidation;\nusing Core.Aspects.Autofac.Validation;\nusing Core.Utilities.Results;\nusing DataAccess.Abstract;\nusing Entities.Concrete;\nusing Entities.DTOs;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Business.Concrete\n{\n    public class CarManager : ICarService\n    {\n        ICarDal _carDal;\n        public CarManager(ICarDal carDal)\n        {\n            _carDal = carDal;\n        }\n\n        [ValidationAspect(typeof(CarValidator))]\n        public IResult Add(Car car)\n        {\n            _carDal.Add(car);\n\n            return new SuccessResult(Messages.CarAdded);\n\n        }\n\n        public IResult Delete(Car car)\n        {\n            _carDal.Delete(car);\n\n            return new SuccessResult(Messages.CarDeleted);\n        }\n\n        public IDataResult<List<Car>> GetAll()\n        {\n            return new SuccessDataResult<List<Car>>(_carDal.GetAll());\n        }\n\n        public IDataResult<List<CarDetailDto>> GetCarDetails()\n        {\n            return _carDal.GetCarDetails();\n        }\n\n        public IDataResult<List<Car>> GetCarsByBrandId(int brandId)\n        {\n            return new SuccessDataResult<List<Car>>(_carDal.GetAll(c => c.BrandId == brandId));\n        }\n\n        public IDataResult<List<Car>> GetCarsByColorId(int colorId)\n        {\n            return new SuccessDataResult<List<Car>>(_carDal.GetAll(c => c.ColorId == colorId));\n        }\n\n        public IResult Update(Car car)\n        {\n            _carDal.Update(car);\n            return new SuccessResult(Messages.CarUpdated);\n        }\n    }\n}\n\n'ReCapProject/Core/Aspects/Autofac/Validation/ValidationAspect.cs'\n:﻿using Castle.DynamicProxy;\nusing Core.CrossCuttingConcerns.Validation;\nusing Core.Utilities.Interceptors;\nusing FluentValidation;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace Core.Aspects.Autofac.Validation\n{\n    public class ValidationAspect : MethodInterception\n    {\n        private Type _validatorType;\n        public ValidationAspect(Type validatorType)\n        {\n            if (!typeof(IValidator).IsAssignableFrom(validatorType))\n            {\n                throw new System.Exception(\"Bu bir doğrulama mesajı değil.\");\n            }\n\n            _validatorType = validatorType;\n        }\n        protected override void OnBefore(IInvocation invocation)\n        {\n            var validator = (IValidator)Activator.CreateInstance(_validatorType);\n            var entityType = _validatorType.BaseType.GetGenericArguments()[0];\n            var entities = invocation.Arguments.Where(t => t.GetType() == entityType);\n            foreach (var entity in entities)\n            {\n                ValidationTool.Validate(validator, entity);\n            }\n        }\n    }\n}\n\n'ReCapProject/Core/Utilities/Interceptors/MethodInterception.cs'\n:﻿using Castle.DynamicProxy;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Core.Utilities.Interceptors\n{\n    public abstract class MethodInterception : MethodInterceptionBaseAttribute\n    {\n        protected virtual void OnBefore(IInvocation invocation) { }\n        protected virtual void OnAfter(IInvocation invocation) { }\n        protected virtual void OnException(IInvocation invocation, System.Exception e) { }\n        protected virtual void OnSuccess(IInvocation invocation) { }\n        public override void Intercept(IInvocation invocation)\n        {\n            var isSuccess = true;\n            OnBefore(invocation);\n            try\n            {\n                invocation.Proceed();\n            }\n            catch (Exception e)\n            {\n                isSuccess = false;\n                OnException(invocation, e);\n                throw;\n            }\n            finally\n            {\n                if (isSuccess)\n                {\n                    OnSuccess(invocation);\n                }\n            }\n            OnAfter(invocation);\n        }\n    }\n}\n\n'ReCapProject/Business/DependencyResolvers/Autofac/AutofacBusinessModule.cs'\n:﻿using Autofac;\nusing Autofac.Extras.DynamicProxy;\nusing Business.Abstract;\nusing Business.Concrete;\nusing Castle.DynamicProxy;\nusing Core.Utilities.Interceptors;\nusing DataAccess.Abstract;\nusing DataAccess.Concrete.EntityFramework;\nusing System;\nusing System.Collections.Generic;\nusing System.Text;\n\nnamespace Business.DependencyResolvers.Autofac\n{\n    public class AutofacBusinessModule:Module\n    {\n        protected override void Load(ContainerBuilder builder)\n        {\n            builder.RegisterType<BrandManager>().As<IBrandService>().SingleInstance();\n            builder.RegisterType<EfBrandDal>().As<IBrandDal>().SingleInstance();\n\n            builder.RegisterType<CarManager>().As<ICarService>().SingleInstance();\n            builder.RegisterType<EfCarDal>().As<ICarDal>().SingleInstance();\n\n            builder.RegisterType<ColorManager>().As<IColorService>().SingleInstance();\n            builder.RegisterType<EfColorDal>().As<IColorDal>().SingleInstance();\n\n            builder.RegisterType<CustomerManager>().As<ICustomerService>().SingleInstance();\n            builder.RegisterType<EfCustomerDal>().As<ICustomerDal>().SingleInstance();\n\n            builder.RegisterType<RentalManager>().As<IRentalService>().SingleInstance();\n            builder.RegisterType<EfRentalDal>().As<IRentalDal>().SingleInstance();\n\n            builder.RegisterType<UserManager>().As<IUserService>().SingleInstance();\n            builder.RegisterType<EfUserDal>().As<IUserDal>().SingleInstance();\n\n            var assembly = System.Reflection.Assembly.GetExecutingAssembly();\n            builder.RegisterAssemblyTypes(assembly).AsImplementedInterfaces()\n                .EnableInterfaceInterceptors(new ProxyGenerationOptions()\n                {\n                    Selector = new AspectInterceptorSelector()\n                }).SingleInstance();\n\n        }\n    }\n}\n\n'ReCapProject/WebAPI/Program.cs'\n:using Autofac;\nusing Autofac.Extensions.DependencyInjection;\nusing Business.DependencyResolvers.Autofac;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace WebAPI\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            CreateHostBuilder(args).Build().Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n           Host.CreateDefaultBuilder(args)\n               .UseServiceProviderFactory(new AutofacServiceProviderFactory())\n               .ConfigureContainer<ContainerBuilder>(builder =>\n               {\n                   builder.RegisterModule(new AutofacBusinessModule());\n               })\n               .ConfigureWebHostDefaults(webBuilder =>\n               {\n                   webBuilder.UseStartup<Startup>();\n               });\n    }\n}\n",
        "gt": [
            "'ReCapProject/Core/Utilities/Interceptors/MethodInterception.cs'",
            "'ReCapProject/Core/Aspects/Autofac/Validation/ValidationAspect.cs'",
            "'ReCapProject/Business/Concrete/CarManager.cs'",
            "'ReCapProject/Business/DependencyResolvers/Autofac/AutofacBusinessModule.cs'",
            "'ReCapProject/WebAPI/Program.cs'"
        ]
    },
    {
        "files": [
            "'Bing/src/Bing.Core/Events/Messages/IMessageEvent.cs'",
            "'Bing/sample/Bing.Samples.Services/Messages/TestMessageEvent.cs'",
            "'Bing/sample/Bing.Samples.Services/Impl/TestService.cs'"
        ],
        "content": "'Bing/src/Bing.Core/Events/Messages/IMessageEvent.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Bing.Events.Messages\n{\n\n\n\n    public interface IMessageEvent : IEvent\n    {\n\n\n\n        object Data { get; set; }\n\n\n\n\n        string Target { get; set; }\n\n\n\n\n        string Callback { get; set; }\n\n\n\n\n        string MessageType { get; set; }\n    }\n}\n\n'Bing/sample/Bing.Samples.Services/Messages/TestMessageEvent.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Bing.Events.Messages;\n\nnamespace Bing.Samples.Services.Messages\n{\n\n\n\n    public class TestMessageEvent:MessageEvent\n    {\n\n\n\n        public string Name { get; set; }\n    }\n}\n\n'Bing/sample/Bing.Samples.Services/Impl/TestService.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Bing.Aspects;\nusing Bing.Caching;\nusing Bing.Caching.Aspects;\nusing Bing.Events;\nusing Bing.Events.Handlers;\nusing Bing.Helpers;\nusing Bing.Logs;\nusing Bing.Logs.Aspects;\nusing Bing.Logs.Extensions;\nusing Bing.Samples.Domains.Models;\nusing Bing.Samples.Services.Events;\nusing Bing.Samples.Services.Messages;\n\nnamespace Bing.Samples.Services.Impl\n{\n    public class TestService:ITestService\n    {\n        private IEventBus _eventBus;\n        private ICacheProvider _cacheProvider;\n\n        protected ILog Logger = Log.GetLog(typeof(TestService));\n\n        public TestService(IEventBus eventBus,ICacheProvider cacheProvider)\n        {\n            _eventBus = eventBus;\n            _cacheProvider = cacheProvider;\n        }\n\n        [CachingAble]\n        public string GetContent(string content)\n        {\n            return content;\n        }\n\n        public string GetTestContent(string content)\n        {\n            _cacheProvider.SetAsync(\"Test\",content,TimeSpan.FromSeconds(60));\n            return _cacheProvider.GetAsync<string>(\"Test\").Result.Value;\n        }\n\n        public void WriteOtherLog(string content)\n        {\n            Console.WriteLine(content);\n        }\n\n        public List<ItemResult> GetItems()\n        {\n            var provider = Ioc.Create<ICacheProvider>();\n            var result=provider.Get<List<ItemResult>>(\"IDropdownService:GetRegionList\");\n            if (result.HasValue)\n            {\n                return result.Value as List<ItemResult>;\n            }\n            return null;\n        }\n\n        public void PublishEvent(string name)\n        {\n            _eventBus.Publish(new TestEvent()\n            {\n                Name = name\n            });\n        }\n\n        public void PublishMessageEvent(string name)\n        {\n            _eventBus.Publish(new TestMessageEvent()\n            {\n                Name = name\n            });\n        }\n\n\n        public void WriteCustomerLog(string content)\n        {\n            Logger.Caption(\"输出自定义日志\").Content(content).Debug();\n\n            throw new NotImplementedException();\n        }\n    }\n}\n",
        "gt": [
            "'Bing/src/Bing.Core/Events/Messages/IMessageEvent.cs'",
            "'Bing/sample/Bing.Samples.Services/Messages/TestMessageEvent.cs'",
            "'Bing/sample/Bing.Samples.Services/Impl/TestService.cs'"
        ]
    },
    {
        "files": [
            "'PlanCheck/PlanCheck.Script/Script.cs'",
            "'PlanCheck/PlanCheck.Script/Esapi/IEsapiService.cs'",
            "'PlanCheck/PlanCheck.Script/Reporting/ReportPQMs.cs'",
            "'PlanCheck/PlanCheck.Runner/App.xaml.cs'"
        ],
        "content": "'PlanCheck/PlanCheck.Script/Script.cs'\n:using EsapiEssentials.Plugin;\nusing PlanCheck;\nusing System.Windows;\n\nnamespace VMS.TPS\n{\n    public class Script : ScriptBase\n    {\n        public override void Run(PluginScriptContext context)\n        {\n            if (context.Patient != null)\n            {\n                var esapiService = new EsapiService(context);\n\n                using (var ui = new UiRunner())\n                {\n                    ui.Run(() =>\n                    {\n                        var window = new MainWindow();\n                        var dialogService = new DialogService(window);\n                        var viewModel = new MainViewModel(esapiService, dialogService);\n                        window.DataContext = viewModel;\n                        window.ShowDialog();\n                    });\n                }\n            }\n            else\n            {\n                MessageBox.Show(\"Please open a patient.\", \"PlanCheck\");\n            }\n        }\n    }\n}\n\n'PlanCheck/PlanCheck.Script/Esapi/IEsapiService.cs'\n:using PlanCheck.Reporting;\nusing System;\nusing System.Collections.ObjectModel;\nusing System.Threading.Tasks;\nusing System.Windows.Media.Media3D;\nusing VMS.TPS.Common.Model.API;\n\nnamespace PlanCheck\n{\n    public interface IEsapiService\n    {\n        Task<PlanningItemViewModel[]> GetPlansAsync();\n        Task<ReportPatient> GetReportPatientAsync();\n        Task<ObservableCollection<StructureViewModel>> GetStructuresAsync(string courseId, string planId);\n        Task<string[]> GetBeamIdsAsync(string courseId, string planId);\n        Task<Point3D> GetIsocenterAsync(string courseId, string planId, string beamId);\n        Task<ObservableCollection<ErrorViewModel>> GetErrorsAsync(string courseId, string planId);\n        Task<CollisionCheckViewModel> GetBeamCollisionsAsync(string courseId, string planId, string beamId);\n        Task<Model3DGroup> AddFieldMeshAsync(Model3DGroup modelGroup, string courseId, string planId, string beamId, string status);\n        Task<Model3DGroup> AddCouchBodyAsync(string courseId, string planId);\n        Task<Point3D> GetCameraPositionAsync(string courseId, string planId, string beamId);\n        Task<string> CalculateMetricDoseAsync(string courseId, string planId, string structureId, string structureCode, string dvhObjective);\n        Task<string> EvaluateMetricDoseAsync(string result, string goal, string variation);\n    }\n}\n\n'PlanCheck/PlanCheck.Script/Reporting/ReportPQMs.cs'\n:namespace PlanCheck.Reporting\n{\n    public class ReportPQMs\n    {\n        public ReportPQM[] PQMs { get; set; }\n    }\n}\n\n'PlanCheck/PlanCheck.Runner/App.xaml.cs'\n:﻿using System.Windows;\nusing EsapiEssentials.PluginRunner;\nusing VMS.TPS;\nusing VMS.TPS.Common.Model.API;\n\nnamespace PlanCheck.Runner\n{\n    public partial class App : System.Windows.Application\n    {\n        private void App_OnStartup(object sender, StartupEventArgs e)\n        {\n\n\n            ScriptRunner.Run(new Script());\n        }\n\n\n        public void DoNothing(PlanSetup plan) { }\n    }\n}",
        "gt": [
            "'PlanCheck/PlanCheck.Script/Reporting/ReportPQMs.cs'",
            "'PlanCheck/PlanCheck.Script/Esapi/IEsapiService.cs'",
            "'PlanCheck/PlanCheck.Script/Script.cs'",
            "'PlanCheck/PlanCheck.Runner/App.xaml.cs'"
        ]
    },
    {
        "files": [
            "'puyotools/src/PuyoTools.App.Cli/Commands/Textures/GimTextureEncodeOptions.cs'",
            "'puyotools/src/PuyoTools.App.UI/Formats/Textures/GvrFormat.cs'",
            "'puyotools/src/PuyoTools.App.Cli/Program.cs'"
        ],
        "content": "'puyotools/src/PuyoTools.App.Cli/Commands/Textures/GimTextureEncodeOptions.cs'\n:﻿using PuyoTools.Core.Textures.Gim;\nusing PuyoTools.App.Formats.Textures;\nusing PuyoTools.Core.Textures;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PuyoTools.App.Cli.Commands.Textures\n{\n    class GimTextureEncodeOptions : TextureFormatEncodeOptions, ITextureFormatOptions\n    {\n        public GimPaletteFormat PaletteFormat { get; set; }\n\n        public GimPixelFormat PixelFormat { get; set; }\n\n        public bool Metadata { get; set; }\n\n        public bool Swizzle { get; set; }\n\n        public bool Dither { get; set; }\n\n        public void MapTo(TextureBase obj)\n        {\n            var texture = (GimTexture)obj;\n\n            texture.PaletteFormat = PaletteFormat;\n            texture.DataFormat = PixelFormat;\n            texture.HasMetadata = Metadata;\n            texture.Swizzle = Swizzle;\n            texture.Dither = Dither;\n        }\n    }\n}\n\n'puyotools/src/PuyoTools.App.UI/Formats/Textures/GvrFormat.cs'\n:﻿using PuyoTools.App.Formats.Textures.WriterSettings;\nusing PuyoTools.GUI;\nusing PuyoTools.Core.Textures;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PuyoTools.App.Formats.Textures\n{\n\n    internal partial class GvrFormat : ITextureFormat\n    {\n        public ModuleSettingsControl GetModuleSettingsControl() => new GvrWriterSettings();\n    }\n}\n\n'puyotools/src/PuyoTools.App.Cli/Program.cs'\n:﻿using PuyoTools.App.Cli.Commands.Archives;\nusing PuyoTools.App.Cli.Commands.Compression;\nusing PuyoTools.App.Cli.Commands.Textures;\nusing System;\nusing System.CommandLine;\nusing System.CommandLine.Builder;\nusing System.CommandLine.Invocation;\nusing System.CommandLine.Parsing;\nusing System.Threading.Tasks;\n\nnamespace PuyoTools.App.Cli\n{\n    class Program\n    {\n        static async Task<int> Main(string[] args)\n        {\n            var rootCommand = new RootCommand\n            {\n                new Command(\"compression\", \"Perform compression-based actions on files\")\n                {\n                    new CompressionCompressCommand(),\n                    new CompressionDecompressCommand(),\n                },\n                new Command(\"archive\", \"Perform actions on archives\")\n                {\n                    new ArchiveCreateCommand(),\n                    new ArchiveExtractCommand(),\n                },\n                new Command(\"texture\", \"Perform actions on textures\")\n                {\n                    new TextureEncodeCommand(),\n                    new TextureDecodeCommand(),\n                },\n            };\n\n            var parser = new CommandLineBuilder(rootCommand)\n                .UseDefaults()\n                .UseExceptionHandler(ExceptionHandler)\n                .Build();\n\n            return await parser.InvokeAsync(args);\n        }\n\n        static void ExceptionHandler(Exception e, InvocationContext context)\n        {\n            if (e is System.Reflection.TargetInvocationException)\n            {\n                e = e.InnerException;\n            }\n\n            Console.ForegroundColor = ConsoleColor.Red;\n#if DEBUG\n            Console.Error.WriteLine(e);\n#else\n            Console.Error.WriteLine(e.Message);\n#endif\n            Console.ResetColor();\n\n            context.ExitCode = e.HResult;\n        }\n    }\n}\n",
        "gt": [
            "'puyotools/src/PuyoTools.App.UI/Formats/Textures/GvrFormat.cs'",
            "'puyotools/src/PuyoTools.App.Cli/Commands/Textures/GimTextureEncodeOptions.cs'",
            "'puyotools/src/PuyoTools.App.Cli/Program.cs'"
        ]
    },
    {
        "files": [
            "'UWP/app/博客订阅/BaqulukaNercerewhelbeba/Program.cs'",
            "'UWP/app/博客订阅/BaqulukaNercerewhelbeba/Business/RssBlog.cs'",
            "'UWP/app/博客订阅/BaqulukaNercerewhelbeba/Model/PublishedBlog.cs'"
        ],
        "content": "'UWP/app/博客订阅/BaqulukaNercerewhelbeba/Program.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing BaqulukaNercerewhelbeba.Business;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\n\nnamespace BaqulukaNercerewhelbeba\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            Console.WriteLine(Environment.CommandLine);\n\n            var build = CreateHostBuilder(args).Build();\n\n            var rssCourier = build.Services.GetService<RssCourier>();\n            var taskWork = build.Services.GetService<TaskWork>();\n            taskWork.StartWork(rssCourier);\n\n            build.Run();\n        }\n\n        public static IHostBuilder CreateHostBuilder(string[] args) =>\n            Host.CreateDefaultBuilder(args)\n                .ConfigureWebHostDefaults(webBuilder =>\n                {\n                    webBuilder.UseStartup<Startup>();\n                    webBuilder.UseUrls(\"http:\n                });\n    }\n\n\n}\n\n'UWP/app/博客订阅/BaqulukaNercerewhelbeba/Business/RssBlog.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing BaqulukaNercerewhelbeba.Model;\nusing BaqulukaNercerewhelbeba.Util;\n\nnamespace BaqulukaNercerewhelbeba.Business\n{\n    public class RssBlog : IRssBlog\n    {\n        public async Task<List<BlogDescription>> FetchBlog(string url)\n        {\n            var blogList = new List<BlogDescription>();\n            var newsFeedService = new NewsFeedService(url);\n            var syndicationItems = await newsFeedService.GetNewsFeed();\n            foreach (var syndicationItem in syndicationItems)\n            {\n                var description =\n                    syndicationItem.Description.Substring(0, Math.Min(200, syndicationItem.Description.Length));\n                var time = syndicationItem.Published;\n                var uri = syndicationItem.Links.FirstOrDefault()?.Uri;\n\n                if (time < syndicationItem.LastUpdated)\n                {\n                    time = syndicationItem.LastUpdated;\n                }\n\n                blogList.Add(new BlogDescription()\n                {\n                    Title = syndicationItem.Title,\n                    Description = description,\n                    Time = time.DateTime,\n                    Url = uri?.AbsoluteUri\n                });\n            }\n\n            return blogList;\n        }\n    }\n}\n\n'UWP/app/博客订阅/BaqulukaNercerewhelbeba/Model/PublishedBlog.cs'\n:﻿using System;\n\nnamespace BaqulukaNercerewhelbeba.Model\n{\n\n\n\n    public class PublishedBlog\n    {\n        public int Id { set; get; }\n\n        public string Blog { set; get; }\n\n        public string MatterMost { set; get; }\n\n\n\n\n        public DateTime Time { set; get; }\n    }\n}\n",
        "gt": [
            "'UWP/app/博客订阅/BaqulukaNercerewhelbeba/Model/PublishedBlog.cs'",
            "'UWP/app/博客订阅/BaqulukaNercerewhelbeba/Business/RssBlog.cs'",
            "'UWP/app/博客订阅/BaqulukaNercerewhelbeba/Program.cs'"
        ]
    },
    {
        "files": [
            "'3DPayment/samples/ThreeDPayment.Sample/Startup.cs'",
            "'3DPayment/samples/ThreeDPayment.Sample/Services/IBankService.cs'",
            "'3DPayment/samples/ThreeDPayment.Sample/Domains/PaymentTransaction.cs'"
        ],
        "content": "'3DPayment/samples/ThreeDPayment.Sample/Startup.cs'\n:\n\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Serialization;\nusing ThreeDPayment.Sample.Data;\nusing ThreeDPayment.Sample.Services;\n\nnamespace ThreeDPayment.Sample\n{\n    public class Startup\n    {\n        private readonly IConfiguration Configuration;\n        private readonly IWebHostEnvironment HostEnvironment;\n\n        public Startup(IConfiguration configuration,\n            IWebHostEnvironment hostEnvironment)\n        {\n            Configuration = configuration;\n            HostEnvironment = hostEnvironment;\n        }\n\n\n\n\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n\n            services.Configure<CookiePolicyOptions>(options => options.MinimumSameSitePolicy = SameSiteMode.None);\n\n\n            services.AddResponseCompression();\n\n\n            services.AddSession();\n\n\n            services.AddDbContext<AppDataContext>(options => {\n                options.UseSqlite(\"Data Source=ThreeDPayment.db\");\n            });\n\n\n            services.AddScoped<IBankService, BankService>();\n            services.AddScoped<IPaymentService, PaymentService>();\n\n\n            services.AddPaymentServices();\n\n\n            var mvcBuilder = services.AddControllersWithViews();\n\n\n            mvcBuilder.AddNewtonsoftJson(options =>\n            {\n                options.SerializerSettings.DateTimeZoneHandling = DateTimeZoneHandling.Local;\n                options.SerializerSettings.Formatting = Formatting.Indented;\n                options.SerializerSettings.ReferenceLoopHandling = ReferenceLoopHandling.Ignore;\n                options.SerializerSettings.ContractResolver = new CamelCasePropertyNamesContractResolver();\n            });\n\n            JsonConvert.DefaultSettings = () => new JsonSerializerSettings\n            {\n                DateTimeZoneHandling = DateTimeZoneHandling.Local,\n                Formatting = Formatting.Indented,\n                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,\n                ContractResolver = new CamelCasePropertyNamesContractResolver()\n            };\n\n\n            if (HostEnvironment.IsDevelopment())\n                mvcBuilder.AddRazorRuntimeCompilation();\n        }\n\n\n\n\n\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseExceptionHandler(\"/Home/Error\");\n\n                app.UseHsts();\n            }\n\n\n            app.InitializeDatabase();\n\n\n            app.UseForwardedHeaders();\n\n\n            app.UseHttpsRedirection();\n\n\n            app.UseResponseCompression();\n\n\n            app.UseStaticFiles();\n\n\n            app.UseSession();\n\n\n            app.UseRouting();\n\n\n            app.UseAuthorization();\n\n\n            app.UseEndpoints(endpoints =>\n            {\n\n                endpoints.MapControllerRoute(\n                    name: \"Confirm\",\n                    pattern: \"payment/confirm/{paymentId:Guid?}\",\n                    defaults: new { action = \"Confirm\", controller = \"Payment\" });\n\n\n                endpoints.MapControllerRoute(\n                    name: \"Callback\",\n                    pattern: \"payment/callback/{paymentId:Guid?}\",\n                    defaults: new { action = \"Callback\", controller = \"Payment\" });\n\n                endpoints.MapDefaultControllerRoute();\n            });\n        }\n    }\n}\n\n'3DPayment/samples/ThreeDPayment.Sample/Services/IBankService.cs'\n:\n\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing ThreeDPayment.Sample.Domains;\n\nnamespace ThreeDPayment.Sample.Services\n{\n    public interface IBankService\n    {\n        Task<Bank> GetDefaultBank();\n        Task<Bank> GetById(int id);\n        Task<List<BankParameter>> GetBankParameters(int bankId);\n        Task<CreditCard> GetCreditCardByPrefix(string prefix,\n            bool includeInstallments = false);\n    }\n}\n'3DPayment/samples/ThreeDPayment.Sample/Domains/PaymentTransaction.cs'\n:\n\nusing System;\n\nnamespace ThreeDPayment.Sample.Domains\n{\n    public class PaymentTransaction : BaseEntity\n    {\n        public Guid OrderNumber { get; set; }\n        public string TransactionNumber { get; set; }\n        public string ReferenceNumber { get; set; }\n        public string UserIpAddress { get; set; }\n        public string UserAgent { get; set; }\n        public int BankId { get; set; }\n        public string CardPrefix { get; set; }\n        public string CardHolderName { get; set; }\n        public int Installment { get; set; }\n        public int ExtraInstallment { get; set; }\n        public decimal TotalAmount { get; set; }\n        public string BankErrorMessage { get; set; }\n        public DateTime? PaidDate { get; set; }\n        public DateTime CreateDate { get; set; }\n        public int StatusId { get; set; }\n        public bool Deleted { get; set; }\n        public string BankRequest { get; set; }\n        public string BankResponse { get; set; }\n\n        public Bank Bank { get; set; }\n\n        public PaymentStatus Status\n        {\n            get => (PaymentStatus)StatusId;\n            set => StatusId = (int)value;\n        }\n\n        public void MarkAsCreated()\n        {\n            CreateDate = DateTime.Now;\n            Status = PaymentStatus.Pending;\n        }\n\n        public void MarkAsPaid(DateTime paidDate)\n        {\n            PaidDate = paidDate;\n            Status = PaymentStatus.Paid;\n            BankErrorMessage = null;\n        }\n\n        public void MarkAsFailed(string bankErrorMessage, string bankResponse)\n        {\n            Status = PaymentStatus.Failed;\n            BankErrorMessage = bankErrorMessage;\n            BankResponse = bankResponse;\n        }\n    }\n}",
        "gt": [
            "'3DPayment/samples/ThreeDPayment.Sample/Domains/PaymentTransaction.cs'",
            "'3DPayment/samples/ThreeDPayment.Sample/Services/IBankService.cs'",
            "'3DPayment/samples/ThreeDPayment.Sample/Startup.cs'"
        ]
    },
    {
        "files": [
            "'AlexaSkillsKit.NET/AlexaSkillsKit.Lib/UI/SsmlOutputSpeech.cs'",
            "'AlexaSkillsKit.NET/AlexaSkillsKit.Sample.Dialog.AzureFunc/SampleSkillFactory.cs'",
            "'AlexaSkillsKit.NET/AlexaSkillsKit.Sample.Dialog.AzureFunc/Helpers/Builder/ISpeechletResponseBuilder.cs'"
        ],
        "content": "'AlexaSkillsKit.NET/AlexaSkillsKit.Lib/UI/SsmlOutputSpeech.cs'\n:﻿\n\nusing System;\nusing System.Collections.Generic;\n\nnamespace AlexaSkillsKit.UI\n{\n    public class SsmlOutputSpeech : OutputSpeech\n    {\n        public override string Type {\n            get { return \"SSML\";  }\n        }\n\n        public virtual string Ssml {\n            get;\n            set;\n        }\n    }\n}\n'AlexaSkillsKit.NET/AlexaSkillsKit.Sample.Dialog.AzureFunc/SampleSkillFactory.cs'\n:﻿using AlexaSkillsKit.Sample.Dialog.AzureFunc.Handlers;\nusing AlexaSkillsKit.Sample.Dialog.AzureFunc.Helpers;\nusing AlexaSkillsKit.Sample.Dialog.AzureFunc.Helpers.Builder;\nusing AlexaSkillsKit.Sample.Dialog.AzureFunc.Helpers.Log;\nusing AlexaSkillsKit.Speechlet;\nusing Microsoft.Azure.WebJobs.Host;\n\nnamespace AlexaSkillsKit.Sample.Dialog.AzureFunc\n{\n    public class SampleSkillFactory\n    {\n        public ILogHelper CreateLogHelper(TraceWriter log) {\n            return new TraceWriterLogHelper(log);\n        }\n\n        public SpeechletBase CreateSpeechletApp(ILogHelper logHelper)\n        {\n            var responseBuilder = new SpeechletResponseBuilder();\n            var app = new SampleSkill(logHelper);\n            app.Register(IntentNames.SampleIntent1, new SampleIntent1Handler(responseBuilder, logHelper));\n            app.Register(IntentNames.SampleIntent2, new SampleIntent2Handler(responseBuilder, logHelper));\n            app.Register(IntentNames.SampleIntent3, new SampleIntent3Handler(responseBuilder, logHelper));\n            app.RegisterDefault(new DefaultHandler(responseBuilder, logHelper));\n            return app;\n        }\n    }\n}\n'AlexaSkillsKit.NET/AlexaSkillsKit.Sample.Dialog.AzureFunc/Helpers/Builder/ISpeechletResponseBuilder.cs'\n:﻿using AlexaSkillsKit.Speechlet;\nusing AlexaSkillsKit.UI;\n\nnamespace AlexaSkillsKit.Sample.Dialog.AzureFunc.Helpers.Builder\n{\n    public interface ISpeechletResponseBuilder\n    {\n        SpeechletResponse Build();\n        ISpeechletResponseBuilder KeepSession();\n        ISpeechletResponseBuilder NoSession();\n        ISpeechletResponseBuilder Say(OutputSpeech outputSpeech);\n        ISpeechletResponseBuilder Say(string text);\n        ISpeechletResponseBuilder SaySsml(string ssml);\n        ISpeechletResponseBuilder WithCard(Card card);\n        ISpeechletResponseBuilder WithDirective(Directive directive);\n    }\n}",
        "gt": [
            "'AlexaSkillsKit.NET/AlexaSkillsKit.Lib/UI/SsmlOutputSpeech.cs'",
            "'AlexaSkillsKit.NET/AlexaSkillsKit.Sample.Dialog.AzureFunc/Helpers/Builder/ISpeechletResponseBuilder.cs'",
            "'AlexaSkillsKit.NET/AlexaSkillsKit.Sample.Dialog.AzureFunc/SampleSkillFactory.cs'"
        ]
    },
    {
        "files": [
            "'xamarin-samples/TaskyProPortableNuget/TaskyPortableLibrary/BusinessEntityBase.cs'",
            "'xamarin-samples/TaskyProPortableNuget/TaskyPortableLibrary/Task.cs'",
            "'xamarin-samples/TaskyL10n/TaskyiOS/TaskDialog.cs'"
        ],
        "content": "'xamarin-samples/TaskyProPortableNuget/TaskyPortableLibrary/BusinessEntityBase.cs'\n:using System;\nusing SQLite.Net.Attributes;\n\nnamespace Tasky.BL.Contracts {\n\n\n\n\tpublic abstract class BusinessEntityBase : IBusinessEntity {\n\t\tpublic BusinessEntityBase ()\n\t\t{\n\t\t}\n\n\n\n\n\t\t[PrimaryKey, AutoIncrement]\n        public int ID { get; set; }\n\t}\n}\n\n\n'xamarin-samples/TaskyProPortableNuget/TaskyPortableLibrary/Task.cs'\n:using System;\nusing Tasky.BL.Contracts;\nusing SQLite.Net.Attributes;\n\nnamespace Tasky.BL\n{\n\n\n\n\tpublic class Task : IBusinessEntity\n\t{\n\t\tpublic Task ()\n\t\t{\n\t\t}\n\n\t\t[PrimaryKey, AutoIncrement]\n        public int ID { get; set; }\n\t\tpublic string Name { get; set; }\n\t\tpublic string Notes { get; set; }\n\n\t\tpublic bool Done { get; set; }\n\t}\n}\n\n\n'xamarin-samples/TaskyL10n/TaskyiOS/TaskDialog.cs'\n:using System;\nusing UIKit;\nusing Tasky.BL;\nusing MonoTouch.Dialog;\n\nnamespace Tasky {\n\n\n\n\n\n\tpublic class TaskDialog {\n\t\tpublic TaskDialog (TodoItem task)\n\t\t{\n\t\t\tName = task.Name;\n\t\t\tNotes = task.Notes;\n\t\t\tDone = task.Done;\n\t\t}\n\n\t\t[Localize]\n\t\t[Entry(\"task name\")]\n\t\tpublic string Name { get; set; }\n\n\t\t[Localize]\n\t\t[Entry(\"other task info\")]\n\t\tpublic string Notes { get; set; }\n\n\n\t\t[Localize]\n\t\t[Entry(\"Done\")]\n\t\tpublic bool Done { get; set; }\n\n\t\t[Localize]\n\t\t[Section (\"\")]\n\t\t[OnTap (\"SaveTask\")]\n\t\t[Alignment (UITextAlignment.Center)]\n    \tpublic string Save;\n\n\t\t[Localize]\n\t\t[Section (\"\")]\n\t\t[OnTap (\"DeleteTask\")]\n\t\t[Alignment (UITextAlignment.Center)]\n    \tpublic string Delete;\n\t}\n}",
        "gt": [
            "'xamarin-samples/TaskyProPortableNuget/TaskyPortableLibrary/BusinessEntityBase.cs'",
            "'xamarin-samples/TaskyProPortableNuget/TaskyPortableLibrary/Task.cs'",
            "'xamarin-samples/TaskyL10n/TaskyiOS/TaskDialog.cs'"
        ]
    },
    {
        "files": [
            "'ReactiveGit/src/ReactiveGit.Gui.WPF/ViewModel/AppBootstrapper.cs'",
            "'ReactiveGit/src/ReactiveGit.Gui.Core/Model/Factories/IRepositoryFactory.cs'",
            "'ReactiveGit/src/ReactiveGit.Gui.WPF/MainWindow.xaml.cs'",
            "'ReactiveGit/src/ReactiveGit.Gui.WPF/Factories/DefaultRepositoryFactory.cs'"
        ],
        "content": "'ReactiveGit/src/ReactiveGit.Gui.WPF/ViewModel/AppBootstrapper.cs'\n:﻿\n\n\n\nusing System;\n\nusing ReactiveGit.Gui.Core.ExtensionMethods;\nusing ReactiveGit.Gui.Core.Model.Factories;\nusing ReactiveGit.Gui.Core.ViewModel;\nusing ReactiveGit.Gui.Core.ViewModel.Branches;\nusing ReactiveGit.Gui.Core.ViewModel.CommitHistory;\nusing ReactiveGit.Gui.Core.ViewModel.Factories;\nusing ReactiveGit.Gui.Core.ViewModel.Output;\nusing ReactiveGit.Gui.Core.ViewModel.RefLog;\nusing ReactiveGit.Gui.Core.ViewModel.Repository;\nusing ReactiveGit.Gui.Core.ViewModel.Tag;\nusing ReactiveGit.Gui.WPF.Factories;\nusing ReactiveGit.Gui.WPF.View;\n\nusing ReactiveUI;\n\nusing Splat;\n\nnamespace ReactiveGit.Gui.WPF.ViewModel\n{\n\n\n\n    public class AppBootstrapper : ReactiveObject, IScreen\n    {\n\n\n\n\n        public AppBootstrapper(IReadonlyDependencyResolver resolver = null, IMutableDependencyResolver dependencyResolver = null, RoutingState testRouter = null)\n        {\n            Router = testRouter ?? new RoutingState();\n            resolver = resolver ?? Locator.Current;\n            dependencyResolver = dependencyResolver ?? Locator.CurrentMutable;\n\n            RegisterParts(dependencyResolver);\n\n\n            Router.Navigate.Execute(resolver.GetService<IMainViewModel>()).Subscribe();\n        }\n\n\n        public RoutingState Router { get; }\n\n\n\n        private void RegisterParts(IMutableDependencyResolver dependencyResolver)\n        {\n\n\n            Locator.CurrentMutable.InitializeSplat();\n            Locator.CurrentMutable.InitializeReactiveUI();\n\n            dependencyResolver.RegisterConstant<IScreen>(this);\n            dependencyResolver.RegisterConstant<IRepositoryViewModelFactory>(new DefaultRepositoryViewModelFactory());\n            dependencyResolver.RegisterConstant<IRepositoryFactory>(new DefaultRepositoryFactory());\n            dependencyResolver.RegisterConstant<IWindowLayoutViewModel>(new WindowLayoutViewModel());\n            dependencyResolver.Register<ILayoutViewModel>(() => new LayoutViewModel());\n\n            var locator = Locator.Current;\n\n            dependencyResolver.Register<IMainViewModel>(() => new MainViewModel(locator.GetService<IScreen>(), locator.GetService<IRepositoryFactory>(), locator.GetService<IRepositoryViewModelFactory>()));\n            dependencyResolver.Register<IViewFor<IMainViewModel>>(() => new MainView());\n            dependencyResolver.Register<IViewFor<IBranchViewModel>>(() => new BranchesView());\n            dependencyResolver.Register<IViewFor<IRefLogViewModel>>(() => new RefLogView());\n            dependencyResolver.Register<IViewFor<ICommitHistoryViewModel>>(() => new HistoryView());\n            dependencyResolver.Register<IViewFor<IOutputViewModel>>(() => new OutputView());\n            dependencyResolver.Register<IViewFor<IRepositoryDocumentViewModel>>(() => new RepositoryView());\n            dependencyResolver.Register<IViewFor<ITagsViewModel>>(() => new TagView());\n        }\n    }\n}\n'ReactiveGit/src/ReactiveGit.Gui.Core/Model/Factories/IRepositoryFactory.cs'\n:﻿\n\n\n\nusing ReactiveGit.Library.Core.Managers;\n\nnamespace ReactiveGit.Gui.Core.Model.Factories\n{\n\n\n\n    public interface IRepositoryFactory\n    {\n\n\n\n\n        IRepositoryCreator CreateRepositoryCreator();\n\n\n\n\n\n\n        IRepositoryDetails CreateRepositoryDetails(string repositoryDirectory);\n    }\n}\n'ReactiveGit/src/ReactiveGit.Gui.WPF/MainWindow.xaml.cs'\n:﻿\n\n\n\nusing System;\nusing System.ComponentModel;\nusing System.Reactive.Disposables;\nusing System.Windows;\nusing System.Windows.Threading;\n\nusing MahApps.Metro.Controls.Dialogs;\n\nusing ReactiveGit.Gui.Core.ExtensionMethods;\nusing ReactiveGit.Gui.Core.Interactions;\nusing ReactiveGit.Gui.WPF.ViewModel;\n\nusing ReactiveUI;\n\nusing Splat;\n\nnamespace ReactiveGit.Gui.WPF\n{\n\n\n\n    public partial class MainWindow : IActivatableView\n    {\n\n        public MainWindow()\n        {\n            InitializeComponent();\n\n            AppBootstrapper = new AppBootstrapper();\n            DataContext = AppBootstrapper;\n            WindowLayoutViewModel = Locator.Current.GetService<IWindowLayoutViewModel>();\n            WindowLayoutViewModel.Window = this;\n\n            this.WhenActivated(\n                d =>\n                {\n                    d(CommonInteractions.CheckToProceed.RegisterHandler(\n                        async interaction =>\n                        {\n                            MessageDialogResult shouldContinue =\n                                            await\n                                                this.ShowMessageAsync(\n                                                    \"Please confirm\",\n                                                    interaction.Input,\n                                                    MessageDialogStyle.AffirmativeAndNegative).ConfigureAwait(false);\n\n                            interaction.SetOutput(shouldContinue == MessageDialogResult.Affirmative);\n                        }));\n\n                    d(CommonInteractions.GetStringResponse.RegisterHandler(\n                        async interaction =>\n                        {\n                            string input = await this.ShowInputAsync(\"Please confirm\", interaction.Input).ConfigureAwait(false);\n                            interaction.SetOutput(input);\n                        }));\n\n                    d(this.WhenAnyValue(x => x.AppBootstrapper).BindTo(this, x => x.DataContext));\n                });\n        }\n\n\n\n\n        public AppBootstrapper AppBootstrapper { get; protected set; }\n\n\n\n\n        public IWindowLayoutViewModel WindowLayoutViewModel { get; protected set; }\n\n\n        protected override void OnSourceInitialized(EventArgs e)\n        {\n            base.OnSourceInitialized(e);\n            WindowLayoutViewModel.Load.InvokeCommand();\n        }\n\n\n\n\n        private void Window_Closed(object sender, EventArgs e)\n        {\n\n            Application.Current.Dispatcher.ShutdownFinished += (o, args) => Environment.Exit(0);\n            Application.Current.Dispatcher.BeginInvokeShutdown(DispatcherPriority.Normal);\n        }\n\n        private void OnWindowClosing(object sender, CancelEventArgs e)\n        {\n            WindowLayoutViewModel.Save.InvokeCommand();\n        }\n    }\n}\n'ReactiveGit/src/ReactiveGit.Gui.WPF/Factories/DefaultRepositoryFactory.cs'\n:﻿\n\n\n\nusing ReactiveGit.Gui.Core.Model;\nusing ReactiveGit.Gui.Core.Model.Factories;\nusing ReactiveGit.Library.Core.Managers;\nusing ReactiveGit.Library.RunProcess.Managers;\n\nnamespace ReactiveGit.Gui.WPF.Factories\n{\n\n\n\n    public class DefaultRepositoryFactory : IRepositoryFactory\n    {\n\n        public IRepositoryCreator CreateRepositoryCreator()\n        {\n            return new RepositoryCreator(x => new GitProcessManager(x));\n        }\n\n\n        public IRepositoryDetails CreateRepositoryDetails(string repositoryDirectory)\n        {\n            return new RepositoryDetails(repositoryDirectory);\n        }\n    }\n}",
        "gt": [
            "'ReactiveGit/src/ReactiveGit.Gui.Core/Model/Factories/IRepositoryFactory.cs'",
            "'ReactiveGit/src/ReactiveGit.Gui.WPF/Factories/DefaultRepositoryFactory.cs'",
            "'ReactiveGit/src/ReactiveGit.Gui.WPF/ViewModel/AppBootstrapper.cs'",
            "'ReactiveGit/src/ReactiveGit.Gui.WPF/MainWindow.xaml.cs'"
        ]
    },
    {
        "files": [
            "'Idle-Miner/Assets/Plugins/Zenject/Source/Providers/IProviderExtensions.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Startup/StartupSignals.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Commands/LoadStaticDataCommand.cs'"
        ],
        "content": "'Idle-Miner/Assets/Plugins/Zenject/Source/Providers/IProviderExtensions.cs'\n:using System;\nusing System.Collections.Generic;\nusing ModestTree;\nusing Zenject.Internal;\n\nnamespace Zenject\n{\n    public static class IProviderExtensions\n    {\n        static readonly List<TypeValuePair> EmptyArgList = new List<TypeValuePair>();\n\n        public static void GetAllInstancesWithInjectSplit(\n            this IProvider creator, InjectContext context, out Action injectAction, List<object> buffer)\n        {\n            creator.GetAllInstancesWithInjectSplit(\n                context, EmptyArgList, out injectAction, buffer);\n        }\n\n        public static void GetAllInstances(\n            this IProvider creator, InjectContext context, List<object> buffer)\n        {\n            creator.GetAllInstances(context, EmptyArgList, buffer);\n        }\n\n        public static void GetAllInstances(\n            this IProvider creator, InjectContext context, List<TypeValuePair> args, List<object> buffer)\n        {\n            Assert.IsNotNull(context);\n\n            Action injectAction;\n            creator.GetAllInstancesWithInjectSplit(context, args, out injectAction, buffer);\n\n            if (injectAction != null)\n            {\n                injectAction.Invoke();\n            }\n        }\n\n        public static object TryGetInstance(\n            this IProvider creator, InjectContext context)\n        {\n            return creator.TryGetInstance(context, EmptyArgList);\n        }\n\n        public static object TryGetInstance(\n            this IProvider creator, InjectContext context, List<TypeValuePair> args)\n        {\n            var allInstances = ZenPools.SpawnList<object>();\n\n            try\n            {\n                creator.GetAllInstances(context, args, allInstances);\n\n                if (allInstances.Count == 0)\n                {\n                    return null;\n                }\n\n                Assert.That(allInstances.Count == 1,\n                    \"Provider returned multiple instances when one or zero was expected\");\n\n                return allInstances[0];\n            }\n            finally\n            {\n                ZenPools.DespawnList(allInstances);\n            }\n        }\n\n        public static object GetInstance(\n            this IProvider creator, InjectContext context)\n        {\n            return creator.GetInstance(context, EmptyArgList);\n        }\n\n        public static object GetInstance(\n            this IProvider creator, InjectContext context, List<TypeValuePair> args)\n        {\n            var allInstances = ZenPools.SpawnList<object>();\n\n            try\n            {\n                creator.GetAllInstances(context, args, allInstances);\n\n                Assert.That(allInstances.Count > 0,\n                    \"Provider returned zero instances when one was expected when looking up type '{0}'\", context.MemberType);\n\n                Assert.That(allInstances.Count == 1,\n                    \"Provider returned multiple instances when only one was expected when looking up type '{0}'\", context.MemberType);\n\n                return allInstances[0];\n            }\n            finally\n            {\n                ZenPools.DespawnList(allInstances);\n            }\n        }\n    }\n}\n\n'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Startup/StartupSignals.cs'\n:﻿using PG.IdleMiner.Models.DataModels;\nusing RSG;\nusing Zenject;\n\nnamespace PG.IdleMiner.Contexts.Startup\n{\n    public class LoadStaticDataSignal\n    {\n        public Promise Promise;\n    }\n\n    public class LoadUserDataSignal\n    {\n        public Promise Promise;\n    }\n    public class SaveUserDataSignal { }\n\n    public class CreateUserDataSignal\n    {\n        public UserData UserData;\n        public Promise OnUserCreated;\n\n        public CreateUserDataSignal(UserData userData, Promise promise)\n        {\n            UserData = userData;\n            OnUserCreated = promise;\n        }\n    }\n}\n'Idle-Miner/Assets/Scripts/IdleMiner/Commands/LoadStaticDataCommand.cs'\n:﻿using System;\nusing System.IO;\nusing Newtonsoft.Json;\nusing PG.Core.Commands;\nusing PG.IdleMiner.Contexts.Startup;\nusing PG.IdleMiner.Misc;\nusing PG.IdleMiner.Models;\nusing PG.IdleMiner.Models.DataModels;\nusing RSG;\nusing UnityEngine;\nusing Zenject;\n\nnamespace PG.IdleMiner.Commands\n{\n    public class LoadStaticDataCommand : BaseCommand\n    {\n        [Inject] private readonly StaticDataModel _staticDataModel;\n\n        public void Execute(LoadStaticDataSignal signal)\n        {\n            var sequence = Promise.Sequence(\n                () => LoadMetaJson(Constants.MetaDataFile)\n\n            );\n\n            sequence\n                .Then(() =>\n                    {\n                        Debug.Log(string.Format(\"{0} , static data load completed!\", this));\n                        signal.Promise.Resolve();\n                    }\n                )\n                .Catch(e =>\n                    {\n                        Debug.LogError(string.Format(\"{0} : failed to load static data, error message = {1}\\n{2}\", this,\n                            e.Message, e.StackTrace));\n                        signal.Promise.Reject(e);\n                    }\n                );\n        }\n\n\n        private IPromise LoadMetaJson(string metaFileName)\n        {\n            Promise promiseReturn = new Promise();\n\n            try\n            {\n                string path = Path.Combine(Application.streamingAssetsPath, metaFileName);\n\n                StreamReader reader = new StreamReader(path);\n                MetaData metaData = JsonConvert.DeserializeObject<MetaData>(reader.ReadToEnd());\n                reader.Close();\n\n                _staticDataModel.SeedMetaData(metaData);\n\n                promiseReturn.Resolve();\n            }\n            catch(Exception ex)\n            {\n                promiseReturn.Reject(ex);\n            }\n\n            return promiseReturn;\n        }\n    }\n}",
        "gt": [
            "'Idle-Miner/Assets/Plugins/Zenject/Source/Providers/IProviderExtensions.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Startup/StartupSignals.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Commands/LoadStaticDataCommand.cs'"
        ]
    },
    {
        "files": [
            "'puyotools/src/PuyoTools.Core/Archives/Formats/Pvm/PvmReaderEntry.cs'",
            "'puyotools/src/PuyoTools.App.UI/Formats/Archives/WriterSettings/AfsWriterSettings.cs'",
            "'puyotools/src/PuyoTools.App.Shared/Formats/Archives/PvmFormat.cs'"
        ],
        "content": "'puyotools/src/PuyoTools.Core/Archives/Formats/Pvm/PvmReaderEntry.cs'\n:﻿using PuyoTools.Core;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PuyoTools.Archives.Formats.Pvm\n{\n    public class PvmReaderEntry : ArchiveReaderEntry\n    {\n        public PvmReaderEntry(Stream stream, long position, long length, string? name, uint? globalIndex)\n            : base(stream, position, length, name)\n        {\n            GlobalIndex = globalIndex;\n        }\n\n\n\n\n        public uint? GlobalIndex { get; }\n\n        public override Stream Open()\n        {\n\n            if (!GlobalIndex.HasValue)\n            {\n                return base.Open();\n            }\n\n            MemoryStream stream = new((int)(Length + 16));\n            using BinaryWriter writer = new(stream, Encoding.UTF8, true);\n\n\n            writer.Write(PvmConstants.GbixMagicCode);\n            writer.WriteInt32(8);\n            writer.WriteUInt32(GlobalIndex.Value);\n            writer.WriteInt32(0);\n\n\n            base.Open().CopyTo(stream);\n\n            stream.Seek(0, SeekOrigin.Begin);\n\n            return stream;\n        }\n    }\n}\n\n'puyotools/src/PuyoTools.App.UI/Formats/Archives/WriterSettings/AfsWriterSettings.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Data;\nusing System.Linq;\nusing System.Text;\nusing System.Windows.Forms;\nusing PuyoTools.GUI;\nusing PuyoTools.Core;\nusing PuyoTools.Core.Archives;\nusing PuyoTools.App.Formats.Archives;\n\nnamespace PuyoTools.Formats.Archives.WriterSettings\n{\n    public partial class AfsWriterSettings : ModuleSettingsControl, IArchiveFormatOptions\n    {\n        public AfsWriterSettings()\n        {\n            InitializeComponent();\n\n            blockSizeBox.SelectedIndex = 0;\n        }\n\n        public void MapTo(LegacyArchiveWriter obj)\n        {\n            SetModuleSettings(obj);\n        }\n\n        public override void SetModuleSettings(IModule module)\n        {\n            AfsArchiveWriter archive = (AfsArchiveWriter)module;\n\n            archive.BlockSize = int.Parse(blockSizeBox.GetItemText(blockSizeBox.SelectedItem));\n\n            if (afsVersion2Radio.Checked)\n            {\n                archive.Version = AfsArchiveWriter.AfsVersion.Version2;\n            }\n            else\n            {\n                archive.Version = AfsArchiveWriter.AfsVersion.Version1;\n            }\n\n            archive.HasTimestamps = hasTimestampsCheckbox.Checked;\n        }\n    }\n}\n\n'puyotools/src/PuyoTools.App.Shared/Formats/Archives/PvmFormat.cs'\n:﻿using PuyoTools.Archives;\nusing PuyoTools.Archives.Formats.Pvm;\nusing PuyoTools.Core;\nusing PuyoTools.Core.Archives;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PuyoTools.App.Formats.Archives\n{\n\n    internal partial class PvmFormat : IArchiveFormat\n    {\n        private PvmFormat() { }\n\n\n\n\n        internal static PvmFormat Instance { get; } = new PvmFormat();\n\n        public string Name => \"PVM\";\n\n        public string FileExtension => \".pvm\";\n\n        public ArchiveBase GetCodec() => new PvmArchive();\n\n        public ArchiveReader CreateReader(Stream source) => new PvmReader(source);\n\n        public ArchiveWriter CreateWriter(Stream destination) => new PvmWriter(destination);\n\n        public bool Identify(Stream source, string filename) => PvmReader.IsFormat(source);\n    }\n}\n",
        "gt": [
            "'puyotools/src/PuyoTools.Core/Archives/Formats/Pvm/PvmReaderEntry.cs'",
            "'puyotools/src/PuyoTools.App.Shared/Formats/Archives/PvmFormat.cs'",
            "'puyotools/src/PuyoTools.App.UI/Formats/Archives/WriterSettings/AfsWriterSettings.cs'"
        ]
    },
    {
        "files": [
            "'Transformalize/src/Transformalize/Contracts/ITransform.cs'",
            "'Transformalize/src/Transformalize/Transforms/LengthTransform.cs'",
            "'Transformalize/src/Tests/Test.Unit.Shared/TestConnection.cs'",
            "'Transformalize/src/Providers/File/File.Shared/Transforms/FileExtTransform.cs'"
        ],
        "content": "'Transformalize/src/Transformalize/Contracts/ITransform.cs'\n:#region license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nnamespace Transformalize.Contracts {\n\n\n\n\n    public interface ITransform : IOperation {\n        string Returns { get; set; }\n    }\n\n}\n'Transformalize/src/Transformalize/Transforms/LengthTransform.cs'\n:#region license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing System;\nusing System.Collections.Generic;\nusing Transformalize.Contracts;\n\nnamespace Transformalize.Transforms {\n\n   public class LengthTransform : BaseTransform {\n\n      private readonly Func<IRow, object> _transform;\n\n      public LengthTransform(IContext context = null) : base(context, \"int\") {\n\n         if (IsMissingContext()) {\n            return;\n         }\n\n         var input = SingleInput();\n         var lastOperation = LastOperation();\n\n         if (lastOperation != null && lastOperation.ProducesArray) {\n            _transform = row => ((string[])row[input]).Length;\n         } else {\n            var typeReceived = Received();\n\n            switch (typeReceived) {\n               case \"byte[]\":\n                  _transform = row => ((byte[])row[input]).Length;\n                  break;\n               default:\n                  _transform = row => row[input].ToString().Length;\n                  break;\n            }\n         }\n      }\n\n      public override IRow Operate(IRow row) {\n         row[Context.Field] = _transform(row);\n         return row;\n      }\n\n\n      public override IEnumerable<OperationSignature> GetSignatures() {\n         yield return new OperationSignature(\"length\") { Parameters = new List<OperationParameter>(1) { new OperationParameter(\"length\", \"0\") } };\n         yield return new OperationSignature(\"len\");\n      }\n   }\n}\n'Transformalize/src/Tests/Test.Unit.Shared/TestConnection.cs'\n:﻿#region license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing System.Collections.Generic;\nusing System.Linq;\nusing Autofac;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Transformalize.Configuration;\nusing Transformalize.Containers.Autofac;\nusing Transformalize.Contracts;\nusing Transformalize.Logging;\nusing Transformalize.Providers.File.Transforms;\nusing Transformalize.Transforms;\nusing System.IO;\n\nnamespace Tests {\n\n    [TestClass]\n    public class TestConnectionTransform {\n\n        [TestMethod]\n        public void FileStuff() {\n\n            var sep = Path.DirectorySeparatorChar.ToString();\n            var testPath = string.Join(sep, new string[] { \"server\", \"projects\", \"ETL\", \"2016-04-24.txt\" });\n            var xml = $@\"<add name='TestProcess'>\n   <connections>\n     <add name='input' provider='internal' file='c:\\temp.txt' port='6' />\n     <add name='other' provider='internal' file='{testPath}' />\n   </connections>\n   <entities>\n     <add name='TestData'>\n       <rows>\n         <add Field1='1' Field2='2' Field3='3' />\n       </rows>\n       <fields>\n         <add name='Field1' />\n         <add name='Field2' />\n         <add name='Field3' />\n       </fields>\n       <calculated-fields>\n         <add name='File' type='string' t='connection(input,File)' />\n         <add name='Port' type='int' t='connection(input,Port).convert()' />\n         <add name='FileName' length='1024' t='connection(other,File).filename()' />\n         <add name='FileNameNoExt' length='1024' t='connection(other,File).filename(false)' />\n         <add name='FileExt' length='1024' t='connection(other,File).fileext()' />\n         <add name='FilePath' length='1024' t='connection(other,File).filepath()' />\n       </calculated-fields>\n     </add>\n   </entities>\n</add>\";\n\n            var transforms = new List<TransformHolder> {\n            new TransformHolder((c) => new FileNameTransform(c), new FileNameTransform().GetSignatures()),\n            new TransformHolder((c) => new FileExtTransform(c), new FileExtTransform().GetSignatures()),\n            new TransformHolder((c) => new FilePathTransform(c), new FilePathTransform().GetSignatures())\n         }.ToArray();\n\n            using (var outer = new ConfigurationContainer(transforms).CreateScope(xml, new DebugLogger())) {\n                var process = outer.Resolve<Process>();\n\n                using (var inner = new Container(transforms).CreateScope(process, new DebugLogger())) {\n                    var output = inner.Resolve<IProcessController>().Read().ToArray();\n\n                    var f = process.Entities.First().CalculatedFields;\n                    var file = f.First(cf => cf.Name == \"File\");\n                    var port = f.First(cf => cf.Name == \"Port\");\n                    var fileName = f.First(cf => cf.Name == \"FileName\");\n                    var fileNameNoExt = f.First(cf => cf.Name == \"FileNameNoExt\");\n                    var fileExt = f.First(cf => cf.Name == \"FileExt\");\n                    var filePath = f.First(cf => cf.Name == \"FilePath\");\n\n                    Assert.AreEqual(@\"c:\\temp.txt\", output[0][file]);\n                    Assert.AreEqual(6, output[0][port]);\n                    Assert.AreEqual(@\"2016-04-24.txt\", output[0][fileName]);\n                    Assert.AreEqual(@\"2016-04-24\", output[0][fileNameNoExt]);\n                    Assert.AreEqual(@\".txt\", output[0][fileExt]);\n                    Assert.IsTrue(output[0][filePath].ToString().EndsWith(testPath));\n                }\n            }\n        }\n    }\n}\n\n'Transformalize/src/Providers/File/File.Shared/Transforms/FileExtTransform.cs'\n:﻿#region license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing System.Collections.Generic;\nusing System.IO;\nusing Transformalize.Configuration;\nusing Transformalize.Contracts;\nusing Transformalize.Transforms;\n\nnamespace Transformalize.Providers.File.Transforms {\n\n   public class FileExtTransform : StringTransform {\n        private readonly Field _input;\n\n        public FileExtTransform(IContext context = null) : base(context, \"string\") {\n            if (IsMissingContext()) {\n                return;\n            }\n\n            if (IsNotReceiving(\"string\")) {\n                return;\n            }\n            _input = SingleInput();\n        }\n\n        public override IRow Operate(IRow row) {\n            var value = (string)row[_input];\n            row[Context.Field] = Path.HasExtension(value) ? Path.GetExtension(value) : string.Empty;\n\n            return row;\n        }\n\n        public override IEnumerable<OperationSignature> GetSignatures() {\n            yield return new OperationSignature(\"fileext\");\n        }\n    }\n}",
        "gt": [
            "'Transformalize/src/Transformalize/Contracts/ITransform.cs'",
            "'Transformalize/src/Transformalize/Transforms/LengthTransform.cs'",
            "'Transformalize/src/Providers/File/File.Shared/Transforms/FileExtTransform.cs'",
            "'Transformalize/src/Tests/Test.Unit.Shared/TestConnection.cs'"
        ]
    },
    {
        "files": [
            "'Fohjin/Fohjin.DDD.Example/Fohjin.DDD.EventHandlers/ClosedAccountCreatedEventHandler.cs'",
            "'Fohjin/Fohjin.DDD.Example/Test.Fohjin.DDD/Commands/All_commands_must_have_a_handler.cs'",
            "'Fohjin/Fohjin.DDD.Example/Fohjin.DDD.Configuration/EventHandlerHelper.cs'"
        ],
        "content": "'Fohjin/Fohjin.DDD.Example/Fohjin.DDD.EventHandlers/ClosedAccountCreatedEventHandler.cs'\n:using System;\nusing Fohjin.DDD.Events.Account;\nusing Fohjin.DDD.Reporting;\nusing Fohjin.DDD.Reporting.Dto;\n\nnamespace Fohjin.DDD.EventHandlers\n{\n    public class ClosedAccountCreatedEventHandler : IEventHandler<ClosedAccountCreatedEvent>\n    {\n        private readonly IReportingRepository _reportingRepository;\n\n        public ClosedAccountCreatedEventHandler(IReportingRepository reportingRepository)\n        {\n            _reportingRepository = reportingRepository;\n        }\n\n        public void Execute(ClosedAccountCreatedEvent theEvent)\n        {\n            var closedAccount = new ClosedAccountReport(theEvent.AccountId, theEvent.ClientId, theEvent.AccountName, theEvent.AccountNumber);\n            var closedAccountDetails = new ClosedAccountDetailsReport(theEvent.AccountId, theEvent.ClientId, theEvent.AccountName, 0, theEvent.AccountNumber);\n\n            _reportingRepository.Save(closedAccount);\n            _reportingRepository.Save(closedAccountDetails);\n\n            foreach (var ledger in theEvent.Ledgers)\n            {\n                var split = ledger.Value.Split(new[] { '|' });\n                var amount = Convert.ToDecimal(split[0]);\n                var account = split[1];\n                _reportingRepository.Save(new LedgerReport(Guid.NewGuid(), theEvent.AccountId, GetDescription(ledger.Key, account), amount));\n            }\n        }\n\n        private static string GetDescription(string transferType, string accountNumber)\n        {\n            if (transferType == \"CreditMutation\")\n                return \"Deposite\";\n\n            if (transferType == \"DebitMutation\")\n                return \"Withdrawl\";\n\n            if (transferType == \"CreditTransfer\")\n                return string.Format(\"Transfer to {0}\", accountNumber);\n\n            if (transferType == \"DebitTransfer\")\n                return string.Format(\"Transfer from {0}\", accountNumber);\n\n            if (transferType == \"CreditTransferFailed\")\n                return string.Format(\"Transfer to {0} failed\", accountNumber);\n\n            throw new Exception(string.Format(\"Transfer type '{0}' is not implemented\", transferType));\n        }\n    }\n}\n'Fohjin/Fohjin.DDD.Example/Test.Fohjin.DDD/Commands/All_commands_must_have_a_handler.cs'\n:using System;\nusing System.Linq;\nusing System.Text;\nusing Fohjin.DDD.Configuration;\nusing NUnit.Framework;\n\nnamespace Test.Fohjin.DDD.Commands\n{\n    [TestFixture]\n    public class All_commands_must_have_a_handler\n    {\n        [Test]\n        public void Verify_that_each_command_has_atleast_one_command_handler()\n        {\n            var commands = CommandHandlerHelper.GetCommands();\n            var commandHandlers = CommandHandlerHelper.GetCommandHandlers();\n\n            var stringBuilder = new StringBuilder();\n            foreach (var command in commands.Where(command => !commandHandlers.ContainsKey(command)))\n            {\n                stringBuilder.AppendLine(string.Format(\"No command handler found for command '{0}'\", command.FullName));\n                continue;\n            }\n            if (stringBuilder.Length > 0)\n                throw new Exception(string.Format(\"\\n\\nCommand handler exceptions:\\n{0}\\n\", stringBuilder));\n        }\n    }\n}\n'Fohjin/Fohjin.DDD.Example/Fohjin.DDD.Configuration/EventHandlerHelper.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Fohjin.DDD.EventHandlers;\nusing Fohjin.DDD.Events;\n\nnamespace Fohjin.DDD.Configuration\n{\n    public class EventHandlerHelper\n    {\n        public static IDictionary<Type, IList<Type>> GetEventHandlers()\n        {\n            var commands = new Dictionary<Type, IList<Type>>();\n            typeof(ClientCreatedEventHandler)\n                .Assembly\n                .GetExportedTypes()\n                .Where(x => x.GetInterfaces().Any(y => y.IsGenericType && y.GetGenericTypeDefinition() == typeof(IEventHandler<>)))\n                .ToList()\n                .ForEach(x => AddItem(commands, x));\n            return commands;\n        }\n\n        public static IEnumerable<Type> GetEvents()\n        {\n            return typeof(DomainEvent)\n                .Assembly\n                .GetExportedTypes()\n                .Where(x => x.BaseType == typeof(DomainEvent))\n                .ToList();\n        }\n\n        private static void AddItem(IDictionary<Type, IList<Type>> dictionary, Type type)\n        {\n            var theEvent = type.GetInterfaces()\n                .Where(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof(IEventHandler<>))\n                .First()\n                .GetGenericArguments()\n                .First();\n\n            if (!dictionary.ContainsKey(theEvent))\n                dictionary.Add(theEvent, new List<Type>());\n\n            dictionary[theEvent].Add(type);\n        }\n    }\n}",
        "gt": [
            "'Fohjin/Fohjin.DDD.Example/Fohjin.DDD.EventHandlers/ClosedAccountCreatedEventHandler.cs'",
            "'Fohjin/Fohjin.DDD.Example/Fohjin.DDD.Configuration/EventHandlerHelper.cs'",
            "'Fohjin/Fohjin.DDD.Example/Test.Fohjin.DDD/Commands/All_commands_must_have_a_handler.cs'"
        ]
    },
    {
        "files": [
            "'DxR/Assets/HoloToolkit/Input/Scripts/Cursor/SpriteCursor.cs'",
            "'DxR/Assets/HoloToolkit/UX/Scripts/Editor/CompoundButtonSaveInterceptor.cs'",
            "'DxR/Assets/HoloToolkit/Utilities/Scripts/HeadsetAdjustment.cs'",
            "'DxR/Assets/HoloToolkit/UX/Scripts/Buttons/CompoundButtonText.cs'"
        ],
        "content": "'DxR/Assets/HoloToolkit/Input/Scripts/Cursor/SpriteCursor.cs'\n:﻿\n\n\nusing System;\nusing UnityEngine;\n\nnamespace HoloToolkit.Unity.InputModule\n{\n\n\n\n    public class SpriteCursor : Cursor\n    {\n        [Serializable]\n        public struct SpriteCursorDatum\n        {\n            public string Name;\n            public CursorStateEnum CursorState;\n            public Sprite CursorSprite;\n            public Color CursorColor;\n        }\n\n        [SerializeField]\n        public SpriteCursorDatum[] CursorStateData;\n\n\n\n\n        public SpriteRenderer TargetRenderer;\n\n\n\n\n        protected override void OnEnable()\n        {\n            if(TargetRenderer == null)\n            {\n                TargetRenderer = GetComponentInChildren<SpriteRenderer>();\n            }\n\n            base.OnEnable();\n        }\n\n\n\n\n\n\n        public override void OnCursorStateChange(CursorStateEnum state)\n        {\n            base.OnCursorStateChange(state);\n\n            if (state != CursorStateEnum.Contextual)\n            {\n                for (int i = 0; i < CursorStateData.Length; i++)\n                {\n                    if (CursorStateData[i].CursorState == state)\n                    {\n                        SetCursorState(CursorStateData[i]);\n                    }\n                }\n            }\n        }\n\n\n\n\n\n        private void SetCursorState(SpriteCursorDatum stateDatum)\n        {\n\n            if (TargetRenderer != null)\n            {\n                TargetRenderer.sprite = stateDatum.CursorSprite;\n                TargetRenderer.color = stateDatum.CursorColor;\n            }\n        }\n\n    }\n\n}\n'DxR/Assets/HoloToolkit/UX/Scripts/Editor/CompoundButtonSaveInterceptor.cs'\n:﻿\n\n\n\nusing UnityEditor;\nusing UnityEngine;\nusing HoloToolkit.Unity.Buttons;\n\npublic class CompoundButtonSaveInterceptor : UnityEditor.AssetModificationProcessor\n{\n    public static string[] OnWillSaveAssets(string[] paths)\n    {\n\n\n\n\n        CompoundButtonMesh[] meshButtons = GameObject.FindObjectsOfType<CompoundButtonMesh>();\n        foreach (CompoundButtonMesh meshButton in meshButtons)\n        {\n            meshButton.OnWillSaveScene();\n        }\n\n        CompoundButtonIcon[] iconButtons = GameObject.FindObjectsOfType<CompoundButtonIcon>();\n        foreach (CompoundButtonIcon iconButton in iconButtons)\n        {\n            iconButton.OnWillSaveScene();\n        }\n\n        return paths;\n    }\n}\n'DxR/Assets/HoloToolkit/Utilities/Scripts/HeadsetAdjustment.cs'\n:﻿\n\n\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\nusing HoloToolkit.Unity.InputModule;\n\nnamespace HoloToolkit.Unity\n{\n    public class HeadsetAdjustment : MonoBehaviour, IInputClickHandler, ISpeechHandler\n    {\n        public string NextSceneName;\n\n        private void Start()\n        {\n            InputManager.Instance.AddGlobalListener(gameObject);\n        }\n\n        public void OnInputClicked(InputClickedEventData eventData)\n        {\n            GotoNextScene();\n        }\n\n        public void OnSpeechKeywordRecognized(SpeechEventData eventData)\n        {\n            GotoNextScene();\n        }\n\n        private void GotoNextScene()\n        {\n            InputManager.Instance.RemoveGlobalListener(gameObject);\n\n            if (!string.IsNullOrEmpty(NextSceneName))\n            {\n                SceneManager.LoadScene(NextSceneName);\n            }\n            else\n            {\n                int sceneIndex = SceneManager.GetActiveScene().buildIndex;\n                SceneManager.LoadScene(sceneIndex + 1);\n            }\n        }\n    }\n}\n\n'DxR/Assets/HoloToolkit/UX/Scripts/Buttons/CompoundButtonText.cs'\n:﻿\n\n\n\nusing HoloToolkit.Unity;\nusing UnityEngine;\n\nnamespace HoloToolkit.Unity.Buttons\n{\n    [RequireComponent(typeof(CompoundButton))]\n    public class CompoundButtonText : ProfileButtonBase<ButtonTextProfile>\n    {\n        [DropDownComponent]\n        public TextMesh TextMesh;\n\n\n\n\n        [EditableProp]\n        public bool DisableText {\n            get {\n                return disableText;\n            }\n            set {\n                if (disableText != value) {\n                    disableText = value;\n                    UpdateStyle();\n                }\n            }\n        }\n\n        [ShowIfBoolValue(\"DisableText\", false)]\n        [TextAreaProp(30)]\n        public string Text {\n            get {\n                if (TextMesh == null) {\n                    return string.Empty;\n                }\n                return TextMesh.text;\n            }\n            set {\n                TextMesh.text = value;\n            }\n        }\n\n        [ShowIfBoolValue(\"DisableText\", false)]\n        [RangeProp(0f, 1f)]\n        public float Alpha {\n            get {\n                return alpha;\n            }\n            set {\n                if (value != alpha) {\n                    alpha = value;\n                    UpdateStyle();\n                }\n            }\n        }\n\n        [ShowIfBoolValue(\"DisableText\", false)]\n        [Tooltip(\"Disregard the text style in the profile\")]\n        public bool OverrideFontStyle = false;\n\n        [ShowIfBoolValue(\"OverrideFontStyle\")]\n        [ShowIfBoolValue(\"DisableText\", false)]\n        [Tooltip(\"Style to use for override.\")]\n        public FontStyle Style;\n\n        [ShowIfBoolValue(\"DisableText\", false)]\n        [Tooltip(\"Disregard the anchor in the profile.\")]\n        public bool OverrideAnchor = false;\n\n        [ShowIfBoolValue(\"OverrideAnchor\")]\n        [ShowIfBoolValue(\"DisableText\", false)]\n        [Tooltip(\"Anchor to use for override.\")]\n        public TextAnchor Anchor;\n\n        [ShowIfBoolValue(\"DisableText\", false)]\n        [Tooltip(\"Disregard the size in the profile.\")]\n        public bool OverrideSize = false;\n\n        [ShowIfBoolValue(\"OverrideSize\")]\n        [ShowIfBoolValue(\"DisableText\", false)]\n        [Tooltip(\"Size to use for override.\")]\n        public int Size = 72;\n\n        [ShowIfBoolValue(\"DisableText\", false)]\n        [Tooltip(\"When true, no offset is applied to the text object.\")]\n        public bool OverrideOffset = false;\n\n        [SerializeField]\n        [HideInMRTKInspector]\n        private float alpha = 1f;\n\n        [SerializeField]\n        [HideInMRTKInspector]\n        private bool disableText = false;\n\n        private void OnEnable()\n        {\n            UpdateStyle();\n        }\n\n        private void UpdateStyle()\n        {\n            if (TextMesh == null)\n            {\n                Debug.LogWarning(\"Text mesh was null in CompoundButtonText \" + name);\n                return;\n            }\n\n            if (DisableText)\n            {\n                TextMesh.gameObject.SetActive(false);\n            }\n            else\n            {\n\n                if (Profile != null)\n                {\n                    TextMesh.font = Profile.Font;\n                    TextMesh.fontStyle = Profile.Style;\n                    TextMesh.fontSize = OverrideSize ? Size : Profile.Size;\n                    TextMesh.fontStyle = OverrideFontStyle ? Style : Profile.Style;\n                    TextMesh.anchor = OverrideAnchor ? Anchor : Profile.Anchor;\n                    TextMesh.alignment = Profile.Alignment;\n                    Color c = Profile.Color;\n                    c.a = alpha;\n                    TextMesh.color = c;\n\n\n                    if (!OverrideOffset)\n                    {\n                        TextMesh.transform.localPosition = Profile.GetOffset(TextMesh.anchor);\n                    }\n\n                    TextMesh.gameObject.SetActive(true);\n                }\n            }\n        }\n\n        private void OnDrawGizmos ()\n        {\n            UpdateStyle();\n        }\n\n#if UNITY_EDITOR\n        [UnityEditor.CustomEditor(typeof(CompoundButtonText))]\n        public class CustomEditor : MRTKEditor { }\n#endif\n    }\n}",
        "gt": [
            "'DxR/Assets/HoloToolkit/Input/Scripts/Cursor/SpriteCursor.cs'",
            "'DxR/Assets/HoloToolkit/Utilities/Scripts/HeadsetAdjustment.cs'",
            "'DxR/Assets/HoloToolkit/UX/Scripts/Buttons/CompoundButtonText.cs'",
            "'DxR/Assets/HoloToolkit/UX/Scripts/Editor/CompoundButtonSaveInterceptor.cs'"
        ]
    },
    {
        "files": [
            "'ecsrx.roguelike2d/Assets/Plugins/Zenject/OptionalExtras/IntegrationTests/Tests/Misc/TestMonoKernelDecoration/KernelDecoratorInstaller.cs'",
            "'ecsrx.roguelike2d/Assets/Plugins/Zenject/Source/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder4.cs'",
            "'ecsrx.roguelike2d/Assets/Plugins/Zenject/OptionalExtras/IntegrationTests/Tests/Misc/TestMonoKernelDecoration/TestMonoKernelDecoration.cs'"
        ],
        "content": "'ecsrx.roguelike2d/Assets/Plugins/Zenject/OptionalExtras/IntegrationTests/Tests/Misc/TestMonoKernelDecoration/KernelDecoratorInstaller.cs'\n:using UnityEngine;\nusing Zenject;\n\nnamespace Zenject.Tests.TestAnimationStateBehaviourInject\n{\n    public class KernelDecoratorInstaller : Installer<KernelDecoratorInstaller>\n    {\n        public override void InstallBindings()\n        {\n            Container.BindInterfacesTo<DecoratableMonoKernel>().AsCached();\n            Container.Decorate<IDecoratableMonoKernel>().With<DelayedInitializeKernel>();\n        }\n    }\n}\n'ecsrx.roguelike2d/Assets/Plugins/Zenject/Source/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder4.cs'\n:using System;\n\nnamespace Zenject\n{\n    [NoReflectionBaking]\n    public class FactorySubContainerBinder<TParam1, TParam2, TParam3, TParam4, TContract>\n        : FactorySubContainerBinderWithParams<TContract>\n    {\n        public FactorySubContainerBinder(\n            DiContainer bindContainer, BindInfo bindInfo, FactoryBindInfo factoryBindInfo, object subIdentifier)\n            : base(bindContainer, bindInfo, factoryBindInfo, subIdentifier)\n        {\n        }\n\n        public ScopeConcreteIdArgConditionCopyNonLazyBinder ByMethod(\n#if !NET_4_6\n            ModestTree.Util.\n#endif\n            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod)\n        {\n            var subcontainerBindInfo = new SubContainerCreatorBindInfo();\n\n            ProviderFunc =\n                (container) => new SubContainerDependencyProvider(\n                    ContractType, SubIdentifier,\n                    new SubContainerCreatorByMethod<TParam1, TParam2, TParam3, TParam4>(\n                        container, subcontainerBindInfo, installerMethod), false);\n\n            return new ScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo);\n        }\n\n#if !NOT_UNITY3D\n        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewGameObjectMethod(\n#if !NET_4_6\n            ModestTree.Util.\n#endif\n            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod)\n        {\n            var gameObjectInfo = new GameObjectCreationParameters();\n\n            ProviderFunc =\n                (container) => new SubContainerDependencyProvider(\n                    ContractType, SubIdentifier,\n                    new SubContainerCreatorByNewGameObjectMethod<TParam1, TParam2, TParam3, TParam4>(\n                        container, gameObjectInfo, installerMethod), false);\n\n            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);\n        }\n\n        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(\n            Func<InjectContext, UnityEngine.Object> prefabGetter,\n#if !NET_4_6\n            ModestTree.Util.\n#endif\n            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod)\n        {\n            var gameObjectInfo = new GameObjectCreationParameters();\n\n            ProviderFunc =\n                (container) => new SubContainerDependencyProvider(\n                    ContractType, SubIdentifier,\n                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4>(\n                        container,\n                        new PrefabProviderCustom(prefabGetter),\n                        gameObjectInfo, installerMethod), false);\n\n            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);\n        }\n\n        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabMethod(\n            UnityEngine.Object prefab,\n#if !NET_4_6\n            ModestTree.Util.\n#endif\n            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod)\n        {\n            BindingUtil.AssertIsValidPrefab(prefab);\n\n            var gameObjectInfo = new GameObjectCreationParameters();\n\n            ProviderFunc =\n                (container) => new SubContainerDependencyProvider(\n                    ContractType, SubIdentifier,\n                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4>(\n                        container,\n                        new PrefabProvider(prefab),\n                        gameObjectInfo, installerMethod), false);\n\n            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);\n        }\n\n        public NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder ByNewPrefabResourceMethod(\n            string resourcePath,\n#if !NET_4_6\n            ModestTree.Util.\n#endif\n            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod)\n        {\n            BindingUtil.AssertIsValidResourcePath(resourcePath);\n\n            var gameObjectInfo = new GameObjectCreationParameters();\n\n            ProviderFunc =\n                (container) => new SubContainerDependencyProvider(\n                    ContractType, SubIdentifier,\n                    new SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4>(\n                        container,\n                        new PrefabProviderResource(resourcePath),\n                        gameObjectInfo, installerMethod), false);\n\n            return new NameTransformScopeConcreteIdArgConditionCopyNonLazyBinder(BindInfo, gameObjectInfo);\n        }\n#endif\n    }\n}\n\n\n'ecsrx.roguelike2d/Assets/Plugins/Zenject/OptionalExtras/IntegrationTests/Tests/Misc/TestMonoKernelDecoration/TestMonoKernelDecoration.cs'\n:using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing ModestTree.Util;\nusing NUnit.Framework;\nusing UnityEngine;\nusing UnityEngine.TestTools;\nusing Zenject;\nusing Zenject.Tests.TestAnimationStateBehaviourInject;\n\nnamespace Zenject.Tests.Misc.TestMonoKernelDecoration\n{\n    public class TestMonoKernelDecoration : ZenjectIntegrationTestFixture\n    {\n\n        [UnityTest]\n        public IEnumerator TestDelayedMonoKernelDecorator()\n        {\n            PreInstall();\n\n            Container.Rebind<InitializableManager>().To<InitializableManagerSpy>().AsCached();\n            KernelDecoratorInstaller.Install(Container);\n            PostInstall();\n\n            yield return new WaitForSeconds(1.0f);\n\n            InitializableManagerSpy initializableManager = SceneContext.Container.Resolve<InitializableManager>() as InitializableManagerSpy;\n            var initializedBeforeDelay = initializableManager.IsInitialized;\n\n            yield return new WaitForSeconds(6.0f);\n            var initializedAfterDelay = initializableManager.IsInitialized;\n\n            Assert.IsFalse(initializedBeforeDelay);\n            Assert.IsTrue(initializedAfterDelay);\n        }\n\n        private class InitializableManagerSpy : InitializableManager\n        {\n\n            public InitializableManagerSpy(List<IInitializable> initializables, List<ValuePair<Type, int>> priorities) : base(initializables, priorities){}\n\n            public bool IsInitialized => _hasInitialized;\n        }\n\n\n    }\n}",
        "gt": [
            "'ecsrx.roguelike2d/Assets/Plugins/Zenject/Source/Binding/Binders/Factory/FactoryFromBinder/SubContainerBinder/FactorySubContainerBinder4.cs'",
            "'ecsrx.roguelike2d/Assets/Plugins/Zenject/OptionalExtras/IntegrationTests/Tests/Misc/TestMonoKernelDecoration/KernelDecoratorInstaller.cs'",
            "'ecsrx.roguelike2d/Assets/Plugins/Zenject/OptionalExtras/IntegrationTests/Tests/Misc/TestMonoKernelDecoration/TestMonoKernelDecoration.cs'"
        ]
    },
    {
        "files": [
            "'Passenger/src/Passenger.Infrastructure/IoC/ContainerModule.cs'",
            "'Passenger/src/Passenger.Api/Startup.cs'",
            "'Passenger/src/Passenger.Infrastructure/EF/PassengerContext.cs'",
            "'Passenger/src/Passenger.Infrastructure/IoC/Modules/SettingsModule.cs'",
            "'Passenger/tests/Passenger.Tests.EndToEnd/Controllers/ControllerTestsBase.cs'"
        ],
        "content": "'Passenger/src/Passenger.Infrastructure/IoC/ContainerModule.cs'\n:using Autofac;\nusing Microsoft.Extensions.Configuration;\nusing Passenger.Infrastructure.IoC.Modules;\nusing Passenger.Infrastructure.Mappers;\n\nnamespace Passenger.Infrastructure.IoC\n{\n    public class ContainerModule : Autofac.Module\n    {\n        private readonly IConfiguration _configuration;\n\n        public ContainerModule(IConfiguration configuration)\n        {\n            _configuration = configuration;\n        }\n\n        protected override void Load(ContainerBuilder builder)\n        {\n            builder.RegisterInstance(AutoMapperConfig.Initialize())\n                .SingleInstance();\n            builder.RegisterModule<CommandModule>();\n            builder.RegisterModule<RepositoryModule>();\n            builder.RegisterModule<MongoModule>();\n            builder.RegisterModule<SqlModule>();\n            builder.RegisterModule<ServiceModule>();\n            builder.RegisterModule(new SettingsModule(_configuration));\n        }\n    }\n}\n'Passenger/src/Passenger.Api/Startup.cs'\n:using System;\nusing System.Text;\nusing Autofac;\nusing Autofac.Extensions.DependencyInjection;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.IdentityModel.Tokens;\nusing Newtonsoft.Json;\nusing NLog.Extensions.Logging;\nusing NLog.Web;\nusing Passenger.Api.Framework;\nusing Passenger.Core.Repositories;\nusing Passenger.Infrastructure.EF;\nusing Passenger.Infrastructure.IoC;\nusing Passenger.Infrastructure.IoC.Modules;\nusing Passenger.Infrastructure.Mappers;\nusing Passenger.Infrastructure.Mongo;\nusing Passenger.Infrastructure.Repositories;\nusing Passenger.Infrastructure.Services;\nusing Passenger.Infrastructure.Settings;\n\nnamespace Passenger.Api\n{\n    public class Startup\n    {\n        public IConfigurationRoot Configuration { get; }\n        public IContainer ApplicationContainer { get; private set; }\n\n        public Startup(IHostingEnvironment env)\n        {\n            var builder = new ConfigurationBuilder()\n                .SetBasePath(env.ContentRootPath)\n                .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\n                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n                .AddEnvironmentVariables();\n            Configuration = builder.Build();\n        }\n\n\n        public IServiceProvider ConfigureServices(IServiceCollection services)\n        {\n\n            services.AddAuthorization(x => x.AddPolicy(\"admin\", p => p.RequireRole(\"admin\")));\n            services.AddMemoryCache();\n            services.AddMvc()\n                    .AddJsonOptions(x => x.SerializerSettings.Formatting = Formatting.Indented);\n            services.AddEntityFrameworkSqlServer()\n                    .AddEntityFrameworkInMemoryDatabase()\n                    .AddDbContext<PassengerContext>();\n\n            var builder = new ContainerBuilder();\n            builder.Populate(services);\n            builder.RegisterModule(new ContainerModule(Configuration));\n            ApplicationContainer = builder.Build();\n\n            return new AutofacServiceProvider(ApplicationContainer);\n        }\n\n\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env,\n            ILoggerFactory loggerFactory, IApplicationLifetime appLifetime)\n        {\n\n\n            loggerFactory.AddNLog();\n            app.AddNLogWeb();\n            env.ConfigureNLog(\"nlog.config\");\n            var jwtSettings = app.ApplicationServices.GetService<JwtSettings>();\n            app.UseJwtBearerAuthentication(new JwtBearerOptions\n            {\n                AutomaticAuthenticate = true,\n                TokenValidationParameters = new TokenValidationParameters\n                {\n                    ValidIssuer = jwtSettings.Issuer,\n                    ValidateAudience = false,\n                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings.Key))\n                }\n            });\n\n            MongoConfigurator.Initialize();\n            var generalSettings = app.ApplicationServices.GetService<GeneralSettings>();\n            if(generalSettings.SeedData)\n            {\n                var dataInitializer = app.ApplicationServices.GetService<IDataInitializer>();\n                dataInitializer.SeedAsync();\n            }\n            app.UseExceptionHandler();\n            app.UseMvc();\n            appLifetime.ApplicationStopped.Register(() => ApplicationContainer.Dispose());\n        }\n    }\n}\n\n'Passenger/src/Passenger.Infrastructure/EF/PassengerContext.cs'\n:using Microsoft.EntityFrameworkCore;\nusing Microsoft.Extensions.Options;\nusing Passenger.Core.Domain;\n\nnamespace Passenger.Infrastructure.EF\n{\n    public class PassengerContext : DbContext\n    {\n        private readonly SqlSettings _settings;\n        public DbSet<User> Users { get; set; }\n\n        public PassengerContext(DbContextOptions<PassengerContext> options, SqlSettings settings) : base(options)\n        {\n            _settings = settings;\n        }\n\n        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)\n        {\n            if(_settings.InMemory)\n            {\n                optionsBuilder.UseInMemoryDatabase();\n\n                return;\n            }\n            optionsBuilder.UseSqlServer(_settings.ConnectionString);\n        }\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            var itemBuilder = modelBuilder.Entity<User>();\n            itemBuilder.HasKey(x => x.Id);\n        }\n    }\n}\n'Passenger/src/Passenger.Infrastructure/IoC/Modules/SettingsModule.cs'\n:using Autofac;\nusing Microsoft.Extensions.Configuration;\nusing Passenger.Infrastructure.EF;\nusing Passenger.Infrastructure.Extensions;\nusing Passenger.Infrastructure.Mongo;\nusing Passenger.Infrastructure.Settings;\n\nnamespace Passenger.Infrastructure.IoC.Modules\n{\n    public class SettingsModule : Autofac.Module\n    {\n        private readonly IConfiguration _configuration;\n\n        public SettingsModule(IConfiguration configuration)\n        {\n            _configuration = configuration;\n        }\n\n        protected override void Load(ContainerBuilder builder)\n        {\n            builder.RegisterInstance(_configuration.GetSettings<GeneralSettings>())\n                   .SingleInstance();\n            builder.RegisterInstance(_configuration.GetSettings<JwtSettings>())\n                   .SingleInstance();\n\t\t\tbuilder.RegisterInstance(_configuration.GetSettings<MongoSettings>())\n\t               .SingleInstance();\n\t\t\tbuilder.RegisterInstance(_configuration.GetSettings<SqlSettings>())\n\t               .SingleInstance();\n\t\t}\n    }\n}\n'Passenger/tests/Passenger.Tests.EndToEnd/Controllers/ControllerTestsBase.cs'\n:using System.Net.Http;\nusing System.Text;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.TestHost;\nusing Newtonsoft.Json;\nusing Passenger.Api;\n\nnamespace Passenger.Tests.EndToEnd.Controllers\n{\n    public abstract class ControllerTestsBase\n    {\n        protected readonly TestServer Server;\n        protected readonly HttpClient Client;\n\n        protected ControllerTestsBase()\n        {\n            Server = new TestServer(new WebHostBuilder()\n                          .UseStartup<Startup>());\n            Client = Server.CreateClient();\n        }\n\n        protected static StringContent GetPayload(object data)\n        {\n            var json = JsonConvert.SerializeObject(data);\n\n            return new StringContent(json, Encoding.UTF8, \"application/json\");\n        }\n    }\n}",
        "gt": [
            "'Passenger/src/Passenger.Infrastructure/EF/PassengerContext.cs'",
            "'Passenger/src/Passenger.Infrastructure/IoC/Modules/SettingsModule.cs'",
            "'Passenger/src/Passenger.Infrastructure/IoC/ContainerModule.cs'",
            "'Passenger/src/Passenger.Api/Startup.cs'",
            "'Passenger/tests/Passenger.Tests.EndToEnd/Controllers/ControllerTestsBase.cs'"
        ]
    },
    {
        "files": [
            "'QuanLib.Minecraft/QuanLib.Minecraft.Instance/HybridMinecraftServer.cs'",
            "'QuanLib.Minecraft/QuanLib.Minecraft.Command/Events/CommandInfoEventArgs.cs'",
            "'QuanLib.Minecraft/QuanLib.Minecraft.Command/Senders/CommandSender.cs'"
        ],
        "content": "'QuanLib.Minecraft/QuanLib.Minecraft.Instance/HybridMinecraftServer.cs'\n:﻿using CoreRCON;\nusing QuanLib.Core;\nusing QuanLib.Minecraft.Command.Senders;\nusing QuanLib.Minecraft.Instance.CommandSenders;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace QuanLib.Minecraft.Instance\n{\n    public class HybridMinecraftServer : MinecraftServer, IHybridInstance\n    {\n\n        public HybridMinecraftServer(string serverPath, string serverAddress, ushort serverPort, ushort rconPort, string rconPassword, ServerLaunchArguments launchArguments, ILoggerGetter? loggerGetter = null) : base(serverPath, serverAddress, serverPort, loggerGetter)\n        {\n            ArgumentException.ThrowIfNullOrEmpty(rconPassword, nameof(rconPassword));\n\n            RconPort = rconPort;\n            RconPassword = rconPassword;\n            RCON = new(ServerAddress, RconPort, RconPassword);\n            TwowayCommandSender = new(RCON);\n\n            ServerProcess = new(ServerPathManager.Minecraft.FullName, launchArguments, loggerGetter);\n            ServerConsole = new(ServerProcess.Process.StandardOutput, ServerProcess.Process.StandardInput, loggerGetter);\n            OnewayCommandSender = new(ServerConsole);\n\n            CommandSender = new(TwowayCommandSender, OnewayCommandSender);\n        }\n\n        public ushort RconPort { get; }\n\n        public string RconPassword { get; }\n\n        public RCON RCON { get; }\n\n        public ServerProcess ServerProcess { get; }\n\n        public ServerConsole ServerConsole { get; }\n\n        public RconTwowayCommandSender TwowayCommandSender { get; }\n\n        public ConsoleCommandSender OnewayCommandSender { get; }\n\n        public override CommandSender CommandSender { get; }\n\n        public override string InstanceKey => IHybridInstance.INSTANCE_KEY;\n\n        protected override void Run()\n        {\n            LogFileListener.Start(\"LogFileListener Thread\");\n            ServerProcess.Start(\"ServerProcess Thread\");\n            ServerConsole.Start(\"ServerConsole Thread\");\n            RCON.ConnectAsync().Wait();\n\n            Task.WaitAll(LogFileListener.WaitForStopAsync(), ServerProcess.WaitForStopAsync());\n        }\n\n        protected override void DisposeUnmanaged()\n        {\n            LogFileListener.Stop();\n            ServerProcess.Stop();\n            ServerConsole.Stop();\n            RCON.Dispose();\n        }\n\n        public override bool TestConnectivity()\n        {\n            Task<bool> server = NetworkUtil.TestTcpConnectivityAsync(ServerAddress, ServerPort);\n            Task<bool> rcon = NetworkUtil.TestTcpConnectivityAsync(ServerAddress, RconPort);\n            Task.WaitAll(server, rcon);\n            return server.Result && rcon.Result;\n        }\n\n        public override async Task<bool> TestConnectivityAsync()\n        {\n            Task<bool> server = NetworkUtil.TestTcpConnectivityAsync(ServerAddress, ServerPort);\n            Task<bool> rcon = NetworkUtil.TestTcpConnectivityAsync(ServerAddress, RconPort);\n            return await server && await rcon;\n        }\n    }\n}\n\n'QuanLib.Minecraft/QuanLib.Minecraft.Command/Events/CommandInfoEventArgs.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace QuanLib.Minecraft.Command.Events\n{\n    public class CommandInfoEventArgs : EventArgs\n    {\n        public CommandInfoEventArgs(CommandInfo commandInfo)\n        {\n            CommandInfo = commandInfo;\n        }\n\n        public CommandInfo CommandInfo { get; }\n    }\n}\n\n'QuanLib.Minecraft/QuanLib.Minecraft.Command/Senders/CommandSender.cs'\n:﻿using QuanLib.Core;\nusing QuanLib.Minecraft.Command.Events;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace QuanLib.Minecraft.Command.Senders\n{\n    public class CommandSender\n    {\n        public CommandSender(ITwowayCommandSender twowaySender, IOnewayCommandSender onewaySender)\n        {\n            ArgumentNullException.ThrowIfNull(twowaySender, nameof(twowaySender));\n            ArgumentNullException.ThrowIfNull(onewaySender, nameof(onewaySender));\n\n            TwowaySender = twowaySender;\n            OnewaySender = onewaySender;\n\n            CommandSent += OnCommandSent;\n        }\n\n        public ITwowayCommandSender TwowaySender { get; }\n\n        public IOnewayCommandSender OnewaySender { get; }\n\n        public event EventHandler<CommandSender, CommandInfoEventArgs> CommandSent;\n\n        protected virtual void OnCommandSent(CommandSender sender, CommandInfoEventArgs e) { }\n\n        public string SendCommand(string command)\n        {\n            DateTime sendingTime = DateTime.Now;\n            string output = TwowaySender.SendCommand(command);\n            DateTime receivingTime = DateTime.Now;\n            CommandInfo commandInfo = new(sendingTime, receivingTime, command, output);\n            CommandSent.Invoke(this, new(commandInfo));\n            return output;\n        }\n\n        public async Task<string> SendCommandAsync(string command)\n        {\n            DateTime sendingTime = DateTime.Now;\n            string output = await TwowaySender.SendCommandAsync(command);\n            DateTime receivingTime = DateTime.Now;\n            CommandInfo commandInfo = new(sendingTime, receivingTime, command, output);\n            CommandSent.Invoke(this, new(commandInfo));\n            return output;\n        }\n    }\n}\n",
        "gt": [
            "'QuanLib.Minecraft/QuanLib.Minecraft.Command/Events/CommandInfoEventArgs.cs'",
            "'QuanLib.Minecraft/QuanLib.Minecraft.Command/Senders/CommandSender.cs'",
            "'QuanLib.Minecraft/QuanLib.Minecraft.Instance/HybridMinecraftServer.cs'"
        ]
    },
    {
        "files": [
            "'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.Actors/AuctionItem/AuctionItemActorInitialStateDataFactory.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.Abstractions/Serializer/IEventSerializer.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.Actors.Tests/AuctionItem/AuctionItemActorTest.cs'"
        ],
        "content": "'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.Actors/AuctionItem/AuctionItemActorInitialStateDataFactory.cs'\n:﻿using System;\nusing System.Threading.Tasks;\nusing HelloClaptrap.Models.AuctionItem;\nusing Newbe.Claptrap;\n\nnamespace HelloClaptrap.Actors.AuctionItem\n{\n    public class AuctionItemActorInitialStateDataFactory : IInitialStateDataFactory\n    {\n        public static AuctionItemState[] States { get; set; }\n\n        static AuctionItemActorInitialStateDataFactory()\n        {\n            var dateTime = DateTime.Now;\n            var endTime = dateTime.AddHours(+2);\n            var startTime = dateTime.AddHours(-2);\n            States = new[]\n            {\n                new AuctionItemState\n                {\n                    StartTime = startTime.AddHours(-4),\n                    EndTime = startTime\n                },\n                new AuctionItemState\n                {\n                    StartTime = startTime,\n                    EndTime = endTime\n                },\n                new AuctionItemState\n                {\n                    StartTime = endTime,\n                    EndTime = endTime.AddHours(4)\n                }\n            };\n        }\n\n        public Task<IStateData> Create(IClaptrapIdentity identity)\n        {\n            var i = int.Parse(identity.Id);\n            var i1 = i % 3;\n\n            var state = States[i1] with {BasePrice = 10};\n            return Task.FromResult((IStateData) state);\n        }\n    }\n}\n'Newbe.Claptrap/src/Newbe.Claptrap.Abstractions/Serializer/IEventSerializer.cs'\n:namespace Newbe.Claptrap\n{\n    public interface IEventSerializer<T>\n    {\n        T Serialize(IEvent evt);\n        IEvent Deserialize(T source);\n    }\n}\n'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.Actors.Tests/AuctionItem/AuctionItemActorTest.cs'\n:﻿using System;\nusing System.Threading.Tasks;\nusing FluentAssertions;\nusing HelloClaptrap.Actors.AuctionItem;\nusing HelloClaptrap.IActor;\nusing HelloClaptrap.Models.AuctionItem;\nusing Newbe.Claptrap;\nusing Newbe.Claptrap.Dapr.TestKit;\nusing NUnit.Framework;\n\nnamespace HelloClaptrap.Actors.Tests.AuctionItem\n{\n    public class AuctionItemActorTest\n    {\n        [Theory]\n        [TestCase(19, AuctionItemStatus.Planned)]\n        [TestCase(20, AuctionItemStatus.OnSell)]\n        [TestCase(21, AuctionItemStatus.UnSold)]\n        public async Task StatusWithNoBidder(int hour, AuctionItemStatus expectedStatus)\n        {\n            var state = new AuctionItemState\n            {\n                StartTime = DateTimeOffset.Parse(\"2020-01-01 19:30:00\"),\n                EndTime = DateTimeOffset.Parse(\"2020-01-01 20:30:00\")\n            };\n            var claptrapDesign = ActorTestHelper.GetDesign(typeof(AuctionItemActor));\n            using var mocker = claptrapDesign.CreateAutoMock(\"1\", state);\n\n            mocker.Mock<IClock>()\n                .Setup(x => x.UtcNow)\n                .Returns(new DateTime(2020, 01, 01, hour, 0, 0));\n\n            var auctionItemActor = mocker.Create<AuctionItemActor>();\n\n            var status = await auctionItemActor.GetStatusAsync();\n\n\n            status.Should().Be(expectedStatus);\n        }\n\n        [Test]\n        public async Task Sold()\n        {\n            var state = new AuctionItemState\n            {\n                StartTime = DateTimeOffset.Parse(\"2020-01-01 19:30:00\"),\n                EndTime = DateTimeOffset.Parse(\"2020-01-01 20:30:00\"),\n            };\n            state.InitBiddingRecords();\n            state.BiddingRecords[1] = new BiddingRecord\n            {\n                Price = 1\n            };\n            var design = ActorTestHelper.GetDesign(typeof(AuctionItemActor));\n            using var mocker = design.CreateAutoMock(\"11\", state);\n            mocker.Mock<IClock>()\n                .Setup(x => x.UtcNow)\n                .Returns(new DateTime(2020, 01, 01, 21, 0, 0));\n\n            var auctionItemActor = mocker.Create<AuctionItemActor>();\n\n            var status = await auctionItemActor.GetStatusAsync();\n\n\n            status.Should().Be(AuctionItemStatus.Sold);\n        }\n\n\n        [Theory]\n        [TestCase(10, null, 5, false)]\n        [TestCase(10, null, 10, false)]\n        [TestCase(10, null, 11, true)]\n        [TestCase(10, 10, 5, false)]\n        [TestCase(10, 10, 11, true)]\n        [TestCase(10, 11, 11, false)]\n        public async Task TryBidding(decimal basePrice, decimal? topPrice, decimal biddingPrice, bool success)\n        {\n            var state = new AuctionItemState\n            {\n                StartTime = DateTimeOffset.Parse(\"2020-01-01 19:30:00\"),\n                EndTime = DateTimeOffset.Parse(\"2020-01-01 20:30:00\"),\n                BasePrice = basePrice,\n            };\n            var design = ActorTestHelper.GetDesign(typeof(AuctionItemActor));\n            using var mocker = design.CreateAutoMock(\"1\", state);\n            mocker.Mock<IClock>()\n                .Setup(x => x.UtcNow)\n                .Returns(new DateTime(2020, 01, 01, 20, 0, 0));\n\n            mocker.Mock<IClock>()\n                .Setup(x => x.UtcNow)\n                .Returns(new DateTime(2020, 01, 01, 20, 0, 0));\n\n            if (topPrice != null)\n            {\n                state.InitBiddingRecords();\n                state.BiddingRecords[topPrice.Value] = new BiddingRecord\n                {\n                    Price = topPrice.Value,\n                    UserId = 11\n                };\n            }\n\n            var auctionItemActor = mocker.Create<AuctionItemActor>();\n\n            var input = new TryBiddingInput\n            {\n                UserId = 777,\n                Price = biddingPrice\n            };\n            var result = await auctionItemActor.TryBidding(input);\n\n\n            var nowPrice = Math.Max(biddingPrice, basePrice);\n            if (topPrice.HasValue)\n            {\n                nowPrice = Math.Max(nowPrice, topPrice.Value);\n            }\n\n            var expectedResult = new TryBiddingResult\n            {\n                Success = success,\n                NowPrice = nowPrice,\n                UserId = input.UserId,\n                AuctionItemStatus = AuctionItemStatus.OnSell\n            };\n            result.Should().BeEquivalentTo(expectedResult);\n        }\n    }\n}",
        "gt": [
            "'Newbe.Claptrap/src/Newbe.Claptrap.Abstractions/Serializer/IEventSerializer.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.Actors/AuctionItem/AuctionItemActorInitialStateDataFactory.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.Template/HelloClaptrap/HelloClaptrap.Actors.Tests/AuctionItem/AuctionItemActorTest.cs'"
        ]
    },
    {
        "files": [
            "'ThunderED/THDWebServer/Classes/WebConfig.cs'",
            "'ThunderED/THDWebServer/Startup.cs'",
            "'ThunderED/ThunderED.Shared/Entities/SimplifiedAuthEntity.cs'"
        ],
        "content": "'ThunderED/THDWebServer/Classes/WebConfig.cs'\n:﻿using System;\nusing System.IO;\nusing System.Threading.Tasks;\nusing Newtonsoft.Json;\nusing ThunderED;\nusing ThunderED.Helpers;\n\nnamespace THDWebServer.Classes\n{\n    public class WebConfig\n    {\n        public static WebConfig Instance { get; set; }\n\n        public ConfigModule Config { get; set; } = new ConfigModule();\n        public ApiModule Api { get; set; } = new ApiModule();\n\n        public static async Task<bool> Load(string filename)\n        {\n            try\n            {\n                if(!File.Exists(filename))\n                    return false;\n                Instance = JsonConvert.DeserializeObject<WebConfig>(await File.ReadAllTextAsync(filename));\n                return Instance != null;\n            }\n            catch (Exception ex)\n            {\n                await LogHelper.LogEx(ex);\n                return false;\n            }\n        }\n    }\n\n    public class ApiModule\n    {\n        public bool IsEnabled { get; set; } = false;\n    }\n\n    public class ConfigModule\n    {\n    }\n}\n\n'ThunderED/THDWebServer/Startup.cs'\n:using System.Threading.Tasks;\nusing Blazored.Modal;\nusing Matrix.Xmpp.MessageArchiving;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Components.Authorization;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing THDWebServer.Authentication;\nusing THDWebServer.Classes;\nusing ThunderED;\nusing ThunderED.Classes;\nusing ThunderED.Helpers;\nusing ThunderED.Modules.OnDemand;\n\nnamespace THDWebServer\n{\n    public class Startup\n    {\n        private BackgroundSocketProcessor BackgroundSocketProcessor { get; } = new BackgroundSocketProcessor();\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n\n        public IConfiguration Configuration { get; }\n\n\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n\n\n\n            services.AddRazorPages();\n            services.AddServerSideBlazor();\n\n\n            services.AddScoped<AuthenticationStateProvider, CustomAuthenticationStateProvider>();\n            services.AddAuthorizationCore();\n\n            services.AddHttpContextAccessor();\n            services.AddProtectedBrowserStorage();\n            services.AddBlazoredModal();\n            services.AddControllers();\n        }\n\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n\n\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n            }\n            else\n            {\n                app.UseExceptionHandler(\"/Error\");\n\n                app.UseHsts();\n            }\n\n            if(SettingsManager.Settings.WebServerModule.UseHTTPS)\n                app.UseHttpsRedirection();\n            app.UseStaticFiles();\n            app.UseRouting();\n\n\n\n\n            app.UseEndpoints(endpoints =>\n            {\n                endpoints.MapBlazorHub();\n                endpoints.MapFallbackToPage(\"/_Host\");\n                endpoints.MapControllers();\n                endpoints.Map(\"/chatrelay\", async context =>\n                {\n                    await LogHelper.Log($\"QUERY: {context.Request.Path}\", LogSeverity.Info, LogCat.Default);\n\n                    if (SettingsManager.Settings.Config.ModuleChatRelay)\n                    {\n                        await TickManager.GetModule<ChatRelayModule>().ProcessRaw(context);\n                        return;\n                    }\n                });\n            });\n\n\n            if (WebConfig.Instance.Api.IsEnabled)\n            {\n                app.UseWebSockets();\n                app.Use(async (context, next) =>\n                {\n                    if (context.Request.Path == \"/ws\")\n                    {\n                        if (context.WebSockets.IsWebSocketRequest)\n                        {\n                            using (var webSocket = await context.WebSockets.AcceptWebSocketAsync())\n                            {\n                                var finish = new TaskCompletionSource<bool>();\n\n                                await BackgroundSocketProcessor.AddSocket(webSocket, finish);\n                                await finish.Task;\n                            }\n                        }\n                        else\n                        {\n                            context.Response.StatusCode = 400;\n                        }\n                    }\n                    else\n                    {\n                        if (next != null)\n                            await next();\n                    }\n                });\n            }\n        }\n    }\n}\n\n'ThunderED/ThunderED.Shared/Entities/SimplifiedAuthEntity.cs'\n:﻿using System.Collections.Generic;\nusing System.Linq;\n\nnamespace ThunderED\n{\n    public class SimplifiedAuthEntity: IIdentifiable\n    {\n        public long Id { get; set; }\n        [Classes.Required]\n        public string Name { get; set; }\n        [Classes.Required]\n        public string Group { get; set; }\n        [Classes.Required]\n        public IEnumerable<string> RolesList;\n        public string Roles { get; set; }\n\n        public bool Validate()\n        {\n            return !string.IsNullOrEmpty(Name) && !string.IsNullOrEmpty(Group) &&\n                   (!string.IsNullOrEmpty(Roles) || RolesList.Any());\n        }\n\n        public void UpdateFrom(SimplifiedAuthEntity value)\n        {\n            if (value != null)\n            {\n                Name = value.Name;\n                Group = value.Group;\n                Roles = value.Roles;\n                RolesList = value.RolesList;\n            }\n        }\n\n        public SimplifiedAuthEntity Clone()\n        {\n            return new SimplifiedAuthEntity\n            {\n                Id = Id,\n                Group = Group,\n                RolesList = RolesList,\n                Roles = Roles,\n                Name = Name\n            };\n        }\n    }\n}\n",
        "gt": [
            "'ThunderED/ThunderED.Shared/Entities/SimplifiedAuthEntity.cs'",
            "'ThunderED/THDWebServer/Classes/WebConfig.cs'",
            "'ThunderED/THDWebServer/Startup.cs'"
        ]
    },
    {
        "files": [
            "'Bing/sample/Bing.Samples.Datas/Repositories/LoginRepository.cs'",
            "'Bing/sample/Bing.Samples.Domains/Repositories/ILoginRepository.cs'",
            "'Bing/src/Bing.Core/Domains/Entities/Auditing/ICreationAudited.cs'",
            "'Bing/sample/Bing.Samples.Domains/Models/Login.cs'"
        ],
        "content": "'Bing/sample/Bing.Samples.Datas/Repositories/LoginRepository.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Bing.Datas.EntityFramework.Core;\nusing Bing.Datas.UnitOfWorks;\nusing Bing.Samples.Domains.Models;\nusing Bing.Samples.Domains.Repositories;\n\nnamespace Bing.Samples.Datas.Repositories\n{\n    public class LoginRepository: ApplicationRepositoryBase<Login>,ILoginRepository\n    {\n        public LoginRepository(IBingSampleUnitOfWork unitOfWork) : base(unitOfWork)\n        {\n        }\n\n        public List<Login> GetListByName(string name)\n        {\n            return Context.LoginDs.Where(x => x.Name.Contains(name)).ToList();\n        }\n    }\n}\n\n'Bing/sample/Bing.Samples.Domains/Repositories/ILoginRepository.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Bing.Domains.Repositories;\nusing Bing.Samples.Domains.Models;\n\nnamespace Bing.Samples.Domains.Repositories\n{\n\n\n\n    public interface ILoginRepository:IRepository<Login>\n    {\n        List<Login> GetListByName(string name);\n    }\n}\n\n'Bing/src/Bing.Core/Domains/Entities/Auditing/ICreationAudited.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Bing.Domains.Entities.Auditing\n{\n\n\n\n    public interface ICreationAudited : ICreationAudited<Guid?>\n    {\n    }\n\n\n\n\n\n    public interface ICreationAudited<TKey>\n    {\n\n\n\n        DateTime? CreationTime { get; set; }\n\n\n\n\n        TKey CreatorId { get; set; }\n    }\n}\n\n'Bing/sample/Bing.Samples.Domains/Models/Login.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Bing.Domains.Entities;\nusing Bing.Domains.Entities.Auditing;\n\nnamespace Bing.Samples.Domains.Models\n{\n\n\n\n    public partial class Login: AggregateRoot<Login>,IAudited<string>\n    {\n        public Login() : this(Guid.Empty)\n        {\n\n        }\n        public Login(Guid id) : base(id)\n        {\n        }\n\n\n\n\n\n        public int Status { get; set; }\n\n\n\n\n\n        public string Note { get; set; }\n\n\n\n\n\n        public Guid? RoleID { get; set; }\n\n\n\n\n\n        public string LoginName { get; set; }\n\n\n\n\n\n        public string Name { get; set; }\n\n\n\n\n\n        public string Mobile { get; set; }\n\n\n\n\n\n        public string PassWord { get; set; }\n\n        public DateTime? CreationTime { get; set; }\n        public string CreatorId { get; set; }\n        public DateTime? LastModificationTime { get; set; }\n        public string LastModifierId { get; set; }\n    }\n}\n",
        "gt": [
            "'Bing/src/Bing.Core/Domains/Entities/Auditing/ICreationAudited.cs'",
            "'Bing/sample/Bing.Samples.Domains/Models/Login.cs'",
            "'Bing/sample/Bing.Samples.Domains/Repositories/ILoginRepository.cs'",
            "'Bing/sample/Bing.Samples.Datas/Repositories/LoginRepository.cs'"
        ]
    },
    {
        "files": [
            "'Passenger/tests/Passenger.Tests.EndToEnd/Controllers/ControllerTestsBase.cs'",
            "'Passenger/src/Passenger.Api/Startup.cs'",
            "'Passenger/src/Passenger.Infrastructure/Mappers/AutoMapperConfig.cs'",
            "'Passenger/src/Passenger.Core/Domain/ErrorCodes.cs'"
        ],
        "content": "'Passenger/tests/Passenger.Tests.EndToEnd/Controllers/ControllerTestsBase.cs'\n:using System.Net.Http;\nusing System.Text;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.TestHost;\nusing Newtonsoft.Json;\nusing Passenger.Api;\n\nnamespace Passenger.Tests.EndToEnd.Controllers\n{\n    public abstract class ControllerTestsBase\n    {\n        protected readonly TestServer Server;\n        protected readonly HttpClient Client;\n\n        protected ControllerTestsBase()\n        {\n            Server = new TestServer(new WebHostBuilder()\n                          .UseStartup<Startup>());\n            Client = Server.CreateClient();\n        }\n\n        protected static StringContent GetPayload(object data)\n        {\n            var json = JsonConvert.SerializeObject(data);\n\n            return new StringContent(json, Encoding.UTF8, \"application/json\");\n        }\n    }\n}\n'Passenger/src/Passenger.Api/Startup.cs'\n:using System;\nusing System.Text;\nusing Autofac;\nusing Autofac.Extensions.DependencyInjection;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.IdentityModel.Tokens;\nusing Newtonsoft.Json;\nusing NLog.Extensions.Logging;\nusing NLog.Web;\nusing Passenger.Api.Framework;\nusing Passenger.Core.Repositories;\nusing Passenger.Infrastructure.EF;\nusing Passenger.Infrastructure.IoC;\nusing Passenger.Infrastructure.IoC.Modules;\nusing Passenger.Infrastructure.Mappers;\nusing Passenger.Infrastructure.Mongo;\nusing Passenger.Infrastructure.Repositories;\nusing Passenger.Infrastructure.Services;\nusing Passenger.Infrastructure.Settings;\n\nnamespace Passenger.Api\n{\n    public class Startup\n    {\n        public IConfigurationRoot Configuration { get; }\n        public IContainer ApplicationContainer { get; private set; }\n\n        public Startup(IHostingEnvironment env)\n        {\n            var builder = new ConfigurationBuilder()\n                .SetBasePath(env.ContentRootPath)\n                .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\n                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n                .AddEnvironmentVariables();\n            Configuration = builder.Build();\n        }\n\n\n        public IServiceProvider ConfigureServices(IServiceCollection services)\n        {\n\n            services.AddAuthorization(x => x.AddPolicy(\"admin\", p => p.RequireRole(\"admin\")));\n            services.AddMemoryCache();\n            services.AddMvc()\n                    .AddJsonOptions(x => x.SerializerSettings.Formatting = Formatting.Indented);\n            services.AddEntityFrameworkSqlServer()\n                    .AddEntityFrameworkInMemoryDatabase()\n                    .AddDbContext<PassengerContext>();\n\n            var builder = new ContainerBuilder();\n            builder.Populate(services);\n            builder.RegisterModule(new ContainerModule(Configuration));\n            ApplicationContainer = builder.Build();\n\n            return new AutofacServiceProvider(ApplicationContainer);\n        }\n\n\n        public void Configure(IApplicationBuilder app, IHostingEnvironment env,\n            ILoggerFactory loggerFactory, IApplicationLifetime appLifetime)\n        {\n\n\n            loggerFactory.AddNLog();\n            app.AddNLogWeb();\n            env.ConfigureNLog(\"nlog.config\");\n            var jwtSettings = app.ApplicationServices.GetService<JwtSettings>();\n            app.UseJwtBearerAuthentication(new JwtBearerOptions\n            {\n                AutomaticAuthenticate = true,\n                TokenValidationParameters = new TokenValidationParameters\n                {\n                    ValidIssuer = jwtSettings.Issuer,\n                    ValidateAudience = false,\n                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(jwtSettings.Key))\n                }\n            });\n\n            MongoConfigurator.Initialize();\n            var generalSettings = app.ApplicationServices.GetService<GeneralSettings>();\n            if(generalSettings.SeedData)\n            {\n                var dataInitializer = app.ApplicationServices.GetService<IDataInitializer>();\n                dataInitializer.SeedAsync();\n            }\n            app.UseExceptionHandler();\n            app.UseMvc();\n            appLifetime.ApplicationStopped.Register(() => ApplicationContainer.Dispose());\n        }\n    }\n}\n\n'Passenger/src/Passenger.Infrastructure/Mappers/AutoMapperConfig.cs'\n:using AutoMapper;\nusing Passenger.Core.Domain;\nusing Passenger.Infrastructure.DTO;\n\nnamespace Passenger.Infrastructure.Mappers\n{\n    public static class AutoMapperConfig\n    {\n        public static IMapper Initialize()\n            => new MapperConfiguration(cfg =>\n            {\n                cfg.CreateMap<Driver, DriverDto>();\n                cfg.CreateMap<Driver, DriverDetailsDto>();\n                cfg.CreateMap<Node, NodeDto>();\n                cfg.CreateMap<Route, RouteDto>();\n                cfg.CreateMap<User, UserDto>();\n                cfg.CreateMap<Vehicle, VehicleDto>();\n            })\n            .CreateMapper();\n    }\n}\n'Passenger/src/Passenger.Core/Domain/ErrorCodes.cs'\n:namespace Passenger.Core.Domain\n{\n    public static class ErrorCodes\n    {\n        public static string InvalidEmail => \"invalid_email\";\n        public static string InvalidPassword => \"invalid_password\";\n        public static string InvalidRole => \"invalid_role\";\n        public static string InvalidUsername => \"invalid_username\";\n    }\n}",
        "gt": [
            "'Passenger/src/Passenger.Core/Domain/ErrorCodes.cs'",
            "'Passenger/src/Passenger.Infrastructure/Mappers/AutoMapperConfig.cs'",
            "'Passenger/src/Passenger.Api/Startup.cs'",
            "'Passenger/tests/Passenger.Tests.EndToEnd/Controllers/ControllerTestsBase.cs'"
        ]
    },
    {
        "files": [
            "'SynoAI/SynoAI/App/HttpClientWrapper.cs'",
            "'SynoAI/SynoAI/Startup.cs'",
            "'SynoAI/SynoAI/AIs/DeepStack/DeepStackAI.cs'",
            "'SynoAI/SynoAI/Services/AIService.cs'"
        ],
        "content": "'SynoAI/SynoAI/App/HttpClientWrapper.cs'\n:﻿using System.Net.Http;\n\nnamespace SynoAI.App\n{\n    public class HttpClientWrapper : HttpClient, IHttpClient\n    {\n    }\n}\n\n'SynoAI/SynoAI/Startup.cs'\n:using Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.OpenApi.Models;\nusing SynoAI.Services;\nusing System.Threading.Tasks;\nusing SynoAI.Hubs;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace SynoAI\n{\n    public class Startup\n    {\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddScoped<IAIService, AIService>();\n            services.AddScoped<ISynologyService, SynologyService>();\n\n            services.AddControllers();\n            services.AddSwaggerGen(c =>\n            {\n                c.SwaggerDoc(\"v1\", new OpenApiInfo { Title = \"SynoAI\", Version = \"v1\" });\n            });\n\n            services.AddRazorPages();\n\n\n            services.AddSignalR();\n        }\n\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, IConfiguration configuration, IHostApplicationLifetime lifetime, ILogger<Startup> logger, ISynologyService synologyService)\n        {\n            Config.Generate(logger, configuration);\n\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n                app.UseSwagger();\n                app.UseSwaggerUI(c => c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"SynoAI v1\"));\n            }\n\n\n            app.UseStaticFiles();\n\n            app.UseRouting();\n\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints =>\n            {\n\n                endpoints.MapHub<SynoAIHub>(\"/synoaiHub\");\n\n\n                endpoints.MapControllers();\n            });\n\n            lifetime.ApplicationStarted.Register(() =>\n            {\n                List<Task> initializationTasks = new List<Task>();\n                initializationTasks.Add(synologyService.InitialiseAsync());\n                initializationTasks.AddRange(Config.Notifiers.Select(n => n.InitializeAsync(logger)));\n                Task.WhenAll(initializationTasks).Wait();\n            });\n\n            lifetime.ApplicationStopping.Register(() =>\n            {\n                List<Task> cleanupTasks = new List<Task>();\n                cleanupTasks.AddRange(Config.Notifiers.Select(n => n.CleanupAsync(logger)));\n                Task.WhenAll(cleanupTasks).Wait();\n            });\n        }\n    }\n}\n\n'SynoAI/SynoAI/AIs/DeepStack/DeepStackAI.cs'\n:﻿using Microsoft.Extensions.Logging;\nusing Newtonsoft.Json;\nusing SynoAI.App;\nusing SynoAI.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\nnamespace SynoAI.AIs.DeepStack\n{\n    public class DeepStackAI : AI\n    {\n        public async override Task<IEnumerable<AIPrediction>> Process(ILogger logger, Camera camera, byte[] image)\n        {\n            Stopwatch stopwatch = Stopwatch.StartNew();\n\n            decimal minConfidence = camera.Threshold / 100m;\n\n            MultipartFormDataContent multipartContent = new()\n            {\n                { new StreamContent(new MemoryStream(image)), \"image\", \"image\" },\n                { new StringContent(minConfidence.ToString()), \"min_confidence\" }\n            };\n\n            logger.LogDebug($\"{camera.Name}: DeepStackAI: POSTing image with minimum confidence of {minConfidence} ({camera.Threshold}%) to {string.Join(\"/\", Config.AIUrl, Config.AIPath)}.\");\n\n            Uri uri = GetUri(Config.AIUrl, Config.AIPath);\n\n            try\n            {\n                HttpResponseMessage response = await Shared.HttpClient.PostAsync(uri, multipartContent);\n                if (response.IsSuccessStatusCode)\n                {\n                    DeepStackResponse deepStackResponse = await GetResponse(logger, camera, response);\n                    if (deepStackResponse.Success)\n                    {\n                        IEnumerable<AIPrediction> predictions = deepStackResponse.Predictions.Where(x => x.Confidence >= minConfidence).Select(x => new AIPrediction()\n                        {\n                            Confidence = x.Confidence * 100,\n                            Label = x.Label,\n                            MaxX = x.MaxX,\n                            MaxY = x.MaxY,\n                            MinX = x.MinX,\n                            MinY = x.MinY\n                        }).ToList();\n\n                        stopwatch.Stop();\n                        logger.LogInformation($\"{camera.Name}: DeepStackAI: Processed successfully ({stopwatch.ElapsedMilliseconds}ms).\");\n                        return predictions;\n                    }\n                    else\n                    {\n                        logger.LogWarning($\"{camera.Name}: DeepStackAI: Failed with unknown error.\");\n                    }\n                }\n                else\n                {\n                    logger.LogWarning($\"{camera.Name}: DeepStackAI: Failed to call API with HTTP status code '{response.StatusCode}'.\");\n                }\n            }\n            catch (HttpRequestException ex)\n            {\n                logger.LogError($\"{camera.Name}: DeepStackAI: Failed to call API error '{ex}'.\");\n            }\n\n            return null;\n        }\n\n\n\n\n\n\n\n        protected Uri GetUri(string basePath, string resourcePath)\n        {\n            Uri baseUri = new(basePath);\n            return new Uri(baseUri, resourcePath);\n        }\n\n\n\n\n\n\n        private async Task<DeepStackResponse> GetResponse(ILogger logger, Camera camera, HttpResponseMessage message)\n        {\n            string content = await message.Content.ReadAsStringAsync();\n            logger.LogDebug($\"{camera.Name}: DeepStackAI: Responded with {content}.\");\n\n            return JsonConvert.DeserializeObject<DeepStackResponse>(content);\n        }\n    }\n}\n\n'SynoAI/SynoAI/Services/AIService.cs'\n:﻿using Microsoft.Extensions.Logging;\nusing SynoAI.AIs;\nusing SynoAI.AIs.DeepStack;\nusing SynoAI.Models;\nusing System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace SynoAI.Services\n{\n    public class AIService : IAIService\n    {\n        private readonly ILogger<AIService> _logger;\n\n        public AIService(ILogger<AIService> logger)\n        {\n            _logger = logger;\n        }\n\n        public async Task<IEnumerable<AIPrediction>> ProcessAsync(Camera camera, byte[] image)\n        {\n            AI ai = GetAI();\n            return await ai.Process(_logger, camera, image);\n        }\n\n        private AI GetAI()\n        {\n            switch (Config.AI)\n            {\n                case AIType.DeepStack:\n                case AIType.CodeProjectAIServer:\n                    return new DeepStackAI();\n                default:\n                    throw new NotImplementedException(Config.AI.ToString());\n            }\n        }\n    }\n}\n",
        "gt": [
            "'SynoAI/SynoAI/App/HttpClientWrapper.cs'",
            "'SynoAI/SynoAI/AIs/DeepStack/DeepStackAI.cs'",
            "'SynoAI/SynoAI/Services/AIService.cs'",
            "'SynoAI/SynoAI/Startup.cs'"
        ]
    },
    {
        "files": [
            "'Idle-Miner/Assets/Scripts/IdleMiner/Commands/LoadStaticDataCommand.cs'",
            "'Idle-Miner/Assets/Scripts/core/Installers/CoreSceneInstaller.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Startup/StartupMediator.cs'"
        ],
        "content": "'Idle-Miner/Assets/Scripts/IdleMiner/Commands/LoadStaticDataCommand.cs'\n:﻿using System;\nusing System.IO;\nusing Newtonsoft.Json;\nusing PG.Core.Commands;\nusing PG.IdleMiner.Contexts.Startup;\nusing PG.IdleMiner.Misc;\nusing PG.IdleMiner.Models;\nusing PG.IdleMiner.Models.DataModels;\nusing RSG;\nusing UnityEngine;\nusing Zenject;\n\nnamespace PG.IdleMiner.Commands\n{\n    public class LoadStaticDataCommand : BaseCommand\n    {\n        [Inject] private readonly StaticDataModel _staticDataModel;\n\n        public void Execute(LoadStaticDataSignal signal)\n        {\n            var sequence = Promise.Sequence(\n                () => LoadMetaJson(Constants.MetaDataFile)\n\n            );\n\n            sequence\n                .Then(() =>\n                    {\n                        Debug.Log(string.Format(\"{0} , static data load completed!\", this));\n                        signal.Promise.Resolve();\n                    }\n                )\n                .Catch(e =>\n                    {\n                        Debug.LogError(string.Format(\"{0} : failed to load static data, error message = {1}\\n{2}\", this,\n                            e.Message, e.StackTrace));\n                        signal.Promise.Reject(e);\n                    }\n                );\n        }\n\n\n        private IPromise LoadMetaJson(string metaFileName)\n        {\n            Promise promiseReturn = new Promise();\n\n            try\n            {\n                string path = Path.Combine(Application.streamingAssetsPath, metaFileName);\n\n                StreamReader reader = new StreamReader(path);\n                MetaData metaData = JsonConvert.DeserializeObject<MetaData>(reader.ReadToEnd());\n                reader.Close();\n\n                _staticDataModel.SeedMetaData(metaData);\n\n                promiseReturn.Resolve();\n            }\n            catch(Exception ex)\n            {\n                promiseReturn.Reject(ex);\n            }\n\n            return promiseReturn;\n        }\n    }\n}\n'Idle-Miner/Assets/Scripts/core/Installers/CoreSceneInstaller.cs'\n:﻿using System;\nusing Zenject;\n\nnamespace PG.Core.Installers\n{\n    public class CoreSceneInstaller : MonoInstaller\n    {\n        public override void InstallBindings()\n        {\n            Container.Bind<CoreSceneInstaller>().FromInstance(this);\n        }\n\n\n        public void OnNewValidOpenState(Type openState)\n        {\n        }\n    }\n}\n\n'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Startup/StartupMediator.cs'\n:﻿using System;\nusing PG.Core.Contexts;\nusing PG.Core.Installers;\nusing PG.IdleMiner.Models.MediatorModels;\nusing PG.IdleMiner.Models.RemoteDataModels;\nusing PG.IdleMiner.Views.Startup;\nusing UniRx;\nusing UnityEngine;\nusing Zenject;\n\nnamespace PG.IdleMiner.Contexts.Startup\n{\n    public partial class StartupMediator : StateMachineMediator\n    {\n        [Inject] private readonly StartupView _view;\n\n        [Inject] private readonly StartupModel _startupModel;\n        [Inject] private readonly RemoteDataModel _remoteDataModel;\n\n        public StartupMediator()\n        {\n            Disposables = new CompositeDisposable();\n        }\n\n        public override void Initialize()\n        {\n            base.Initialize();\n\n\n            StateBehaviours.Add((int)StartupModel.ELoadingProgress.LoadPopup, new StartupStateLoadPopup(this));\n            StateBehaviours.Add((int)StartupModel.ELoadingProgress.LoadStaticData, new StartupStateLoadStaticData(this));\n            StateBehaviours.Add((int)StartupModel.ELoadingProgress.LoadUserData, new StartupStateLoadUserData(this));\n            StateBehaviours.Add((int)StartupModel.ELoadingProgress.CreateUserData, new StartupStateCreateUserData(this));\n            StateBehaviours.Add((int)StartupModel.ELoadingProgress.LoadHud, new StartupStateLoadHud(this));\n            StateBehaviours.Add((int)StartupModel.ELoadingProgress.LoadGamePlay, new StartupStateLoadGamePlay(this));\n            StateBehaviours.Add((int)StartupModel.ELoadingProgress.GamePlay, new StartupStateGamePlay(this));\n\n            _startupModel.LoadingProgress.Subscribe(OnLoadingProgressChanged).AddTo(Disposables);\n        }\n\n        private void OnLoadingProgressChanged(StartupModel.ELoadingProgress loadingProgress)\n        {\n            _view.ProgressBar.value = (float)loadingProgress / 100;\n\n            GoToState((int)loadingProgress);\n        }\n\n        private void OnReload()\n        {\n            UnloadAllScenesExceptSignal.UnloadAllExcept(ProjectScenes.Startup, SignalBus).Done\n            (\n                () =>\n                {\n                    _startupModel.LoadingProgress.Value = StartupModel.ELoadingProgress.LoadPopup;\n                },\n                exception =>\n                {\n                    Debug.LogError(\"Error While Reloading: \" + exception.ToString());\n                }\n            );\n        }\n\n        private void OnLoadingStart()\n        {\n            _view.Show();\n        }\n    }\n}\n\n",
        "gt": [
            "'Idle-Miner/Assets/Scripts/core/Installers/CoreSceneInstaller.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Startup/StartupMediator.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Commands/LoadStaticDataCommand.cs'"
        ]
    },
    {
        "files": [
            "'emgutf/Emgu.TF.Lite/XNNPackDelegate.cs'",
            "'emgutf/Emgu.TF.Lite.Models/CocoSsdMobilenet.cs'",
            "'emgutf/Emgu.TF.Test/Emgu.TF.Lite.Test/UnitTest1.cs'"
        ],
        "content": "'emgutf/Emgu.TF.Lite/XNNPackDelegate.cs'\n:﻿\n\n\n\n\nusing System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Runtime.InteropServices;\n\nnamespace Emgu.TF.Lite\n{\n\n\n\n    public class XNNPackDelegate : Emgu.TF.Util.UnmanagedObject, IDelegate\n    {\n\n\n\n        public XNNPackDelegate()\n        {\n            _ptr = TfLiteInvoke.tfeXNNPackDelegateCreateDefault();\n        }\n\n\n\n\n\n        public XNNPackDelegate(int numThreads)\n        {\n            _ptr = TfLiteInvoke.tfeXNNPackDelegateCreate(numThreads);\n        }\n\n\n\n\n        IntPtr IDelegate.DelegatePtr\n        {\n            get { return _ptr; }\n        }\n\n\n\n\n        protected override void DisposeObject()\n        {\n            if (IntPtr.Zero != _ptr)\n            {\n                TfLiteInvoke.tfeTfLiteDelegateRelease(ref _ptr);\n            }\n        }\n    }\n\n    public static partial class TfLiteInvoke\n    {\n        [DllImport(ExternLibrary, CallingConvention = TfLiteInvoke.TfLiteCallingConvention)]\n        internal static extern IntPtr tfeXNNPackDelegateCreateDefault();\n\n        [DllImport(ExternLibrary, CallingConvention = TfLiteInvoke.TfLiteCallingConvention)]\n        internal static extern IntPtr tfeXNNPackDelegateCreate(int numThreads);\n\n        [DllImport(ExternLibrary, CallingConvention = TfLiteInvoke.TfLiteCallingConvention)]\n        internal static extern void tfeTfLiteDelegateRelease(ref IntPtr delegatePtr);\n\n        private static XNNPackDelegate _xnnPackDelegate;\n\n\n\n\n        public static XNNPackDelegate DefaultXNNPackDelegate\n        {\n            get\n            {\n                if (_xnnPackDelegate == null)\n                {\n                    XNNPackDelegate d = new XNNPackDelegate();\n                    if (d.Ptr != IntPtr.Zero)\n                        _xnnPackDelegate = d;\n                }\n\n                return _xnnPackDelegate;\n            }\n\n        }\n\n\n\n\n        public static bool HasXNNPack\n        {\n            get\n            {\n                XNNPackDelegate d = DefaultXNNPackDelegate;\n                return d != null;\n            }\n        }\n    }\n}\n\n'emgutf/Emgu.TF.Lite.Models/CocoSsdMobilenet.cs'\n:﻿\n\n\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Text;\nusing Emgu.TF.Lite;\nusing Emgu.Models;\nusing System.IO;\nusing System.ComponentModel;\nusing System.Diagnostics;\nusing System.Net;\nusing System.Threading.Tasks;\n\n#if UNITY_EDITOR || UNITY_IOS || UNITY_ANDROID || UNITY_STANDALONE\nusing UnityEngine;\n#endif\n\n#if __IOS__\nusing UIKit;\nusing CoreGraphics;\n#elif __MACOS__\nusing AppKit;\n#endif\n\nnamespace Emgu.TF.Lite.Models\n{\n\n\n\n    public class CocoSsdMobilenet : Emgu.TF.Util.UnmanagedObject\n    {\n        private FileDownloadManager _downloadManager;\n\n        private Interpreter _interpreter = null;\n        private String[] _labels = null;\n        private FlatBufferModel _model = null;\n        private Tensor _inputTensor;\n        private Tensor[] _outputTensors;\n\n#if UNITY_EDITOR || UNITY_IOS || UNITY_ANDROID || UNITY_STANDALONE\n        public double DownloadProgress\n        {\n            get\n            {\n                if (_downloadManager == null)\n                    return 0;\n                if (_downloadManager.CurrentWebClient == null)\n                    return 1;\n                return _downloadManager.CurrentWebClient.downloadProgress;\n            }\n        }\n\n        public String DownloadFileName\n        {\n            get\n            {\n                if (_downloadManager == null)\n                    return null;\n                if (_downloadManager.CurrentWebClient == null)\n                    return null;\n                return _downloadManager.CurrentWebClient.url;\n            }\n        }\n#endif\n\n\n\n\n        public CocoSsdMobilenet()\n        {\n            _downloadManager = new FileDownloadManager();\n            _downloadManager.OnDownloadProgressChanged += onDownloadProgressChanged;\n        }\n        private void onDownloadProgressChanged(long? totalBytesToReceive, long bytesReceived, double? progressPercentage)\n        {\n            if (OnDownloadProgressChanged != null)\n                OnDownloadProgressChanged(totalBytesToReceive, bytesReceived, progressPercentage);\n        }\n\n\n\n\n        public event FileDownloadManager.DownloadProgressChangedEventHandler OnDownloadProgressChanged;\n\n\n\n\n\n\n\n\n        public virtual\n#if UNITY_EDITOR || UNITY_IOS || UNITY_ANDROID || UNITY_STANDALONE\n            IEnumerator\n#else\n            async Task\n#endif\n            Init(\n                DownloadableFile modelFile = null,\n                DownloadableFile labelFile = null,\n                IDelegate optDelegate = null)\n        {\n            if (!Imported)\n            {\n                _downloadManager.Clear();\n\n                _downloadManager.AddFile(modelFile);\n                _downloadManager.AddFile(labelFile);\n\n#if UNITY_EDITOR || UNITY_IOS || UNITY_ANDROID || UNITY_STANDALONE\n            yield return _downloadManager.Download();\n#else\n                await _downloadManager.Download();\n#endif\n                if (_downloadManager.AllFilesDownloaded)\n                    ImportGraph(optDelegate);\n                else\n                {\n                    System.Diagnostics.Trace.WriteLine(\"Failed to download all files\");\n                }\n            }\n        }\n\n\n\n\n        public bool Imported\n        {\n            get\n            {\n                return _interpreter != null;\n            }\n        }\n\n        private void ImportGraph(IDelegate optDelegate = null)\n        {\n\n#if UNITY_EDITOR || UNITY_IOS || UNITY_ANDROID || UNITY_STANDALONE\n            UnityEngine.Debug.Log(\"Reading model definition\");\n#endif\n\n            if (_labels == null)\n            {\n                String labelFileName = _downloadManager.Files[1].LocalFile;\n                System.Diagnostics.Debug.Assert(File.Exists(labelFileName), String.Format(\"File {0} doesn't exist\", labelFileName));\n\n                if (!File.Exists(labelFileName))\n                    throw new Exception(\"Label file does not exist!\");\n                _labels = File.ReadAllLines(labelFileName);\n            }\n\n            if (_model == null)\n            {\n                String modelFileName = _downloadManager.Files[0].LocalFile;\n                System.Diagnostics.Debug.Assert(File.Exists(modelFileName), String.Format(\"File {0} doesn't exist\", modelFileName));\n\n                if (!File.Exists(modelFileName))\n                {\n                    throw new Exception(\"Model file does not exist!\");\n                }\n                _model = new FlatBufferModel(modelFileName);\n                if (!_model.CheckModelIdentifier())\n                    throw new Exception(\"Model identifier check failed\");\n            }\n\n            if (_interpreter == null)\n            {\n                _interpreter = new Interpreter(_model);\n\n                bool isAndroid = false;\n#if UNITY_ANDROID && (!UNITY_EDITOR)\n                isAndroid = true;\n#else\n                System.Reflection.Assembly monoAndroidAssembly = Emgu.TF.Util.Toolbox.FindAssembly(\"Mono.Android.dll\");\n                if (monoAndroidAssembly != null)\n                {\n                    isAndroid = true;\n                }\n#endif\n                if (isAndroid)\n                {\n\n                    _interpreter.ModifyGraphWithDelegate(TfLiteInvoke.DefaultNnApiDelegate);\n\n                    _interpreter.SetNumThreads(4);\n                }\n\n                if (optDelegate != null)\n                {\n                    _interpreter.ModifyGraphWithDelegate(optDelegate);\n                }\n                Status allocateTensorStatus = _interpreter.AllocateTensors();\n                if (allocateTensorStatus == Status.Error)\n                    throw new Exception(\"Failed to allocate tensor\");\n            }\n\n            if (_inputTensor == null)\n            {\n                _inputTensor = _interpreter.Inputs[0];\n            }\n\n            if (_outputTensors == null)\n            {\n                _outputTensors = _interpreter.Outputs;\n            }\n        }\n\n\n\n\n        public Interpreter Interpreter\n        {\n            get\n            {\n                return _interpreter;\n            }\n        }\n\n\n\n\n        public Tensor InputTensor\n        {\n            get\n            {\n                return _inputTensor;\n            }\n        }\n\n\n\n\n        public String[] Labels\n        {\n            get { return _labels; }\n        }\n\n\n#if UNITY_EDITOR || UNITY_IOS || UNITY_ANDROID || UNITY_STANDALONE\n        public RecognitionResult[] Recognize(Texture texture, bool flipUpsideDown = true, bool swapBR = false, float scoreThreshold = 0.0f)\n        {\n            int height = _inputTensor.Dims[1];\n            int width = _inputTensor.Dims[2];\n            NativeImageIO.ReadTensorFromTexture<byte>(\n                texture,\n                _inputTensor.DataPointer,\n                height, width, 0.0f, 1.0f,\n                flipUpsideDown,\n                swapBR);\n\n            _interpreter.Invoke();\n\n            return GetResults(scoreThreshold);\n        }\n#else\n\n#if __IOS__\n\n\n\n\n\n\n        public RecognitionResult[] Recognize(UIImage image, float scoreThreshold = 0.0f)\n        {\n            int height = _inputTensor.Dims[1];\n            int width = _inputTensor.Dims[2];\n\n            NativeImageIO.ReadImageToTensor<byte>(image, _inputTensor.DataPointer, height, width, 0.0f, 1.0f);\n\n            _interpreter.Invoke();\n\n            return GetResults(scoreThreshold);\n        }\n#elif __MACOS__\n\n\n\n\n\n\n        public RecognitionResult[] Recognize(NSImage image, float scoreThreshold = 0.0f)\n        {\n            int height = _inputTensor.Dims[1];\n            int width = _inputTensor.Dims[2];\n\n            NativeImageIO.ReadImageToTensor<byte>(image, _inputTensor.DataPointer, height, width, 0.0f, 1.0f);\n\n            _interpreter.Invoke();\n\n            return GetResults(scoreThreshold);\n        }\n#endif\n        private void ReadImageFileToTensor(String imageFile)\n        {\n            int height = _inputTensor.Dims[1];\n            int width = _inputTensor.Dims[2];\n\n            NativeImageIO.ReadImageFileToTensor<byte>(imageFile, _inputTensor.DataPointer, height, width, 0.0f, 1.0f);\n        }\n\n\n\n\n\n\n\n        public RecognitionResult[] Recognize(String imageFile, float scoreThreshold = 0.0f)\n        {\n            ReadImageFileToTensor(imageFile);\n\n            _interpreter.Invoke();\n            return GetResults(scoreThreshold);\n        }\n#endif\n\n\n\n\n\n\n        public RecognitionResult[] GetResults(float scoreThreshold)\n        {\n            float[,,] outputLocations = _interpreter.Outputs[0].JaggedData as float[,,];\n            float[] classes = _interpreter.Outputs[1].Data as float[];\n            float[] scores = _interpreter.Outputs[2].Data as float[];\n            int numDetections = (int)Math.Round((_interpreter.Outputs[3].Data as float[])[0]);\n\n\n\n\n            List<RecognitionResult> results = new List<RecognitionResult>();\n\n            int labelOffset = 1;\n            for (int i = 0; i < numDetections; i++)\n            {\n\n\n\n                if (scoreThreshold > 0.0f && scores[i] < scoreThreshold)\n                    continue;\n\n                RecognitionResult r = new RecognitionResult();\n                r.Class = (int)Math.Round(classes[i]);\n                r.Label = _labels[r.Class + labelOffset];\n                r.Score = scores[i];\n                float x0 = outputLocations[0, i, 1];\n                float y0 = outputLocations[0, i, 0];\n                float x1 = outputLocations[0, i, 3];\n                float y1 = outputLocations[0, i, 2];\n                r.Rectangle = new float[] { x0, y0, x1, y1 };\n\n                results.Add(r);\n            }\n\n            return results.ToArray();\n        }\n\n\n\n\n        public class RecognitionResult\n        {\n\n\n\n            public float[] Rectangle;\n\n\n\n            public String Label;\n\n\n\n            public double Score;\n\n\n\n            public int Class;\n        }\n\n\n\n\n        protected override void DisposeObject()\n        {\n\n            if (_interpreter != null)\n            {\n                _interpreter.Dispose();\n                _interpreter = null;\n            }\n\n            if (_model != null)\n            {\n                _model.Dispose();\n                _model = null;\n            }\n        }\n    }\n}\n\n'emgutf/Emgu.TF.Test/Emgu.TF.Lite.Test/UnitTest1.cs'\n:﻿using System;\n#if VS_TEST\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing TestAttribute = Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute;\nusing TestFixture = Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute;\n#else\nusing NUnit.Framework;\n#endif\nusing Emgu.TF.Lite;\nusing Emgu.TF.Lite.Models;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Emgu.CV;\n\nnamespace Emgu.TF.Lite.Test\n{\n    [TestFixture]\n    public class UnitTest1\n    {\n        [TestAttribute]\n        public void TestGetVersion()\n        {\n            String version = TfLiteInvoke.Version;\n            String emgucvBuildInfo = Emgu.CV.CvInvoke.BuildInformation;\n        }\n\n        [TestAttribute]\n        public async Task TestMobilenet()\n        {\n            using (Mobilenet mobilenet = new Mobilenet())\n            {\n                await mobilenet.Init();\n                var result = mobilenet.Recognize(\"grace_hopper.jpg\")[0];\n            }\n        }\n    }\n}\n",
        "gt": [
            "'emgutf/Emgu.TF.Lite/XNNPackDelegate.cs'",
            "'emgutf/Emgu.TF.Lite.Models/CocoSsdMobilenet.cs'",
            "'emgutf/Emgu.TF.Test/Emgu.TF.Lite.Test/UnitTest1.cs'"
        ]
    },
    {
        "files": [
            "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'",
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/BTCondIsTargetGuardedDef.cs'",
            "'WolvenKit-7/WolvenKit/Utility/ProductionWindowFactory.cs'",
            "'WolvenKit-7/WolvenKit/Extensions/ComboBoxExtensions.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/Program.cs'",
            "'WolvenKit-7/WolvenKit/Forms/UserControl/frmOutput.cs'"
        ],
        "content": "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'\n:﻿using System.Linq;\nusing System.Xml.Linq;\nusing WolvenKit;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit.Nvidia.HairWorks\n{\n    class NvHairAssetDescriptor\n    {\n\n        public string checksum = \"0x299b335f 0x2cad8b54 0xcaf3c98f 0xa3094fa7\";\n\n        public XElement serialize(CFurMeshResource chunk)\n        {\n\n\n            var ret = NvidiaXML.CreateStructHeader(\"\", \"Ref\", \"HairSceneDescriptor\", \"1.0\", checksum);\n            ret.AddNvValue(\"numGuideHairs\", \"U32\", chunk.BoneIndices.Count.ToString());\n            ret.AddNvValue(\"numVertices\",\"U32\", chunk.Positions.Count.ToString());\n            ret.AddNvArray(\"vertices\",\"Vec3\",\"\",Apex.FormatCoordinateArray(chunk.Positions));\n            var endindicies = chunk.EndIndices;\n            ret.AddNvArray(\"endIndices\",\"U32\",endindicies.Count.ToString(),endindicies.Aggregate(\"\",(c,n) => c += \" \" + n));\n            ret.AddNvValue(\"numFaces\",\"U32\",\"\");\n            var faceIndices = chunk.FaceIndices;\n            ret.AddNvArray(\"faceIndices\",\"U32\",faceIndices.Count.ToString(),faceIndices.Aggregate(\"\",(c,n) => c += \" \" + n));\n            ret.AddNvArray(\"faceUVs\",\"Vec2\",\"\",\"\");\n            ret.AddNvValue(\"numBones\", \"U32\", chunk.BoneCount.ToString());\n            ret.AddNvArray(\"boneIndices\",\"Vec4\",\"\",\"\");\n            ret.AddNvArray(\"boneWeights\",\"Vec4\",\"\",\"\");\n            ret.AddNvArray(\"boneNames\",\"U8\",\"\",\"\");\n            ret.AddNvArray(\"boneNameList\",\"String\",\"\",\"\");\n            ret.AddNvArray(\"bindPoses\",\"Mat44\",\"\",\"\");\n            ret.AddNvArray(\"boneParents\",\"I32\",\"\",\"\");\n            ret.AddNvValue(\"numBoneSpheres\",\"U32\",\"\");\n            ret.AddNvArray(\"boneSpheres\",\"Struct\",\"\",\"\");\n            ret.AddNvValue(\"numBoneCapsules\",\"U32\",\"\");\n            ret.AddNvArray(\"boneCapsuleIndices\",\"U32\",\"\",\"\");\n            ret.AddNvValue(\"numPinConstraints\",\"U32\",\"\");\n            ret.AddNvArray(\"pinConstraints\",\"Struct\",\"\",\"\");\n            ret.AddNvValue(\"sceneUnit\",\"F32\",\"\");\n            ret.AddNvValue(\"upAxis\",\"U32\",\"\");\n            ret.AddNvValue(\"handedness\",\"U32\",\"\");\n            return ret;\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/BTCondIsTargetGuardedDef.cs'\n:using System.IO;\nusing System.Runtime.Serialization;\nusing WolvenKit.CR2W.Reflection;\nusing FastMember;\nusing static WolvenKit.CR2W.Types.Enums;\n\n\nnamespace WolvenKit.CR2W.Types\n{\n\t[DataContract(Namespace = \"\")]\n\t[REDMeta]\n\tpublic class BTCondIsTargetGuardedDef : IBehTreeConditionalTaskDefinition\n\t{\n\t\t[Ordinal(1)] [RED(\"longerThan\")] \t\tpublic CFloat LongerThan { get; set;}\n\n\t\tpublic BTCondIsTargetGuardedDef(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name){ }\n\n\t\tpublic static new CVariable Create(CR2WFile cr2w, CVariable parent, string name) => new BTCondIsTargetGuardedDef(cr2w, parent, name);\n\n\t\tpublic override void Read(BinaryReader file, uint size) => base.Read(file, size);\n\n\t\tpublic override void Write(BinaryWriter file) => base.Write(file);\n\n\t}\n}\n'WolvenKit-7/WolvenKit/Utility/ProductionWindowFactory.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing WolvenKit.Common;\nusing WolvenKit.Common.Services;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit.Utility\n{\n    public class ProductionWindowFactory : IWindowFactory\n    {\n        public string ShowRenameForm(string filepath)\n        {\n            string output = \"\";\n            var dlg = new frmRenameDialog() { FileName = filepath };\n            if (dlg.ShowDialog() == DialogResult.OK)\n            {\n                output = dlg.FileName;\n            }\n\n            return output;\n        }\n\n        public (string, string) ShowAddChunkFormModal(IEnumerable<string> availableTypes, bool isVariant = false, bool allowEditName = false)\n        {\n            using (var form = new frmAddChunk(availableTypes.ToList(), isVariant, allowEditName))\n            {\n                var result = form.ShowDialog();\n\n                var output = result == DialogResult.OK\n                    ? form.FinalType\n                    : \"\";\n                return (output, form.VarName);\n            }\n        }\n\n        public void ShowStringsGUIModal()\n        {\n            var StringsGui = MockKernel.Get().StringsGui;\n\n            if (StringsGui == null)\n            {\n                StringsGui = new frmStringsGui();\n                StringsGui.ShowDialog();\n            }\n            else\n                StringsGui.ShowDialog();\n        }\n\n        public void RequestStringsGUI()\n        {\n            var StringsGui = MockKernel.Get().StringsGui;\n\n            if (StringsGui == null)\n                StringsGui = new frmStringsGui();\n\n            if (StringsGui.AreHashesDifferent())\n            {\n                var result =\n                    MessageBox.Show(\n                        \"There are no encoded CSV files in your mod, do you want to open Strings Encoder GUI?\",\n                        \"\", MessageBoxButtons.YesNo, MessageBoxIcon.Information);\n                if (result == DialogResult.Yes)\n                    StringsGui.ShowDialog();\n            }\n        }\n\n        public Common.WinFormsEnums.DialogResult ShowMessageBox(string message, string caption, Common.WinFormsEnums.MessageBoxButtons button, Common.WinFormsEnums.MessageBoxIcon icon)\n        {\n            var i = (int) button;\n            var j = (int) icon;\n\n            var r = (int)MessageBox.Show(message\n                , caption\n                , (System.Windows.Forms.MessageBoxButtons)i\n                , (System.Windows.Forms.MessageBoxIcon)j);\n\n            return (Common.WinFormsEnums.DialogResult) r;\n        }\n\n        public (bool, IWitcherFile) ResolveExtractAmbigious(IEnumerable<IWitcherFile> archives)\n        {\n            var dlg = new frmExtractAmbigious(archives);\n            var res = dlg.ShowDialog();\n            var skip = dlg.Skip;\n            if (res == DialogResult.Cancel)\n            {\n                return (skip, null);\n            }\n            var selectedBundle = dlg.SelectedBundle;\n            return (skip, selectedBundle);\n        }\n\n        public PackSettings ShowPackSettings()\n        {\n            var frm = new frmPackSettings();\n            var dlg = frm.ShowDialog();\n            if (dlg == System.Windows.Forms.DialogResult.OK)\n            {\n                return frm.PackSettings;\n            }\n\n            return null;\n        }\n\n        public string ShowOpenFileDialog(string title, string filter, string initialDirectory)\n        {\n            var dlg = new OpenFileDialog\n            {\n                Title = title,\n                Filter = filter,\n                InitialDirectory = initialDirectory\n            };\n            return dlg.ShowDialog() == System.Windows.Forms.DialogResult.OK\n                ? dlg.FileName\n                : \"\";\n        }\n\n\n\n\n        void IWindowFactory.ShowConsole() => MockKernel.Get().ShowConsole();\n\n        void IWindowFactory.ShowOutput() => MockKernel.Get().ShowOutput();\n    }\n}\n\n'WolvenKit-7/WolvenKit/Extensions/ComboBoxExtensions.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing WolvenKit.CR2W;\nusing WolvenKit.CR2W.Types;\nusing WolvenKit.Utility;\n\nnamespace WolvenKit.Extensions\n{\n    public static class ComboBoxExtensions\n    {\n        public static void UpdateComboBoxWith(this ComboBox editor, IChunkPtrAccessor ptr)\n        {\n            editor.Items.Add(new PtrComboItem { Text = \"\", Value = null });\n\n            var availableChunks = CR2WManager.GetAvailableTypes(ptr.ReferenceType).Select(_ => _.Name).ToList();\n            foreach (var chunk in ptr.cr2w.chunks.Where(_ => availableChunks.Contains(_.REDType)))\n            {\n                editor.Items.Add(new PtrComboItem\n                    {\n                        Text = $\"{chunk.REDType} #{chunk.ChunkIndex}\",\n                        Value = chunk\n\n                    }\n                );\n            }\n\n\n            editor.Items.Add(new PtrComboItem\n            {\n                Text = $\"<Add new chunk ...>\",\n                Value = null\n\n            });\n\n\n            if (ptr.Reference == null)\n                editor.SelectedIndex = 0;\n            else\n            {\n                int selIndex = 0;\n                for (int i = 0; i < editor.Items.Count; i++)\n                {\n                    if (editor.Items[i].ToString() == $\"{ptr.Reference.REDType} #{ptr.Reference.ChunkIndex}\")\n                    {\n                        selIndex = i;\n                        break;\n                    }\n                }\n\n                editor.SelectedIndex = selIndex;\n            }\n        }\n    }\n\n\n}\n\n'WolvenKit-7/WolvenKit.Nvidia/Program.cs'\n:﻿using System;\nusing System.IO;\nusing WolvenKit.Nvidia.HairWorks;\nusing WolvenKit.CR2W;\n\nnamespace WolvenKit.Nvidia\n{\n    class Program\n    {\n\n        [STAThread]\n        static void Main(string[] args)\n        {\n            var br = new BinaryReader(new FileStream(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\hw.redfur\",FileMode.Open));\n            var redfur = new CR2WFile();\n            redfur.Read(br);\n            Apex.HairWorks.ConvertToApexXml(redfur).Save(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\out.apx\");\n            NvidiaXML.BreakXmlHeader(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\out.apx\");\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit/Forms/UserControl/frmOutput.cs'\n:﻿using System;\nusing System.Drawing;\nusing System.IO;\nusing System.Windows.Forms;\nusing WeifenLuo.WinFormsUI.Docking;\nusing WolvenKit.Common.Services;\nusing WolvenKit.Services;\nusing WolvenKit.Extensions;\n\nnamespace WolvenKit\n{\n    public partial class frmOutput : DockContent, IThemedContent\n    {\n\n\n        public frmOutput()\n        {\n            InitializeComponent();\n            ApplyCustomTheme();\n        }\n\n        public void AddText(string text,Logtype type = Logtype.Normal)\n        {\n            switch (type)\n            {\n                case Logtype.Error:\n                    txOutput.AppendText(text,Color.Red);\n                    break;\n                case Logtype.Important:\n                    txOutput.AppendText(text, Color.Orange);\n                    break;\n                case Logtype.Wcc:\n                    txOutput.AppendText(text);\n                    break;\n                case Logtype.Success:\n                    txOutput.AppendText(text, Color.LimeGreen);\n                    break;\n                default:\n                    txOutput.AppendText(\"[\" + DateTime.Now.ToString(\"G\") + \"]: \" + text);\n                    break;\n            }\n            txOutput.ScrollToCaret();\n        }\n\n        internal void Clear()\n        {\n            txOutput.Clear();\n        }\n\n        private void copyToolStripMenuItem_Click(object sender, System.EventArgs e)\n        {\n            Clipboard.SetText(txOutput.Text);\n        }\n\n        private void saveAsToolStripMenuItem_Click(object sender, System.EventArgs e)\n        {\n            using (var sf = new SaveFileDialog())\n            {\n                sf.Title = \"Choose a location to save the log to.\";\n                sf.Filter = \"Text file (.txt) | *.txt\";\n                if (sf.ShowDialog() == DialogResult.OK)\n                {\n                    File.WriteAllLines(sf.FileName,txOutput.Lines);\n                }\n            }\n        }\n\n        private void clearToolStripMenuItem_Click(object sender, System.EventArgs e)\n        {\n            Clear();\n        }\n\n        public void ApplyCustomTheme()\n        {\n            this.txOutput.BackColor = UIController.GetBackColor();\n            this.txOutput.ForeColor = UIController.GetForeColor();\n        }\n\n        private void txOutput_KeyDown(object sender, KeyEventArgs e)\n        {\n            if (e.KeyCode == Keys.Enter)\n            {\n\n            }\n        }\n    }\n\n\n}",
        "gt": [
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/BTCondIsTargetGuardedDef.cs'",
            "'WolvenKit-7/WolvenKit/Utility/ProductionWindowFactory.cs'",
            "'WolvenKit-7/WolvenKit/Extensions/ComboBoxExtensions.cs'",
            "'WolvenKit-7/WolvenKit/Forms/UserControl/frmOutput.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/Program.cs'"
        ]
    },
    {
        "files": [
            "'ETCore/ETClient/Unity/Assets/GameDemo/Script/Init.cs'",
            "'ETCore/ETServer/Server/ET.Core/Module/DB/DBSaveTask.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/Linq/Translators/AggregateGroupTranslator.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Bson/Serialization/Attributes/IBsonMemberMapAttribute.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/Command.cs'"
        ],
        "content": "'ETCore/ETClient/Unity/Assets/GameDemo/Script/Init.cs'\n:﻿using System;\nusing System.Threading;\nusing UnityEngine;\nusing ETModel;\nnamespace MMOGame{\n\tpublic class Init : MonoBehaviour\n\t{\n\t\tpublic void Start()\n        {\n\t\t\tTime.fixedDeltaTime = 1f / 60;\n\n\t\t\tthis.StartAsync().Coroutine();\n        }\n\n\t\tprivate async ETVoid StartAsync()\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tSynchronizationContext.SetSynchronizationContext(OneThreadSynchronizationContext.Instance);\n\n\t\t\t\tDontDestroyOnLoad(gameObject);\n\t\t\t\tClientConfigHelper.SetConfigHelper();\n\t\t\t\tGame.EventSystem.Add(DLLType.Core, typeof(Core).Assembly);\n\t\t\t\tGame.EventSystem.Add(DLLType.Model, typeof(Model).Assembly);\n\n\t\t\t\tGame.Scene.AddComponent<TimerComponent>();\n\t\t\t\tGame.Scene.AddComponent<GlobalConfigComponent>();\n\t\t\t\tGame.Scene.AddComponent<NetOuterComponent>();\n\t\t\t\tGame.Scene.AddComponent<ResourcesComponent>();\n\n\n\t\t\t\tGame.Scene.AddComponent<UnitComponent>();\n\t\t\t\tGame.Scene.AddComponent<UIComponent>();\n\n\n\t\t\t\tawait BundleHelper.DownloadBundle();\n\n\n\t\t\t\tGame.Scene.GetComponent<ResourcesComponent>().LoadBundle(\"config.unity3d\");\n\t\t\t\tGame.Scene.AddComponent<ConfigComponent>();\n\t\t\t\tGame.Scene.GetComponent<ResourcesComponent>().UnloadBundle(\"config.unity3d\");\n\n\t\t\t\tGame.Scene.AddComponent<OpcodeTypeComponent>();\n\t\t\t\tGame.Scene.AddComponent<MessageDispatcherComponent>();\n\n\t\t\t\tUnitConfig unitConfig = (UnitConfig)Game.Scene.GetComponent<ConfigComponent>().Get(typeof(UnitConfig), 1001);\n\t\t\t\tLog.Debug($\"config {JsonHelper.ToJson(unitConfig)}\");\n\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tLog.Error(e);\n\t\t\t}\n\t\t}\n\n\t\tprivate void Update()\n\t\t{\n\t\t\tOneThreadSynchronizationContext.Instance.Update();\n\t\t\tGame.EventSystem.Update();\n\t\t}\n\n\t\tprivate void FixedUpdate()\n        {\n            Game.EventSystem.FixedUpdate();\n        }\n\n\t\tprivate void LateUpdate()\n\t\t{\n\t\t\tGame.EventSystem.LateUpdate();\n\t\t}\n\n\t\tprivate void OnApplicationQuit()\n\t\t{\n\t\t\tGame.Close();\n\t\t}\n\t}\n}\n'ETCore/ETServer/Server/ET.Core/Module/DB/DBSaveTask.cs'\n:﻿using System;\nusing System.Threading.Tasks;\nusing MongoDB.Driver;\n\nnamespace ETModel\n{\n\n\t[ObjectSystem]\n\tpublic class DbSaveTaskAwakeSystem : AwakeSystem<DBSaveTask, ComponentWithId, string, TaskCompletionSource<bool>>\n\t{\n\t\tpublic override void Awake(DBSaveTask self, ComponentWithId component, string collectionName, TaskCompletionSource<bool> tcs)\n\t\t{\n\t\t\tself.Component = component;\n\t\t\tself.CollectionName = collectionName;\n\t\t\tself.Tcs = tcs;\n\t\t}\n\t}\n\n\tpublic sealed class DBSaveTask : DBTask\n\t{\n\t\tpublic ComponentWithId Component;\n\n\t\tpublic string CollectionName { get; set; }\n\n\t\tpublic TaskCompletionSource<bool> Tcs;\n\n\t\tpublic override async Task Run()\n\t\t{\n\t\t\tDBComponent dbComponent = Game.Scene.GetComponent<DBComponent>();\n\n\t\t\ttry\n\t\t\t{\n\n\t\t\t\tawait dbComponent.GetCollection(this.CollectionName).ReplaceOneAsync(s => s.Id == this.Component.Id, this.Component, new UpdateOptions {IsUpsert = true});\n\t\t\t\tthis.Tcs.SetResult(true);\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tthis.Tcs.SetException(new Exception($\"保存数据失败!  {CollectionName} {Id}\", e));\n\t\t\t}\n\t\t}\n\t}\n}\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/Linq/Translators/AggregateGroupTranslator.cs'\n:\n\nusing System;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Reflection;\nusing MongoDB.Bson;\nusing MongoDB.Bson.Serialization;\nusing MongoDB.Bson.Serialization.Serializers;\nusing MongoDB.Driver.Linq.Expressions;\nusing MongoDB.Driver.Linq.Processors;\n\nnamespace MongoDB.Driver.Linq.Translators\n{\n    internal static class AggregateGroupTranslator\n    {\n        public static RenderedProjectionDefinition<TResult> Translate<TKey, TDocument, TResult>(Expression<Func<TDocument, TKey>> idProjector, Expression<Func<IGrouping<TKey, TDocument>, TResult>> groupProjector, IBsonSerializer<TDocument> parameterSerializer, IBsonSerializerRegistry serializerRegistry, ExpressionTranslationOptions translationOptions)\n        {\n            var bindingContext = new PipelineBindingContext(serializerRegistry);\n\n            var keySelector = BindKeySelector(bindingContext, idProjector, parameterSerializer);\n            var boundGroupExpression = BindGroup(bindingContext, groupProjector, parameterSerializer, keySelector);\n\n            var projectionSerializer = bindingContext.GetSerializer(boundGroupExpression.Type, boundGroupExpression);\n            var projection = AggregateLanguageTranslator.Translate(boundGroupExpression, translationOptions).AsBsonDocument;\n\n\n            if (!projection.Contains(\"_id\"))\n            {\n                var idProjection = AggregateLanguageTranslator.Translate(keySelector, translationOptions);\n                projection.InsertAt(0, new BsonElement(\"_id\", idProjection));\n            }\n\n            return new RenderedProjectionDefinition<TResult>(projection, (IBsonSerializer<TResult>)projectionSerializer);\n        }\n\n        private static Expression BindKeySelector<TKey, TDocument>(PipelineBindingContext bindingContext, Expression<Func<TDocument, TKey>> keySelector, IBsonSerializer<TDocument> parameterSerializer)\n        {\n            var parameterExpression = new DocumentExpression(parameterSerializer);\n            bindingContext.AddExpressionMapping(keySelector.Parameters[0], parameterExpression);\n            var node = PartialEvaluator.Evaluate(keySelector.Body);\n            node = Transformer.Transform(node);\n            node = bindingContext.Bind(node);\n\n            var keySerializer = bindingContext.GetSerializer(node.Type, node);\n            return new GroupingKeyExpression(node, keySerializer);\n        }\n\n        private static Expression BindGroup<TKey, TDocument, TResult>(PipelineBindingContext bindingContext, Expression<Func<IGrouping<TKey, TDocument>, TResult>> groupProjector, IBsonSerializer<TDocument> parameterSerializer, Expression keySelector)\n        {\n            var groupSerializer = new ArraySerializer<TDocument>(parameterSerializer);\n            var groupExpression = new DocumentExpression(groupSerializer);\n\n            var correlationId = Guid.NewGuid();\n            bindingContext.AddCorrelatingId(groupExpression, correlationId);\n            bindingContext.AddExpressionMapping(groupProjector.Parameters[0], groupExpression);\n            bindingContext.AddMemberMapping(typeof(IGrouping<TKey, TDocument>).GetTypeInfo().GetProperty(\"Key\"), keySelector);\n\n            var node = PartialEvaluator.Evaluate(groupProjector.Body);\n            node = Transformer.Transform(node);\n            node = bindingContext.Bind(node);\n\n            return CorrelatedAccumulatorRemover.Remove(node, correlationId);\n        }\n    }\n}\n\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Bson/Serialization/Attributes/IBsonMemberMapAttribute.cs'\n:﻿\n\nnamespace MongoDB.Bson.Serialization\n{\n\n\n\n    public interface IBsonMemberMapAttribute\n    {\n\n\n\n\n        void Apply(BsonMemberMap memberMap);\n    }\n}\n\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/Command.cs'\n:\n\nusing System;\nusing System.Linq.Expressions;\nusing MongoDB.Bson;\nusing MongoDB.Bson.Serialization;\nusing MongoDB.Driver.Core.Misc;\nusing MongoDB.Driver.Linq.Translators;\n\nnamespace MongoDB.Driver\n{\n\n\n\n\n    public sealed class RenderedCommand<TResult>\n    {\n        private readonly BsonDocument _document;\n        private readonly IBsonSerializer<TResult> _resultSerializer;\n\n\n\n\n\n\n        public RenderedCommand(BsonDocument document, IBsonSerializer<TResult> resultSerializer)\n        {\n            _document = Ensure.IsNotNull(document, nameof(document));\n            _resultSerializer = Ensure.IsNotNull(resultSerializer, nameof(resultSerializer));\n        }\n\n\n\n\n        public BsonDocument Document\n        {\n            get { return _document; }\n        }\n\n\n\n\n        public IBsonSerializer<TResult> ResultSerializer\n        {\n            get { return _resultSerializer; }\n        }\n    }\n\n\n\n\n\n    public abstract class Command<TResult>\n    {\n\n\n\n\n\n        public abstract RenderedCommand<TResult> Render(IBsonSerializerRegistry serializerRegistry);\n\n\n\n\n\n\n\n\n        public static implicit operator Command<TResult>(BsonDocument document)\n        {\n            return new BsonDocumentCommand<TResult>(document);\n        }\n\n\n\n\n\n\n\n\n        public static implicit operator Command<TResult>(string json)\n        {\n            return new JsonCommand<TResult>(json);\n        }\n    }\n\n\n\n\n\n    public sealed class BsonDocumentCommand<TResult> : Command<TResult>\n    {\n        private readonly BsonDocument _document;\n        private readonly IBsonSerializer<TResult> _resultSerializer;\n\n\n\n\n\n\n        public BsonDocumentCommand(BsonDocument document, IBsonSerializer<TResult> resultSerializer = null)\n        {\n            _document = Ensure.IsNotNull(document, nameof(document));\n            _resultSerializer = resultSerializer;\n        }\n\n\n\n\n        public BsonDocument Document\n        {\n            get { return _document; }\n        }\n\n\n\n\n        public IBsonSerializer<TResult> ResultSerializer\n        {\n            get { return _resultSerializer; }\n        }\n\n\n        public override RenderedCommand<TResult> Render(IBsonSerializerRegistry serializerRegistry)\n        {\n            return new RenderedCommand<TResult>(\n                _document,\n                _resultSerializer ?? serializerRegistry.GetSerializer<TResult>());\n        }\n    }\n\n\n\n\n\n    public sealed class JsonCommand<TResult> : Command<TResult>\n    {\n        private readonly string _json;\n        private readonly IBsonSerializer<TResult> _resultSerializer;\n\n\n\n\n\n\n        public JsonCommand(string json, IBsonSerializer<TResult> resultSerializer = null)\n        {\n            _json = Ensure.IsNotNullOrEmpty(json, nameof(json));\n            _resultSerializer = resultSerializer;\n        }\n\n\n\n\n        public string Json\n        {\n            get { return _json; }\n        }\n\n\n\n\n        public IBsonSerializer<TResult> ResultSerializer\n        {\n            get { return _resultSerializer; }\n        }\n\n\n        public override RenderedCommand<TResult> Render(IBsonSerializerRegistry serializerRegistry)\n        {\n            return new RenderedCommand<TResult>(\n                BsonDocument.Parse(_json),\n                _resultSerializer ?? serializerRegistry.GetSerializer<TResult>());\n        }\n    }\n\n\n\n\n\n    public sealed class ObjectCommand<TResult> : Command<TResult>\n    {\n        private readonly object _obj;\n        private readonly IBsonSerializer<TResult> _resultSerializer;\n\n\n\n\n\n\n        public ObjectCommand(object obj, IBsonSerializer<TResult> resultSerializer = null)\n        {\n            _obj = Ensure.IsNotNull(obj, nameof(obj));\n            _resultSerializer = resultSerializer;\n        }\n\n\n\n\n        public object Object\n        {\n            get { return _obj; }\n        }\n\n\n\n\n        public IBsonSerializer<TResult> ResultSerializer\n        {\n            get { return _resultSerializer; }\n        }\n\n\n        public override RenderedCommand<TResult> Render(IBsonSerializerRegistry serializerRegistry)\n        {\n            var serializer = serializerRegistry.GetSerializer(_obj.GetType());\n            return new RenderedCommand<TResult>(\n                new BsonDocumentWrapper(_obj, serializer),\n                _resultSerializer ?? serializerRegistry.GetSerializer<TResult>());\n        }\n    }\n}\n",
        "gt": [
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Bson/Serialization/Attributes/IBsonMemberMapAttribute.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/Linq/Translators/AggregateGroupTranslator.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/Command.cs'",
            "'ETCore/ETServer/Server/ET.Core/Module/DB/DBSaveTask.cs'",
            "'ETCore/ETClient/Unity/Assets/GameDemo/Script/Init.cs'"
        ]
    },
    {
        "files": [
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/WebApi/Program.cs'",
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/Services/Contracts/IAuthenticationService.cs'",
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/WebApi/Extensions/ServicesExtensions.cs'",
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/Presentation/Controllers/BooksV2Controller.cs'"
        ],
        "content": "'btk-akademi-aspnet-core-web-api/bsStoreApp/WebApi/Program.cs'\n:using AspNetCoreRateLimit;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing NLog;\nusing Presentation.ActionFilters;\nusing Repositories.EFCore;\nusing Services;\nusing Services.Contracts;\nusing WebApi.Extensions;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nLogManager.LoadConfiguration(String.Concat(Directory.GetCurrentDirectory(),\"/nlog.config\"));\n\nbuilder.Services.AddControllers(config =>\n{\n    config.RespectBrowserAcceptHeader = true;\n    config.ReturnHttpNotAcceptable = true;\n    config.CacheProfiles.Add(\"5mins\", new CacheProfile() { Duration = 300 });\n})\n.AddXmlDataContractSerializerFormatters()\n.AddCustomCsvFormatter()\n.AddApplicationPart(typeof(Presentation.AssemblyReference).Assembly)\n.AddNewtonsoftJson(opt =>\n    opt.SerializerSettings.ReferenceLoopHandling =\n    Newtonsoft.Json.ReferenceLoopHandling.Ignore\n);\n\nbuilder.Services.Configure<ApiBehaviorOptions>(options =>\n{\n    options.SuppressModelStateInvalidFilter = true;\n});\n\n\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.ConfigureSwagger();\nbuilder.Services.ConfigureSqlContext(builder.Configuration);\nbuilder.Services.ConfigureRepositoryManager();\nbuilder.Services.ConfigureServiceManager();\nbuilder.Services.ConfigureLoggerService();\nbuilder.Services.AddAutoMapper(typeof(Program));\nbuilder.Services.ConfigureActionFilters();\nbuilder.Services.ConfigureCors();\nbuilder.Services.ConfigureDataShaper();\nbuilder.Services.AddCustomMediaTypes();\nbuilder.Services.AddScoped<IBookLinks, BookLinks>();\nbuilder.Services.ConfigureVersioning();\nbuilder.Services.ConfigureResponseCaching();\nbuilder.Services.ConfigureHttpCacheHeaders();\nbuilder.Services.AddMemoryCache();\nbuilder.Services.ConfigureRateLimitingOptions();\nbuilder.Services.AddHttpContextAccessor();\nbuilder.Services.ConfigureIdentity();\nbuilder.Services.ConfigureJWT(builder.Configuration);\n\nbuilder.Services.RegisterRepositories();\nbuilder.Services.RegisterServices();\n\nvar app = builder.Build();\n\nvar logger = app.Services.GetRequiredService<ILoggerService>();\napp.ConfigureExceptionHandler(logger);\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI(s =>\n    {\n        s.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"BTK Akademi v1\");\n        s.SwaggerEndpoint(\"/swagger/v2/swagger.json\", \"BTK Akademi v2\");\n    });\n}\n\nif(app.Environment.IsProduction())\n{\n    app.UseHsts();\n}\n\napp.UseHttpsRedirection();\n\napp.UseIpRateLimiting();\napp.UseCors(\"CorsPolicy\");\napp.UseResponseCaching();\napp.UseHttpCacheHeaders();\n\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n\n'btk-akademi-aspnet-core-web-api/bsStoreApp/Services/Contracts/IAuthenticationService.cs'\n:﻿using Entities.DataTransferObjects;\nusing Microsoft.AspNetCore.Identity;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Services.Contracts\n{\n    public interface IAuthenticationService\n    {\n        Task<IdentityResult> RegisterUser(UserForRegistrationDto userForRegistrationDto);\n        Task<bool> ValidateUser(UserForAuthenticationDto userForAuthDto);\n        Task<TokenDto> CreateToken(bool populateExp);\n        Task<TokenDto> RefreshToken(TokenDto tokenDto);\n\n    }\n}\n\n'btk-akademi-aspnet-core-web-api/bsStoreApp/WebApi/Extensions/ServicesExtensions.cs'\n:﻿using AspNetCoreRateLimit;\nusing AutoMapper;\nusing Entities.DataTransferObjects;\nusing Entities.Models;\nusing Marvin.Cache.Headers;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Formatters;\nusing Microsoft.AspNetCore.Mvc.Versioning;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.IdentityModel.Tokens;\nusing Microsoft.OpenApi.Models;\nusing Presentation.ActionFilters;\nusing Presentation.Controllers;\nusing Repositories.Contracts;\nusing Repositories.EFCore;\nusing Services;\nusing Services.Contracts;\nusing System.Text;\n\nnamespace WebApi.Extensions\n{\n    public static class ServicesExtensions\n    {\n        public static void ConfigureSqlContext(this IServiceCollection services,\n            IConfiguration configuration) => services.AddDbContext<RepositoryContext>(options =>\n                    options.UseSqlServer(configuration.GetConnectionString(\"sqlConnection\")));\n\n        public static void ConfigureRepositoryManager(this IServiceCollection services) =>\n            services.AddScoped<IRepositoryManager, RepositoryManager>();\n\n        public static void ConfigureServiceManager(this IServiceCollection services) =>\n            services.AddScoped<IServiceManager, ServiceManager>();\n\n        public static void ConfigureLoggerService(this IServiceCollection services) =>\n            services.AddSingleton<ILoggerService, LoggerManager>();\n\n\n        public static void ConfigureActionFilters(this IServiceCollection services)\n        {\n            services.AddScoped<ValidationFilterAttribute>();\n            services.AddSingleton<LogFilterAttribute>();\n            services.AddScoped<ValidateMediaTypeAttribute>();\n        }\n\n        public static void ConfigureCors(this IServiceCollection services)\n        {\n            services.AddCors(options =>\n            {\n                options.AddPolicy(\"CorsPolicy\", builder =>\n                    builder.AllowAnyOrigin()\n                    .AllowAnyMethod()\n                    .AllowAnyHeader()\n                    .WithExposedHeaders(\"X-Pagination\")\n                );\n            });\n        }\n\n        public static void ConfigureDataShaper(this IServiceCollection services)\n        {\n            services.AddScoped<IDataShaper<BookDto>, DataShaper<BookDto>>();\n        }\n\n        public static void AddCustomMediaTypes(this IServiceCollection services)\n        {\n            services.Configure<MvcOptions>(config =>\n            {\n                var systemTextJsonOutputFormatter = config\n                .OutputFormatters\n                .OfType<SystemTextJsonOutputFormatter>()?.FirstOrDefault();\n\n                if (systemTextJsonOutputFormatter != null)\n                {\n                    systemTextJsonOutputFormatter.SupportedMediaTypes\n                    .Add(\"application/vnd.btkakademi.hateoas+json\");\n\n                    systemTextJsonOutputFormatter.SupportedMediaTypes\n                    .Add(\"application/vnd.btkakademi.apiroot+json\");\n                }\n\n                var xmlOutputFormatter = config\n                .OutputFormatters\n                .OfType<XmlDataContractSerializerOutputFormatter>()?.FirstOrDefault();\n\n                if (xmlOutputFormatter is not null)\n                {\n                    xmlOutputFormatter.SupportedMediaTypes\n                    .Add(\"application/vnd.btkakademi.hateoas+xml\");\n\n                    xmlOutputFormatter.SupportedMediaTypes\n                    .Add(\"application/vnd.btkakademi.apiroot+xml\");\n                }\n            });\n        }\n\n        public static void ConfigureVersioning(this IServiceCollection services)\n        {\n            services.AddApiVersioning(opt =>\n            {\n                opt.ReportApiVersions = true;\n                opt.AssumeDefaultVersionWhenUnspecified = true;\n                opt.DefaultApiVersion = new ApiVersion(1, 0);\n                opt.ApiVersionReader = new HeaderApiVersionReader(\"api-version\");\n\n                opt.Conventions.Controller<BooksController>()\n                    .HasApiVersion(new ApiVersion(1, 0));\n\n                opt.Conventions.Controller<BooksV2Controller>()\n                    .HasDeprecatedApiVersion(new ApiVersion(2, 0));\n            });\n        }\n\n        public static void ConfigureResponseCaching(this IServiceCollection services) =>\n            services.AddResponseCaching();\n\n        public static void ConfigureHttpCacheHeaders(this IServiceCollection services) =>\n            services.AddHttpCacheHeaders(expirationOpt =>\n            {\n                expirationOpt.MaxAge = 90;\n                expirationOpt.CacheLocation = CacheLocation.Public;\n            },\n            validationOpt =>\n            {\n                validationOpt.MustRevalidate = false;\n            });\n\n        public static void ConfigureRateLimitingOptions(this IServiceCollection services)\n        {\n            var rateLimitRules = new List<RateLimitRule>()\n            {\n                new RateLimitRule()\n                {\n                    Endpoint = \"*\",\n                    Limit = 60,\n                    Period = \"1m\"\n                }\n            };\n\n            services.Configure<IpRateLimitOptions>(opt =>\n            {\n                opt.GeneralRules = rateLimitRules;\n            });\n\n            services.AddSingleton<IRateLimitCounterStore, MemoryCacheRateLimitCounterStore>();\n            services.AddSingleton<IIpPolicyStore, MemoryCacheIpPolicyStore>();\n            services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();\n            services.AddSingleton<IProcessingStrategy, AsyncKeyLockProcessingStrategy>();\n        }\n\n        public static void ConfigureIdentity(this IServiceCollection services)\n        {\n            var builder = services.AddIdentity<User, IdentityRole>(opts =>\n            {\n                opts.Password.RequireDigit = true;\n                opts.Password.RequireLowercase = false;\n                opts.Password.RequireUppercase = false;\n                opts.Password.RequireNonAlphanumeric = false;\n                opts.Password.RequiredLength = 6;\n\n                opts.User.RequireUniqueEmail = true;\n            })\n                .AddEntityFrameworkStores<RepositoryContext>()\n                .AddDefaultTokenProviders();\n        }\n\n        public static void ConfigureJWT(this IServiceCollection services,\n            IConfiguration configuration)\n        {\n            var jwtSettings = configuration.GetSection(\"JwtSettings\");\n            var secretKey = jwtSettings[\"secretKey\"];\n\n            services.AddAuthentication(opt =>\n            {\n                opt.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n                opt.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n            }).AddJwtBearer(options =>\n                options.TokenValidationParameters = new TokenValidationParameters\n                {\n                    ValidateIssuer = true,\n                    ValidateAudience = true,\n                    ValidateLifetime = true,\n                    ValidateIssuerSigningKey = true,\n                    ValidIssuer = jwtSettings[\"validIssuer\"],\n                    ValidAudience = jwtSettings[\"validAudience\"],\n                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey))\n                }\n            );\n        }\n\n        public static void ConfigureSwagger(this IServiceCollection services)\n        {\n            services.AddSwaggerGen(s =>\n            {\n                s.SwaggerDoc(\"v1\",\n                    new OpenApiInfo\n                    {\n                        Title = \"BTK Akademi\",\n                        Version = \"v1\",\n                        Description = \"BTK Akademi ASP.NET Core Web API\",\n                        TermsOfService = new Uri(\"https:\n                        Contact = new OpenApiContact\n                        {\n                            Name = \"Zafer CÖMERT\",\n                            Email = \"comertzafer@gmail.com\",\n                            Url = new Uri(\"https:\n                        }\n                    });\n\n                s.SwaggerDoc(\"v2\", new OpenApiInfo { Title = \"BTK Akademi\", Version = \"v2\" });\n\n                s.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme()\n                {\n                    In = ParameterLocation.Header,\n                    Description = \"Place to add JWT with Bearer\",\n                    Name = \"Authorization\",\n                    Type = SecuritySchemeType.ApiKey,\n                    Scheme=\"Bearer\"\n                });\n\n                s.AddSecurityRequirement(new OpenApiSecurityRequirement()\n                {\n                    {\n                        new OpenApiSecurityScheme\n                        {\n                            Reference = new OpenApiReference\n                            {\n                                Type = ReferenceType.SecurityScheme,\n                                Id=\"Bearer\"\n                            },\n                            Name = \"Bearer\"\n                        },\n                        new List<string>()\n                    }\n                });\n            });\n        }\n\n        public static void RegisterRepositories(this IServiceCollection services)\n        {\n            services.AddScoped<IBookRepository, BookRepository>();\n            services.AddScoped<ICategoryRepository, CategoryRepository>();\n        }\n\n        public static void RegisterServices(this IServiceCollection services)\n        {\n            services.AddScoped<IBookService, BookManager>();\n            services.AddScoped<ICategoryService, CategoryManager>();\n            services.AddScoped<IAuthenticationService, AuthenticationManager>();\n        }\n\n    }\n}\n\n'btk-akademi-aspnet-core-web-api/bsStoreApp/Presentation/Controllers/BooksV2Controller.cs'\n:﻿using Microsoft.AspNetCore.Mvc;\nusing Services.Contracts;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Presentation.Controllers\n{\n\n\n    [ApiController]\n    [Route(\"api/books\")]\n    [ApiExplorerSettings(GroupName =\"v2\")]\n    public class BooksV2Controller : ControllerBase\n    {\n        private readonly IServiceManager _manager;\n\n        public BooksV2Controller(IServiceManager manager)\n        {\n            _manager = manager;\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GetAllBooksAsync()\n        {\n            var books = await _manager.BookService.GetAllBooksAsync(false);\n            var booksV2 = books.Select(b => new\n            {\n                Title = b.Title,\n                Id = b.Id\n            });\n            return Ok(booksV2);\n        }\n    }\n}\n",
        "gt": [
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/Services/Contracts/IAuthenticationService.cs'",
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/Presentation/Controllers/BooksV2Controller.cs'",
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/WebApi/Extensions/ServicesExtensions.cs'",
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/WebApi/Program.cs'"
        ]
    },
    {
        "files": [
            "'Vector-Search-AI-Assistant/src/Infrastructure/Services/DependencyInjection.cs'",
            "'Vector-Search-AI-Assistant/src/ChatAPI/Program.cs'",
            "'Vector-Search-AI-Assistant/src/Infrastructure/Services/SemanticCacheService.cs'",
            "'Vector-Search-AI-Assistant/src/Infrastructure/Models/SemanticCacheItem.cs'"
        ],
        "content": "'Vector-Search-AI-Assistant/src/Infrastructure/Services/DependencyInjection.cs'\n:﻿using BuildYourOwnCopilot.Common.Interfaces;\nusing BuildYourOwnCopilot.Common.Models.Configuration;\nusing BuildYourOwnCopilot.Common.Services;\nusing BuildYourOwnCopilot.Infrastructure.Interfaces;\nusing BuildYourOwnCopilot.Infrastructure.Services;\nusing BuildYourOwnCopilot.Service.Interfaces;\nusing BuildYourOwnCopilot.Service.MemorySource;\nusing BuildYourOwnCopilot.Service.Models.ConfigurationOptions;\nusing BuildYourOwnCopilot.Service.Services;\nusing BuildYourOwnCopilot.Service.Services.Text;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace BuildYourOwnCopilot\n{\n\n\n\n    public static partial class DependencyInjection\n    {\n\n\n\n\n        public static void AddCosmosDBService(this IHostApplicationBuilder builder)\n        {\n            builder.Services.AddOptions<CosmosDBSettings>()\n                .Bind(builder.Configuration.GetSection(\"MSCosmosDBOpenAI:CosmosDB\"));\n            builder.Services.AddSingleton<ICosmosDBService, CosmosDBService>();\n            builder.Services.AddSingleton<ICosmosDBClientFactory, CosmosDBClientFactory>();\n        }\n\n\n\n\n\n        public static void AddSemanticKernelRAGService(this IHostApplicationBuilder builder)\n        {\n            builder.Services.AddOptions<SemanticKernelRAGServiceSettings>()\n                .Bind(builder.Configuration.GetSection(\"MSCosmosDBOpenAI\"));\n            builder.Services.AddSingleton<IRAGService, SemanticKernelRAGService>();\n        }\n\n\n\n\n\n        public static void AddChatService(this IHostApplicationBuilder builder)\n        {\n            builder.Services.AddSingleton<IChatService, ChatService>();\n        }\n\n\n\n\n\n        public static void AddPromptService(this IHostApplicationBuilder builder)\n        {\n\n            builder.Services.AddOptions<DurableSystemPromptServiceSettings>()\n                .Bind(builder.Configuration.GetSection(\"MSCosmosDBOpenAI:DurableSystemPrompt\"));\n            builder.Services.AddSingleton<ISystemPromptService, DurableSystemPromptService>();\n        }\n\n\n\n\n\n        public static void AddMemorySourceServices(this IHostApplicationBuilder builder)\n        {\n            builder.Services.AddOptions<BlobStorageMemorySourceSettings>()\n                .Bind(builder.Configuration.GetSection(\"MSCosmosDBOpenAI:BlobStorageMemorySource\"));\n            builder.Services.AddTransient<IMemorySource, BlobStorageMemorySource>();\n        }\n\n\n\n\n\n        public static void AddTextSplittingServices(this IHostApplicationBuilder builder)\n        {\n            builder.Services.AddSingleton<ITokenizerService, MicrosoftBPETokenizerService>();\n            builder.Services.ActivateSingleton<ITokenizerService>();\n\n            builder.Services.AddOptions<TokenTextSplitterServiceSettings>()\n                .Bind(builder.Configuration.GetSection(\"MSCosmosDBOpenAI:TextSplitter\"));\n            builder.Services.AddSingleton<ITextSplitterService, TokenTextSplitterService>();\n        }\n\n\n\n\n\n        public static void AddItemTransformerFactory(this IHostApplicationBuilder builder) =>\n            builder.Services.AddSingleton<IItemTransformerFactory, ItemTransformerFactory>();\n    }\n}\n\n'Vector-Search-AI-Assistant/src/ChatAPI/Program.cs'\n:using BuildYourOwnCopilot;\n\nnamespace ChatAPI\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n\n            if (!builder.Environment.IsDevelopment())\n                builder.Services.AddApplicationInsightsTelemetry();\n\n            builder.AddItemTransformerFactory();\n\n            builder.AddCosmosDBService();\n\n            builder.AddSemanticKernelRAGService();\n            builder.AddMemorySourceServices();\n\n            builder.AddPromptService();\n            builder.AddTextSplittingServices();\n\n            builder.AddChatService();\n            builder.Services.AddScoped<ChatEndpoints>();\n\n\n            builder.Services.AddAuthorization();\n\n\n            builder.Services.AddEndpointsApiExplorer();\n            builder.Services.AddSwaggerGen();\n\n            var app = builder.Build();\n\n            app.UseExceptionHandler(exceptionHandlerApp\n                    => exceptionHandlerApp.Run(async context\n                        => await Results.Problem().ExecuteAsync(context)));\n\n\n            app.UseSwagger();\n            app.UseSwaggerUI();\n\n            app.UseAuthorization();\n\n\n            using (var scope = app.Services.CreateScope())\n            {\n                var service = scope.ServiceProvider.GetService<ChatEndpoints>();\n                service?.Map(app);\n            }\n\n            app.Run();\n        }\n    }\n}\n'Vector-Search-AI-Assistant/src/Infrastructure/Services/SemanticCacheService.cs'\n:﻿using BuildYourOwnCopilot.Common.Models.Chat;\nusing BuildYourOwnCopilot.Infrastructure.Interfaces;\nusing BuildYourOwnCopilot.Infrastructure.Models.ConfigurationOptions;\nusing BuildYourOwnCopilot.SemanticKernel.Memory;\nusing BuildYourOwnCopilot.SemanticKernel.Models;\nusing BuildYourOwnCopilot.SemanticKernel.Plugins.Memory;\nusing BuildYourOwnCopilot.Service.Constants;\nusing BuildYourOwnCopilot.Service.Interfaces;\nusing BuildYourOwnCopilot.Service.Models.Chat;\nusing BuildYourOwnCopilot.Service.Models.ConfigurationOptions;\nusing MathNet.Numerics;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.SemanticKernel.Connectors.OpenAI;\nusing Newtonsoft.Json;\n\n#pragma warning disable SKEXP0010, SKEXP0020;\n\nnamespace BuildYourOwnCopilot.Infrastructure.Services\n{\n    public class SemanticCacheService : ISemanticCacheService\n    {\n        private readonly SemanticCacheServiceSettings _settings;\n        private readonly CosmosDBVectorStoreSettings _searchSettings;\n        private readonly VectorMemoryStore _memoryStore;\n        private readonly ITokenizerService _tokenizer;\n        private readonly string _tokenizerEncoder;\n        private readonly ILogger<SemanticCacheService> _logger;\n\n        public SemanticCacheService(\n            SemanticCacheServiceSettings settings,\n            OpenAISettings openAISettings,\n            CosmosDBVectorStoreSettings searchSettings,\n            ICosmosDBClientFactory cosmosDBClientFactory,\n            ITokenizerService tokenizerService,\n            string tokenizerEncoder,\n            ILoggerFactory loggerFactory)\n        {\n            _settings = settings;\n            _searchSettings = searchSettings;\n            _memoryStore = new VectorMemoryStore(\n                _searchSettings.IndexName,\n                new AzureCosmosDBNoSQLMemoryStore(\n                    cosmosDBClientFactory.Client,\n                    cosmosDBClientFactory.DatabaseName,\n                    searchSettings.VectorEmbeddingPolicy,\n                    searchSettings.IndexingPolicy\n                ),\n                new AzureOpenAITextEmbeddingGenerationService(\n                    openAISettings.EmbeddingsDeployment,\n                    openAISettings.Endpoint,\n                    openAISettings.Key,\n                    dimensions: (int)_searchSettings.Dimensions\n                ),\n                loggerFactory.CreateLogger<VectorMemoryStore>());\n            _tokenizer = tokenizerService;\n            _tokenizerEncoder = tokenizerEncoder;\n\n            _logger = loggerFactory.CreateLogger<SemanticCacheService>();\n        }\n\n        public async Task Initialize() =>\n            await _memoryStore.Initialize();\n\n        public async Task<SemanticCacheItem> GetCacheItem(string userPrompt, List<Message> messageHistory)\n        {\n            var uniqueId = Guid.NewGuid().ToString().ToLower();\n            var cacheItem = new SemanticCacheItem()\n            {\n                Id = uniqueId,\n                PartitionKey = uniqueId,\n                UserPrompt = userPrompt,\n                UserPromptEmbedding = await _memoryStore.GetEmbedding(userPrompt),\n                UserPromptTokens = _tokenizer.Encode(userPrompt, _tokenizerEncoder).Count\n            };\n            var userMessageHistory = messageHistory.Where(m => m.Sender == nameof(Participants.User)).ToList();\n            var assistantMessageHistory = messageHistory.Where(m => m.Sender == nameof(Participants.Assistant)).ToList();\n\n            if (userMessageHistory.Count > 0)\n            {\n                var similarity = 1 - Distance.Cosine(cacheItem.UserPromptEmbedding.ToArray(), userMessageHistory.Last().Vector!);\n                if (similarity >= _searchSettings.MinRelevance)\n                {\n\n                    cacheItem.ConversationContext = userMessageHistory.Last().Text;\n                    cacheItem.ConversationContextTokens = userMessageHistory.Last().TokensSize!.Value;\n                    cacheItem.Completion = assistantMessageHistory.Last().Text;\n                    cacheItem.CompletionTokens = assistantMessageHistory.Last().TokensSize!.Value;\n\n                    return cacheItem;\n                }\n            }\n\n            await SetConversationContext(cacheItem, userMessageHistory);\n\n            try\n            {\n\n                var cacheMatches = await _memoryStore\n                    .GetNearestMatches(\n                        cacheItem.ConversationContextEmbedding,\n                        1,\n                        _searchSettings.MinRelevance)\n                    .ToListAsync()\n                    .ConfigureAwait(false);\n                if (cacheMatches.Count == 0)\n                    return cacheItem;\n\n                var matchedCacheItem = JsonConvert.DeserializeObject<SemanticCacheItem>(\n                    cacheMatches.First().Metadata.AdditionalMetadata);\n\n                cacheItem.Completion = matchedCacheItem!.Completion;\n                cacheItem.CompletionTokens = matchedCacheItem.CompletionTokens;\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error in cache search: {ErrorMessage}.\", ex.Message);\n            }\n\n            return cacheItem;\n        }\n\n        public async Task SetCacheItem(SemanticCacheItem cacheItem) =>\n            await _memoryStore.AddMemory(\n                cacheItem.Id,\n                cacheItem.ConversationContext,\n                cacheItem.ConversationContextEmbedding,\n                JsonConvert.SerializeObject(cacheItem),\n                cacheItem.PartitionKey);\n\n        private async Task SetConversationContext(SemanticCacheItem cacheItem, List<Message> userMessageHistory)\n        {\n            var tokensCount = cacheItem.UserPromptTokens;\n            var result = new List<string> { cacheItem.UserPrompt };\n\n            for (int i = userMessageHistory.Count - 1; i >= 0; i--)\n            {\n                tokensCount += userMessageHistory[i].TokensSize!.Value;\n                if (tokensCount > _settings.ConversationContextMaxTokens)\n                    break;\n                result.Insert(0, userMessageHistory[i].Text);\n            }\n\n            cacheItem.ConversationContext = string.Join(Environment.NewLine, [.. result]);\n            cacheItem.ConversationContextTokens = _tokenizer.Encode(cacheItem.ConversationContext, _tokenizerEncoder).Count;\n            cacheItem.ConversationContextEmbedding = await _memoryStore.GetEmbedding(cacheItem.ConversationContext);\n        }\n    }\n}\n\n'Vector-Search-AI-Assistant/src/Infrastructure/Models/SemanticCacheItem.cs'\n:﻿using BuildYourOwnCopilot.Common.Models.BusinessDomain;\n\nnamespace BuildYourOwnCopilot.Service.Models.Chat\n{\n    public class SemanticCacheItem\n    {\n        public string Id { get; set; }\n        public string PartitionKey { get; set; }\n        public string UserPrompt { get; set; }\n        public int UserPromptTokens { get; set; }\n        public ReadOnlyMemory<float> UserPromptEmbedding { get; set; }\n        public string ConversationContext {  get; set; }\n        public int ConversationContextTokens { get; set; }\n        public ReadOnlyMemory<float> ConversationContextEmbedding { get; set; }\n\n        public string Completion {  get; set; }\n        public int CompletionTokens { get; set; }\n    }\n}\n",
        "gt": [
            "'Vector-Search-AI-Assistant/src/Infrastructure/Models/SemanticCacheItem.cs'",
            "'Vector-Search-AI-Assistant/src/Infrastructure/Services/SemanticCacheService.cs'",
            "'Vector-Search-AI-Assistant/src/Infrastructure/Services/DependencyInjection.cs'",
            "'Vector-Search-AI-Assistant/src/ChatAPI/Program.cs'"
        ]
    },
    {
        "files": [
            "'Biaui/Biaui/source/Biaui.ControlCatalog/Pages/ButtonPage.xaml.cs'",
            "'Biaui/Biaui/source/Biaui.ControlCatalog/MainWindow.xaml.cs'",
            "'Biaui/Biaui/source/Biaui/Internals/SharedResourceDictionary.cs'",
            "'Biaui/Biaui/source/Biaui/Controls/BiaHsvBoxCursor.xaml.cs'"
        ],
        "content": "'Biaui/Biaui/source/Biaui.ControlCatalog/Pages/ButtonPage.xaml.cs'\n:﻿using System.Diagnostics;\nusing System.Windows;\nusing Biaui.Controls;\n\nnamespace Biaui.ControlCatalog.Pages\n{\n    public partial class ButtonPage\n    {\n        public ButtonPage()\n        {\n            Name = \"Button\";\n            InitializeComponent();\n        }\n\n        private void BiaButtonBase_OnClick(object sender, RoutedEventArgs e)\n        {\n            var b = (BiaHyperlinkButton) sender;\n\n            using var proc = Process.Start(new ProcessStartInfo(\"cmd\", $\"/c start {b.Content}\") {CreateNoWindow = true});\n\n            proc?.WaitForExit();\n        }\n    }\n}\n'Biaui/Biaui/source/Biaui.ControlCatalog/MainWindow.xaml.cs'\n:﻿using System;\nusing System.Windows;\nusing System.Windows.Controls;\nusing Biaui.ControlCatalog.Pages;\n\nnamespace Biaui.ControlCatalog\n{\n    public partial class MainWindow\n    {\n        public UserControl[]? Pages { get; private set; }\n\n        #region SelectedPage\n\n        public UserControl SelectedPage\n        {\n            get => _SelectedPage ?? throw new NullReferenceException();\n            set\n            {\n                if (value != _SelectedPage)\n                    SetValue(SelectedPageProperty, value);\n            }\n        }\n\n        private UserControl? _SelectedPage;\n\n        public static readonly DependencyProperty SelectedPageProperty =\n            DependencyProperty.Register(\n                nameof(SelectedPage),\n                typeof(UserControl),\n                typeof(MainWindow),\n                new PropertyMetadata(\n                    default,\n                    (s, e) =>\n                    {\n                        var self = (MainWindow) s;\n                        self._SelectedPage = (UserControl)e.NewValue;\n                    }));\n\n        #endregion\n\n        public MainWindow()\n        {\n            InitializeComponent();\n\n            Setup();\n        }\n\n        private void Setup()\n        {\n            Pages = new UserControl[]\n            {\n                new ButtonPage(),\n                new ToggleButtonPage(),\n                new CheckBoxPage(),\n                new RadioButtonPage(),\n                new TextBoxPage(),\n                new ComboBoxPage()\n            };\n\n            SelectedPage = Pages[0];\n        }\n    }\n}\n'Biaui/Biaui/source/Biaui/Internals/SharedResourceDictionary.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Windows;\n\nnamespace Biaui.Internals\n{\n    public class SharedResourceDictionary : ResourceDictionary\n    {\n        private static readonly Dictionary<int, ResourceDictionary> _sharedDictionaries = new Dictionary<int, ResourceDictionary>();\n\n        private static readonly bool _isInDesignerMode;\n\n        private Uri? _sourceUri;\n\n        static SharedResourceDictionary()\n        {\n            _isInDesignerMode = (bool) DesignerProperties.IsInDesignModeProperty.GetMetadata(typeof(DependencyObject)).DefaultValue;\n        }\n\n        public new Uri Source\n        {\n            get => _sourceUri ?? throw new NullReferenceException();\n\n            set\n            {\n                _sourceUri = value;\n\n                if (_isInDesignerMode)\n                {\n                    base.Source = value;\n                    return;\n                }\n\n                var hashCode = value.GetHashCode();\n\n                if (_sharedDictionaries.TryGetValue(hashCode, out var v) == false)\n                {\n                    base.Source = value;\n\n                    _sharedDictionaries.Add(hashCode, this);\n                }\n                else\n                {\n                    MergedDictionaries.Add(v);\n                }\n            }\n        }\n    }\n}\n'Biaui/Biaui/source/Biaui/Controls/BiaHsvBoxCursor.xaml.cs'\n:﻿using System.Windows;\nusing System.Windows.Media;\nusing Biaui.Internals;\n\nnamespace Biaui.Controls\n{\n    public class BiaHsvBoxCursor : FrameworkElement\n    {\n        #region BorderColor\n\n        public ByteColor BorderColor\n        {\n            get => _BorderColor;\n            set\n            {\n                if (value != _BorderColor)\n                    SetValue(BorderColorProperty, value);\n            }\n        }\n\n        private ByteColor _BorderColor = ByteColor.Red;\n\n        public static readonly DependencyProperty BorderColorProperty =\n            DependencyProperty.Register(nameof(BorderColor), typeof(ByteColor), typeof(BiaHsvBoxCursor),\n                new FrameworkPropertyMetadata(\n                    Boxes.ByteColorRed,\n                    FrameworkPropertyMetadataOptions.AffectsRender |\n                    FrameworkPropertyMetadataOptions.SubPropertiesDoNotAffectRender,\n                    (s, e) =>\n                    {\n                        var self = (BiaHsvBoxCursor) s;\n                        self._BorderColor = (ByteColor) e.NewValue;\n                    }));\n\n        #endregion\n\n        #region Hue\n\n        public double Hue\n        {\n            get => _Hue;\n            set\n            {\n                if (NumberHelper.AreClose(value, _Hue) == false)\n                    SetValue(HueProperty, Boxes.Double(value));\n            }\n        }\n\n        private double _Hue;\n\n        public static readonly DependencyProperty HueProperty =\n            DependencyProperty.Register(nameof(Hue), typeof(double), typeof(BiaHsvBoxCursor),\n                new FrameworkPropertyMetadata(\n                    Boxes.Double0,\n                    FrameworkPropertyMetadataOptions.AffectsRender |\n                    FrameworkPropertyMetadataOptions.SubPropertiesDoNotAffectRender,\n                    (s, e) =>\n                    {\n                        var self = (BiaHsvBoxCursor) s;\n                        self._Hue = (double) e.NewValue;\n                    }));\n\n        #endregion\n\n        #region Saturation\n\n        public double Saturation\n        {\n            get => _Saturation;\n            set\n            {\n                if (NumberHelper.AreClose(value, _Saturation) == false)\n                    SetValue(SaturationProperty, Boxes.Double(value));\n            }\n        }\n\n        private double _Saturation;\n\n        public static readonly DependencyProperty SaturationProperty =\n            DependencyProperty.Register(nameof(Saturation), typeof(double), typeof(BiaHsvBoxCursor),\n                new FrameworkPropertyMetadata(\n                    Boxes.Double0,\n                    FrameworkPropertyMetadataOptions.AffectsRender |\n                    FrameworkPropertyMetadataOptions.SubPropertiesDoNotAffectRender,\n                    (s, e) =>\n                    {\n                        var self = (BiaHsvBoxCursor) s;\n                        self._Saturation = (double) e.NewValue;\n                    }));\n\n        #endregion\n\n        #region IsReadOnly\n\n        public bool IsReadOnly\n        {\n            get => _IsReadOnly;\n            set\n            {\n                if (value != _IsReadOnly)\n                    SetValue(IsReadOnlyProperty, Boxes.Bool(value));\n            }\n        }\n\n        private bool _IsReadOnly;\n\n        public static readonly DependencyProperty IsReadOnlyProperty =\n            DependencyProperty.Register(nameof(IsReadOnly), typeof(bool), typeof(BiaHsvBoxCursor),\n                new FrameworkPropertyMetadata(\n                    Boxes.BoolFalse,\n                    FrameworkPropertyMetadataOptions.AffectsRender |\n                    FrameworkPropertyMetadataOptions.SubPropertiesDoNotAffectRender,\n                    (s, e) =>\n                    {\n                        var self = (BiaHsvBoxCursor) s;\n                        self._IsReadOnly = (bool) e.NewValue;\n                    }));\n\n        #endregion\n\n        static BiaHsvBoxCursor()\n        {\n            DefaultStyleKeyProperty.OverrideMetadata(typeof(BiaHsvBoxCursor),\n                new FrameworkPropertyMetadata(typeof(BiaHsvBoxCursor)));\n        }\n\n\n        private readonly PropertyChangeNotifier _isEnabledChangeNotifier;\n\n        public BiaHsvBoxCursor()\n        {\n            IsHitTestVisible = false;\n\n            _isEnabledChangeNotifier = new PropertyChangeNotifier(this, IsEnabledProperty);\n            _isEnabledChangeNotifier.ValueChanged += (_, __) => InvalidateVisual();\n        }\n\n        protected override void OnRender(DrawingContext dc)\n        {\n            if (ActualWidth <= 1 ||\n                ActualHeight <= 1)\n                return;\n\n            var rounder = new LayoutRounder(this);\n\n\n            {\n                var p = rounder.GetBorderPen(BorderColor);\n\n                var w = rounder.RoundLayoutValue(ActualWidth - 0.5);\n                var h = rounder.RoundLayoutValue(ActualHeight - 0.5);\n                var z = rounder.RoundLayoutValue(0.5);\n\n                var p0 = new Point(z, z);\n                var p1 = new Point(w, z);\n                var p2 = new Point(z, h);\n                var p3 = new Point(w, h);\n\n                var p0A = new Point(z - 0.5, z);\n                var p1A = new Point(w + 0.5, z);\n                var p2A = new Point(z - 0.5, h);\n                var p3A = new Point(w + 0.5, h);\n\n                dc.DrawLine(p, p0A, p1A);\n                dc.DrawLine(p, p1, p3);\n                dc.DrawLine(p, p3A, p2A);\n                dc.DrawLine(p, p2, p0);\n            }\n\n\n            this.DrawPointCursor(rounder, dc, MakeCursorRenderPos(rounder), IsEnabled, IsReadOnly);\n        }\n\n        private ImmutableVec2_double MakeCursorRenderPos(in LayoutRounder rounder) =>\n            MakeCursorRenderPos(rounder, ActualWidth, ActualHeight, Hue, Saturation);\n\n        internal static ImmutableVec2_double MakeCursorRenderPos(\n            in LayoutRounder rounder,\n            double actualWidth,\n            double actualHeight,\n            double hue,\n            double saturation)\n        {\n            hue = NumberHelper.Clamp01(hue);\n            saturation = NumberHelper.Clamp01(saturation);\n\n            var bw = rounder.RoundLayoutValue(FrameworkElementExtensions.BorderWidth);\n            var w = rounder.RoundLayoutValue(actualWidth - bw * 2);\n            var h = rounder.RoundLayoutValue(actualHeight - bw * 2);\n\n            var x = hue * w + bw;\n            var y = (1 - saturation) * h + bw;\n\n            return new ImmutableVec2_double(rounder.RoundLayoutValue(x), rounder.RoundLayoutValue(y));\n        }\n    }\n}",
        "gt": [
            "'Biaui/Biaui/source/Biaui/Internals/SharedResourceDictionary.cs'",
            "'Biaui/Biaui/source/Biaui/Controls/BiaHsvBoxCursor.xaml.cs'",
            "'Biaui/Biaui/source/Biaui.ControlCatalog/Pages/ButtonPage.xaml.cs'",
            "'Biaui/Biaui/source/Biaui.ControlCatalog/MainWindow.xaml.cs'"
        ]
    },
    {
        "files": [
            "'WolvenKit-7/WolvenKit.CLI/Program.cs'",
            "'WolvenKit-7/WolvenKit.CR2W/SRT/CWind.cs'",
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAINpcReactionPlayWithTarget.cs'"
        ],
        "content": "'WolvenKit-7/WolvenKit.CLI/Program.cs'\n:using System;\nusing System.IO;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing CommandLine;\nusing WolvenKit.Common.Extensions;\nusing WolvenKit.CR2W;\nusing WolvenKit.CR2W.JSON;\nusing WolvenKit.CR2W.SRT;\n\nnamespace WolvenKit.CLI\n{\n    public class Options\n    {\n        [Option(\"input\", Required = true, HelpText = \"CR2W/JSON/SRT file input path\")]\n        public string InputPath { get; set; }\n\n        [Option(\"output\", Required = false, HelpText = \"CR2W/JSON file output path\")]\n        public string OutputPath { get; set; }\n\n        [Option(\"cr2w2info\", Required = false, HelpText = \"Dump CR2W partial info into JSON\")]\n        public bool DumpCR2W { get; set; }\n\n        [Option(\"srt2json\", Required = false, HelpText = \"Export SRT (SpeedTree) into JSON\")]\n        public bool ExportSRT { get; set; }\n\n        [Option(\"json2srt\", Required = false, HelpText = \"Import JSON into SRT (SpeedTree)\")]\n        public bool ImportSRT { get; set; }\n\n        [Option(\"cr2w2json\", Required = false, HelpText = \"Export CR2W to JSON\")]\n        public bool ExportJSON { get; set; }\n\n        [Option(\"json2cr2w\", Required = false, HelpText = \"Import JSON to CR2W\")]\n        public bool ImportJSON { get; set; }\n\n        [Option(\"bytes_as_list\", Required = false, HelpText = \"Output byte array vars as int list (by default as base64 string)\")]\n        public bool BytesAsIntList { get; set; } = false;\n\n        [Option(\"guids_as_strings\", Required = false, HelpText = \"Output CGUID vars as string values (by default as bytearray)\")]\n        public bool GuidAsString { get; set; } = false;\n\n        [Option(\"ignore_embedded_cr2w\", Required = false, HelpText = \"Do NOT serialize embedded cr2w bytearrays - flatCompiledData, etc (serialized by default if possible)\")]\n        public bool IgnoreEmbeddedCR2W { get; set; } = false;\n\n        [Option(\"verbose\", Required = false, HelpText = \"Print verbose info\")]\n        public bool Verbose { get; set; } = false;\n    }\n    class Program\n    {\n        public static void PrintColor(ConsoleColor color, string text)\n        {\n            ConsoleColor oldColor = Console.ForegroundColor;\n            Console.ForegroundColor = color;\n            Console.WriteLine(text);\n            Console.ForegroundColor = oldColor;\n        }\n        public static void Print(string text) => PrintColor(ConsoleColor.Yellow, text);\n        public static void PrintError(string text) => PrintColor(ConsoleColor.Red, text);\n        public static void PrintOK(string text) => PrintColor(ConsoleColor.Green, text);\n        static void Main(string[] args)\n        {\n            Debug.WriteLine($\"args = {string.Join(\";\", args)}\");\n            CommandLine.Parser.Default.ParseArguments<Options>(args)\n                                    .WithParsed(RunCLIOptions)\n                                    .WithNotParsed(HandleParseError);\n\n\n        }\n\n        static void RunCLIOptions(Options opts)\n        {\n            Print($\"Input = {opts.InputPath}, Output = {opts.OutputPath}\");\n            if (!File.Exists(opts.InputPath))\n            {\n                PrintError($\"File does not exist: {opts.InputPath}\");\n                System.Environment.Exit(-1);\n            }\n            Stopwatch watch = new Stopwatch();\n            watch.Start();\n            var ToolOptions = new CR2WJsonToolOptions(opts.Verbose, opts.BytesAsIntList, opts.IgnoreEmbeddedCR2W, opts.GuidAsString);\n            if (opts.ExportJSON)\n            {\n                if (string.IsNullOrEmpty(opts.OutputPath))\n                    opts.OutputPath = opts.InputPath + \".json\";\n\n                Print($\"Exporting CR2W->JSON..\\nInput CR2W: {opts.InputPath}\\nOutput JSON: {opts.OutputPath}\");\n                if (!CR2WJsonTool.ExportJSON(opts.InputPath, opts.OutputPath, ToolOptions))\n                {\n                    PrintError($\"ERROR exporting JSON!\");\n                }\n            } else if (opts.ImportJSON)\n            {\n                if (string.IsNullOrEmpty(opts.OutputPath))\n                    opts.OutputPath = opts.InputPath.TrimEnd(\".json\");\n\n                Print($\"Importing JSON->CR2W..\\nInput JSON: {opts.InputPath}\\nOutput CR2W: {opts.OutputPath}\");\n                if (!CR2WJsonTool.ImportJSON(opts.InputPath, opts.OutputPath, ToolOptions))\n                {\n                    PrintError($\"ERROR importing JSON!\");\n                }\n            }\n            else if (opts.DumpCR2W)\n            {\n                if (string.IsNullOrEmpty(opts.OutputPath))\n                    opts.OutputPath = opts.InputPath + \".info.json\";\n\n                Print($\"Dumping info to JSON..\\nInput CR2W: {opts.InputPath}\\nOutput JSON: {opts.OutputPath}\");\n                if (!CR2WScripts.DumpInfo(opts.InputPath, opts.OutputPath))\n                {\n                    PrintError($\"ERROR dumping JSON!\");\n                }\n            }\n            else if (opts.ExportSRT)\n            {\n                if (string.IsNullOrEmpty(opts.OutputPath))\n                    opts.OutputPath = opts.InputPath + \".json\";\n\n                Print($\"Exporting SRT->JSON..\\nInput SRT: {opts.InputPath}\\nOutput JSON: {opts.OutputPath}\");\n                var SRT = new Srtfile();\n                SRT.ReadFromSRT(opts.InputPath);\n                SRT.WriteToJsonFile(opts.OutputPath);\n            }\n            else if (opts.ImportSRT)\n            {\n                if (string.IsNullOrEmpty(opts.OutputPath))\n                    opts.OutputPath = opts.InputPath.TrimEnd(\".json\");\n\n                Print($\"Importing JSON->SRT..\\nInput JSON: {opts.InputPath}\\nOutput SRT: {opts.OutputPath}\");\n                var SRT = Srtfile.ReadFromJSON(opts.InputPath);\n                SRT.WriteToSRTFile(opts.OutputPath);\n            }\n            else\n            {\n                Print($\"No action specified.\");\n            }\n            TimeSpan ts = watch.Elapsed;\n            PrintOK($\"Finished in {(int)ts.TotalSeconds}.{(int)ts.TotalMilliseconds} s\");\n            System.Environment.Exit(0);\n        }\n        static void HandleParseError(IEnumerable<Error> errs)\n        {\n\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.CR2W/SRT/CWind.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nusing System.Text;\nusing System.Threading.Tasks;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit.CR2W.SRT\n{\n\t[TypeConverter(typeof(ExpandableObjectConverter))]\n\tpublic class CWind\n\t{\n\t\t#region Properties\n\t\tpublic SParams Params { get; set; }\n\t\tpublic bool[] m_abOptions { get; set; } = new bool[(int)EOptions.NUM_WIND_OPTIONS];\n\t\tpublic float[] m_afBranchWindAnchor { get; set; } = new float[3];\n\t\tpublic float m_fMaxBranchLevel1Length { get; set; }\n\t\t#endregion\n\n\n\n\n\n\n\n\n\n\n\n\t\tpublic enum EOscillationComponents\n\t\t{\n\t\t\tOSC_GLOBAL,\n\t\t\tOSC_BRANCH_1,\n\t\t\tOSC_BRANCH_2,\n\t\t\tOSC_LEAF_1_RIPPLE,\n\t\t\tOSC_LEAF_1_TUMBLE,\n\t\t\tOSC_LEAF_1_TWITCH,\n\t\t\tOSC_LEAF_2_RIPPLE,\n\t\t\tOSC_LEAF_2_TUMBLE,\n\t\t\tOSC_LEAF_2_TWITCH,\n\t\t\tOSC_FROND_RIPPLE,\n\t\t\tNUM_OSC_COMPONENTS\n\t\t};\n\n\n\t\tpublic enum EOptions\n\t\t{\n\t\t\tGLOBAL_WIND,\n\t\t\tGLOBAL_PRESERVE_SHAPE,\n\n\t\t\tBRANCH_SIMPLE_1,\n\t\t\tBRANCH_DIRECTIONAL_1,\n\t\t\tBRANCH_DIRECTIONAL_FROND_1,\n\t\t\tBRANCH_TURBULENCE_1,\n\t\t\tBRANCH_WHIP_1,\n\t\t\tBRANCH_OSC_COMPLEX_1,\n\n\t\t\tBRANCH_SIMPLE_2,\n\t\t\tBRANCH_DIRECTIONAL_2,\n\t\t\tBRANCH_DIRECTIONAL_FROND_2,\n\t\t\tBRANCH_TURBULENCE_2,\n\t\t\tBRANCH_WHIP_2,\n\t\t\tBRANCH_OSC_COMPLEX_2,\n\n\t\t\tLEAF_RIPPLE_VERTEX_NORMAL_1,\n\t\t\tLEAF_RIPPLE_COMPUTED_1,\n\t\t\tLEAF_TUMBLE_1,\n\t\t\tLEAF_TWITCH_1,\n\t\t\tLEAF_OCCLUSION_1,\n\n\t\t\tLEAF_RIPPLE_VERTEX_NORMAL_2,\n\t\t\tLEAF_RIPPLE_COMPUTED_2,\n\t\t\tLEAF_TUMBLE_2,\n\t\t\tLEAF_TWITCH_2,\n\t\t\tLEAF_OCCLUSION_2,\n\n\t\t\tFROND_RIPPLE_ONE_SIDED,\n\t\t\tFROND_RIPPLE_TWO_SIDED,\n\t\t\tFROND_RIPPLE_ADJUST_LIGHTING,\n\n\t\t\tROLLING,\n\n\t\t\tNUM_WIND_OPTIONS\n\t\t};\n\n\n\n\n\n\t\tconst int c_nNumWindPointsInCurves = 10;\n\n\n\t\tconst int c_nNumBranchLevels = 2;\n\t\tconst int c_nNumLeafGroups = 2;\n\n\t\t[StructLayout(LayoutKind.Sequential, Pack = 1)]\n\t\t[TypeConverter(typeof(ExpandableObjectConverter))]\n\t\tpublic struct SParams\n\t\t{\n\n\t\t\t public float m_fStrengthResponse { get; set; }\n\t\t\t public float m_fDirectionResponse { get; set; }\n\t\t\t public float m_fAnchorOffset { get; set; }\n\t\t\t public float m_fAnchorDistanceScale { get; set; }\n\n\n            [MarshalAs(UnmanagedType.ByValArray, SizeConst = (int)EOscillationComponents.NUM_OSC_COMPONENTS * c_nNumWindPointsInCurves)]\n            private float[] afFrequencies;\n\n            public float[] AfFrequencies { get => afFrequencies; set => afFrequencies = value; }\n\n\n\n\t\t\tpublic float m_fGlobalHeight { get; set; }\n\t\t\t public float m_fGlobalHeightExponent { get; set; }\n\n\t\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = c_nNumWindPointsInCurves, ArraySubType = UnmanagedType.R4)]\n\t\t\tprivate float[] m_afGlobalDistance;\n\t\t\tpublic float[] AfGlobalDistance { get => m_afGlobalDistance; set => m_afGlobalDistance = value; }\n            [MarshalAs(UnmanagedType.ByValArray, SizeConst = c_nNumWindPointsInCurves, ArraySubType = UnmanagedType.R4)]\n            private float[] afGlobalDirectionAdherence;\n\t\t\tpublic float[] AfGlobalDirectionAdherence { get => afGlobalDirectionAdherence; set => afGlobalDirectionAdherence = value; }\n\n\n            [MarshalAs(UnmanagedType.ByValArray, SizeConst = c_nNumBranchLevels)]\n            private SBranchWindLevel[] asBranch;\n\t\t\tpublic SBranchWindLevel[] AsBranch { get => asBranch; set => asBranch = value; }\n\n\n\t\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = c_nNumLeafGroups)]\n            private SWindGroup[] asLeaf;\n\t\t\tpublic SWindGroup[] AsLeaf { get => asLeaf; set => asLeaf = value; }\n\n\n\t\t\t[MarshalAs(UnmanagedType.ByValArray, SizeConst = c_nNumWindPointsInCurves, ArraySubType = UnmanagedType.R4)]\n            private float[] afFrondRippleDistance;\n\t\t\tpublic float[] AfFrondRippleDistance { get => afFrondRippleDistance; set => afFrondRippleDistance = value; }\n\n\n\t\t\tpublic float m_fFrondRippleTile { get; set; }\n\t\t\t public float m_fFrondRippleLightingScalar { get; set; }\n\n\n\t\t\t public float m_fRollingNoiseSize { get; set; }\n\t\t\t public float m_fRollingNoiseTwist { get; set; }\n\t\t\t public float m_fRollingNoiseTurbulence { get; set; }\n\t\t\t public float m_fRollingNoisePeriod { get; set; }\n\t\t\t public float m_fRollingNoiseSpeed { get; set; }\n\n\t\t\t public float m_fRollingBranchFieldMin { get; set; }\n\t\t\t public float m_fRollingBranchLightingAdjust { get; set; }\n\t\t\t public float m_fRollingBranchVerticalOffset { get; set; }\n\t\t\t public float m_fRollingLeafRippleMin { get; set; }\n\t\t\t public float m_fRollingLeafTumbleMin { get; set; }\n\n\n\t\t\t public float m_fGustFrequency { get; set; }\n\t\t\t public float m_fGustStrengthMin { get; set; }\n\t\t\t public float m_fGustStrengthMax { get; set; }\n\t\t\t public float m_fGustDurationMin { get; set; }\n\t\t\t public float m_fGustDurationMax { get; set; }\n\t\t\t public float m_fGustRiseScalar { get; set; }\n\t\t\t public float m_fGustFallScalar { get; set; }\n\n        }\n\n\n\t\t[StructLayout(LayoutKind.Sequential, Pack = 1)]\n\t\t[TypeConverter(typeof(ExpandableObjectConverter))]\n\t\tpublic struct SWindGroup\n\t\t{\n            [MarshalAs(UnmanagedType.ByValArray, SizeConst = c_nNumWindPointsInCurves, ArraySubType = UnmanagedType.R4)]\n            private float[] afRippleDistance;\n            [MarshalAs(UnmanagedType.ByValArray, SizeConst = c_nNumWindPointsInCurves, ArraySubType = UnmanagedType.R4)]\n            private float[] afTumbleFlip;\n            [MarshalAs(UnmanagedType.ByValArray, SizeConst = c_nNumWindPointsInCurves, ArraySubType = UnmanagedType.R4)]\n            private float[] afTumbleTwist;\n            [MarshalAs(UnmanagedType.ByValArray, SizeConst = c_nNumWindPointsInCurves, ArraySubType = UnmanagedType.R4)]\n            private float[] afTumbleDirectionAdherence;\n            [MarshalAs(UnmanagedType.ByValArray, SizeConst = c_nNumWindPointsInCurves, ArraySubType = UnmanagedType.R4)]\n            private float[] afTwitchThrow;\n\n             public float m_fTwitchSharpness { get; set; }\n\t\t\t public float m_fRollMaxScale { get; set; }\n\t\t\t public float m_fRollMinScale { get; set; }\n\t\t\t public float m_fRollSpeed { get; set; }\n\t\t\t public float m_fRollSeparation { get; set; }\n\t\t\t public float m_fLeewardScalar { get; set; }\n\n            public float[] AfRippleDistance { get => afRippleDistance; set => afRippleDistance = value; }\n            public float[] AfTumbleFlip { get => afTumbleFlip; set => afTumbleFlip = value; }\n            public float[] AfTumbleTwist { get => afTumbleTwist; set => afTumbleTwist = value; }\n            public float[] AfTumbleDirectionAdherence { get => afTumbleDirectionAdherence; set => afTumbleDirectionAdherence = value; }\n            public float[] AfTwitchThrow { get => afTwitchThrow; set => afTwitchThrow = value; }\n        }\n\n\t\t[TypeConverter(typeof(ExpandableObjectConverter))]\n\t\t[StructLayout(LayoutKind.Sequential, Pack = 1)]\n\t\tpublic struct SBranchWindLevel\n\t\t{\n            [MarshalAs(UnmanagedType.ByValArray, SizeConst = c_nNumWindPointsInCurves, ArraySubType = UnmanagedType.R4)]\n            private float[] afDistance;\n            [MarshalAs(UnmanagedType.ByValArray, SizeConst = c_nNumWindPointsInCurves, ArraySubType = UnmanagedType.R4)]\n            private float[] afDirectionAdherence;\n            [MarshalAs(UnmanagedType.ByValArray, SizeConst = c_nNumWindPointsInCurves, ArraySubType = UnmanagedType.R4)]\n            private float[] afWhip;\n\n             public float m_fTurbulence { get; set; }\n\t\t\t public float m_fTwitch { get; set; }\n\t\t\t public float m_fTwitchFreqScale { get; set; }\n            public float[] AfDistance { get => afDistance; set => afDistance = value; }\n            public float[] AfDirectionAdherence { get => afDirectionAdherence; set => afDirectionAdherence = value; }\n            public float[] AfWhip { get => afWhip; set => afWhip = value; }\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAINpcReactionPlayWithTarget.cs'\n:using System.IO;\nusing System.Runtime.Serialization;\nusing WolvenKit.CR2W.Reflection;\nusing FastMember;\nusing static WolvenKit.CR2W.Types.Enums;\n\n\nnamespace WolvenKit.CR2W.Types\n{\n\t[DataContract(Namespace = \"\")]\n\t[REDMeta]\n\tpublic class CAINpcReactionPlayWithTarget : CAINpcReaction\n\t{\n\t\tpublic CAINpcReactionPlayWithTarget(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name){ }\n\n\t\tpublic static new CVariable Create(CR2WFile cr2w, CVariable parent, string name) => new CAINpcReactionPlayWithTarget(cr2w, parent, name);\n\n\t\tpublic override void Read(BinaryReader file, uint size) => base.Read(file, size);\n\n\t\tpublic override void Write(BinaryWriter file) => base.Write(file);\n\n\t}\n}",
        "gt": [
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAINpcReactionPlayWithTarget.cs'",
            "'WolvenKit-7/WolvenKit.CR2W/SRT/CWind.cs'",
            "'WolvenKit-7/WolvenKit.CLI/Program.cs'"
        ]
    },
    {
        "files": [
            "'openstack.net/src/corelib/Networking/v2/TrafficDirection.cs'",
            "'openstack.net/src/corelib/Networking/v2/NetworkingServiceExtensions.cs'",
            "'openstack.net/samples/ComputeSample.cs'",
            "'openstack.net/src/corelib/Networking/v2/Serialization/SubnetDefinitionCollection.cs'",
            "'openstack.net/src/testing/unit/Compute/v2_1/KeyPairTests.cs'"
        ],
        "content": "'openstack.net/src/corelib/Networking/v2/TrafficDirection.cs'\n:using OpenStack.Networking.v2.Serialization;\n\nnamespace OpenStack.Networking.v2\n{\n\n    public class TrafficDirection : TrafficDirection<TrafficDirection>\n    { }\n}\n'openstack.net/src/corelib/Networking/v2/NetworkingServiceExtensions.cs'\n:﻿using System.Collections.Generic;\nusing OpenStack.Networking.v2;\nusing OpenStack.Synchronous.Extensions;\n\n\nnamespace OpenStack.Synchronous\n{\n\n\n\n    public static class NetworkingServiceExtensions_v2\n    {\n        #region Networks\n\n\n\n\n\n\n        public static IEnumerable<Network> ListNetworks(this NetworkingService networkingService)\n        {\n            return networkingService.ListNetworksAsync().ForceSynchronous();\n        }\n\n\n\n\n\n\n\n\n\n        public static Network GetNetwork(this NetworkingService networkingService, Identifier networkId)\n        {\n            return networkingService.GetNetworkAsync(networkId).ForceSynchronous();\n        }\n\n\n\n\n\n\n\n\n\n        public static IEnumerable<Network> CreateNetworks(this NetworkingService networkingService, IEnumerable<NetworkDefinition> networks)\n        {\n            return networkingService.CreateNetworksAsync(networks).ForceSynchronous();\n        }\n\n\n\n\n\n\n\n\n\n        public static Network CreateNetwork(this NetworkingService networkingService, NetworkDefinition network)\n        {\n            return networkingService.CreateNetworkAsync(network).ForceSynchronous();\n        }\n\n\n\n\n\n\n\n\n\n\n        public static Network UpdateNetwork(this NetworkingService networkingService, Identifier networkId, NetworkDefinition network)\n        {\n            return networkingService.UpdateNetworkAsync(networkId, network).ForceSynchronous();\n        }\n\n\n\n\n\n\n        public static void DeleteNetwork(this NetworkingService networkingService, Identifier networkId)\n        {\n            networkingService.DeleteNetworkAsync(networkId).ForceSynchronous();\n        }\n        #endregion\n\n        #region Subnets\n\n\n\n\n\n\n        public static IEnumerable<Subnet> ListSubnets(this NetworkingService networkingService)\n        {\n            return networkingService.ListSubnetsAsync().ForceSynchronous();\n        }\n\n\n\n\n\n\n\n\n\n        public static Subnet CreateSubnet(this NetworkingService networkingService, SubnetCreateDefinition subnet)\n        {\n            return networkingService.CreateSubnetAsync(subnet).ForceSynchronous();\n        }\n\n\n\n\n\n\n\n\n\n        public static IEnumerable<Subnet> CreateSubnets(this NetworkingService networkingService, IEnumerable<SubnetCreateDefinition> subnets)\n        {\n            return networkingService.CreateSubnetsAsync(subnets).ForceSynchronous();\n        }\n\n\n\n\n\n\n\n\n\n        public static Subnet GetSubnet(this NetworkingService networkingService, Identifier subnetId)\n        {\n            return networkingService.GetSubnetAsync(subnetId).ForceSynchronous();\n        }\n\n\n\n\n\n\n\n\n\n\n        public static Subnet UpdateSubnet(this NetworkingService networkingService, Identifier subnetId, SubnetUpdateDefinition subnet)\n        {\n            return networkingService.UpdateSubnetAsync(subnetId, subnet).ForceSynchronous();\n        }\n\n\n\n\n\n\n        public static void DeleteSubnet(this NetworkingService networkingService, Identifier subnetId)\n        {\n            networkingService.DeleteSubnetAsync(subnetId).ForceSynchronous();\n        }\n        #endregion\n\n        #region Ports\n\n\n\n\n\n\n        public static IEnumerable<Port> ListPorts(this NetworkingService networkingService, PortListOptions options = null)\n        {\n            return networkingService.ListPortsAsync(options).ForceSynchronous();\n        }\n\n\n\n\n\n\n\n\n\n        public static Port CreatePort(this NetworkingService networkingService, PortCreateDefinition port)\n        {\n            return networkingService.CreatePortAsync(port).ForceSynchronous();\n        }\n\n\n\n\n\n\n\n\n\n        public static IEnumerable<Port> CreatePorts(this NetworkingService networkingService, IEnumerable<PortCreateDefinition> ports)\n        {\n            return networkingService.CreatePortsAsync(ports).ForceSynchronous();\n        }\n\n\n\n\n\n\n\n\n\n        public static Port GetPort(this NetworkingService networkingService, Identifier portId)\n        {\n            return networkingService.GetPortAsync(portId).ForceSynchronous();\n        }\n\n\n\n\n\n\n\n\n\n\n        public static Port UpdatePort(this NetworkingService networkingService, Identifier portId, PortUpdateDefinition port)\n        {\n            return networkingService.UpdatePortAsync(portId, port).ForceSynchronous();\n        }\n\n\n\n\n\n\n        public static void DeletePort(this NetworkingService networkingService, Identifier portId)\n        {\n            networkingService.DeletePortAsync(portId).ForceSynchronous();\n        }\n        #endregion\n    }\n}\n'openstack.net/samples/ComputeSample.cs'\n:﻿using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing net.openstack.Core.Domain;\nusing net.openstack.Core.Providers;\nusing OpenStack.Compute.v2_1;\n\npublic class ComputeSample : ISample\n{\n    public async Task Run(string identityEndpoint, string username, string password, string project, string region)\n    {\n\n        var user = new CloudIdentityWithProject\n        {\n            Username = username,\n            Password = password,\n            ProjectName = project\n        };\n        var identity = new OpenStackIdentityProvider(new Uri(identityEndpoint), user);\n        var compute = new ComputeService(identity, region);\n\n        Console.WriteLine(\"Looking up the tiny flavor...\");\n        var flavors = await compute.ListFlavorsAsync();\n        var tinyFlavor = flavors.FirstOrDefault(x => x.Name.Contains(\"tiny\"));\n        if(tinyFlavor == null) throw new Exception(\"Unable to find a flavor with the 'tiny' in the name!\");\n\n        Console.WriteLine(\"Looking up the cirros image...\");\n        var images = await compute.ListImagesAsync(new ImageListOptions {Name = \"cirros\"});\n        var cirrosImage = images.FirstOrDefault();\n        if(cirrosImage == null) throw new Exception(\"Unable to find an image named 'cirros'\");\n\n        Console.WriteLine(\"Creating Sample server... \");\n        var serverDefinition = new ServerCreateDefinition(\"sample\", cirrosImage.Id, tinyFlavor.Id);\n        var server = await compute.CreateServerAsync(serverDefinition);\n\n        Console.WriteLine(\"Waiting for the sample server to come online...\");\n        await server.WaitUntilActiveAsync();\n\n        Console.WriteLine(\"Taking a snaphot of the sample server...\");\n        var snapshot = await server.SnapshotAsync(new SnapshotServerRequest(\"sample-snapshot\"));\n        await snapshot.WaitUntilActiveAsync();\n\n        Console.WriteLine();\n        Console.WriteLine(\"Sample Server Information:\");\n        Console.WriteLine();\n        Console.WriteLine($\"Server Id: {server.Id}\");\n        Console.WriteLine($\"Server Name: {server.Name}\");\n        Console.WriteLine($\"Server Status: {server.Status}\");\n        Console.WriteLine($\"Server Address: {server.IPv4Address}\");\n        Console.WriteLine();\n        Console.WriteLine(\"Sample Snapshot Information:\");\n        Console.WriteLine();\n        Console.WriteLine($\"Image Id: {snapshot.Id}\");\n        Console.WriteLine($\"Image Name: {snapshot.Name}\");\n        Console.WriteLine($\"Image Status: {snapshot.Status}\");\n        Console.WriteLine($\"Image Type: {snapshot.Type}\");\n        Console.WriteLine();\n\n        Console.WriteLine(\"Deleting Sample Server...\");\n        await snapshot.DeleteAsync();\n        await server.DeleteAsync();\n    }\n\n    public void PrintTasks()\n    {\n        Console.WriteLine(\"This sample will perform the following tasks:\");\n        Console.WriteLine(\"\\t* Lookup a flavor with tiny in the name\");\n        Console.WriteLine(\"\\t* Lookup an image named cirros\");\n        Console.WriteLine(\"\\t* Create a server using cirros and the tiny flavor\");\n        Console.WriteLine(\"\\t* Snapshot the server\");\n        Console.WriteLine(\"\\t* Delete the snapshot and server\");\n    }\n\n}\n'openstack.net/src/corelib/Networking/v2/Serialization/SubnetDefinitionCollection.cs'\n:using System.Collections.Generic;\nusing OpenStack.Serialization;\n\nnamespace OpenStack.Networking.v2.Serialization\n{\n\n\n\n\n\n    [JsonConverterWithConstructor(typeof(RootWrapperConverter), \"subnets\")]\n    internal class SubnetDefinitionCollection : List<object>\n    {\n        public SubnetDefinitionCollection(IEnumerable<object> subnets) : base(subnets)\n        {\n        }\n    }\n}\n'openstack.net/src/testing/unit/Compute/v2_1/KeyPairTests.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing Newtonsoft.Json.Linq;\nusing OpenStack.Compute.v2_1.Serialization;\nusing OpenStack.Serialization;\nusing OpenStack.Synchronous;\nusing OpenStack.Testing;\nusing Xunit;\n\nnamespace OpenStack.Compute.v2_1\n{\n    public class KeyPairTests\n    {\n        private readonly ComputeService _computeService;\n\n        public KeyPairTests()\n        {\n            _computeService = new ComputeService(Stubs.AuthenticationProvider, \"region\");\n        }\n\n        [Fact]\n        public void DeserializeKeyPairCollection()\n        {\n\n            string json = JObject.Parse(@\"{\n  'keypairs': [\n    {\n      'keypair': {\n        'public_key': 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDrBzodZLiWO6nIGGy9ZOVeFhbF6EaG8HUqrknNVKynH6+Hc5ToY71gmeQGJ7XZTAlyKKdFmPhNPCQCYqFQxjPKD3xTIAoGChlRHfkjYwjefbqxFswi9S0Fi3Lq8mawUVuPmPnuTr8KhL8ibnBbAxZnrcfTKBIoxhU+kN56CCmLnkJc5ouG/UcF+UpqUso45pYRf0YWANyyuafyCmj6NiDxMCGy/vnKUBLzMg8wQ01xGSGOfyGDIwuTFZpoPzjeqEV8oUGvxYt9Xyzh/pPKoOz1cz0wBDaVDpucTz3UEq65F9HhCmdwwjso8MP1K46LkM2JNQWQ0eTotqFvUJEoP2ff Generated-by-Nova',\n        'name': 'keypair-d20a3d59-9433-4b79-8726-20b431d89c78',\n        'fingerprint': 'ce:88:fe:6a:9e:c0:d5:91:08:8b:57:80:be:e6:ec:3d'\n      }\n},\n    {\n      'keypair': {\n        'public_key': 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAAAgQDx8nkQv/zgGgB4rMYmIf+6A4l6Rr+o/6lHBQdW5aYd44bd8JttDCE/F/pNRr0lRE+PiqSPO8nDPHw0010JeMH9gYgnnFlyY3/OcJ02RhIPyyxYpv9FhY+2YiUkpwFOcLImyrxEsYXpD/0d3ac30bNH6Sw9JD9UZHYcpSxsIbECHw== Generated-by-Nova',\n        'name': 'uploaded-keypair',\n        'fingerprint': '1e:2c:9b:56:79:4b:45:77:f9:ca:7a:98:2c:b0:d5:3c'\n      }\n    }\n  ]\n}\").ToString();\n\n            var results = OpenStackNet.Deserialize<KeyPairSummaryCollection>(json);\n            Assert.NotNull(results);\n            Assert.Equal(2, results.Count());\n            var result = results.First();\n            Assert.Empty(((IHaveExtraData)result).Data);\n            Assert.NotNull(result.PublicKey);\n        }\n\n        [Fact]\n        public void GetKeyPair()\n        {\n            using (var httpTest = new HttpTest())\n            {\n                const string name = \"keypair-name\";\n                httpTest.RespondWithJson(new KeyPair { Name = name });\n                KeyPair result = _computeService.GetKeyPair(name);\n\n                httpTest.ShouldHaveCalled($\"*/os-keypairs/{name}\");\n                Assert.NotNull(result);\n                Assert.Equal(name, result.Name);\n            }\n        }\n\n        [Fact]\n        public void CreateKeyPair()\n        {\n            using (var httpTest = new HttpTest())\n            {\n                const string name = \"keypair-name\";\n                httpTest.RespondWithJson(new KeyPairResponse {Name = name, PrivateKey = Guid.NewGuid().ToString()});\n                KeyPairResponse result = _computeService.CreateKeyPair(new KeyPairRequest(name));\n\n                httpTest.ShouldHaveCalled(\"*/os-keypairs\");\n                Assert.NotNull(result);\n                Assert.Equal(name, result.Name);\n                Assert.NotNull(result.PrivateKey);\n            }\n        }\n\n        [Fact]\n        public void ImportKeyPair()\n        {\n            using (var httpTest = new HttpTest())\n            {\n                const string name = \"keypair-name\";\n                httpTest.RespondWithJson(new KeyPairSummary {Name = name});\n                KeyPairSummary result = _computeService.ImportKeyPair(new KeyPairDefinition(name, Guid.NewGuid().ToString()));\n\n                httpTest.ShouldHaveCalled(\"*/os-keypairs\");\n                Assert.NotNull(result);\n                Assert.Equal(name, result.Name);\n            }\n        }\n\n        [Fact]\n        public void ListKeypairs()\n        {\n            using (var httpTest = new HttpTest())\n            {\n                const string name = \"keypair-name\";\n                httpTest.RespondWithJson(new KeyPairSummaryCollection\n                {\n                    new KeyPairSummary { Name = name }\n                });\n                IEnumerable<KeyPairSummary> results = _computeService.ListKeyPairs();\n\n                httpTest.ShouldHaveCalled(\"*/os-keypairs\");\n                Assert.NotNull(results);\n                Assert.Single(results);\n                Assert.Equal(name, results.First().Name);\n            }\n        }\n\n        [Theory]\n        [InlineData(HttpStatusCode.Accepted)]\n        [InlineData(HttpStatusCode.NotFound)]\n        public void DeleteKeyPair(HttpStatusCode responseCode)\n        {\n            using (var httpTest = new HttpTest())\n            {\n                httpTest.RespondWithJson(new KeyPair {Name = \"keypair-name\"});\n                httpTest.RespondWith((int) responseCode, \"All gone!\");\n\n                KeyPairSummary result = _computeService.GetKeyPair(\"keypair-name\");\n                result.Delete();\n\n                httpTest.ShouldHaveCalled(\"*/os-keypairs\");\n            }\n        }\n    }\n}\n",
        "gt": [
            "'openstack.net/src/corelib/Networking/v2/Serialization/SubnetDefinitionCollection.cs'",
            "'openstack.net/src/corelib/Networking/v2/TrafficDirection.cs'",
            "'openstack.net/src/corelib/Networking/v2/NetworkingServiceExtensions.cs'",
            "'openstack.net/src/testing/unit/Compute/v2_1/KeyPairTests.cs'",
            "'openstack.net/samples/ComputeSample.cs'"
        ]
    },
    {
        "files": [
            "'OnePomodoro/OnePomodoro/OnePomodoro/Views/OptionsPage.xaml.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/Views/VisualSettingView.xaml.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/Helpers/ScreenshotAttribute.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/App.xaml.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/Services/FirstRunDisplayService.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/ViewModels/ViewTypeSettingViewModel.cs'"
        ],
        "content": "'OnePomodoro/OnePomodoro/OnePomodoro/Views/OptionsPage.xaml.cs'\n:﻿using System;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing OnePomodoro.ViewModels;\nusing Windows.Storage;\nusing Windows.UI.Core;\nusing Windows.UI.Xaml.Controls;\nusing Windows.UI.Xaml.Input;\nusing Windows.UI.Xaml.Media.Animation;\nusing Windows.UI.Xaml.Navigation;\n\nnamespace OnePomodoro.Views\n{\n    public sealed partial class OptionsPage : Page\n    {\n        private Image _visualImage;\n\n        public OptionsPage()\n        {\n            InitializeComponent();\n\n            SystemNavigationManager.GetForCurrentView().BackRequested += BlankPage1_BackRequested;\n        }\n\n        private OptionsViewModel ViewModel => DataContext as OptionsViewModel;\n\n        protected override void OnNavigatedTo(NavigationEventArgs e)\n        {\n            base.OnNavigatedTo(e);\n\n            _ = Task.Run(async () =>\n              {\n                  var uri = new Uri(\"ms-appx:\n                  var storageFile = await StorageFile.GetFileFromApplicationUriAsync(uri);\n                  var text = await FileIO.ReadTextAsync(storageFile);\n                  _ = Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>\n                  {\n                      PrivacyStatementMarkdownTextBlock.Text = text;\n                  });\n\n                  var licenseUri = new Uri(\"ms-appx:\n                  var licenseFile = await StorageFile.GetFileFromApplicationUriAsync(licenseUri);\n                  var licenseText = await FileIO.ReadTextAsync(licenseFile);\n                  _ = Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>\n                  {\n                      LicenseMarkdownTextBlock.Text = licenseText;\n                  });\n\n                  try\n                  {\n                      var client = new HttpClient();\n                      var whatsNewText = await client.GetStringAsync(\"https:\n                      _ = Dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>\n                      {\n                          WhatsNewMarkdownTextBlock.Text = whatsNewText;\n                      });\n                  }\n                  catch (Exception)\n                  {\n                  }\n              });\n        }\n\n        protected override void OnNavigatingFrom(NavigatingCancelEventArgs e)\n        {\n            if (e.NavigationMode == NavigationMode.Back)\n            {\n                if (_visualImage != null)\n                {\n                    var animation = ConnectedAnimationService.GetForCurrentView().PrepareToAnimate(\"backAnimation\", _visualImage);\n                    animation.Configuration = new GravityConnectedAnimationConfiguration();\n                    _visualImage = null;\n                }\n            }\n        }\n\n        private void BackInvoked(KeyboardAccelerator sender, KeyboardAcceleratorInvokedEventArgs args)\n        {\n            On_BackRequested();\n            args.Handled = true;\n        }\n\n        private void BlankPage1_BackRequested(object sender, BackRequestedEventArgs e)\n        {\n            On_BackRequested();\n        }\n\n        private bool On_BackRequested()\n        {\n            if (this.Frame.CanGoBack)\n            {\n                this.Frame.GoBack();\n                return true;\n            }\n            return false;\n        }\n\n        private void OnBackClick(object sender, Windows.UI.Xaml.RoutedEventArgs e)\n        {\n            On_BackRequested();\n        }\n\n        private void OnVisualChanged(object sender, Tuple<Type, Image> e)\n        {\n            _visualImage = e.Item2;\n            On_BackRequested();\n        }\n    }\n}\n\n'OnePomodoro/OnePomodoro/OnePomodoro/Views/VisualSettingView.xaml.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.Toolkit.Uwp.UI;\nusing OnePomodoro.Helpers;\nusing OnePomodoro.PomodoroViews;\nusing OnePomodoro.Services;\nusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Controls;\n\n\n\nnamespace OnePomodoro.Views\n{\n    public class VisualSettingItem\n    {\n        private readonly string DefaultScreenshotUri = \"/Assets/SplashScreen.png\";\n\n        public VisualSettingItem(Type pomodoroViewType)\n        {\n            Type = pomodoroViewType;\n\n            var attributes = Type.GetCustomAttributes(true);\n            var titleAttribute = attributes.OfType<TitleAttribute>().FirstOrDefault();\n            if (titleAttribute != null)\n                Title = titleAttribute.Title;\n\n            var screenshotAttribute = attributes.OfType<ScreenshotAttribute>().FirstOrDefault();\n            if (screenshotAttribute != null && string.IsNullOrWhiteSpace(screenshotAttribute.Uri) == false)\n                ScreenshotUri = screenshotAttribute.Uri;\n            else\n                ScreenshotUri = DefaultScreenshotUri;\n\n            var compactOverlayAttribute = attributes.OfType<CompactOverlayAttribute>().FirstOrDefault();\n            Pinable = compactOverlayAttribute != null;\n\n            var tagsAttribute = attributes.OfType<FunctionTagsAttribute>().FirstOrDefault();\n            Tags = tagsAttribute?.Tags;\n\n            var sourceCodeAttribute = attributes.OfType<SourceCodeAttribute>().FirstOrDefault();\n            SourceCodeUri = sourceCodeAttribute == null ? \"https:\n        }\n\n        public bool Pinable { get; }\n        public string ScreenshotUri { get; }\n\n        public string SourceCodeUri { get; }\n\n        public string[] Tags { get; }\n        public string Title { get; }\n\n        public Type Type { get; }\n    }\n\n    public sealed partial class VisualSettingView : UserControl\n    {\n        public VisualSettingView()\n        {\n            this.InitializeComponent();\n            Items = PomodoroView.Views.Select(v => new VisualSettingItem(v));\n        }\n\n        public event EventHandler<Tuple<Type, Image>> VisualChanged;\n\n        public IEnumerable<VisualSettingItem> Items { get; }\n\n        private async void OnSelectVisual(object sender, RoutedEventArgs e)\n        {\n            var element = (sender as FrameworkElement);\n            var image = element.FindDescendant<Image>();\n            var item = element.DataContext as VisualSettingItem;\n\n            SettingsService.Current.ViewType = item.Type.Name;\n            VisualChanged?.Invoke(item.Type, new Tuple<Type, Image>(item.Type, image));\n            await SettingsService.SaveAsync();\n        }\n    }\n}\n\n'OnePomodoro/OnePomodoro/OnePomodoro/Helpers/ScreenshotAttribute.cs'\n:﻿using System;\n\nnamespace OnePomodoro.Helpers\n{\n    public class ScreenshotAttribute : Attribute\n    {\n        public ScreenshotAttribute(string uri)\n        {\n            Uri = uri;\n        }\n\n        public string Uri { get; }\n    }\n}\n\n'OnePomodoro/OnePomodoro/OnePomodoro/App.xaml.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Microsoft.AppCenter;\nusing Microsoft.AppCenter.Analytics;\nusing Microsoft.AppCenter.Crashes;\nusing Microsoft.Extensions.DependencyInjection;\nusing OnePomodoro.Helpers;\nusing OnePomodoro.Services;\nusing OnePomodoro.Views;\nusing Windows.ApplicationModel.Activation;\nusing Windows.ApplicationModel.Core;\nusing Windows.Devices.Geolocation;\nusing Windows.Globalization;\nusing Windows.Services.Maps;\nusing Windows.UI.Core.Preview;\nusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Controls;\nusing Windows.UI.Xaml.Navigation;\n\nnamespace OnePomodoro\n{\n    [Windows.UI.Xaml.Data.Bindable]\n    public sealed partial class App : Application\n    {\n        public App()\n        {\n            InitializeComponent();\n            UnhandledException += (sender, e) =>\n            {\n                e.Handled = true;\n                var errorMessage = e.Message + Environment.NewLine + e.Exception.StackTrace;\n                ContentDialog dialog = new ContentDialog\n                {\n                    CloseButtonText = \"Ok\",\n                    Content = errorMessage\n                };\n\n                _ = dialog.ShowAsync();\n            };\n\n            CoreApplication.Exiting += (s, e) =>\n            {\n            };\n\n            AppDomain.CurrentDomain.UnhandledException += AppDomainUnhandledException;\n            TaskScheduler.UnobservedTaskException += TaskScheduler_UnobservedTaskException;\n\n            AppCenter.Start(\"ba644924-74c7-432e-a7fa-e86442a1c601\",\n                typeof(Analytics), typeof(Crashes));\n\n            Services = ConfigureServices();\n        }\n\n\n\n\n        public new static App Current => (App)Application.Current;\n\n        public bool HasExited { get; private set; }\n\n\n\n\n        public IServiceProvider Services { get; }\n\n\n\n\n\n\n        protected override async void OnLaunched(LaunchActivatedEventArgs e)\n        {\n            Frame rootFrame = Window.Current.Content as Frame;\n\n\n\n            if (rootFrame == null)\n            {\n\n                rootFrame = new Frame();\n\n                rootFrame.NavigationFailed += OnNavigationFailed;\n\n                if (e.PreviousExecutionState == ApplicationExecutionState.Terminated)\n                {\n\n                }\n\n\n                Window.Current.Content = rootFrame;\n            }\n\n            if (e.PrelaunchActivated == false)\n            {\n                if (rootFrame.Content == null)\n                {\n                    CoreApplicationViewTitleBar coreTitleBar = CoreApplication.GetCurrentView().TitleBar;\n                    coreTitleBar.ExtendViewIntoTitleBar = true;\n                    await DataService.CreateTheDatabaseAsync();\n                    await DataService.RemoveFuturePeriodsAsync();\n                    await ThemeSelectorService.InitializeAsync().ConfigureAwait(false);\n                    await ThemeSelectorService.SetRequestedThemeAsync();\n\n                    await SettingsService.InitializeAsync();\n\n\n\n                    rootFrame.Navigate(typeof(MainPage), e.Arguments);\n                    HandleClosed();\n                    try\n                    {\n                        await NotificationManager.Current.RemoveBreakFinishedToastNotificationScheduleAsync();\n                        await NotificationManager.Current.RemovePomodoroFinishedToastNotificationScheduleAsync();\n                    }\n                    catch (Exception ex)\n                    {\n                        Microsoft.AppCenter.Crashes.Crashes.TrackError(ex);\n                    }\n\n                    var properties = new Dictionary<string, string>\n                    {\n                        { \"Region\", Windows.System.UserProfile.GlobalizationPreferences.HomeGeographicRegion},\n                    };\n                    Analytics.TrackEvent(\"Launched\", properties);\n                }\n\n                Window.Current.Activate();\n\n                await Services.GetService<IFirstRunDisplayService>().ShowIfAppropriateAsync();\n                await SetCountryCode();\n            }\n        }\n\n\n\n\n        private static IServiceProvider ConfigureServices()\n        {\n            var services = new ServiceCollection();\n\n            services.AddSingleton<IWhatsNewDisplayService, WhatsNewDisplayService>();\n            services.AddSingleton<IFirstRunDisplayService, FirstRunDisplayService>();\n            services.AddSingleton<ILiveTileService, LiveTileService>();\n\n            return services.BuildServiceProvider();\n        }\n\n        private static async Task SetCountryCode()\n        {\n\n\n\n            var countryCode = new GeographicRegion().CodeTwoLetter;\n            var accessStatus = await Geolocator.RequestAccessAsync();\n            switch (accessStatus)\n            {\n                case GeolocationAccessStatus.Allowed:\n                    var geoLocator = new Geolocator\n                    {\n                        DesiredAccuracyInMeters = 100\n                    };\n                    var position = await geoLocator.GetGeopositionAsync();\n                    var myLocation = new BasicGeoposition\n                    {\n                        Longitude = position.Coordinate.Point.Position.Longitude,\n                        Latitude = position.Coordinate.Point.Position.Latitude\n                    };\n                    var pointToReverseGeocode = new Geopoint(myLocation);\n                    MapService.ServiceToken = \"IMWjHP2McfAwNKq8DAIP~Vor0jubIiy8-IJwoSQbzBQ~AkMH8oQZioNtAHeNvv_rHBJoy_jLcTXtf5_RrpQtrauTdsCKQvMGkFho5Jf9mF-8\";\n                    var result = await MapLocationFinder.FindLocationsAtAsync(pointToReverseGeocode);\n                    if (result.Status != MapLocationFinderStatus.Success || result.Locations == null || result.Locations.Count == 0)\n                    {\n                        break;\n                    }\n\n\n\n                    var country = result.Locations[0].Address.CountryCode;\n                    countryCode = new GeographicRegion(country).CodeTwoLetter;\n                    break;\n\n                case GeolocationAccessStatus.Denied:\n                    AppCenterLog.Info(\"Map\", \"Geolocation access denied. To set country code in App Center, enable location service in Windows 10.\");\n                    break;\n\n                case GeolocationAccessStatus.Unspecified:\n                    break;\n            }\n            AppCenter.SetCountryCode(countryCode);\n        }\n\n        private void AppDomainUnhandledException(object sender, System.UnhandledExceptionEventArgs e)\n        {\n            if (e.ExceptionObject is Exception ex)\n                Crashes.TrackError(ex);\n        }\n\n        private void HandleClosed()\n        {\n            SystemNavigationManagerPreview.GetForCurrentView().CloseRequested += async (s, args) =>\n            {\n                HasExited = true;\n                var deferral = args.GetDeferral();\n                await DataService.RemoveFuturePeriodsAsync();\n                try\n                {\n                    NotificationManager.Current.IsEnabled = false;\n                    await NotificationManager.Current.RemoveBreakFinishedToastNotificationScheduleAsync();\n                    await NotificationManager.Current.RemovePomodoroFinishedToastNotificationScheduleAsync();\n                }\n                catch (Exception ex)\n                {\n                    Microsoft.AppCenter.Crashes.Crashes.TrackError(ex);\n                }\n\n                deferral.Complete();\n            };\n        }\n\n\n\n\n\n\n        private void OnNavigationFailed(object sender, NavigationFailedEventArgs e)\n        {\n            throw new Exception(\"Failed to load Page \" + e.SourcePageType.FullName);\n        }\n\n        private void TaskScheduler_UnobservedTaskException(object sender, UnobservedTaskExceptionEventArgs e) => Crashes.TrackError(e.Exception);\n    }\n}\n\n'OnePomodoro/OnePomodoro/OnePomodoro/Services/FirstRunDisplayService.cs'\n:﻿using System;\nusing System.Threading.Tasks;\n\nusing Microsoft.Toolkit.Uwp.Helpers;\n\nusing OnePomodoro.Views;\n\nnamespace OnePomodoro.Services\n{\n    public class FirstRunDisplayService : IFirstRunDisplayService\n    {\n        private static bool shown = false;\n\n        public async Task ShowIfAppropriateAsync()\n        {\n            if (SystemInformation.Instance.IsFirstRun && !shown)\n            {\n                shown = true;\n                var dialog = new FirstRunDialog();\n                await dialog.ShowAsync();\n            }\n        }\n    }\n}\n\n'OnePomodoro/OnePomodoro/OnePomodoro/ViewModels/ViewTypeSettingViewModel.cs'\n:﻿using Microsoft.Toolkit.Mvvm.ComponentModel;\nusing OnePomodoro.Models;\nusing OnePomodoro.Services;\n\nnamespace OnePomodoro.ViewModels\n{\n    internal class ViewTypeSettingViewModel : ObservableObject\n    {\n        public ViewTypeSettingViewModel()\n        {\n            Settings = SettingsService.Current;\n        }\n\n        public IPomodoroSettings Settings { get; }\n\n        public async void OnSettingChanged()\n        {\n            await SettingsService.SaveAsync();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        }\n    }\n}\n",
        "gt": [
            "'OnePomodoro/OnePomodoro/OnePomodoro/Helpers/ScreenshotAttribute.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/Views/VisualSettingView.xaml.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/Services/FirstRunDisplayService.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/ViewModels/ViewTypeSettingViewModel.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/Views/OptionsPage.xaml.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/App.xaml.cs'"
        ]
    },
    {
        "files": [
            "'CSLisp/CSLisp/src/core/Machine.cs'",
            "'CSLisp/CSLisp/src/core/Context.cs'",
            "'CSLisp/CSLisp/src/data/Closure.cs'",
            "'CSLisp/CSLisp/src/libs/Libraries.cs'"
        ],
        "content": "'CSLisp/CSLisp/src/core/Machine.cs'\n:using CSLisp.Data;\nusing CSLisp.Error;\nusing System.Collections.Generic;\n\nnamespace CSLisp.Core\n{\n\n\n\n    public class Machine\n    {\n\n        private readonly ILogger _logger = null;\n\n\n        private readonly Context _ctx = null;\n\n        public Machine (Context ctx, ILogger logger) {\n            _ctx = ctx;\n            _logger = logger;\n        }\n\n\n        public Val Execute (Closure fn, params Val[] args) {\n            State st = new State(fn, args);\n            CodeHandle code = default;\n            List<Instruction> instructions = null;\n\n            if (_logger.EnableInstructionLogging) {\n                _logger.Log(\"Executing: \", fn.name);\n                _logger.Log(_ctx.code.DebugPrint(fn));\n            }\n\n            while (!st.done) {\n                if (!code.Equals(st.fn.code)) {\n                    code = st.fn.code;\n                    instructions = _ctx.code.Get(code).instructions;\n                }\n\n                if (st.pc >= instructions.Count) {\n                    throw new LanguageError(\"Runaway opcodes!\");\n                }\n\n\n                Instruction instr = instructions[st.pc++];\n\n                if (_logger.EnableStackLogging) {\n                    _logger.Log(\"                                    \" + State.PrintStack(st));\n                    _logger.Log(string.Format(\"[{0,2}] {1,3} : {2}\", st.stack.Count, st.pc - 1, instr.DebugPrint()));\n                }\n\n\n\n                switch (instr.type) {\n                    case Opcode.LABEL:\n\n                        break;\n\n                    case Opcode.PUSH_CONST: {\n                            st.Push(instr.first);\n                        }\n                        break;\n\n                    case Opcode.LOCAL_GET: {\n                            VarPos pos = new VarPos(instr.first, instr.second);\n                            Val value = Environment.GetValueAt(pos, st.env);\n                            st.Push(value);\n                        }\n                        break;\n\n                    case Opcode.LOCAL_SET: {\n                            VarPos pos = new VarPos(instr.first, instr.second);\n                            Val value = st.Peek();\n                            Environment.SetValueAt(pos, value, st.env);\n                        }\n                        break;\n\n                    case Opcode.GLOBAL_GET: {\n                            Symbol symbol = instr.first.AsSymbol;\n                            Val value = symbol.pkg.GetValue(symbol);\n                            st.Push(value);\n                        }\n                        break;\n\n                    case Opcode.GLOBAL_SET: {\n                            Symbol symbol = instr.first.AsSymbol;\n                            Val value = st.Peek();\n                            symbol.pkg.SetValue(symbol, value);\n                        }\n                        break;\n\n                    case Opcode.STACK_POP:\n                        st.Pop();\n                        break;\n\n                    case Opcode.JMP_IF_TRUE: {\n                            Val value = st.Pop();\n                            if (value.CastToBool) {\n                                st.pc = GetLabelPosition(instr);\n                            }\n                        }\n                        break;\n\n                    case Opcode.JMP_IF_FALSE: {\n                            Val value = st.Pop();\n                            if (!value.CastToBool) {\n                                st.pc = GetLabelPosition(instr);\n                            }\n                        }\n                        break;\n\n                    case Opcode.JMP_TO_LABEL: {\n                            st.pc = GetLabelPosition(instr);\n                        }\n                        break;\n\n                    case Opcode.MAKE_ENV: {\n                            int argcount = instr.first.AsInt;\n                            if (st.argcount != argcount) { throw new LanguageError($\"Argument count error, expected {argcount}, got {st.argcount}\"); }\n\n\n                            st.env = new Environment(st.argcount, st.env);\n\n\n                            for (int i = argcount - 1; i >= 0; i--) {\n                                st.env.SetValue(i, st.Pop());\n                            }\n                        }\n                        break;\n\n                    case Opcode.MAKE_ENVDOT: {\n                            int argcount = instr.first.AsInt;\n                            if (st.argcount < argcount) { throw new LanguageError($\"Argument count error, expected {argcount} or more, got {st.argcount}\"); }\n\n\n                            int dotted = st.argcount - argcount;\n                            st.env = new Environment(argcount + 1, st.env);\n\n\n                            for (int dd = dotted - 1; dd >= 0; dd--) {\n                                Val arg = st.Pop();\n                                st.env.SetValue(argcount, new Val(new Cons(arg, st.env.GetValue(argcount))));\n                            }\n\n\n                            for (int i = argcount - 1; i >= 0; i--) {\n                                st.env.SetValue(i, st.Pop());\n                            }\n                        }\n                        break;\n\n                    case Opcode.DUPLICATE: {\n                            if (st.stack.Count == 0) { throw new LanguageError(\"Cannot duplicate on an empty stack!\"); }\n                            st.Push(st.Peek());\n                        }\n                        break;\n\n                    case Opcode.JMP_CLOSURE: {\n                            st.env = st.env.parent;\n                            Val top = st.Pop();\n                            Closure closure = top.AsClosureOrNull;\n\n\n                            st.fn = closure ?? throw new LanguageError($\"Unknown function during function call around: {DebugRecentInstructions(st, instructions)}\");\n                            st.env = closure.env;\n                            st.pc = 0;\n                            st.argcount = instr.first.AsInt;\n                        }\n                        break;\n\n                    case Opcode.SAVE_RETURN: {\n\n                            st.Push(new Val(new ReturnAddress(st.fn, GetLabelPosition(instr), st.env, instr.first.AsStringOrNull)));\n                        }\n                        break;\n\n                    case Opcode.RETURN_VAL:\n                        if (st.stack.Count > 1) {\n\n                            Val retval = st.Pop();\n                            ReturnAddress retaddr = st.Pop().AsReturnAddress;\n                            st.Push(retval);\n\n\n                            st.fn = retaddr.fn;\n                            st.env = retaddr.env;\n                            st.pc = retaddr.pc;\n                        } else {\n                            st.done = true;\n                        }\n                        break;\n\n                    case Opcode.MAKE_CLOSURE: {\n                            var cl = instr.first.AsClosure;\n                            st.Push(new Closure(cl.code, st.env, null, cl.name));\n                        }\n                        break;\n\n                    case Opcode.CALL_PRIMOP: {\n                            string name = instr.first.AsString;\n                            int argn = (instr.second.IsInt) ? instr.second.AsInt : st.argcount;\n\n                            Primitive prim = Primitives.FindNary(name, argn);\n                            if (prim == null) { throw new LanguageError($\"Invalid argument count to primitive {name}, count of {argn}\"); }\n\n                            Val result = prim.Call(_ctx, argn, st);\n                            st.Push(result);\n                        }\n                        break;\n\n                    default:\n                        throw new LanguageError(\"Unknown instruction type: \" + instr.type);\n                }\n            }\n\n\n            if (st.stack.Count == 0) {\n                throw new LanguageError(\"Stack underflow!\");\n            }\n\n            return st.Peek();\n        }\n\n\n        private static int GetLabelPosition (Instruction inst) {\n            if (inst.second.IsInt) {\n                return inst.second.AsInt;\n            } else {\n                throw new LanguageError(\"Unknown jump label: \" + inst.first);\n            }\n        }\n\n\n        private static string DebugRecentInstructions (State st, List<Instruction> instructions) {\n            string result = $\"Closure {st.fn.code}, around instr pc {st.pc - 1}:\";\n            for (int i = st.pc - 5; i <= st.pc; i++) {\n                if (i >= 0 && i < instructions.Count) {\n                    result += $\"{i}: {instructions[i].DebugPrint()}\\n\";\n                }\n            }\n            return result;\n        }\n    }\n}\n\n'CSLisp/CSLisp/src/core/Context.cs'\n:using CSLisp.Data;\nusing CSLisp.Libs;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\n\nnamespace CSLisp.Core\n{\n\n\n\n    public interface ILogger\n    {\n\n        bool EnableParsingLogging { get; }\n\n\n        bool EnableInstructionLogging { get; }\n\n\n        bool EnableStackLogging { get; }\n\n\n        void Log (params object[] args);\n    }\n\n\n\n\n    public class Context\n    {\n        public readonly Code code;\n        public readonly Packages packages;\n        public readonly Parser parser;\n        public readonly Compiler compiler;\n        public readonly Machine vm;\n\n        public Context (bool loadLibraries = true, ILogger logger = null) {\n            this.code = new Code();\n            this.packages = new Packages();\n            this.parser = new Parser(packages, logger);\n            this.compiler = new Compiler(this);\n            this.vm = new Machine(this, logger);\n\n            Primitives.InitializeCorePackage(this, packages.core);\n\n            if (loadLibraries) {\n                Libraries.LoadStandardLibraries(this);\n            }\n        }\n\n\n        public struct CompileAndExecuteResult\n        {\n            public string input;\n            public CompilationResults comp;\n            public Val output;\n            public TimeSpan exectime;\n        }\n\n\n        public List<CompileAndExecuteResult> CompileAndExecute (string input) {\n\n            var outputs = new List<CompileAndExecuteResult>();\n\n            parser.AddString(input);\n            var parseResults = parser.ParseAll();\n\n            foreach (Val result in parseResults) {\n                var cr = compiler.Compile(result);\n\n                Stopwatch s = Stopwatch.StartNew();\n                var output = vm.Execute(cr.closure);\n                s.Stop();\n\n                outputs.Add(new CompileAndExecuteResult {\n                    input = input, comp = cr, output = output, exectime = s.Elapsed\n                });\n            }\n\n            return outputs;\n        }\n    }\n}\n'CSLisp/CSLisp/src/data/Closure.cs'\n:using CSLisp.Core;\n\nnamespace CSLisp.Data\n{\n\n\n\n    public class Closure\n    {\n\n        public readonly CodeHandle code;\n\n\n        public readonly Environment env;\n\n\n        public readonly Cons args;\n\n\n        public readonly string name;\n\n        public Closure (CodeHandle code, Environment env, Cons args, string name) {\n            this.code = code;\n            this.env = env;\n            this.args = args;\n            this.name = name;\n        }\n    }\n\n}\n'CSLisp/CSLisp/src/libs/Libraries.cs'\n:using CSLisp.Core;\nusing CSLisp.Data;\nusing System.Collections.Generic;\nusing System.IO;\n\nnamespace CSLisp.Libs\n{\n\n\n\n    public class Libraries\n    {\n\n        private static List<byte[]> GetAllBuiltInLibraries () =>\n            new List<byte[]>() { Resources.Core, Resources.Record, Resources.User };\n\n\n        public static void LoadStandardLibraries (Context ctx) {\n            var allLibs = GetAllBuiltInLibraries();\n            foreach (byte[] libBytes in allLibs) {\n                using var stream = new MemoryStream(libBytes);\n                using var reader = new StreamReader(stream);\n                string libText = reader.ReadToEnd();\n                LoadLibrary(ctx, libText);\n            }\n        }\n\n\n        private static void LoadLibrary (Context ctx, string lib) {\n            ctx.parser.AddString(lib);\n\n            while (true) {\n                Val result = ctx.parser.ParseNext();\n                if (Val.Equals(Parser.EOF, result)) {\n                    break;\n                }\n\n                Closure cl = ctx.compiler.Compile(result).closure;\n                Val _ = ctx.vm.Execute(cl);\n\n            }\n        }\n\n    }\n\n}",
        "gt": [
            "'CSLisp/CSLisp/src/core/Machine.cs'",
            "'CSLisp/CSLisp/src/data/Closure.cs'",
            "'CSLisp/CSLisp/src/libs/Libraries.cs'",
            "'CSLisp/CSLisp/src/core/Context.cs'"
        ]
    },
    {
        "files": [
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ConnectionReceivingMessageEvent.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ClusterSelectingServerFailedEvent.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Clusters/SingleServerCluster.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ServerDescriptionChangedEvent.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Clusters/ClusterFactory.cs'"
        ],
        "content": "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ConnectionReceivingMessageEvent.cs'\n:\n\nusing MongoDB.Driver.Core.Clusters;\nusing MongoDB.Driver.Core.Connections;\nusing MongoDB.Driver.Core.Servers;\n\nnamespace MongoDB.Driver.Core.Events\n{\n\n\n\n\n    public struct ConnectionReceivingMessageEvent\n    {\n        private readonly ConnectionId _connectionId;\n        private readonly long? _operationId;\n        private readonly int _responseTo;\n\n\n\n\n\n\n\n        public ConnectionReceivingMessageEvent(ConnectionId connectionId, int responseTo, long? operationId)\n        {\n            _connectionId = connectionId;\n            _responseTo = responseTo;\n            _operationId = operationId;\n        }\n\n\n\n\n        public ClusterId ClusterId\n        {\n            get { return _connectionId.ServerId.ClusterId; }\n        }\n\n\n\n\n        public ConnectionId ConnectionId\n        {\n            get { return _connectionId; }\n        }\n\n\n\n\n        public long? OperationId\n        {\n            get { return _operationId; }\n        }\n\n\n\n\n        public int ResponseTo\n        {\n            get { return _responseTo; }\n        }\n\n\n\n\n        public ServerId ServerId\n        {\n            get { return _connectionId.ServerId; }\n        }\n    }\n}\n\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ClusterSelectingServerFailedEvent.cs'\n:\n\nusing System;\nusing MongoDB.Driver.Core.Clusters;\nusing MongoDB.Driver.Core.Clusters.ServerSelectors;\n\nnamespace MongoDB.Driver.Core.Events\n{\n\n\n\n\n    public struct ClusterSelectingServerFailedEvent\n    {\n        private readonly ClusterDescription _clusterDescription;\n        private readonly long? _operationId;\n        private readonly IServerSelector _serverSelector;\n        private readonly Exception _exception;\n\n\n\n\n\n\n\n\n        public ClusterSelectingServerFailedEvent(ClusterDescription clusterDescription, IServerSelector serverSelector, Exception exception, long? operationId)\n        {\n            _clusterDescription = clusterDescription;\n            _serverSelector = serverSelector;\n            _exception = exception;\n            _operationId = operationId;\n        }\n\n\n\n\n        public ClusterId ClusterId\n        {\n            get { return _clusterDescription.ClusterId; }\n        }\n\n\n\n\n        public ClusterDescription ClusterDescription\n        {\n            get { return _clusterDescription; }\n        }\n\n\n\n\n        public Exception Exception\n        {\n            get { return _exception; }\n        }\n\n\n\n\n        public long? OperationId\n        {\n            get { return _operationId; }\n        }\n\n\n\n\n        public IServerSelector ServerSelector\n        {\n            get { return _serverSelector; }\n        }\n    }\n}\n\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Clusters/SingleServerCluster.cs'\n:\n\nusing System;\nusing System.Diagnostics;\nusing System.Net;\nusing MongoDB.Driver.Core.Configuration;\nusing MongoDB.Driver.Core.Events;\nusing MongoDB.Driver.Core.Misc;\nusing MongoDB.Driver.Core.Servers;\n\nnamespace MongoDB.Driver.Core.Clusters\n{\n\n\n\n    internal sealed class SingleServerCluster : Cluster\n    {\n\n        private IClusterableServer _server;\n        private readonly InterlockedInt32 _state;\n\n        private readonly Action<ClusterClosingEvent> _closingEventHandler;\n        private readonly Action<ClusterClosedEvent> _closedEventHandler;\n        private readonly Action<ClusterOpeningEvent> _openingEventHandler;\n        private readonly Action<ClusterOpenedEvent> _openedEventHandler;\n        private readonly Action<ClusterAddingServerEvent> _addingServerEventHandler;\n        private readonly Action<ClusterAddedServerEvent> _addedServerEventHandler;\n        private readonly Action<ClusterRemovingServerEvent> _removingServerEventHandler;\n        private readonly Action<ClusterRemovedServerEvent> _removedServerEventHandler;\n\n\n        internal SingleServerCluster(ClusterSettings settings, IClusterableServerFactory serverFactory, IEventSubscriber eventSubscriber)\n            : base(settings, serverFactory, eventSubscriber)\n        {\n            Ensure.IsEqualTo(settings.EndPoints.Count, 1, \"settings.EndPoints.Count\");\n\n            _state = new InterlockedInt32(State.Initial);\n\n            eventSubscriber.TryGetEventHandler(out _closingEventHandler);\n            eventSubscriber.TryGetEventHandler(out _closedEventHandler);\n            eventSubscriber.TryGetEventHandler(out _openingEventHandler);\n            eventSubscriber.TryGetEventHandler(out _openedEventHandler);\n            eventSubscriber.TryGetEventHandler(out _addingServerEventHandler);\n            eventSubscriber.TryGetEventHandler(out _addedServerEventHandler);\n            eventSubscriber.TryGetEventHandler(out _removingServerEventHandler);\n            eventSubscriber.TryGetEventHandler(out _removedServerEventHandler);\n        }\n\n\n        protected override void Dispose(bool disposing)\n        {\n            Stopwatch stopwatch = null;\n            if (_state.TryChange(State.Disposed))\n            {\n                if (disposing)\n                {\n                    if (_closingEventHandler != null)\n                    {\n                        _closingEventHandler(new ClusterClosingEvent(ClusterId));\n                    }\n                    stopwatch = Stopwatch.StartNew();\n\n                    if (_server != null)\n                    {\n                        if (_removingServerEventHandler != null)\n                        {\n                            _removingServerEventHandler(new ClusterRemovingServerEvent(_server.ServerId, \"Cluster is closing.\"));\n                        }\n\n                        _server.DescriptionChanged -= ServerDescriptionChanged;\n                        _server.Dispose();\n\n                        if (_removedServerEventHandler != null)\n                        {\n                            _removedServerEventHandler(new ClusterRemovedServerEvent(_server.ServerId, \"Cluster is closing.\", stopwatch.Elapsed));\n                        }\n                    }\n                    stopwatch.Stop();\n                }\n            }\n\n            base.Dispose(disposing);\n\n            if (stopwatch != null && _closedEventHandler != null)\n            {\n                _closedEventHandler(new ClusterClosedEvent(ClusterId, stopwatch.Elapsed));\n            }\n        }\n\n        public override void Initialize()\n        {\n            base.Initialize();\n            if (_state.TryChange(State.Initial, State.Open))\n            {\n                if (_openingEventHandler != null)\n                {\n                    _openingEventHandler(new ClusterOpeningEvent(ClusterId, Settings));\n                }\n\n                var stopwatch = Stopwatch.StartNew();\n                _server = CreateServer(Settings.EndPoints[0]);\n                var newClusterDescription = Description\n                    .WithType(Settings.ConnectionMode.ToClusterType())\n                    .WithServerDescription(_server.Description);\n                if (_addingServerEventHandler != null)\n                {\n                    _addingServerEventHandler(new ClusterAddingServerEvent(ClusterId, _server.EndPoint));\n                }\n                _server.DescriptionChanged += ServerDescriptionChanged;\n                stopwatch.Stop();\n\n                if (_addedServerEventHandler != null)\n                {\n                    _addedServerEventHandler(new ClusterAddedServerEvent(_server.ServerId, stopwatch.Elapsed));\n                }\n\n                UpdateClusterDescription(newClusterDescription);\n\n                _server.Initialize();\n\n                if (_openedEventHandler != null)\n                {\n                    _openedEventHandler(new ClusterOpenedEvent(ClusterId, Settings, stopwatch.Elapsed));\n                }\n            }\n        }\n\n        private bool IsServerValidForCluster(ClusterType clusterType, ClusterConnectionMode connectionMode, ServerType serverType)\n        {\n            switch (clusterType)\n            {\n                case ClusterType.ReplicaSet:\n                    return serverType.IsReplicaSetMember();\n\n                case ClusterType.Sharded:\n                    return serverType == ServerType.ShardRouter;\n\n                case ClusterType.Standalone:\n                    return serverType == ServerType.Standalone;\n\n                case ClusterType.Unknown:\n                    switch (connectionMode)\n                    {\n                        case ClusterConnectionMode.Automatic:\n                        case ClusterConnectionMode.Direct:\n                            return true;\n\n                        default:\n                            throw new MongoInternalException(\"Unexpected connection mode.\");\n                    }\n\n                default:\n                    throw new MongoInternalException(\"Unexpected cluster type.\");\n            }\n        }\n\n        protected override void RequestHeartbeat()\n        {\n            _server.RequestHeartbeat();\n        }\n\n        private void ServerDescriptionChanged(object sender, ServerDescriptionChangedEventArgs args)\n        {\n            var newServerDescription = args.NewServerDescription;\n            var newClusterDescription = Description;\n\n            if (newServerDescription.State == ServerState.Disconnected)\n            {\n                newClusterDescription = newClusterDescription.WithServerDescription(newServerDescription);\n            }\n            else\n            {\n                if (IsServerValidForCluster(newClusterDescription.Type, Settings.ConnectionMode, newServerDescription.Type))\n                {\n                    if (newClusterDescription.Type == ClusterType.Unknown)\n                    {\n                        newClusterDescription = newClusterDescription.WithType(newServerDescription.Type.ToClusterType());\n                    }\n\n                    newClusterDescription = newClusterDescription.WithServerDescription(newServerDescription);\n                }\n                else\n                {\n                    newClusterDescription = newClusterDescription.WithoutServerDescription(newServerDescription.EndPoint);\n                }\n            }\n\n            UpdateClusterDescription(newClusterDescription);\n        }\n\n        protected override bool TryGetServer(EndPoint endPoint, out IClusterableServer server)\n        {\n            if (EndPointHelper.Equals(_server.EndPoint, endPoint))\n            {\n                server = _server;\n                return true;\n            }\n            else\n            {\n                server = null;\n                return false;\n            }\n        }\n\n        private void ThrowIfDisposed()\n        {\n            if (_state.Value == State.Disposed)\n            {\n                throw new ObjectDisposedException(GetType().Name);\n            }\n        }\n\n\n        private static class State\n        {\n            public const int Initial = 0;\n            public const int Open = 1;\n            public const int Disposed = 2;\n        }\n    }\n}\n\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ServerDescriptionChangedEvent.cs'\n:\n\nusing System;\nusing MongoDB.Driver.Core.Clusters;\nusing MongoDB.Driver.Core.Servers;\n\nnamespace MongoDB.Driver.Core.Events\n{\n\n\n\n\n    public struct ServerDescriptionChangedEvent\n    {\n        private readonly ServerDescription _oldDescription;\n        private readonly ServerDescription _newDescription;\n\n\n\n\n\n\n        public ServerDescriptionChangedEvent(ServerDescription oldDescription, ServerDescription newDescription)\n        {\n            _oldDescription = oldDescription;\n            _newDescription = newDescription;\n        }\n\n\n\n\n        public ClusterId ClusterId\n        {\n            get { return _newDescription.ServerId.ClusterId; }\n        }\n\n\n\n\n        public ServerDescription NewDescription\n        {\n            get { return _newDescription; }\n        }\n\n\n\n\n        public ServerDescription OldDescription\n        {\n            get { return _oldDescription; }\n        }\n\n\n\n\n        public ServerId ServerId\n        {\n            get { return _newDescription.ServerId; }\n        }\n    }\n}\n\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Clusters/ClusterFactory.cs'\n:\n\nusing MongoDB.Driver.Core.Configuration;\nusing MongoDB.Driver.Core.Events;\nusing MongoDB.Driver.Core.Misc;\nusing MongoDB.Driver.Core.Servers;\n\nnamespace MongoDB.Driver.Core.Clusters\n{\n    internal class ClusterFactory : IClusterFactory\n    {\n\n        private readonly IEventSubscriber _eventSubscriber;\n        private readonly IClusterableServerFactory _serverFactory;\n        private readonly ClusterSettings _settings;\n\n\n        public ClusterFactory(ClusterSettings settings, IClusterableServerFactory serverFactory, IEventSubscriber eventSubscriber)\n        {\n            _settings = Ensure.IsNotNull(settings, nameof(settings));\n            _serverFactory = Ensure.IsNotNull(serverFactory, nameof(serverFactory));\n            _eventSubscriber = Ensure.IsNotNull(eventSubscriber, nameof(eventSubscriber));\n        }\n\n\n        public ICluster CreateCluster()\n        {\n            var connectionMode = _settings.ConnectionMode;\n\n            if (connectionMode == ClusterConnectionMode.Automatic)\n            {\n                if (_settings.ReplicaSetName != null)\n                {\n                    connectionMode = ClusterConnectionMode.ReplicaSet;\n                }\n            }\n\n            var settings = _settings.With(connectionMode: connectionMode);\n\n            switch (connectionMode)\n            {\n                case ClusterConnectionMode.Automatic:\n                    return settings.EndPoints.Count == 1 ? (ICluster)CreateSingleServerCluster(settings) : CreateMultiServerCluster(settings);\n                case ClusterConnectionMode.Direct:\n                case ClusterConnectionMode.Standalone:\n                    return CreateSingleServerCluster(settings);\n                case ClusterConnectionMode.ReplicaSet:\n                case ClusterConnectionMode.Sharded:\n                    return CreateMultiServerCluster(settings);\n                default:\n                    throw new MongoInternalException(string.Format(\"Invalid connection mode: {0}.\", connectionMode));\n            }\n        }\n\n        private MultiServerCluster CreateMultiServerCluster(ClusterSettings settings)\n        {\n            return new MultiServerCluster(settings, _serverFactory, _eventSubscriber);\n        }\n\n        private SingleServerCluster CreateSingleServerCluster(ClusterSettings settings)\n        {\n            return new SingleServerCluster(settings, _serverFactory, _eventSubscriber);\n        }\n    }\n}\n",
        "gt": [
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ServerDescriptionChangedEvent.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Clusters/SingleServerCluster.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ConnectionReceivingMessageEvent.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Clusters/ClusterFactory.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ClusterSelectingServerFailedEvent.cs'"
        ]
    },
    {
        "files": [
            "'InfluxData.Net/NugetTests/InfluxData.Net.Test.Framework/Integration/InfluxDb/IIntegrationFixture.cs'",
            "'InfluxData.Net/InfluxData.Net.InfluxDb/InfluxDbClient.cs'",
            "'InfluxData.Net/InfluxData.Net.InfluxDb/ClientModules/DatabaseClientModule.cs'",
            "'InfluxData.Net/InfluxData.Net.InfluxDb/QueryBuilders/IUserQueryBuilder.cs'"
        ],
        "content": "'InfluxData.Net/NugetTests/InfluxData.Net.Test.Framework/Integration/InfluxDb/IIntegrationFixture.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing InfluxData.Net.InfluxDb;\nusing InfluxData.Net.InfluxDb.Models;\nusing InfluxData.Net.Integration.Kapacitor;\nusing InfluxData.Net.Common.Constants;\nusing InfluxData.Net.InfluxDb.Models.Responses;\n\nnamespace InfluxData.Net.Integration.InfluxDb\n{\n    public interface IIntegrationFixture : IIntegrationFixtureFactory\n    {\n        IInfluxDbClient Sut { get; set; }\n\n        void Dispose();\n\n        #region Validation\n\n\n\n\n\n\n\n        Task EnsureValidPointCount(string serieName, string countField, int expectedPoints);\n\n\n\n\n\n\n\n        Task<Serie> EnsurePointExists(Point expectedPoint, string precision = TimeUnit.Milliseconds);\n\n        #endregion Validation\n\n        #region Data Mocks\n\n        string CreateRandomMeasurementName();\n\n        string CreateRandomCqName();\n\n\n\n\n\n\n        Task<IEnumerable<Point>> MockAndWritePoints(int amount, int uniqueMeasurements = 1, string dbName = null);\n\n\n\n\n\n        Task<CqParams> MockAndWriteCq(string serieName);\n\n        IEnumerable<Point> MockPoints(int amount);\n\n        Dictionary<string, object> MockPointTags(Random rnd);\n\n        Dictionary<string, object> MockPointFields(Random rnd);\n\n        CqParams MockContinuousQuery(string serieName);\n\n        BackfillParams MockBackfill();\n\n        #endregion Data Mocks\n    }\n}\n'InfluxData.Net/InfluxData.Net.InfluxDb/InfluxDbClient.cs'\n:﻿using System;\nusing InfluxData.Net.Common.Enums;\nusing InfluxData.Net.InfluxDb.ClientModules;\nusing InfluxData.Net.InfluxDb.Infrastructure;\nusing InfluxData.Net.InfluxDb.QueryBuilders;\nusing InfluxData.Net.InfluxDb.RequestClients;\nusing InfluxData.Net.InfluxDb.ResponseParsers;\nusing InfluxData.Net.Common.Infrastructure;\nusing System.Net.Http;\nusing InfluxData.Net.InfluxDb.ClientSubModules;\n\nnamespace InfluxData.Net.InfluxDb\n{\n    public class InfluxDbClient : IInfluxDbClient\n    {\n        private IInfluxDbRequestClient _requestClient;\n        public IInfluxDbRequestClient RequestClient\n        {\n            get { return _requestClient; }\n        }\n\n        private Lazy<ISerieQueryBuilder> _serieQueryBuilder;\n        private Lazy<IDatabaseQueryBuilder> _databaseQueryBuilder;\n        private Lazy<IRetentionQueryBuilder> _retentionQueryBuilder;\n        private Lazy<ICqQueryBuilder> _cqQueryBuilder;\n        private Lazy<IDiagnosticsQueryBuilder> _diagnosticsQueryBuilder;\n        private Lazy<IUserQueryBuilder> _userQueryBuilder;\n\n        private Lazy<IBasicResponseParser> _basicResponseParser;\n        private Lazy<ISerieResponseParser> _serieResponseParser;\n        private Lazy<IDatabaseResponseParser> _databaseResponseParser;\n        private Lazy<IRetentionResponseParser> _retentionResponseParser;\n        private Lazy<ICqResponseParser> _cqResponseParser;\n        private Lazy<IDiagnosticsResponseParser> _diagnosticsResponseParser;\n        private Lazy<IUserResponseParser> _userResponseParser;\n\n        private Lazy<IBasicClientModule> _basicClientModule;\n        public IBasicClientModule Client\n        {\n            get { return _basicClientModule.Value; }\n        }\n\n        private Lazy<ISerieClientModule> _serieClientModule;\n        public ISerieClientModule Serie\n        {\n            get { return _serieClientModule.Value; }\n        }\n\n        private Lazy<IDatabaseClientModule> _databaseClientModule;\n        public IDatabaseClientModule Database\n        {\n            get { return _databaseClientModule.Value; }\n        }\n\n        private Lazy<IRetentionClientModule> _retentionClientModule;\n        public IRetentionClientModule Retention\n        {\n            get { return _retentionClientModule.Value; }\n        }\n\n        private Lazy<ICqClientModule> _cqClientModule;\n        public ICqClientModule ContinuousQuery\n        {\n            get { return _cqClientModule.Value; }\n        }\n\n        private Lazy<IDiagnosticsClientModule> _diagnosticsClientModule;\n        public IDiagnosticsClientModule Diagnostics\n        {\n            get { return _diagnosticsClientModule.Value; }\n        }\n\n        private Lazy<IUserClientModule> _userClientModule;\n        public IUserClientModule User\n        {\n            get { return _userClientModule.Value; }\n        }\n\n\n\n\n\n\n\n\n\n\n\n        public InfluxDbClient(\n            string endpointUri,\n            string username,\n            string password,\n            InfluxDbVersion influxVersion,\n            QueryLocation queryLocation = QueryLocation.FormData,\n            HttpClient httpClient = null,\n            bool throwOnWarning = false\n        ) : this(\n            new InfluxDbClientConfiguration(\n                new Uri(endpointUri),\n                username,\n                password,\n                influxVersion,\n                queryLocation,\n                httpClient,\n                throwOnWarning\n            )\n        ) {}\n\n\n\n\n\n        public InfluxDbClient(IInfluxDbClientConfiguration configuration)\n        {\n            switch (configuration.InfluxVersion)\n            {\n                case InfluxDbVersion.Latest:\n                case InfluxDbVersion.v_1_3:\n                    this.BootstrapInfluxDbLatest(configuration);\n                    break;\n                case InfluxDbVersion.v_1_0_0:\n                    this.BootstrapInfluxDbLatest(configuration);\n                    this.BootstrapInfluxDb_v_1_0_0(configuration);\n                    break;\n                case InfluxDbVersion.v_0_9_6:\n                case InfluxDbVersion.v_0_9_5:\n                    this.BootstrapInfluxDbLatest(configuration);\n                    this.BootstrapInfluxDb_v_0_9_6(configuration);\n                    break;\n                case InfluxDbVersion.v_0_9_2:\n                    this.BootstrapInfluxDbLatest(configuration);\n                    this.BootstrapInfluxDb_v_0_9_6(configuration);\n                    this.BootstrapInfluxDb_v_0_9_2(configuration);\n                    break;\n                case InfluxDbVersion.v_0_8_x:\n                    throw new NotImplementedException(\"InfluxDB v0.8.x is not supported by InfluxData.Net library.\");\n                default:\n                    throw new ArgumentOutOfRangeException(\"influxDbClientConfiguration\", String.Format(\"Unknown version {0}.\", configuration.InfluxVersion));\n            }\n        }\n\n\n\n\n\n        protected virtual void BootstrapInfluxDbLatest(IInfluxDbClientConfiguration configuration)\n        {\n            _requestClient = new InfluxDbRequestClient(configuration);\n\n\n            _serieQueryBuilder = new Lazy<ISerieQueryBuilder>(() => new SerieQueryBuilder(), true);\n            _databaseQueryBuilder = new Lazy<IDatabaseQueryBuilder>(() => new DatabaseQueryBuilder(), true);\n            _retentionQueryBuilder = new Lazy<IRetentionQueryBuilder>(() => new RetentionQueryBuilder(), true);\n            _cqQueryBuilder = new Lazy<ICqQueryBuilder>(() => new CqQueryBuilder(), true);\n            _diagnosticsQueryBuilder = new Lazy<IDiagnosticsQueryBuilder>(() => new DiagnosticsQueryBuilder(), true);\n            _userQueryBuilder = new Lazy<IUserQueryBuilder>(() => new UserQueryBuilder(), true);\n\n\n            _basicResponseParser = new Lazy<IBasicResponseParser>(() => new BasicResponseParser(), true);\n            _serieResponseParser = new Lazy<ISerieResponseParser>(() => new SerieResponseParser(), true);\n            _databaseResponseParser = new Lazy<IDatabaseResponseParser>(() => new DatabaseResponseParser(), true);\n            _retentionResponseParser = new Lazy<IRetentionResponseParser>(() => new RetentionResponseParser(), true);\n            _cqResponseParser = new Lazy<ICqResponseParser>(() => new CqResponseParser(), true);\n            _diagnosticsResponseParser = new Lazy<IDiagnosticsResponseParser>(() => new DiagnosticsResponseParser(), true);\n            _userResponseParser = new Lazy<IUserResponseParser>(() => new UserResponseParser(), true);\n\n\n            _basicClientModule = new Lazy<IBasicClientModule>(() => new BasicClientModule(_requestClient, _basicResponseParser.Value));\n            var batchWriter = new Lazy<IBatchWriterFactory>(() => new BatchWriter(_basicClientModule.Value));\n\n            _serieClientModule = new Lazy<ISerieClientModule>(() => new SerieClientModule(_requestClient, _serieQueryBuilder.Value, _serieResponseParser.Value, batchWriter.Value));\n            _databaseClientModule = new Lazy<IDatabaseClientModule>(() => new DatabaseClientModule(_requestClient, _databaseQueryBuilder.Value, _databaseResponseParser.Value));\n            _retentionClientModule = new Lazy<IRetentionClientModule>(() => new RetentionClientModule(_requestClient, _retentionQueryBuilder.Value, _retentionResponseParser.Value));\n            _cqClientModule = new Lazy<ICqClientModule>(() => new CqClientModule(_requestClient, _cqQueryBuilder.Value, _cqResponseParser.Value));\n            _diagnosticsClientModule = new Lazy<IDiagnosticsClientModule>(() => new DiagnosticsClientModule(_requestClient, _diagnosticsQueryBuilder.Value, _diagnosticsResponseParser.Value));\n            _userClientModule = new Lazy<IUserClientModule>(() => new UserClientModule(_requestClient, _userQueryBuilder.Value, _userResponseParser.Value));\n        }\n\n\n\n\n\n        protected virtual void BootstrapInfluxDb_v_1_0_0(IInfluxDbClientConfiguration configuration)\n        {\n            _requestClient = new InfluxDbRequestClient_v_1_0_0(configuration);\n        }\n\n\n\n\n\n        protected virtual void BootstrapInfluxDb_v_0_9_6(IInfluxDbClientConfiguration configuration)\n        {\n            _requestClient = new InfluxDbRequestClient_v_0_9_6(configuration);\n\n            _cqQueryBuilder = new Lazy<ICqQueryBuilder>(() => new CqQueryBuilder_v_0_9_6(), true);\n\n            _serieResponseParser = new Lazy<ISerieResponseParser>(() => new SerieResponseParser_v_0_9_6(), true);\n\n            _databaseClientModule = new Lazy<IDatabaseClientModule>(() => new DatabaseClientModule_v_0_9_6(_requestClient, _databaseQueryBuilder.Value, _databaseResponseParser.Value));\n            _cqClientModule = new Lazy<ICqClientModule>(() => new CqClientModule_v_0_9_6(_requestClient, _cqQueryBuilder.Value, _cqResponseParser.Value));\n        }\n\n\n\n\n\n        protected virtual void BootstrapInfluxDb_v_0_9_2(IInfluxDbClientConfiguration configuration)\n        {\n            _requestClient = new InfluxDbRequestClient_v_0_9_2(configuration);\n        }\n    }\n}\n'InfluxData.Net/InfluxData.Net.InfluxDb/ClientModules/DatabaseClientModule.cs'\n:﻿using System.Collections.Generic;\nusing System.Threading.Tasks;\nusing InfluxData.Net.Common.Infrastructure;\nusing InfluxData.Net.InfluxDb.Models.Responses;\nusing InfluxData.Net.InfluxDb.QueryBuilders;\nusing InfluxData.Net.InfluxDb.RequestClients;\nusing InfluxData.Net.InfluxDb.ResponseParsers;\n\nnamespace InfluxData.Net.InfluxDb.ClientModules\n{\n    public class DatabaseClientModule : ClientModuleBase, IDatabaseClientModule\n    {\n        private readonly IDatabaseQueryBuilder _databaseQueryBuilder;\n        private readonly IDatabaseResponseParser _databaseResponseParser;\n\n        public DatabaseClientModule(IInfluxDbRequestClient requestClient, IDatabaseQueryBuilder databaseQueryBuilder, IDatabaseResponseParser databaseResponseParser)\n            : base(requestClient)\n        {\n            _databaseQueryBuilder = databaseQueryBuilder;\n            _databaseResponseParser = databaseResponseParser;\n        }\n\n        public virtual async Task<IInfluxDataApiResponse> CreateDatabaseAsync(string dbName)\n        {\n            var query = _databaseQueryBuilder.CreateDatabase(dbName);\n            var response = await base.PostAndValidateQueryAsync(query).ConfigureAwait(false);\n\n            return response;\n        }\n\n        public virtual async Task<IEnumerable<Database>> GetDatabasesAsync()\n        {\n            var query = _databaseQueryBuilder.GetDatabases();\n            var series = await base.ResolveSingleGetSeriesResultAsync(query).ConfigureAwait(false);\n            var databases = _databaseResponseParser.GetDatabases(series);\n\n            return databases;\n        }\n\n        public virtual async Task<IInfluxDataApiResponse> DropDatabaseAsync(string dbName)\n        {\n            var query = _databaseQueryBuilder.DropDatabase(dbName);\n            var response = await base.PostAndValidateQueryAsync(query).ConfigureAwait(false);\n\n            return response;\n        }\n    }\n}\n\n'InfluxData.Net/InfluxData.Net.InfluxDb/QueryBuilders/IUserQueryBuilder.cs'\n:﻿using InfluxData.Net.InfluxDb.Enums;\n\nnamespace InfluxData.Net.InfluxDb.QueryBuilders\n{\n    public interface IUserQueryBuilder\n    {\n\n\n\n        string GetUsers();\n\n\n\n\n\n\n\n        string CreateUser(string username, string password, bool isAdmin = false);\n\n\n\n\n\n        string DropUser(string username);\n\n\n\n\n\n\n        string SetPassword(string username, string password);\n\n\n\n\n\n        string GetPrivileges(string username);\n\n\n\n\n\n        string GrantAdministator(string username);\n\n\n\n\n\n        string RevokeAdministrator(string username);\n\n\n\n\n\n\n\n        string GrantPrivilege(string username, Privileges privilege, string dbName);\n\n\n\n\n\n\n\n        string RevokePrivilege(string username, Privileges privilege, string dbName);\n    }\n}\n",
        "gt": [
            "'InfluxData.Net/InfluxData.Net.InfluxDb/QueryBuilders/IUserQueryBuilder.cs'",
            "'InfluxData.Net/InfluxData.Net.InfluxDb/ClientModules/DatabaseClientModule.cs'",
            "'InfluxData.Net/InfluxData.Net.InfluxDb/InfluxDbClient.cs'",
            "'InfluxData.Net/NugetTests/InfluxData.Net.Test.Framework/Integration/InfluxDb/IIntegrationFixture.cs'"
        ]
    },
    {
        "files": [
            "'Unity-Weld-Examples/Assets/Unity-Weld/Editor/CollectionBindingEditor.cs'",
            "'Unity-Weld-Examples/Assets/Unity-Weld/UnityWeld/Binding/AbstractMemberBinding.cs'",
            "'Unity-Weld-Examples/Assets/Unity-Weld/UnityWeld/Binding/Exceptions/InvalidTypeException.cs'"
        ],
        "content": "'Unity-Weld-Examples/Assets/Unity-Weld/Editor/CollectionBindingEditor.cs'\n:using UnityEditor;\nusing UnityEngine;\nusing UnityWeld.Binding;\nusing UnityWeld.Binding.Internal;\n\nnamespace UnityWeld_Editor\n{\n    [CustomEditor(typeof(CollectionBinding))]\n    class CollectionBindingEditor : BaseBindingEditor\n    {\n        private CollectionBinding targetScript;\n\n        private bool viewModelPrefabModified;\n        private bool templatesRootPrefabModified;\n\n        private void OnEnable()\n        {\n\n            targetScript = (CollectionBinding)target;\n        }\n\n        public override void OnInspectorGUI()\n        {\n            UpdatePrefabModifiedProperties();\n\n            var defaultLabelStyle = EditorStyles.label.fontStyle;\n            EditorStyles.label.fontStyle = viewModelPrefabModified ? FontStyle.Bold : defaultLabelStyle;\n\n            ShowViewModelPropertyMenu(\n                new GUIContent(\"View-model property\", \"Property on the view-model to bind to.\"),\n                TypeResolver.FindBindableCollectionProperties(targetScript),\n                updatedValue => targetScript.ViewModelPropertyName = updatedValue,\n                targetScript.ViewModelPropertyName,\n                property => true\n            );\n\n            EditorStyles.label.fontStyle = templatesRootPrefabModified ? FontStyle.Bold : defaultLabelStyle;\n\n            UpdateProperty(\n                updatedValue => targetScript.TemplatesRoot = updatedValue,\n                targetScript.TemplatesRoot,\n                (GameObject)EditorGUILayout.ObjectField(\n                    new GUIContent(\"Collection templates\", \"Parent object for all templates to copy and bind to items in the collection.\"),\n                    targetScript.TemplatesRoot,\n                    typeof(GameObject),\n                    true\n                ),\n                \"Set collection templates root\"\n            );\n\n            EditorStyles.label.fontStyle = defaultLabelStyle;\n        }\n\n\n\n\n        private void UpdatePrefabModifiedProperties()\n        {\n            var property = serializedObject.GetIterator();\n\n\n            property.Next(true);\n            do\n            {\n                switch (property.name)\n                {\n                    case \"viewModelPropertyName\":\n                        viewModelPrefabModified = property.prefabOverride;\n                        break;\n\n                    case \"templatesRoot\":\n                        templatesRootPrefabModified = property.prefabOverride;\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n            while (property.Next(false));\n        }\n    }\n}\n\n'Unity-Weld-Examples/Assets/Unity-Weld/UnityWeld/Binding/AbstractMemberBinding.cs'\n:using System;\nusing System.Linq;\nusing UnityEngine;\nusing UnityWeld.Binding.Exceptions;\nusing UnityWeld.Binding.Internal;\n\nnamespace UnityWeld.Binding\n{\n\n\n\n    [HelpURL(\"https:\n    public abstract class AbstractMemberBinding : MonoBehaviour, IMemberBinding\n    {\n\n\n\n\n        public virtual void Init()\n        {\n            Disconnect();\n\n            Connect();\n        }\n\n\n\n\n        private object FindViewModel(string viewModelName)\n        {\n            var trans = transform;\n            while (trans != null)\n            {\n                var components = trans.GetComponents<MonoBehaviour>();\n                var monoBehaviourViewModel = components\n                    .FirstOrDefault(component => component.GetType().ToString() == viewModelName);\n                if (monoBehaviourViewModel != null)\n                {\n                    return monoBehaviourViewModel;\n                }\n\n                var providedViewModel = components\n                    .Select(component => component as IViewModelProvider)\n                    .Where(component => component != null)\n                    .FirstOrDefault(\n                        viewModelBinding => viewModelBinding.GetViewModelTypeName() == viewModelName &&\n#pragma warning disable 252,253\n                        (object)viewModelBinding != this\n#pragma warning restore 252,253\n                    );\n\n                if (providedViewModel != null)\n                {\n                    return providedViewModel.GetViewModel();\n                }\n\n                trans = trans.parent;\n            }\n\n            throw new ViewModelNotFoundException(string.Format(\"Tried to get view model {0} but it could not be found on \"\n                + \"object {1}. Check that a ViewModelBinding for that view model exists further up in \"\n                + \"the scene hierarchy. \", viewModelName, gameObject.name)\n            );\n        }\n\n\n\n\n        protected static IAdapter CreateAdapter(string adapterTypeName)\n        {\n            if (string.IsNullOrEmpty(adapterTypeName))\n            {\n                return null;\n            }\n\n            var adapterType = TypeResolver.FindAdapterType(adapterTypeName);\n            if (adapterType == null)\n            {\n                throw new NoSuchAdapterException(adapterTypeName);\n            }\n\n            if (!typeof(IAdapter).IsAssignableFrom(adapterType))\n            {\n                throw new InvalidAdapterException(string.Format(\"Type '{0}' does not implement IAdapter and cannot be used as an adapter.\", adapterTypeName));\n            }\n\n            return (IAdapter)Activator.CreateInstance(adapterType);\n        }\n\n\n\n\n        protected PropertyEndPoint MakeViewModelEndPoint(string viewModelPropertyName, string adapterTypeName, AdapterOptions adapterOptions)\n        {\n            string propertyName;\n            object viewModel;\n            ParseViewModelEndPointReference(viewModelPropertyName, out propertyName, out viewModel);\n\n            var adapter = CreateAdapter(adapterTypeName);\n\n            return new PropertyEndPoint(viewModel, propertyName, adapter, adapterOptions, \"view-model\", this);\n        }\n\n\n\n\n        protected static void ParseEndPointReference(string endPointReference, out string memberName, out string typeName)\n        {\n            var lastPeriodIndex = endPointReference.LastIndexOf('.');\n            if (lastPeriodIndex == -1)\n            {\n                throw new InvalidEndPointException(\n                    \"No period was found, expected end-point reference in the following format: <type-name>.<member-name>. \" +\n                    \"Provided end-point reference: \" + endPointReference\n                );\n            }\n\n            typeName = endPointReference.Substring(0, lastPeriodIndex);\n            memberName = endPointReference.Substring(lastPeriodIndex + 1);\n\n\n            if (typeName.StartsWith(\"UnityEngine.\"))\n            {\n                typeName = typeName.Substring(typeName.LastIndexOf('.') + 1);\n            }\n            if (typeName.Length == 0 || memberName.Length == 0)\n            {\n                throw new InvalidEndPointException(\n                    \"Bad format for end-point reference, expected the following format: <type-name>.<member-name>. \" +\n                    \"Provided end-point reference: \" + endPointReference\n                );\n            }\n        }\n\n\n\n\n        protected void ParseViewModelEndPointReference(string endPointReference, out string memberName, out object viewModel)\n        {\n            string viewModelName;\n            ParseEndPointReference(endPointReference, out memberName, out viewModelName);\n\n            viewModel = FindViewModel(viewModelName);\n            if (viewModel == null)\n            {\n                throw new ViewModelNotFoundException(\"Failed to find view-model in hierarchy: \" + viewModelName);\n            }\n        }\n\n\n\n\n        protected void ParseViewEndPointReference(string endPointReference, out string memberName, out Component view)\n        {\n            string boundComponentType;\n            ParseEndPointReference(endPointReference, out memberName, out boundComponentType);\n\n            view = GetComponent(boundComponentType);\n            if (view == null)\n            {\n                throw new ComponentNotFoundException(\"Failed to find component on current game object: \" + boundComponentType);\n            }\n        }\n\n\n\n\n        public abstract void Connect();\n\n\n\n\n        public abstract void Disconnect();\n\n        protected void Awake()\n        {\n            Init();\n        }\n\n\n\n\n        public void OnDestroy()\n        {\n            Disconnect();\n        }\n    }\n}\n\n'Unity-Weld-Examples/Assets/Unity-Weld/UnityWeld/Binding/Exceptions/InvalidTypeException.cs'\n:﻿using System;\n\nnamespace UnityWeld.Binding.Exceptions\n{\n\n\n\n    public class InvalidTypeException : Exception\n    {\n        public InvalidTypeException(string message)\n            : base(message)\n        {\n        }\n    }\n}\n",
        "gt": [
            "'Unity-Weld-Examples/Assets/Unity-Weld/UnityWeld/Binding/Exceptions/InvalidTypeException.cs'",
            "'Unity-Weld-Examples/Assets/Unity-Weld/UnityWeld/Binding/AbstractMemberBinding.cs'",
            "'Unity-Weld-Examples/Assets/Unity-Weld/Editor/CollectionBindingEditor.cs'"
        ]
    },
    {
        "files": [
            "'nunit-console/src/NUnitEngine/nunit.engine.tests/Services/TestAgencyTests.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine/Services/TestAgency.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine/Communication/Transports/Remoting/TestAgentRemotingProxy.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine.api/TestSelectionParserException.cs'"
        ],
        "content": "'nunit-console/src/NUnitEngine/nunit.engine.tests/Services/TestAgencyTests.cs'\n:﻿\n\n#if NETFRAMEWORK\nusing NUnit.Engine.Services;\nusing NUnit.Engine.Services.Tests.Fakes;\nusing NUnit.Framework;\n\nnamespace NUnit.Engine.Tests.Services\n{\n    public class TestAgencyTests\n    {\n        private TestAgency _testAgency;\n        private ServiceContext _services;\n\n        [SetUp]\n        public void CreateServiceContext()\n        {\n            _services = new ServiceContext();\n            _services.Add(new FakeRuntimeService());\n            _testAgency = new TestAgency();\n            _services.Add(_testAgency);\n            _services.ServiceManager.StartServices();\n        }\n\n        [TearDown]\n        public void TearDown()\n        {\n            _services.ServiceManager.Dispose();\n        }\n\n        [Test]\n        public void ServiceIsStarted()\n        {\n            Assert.That(_testAgency.Status, Is.EqualTo(ServiceStatus.Started));\n        }\n    }\n}\n#endif\n\n'nunit-console/src/NUnitEngine/nunit.engine/Services/TestAgency.cs'\n:\n\n#if NETFRAMEWORK\nusing System;\nusing System.Threading;\nusing System.Diagnostics;\nusing NUnit.Common;\nusing NUnit.Engine.Internal;\nusing NUnit.Engine.Communication.Transports.Remoting;\nusing NUnit.Engine.Communication.Transports.Tcp;\n\nnamespace NUnit.Engine.Services\n{\n\n\n\n\n\n\n\n\n    public partial class TestAgency : ITestAgency, IService\n    {\n        private static readonly Logger log = InternalTrace.GetLogger(typeof(TestAgency));\n\n        private const int NORMAL_TIMEOUT = 30000;\n        private const int DEBUG_TIMEOUT = NORMAL_TIMEOUT * 10;\n\n        private readonly AgentStore _agentStore = new AgentStore();\n\n        private IRuntimeFrameworkService _runtimeService;\n\n\n        private TestAgencyRemotingTransport _remotingTransport;\n        private TestAgencyTcpTransport _tcpTransport;\n\n        internal virtual string RemotingUrl => _remotingTransport.ServerUrl;\n        internal virtual string TcpEndPoint => _tcpTransport.ServerUrl;\n\n        public TestAgency()\n        {\n            var uri = \"TestAgency-\" + Guid.NewGuid();\n            var port = 0;\n            _remotingTransport = new TestAgencyRemotingTransport(this, uri, port);\n            _tcpTransport = new TestAgencyTcpTransport(this, port);\n        }\n\n        public void Register(ITestAgent agent)\n        {\n            _agentStore.Register(agent);\n        }\n\n        public ITestAgent GetAgent(TestPackage package)\n        {\n\n            string runtimeSetting = package.GetSetting(EnginePackageSettings.TargetRuntimeFramework, \"\");\n            Guard.OperationValid(runtimeSetting.Length > 0, \"LaunchAgentProcess called with no runtime specified\");\n            bool runAsX86 = package.GetSetting(EnginePackageSettings.RunAsX86, false);\n\n\n\n            var targetRuntime = RuntimeFramework.Parse(runtimeSetting);\n            if (!_runtimeService.IsAvailable(targetRuntime.Id, runAsX86))\n            {\n                string msg = $\"The {targetRuntime} framework is not available for X86={runAsX86}.\\r\\nAvailable frameworks:\";\n\n                var service = _runtimeService as RuntimeFrameworkService;\n                var availableRuntimes = runAsX86 ? service.AvailableX86Runtimes : service.AvailableRuntimes;\n                foreach (var runtime in availableRuntimes)\n                    msg += $\" {runtime}\";\n                throw new ArgumentException(msg);\n            }\n\n            var agentId = Guid.NewGuid();\n            var agentProcess = new AgentProcess(this, package, agentId);\n\n            agentProcess.Exited += (sender, e) => OnAgentExit((Process)sender, agentId);\n\n            agentProcess.Start();\n            log.Debug(\"Launched Agent process {0} - see nunit-agent_{0}.log\", agentProcess.Id);\n            log.Debug(\"Command line: \\\"{0}\\\" {1}\", agentProcess.StartInfo.FileName, agentProcess.StartInfo.Arguments);\n\n            _agentStore.AddAgent(agentId, agentProcess);\n\n            log.Debug($\"Waiting for agent {agentId:B} to register\");\n\n            const int pollTime = 200;\n\n\n            bool debug = package.GetSetting(EnginePackageSettings.DebugAgent, false) ||\n                         package.GetSetting(EnginePackageSettings.PauseBeforeRun, false);\n\n            int waitTime = debug ? DEBUG_TIMEOUT : NORMAL_TIMEOUT;\n\n\n\n            while (waitTime > agentProcess.TotalProcessorTime.TotalMilliseconds && !agentProcess.HasExited)\n            {\n                Thread.Sleep(pollTime);\n\n                if (_agentStore.IsReady(agentId, out var agent))\n                {\n                    log.Debug($\"Returning new agent {agentId:B}\");\n\n                    return new TestAgentRemotingProxy(agent, agentId);\n                }\n            }\n\n            return null;\n        }\n\n        internal bool IsAgentProcessActive(Guid agentId, out Process process)\n        {\n            return _agentStore.IsAgentProcessActive(agentId, out process);\n        }\n\n        private void OnAgentExit(Process process, Guid agentId)\n        {\n            _agentStore.MarkTerminated(agentId);\n\n            string errorMsg;\n\n            switch (process.ExitCode)\n            {\n                case AgentExitCodes.OK:\n                    return;\n                case AgentExitCodes.PARENT_PROCESS_TERMINATED:\n                    errorMsg = \"Remote test agent believes agency process has exited.\";\n                    break;\n                case AgentExitCodes.UNEXPECTED_EXCEPTION:\n                    errorMsg = \"Unhandled exception on remote test agent. \" +\n                               \"To debug, try running with the --inprocess flag, or using --trace=debug to output logs.\";\n                    break;\n                case AgentExitCodes.FAILED_TO_START_REMOTE_AGENT:\n                    errorMsg = \"Failed to start remote test agent.\";\n                    break;\n                case AgentExitCodes.DEBUGGER_SECURITY_VIOLATION:\n                    errorMsg = \"Debugger could not be started on remote agent due to System.Security.Permissions.UIPermission not being set.\";\n                    break;\n                case AgentExitCodes.DEBUGGER_NOT_IMPLEMENTED:\n                    errorMsg = \"Debugger could not be started on remote agent as not available on platform.\";\n                    break;\n                case AgentExitCodes.UNABLE_TO_LOCATE_AGENCY:\n                    errorMsg = \"Remote test agent unable to locate agency process.\";\n                    break;\n                case AgentExitCodes.STACK_OVERFLOW_EXCEPTION:\n                    if (Environment.OSVersion.Platform == PlatformID.Win32NT)\n                    {\n                        errorMsg = \"Remote test agent was terminated due to a stack overflow.\";\n                    }\n                    else\n                    {\n                        errorMsg = $\"Remote test agent exited with non-zero exit code {process.ExitCode}\";\n                    }\n                    break;\n                default:\n                    errorMsg = $\"Remote test agent exited with non-zero exit code {process.ExitCode}\";\n                    break;\n            }\n\n            throw new NUnitEngineException(errorMsg);\n        }\n\n        public IServiceLocator ServiceContext { get; set; }\n\n        public ServiceStatus Status { get; private set; }\n\n\n\n        public void StopService()\n        {\n            try\n            {\n                _remotingTransport.Stop();\n                _tcpTransport.Stop();\n            }\n            finally\n            {\n                Status = ServiceStatus.Stopped;\n            }\n        }\n\n        public void StartService()\n        {\n            _runtimeService = ServiceContext.GetService<IRuntimeFrameworkService>();\n            if (_runtimeService == null)\n                Status = ServiceStatus.Error;\n            else\n                try\n                {\n                _remotingTransport.Start();\n                    _tcpTransport.Start();\n                    Status = ServiceStatus.Started;\n            }\n            catch\n            {\n                Status = ServiceStatus.Error;\n                throw;\n            }\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    }\n}\n#endif\n\n'nunit-console/src/NUnitEngine/nunit.engine/Communication/Transports/Remoting/TestAgentRemotingProxy.cs'\n:\n\n#if !NETSTANDARD2_0\nusing System;\nusing NUnit.Engine;\n\nnamespace NUnit.Engine.Communication.Transports.Remoting\n{\n\n\n\n\n    internal class TestAgentRemotingProxy : ITestAgent\n    {\n        private ITestAgent _remoteAgent;\n\n        public TestAgentRemotingProxy(ITestAgent remoteAgent, Guid id)\n        {\n            _remoteAgent = remoteAgent;\n\n            Id = id;\n        }\n\n        public Guid Id { get; private set; }\n\n        public ITestEngineRunner CreateRunner(TestPackage package)\n        {\n            return _remoteAgent.CreateRunner(package);\n        }\n\n        public bool Start()\n        {\n            return _remoteAgent.Start();\n        }\n\n        public void Stop()\n        {\n            _remoteAgent.Stop();\n        }\n    }\n}\n#endif\n\n'nunit-console/src/NUnitEngine/nunit.engine.api/TestSelectionParserException.cs'\n:﻿\n\nusing System;\nusing System.Runtime.Serialization;\n\nnamespace NUnit.Engine\n{\n\n\n\n\n    [Serializable]\n    public class TestSelectionParserException : Exception\n    {\n\n\n\n        public TestSelectionParserException(string message) : base(message) { }\n\n\n\n\n\n\n        public TestSelectionParserException(string message, Exception innerException) : base(message, innerException) { }\n\n\n\n\n        public TestSelectionParserException(SerializationInfo info, StreamingContext context) : base(info, context) { }\n    }\n}\n",
        "gt": [
            "'nunit-console/src/NUnitEngine/nunit.engine.api/TestSelectionParserException.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine/Communication/Transports/Remoting/TestAgentRemotingProxy.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine/Services/TestAgency.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine.tests/Services/TestAgencyTests.cs'"
        ]
    },
    {
        "files": [
            "'Osu-Toy/osu.Game.Rulesets.Catch/Skinning/Legacy/LegacyFruitPiece.cs'",
            "'Osu-Toy/osu.Game.Rulesets.Catch/Skinning/Default/DropletPiece.cs'",
            "'Osu-Toy/osu.Game.Rulesets.Catch.Tests/TestSceneHyperDashColouring.cs'",
            "'Osu-Toy/osu.Game.Rulesets.Catch/Objects/Drawables/DrawableDroplet.cs'"
        ],
        "content": "'Osu-Toy/osu.Game.Rulesets.Catch/Skinning/Legacy/LegacyFruitPiece.cs'\n:\n\n\nusing osu.Framework.Bindables;\nusing osu.Game.Rulesets.Catch.Objects.Drawables;\n\nnamespace osu.Game.Rulesets.Catch.Skinning.Legacy\n{\n    internal class LegacyFruitPiece : LegacyCatchHitObjectPiece\n    {\n        public readonly Bindable<FruitVisualRepresentation> VisualRepresentation = new Bindable<FruitVisualRepresentation>();\n\n        protected override void LoadComplete()\n        {\n            base.LoadComplete();\n\n            var fruitState = (IHasFruitState)ObjectState;\n            VisualRepresentation.BindTo(fruitState.VisualRepresentation);\n\n            VisualRepresentation.BindValueChanged(visual => setTexture(visual.NewValue), true);\n        }\n\n        private void setTexture(FruitVisualRepresentation visualRepresentation)\n        {\n            switch (visualRepresentation)\n            {\n                case FruitVisualRepresentation.Pear:\n                    SetTexture(Skin.GetTexture(\"fruit-pear\"), Skin.GetTexture(\"fruit-pear-overlay\"));\n                    break;\n\n                case FruitVisualRepresentation.Grape:\n                    SetTexture(Skin.GetTexture(\"fruit-grapes\"), Skin.GetTexture(\"fruit-grapes-overlay\"));\n                    break;\n\n                case FruitVisualRepresentation.Pineapple:\n                    SetTexture(Skin.GetTexture(\"fruit-apple\"), Skin.GetTexture(\"fruit-apple-overlay\"));\n                    break;\n\n                case FruitVisualRepresentation.Raspberry:\n                    SetTexture(Skin.GetTexture(\"fruit-orange\"), Skin.GetTexture(\"fruit-orange-overlay\"));\n                    break;\n            }\n        }\n    }\n}\n\n'Osu-Toy/osu.Game.Rulesets.Catch/Skinning/Default/DropletPiece.cs'\n:\n\n\nusing osu.Framework.Graphics;\nusing osu.Game.Rulesets.Catch.Objects;\nusing osuTK;\n\nnamespace osu.Game.Rulesets.Catch.Skinning.Default\n{\n    public class DropletPiece : CatchHitObjectPiece\n    {\n        protected override HyperBorderPiece HyperBorderPiece { get; }\n\n        public DropletPiece()\n        {\n            Size = new Vector2(CatchHitObject.OBJECT_RADIUS / 2);\n\n            InternalChildren = new Drawable[]\n            {\n                new Pulp\n                {\n                    RelativeSizeAxes = Axes.Both,\n                    AccentColour = { BindTarget = AccentColour }\n                },\n                HyperBorderPiece = new HyperDropletBorderPiece()\n            };\n        }\n    }\n}\n\n'Osu-Toy/osu.Game.Rulesets.Catch.Tests/TestSceneHyperDashColouring.cs'\n:\n\n\nusing System.Linq;\nusing NUnit.Framework;\nusing osu.Framework.Allocation;\nusing osu.Framework.Graphics;\nusing osu.Framework.Graphics.Containers;\nusing osu.Framework.Graphics.Sprites;\nusing osu.Framework.Testing;\nusing osu.Game.Beatmaps;\nusing osu.Game.Beatmaps.ControlPoints;\nusing osu.Game.Rulesets.Catch.Objects;\nusing osu.Game.Rulesets.Catch.Objects.Drawables;\nusing osu.Game.Rulesets.Catch.Skinning;\nusing osu.Game.Rulesets.Catch.Skinning.Legacy;\nusing osu.Game.Rulesets.Catch.UI;\nusing osu.Game.Skinning;\nusing osu.Game.Tests.Visual;\nusing osuTK;\nusing osuTK.Graphics;\n\nnamespace osu.Game.Rulesets.Catch.Tests\n{\n    public class TestSceneHyperDashColouring : OsuTestScene\n    {\n        [Resolved]\n        private SkinManager skins { get; set; }\n\n        [Test]\n        public void TestDefaultCatcherColour()\n        {\n            var skin = new TestSkin();\n\n            checkHyperDashCatcherColour(skin, Catcher.DEFAULT_HYPER_DASH_COLOUR);\n        }\n\n        [Test]\n        public void TestCustomCatcherColour()\n        {\n            var skin = new TestSkin\n            {\n                HyperDashColour = Color4.Goldenrod\n            };\n\n            checkHyperDashCatcherColour(skin, skin.HyperDashColour);\n        }\n\n        [Test]\n        public void TestCustomEndGlowColour()\n        {\n            var skin = new TestSkin\n            {\n                HyperDashAfterImageColour = Color4.Lime\n            };\n\n            checkHyperDashCatcherColour(skin, Catcher.DEFAULT_HYPER_DASH_COLOUR, skin.HyperDashAfterImageColour);\n        }\n\n        [Test]\n        public void TestCustomEndGlowColourPriority()\n        {\n            var skin = new TestSkin\n            {\n                HyperDashColour = Color4.Goldenrod,\n                HyperDashAfterImageColour = Color4.Lime\n            };\n\n            checkHyperDashCatcherColour(skin, skin.HyperDashColour, skin.HyperDashAfterImageColour);\n        }\n\n        [Test]\n        public void TestDefaultFruitColour()\n        {\n            var skin = new TestSkin();\n\n            checkHyperDashFruitColour(skin, Catcher.DEFAULT_HYPER_DASH_COLOUR);\n        }\n\n        [Test]\n        public void TestCustomFruitColour()\n        {\n            var skin = new TestSkin\n            {\n                HyperDashFruitColour = Color4.Cyan\n            };\n\n            checkHyperDashFruitColour(skin, skin.HyperDashFruitColour);\n        }\n\n        [Test]\n        public void TestCustomFruitColourPriority()\n        {\n            var skin = new TestSkin\n            {\n                HyperDashColour = Color4.Goldenrod,\n                HyperDashFruitColour = Color4.Cyan\n            };\n\n            checkHyperDashFruitColour(skin, skin.HyperDashFruitColour);\n        }\n\n        [Test]\n        public void TestFruitColourFallback()\n        {\n            var skin = new TestSkin\n            {\n                HyperDashColour = Color4.Goldenrod\n            };\n\n            checkHyperDashFruitColour(skin, skin.HyperDashColour);\n        }\n\n        private void checkHyperDashCatcherColour(ISkin skin, Color4 expectedCatcherColour, Color4? expectedEndGlowColour = null)\n        {\n            CatcherArea catcherArea = null;\n            CatcherTrailDisplay trails = null;\n\n            AddStep(\"create hyper-dashing catcher\", () =>\n            {\n                Child = setupSkinHierarchy(catcherArea = new CatcherArea(new Container<CaughtObject>())\n                {\n                    Anchor = Anchor.Centre,\n                    Origin = Anchor.Centre,\n                    Scale = new Vector2(4f),\n                }, skin);\n            });\n\n            AddStep(\"get trails container\", () =>\n            {\n                trails = catcherArea.OfType<CatcherTrailDisplay>().Single();\n                catcherArea.MovableCatcher.SetHyperDashState(2);\n            });\n\n            AddUntilStep(\"catcher colour is correct\", () => catcherArea.MovableCatcher.Colour == expectedCatcherColour);\n\n            AddAssert(\"catcher trails colours are correct\", () => trails.HyperDashTrailsColour == expectedCatcherColour);\n            AddAssert(\"catcher end-glow colours are correct\", () => trails.EndGlowSpritesColour == (expectedEndGlowColour ?? expectedCatcherColour));\n\n            AddStep(\"finish hyper-dashing\", () =>\n            {\n                catcherArea.MovableCatcher.SetHyperDashState(1);\n                catcherArea.MovableCatcher.FinishTransforms();\n            });\n\n            AddAssert(\"catcher colour returned to white\", () => catcherArea.MovableCatcher.Colour == Color4.White);\n        }\n\n        private void checkHyperDashFruitColour(ISkin skin, Color4 expectedColour)\n        {\n            DrawableFruit drawableFruit = null;\n\n            AddStep(\"create hyper-dash fruit\", () =>\n            {\n                var fruit = new Fruit { HyperDashTarget = new Banana() };\n                fruit.ApplyDefaults(new ControlPointInfo(), new BeatmapDifficulty());\n\n                Child = setupSkinHierarchy(drawableFruit = new DrawableFruit(fruit)\n                {\n                    Anchor = Anchor.Centre,\n                    Origin = Anchor.Centre,\n                    Scale = new Vector2(4f),\n                }, skin);\n            });\n\n            AddAssert(\"hyper-dash colour is correct\", () => checkLegacyFruitHyperDashColour(drawableFruit, expectedColour));\n        }\n\n        private Drawable setupSkinHierarchy(Drawable child, ISkin skin)\n        {\n            var legacySkinProvider = new SkinProvidingContainer(skins.GetSkin(DefaultLegacySkin.Info));\n            var testSkinProvider = new SkinProvidingContainer(skin);\n            var legacySkinTransformer = new SkinProvidingContainer(new CatchLegacySkinTransformer(testSkinProvider));\n\n            return legacySkinProvider\n                .WithChild(testSkinProvider\n                    .WithChild(legacySkinTransformer\n                        .WithChild(child)));\n        }\n\n        private bool checkLegacyFruitHyperDashColour(DrawableFruit fruit, Color4 expectedColour) =>\n            fruit.ChildrenOfType<SkinnableDrawable>().First().Drawable.ChildrenOfType<Sprite>().Any(c => c.Colour == expectedColour);\n\n        private class TestSkin : LegacySkin\n        {\n            public Color4 HyperDashColour\n            {\n                get => Configuration.CustomColours[CatchSkinColour.HyperDash.ToString()];\n                set => Configuration.CustomColours[CatchSkinColour.HyperDash.ToString()] = value;\n            }\n\n            public Color4 HyperDashAfterImageColour\n            {\n                get => Configuration.CustomColours[CatchSkinColour.HyperDashAfterImage.ToString()];\n                set => Configuration.CustomColours[CatchSkinColour.HyperDashAfterImage.ToString()] = value;\n            }\n\n            public Color4 HyperDashFruitColour\n            {\n                get => Configuration.CustomColours[CatchSkinColour.HyperDashFruit.ToString()];\n                set => Configuration.CustomColours[CatchSkinColour.HyperDashFruit.ToString()] = value;\n            }\n\n            public TestSkin()\n                : base(new SkinInfo(), null, null, string.Empty)\n            {\n            }\n        }\n    }\n}\n\n'Osu-Toy/osu.Game.Rulesets.Catch/Objects/Drawables/DrawableDroplet.cs'\n:﻿\n\n\nusing JetBrains.Annotations;\nusing osu.Framework.Allocation;\nusing osu.Framework.Graphics;\nusing osu.Game.Rulesets.Catch.Skinning.Default;\nusing osu.Game.Skinning;\n\nnamespace osu.Game.Rulesets.Catch.Objects.Drawables\n{\n    public class DrawableDroplet : DrawablePalpableCatchHitObject\n    {\n        public DrawableDroplet()\n            : this(null)\n        {\n        }\n\n        public DrawableDroplet([CanBeNull] CatchHitObject h)\n            : base(h)\n        {\n        }\n\n        [BackgroundDependencyLoader]\n        private void load()\n        {\n            ScalingContainer.Child = new SkinnableDrawable(\n                new CatchSkinComponent(CatchSkinComponents.Droplet),\n                _ => new DropletPiece());\n        }\n\n        protected override void UpdateInitialTransforms()\n        {\n            base.UpdateInitialTransforms();\n\n\n            float startRotation = RandomSingle(1) * 20;\n            double duration = HitObject.TimePreempt + 2000;\n\n            ScalingContainer.RotateTo(startRotation).RotateTo(startRotation + 720, duration);\n        }\n    }\n}\n",
        "gt": [
            "'Osu-Toy/osu.Game.Rulesets.Catch/Skinning/Default/DropletPiece.cs'",
            "'Osu-Toy/osu.Game.Rulesets.Catch/Objects/Drawables/DrawableDroplet.cs'",
            "'Osu-Toy/osu.Game.Rulesets.Catch/Skinning/Legacy/LegacyFruitPiece.cs'",
            "'Osu-Toy/osu.Game.Rulesets.Catch.Tests/TestSceneHyperDashColouring.cs'"
        ]
    },
    {
        "files": [
            "'Evil-DICOM/EvilDICOM/EvilDICOM/Network/Helpers/CFind.cs'",
            "'Evil-DICOM/EvilDICOM/EvilDICOM/Network/DICOMSCU.cs'",
            "'Evil-DICOM/EvilDICOM/EvilDICOM/Network/DIMSE/CEchoResponse.cs'"
        ],
        "content": "'Evil-DICOM/EvilDICOM/EvilDICOM/Network/Helpers/CFind.cs'\n:﻿#region\n\nusing EvilDICOM.Core.Element;\nusing EvilDICOM.Network.DIMSE;\nusing EvilDICOM.Network.DIMSE.IOD;\nusing EvilDICOM.Network.Enums;\nusing System;\nusing DF = EvilDICOM.Core.DICOMForge;\nusing System.Linq;\n\n#endregion\n\nnamespace EvilDICOM.Network.Helpers\n{\n    public class CFind\n    {\n        public static CFindRequest CreateStudyQuery(string patientId)\n        {\n            var iod = new CFindPatientIOD();\n            iod.PatientId = patientId;\n            iod.CombineQuery(new CFindStudyIOD());\n            return new CFindRequest(iod, Root.STUDY);\n        }\n\n        public static CFindRequest CreateSeriesQuery(string studyUid)\n        {\n            var iod = new CFindStudyIOD();\n            iod.StudyInstanceUID = studyUid;\n            iod.CombineQuery(new CFindSeriesIOD());\n            return new CFindRequest(iod, Root.STUDY);\n        }\n\n        public static CFindRequest CreateQuery(CFindRequestIOD iodQuery)\n        {\n            if (iodQuery is CFindPatientIOD)\n                return new CFindRequest(iodQuery, Root.PATIENT);\n            else\n                return new CFindRequest(iodQuery, Root.STUDY);\n        }\n\n        public static CFindRequest CreateImageQuery(CFindSeriesIOD ser)\n        {\n            var iod = new CFindSeriesIOD();\n            iod.SeriesInstanceUID = ser.SeriesInstanceUID;\n\n            switch (ser.Modality)\n            {\n                case \"CT\":\n                case \"MR\":\n                case \"PT\":\n                case \"RTIMAGE\":\n                    iod.CombineQuery(new CFindImageIOD());\n                    break;\n                case \"PLAN\":\n                case \"RTPLAN\":\n                    iod.CombineQuery(new CFindPlanIOD());\n                    break;\n                case \"RTDOSE\":\n                    iod.CombineQuery(new CFindDoseIOD());\n                    break;\n                case \"RTSTRUCT\":\n                    iod.CombineQuery(new CFindInstanceIOD());\n                    break;\n                case \"RTRECORD\":\n                    iod.CombineQuery(new CFindTreatmentRecordIOD());\n                    break;\n                case \"REG\":\n                    iod.CombineQuery(new CFindInstanceIOD());\n                    break;\n                default:\n                    break;\n            }\n\n            return new CFindRequest(iod, Root.STUDY);\n        }\n\n        public static CFindRequest CreatePatientQuery(string patientId, string patientName, System.DateTime? dob)\n        {\n            var iod = new CFindPatientIOD();\n            iod.PatientsName = DF.PatientName(patientName);\n            iod.PatientBirthDate = dob;\n            iod.PatientId = patientId;\n            return new CFindRequest(iod, Root.PATIENT);\n        }\n    }\n}\n'Evil-DICOM/EvilDICOM/EvilDICOM/Network/DICOMSCU.cs'\n:﻿#region\n\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Threading;\nusing EvilDICOM.Network.DIMSE;\nusing EvilDICOM.Network.DIMSE.IOD;\nusing EvilDICOM.Network.Enums;\nusing EvilDICOM.Network.Messaging;\nusing EvilDICOM.Network.SCUOps;\nusing EvilDICOM.Core.Enums;\nusing EvilDICOM.Network.Helpers;\nusing System.Linq;\nusing System.Text;\nusing EvilDICOM.Network.Messaging;\nusing static EvilDICOM.Network.Services.AssociationService;\nusing Microsoft.Extensions.Logging;\n\n#endregion\n\nnamespace EvilDICOM.Network\n{\n    public class DICOMSCU : DICOMServiceClass\n    {\n\n        public int IdleTimeout { get; set; } = 60000;\n        public int ConnectionTimeout { get; set; } = 3000;\n\n        public DICOMSCU(Entity ae) : base(ae)\n        {\n#if NETCOREAPP\n\n            System.Text.EncodingProvider provider = System.Text.CodePagesEncodingProvider.Instance;\n            Encoding.RegisterProvider(provider);\n#endif\n        }\n\n\n\n\n\n\n\n        public SendStatus SendMessage(AbstractDIMSERequest dimse, Entity ae)\n        {\n            using (var client = new TcpClient())\n            {\n                var status = new SendStatus();\n                try\n                {\n                    var connectionResult = client.BeginConnect(IPAddress.Parse(ae.IpAddress), ae.Port, null, null);\n                    var completed = connectionResult.AsyncWaitHandle.WaitOne(TimeSpan.FromMilliseconds(ConnectionTimeout));\n\n                    if (completed && !client.Client.Connected)\n                    {\n                        status.DidConnect = false;\n                        return status;\n                    }\n\n\n                    status.DidConnect = true;\n                    var assoc = new Association(this, client) { AeTitle = ae.AeTitle };\n\n                    AssociationRejectedHandler rejectedHandler = (rej, asc) =>\n                    {\n                        status.WasRejected = true;\n                        status.Reason = Enum.GetName(typeof(RejectReason_SCU), rej.Reason);\n                    };\n\n                    this.AssociationService.AssociationRejectionReceived += rejectedHandler;\n                    PDataMessenger.Send(dimse, assoc);\n                    assoc.Listen(TimeSpan.FromMilliseconds(IdleTimeout));\n                    this.AssociationService.AssociationRejectionReceived -= rejectedHandler;\n                    return status;\n                }\n                catch (Exception e)\n                {\n                    Logger.LogError($\"Could not connect to {ae.AeTitle} @{ae.IpAddress}:{ae.Port}\");\n                    Logger.LogError($\"{e.ToString()}\");\n                    return status;\n                }\n            }\n        }\n\n\n\n\n\n\n\n\n        public bool SendMessageForcePort(AbstractDIMSERequest dimse, Entity ae)\n        {\n            var (ipLocalEndPoint, success) =\n                IpHelper.VerifyIPAddress(this.ApplicationEntity.IpAddress, this.ApplicationEntity.Port);\n            if (!success) { return false; }\n\n            using (var client = new TcpClient(ipLocalEndPoint))\n            {\n                try\n                {\n                    var connectionResult = client.BeginConnect(IPAddress.Parse(ae.IpAddress), ae.Port, null, null);\n                    success = connectionResult.AsyncWaitHandle.WaitOne(TimeSpan.FromMilliseconds(ConnectionTimeout));\n                    if (!success)\n                    {\n                        throw new TimeoutException($\"Couldn't connect to {IPAddress.Parse(ae.IpAddress)}:{ae.Port} within {ConnectionTimeout} ms!\");\n                    }\n                    var assoc = new Association(this, client) { AeTitle = ae.AeTitle };\n                    PDataMessenger.Send(dimse, assoc);\n                    assoc.Listen();\n                    return true;\n                }\n                catch (Exception e)\n                {\n                    Logger.LogError($\"Could not connect to {ae.AeTitle} @{ae.IpAddress}:{ae.Port}\");\n                    Logger.LogError($\"{e.ToString()}\");\n                    return false;\n                }\n            }\n        }\n\n        public CFinder GetCFinder(Entity callingEntity)\n        {\n            return new CFinder(this, callingEntity);\n        }\n\n        public CMover GetCMover(Entity callingEntity)\n        {\n            return new CMover(this, callingEntity);\n        }\n\n        public CStorer GetCStorer(Entity callingEnity)\n        {\n            return new CStorer(this, callingEnity);\n        }\n\n        public T GetResponse<T, U>(U request, Entity e, ref ushort msgId) where U : AbstractDIMSERequest where T : AbstractDIMSEResponse\n        {\n            return GetResponses<T, U>(request, e, ref msgId).LastOrDefault();\n        }\n\n        public IEnumerable<T> GetResponses<T, U>(U request, Entity e, ref ushort msgId) where U : AbstractDIMSERequest where T : AbstractDIMSEResponse\n        {\n            System.DateTime lastContact = System.DateTime.Now;\n            int msWait = IdleTimeout;\n\n            var mr = new ManualResetEvent(false);\n            List<T> responses = new List<T>();\n            var cr = new Services.DIMSEService.DIMSEResponseHandler<T>((res, asc) =>\n            {\n                asc.IdleClock.Restart();\n                lastContact = System.DateTime.Now;\n                responses.Add(res);\n                if (res.Status != (ushort)Status.PENDING)\n                    mr.Set();\n                else\n                {\n                    mr.Reset();\n                }\n            });\n\n            DIMSEService.Subscribe(cr);\n\n            bool clientConnected;\n\n            var sendStatus = SendMessage(request, e);\n            if (clientConnected = sendStatus.WasAccepted)\n            {\n\n                mr.WaitOne(msWait);\n            }\n            DIMSEService.Unsubscribe(cr);\n            msgId += 2;\n\n            if (!sendStatus.DidConnect) { throw new Exception($\"Could not connect to remote endpoint {e}\"); }\n            if (sendStatus.WasRejected) { throw new Exception($\"Connected, but association refused by {e} : {sendStatus.Reason}\"); }\n            return responses;\n        }\n\n\n\n\n\n\n\n        public bool Ping(Entity ae, int msTimeout = 0)\n        {\n            msTimeout = (msTimeout == 0) ? IdleTimeout : msTimeout;\n\n            var responseSuccess = false;\n            var ar = new AutoResetEvent(false);\n            DIMSEService.CEchoResponseReceived += (res, asc) =>\n            {\n                responseSuccess = true;\n                ar.Set();\n            };\n            SendMessage(new CEchoRequest(), ae);\n            ar.WaitOne(msTimeout);\n            return responseSuccess;\n        }\n\n\n\n\n\n\n\n\n\n\n        public CGetResponse SendGetImage(Entity daemon, CFindImageIOD iod, ref ushort msgId)\n        {\n            var mr = new ManualResetEvent(false);\n            CGetResponse resp = null;\n            var cr = new Services.DIMSEService.DIMSEResponseHandler<CGetResponse>((res, asc) =>\n            {\n                if (!(res.Status == (ushort)Status.PENDING))\n                    mr.Set();\n                resp = res;\n            });\n\n            iod.QueryLevel = QueryLevel.IMAGE;\n\n            var request = new CGetRequest(iod, Root.STUDY, Core.Enums.Priority.MEDIUM, msgId);\n            DIMSEService.CGetResponseReceived += cr;\n            SendMessage(request, daemon);\n            mr.WaitOne();\n            DIMSEService.CGetResponseReceived -= cr;\n            msgId += 2;\n            return resp;\n        }\n    }\n}\n'Evil-DICOM/EvilDICOM/EvilDICOM/Network/DIMSE/CEchoResponse.cs'\n:﻿#region\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing EvilDICOM.Core;\nusing EvilDICOM.Core.Enums;\nusing EvilDICOM.Core.Interfaces;\nusing EvilDICOM.Core.IO.Writing;\nusing EvilDICOM.Core.Selection;\nusing EvilDICOM.Network.Enums;\nusing C = EvilDICOM.Network.Enums.CommandField;\n\n#endregion\n\nnamespace EvilDICOM.Network.DIMSE\n{\n    public class CEchoResponse : AbstractDIMSEResponse, IIOD\n    {\n\n\n\n\n\n\n        public CEchoResponse(CEchoRequest req, Status status)\n        {\n            AffectedSOPClassUID = req.AffectedSOPClassUID;\n            CommandField = (ushort) C.C_ECHO_RP;\n            MessageIDBeingRespondedTo = req.MessageID;\n            DataSetType = (ushort)CommandDataSetType.EMPTY;\n            Status = (ushort) status;\n            GroupLength = (uint) GroupWriter.WriteGroupBytes(new DICOMObject(Elements.Skip(1).Take(5).ToList()),\n                    new DICOMIOSettings {TransferSyntax = TransferSyntax.IMPLICIT_VR_LITTLE_ENDIAN}, \"0000\")\n                .Length;\n        }\n\n        public CEchoResponse(DICOMObject d)\n        {\n            var sel = new DICOMSelector(d);\n            GroupLength = sel.CommandGroupLength.Data;\n            if (sel.AffectedSOPClassUID != null)\n                AffectedSOPClassUID = sel.AffectedSOPClassUID.Data;\n            ;\n            CommandField = (ushort) C.C_ECHO_RP;\n            MessageIDBeingRespondedTo = sel.MessageIDBeingRespondedTo.Data;\n            DataSetType = sel.CommandDataSetType.Data;\n            Status = sel.Status.Data;\n        }\n\n\n\n\n        public override List<IDICOMElement> Elements\n        {\n            get\n            {\n                return new List<IDICOMElement>\n                {\n                    _groupLength,\n                    _affectedSOPClassUID,\n                    _commandField,\n                    _messageIdBeingRespondedTo,\n                    _dataSetType,\n                    _status\n                };\n            }\n        }\n    }\n}",
        "gt": [
            "'Evil-DICOM/EvilDICOM/EvilDICOM/Network/DIMSE/CEchoResponse.cs'",
            "'Evil-DICOM/EvilDICOM/EvilDICOM/Network/Helpers/CFind.cs'",
            "'Evil-DICOM/EvilDICOM/EvilDICOM/Network/DICOMSCU.cs'"
        ]
    },
    {
        "files": [
            "'Biaui/Biaui/source/Biaui.Controls.Test/Helper/MockAppFixture.cs'",
            "'Biaui/Biaui/source/Biaui.Controls.Test/Driver/MainWindowDriver.cs'",
            "'Biaui/Biaui/source/Biaui.Controls.Test/ControlTests/BiaTextBoxTest.cs'"
        ],
        "content": "'Biaui/Biaui/source/Biaui.Controls.Test/Helper/MockAppFixture.cs'\n:﻿using System;\nusing System.IO;\nusing Biaui.Controls.Test.Driver;\nusing Codeer.Friendly.Windows.Grasp;\nusing Xunit;\n\nnamespace Biaui.Controls.Test.Helper\n{\n    public class MockAppFixture : IDisposable\n    {\n        public WindowControl MainWindow => _appDriver.MainWindow;\n\n        public void Check()\n        {\n\n            foreach (var line in ReadLogLines())\n            {\n                Assert.DoesNotContain(\"[ERROR]\", line);\n                Assert.DoesNotContain(\"[WARN ]\", line);\n            }\n        }\n\n        private string[] ReadLogLines()\n            => File.ReadAllLines(Path.Combine(_configDir.RootPath, \"Logs\", DateTime.Today.ToString(\"yyyyMMdd\") + \".log\"));\n\n        private readonly AppDriver _appDriver;\n        private readonly TempDir _configDir = new TempDir();\n\n        private string AppConfigFilePath\n            => $\"{_configDir.RootPath}/AppConfig.json\";\n\n        public MockAppFixture()\n        {\n            _appDriver = new AppDriver($\"--config {AppConfigFilePath}\", 10 * 60 * 1000);\n        }\n\n        public void Dispose()\n        {\n            _appDriver.MainWindow.Close();\n\n            _appDriver.Dispose();\n            _configDir.Dispose();\n        }\n    }\n}\n'Biaui/Biaui/source/Biaui.Controls.Test/Driver/MainWindowDriver.cs'\n:﻿using Codeer.Friendly.Windows.Grasp;\n\nnamespace Biaui.Controls.Test.Driver\n{\n    internal class MainWindowDriver\n    {\n        public WindowControl Window { get; }\n\n        public MainWindowDriver(dynamic window)\n        {\n            Window = new WindowControl(window);\n        }\n    }\n}\n'Biaui/Biaui/source/Biaui.Controls.Test/ControlTests/BiaTextBoxTest.cs'\n:﻿using System;\nusing System.Threading;\nusing System.Windows.Forms;\nusing Biaui.Controls.Test.Helper;\nusing Codeer.Friendly;\nusing Codeer.Friendly.Dynamic;\nusing Codeer.Friendly.Windows.KeyMouse;\nusing RM.Friendly.WPFStandardControls;\nusing Xunit;\n\nnamespace Biaui.Controls.Test.ControlTests\n{\n    [Collection(\"GUI\")]\n    public class BiaTextBoxTest : IClassFixture<MockAppFixture>, IDisposable\n    {\n        private readonly MockAppFixture _mockApp;\n\n        public BiaTextBoxTest(MockAppFixture mockApp)\n        {\n            _mockApp = mockApp;\n\n            var tab = new WPFTabControl(_mockApp.MainWindow.LogicalTree().ByType<System.Windows.Controls.TabControl>().Single());\n            tab.EmulateChangeSelectedIndex(6);\n        }\n\n        public void Dispose()\n        {\n            _mockApp.Check();\n        }\n\n        private WPFBiaTextBox FindControl(string name)\n        {\n            var ctrl = new WPFBiaTextBox(_mockApp.MainWindow.LogicalTree().ByBinding(name).Single());\n\n\n            ctrl.MouseUp(MouseButtonType.Left, 0, 0);\n\n            return ctrl;\n        }\n\n        [Fact]\n        public void Text()\n        {\n            var vm = _mockApp.MainWindow.Dynamic().DataContext;\n\n            var ca = FindControl(\"BiaTextBoxViewModel.TextA\");\n            var cb = FindControl(\"BiaTextBoxViewModel.TextB\");\n            var cc = FindControl(\"BiaTextBoxViewModel.TextC\");\n\n            ca.Text = \"\";\n            cb.Text = \"\";\n            cc.Text = \"\";\n\n            {\n                ca.Text = \"X\";\n                Assert.Equal(\"X\", ca.Text);\n                Assert.Equal(\"X\", (string) vm.BiaTextBoxViewModel.TextA);\n\n                vm.BiaTextBoxViewModel.TextA = \"0\";\n                Assert.Equal(\"0\", ca.Text);\n                Assert.Equal(\"0\", (string) vm.BiaTextBoxViewModel.TextA);\n            }\n\n\n            {\n                cb.Text = \"X\";\n                Assert.Equal(\"X\", cb.Text);\n                Assert.Equal(\"X\", (string) vm.BiaTextBoxViewModel.TextB);\n\n                vm.BiaTextBoxViewModel.TextB = \"0\";\n                Assert.Equal(\"0\", cb.Text);\n                Assert.Equal(\"0\", (string) vm.BiaTextBoxViewModel.TextB);\n            }\n\n\n            {\n                cc.Text = \"X\";\n                Assert.Equal(\"X\", cc.Text);\n                Assert.Equal(\"X\", (string) vm.BiaTextBoxViewModel.TextC);\n\n                vm.BiaTextBoxViewModel.TextC = \"0\";\n                Assert.Equal(\"0\", cc.Text);\n                Assert.Equal(\"0\", (string) vm.BiaTextBoxViewModel.TextC);\n            }\n        }\n\n        [Fact]\n        public void KeyInput()\n        {\n            var vm = _mockApp.MainWindow.Dynamic().DataContext;\n\n            var ca = FindControl(\"BiaTextBoxViewModel.TextA\");\n            var cb = FindControl(\"BiaTextBoxViewModel.TextB\");\n            var cc = FindControl(\"BiaTextBoxViewModel.TextC\");\n\n            ca.Text = \"\";\n            cb.Text = \"\";\n            cc.Text = \"\";\n\n            {\n                var x = ca.Size.Width / 2;\n                var y = ca.Size.Height / 2;\n\n                ca.Click(MouseButtonType.Left, x, y);\n                Thread.Sleep(50);\n                SendKeys.SendWait(\"123{ENTER}\");\n                Thread.Sleep(50);\n\n                Assert.Equal(\"123\", ca.Text);\n                Assert.Equal(\"123\", (string) vm.BiaTextBoxViewModel.TextA);\n            }\n\n\n            {\n                var x = cb.Size.Width / 2;\n                var y = cb.Size.Height / 2;\n\n                cb.Click(MouseButtonType.Left, x, y);\n                Thread.Sleep(50);\n                SendKeys.SendWait(\"123{ENTER}\");\n                Thread.Sleep(50);\n\n                Assert.Equal(\"\", cb.Text);\n                Assert.Equal(\"\", (string) vm.BiaTextBoxViewModel.TextB);\n            }\n\n\n            {\n                var x = cc.Size.Width / 2;\n                var y = cc.Size.Height / 2;\n\n                cc.Click(MouseButtonType.Left, x, y);\n                Thread.Sleep(50);\n                SendKeys.SendWait(\"123{ENTER}\");\n                Thread.Sleep(50);\n\n                Assert.Equal(\"\", cc.Text);\n                Assert.Equal(\"\", (string) vm.BiaTextBoxViewModel.TextC);\n            }\n        }\n\n        [WpfFact]\n        public void ClipboardCopy()\n        {\n            var ca = FindControl(\"BiaTextBoxViewModel.TextA\");\n            var cc = FindControl(\"BiaTextBoxViewModel.TextC\");\n\n            {\n                ca.Text = \"ABC\";\n\n                var x = ca.Size.Width / 2;\n                var y = ca.Size.Height / 2;\n\n                SetClipboard(\"123\");\n\n                ca.Click(MouseButtonType.Left, x, y);\n                Thread.Sleep(50);\n                SendKeys.SendWait(\"^a^c\");\n                Thread.Sleep(50);\n\n                var data = GetClipboard();\n                Assert.Equal(\"ABC\", data);\n            }\n\n\n            {\n                cc.Text = \"ABC\";\n\n                var x = cc.Size.Width / 2;\n                var y = cc.Size.Height / 2;\n\n                SetClipboard(\"123\");\n\n                cc.Click(MouseButtonType.Left, x, y);\n                Thread.Sleep(50);\n                SendKeys.SendWait(\"^a^c\");\n                Thread.Sleep(50);\n\n                var data = GetClipboard();\n                Assert.Equal(\"ABC\", data);\n            }\n        }\n\n        [WpfFact]\n        public void ClipboardPaste()\n        {\n            var vm = _mockApp.MainWindow.Dynamic().DataContext;\n\n            var ca = FindControl(\"BiaTextBoxViewModel.TextA\");\n            var cb = FindControl(\"BiaTextBoxViewModel.TextB\");\n            var cc = FindControl(\"BiaTextBoxViewModel.TextC\");\n\n            ca.Text = \"ABC\";\n            cb.Text = \"ABC\";\n            cc.Text = \"ABC\";\n\n            {\n                var x = ca.Size.Width / 2;\n                var y = ca.Size.Height / 2;\n\n                SetClipboard(\"777\");\n\n                ca.Click(MouseButtonType.Left, x, y);\n                Thread.Sleep(50);\n                SendKeys.SendWait(\"^a^v{ENTER}\");\n                Thread.Sleep(50);\n\n                Assert.Equal(\"777\", ca.Text);\n                Assert.Equal(\"777\", (string) vm.BiaTextBoxViewModel.TextA);\n            }\n\n\n            {\n                var x = cb.Size.Width / 2;\n                var y = cb.Size.Height / 2;\n\n                SetClipboard(\"777\");\n\n                cb.Click(MouseButtonType.Left, x, y);\n                Thread.Sleep(50);\n                SendKeys.SendWait(\"^a^v{ENTER}\");\n                Thread.Sleep(50);\n\n                Assert.Equal(\"ABC\", cb.Text);\n                Assert.Equal(\"ABC\", (string) vm.BiaTextBoxViewModel.TextB);\n            }\n\n\n            {\n                var x = cc.Size.Width / 2;\n                var y = cc.Size.Height / 2;\n\n                SetClipboard(\"777\");\n\n                cc.Click(MouseButtonType.Left, x, y);\n                Thread.Sleep(50);\n                SendKeys.SendWait(\"^a^v{ENTER}\");\n                Thread.Sleep(50);\n\n                Assert.Equal(\"ABC\", cc.Text);\n                Assert.Equal(\"ABC\", (string) vm.BiaTextBoxViewModel.TextC);\n            }\n        }\n\n        private static void SetClipboard(string t)\n        {\n            while (true)\n            {\n                try\n                {\n                    System.Windows.Clipboard.SetText(t);\n                    break;\n                }\n                catch\n                {\n                    Thread.Sleep(500);\n                }\n            }\n        }\n\n        private static string GetClipboard()\n        {\n            while (true)\n            {\n                try\n                {\n                    return System.Windows.Clipboard.GetText();\n                }\n                catch\n                {\n                    Thread.Sleep(500);\n                }\n            }\n        }\n\n    }\n\n    public class WPFBiaTextBox : WPFControlBase<BiaTextBox>\n    {\n        public WPFBiaTextBox(AppVar appVar) : base(appVar)\n        {\n        }\n\n        public string Text\n        {\n            get => Getter<string>(nameof(Text));\n            set => InvokeStatic(EmulateChangeText, value);\n        }\n\n        private static void EmulateChangeText(BiaTextBox c, string value) => c.Text = value;\n    }\n}",
        "gt": [
            "'Biaui/Biaui/source/Biaui.Controls.Test/Driver/MainWindowDriver.cs'",
            "'Biaui/Biaui/source/Biaui.Controls.Test/Helper/MockAppFixture.cs'",
            "'Biaui/Biaui/source/Biaui.Controls.Test/ControlTests/BiaTextBoxTest.cs'"
        ]
    },
    {
        "files": [
            "'Osu-Toy/osu.Game.Tests/Visual/Gameplay/TestSceneReplayRecording.cs'",
            "'Osu-Toy/osu.Game.Tests/Visual/UserInterface/TestSceneToolbarRulesetSelector.cs'",
            "'Osu-Toy/osu.Game/Input/Bindings/DatabasedKeyBinding.cs'",
            "'Osu-Toy/osu.Game/Overlays/Toolbar/ToolbarSettingsButton.cs'",
            "'Osu-Toy/osu.Game.Tests/Visual/Online/TestSceneCurrentlyPlayingDisplay.cs'"
        ],
        "content": "'Osu-Toy/osu.Game.Tests/Visual/Gameplay/TestSceneReplayRecording.cs'\n:\n\n\nusing System.Collections.Generic;\nusing osu.Framework.Allocation;\nusing osu.Framework.Graphics;\nusing osu.Framework.Graphics.Containers;\nusing osu.Framework.Graphics.Shapes;\nusing osu.Framework.Input.Bindings;\nusing osu.Framework.Input.Events;\nusing osu.Framework.Input.StateChanges;\nusing osu.Game.Beatmaps;\nusing osu.Game.Graphics.Sprites;\nusing osu.Game.Replays;\nusing osu.Game.Rulesets;\nusing osu.Game.Rulesets.Replays;\nusing osu.Game.Rulesets.UI;\nusing osu.Game.Scoring;\nusing osu.Game.Screens.Play;\nusing osu.Game.Tests.Visual.UserInterface;\nusing osuTK;\nusing osuTK.Graphics;\n\nnamespace osu.Game.Tests.Visual.Gameplay\n{\n    public class TestSceneReplayRecording : OsuTestScene\n    {\n        private readonly TestRulesetInputManager playbackManager;\n\n        private readonly TestRulesetInputManager recordingManager;\n\n        [Cached]\n        private GameplayBeatmap gameplayBeatmap = new GameplayBeatmap(new Beatmap());\n\n        public TestSceneReplayRecording()\n        {\n            Replay replay = new Replay();\n\n            Add(new GridContainer\n            {\n                RelativeSizeAxes = Axes.Both,\n                Content = new[]\n                {\n                    new Drawable[]\n                    {\n                        recordingManager = new TestRulesetInputManager(new TestSceneModSettings.TestRulesetInfo(), 0, SimultaneousBindingMode.Unique)\n                        {\n                            Recorder = new TestReplayRecorder(new Score { Replay = replay })\n                            {\n                                ScreenSpaceToGamefield = pos => recordingManager.ToLocalSpace(pos)\n                            },\n                            Child = new Container\n                            {\n                                RelativeSizeAxes = Axes.Both,\n                                Children = new Drawable[]\n                                {\n                                    new Box\n                                    {\n                                        Colour = Color4.Brown,\n                                        RelativeSizeAxes = Axes.Both,\n                                    },\n                                    new OsuSpriteText\n                                    {\n                                        Text = \"Recording\",\n                                        Scale = new Vector2(3),\n                                        Anchor = Anchor.Centre,\n                                        Origin = Anchor.Centre,\n                                    },\n                                    new TestConsumer()\n                                }\n                            },\n                        }\n                    },\n                    new Drawable[]\n                    {\n                        playbackManager = new TestRulesetInputManager(new TestSceneModSettings.TestRulesetInfo(), 0, SimultaneousBindingMode.Unique)\n                        {\n                            ReplayInputHandler = new TestFramedReplayInputHandler(replay)\n                            {\n                                GamefieldToScreenSpace = pos => playbackManager.ToScreenSpace(pos),\n                            },\n                            Child = new Container\n                            {\n                                RelativeSizeAxes = Axes.Both,\n                                Children = new Drawable[]\n                                {\n                                    new Box\n                                    {\n                                        Colour = Color4.DarkBlue,\n                                        RelativeSizeAxes = Axes.Both,\n                                    },\n                                    new OsuSpriteText\n                                    {\n                                        Text = \"Playback\",\n                                        Scale = new Vector2(3),\n                                        Anchor = Anchor.Centre,\n                                        Origin = Anchor.Centre,\n                                    },\n                                    new TestConsumer()\n                                }\n                            },\n                        }\n                    }\n                }\n            });\n        }\n\n        protected override void Update()\n        {\n            base.Update();\n\n            playbackManager.ReplayInputHandler.SetFrameFromTime(Time.Current - 500);\n        }\n    }\n\n    public class TestFramedReplayInputHandler : FramedReplayInputHandler<TestReplayFrame>\n    {\n        public TestFramedReplayInputHandler(Replay replay)\n            : base(replay)\n        {\n        }\n\n        public override void CollectPendingInputs(List<IInput> inputs)\n        {\n            inputs.Add(new MousePositionAbsoluteInput { Position = GamefieldToScreenSpace(CurrentFrame?.Position ?? Vector2.Zero) });\n            inputs.Add(new ReplayState<TestAction> { PressedActions = CurrentFrame?.Actions ?? new List<TestAction>() });\n        }\n    }\n\n    public class TestConsumer : CompositeDrawable, IKeyBindingHandler<TestAction>\n    {\n        public override bool ReceivePositionalInputAt(Vector2 screenSpacePos) => Parent.ReceivePositionalInputAt(screenSpacePos);\n\n        private readonly Box box;\n\n        public TestConsumer()\n        {\n            Size = new Vector2(30);\n\n            Origin = Anchor.Centre;\n\n            InternalChildren = new Drawable[]\n            {\n                box = new Box\n                {\n                    Colour = Color4.Black,\n                    RelativeSizeAxes = Axes.Both,\n                },\n            };\n        }\n\n        protected override bool OnMouseMove(MouseMoveEvent e)\n        {\n            Position = e.MousePosition;\n            return base.OnMouseMove(e);\n        }\n\n        public bool OnPressed(TestAction action)\n        {\n            box.Colour = Color4.White;\n            return true;\n        }\n\n        public void OnReleased(TestAction action)\n        {\n            box.Colour = Color4.Black;\n        }\n    }\n\n    public class TestRulesetInputManager : RulesetInputManager<TestAction>\n    {\n        public TestRulesetInputManager(RulesetInfo ruleset, int variant, SimultaneousBindingMode unique)\n            : base(ruleset, variant, unique)\n        {\n        }\n\n        protected override KeyBindingContainer<TestAction> CreateKeyBindingContainer(RulesetInfo ruleset, int variant, SimultaneousBindingMode unique)\n            => new TestKeyBindingContainer();\n\n        internal class TestKeyBindingContainer : KeyBindingContainer<TestAction>\n        {\n            public override IEnumerable<KeyBinding> DefaultKeyBindings => new[]\n            {\n                new KeyBinding(InputKey.MouseLeft, TestAction.Down),\n            };\n        }\n    }\n\n    public class TestReplayFrame : ReplayFrame\n    {\n        public Vector2 Position;\n\n        public List<TestAction> Actions = new List<TestAction>();\n\n        public TestReplayFrame(double time, Vector2 position, params TestAction[] actions)\n            : base(time)\n        {\n            Position = position;\n            Actions.AddRange(actions);\n        }\n    }\n\n    public enum TestAction\n    {\n        Down,\n    }\n\n    internal class TestReplayRecorder : ReplayRecorder<TestAction>\n    {\n        public TestReplayRecorder(Score target)\n            : base(target)\n        {\n        }\n\n        protected override ReplayFrame HandleFrame(Vector2 mousePosition, List<TestAction> actions, ReplayFrame previousFrame) =>\n            new TestReplayFrame(Time.Current, mousePosition, actions.ToArray());\n    }\n}\n\n'Osu-Toy/osu.Game.Tests/Visual/UserInterface/TestSceneToolbarRulesetSelector.cs'\n:﻿\n\n\nusing osu.Framework.Graphics.Containers;\nusing osu.Game.Overlays.Toolbar;\nusing osu.Framework.Graphics;\nusing System.Linq;\nusing NUnit.Framework;\nusing osu.Framework.Allocation;\nusing osu.Framework.Utils;\nusing osu.Game.Rulesets;\n\nnamespace osu.Game.Tests.Visual.UserInterface\n{\n    public class TestSceneToolbarRulesetSelector : OsuTestScene\n    {\n        [Resolved]\n        private RulesetStore rulesets { get; set; }\n\n        [Test]\n        public void TestDisplay()\n        {\n            ToolbarRulesetSelector selector = null;\n\n            AddStep(\"create selector\", () =>\n            {\n                Child = new Container\n                {\n                    Anchor = Anchor.Centre,\n                    Origin = Anchor.Centre,\n                    AutoSizeAxes = Axes.X,\n                    Height = Toolbar.HEIGHT,\n                    Child = selector = new ToolbarRulesetSelector()\n                };\n            });\n\n            AddStep(\"Select random\", () =>\n            {\n                selector.Current.Value = selector.Items.ElementAt(RNG.Next(selector.Items.Count));\n            });\n            AddStep(\"Toggle disabled state\", () => selector.Current.Disabled = !selector.Current.Disabled);\n        }\n\n        [Test]\n        public void TestNonFirstRulesetInitialState()\n        {\n            TestSelector selector = null;\n\n            AddStep(\"create selector\", () =>\n            {\n                Child = new Container\n                {\n                    Anchor = Anchor.Centre,\n                    Origin = Anchor.Centre,\n                    AutoSizeAxes = Axes.X,\n                    Height = Toolbar.HEIGHT,\n                    Child = selector = new TestSelector()\n                };\n\n                selector.Current.Value = rulesets.GetRuleset(2);\n            });\n\n            AddAssert(\"mode line has moved\", () => selector.ModeButtonLine.DrawPosition.X > 0);\n        }\n\n        private class TestSelector : ToolbarRulesetSelector\n        {\n            public new Drawable ModeButtonLine => base.ModeButtonLine;\n        }\n    }\n}\n\n'Osu-Toy/osu.Game/Input/Bindings/DatabasedKeyBinding.cs'\n:\n\n\nusing System.ComponentModel.DataAnnotations.Schema;\nusing osu.Framework.Input.Bindings;\nusing osu.Game.Database;\n\nnamespace osu.Game.Input.Bindings\n{\n    [Table(\"KeyBinding\")]\n    public class DatabasedKeyBinding : KeyBinding, IHasPrimaryKey\n    {\n        public int ID { get; set; }\n\n        public int? RulesetID { get; set; }\n\n        public int? Variant { get; set; }\n\n        [Column(\"Keys\")]\n        public string KeysString\n        {\n            get => KeyCombination.ToString();\n            private set => KeyCombination = value;\n        }\n\n        [Column(\"Action\")]\n        public int IntAction\n        {\n            get => (int)Action;\n            set => Action = value;\n        }\n    }\n}\n\n'Osu-Toy/osu.Game/Overlays/Toolbar/ToolbarSettingsButton.cs'\n:﻿\n\n\nusing osu.Framework.Allocation;\nusing osu.Game.Input.Bindings;\n\nnamespace osu.Game.Overlays.Toolbar\n{\n    public class ToolbarSettingsButton : ToolbarOverlayToggleButton\n    {\n        public ToolbarSettingsButton()\n        {\n            Width *= 1.4f;\n            Hotkey = GlobalAction.ToggleSettings;\n        }\n\n        [BackgroundDependencyLoader(true)]\n        private void load(SettingsOverlay settings)\n        {\n            StateContainer = settings;\n        }\n    }\n}\n\n'Osu-Toy/osu.Game.Tests/Visual/Online/TestSceneCurrentlyPlayingDisplay.cs'\n:\n\n\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing NUnit.Framework;\nusing osu.Framework.Allocation;\nusing osu.Framework.Graphics;\nusing osu.Framework.Graphics.Containers;\nusing osu.Framework.Testing;\nusing osu.Game.Database;\nusing osu.Game.Online.Spectator;\nusing osu.Game.Overlays.Dashboard;\nusing osu.Game.Tests.Visual.Gameplay;\nusing osu.Game.Users;\n\nnamespace osu.Game.Tests.Visual.Online\n{\n    public class TestSceneCurrentlyPlayingDisplay : OsuTestScene\n    {\n        [Cached(typeof(SpectatorStreamingClient))]\n        private TestSceneSpectator.TestSpectatorStreamingClient testSpectatorStreamingClient = new TestSceneSpectator.TestSpectatorStreamingClient();\n\n        private CurrentlyPlayingDisplay currentlyPlaying;\n\n        [Cached(typeof(UserLookupCache))]\n        private UserLookupCache lookupCache = new TestUserLookupCache();\n\n        private Container nestedContainer;\n\n        [SetUpSteps]\n        public void SetUpSteps()\n        {\n            AddStep(\"add streaming client\", () =>\n            {\n                nestedContainer?.Remove(testSpectatorStreamingClient);\n                Remove(lookupCache);\n\n                Children = new Drawable[]\n                {\n                    lookupCache,\n                    nestedContainer = new Container\n                    {\n                        RelativeSizeAxes = Axes.Both,\n                        Children = new Drawable[]\n                        {\n                            testSpectatorStreamingClient,\n                            currentlyPlaying = new CurrentlyPlayingDisplay\n                            {\n                                RelativeSizeAxes = Axes.Both,\n                            }\n                        }\n                    },\n                };\n            });\n\n            AddStep(\"Reset players\", () => testSpectatorStreamingClient.PlayingUsers.Clear());\n        }\n\n        [Test]\n        public void TestBasicDisplay()\n        {\n            AddStep(\"Add playing user\", () => testSpectatorStreamingClient.PlayingUsers.Add(2));\n            AddUntilStep(\"Panel loaded\", () => currentlyPlaying.ChildrenOfType<UserGridPanel>()?.FirstOrDefault()?.User.Id == 2);\n            AddStep(\"Remove playing user\", () => testSpectatorStreamingClient.PlayingUsers.Remove(2));\n            AddUntilStep(\"Panel no longer present\", () => !currentlyPlaying.ChildrenOfType<UserGridPanel>().Any());\n        }\n\n        internal class TestUserLookupCache : UserLookupCache\n        {\n            protected override Task<User> ComputeValueAsync(int lookup, CancellationToken token = default)\n                => Task.FromResult(new User { Username = \"peppy\", Id = 2 });\n        }\n    }\n}\n",
        "gt": [
            "'Osu-Toy/osu.Game/Input/Bindings/DatabasedKeyBinding.cs'",
            "'Osu-Toy/osu.Game/Overlays/Toolbar/ToolbarSettingsButton.cs'",
            "'Osu-Toy/osu.Game.Tests/Visual/UserInterface/TestSceneToolbarRulesetSelector.cs'",
            "'Osu-Toy/osu.Game.Tests/Visual/Gameplay/TestSceneReplayRecording.cs'",
            "'Osu-Toy/osu.Game.Tests/Visual/Online/TestSceneCurrentlyPlayingDisplay.cs'"
        ]
    },
    {
        "files": [
            "'ETCore/ETServer/Server/Hotfix/Module/ActorLocation/ObjectAddRequestHandler.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ConnectionReceivingMessageFailedEvent.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/InsertOneModel.cs'",
            "'ETCore/ETServer/Server/ET.Core/Module/DB/DBQueryJsonTask.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Operations/ListIndexesUsingCommandOperation.cs'"
        ],
        "content": "'ETCore/ETServer/Server/Hotfix/Module/ActorLocation/ObjectAddRequestHandler.cs'\n:﻿using System;\nusing ETModel;\n\nnamespace ETHotfix\n{\n\t[MessageHandler(AppType.Location)]\n\tpublic class ObjectAddRequestHandler : AMRpcHandler<ObjectAddRequest, ObjectAddResponse>\n\t{\n\t\tprotected override async ETTask Run(Session session, ObjectAddRequest request, ObjectAddResponse response, Action reply)\n\t\t{\n\t\t\tGame.Scene.GetComponent<LocationComponent>().Add(request.Key, request.InstanceId);\n\t\t\treply();\n\t\t\tawait ETTask.CompletedTask;\n\t\t}\n\t}\n}\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ConnectionReceivingMessageFailedEvent.cs'\n:\n\nusing System;\nusing MongoDB.Driver.Core.Clusters;\nusing MongoDB.Driver.Core.Connections;\nusing MongoDB.Driver.Core.Servers;\n\nnamespace MongoDB.Driver.Core.Events\n{\n\n\n\n\n    public struct ConnectionReceivingMessageFailedEvent\n    {\n        private readonly ConnectionId _connectionId;\n        private readonly Exception _exception;\n        private readonly long? _operationId;\n        private readonly int _responseTo;\n\n\n\n\n\n\n\n\n        public ConnectionReceivingMessageFailedEvent(ConnectionId connectionId, int responseTo, Exception exception, long? operationId)\n        {\n            _connectionId = connectionId;\n            _responseTo = responseTo;\n            _exception = exception;\n            _operationId = operationId;\n        }\n\n\n\n\n        public ClusterId ClusterId\n        {\n            get { return _connectionId.ServerId.ClusterId; }\n        }\n\n\n\n\n        public ConnectionId ConnectionId\n        {\n            get { return _connectionId; }\n        }\n\n\n\n\n        public Exception Exception\n        {\n            get { return _exception; }\n        }\n\n\n\n\n        public long? OperationId\n        {\n            get { return _operationId; }\n        }\n\n\n\n\n        public int ResponseTo\n        {\n            get { return _responseTo; }\n        }\n\n\n\n\n        public ServerId ServerId\n        {\n            get { return _connectionId.ServerId; }\n        }\n    }\n}\n\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/InsertOneModel.cs'\n:\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing MongoDB.Driver.Core.Operations;\n\nnamespace MongoDB.Driver\n{\n\n\n\n\n#if NET452\n    [Serializable]\n#endif\n    public sealed class InsertOneModel<TDocument> : WriteModel<TDocument>\n    {\n\n        private readonly TDocument _document;\n\n\n\n\n\n\n        public InsertOneModel(TDocument document)\n        {\n            _document = document;\n        }\n\n\n\n\n\n        public TDocument Document\n        {\n            get { return _document; }\n        }\n\n\n\n\n        public override WriteModelType ModelType\n        {\n            get { return WriteModelType.InsertOne; }\n        }\n    }\n}\n\n'ETCore/ETServer/Server/ET.Core/Module/DB/DBQueryJsonTask.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing MongoDB.Driver;\n\nnamespace ETModel\n{\n\t[ObjectSystem]\n\tpublic class DBQueryJsonTaskAwakeSystem : AwakeSystem<DBQueryJsonTask, string, string, TaskCompletionSource<List<ComponentWithId>>>\n\t{\n\t\tpublic override void Awake(DBQueryJsonTask self, string collectionName, string json, TaskCompletionSource<List<ComponentWithId>> tcs)\n\t\t{\n\t\t\tself.CollectionName = collectionName;\n\t\t\tself.Json = json;\n\t\t\tself.Tcs = tcs;\n\t\t}\n\t}\n\n\tpublic sealed class DBQueryJsonTask : DBTask\n\t{\n\t\tpublic string CollectionName { get; set; }\n\n\t\tpublic string Json { get; set; }\n\n\t\tpublic TaskCompletionSource<List<ComponentWithId>> Tcs { get; set; }\n\n\t\tpublic override async Task Run()\n\t\t{\n\t\t\tDBComponent dbComponent = Game.Scene.GetComponent<DBComponent>();\n\t\t\ttry\n\t\t\t{\n\n\t\t\t\tFilterDefinition<ComponentWithId> filterDefinition = new JsonFilterDefinition<ComponentWithId>(this.Json);\n\t\t\t\tIAsyncCursor<ComponentWithId> cursor = await dbComponent.GetCollection(this.CollectionName).FindAsync(filterDefinition);\n\t\t\t\tList<ComponentWithId> components = await cursor.ToListAsync();\n\t\t\t\tthis.Tcs.SetResult(components);\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tthis.Tcs.SetException(new Exception($\"查询数据库异常! {CollectionName} {this.Json}\", e));\n\t\t\t}\n\t\t}\n\t}\n}\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Operations/ListIndexesUsingCommandOperation.cs'\n:﻿\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing MongoDB.Bson;\nusing MongoDB.Bson.Serialization.Serializers;\nusing MongoDB.Driver.Core.Bindings;\nusing MongoDB.Driver.Core.Events;\nusing MongoDB.Driver.Core.Misc;\nusing MongoDB.Driver.Core.WireProtocol.Messages.Encoders;\n\nnamespace MongoDB.Driver.Core.Operations\n{\n\n\n\n    public class ListIndexesUsingCommandOperation : IReadOperation<IAsyncCursor<BsonDocument>>\n    {\n\n        private readonly CollectionNamespace _collectionNamespace;\n        private readonly MessageEncoderSettings _messageEncoderSettings;\n\n\n\n\n\n\n\n        public ListIndexesUsingCommandOperation(\n            CollectionNamespace collectionNamespace,\n            MessageEncoderSettings messageEncoderSettings)\n        {\n            _collectionNamespace = Ensure.IsNotNull(collectionNamespace, nameof(collectionNamespace));\n            _messageEncoderSettings = messageEncoderSettings;\n        }\n\n\n\n\n\n\n\n\n        public CollectionNamespace CollectionNamespace\n        {\n            get { return _collectionNamespace; }\n        }\n\n\n\n\n\n\n\n        public MessageEncoderSettings MessageEncoderSettings\n        {\n            get { return _messageEncoderSettings; }\n        }\n\n\n\n        public IAsyncCursor<BsonDocument> Execute(IReadBinding binding, CancellationToken cancellationToken)\n        {\n            Ensure.IsNotNull(binding, nameof(binding));\n\n            using (EventContext.BeginOperation())\n            using (var channelSource = binding.GetReadChannelSource(cancellationToken))\n            {\n                var operation = CreateOperation();\n                try\n                {\n                    var result = operation.Execute(channelSource, binding.ReadPreference, binding.Session, cancellationToken);\n                    return CreateCursor(channelSource, result, operation.Command);\n                }\n                catch (MongoCommandException ex)\n                {\n                    if (IsCollectionNotFoundException(ex))\n                    {\n                        return new SingleBatchAsyncCursor<BsonDocument>(new List<BsonDocument>());\n                    }\n                    throw;\n                }\n            }\n        }\n\n\n        public async Task<IAsyncCursor<BsonDocument>> ExecuteAsync(IReadBinding binding, CancellationToken cancellationToken)\n        {\n            Ensure.IsNotNull(binding, nameof(binding));\n\n            using (EventContext.BeginOperation())\n            using (var channelSource = await binding.GetReadChannelSourceAsync(cancellationToken).ConfigureAwait(false))\n            {\n                var operation = CreateOperation();\n                try\n                {\n                    var result = await operation.ExecuteAsync(channelSource, binding.ReadPreference, binding.Session, cancellationToken).ConfigureAwait(false);\n                    return CreateCursor(channelSource, result, operation.Command);\n                }\n                catch (MongoCommandException ex)\n                {\n                    if (IsCollectionNotFoundException(ex))\n                    {\n                        return new SingleBatchAsyncCursor<BsonDocument>(new List<BsonDocument>());\n                    }\n                    throw;\n                }\n            }\n        }\n\n\n        private ReadCommandOperation<BsonDocument> CreateOperation()\n        {\n            var databaseNamespace = _collectionNamespace.DatabaseNamespace;\n            var command = new BsonDocument(\"listIndexes\", _collectionNamespace.CollectionName);\n            return new ReadCommandOperation<BsonDocument>(databaseNamespace, command, BsonDocumentSerializer.Instance, _messageEncoderSettings);\n        }\n\n        private IAsyncCursor<BsonDocument> CreateCursor(IChannelSourceHandle channelSource, BsonDocument result, BsonDocument command)\n        {\n            var getMoreChannelSource = new ServerChannelSource(channelSource.Server, channelSource.Session.Fork());\n            var cursorDocument = result[\"cursor\"].AsBsonDocument;\n            var cursor = new AsyncCursor<BsonDocument>(\n                getMoreChannelSource,\n                CollectionNamespace.FromFullName(cursorDocument[\"ns\"].AsString),\n                command,\n                cursorDocument[\"firstBatch\"].AsBsonArray.OfType<BsonDocument>().ToList(),\n                cursorDocument[\"id\"].ToInt64(),\n                0,\n                0,\n                BsonDocumentSerializer.Instance,\n                _messageEncoderSettings);\n\n            return cursor;\n        }\n\n        private bool IsCollectionNotFoundException(MongoCommandException ex)\n        {\n            return ex.Code == 26;\n        }\n    }\n}\n",
        "gt": [
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ConnectionReceivingMessageFailedEvent.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Operations/ListIndexesUsingCommandOperation.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/InsertOneModel.cs'",
            "'ETCore/ETServer/Server/ET.Core/Module/DB/DBQueryJsonTask.cs'",
            "'ETCore/ETServer/Server/Hotfix/Module/ActorLocation/ObjectAddRequestHandler.cs'"
        ]
    },
    {
        "files": [
            "'DotRas/src/DotRas/Internal/Services/Connections/RasConnectionNotificationService.cs'",
            "'DotRas/src/DotRas/Internal/Abstractions/Primitives/IValueWaiter.cs'",
            "'DotRas/src/DotRas.Tests/Internal/Services/Connections/RasGetConnectionStatusServiceTests.cs'"
        ],
        "content": "'DotRas/src/DotRas/Internal/Services/Connections/RasConnectionNotificationService.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing DotRas.Internal.Abstractions.Factories;\nusing DotRas.Internal.Abstractions.Policies;\nusing DotRas.Internal.Abstractions.Primitives;\nusing DotRas.Internal.Abstractions.Services;\nusing DotRas.Internal.Interop;\nusing static DotRas.Internal.Interop.NativeMethods;\nusing static DotRas.Internal.Interop.Ras;\nusing static DotRas.Internal.Interop.WinError;\n\nnamespace DotRas.Internal.Services.Connections\n{\n    internal class RasConnectionNotificationService : DisposableObject, IRasConnectionNotification\n    {\n        private readonly IRasApi32 rasApi32;\n        private readonly IRasConnectionNotificationCallbackHandler callbackHandler;\n        private readonly IExceptionPolicy exceptionPolicy;\n        private readonly IRegisteredCallbackFactory callbackFactory;\n\n        private readonly IDictionary<RASCN, RasConnectionNotificationStateObject> notifications =\n            new Dictionary<RASCN, RasConnectionNotificationStateObject>();\n\n        public RasConnectionNotificationService(IRasApi32 rasApi32, IRasConnectionNotificationCallbackHandler callbackHandler, IExceptionPolicy exceptionPolicy, IRegisteredCallbackFactory callbackFactory)\n        {\n            this.rasApi32 = rasApi32 ?? throw new ArgumentNullException(nameof(rasApi32));\n            this.callbackHandler = callbackHandler ?? throw new ArgumentNullException(nameof(callbackHandler));\n            this.exceptionPolicy = exceptionPolicy ?? throw new ArgumentNullException(nameof(exceptionPolicy));\n            this.callbackFactory = callbackFactory ?? throw new ArgumentNullException(nameof(callbackFactory));\n        }\n\n        public bool IsActive\n        {\n            get\n            {\n                return notifications.Count > 0;\n            }\n        }\n\n        public void Subscribe(RasNotificationContext context)\n        {\n            if (context == null)\n            {\n                throw new ArgumentNullException(nameof(context));\n            }\n\n            GuardMustNotBeDisposed();\n\n            try\n            {\n                SyncRoot.Wait();\n\n                callbackHandler.Initialize();\n\n\n                RegisterCallback(INVALID_HANDLE_VALUE, context.OnConnectedCallback, RASCN.Connection);\n\n                var handle = DetermineHandleForSubscribe(context);\n                RegisterCallback(handle, context.OnDisconnectedCallback, RASCN.Disconnection);\n            }\n            finally\n            {\n                SyncRoot.Release();\n            }\n        }\n\n        public void Reset()\n        {\n            GuardMustNotBeDisposed();\n\n            Unsubscribe();\n        }\n\n        private IntPtr DetermineHandleForSubscribe(RasNotificationContext context)\n        {\n            return context.Connection?.Handle ?? INVALID_HANDLE_VALUE;\n        }\n\n        private void RegisterCallback(IntPtr handle, Action<RasConnectionEventArgs> callback, RASCN changeNotification)\n        {\n            var stateObject = new RasConnectionNotificationStateObject();\n            IRegisteredCallback registeredCallback = null;\n\n            try\n            {\n                registeredCallback = callbackFactory.Create(callbackHandler.OnCallback, stateObject);\n                if (registeredCallback == null)\n                {\n                    throw new InvalidOperationException(\"The factory did not register a callback.\");\n                }\n\n                var ret = rasApi32.RasConnectionNotification(handle, registeredCallback.Handle, changeNotification);\n                if (ret != SUCCESS)\n                {\n                    throw exceptionPolicy.Create(ret);\n                }\n\n                stateObject.RegisteredCallback = registeredCallback;\n                stateObject.Callback = callback;\n                stateObject.NotificationType = changeNotification;\n\n                notifications.Add(changeNotification, stateObject);\n            }\n            catch (Exception)\n            {\n                registeredCallback?.Dispose();\n                throw;\n            }\n        }\n\n        protected override void Dispose(bool disposing)\n        {\n            if (disposing)\n            {\n                Unsubscribe();\n            }\n\n            base.Dispose(disposing);\n        }\n\n        private void Unsubscribe()\n        {\n            try\n            {\n                SyncRoot.Wait();\n\n                foreach (var subscription in notifications)\n                {\n                    subscription.Value.RegisteredCallback.Dispose();\n                }\n\n                notifications.Clear();\n            }\n            finally\n            {\n                SyncRoot.Release();\n            }\n        }\n    }\n}\n'DotRas/src/DotRas/Internal/Abstractions/Primitives/IValueWaiter.cs'\n:﻿using System;\nusing System.Threading;\n\nnamespace DotRas.Internal.Abstractions.Primitives\n{\n    internal interface IValueWaiter<T> : IDisposable\n    {\n        T Value { get; }\n        bool IsSet { get; }\n\n        void Reset();\n        void WaitForValue(CancellationToken cancellationToken);\n        void Set(T value);\n    }\n}\n'DotRas/src/DotRas.Tests/Internal/Services/Connections/RasGetConnectionStatusServiceTests.cs'\n:﻿using System;\nusing DotRas.Internal.Abstractions.Factories;\nusing DotRas.Internal.Abstractions.Policies;\nusing DotRas.Internal.Abstractions.Services;\nusing DotRas.Internal.Interop;\nusing DotRas.Internal.Services.Connections;\nusing DotRas.Tests.Stubs;\nusing Moq;\nusing NUnit.Framework;\nusing static DotRas.Internal.Interop.NativeMethods;\nusing static DotRas.Internal.Interop.WinError;\n\nnamespace DotRas.Tests.Internal.Services.Connections\n{\n    [TestFixture]\n    public class RasGetConnectionStatusServiceTests\n    {\n        private delegate int RasGetConnectStatusCallback(IntPtr handle, ref RASCONNSTATUS rasConnStatus);\n\n        private Mock<IRasApi32> api;\n        private Mock<IStructFactory> structFactory;\n        private Mock<IIPAddressConverter> ipAddressConverter;\n        private Mock<IExceptionPolicy> exceptionPolicy;\n        private Mock<IDeviceTypeFactory> deviceTypeFactory;\n\n        private IntPtr handle;\n        private Mock<IRasConnection> connection;\n\n        private Mock<RasDevice> device;\n\n        [SetUp]\n        public void Init()\n        {\n            api = new Mock<IRasApi32>();\n            structFactory = new Mock<IStructFactory>();\n            ipAddressConverter = new Mock<IIPAddressConverter>();\n            exceptionPolicy = new Mock<IExceptionPolicy>();\n\n            device = new Mock<RasDevice>();\n            deviceTypeFactory = new Mock<IDeviceTypeFactory>();\n            deviceTypeFactory.Setup(o => o.Create(It.IsAny<string>(), It.IsAny<string>())).Returns(device.Object);\n\n            structFactory.Setup(o => o.Create<RASCONNSTATUS>()).Returns(new RASCONNSTATUS());\n\n            handle = new IntPtr(1);\n\n            connection = new Mock<IRasConnection>();\n            connection.Setup(o => o.Handle).Returns(handle);\n        }\n\n        [Test]\n        public void ThrowsAnExceptionWhenApiIsNull()\n        {\n            Assert.Throws<ArgumentNullException>(() => _ = new RasGetConnectStatusService(\n                null,\n                new Mock<IStructFactory>().Object,\n                new Mock<IIPAddressConverter>().Object,\n                new Mock<IExceptionPolicy>().Object,\n                new Mock<IDeviceTypeFactory>().Object));\n        }\n\n        [Test]\n        public void ThrowsAnExceptionWhenStructFactoryIsNull()\n        {\n            Assert.Throws<ArgumentNullException>(() => _ = new RasGetConnectStatusService(\n                new Mock<IRasApi32>().Object,\n                null,\n                new Mock<IIPAddressConverter>().Object,\n                new Mock<IExceptionPolicy>().Object,\n                new Mock<IDeviceTypeFactory>().Object));\n        }\n\n        [Test]\n        public void ThrowsAnExceptionWhenIpAddressConverterIsNull()\n        {\n            Assert.Throws<ArgumentNullException>(() => _ = new RasGetConnectStatusService(\n                new Mock<IRasApi32>().Object,\n                new Mock<IStructFactory>().Object,\n                null,\n                new Mock<IExceptionPolicy>().Object,\n                new Mock<IDeviceTypeFactory>().Object));\n        }\n\n        [Test]\n        public void ThrowsAnExceptionWhenExceptionPolicyIsNull()\n        {\n            Assert.Throws<ArgumentNullException>(() => _ = new RasGetConnectStatusService(\n                new Mock<IRasApi32>().Object,\n                new Mock<IStructFactory>().Object,\n                new Mock<IIPAddressConverter>().Object,\n                null,\n                new Mock<IDeviceTypeFactory>().Object));\n        }\n\n        [Test]\n        public void ThrowsAnExceptionWhenDeviceTypeFactoryIsNull()\n        {\n            Assert.Throws<ArgumentNullException>(() => _ = new RasGetConnectStatusService(\n                new Mock<IRasApi32>().Object,\n                new Mock<IStructFactory>().Object,\n                new Mock<IIPAddressConverter>().Object,\n                new Mock<IExceptionPolicy>().Object,\n                null));\n        }\n\n        [Test]\n        public void ThrowsAnExceptionWhenHandleIsNull()\n        {\n            var target = new RasGetConnectStatusService(api.Object, structFactory.Object, ipAddressConverter.Object, exceptionPolicy.Object, deviceTypeFactory.Object);\n            Assert.Throws<ArgumentNullException>(() => target.GetConnectionStatus(null));\n        }\n\n        [Test]\n        public void ThrowsAnExceptionWhenApiReturnsNonZero()\n        {\n            exceptionPolicy.Setup(o => o.Create(ERROR_INVALID_HANDLE)).Returns(new TestException());\n\n            api.Setup(o => o.RasGetConnectStatus(handle, ref It.Ref<RASCONNSTATUS>.IsAny)).Returns(\n                new RasGetConnectStatusCallback((IntPtr h, ref RASCONNSTATUS rasConnStatus) => ERROR_INVALID_HANDLE));\n\n            var target = new RasGetConnectStatusService(api.Object, structFactory.Object, ipAddressConverter.Object, exceptionPolicy.Object, deviceTypeFactory.Object);\n            Assert.Throws<TestException>(() => target.GetConnectionStatus(connection.Object));\n        }\n\n        [Test]\n        public void ErrorCodeIsNullWhenValueIsZero()\n        {\n            api.Setup(o => o.RasGetConnectStatus(handle, ref It.Ref<RASCONNSTATUS>.IsAny)).Returns(new RasGetConnectStatusCallback(\n                    (IntPtr h, ref RASCONNSTATUS rasConnStatus) =>\n                    {\n                        rasConnStatus.dwError = 0;\n                        return SUCCESS;\n                    }));\n\n            var target = new RasGetConnectStatusService(api.Object, structFactory.Object, ipAddressConverter.Object, exceptionPolicy.Object, deviceTypeFactory.Object);\n            var result = target.GetConnectionStatus(connection.Object);\n\n            Assert.Null(result.ErrorCode);\n        }\n\n        [Test]\n        public void ErrorCodeIsSetWhenValueIsNonZero()\n        {\n            api.Setup(o => o.RasGetConnectStatus(handle, ref It.Ref<RASCONNSTATUS>.IsAny)).Returns(new RasGetConnectStatusCallback(\n                (IntPtr h, ref RASCONNSTATUS rasConnStatus) =>\n                {\n                    rasConnStatus.dwError = 1;\n                    return SUCCESS;\n                }));\n\n            var target = new RasGetConnectStatusService(api.Object, structFactory.Object, ipAddressConverter.Object, exceptionPolicy.Object, deviceTypeFactory.Object);\n            var result = target.GetConnectionStatus(connection.Object);\n\n            Assert.AreEqual(1, result.ErrorCode);\n        }\n    }\n}",
        "gt": [
            "'DotRas/src/DotRas/Internal/Abstractions/Primitives/IValueWaiter.cs'",
            "'DotRas/src/DotRas/Internal/Services/Connections/RasConnectionNotificationService.cs'",
            "'DotRas/src/DotRas.Tests/Internal/Services/Connections/RasGetConnectionStatusServiceTests.cs'"
        ]
    },
    {
        "files": [
            "'Xune/iTunesSearch/iTunesSearch.Library/Models/SongArtistResult.cs'",
            "'Xune/Xune.Desktop/ViewModels/SelectArtworkViewModel.cs'",
            "'Xune/Xune.Backend/Artwork/AlbumArtworkScraper.cs'",
            "'Xune/iTunesSearch/iTunesSearch.Library2/iTunesSearchManager.cs'",
            "'Xune/Xune.Desktop/ViewLocator.cs'"
        ],
        "content": "'Xune/iTunesSearch/iTunesSearch.Library/Models/SongArtistResult.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.Serialization;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace iTunesSearch.Library.Models\n{\n    [DataContract]\n    public class SongArtistResult\n    {\n        [DataMember(Name = \"resultCount\")]\n        public int Count { get; set; }\n\n        [DataMember(Name = \"results\")]\n        public List<SongArtist> Artists { get; set; }\n    }\n}\n\n'Xune/Xune.Desktop/ViewModels/SelectArtworkViewModel.cs'\n:﻿using System;\nusing System.Collections.ObjectModel;\nusing System.IO;\nusing System.Net.Http;\nusing System.Reactive.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Avalonia.Media.Imaging;\nusing Nito.AsyncEx;\nusing ReactiveUI;\nusing Xune.Backend.Artwork;\n\nnamespace Xune.ViewModels\n{\n    public class SelectArtworkViewModel : ViewModelBase\n    {\n        private CancellationTokenSource _cancellationTokenSource;\n        private ObservableCollection<CoverViewModel> _covers;\n        private AlbumViewModel _currentAlbum;\n        private bool _isVisible;\n        private readonly AsyncLock _lock = new AsyncLock();\n        private CoverViewModel _selectedCover;\n\n        public SelectArtworkViewModel()\n        {\n            _cancellationTokenSource = new CancellationTokenSource();\n            Covers = new ObservableCollection<CoverViewModel>();\n\n            this.WhenAnyValue(x => x.SelectedCover)\n                .Where(x => x != null)\n                .Subscribe(async x =>\n                {\n                    _cancellationTokenSource.Cancel();\n                    IsVisible = false;\n\n                    await _currentAlbum.Model.UpdateCoverArtAsync(x.Url);\n\n                    _currentAlbum.Cover = await _currentAlbum.LoadCoverAsync();\n\n                    IsVisible = false;\n                });\n\n            this.WhenAnyValue(x => x.IsVisible)\n                .Where(x => !x)\n                .Subscribe(async _ =>\n                {\n                    _cancellationTokenSource?.Cancel();\n\n                    using (await _lock.LockAsync())\n                    {\n                        Covers.Clear();\n                    }\n                });\n        }\n\n        public ObservableCollection<CoverViewModel> Covers\n        {\n            get => _covers;\n            set => this.RaiseAndSetIfChanged(ref _covers, value);\n        }\n\n        public CoverViewModel SelectedCover\n        {\n            get => _selectedCover;\n            set => this.RaiseAndSetIfChanged(ref _selectedCover, value);\n        }\n\n        public bool IsVisible\n        {\n            get => _isVisible;\n            set => this.RaiseAndSetIfChanged(ref _isVisible, value);\n        }\n\n        public async Task QueryAlbumCoverAsync(AlbumViewModel album)\n        {\n            _cancellationTokenSource?.Cancel();\n\n            using (await _lock.LockAsync())\n            {\n                _cancellationTokenSource = new CancellationTokenSource();\n\n                Covers.Clear();\n\n                IsVisible = true;\n\n                SelectedCover = null;\n                _currentAlbum = album;\n\n                var scraper = new AlbumArtworkScraper();\n\n                var artworkDatas = await scraper.GetPossibleAlbumArt(\"uk\", album.Artist, album.Title);\n\n                if (artworkDatas == null)\n                {\n                    IsVisible = false;\n\n                    return;\n                }\n\n                foreach (var artworkData in artworkDatas)\n                {\n                    if (_cancellationTokenSource.Token.IsCancellationRequested) return;\n\n                    var clientHandler = new HttpClientHandler();\n                    clientHandler.ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) =>\n                    {\n                        return true;\n                    };\n\n                    using (var client = new HttpClient(clientHandler))\n                    {\n                        var data = await client.GetByteArrayAsync(artworkData.Url);\n\n                        using (var ms = new MemoryStream(data))\n                        {\n                            Covers.Add(new CoverViewModel\n                            {\n                                Title = artworkData.Album,\n                                Artist = artworkData.Artist,\n                                Url = artworkData.Url,\n                                Cover = new Bitmap(ms)\n                            });\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n'Xune/Xune.Backend/Artwork/AlbumArtworkScraper.cs'\n:﻿using System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Threading.Tasks;\nusing FuzzyString;\nusing iTunesSearch.Library;\n\nnamespace Xune.Backend.Artwork\n{\n    public class AlbumArtworkScraper\n    {\n        public async Task<List<ArtworkData>> GetPossibleAlbumArt(string country, string artist, string albumName)\n        {\n            var searchManager = new iTunesSearchManager();\n\n            var artists = await searchManager.GetSongArtistsAsync(artist);\n\n            var foundArtist = artists.Artists.FirstOrDefault();\n\n            if (foundArtist is null) return null;\n\n            var albums = await searchManager.GetAlbumsByArtistIdAsync(foundArtist.ArtistId);\n\n            var options = new List<FuzzyStringComparisonOptions>\n            {\n                FuzzyStringComparisonOptions.UseOverlapCoefficient,\n                FuzzyStringComparisonOptions.UseLongestCommonSubsequence,\n                FuzzyStringComparisonOptions.UseLongestCommonSubstring\n            };\n\n            var bestMatches = albums.Albums.Where(x =>\n                x.CollectionName != null && albumName.ApproximatelyEquals(x.CollectionName,\n                    FuzzyStringComparisonTolerance.Strong, options.ToArray())).ToList();\n\n            return bestMatches.Concat(albums.Albums.Where(x => x.CollectionName != null && !bestMatches.Contains(x)))\n                .Concat(albums.Albums.Where(x => x.CollectionName is null))\n                .Where(x => !string.IsNullOrWhiteSpace(x.ArtworkUrl100))\n                .Select(x => new ArtworkData\n                {\n                    Url = x.ArtworkUrl100.Replace(\"100x100bb\", \"600x600bb\"),\n                    Album = x.CollectionName,\n                    Artist = x.ArtistName\n                })\n                .Take(20).ToList();\n        }\n\n        public async Task<byte[]> DownloadArtwork(string country, string artist, string albumName)\n        {\n            var searchManager = new iTunesSearchManager();\n\n            var artists = await searchManager.GetSongArtistsAsync(artist);\n\n            var foundArtist = artists.Artists.FirstOrDefault();\n\n            if (foundArtist is null) return null;\n\n            var albums = await searchManager.GetAlbumsByArtistIdAsync(foundArtist.ArtistId);\n\n            var album = albums.Albums.FirstOrDefault(x =>\n                x.CollectionName != null && x.CollectionName.Contains(albumName) &&\n                !string.IsNullOrWhiteSpace(x.ArtworkUrl100));\n\n            if (album != null)\n            {\n                var artworkUri = album.ArtworkUrl100.Replace(\"100x100bb\", \"1000x1000bb\");\n\n                var clientHandler = new HttpClientHandler\n                {\n                    ServerCertificateCustomValidationCallback = delegate { return true; }\n                };\n\n                using var client = new HttpClient(clientHandler);\n\n                var data = await client.GetByteArrayAsync(artworkUri);\n\n                return data;\n            }\n\n            return null;\n        }\n    }\n}\n'Xune/iTunesSearch/iTunesSearch.Library2/iTunesSearchManager.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Runtime.Serialization.Json;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Web;\nusing iTunesSearch.Library.Models;\n\nnamespace iTunesSearch.Library\n{\n\n\n\n\n    public class iTunesSearchManager\n    {\n\n\n\n        private string _baseSearchUrl = \"https:\n\n\n\n\n        private string _baseLookupUrl = \"https:\n\n        #region Podcast Search\n\n\n\n\n\n\n\n\n\n        public async Task<PodcastListResult> GetPodcasts(string podcast, int resultLimit = 100, string countryCode = \"us\")\n        {\n            var nvc = HttpUtility.ParseQueryString(string.Empty);\n\n            nvc.Add(\"term\", podcast);\n            nvc.Add(\"media\", \"podcast\");\n            nvc.Add(\"attribute\", \"titleTerm\");\n            nvc.Add(\"limit\", resultLimit.ToString());\n            nvc.Add(\"country\", countryCode);\n\n\n            string apiUrl = string.Format(_baseSearchUrl, nvc.ToString());\n\n\n            var result = await MakeAPICall<PodcastListResult>(apiUrl);\n\n            return result;\n        }\n\n\n\n\n\n\n        public async Task<PodcastListResult> GetPodcastById(long podcastId)\n        {\n            var nvc = HttpUtility.ParseQueryString(string.Empty);\n\n\n            nvc.Add(\"id\", podcastId.ToString());\n\n\n            string apiUrl = string.Format(_baseLookupUrl, nvc.ToString());\n\n\n            var result = await MakeAPICall<PodcastListResult>(apiUrl);\n            return result;\n        }\n\n        #endregion\n\n        #region TV shows\n\n\n\n\n\n\n\n\n\n        public async Task<TVEpisodeListResult> GetTVEpisodesForShow(string showName, int resultLimit = 100, string countryCode = \"us\")\n        {\n            var nvc = HttpUtility.ParseQueryString(string.Empty);\n\n\n            nvc.Add(\"term\", showName);\n            nvc.Add(\"media\", \"tvShow\");\n            nvc.Add(\"entity\", \"tvEpisode\");\n            nvc.Add(\"attribute\", \"showTerm\");\n            nvc.Add(\"limit\", resultLimit.ToString());\n            nvc.Add(\"country\", countryCode);\n\n\n            string apiUrl = string.Format(_baseSearchUrl, nvc.ToString());\n\n\n            var result = await MakeAPICall<TVEpisodeListResult>(apiUrl);\n\n            return result;\n        }\n\n\n\n\n\n\n\n\n\n        public async Task<TVSeasonListResult> GetTVSeasonsForShow(string showName, int resultLimit = 10, string countryCode = \"us\")\n        {\n            var nvc = HttpUtility.ParseQueryString(string.Empty);\n\n\n            nvc.Add(\"term\", showName);\n            nvc.Add(\"media\", \"tvShow\");\n            nvc.Add(\"entity\", \"tvSeason\");\n            nvc.Add(\"attribute\", \"showTerm\");\n            nvc.Add(\"limit\", resultLimit.ToString());\n            nvc.Add(\"country\", countryCode);\n\n\n            string apiUrl = string.Format(_baseSearchUrl, nvc.ToString());\n\n\n            var result = await MakeAPICall<TVSeasonListResult>(apiUrl);\n\n            return result;\n        }\n\n\n\n\n\n\n        public async Task<TVSeasonListResult> GetTVSeasonById(long seasonId)\n        {\n            var nvc = HttpUtility.ParseQueryString(string.Empty);\n\n\n            nvc.Add(\"id\", seasonId.ToString());\n\n\n            string apiUrl = string.Format(_baseLookupUrl, nvc.ToString());\n\n\n            var result = await MakeAPICall<TVSeasonListResult>(apiUrl);\n\n            return result;\n        }\n\n        #endregion\n\n        #region API helpers\n\n\n\n\n\n\n\n        async private Task<T> MakeAPICall<T>(string apiCall)\n        {\n            HttpClient client = new HttpClient();\n\n\n            var objString = await client.GetStringAsync(apiCall).ConfigureAwait(false);\n\n\n            return (T)DeserializeObject<T>(objString);\n        }\n\n\n\n\n\n\n\n        private T DeserializeObject<T>(string objString)\n        {\n            using(var stream = new MemoryStream(Encoding.Unicode.GetBytes(objString)))\n            {\n                var serializer = new DataContractJsonSerializer(typeof(T));\n                return (T)serializer.ReadObject(stream);\n            }\n        }\n\n        #endregion\n\n    }\n}\n\n'Xune/Xune.Desktop/ViewLocator.cs'\n:\n\n\nusing System;\nusing System.Collections.Generic;\nusing Avalonia.Controls;\nusing Avalonia.Controls.Templates;\nusing Xune.ViewModels;\n\nnamespace Xune\n{\n    public class ViewLocator : IDataTemplate\n    {\n        private Dictionary<Type, Type> viewMapping = new()\n        {\n\n            { typeof(AlbumViewModel), typeof(Views.AlbumView) },\n            { typeof(CollectionExplorerViewModel), typeof(Views.CollectionExplorerView) },\n            { typeof(TrackStatusViewModel), typeof(Views.TrackStatusView) },\n            { typeof(VolumeControlViewModel), typeof(Views.VolumeControlView) },\n\n\n            { typeof(MainViewModel), typeof(Gui.Views.MainView) },\n            { typeof(SelectArtworkViewModel), typeof(Views.SelectAlbumArtView) },\n        };\n\n        public bool SupportsRecycling => false;\n\n\n        public IControl Build(object data)\n        {\n            var viewModelType = data.GetType();\n            if (viewMapping.TryGetValue(viewModelType, out var viewType))\n            {\n                return (Control)Activator.CreateInstance(viewType);\n            }\n\n            var name = viewModelType.FullName.Replace(\"ViewModel\", \"View\");\n            return new TextBlock { Text = \"Not Found: \" + name };\n        }\n\n        public bool Match(object data)\n        {\n            return data is ViewModelBase;\n        }\n    }\n}",
        "gt": [
            "'Xune/iTunesSearch/iTunesSearch.Library/Models/SongArtistResult.cs'",
            "'Xune/iTunesSearch/iTunesSearch.Library2/iTunesSearchManager.cs'",
            "'Xune/Xune.Backend/Artwork/AlbumArtworkScraper.cs'",
            "'Xune/Xune.Desktop/ViewModels/SelectArtworkViewModel.cs'",
            "'Xune/Xune.Desktop/ViewLocator.cs'"
        ]
    },
    {
        "files": [
            "'ecsrx.roguelike2d/Assets/EcsRx/UnityEditor/MonoBehaviours/RegisterAsEntity.cs'",
            "'ecsrx.roguelike2d/Assets/Plugins/Zenject/Source/Providers/SubContainerCreators/ISubContainerCreator.cs'",
            "'ecsrx.roguelike2d/Assets/EcsRx/UnityEditor/Editor/RegisterAsEntityInspector.cs'"
        ],
        "content": "'ecsrx.roguelike2d/Assets/EcsRx/UnityEditor/MonoBehaviours/RegisterAsEntity.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing EcsRx.Collections;\nusing EcsRx.Collections.Database;\nusing EcsRx.Collections.Entity;\nusing EcsRx.Components;\nusing EcsRx.Entities;\nusing EcsRx.Extensions;\nusing EcsRx.Plugins.Views.Components;\nusing EcsRx.Unity.MonoBehaviours;\nusing EcsRx.UnityEditor.Extensions;\nusing UnityEngine;\nusing UnityEngine.Serialization;\nusing Zenject;\n\nnamespace EcsRx.UnityEditor.MonoBehaviours\n{\n    public class RegisterAsEntity : MonoBehaviour\n    {\n        [Inject]\n        public IEntityDatabase EntityDatabase { get; private set; }\n\n        [FormerlySerializedAs(\"CollectionName\")]\n        [SerializeField]\n        public int CollectionId;\n\n        [SerializeField]\n        public List<string> Components = new List<string>();\n\n        [SerializeField]\n        public List<string> ComponentEditorState = new List<string>();\n\n        [Inject]\n        public void RegisterEntity()\n        {\n            if (!gameObject.activeInHierarchy || !gameObject.activeSelf) { return; }\n\n            IEntityCollection collectionToUse;\n\n            if (CollectionId == 0)\n            { collectionToUse = EntityDatabase.GetCollection(); }\n            else if (EntityDatabase.Collections.All(x => x.Id != CollectionId))\n            { collectionToUse = EntityDatabase.CreateCollection(CollectionId); }\n            else\n            { collectionToUse = EntityDatabase.GetCollection(CollectionId); }\n\n            var createdEntity = collectionToUse.CreateEntity();\n            createdEntity.AddComponents(new ViewComponent { View = gameObject });\n            SetupEntityBinding(createdEntity, collectionToUse);\n            SetupEntityComponents(createdEntity);\n\n            Destroy(this);\n        }\n\n        private void SetupEntityBinding(IEntity entity, IEntityCollection entityCollection)\n        {\n            var entityBinding = gameObject.AddComponent<EntityView>();\n            entityBinding.Entity = entity;\n            entityBinding.EntityCollection = entityCollection;\n        }\n\n        private void SetupEntityComponents(IEntity entity)\n        {\n            var componentsToRegister = new IComponent[Components.Count];\n            for (var i = 0; i < Components.Count; i++)\n            {\n                var typeName = Components[i];\n                var type = Type.GetType(typeName);\n                if (type == null) { throw new Exception(\"Cannot resolve type for [\" + typeName + \"]\"); }\n\n                var component = (IComponent)Activator.CreateInstance(type);\n                var componentProperties = JSON.Parse(ComponentEditorState[i]);\n                component.DeserializeComponent(componentProperties);\n                componentsToRegister[i] = component;\n            }\n            entity.AddComponents(componentsToRegister);\n        }\n\n        public IEntityCollection GetCollection()\n        {\n            return EntityDatabase.GetCollection(CollectionId);\n        }\n    }\n}\n'ecsrx.roguelike2d/Assets/Plugins/Zenject/Source/Providers/SubContainerCreators/ISubContainerCreator.cs'\n:using System.Collections.Generic;\nusing System;\n\nnamespace Zenject\n{\n    public interface ISubContainerCreator\n    {\n        DiContainer CreateSubContainer(List<TypeValuePair> args, InjectContext context, out Action injectAction);\n    }\n}\n\n'ecsrx.roguelike2d/Assets/EcsRx/UnityEditor/Editor/RegisterAsEntityInspector.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing EcsRx.Components;\nusing EcsRx.Plugins.Views.Components;\nusing EcsRx.UnityEditor.Editor.Extensions;\nusing EcsRx.UnityEditor.Editor.UIAspects;\nusing EcsRx.UnityEditor.Extensions;\nusing EcsRx.UnityEditor.MonoBehaviours;\nusing UnityEditor;\nusing UnityEngine;\nusing UEditor = UnityEditor.Editor;\n\nnamespace EcsRx.UnityEditor.Editor\n{\n    [Serializable]\n    [CustomEditor(typeof(RegisterAsEntity))]\n    public partial class RegisterAsEntityInspector : UEditor\n    {\n        private RegisterAsEntity _registerAsEntity;\n\n        private readonly IEnumerable<Type> allComponentTypes = AppDomain.CurrentDomain.GetAssemblies()\n                                .SelectMany(s => s.GetTypes())\n                                .Where(p => typeof(IComponent).IsAssignableFrom(p) && p.IsClass && !typeof(ViewComponent).IsAssignableFrom(p));\n\n        private bool showComponents;\n\n        private void PoolSection()\n        {\n            this.UseVerticalBoxLayout(() =>\n            {\n                _registerAsEntity.CollectionId = this.WithNumberField(\"EntityCollection: \", _registerAsEntity.CollectionId);\n            });\n        }\n\n        private void ComponentListings()\n        {\n            EditorGUILayout.BeginVertical(EditorExtensions.DefaultBoxStyle);\n            this.WithHorizontalLayout(() =>\n            {\n                this.WithLabel(\"Components (\" + _registerAsEntity.Components.Count() + \")\");\n                if (this.WithIconButton(\"▸\")) { showComponents = false; }\n                if (this.WithIconButton(\"▾\")) { showComponents = true; }\n            });\n\n            var componentsToRemove = new List<int>();\n            var componentCount = _registerAsEntity.Components.Count();\n            if (showComponents)\n            {\n                for (var i = 0; i < componentCount; i++)\n                {\n                    var currentIndex = i;\n                    this.UseVerticalBoxLayout(() =>\n                    {\n                        var componentType = _registerAsEntity.Components[currentIndex];\n                        var namePortions = componentType.Split(',')[0].Split('.');\n                        var typeName = namePortions.Last();\n                        var typeNamespace = string.Join(\".\", namePortions.Take(namePortions.Length - 1).ToArray());\n\n                        this.WithVerticalLayout(() =>\n                        {\n                            this.WithHorizontalLayout(() =>\n                            {\n                                if (this.WithIconButton(\"-\"))\n                                { componentsToRemove.Add(currentIndex); }\n\n                                this.WithLabel(typeName);\n                            });\n\n                            EditorGUILayout.LabelField(typeNamespace);\n                            EditorGUILayout.Space();\n                        });\n\n                        var componentTypeName = _registerAsEntity.Components[currentIndex];\n\n\n                        if(_registerAsEntity.ComponentEditorState.Count <= currentIndex)\n                        { Debug.LogError(\"It seems there is missing editor state for [\" + componentTypeName + \"] this can often be fixed by removing and re-adding the RegisterAsEntity MonoBehavior\"); }\n\n                        var editorStateValue = _registerAsEntity.ComponentEditorState[currentIndex];\n                        var component = ComponentUIAspect.RehydrateEditorComponent(componentTypeName, editorStateValue);\n\n                        ComponentUIAspect.ShowComponentProperties(component);\n\n                        var serializedData = component.SerializeComponent();\n                        _registerAsEntity.ComponentEditorState[currentIndex] = serializedData.ToString();\n                    });\n                }\n            }\n\n            EditorGUILayout.EndVertical();\n\n            for (var i = 0; i < componentsToRemove.Count(); i++)\n            {\n                _registerAsEntity.Components.RemoveAt(componentsToRemove[i]);\n                _registerAsEntity.ComponentEditorState.RemoveAt(componentsToRemove[i]);\n            }\n        }\n\n\n        private void ComponentSelectionSection()\n        {\n            this.UseVerticalBoxLayout(() =>\n            {\n                var availableTypes = allComponentTypes\n                    .Where(x => !_registerAsEntity.Components.Contains(x.ToString()))\n                    .ToArray();\n\n                var types = availableTypes.Select(x => string.Format(\"{0} [{1}]\", x.Name, x.Namespace)).ToArray();\n                var index = -1;\n                index = EditorGUILayout.Popup(\"Add Component\", index, types);\n                if (index >= 0)\n                {\n                    var component = availableTypes.ElementAt(index);\n                    var componentName = component.ToString();\n                    _registerAsEntity.Components.Add(componentName);\n                    var json = component.SerializeComponent();\n                    _registerAsEntity.ComponentEditorState.Add(json.ToString());\n                }\n            });\n        }\n\n        private void PersistChanges()\n        {\n            if (GUI.changed)\n            { this.SaveActiveSceneChanges(); }\n        }\n\n        public override void OnInspectorGUI()\n        {\n            _registerAsEntity = (RegisterAsEntity)target;\n\n            PoolSection();\n            EditorGUILayout.Space();\n            ComponentSelectionSection();\n            ComponentListings();\n            PersistChanges();\n\n        }\n    }\n}\n",
        "gt": [
            "'ecsrx.roguelike2d/Assets/Plugins/Zenject/Source/Providers/SubContainerCreators/ISubContainerCreator.cs'",
            "'ecsrx.roguelike2d/Assets/EcsRx/UnityEditor/MonoBehaviours/RegisterAsEntity.cs'",
            "'ecsrx.roguelike2d/Assets/EcsRx/UnityEditor/Editor/RegisterAsEntityInspector.cs'"
        ]
    },
    {
        "files": [
            "'ecsrx.roguelike2d/Assets/Game/Systems/MovementSystem.cs'",
            "'ecsrx.roguelike2d/Assets/EcsRx/Unity/MonoBehaviours/InjectableMonoBehaviour.cs'",
            "'ecsrx.roguelike2d/Assets/Plugins/Zenject/OptionalExtras/TestFramework/ZenjectIntegrationTestFixture.cs'",
            "'ecsrx.roguelike2d/Assets/EcsRx/Unity/Extensions/GameObjectExtensions.cs'"
        ],
        "content": "'ecsrx.roguelike2d/Assets/Game/Systems/MovementSystem.cs'\n:﻿using System;\nusing System.Collections;\nusing SystemsRx.Events;\nusing EcsRx.Entities;\nusing EcsRx.Extensions;\nusing EcsRx.Groups;\nusing EcsRx.Unity.Extensions;\nusing EcsRx.Unity.MonoBehaviours;\nusing EcsRx.Plugins.Views.Components;\nusing EcsRx.Systems;\nusing Game.Components;\nusing Game.Configuration;\nusing Game.Events;\nusing UniRx;\nusing UnityEngine;\n\nnamespace Game.Systems\n{\n    public class MovementSystem : IReactToEntitySystem\n    {\n        private readonly LayerMask _blockingLayer = LayerMask.GetMask(\"BlockingLayer\");\n\n        private readonly GameConfiguration _gameConfiguration;\n        private readonly IEventSystem _eventSystem;\n\n        public IGroup Group { get; } = new Group(typeof(ViewComponent), typeof(MovementComponent));\n\n        public MovementSystem(GameConfiguration gameConfiguration, IEventSystem eventSystem)\n        {\n            _gameConfiguration = gameConfiguration;\n            _eventSystem = eventSystem;\n        }\n\n        public IObservable<IEntity> ReactToEntity(IEntity entity)\n        {\n            var movementComponent = entity.GetComponent<MovementComponent>();\n            return movementComponent.Movement.DistinctUntilChanged().Where(x => x != Vector2.zero).Select(x => entity);\n        }\n\n        public void Process(IEntity entity)\n        {\n            var viewGameObject = entity.GetGameObject();\n            var movementComponent = entity.GetComponent<MovementComponent>();\n\n            Vector2 currentPosition = viewGameObject.transform.position;\n            var destination = currentPosition + movementComponent.Movement.Value;\n            var collidedObject = CheckForCollision(viewGameObject, currentPosition, destination);\n            var canMove = collidedObject == null;\n\n            var isPlayer = entity.HasComponent<PlayerComponent>();\n\n            if (!canMove)\n            {\n                movementComponent.Movement.Value = Vector2.zero;\n\n                var entityView = collidedObject.GetComponent<EntityView>();\n                if(!entityView) { return; }\n\n                if (isPlayer && collidedObject.tag.Contains(\"Wall\"))\n                { WallHit(entityView.Entity, entity); }\n\n                if (isPlayer && collidedObject.tag.Contains(\"Enemy\"))\n                { EnemyHit(entityView.Entity, entity); }\n\n                if(!isPlayer && collidedObject.tag.Contains(\"Player\"))\n                { PlayerHit(entityView.Entity, entity); }\n\n                return;\n            }\n\n            var rigidBody = viewGameObject.GetComponent<Rigidbody2D>();\n            MainThreadDispatcher.StartUpdateMicroCoroutine(SmoothMovement(viewGameObject, rigidBody, destination, movementComponent));\n            _eventSystem.Publish(new EntityMovedEvent(isPlayer));\n\n            if (isPlayer)\n            {\n                var playerComponent = entity.GetComponent<PlayerComponent>();\n                playerComponent.Food.Value--;\n            }\n        }\n\n        private GameObject CheckForCollision(GameObject mover, Vector2 start, Vector2 destination)\n        {\n            var boxCollider = mover.GetComponent<BoxCollider2D>();\n            boxCollider.enabled = false;\n            var hit = Physics2D.Linecast(start, destination, _blockingLayer);\n            boxCollider.enabled = true;\n\n            if(!hit.collider) { return null; }\n            return hit.collider.gameObject;\n        }\n\n        protected IEnumerator SmoothMovement(GameObject mover, Rigidbody2D rigidBody, Vector3 destination, MovementComponent movementComponent)\n        {\n            while (mover != null && Vector3.Distance(mover.transform.position, destination) > 0.1f)\n            {\n                if (movementComponent.StopMovement)\n                {\n                    movementComponent.Movement.Value = Vector2.zero;\n                    movementComponent.StopMovement = false;\n                    yield break;\n                }\n\n                var newPostion = Vector3.MoveTowards(rigidBody.position, destination, _gameConfiguration.MovementSpeed * Time.deltaTime);\n                rigidBody.MovePosition(newPostion);\n                yield return null;\n            }\n\n            if(mover != null)\n            { mover.transform.position = destination; }\n\n            movementComponent.Movement.Value = Vector2.zero;\n        }\n\n        private void WallHit(IEntity wall, IEntity player)\n        {\n            _eventSystem.Publish(new WallHitEvent(wall, player));\n        }\n\n        private void PlayerHit(IEntity player, IEntity enemy)\n        {\n            _eventSystem.Publish(new PlayerHitEvent(player, enemy));\n        }\n\n        private void EnemyHit(IEntity enemy, IEntity player)\n        {\n            _eventSystem.Publish(new EnemyHitEvent(enemy, player));\n        }\n    }\n}\n'ecsrx.roguelike2d/Assets/EcsRx/Unity/MonoBehaviours/InjectableMonoBehaviour.cs'\n:﻿using SystemsRx.Events;\nusing EcsRx.Unity.Dependencies;\nusing UnityEngine;\nusing Zenject;\n\nnamespace EcsRx.Unity.MonoBehaviours\n{\n    public abstract class InjectableMonoBehaviour : MonoBehaviour\n    {\n        [Inject]\n        public IEventSystem EventSystem { get; private set; }\n\n        [Inject]\n        private IUnityInstantiator Instantiator { get; set; }\n\n\n\n\n        [Inject]\n        public abstract void DependenciesResolved();\n\n        protected GameObject InstantiateAndInject(GameObject prefab,\n            Vector3 position = default(Vector3),\n            Quaternion rotation = default(Quaternion))\n        {\n            var createdPrefab = Instantiator.InstantiatePrefab(prefab);\n            createdPrefab.transform.position = position;\n            createdPrefab.transform.rotation = rotation;\n            return createdPrefab;\n        }\n    }\n}\n'ecsrx.roguelike2d/Assets/Plugins/Zenject/OptionalExtras/TestFramework/ZenjectIntegrationTestFixture.cs'\n:using System;\nusing System.Collections;\nusing Zenject.Internal;\nusing ModestTree;\nusing Assert = ModestTree.Assert;\nusing System.Linq;\nusing NUnit.Framework;\nusing NUnit.Framework.Interfaces;\nusing UnityEngine;\n\nnamespace Zenject\n{\n    public abstract class ZenjectIntegrationTestFixture\n    {\n        SceneContext _sceneContext;\n\n        bool _hasEndedInstall;\n        bool _hasStartedInstall;\n\n        protected DiContainer Container\n        {\n            get\n            {\n                Assert.That(_hasStartedInstall,\n                    \"Must call PreInstall() before accessing ZenjectIntegrationTestFixture.Container!\");\n                return _sceneContext.Container;\n            }\n        }\n\n        protected SceneContext SceneContext\n        {\n            get\n            {\n                Assert.That(_hasStartedInstall,\n                    \"Must call PreInstall() before accessing ZenjectIntegrationTestFixture.SceneContext!\");\n                return _sceneContext;\n            }\n        }\n\n        [SetUp]\n        public void Setup()\n        {\n            Assert.That(Application.isPlaying,\n                \"ZenjectIntegrationTestFixture is meant to be used for play mode tests only.  Please ensure your test file '{0}' is outside of the editor folder and try again.\", GetType());\n\n            ZenjectTestUtil.DestroyEverythingExceptTestRunner(true);\n            StaticContext.Clear();\n        }\n\n        protected void SkipInstall()\n        {\n            PreInstall();\n            PostInstall();\n        }\n\n        protected void PreInstall()\n        {\n            Assert.That(!_hasStartedInstall, \"Called PreInstall twice in test '{0}'!\", TestContext.CurrentContext.Test.Name);\n            _hasStartedInstall = true;\n\n            Assert.That(!ProjectContext.HasInstance);\n\n            var shouldValidate = CurrentTestHasAttribute<ValidateOnlyAttribute>();\n            ProjectContext.ValidateOnNextRun = shouldValidate;\n\n            Assert.That(_sceneContext == null);\n\n            _sceneContext = SceneContext.Create();\n            _sceneContext.Install();\n\n            Assert.That(ProjectContext.HasInstance);\n\n            Assert.IsEqual(shouldValidate, ProjectContext.Instance.Container.IsValidating);\n            Assert.IsEqual(shouldValidate, _sceneContext.Container.IsValidating);\n        }\n\n        bool CurrentTestHasAttribute<T>()\n            where T : Attribute\n        {\n            return GetType().GetMethod(TestContext.CurrentContext.Test.MethodName)\n                .GetCustomAttributes(true)\n                .Cast<Attribute>().OfType<T>().Any();\n        }\n\n        protected void PostInstall()\n        {\n            Assert.That(_hasStartedInstall,\n                \"Called PostInstall but did not call PreInstall in test '{0}'!\", TestContext.CurrentContext.Test.Name);\n\n            Assert.That(!_hasEndedInstall, \"Called PostInstall twice in test '{0}'!\", TestContext.CurrentContext.Test.Name);\n\n            _hasEndedInstall = true;\n            _sceneContext.Resolve();\n\n            Container.Inject(this);\n\n            if (!Container.IsValidating)\n            {\n\n\n\n                Container.Resolve<MonoKernel>().Initialize();\n            }\n        }\n\n        protected IEnumerator DestroyEverything()\n        {\n            Assert.That(_hasStartedInstall,\n                \"Called DestroyAll but did not call PreInstall (or SkipInstall) in test '{0}'!\", TestContext.CurrentContext.Test.Name);\n            DestroyEverythingInternal(false);\n\n            yield return null;\n        }\n\n        void DestroyEverythingInternal(bool immediate)\n        {\n            if (_sceneContext != null)\n            {\n\n\n                if (immediate)\n                {\n                    GameObject.DestroyImmediate(_sceneContext.gameObject);\n                }\n                else\n                {\n                    GameObject.Destroy(_sceneContext.gameObject);\n                }\n\n                _sceneContext = null;\n            }\n\n            ZenjectTestUtil.DestroyEverythingExceptTestRunner(immediate);\n            StaticContext.Clear();\n        }\n\n        [TearDown]\n        public void TearDown()\n        {\n            if (TestContext.CurrentContext.Result.Outcome == ResultState.Success)\n            {\n                Assert.That(_hasStartedInstall,\n                    \"PreInstall (or SkipInstall) was not called in test '{0}'!\", TestContext.CurrentContext.Test.Name);\n\n                Assert.That(_hasEndedInstall,\n                    \"PostInstall was not called in test '{0}'!\", TestContext.CurrentContext.Test.Name);\n            }\n\n            DestroyEverythingInternal(true);\n\n            _hasStartedInstall = false;\n            _hasEndedInstall = false;\n        }\n    }\n}\n\n'ecsrx.roguelike2d/Assets/EcsRx/Unity/Extensions/GameObjectExtensions.cs'\n:﻿using System;\nusing EcsRx.Collections;\nusing EcsRx.Collections.Entity;\nusing EcsRx.Entities;\nusing EcsRx.Extensions;\nusing EcsRx.Unity.MonoBehaviours;\nusing EcsRx.Plugins.Views.Components;\nusing UnityEngine;\n\nnamespace EcsRx.Unity.Extensions\n{\n    public static class GameObjectExtensions\n    {\n        public static void LinkEntity(this GameObject gameObject, IEntity entity, IEntityCollection withinPool)\n        {\n            if(gameObject.GetComponent<EntityView>())\n            { throw new Exception(\"GameObject already has an EntityView monobehaviour applied\"); }\n\n            if (!entity.HasComponent<ViewComponent>())\n            { entity.AddComponent<ViewComponent>(); }\n\n            var entityViewMb = gameObject.AddComponent<EntityView>();\n            entityViewMb.Entity = entity;\n            entityViewMb.EntityCollection = withinPool;\n\n            var viewComponent = entity.GetComponent<ViewComponent>();\n            viewComponent.View = gameObject;\n        }\n    }\n}",
        "gt": [
            "'ecsrx.roguelike2d/Assets/Plugins/Zenject/OptionalExtras/TestFramework/ZenjectIntegrationTestFixture.cs'",
            "'ecsrx.roguelike2d/Assets/EcsRx/Unity/MonoBehaviours/InjectableMonoBehaviour.cs'",
            "'ecsrx.roguelike2d/Assets/EcsRx/Unity/Extensions/GameObjectExtensions.cs'",
            "'ecsrx.roguelike2d/Assets/Game/Systems/MovementSystem.cs'"
        ]
    },
    {
        "files": [
            "'sblog.net/sBlog.Net.Akismet/AkistmetComment.cs'",
            "'sblog.net/sBlog.Net.Tests/Controllers/AuthorControllerTests.cs'",
            "'sblog.net/sBlog.Net.Tests/MockFrameworkObjects/MockFactory.cs'",
            "'sblog.net/sBlog.Net.Tests/MockObjects/MockAkismetService.cs'"
        ],
        "content": "'sblog.net/sBlog.Net.Akismet/AkistmetComment.cs'\n:﻿#region Disclaimer/License Info\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\n\nusing sBlog.Net.Akismet.Entities;\nusing sBlog.Net.Domain.Entities;\n\nnamespace sBlog.Net.Akismet\n{\n    public class AkismetComment\n    {\n        public string Blog = null;\n        public string UserIp = null;\n        public string UserAgent = null;\n        public string Referrer = null;\n        public string Permalink = null;\n        public string CommentType = null;\n        public string CommentAuthor = null;\n        public string CommentAuthorEmail = null;\n        public string CommentAuthorUrl = null;\n        public string CommentContent = null;\n\n        public static AkismetComment Create(CommentEntity commentEntity, RequestData requestData)\n        {\n            return new AkismetComment\n            {\n                Blog = requestData.Blog,\n                UserIp = requestData.UserIp,\n                UserAgent = requestData.UserAgent,\n                Referrer = requestData.Referrer,\n                Permalink = null,\n                CommentType = \"blog\",\n                CommentAuthor = commentEntity.CommentUserFullName,\n                CommentAuthorEmail = commentEntity.CommenterEmail,\n                CommentAuthorUrl = commentEntity.CommenterSite,\n                CommentContent = commentEntity.CommentContent\n            };\n        }\n    }\n}\n\n'sblog.net/sBlog.Net.Tests/Controllers/AuthorControllerTests.cs'\n:﻿using System.Linq;\nusing System.Web;\nusing System.Web.Mvc;\nusing System.Web.Routing;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing sBlog.Net.Controllers;\nusing sBlog.Net.Models;\nusing sBlog.Net.Tests.Helpers;\nusing sBlog.Net.Tests.MockFrameworkObjects;\n\nnamespace sBlog.Net.Tests.Controllers\n{\n    [TestClass]\n    public class AuthorControllerTests\n    {\n        [TestInitialize]\n        public void Setup()\n        {\n            HttpContext.Current = MockHelperFactory.FakeHttpContext();\n        }\n\n        [TestMethod]\n        public void Can_Return_Posts_By_Author()\n        {\n            var httpContext = GetHttpContext(true, 1);\n            var postController = GetAuthorControllerInstance(httpContext);\n            postController.ControllerContext = new ControllerContext { HttpContext = httpContext };\n            var result = (ViewResult)postController.AuthorListing(null);\n            var model = result.ViewData.Model as AuthorListingViewModel;\n            Assert.IsNotNull(model);\n            Assert.AreEqual(5, model.Authors.Count);\n            var author = model.Authors.SingleOrDefault(a => a.UserID == 1);\n            Assert.IsNotNull(author);\n            Assert.AreEqual(7, author.Posts.Count);\n            Assert.AreEqual(\"admin\",author.UserName);\n            Assert.AreEqual(\"Admin\", author.UserDisplayName);\n        }\n\n        [TestMethod]\n        public void Can_Return_Posts_By_Author_Page_2()\n        {\n            var httpContext = GetHttpContext(true, 1);\n            var authorController = GetAuthorControllerInstance(httpContext);\n            authorController.ControllerContext = new ControllerContext { HttpContext = httpContext };\n            var result = (ViewResult)authorController.AuthorListing(2);\n            var model = result.ViewData.Model as AuthorListingViewModel;\n            Assert.IsNotNull(model);\n            Assert.AreEqual(1, model.Authors.Count);\n            var author = model.Authors.SingleOrDefault(a => a.UserID == 6);\n            Assert.IsNotNull(author);\n            Assert.AreEqual(0, author.Posts.Count);\n        }\n\n        [TestMethod]\n        public void Can_Return_Posts_For_Author()\n        {\n            var httpContext = GetHttpContext(true, 1);\n            var authorController = GetAuthorControllerInstance(httpContext);\n            authorController.ControllerContext = new ControllerContext { HttpContext = httpContext };\n            var result = (ViewResult)authorController.PostsByAuthor(\"admin\", null);\n            var model = result.ViewData.Model as BlogPostPageViewModel;\n            Assert.IsNotNull(model);\n            var posts = model.Posts;\n            Assert.IsNotNull(posts);\n            Assert.IsTrue(posts.Count == 5);\n            Assert.AreEqual(\"[Private] Post Title 14\", posts.Single(p => p.Post.PostID == 14).Post.PostTitle);\n            Assert.AreEqual(1, posts.First().Post.OwnerUserID);\n        }\n\n        [TestMethod]\n        public void Can_Return_Posts_For_Author_Page_2()\n        {\n            var httpContext = GetHttpContext(true, 1);\n            var authorController = GetAuthorControllerInstance(httpContext);\n            authorController.ControllerContext = new ControllerContext { HttpContext = httpContext };\n            var result = (ViewResult)authorController.PostsByAuthor(\"admin\", 2);\n            var model = result.ViewData.Model as BlogPostPageViewModel;\n            Assert.IsNotNull(model);\n            var posts = model.Posts;\n            Assert.IsNotNull(posts);\n            Assert.IsTrue(posts.Count == 5);\n            Assert.AreEqual(1, posts.First().Post.OwnerUserID);\n        }\n\n        [TestMethod]\n        public void Can_Return_Posts_For_Another_Author()\n        {\n            var httpContext = GetHttpContext(true, 1);\n            var authorController = GetAuthorControllerInstance(httpContext);\n            authorController.ControllerContext = new ControllerContext { HttpContext = httpContext };\n            var result = (ViewResult)authorController.PostsByAuthor(\"karthik\", null);\n            var model = result.ViewData.Model as BlogPostPageViewModel;\n            Assert.IsNotNull(model);\n            var posts = model.Posts;\n            Assert.IsNotNull(posts);\n            Assert.IsTrue(posts.Count == 5);\n            Assert.AreEqual(\"Post Title 20\", posts.Single(p => p.Post.PostID == 20).Post.PostTitle);\n            Assert.AreEqual(2, posts.First().Post.OwnerUserID);\n        }\n\n        [TestMethod]\n        public void Can_Return_Posts_For_Another_Author_Page_2()\n        {\n            var httpContext = GetHttpContext(true, 1);\n            var authorController = GetAuthorControllerInstance(httpContext);\n            authorController.ControllerContext = new ControllerContext { HttpContext = httpContext };\n            var result = (ViewResult)authorController.PostsByAuthor(\"karthik\", 2);\n            var model = result.ViewData.Model as BlogPostPageViewModel;\n            Assert.IsNotNull(model);\n            var posts = model.Posts;\n            Assert.IsNotNull(posts);\n            Assert.IsTrue(posts.Count == 2);\n            Assert.AreEqual(2, posts.First().Post.OwnerUserID);\n        }\n\n\n        private static AuthorController GetAuthorControllerInstance(HttpContextBase httpContext)\n        {\n            var postRepository = MockObjectFactory.CreatePostRepository();\n            var settingsRepository = MockObjectFactory.CreateSettingsRepository();\n            var cacheService = MockObjectFactory.CreateCacheService();\n            var userRepository = MockObjectFactory.CreateUserRepository();\n\n            var authorController = new AuthorController(postRepository, userRepository, cacheService, settingsRepository)\n                {\n                    Url = new UrlHelper(httpContext.Request.RequestContext, RouteTable.Routes)\n                };\n            return authorController;\n        }\n\n        private static HttpContextBase GetHttpContext(bool isAuthenticated, int userId)\n        {\n            var mockContext = MockFactory.GetMockContext(userId, isAuthenticated);\n            return mockContext;\n        }\n    }\n}\n\n'sblog.net/sBlog.Net.Tests/MockFrameworkObjects/MockFactory.cs'\n:﻿using System;\nusing System.Collections.Specialized;\nusing System.Security.Principal;\nusing System.Web;\nusing System.Web.Routing;\nusing Moq;\nusing sBlog.Net.Tests.MockObjects;\n\nnamespace sBlog.Net.Tests.MockFrameworkObjects\n{\n    public static class MockFactory\n    {\n        public static HttpContextBase GetMockContext(int userId, bool isAuthenticated, string url = null)\n        {\n            var context = new Mock<HttpContextBase>();\n\n            context.SetupGet(c => c.Request).Returns(GetMockRequest(context.Object, isAuthenticated, url));\n            context.SetupGet(c => c.Response).Returns(GetMockResponse(null));\n            context.SetupGet(c => c.IsDebuggingEnabled).Returns(true);\n\n            var identity = MockAppFactory.GetMockUserIdentity(userId);\n            IPrincipal principal = new GenericPrincipal(identity, null);\n\n            context.SetupGet(c => c.User).Returns(principal);\n\n            return context.Object;\n        }\n\n        public static HttpRequestBase GetMockRequest(HttpContextBase httpContextBase, bool isAuthenticated,\n                                                       string requestUrl = null)\n        {\n            var reqUrl = requestUrl != null ? requestUrl.Replace(\"~\", \"http:\n            var uri = new Uri(reqUrl);\n            var request = new Mock<HttpRequestBase>();\n            request.SetupGet(p => p.Url).Returns(uri);\n            request.SetupGet(p => p.AppRelativeCurrentExecutionFilePath).Returns(requestUrl);\n            request.SetupGet(p => p.IsAuthenticated).Returns(isAuthenticated);\n            request.SetupGet(p => p.RequestContext).Returns(httpContextBase.GetMockRequestContext());\n            request.SetupGet(p => p.ApplicationPath).Returns(@\"/\");\n            request.SetupGet(p => p.PathInfo).Returns(string.Empty);\n            request.SetupGet(p => p.ServerVariables).Returns(new NameValueCollection());\n            return request.Object;\n        }\n\n        public static RequestContext GetMockRequestContext(this HttpContextBase httpContextBase)\n        {\n            var requestContext = new Mock<RequestContext>();\n            requestContext.SetupProperty(r => r.HttpContext, httpContextBase);\n            requestContext.SetupProperty(r => r.RouteData, new RouteData());\n            return requestContext.Object;\n        }\n\n        public static HttpResponseBase GetMockResponse(string virtualPath)\n        {\n            var response = new Mock<HttpResponseBase>();\n            response.Setup(x => x.ApplyAppPathModifier(virtualPath)).Returns(virtualPath);\n            return response.Object;\n        }\n    }\n}\n'sblog.net/sBlog.Net.Tests/MockObjects/MockAkismetService.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing sBlog.Net.Akismet.Interfaces;\nusing sBlog.Net.Akismet;\n\nnamespace sBlog.Net.Tests.MockObjects\n{\n    public class MockAkismetService : IAkismetService\n    {\n        public MockAkismetService(string apiKey, string blog, string userAgent)\n        {\n\n        }\n\n        public bool VerifyKey()\n        {\n            throw new NotImplementedException();\n        }\n\n        public bool CommentCheck(AkismetComment comment)\n        {\n            var isSpam = false;\n\n            SpamQualifiers.ForEach(spam =>\n            {\n                if (!isSpam && comment.CommentContent.Contains(spam))\n                    isSpam = true;\n            });\n\n            return isSpam;\n        }\n\n        public void SubmitSpam(AkismetComment comment)\n        {\n\n        }\n\n        public void SubmitHam(AkismetComment comment)\n        {\n\n        }\n\n        private static readonly List<string> SpamQualifiers = new List<string> { \"idiot\", \"i love your website :)\" };\n    }\n}\n",
        "gt": [
            "'sblog.net/sBlog.Net.Akismet/AkistmetComment.cs'",
            "'sblog.net/sBlog.Net.Tests/MockObjects/MockAkismetService.cs'",
            "'sblog.net/sBlog.Net.Tests/MockFrameworkObjects/MockFactory.cs'",
            "'sblog.net/sBlog.Net.Tests/Controllers/AuthorControllerTests.cs'"
        ]
    },
    {
        "files": [
            "'Avalonia.PropertyGrid/PropertyModels/Localization/CultureData.cs'",
            "'Avalonia.PropertyGrid/Avalonia.PropertyGrid/Services/LocalizationService.cs'",
            "'Avalonia.PropertyGrid/Samples/Avalonia.PropertyGrid.Samples/Views/TestExtendPropertyGrid.cs'",
            "'Avalonia.PropertyGrid/Samples/Avalonia.PropertyGrid.Samples/App.axaml.cs'",
            "'Avalonia.PropertyGrid/Avalonia.PropertyGrid/Controls/Factories/Builtins/SelectableListCellEditFactory.cs'"
        ],
        "content": "'Avalonia.PropertyGrid/PropertyModels/Localization/CultureData.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Globalization;\n\nnamespace PropertyModels.Localization\n{\n\n\n\n\n\n    public abstract class AbstractCultureData : ICultureData\n    {\n\n\n\n\n        protected Dictionary<string, string>? LocalTexts = null;\n\n\n\n\n\n        public CultureInfo Culture { get; }\n\n\n\n\n\n        public Uri Path { get; }\n\n\n\n\n\n        public bool IsLoaded => LocalTexts != null;\n\n\n\n\n\n        protected AbstractCultureData(Uri uri)\n        {\n            var localPath = uri.LocalPath;\n            Culture = new CultureInfo(System.IO.Path.GetFileNameWithoutExtension(localPath));\n            Path = uri;\n        }\n\n\n\n\n\n\n        public string this[string key]\n        {\n            get\n            {\n                if (LocalTexts != null && LocalTexts.TryGetValue(key, out var text))\n                {\n                    return text;\n                }\n\n                return key;\n            }\n        }\n\n\n\n\n\n        public abstract bool Reload();\n\n\n\n\n\n        public override string ToString()\n        {\n            return Culture.NativeName;\n        }\n\n\n\n\n\n\n\n        public static Dictionary<string, string> ReadJsonStringDictionary(string json)\n        {\n            var dict = new Dictionary<string, string>();\n\n            var configs = json.Split('\\r', '\\n');\n\n            foreach(var line in configs)\n            {\n                var configLine = line.Trim();\n\n                if(!configLine.Contains(':') || configLine.StartsWith('\\\\'))\n                {\n                    continue;\n                }\n\n                var key = PickStringToken(configLine, 0, out var endPos);\n\n                if(key == null)\n                {\n                    continue;\n                }\n\n                var value = PickStringToken(configLine, endPos + 1, out _);\n\n                if(value == null)\n                {\n                    continue;\n                }\n\n                dict.Add(key, value);\n            }\n\n            return dict;\n        }\n\n        private static string? PickStringToken(string line, int startPos, out int endPos)\n        {\n            var begin = -1;\n            var escape = -1;\n            endPos = -1;\n\n            for(var i=startPos; i < line.Length; ++i)\n            {\n                var ch = line[i];\n\n                if(ch == '\"')\n                {\n                    if(escape == i-1 && escape != -1)\n                    {\n                        escape = -1;\n                    }\n                    else if(begin == -1)\n                    {\n                        begin = i;\n                    }\n                    else\n                    {\n                        endPos = i;\n\n                        return line.Substring(begin + 1, endPos - begin - 1);\n                    }\n                }\n                else if(ch == '\\\\')\n                {\n                    escape = i;\n                }\n            }\n\n            return null;\n        }\n    }\n}\n\n'Avalonia.PropertyGrid/Avalonia.PropertyGrid/Services/LocalizationService.cs'\n:﻿using Avalonia.PropertyGrid.Localization;\nusing PropertyModels.Localization;\n\nnamespace Avalonia.PropertyGrid.Services\n{\n\n\n\n    public static class LocalizationService\n    {\n\n\n\n        public static readonly ILocalizationService Default = new AssemblyJsonAssetLocalizationService(typeof(LocalizationService).Assembly);\n\n        static LocalizationService()\n        {\n        }\n    }\n}\n\n'Avalonia.PropertyGrid/Samples/Avalonia.PropertyGrid.Samples/Views/TestExtendPropertyGrid.cs'\n:﻿using Avalonia.Controls;\nusing Avalonia.Controls.Templates;\nusing Avalonia.PropertyGrid.Controls;\nusing Avalonia.PropertyGrid.Controls.Factories;\nusing Avalonia.PropertyGrid.Controls.Factories.Builtins;\nusing PropertyModels.Collections;\nusing PropertyModels.ComponentModel;\nusing Avalonia.PropertyGrid.Samples.Models;\nusing Avalonia.PropertyGrid.Services;\nusing Avalonia.PropertyGrid.Localization;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Avalonia.PropertyGrid.Samples.Views\n{\n    public class TestExtendPropertyGrid : Controls.PropertyGrid\n    {\n        static TestExtendPropertyGrid()\n        {\n            CellEditFactoryService.Default.AddFactory(new Vector3CellEditFactory());\n            CellEditFactoryService.Default.AddFactory(new CountryInfoCellEditFactory());\n            CellEditFactoryService.Default.AddFactory(new ToggleSwitchCellEditFactory());\n        }\n    }\n\n    #region SVector3\n    public class SVector3ViewModel : MiniReactiveObject\n    {\n        public SVector3 _vec;\n\n        public float X\n        {\n            get\n            {\n                return _vec.x;\n            }\n            set\n            {\n                this.RaiseAndSetIfChanged(ref _vec.x, value);\n            }\n        }\n\n        public float Y\n        {\n            get\n            {\n                return _vec.y;\n            }\n            set\n            {\n                this.RaiseAndSetIfChanged(ref _vec.y, value);\n            }\n        }\n\n        public float Z\n        {\n            get\n            {\n                return _vec.z;\n            }\n            set\n            {\n                this.RaiseAndSetIfChanged(ref _vec.z, value);\n            }\n        }\n    }\n\n    class Vector3CellEditFactory : AbstractCellEditFactory\n    {\n        public override bool Accept(object accessToken)\n        {\n            return accessToken is TestExtendPropertyGrid;\n        }\n\n        public override Control? HandleNewProperty(PropertyCellContext context)\n        {\n            var propertyDescriptor = context.Property;\n            var target = context.Target;\n\n            if (propertyDescriptor.PropertyType != typeof(SVector3))\n            {\n                return null;\n            }\n\n            Vector3View control = new Vector3View();\n\n            return control;\n        }\n\n        public override bool HandlePropertyChanged(PropertyCellContext context)\n        {\n            var propertyDescriptor = context.Property;\n            var target = context.Target;\n            var control = context.CellEdit!;\n\n            if (propertyDescriptor.PropertyType != typeof(SVector3))\n            {\n                return false;\n            }\n\n            ValidateProperty(control, propertyDescriptor, target);\n\n            if (control is Vector3View vv)\n            {\n                SVector3 vec = (SVector3)propertyDescriptor.GetValue(target)!;\n\n                var model = new SVector3ViewModel() { _vec = vec };\n                vv.DataContext = model;\n\n                model.PropertyChanged += (s, e) =>\n                {\n                    SetAndRaise(context, control, model._vec);\n                };\n\n                return true;\n            }\n\n            return false;\n        }\n    }\n    #endregion\n\n    #region Countries\n    internal class CountryInfoCellEditFactory : SelectableListCellEditFactory\n    {\n        public override int ImportPriority => base.ImportPriority + 100;\n\n        public override bool Accept(object accessToken)\n        {\n            return accessToken is TestExtendPropertyGrid;\n        }\n\n        public override Control? HandleNewProperty(PropertyCellContext context)\n        {\n            if(context.Property.PropertyType != typeof(SelectableList<CountryInfo>))\n            {\n                return null;\n            }\n\n            var control = base.HandleNewProperty(context);\n\n            if(control is ComboBox cb)\n            {\n                cb.ItemTemplate = new FuncDataTemplate<CountryInfo>((value, namescope) =>\n                {\n                    return new CountryView();\n                });\n            }\n\n            return control;\n        }\n    }\n    #endregion\n\n    #region Bool\n    class ToggleSwitchCellEditFactory : AbstractCellEditFactory\n    {\n\n        public override bool Accept(object accessToken)\n        {\n            return accessToken is TestExtendPropertyGrid;\n        }\n\n        public override Control? HandleNewProperty(PropertyCellContext context)\n        {\n            var propertyDescriptor = context.Property;\n            var target = context.Target;\n\n            if (propertyDescriptor.PropertyType != typeof(bool))\n            {\n                return null;\n            }\n\n            ToggleSwitch control = new ToggleSwitch();\n            control.SetLocalizeBinding(ToggleSwitch.OnContentProperty, \"On\");\n            control.SetLocalizeBinding(ToggleSwitch.OffContentProperty, \"Off\");\n\n            control.IsCheckedChanged += (s, e) =>\n            {\n                SetAndRaise(context, control, control.IsChecked);\n            };\n\n            return control;\n        }\n\n        public override bool HandlePropertyChanged(PropertyCellContext context)\n        {\n            var propertyDescriptor = context.Property;\n            var target = context.Target;\n            var control = context.CellEdit!;\n\n            if (propertyDescriptor.PropertyType != typeof(bool))\n            {\n                return false;\n            }\n\n            ValidateProperty(control, propertyDescriptor, target);\n\n            if (control is ToggleSwitch ts)\n            {\n                ts.IsChecked = (bool)propertyDescriptor.GetValue(target)!;\n\n                return true;\n            }\n\n            return false;\n        }\n    }\n\n    #endregion\n}\n\n'Avalonia.PropertyGrid/Samples/Avalonia.PropertyGrid.Samples/App.axaml.cs'\n:﻿using Avalonia;\nusing Avalonia.Controls.ApplicationLifetimes;\nusing Avalonia.Markup.Xaml;\nusing Avalonia.PropertyGrid.Samples.ViewModels;\nusing Avalonia.PropertyGrid.Samples.Views;\n\nnamespace Avalonia.PropertyGrid.Samples;\n\npublic partial class App : Application\n{\n    public override void Initialize()\n    {\n        AppThemeUtils.BeforeInitialize();\n\n        AvaloniaXamlLoader.Load(this);\n\n        AppThemeUtils.AfterInitialize();\n    }\n\n    public override void OnFrameworkInitializationCompleted()\n    {\n        if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktop)\n        {\n            desktop.MainWindow = new MainWindow\n            {\n                DataContext = new MainViewModel()\n            };\n        }\n        else if (ApplicationLifetime is ISingleViewApplicationLifetime singleViewPlatform)\n        {\n            singleViewPlatform.MainView = new MainView\n            {\n                DataContext = new MainViewModel()\n            };\n        }\n\n        base.OnFrameworkInitializationCompleted();\n    }\n}\n\n'Avalonia.PropertyGrid/Avalonia.PropertyGrid/Controls/Factories/Builtins/SelectableListCellEditFactory.cs'\n:﻿using Avalonia.Controls;\nusing Avalonia.Layout;\nusing Avalonia.PropertyGrid.Services;\nusing PropertyModels.Collections;\nusing PropertyModels.ComponentModel;\nusing PropertyModels.Extensions;\n\nnamespace Avalonia.PropertyGrid.Controls.Factories.Builtins\n{\n\n\n\n\n\n    public class SelectableListCellEditFactory : AbstractCellEditFactory\n    {\n\n\n\n\n\n        public override int ImportPriority => base.ImportPriority - 100000;\n\n\n\n\n\n\n        public override Control? HandleNewProperty(PropertyCellContext context)\n        {\n            var propertyDescriptor = context.Property;\n            var target = context.Target;\n\n            if (!propertyDescriptor.PropertyType.IsImplementFrom<ISelectableList>() ||\n                propertyDescriptor.GetValue(target) == null\n                )\n            {\n                return null;\n            }\n\n            var control = new ComboBox();\n\n            var list = (propertyDescriptor.GetValue(target) as ISelectableList);\n\n            control.ItemsSource = list?.Values;\n            control.HorizontalAlignment = HorizontalAlignment.Stretch;\n\n            control.SelectionChanged += (s, e) =>\n            {\n                var item = control.SelectedItem;\n\n                if (list != null && (list.SelectedValue == null || !list.SelectedValue.Equals(item)))\n                {\n                    var oldValue = list.SelectedValue;\n\n                    var command = new GenericCancelableCommand(\n                        string.Format(LocalizationService.Default[\"Change {0} selection from {1} to {2}\"], context.Property.DisplayName, oldValue!=null?oldValue.ToString():\"null\", item!=null?item.ToString():\"null\"),\n                        () =>\n                        {\n                            list.SelectedValue = item;\n                            return true;\n                        },\n                        () =>\n                        {\n                            list.SelectedValue = oldValue;\n                            return true;\n                        }\n                        );\n\n                    ExecuteCommand(command, context, list, list, oldValue);\n\n                    HandleRaiseEvent(control, context);\n                }\n            };\n\n            if(list != null)\n            {\n                list.SelectionChanged += (s, e) =>\n                {\n                    if(!CheckEqual(control.SelectedItem, list.SelectedValue))\n                    {\n                        control.SelectedItem = list.SelectedValue;\n                    }\n                };\n            }\n\n            return control;\n        }\n\n\n\n\n\n\n        public override bool HandlePropertyChanged(PropertyCellContext context)\n        {\n            var propertyDescriptor = context.Property;\n            var target = context.Target;\n            var control = context.CellEdit!;\n\n            if (!propertyDescriptor.PropertyType.IsImplementFrom<ISelectableList>())\n            {\n                return false;\n            }\n\n            ValidateProperty(control, propertyDescriptor, target);\n\n            if (control is ComboBox cb)\n            {\n                var list = propertyDescriptor.GetValue(target) as ISelectableList;\n\n                if(!CheckEquals(cb.ItemsSource as object[], list?.Values))\n                {\n                    cb.ItemsSource = list?.Values;\n                }\n\n                if(!CheckEqual(cb.SelectedItem, list?.SelectedValue))\n                {\n                    cb.SelectedItem = list?.SelectedValue;\n                }\n\n                return true;\n            }\n\n            return false;\n        }\n    }\n}\n",
        "gt": [
            "'Avalonia.PropertyGrid/PropertyModels/Localization/CultureData.cs'",
            "'Avalonia.PropertyGrid/Avalonia.PropertyGrid/Services/LocalizationService.cs'",
            "'Avalonia.PropertyGrid/Avalonia.PropertyGrid/Controls/Factories/Builtins/SelectableListCellEditFactory.cs'",
            "'Avalonia.PropertyGrid/Samples/Avalonia.PropertyGrid.Samples/Views/TestExtendPropertyGrid.cs'",
            "'Avalonia.PropertyGrid/Samples/Avalonia.PropertyGrid.Samples/App.axaml.cs'"
        ]
    },
    {
        "files": [
            "'iyzipay-dotnet/Iyzipay.Tests/Functional/CardManagementRetrieveCardTest.cs'",
            "'iyzipay-dotnet/Iyzipay.Tests/Functional/SubscriptionPlanTest.cs'",
            "'iyzipay-dotnet/Iyzipay/Model/V2/Subscription/SubscriptionResource.cs'"
        ],
        "content": "'iyzipay-dotnet/Iyzipay.Tests/Functional/CardManagementRetrieveCardTest.cs'\n:using Iyzipay.Model;\nusing Iyzipay.Request;\nusing Iyzipay.Tests.Functional;\nusing Iyzipay.Tests.Functional.Builder.Request;\nusing NUnit.Framework;\nusing System.Threading.Tasks;\n\nnamespace Iyzipay.Tests.Functional\n{\n    public class CardManagementRetrieveCardTest : BaseTest\n    {\n        [SetUp]\n        public void SetUp()\n        {\n            Initialize();\n            _options.BaseUrl = \"https:\n        }\n\n        [Test]\n        public async Task Should_Retrieve_CardsAsync()\n        {\n            CreateCardManagementPageInitializeRequest initializeRequest = CardManagementPageRequestBuilder.Create().Build();\n            CardManagementPageInitialize cardManagementPageInitialize = CardManagementPageInitialize.Create(initializeRequest, _options);\n\n            RetrieveCardManagementPageCardRequest retrieveCardRequest = CardManagementRetrieveCardBuilder.Create()\n                .PageToken(cardManagementPageInitialize.Token)\n                .Build();\n\n            CardManagementPageCard cardManagementPageCard = CardManagementPageCard.Retrieve(retrieveCardRequest, _options);\n            PrintResponse(cardManagementPageCard);\n\n            Assert.AreEqual(Status.SUCCESS.ToString(), cardManagementPageCard.Status);\n            Assert.AreEqual(Locale.TR.ToString(), cardManagementPageCard.Locale);\n            Assert.Null(cardManagementPageCard.ErrorMessage);\n            Assert.NotNull(cardManagementPageCard);\n        }\n\n        [Test]\n        public void Should_Not_Retrieve_Cards_When_PageToken_Is_Not_Exist()\n        {\n            RetrieveCardManagementPageCardRequest retrieveCardRequest = CardManagementRetrieveCardBuilder.Create()\n                .PageToken(\"pagetoken\")\n                .Build();\n\n            CardManagementPageCard cardManagementPageCard = CardManagementPageCard.Retrieve(retrieveCardRequest, _options);\n            PrintResponse(cardManagementPageCard);\n\n            Assert.AreEqual(Status.FAILURE.ToString(), cardManagementPageCard.Status);\n            Assert.AreEqual(\"Geçersiz token\",cardManagementPageCard.ErrorMessage);\n        }\n    }\n}\n'iyzipay-dotnet/Iyzipay.Tests/Functional/SubscriptionPlanTest.cs'\n:using System;\nusing Iyzipay.Model;\nusing Iyzipay.Model.V2;\nusing Iyzipay.Model.V2.Subscription;\nusing Iyzipay.Request.V2.Subscription;\nusing Iyzipay.Tests.Functional.Util;\nusing NUnit.Framework;\n\nnamespace Iyzipay.Tests.Functional\n{\n    public class SubscriptionPlanTest : BaseTest\n    {\n        [Test]\n        public void Should_Create_Plan()\n        {\n            string randomString = DateTime.Now.ToString(\"yyyyMMddHHmmssfff\");\n            CreateProductRequest createProductRequest = new CreateProductRequest\n            {\n                Description = \"product-description\",\n                Locale = Locale.TR.ToString(),\n                Name = $\"product-name-{randomString}\",\n                ConversationId = \"123456789\"\n            };\n\n            ResponseData<ProductResource> createProductResponse = Product.Create(createProductRequest, _options);\n\n            CreatePlanRequest request = new CreatePlanRequest()\n            {\n                Locale = Locale.TR.ToString(),\n                Name = $\"plan-name-{randomString}\",\n                ConversationId = \"123456789\",\n                TrialPeriodDays = 3,\n                Price = \"5.23\",\n                CurrencyCode = Currency.TRY.ToString(),\n                PaymentInterval = PaymentInterval.WEEKLY.ToString(),\n                RecurrenceCount = 12,\n                PaymentIntervalCount = 1,\n                PlanPaymentType = PlanPaymentType.RECURRING.ToString(),\n                ProductReferenceCode = createProductResponse.Data.ReferenceCode\n            };\n\n            ResponseData<PlanResource> response = Plan.Create(request, _options);\n            PrintResponse(response);\n\n            Assert.AreEqual(response.Status,Status.SUCCESS.ToString());\n            Assert.AreEqual($\"plan-name-{randomString}\",response.Data.Name);\n            Assert.AreEqual(\"5.23\",response.Data.Price.RemoveTrailingZeros());\n            Assert.AreEqual( Currency.TRY.ToString(),response.Data.CurrencyCode);\n            Assert.AreEqual( createProductResponse.Data.ReferenceCode,response.Data.ProductReferenceCode);\n            Assert.AreEqual( PaymentInterval.WEEKLY.ToString(),response.Data.PaymentInterval);\n            Assert.AreEqual( 1,response.Data.PaymentIntervalCount);\n            Assert.AreEqual( 3,response.Data.TrialPeriodDays);\n            Assert.AreEqual( PlanPaymentType.RECURRING.ToString(),response.Data.PlanPaymentType);\n            Assert.AreEqual( 12,response.Data.RecurrenceCount);\n            Assert.AreEqual( \"ACTIVE\",response.Data.Status);\n            Assert.IsNotNull(response.Data.ReferenceCode);\n            Assert.IsNotNull(response.Data.CreatedDate);\n            Assert.IsNotNull(response.SystemTime);\n            Assert.Null(response.ErrorMessage);\n        }\n\n        [Test]\n        public void Should_Update_Plan()\n        {\n            string randomString = DateTime.Now.ToString(\"yyyyMMddHHmmssfff\");\n            CreateProductRequest createProductRequest = new CreateProductRequest\n            {\n                Description = \"product-description\",\n                Locale = Locale.TR.ToString(),\n                Name = $\"product-name-{randomString}\",\n                ConversationId = \"123456789\"\n            };\n\n            ResponseData<ProductResource> createProductResponse = Product.Create(createProductRequest, _options);\n\n            CreatePlanRequest createPlanRequest = new CreatePlanRequest()\n            {\n                Locale = Locale.TR.ToString(),\n                Name = $\"plan-name-{randomString}\",\n                ConversationId = \"123456789\",\n                TrialPeriodDays = 3,\n                Price = \"5.23\",\n                CurrencyCode = Currency.TRY.ToString(),\n                PaymentInterval = PaymentInterval.WEEKLY.ToString(),\n                RecurrenceCount = 12,\n                PaymentIntervalCount = 1,\n                PlanPaymentType = PlanPaymentType.RECURRING.ToString(),\n                ProductReferenceCode = createProductResponse.Data.ReferenceCode\n            };\n\n            ResponseData<PlanResource> createPlanResponse = Plan.Create(createPlanRequest, _options);\n\n            UpdatePlanRequest request = new UpdatePlanRequest()\n            {\n                Locale = Locale.TR.ToString(),\n                Name = $\"updated-plan-name-{randomString}\",\n                ConversationId = \"123456789\",\n                TrialPeriodDays = 5,\n                PricingPlanReferenceCode = createPlanResponse.Data.ReferenceCode\n            };\n\n            ResponseData<PlanResource> response = Plan.Update(request, _options);\n            PrintResponse(response);\n\n            Assert.AreEqual(response.Status,Status.SUCCESS.ToString());\n            Assert.AreEqual($\"updated-plan-name-{randomString}\",response.Data.Name);\n            Assert.AreEqual(\"5.23\",response.Data.Price.RemoveTrailingZeros());\n            Assert.AreEqual( Currency.TRY.ToString(),response.Data.CurrencyCode);\n            Assert.AreEqual( createProductResponse.Data.ReferenceCode,response.Data.ProductReferenceCode);\n            Assert.AreEqual( PaymentInterval.WEEKLY.ToString(),response.Data.PaymentInterval);\n            Assert.AreEqual( 1,response.Data.PaymentIntervalCount);\n            Assert.AreEqual( 5,response.Data.TrialPeriodDays);\n            Assert.AreEqual( PlanPaymentType.RECURRING.ToString(),response.Data.PlanPaymentType);\n            Assert.AreEqual( 12,response.Data.RecurrenceCount);\n            Assert.AreEqual( \"ACTIVE\",response.Data.Status);\n            Assert.IsNotNull(response.Data.ReferenceCode);\n            Assert.IsNotNull(response.Data.CreatedDate);\n            Assert.IsNotNull(response.SystemTime);\n            Assert.Null(response.ErrorMessage);\n        }\n\n        [Test]\n        public void Should_Delete_Plan()\n        {\n            string randomString = DateTime.Now.ToString(\"yyyyMMddHHmmssfff\");\n            CreateProductRequest createProductRequest = new CreateProductRequest\n            {\n                Description = \"product-description\",\n                Locale = Locale.TR.ToString(),\n                Name = $\"product-name-{randomString}\",\n                ConversationId = \"123456789\"\n            };\n\n            ResponseData<ProductResource> createProductResponse = Product.Create(createProductRequest, _options);\n\n            CreatePlanRequest createPlanRequest = new CreatePlanRequest()\n            {\n                Locale = Locale.TR.ToString(),\n                Name = $\"plan-name-{randomString}\",\n                ConversationId = \"123456789\",\n                TrialPeriodDays = 3,\n                Price = \"5.23\",\n                CurrencyCode = Currency.TRY.ToString(),\n                PaymentInterval = PaymentInterval.WEEKLY.ToString(),\n                RecurrenceCount = 12,\n                PaymentIntervalCount = 1,\n                PlanPaymentType = PlanPaymentType.RECURRING.ToString(),\n                ProductReferenceCode = createProductResponse.Data.ReferenceCode\n            };\n\n            ResponseData<PlanResource> createPlanResponse = Plan.Create(createPlanRequest, _options);\n\n            DeletePlanRequest request = new DeletePlanRequest\n            {\n                Locale = Locale.TR.ToString(),\n                ConversationId = \"123456789\",\n                PricingPlanReferenceCode = createPlanResponse.Data.ReferenceCode\n            };\n\n            IyzipayResourceV2 response = Plan.Delete(request, _options);\n            PrintResponse(response);\n\n            Assert.AreEqual(response.Status,Status.SUCCESS.ToString());\n            Assert.IsNotNull(response.SystemTime);\n            Assert.Null(response.ErrorMessage);\n        }\n\n        [Test]\n        public void Should_Retrieve_Plan()\n        {\n            string randomString = DateTime.Now.ToString(\"yyyyMMddHHmmssfff\");\n            CreateProductRequest createProductRequest = new CreateProductRequest\n            {\n                Description = \"product-description\",\n                Locale = Locale.TR.ToString(),\n                Name = $\"product-name-{randomString}\",\n                ConversationId = \"123456789\"\n            };\n\n            ResponseData<ProductResource> createProductResponse = Product.Create(createProductRequest, _options);\n\n            CreatePlanRequest createPlanRequest = new CreatePlanRequest()\n            {\n                Locale = Locale.TR.ToString(),\n                Name = $\"plan-name-{randomString}\",\n                ConversationId = \"123456789\",\n                TrialPeriodDays = 3,\n                Price = \"5.23\",\n                CurrencyCode = Currency.TRY.ToString(),\n                PaymentInterval = PaymentInterval.WEEKLY.ToString(),\n                RecurrenceCount = 12,\n                PaymentIntervalCount = 1,\n                PlanPaymentType = PlanPaymentType.RECURRING.ToString(),\n                ProductReferenceCode = createProductResponse.Data.ReferenceCode\n            };\n\n            ResponseData<PlanResource> createPlanResponse = Plan.Create(createPlanRequest, _options);\n\n            RetrievePlanRequest request = new RetrievePlanRequest()\n            {\n                Locale = Locale.TR.ToString(),\n                ConversationId = \"123456789\",\n                PricingPlanReferenceCode = createPlanResponse.Data.ReferenceCode\n            };\n\n            ResponseData<PlanResource> response = Plan.Retrieve(request, _options);\n            PrintResponse(response);\n\n            Assert.AreEqual(response.Status,Status.SUCCESS.ToString());\n            Assert.AreEqual($\"plan-name-{randomString}\",response.Data.Name);\n            Assert.AreEqual(\"5.23\",response.Data.Price.RemoveTrailingZeros());\n            Assert.AreEqual( Currency.TRY.ToString(),response.Data.CurrencyCode);\n            Assert.AreEqual( createProductResponse.Data.ReferenceCode,response.Data.ProductReferenceCode);\n            Assert.AreEqual( PaymentInterval.WEEKLY.ToString(),response.Data.PaymentInterval);\n            Assert.AreEqual( 1,response.Data.PaymentIntervalCount);\n            Assert.AreEqual( 3,response.Data.TrialPeriodDays);\n            Assert.AreEqual( PlanPaymentType.RECURRING.ToString(),response.Data.PlanPaymentType);\n            Assert.AreEqual( 12,response.Data.RecurrenceCount);\n            Assert.AreEqual( \"ACTIVE\",response.Data.Status);\n            Assert.IsNotNull(response.Data.ReferenceCode);\n            Assert.IsNotNull(response.Data.CreatedDate);\n            Assert.IsNotNull(response.SystemTime);\n            Assert.Null(response.ErrorMessage);\n        }\n\n        [Test]\n        public void Should_RetrieveAll_Plan()\n        {\n            string randomString = DateTime.Now.ToString(\"yyyyMMddHHmmssfff\");\n            CreateProductRequest createProductRequest = new CreateProductRequest\n            {\n                Description = \"product-description\",\n                Locale = Locale.TR.ToString(),\n                Name = $\"product-name-{randomString}\",\n                ConversationId = \"123456789\"\n            };\n\n            ResponseData<ProductResource> createProductResponse = Product.Create(createProductRequest, _options);\n\n            CreatePlanRequest createPlanRequest = new CreatePlanRequest()\n            {\n                Locale = Locale.TR.ToString(),\n                Name = $\"plan-name-{randomString}\",\n                ConversationId = \"123456789\",\n                TrialPeriodDays = 3,\n                Price = \"5.23\",\n                CurrencyCode = Currency.TRY.ToString(),\n                PaymentInterval = PaymentInterval.WEEKLY.ToString(),\n                RecurrenceCount = 12,\n                PaymentIntervalCount = 1,\n                PlanPaymentType = PlanPaymentType.RECURRING.ToString(),\n                ProductReferenceCode = createProductResponse.Data.ReferenceCode\n            };\n\n            Plan.Create(createPlanRequest, _options);\n\n            RetrieveAllPlanRequest request = new RetrieveAllPlanRequest\n            {\n                Locale = Locale.TR.ToString(),\n                ConversationId = \"123456789\",\n                ProductReferenceCode = createProductResponse.Data.ReferenceCode,\n                Count = 1,\n                Page = 1\n            };\n\n            ResponsePagingData<PlanResource> response = Plan.RetrieveAll(request, _options);\n            PrintResponse(response);\n\n            Assert.AreEqual(response.Status,Status.SUCCESS.ToString());\n            Assert.AreEqual(1,response.Data.Items.Count);\n            Assert.AreEqual(1, response.Data.CurrentPage);\n            Assert.IsNotNull(response.SystemTime);\n            Assert.Null(response.ErrorMessage);\n        }\n    }\n}\n'iyzipay-dotnet/Iyzipay/Model/V2/Subscription/SubscriptionResource.cs'\n:using System.Collections.Generic;\nusing Newtonsoft.Json;\n\nnamespace Iyzipay.Model.V2.Subscription\n{\n    public class SubscriptionResource : SubscriptionCreatedResource\n    {\n        public string CustomerEmail { get; set; }\n\n        [JsonProperty(PropertyName = \"orders\")]\n        public List<SubscriptionOrder> SubscriptionOrders { get; set; }\n    }\n}",
        "gt": [
            "'iyzipay-dotnet/Iyzipay/Model/V2/Subscription/SubscriptionResource.cs'",
            "'iyzipay-dotnet/Iyzipay.Tests/Functional/SubscriptionPlanTest.cs'",
            "'iyzipay-dotnet/Iyzipay.Tests/Functional/CardManagementRetrieveCardTest.cs'"
        ]
    },
    {
        "files": [
            "'ManagedInjector/ManagedInjector.GUI/Models/UserProcess.cs'",
            "'ManagedInjector/ManagedInjector.GUI/UI/MainWindow/MainWindowVM.cs'",
            "'ManagedInjector/ManagedInjector.Lib/InjectableProcess.cs'",
            "'ManagedInjector/ManagedInjector.Lib/Injectors/FrameworkV2Injector.cs'"
        ],
        "content": "'ManagedInjector/ManagedInjector.GUI/Models/UserProcess.cs'\n:using System;\nusing System.Diagnostics;\nusing HoLLy.ManagedInjector;\n\nnamespace ManagedInjector.GUI.Models\n{\n\tpublic class UserProcess\n\t{\n\t\tpublic Process DotNetProcess { get; private set; }\n\n\t\tpublic InjectableProcess InjectableProcess { get; private set; }\n\n\t\tpublic uint Pid => InjectableProcess.Pid;\n\n\t\tpublic string Name => DotNetProcess.ProcessName;\n\n\t\tpublic string FileName => DotNetProcess.MainModule?.FileName;\n\n\t\tpublic ProcessStatus Status => InjectableProcess.GetStatus();\n\n\t\tpublic ProcessArchitecture Architecture => InjectableProcess.GetArchitecture();\n\n\t\tpublic string BitnessText => InjectableProcess.Is64Bit ? \"64-bit\" : \"32-bit\";\n\n\t\tpublic string ArchitectureText\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\treturn InjectableProcess.GetStatus() switch\n\t\t\t\t\t{\n\t\t\t\t\t\tProcessStatus.Ok => InjectableProcess.GetArchitecture().ToString(),\n\n\t\t\t\t\t\tProcessStatus.Unknown => \"Error: Unknown\",\n\t\t\t\t\t\tProcessStatus.ArchitectureMismatch => \"Error: Architecture mismatch\",\n\t\t\t\t\t\tProcessStatus.NoRuntimeFound => \"Error: No runtime found\",\n\t\t\t\t\t\t_ => throw new ArgumentOutOfRangeException(),\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tcatch (Exception e)\n\t\t\t\t{\n\t\t\t\t\treturn e.Message.ToString();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic UserProcess(Process proc)\n\t\t{\n\t\t\tDotNetProcess = proc;\n\t\t\tInjectableProcess = new InjectableProcess((uint)proc.Id);\n\t\t}\n\t}\n}\n\n'ManagedInjector/ManagedInjector.GUI/UI/MainWindow/MainWindowVM.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Collections.Immutable;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Windows;\nusing System.Windows.Input;\nusing AsmResolver.DotNet;\nusing HoLLy.ManagedInjector;\nusing MahApps.Metro.Controls;\nusing MahApps.Metro.Controls.Dialogs;\nusing ManagedInjector.GUI.Models;\nusing ManagedInjector.GUI.UI.About;\nusing ManagedInjector.GUI.UI.EntryPointSelect;\nusing Microsoft.Win32;\nusing Microsoft.Xaml.Behaviors.Core;\n\nnamespace ManagedInjector.GUI.UI.MainWindow\n{\n\tpublic class MainWindowVM : ViewModelBase\n\t{\n\t\tprivate readonly MetroWindow _window;\n\t\tprivate IReadOnlyList<UserProcess> _processes = new List<UserProcess>();\n\t\tprivate UserProcess _selectedProcess;\n\t\tprivate UserAssembly _selectedAssembly;\n\n\t\tpublic MainWindowVM(MetroWindow window)\n\t\t{\n\t\t\t_window = window;\n\t\t\tSelectAssemblyCommand = new ActionCommand(SelectAssembly);\n\t\t\tInjectCommand = new ActionCommand(Inject);\n\t\t\tAboutCommand = new ActionCommand(About);\n\n\n\t\t\tRefreshProcesses();\n\n\n\t\t\tif (NativeHelper.In64BitMachine && !NativeHelper.In64BitProcess)\n\t\t\t{\n\t\t\t\tconst string complain = \"You launched this injector as a 32-bit process under a 64-bit host. You will\" +\n\t\t\t\t                        \" be unable to inject into 64-bit processes.\";\n\t\t\t\tMessageBox.Show(complain, \"Warning!\");\n\t\t\t}\n\t\t}\n\n\t\tpublic string SelectedProcessId => SelectedProcess?.Pid.ToString() ?? \"<none>\";\n\t\tpublic string SelectedProcessName => SelectedProcess?.Name ?? \"<none>\";\n\t\tpublic string SelectedProcessFileName => SelectedProcess?.FileName ?? \"<none>\";\n\n\t\tpublic string SelectedPath => _selectedAssembly?.Path ?? \"<none>\";\n\t\tpublic string SelectedType => _selectedAssembly?.Type ?? \"<none>\";\n\t\tpublic string SelectedMethod => _selectedAssembly?.Method ?? \"<none>\";\n\n\t\tpublic bool SelectAssemblyButtonEnabled => SelectedProcess is not null;\n\t\tpublic bool InjectButtonEnabled => SelectedAssembly is not null;\n\n\t\tpublic ICommand SelectAssemblyCommand { get; }\n\t\tpublic ICommand InjectCommand { get; }\n\t\tpublic ICommand AboutCommand { get; }\n\n\t\tpublic IReadOnlyList<UserProcess> Processes\n\t\t{\n\t\t\tget => _processes;\n\t\t\tset\n\t\t\t{\n\t\t\t\t_processes = value;\n\t\t\t\tOnPropertyChanged();\n\n\t\t\t\tSelectedProcess = null;\n\t\t\t}\n\t\t}\n\n\t\tpublic UserProcess SelectedProcess\n\t\t{\n\t\t\tget => _selectedProcess;\n\t\t\tset\n\t\t\t{\n\t\t\t\t_selectedProcess = value;\n\t\t\t\tOnPropertyChanged();\n\t\t\t\tOnPropertyChanged(nameof(SelectedProcessId));\n\t\t\t\tOnPropertyChanged(nameof(SelectedProcessName));\n\t\t\t\tOnPropertyChanged(nameof(SelectedProcessFileName));\n\t\t\t\tOnPropertyChanged(nameof(SelectAssemblyButtonEnabled));\n\n\t\t\t\tSelectedAssembly = null;\n\t\t\t}\n\t\t}\n\n\t\tpublic UserAssembly SelectedAssembly\n\t\t{\n\t\t\tget => _selectedAssembly;\n\t\t\tset\n\t\t\t{\n\t\t\t\t_selectedAssembly = value;\n\t\t\t\tOnPropertyChanged();\n\t\t\t\tOnPropertyChanged(nameof(SelectedPath));\n\t\t\t\tOnPropertyChanged(nameof(SelectedType));\n\t\t\t\tOnPropertyChanged(nameof(SelectedMethod));\n\t\t\t\tOnPropertyChanged(nameof(InjectButtonEnabled));\n\t\t\t}\n\t\t}\n\n\t\tpublic void RefreshProcesses()\n\t\t{\n\t\t\tProcesses = GetProcesses();\n\t\t}\n\n\t\tprivate async void SelectAssembly()\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tif (!SelectAssemblyButtonEnabled)\n\t\t\t\t\treturn;\n\n\n\t\t\t\tvar injector = SelectedProcess.InjectableProcess.GetInjector();\n\n\t\t\t\tvar ofd = new OpenFileDialog();\n\t\t\t\tif (ofd.ShowDialog() != true) return;\n\t\t\t\tvar path = ofd.FileName;\n\n\t\t\t\tif (!File.Exists(path))\n\t\t\t\t{\n\t\t\t\t\tawait _window.ShowMessageAsync(\"Error!\", $\"File does not exist:\\n{path}\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar file = AssemblyDefinition.FromFile(path);\n\t\t\t\tvar mod = file.ManifestModule;\n\n\t\t\t\tvar dialog = new EntryPointSelectDialog(mod, injector)\n\t\t\t\t{\n\t\t\t\t\tWindowStartupLocation = WindowStartupLocation.CenterScreen,\n\t\t\t\t};\n\t\t\t\tif (dialog.ShowDialog() != true) return;\n\n\t\t\t\tSelectedAssembly = new UserAssembly(path, dialog.SelectedType, dialog.SelectedMethod);\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tawait _window.ShowMessageAsync(\"An exception occured\", e.ToString());\n\t\t\t}\n\t\t}\n\n\t\tprivate async void Inject()\n\t\t{\n\t\t\ttry\n\t\t\t{\n\n\t\t\t\tSelectedProcess.InjectableProcess.Inject(SelectedPath, SelectedType, SelectedMethod);\n\n\t\t\t\tawait _window.ShowMessageAsync(\"Success!\", \"Assembly has been injected\");\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tawait _window.ShowMessageAsync(\"An exception occured\", e.ToString());\n\t\t\t}\n\t\t}\n\n\t\tpublic static void About()\n\t\t{\n\t\t\tnew AboutDialog().ShowDialog();\n\t\t}\n\n\t\tprivate static ImmutableList<UserProcess> GetProcesses()\n\t\t{\n\t\t\tstatic bool IsProcessCandidate1(Process arg) => arg.Id != 0;\n\n\t\t\tstatic bool IsProcessCandidate2(UserProcess arg)\n\t\t\t{\n\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\t_ = arg.InjectableProcess.GetInjector();\n\t\t\t\t}\n\t\t\t\tcatch (Exception)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn arg.Status switch\n\t\t\t\t{\n\t\t\t\t\tProcessStatus.Unknown => false,\n\t\t\t\t\tProcessStatus.Ok => true,\n\t\t\t\t\tProcessStatus.ArchitectureMismatch => false,\n\t\t\t\t\tProcessStatus.NoRuntimeFound => false,\n\t\t\t\t\t_ => throw new ArgumentOutOfRangeException(),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn Process.GetProcesses()\n\t\t\t\t.Where(IsProcessCandidate1)\n\t\t\t\t.Select(x => new UserProcess(x))\n\t\t\t\t.Where(IsProcessCandidate2)\n\t\t\t\t.ToImmutableList();\n\t\t}\n\t}\n}\n\n'ManagedInjector/ManagedInjector.Lib/InjectableProcess.cs'\n:using System;\nusing System.Diagnostics;\nusing System.Linq;\nusing HoLLy.ManagedInjector.Injectors;\n\nnamespace HoLLy.ManagedInjector\n{\n\tpublic class InjectableProcess : IDisposable\n\t{\n\t\tprivate const Native.ProcessAccessFlags FlagsForInject = Native.ProcessAccessFlags.CreateThread |\n\t\t                                                         Native.ProcessAccessFlags.QueryInformation |\n\t\t                                                         Native.ProcessAccessFlags.VirtualMemoryOperation |\n\t\t                                                         Native.ProcessAccessFlags.VirtualMemoryRead |\n\t\t                                                         Native.ProcessAccessFlags.VirtualMemoryWrite;\n\n\t\tprivate const Native.ProcessAccessFlags BasicFlags = Native.ProcessAccessFlags.QueryInformation;\n\n\t\tprivate IntPtr _handle;\n\t\tprivate bool _isHandleFull;\n\t\tprivate bool? _is64Bit;\n\t\tprivate ProcessStatus _status = ProcessStatus.Unknown;\n\t\tprivate ProcessArchitecture _architecture = ProcessArchitecture.Unknown;\n\n\t\tpublic InjectableProcess(uint pid)\n\t\t{\n\t\t\tPid = pid;\n\t\t}\n\n\t\tpublic uint Pid { get; }\n\n\t\tpublic bool Is64Bit => _is64Bit ??= NativeHelper.Is64BitProcess(Handle);\n\n\n\n\n\t\tpublic IntPtr Handle\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif (_handle == IntPtr.Zero)\n\t\t\t\t\t_handle = NativeHelper.OpenProcess(BasicFlags, Pid);\n\n\t\t\t\treturn _handle;\n\t\t\t}\n\t\t}\n\n\n\n\n\t\tpublic IntPtr FullHandle\n\t\t{\n\t\t\tget\n\t\t\t{\n\t\t\t\tif (!_isHandleFull)\n\t\t\t\t{\n\t\t\t\t\tNative.CloseHandle(_handle);\n\t\t\t\t\t_handle = IntPtr.Zero;\n\t\t\t\t}\n\n\t\t\t\tif (_handle == IntPtr.Zero)\n\t\t\t\t{\n\t\t\t\t\t_handle = NativeHelper.OpenProcess(FlagsForInject, Pid);\n\t\t\t\t\t_isHandleFull = true;\n\t\t\t\t}\n\n\t\t\t\treturn _handle;\n\t\t\t}\n\t\t}\n\n\t\tpublic ProcessStatus GetStatus()\n\t\t{\n\t\t\tif (_status != ProcessStatus.Unknown)\n\t\t\t\treturn _status;\n\n\t\t\ttry\n\t\t\t{\n\n\t\t\t\tif (!NativeHelper.In64BitProcess && NativeHelper.Is64BitProcess(Handle))\n\t\t\t\t\treturn _status = ProcessStatus.ArchitectureMismatch;\n\n\t\t\t\tif (GetArchitecture() == ProcessArchitecture.Unknown)\n\t\t\t\t\treturn _status = ProcessStatus.NoRuntimeFound;\n\n\t\t\t\treturn _status = ProcessStatus.Ok;\n\t\t\t}\n\t\t\tcatch (Exception)\n\t\t\t{\n\t\t\t\treturn ProcessStatus.Unknown;\n\t\t\t}\n\t\t}\n\n\t\tpublic ProcessArchitecture GetArchitecture()\n\t\t{\n\t\t\tif (_architecture != ProcessArchitecture.Unknown)\n\t\t\t\treturn _architecture;\n\n\t\t\ttry\n\t\t\t{\n\t\t\t\tusing var process = Process.GetProcessById((int) Pid);\n\n\t\t\t\tvar modules = NativeHelper.GetModules(Pid);\n\n\t\t\t\tbool HasModule(string s) =>\n\t\t\t\t\tmodules.Any(x => x.moduleName.Equals(s, StringComparison.InvariantCultureIgnoreCase));\n\n\n\n\n\n\n\t\t\t\tif (HasModule(\"mscoree.dll\"))\n\t\t\t\t{\n\t\t\t\t\tif (HasModule(\"clr.dll\"))\n\t\t\t\t\t\treturn _architecture = ProcessArchitecture.NetFrameworkV4;\n\n\t\t\t\t\tif (HasModule(\"mscorwks.dll\"))\n\t\t\t\t\t\treturn _architecture = ProcessArchitecture.NetFrameworkV2;\n\t\t\t\t}\n\n\t\t\t\tif (HasModule(\"coreclr.dll\"))\n\t\t\t\t\treturn _architecture = ProcessArchitecture.NetCore;\n\n\n\t\t\t\tif (HasModule(\"mono-2.0-bdwgc.dll\"))\n\t\t\t\t\treturn _architecture = ProcessArchitecture.Mono;\n\n\t\t\t\treturn ProcessArchitecture.Unknown;\n\t\t\t}\n\t\t\tcatch (Exception)\n\t\t\t{\n\t\t\t\treturn ProcessArchitecture.Unknown;\n\t\t\t}\n\t\t}\n\n\t\tpublic IInjector GetInjector()\n\t\t{\n\t\t\tvar arch = GetArchitecture();\n\t\t\treturn arch switch\n\t\t\t{\n\t\t\t\tProcessArchitecture.NetFrameworkV2 => new FrameworkV2Injector(),\n\t\t\t\tProcessArchitecture.NetFrameworkV4 => new FrameworkV4Injector(),\n\t\t\t\tProcessArchitecture.Mono => throw new NotImplementedException(\"Mono injector is not yet implemented\"),\n\t\t\t\tProcessArchitecture.NetCore => throw new NotImplementedException(\n\t\t\t\t\t\".NET Core injector is not yet implemented\"),\n\t\t\t\tProcessArchitecture.Unknown => throw new Exception(\n\t\t\t\t\t\"Tried to inject into process with unknown architecture\"),\n\t\t\t\t_ => throw new NotSupportedException($\"No injector found for architecture {arch}\"),\n\t\t\t};\n\t\t}\n\n\t\tpublic void Inject(string dllPath, string typeName, string methodName)\n\t\t{\n\t\t\tIInjector injector = GetInjector();\n\n\t\t\tInject(injector, dllPath, typeName, methodName);\n\t\t}\n\n\t\tpublic void Inject(IInjector injector, string dllPath, string typeName, string methodName) =>\n\t\t\tinjector.Inject(this, dllPath, typeName, methodName);\n\n\t\tprivate void ReleaseUnmanagedResources()\n\t\t{\n\t\t\tif (_handle != IntPtr.Zero)\n\t\t\t\tNative.CloseHandle(_handle);\n\t\t}\n\n\t\tpublic void Dispose()\n\t\t{\n\t\t\tReleaseUnmanagedResources();\n\t\t\tGC.SuppressFinalize(this);\n\t\t}\n\n\t\t~InjectableProcess()\n\t\t{\n\t\t\tReleaseUnmanagedResources();\n\t\t}\n\t}\n}\n\n'ManagedInjector/ManagedInjector.Lib/Injectors/FrameworkV2Injector.cs'\n:namespace HoLLy.ManagedInjector.Injectors\n{\n\tpublic class FrameworkV2Injector : FrameworkInjectorBase\n\t{\n\t\tprotected override string GetClrVersion() => \"v2.0.50727\";\n\t}\n}\n",
        "gt": [
            "'ManagedInjector/ManagedInjector.Lib/Injectors/FrameworkV2Injector.cs'",
            "'ManagedInjector/ManagedInjector.Lib/InjectableProcess.cs'",
            "'ManagedInjector/ManagedInjector.GUI/Models/UserProcess.cs'",
            "'ManagedInjector/ManagedInjector.GUI/UI/MainWindow/MainWindowVM.cs'"
        ]
    },
    {
        "files": [
            "'ETCore/ETServer/Server/ET.Core/Module/DB/DBQueryTask.cs'",
            "'ETCore/ETServer/Server/Hotfix/Module/ActorLocation/ObjectAddRequestHandler.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/MongoIndexManagerBase.cs'"
        ],
        "content": "'ETCore/ETServer/Server/ET.Core/Module/DB/DBQueryTask.cs'\n:﻿using System;\nusing System.Threading.Tasks;\nusing MongoDB.Driver;\n\nnamespace ETModel\n{\n\t[ObjectSystem]\n\tpublic class DBQueryTaskSystem : AwakeSystem<DBQueryTask, string, TaskCompletionSource<ComponentWithId>>\n\t{\n\t\tpublic override void Awake(DBQueryTask self, string collectionName, TaskCompletionSource<ComponentWithId> tcs)\n\t\t{\n\t\t\tself.CollectionName = collectionName;\n\t\t\tself.Tcs = tcs;\n\t\t}\n\t}\n\n\tpublic sealed class DBQueryTask : DBTask\n\t{\n\t\tpublic string CollectionName { get; set; }\n\n\t\tpublic TaskCompletionSource<ComponentWithId> Tcs { get; set; }\n\n\t\tpublic override async Task Run()\n\t\t{\n\t\t\tDBCacheComponent dbCacheComponent = Game.Scene.GetComponent<DBCacheComponent>();\n\t\t\tDBComponent dbComponent = Game.Scene.GetComponent<DBComponent>();\n\n\t\t\tComponentWithId component = dbCacheComponent.GetFromCache(this.CollectionName, this.Id);\n\t\t\tif (component != null)\n\t\t\t{\n\t\t\t\tthis.Tcs.SetResult(component);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttry\n\t\t\t{\n\n\t\t\t\tIAsyncCursor<ComponentWithId> cursor = await dbComponent.GetCollection(this.CollectionName).FindAsync((s) => s.Id == this.Id);\n\t\t\t\tcomponent = await cursor.FirstOrDefaultAsync();\n\t\t\t\tthis.Tcs.SetResult(component);\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tthis.Tcs.SetException(new Exception($\"查询数据库异常! {CollectionName} {Id}\", e));\n\t\t\t}\n\t\t}\n\t}\n}\n'ETCore/ETServer/Server/Hotfix/Module/ActorLocation/ObjectAddRequestHandler.cs'\n:﻿using System;\nusing ETModel;\n\nnamespace ETHotfix\n{\n\t[MessageHandler(AppType.Location)]\n\tpublic class ObjectAddRequestHandler : AMRpcHandler<ObjectAddRequest, ObjectAddResponse>\n\t{\n\t\tprotected override async ETTask Run(Session session, ObjectAddRequest request, ObjectAddResponse response, Action reply)\n\t\t{\n\t\t\tGame.Scene.GetComponent<LocationComponent>().Add(request.Key, request.InstanceId);\n\t\t\treply();\n\t\t\tawait ETTask.CompletedTask;\n\t\t}\n\t}\n}\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/MongoIndexManagerBase.cs'\n:\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing MongoDB.Bson;\nusing MongoDB.Bson.Serialization;\n\nnamespace MongoDB.Driver\n{\n\n\n\n\n    public abstract class MongoIndexManagerBase<TDocument> : IMongoIndexManager<TDocument>\n    {\n\n\n        public abstract CollectionNamespace CollectionNamespace { get; }\n\n\n        public abstract IBsonSerializer<TDocument> DocumentSerializer { get; }\n\n\n        public abstract MongoCollectionSettings Settings { get; }\n\n\n\n        [Obsolete(\"Use CreateOne with a CreateIndexModel instead.\")]\n        public virtual string CreateOne(IndexKeysDefinition<TDocument> keys, CreateIndexOptions options = null, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            var model = new CreateIndexModel<TDocument>(keys, options);\n            var result = CreateMany(new[] { model }, cancellationToken);\n            return result.Single();\n        }\n\n\n        public virtual string CreateOne(\n            CreateIndexModel<TDocument> model,\n            CreateOneIndexOptions options = null,\n            CancellationToken cancellationToken = default(CancellationToken))\n        {\n            var createManyIndexOptions = ToCreateManyIndexesOptions(options);\n            var result = CreateMany(new[] { model }, createManyIndexOptions, cancellationToken);\n            return result.Single();\n        }\n\n\n        [Obsolete(\"Use CreateOne with a CreateIndexModel instead.\")]\n        public virtual string CreateOne(IClientSessionHandle session, IndexKeysDefinition<TDocument> keys, CreateIndexOptions options = null, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            var model = new CreateIndexModel<TDocument>(keys, options);\n            var result = CreateMany(session, new[] { model }, cancellationToken);\n            return result.Single();\n        }\n\n\n        public virtual string CreateOne(\n            IClientSessionHandle session,\n            CreateIndexModel<TDocument> model,\n            CreateOneIndexOptions options = null,\n            CancellationToken cancellationToken = default(CancellationToken))\n        {\n            var createManyIndexOptions = ToCreateManyIndexesOptions(options);\n            var result = CreateMany(session, new[] { model }, createManyIndexOptions, cancellationToken);\n            return result.Single();\n        }\n\n\n        [Obsolete(\"Use CreateOneAsync with a CreateIndexModel instead.\")]\n        public virtual async Task<string> CreateOneAsync(IndexKeysDefinition<TDocument> keys, CreateIndexOptions options = null, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            var model = new CreateIndexModel<TDocument>(keys, options);\n            var result = await CreateManyAsync(new[] { model }, cancellationToken).ConfigureAwait(false);\n            return result.Single();\n        }\n\n\n        public virtual async Task<string> CreateOneAsync(\n            CreateIndexModel<TDocument> model,\n            CreateOneIndexOptions options = null,\n            CancellationToken cancellationToken = default(CancellationToken))\n        {\n             var createManyIndexOptions = ToCreateManyIndexesOptions(options);\n             var result = await CreateManyAsync(new[] { model }, createManyIndexOptions, cancellationToken).ConfigureAwait(false);\n             return result.Single();\n        }\n\n\n        [Obsolete(\"Use CreateOneAsync with a CreateIndexModel instead.\")]\n        public virtual async Task<string> CreateOneAsync(IClientSessionHandle session, IndexKeysDefinition<TDocument> keys, CreateIndexOptions options = null, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            var model = new CreateIndexModel<TDocument>(keys, options);\n            var result = await CreateManyAsync(session, new[] { model }, cancellationToken).ConfigureAwait(false);\n            return result.Single();\n        }\n\n\n        public virtual async Task<string> CreateOneAsync(\n            IClientSessionHandle session,\n            CreateIndexModel<TDocument> model,\n            CreateOneIndexOptions options = null,\n            CancellationToken cancellationToken = default(CancellationToken))\n        {\n            var createManyIndexOptions = ToCreateManyIndexesOptions(options);\n            var result = await CreateManyAsync(session, new[] { model }, createManyIndexOptions, cancellationToken).ConfigureAwait(false);\n            return result.Single();\n        }\n\n\n        public virtual IEnumerable<string> CreateMany(IEnumerable<CreateIndexModel<TDocument>> models, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual IEnumerable<string> CreateMany(\n            IEnumerable<CreateIndexModel<TDocument>> models,\n            CreateManyIndexesOptions options,\n            CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual IEnumerable<string> CreateMany(IClientSessionHandle session, IEnumerable<CreateIndexModel<TDocument>> models, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual IEnumerable<string> CreateMany(IClientSessionHandle session, IEnumerable<CreateIndexModel<TDocument>> models, CreateManyIndexesOptions options,\n            CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual Task<IEnumerable<string>> CreateManyAsync(IEnumerable<CreateIndexModel<TDocument>> models, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual Task<IEnumerable<string>> CreateManyAsync(IEnumerable<CreateIndexModel<TDocument>> models, CreateManyIndexesOptions options,\n            CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual Task<IEnumerable<string>> CreateManyAsync(IClientSessionHandle session, IEnumerable<CreateIndexModel<TDocument>> models, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual Task<IEnumerable<string>> CreateManyAsync(\n            IClientSessionHandle session,\n            IEnumerable<CreateIndexModel<TDocument>> models,\n            CreateManyIndexesOptions options,\n            CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual void DropAll(DropIndexOptions options, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual void DropAll(CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual void DropAll(IClientSessionHandle session, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual void DropAll(IClientSessionHandle session, DropIndexOptions options, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual Task DropAllAsync(DropIndexOptions options, CancellationToken cancellationToken)\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public abstract Task DropAllAsync(CancellationToken cancellationToken = default(CancellationToken));\n\n\n        public virtual Task DropAllAsync(IClientSessionHandle session, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual Task DropAllAsync(IClientSessionHandle session, DropIndexOptions options, CancellationToken cancellationToken)\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual void DropOne(string name, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual void DropOne(string name, DropIndexOptions options, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual void DropOne(IClientSessionHandle session, string name, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual void DropOne(IClientSessionHandle session, string name, DropIndexOptions options, CancellationToken cancellationToken)\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public abstract Task DropOneAsync(string name, CancellationToken cancellationToken = default(CancellationToken));\n\n\n        public virtual Task DropOneAsync(string name, DropIndexOptions options, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual Task DropOneAsync(IClientSessionHandle session, string name, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual Task DropOneAsync(IClientSessionHandle session, string name, DropIndexOptions options, CancellationToken cancellationToken)\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual IAsyncCursor<BsonDocument> List(CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public virtual IAsyncCursor<BsonDocument> List( IClientSessionHandle session, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n\n        public abstract Task<IAsyncCursor<BsonDocument>> ListAsync(CancellationToken cancellationToken = default(CancellationToken));\n\n\n        public virtual Task<IAsyncCursor<BsonDocument>> ListAsync(IClientSessionHandle session, CancellationToken cancellationToken = default(CancellationToken))\n        {\n            throw new NotImplementedException();\n        }\n\n        private CreateManyIndexesOptions ToCreateManyIndexesOptions(CreateOneIndexOptions options)\n        {\n            return new CreateManyIndexesOptions { MaxTime = options?.MaxTime };\n        }\n    }\n}\n",
        "gt": [
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/MongoIndexManagerBase.cs'",
            "'ETCore/ETServer/Server/ET.Core/Module/DB/DBQueryTask.cs'",
            "'ETCore/ETServer/Server/Hotfix/Module/ActorLocation/ObjectAddRequestHandler.cs'"
        ]
    },
    {
        "files": [
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Observable.Binding.cs'",
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/RefCount.cs'",
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/SynchronizedObserver.cs'",
            "'UniRxSimpleGame/Assets/Game.cs'"
        ],
        "content": "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Observable.Binding.cs'\n:﻿using System;\nusing UniRx.Operators;\n\nnamespace UniRx\n{\n    public static partial class Observable\n    {\n        public static IConnectableObservable<T> Multicast<T>(this IObservable<T> source, ISubject<T> subject)\n        {\n            return new ConnectableObservable<T>(source, subject);\n        }\n\n        public static IConnectableObservable<T> Publish<T>(this IObservable<T> source)\n        {\n            return source.Multicast(new Subject<T>());\n        }\n\n        public static IConnectableObservable<T> Publish<T>(this IObservable<T> source, T initialValue)\n        {\n            return source.Multicast(new BehaviorSubject<T>(initialValue));\n        }\n\n        public static IConnectableObservable<T> PublishLast<T>(this IObservable<T> source)\n        {\n            return source.Multicast(new AsyncSubject<T>());\n        }\n\n        public static IConnectableObservable<T> Replay<T>(this IObservable<T> source)\n        {\n            return source.Multicast(new ReplaySubject<T>());\n        }\n\n        public static IConnectableObservable<T> Replay<T>(this IObservable<T> source, IScheduler scheduler)\n        {\n            return source.Multicast(new ReplaySubject<T>(scheduler));\n        }\n\n        public static IConnectableObservable<T> Replay<T>(this IObservable<T> source, int bufferSize)\n        {\n            return source.Multicast(new ReplaySubject<T>(bufferSize));\n        }\n\n        public static IConnectableObservable<T> Replay<T>(this IObservable<T> source, int bufferSize, IScheduler scheduler)\n        {\n            return source.Multicast(new ReplaySubject<T>(bufferSize, scheduler));\n        }\n\n        public static IConnectableObservable<T> Replay<T>(this IObservable<T> source, TimeSpan window)\n        {\n            return source.Multicast(new ReplaySubject<T>(window));\n        }\n\n        public static IConnectableObservable<T> Replay<T>(this IObservable<T> source, TimeSpan window, IScheduler scheduler)\n        {\n            return source.Multicast(new ReplaySubject<T>(window, scheduler));\n        }\n\n        public static IConnectableObservable<T> Replay<T>(this IObservable<T> source, int bufferSize, TimeSpan window, IScheduler scheduler)\n        {\n            return source.Multicast(new ReplaySubject<T>(bufferSize, window, scheduler));\n        }\n\n        public static IObservable<T> RefCount<T>(this IConnectableObservable<T> source)\n        {\n            return new RefCountObservable<T>(source);\n        }\n\n\n\n\n        public static IObservable<T> Share<T>(this IObservable<T> source)\n        {\n            return source.Publish().RefCount();\n        }\n    }\n}\n'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/RefCount.cs'\n:﻿using System;\nusing UniRx.Operators;\n\nnamespace UniRx.Operators\n{\n    internal class RefCountObservable<T> : OperatorObservableBase<T>\n    {\n        readonly IConnectableObservable<T> source;\n        readonly object gate = new object();\n        int refCount = 0;\n        IDisposable connection;\n\n        public RefCountObservable(IConnectableObservable<T> source)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)\n        {\n            return new RefCount(this, observer, cancel).Run();\n        }\n\n        class RefCount : OperatorObserverBase<T, T>\n        {\n            readonly RefCountObservable<T> parent;\n\n            public RefCount(RefCountObservable<T> parent, IObserver<T> observer, IDisposable cancel) : base(observer, cancel)\n            {\n                this.parent = parent;\n            }\n\n            public IDisposable Run()\n            {\n                var subcription = parent.source.Subscribe(this);\n\n                lock (parent.gate)\n                {\n                    if (++parent.refCount == 1)\n                    {\n                        parent.connection = parent.source.Connect();\n                    }\n                }\n\n                return Disposable.Create(() =>\n                {\n                    subcription.Dispose();\n\n                    lock (parent.gate)\n                    {\n                        if (--parent.refCount == 0)\n                        {\n                            parent.connection.Dispose();\n                        }\n                    }\n                });\n            }\n\n            public override void OnNext(T value)\n            {\n                base.observer.OnNext(value);\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); }\n                finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                try { observer.OnCompleted(); }\n                finally { Dispose(); }\n            }\n        }\n    }\n}\n'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/SynchronizedObserver.cs'\n:﻿using System;\n\nnamespace UniRx.Operators\n{\n    internal class SynchronizedObserver<T> : IObserver<T>\n    {\n        readonly IObserver<T> observer;\n        readonly object gate;\n\n        public SynchronizedObserver(IObserver<T> observer, object gate)\n        {\n            this.observer = observer;\n            this.gate = gate;\n        }\n\n        public void OnNext(T value)\n        {\n            lock (gate)\n            {\n                observer.OnNext(value);\n            }\n        }\n\n        public void OnError(Exception error)\n        {\n            lock (gate)\n            {\n                observer.OnError(error);\n            }\n        }\n\n        public void OnCompleted()\n        {\n            lock (gate)\n            {\n                observer.OnCompleted();\n            }\n        }\n    }\n}\n\n'UniRxSimpleGame/Assets/Game.cs'\n:﻿using System;\nusing UnityEngine;\nusing UniRx;\nusing UnityEngine.UI;\n\npublic class Game : MonoBehaviour\n{\n    public CompositeDisposable disposables = new CompositeDisposable();\n\n\n    public IntReactiveProperty score = new IntReactiveProperty(0);\n    public IntReactiveProperty level = new IntReactiveProperty(0);\n\n    private ReactiveProperty<int> scoreDelayed, highscore;\n\n\n    public GameObject mainMenu, endMenu, gameMenu;\n\n\n    public Button startButton, restartButton;\n\n\n    public Text scoreText, deltaScoreText, levelText;\n    public Text endMenuScoreText, endMenuHighcoreText;\n\n\n\n    public GameObject redBlock;\n    public GameObject[] blocks;\n    public Material whiteMaterial, yellowMaterial;\n\n\n    void Start () {\n\n\n\n        mainMenu.SetActive(true);\n        endMenu.SetActive(false);\n        gameMenu.SetActive(false);\n\n\n\n\n\n\n\n        scoreDelayed = score.Throttle(TimeSpan.FromSeconds(1)).ToReactiveProperty();\n\n\n        var scoreDelta = score.Select(x => x - scoreDelayed.Value);\n\n\n        scoreDelta.SubscribeToText(deltaScoreText, x => (x > 0 ? (\"+\" + x) : x.ToString()));\n\n\n        scoreDelta.Subscribe(_ => AnimateObj(deltaScoreText.gameObject));\n\n        scoreDelayed.Subscribe(delayedScore => {\n\n            scoreText.text = delayedScore.ToString();\n\n\n            AnimateObj(scoreText.gameObject);\n\n\n            deltaScoreText.text = \"\";\n        });\n\n\n\n\n        int lastHighScore = PlayerPrefs.GetInt(\"highscore\");\n        highscore = score.StartWith(lastHighScore).DistinctUntilChanged().Scan(int.MinValue, Math.Max).Do(x => PlayerPrefs.SetInt(\"highscore\", x)).ToReactiveProperty();\n\n\n\n\n        level.SubscribeToText(levelText, x => \"Level \" + x.ToString());\n\n\n\n\n        startButton.onClick.AddListener(StartGame);\n        restartButton.onClick.AddListener(StartGame);\n    }\n\n    public void OnApplicationQuit() {\n        disposables.Dispose();\n    }\n\n\n\n\n    public void StartGame() {\n\n\n\n        mainMenu.SetActive(false);\n        endMenu.SetActive(false);\n        gameMenu.SetActive(true);\n\n\n\n\n        score.Value = 0;\n        scoreDelayed.SetValueAndForceNotify(0);\n\n\n\n\n        level.Value = 1;\n\n\n        SetupGameLogic();\n    }\n\n\n\n\n    public void SetupGameLogic() {\n\n\n\n\n        int targetValue = 0;\n        float currentValueFloat = 0f, speed = 1f;\n\n        ReactiveProperty<int> currentValue = new ReactiveProperty<int>();\n\n\n\n\n        level.Subscribe(x => {\n            speed = 1.5f + x * 0.2f;\n\n\n            currentValueFloat = 0;\n            currentValue.Value = 0;\n\n\n            int newRandom = UnityEngine.Random.Range(0, blocks.Length);\n            if (newRandom != targetValue)\n                targetValue = newRandom;\n            else\n                targetValue = (newRandom+1) % blocks.Length;\n\n\n            for (int i = 0; i < blocks.Length; i++) {\n                blocks[i].GetComponentInChildren<MeshRenderer>().sharedMaterial = i == targetValue ? yellowMaterial : whiteMaterial;\n            }\n        }).AddTo(disposables);\n\n\n\n\n\n        Observable.EveryUpdate().Subscribe(x => {\n\n            currentValueFloat += speed * Time.smoothDeltaTime;\n\n            if (currentValueFloat > blocks.Length) currentValueFloat = 0;\n\n\n            currentValue.Value = Mathf.FloorToInt(currentValueFloat);\n\n        }).AddTo(disposables);\n\n\n\n\n        var redBlockTrans = redBlock.transform;\n        currentValue.Subscribe(x => {\n            redBlockTrans.localPosition = new Vector3(x * 2, 1.2f, 0f);\n        });\n\n\n\n\n        TapStream().Subscribe(x => {\n            if (currentValue.Value == targetValue) {\n                score.Value++;\n                level.Value++;\n            } else {\n                StopGame();\n            }\n        }).AddTo(disposables);\n\n    }\n\n\n\n\n    public void StopGame() {\n        disposables.Clear();\n        PlayerPrefs.Save();\n\n\n\n\n        endMenuScoreText.text = score.Value.ToString();\n        endMenuHighcoreText.text = \"BEST \" + highscore.Value.ToString();\n\n\n\n\n        mainMenu.SetActive(false);\n        endMenu.SetActive(true);\n        gameMenu.SetActive(false);\n    }\n\n\n\n\n\n    public IObservable<Vector3> TapStream() {\n        return Observable.EveryUpdate()\n            .Where(_ => Input.GetMouseButtonDown(0))\n            .Select(_ => Input.mousePosition);\n    }\n\n\n\n\n\n    public void AnimateObj(GameObject go) {\n        LeanTween.scale(go, Vector3.one, 0.2f)\n            .setFrom(Vector3.one*0.5f)\n            .setEase(LeanTweenType.easeOutBack);\n    }\n}\n",
        "gt": [
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/SynchronizedObserver.cs'",
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/RefCount.cs'",
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Observable.Binding.cs'",
            "'UniRxSimpleGame/Assets/Game.cs'"
        ]
    },
    {
        "files": [
            "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/HairSceneDescriptor.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/Apex.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/Program.cs'",
            "'WolvenKit-7/WolvenKit.CR2W/Types/Generic/Arrays/CPaddedBuffer.cs'"
        ],
        "content": "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'\n:﻿using System.Linq;\nusing System.Xml.Linq;\nusing WolvenKit;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit.Nvidia.HairWorks\n{\n    class NvHairAssetDescriptor\n    {\n\n        public string checksum = \"0x299b335f 0x2cad8b54 0xcaf3c98f 0xa3094fa7\";\n\n        public XElement serialize(CFurMeshResource chunk)\n        {\n\n\n            var ret = NvidiaXML.CreateStructHeader(\"\", \"Ref\", \"HairSceneDescriptor\", \"1.0\", checksum);\n            ret.AddNvValue(\"numGuideHairs\", \"U32\", chunk.BoneIndices.Count.ToString());\n            ret.AddNvValue(\"numVertices\",\"U32\", chunk.Positions.Count.ToString());\n            ret.AddNvArray(\"vertices\",\"Vec3\",\"\",Apex.FormatCoordinateArray(chunk.Positions));\n            var endindicies = chunk.EndIndices;\n            ret.AddNvArray(\"endIndices\",\"U32\",endindicies.Count.ToString(),endindicies.Aggregate(\"\",(c,n) => c += \" \" + n));\n            ret.AddNvValue(\"numFaces\",\"U32\",\"\");\n            var faceIndices = chunk.FaceIndices;\n            ret.AddNvArray(\"faceIndices\",\"U32\",faceIndices.Count.ToString(),faceIndices.Aggregate(\"\",(c,n) => c += \" \" + n));\n            ret.AddNvArray(\"faceUVs\",\"Vec2\",\"\",\"\");\n            ret.AddNvValue(\"numBones\", \"U32\", chunk.BoneCount.ToString());\n            ret.AddNvArray(\"boneIndices\",\"Vec4\",\"\",\"\");\n            ret.AddNvArray(\"boneWeights\",\"Vec4\",\"\",\"\");\n            ret.AddNvArray(\"boneNames\",\"U8\",\"\",\"\");\n            ret.AddNvArray(\"boneNameList\",\"String\",\"\",\"\");\n            ret.AddNvArray(\"bindPoses\",\"Mat44\",\"\",\"\");\n            ret.AddNvArray(\"boneParents\",\"I32\",\"\",\"\");\n            ret.AddNvValue(\"numBoneSpheres\",\"U32\",\"\");\n            ret.AddNvArray(\"boneSpheres\",\"Struct\",\"\",\"\");\n            ret.AddNvValue(\"numBoneCapsules\",\"U32\",\"\");\n            ret.AddNvArray(\"boneCapsuleIndices\",\"U32\",\"\",\"\");\n            ret.AddNvValue(\"numPinConstraints\",\"U32\",\"\");\n            ret.AddNvArray(\"pinConstraints\",\"Struct\",\"\",\"\");\n            ret.AddNvValue(\"sceneUnit\",\"F32\",\"\");\n            ret.AddNvValue(\"upAxis\",\"U32\",\"\");\n            ret.AddNvValue(\"handedness\",\"U32\",\"\");\n            return ret;\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.Nvidia/HairWorks/HairSceneDescriptor.cs'\n:﻿using System.Xml.Linq;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit.Nvidia.HairWorks\n{\n    class HairSceneDescriptor\n    {\n\n\n        public string checksum = \"0x299b335f 0x2cad8b54 0xcaf3c98f 0xa3094fa7\";\n        public XElement serialize(CFurMeshResource apexChunk)\n        {\n            var ret = NvidiaXML.CreateStructHeader(\"\",\"Ref\",\"HairSceneDescriptor\",\"1.0\",checksum);\n            var values = new XElement(\"struct\", new XAttribute(\"name\", \"\"));\n\n            values.AddNvValue(\"densityTexture\",\"String\",\"\");\n            values.AddNvValue(\"rootColorTexture\",\"String\",\"\");\n            values.AddNvValue(\"tipColorTexture\",\"String\",\"\");\n            values.AddNvValue(\"widthTexture\",\"String\",\"\");\n            values.AddNvValue(\"rootWidthTexture\",\"String\",\"\");\n            values.AddNvValue(\"tipWidthTexture\",\"String\",\"\");\n            values.AddNvValue(\"stiffnessTexture\",\"String\",\"\");\n            values.AddNvValue(\"rootStiffnessTexture\",\"String\",\"\");\n            values.AddNvValue(\"clumpScaleTexture\",\"String\",\"\");\n            values.AddNvValue(\"clumpRoundnessTexture\",\"String\",\"\");\n            values.AddNvValue(\"clumpNoiseTexture\",\"String\",\"\");\n            values.AddNvValue(\"waveScaletexture\",\"String\",\"\");\n            values.AddNvValue(\"waveFreqTexture\",\"String\",\"\");\n            values.AddNvValue(\"strandTexture\",\"String\",\"\");\n            values.AddNvValue(\"lengthTexture\",\"String\",\"\");\n            values.AddNvValue(\"specularTexture\",\"String\",\"\");\n            ret.Add(values);\n            return ret;\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.Nvidia/Apex.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Collections.Specialized;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Xml;\nusing System.Xml.Linq;\nusing System.Xml.Serialization;\nusing WolvenKit.Nvidia.HairWorks;\nusing WolvenKit.CR2W;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit\n{\n    public class Apex\n    {\n\n\n\n        public class HairWorks\n        {\n            public static XDocument Doc = new XDocument();\n\n            public static XDocument ConvertToApexXml(CR2WFile ApexChunk)\n            {\n                if (ApexChunk.chunks[0].REDType == \"CFurMeshResource\" && ApexChunk.chunks[0].data is CFurMeshResource cFurMesh)\n                {\n                    var root = new XElement(\"root\",\"\");\n\n                    var NvParameters = new XElement(\"NvParameters\");\n                    NvParameters.Add(new XAttribute(\"numObjects\", \"4\"));\n                    NvParameters.Add(new XAttribute(\"version\", \"1.0\"));\n                    root.Add(NvParameters);\n\n                    var hairassetheaderinfo = new NvHairAssetHeaderInfo();\n                    root.Add(hairassetheaderinfo.serialize(cFurMesh, 4));\n\n                    var hairscenedesc = new HairSceneDescriptor();\n                    root.Add(hairscenedesc.serialize(cFurMesh));\n\n                    var hairassetdescriptor = new NvHairAssetDescriptor();\n                    root.Add(hairassetdescriptor.serialize(cFurMesh));\n\n                    var hairinstancedescriptor = new NvHairInstanceDescriptor();\n                    root.Add(hairinstancedescriptor.serialize(cFurMesh));\n                    return new XDocument(root);\n                }\n                else\n                {\n                    throw new InvalidChunkTypeException(\"Not a valid apex file chunk!\");\n                }\n            }\n\n            public static CR2WFile ConvertToCr2W(XDocument ApexFile)\n            {\n                var crw = new CR2WFile();\n                return crw;\n            }\n        }\n\n\n\n\n\n\n\n        public static string FormatCoordinateArray(CArray<Vector> coords)\n        {\n            var ret = \"\";\n            foreach (var coord in coords)\n            {\n                ret += coord.X.ToString() + \" \";\n                ret += coord.Y.ToString() + \" \";\n                ret += coord.Z.ToString() + \", \";\n            }\n            return ret.Trim(',',' ');\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.Nvidia/Program.cs'\n:﻿using System;\nusing System.IO;\nusing WolvenKit.Nvidia.HairWorks;\nusing WolvenKit.CR2W;\n\nnamespace WolvenKit.Nvidia\n{\n    class Program\n    {\n\n        [STAThread]\n        static void Main(string[] args)\n        {\n            var br = new BinaryReader(new FileStream(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\hw.redfur\",FileMode.Open));\n            var redfur = new CR2WFile();\n            redfur.Read(br);\n            Apex.HairWorks.ConvertToApexXml(redfur).Save(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\out.apx\");\n            NvidiaXML.BreakXmlHeader(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\out.apx\");\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.CR2W/Types/Generic/Arrays/CPaddedBuffer.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.Serialization;\nusing System.Text;\nusing System.Threading.Tasks;\n\nusing WolvenKit.CR2W.Reflection;\n\nnamespace WolvenKit.CR2W.Types\n{\n    [REDMeta()]\n    public class CPaddedBuffer<T> : CBufferBase<T> where T : CVariable\n    {\n        public CFloat padding;\n\n        public CPaddedBuffer(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name)\n        {\n            padding = new CFloat(cr2w, this, \"padding\" );\n        }\n\n        public static CVariable Create(CR2WFile cr2w, CVariable parent, string name) => new CPaddedBuffer<T>(cr2w, parent, name);\n\n        public override void Read(BinaryReader file, uint size)\n        {\n            CDynamicInt count = new CDynamicInt(cr2w, null, \"\");\n            count.Read(file, size);\n\n            base.Read(file, size, count.val);\n\n            padding.Read(file, 4);\n\n        }\n\n        public override List<IEditableVariable> GetEditableVariables()\n        {\n            return new List<IEditableVariable>(elements)\n            {\n                padding,\n            };\n        }\n\n        public override void Write(BinaryWriter file)\n        {\n            CDynamicInt count = new CDynamicInt(cr2w, null, \"\")\n            {\n                val = elements.Count\n            };\n            count.Write(file);\n\n            base.Write(file);\n\n            padding.Write(file);\n        }\n\n        public override CVariable Copy(CR2WCopyAction context)\n        {\n            var copy = base.Copy(context) as CPaddedBuffer<T>;\n\n\n\n\n\n\n\n\n            copy.padding = (CFloat)padding.Copy(context);\n\n            return copy;\n        }\n    }\n\n\n}",
        "gt": [
            "'WolvenKit-7/WolvenKit.CR2W/Types/Generic/Arrays/CPaddedBuffer.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/HairSceneDescriptor.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/Apex.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/Program.cs'"
        ]
    },
    {
        "files": [
            "'ASP.NET-Core-MVC-Tutorial-Code/25 start/Heavy.Web/Controllers/AlbumController.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/22 start/Heavy.Web/Controllers/UserController.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/18 start/Heavy.Web/ViewModels/UserRoleViewModel.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/26 start/Heavy.Web/ViewModels/RoleAddViewModel.cs'"
        ],
        "content": "'ASP.NET-Core-MVC-Tutorial-Code/25 start/Heavy.Web/Controllers/AlbumController.cs'\n:﻿using System.Collections.Generic;\nusing System.Text.Encodings.Web;\nusing System.Threading.Tasks;\nusing Heavy.Web.Data;\nusing Heavy.Web.Models;\nusing Heavy.Web.Services;\nusing Heavy.Web.ViewModels;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\n\nnamespace Heavy.Web.Controllers\n{\n    [Authorize(Policy = \"编辑专辑2\")]\n    public class AlbumController : Controller\n    {\n        private readonly IAlbumService _albumService;\n        private readonly HtmlEncoder _htmlEncoder;\n        private readonly ILogger<AlbumController> _logger;\n\n        public AlbumController(IAlbumService albumService,\n            HtmlEncoder htmlEncoder,\n            ILogger<AlbumController> logger)\n        {\n            _albumService = albumService;\n            _htmlEncoder = htmlEncoder;\n            _logger = logger;\n        }\n\n\n        public async Task<ActionResult> Index()\n        {\n            var albums = await _albumService.GetAllAsync();\n            return View(albums);\n        }\n\n\n        public async Task<ActionResult> Details(int id)\n        {\n            _logger.LogInformation(MyLogEventIds.AlbumPage, \"Visiting Album {0}\", id);\n\n            var album = await _albumService.GetByIdAsync(id);\n            if (album == null)\n            {\n                return RedirectToAction(nameof(Index));\n            }\n            return View(album);\n        }\n\n\n        public ActionResult Create()\n        {\n            var newModel = new AlbumCreateViewModel();\n            return View(newModel);\n        }\n\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<ActionResult> Create(AlbumCreateViewModel albumCreateViewModel)\n        {\n            if (!ModelState.IsValid)\n            {\n                ModelState.AddModelError(string.Empty, \"Model is not valid\");\n                return View();\n            }\n            try\n            {\n                var newModel = await _albumService.AddAsync(new Album\n                {\n                    Artist = _htmlEncoder.Encode(albumCreateViewModel.Artist),\n                    Title = albumCreateViewModel.Title,\n                    CoverUrl = albumCreateViewModel.CoverUrl,\n                    Price = albumCreateViewModel.Price,\n                    ReleaseDate = albumCreateViewModel.ReleaseDate\n                });\n                return RedirectToAction(nameof(Details), new { id = newModel.Id });\n            }\n            catch\n            {\n                return View(albumCreateViewModel);\n            }\n        }\n\n\n        public async Task<ActionResult> Edit(int id)\n        {\n            var model = await _albumService.GetByIdAsync(id);\n            if (model == null)\n            {\n                return RedirectToAction(nameof(Index));\n            }\n\n            var editModel = new AlbumUpdateViewModel\n            {\n                Artist = model.Artist,\n                Title = model.Title,\n                CoverUrl = model.CoverUrl,\n                Price = model.Price,\n                ReleaseDate = model.ReleaseDate\n            };\n            return View(editModel);\n        }\n\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<ActionResult> Edit(int id, AlbumUpdateViewModel albumUpdateViewModel)\n        {\n            var model = await _albumService.GetByIdAsync(id);\n            if (model == null)\n            {\n\n                return View(albumUpdateViewModel);\n            }\n\n            try\n            {\n                model.Artist = albumUpdateViewModel.Artist;\n                model.Title = albumUpdateViewModel.Title;\n                model.CoverUrl = albumUpdateViewModel.CoverUrl;\n                model.ReleaseDate = albumUpdateViewModel.ReleaseDate;\n                model.Price = albumUpdateViewModel.Price;\n\n                await _albumService.UpdateAsync(model);\n\n                return RedirectToAction(nameof(Index));\n            }\n            catch\n            {\n                return View(albumUpdateViewModel);\n            }\n        }\n\n\n        public async Task<ActionResult> Delete(int id)\n        {\n            var model = await _albumService.GetByIdAsync(id);\n            if (model == null)\n            {\n                return RedirectToAction(nameof(Index));\n            }\n\n            return View(model);\n        }\n\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<ActionResult> Delete(int id, IFormCollection collection)\n        {\n            var model = await _albumService.GetByIdAsync(id);\n            if (model == null)\n            {\n                return RedirectToAction(nameof(Index));\n\n            }\n\n            try\n            {\n                await _albumService.DeleteAsync(model);\n                return RedirectToAction(nameof(Index));\n            }\n            catch\n            {\n                return View();\n            }\n        }\n\n        public ActionResult List(\n            [FromQuery] int id,\n            [FromHeader(Name = \"Accept\")] string accept)\n        {\n            return View();\n        }\n\n        [HttpPost]\n        public IActionResult List(List<SomeModel> items)\n        {\n            return View();\n        }\n    }\n\n    public class SomeModel\n    {\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n    }\n}\n'ASP.NET-Core-MVC-Tutorial-Code/22 start/Heavy.Web/Controllers/UserController.cs'\n:﻿using System.Linq;\nusing System.Threading.Tasks;\nusing Heavy.Web.Data;\nusing Heavy.Web.Models;\nusing Heavy.Web.ViewModels;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.ModelBinding;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Heavy.Web.Controllers\n{\n    [Authorize(Roles = \"Administrators\")]\n    public class UserController : Controller\n    {\n        private readonly UserManager<ApplicationUser> _userManager;\n\n        public UserController(UserManager<ApplicationUser> userManager)\n        {\n            _userManager = userManager;\n        }\n\n        public async Task<IActionResult> Index()\n        {\n            var users = await _userManager.Users.ToListAsync();\n\n            return View(users);\n        }\n\n        public IActionResult AddUser()\n        {\n            return View();\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n\n\n        public async Task<IActionResult> AddUser(UserAddViewModel userAddViewModel)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(userAddViewModel);\n            }\n\n            var user = new ApplicationUser\n            {\n                UserName = userAddViewModel.UserName,\n                Email = userAddViewModel.Email,\n                IdCardNo = userAddViewModel.IdCardNo,\n                BirthDate = userAddViewModel.BirthDate\n            };\n\n            var result = await _userManager.CreateAsync(user, userAddViewModel.Password);\n\n            if (result.Succeeded)\n            {\n                return RedirectToAction(\"Index\");\n            }\n\n            foreach (IdentityError error in result.Errors)\n            {\n                ModelState.AddModelError(string.Empty, error.Description);\n            }\n\n            return View(userAddViewModel);\n\n        }\n\n        public async Task<IActionResult> EditUser(string id)\n        {\n            var user = await _userManager.FindByIdAsync(id);\n            if (user == null)\n            {\n                return RedirectToAction(\"Index\");\n            }\n\n            var claims = await _userManager.GetClaimsAsync(user);\n\n            var vm = new UserEditViewModel\n            {\n                Id = user.Id,\n                BirthDate = user.BirthDate,\n                Email = user.Email,\n                IdCardNo = user.IdCardNo,\n                UserName = user.UserName,\n                Claims = claims.Select(x => x.Value).ToList()\n            };\n\n            return View(vm);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> EditUser(string id, UserEditViewModel userEditViewModel)\n        {\n            var user = await _userManager.FindByIdAsync(id);\n            if (user == null)\n            {\n                return RedirectToAction(\"Index\");\n            }\n\n            user.UserName = userEditViewModel.UserName;\n            user.Email = userEditViewModel.Email;\n            user.IdCardNo = userEditViewModel.IdCardNo;\n            user.BirthDate = userEditViewModel.BirthDate;\n\n            var result = await _userManager.UpdateAsync(user);\n\n            if (result.Succeeded)\n            {\n                return RedirectToAction(\"Index\");\n            }\n            ModelState.AddModelError(string.Empty, \"更新用户信息时发生错误\");\n            return View(userEditViewModel);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> DeleteUser(string id)\n        {\n            var user = await _userManager.FindByIdAsync(id);\n            if (user != null)\n            {\n                var result = await _userManager.DeleteAsync(user);\n                if (result.Succeeded)\n                {\n                    return RedirectToAction(\"Index\");\n                }\n\n                ModelState.AddModelError(string.Empty, \"删除用户时发生错误\");\n            }\n            else\n            {\n                ModelState.AddModelError(string.Empty, \"用户找不到\");\n            }\n\n            return View(\"Index\", await _userManager.Users.ToListAsync());\n        }\n\n        public async Task<IActionResult> ManageClaims(string id)\n        {\n            var user = await _userManager.Users.Include(x => x.Claims)\n                .Where(x => x.Id == id).SingleOrDefaultAsync();\n            if (user == null)\n            {\n                return RedirectToAction(\"Index\");\n            }\n\n            var leftClaims = ClaimTypes.AllClaimTypeList.Except(user.Claims.Select(x => x.ClaimType)).ToList();\n\n            var vm = new ManageClaimsViewModel\n            {\n                UserId = id,\n                AvailableClaims = leftClaims\n            };\n\n            return View(vm);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> ManageClaims(ManageClaimsViewModel vm)\n        {\n            var user = await _userManager.FindByIdAsync(vm.UserId);\n            if (user == null)\n            {\n                return RedirectToAction(\"Index\");\n            }\n\n            var claim = new IdentityUserClaim<string>\n            {\n                ClaimType = vm.ClaimId,\n                ClaimValue = vm.ClaimId\n            };\n\n            user.Claims.Add(claim);\n\n            var result = await _userManager.UpdateAsync(user);\n            if (result.Succeeded)\n            {\n                return RedirectToAction(\"EditUser\", new { id = vm.UserId });\n            }\n\n            ModelState.AddModelError(string.Empty, \"编辑用户Claims时发生错误\");\n            return View(vm);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> RemoveClaim(string id, string claim)\n        {\n            var user = await _userManager.Users.Include(x => x.Claims)\n                .Where(x => x.Id == id).SingleOrDefaultAsync();\n            if (user == null)\n            {\n                return RedirectToAction(\"Index\");\n            }\n\n            var claims = user.Claims.Where(x => x.ClaimType == claim).ToList();\n\n            foreach (var c in claims)\n            {\n                user.Claims.Remove(c);\n            }\n\n            var result = await _userManager.UpdateAsync(user);\n            if (result.Succeeded)\n            {\n                return RedirectToAction(\"EditUser\", new { id });\n            }\n\n            ModelState.AddModelError(string.Empty, \"编辑用户Claims时发生错误\");\n            return RedirectToAction(\"ManageClaims\", new { id });\n        }\n    }\n}\n\n'ASP.NET-Core-MVC-Tutorial-Code/18 start/Heavy.Web/ViewModels/UserRoleViewModel.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Identity;\n\nnamespace Heavy.Web.ViewModels\n{\n    public class UserRoleViewModel\n    {\n        public UserRoleViewModel()\n        {\n            Users = new List<IdentityUser>();\n        }\n\n        public string UserId { get; set; }\n        public string RoleId { get; set; }\n\n        public List<IdentityUser> Users { get; set; }\n    }\n}\n\n'ASP.NET-Core-MVC-Tutorial-Code/26 start/Heavy.Web/ViewModels/RoleAddViewModel.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Heavy.Web.Controllers;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Heavy.Web.ViewModels\n{\n    public class RoleAddViewModel\n    {\n        [Required]\n        [Display(Name = \"角色名称\")]\n        [Remote(nameof(RoleController.CheckRoleExist), \"Role\", ErrorMessage = \"角色已存在\")]\n        public string RoleName { get; set; }\n    }\n}\n",
        "gt": [
            "'ASP.NET-Core-MVC-Tutorial-Code/18 start/Heavy.Web/ViewModels/UserRoleViewModel.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/25 start/Heavy.Web/Controllers/AlbumController.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/26 start/Heavy.Web/ViewModels/RoleAddViewModel.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/22 start/Heavy.Web/Controllers/UserController.cs'"
        ]
    },
    {
        "files": [
            "'nunit-console/src/NUnitEngine/nunit.engine.tests/Services/TestAgencyTests.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine/Communication/Transports/Remoting/TestAgentRemotingProxy.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine.api/Exceptions/NUnitEngineUnloadException.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine/Services/TestAgency.cs'"
        ],
        "content": "'nunit-console/src/NUnitEngine/nunit.engine.tests/Services/TestAgencyTests.cs'\n:﻿\n\n#if NETFRAMEWORK\nusing NUnit.Engine.Services;\nusing NUnit.Engine.Services.Tests.Fakes;\nusing NUnit.Framework;\n\nnamespace NUnit.Engine.Tests.Services\n{\n    public class TestAgencyTests\n    {\n        private TestAgency _testAgency;\n        private ServiceContext _services;\n\n        [SetUp]\n        public void CreateServiceContext()\n        {\n            _services = new ServiceContext();\n            _services.Add(new FakeRuntimeService());\n            _testAgency = new TestAgency();\n            _services.Add(_testAgency);\n            _services.ServiceManager.StartServices();\n        }\n\n        [TearDown]\n        public void TearDown()\n        {\n            _services.ServiceManager.Dispose();\n        }\n\n        [Test]\n        public void ServiceIsStarted()\n        {\n            Assert.That(_testAgency.Status, Is.EqualTo(ServiceStatus.Started));\n        }\n    }\n}\n#endif\n\n'nunit-console/src/NUnitEngine/nunit.engine/Communication/Transports/Remoting/TestAgentRemotingProxy.cs'\n:\n\n#if !NETSTANDARD2_0\nusing System;\nusing NUnit.Engine;\n\nnamespace NUnit.Engine.Communication.Transports.Remoting\n{\n\n\n\n\n    internal class TestAgentRemotingProxy : ITestAgent\n    {\n        private ITestAgent _remoteAgent;\n\n        public TestAgentRemotingProxy(ITestAgent remoteAgent, Guid id)\n        {\n            _remoteAgent = remoteAgent;\n\n            Id = id;\n        }\n\n        public Guid Id { get; private set; }\n\n        public ITestEngineRunner CreateRunner(TestPackage package)\n        {\n            return _remoteAgent.CreateRunner(package);\n        }\n\n        public bool Start()\n        {\n            return _remoteAgent.Start();\n        }\n\n        public void Stop()\n        {\n            _remoteAgent.Stop();\n        }\n    }\n}\n#endif\n\n'nunit-console/src/NUnitEngine/nunit.engine.api/Exceptions/NUnitEngineUnloadException.cs'\n:﻿\n\nusing System;\nusing System.Collections.Generic;\nusing System.Runtime.Serialization;\n\nnamespace NUnit.Engine\n{\n\n\n\n\n\n\n    [Serializable]\n    public class NUnitEngineUnloadException : NUnitEngineException\n    {\n        private const string AggregatedExceptionsMsg =\n            \"Multiple exceptions encountered. Retrieve AggregatedExceptions property for more information\";\n\n\n\n\n\n        public NUnitEngineUnloadException(string message) : base(message)\n        {\n        }\n\n\n\n\n        public NUnitEngineUnloadException(string message, Exception innerException) : base(message, innerException)\n        {\n        }\n\n\n\n\n        public NUnitEngineUnloadException(ICollection<Exception> aggregatedExceptions) : base(AggregatedExceptionsMsg)\n        {\n            AggregatedExceptions = aggregatedExceptions;\n        }\n\n\n\n\n        public NUnitEngineUnloadException(SerializationInfo info, StreamingContext context) : base(info, context) { }\n\n\n\n\n        public ICollection<Exception> AggregatedExceptions { get; }\n    }\n}\n'nunit-console/src/NUnitEngine/nunit.engine/Services/TestAgency.cs'\n:\n\n#if NETFRAMEWORK\nusing System;\nusing System.Threading;\nusing System.Diagnostics;\nusing NUnit.Common;\nusing NUnit.Engine.Internal;\nusing NUnit.Engine.Communication.Transports.Remoting;\nusing NUnit.Engine.Communication.Transports.Tcp;\n\nnamespace NUnit.Engine.Services\n{\n\n\n\n\n\n\n\n\n    public partial class TestAgency : ITestAgency, IService\n    {\n        private static readonly Logger log = InternalTrace.GetLogger(typeof(TestAgency));\n\n        private const int NORMAL_TIMEOUT = 30000;\n        private const int DEBUG_TIMEOUT = NORMAL_TIMEOUT * 10;\n\n        private readonly AgentStore _agentStore = new AgentStore();\n\n        private IRuntimeFrameworkService _runtimeService;\n\n\n        private TestAgencyRemotingTransport _remotingTransport;\n        private TestAgencyTcpTransport _tcpTransport;\n\n        internal virtual string RemotingUrl => _remotingTransport.ServerUrl;\n        internal virtual string TcpEndPoint => _tcpTransport.ServerUrl;\n\n        public TestAgency()\n        {\n            var uri = \"TestAgency-\" + Guid.NewGuid();\n            var port = 0;\n            _remotingTransport = new TestAgencyRemotingTransport(this, uri, port);\n            _tcpTransport = new TestAgencyTcpTransport(this, port);\n        }\n\n        public void Register(ITestAgent agent)\n        {\n            _agentStore.Register(agent);\n        }\n\n        public ITestAgent GetAgent(TestPackage package)\n        {\n\n            string runtimeSetting = package.GetSetting(EnginePackageSettings.TargetRuntimeFramework, \"\");\n            Guard.OperationValid(runtimeSetting.Length > 0, \"LaunchAgentProcess called with no runtime specified\");\n            bool runAsX86 = package.GetSetting(EnginePackageSettings.RunAsX86, false);\n\n\n\n            var targetRuntime = RuntimeFramework.Parse(runtimeSetting);\n            if (!_runtimeService.IsAvailable(targetRuntime.Id, runAsX86))\n            {\n                string msg = $\"The {targetRuntime} framework is not available for X86={runAsX86}.\\r\\nAvailable frameworks:\";\n\n                var service = _runtimeService as RuntimeFrameworkService;\n                var availableRuntimes = runAsX86 ? service.AvailableX86Runtimes : service.AvailableRuntimes;\n                foreach (var runtime in availableRuntimes)\n                    msg += $\" {runtime}\";\n                throw new ArgumentException(msg);\n            }\n\n            var agentId = Guid.NewGuid();\n            var agentProcess = new AgentProcess(this, package, agentId);\n\n            agentProcess.Exited += (sender, e) => OnAgentExit((Process)sender, agentId);\n\n            agentProcess.Start();\n            log.Debug(\"Launched Agent process {0} - see nunit-agent_{0}.log\", agentProcess.Id);\n            log.Debug(\"Command line: \\\"{0}\\\" {1}\", agentProcess.StartInfo.FileName, agentProcess.StartInfo.Arguments);\n\n            _agentStore.AddAgent(agentId, agentProcess);\n\n            log.Debug($\"Waiting for agent {agentId:B} to register\");\n\n            const int pollTime = 200;\n\n\n            bool debug = package.GetSetting(EnginePackageSettings.DebugAgent, false) ||\n                         package.GetSetting(EnginePackageSettings.PauseBeforeRun, false);\n\n            int waitTime = debug ? DEBUG_TIMEOUT : NORMAL_TIMEOUT;\n\n\n\n            while (waitTime > agentProcess.TotalProcessorTime.TotalMilliseconds && !agentProcess.HasExited)\n            {\n                Thread.Sleep(pollTime);\n\n                if (_agentStore.IsReady(agentId, out var agent))\n                {\n                    log.Debug($\"Returning new agent {agentId:B}\");\n\n                    return new TestAgentRemotingProxy(agent, agentId);\n                }\n            }\n\n            return null;\n        }\n\n        internal bool IsAgentProcessActive(Guid agentId, out Process process)\n        {\n            return _agentStore.IsAgentProcessActive(agentId, out process);\n        }\n\n        private void OnAgentExit(Process process, Guid agentId)\n        {\n            _agentStore.MarkTerminated(agentId);\n\n            string errorMsg;\n\n            switch (process.ExitCode)\n            {\n                case AgentExitCodes.OK:\n                    return;\n                case AgentExitCodes.PARENT_PROCESS_TERMINATED:\n                    errorMsg = \"Remote test agent believes agency process has exited.\";\n                    break;\n                case AgentExitCodes.UNEXPECTED_EXCEPTION:\n                    errorMsg = \"Unhandled exception on remote test agent. \" +\n                               \"To debug, try running with the --inprocess flag, or using --trace=debug to output logs.\";\n                    break;\n                case AgentExitCodes.FAILED_TO_START_REMOTE_AGENT:\n                    errorMsg = \"Failed to start remote test agent.\";\n                    break;\n                case AgentExitCodes.DEBUGGER_SECURITY_VIOLATION:\n                    errorMsg = \"Debugger could not be started on remote agent due to System.Security.Permissions.UIPermission not being set.\";\n                    break;\n                case AgentExitCodes.DEBUGGER_NOT_IMPLEMENTED:\n                    errorMsg = \"Debugger could not be started on remote agent as not available on platform.\";\n                    break;\n                case AgentExitCodes.UNABLE_TO_LOCATE_AGENCY:\n                    errorMsg = \"Remote test agent unable to locate agency process.\";\n                    break;\n                case AgentExitCodes.STACK_OVERFLOW_EXCEPTION:\n                    if (Environment.OSVersion.Platform == PlatformID.Win32NT)\n                    {\n                        errorMsg = \"Remote test agent was terminated due to a stack overflow.\";\n                    }\n                    else\n                    {\n                        errorMsg = $\"Remote test agent exited with non-zero exit code {process.ExitCode}\";\n                    }\n                    break;\n                default:\n                    errorMsg = $\"Remote test agent exited with non-zero exit code {process.ExitCode}\";\n                    break;\n            }\n\n            throw new NUnitEngineException(errorMsg);\n        }\n\n        public IServiceLocator ServiceContext { get; set; }\n\n        public ServiceStatus Status { get; private set; }\n\n\n\n        public void StopService()\n        {\n            try\n            {\n                _remotingTransport.Stop();\n                _tcpTransport.Stop();\n            }\n            finally\n            {\n                Status = ServiceStatus.Stopped;\n            }\n        }\n\n        public void StartService()\n        {\n            _runtimeService = ServiceContext.GetService<IRuntimeFrameworkService>();\n            if (_runtimeService == null)\n                Status = ServiceStatus.Error;\n            else\n                try\n                {\n                _remotingTransport.Start();\n                    _tcpTransport.Start();\n                    Status = ServiceStatus.Started;\n            }\n            catch\n            {\n                Status = ServiceStatus.Error;\n                throw;\n            }\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    }\n}\n#endif\n",
        "gt": [
            "'nunit-console/src/NUnitEngine/nunit.engine.api/Exceptions/NUnitEngineUnloadException.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine/Communication/Transports/Remoting/TestAgentRemotingProxy.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine/Services/TestAgency.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine.tests/Services/TestAgencyTests.cs'"
        ]
    },
    {
        "files": [
            "'example-oidc/src/oauth2.qqconnect.owin/QQConnectOAuthHandler.cs'",
            "'example-oidc/src/web.oauth2.client.owin/Startup.cs'",
            "'example-oidc/src/oauth2.qqconnect/Extensions/SetExtension.cs'",
            "'example-oidc/src/web.oauth2.client.owin/OAuth2/OAuth2Extensions.cs'"
        ],
        "content": "'example-oidc/src/oauth2.qqconnect.owin/QQConnectOAuthHandler.cs'\n:using Microsoft.Owin.Logging;\nusing Microsoft.Owin.Security;\nusing Microsoft.Owin.Security.Infrastructure;\nusing OAuth2.QQConnect.Extensions;\nusing System;\nusing System.Net.Http;\nusing System.Security.Claims;\nusing System.Threading.Tasks;\n\nnamespace OAuth2.QQConnect.Owin\n{\n    public class QQConnectOAuthHandler : AuthenticationHandler<QQConnectOAuthOptions>\n    {\n        private readonly ILogger _logger;\n        private readonly HttpClient _httpClient;\n\n        private QQConnectClient _innerClient;\n\n        private QQConnectClient InnerClient\n        {\n            get\n            {\n                if (_innerClient == null)\n                {\n                    var qqConnectOptions = Options.BuildQQConnectOptions(GetRedirectUrl);\n                    _innerClient = new QQConnectClient(_httpClient, qqConnectOptions);\n                }\n                return _innerClient;\n            }\n        }\n\n        public QQConnectOAuthHandler(ILogger logger, HttpClient httpClient)\n        {\n            _logger = logger;\n            _httpClient = httpClient;\n        }\n\n        public override async Task<bool> InvokeAsync()\n        {\n            if (Options.CallbackPath != Request.Path.Value)\n            {\n                return false;\n            }\n            var ticket = await AuthenticateAsync();\n            if (ticket?.Identity != null)\n            {\n                var identity = ticket.Identity;\n                if (identity.AuthenticationType != Options.SignInAsAuthenticationType)\n                {\n                    identity = new ClaimsIdentity(\n                        ticket.Identity.Claims,\n                        Options.SignInAsAuthenticationType,\n                        ticket.Identity.NameClaimType,\n                        ticket.Identity.RoleClaimType);\n                }\n\n                Context.Authentication.SignIn(ticket.Properties, identity);\n\n                Context.Response.Redirect(ticket.Properties.RedirectUri);\n            }\n            else\n            {\n                _logger.WriteError(\"Invalid return state, unable to redirect.\");\n                Response.StatusCode = 500;\n            }\n\n            return true;\n        }\n\n        protected override async Task<AuthenticationTicket> AuthenticateCoreAsync()\n        {\n            AuthenticationProperties properties = null;\n\n            try\n            {\n                var code = Request.Query.Get(\"code\");\n                var state = Request.Query.Get(\"state\");\n\n                properties = Options.StateDataFormat.Unprotect(state);\n                if (properties == null)\n                {\n                    return null;\n                }\n\n                if (!ValidateCorrelationId(properties, _logger))\n                {\n                    return new AuthenticationTicket(null, properties);\n                }\n\n                if (code == null)\n                {\n                    return new AuthenticationTicket(null, properties);\n                }\n\n                var token = await InnerClient.GetTokenAsync(\n                    code,\n                    Request.CallCancelled);\n\n                if (string.IsNullOrWhiteSpace(token.AccessToken))\n                {\n                    _logger.WriteError(\"access_token was not found\");\n                    return new AuthenticationTicket(null, properties);\n                }\n\n                var openId = await InnerClient.GetOpenIdAsync(\n                    token.AccessToken,\n                    Request.CallCancelled);\n\n                if (string.IsNullOrWhiteSpace(openId.OpenId))\n                {\n                    _logger.WriteError(\"openid was not found\");\n                    return new AuthenticationTicket(null, properties);\n                }\n\n                var user = await InnerClient.GetUserAsync(\n                    token.AccessToken,\n                    openId.OpenId,\n                    Request.CallCancelled);\n\n                var qqConnectProfile = QQConnectProfile.From(Options.AuthenticationType, token, openId, user);\n\n                var identity = qqConnectProfile.BuildClaimsIdentity();\n\n                return new AuthenticationTicket(identity, properties);\n            }\n            catch (Exception ex)\n            {\n                _logger.WriteError(\"Authentication failed\", ex);\n                return new AuthenticationTicket(null, properties);\n            }\n        }\n\n        protected override Task ApplyResponseChallengeAsync()\n        {\n            if (Response.StatusCode != 401)\n            {\n                return Task.FromResult<object>(null);\n            }\n\n            var authenticationChallenge = Helper.LookupChallenge(Options.AuthenticationType, Options.AuthenticationMode);\n\n            if (authenticationChallenge != null)\n            {\n                var authenticationProperties = authenticationChallenge.Properties;\n                if (string.IsNullOrWhiteSpace(authenticationProperties.RedirectUri))\n                {\n                    authenticationProperties.RedirectUri = Request.Uri.ToString();\n                }\n\n                GenerateCorrelationId(authenticationProperties);\n\n                var authorizationUrl = BuildAuthorizationUrl(authenticationProperties);\n\n                Context.Response.Redirect(authorizationUrl);\n            }\n\n            return Task.FromResult<object>(null);\n        }\n\n        private string BuildAuthorizationUrl(AuthenticationProperties authenticationProperties)\n        {\n            var qqConnectProperties = authenticationProperties.Dictionary.GetQQConnectProperties();\n            authenticationProperties.Dictionary.RemoveQQConnectProperties();\n\n            var state = Options.StateDataFormat.Protect(authenticationProperties);\n\n            return InnerClient.BuildAuthorizationUrl(qqConnectProperties, state);\n        }\n\n        private string GetRedirectUrl()\n        {\n            return Request.Scheme +\n                   Uri.SchemeDelimiter +\n                   Request.Host +\n                   Request.PathBase +\n                   Options.CallbackPath;\n        }\n    }\n}\n'example-oidc/src/web.oauth2.client.owin/Startup.cs'\n:﻿using ClientSite;\nusing ClientSite.OAuth2;\nusing Microsoft.Owin;\nusing Owin;\n\n[assembly: OwinStartup(typeof(Startup))]\n\nnamespace ClientSite\n{\n    public class Startup\n    {\n        public void Configuration(IAppBuilder app)\n        {\n            app.UseQQConnect();\n        }\n    }\n}\n\n'example-oidc/src/oauth2.qqconnect/Extensions/SetExtension.cs'\n:﻿using System;\nusing System.Collections.Generic;\n\nnamespace OAuth2.QQConnect.Extensions\n{\n    public static class SetExtension\n    {\n        public static ISet<T> AddAll<T>(this ISet<T> @this, ISet<T> other)\n        {\n            if (@this == null)\n            {\n                throw new ArgumentNullException(nameof(@this));\n            }\n\n            if (other == null)\n            {\n                return @this;\n            }\n\n            foreach (var item in other)\n            {\n                @this.Add(item);\n            }\n\n            return @this;\n        }\n    }\n}\n\n'example-oidc/src/web.oauth2.client.owin/OAuth2/OAuth2Extensions.cs'\n:﻿using Microsoft.Owin.Security.Cookies;\nusing OAuth2.QQConnect;\nusing OAuth2.QQConnect.Owin;\nusing Owin;\n\nnamespace ClientSite.OAuth2\n{\n    public static class OAuth2Extensions\n    {\n        public static IAppBuilder UseQQConnect(this IAppBuilder @this)\n        {\n            return @this\n                .UseCookieAuthentication(new CookieAuthenticationOptions\n                {\n                    AuthenticationType = OAuth2Constants.AuthenticationTypeOfCookie\n                })\n                .UseQQConnectAuthentication(new QQConnectOAuthOptions\n                {\n                    AuthenticationType = OAuth2Constants.AuthenticationTypeOfQQ,\n                    SignInAsAuthenticationType = OAuth2Constants.AuthenticationTypeOfCookie,\n                    ClientId = GlobalConfig.QQConnect.ClientId,\n                    ClientSecret = GlobalConfig.QQConnect.ClientSecret\n                });\n        }\n    }\n}",
        "gt": [
            "'example-oidc/src/oauth2.qqconnect/Extensions/SetExtension.cs'",
            "'example-oidc/src/oauth2.qqconnect.owin/QQConnectOAuthHandler.cs'",
            "'example-oidc/src/web.oauth2.client.owin/OAuth2/OAuth2Extensions.cs'",
            "'example-oidc/src/web.oauth2.client.owin/Startup.cs'"
        ]
    },
    {
        "files": [
            "'ZhiHuDaily.UWP/ZhiHuDaily.UWP.Core/ViewModels/StoryViewModel.cs'",
            "'ZhiHuDaily.UWP/ZhiHuDaily.UWP.Core/Share/WeChatResponseHandler.cs'",
            "'ZhiHuDaily.UWP/ZhiHuDaily.UWP.Mobile/SettingPage.xaml.cs'"
        ],
        "content": "'ZhiHuDaily.UWP/ZhiHuDaily.UWP.Core/ViewModels/StoryViewModel.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing ZhiHuDaily.UWP.Core.Https;\nusing ZhiHuDaily.UWP.Core.Models;\nusing ZhiHuDaily.UWP.Core.Share;\nusing ZhiHuDaily.UWP.Core.Tools;\n\nnamespace ZhiHuDaily.UWP.Core.ViewModels\n{\n    public class StoryViewModel:ViewModelBase\n    {\n        private APIService _api = new APIService();\n        private string _story_id;\n        private StoryExtra _se;\n        public StoryExtra SE\n        {\n            get\n            {\n                return _se;\n            }\n        }\n\n        private bool _is_loading;\n        public bool IsLoading\n        {\n            get\n            {\n                return _is_loading;\n            }\n            set\n            {\n                _is_loading = value;\n                OnPropertyChanged();\n            }\n        }\n        private string _id;\n        public string ID\n        {\n            get\n            {\n                return _id;\n            }\n            set\n            {\n                _id = value;\n                OnPropertyChanged();\n            }\n        }\n        private string _title;\n        public string Title\n        {\n            get\n            {\n                return _title;\n            }\n            set\n            {\n                _title = value;\n                OnPropertyChanged();\n            }\n        }\n\n        private string _image;\n        public string Image\n        {\n            get\n            {\n                return _image;\n            }\n            set\n            {\n                _image = value;\n                OnPropertyChanged();\n            }\n        }\n\n        private string _image_source;\n        public string ImageSource\n        {\n            get\n            {\n                return _image_source;\n            }\n            set\n            {\n                _image_source = value;\n                OnPropertyChanged();\n            }\n        }\n\n        private ObservableCollection<string> _recommender_avatars;\n        public ObservableCollection<string> RecommenderAvatars\n        {\n            get\n            {\n                return _recommender_avatars;\n            }\n            set\n            {\n                _recommender_avatars = value;\n                OnPropertyChanged();\n            }\n        }\n\n        private string _body_html;\n        public string BodyHtml\n        {\n            get\n            {\n                return _body_html;\n            }\n            set\n            {\n                _body_html = value;\n                OnPropertyChanged();\n            }\n        }\n\n        private string _share_url;\n        public string ShareUrl\n        {\n            get\n            {\n                return _share_url;\n            }\n            set\n            {\n                _share_url = value;\n                OnPropertyChanged();\n            }\n        }\n\n        private string _comments;\n        public string Comments\n        {\n            get\n            {\n                return _comments;\n            }\n            set\n            {\n                _comments = value;\n                OnPropertyChanged();\n            }\n        }\n        private string _popularities;\n        public string Popularities\n        {\n            get\n            {\n                return _popularities;\n            }\n            set\n            {\n                _popularities = value;\n                OnPropertyChanged();\n            }\n        }\n        private bool _favorite;\n        public bool Favorite\n        {\n            get\n            {\n                return _favorite;\n            }\n            set\n            {\n                _favorite = value;\n                OnPropertyChanged();\n            }\n        }\n\n        private Story _story;\n        public StoryViewModel(Story story)\n        {\n            _story_id = story.ID;\n            _story = story;\n            DataShareManager.Current.ShareDataChanged += Current_ShareDataChanged;\n            Update();\n\n            ExchangeReaded(story);\n        }\n\n        private void Current_ShareDataChanged()\n        {\n            if (DataShareManager.Current.FavoriteList.Contains(_story_id))\n            {\n                Favorite = true;\n            }\n            else\n            {\n                Favorite = false;\n            }\n        }\n\n        public async void Update()\n        {\n            IsLoading = true;\n\n            var t1 = _api.GetStoryContent(_story_id);\n            var t2 = _api.GetStoryExtra(_story_id);\n\n            StoryContent sc = await t1;\n            StoryExtra se = await t2;\n\n            if (sc != null)\n            {\n                ID = sc.ID;\n                Title = sc.Title;\n                Image = sc.Image;\n                ImageSource = sc.Image_Source;\n                RecommenderAvatars = sc.RecommnderAvatars;\n                ShareUrl = sc.Share_URL;\n                string css = \"<style>\"\n                        + \"html{-ms-content-zooming:none;font-family:微软雅黑;}\"\n                        + \".author{font-weight:bold;} .bio{color:gray;}\"\n                        + \"body{padding:20px;word-break:break-all;} p{margin:30px auto;} a{color:skyblue;} .content img{width:95%;}\"\n                        + \"body{line-height:150%;}\"\n                        + \"</style>\";\n                string ex_mark = \"<base target='_blank'/>\";\n                string css2 = \"\";\n                string css3 = \"\";\n                string js = \"\";\n                string body = \"\";\n\n                if (DataShareManager.Current.APPTheme == Windows.UI.Xaml.ElementTheme.Dark)\n                {\n                    css2 = \"<style>\"\n                        + \"body{background-color:black !important;color:gray !important;}\"\n                        + \"</style>\";\n                }\n                else\n                {\n                    css2 = \"\";\n                }\n                if (DataShareManager.Current.BigFont)\n                {\n\n                    css3 = \"<style>body{font-size:52px;} h1{font-size:62px;} h2{font-size:58px;} h3{font-size:52px;} h4,h5,h6{font-size:48px;} blockquote{font-size:48px!;}</style>\";\n                }\n                else\n                {\n                    css3 = \"<style>body{font-size:44px;} h1{font-size:55px;} h2{font-size:50px;} h3{font-size:45px;} h4,h5,h6{font-size:40px;} blockquote{font-size:40px!;}</style>\";\n                }\n\n                if (DataShareManager.Current.NOImagesMode)\n                {\n                    if (NetworkManager.Current.Network != 3)\n                    {\n                        body = Regex.Replace(sc.Body, @\"<img.*?src=(['\"\"]?)(?<url>[^'\"\" ]+)(?=\\1)[^>]*>\", (m) =>\n                         {\n                             if (m.Value.Contains(\"avatar\"))\n                             {\n                                 return m.Value;\n                             }\n                             else\n                             {\n                                 Match match = Regex.Match(m.Value.ToString(), @\"<img\\b[^<>]*?\\bsrc[\\s\\t\\r\\n]*=[\\s\\t\\r\\n]*[\"\"']?[\\s\\t\\r\\n]*(?<imgUrl>[^\\s\\t\\r\\n\"\"'<>]*)[^<>]*?/?[\\s\\t\\r\\n]*>\");\n                                 if (match.Success)\n                                 {\n                                     return @\"<img src=\"\"ms-appx-web:\n                                 }\n                                 else\n                                 {\n                                     return m.Value;\n                                 }\n                             }\n                         }, RegexOptions.IgnoreCase);\n\n                        js = \"<script>\"\n                            + \"function click2loadimage(obj,source)\"\n                            + \"{\"\n                            + \"obj.setAttribute('src','ms-appx-web:\n                            + \"obj.setAttribute('src',source);\"\n                            + \"}\"\n                            + \"</script>\";\n                    }\n                    else\n                    {\n                        body = sc.Body;\n                    }\n                }\n                else\n                {\n                    body = sc.Body;\n                }\n\n\n\n                BodyHtml = \"<html><head>\" + ex_mark + css + css2 + css3 + js + \"</head>\" + \"<body>\" +  body.Replace(\"<blockquote>\",\"<p>\").Replace(\"</blockquote>\",\"</p>\") + \"</body></html>\";\n            }\n            if (se != null)\n            {\n                Comments = se.Comments;\n                Popularities = se.Polularity;\n                Favorite = se.Favorite;\n                _se = se;\n            }\n\n            IsLoading = false;\n        }\n\n        public void ExchangeFavorite()\n        {\n            _story.Favorite = !_story.Favorite;\n            DataShareManager.Current.UpdateFavorites(_story_id);\n        }\n\n        public void ExchangeReaded(Story story)\n        {\n            story.Readed = true;\n            DataShareManager.Current.UpdateReadeds(_story_id);\n        }\n\n        public async void Share2Timeline()\n        {\n            var file = await Windows.Storage.StorageFile.GetFileFromApplicationUriAsync(new Uri(\"ms-appx:\n            using (var stream = await file.OpenReadAsync())\n            {\n                var pic = new byte[stream.Size];\n                await stream.AsStream().ReadAsync(pic, 0, pic.Length);\n                WeChatRequest req = new WeChatRequest(\"123456789\");\n                req.WebPageShare2TimelineRequest(ShareUrl, Title, pic);\n            }\n        }\n\n        public async void Share2Session()\n        {\n            var file = await Windows.Storage.StorageFile.GetFileFromApplicationUriAsync(new Uri(\"ms-appx:\n            using (var stream = await file.OpenReadAsync())\n            {\n                var pic = new byte[stream.Size];\n                await stream.AsStream().ReadAsync(pic, 0, pic.Length);\n                WeChatRequest req = new WeChatRequest(\"123456789\");\n                req.WebPageShare2SessionRequest(ShareUrl, Title, pic);\n            }\n        }\n    }\n}\n\n'ZhiHuDaily.UWP/ZhiHuDaily.UWP.Core/Share/WeChatResponseHandler.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing MicroMsg.sdk;\nusing Windows.UI.Popups;\n\nnamespace ZhiHuDaily.UWP.Core.Share\n{\n    public class WeChatResponseHandler:WXEntryBasePage\n    {\n\n\n\n\n        public override void OnSendAuthResponse(SendAuth.Resp response)\n        {\n            base.OnSendAuthResponse(response);\n\n\n\n        }\n\n\n\n\n        public async override void OnSendMessageToWXResponse(SendMessageToWX.Resp response)\n        {\n            base.OnSendMessageToWXResponse(response);\n            if (response.ErrCode == 0)\n            {\n                await new MessageDialog(\"文章分享成功!\", \"分享提示\").ShowAsync();\n            }\n            else\n            {\n                await new MessageDialog(\"文章分享失败!\", \"分享提示\").ShowAsync();\n            }\n        }\n\n\n\n\n        public override void OnSendPayResponse(SendPay.Resp response)\n        {\n            base.OnSendPayResponse(response);\n\n        }\n    }\n}\n\n'ZhiHuDaily.UWP/ZhiHuDaily.UWP.Mobile/SettingPage.xaml.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Runtime.InteropServices.WindowsRuntime;\nusing Windows.Foundation;\nusing Windows.Foundation.Collections;\nusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Controls;\nusing Windows.UI.Xaml.Controls.Primitives;\nusing Windows.UI.Xaml.Data;\nusing Windows.UI.Xaml.Input;\nusing Windows.UI.Xaml.Media;\nusing Windows.UI.Xaml.Navigation;\nusing ZhiHuDaily.UWP.Core.ViewModels;\n\n\n\nnamespace ZhiHuDaily.UWP.Mobile\n{\n\n\n\n    public sealed partial class SettingPage : Page\n    {\n        SettingViewModel _viewModel;\n\n        public SettingPage()\n        {\n            this.InitializeComponent();\n        }\n\n\n\n\n        protected override void OnNavigatedTo(NavigationEventArgs e)\n        {\n            base.OnNavigatedTo(e);\n            this.DataContext = _viewModel = new SettingViewModel();\n        }\n\n\n\n\n\n\n        private void tsNoImagesMode_Toggled(object sender, RoutedEventArgs e)\n        {\n            _viewModel.ExchangeNoImagesMode((sender as ToggleSwitch).IsOn);\n        }\n\n\n\n\n\n        private void tsDarkMode_Toggled(object sender, RoutedEventArgs e)\n        {\n            _viewModel.ExchangeDarkMode((sender as ToggleSwitch).IsOn);\n        }\n\n\n\n\n\n\n        private void tsBigFont_Toggled(object sender, RoutedEventArgs e)\n        {\n            _viewModel.ExchangeBigFont((sender as ToggleSwitch).IsOn);\n        }\n\n\n\n\n\n        private async void btnVote_Click(object sender, RoutedEventArgs e)\n        {\n            await Windows.System.Launcher.LaunchUriAsync(new Uri(\"ms-windows-store:\n        }\n\n\n\n\n\n        private void btnClearChache_Click(object sender, RoutedEventArgs e)\n        {\n            _viewModel.ClearCache();\n        }\n\n\n\n\n\n        private void tsShowToast_Toggled(object sender, RoutedEventArgs e)\n        {\n            _viewModel.ExchangeShowToast((sender as ToggleSwitch).IsOn);\n        }\n    }\n}\n",
        "gt": [
            "'ZhiHuDaily.UWP/ZhiHuDaily.UWP.Core/Share/WeChatResponseHandler.cs'",
            "'ZhiHuDaily.UWP/ZhiHuDaily.UWP.Core/ViewModels/StoryViewModel.cs'",
            "'ZhiHuDaily.UWP/ZhiHuDaily.UWP.Mobile/SettingPage.xaml.cs'"
        ]
    },
    {
        "files": [
            "'Fitbit.NET/Fitbit.Portable.Tests/ActivityLogTests.cs'",
            "'Fitbit.NET/Fitbit.Portable/JsonDotNetSerializerExtensions.cs'",
            "'Fitbit.NET/Fitbit.Portable/Models/SleepDateRange.cs'"
        ],
        "content": "'Fitbit.NET/Fitbit.Portable.Tests/ActivityLogTests.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Fitbit.Api.Portable;\nusing Fitbit.Api.Portable.Models;\nusing Fitbit.Models;\nusing FluentAssertions;\nusing Newtonsoft.Json;\nusing NUnit.Framework;\n\nnamespace Fitbit.Portable.Tests\n{\n    [TestFixture]\n    public class ActivityLogTests\n    {\n        [Test]\n        [Category(\"Portable\")]\n        public async Task GetActivityLogsListAsync_Success()\n        {\n            string content = SampleDataHelper.GetContent(\"GetActivityLogsList.json\");\n\n            var responseMessage = new Func<HttpResponseMessage>(() => new HttpResponseMessage(HttpStatusCode.OK) { Content = new StringContent(content) });\n\n            var verification = new Action<HttpRequestMessage, CancellationToken>((message, token) =>\n            {\n                Assert.AreEqual(HttpMethod.Get, message.Method);\n                Assert.AreEqual(\"https:\n            });\n\n            var fitbitClient = Helper.CreateFitbitClient(responseMessage, verification);\n\n            var response = await fitbitClient.GetActivityLogsListAsync(null, new DateTime(2017, 1, 1));\n            ValidateActivity(response.Activities);\n        }\n\n        [Test]\n        [Category(\"Portable\")]\n        public void GetActivityLogsListAsync_Errors()\n        {\n            var responseMessage = Helper.CreateErrorResponse(HttpStatusCode.BadRequest);\n            var verification = new Action<HttpRequestMessage, CancellationToken>((message, token) =>\n            {\n                Assert.AreEqual(HttpMethod.Get, message.Method);\n            });\n\n            var fitbitClient = Helper.CreateFitbitClient(responseMessage, verification);\n\n            Func<Task<ActivityLogsList>> result = () => fitbitClient.GetActivityLogsListAsync(null, new DateTime(2017, 1, 1));\n\n            result.Should().Throw<FitbitRequestException>().Which.ApiErrors.Count.Should().Be(1);\n        }\n\n        [Test]\n        [Category(\"Portable\")]\n        public void ActivityLogsList_JsonParse_Errors()\n        {\n            string content = SampleDataHelper.GetContent(\"GetActivityLogsList2.json\");\n            var settings = new JsonSerializerSettings() { DateParseHandling = DateParseHandling.DateTimeOffset };\n            var serializer = new JsonDotNetSerializer(settings) { RootProperty = \"activities\" };\n\n            try\n            {\n                serializer.Deserialize<ActivityLogsList>(content);\n            }\n            catch (FitbitParseException e){\n\n            }\n            catch (Exception e)\n            {\n                Assert.Fail();\n            }\n\n        }\n\n        [Test]\n        [Category(\"Portable\")]\n        public void Can_Deserialize_ActivityLogsList()\n        {\n            string content = SampleDataHelper.GetContent(\"GetActivityLogsList.json\");\n            var settings = new JsonSerializerSettings { DateParseHandling = DateParseHandling.DateTimeOffset };\n            ActivityLogsList logList = JsonConvert.DeserializeObject<ActivityLogsList>(content, settings);\n\n            ValidateActivity(logList.Activities);\n        }\n\n        [Test]\n        [Category(\"Portable\")]\n        public async Task Get_Multiple_ActivityLogsList()\n        {\n            var response = await GetActivityLogsList2(new DateTime(2017, 9, 4));\n            response.Activities.Count.Should().Be(2);\n        }\n\n        [Test]\n        [Category(\"Portable\")]\n        public async Task Check_TimeZone_ActivityLogsList()\n        {\n            var response = await GetActivityLogsList2(new DateTime(2017, 9, 4));\n            const string origOffset = \"-07:00:00\";\n\n            response.Activities[0].StartTime.Offset.ToString().Should().Be(origOffset);\n            response.Activities[1].StartTime.Offset.ToString().Should().Be(origOffset);\n        }\n\n        private async Task<ActivityLogsList> GetActivityLogsList2(DateTime date)\n        {\n            string content = SampleDataHelper.GetContent(\"GetActivityLogsList2.json\");\n            var responseMessage = new Func<HttpResponseMessage>(() => new HttpResponseMessage(HttpStatusCode.OK) { Content = new StringContent(content) });\n\n            var verification = new Action<HttpRequestMessage, CancellationToken>((message, token) =>\n            {\n                Assert.AreEqual(HttpMethod.Get, message.Method);\n                Assert.AreEqual(\"https:\n            });\n\n            var fitbitClient = Helper.CreateFitbitClient(responseMessage, verification);\n\n            var response = await fitbitClient.GetActivityLogsListAsync(date);\n            return response;\n        }\n\n        private void ValidateActivity(List<Activities> stats)\n        {\n            var stat = stats.First();\n\n            stat.ActiveDuration.Should().Be(2764000);\n            stat.ActivityLevel.First().Minutes.Should().Be(0);\n            stat.ActivityLevel.First().Name.Should().Be(\"sedentary\");\n            stat.ActivityName.Should().Be(\"Walk\");\n            stat.ActivityTypeId.Should().Be(90013);\n            stat.AverageHeartRate.Should().Be(108);\n            stat.Calories.Should().Be(375);\n            stat.Duration.Should().Be(2764000);\n            stat.ElevationGain.Should().Be(3.048);\n\n            var zone1 = stat.HeartRateZones[0];\n            zone1.CaloriesOut.Should().Be(default(double));\n            zone1.Max.Should().Be(95);\n            zone1.Min.Should().Be(30);\n            zone1.Minutes.Should().Be(3);\n            zone1.Name.Should().Be(\"Out of Range\");\n\n            var zone4 = stat.HeartRateZones[3];\n            zone4.CaloriesOut.Should().Be(default(double));\n            zone4.Max.Should().Be(220);\n            zone4.Min.Should().Be(162);\n            zone4.Minutes.Should().Be(0);\n            zone4.Name.Should().Be(\"Peak\");\n\n            stat.LastModified.Should().Be(new DateTime(2017, 01, 01, 5, 3, 50, DateTimeKind.Utc));\n            stat.LogId.Should().Be(5390522508);\n            stat.LogType.Should().Be(\"auto_detected\");\n\n            stat.ManualValuesSpecified.Calories.Should().Be(false);\n            stat.ManualValuesSpecified.Distance.Should().Be(false);\n            stat.ManualValuesSpecified.Steps.Should().Be(false);\n\n            stat.OriginalDuration.Should().Be(2764000);\n            stat.OriginalStartTime.Should().Be(new DateTime(2017, 1, 1, 4, 14, 06, DateTimeKind.Utc));\n            stat.StartTime.Should().Be(new DateTime(2017, 1, 1, 4, 14, 06, DateTimeKind.Utc));\n            stat.Steps.Should().Be(5138);\n            stat.TcxLink.Should().Be(\"https:\n        }\n    }\n}\n\n\n'Fitbit.NET/Fitbit.Portable/JsonDotNetSerializerExtensions.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Fitbit.Api.Portable.Models;\nusing Fitbit.Models;\nusing Newtonsoft.Json.Linq;\n\nnamespace Fitbit.Api.Portable\n{\n    internal static class JsonDotNetSerializerExtensions\n    {\n\n\n\n\n\n\n        internal static List<ApiError> ParseErrors(this JsonDotNetSerializer serializer, string errorJson)\n        {\n            if (string.IsNullOrWhiteSpace(errorJson))\n            {\n                throw new ArgumentNullException(nameof(errorJson), \"errorJson can not be empty, null or whitespace\");\n            }\n\n            serializer.RootProperty = \"errors\";\n            return serializer.Deserialize<List<ApiError>>(errorJson);\n        }\n\n\n\n\n\n\n\n\n\n        internal static Fat GetFat(this JsonDotNetSerializer serializer, string fatJson)\n        {\n            if (string.IsNullOrWhiteSpace(fatJson))\n            {\n                throw new ArgumentNullException(nameof(fatJson), \"fatJson can not be empty, null or whitespace\");\n            }\n\n            var fatlogs = JToken.Parse(fatJson)[\"fat\"];\n            var fat = new Fat();\n            fat.FatLogs = fatlogs.Children().Select(serializer.Deserialize<FatLog>).ToList();\n            return fat;\n        }\n\n\n\n\n\n\n\n        internal static Weight GetWeight(this JsonDotNetSerializer serializer, string weightJson)\n        {\n            if (string.IsNullOrWhiteSpace(weightJson))\n            {\n                throw new ArgumentNullException(nameof(weightJson), \"weightJson can not be empty, null or whitespace\");\n            }\n\n            var weightlogs = JToken.Parse(weightJson)[\"weight\"];\n            var weight = new Weight();\n            weight.Weights = weightlogs.Children().Select(serializer.Deserialize<WeightLog>).ToList();\n            return weight;\n        }\n\n\n\n\n\n\n\n        internal static List<UserProfile> GetFriends(this JsonDotNetSerializer serializer, string friendsJson)\n        {\n            if (string.IsNullOrWhiteSpace(friendsJson))\n            {\n                throw new ArgumentNullException(nameof(friendsJson), \"friendsJson can not be empty, null or whitespace.\");\n            }\n\n            serializer.RootProperty = \"user\";\n            var friends = JToken.Parse(friendsJson)[\"friends\"];\n            return friends.Children().Select(serializer.Deserialize<UserProfile>).ToList();\n        }\n\n\n\n\n\n\n\n        internal static HeartActivitiesIntraday GetHeartRateIntraday(this JsonDotNetSerializer serializer, DateTime date, string heartRateIntradayJson)\n        {\n            if (string.IsNullOrWhiteSpace(heartRateIntradayJson))\n            {\n                throw new ArgumentNullException(\"heartRateIntradayJson\", \"heartRateIntradayJson can not be empty, null or whitespace.\");\n            }\n\n            var activitiesHeartIntraday = JToken.Parse(heartRateIntradayJson)[\"activities-heart-intraday\"];\n            var dataset = activitiesHeartIntraday[\"dataset\"];\n\n            var result = new HeartActivitiesIntraday\n            {\n                ActivitiesHeart = serializer.Deserialize<IntradayActivitiesHeart>(JToken.Parse(heartRateIntradayJson)[\"activities-heart\"].First()),\n                Dataset = (from item in dataset\n                           select new DatasetInterval\n                           {\n                               Time = DateTime.Parse(date.ToString(\"yyyy-MM-dd\") + \" \" + item[\"time\"].ToString()),\n                               Value = int.Parse(item[\"value\"].ToString())\n                           }).ToList(),\n                DatasetInterval = Convert.ToInt32(activitiesHeartIntraday[\"datasetInterval\"]),\n                DatasetType = activitiesHeartIntraday[\"datasetType\"].ToString()\n\n            };\n\n            return result;\n        }\n\n\n        internal static HeartActivitiesTimeSeries GetHeartActivitiesTimeSeries(this JsonDotNetSerializer serializer, string heartActivitiesTimeSeries)\n        {\n            if (string.IsNullOrWhiteSpace(heartActivitiesTimeSeries))\n            {\n                throw new ArgumentNullException(\"heartActivitiesTimeSeries\", \"heartActivitiesTimeSeries can not be empty, null or whitespace.\");\n            }\n\n            var activitiesHeartIntraday = JToken.Parse(heartActivitiesTimeSeries)[\"activities-heart\"];\n\n\n            var result = new HeartActivitiesTimeSeries()\n            {\n                HeartActivities = (from item in activitiesHeartIntraday\n                                   select new HeartActivities\n                                   {\n                                       DateTime = DateTime.Parse(item[\"dateTime\"].ToString()),\n                                       HeartRateZones = serializer.Deserialize<List<HeartRateZone>>(item[\"value\"][\"heartRateZones\"]),\n                                       CustomHeartRateZones = serializer.Deserialize<List<HeartRateZone>>(item[\"value\"][\"customHeartRateZones\"]),\n                                       RestingHeartRate = serializer.Deserialize<int>(item[\"value\"][\"restingHeartRate\"])\n                                   }).ToList(),\n            };\n\n            return result;\n        }\n\n\n\n\n\n\n\n\n\n\n        internal static TimeSeriesDataList GetTimeSeriesDataList(this JsonDotNetSerializer serializer, string timeSeriesDataJson)\n        {\n            if (string.IsNullOrWhiteSpace(timeSeriesDataJson))\n            {\n                throw new ArgumentNullException(nameof(timeSeriesDataJson), \"timeSeriesDataJson can not be empty, null or whitespace.\");\n            }\n\n            var dataPoints = JToken.Parse(timeSeriesDataJson)[serializer.RootProperty];\n            var result = new TimeSeriesDataList\n            {\n                DataList = (from item in dataPoints\n                                select new TimeSeriesDataList.Data\n                                        {\n                                            DateTime = DateTime.Parse(item[\"dateTime\"].ToString()),\n                                            Value = item[\"value\"].ToString()\n                                        }).ToList()\n            };\n\n            return result;\n        }\n\n\n\n\n\n\n\n        internal static TimeSeriesDataListInt GetTimeSeriesDataListInt(this JsonDotNetSerializer serializer, string timeSeriesDataJson)\n        {\n            if (string.IsNullOrWhiteSpace(timeSeriesDataJson))\n            {\n                throw new ArgumentNullException(nameof(timeSeriesDataJson), \"timeSeriesDataJson can not be empty, null or whitespace.\");\n            }\n\n            var dataPoints = JToken.Parse(timeSeriesDataJson)[serializer.RootProperty];\n            var result = new TimeSeriesDataListInt\n            {\n                DataList = (from item in dataPoints\n                            select new TimeSeriesDataListInt.Data\n                            {\n                                DateTime = DateTime.Parse(item[\"dateTime\"].ToString()),\n                                Value = int.Parse(item[\"value\"].ToString())\n                            }).ToList()\n            };\n\n            return result;\n        }\n\n\n\n\n        internal static IntradayData GetIntradayTimeSeriesData(this JsonDotNetSerializer serializer, string intradayDataJson)\n        {\n            if (string.IsNullOrWhiteSpace(intradayDataJson))\n            {\n                throw new ArgumentNullException(nameof(intradayDataJson), \"intradayDataJson can not be empty, null or whitespace.\");\n            }\n\n            var parsedJToken = JToken.Parse(intradayDataJson);\n\n\n            JToken date;\n            try\n            {\n                date = parsedJToken.SelectToken(serializer.RootProperty).First[\"dateTime\"];\n            }\n            catch (NullReferenceException nullReferenceException)\n            {\n\n\n                return null;\n            }\n            var dataPoints = parsedJToken.SelectTokens(serializer.RootProperty + \"-intraday.dataset\");\n\n            var result = new IntradayData\n            {\n                DataSet = (from item in dataPoints.Children()\n                    select new IntradayDataValues\n                    {\n                        Time = DateTime.Parse(date + \" \" + item[\"time\"]),\n                        Value = item[\"value\"].ToObject<double>().ToString(\"R\"),\n                        METs = item[\"mets\"] != null ? item[\"mets\"].ToString() : null,\n                        Level = item[\"level\"] != null ? item[\"level\"].ToString() : null\n                    }).ToList()\n            };\n\n            return result;\n        }\n    }\n}\n'Fitbit.NET/Fitbit.Portable/Models/SleepDateRange.cs'\n:﻿using System;\n\nnamespace Fitbit.Api.Portable.Models\n{\n    public class SleepDateRange\n    {\n        public string DateOfSleep { get; set; }\n        public int Duration { get; set; }\n        public int Efficiency { get; set; }\n        public bool IsMainSleep { get; set; }\n        public SleepDateRangeLevels Levels { get; set; }\n        public long LogId { get; set; }\n        public int MinutesAfterWakeup { get; set; }\n        public int MinutesAsleep { get; set; }\n        public int MinutesAwake { get; set; }\n        public int MinutesToFallAsleep { get; set; }\n        public DateTime StartTime { get; set; }\n        public int TimeInBed { get; set; }\n        public string Type { get; set; }\n    }\n}",
        "gt": [
            "'Fitbit.NET/Fitbit.Portable/Models/SleepDateRange.cs'",
            "'Fitbit.NET/Fitbit.Portable/JsonDotNetSerializerExtensions.cs'",
            "'Fitbit.NET/Fitbit.Portable.Tests/ActivityLogTests.cs'"
        ]
    },
    {
        "files": [
            "'nunit-console/src/NUnitEngine/nunit.engine/Services/TestAgency.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine.api/ITestEventListener.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine/Communication/Transports/Remoting/TestAgentRemotingProxy.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine/Communication/Transports/Remoting/TestAgencyRemotingTransport.cs'"
        ],
        "content": "'nunit-console/src/NUnitEngine/nunit.engine/Services/TestAgency.cs'\n:\n\n#if NETFRAMEWORK\nusing System;\nusing System.Threading;\nusing System.Diagnostics;\nusing NUnit.Common;\nusing NUnit.Engine.Internal;\nusing NUnit.Engine.Communication.Transports.Remoting;\nusing NUnit.Engine.Communication.Transports.Tcp;\n\nnamespace NUnit.Engine.Services\n{\n\n\n\n\n\n\n\n\n    public partial class TestAgency : ITestAgency, IService\n    {\n        private static readonly Logger log = InternalTrace.GetLogger(typeof(TestAgency));\n\n        private const int NORMAL_TIMEOUT = 30000;\n        private const int DEBUG_TIMEOUT = NORMAL_TIMEOUT * 10;\n\n        private readonly AgentStore _agentStore = new AgentStore();\n\n        private IRuntimeFrameworkService _runtimeService;\n\n\n        private TestAgencyRemotingTransport _remotingTransport;\n        private TestAgencyTcpTransport _tcpTransport;\n\n        internal virtual string RemotingUrl => _remotingTransport.ServerUrl;\n        internal virtual string TcpEndPoint => _tcpTransport.ServerUrl;\n\n        public TestAgency()\n        {\n            var uri = \"TestAgency-\" + Guid.NewGuid();\n            var port = 0;\n            _remotingTransport = new TestAgencyRemotingTransport(this, uri, port);\n            _tcpTransport = new TestAgencyTcpTransport(this, port);\n        }\n\n        public void Register(ITestAgent agent)\n        {\n            _agentStore.Register(agent);\n        }\n\n        public ITestAgent GetAgent(TestPackage package)\n        {\n\n            string runtimeSetting = package.GetSetting(EnginePackageSettings.TargetRuntimeFramework, \"\");\n            Guard.OperationValid(runtimeSetting.Length > 0, \"LaunchAgentProcess called with no runtime specified\");\n            bool runAsX86 = package.GetSetting(EnginePackageSettings.RunAsX86, false);\n\n\n\n            var targetRuntime = RuntimeFramework.Parse(runtimeSetting);\n            if (!_runtimeService.IsAvailable(targetRuntime.Id, runAsX86))\n            {\n                string msg = $\"The {targetRuntime} framework is not available for X86={runAsX86}.\\r\\nAvailable frameworks:\";\n\n                var service = _runtimeService as RuntimeFrameworkService;\n                var availableRuntimes = runAsX86 ? service.AvailableX86Runtimes : service.AvailableRuntimes;\n                foreach (var runtime in availableRuntimes)\n                    msg += $\" {runtime}\";\n                throw new ArgumentException(msg);\n            }\n\n            var agentId = Guid.NewGuid();\n            var agentProcess = new AgentProcess(this, package, agentId);\n\n            agentProcess.Exited += (sender, e) => OnAgentExit((Process)sender, agentId);\n\n            agentProcess.Start();\n            log.Debug(\"Launched Agent process {0} - see nunit-agent_{0}.log\", agentProcess.Id);\n            log.Debug(\"Command line: \\\"{0}\\\" {1}\", agentProcess.StartInfo.FileName, agentProcess.StartInfo.Arguments);\n\n            _agentStore.AddAgent(agentId, agentProcess);\n\n            log.Debug($\"Waiting for agent {agentId:B} to register\");\n\n            const int pollTime = 200;\n\n\n            bool debug = package.GetSetting(EnginePackageSettings.DebugAgent, false) ||\n                         package.GetSetting(EnginePackageSettings.PauseBeforeRun, false);\n\n            int waitTime = debug ? DEBUG_TIMEOUT : NORMAL_TIMEOUT;\n\n\n\n            while (waitTime > agentProcess.TotalProcessorTime.TotalMilliseconds && !agentProcess.HasExited)\n            {\n                Thread.Sleep(pollTime);\n\n                if (_agentStore.IsReady(agentId, out var agent))\n                {\n                    log.Debug($\"Returning new agent {agentId:B}\");\n\n                    return new TestAgentRemotingProxy(agent, agentId);\n                }\n            }\n\n            return null;\n        }\n\n        internal bool IsAgentProcessActive(Guid agentId, out Process process)\n        {\n            return _agentStore.IsAgentProcessActive(agentId, out process);\n        }\n\n        private void OnAgentExit(Process process, Guid agentId)\n        {\n            _agentStore.MarkTerminated(agentId);\n\n            string errorMsg;\n\n            switch (process.ExitCode)\n            {\n                case AgentExitCodes.OK:\n                    return;\n                case AgentExitCodes.PARENT_PROCESS_TERMINATED:\n                    errorMsg = \"Remote test agent believes agency process has exited.\";\n                    break;\n                case AgentExitCodes.UNEXPECTED_EXCEPTION:\n                    errorMsg = \"Unhandled exception on remote test agent. \" +\n                               \"To debug, try running with the --inprocess flag, or using --trace=debug to output logs.\";\n                    break;\n                case AgentExitCodes.FAILED_TO_START_REMOTE_AGENT:\n                    errorMsg = \"Failed to start remote test agent.\";\n                    break;\n                case AgentExitCodes.DEBUGGER_SECURITY_VIOLATION:\n                    errorMsg = \"Debugger could not be started on remote agent due to System.Security.Permissions.UIPermission not being set.\";\n                    break;\n                case AgentExitCodes.DEBUGGER_NOT_IMPLEMENTED:\n                    errorMsg = \"Debugger could not be started on remote agent as not available on platform.\";\n                    break;\n                case AgentExitCodes.UNABLE_TO_LOCATE_AGENCY:\n                    errorMsg = \"Remote test agent unable to locate agency process.\";\n                    break;\n                case AgentExitCodes.STACK_OVERFLOW_EXCEPTION:\n                    if (Environment.OSVersion.Platform == PlatformID.Win32NT)\n                    {\n                        errorMsg = \"Remote test agent was terminated due to a stack overflow.\";\n                    }\n                    else\n                    {\n                        errorMsg = $\"Remote test agent exited with non-zero exit code {process.ExitCode}\";\n                    }\n                    break;\n                default:\n                    errorMsg = $\"Remote test agent exited with non-zero exit code {process.ExitCode}\";\n                    break;\n            }\n\n            throw new NUnitEngineException(errorMsg);\n        }\n\n        public IServiceLocator ServiceContext { get; set; }\n\n        public ServiceStatus Status { get; private set; }\n\n\n\n        public void StopService()\n        {\n            try\n            {\n                _remotingTransport.Stop();\n                _tcpTransport.Stop();\n            }\n            finally\n            {\n                Status = ServiceStatus.Stopped;\n            }\n        }\n\n        public void StartService()\n        {\n            _runtimeService = ServiceContext.GetService<IRuntimeFrameworkService>();\n            if (_runtimeService == null)\n                Status = ServiceStatus.Error;\n            else\n                try\n                {\n                _remotingTransport.Start();\n                    _tcpTransport.Start();\n                    Status = ServiceStatus.Started;\n            }\n            catch\n            {\n                Status = ServiceStatus.Error;\n                throw;\n            }\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    }\n}\n#endif\n\n'nunit-console/src/NUnitEngine/nunit.engine.api/ITestEventListener.cs'\n:\n\nusing NUnit.Engine.Extensibility;\n\nnamespace NUnit.Engine\n{\n\n\n\n\n\n\n\n\n    [TypeExtensionPoint(\n        Description = \"Allows an extension to process progress reports and other events from the test.\")]\n    public interface ITestEventListener\n    {\n\n\n\n\n        void OnTestEvent(string report);\n    }\n}\n\n'nunit-console/src/NUnitEngine/nunit.engine/Communication/Transports/Remoting/TestAgentRemotingProxy.cs'\n:\n\n#if !NETSTANDARD2_0\nusing System;\nusing NUnit.Engine;\n\nnamespace NUnit.Engine.Communication.Transports.Remoting\n{\n\n\n\n\n    internal class TestAgentRemotingProxy : ITestAgent\n    {\n        private ITestAgent _remoteAgent;\n\n        public TestAgentRemotingProxy(ITestAgent remoteAgent, Guid id)\n        {\n            _remoteAgent = remoteAgent;\n\n            Id = id;\n        }\n\n        public Guid Id { get; private set; }\n\n        public ITestEngineRunner CreateRunner(TestPackage package)\n        {\n            return _remoteAgent.CreateRunner(package);\n        }\n\n        public bool Start()\n        {\n            return _remoteAgent.Start();\n        }\n\n        public void Stop()\n        {\n            _remoteAgent.Stop();\n        }\n    }\n}\n#endif\n\n'nunit-console/src/NUnitEngine/nunit.engine/Communication/Transports/Remoting/TestAgencyRemotingTransport.cs'\n:\n\n#if NETFRAMEWORK\nusing System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Text;\nusing System.Threading;\nusing System.Runtime.Remoting;\nusing System.Runtime.Remoting.Channels;\nusing System.Runtime.Remoting.Channels.Tcp;\nusing NUnit.Common;\nusing NUnit.Engine.Internal;\nusing NUnit.Engine.Services;\n\nnamespace NUnit.Engine.Communication.Transports.Remoting\n{\n\n\n\n\n    public class TestAgencyRemotingTransport : MarshalByRefObject, ITestAgencyTransport, ITestAgency, IDisposable\n    {\n        private static readonly Logger log = InternalTrace.GetLogger(typeof(TestAgencyRemotingTransport));\n\n        private ITestAgency _agency;\n        private string _uri;\n        private int _port;\n\n        private TcpChannel _channel;\n        private bool _isMarshalled;\n\n        private object _theLock = new object();\n\n        public TestAgencyRemotingTransport(ITestAgency agency, string uri, int port)\n        {\n            Guard.ArgumentNotNull(agency, nameof(agency));\n            Guard.ArgumentNotNullOrEmpty(uri, nameof(uri));\n\n            _agency = agency;\n            _uri = uri;\n            _port = port;\n        }\n\n        public string ServerUrl => string.Format(\"tcp:\n\n        public bool Start()\n        {\n            lock (_theLock)\n            {\n                _channel = TcpChannelUtils.GetTcpChannel(_uri + \"Channel\", _port, 100);\n\n                RemotingServices.Marshal(this, _uri);\n                _isMarshalled = true;\n            }\n\n            if (_port == 0)\n            {\n                ChannelDataStore store = this._channel.ChannelData as ChannelDataStore;\n                if (store != null)\n                {\n                    string channelUri = store.ChannelUris[0];\n                    _port = int.Parse(channelUri.Substring(channelUri.LastIndexOf(':') + 1));\n                }\n            }\n\n            return true;\n        }\n\n        [System.Runtime.Remoting.Messaging.OneWay]\n        public void Stop()\n        {\n            lock( _theLock )\n            {\n                if ( this._isMarshalled )\n                {\n                    RemotingServices.Disconnect( this );\n                    this._isMarshalled = false;\n                }\n\n                if ( this._channel != null )\n                {\n                    try\n                    {\n                        ChannelServices.UnregisterChannel(this._channel);\n                        this._channel = null;\n                    }\n                    catch (RemotingException)\n                    {\n\n\n                    }\n                }\n\n                Monitor.PulseAll( _theLock );\n            }\n        }\n\n        public void Register(ITestAgent agent)\n        {\n            _agency.Register(agent);\n        }\n\n        public void WaitForStop()\n        {\n            lock( _theLock )\n            {\n                Monitor.Wait( _theLock );\n            }\n        }\n\n        public void Dispose()\n        {\n            GC.SuppressFinalize(this);\n            Dispose(true);\n        }\n\n        private bool _disposed = false;\n\n        protected virtual void Dispose(bool disposing)\n        {\n            if (!_disposed)\n            {\n                if (disposing)\n                    Stop();\n\n                _disposed = true;\n            }\n        }\n\n\n\n\n        public override object InitializeLifetimeService()\n        {\n            return null;\n        }\n    }\n}\n#endif\n",
        "gt": [
            "'nunit-console/src/NUnitEngine/nunit.engine.api/ITestEventListener.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine/Communication/Transports/Remoting/TestAgentRemotingProxy.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine/Services/TestAgency.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine/Communication/Transports/Remoting/TestAgencyRemotingTransport.cs'"
        ]
    },
    {
        "files": [
            "'UWP/uwp/control/BitStamp/BitStamp/View/DdglttKoxu.xaml.cs'",
            "'UWP/uwp/control/BitStamp/BitStamp/Model/HeaaxThesolw.cs'",
            "'UWP/uwp/control/BitStamp/BitStamp/ViewModel/HrbHtladModel.cs'",
            "'UWP/uwp/control/BitStamp/BitStamp/Model/CloundesAccound.cs'",
            "'UWP/uwp/control/BitStamp/BitStamp/Model/QnUploadImage.cs'",
            "'UWP/uwp/control/BitStamp/BitStamp/ViewModel/NotifyProperty.cs'"
        ],
        "content": "'UWP/uwp/control/BitStamp/BitStamp/View/DdglttKoxu.xaml.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing BitStamp.ViewModel;\nusing Windows.ApplicationModel;\nusing Windows.ApplicationModel.DataTransfer;\nusing Windows.Storage;\nusing Windows.Storage.Streams;\nusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Controls;\nusing Windows.UI.Xaml.Data;\nusing Windows.UI.Xaml.Input;\nusing Windows.UI.Xaml.Media.Imaging;\n\n\n\nnamespace BitStamp\n{\n    public sealed partial class DdglttKoxu : UserControl\n    {\n        public DdglttKoxu()\n        {\n            this.InitializeComponent();\n\n            if (Windows.ApplicationModel.DesignMode.DesignModeEnabled || DesignMode.DesignMode2Enabled)\n            {\n                return;\n            }\n        }\n\n        public HrbHtladModel ViewModel { get; set; }\n\n        private async void UIElement_OnPointerPressed(object sender, PointerRoutedEventArgs e)\n        {\n            var dyhhfSyluomkgu = Clipboard.GetContent();\n            await ViewModel.KkrfKuumt(dyhhfSyluomkgu);\n        }\n\n\n        private void Grid_OnDragOver(object sender, DragEventArgs e)\n        {\n            e.AcceptedOperation = DataPackageOperation.Copy;\n            e.Handled = true;\n        }\n\n        public List<string> ImageFileType { set; get; } = new List<string>()\n        {\n            \".png\",\n            \".jpg\",\n            \".gif\"\n        };\n\n        private async void Grid_Drop(object sender, DragEventArgs e)\n        {\n            var defer = e.GetDeferral();\n            try\n            {\n                DataPackageView dataView = e.DataView;\n\n\n\n\n\n\n\n                await ViewModel.KkrfKuumt(dataView);\n            }\n            catch\n            {\n            }\n            finally\n            {\n                defer.Complete();\n            }\n        }\n    }\n\n    public class TkykfwTnwo : IValueConverter\n    {\n        public object Convert(object value, Type targetType, object parameter, string language)\n        {\n            return value == null ? Visibility.Visible : Visibility.Collapsed;\n        }\n\n        public object ConvertBack(object value, Type targetType, object parameter, string language)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n\n'UWP/uwp/control/BitStamp/BitStamp/Model/HeaaxThesolw.cs'\n:﻿using System;\nusing System.Threading.Tasks;\nusing BitStamp.ViewModel;\nusing lindexi.MVVM.Framework.Annotations;\nusing lindexi.uwp.ImageShack.Model;\nusing Windows.Storage;\n\nnamespace BitStamp.Model\n{\n    public class HeaaxThesolw\n    {\n\n        public HeaaxThesolw(Account account, [NotNull] StorageFile file)\n        {\n            Account = account;\n            File = file ?? throw new ArgumentNullException(nameof(file));\n        }\n\n        private Account Account { get; set; }\n\n        private StorageFile File { get; set; }\n\n        private UploadImageTask NewUploadImageTask(ImageShackEnum imageShack, StorageFile file)\n        {\n            switch (imageShack)\n            {\n                case ImageShackEnum.Jiuyou:\n                    return new JyUploadImage(file);\n                case ImageShackEnum.Smms:\n                    return new SmmsUploadImage(file);\n                case ImageShackEnum.Qin:\n                    return new QnUploadImage(file)\n                    {\n                        Accound = Account.CloundAccound\n                    };\n                case ImageShackEnum.Cimage:\n                    return new BitStamp.Model.Cimage.Cimage(file);\n                default:\n                    throw new ArgumentOutOfRangeException(nameof(imageShack), imageShack, null);\n            }\n\n\n        }\n\n        public string Url { get; set; }\n\n        public async Task Jcloud(Action<bool> onUpload)\n        {\n            ImageShackEnum imageShack = Account.ImageShack;\n\n\n\n\n\n            imageShack = CheckShack(imageShack);\n\n#if DEBUG\n\n#endif\n\n            UploadImageTask uploadImageTask = NewUploadImageTask(\n                imageShack, File);\n            uploadImageTask.OnUploaded += (s, e) =>\n            {\n                if (!(s is UploadImageTask uploadImage))\n                {\n                    onUpload?.Invoke(false);\n                    return;\n                }\n\n                Url = uploadImage.Url;\n\n                onUpload?.Invoke(e);\n            };\n            uploadImageTask.UploadImage();\n        }\n\n        private ImageShackEnum CheckShack(ImageShackEnum imageShack)\n        {\n\n            if (imageShack == ImageShackEnum.Qin)\n            {\n\n                if (string.IsNullOrEmpty(Account.CloundAccound.AccessKey) ||\n                    string.IsNullOrEmpty(Account.CloundAccound.Bucket) ||\n                    string.IsNullOrEmpty(Account.CloundAccound.SecretKey) ||\n                    string.IsNullOrEmpty(Account.CloundAccound.Url))\n                {\n                    return ImageShackEnum.Smms;\n                }\n            }\n\n            return imageShack;\n        }\n    }\n}\n\n'UWP/uwp/control/BitStamp/BitStamp/ViewModel/HrbHtladModel.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Numerics;\nusing System.Text;\nusing System.Threading.Tasks;\nusing BitStamp.Model;\nusing BitStamp.View;\nusing lindexi.MVVM.Framework.ViewModel;\nusing lindexi.uwp.Framework.ViewModel;\nusing lindexi.uwp.ImageShack.Model;\nusing Microsoft.Graphics.Canvas;\nusing Microsoft.Graphics.Canvas.Text;\nusing Microsoft.Graphics.Canvas.UI.Xaml;\nusing Windows.ApplicationModel.DataTransfer;\nusing Windows.Storage;\nusing Windows.Storage.Pickers;\nusing Windows.UI;\nusing Windows.UI.Xaml.Media;\nusing Windows.UI.Xaml.Media.Imaging;\n\nnamespace BitStamp.ViewModel\n{\n    public class HrbHtladModel : ViewModelMessage\n    {\n        private string _bbTkeozdDmady;\n        private ImageSource _image;\n        private string _martHzlxwlTcq;\n\n        private string _marTqqcyhuaKujem;\n        private bool _marTxanmvssTfnpqlz;\n\n        public ImageSource Image\n        {\n            get => _image;\n            set\n            {\n                _image = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public Account Account { get; set; }\n\n        public string MartHzlxwlTcq\n        {\n            get => _martHzlxwlTcq;\n            set\n            {\n                Account.Str = value;\n                _martHzlxwlTcq = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public bool MarTxanmvssTfnpqlz\n        {\n            get => _marTxanmvssTfnpqlz;\n            set\n            {\n                _marTxanmvssTfnpqlz = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public List<string> ImageFileType { set; get; } = new List<string>\n        {\n            \".png\",\n            \".jpg\",\n            \".gif\"\n        };\n\n        public async Task KkrfKuumt(DataPackageView data)\n        {\n            if (data.Contains(StandardDataFormats.Bitmap))\n            {\n                await SetClipimage(data);\n\n                Upload();\n            }\n            else if (data.Contains(StandardDataFormats.StorageItems))\n            {\n                await KipfrgxqyTzt(data);\n\n                Upload();\n            }\n        }\n\n        private async Task KipfrgxqyTzt(DataPackageView dataView)\n        {\n            var files = await dataView.GetStorageItemsAsync();\n            var file = files.OfType<StorageFile>().First();\n            if (ImageFileType.Any(temp => file.FileType == temp))\n            {\n                await SpydTmzmtzul(file);\n            }\n        }\n\n        private async Task SpydTmzmtzul(StorageFile file)\n        {\n            var bitmap = new BitmapImage();\n            await bitmap.SetSourceAsync(await file.OpenAsync(FileAccessMode.Read));\n            Image = bitmap;\n\n            await HemdrisJelnunabis.SetImage(file);\n        }\n\n        public string BbTkeozdDmady\n        {\n            get => _bbTkeozdDmady;\n            set\n            {\n                _bbTkeozdDmady = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public string MarTqqcyhuaKujem\n        {\n            get => _marTqqcyhuaKujem;\n            set\n            {\n                _marTqqcyhuaKujem = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public async void Upload()\n        {\n            if (!HemdrisJelnunabis.Upload)\n            {\n                return;\n            }\n\n            if (MarTxanmvssTfnpqlz && !string.IsNullOrEmpty(MartHzlxwlTcq))\n            {\n                await HemdrisJelnunabis.WaterBerbouPelJicayweeno(MartHzlxwlTcq);\n            }\n\n            var heaaxThesolw = new HeaaxThesolw(Account, HemdrisJelnunabis.File);\n            await heaaxThesolw.Jcloud(tggSqlaeprfo =>\n            {\n                if (tggSqlaeprfo)\n                {\n                    MarTqqcyhuaKujem = $\"![]({heaaxThesolw.Url})\";\n                    BbTkeozdDmady = $\"[img]{heaaxThesolw.Url}[/img]\";\n\n                    ToastHelper.PopToast(\"uwp 图床\", \"上传成功\" + heaaxThesolw.Url);\n\n                    HemdrisJelnunabis.Upload = false;\n                }\n                else\n                {\n                    MarTqqcyhuaKujem = \"上传失败\";\n                    BbTkeozdDmady = \"上传失败\";\n\n                    ToastHelper.PopToast(\"uwp 图床\", \"上传失败\");\n                }\n            });\n        }\n\n        public async void FileHhhrSkq()\n        {\n            var pick = new FileOpenPicker();\n            foreach (var temp in ImageFileType)\n            {\n                pick.FileTypeFilter.Add(temp);\n            }\n\n            var file = await pick.PickSingleFileAsync();\n            if (file != null)\n            {\n                await SpydTmzmtzul(file);\n            }\n        }\n\n        public async void ClipHnzSytrcwjt()\n        {\n            var dyhhfSyluomkgu = Clipboard.GetContent();\n\n            if (dyhhfSyluomkgu != null) await KkrfKuumt(dyhhfSyluomkgu);\n        }\n\n        private async Task SetClipimage(DataPackageView data)\n        {\n            var file = await data.GetBitmapAsync();\n            var image = new BitmapImage();\n            await image.SetSourceAsync(await file.OpenReadAsync());\n\n            await HemdrisJelnunabis.SetImage(await file.OpenReadAsync());\n\n            Image = image;\n        }\n\n        public void MarDcqHghnuz()\n        {\n\n            TdczkfsepSfqpnd(MarTqqcyhuaKujem);\n        }\n\n        private static void TdczkfsepSfqpnd(string str)\n        {\n            if (string.IsNullOrEmpty(str))\n            {\n                return;\n            }\n\n            var data = new DataPackage();\n            data.SetText(str);\n            Clipboard.SetContent(data);\n        }\n\n        public void BbHozTexwufz()\n        {\n\n            TdczkfsepSfqpnd(BbTkeozdDmady);\n        }\n\n        public override void OnNavigatedFrom(object sender, object obj)\n        {\n        }\n\n        public override void OnNavigatedTo(object sender, object obj)\n        {\n            Account = (Account) obj;\n\n            if (Account != null)\n            {\n                HemdrisJelnunabis.StDbvedbwpHxxz = Account.Folder;\n            }\n            else\n            {\n                Account = AccoutGoverment.AccountModel.Account;\n            }\n\n            if (HemdrisJelnunabis.StDbvedbwpHxxz == null)\n            {\n                HemdrisJelnunabis.StDbvedbwpHxxz = ApplicationData.Current.TemporaryFolder;\n            }\n\n            MartHzlxwlTcq = Account.Str;\n        }\n\n        public HemdrisJelnunabisImage HemdrisJelnunabis { get; } = new HemdrisJelnunabisImage();\n    }\n}\n\n'UWP/uwp/control/BitStamp/BitStamp/Model/CloundesAccound.cs'\n:﻿\n\n\nusing BitStamp;\nusing lindexi.MVVM.Framework.ViewModel;\nusing Microsoft.Graphics.Canvas.Effects;\n\nnamespace lindexi.uwp.ImageShack.Model\n{\n\n\n\n    public class CloundesAccound : NotifyProperty\n    {\n        public CloundesAccound()\n        {\n        }\n\n        public string AccessKey\n        {\n            set;\n            get;\n        }\n\n        public string SecretKey\n        {\n            set;\n            get;\n        }\n\n\n\n\n        public string Bucket\n        {\n            set;\n            get;\n        }\n\n\n\n\n        public string Url\n        {\n            set;\n            get;\n        }\n\n        public bool UploadFileName { set; get; } = true;\n\n\n\n\n        public string Pname\n        {\n            set;\n            get;\n        }\n    }\n}\n\n'UWP/uwp/control/BitStamp/BitStamp/Model/QnUploadImage.cs'\n:﻿\n\n\nusing System;\nusing BitStamp.Model;\nusing BitStamp.Model.Cimage;\nusing lindexi.uwp.ImageShack.Model.IO;\nusing Windows.Storage;\n\nnamespace lindexi.uwp.ImageShack.Model\n{\n    public class QnUploadImage : UploadImageTask\n    {\n        public QnUploadImage(StorageFile file)\n            : base(file)\n        {\n        }\n\n        public QnUploadImage(UploadImageTask uploadImageTask)\n            : base(uploadImageTask)\n        {\n        }\n\n        public CloundesAccound Accound\n        {\n            set;\n            get;\n        }\n\n\n        public override async void UploadImage()\n        {\n            if (Accound == null ||\n                string.IsNullOrEmpty(Accound.AccessKey) ||\n                string.IsNullOrEmpty(Accound.SecretKey) ||\n                string.IsNullOrEmpty(Accound.Bucket) ||\n                string.IsNullOrEmpty(Accound.Url))\n            {\n\n                Accound = AppId.Accound;\n            }\n\n            if (!Accound.Url.EndsWith(\"/\"))\n            {\n                Accound.Url += \"/\";\n            }\n            string name = null;\n            if (string.IsNullOrEmpty(Name))\n            {\n                if (Accound.UploadFileName)\n                {\n                    name = File.Name;\n                }\n                else\n                {\n                    var hkbbKhbmbud = DateTime.Now;\n                    name = hkbbKhbmbud.Year.ToString() + hkbbKhbmbud.Month.ToString() + \"\" + hkbbKhbmbud.Day.ToString() +\n                           hkbbKhbmbud.Hour.ToString() + hkbbKhbmbud.Minute.ToString() + hkbbKhbmbud.Second.ToString() +\n                           _ran.Next(1000).ToString();\n                }\n            }\n            else\n            {\n                name = Name;\n            }\n\n            if (!string.IsNullOrEmpty(name) && !string.IsNullOrEmpty(Accound.Pname))\n            {\n                name = Accound.Pname + \"/\" + Uri.EscapeDataString(name);\n            }\n\n            try\n            {\n                IOClient upload = new IOClient();\n\n                PutRet temp = await upload.UploadFile(\n                    Accound.AccessKey,\n                    Accound.SecretKey,\n                    Accound.Bucket,\n                    File, name);\n\n                Url = Accound.Url + temp.key;\n\n                OnUploaded?.Invoke(this, temp.OK);\n            }\n            catch (Exception)\n            {\n                OnUploaded?.Invoke(this, false);\n            }\n        }\n\n        private Random _ran = new Random();\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    }\n}\n\n'UWP/uwp/control/BitStamp/BitStamp/ViewModel/NotifyProperty.cs'\n:﻿\n\nusing System;\nusing System.ComponentModel;\nusing System.Runtime.CompilerServices;\nusing Windows.ApplicationModel.Core;\nusing Windows.UI.Core;\n\nnamespace BitStamp\n{\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n}\n",
        "gt": [
            "'UWP/uwp/control/BitStamp/BitStamp/ViewModel/NotifyProperty.cs'",
            "'UWP/uwp/control/BitStamp/BitStamp/Model/CloundesAccound.cs'",
            "'UWP/uwp/control/BitStamp/BitStamp/Model/HeaaxThesolw.cs'",
            "'UWP/uwp/control/BitStamp/BitStamp/Model/QnUploadImage.cs'",
            "'UWP/uwp/control/BitStamp/BitStamp/ViewModel/HrbHtladModel.cs'",
            "'UWP/uwp/control/BitStamp/BitStamp/View/DdglttKoxu.xaml.cs'"
        ]
    },
    {
        "files": [
            "'Dahomey.Json/src/Dahomey.Json/Serialization/Converters/Mappings/StandardObjectMappingConvention.cs'",
            "'Dahomey.Json/src/Dahomey.Json/Node/JsonNode.cs'",
            "'Dahomey.Json/src/Dahomey.Json/JsonSerializerOptionsExtensions.cs'"
        ],
        "content": "'Dahomey.Json/src/Dahomey.Json/Serialization/Converters/Mappings/StandardObjectMappingConvention.cs'\n:﻿using Dahomey.Json.Attributes;\nusing System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Reflection;\nusing System.Runtime.Serialization;\nusing System.Text.Json;\n\nnamespace Dahomey.Json.Serialization.Converters.Mappings\n{\n    public class StandardObjectMappingConvention : IObjectMappingConvention\n    {\n        public void Apply<T>(JsonSerializerOptions options, ObjectMapping<T> objectMapping)\n        {\n            Type type = objectMapping.ObjectType;\n            List<MemberMapping<T>> memberMappings = new List<MemberMapping<T>>();\n\n            PropertyInfo[] properties = type.GetProperties(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);\n            FieldInfo[] fields = type.GetFields(BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic);\n\n            foreach (PropertyInfo propertyInfo in properties)\n            {\n                if (!propertyInfo.IsDefined(typeof(DataMemberAttribute)))\n                {\n                    continue;\n                }\n\n                if (typeof(Delegate).IsAssignableFrom(propertyInfo.PropertyType))\n                {\n                    continue;\n                }\n\n                MemberMapping<T> memberMapping = new MemberMapping<T>(options, objectMapping, propertyInfo, propertyInfo.PropertyType);\n                ProcessDefaultValue(propertyInfo, memberMapping);\n                ProcessShouldSerializeMethod(memberMapping);\n                ProcessRequired(propertyInfo, memberMapping);\n                ProcessMemberName(propertyInfo, memberMapping);\n                memberMappings.Add(memberMapping);\n            }\n\n            foreach (FieldInfo fieldInfo in fields)\n            {\n                if (!fieldInfo.IsDefined(typeof(DataMemberAttribute)))\n                {\n                    continue;\n                }\n\n                Type fieldType = fieldInfo.FieldType;\n\n                if (typeof(Delegate).IsAssignableFrom(fieldType))\n                {\n                    continue;\n                }\n\n                MemberMapping<T> memberMapping = new MemberMapping<T>(options, objectMapping, fieldInfo, fieldInfo.FieldType);\n                ProcessDefaultValue(fieldInfo, memberMapping);\n                ProcessShouldSerializeMethod(memberMapping);\n                ProcessRequired(fieldInfo, memberMapping);\n                ProcessMemberName(fieldInfo, memberMapping);\n\n                memberMappings.Add(memberMapping);\n            }\n\n            objectMapping.AddMemberMappings(memberMappings);\n\n            ConstructorInfo[] constructorInfos = type.GetConstructors(BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Instance);\n\n\n            if (constructorInfos.Length > 0 && !constructorInfos.Any(c => c.GetParameters().Length == 0))\n            {\n                objectMapping.MapCreator(constructorInfos[0]);\n            }\n\n            MethodInfo? methodInfo = type.GetMethods()\n                .FirstOrDefault(m => m.IsDefined(typeof(OnDeserializingAttribute)));\n            if (methodInfo != null)\n            {\n                objectMapping.SetOnDeserializingMethod(GenerateCallbackDelegate<T>(methodInfo));\n            }\n            else if (type.GetInterfaces().Any(i => i == typeof(ISupportInitialize)))\n            {\n                objectMapping.SetOnDeserializingMethod(t => ((ISupportInitialize?)t)?.BeginInit());\n            }\n\n            methodInfo = type.GetMethods()\n                .FirstOrDefault(m => m.IsDefined(typeof(OnDeserializedAttribute)));\n            if (methodInfo != null)\n            {\n                objectMapping.SetOnDeserializedMethod(GenerateCallbackDelegate<T>(methodInfo));\n            }\n            else if (type.GetInterfaces().Any(i => i == typeof(ISupportInitialize)))\n            {\n                objectMapping.SetOnDeserializedMethod(t => ((ISupportInitialize?)t)?.EndInit());\n            }\n\n            methodInfo = type.GetMethods()\n                .FirstOrDefault(m => m.IsDefined(typeof(OnSerializingAttribute)));\n            if (methodInfo != null)\n            {\n                objectMapping.SetOnSerializingMethod(GenerateCallbackDelegate<T>(methodInfo));\n            }\n\n            methodInfo = type.GetMethods()\n                .FirstOrDefault(m => m.IsDefined(typeof(OnSerializedAttribute)));\n            if (methodInfo != null)\n            {\n                objectMapping.SetOnSerializedMethod(GenerateCallbackDelegate<T>(methodInfo));\n            }\n        }\n\n        private void ProcessDefaultValue<T>(MemberInfo memberInfo, MemberMapping<T> memberMapping)\n        {\n            DefaultValueAttribute? defaultValueAttribute = memberInfo.GetCustomAttribute<DefaultValueAttribute>();\n            if (defaultValueAttribute != null)\n            {\n                memberMapping.SetDefaultValue(defaultValueAttribute.Value);\n            }\n\n            DataMemberAttribute? dataMemberAttribute = memberInfo.GetCustomAttribute<DataMemberAttribute>();\n            if (dataMemberAttribute != null && !dataMemberAttribute.EmitDefaultValue)\n            {\n                memberMapping.SetIgnoreIfDefault(true);\n            }\n        }\n\n        private void ProcessShouldSerializeMethod<T>(MemberMapping<T> memberMapping)\n        {\n            string shouldSerializeMethodName = \"ShouldSerialize\" + memberMapping.MemberInfo.Name;\n            Type? objectType = memberMapping.MemberInfo.DeclaringType;\n\n            if (objectType == null)\n            {\n                return;\n            }\n\n            MethodInfo? shouldSerializeMethodInfo = objectType.GetMethod(shouldSerializeMethodName, new Type[] { });\n            if (shouldSerializeMethodInfo != null &&\n                shouldSerializeMethodInfo.IsPublic &&\n                shouldSerializeMethodInfo.ReturnType == typeof(bool))\n            {\n\n                ParameterExpression objParameter = Expression.Parameter(typeof(object), \"obj\");\n                Expression<Func<object, bool>> lambdaExpression = Expression.Lambda<Func<object, bool>>(\n                    Expression.Call(\n                        Expression.Convert(objParameter, objectType),\n                        shouldSerializeMethodInfo),\n                    objParameter);\n\n                memberMapping.SetShouldSerializeMethod(lambdaExpression.Compile());\n            }\n        }\n\n        private void ProcessRequired<T>(MemberInfo memberInfo, MemberMapping<T> memberMapping)\n        {\n            DataMemberAttribute? dataMemberAttribute = memberInfo.GetCustomAttribute<DataMemberAttribute>();\n            if (dataMemberAttribute != null && dataMemberAttribute.IsRequired)\n            {\n                memberMapping.SetRequired(RequirementPolicy.Always);\n            }\n        }\n\n        private void ProcessMemberName<T>(MemberInfo memberInfo, MemberMapping<T> memberMapping)\n        {\n            DataMemberAttribute? dataMemberAttribute = memberInfo.GetCustomAttribute<DataMemberAttribute>();\n            if (dataMemberAttribute != null && !string.IsNullOrEmpty(dataMemberAttribute.Name))\n            {\n                memberMapping.SetMemberName(dataMemberAttribute.Name);\n            }\n        }\n\n        private Action<T> GenerateCallbackDelegate<T>(MethodInfo methodInfo)\n        {\n\n            ParameterExpression objParameter = Expression.Parameter(typeof(T), \"obj\");\n            Expression<Action<T>> lambdaExpression = Expression.Lambda<Action<T>>(\n                    Expression.Call(\n                        Expression.Convert(objParameter, typeof(T)),\n                        methodInfo),\n                objParameter);\n\n            return lambdaExpression.Compile();\n        }\n    }\n}\n\n'Dahomey.Json/src/Dahomey.Json/Node/JsonNode.cs'\n:﻿\n\n\n\nusing Dahomey.Json;\nusing System.Diagnostics;\nusing System.Diagnostics.CodeAnalysis;\n\nnamespace System.Text.Json\n{\n\n\n\n    public abstract partial class JsonNode\n    {\n        private protected JsonNode() { }\n\n\n\n\n\n\n\n\n\n\n\n        public abstract JsonValueKind ValueKind { get; }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        public abstract JsonNode Clone();\n\n\n\n\n\n\n\n\n        public static implicit operator JsonNode(string? value)\n        {\n            if (value == null)\n            {\n                return JsonNull.Instance;\n            }\n\n            return new JsonString(value);\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        public static implicit operator JsonNode(Guid value) => new JsonString(value);\n\n\n\n\n\n        public static implicit operator JsonNode(bool value) => new JsonBoolean(value);\n\n\n\n\n\n        public static implicit operator JsonNode(byte value) => new JsonNumber(value);\n\n\n\n\n\n        public static implicit operator JsonNode(short value) => new JsonNumber(value);\n\n\n\n\n\n        public static implicit operator JsonNode(int value) => new JsonNumber(value);\n\n\n\n\n\n        public static implicit operator JsonNode(long value) => new JsonNumber(value);\n\n\n\n\n\n        public static implicit operator JsonNode(float value)\n        {\n            if (float.IsInfinity(value) || float.IsNaN(value))\n            {\n                return new JsonString(value.ToString());\n            }\n\n            return new JsonNumber(value);\n        }\n\n\n\n\n\n        public static implicit operator JsonNode(double value)\n        {\n            if (double.IsInfinity(value) || double.IsNaN(value))\n            {\n                return new JsonString(value.ToString());\n            }\n\n            return new JsonNumber(value);\n        }\n\n\n\n\n\n        [CLSCompliant(false)]\n        public static implicit operator JsonNode(sbyte value) => new JsonNumber(value);\n\n\n\n\n\n        [CLSCompliant(false)]\n        public static implicit operator JsonNode(ushort value) => new JsonNumber(value);\n\n\n\n\n\n        [CLSCompliant(false)]\n        public static implicit operator JsonNode(uint value) => new JsonNumber(value);\n\n\n\n\n\n        [CLSCompliant(false)]\n        public static implicit operator JsonNode(ulong value) => new JsonNumber(value);\n\n\n\n\n\n        public static implicit operator JsonNode(decimal value) => new JsonNumber(value);\n\n        public override string ToString()\n        {\n            return ToString(new JsonSerializerOptions().SetupExtensions());\n        }\n\n        public string ToString(JsonSerializerOptions options)\n        {\n            return JsonSerializer.Serialize(this, GetType(), options);\n        }\n    }\n}\n\n'Dahomey.Json/src/Dahomey.Json/JsonSerializerOptionsExtensions.cs'\n:﻿using Dahomey.Json.Serialization.Conventions;\nusing Dahomey.Json.Serialization.Converters.DictionaryKeys;\nusing Dahomey.Json.Serialization.Converters.Factories;\nusing Dahomey.Json.Serialization.Converters.Mappings;\nusing System.Text.Json;\nusing System.Text.Json.Serialization;\n\nnamespace Dahomey.Json\n{\n    public static class JsonSerializerOptionsExtensions\n    {\n        public static JsonConverter<T> GetConverter<T>(this JsonSerializerOptions options)\n        {\n            return (JsonConverter<T>)options.GetConverter(typeof(T));\n        }\n\n        public static JsonSerializerOptions SetupExtensions(this JsonSerializerOptions options)\n        {\n            options.Converters.Add(new JsonSerializerOptionsState(options));\n            options.Converters.Add(new DictionaryConverterFactory());\n            options.Converters.Add(new CollectionConverterFactory());\n            options.Converters.Add(new JsonNodeConverterFactory());\n            options.Converters.Add(new ObjectConverterFactory());\n\n            return options;\n        }\n\n        public static ObjectMappingRegistry GetObjectMappingRegistry(this JsonSerializerOptions options)\n        {\n            return options.GetState().ObjectMappingRegistry;\n        }\n\n        public static ObjectMappingConventionRegistry GetObjectMappingConventionRegistry(this JsonSerializerOptions options)\n        {\n            return options.GetState().ObjectMappingConventionRegistry;\n        }\n\n        public static DiscriminatorConventionRegistry GetDiscriminatorConventionRegistry(this JsonSerializerOptions options)\n        {\n            return options.GetState().DiscriminatorConventionRegistry;\n        }\n\n        public static DictionaryKeyConverterRegistry GetDictionaryKeyConverterRegistry(this JsonSerializerOptions options)\n        {\n            return options.GetState().DictionaryKeyConverterRegistry;\n        }\n\n        public static ReferenceHandling GetReferenceHandling(this JsonSerializerOptions options)\n        {\n            return options.GetState().ReferenceHandling;\n        }\n\n        public static JsonSerializerOptions SetReferenceHandling(this JsonSerializerOptions options, ReferenceHandling referenceHandling)\n        {\n            options.GetState().ReferenceHandling = referenceHandling;\n            return options;\n        }\n\n        public static ReadOnlyPropertyHandling GetReadOnlyPropertyHandling(this JsonSerializerOptions options)\n        {\n            return options.GetState().ReadOnlyPropertyHandling;\n        }\n\n        public static void SetReadOnlyPropertyHandling(this JsonSerializerOptions options, ReadOnlyPropertyHandling referenceHandling)\n        {\n            options.GetState().ReadOnlyPropertyHandling = referenceHandling;\n        }\n\n        private static JsonSerializerOptionsState GetState(this JsonSerializerOptions options)\n        {\n            return (JsonSerializerOptionsState)options.GetConverter<JsonSerializerOptionsState>();\n        }\n\n        public static MissingMemberHandling GetMissingMemberHandling(this JsonSerializerOptions options)\n        {\n            return options.GetState().MissingMemberHandling;\n        }\n\n        public static void SetMissingMemberHandling(this JsonSerializerOptions options, MissingMemberHandling missingMemberHandling)\n        {\n            options.GetState().MissingMemberHandling = missingMemberHandling;\n        }\n\n        public static DuplicatePropertyNameHandling GetDuplicatePropertyNameHandling(this JsonSerializerOptions options)\n        {\n            return options.GetState().DuplicatePropertyNameHandling;\n        }\n\n        public static void SetDuplicatePropertyNameHandling(this JsonSerializerOptions options, DuplicatePropertyNameHandling duplicatePropertyNameHandling)\n        {\n            options.GetState().DuplicatePropertyNameHandling = duplicatePropertyNameHandling;\n        }\n    }\n}\n",
        "gt": [
            "'Dahomey.Json/src/Dahomey.Json/Serialization/Converters/Mappings/StandardObjectMappingConvention.cs'",
            "'Dahomey.Json/src/Dahomey.Json/JsonSerializerOptionsExtensions.cs'",
            "'Dahomey.Json/src/Dahomey.Json/Node/JsonNode.cs'"
        ]
    },
    {
        "files": [
            "'AngularASPNetCoreBusinessApplications/Starter files/TourManagement.API/Services/TourManagementRepository.cs'",
            "'AngularASPNetCoreBusinessApplications/Starter files/TourManagement.API/Entities/Tour.cs'",
            "'AngularASPNetCoreBusinessApplications/Starter files/TourManagement.API/Migrations/20180109144623_InitialMigration.Designer.cs'"
        ],
        "content": "'AngularASPNetCoreBusinessApplications/Starter files/TourManagement.API/Services/TourManagementRepository.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing TourManagement.API.Entities;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace TourManagement.API.Services\n{\n    public class TourManagementRepository : ITourManagementRepository\n    {\n        private TourManagementContext _context;\n\n        public TourManagementRepository(TourManagementContext context)\n        {\n            _context = context;\n        }\n\n        public async Task<bool> TourExists(Guid tourId)\n        {\n            return await _context.Tours.AnyAsync(t => t.TourId == tourId);\n        }\n\n        public async Task<IEnumerable<Tour>> GetTours(bool includeShows = false)\n        {\n            if (includeShows)\n            {\n                return await _context.Tours.Include(t => t.Band).Include(t => t.Shows).ToListAsync();\n            }\n            else\n            {\n                return await _context.Tours.Include(t => t.Band).ToListAsync();\n            }\n        }\n\n        public async Task<IEnumerable<Tour>> GetToursForManager(Guid managerId, bool includeShows = false)\n        {\n            if (includeShows)\n            {\n                return await _context.Tours.Where(t => t.ManagerId == managerId)\n                    .Include(t => t.Band).Include(t => t.Shows).ToListAsync();\n            }\n            else\n            {\n                return await _context.Tours.Where(t => t.ManagerId == managerId)\n                    .Include(t => t.Band).ToListAsync();\n            }\n        }\n\n        public async Task<Tour> GetTour(Guid tourId, bool includeShows = false)\n        {\n            if (includeShows)\n            {\n                return await _context.Tours.Include(t => t.Band).Include(t => t.Shows)\n                    .Where(t => t.TourId == tourId).FirstOrDefaultAsync();\n            }\n            else\n            {\n                return await _context.Tours.Include(t => t.Band)\n                    .Where(t => t.TourId == tourId).FirstOrDefaultAsync();\n            }\n        }\n\n        public async Task<bool> IsTourManager(Guid tourId, Guid managerId)\n        {\n            return await _context.Tours.AnyAsync(t => t.TourId == tourId && t.ManagerId == managerId);\n        }\n\n        public async Task AddTour(Tour tour)\n        {\n            await _context.Tours.AddAsync(tour);\n        }\n\n#pragma warning disable 1998\n\n        public async Task UpdateTour(Tour tour)\n        {\n\n        }\n#pragma warning restore 1998\n\n#pragma warning disable 1998\n\n        public async Task DeleteTour(Tour tour)\n        {\n            _context.Tours.Remove(tour);\n        }\n#pragma warning restore 1998\n\n        public async Task<IEnumerable<Show>> GetShows(Guid tourId)\n        {\n            return await _context.Shows.Where(s => s.TourId == tourId).ToListAsync();\n        }\n\n        public async Task<IEnumerable<Show>> GetShows(Guid tourId, IEnumerable<Guid> showIds)\n        {\n           return await _context.Shows\n                .Where(s => s.TourId == tourId && showIds.Contains(s.ShowId)).ToListAsync();\n        }\n\n\n        public async Task AddShow(Guid tourId, Show show)\n        {\n            var tour = await GetTour(tourId);\n            if (tour == null)\n            {\n\n\n\n\n\n                throw new Exception($\"Cannot add show to tour with id {tourId}: tour not found.\");\n            }\n            tour.Shows.Add(show);\n        }\n\n        public async Task<IEnumerable<Band>> GetBands()\n        {\n            return await _context.Bands.ToListAsync();\n        }\n\n        public async Task<IEnumerable<Manager>> GetManagers()\n        {\n            return await _context.Managers.ToListAsync();\n        }\n\n        public async Task<bool> SaveAsync()\n        {\n            return (await _context.SaveChangesAsync() >= 0);\n        }\n    }\n}\n\n'AngularASPNetCoreBusinessApplications/Starter files/TourManagement.API/Entities/Tour.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.ComponentModel.DataAnnotations.Schema;\n\nnamespace TourManagement.API.Entities\n{\n    public class Tour : AuditableEntity\n    {\n        [Key]\n        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]\n        public Guid TourId { get; set; }\n\n        [Required]\n        [MaxLength(200)]\n        public string Title { get; set; }\n\n        [MaxLength(2000)]\n        public string Description { get; set; }\n\n        public decimal EstimatedProfits { get; set; }\n\n        [Required]\n        public DateTimeOffset StartDate { get; set; }\n\n        [Required]\n        public DateTimeOffset EndDate { get; set; }\n\n        [Required]\n        public Guid BandId { get; set; }\n\n        [Required]\n        public Band Band { get; set; }\n\n        public Guid ManagerId { get; set; }\n\n        [ForeignKey(\"ManagerId\")]\n        public Manager Manager { get; set; }\n\n        public ICollection<Show> Shows { get; set; } = new List<Show>();\n    }\n}\n\n'AngularASPNetCoreBusinessApplications/Starter files/TourManagement.API/Migrations/20180109144623_InitialMigration.Designer.cs'\n:﻿\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Metadata;\nusing Microsoft.EntityFrameworkCore.Migrations;\nusing Microsoft.EntityFrameworkCore.Storage;\nusing Microsoft.EntityFrameworkCore.Storage.Internal;\nusing System;\nusing TourManagement.API.Services;\n\nnamespace TourManagement.API.Migrations\n{\n    [DbContext(typeof(TourManagementContext))]\n    [Migration(\"20180109144623_InitialMigration\")]\n    partial class InitialMigration\n    {\n        protected override void BuildTargetModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"2.0.1-rtm-125\")\n                .HasAnnotation(\"SqlServer:ValueGenerationStrategy\", SqlServerValueGenerationStrategy.IdentityColumn);\n\n            modelBuilder.Entity(\"TourManagement.API.Entities.Band\", b =>\n                {\n                    b.Property<Guid>(\"BandId\")\n                        .ValueGeneratedOnAdd();\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired();\n\n                    b.Property<DateTime>(\"CreatedOn\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasMaxLength(250);\n\n                    b.Property<string>(\"UpdatedBy\");\n\n                    b.Property<DateTime>(\"UpdatedOn\");\n\n                    b.HasKey(\"BandId\");\n\n                    b.ToTable(\"Bands\");\n                });\n\n            modelBuilder.Entity(\"TourManagement.API.Entities.Manager\", b =>\n                {\n                    b.Property<Guid>(\"ManagerId\")\n                        .ValueGeneratedOnAdd();\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired();\n\n                    b.Property<DateTime>(\"CreatedOn\");\n\n                    b.Property<string>(\"Name\");\n\n                    b.Property<string>(\"UpdatedBy\");\n\n                    b.Property<DateTime>(\"UpdatedOn\");\n\n                    b.HasKey(\"ManagerId\");\n\n                    b.ToTable(\"Managers\");\n                });\n\n            modelBuilder.Entity(\"TourManagement.API.Entities.Show\", b =>\n                {\n                    b.Property<Guid>(\"ShowId\")\n                        .ValueGeneratedOnAdd();\n\n                    b.Property<string>(\"City\")\n                        .IsRequired()\n                        .HasMaxLength(100);\n\n                    b.Property<string>(\"Country\")\n                        .IsRequired()\n                        .HasMaxLength(100);\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired();\n\n                    b.Property<DateTime>(\"CreatedOn\");\n\n                    b.Property<DateTimeOffset>(\"DateAndTime\");\n\n                    b.Property<Guid>(\"TourId\");\n\n                    b.Property<string>(\"UpdatedBy\");\n\n                    b.Property<DateTime>(\"UpdatedOn\");\n\n                    b.Property<string>(\"Venue\")\n                        .IsRequired()\n                        .HasMaxLength(150);\n\n                    b.HasKey(\"ShowId\");\n\n                    b.HasIndex(\"TourId\");\n\n                    b.ToTable(\"Shows\");\n                });\n\n            modelBuilder.Entity(\"TourManagement.API.Entities.Tour\", b =>\n                {\n                    b.Property<Guid>(\"TourId\")\n                        .ValueGeneratedOnAdd();\n\n                    b.Property<Guid>(\"BandId\");\n\n                    b.Property<string>(\"CreatedBy\")\n                        .IsRequired();\n\n                    b.Property<DateTime>(\"CreatedOn\");\n\n                    b.Property<string>(\"Description\")\n                        .HasMaxLength(2000);\n\n                    b.Property<DateTimeOffset>(\"EndDate\");\n\n                    b.Property<decimal>(\"EstimatedProfits\");\n\n                    b.Property<Guid>(\"ManagerId\");\n\n                    b.Property<DateTimeOffset>(\"StartDate\");\n\n                    b.Property<string>(\"Title\")\n                        .IsRequired()\n                        .HasMaxLength(200);\n\n                    b.Property<string>(\"UpdatedBy\");\n\n                    b.Property<DateTime>(\"UpdatedOn\");\n\n                    b.HasKey(\"TourId\");\n\n                    b.HasIndex(\"BandId\");\n\n                    b.HasIndex(\"ManagerId\");\n\n                    b.ToTable(\"Tours\");\n                });\n\n            modelBuilder.Entity(\"TourManagement.API.Entities.Show\", b =>\n                {\n                    b.HasOne(\"TourManagement.API.Entities.Tour\", \"Tour\")\n                        .WithMany(\"Shows\")\n                        .HasForeignKey(\"TourId\")\n                        .OnDelete(DeleteBehavior.Cascade);\n                });\n\n            modelBuilder.Entity(\"TourManagement.API.Entities.Tour\", b =>\n                {\n                    b.HasOne(\"TourManagement.API.Entities.Band\", \"Band\")\n                        .WithMany()\n                        .HasForeignKey(\"BandId\")\n                        .OnDelete(DeleteBehavior.Cascade);\n\n                    b.HasOne(\"TourManagement.API.Entities.Manager\", \"Manager\")\n                        .WithMany()\n                        .HasForeignKey(\"ManagerId\")\n                        .OnDelete(DeleteBehavior.Cascade);\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n",
        "gt": [
            "'AngularASPNetCoreBusinessApplications/Starter files/TourManagement.API/Entities/Tour.cs'",
            "'AngularASPNetCoreBusinessApplications/Starter files/TourManagement.API/Services/TourManagementRepository.cs'",
            "'AngularASPNetCoreBusinessApplications/Starter files/TourManagement.API/Migrations/20180109144623_InitialMigration.Designer.cs'"
        ]
    },
    {
        "files": [
            "'TS3AudioBot/TS3AudioBot/Core.cs'",
            "'TS3AudioBot/TS3ABotUnitTests/HistoryTests.cs'",
            "'TS3AudioBot/TS3AudioBot/Rights/Matchers/MatchToken.cs'",
            "'TS3AudioBot/TS3AudioBot/Rights/RightsRule.cs'"
        ],
        "content": "'TS3AudioBot/TS3AudioBot/Core.cs'\n:\n\n\n\n\n\n\n\n\nusing NLog;\nusing System;\nusing System.Threading.Tasks;\nusing TS3AudioBot.CommandSystem;\nusing TS3AudioBot.Config;\nusing TS3AudioBot.Dependency;\nusing TS3AudioBot.Environment;\nusing TS3AudioBot.Helper;\nusing TS3AudioBot.Plugins;\nusing TS3AudioBot.ResourceFactories;\nusing TS3AudioBot.Rights;\nusing TS3AudioBot.Sessions;\nusing TS3AudioBot.Web;\nusing TSLib.Scheduler;\n\nnamespace TS3AudioBot\n{\n\tpublic sealed class Core\n\t{\n\t\tprivate static readonly Logger Log = LogManager.GetCurrentClassLogger();\n\t\tprivate readonly string configFilePath;\n\t\tprivate bool forceNextExit;\n\t\tprivate readonly DedicatedTaskScheduler scheduler;\n\t\tprivate readonly CoreInjector injector;\n\n\t\tpublic Core(DedicatedTaskScheduler scheduler, string? configFilePath = null)\n\t\t{\n\t\t\tthis.scheduler = scheduler;\n\n\t\t\tthis.configFilePath = configFilePath ?? FilesConst.CoreConfig;\n\n\t\t\tinjector = new CoreInjector();\n\t\t}\n\n\t\tpublic async Task Run(ParameterData setup)\n\t\t{\n\t\t\tscheduler.VerifyOwnThread();\n\n\t\t\tAppDomain.CurrentDomain.UnhandledException += UnhandledExceptionHandler;\n\t\t\tTaskScheduler.UnobservedTaskException += UnobservedTaskExceptionHandler;\n\t\t\tConsole.CancelKeyPress += ConsoleInterruptHandler;\n\n\t\t\tvar config = ConfRoot.OpenOrCreate(configFilePath);\n\t\t\tif (config is null)\n\t\t\t\tthrow new Exception(\"Could not create config\");\n\t\t\tConfigUpgrade2.Upgrade(config.Configs.BotsPath.Value);\n\t\t\tconfig.Save();\n\n\t\t\tvar builder = new DependencyBuilder(injector);\n\n\t\t\tinjector.AddModule(this);\n\t\t\tinjector.AddModule(scheduler);\n\t\t\tinjector.AddModule(injector);\n\t\t\tinjector.AddModule(config);\n\t\t\tinjector.AddModule(config.Db);\n\t\t\tinjector.AddModule(config.Plugins);\n\t\t\tinjector.AddModule(config.Web);\n\t\t\tinjector.AddModule(config.Web.Interface);\n\t\t\tinjector.AddModule(config.Web.Api);\n\t\t\tinjector.AddModule(config.Rights);\n\t\t\tinjector.AddModule(config.Factories);\n\t\t\tbuilder.RequestModule<SystemMonitor>();\n\t\t\tbuilder.RequestModule<DbStore>();\n\t\t\tbuilder.RequestModule<PluginManager>();\n\t\t\tbuilder.RequestModule<WebServer>();\n\t\t\tbuilder.RequestModule<RightsManager>();\n\t\t\tbuilder.RequestModule<BotManager>();\n\t\t\tbuilder.RequestModule<TokenManager>();\n\t\t\tbuilder.RequestModule<CommandManager>();\n\t\t\tbuilder.RequestModule<ResourceResolver>();\n\t\t\tbuilder.RequestModule<Stats>();\n\n\t\t\tif (!builder.Build())\n\t\t\t\tthrow new Exception(\"Could not load all core modules\");\n\n\t\t\tUpgrader.PerformUpgrades(injector);\n\t\t\tYoutubeDlHelper.DataObj = config.Tools.YoutubeDl;\n\n\t\t\tinjector.GetModuleOrThrow<CommandManager>().RegisterCollection(MainCommands.Bag);\n\t\t\tinjector.GetModuleOrThrow<RightsManager>().CreateConfigIfNotExists(setup.Interactive);\n\t\t\tinjector.GetModuleOrThrow<WebServer>().StartWebServer();\n\t\t\tinjector.GetModuleOrThrow<Stats>().StartTimer(setup.SendStats);\n\t\t\tawait injector.GetModuleOrThrow<BotManager>().RunBots(setup.Interactive);\n\t\t}\n\n\t\tpublic void UnhandledExceptionHandler(object sender, UnhandledExceptionEventArgs e)\n\t\t{\n\t\t\tLog.Fatal(e.ExceptionObject as Exception, \"Critical program failure!\");\n\t\t\tStopAsync().RunSynchronously();\n\t\t}\n\n\t\tpublic static void UnobservedTaskExceptionHandler(object? sender, UnobservedTaskExceptionEventArgs e)\n\t\t{\n\t\t\tLog.Error(e.Exception, \"Unobserved Task error!\");\n\t\t}\n\n\t\tpublic void ConsoleInterruptHandler(object sender, ConsoleCancelEventArgs e)\n\t\t{\n\t\t\tif (e.SpecialKey == ConsoleSpecialKey.ControlC)\n\t\t\t{\n\t\t\t\tif (!forceNextExit)\n\t\t\t\t{\n\t\t\t\t\tLog.Info(\"Got interrupt signal, trying to soft-exit.\");\n\t\t\t\t\te.Cancel = true;\n\t\t\t\t\tforceNextExit = true;\n\t\t\t\t\tStop();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tLog.Info(\"Got multiple interrupt signals, trying to force-exit.\");\n\t\t\t\t\tSystem.Environment.Exit(0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tpublic void Stop() => _ = scheduler.InvokeAsync(StopAsync);\n\n\t\tprivate async Task StopAsync()\n\t\t{\n\t\t\tLog.Info(\"TS3AudioBot shutting down.\");\n\n\t\t\tvar botManager = injector.GetModule<BotManager>();\n\t\t\tif (botManager != null)\n\t\t\t\tawait botManager.StopBots();\n\t\t\tinjector.GetModule<PluginManager>()?.Dispose();\n\t\t\tinjector.GetModule<WebServer>()?.Dispose();\n\t\t\tinjector.GetModule<DbStore>()?.Dispose();\n\t\t\tinjector.GetModule<ResourceResolver>()?.Dispose();\n\t\t\tinjector.GetModule<DedicatedTaskScheduler>()?.Dispose();\n\n\t\t\tLog.Info(\"Bye\");\n\t\t}\n\t}\n}\n\n'TS3AudioBot/TS3ABotUnitTests/HistoryTests.cs'\n:using NUnit.Framework;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading;\nusing TS3AudioBot;\nusing TS3AudioBot.Config;\nusing TS3AudioBot.History;\nusing TS3AudioBot.ResourceFactories;\nusing TSLib;\n\nnamespace TS3ABotUnitTests\n{\n\t[TestFixture]\n\tpublic class HistoryTests\n\t{\n\t\t[Test]\n\t\tpublic void HistoryFileIntergrityTest()\n\t\t{\n\t\t\tstring testFile = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, \"history.test\");\n\t\t\tif (File.Exists(testFile)) File.Delete(testFile);\n\n\t\t\tvar inv1 = new { ClientId = (ClientId)10, Uid = (Uid)\"Uid1\", Name = \"Invoker1\" };\n\t\t\tvar inv2 = new { ClientId = (ClientId)20, Uid = (Uid)\"Uid2\", Name = \"Invoker2\" };\n\n\t\t\tvar ar1 = new AudioResource(\"asdf\", \"sc_ar1\", \"soundcloud\");\n\t\t\tvar ar2 = new AudioResource(\"./File.mp3\", \"me_ar2\", \"media\");\n\t\t\tvar ar3 = new AudioResource(\"kitty\", \"tw_ar3\", \"twitch\");\n\n\t\t\tvar data1 = new HistorySaveData(ar1, inv1.Uid);\n\t\t\tvar data2 = new HistorySaveData(ar2, inv2.Uid);\n\t\t\tvar data3 = new HistorySaveData(ar3, (Uid)\"Uid3\");\n\n\t\t\tvar confHistory = ConfigTable.CreateRoot<ConfHistory>();\n\t\t\tconfHistory.FillDeletedIds.Value = false;\n\t\t\tvar confDb = ConfigTable.CreateRoot<ConfDb>();\n\t\t\tconfDb.Path.Value = testFile;\n\n\t\t\tDbStore db;\n\t\t\tHistoryManager hf;\n\n\t\t\tvoid CreateDbStore()\n\t\t\t{\n\t\t\t\tdb = new DbStore(confDb);\n\t\t\t\thf = new HistoryManager(confHistory, db);\n\t\t\t}\n\n\t\t\tCreateDbStore();\n\n\t\t\thf.LogAudioResourceDelayed(data1);\n\n\t\t\tvar lastXEntries = hf.GetLastXEntrys(1);\n\t\t\tAssert.True(lastXEntries.Any());\n\t\t\tvar lastEntry = lastXEntries.First();\n\t\t\tAssert.AreEqual(ar1, lastEntry.AudioResource);\n\n\t\t\tdb.Dispose();\n\n\t\t\tCreateDbStore();\n\t\t\tlastXEntries = hf.GetLastXEntrys(1);\n\t\t\tAssert.True(lastXEntries.Any());\n\t\t\tlastEntry = lastXEntries.First();\n\t\t\tAssert.AreEqual(ar1, lastEntry.AudioResource);\n\n\t\t\thf.LogAudioResourceDelayed(data1);\n\t\t\thf.LogAudioResourceDelayed(data2);\n\n\t\t\tlastXEntries = hf.GetLastXEntrys(1);\n\t\t\tAssert.True(lastXEntries.Any());\n\t\t\tlastEntry = lastXEntries.First();\n\t\t\tAssert.AreEqual(ar2, lastEntry.AudioResource);\n\n\t\t\tdb.Dispose();\n\n\n\t\t\tCreateDbStore();\n\t\t\tvar lastXEntriesArray = hf.GetLastXEntrys(2).ToArray();\n\t\t\tAssert.AreEqual(2, lastXEntriesArray.Length);\n\t\t\tAssert.AreEqual(ar2, lastXEntriesArray[0].AudioResource);\n\t\t\tAssert.AreEqual(ar1, lastXEntriesArray[1].AudioResource);\n\n\t\t\tvar ale1 = hf.FindEntryByResource(ar1);\n\t\t\thf.RenameEntry(ale1, \"sc_ar1X\");\n\t\t\thf.LogAudioResourceDelayed(new HistorySaveData(ale1.AudioResource, (Uid)\"Uid4\"));\n\n\t\t\tdb.Dispose();\n\n\n\t\t\tCreateDbStore();\n\t\t\tlastXEntriesArray = hf.GetLastXEntrys(2).ToArray();\n\t\t\tAssert.AreEqual(2, lastXEntriesArray.Length);\n\t\t\tAssert.AreEqual(ar1, lastXEntriesArray[0].AudioResource);\n\t\t\tAssert.AreEqual(ar2, lastXEntriesArray[1].AudioResource);\n\n\t\t\tvar ale2 = hf.FindEntryByResource(ar2);\n\t\t\thf.RenameEntry(ale2, \"me_ar2_loong1\");\n\t\t\thf.LogAudioResourceDelayed(new HistorySaveData(ale2.AudioResource, (Uid)\"Uid4\"));\n\n\t\t\tale1 = hf.FindEntryByResource(ar1);\n\t\t\thf.RenameEntry(ale1, \"sc_ar1X_loong1\");\n\t\t\thf.LogAudioResourceDelayed(new HistorySaveData(ale1.AudioResource, (Uid)\"Uid4\"));\n\n\t\t\thf.RenameEntry(ale2, \"me_ar2_exxxxxtra_loong1\");\n\t\t\thf.LogAudioResourceDelayed(new HistorySaveData(ale2.AudioResource, (Uid)\"Uid4\"));\n\n\t\t\tdb.Dispose();\n\n\n\t\t\tCreateDbStore();\n\t\t\tlastXEntriesArray = hf.GetLastXEntrys(2).ToArray();\n\t\t\tAssert.AreEqual(2, lastXEntriesArray.Length);\n\t\t\tAssert.AreEqual(ar2, lastXEntriesArray[0].AudioResource);\n\t\t\tAssert.AreEqual(ar1, lastXEntriesArray[1].AudioResource);\n\t\t\tdb.Dispose();\n\n\n\t\t\tCreateDbStore();\n\t\t\thf.RemoveEntry(hf.FindEntryByResource(ar1));\n\n\t\t\tlastXEntriesArray = hf.GetLastXEntrys(3).ToArray();\n\t\t\tAssert.AreEqual(1, lastXEntriesArray.Length);\n\n\n\t\t\thf.LogAudioResourceDelayed(data3);\n\n\t\t\tlastXEntriesArray = hf.GetLastXEntrys(3).ToArray();\n\t\t\tAssert.AreEqual(2, lastXEntriesArray.Length);\n\t\t\tdb.Dispose();\n\n\n\t\t\tCreateDbStore();\n\n\t\t\tlastXEntriesArray = hf.GetLastXEntrys(3).ToArray();\n\t\t\tAssert.AreEqual(2, lastXEntriesArray.Length);\n\n\n\t\t\thf.RemoveEntry(hf.FindEntryByResource(ar2));\n\n\t\t\tlastXEntriesArray = hf.GetLastXEntrys(3).ToArray();\n\t\t\tAssert.AreEqual(1, lastXEntriesArray.Length);\n\t\t\tAssert.AreEqual(ar3, lastXEntriesArray[0].AudioResource);\n\t\t\tdb.Dispose();\n\n\n\t\t\tFile.Delete(testFile);\n\t\t}\n\t}\n\n\tinternal static class Extensions\n\t{\n\t\tpublic static IEnumerable<AudioLogEntry> GetLastXEntrys(this HistoryManager hf, int num)\n\t\t{\n\t\t\treturn hf.Search(new SeachQuery { MaxResults = num });\n\t\t}\n\n\t\tpublic static void LogAudioResourceDelayed(this HistoryManager hf, HistorySaveData data)\n\t\t{\n\t\t\tThread.Sleep(1);\n\t\t\thf.LogAudioResource(data);\n\t\t}\n\t}\n}\n\n'TS3AudioBot/TS3AudioBot/Rights/Matchers/MatchToken.cs'\n:\n\n\n\n\n\n\n\n\nusing System.Collections.Generic;\n\nnamespace TS3AudioBot.Rights.Matchers\n{\n\tinternal class MatchToken : Matcher\n\t{\n\t\tprivate readonly HashSet<string> tokens;\n\n\t\tpublic MatchToken(IEnumerable<string> tokens) => this.tokens = new HashSet<string>(tokens);\n\n\t\tpublic override bool Matches(ExecuteContext ctx) => ctx.ApiToken != null && tokens.Contains(ctx.ApiToken);\n\t}\n}\n\n'TS3AudioBot/TS3AudioBot/Rights/RightsRule.cs'\n:\n\n\n\n\n\n\n\n\nusing Nett;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing TS3AudioBot.Helper;\nusing TS3AudioBot.Rights.Matchers;\nusing TSLib;\n\nnamespace TS3AudioBot.Rights\n{\n\n\n\n\n\n\n\n\n\n\tinternal class RightsRule : RightsDecl\n\t{\n\t\tpublic List<RightsDecl> Children { get; set; }\n\t\tpublic IEnumerable<RightsRule> ChildrenRules => Children.OfType<RightsRule>();\n\t\tpublic IEnumerable<RightsGroup> ChildrenGroups => Children.OfType<RightsGroup>();\n\n\t\tpublic List<Matcher> Matcher { get; }\n\n\t\tpublic RightsRule()\n\t\t{\n\t\t\tChildren = new List<RightsDecl>();\n\t\t\tMatcher = new List<Matcher>();\n\t\t}\n\n\t\tpublic bool HasMatcher() => Matcher.Count > 0;\n\n\t\tpublic bool Matches(ExecuteContext ctx)\n\t\t{\n\t\t\tif (!HasMatcher())\n\t\t\t\treturn true;\n\n\t\t\tforeach (var matcher in Matcher)\n\t\t\t{\n\t\t\t\tif (matcher.Matches(ctx))\n\t\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tpublic override bool ParseKey(string key, TomlObject tomlObj, ParseContext ctx)\n\t\t{\n\t\t\tif (base.ParseKey(key, tomlObj, ctx))\n\t\t\t\treturn true;\n\n\t\t\tswitch (key)\n\t\t\t{\n\t\t\tcase \"host\":\n\t\t\t\tif (tomlObj.TryGetValueArray<string>(out var host)) Matcher.Add(new MatchHost(host));\n\t\t\t\telse ctx.Errors.Add(\"<host> Field has invalid data.\");\n\t\t\t\treturn true;\n\t\t\tcase \"groupid\":\n\t\t\t\tif (tomlObj.TryGetValueArray<ulong>(out var servergroupid)) Matcher.Add(new MatchServerGroupId(servergroupid.Select(ServerGroupId.To)));\n\t\t\t\telse ctx.Errors.Add(\"<groupid> Field has invalid data.\");\n\t\t\t\treturn true;\n\t\t\tcase \"channelgroupid\":\n\t\t\t\tif (tomlObj.TryGetValueArray<ulong>(out var channelgroupid)) Matcher.Add(new MatchChannelGroupId(channelgroupid.Select(ChannelGroupId.To)));\n\t\t\t\telse ctx.Errors.Add(\"<channelgroupid> Field has invalid data.\");\n\t\t\t\treturn true;\n\t\t\tcase \"useruid\":\n\t\t\t\tif (tomlObj.TryGetValueArray<string>(out var useruid)) Matcher.Add(new MatchClientUid(useruid.Select(Uid.To)));\n\t\t\t\telse ctx.Errors.Add(\"<useruid> Field has invalid data.\");\n\t\t\t\treturn true;\n\t\t\tcase \"perm\":\n\t\t\t\tif (tomlObj.TryGetValueArray<string>(out var perm)) Matcher.Add(new MatchPermission(perm, ctx));\n\t\t\t\telse ctx.Errors.Add(\"<perm> Field has invalid data.\");\n\t\t\t\treturn true;\n\t\t\tcase \"apitoken\":\n\t\t\t\tif (tomlObj.TryGetValueArray<string>(out var apitoken)) Matcher.Add(new MatchToken(apitoken));\n\t\t\t\telse ctx.Errors.Add(\"<apitoken> Field has invalid data.\");\n\t\t\t\treturn true;\n\t\t\tcase \"bot\":\n\t\t\t\tif (tomlObj.TryGetValueArray<string>(out var bot)) Matcher.Add(new MatchBot(bot));\n\t\t\t\telse ctx.Errors.Add(\"<bot> Field has invalid data.\");\n\t\t\t\treturn true;\n\t\t\tcase \"isapi\":\n\t\t\t\tif (tomlObj.TryGetValue<bool>(out var isapi)) Matcher.Add(new MatchIsApi(isapi));\n\t\t\t\telse ctx.Errors.Add(\"<isapi> Field has invalid data.\");\n\t\t\t\treturn true;\n\t\t\tcase \"ip\":\n\t\t\t\tif (tomlObj.TryGetValueArray<string>(out var ip))\n\t\t\t\t{\n\t\t\t\t\tMatcher.Add(new MatchApiCallerIp(ip.Select(x =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif (IPAddress.TryParse(x, out var ipa))\n\t\t\t\t\t\t\treturn ipa;\n\t\t\t\t\t\tctx.Errors.Add($\"<ip> Field value '{x}' could not be parsed.\");\n\t\t\t\t\t\treturn null!;\n\t\t\t\t\t}).Where(x => x != null)));\n\t\t\t\t}\n\t\t\t\telse ctx.Errors.Add(\"<ip> Field has invalid data.\");\n\t\t\t\treturn true;\n\t\t\tcase \"visibility\":\n\t\t\t\tif (tomlObj.TryGetValueArray<TextMessageTargetMode>(out var visibility)) Matcher.Add(new MatchVisibility(visibility));\n\t\t\t\telse ctx.Errors.Add(\"<visibility> Field has invalid data.\");\n\t\t\t\treturn true;\n\t\t\tcase \"rule\":\n\t\t\t\tif (tomlObj.TomlType == TomlObjectType.ArrayOfTables)\n\t\t\t\t{\n\t\t\t\t\tvar childTables = (TomlTableArray)tomlObj;\n\t\t\t\t\tforeach (var childTable in childTables.Items)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar rule = new RightsRule();\n\t\t\t\t\t\tChildren.Add(rule);\n\t\t\t\t\t\trule.Parent = this;\n\t\t\t\t\t\trule.ParseChilden(childTable, ctx);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tctx.Errors.Add(\"Misused key with reserved name \\\"rule\\\".\");\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\tdefault:\n\n\t\t\t\tif (key.StartsWith(\"$\"))\n\t\t\t\t{\n\t\t\t\t\tif (tomlObj.TomlType == TomlObjectType.Table)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar childTable = (TomlTable)tomlObj;\n\t\t\t\t\t\tvar group = new RightsGroup(key);\n\t\t\t\t\t\tChildren.Add(group);\n\t\t\t\t\t\tgroup.Parent = this;\n\t\t\t\t\t\tgroup.ParseChilden(childTable, ctx);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tctx.Errors.Add($\"Misused key for group declaration: {key}.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tpublic override RightsGroup? ResolveGroup(string groupName, ParseContext ctx)\n\t\t{\n\t\t\tforeach (var child in ChildrenGroups)\n\t\t\t{\n\t\t\t\tif (child.Name == groupName)\n\t\t\t\t\treturn child;\n\t\t\t}\n\t\t\treturn Parent?.ResolveGroup(groupName, ctx);\n\t\t}\n\n\t\tpublic override string ToString()\n\t\t{\n\t\t\treturn $\"[+:{string.Join(\",\", DeclAdd)} | -:{string.Join(\",\", DeclDeny)}]\";\n\t\t}\n\t}\n}\n",
        "gt": [
            "'TS3AudioBot/TS3AudioBot/Rights/Matchers/MatchToken.cs'",
            "'TS3AudioBot/TS3AudioBot/Rights/RightsRule.cs'",
            "'TS3AudioBot/TS3AudioBot/Core.cs'",
            "'TS3AudioBot/TS3ABotUnitTests/HistoryTests.cs'"
        ]
    },
    {
        "files": [
            "'PlayFabGameServer/PlayFabGameServerClientExample/Assets/PlayFabSDK/Shared/SignalR.NET20/IConnection.cs'",
            "'PlayFabGameServer/GameServerSource/Assets/PlayFabSDK/Shared/SignalR.NET20/Transports/AsyncStreamReader.cs'",
            "'PlayFabGameServer/PlayFabGameServerClientExample/Assets/PlayFabSDK/Shared/SignalR.NET20/Http/HttpWebResponseWrapper.cs'",
            "'PlayFabGameServer/GameServerSource/Assets/PlayFabSDK/Shared/SignalR.NET20/Infrastructure/StreamExtensions.cs'",
            "'PlayFabGameServer/PlayFabGameServerClientExample/Assets/PlayFabSDK/Shared/SignalR.NET20/Http/IHttpClient.cs'"
        ],
        "content": "'PlayFabGameServer/PlayFabGameServerClientExample/Assets/PlayFabSDK/Shared/SignalR.NET20/IConnection.cs'\n:﻿#if ENABLE_PLAYFABPLAYSTREAM_API && ENABLE_PLAYFABSERVER_API\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\nusing SignalR.Client._20.Http;\nusing SignalR.Client._20.Transports;\nusing PlayFab.Json;\n\nnamespace SignalR.Client._20\n{\n    public interface IConnection\n    {\n        bool IsActive { get; }\n        string MessageId { get; set; }\n        Func<string> Sending { get; set; }\n        IEnumerable<string> Groups { get; set; }\n        IDictionary<string, object> Items { get; }\n        string ConnectionId { get; }\n        string Url { get; }\n        string QueryString { get; }\n        string ConnectionToken { get; }\n        string GroupsToken { get; }\n\n        ICredentials Credentials { get; set; }\n        CookieContainer CookieContainer { get; set; }\n\n        event Action Closed;\n        event Action<Exception> Error;\n        event Action<string> Received;\n\n        void Stop();\n        EventSignal<object> Send(string data);\n        EventSignal<T> Send<T>(string data);\n\n        void OnReceived(JsonObject data);\n        void OnError(Exception ex);\n        void OnReconnected();\n        void PrepareRequest(IRequest request);\n    }\n}\n\n#endif\n'PlayFabGameServer/GameServerSource/Assets/PlayFabSDK/Shared/SignalR.NET20/Transports/AsyncStreamReader.cs'\n:﻿#if ENABLE_PLAYFABPLAYSTREAM_API && ENABLE_PLAYFABSERVER_API\nusing SignalR.Client._20.Http;\nusing SignalR.Client._20.Infrastructure;\nusing System;\n\nusing System.IO;\nusing System.Threading;\n\nnamespace SignalR.Client._20.Transports\n{\n    public class AsyncStreamReader\n    {\n        private readonly Stream m_stream;\n        private readonly ChunkBuffer m_buffer;\n        private readonly Action m_initializeCallback;\n        private readonly Action m_closeCallback;\n        private readonly IConnection m_connection;\n        private int m_processingQueue;\n        private int m_reading;\n        private bool m_processingBuffer;\n\n        public AsyncStreamReader(Stream stream,\n            IConnection connection,\n            Action initializeCallback,\n            Action closeCallback)\n        {\n            m_initializeCallback = initializeCallback;\n            m_closeCallback = closeCallback;\n            m_stream = stream;\n            m_connection = connection;\n            m_buffer = new ChunkBuffer();\n        }\n\n        public bool Reading\n        {\n            get\n            {\n                return m_reading == 1;\n            }\n        }\n\n        public void StartReading()\n        {\n\n            if (Interlocked.Exchange(ref m_reading, 1) == 0)\n                ReadLoop();\n        }\n\n        public void StopReading(bool raiseCloseCallback)\n        {\n            if (Interlocked.Exchange(ref m_reading, 0) == 1\n                && raiseCloseCallback)\n                m_closeCallback();\n        }\n\n        private void ReadLoop()\n        {\n            if (!Reading)\n                return;\n\n            var _buffer = new byte[1024];\n            var _signal = new EventSignal<CallbackDetail<int>>();\n\n            _signal.Finished += (sender, e) =>\n            {\n                if (e.Result.IsFaulted)\n                {\n                    Exception exception = e.Result.Exception.GetBaseException();\n\n                    if (!HttpBasedTransport.IsRequestAborted(exception))\n                    {\n                        if (!(exception is IOException))\n                            m_connection.OnError(exception);\n                        StopReading(true);\n                    }\n                    return;\n                }\n\n                int _read = e.Result.Result;\n\n                if (_read > 0)\n\n                    m_buffer.Add(_buffer, _read);\n\n                if (_read == 0)\n                {\n\n                    StopReading(true);\n                    return;\n                }\n\n\n                ReadLoop();\n\n                if (_read <= _buffer.Length)\n\n                    ProcessBuffer();\n            };\n            StreamExtensions.ReadAsync(_signal, m_stream, _buffer);\n        }\n\n        private void ProcessBuffer()\n        {\n            if (!Reading)\n                return;\n\n            if (m_processingBuffer)\n            {\n\n                m_processingQueue++;\n                return;\n            }\n\n            m_processingBuffer = true;\n\n            int _total = Math.Max(1, m_processingQueue);\n\n            for (int i = 0; i < _total; i++)\n            {\n                if (!Reading)\n                    return;\n                ProcessChunks();\n            }\n\n            if (m_processingQueue > 0)\n                m_processingQueue -= _total;\n\n            m_processingBuffer = false;\n        }\n\n        private void ProcessChunks()\n        {\n\n            while (Reading && m_buffer.HasChunks)\n            {\n                string _line = m_buffer.ReadLine();\n\n\n                if (_line == null)\n                    break;\n\n                if (!Reading)\n                    return;\n\n\n                SseEvent _sseEvent;\n                if (!SseEvent.TryParse(_line, out _sseEvent))\n                    continue;\n\n                if (!Reading)\n                    return;\n\n\n\n                switch (_sseEvent.Type)\n                {\n                    case EventType.Id:\n                        m_connection.MessageId = _sseEvent.Data;\n                        break;\n                    case EventType.Data:\n                        if (_sseEvent.Data.Equals(\"initialized\", StringComparison.OrdinalIgnoreCase))\n                        {\n                            if (m_initializeCallback != null)\n\n                                m_initializeCallback();\n                        }\n                        else\n                        {\n                            if (Reading)\n                            {\n\n\n                                bool _timedOutReceived;\n                                bool _disconnectReceived;\n\n                                HttpBasedTransport.ProcessResponse(\n                                    m_connection,\n                                    _sseEvent.Data,\n                                    out _timedOutReceived,\n                                    out _disconnectReceived);\n\n                                if (_disconnectReceived)\n                                    m_connection.Stop();\n\n                                if (_timedOutReceived)\n                                    return;\n                            }\n                        }\n                        break;\n                }\n            }\n        }\n    }\n}\n\n#endif\n'PlayFabGameServer/PlayFabGameServerClientExample/Assets/PlayFabSDK/Shared/SignalR.NET20/Http/HttpWebResponseWrapper.cs'\n:﻿#if ENABLE_PLAYFABPLAYSTREAM_API && ENABLE_PLAYFABSERVER_API\nusing System;\nusing System.IO;\nusing System.Net;\n\nnamespace SignalR.Client._20.Http\n{\n    public class HttpWebResponseWrapper : IResponse\n    {\n        private readonly HttpWebResponse m_response;\n\n        public HttpWebResponseWrapper(HttpWebResponse response)\n        {\n            m_response = response;\n        }\n\n        public string ReadAsString()\n        {\n            return HttpHelper.ReadAsString(m_response);\n        }\n\n        public Stream GetResponseStream()\n        {\n            return m_response.GetResponseStream();\n        }\n\n        public void Close()\n        {\n            ((IDisposable)m_response).Dispose();\n        }\n\n        public bool IsFaulted { get; set; }\n\n        public Exception Exception { get; set; }\n    }\n}\n\n#endif\n'PlayFabGameServer/GameServerSource/Assets/PlayFabSDK/Shared/SignalR.NET20/Infrastructure/StreamExtensions.cs'\n:﻿#if ENABLE_PLAYFABPLAYSTREAM_API && ENABLE_PLAYFABSERVER_API\nusing System;\nusing System.IO;\nusing SignalR.Client._20.Http;\nusing SignalR.Client._20.Transports;\n\nnamespace SignalR.Client._20.Infrastructure\n{\n    internal static class StreamExtensions\n    {\n        public static void ReadAsync(EventSignal<CallbackDetail<int>> signal, Stream stream, byte[] buffer)\n        {\n            var _state = new StreamState\n            {\n                Stream = stream,\n                Response = signal,\n                Buffer = buffer\n            };\n\n            ReadAsyncInternal(_state);\n        }\n\n        internal static void ReadAsyncInternal(StreamState streamState)\n        {\n            try\n            {\n                streamState.Stream.BeginRead(\n                    streamState.Buffer,\n                    0,\n                    streamState.Buffer.Length,\n                    GetResponseCallback,\n                    streamState);\n            }\n            catch (Exception exception)\n            {\n                streamState.Response.OnFinish(new CallbackDetail<int>\n                {\n                    IsFaulted = true,\n                    Exception = exception\n                });\n            }\n        }\n\n        private static void GetResponseCallback(IAsyncResult asynchronousResult)\n        {\n            StreamState streamState = (StreamState)asynchronousResult.AsyncState;\n\n\n            try\n            {\n                var response = streamState.Stream.EndRead(asynchronousResult);\n                streamState.Response.OnFinish(new CallbackDetail<int>\n                {\n                    Result = response\n                });\n            }\n            catch (Exception ex)\n            {\n                try\n                {\n                    ReadAsyncInternal(streamState);\n                }\n                catch (Exception)\n                {\n                    streamState.Response.OnFinish(new CallbackDetail<int>\n                    {\n                        IsFaulted = true,\n                        Exception = ex\n                    });\n                }\n            }\n        }\n    }\n}\n\n#endif\n'PlayFabGameServer/PlayFabGameServerClientExample/Assets/PlayFabSDK/Shared/SignalR.NET20/Http/IHttpClient.cs'\n:﻿#if ENABLE_PLAYFABPLAYSTREAM_API && ENABLE_PLAYFABSERVER_API\nusing System;\nusing System.Collections.Generic;\nusing SignalR.Client._20.Transports;\n\nnamespace SignalR.Client._20.Http\n{\n    public interface IHttpClient\n    {\n        EventSignal<IResponse> GetAsync(string url, Action<IRequest> prepareRequest);\n\n        EventSignal<IResponse> PostAsync(string url, Action<IRequest> prepareRequest, Dictionary<string, string> postData);\n    }\n}\n\n#endif",
        "gt": [
            "'PlayFabGameServer/PlayFabGameServerClientExample/Assets/PlayFabSDK/Shared/SignalR.NET20/Http/HttpWebResponseWrapper.cs'",
            "'PlayFabGameServer/GameServerSource/Assets/PlayFabSDK/Shared/SignalR.NET20/Infrastructure/StreamExtensions.cs'",
            "'PlayFabGameServer/GameServerSource/Assets/PlayFabSDK/Shared/SignalR.NET20/Transports/AsyncStreamReader.cs'",
            "'PlayFabGameServer/PlayFabGameServerClientExample/Assets/PlayFabSDK/Shared/SignalR.NET20/Http/IHttpClient.cs'",
            "'PlayFabGameServer/PlayFabGameServerClientExample/Assets/PlayFabSDK/Shared/SignalR.NET20/IConnection.cs'"
        ]
    },
    {
        "files": [
            "'SRML/SRML/SR/SaveSystem/PersistentAmmoManager.cs'",
            "'SRML/SRML/SR/ExchangeOfferRegistry.cs'",
            "'SRML/SRML/SR/Utils/LookupDirectorExtension.cs'"
        ],
        "content": "'SRML/SRML/SR/SaveSystem/PersistentAmmoManager.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing MonomiPark.SlimeRancher.DataModel;\nusing SRML.SR.SaveSystem.Data;\nusing SRML.SR.SaveSystem.Data.Ammo;\nusing SRML.SR.SaveSystem.Format;\nusing UnityEngine;\nusing static PlayerState;\n\nnamespace SRML.SR.SaveSystem\n{\n    public static class PersistentAmmoManager\n    {\n        internal static readonly Dictionary<AmmoIdentifier, PersistentAmmo> PersistentAmmoData = new Dictionary<AmmoIdentifier, PersistentAmmo>();\n\n        internal static void Pull(ModdedSaveData data)\n        {\n            Clear();\n            foreach (var v in data.ammoDataEntries)\n            {\n                if (v.model.HasNoData()) continue;\n                if (!v.identifier.IsValid()) continue;\n                PersistentAmmoData[v.identifier] = new PersistentAmmo(v.identifier, v.model);\n            }\n        }\n\n        internal static void Clear()\n        {\n            PersistentAmmoData.Clear();\n            AmmoIdentifier.ClearCache();\n        }\n\n        internal static void OnAmmoDecrement(AmmoIdentifier id, int slot, int count)\n        {\n            PersistentAmmoData[id].OnDecrement(slot,count);\n            if (PersistentAmmoData[id].DataModel.HasNoData()) PersistentAmmoData.Remove(id);\n        }\n\n        internal static CompoundDataPiece GetPotentialDataTag(GameObject obj)\n        {\n            var id = Identifiable.GetId(obj);\n            return GetPotentialDataTag(id);\n        }\n\n        internal static PersistentAmmo GetPersistentAmmoForAmmo(AmmoModel model)\n        {\n            var identifier = AmmoIdentifier.GetIdentifier(model);\n            if (identifier.AmmoType == AmmoType.NONE) return null;\n            if (!PersistentAmmoData.ContainsKey(identifier))\n            {\n                var newData = new PersistentAmmo(identifier, new PersistentAmmoModel(model));\n                PersistentAmmoData.Add(identifier,newData);\n                newData.Sync();\n            }\n\n            return PersistentAmmoData[identifier];\n        }\n\n        internal static bool HasPersistentAmmo(AmmoIdentifier id)\n        {\n            return PersistentAmmoData.ContainsKey(id);\n        }\n\n        internal static CompoundDataPiece GetPotentialDataTag(Identifiable.Id id)\n        {\n            foreach (var ammo in PersistentAmmoData)\n            {\n                if (ammo.Value.potentialId == id)\n                {\n                    var piece = ammo.Value.potentialTag;\n                    ammo.Value.ClearSelected();\n                    return piece;\n                }\n            }\n\n            return null;\n        }\n\n        internal static void Push(ModdedSaveData data)\n        {\n            foreach (var v in PersistentAmmoData.Where((x)=>!x.Value.DataModel.HasNoData()))\n            {\n                data.ammoDataEntries.Add(new IdentifiableAmmoData(){identifier = v.Key,model = v.Value.DataModel});\n            }\n        }\n\n        internal static void SyncAll()\n        {\n            List<AmmoIdentifier> invalidIdentifiers = new List<AmmoIdentifier>();\n            foreach(var v in PersistentAmmoData)\n            {\n                try\n                {\n                    if (v.Key.ResolveModel() == null) invalidIdentifiers.Add(v.Key);\n                }\n                catch\n                {\n                    Debug.LogError($\"Error ocurred while attempting to resolve ammo identifier {v.Key.AmmoType} {v.Key.stringIdentifier}-{v.Key.longIdentifier}\");\n                    invalidIdentifiers.Add(v.Key);\n                }\n            }\n            invalidIdentifiers.ForEach(x => PersistentAmmoData.Remove(x));\n            foreach (var v in PersistentAmmoData) v.Value.Sync(true);\n        }\n\n\n\n    }\n}\n\n'SRML/SRML/SR/ExchangeOfferRegistry.cs'\n:﻿using HarmonyLib;\nusing MonomiPark.SlimeRancher.Persist;\nusing SRML.SR.SaveSystem;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\n\nnamespace SRML.SR\n{\n    public static class ExchangeOfferRegistry\n    {\n        internal static IDRegistry<ProgressDirector.ProgressType> moddedProgress = new IDRegistry<ProgressDirector.ProgressType>();\n        internal static IDRegistry<RancherChatMetadata.Entry.RancherName> moddedRancherNames = new IDRegistry<RancherChatMetadata.Entry.RancherName>();\n\n        internal static Dictionary<ExchangeDirector.Rancher, SRMod> customRanchers = new Dictionary<ExchangeDirector.Rancher, SRMod>();\n        internal static Dictionary<(ExchangeDirector.Category, Identifiable.Id[]), SRMod> customCategories = new Dictionary<(ExchangeDirector.Category, Identifiable.Id[]), SRMod>();\n        internal static Dictionary<ProgressDirector.ProgressType, ExchangeDirector.UnlockList> customUnlocks = new Dictionary<ProgressDirector.ProgressType, ExchangeDirector.UnlockList>();\n        internal static Dictionary<Identifiable.Id, float> customUnlockValues = new Dictionary<Identifiable.Id, float>();\n        internal static Dictionary<string, SRMod> customRancherIDs = new Dictionary<string, SRMod>();\n        internal static Dictionary<string, SRMod> customOfferIDs = new Dictionary<string, SRMod>();\n\n        static ExchangeOfferRegistry()\n        {\n            ModdedIDRegistry.RegisterIDRegistry(moddedProgress);\n            ModdedIDRegistry.RegisterIDRegistry(moddedRancherNames);\n        }\n\n\n\n\n\n        public static void RegisterRancher(ExchangeDirector.Rancher rancher) => customRanchers.Add(rancher, SRMod.GetCurrentMod());\n\n\n\n\n\n        public static void RegisterRancherID(string id) => customRancherIDs.Add(id, SRMod.GetCurrentMod());\n\n\n\n\n\n        public static void RegisterOfferID(string id) => customOfferIDs.Add(id, SRMod.GetCurrentMod());\n\n\n\n\n\n\n        public static void RegisterCategory(ExchangeDirector.Category category, Identifiable.Id[] ids) => customCategories.Add((category, ids), SRMod.GetCurrentMod());\n\n\n\n\n\n\n\n        public static void RegisterUnlockableItem(Identifiable.Id item, ProgressDirector.ProgressType type, int countForValue)\n        {\n            if (!customUnlocks.ContainsKey(type)) customUnlocks[type] = new ExchangeDirector.UnlockList() { unlock = type, ids = new Identifiable.Id[0] };\n            customUnlocks[type].ids = customUnlocks[type].ids.AddToArray(item);\n            customUnlockValues.Add(item, countForValue);\n        }\n\n\n\n\n\n\n        public static void RegisterInitialItem(Identifiable.Id item, int countForValue) => RegisterUnlockableItem(item, ProgressDirector.ProgressType.NONE, countForValue);\n\n\n\n\n\n\n        public static bool IsCustom(string id) => customRancherIDs.ContainsKey(id) || customOfferIDs.ContainsKey(id);\n\n\n\n\n\n\n        public static bool IsCustom(ExchangeDirector.Rancher entry) => customRanchers.ContainsKey(entry);\n\n\n\n\n\n\n        public static bool IsCustom(ExchangeDirector.Category cat) => customCategories.Any(x => x.Key.Item1 == cat);\n\n        internal static bool IsCustom(ExchangeOfferV04 offer) => IsCustom(offer.offerId) || IsCustom(offer.rancherId);\n\n        internal static SRMod GetModForData(ExchangeOfferV04 offer) => customRancherIDs.Get(offer.rancherId) ?? customOfferIDs.Get(offer.offerId);\n\n        internal static SRMod GetModForID(string id) => customRancherIDs.Get(id) ?? customOfferIDs.Get(id);\n    }\n}\n\n'SRML/SRML/SR/Utils/LookupDirectorExtension.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing SRML;\nusing SRML.SR;\nusing SRML.SR.Templates.Identifiables;\nusing UnityEngine;\n\npublic static class LookupDirectorExtension\n{\n\n\tinternal readonly static Dictionary<Identifiable.Id, GameObject> gardenResources = new Dictionary<Identifiable.Id, GameObject>();\n\n\n\tpublic static GameObject GetGardenResourcePrefab(this LookupDirector director, Identifiable.Id ID)\n\t{\n\t\treturn gardenResources.ContainsKey(ID) ? gardenResources[ID] : null;\n\t}\n\n\tpublic static GameObject GetLargoPrefab(this LookupDirector director, Identifiable.Id slimeA, Identifiable.Id slimeB)\n\t{\n\t\tIdentifiable.Id largo = Identifiable.Id.NONE;\n\n\t\tstring nameA = slimeA.ToString().Replace(\"_SLIME\", \"\");\n\t\tstring nameB = slimeB.ToString().Replace(\"_SLIME\", \"\");\n\n\t\tstring largoA = $\"{nameA}_{nameB}_LARGO\";\n\t\tstring largoB = $\"{nameB}_{nameA}_LARGO\";\n\n\t\tobject result = Enum.Parse(typeof(Identifiable.Id), largoA) ?? Enum.Parse(typeof(Identifiable.Id), largoB);\n\n\t\tif (result != null)\n\t\t\tlargo = (Identifiable.Id)result;\n\n\t\treturn largo == Identifiable.Id.NONE ? null : director.GetPrefab(largo);\n\t}\n\n\n\tpublic static Identifiable GetIdentifiable(this LookupDirector director, Identifiable.Id ID)\n\t{\n\t\treturn director.GetPrefab(ID).GetComponent<Identifiable>();\n\t}\n\n\n\tpublic static List<Identifiable.Id> GetSlimeIDs(this LookupDirector director, params Identifiable.Id[] exclusions)\n\t{\n\t\tList<Identifiable.Id> result = new List<Identifiable.Id>();\n\t\tList<Identifiable.Id> exclude = new List<Identifiable.Id>(exclusions);\n\n\t\tforeach (Identifiable.Id id in Enum.GetValues(typeof(Identifiable.Id)))\n\t\t{\n\t\t\tif (exclude.Contains(id))\n\t\t\t\tcontinue;\n\n\t\t\tif (!id.ToString().EndsWith(\"_SLIME\"))\n\t\t\t\tcontinue;\n\n\t\t\tresult.Add(id);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\n\tpublic static bool LargoExists(this LookupDirector director, Identifiable.Id slimeA, Identifiable.Id slimeB)\n\t{\n\t\tstring nameA = slimeA.ToString().Replace(\"_SLIME\", \"\");\n\t\tstring nameB = slimeB.ToString().Replace(\"_SLIME\", \"\");\n\n\t\tstring largoA = $\"{nameA}_{nameB}_LARGO\";\n\t\tstring largoB = $\"{nameB}_{nameA}_LARGO\";\n\n\t\tobject result = Enum.Parse(typeof(Identifiable.Id), largoA) ?? Enum.Parse(typeof(Identifiable.Id), largoB);\n\n\t\treturn result != null;\n\t}\n\n\n\tpublic static List<Identifiable.Id> MakeLargos(this LookupDirector director, Identifiable.Id slimeA, Action<SlimeDefinition> extraLargoBehaviour = null, Predicate<Identifiable.Id> canBeTarr = null, Predicate<Identifiable.Id> forceLargo = null)\n\t{\n\t\tList<Identifiable.Id> largoIDs = new List<Identifiable.Id>();\n\n\t\tforeach (Identifiable.Id id in GameContext.Instance.LookupDirector.GetSlimeIDs(slimeA))\n\t\t\tlargoIDs.Add(director.CraftLargo(slimeA, id, extraLargoBehaviour, canBeTarr, forceLargo));\n\n\t\tlargoIDs.RemoveAll((id) => id == Identifiable.Id.NONE);\n\n\t\treturn largoIDs;\n\t}\n\n\tpublic static Identifiable.Id CraftLargo(this LookupDirector director, Identifiable.Id slimeA, Identifiable.Id slimeB, Action<SlimeDefinition> extraLargoBehaviour = null, Predicate<Identifiable.Id> canBeTarr = null, Predicate<Identifiable.Id> forceLargo = null)\n\t{\n\t\tif (director.LargoExists(slimeA, slimeB))\n\t\t\treturn Identifiable.Id.NONE;\n\n\t\tstring prefabName = \"slime\" +\n\t\t\tslimeA.ToString().Replace(\"_SLIME\", \"\").ToUpper()[0] + slimeA.ToString().Replace(\"_SLIME\", \"\").ToLower().Substring(1) +\n\t\t\tslimeB.ToString().Replace(\"_SLIME\", \"\").ToUpper()[0] + slimeB.ToString().Replace(\"_SLIME\", \"\").ToLower().Substring(1);\n\n\t\tstring name = slimeA.ToString().Replace(\"_SLIME\", \"\") + slimeB.ToString().Replace(\"_SLIME\", \"\") + \"_LARGO\";\n\t\tIdentifiable.Id largoID = IdentifiableRegistry.CreateIdentifiableId(EnumPatcher.GetFirstFreeValue(typeof(Identifiable.Id)), name);\n\n\t\tSlimeDefinitions defs = GameContext.Instance.SlimeDefinitions;\n\n\t\tSlimeDefinition curr = defs.GetSlimeByIdentifiableId(slimeA);\n\t\tSlimeDefinition other = defs.GetSlimeByIdentifiableId(slimeB);\n\n\t\tbool largofyState = curr.CanLargofy;\n\t\tcurr.CanLargofy = true;\n\n\t\tif (!other.CanLargofy && !(forceLargo?.Invoke(slimeB) ?? false))\n\t\t\treturn Identifiable.Id.NONE;\n\n\t\tbool largofyStateB = other.CanLargofy;\n\t\tother.CanLargofy = true;\n\n\t\tSlimeDefinition largoDef = defs.GetLargoByBaseSlimes(curr, other);\n\t\tlargoDef.IdentifiableId = largoID;\n\n\t\tcurr.CanLargofy = largofyState;\n\t\tother.CanLargofy = largofyStateB;\n\n\t\tif (!(canBeTarr?.Invoke(slimeB) ?? true))\n\t\t{\n\t\t\tlargoDef.Diet.EatMap.RemoveAll((entry) => entry.becomesId == Identifiable.Id.TARR_SLIME);\n\t\t\tlargoDef.Diet.EatMap.RemoveAll((entry) => entry.becomesId == Identifiable.Id.GLITCH_TARR_SLIME);\n\t\t}\n\n\t\textraLargoBehaviour?.Invoke(largoDef);\n\n\t\tSlimeTemplate largoTemplate = new SlimeTemplate(prefabName, largoDef).SetVacSize(Vacuumable.Size.LARGE)\n\t\t\t.SetTranslation(curr.Name + \" \" + other.Name + \" Largo\").Create();\n\n\t\tLookupRegistry.RegisterIdentifiablePrefab(largoTemplate.ToPrefab());\n\n\t\treturn largoID;\n\t}\n\n\n\tpublic static SlimeTemplate MakeRoamingGordo(this LookupDirector director, string name, Identifiable.Id gordoID, SlimeDefinition definition)\n\t{\n\t\tSlimeDefinition gordoDef = ScriptableObject.CreateInstance<SlimeDefinition>();\n\t\tgordoDef.AppearancesDefault = definition.AppearancesDefault;\n\t\tgordoDef.AppearancesDynamic = definition.AppearancesDynamic;\n\t\tgordoDef.BaseModule = definition.BaseModule;\n\t\tgordoDef.BaseSlimes = definition.BaseSlimes;\n\t\tgordoDef.CanLargofy = false;\n\t\tgordoDef.Diet = definition.Diet;\n\t\tgordoDef.FavoriteToys = new Identifiable.Id[0];\n\t\tgordoDef.IdentifiableId = gordoID;\n\t\tgordoDef.IsLargo = true;\n\t\tgordoDef.PrefabScale = 4f;\n\t\tgordoDef.SlimeModules = definition.SlimeModules;\n\t\tgordoDef.Sounds = definition.Sounds;\n\t\tgordoDef.Name = \"roamGordo.\" + definition.Name;\n\n\t\tFearProfile prof = ScriptableObject.CreateInstance<FearProfile>();\n\t\tprof.threats = new List<FearProfile.ThreatEntry>();\n\t\tprof.GetType().GetMethod(\"OnEnable\", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance).Invoke(prof, new object[0]);\n\n\t\tSlimeTemplate gordo = new SlimeTemplate(name, gordoDef).SetVacSize(Vacuumable.Size.GIANT)\n\t\t\t.SetHealth(60).SetFeralState(false).SetGlitchState(false).SetFearProfile(prof).SetTranslation(definition.Name + \" Gordo\");\n\n\t\tIdentifiable.SLIME_CLASS.Add(gordoID);\n\n\t\treturn gordo;\n\t}\n\n\tpublic static GordoTemplate MakeStaticGordo(this LookupDirector director, string name, Identifiable.Id gordoID, SlimeDefinition definition, Material[] gordoMaterials)\n\t{\n\t\treturn new GordoTemplate(name, gordoID, definition, gordoMaterials).SetTranslation(definition.Name + \" Gordo\");\n\t}\n\n\n\tinternal static void InitExtension(this LookupDirector director)\n\t{\n\n\t\tGameObject gingerSpawnResource = director.GetPrefab(Identifiable.Id.GINGER_VEGGIE).CreatePrefabCopy();\n\t\tgingerSpawnResource.GetComponent<ResourceCycle>().unripeGameHours = 12;\n\n\t\tGameObject kookadobaSpawnResource = director.GetPrefab(Identifiable.Id.KOOKADOBA_FRUIT).CreatePrefabCopy();\n\t\tkookadobaSpawnResource.GetComponent<ResourceCycle>().unripeGameHours = 6;\n\n\n\t\tgardenResources.Add(Identifiable.Id.BEET_VEGGIE, director.GetPrefab(Identifiable.Id.BEET_VEGGIE));\n\t\tgardenResources.Add(Identifiable.Id.CARROT_VEGGIE, director.GetPrefab(Identifiable.Id.CARROT_VEGGIE));\n\t\tgardenResources.Add(Identifiable.Id.GINGER_VEGGIE, gingerSpawnResource);\n\t\tgardenResources.Add(Identifiable.Id.OCAOCA_VEGGIE, director.GetPrefab(Identifiable.Id.OCAOCA_VEGGIE));\n\t\tgardenResources.Add(Identifiable.Id.ONION_VEGGIE, director.GetPrefab(Identifiable.Id.BEET_VEGGIE));\n\t\tgardenResources.Add(Identifiable.Id.PARSNIP_VEGGIE, director.GetPrefab(Identifiable.Id.PARSNIP_VEGGIE));\n\t\tgardenResources.Add(Identifiable.Id.CUBERRY_FRUIT, director.GetPrefab(Identifiable.Id.CUBERRY_FRUIT));\n\t\tgardenResources.Add(Identifiable.Id.KOOKADOBA_FRUIT, kookadobaSpawnResource);\n\t\tgardenResources.Add(Identifiable.Id.LEMON_FRUIT, director.GetPrefab(Identifiable.Id.LEMON_FRUIT));\n\t\tgardenResources.Add(Identifiable.Id.MANGO_FRUIT, director.GetPrefab(Identifiable.Id.MANGO_FRUIT));\n\t\tgardenResources.Add(Identifiable.Id.PEAR_FRUIT, director.GetPrefab(Identifiable.Id.PEAR_FRUIT));\n\t\tgardenResources.Add(Identifiable.Id.POGO_FRUIT, director.GetPrefab(Identifiable.Id.POGO_FRUIT));\n\t}\n}\n",
        "gt": [
            "'SRML/SRML/SR/SaveSystem/PersistentAmmoManager.cs'",
            "'SRML/SRML/SR/ExchangeOfferRegistry.cs'",
            "'SRML/SRML/SR/Utils/LookupDirectorExtension.cs'"
        ]
    },
    {
        "files": [
            "'WebApi2Book/src/WebApi2Book.Web.Api/InquiryProcessing/IAllTasksInquiryProcessor.cs'",
            "'WebApi2Book/src/WebApi2Book.Data/ResultsPagingUtility.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api/LegacyProcessing/ProcessingStrategies/GetTaskByIdMessageProcessingStrategy.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api/App_Start/NinjectWebCommon.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api/LegacyProcessing/LegacyMessageProcessor.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api/Global.asax.cs'"
        ],
        "content": "'WebApi2Book/src/WebApi2Book.Web.Api/InquiryProcessing/IAllTasksInquiryProcessor.cs'\n:﻿\n\n\nusing WebApi2Book.Data;\nusing WebApi2Book.Web.Api.Models;\n\nnamespace WebApi2Book.Web.Api.InquiryProcessing\n{\n    public interface IAllTasksInquiryProcessor\n    {\n        PagedDataInquiryResponse<Task> GetTasks(PagedDataRequest requestInfo);\n    }\n}\n'WebApi2Book/src/WebApi2Book.Data/ResultsPagingUtility.cs'\n:﻿\n\n\nusing System;\nusing WebApi2Book.Common;\n\nnamespace WebApi2Book.Data\n{\n\n\n\n    public static class ResultsPagingUtility\n    {\n        private const string ValueLessThanOneErrorMessage = \"Value may not be less than 1.\";\n        private const string ValueLessThanZeroErrorMessage = \"Value may not be less than 0.\";\n\n        public static int CalculatePageSize(int requestedValue, int maxValue)\n        {\n            if (requestedValue < 1)\n                throw new ArgumentOutOfRangeException(\"requestedValue\", requestedValue, ValueLessThanOneErrorMessage);\n            if (maxValue < 1)\n                throw new ArgumentOutOfRangeException(\"maxValue\", maxValue, ValueLessThanOneErrorMessage);\n\n            var boundedPageSize = Math.Min(requestedValue, maxValue);\n            return boundedPageSize;\n        }\n\n        public static int CalculateStartIndex(int pageNumber, int pageSize)\n        {\n            if (pageNumber < 1)\n                throw new ArgumentOutOfRangeException(Constants.CommonParameterNames.PageNumber, pageNumber,\n                    ValueLessThanOneErrorMessage);\n            if (pageSize < 1)\n                throw new ArgumentOutOfRangeException(Constants.CommonParameterNames.PageSize, pageSize,\n                    ValueLessThanOneErrorMessage);\n\n            var startIndex = (pageNumber - 1)*pageSize;\n            return startIndex;\n        }\n\n        public static int CalculatePageCount(int totalItemCount, int pageSize)\n        {\n            if (totalItemCount < 0)\n                throw new ArgumentOutOfRangeException(\"totalItemCount\", totalItemCount, ValueLessThanZeroErrorMessage);\n            if (pageSize < 1)\n                throw new ArgumentOutOfRangeException(Constants.CommonParameterNames.PageSize, pageSize,\n                    ValueLessThanOneErrorMessage);\n\n            var totalPageCount = (totalItemCount + pageSize - 1)/pageSize;\n            return totalPageCount;\n        }\n    }\n}\n'WebApi2Book/src/WebApi2Book.Web.Api/LegacyProcessing/ProcessingStrategies/GetTaskByIdMessageProcessingStrategy.cs'\n:﻿\n\n\nusing System.IO;\nusing System.Linq;\nusing System.Xml.Linq;\nusing System.Xml.Serialization;\nusing WebApi2Book.Common;\nusing WebApi2Book.Data.Exceptions;\nusing WebApi2Book.Web.Api.InquiryProcessing;\nusing WebApi2Book.Web.Api.Models;\n\nnamespace WebApi2Book.Web.Api.LegacyProcessing.ProcessingStrategies\n{\n    public class GetTaskByIdMessageProcessingStrategy : ILegacyMessageProcessingStrategy\n    {\n        private readonly ITaskByIdInquiryProcessor _inquiryProcessor;\n\n        public GetTaskByIdMessageProcessingStrategy(ITaskByIdInquiryProcessor inquiryProcessor)\n        {\n            _inquiryProcessor = inquiryProcessor;\n        }\n\n        public object Execute(XElement operationElement)\n        {\n            XNamespace ns = Constants.DefaultLegacyNamespace;\n\n            var id = PrimitiveTypeParser.Parse<long>(operationElement.Descendants(ns + \"taskId\").First().Value);\n\n            Task task = null;\n            try\n            {\n                task = _inquiryProcessor.GetTask(id);\n            }\n            catch (RootObjectNotFoundException)\n            {\n\n            }\n\n            using (var stream = new MemoryStream())\n            {\n                var serializer = new XmlSerializer(typeof (Task), Constants.DefaultLegacyNamespace);\n                serializer.Serialize(stream, task);\n\n                stream.Seek(0, 0);\n\n                var xDocument = XDocument.Load(stream, LoadOptions.None);\n                var taskAsXElement = xDocument.Descendants(ns + \"Task\");\n                return taskAsXElement.Elements();\n            }\n        }\n\n        public bool CanProcess(string operationName)\n        {\n            return operationName == \"GetTaskById\";\n        }\n    }\n}\n'WebApi2Book/src/WebApi2Book.Web.Api/App_Start/NinjectWebCommon.cs'\n:\n\n\nusing System;\nusing System.Web;\nusing System.Web.Http;\nusing Microsoft.Web.Infrastructure.DynamicModuleHelper;\nusing Ninject;\nusing Ninject.Web.Common;\nusing WebActivatorEx;\nusing WebApi2Book.Web.Api;\nusing WebApi2Book.Web.Common;\n\n[assembly: WebActivatorEx.PreApplicationStartMethod(typeof (NinjectWebCommon), \"Start\")]\n[assembly: ApplicationShutdownMethod(typeof (NinjectWebCommon), \"Stop\")]\n\nnamespace WebApi2Book.Web.Api\n{\n    public static class NinjectWebCommon\n    {\n        private static readonly Bootstrapper Bootstrapper = new Bootstrapper();\n\n\n\n\n        public static void Start()\n        {\n            DynamicModuleUtility.RegisterModule(typeof (OnePerRequestHttpModule));\n            DynamicModuleUtility.RegisterModule(typeof (NinjectHttpModule));\n\n            IKernel container = null;\n            Bootstrapper.Initialize(() =>\n            {\n                container = CreateKernel();\n                return container;\n            });\n\n\n            var resolver = new NinjectDependencyResolver(container);\n            GlobalConfiguration.Configuration.DependencyResolver = resolver;\n        }\n\n\n\n\n        public static void Stop()\n        {\n            Bootstrapper.ShutDown();\n        }\n\n\n\n\n\n        private static IKernel CreateKernel()\n        {\n            var kernel = new StandardKernel();\n            try\n            {\n                kernel.Bind<Func<IKernel>>().ToMethod(ctx => () => new Bootstrapper().Kernel);\n                kernel.Bind<IHttpModule>().To<HttpApplicationInitializationHttpModule>();\n\n                RegisterServices(kernel);\n                return kernel;\n            }\n            catch\n            {\n                kernel.Dispose();\n                throw;\n            }\n        }\n\n\n\n\n\n        private static void RegisterServices(IKernel kernel)\n        {\n            var containerConfigurator = new NinjectConfigurator();\n            containerConfigurator.Configure(kernel);\n        }\n    }\n}\n'WebApi2Book/src/WebApi2Book.Web.Api/LegacyProcessing/LegacyMessageProcessor.cs'\n:﻿\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Xml.Linq;\nusing WebApi2Book.Web.Api.LegacyProcessing.ProcessingStrategies;\n\nnamespace WebApi2Book.Web.Api.LegacyProcessing\n{\n    public class LegacyMessageProcessor : ILegacyMessageProcessor\n    {\n        private readonly ILegacyMessageParser _legacyMessageParser;\n        private readonly IEnumerable<ILegacyMessageProcessingStrategy> _legacyMessageProcessingStrategies;\n\n        public LegacyMessageProcessor(ILegacyMessageParser legacyMessageParser,\n            IEnumerable<ILegacyMessageProcessingStrategy> legacyMessageProcessingStrategies)\n        {\n            _legacyMessageParser = legacyMessageParser;\n            _legacyMessageProcessingStrategies = legacyMessageProcessingStrategies;\n        }\n\n        public virtual LegacyResponse ProcessLegacyMessage(XDocument request)\n        {\n            var operationElement = _legacyMessageParser.GetOperationElement(request);\n            var opName = operationElement.Name.LocalName;\n\n            foreach (var legacyMessageProcessingStrategy in _legacyMessageProcessingStrategies)\n            {\n                if (legacyMessageProcessingStrategy.CanProcess(opName))\n                {\n                    var legacyResponse = new LegacyResponse\n                    {\n                        Request = request,\n                        ProcessingResult = legacyMessageProcessingStrategy.Execute(operationElement)\n                    };\n                    return legacyResponse;\n                }\n            }\n\n            throw new NotSupportedException(opName);\n        }\n    }\n}\n'WebApi2Book/src/WebApi2Book.Web.Api/Global.asax.cs'\n:﻿\n\n\nusing System.Net.Http.Formatting;\nusing System.Web;\nusing System.Web.Http;\nusing JwtAuthForWebAPI;\nusing WebApi2Book.Common.Logging;\nusing WebApi2Book.Common.Security;\nusing WebApi2Book.Common.TypeMapping;\nusing WebApi2Book.Web.Api.LegacyProcessing;\nusing WebApi2Book.Web.Api.Security;\nusing WebApi2Book.Web.Common;\n\nnamespace WebApi2Book.Web.Api\n{\n    public class WebApiApplication : HttpApplication\n    {\n        protected void Application_Start()\n        {\n            GlobalConfiguration.Configure(WebApiConfig.Register);\n\n            ConfigureFormatters();\n\n            RegisterHandlers();\n\n            new AutoMapperConfigurator().Configure(WebContainerManager.GetAll<IAutoMapperTypeConfigurator>());\n        }\n\n        private void ConfigureFormatters()\n        {\n            var legacyFormatter = (MediaTypeFormatter) WebContainerManager.Get<ILegacyMessageTypeFormatter>();\n            GlobalConfiguration.Configuration.Formatters.Insert(0, legacyFormatter);\n        }\n\n        private void RegisterHandlers()\n        {\n            var logManager = WebContainerManager.Get<ILogManager>();\n            var userSession = WebContainerManager.Get<IUserSession>();\n\n            GlobalConfiguration.Configuration.MessageHandlers.Add(\n                new BasicAuthenticationMessageHandler(logManager,\n                    WebContainerManager.Get<IBasicSecurityService>()));\n\n            GlobalConfiguration.Configuration.MessageHandlers.Add(new TaskDataSecurityMessageHandler(logManager,\n                userSession));\n            GlobalConfiguration.Configuration.MessageHandlers.Add(new PagedTaskDataSecurityMessageHandler(logManager,\n                userSession));\n\n            var builder = new SecurityTokenBuilder();\n            var reader = new ConfigurationReader();\n            GlobalConfiguration.Configuration.MessageHandlers.Add(\n                new JwtAuthenticationMessageHandler\n                {\n                    AllowedAudience = reader.AllowedAudience,\n                    Issuer = reader.Issuer,\n                    SigningToken = builder.CreateFromKey(reader.SymmetricKey),\n                    CookieNameToCheckForToken = reader.CookieNameToCheckForToken\n                });\n        }\n\n        protected void Application_Error()\n        {\n            var exception = Server.GetLastError();\n            if (exception != null)\n            {\n                var log = WebContainerManager.Get<ILogManager>().GetLog(typeof (WebApiApplication));\n                log.Error(\"Unhandled exception.\", exception);\n            }\n        }\n    }\n}",
        "gt": [
            "'WebApi2Book/src/WebApi2Book.Data/ResultsPagingUtility.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api/InquiryProcessing/IAllTasksInquiryProcessor.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api/LegacyProcessing/ProcessingStrategies/GetTaskByIdMessageProcessingStrategy.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api/LegacyProcessing/LegacyMessageProcessor.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api/Global.asax.cs'",
            "'WebApi2Book/src/WebApi2Book.Web.Api/App_Start/NinjectWebCommon.cs'"
        ]
    },
    {
        "files": [
            "'Fitbit.NET/Fitbit.Portable/FitbitClientHelper.cs'",
            "'Fitbit.NET/Fitbit.Portable/Models/Awake.cs'",
            "'Fitbit.NET/Fitbit.Portable.Tests/DayActivityTests.cs'"
        ],
        "content": "'Fitbit.NET/Fitbit.Portable/FitbitClientHelper.cs'\n:﻿using System;\nusing Fitbit.Api.Portable.Models;\nusing Fitbit.Models;\n\nnamespace Fitbit.Api.Portable\n{\n    internal static class FitbitClientExtensions\n    {\n        internal static void ProcessSleepData(SleepData sleepData)\n        {\n            if ((sleepData != null) && (sleepData.Sleep != null))\n            {\n                foreach (var sleepLog in sleepData.Sleep)\n                {\n                    if (sleepLog.MinuteData == null)\n                        continue;\n\n                    int startSleepSeconds = sleepLog.StartTime.ToElapsedSeconds();\n\n                    for (int i = 0; i < sleepLog.MinuteData.Count; i++)\n                    {\n\n                        var minuteData = sleepLog.MinuteData[i];\n\n\n                        int currentSeconds = minuteData.DateTime.ToElapsedSeconds();\n\n\n                        int daysToAdd = (currentSeconds < startSleepSeconds) ? 1 : 0;\n                        DateTime derivedDate = sleepLog.StartTime.AddDays(daysToAdd);\n\n\n                        sleepLog.MinuteData[i].DateTime = new DateTime(\n                                                        derivedDate.Year,\n                                                        derivedDate.Month,\n                                                        derivedDate.Day,\n                                                        minuteData.DateTime.Hour,\n                                                        minuteData.DateTime.Minute,\n                                                        minuteData.DateTime.Second);\n                    }\n                }\n            }\n        }\n    }\n}\n'Fitbit.NET/Fitbit.Portable/Models/Awake.cs'\n:namespace Fitbit.Api.Portable.Models\n{\n    public class Awake\n    {\n        public int Count { get; set; }\n        public int Minutes { get; set; }\n    }\n}\n'Fitbit.NET/Fitbit.Portable.Tests/DayActivityTests.cs'\n:﻿using System;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Fitbit.Api.Portable;\nusing Fitbit.Models;\nusing FluentAssertions;\nusing NUnit.Framework;\n\nnamespace Fitbit.Portable.Tests\n{\n    [TestFixture]\n    public class DayActivityTests\n    {\n        [Test] [Category(\"Portable\")]\n        public async Task GetDayActivityAsync_Success()\n        {\n            string content = SampleDataHelper.GetContent(\"GetActivities.json\");\n\n            var responseMessage = new Func<HttpResponseMessage>(() =>\n            {\n                return new HttpResponseMessage(HttpStatusCode.OK) { Content = new StringContent(content) };\n            });\n\n            var verification = new Action<HttpRequestMessage, CancellationToken>((message, token) =>\n            {\n                Assert.AreEqual(HttpMethod.Get, message.Method);\n                Assert.AreEqual(\"https:\n            });\n\n            var fitbitClient = Helper.CreateFitbitClient(responseMessage, verification);\n\n            var response = await fitbitClient.GetDayActivityAsync(new DateTime(2014, 9, 27));\n\n            ValidateActivity(response);\n        }\n\n        [Test] [Category(\"Portable\")]\n        public void GetDayActivityAsync_Errors()\n        {\n            var responseMessage = Helper.CreateErrorResponse(HttpStatusCode.Unauthorized);\n            var verification = new Action<HttpRequestMessage, CancellationToken>((message, token) =>\n            {\n                Assert.AreEqual(HttpMethod.Get, message.Method);\n            });\n\n            var fitbitClient = Helper.CreateFitbitClient(responseMessage, verification);\n\n            Func<Task<Activity>> result = () => fitbitClient.GetDayActivityAsync(new DateTime(2014, 9, 27));\n\n            result.Should().Throw<FitbitRequestException>().Which.ApiErrors.Count.Should().Be(1);\n        }\n\n        [Test] [Category(\"Portable\")]\n        public async Task GetDayActivitySummaryAsync_Success()\n        {\n            string content = SampleDataHelper.GetContent(\"GetActivities.json\");\n\n            var responseMessage = new Func<HttpResponseMessage>(() =>\n            {\n                return new HttpResponseMessage(HttpStatusCode.OK) { Content = new StringContent(content) };\n            });\n\n            var verification = new Action<HttpRequestMessage, CancellationToken>((message, token) =>\n            {\n                Assert.AreEqual(HttpMethod.Get, message.Method);\n                Assert.AreEqual(\"https:\n            });\n\n            var fitbitClient = Helper.CreateFitbitClient(responseMessage, verification);\n\n            var response = await fitbitClient.GetDayActivitySummaryAsync(new DateTime(2014, 9, 27));\n\n            ValidateActivitySummary(response);\n        }\n\n        [Test] [Category(\"Portable\")]\n        public void GetDayActivitySummaryAsync_Errors()\n        {\n            var responseMessage = Helper.CreateErrorResponse(HttpStatusCode.Forbidden);\n            var verification = new Action<HttpRequestMessage, CancellationToken>((message, token) =>\n            {\n                Assert.AreEqual(HttpMethod.Get, message.Method);\n            });\n\n            var fitbitClient = Helper.CreateFitbitClient(responseMessage, verification);\n\n            Func<Task<Activity>> result = () => fitbitClient.GetDayActivityAsync(new DateTime(2014, 9, 27));\n\n            result.Should().Throw<FitbitRequestException>().Which.ApiErrors.Count.Should().Be(1);\n        }\n\n        [Test] [Category(\"Portable\")]\n        public void Can_Deserialize_Activity()\n        {\n            string content = SampleDataHelper.GetContent(\"GetActivities.json\");\n            var deserializer = new JsonDotNetSerializer();\n\n            Activity activity = deserializer.Deserialize<Activity>(content);\n\n            ValidateActivity(activity);\n        }\n\n        [Test] [Category(\"Portable\")]\n        public void Can_Deserialize_ActivitySummary()\n        {\n            string content = SampleDataHelper.GetContent(\"GetActivities.json\");\n            var deserializer = new JsonDotNetSerializer { RootProperty = \"summary\"};\n\n            ActivitySummary summary = deserializer.Deserialize<ActivitySummary>(content);\n\n            ValidateActivitySummary(summary);\n        }\n\n        [Test] [Category(\"Portable\")]\n        public void Can_Deserialize_ActivityGoal_Invidual()\n        {\n            string content = SampleDataHelper.GetContent(\"ActivityGoals.json\");\n            var deserializer = new JsonDotNetSerializer { RootProperty = \"goals\" };\n\n            ActivityGoals goal = deserializer.Deserialize<ActivityGoals>(content);\n\n            ValidateActivityGoals(goal);\n        }\n\n        [Test] [Category(\"Portable\")]\n        public void Can_Deserialize_ActivityGoal_FromActivities()\n        {\n            string content = SampleDataHelper.GetContent(\"GetActivities.json\");\n            var deserializer = new JsonDotNetSerializer { RootProperty = \"goals\" };\n\n            ActivityGoals goal = deserializer.Deserialize<ActivityGoals>(content);\n\n            ValidateActivityGoals(goal);\n        }\n\n        private void ValidateActivity(Activity activity)\n        {\n\n            Assert.IsNotNull(activity);\n            Assert.IsNotNull(activity.Summary);\n            Assert.IsNotNull(activity.Activities);\n            Assert.IsNotNull(activity.Goals);\n\n\n            ValidateActivitySummary(activity.Summary);\n\n\n            Assert.AreEqual(1, activity.Activities.Count);\n            var a = activity.Activities.First();\n            Assert.AreEqual(2382124, a.ActivityId);\n            Assert.AreEqual(2382124, a.ActivityParentId);\n\n            Assert.AreEqual(541, a.Calories);\n            Assert.AreEqual(\"\", a.Description);\n\n            Assert.AreEqual(2400000, a.Duration);\n            Assert.AreEqual(true, a.HasStartTime);\n            Assert.AreEqual(false, a.IsFavorite);\n\n            Assert.AreEqual(105415286, a.LogId);\n            Assert.AreEqual(\"Running (jogging), 6.7 mph (9 min mile) (MyFitnessPal)\", a.Name);\n\n            Assert.AreEqual(\"20:16\", a.StartTime);\n\n\n\n            var g = activity.Goals;\n            ValidateActivityGoals(g);\n        }\n\n        private static void ValidateActivityGoals(ActivityGoals g)\n        {\n            Assert.AreEqual(10000, g.Steps);\n            Assert.AreEqual(8.05, g.Distance);\n            Assert.AreEqual(2820, g.CaloriesOut);\n        }\n\n        private void ValidateActivitySummary(ActivitySummary summary)\n        {\n\n\n            Assert.AreEqual(2828, summary.CaloriesOut);\n            Assert.AreEqual(1457, summary.ActivityCalories);\n            Assert.AreEqual(79.25, summary.Elevation);\n            Assert.AreEqual(63, summary.FairlyActiveMinutes);\n            Assert.AreEqual(59, summary.LightlyActiveMinutes);\n\n            Assert.AreEqual(1155, summary.SedentaryMinutes);\n            Assert.AreEqual(15720, summary.Steps);\n            Assert.AreEqual(91, summary.VeryActiveMinutes);\n\n            Assert.AreEqual(1623, summary.CaloriesBMR);\n            Assert.AreEqual(26, summary.Floors);\n            Assert.AreEqual(1067, summary.MarginalCalories);\n            Assert.AreEqual(73, summary.RestingHeartRate);\n\n\n            Assert.AreEqual(4, summary.HeartRateZones.Count);\n            Assert.AreEqual(\"Out of Range\", summary.HeartRateZones[0].Name);\n            Assert.AreEqual(1198, summary.HeartRateZones[0].Minutes);\n            Assert.AreEqual(30, summary.HeartRateZones[0].Min);\n            Assert.AreEqual(94, summary.HeartRateZones[0].Max);\n            Assert.AreEqual(1594.36823, summary.HeartRateZones[0].CaloriesOut);\n\n\n            var d = summary.Distances.First(x => x.Activity == \"total\");\n            Assert.IsNotNull(d);\n            Assert.AreEqual(12.32f, d.Distance);\n\n            d = summary.Distances.First(x => x.Activity == \"tracker\");\n            Assert.IsNotNull(d);\n            Assert.AreEqual(12.32f, d.Distance);\n\n            d = summary.Distances.First(x => x.Activity == \"loggedActivities\");\n            Assert.IsNotNull(d);\n            Assert.AreEqual(0, d.Distance);\n\n            d = summary.Distances.First(x => x.Activity == \"veryActive\");\n            Assert.IsNotNull(d);\n            Assert.AreEqual(9.69f, d.Distance);\n\n            d = summary.Distances.First(x => x.Activity == \"moderatelyActive\");\n            Assert.IsNotNull(d);\n            Assert.AreEqual(1.99f, d.Distance);\n\n            d = summary.Distances.First(x => x.Activity == \"lightlyActive\");\n            Assert.IsNotNull(d);\n            Assert.AreEqual(0.57f, d.Distance);\n\n            d = summary.Distances.First(x => x.Activity == \"sedentaryActive\");\n            Assert.IsNotNull(d);\n            Assert.AreEqual(0, d.Distance);\n\n            d = summary.Distances.First(x => x.Activity == \"Running (jogging), 6.7 mph (9 min mile) (MyFitnessPal)\");\n            Assert.IsNotNull(d);\n            Assert.AreEqual(0, d.Distance);\n        }\n    }\n}",
        "gt": [
            "'Fitbit.NET/Fitbit.Portable/Models/Awake.cs'",
            "'Fitbit.NET/Fitbit.Portable/FitbitClientHelper.cs'",
            "'Fitbit.NET/Fitbit.Portable.Tests/DayActivityTests.cs'"
        ]
    },
    {
        "files": [
            "'RimThreaded/Source/RW_Patches/DrugAIUtility_Patch.cs'",
            "'RimThreaded/Source/Mod_Patches/CompUtility_Transpile.cs'",
            "'RimThreaded/Source/Mod_Patches/GeneratePawns_Patch_Transpile.cs'",
            "'RimThreaded/Source/RW_Patches/BodyDef_Patch.cs'"
        ],
        "content": "'RimThreaded/Source/RW_Patches/DrugAIUtility_Patch.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing RimWorld;\nusing UnityEngine;\nusing Verse;\nusing Verse.AI;\n\nnamespace RimThreaded.RW_Patches\n{\n    class DrugAIUtility_Patch\n    {\n\n        public static void RunDestructivePatches()\n        {\n\n            Type original = typeof(DrugAIUtility);\n            Type patched = typeof(DrugAIUtility_Patch);\n            RimThreadedHarmony.Prefix(original, patched, \"IngestAndTakeToInventoryJob\");\n        }\n\n        public static bool IngestAndTakeToInventoryJob(ref Job __result, Thing drug, Pawn pawn, int maxNumToCarry = 9999)\n        {\n            Job job = JobMaker.MakeJob(JobDefOf.Ingest, drug);\n            job.count = Mathf.Min(drug.stackCount, drug.def.ingestible.maxNumToIngestAtOnce, maxNumToCarry);\n            if (pawn.drugs != null && drugPolicyExists(pawn.drugs.CurrentPolicy.entriesInt, drug.def))\n            {\n                DrugPolicyEntry drugPolicyEntry = pawn.drugs.CurrentPolicy[drug.def];\n                int num = pawn.inventory.innerContainer.TotalStackCountOfDef(drug.def) - job.count;\n                if (drugPolicyEntry.allowScheduled && num <= 0)\n                {\n                    job.takeExtraIngestibles = drugPolicyEntry.takeToInventory;\n                }\n            }\n\n            __result = job;\n            return false;\n        }\n\n        private static bool drugPolicyExists(List<DrugPolicyEntry> entriesInt, ThingDef def)\n        {\n            for (int index = 0; index < entriesInt.Count; index++)\n            {\n                if (entriesInt[index].drug == def)\n                {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }\n}\n\n'RimThreaded/Source/Mod_Patches/CompUtility_Transpile.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection.Emit;\nusing HarmonyLib;\nusing RimThreaded.Mod_Patches;\nusing Verse;\n\nnamespace RimThreaded\n{\n\tpublic class CompUtility_Transpile\n\t{\n\t\tpublic static IEnumerable<CodeInstruction> CompGuest(IEnumerable<CodeInstruction> instructions, ILGenerator iLGenerator)\n\t\t{\n\t\t\tList<CodeInstruction> instructionsList = instructions.ToList();\n\t\t\tType loadLockObjectType = typeof(Dictionary<,>).MakeGenericType(new[] { typeof(Pawn), Hospitality_Patch.hospitalityCompGuest });\n\t\t\tList<CodeInstruction> loadLockObjectInstructions = new List<CodeInstruction>\n\t\t\t{\n\t\t\t\tnew CodeInstruction(OpCodes.Ldsfld, AccessTools.Field(Hospitality_Patch.hospitalityCompUtility, \"guestComps\"))\n\t\t\t};\n\t\t\tList<CodeInstruction> searchInstructions = loadLockObjectInstructions.ListFullCopy();\n\t\t\tsearchInstructions.Add(new CodeInstruction(OpCodes.Ldarg_0));\n\t\t\tsearchInstructions.Add(new CodeInstruction(OpCodes.Ldloc_0));\n\t\t\tsearchInstructions.Add(new CodeInstruction(OpCodes.Callvirt, AccessTools.Method(loadLockObjectType, \"Add\")));\n\n\t\t\tint i = 0;\n\t\t\tint matchesFound = 0;\n\n\t\t\twhile (i < instructionsList.Count)\n\t\t\t{\n\t\t\t\tif (RimThreadedHarmony.IsCodeInstructionsMatching(searchInstructions, instructionsList, i))\n\t\t\t\t{\n\t\t\t\t\tmatchesFound++;\n\t\t\t\t\tforeach (CodeInstruction codeInstruction in RimThreadedHarmony.GetLockCodeInstructions(\n\t\t\t\t\t\tiLGenerator, instructionsList, i, searchInstructions.Count, loadLockObjectInstructions, loadLockObjectType))\n\t\t\t\t\t{\n\t\t\t\t\t\tyield return codeInstruction;\n\t\t\t\t\t}\n\t\t\t\t\ti += searchInstructions.Count;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tyield return instructionsList[i];\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (matchesFound < 1)\n\t\t\t{\n\t\t\t\tLog.Error(\"IL code instructions not found\");\n\t\t\t}\n\t\t}\n\t\tpublic static IEnumerable<CodeInstruction> OnPawnRemoved(IEnumerable<CodeInstruction> instructions, ILGenerator iLGenerator)\n\t\t{\n\t\t\tList<CodeInstruction> instructionsList = instructions.ToList();\n\t\t\tType loadLockObjectType = typeof(Dictionary<,>).MakeGenericType(new Type[] { typeof(Pawn), Hospitality_Patch.hospitalityCompGuest });\n\t\t\tList<CodeInstruction> loadLockObjectInstructions = new List<CodeInstruction>\n\t\t\t{\n\t\t\t\tnew CodeInstruction(OpCodes.Ldsfld, AccessTools.Field(Hospitality_Patch.hospitalityCompUtility, \"guestComps\"))\n\t\t\t};\n\t\t\tList<CodeInstruction> searchInstructions = loadLockObjectInstructions.ListFullCopy();\n\t\t\tsearchInstructions.Add(new CodeInstruction(OpCodes.Ldarg_0));\n\t\t\tsearchInstructions.Add(new CodeInstruction(OpCodes.Callvirt, AccessTools.Method(loadLockObjectType, \"Remove\", new Type[] { typeof(Pawn) })));\n\t\t\tsearchInstructions.Add(new CodeInstruction(OpCodes.Pop));\n\n\t\t\tint i = 0;\n\t\t\tint matchesFound = 0;\n\n\t\t\twhile (i < instructionsList.Count)\n\t\t\t{\n\t\t\t\tif (RimThreadedHarmony.IsCodeInstructionsMatching(searchInstructions, instructionsList, i))\n\t\t\t\t{\n\t\t\t\t\tmatchesFound++;\n\t\t\t\t\tforeach (CodeInstruction codeInstruction in RimThreadedHarmony.GetLockCodeInstructions(\n\t\t\t\t\t\tiLGenerator, instructionsList, i, searchInstructions.Count, loadLockObjectInstructions, loadLockObjectType))\n\t\t\t\t\t{\n\t\t\t\t\t\tyield return codeInstruction;\n\t\t\t\t\t}\n\t\t\t\t\ti += searchInstructions.Count;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tyield return instructionsList[i];\n\t\t\t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (matchesFound < 1)\n\t\t\t{\n\t\t\t\tLog.Error(\"IL code instructions not found\");\n\t\t\t}\n\t\t}\n\t}\n}\n\n'RimThreaded/Source/Mod_Patches/GeneratePawns_Patch_Transpile.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Reflection.Emit;\nusing HarmonyLib;\nusing RimThreaded.RW_Patches;\nusing UnityEngine;\nusing Verse;\n\nnamespace RimThreaded.Mod_Patches\n{\n    public class GeneratePawns_Patch_Transpile\n    {\n        public static IEnumerable<CodeInstruction> Listener(IEnumerable<CodeInstruction> instructions, ILGenerator iLGenerator)\n        {\n            List<CodeInstruction> l = instructions.ToList();\n            bool match = false;\n\n\n\n            CodeInstruction loadToken = new CodeInstruction(OpCodes.Ldtoken, typeof(Texture2D).GetTypeInfo());\n            CodeInstruction resolveToken = new CodeInstruction(OpCodes.Call, typeof(Type).GetMethod(\"GetTypeFromHandle\"));\n\n\n            for (int x = 0; x < l.Count; x++)\n            {\n                CodeInstruction i = l[x];\n\n                if (i.opcode == OpCodes.Call\n                    && (MethodInfo)i.operand == TargetMethodHelper())\n                {\n                    match = true;\n\n                    i.operand = typeof(Resources_Patch).GetMethod(\"Load\");\n\n                    l.Insert(x, resolveToken);\n                    l.Insert(x, loadToken);\n\n\n                }\n                yield return l[x];\n            }\n            if (!match)\n            {\n                Log.Error(\"No IL Instruction found for PawnGroupMakerUtility_Patch.\");\n            }\n        }\n\n        public static MethodBase TargetMethodHelper()\n        {\n            MethodInfo i = typeof(Resources).GetMethods().Single(\n                m =>\n                    m.Name == \"Load\" &&\n                    m.GetGenericArguments().Length == 1 &&\n                    m.GetParameters().Length == 1 &&\n                    m.GetParameters()[0].ParameterType == typeof(String)\n                );\n\n\n            return i.MakeGenericMethod(typeof(Texture2D));\n        }\n    }\n}\n\n'RimThreaded/Source/RW_Patches/BodyDef_Patch.cs'\n:﻿using RimThreaded.RW_Patches;\nusing RimThreaded;\nusing System;\nusing Verse;\nusing System.Collections.Generic;\n\npublic class BodyDef_Patch\n{\n    internal static void RunDestructivePatches()\n    {\n        Type original = typeof(BodyDef);\n        Type patched = typeof(BodyDef_Patch);\n        RimThreadedHarmony.Prefix(original, patched, nameof(GetPartsWithTag));\n    }\n\n    public static bool GetPartsWithTag(BodyDef __instance, ref List<BodyPartRecord> __result, BodyPartTagDef tag)\n    {\n        Dictionary<BodyPartTagDef, List<BodyPartRecord>> cachedPartsByTag = __instance.cachedPartsByTag;\n\n        if (cachedPartsByTag.TryGetValue(tag, out __result))\n            return false;\n\n        lock (cachedPartsByTag)\n        {\n            if (cachedPartsByTag.TryGetValue(tag, out __result))\n                return false;\n            List<BodyPartRecord> AllParts = __instance.AllParts;\n            __result = new List<BodyPartRecord>();\n            for (int i = 0; i < AllParts.Count; i++)\n            {\n                BodyPartRecord bodyPartRecord = AllParts[i];\n                if (bodyPartRecord.def.tags.Contains(tag))\n                {\n                    __result.Add(bodyPartRecord);\n                }\n            }\n            cachedPartsByTag[tag] = __result;\n        }\n        return false;\n    }\n\n}\n",
        "gt": [
            "'RimThreaded/Source/RW_Patches/DrugAIUtility_Patch.cs'",
            "'RimThreaded/Source/Mod_Patches/GeneratePawns_Patch_Transpile.cs'",
            "'RimThreaded/Source/Mod_Patches/CompUtility_Transpile.cs'",
            "'RimThreaded/Source/RW_Patches/BodyDef_Patch.cs'"
        ]
    },
    {
        "files": [
            "'Bing/sample/Bing.Samples.Api/Global.asax.cs'",
            "'Bing/sample/Bing.Samples.Api/Configs/IocConfig.cs'",
            "'Bing/src/Bing.Utils/Helpers/Thread.cs'",
            "'Bing/src/Bing.Caching.Serialization.Json/DefaultJsonSerializer.cs'",
            "'Bing/sample/Bing.Samples.Api/App_Start/SwaggerConfig.cs'"
        ],
        "content": "'Bing/sample/Bing.Samples.Api/Global.asax.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web;\nusing System.Web.Http;\nusing System.Web.Routing;\nusing Autofac.Integration.WebApi;\nusing Bing;\nusing Bing.Dependency;\nusing Bing.Helpers;\nusing Bing.Logs;\nusing Bing.Samples.Api.Configs;\n\nnamespace Bing.Samples.Api\n{\n    public class WebApiApplication : System.Web.HttpApplication\n    {\n        protected void Application_Start()\n        {\n            GlobalConfiguration.Configure(WebApiConfig.Register);\n            IocConfigInitialize.Init(ScopeType.Http,new IConfig[] {new IocConfig(), });\n            GlobalConfiguration.Configuration.DependencyResolver=new AutofacWebApiDependencyResolver(Ioc.GetContainer());\n        }\n    }\n}\n\n'Bing/sample/Bing.Samples.Api/Configs/IocConfig.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Web;\nusing AspectCore.Configuration;\nusing AspectCore.DynamicProxy.Parameters;\nusing AspectCore.Extensions.Autofac;\nusing Autofac;\nusing Autofac.Integration.WebApi;\nusing Bing.Aspects;\nusing Bing.Caching;\nusing Bing.Caching.Core;\nusing Bing.Caching.Redis;\nusing Bing.Caching.Serialization.Json;\nusing Bing.Datas.EntityFramework;\nusing Bing.Datas.EntityFramework.Configs;\nusing Bing.Datas.UnitOfWorks;\nusing Bing.Dependency;\nusing Bing.Events.Default;\nusing Bing.Events.RabbitMQ;\nusing Bing.Logs.Aspects;\nusing Bing.Logs.Exceptionless;\nusing Bing.Logs.Log4Net;\nusing Bing.Logs.NLog;\nusing Bing.Samples.Datas;\n\nnamespace Bing.Samples.Api.Configs\n{\n    public class IocConfig:ConfigBase\n    {\n        protected override void Load(ContainerBuilder builder)\n        {\n            builder.RegisterApiControllers(Assembly.GetExecutingAssembly());\n\n            builder.AddBingUnitOfWork(\"WeiHai\");\n\n\n\n            builder.RegisterDynamicProxy(config =>\n            {\n                config.EnableParameterAspect();\n            });\n\n            builder.AddNLog();\n\n\n\n\n\n\n            builder.AddDefaultRedisCache(config =>\n            {\n                config.EndPoints.Add(new ServerEndPoint(\"192.168.3.115\", 9494));\n                config.Password = \"wolfRedis\";\n                config.SystemPrefix = \"BingSamples:\";\n            });\n\n            builder.AddDefaultEventBus();\n            builder.AddDefaultJsonSerializer();\n\n\n\n\n\n\n\n\n\n        }\n    }\n}\n'Bing/src/Bing.Utils/Helpers/Thread.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Security.Principal;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace Bing.Utils.Helpers\n{\n\n\n\n    public static class Thread\n    {\n        #region WaitAll(执行多个操作)\n\n\n\n\n\n        public static void WaitAll(params Action[] actions)\n        {\n            if (actions == null)\n            {\n                return;\n            }\n            List<Task> tasks = new List<Task>();\n            foreach (var action in actions)\n            {\n                tasks.Add(Task.Factory.StartNew(action, TaskCreationOptions.None));\n            }\n            Task.WaitAll(tasks.ToArray());\n        }\n\n        #endregion\n\n        #region ThreadId(获取线程编号)\n\n\n\n\n        public static string ThreadId => System.Threading.Thread.CurrentThread.ManagedThreadId.ToString();\n\n        #endregion\n\n        #region CurrentPrincipal(获取或设置 线程的当前负责人)\n\n\n\n\n        public static IPrincipal CurrentPrincipal\n        {\n            get { return System.Threading.Thread.CurrentPrincipal; }\n            set { System.Threading.Thread.CurrentPrincipal = value; }\n        }\n\n        #endregion\n\n        #region MaxThreadNumberInThreadPool(获取线程池中最大线程)\n\n\n\n\n        public static int MaxThreadNumberInThreadPool\n        {\n            get\n            {\n                int maxNumber;\n                int ioNumber;\n                ThreadPool.GetMaxThreads(out maxNumber, out ioNumber);\n                return maxNumber;\n            }\n        }\n\n        #endregion\n\n        #region Sleep(将当前线程挂起指定的时间)\n\n\n\n\n\n        public static void Sleep(int time)\n        {\n            System.Threading.Thread.Sleep(time);\n        }\n\n        #endregion\n\n        #region StartTask(启动异步任务)\n\n\n\n\n\n        public static void StartTask(Action handler)\n        {\n            Task.Factory.StartNew(handler);\n        }\n\n\n\n\n\n\n        public static void StartTask(Action<object> handler, object state)\n        {\n            Task.Factory.StartNew(handler, state);\n        }\n\n        #endregion\n\n    }\n}\n\n'Bing/src/Bing.Caching.Serialization.Json/DefaultJsonSerializer.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing Bing.Caching.Abstractions;\nusing Bing.Utils.Helpers;\nusing Newtonsoft.Json;\n\nnamespace Bing.Caching.Serialization.Json\n{\n\n\n\n    public class DefaultJsonSerializer:ICacheSerializer\n    {\n\n\n\n        static readonly JsonSerializer JsonSerializer=new JsonSerializer();\n\n\n\n\n\n\n\n        public byte[] Serialize<T>(T value)\n        {\n            using (var ms=new MemoryStream())\n            {\n                using (var sr=new StreamWriter(ms,Encoding.UTF8))\n                {\n                    using (var jtr=new JsonTextWriter(sr))\n                    {\n                        JsonSerializer.Serialize(jtr,value);\n                    }\n                }\n\n                return ms.ToArray();\n            }\n        }\n\n\n\n\n\n\n\n        public T Deserialize<T>(byte[] bytes)\n        {\n            using (var ms=new MemoryStream(bytes))\n            {\n                using (var sr = new StreamReader(ms, Encoding.UTF8))\n                {\n                    using (var jtr=new JsonTextReader(sr))\n                    {\n                        return JsonSerializer.Deserialize<T>(jtr);\n                    }\n                }\n            }\n        }\n\n\n\n\n\n\n        public ArraySegment<byte> SerializeObject(object obj)\n        {\n            var typeName = Reflection.GetTypeName(obj.GetType());\n\n            using (var ms=new MemoryStream())\n            {\n                using (var tw=new StreamWriter(ms))\n                {\n                    using (var jw=new JsonTextWriter(tw))\n                    {\n                        jw.WriteStartArray();\n                        jw.WriteValue(typeName);\n                        JsonSerializer.Serialize(jw,obj);\n\n                        jw.WriteEndArray();\n                        jw.Flush();\n\n                        return new ArraySegment<byte>(ms.ToArray(),0,(int)ms.Length);\n                    }\n                }\n            }\n        }\n\n\n\n\n\n\n        public object DeserializeObject(ArraySegment<byte> value)\n        {\n            using (var ms=new MemoryStream(value.Array,value.Offset,value.Count,writable:false))\n            {\n                using (var tr=new StreamReader(ms))\n                {\n                    using (var jr=new JsonTextReader(tr))\n                    {\n                        jr.Read();\n                        if (jr.TokenType == JsonToken.StartArray)\n                        {\n\n                            var typeName = jr.ReadAsString();\n                            var type = Type.GetType(typeName, throwOnError: true);\n\n                            jr.Read();\n                            return JsonSerializer.Deserialize(jr, type);\n                        }\n                        else\n                        {\n                            throw new InvalidDataException(\"JsonTranscoder 仅支持 [\\\"TypeName\\\", object]\");\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n'Bing/sample/Bing.Samples.Api/App_Start/SwaggerConfig.cs'\n:using System;\nusing System.Web.Http;\nusing WebActivatorEx;\nusing Bing.Samples.Api;\nusing Swashbuckle.Application;\n\n[assembly: PreApplicationStartMethod(typeof(SwaggerConfig), \"Register\")]\n\nnamespace Bing.Samples.Api\n{\n    public class SwaggerConfig\n    {\n        public static void Register()\n        {\n            var thisAssembly = typeof(SwaggerConfig).Assembly;\n\n            GlobalConfiguration.Configuration\n                .EnableSwagger(c =>\n                    {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                        c.SingleApiVersion(\"v1\", \"Bing.Samples.Api\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                        c.IncludeXmlComments(string.Format(\"{0}/bin/Bing.Samples.Api.XML\",AppDomain.CurrentDomain.BaseDirectory));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                    })\n                .EnableSwaggerUi(c =>\n                    {\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                    });\n        }\n    }\n}\n",
        "gt": [
            "'Bing/src/Bing.Utils/Helpers/Thread.cs'",
            "'Bing/src/Bing.Caching.Serialization.Json/DefaultJsonSerializer.cs'",
            "'Bing/sample/Bing.Samples.Api/Configs/IocConfig.cs'",
            "'Bing/sample/Bing.Samples.Api/Global.asax.cs'",
            "'Bing/sample/Bing.Samples.Api/App_Start/SwaggerConfig.cs'"
        ]
    },
    {
        "files": [
            "'kinectgest/FinalProject/Features/GestureFeatures.cs'",
            "'kinectgest/FinalProject/Features/FrameFeatures.cs'",
            "'kinectgest/FinalProject/Recognition/DumbSegmenter.cs'",
            "'kinectgest/FinalProject/JointState.cs'"
        ],
        "content": "'kinectgest/FinalProject/Features/GestureFeatures.cs'\n:using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\nusing FinalProject;\n\nnamespace FinalProject.Features\n{\n\tpublic class JointAmplitude : IGestureFeature {\n\t\tstring JointName;\n\t\tJointState.JointComponent JointComponent;\n\t\tbool Directional;\n\t\tpublic JointAmplitude(string jn, JointState.JointComponent jc, bool d) {\n\t\t\tJointName = jn;\n\t\t\tJointComponent = jc;\n\t\t\tDirectional = d;\n\t\t}\n\t\tpublic float QueryGesture(InputGesture ig) {\n\t\t\tFunc<JointState, float> f = x => x.Component(JointName, JointComponent);\n\t\t\tfloat min = ig.States.Min(f), max = ig.States.Max(f);\n\n\t\t\tif ( Directional ) {\n\t\t\t\tbool before = ig.States.FindIndex(x => x.Component(JointName, JointComponent) == min) <\n\t\t\t\t\tig.States.FindIndex(x => x.Component(JointName, JointComponent) == max);\n\t\t\t\treturn (before) ? max - min : min - max;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn max - min;\n\t\t\t}\n\t\t}\n\t\tpublic override string ToString () {\n\t\t\treturn string.Format(\"[JointAmplitude({0},{1})]\", JointName, JointComponent.ToString());\n\t\t}\n\t}\n\n\tpublic class NeutralDeviation : IGestureFeature {\n\t\tstring JointName;\n\t\tJointState.JointComponent JointComponent;\n\t\tpublic NeutralDeviation(string jn, JointState.JointComponent jc) {\n\t\t\tJointName = jn;\n\t\t\tJointComponent = jc;\n\t\t}\n\t\tpublic float QueryGesture(InputGesture ig) {\n\t\t\tfloat np = ig.States[0].Component(JointName, JointComponent) +\n\t\t\t\tig.States[ig.States.Count - 1].Component(JointName, JointComponent);\n\t\t\tnp /= 2.0f;\n\t\t\tfloat posd = ig.States.Select(x => x.Component(JointName, JointComponent)).Where(x => x >= np).Select(x => x - np).Sum(),\n\t\t\t\t  negd = ig.States.Select(x => x.Component(JointName, JointComponent)).Where(x => x < np).Select(x => x - np).Sum();\n\t\t\treturn posd + negd;\n\t\t}\n\t\tpublic override string ToString () {\n\t\t\treturn string.Format(\"[NeutralDeviation]\");\n\t\t}\n\t}\n\n\tpublic class NeckAmplitude : IGestureFeature {\n\t\tpublic float QueryGesture(InputGesture ig) {\n\t\t\tFunc<JointState, float> f = x => x.NeckPos.Y;\n\t\t\tfloat min = ig.States.Min(f), max = ig.States.Max(f);\n\t\t\treturn max - min;\n\t\t}\n\t\tpublic override string ToString () {\n\t\t\treturn string.Format(\"[NeckAmplitude]\");\n\t\t}\n\t}\n\n\tpublic class ProportionChange : IGestureFeature {\n\t\tstring JointName;\n\t\tJointState.JointComponent JointComponent;\n\t\tpublic ProportionChange(string jn, JointState.JointComponent jc) {\n\t\t\tJointName = jn;\n\t\t\tJointComponent = jc;\n\t\t}\n\t\tpublic float QueryGesture(InputGesture ig) {\n\t\t\tfloat sum = 0.0f;\n\t\t\tfor ( int i = 1; i < ig.States.Count; i++ ) {\n\t\t\t\tsum += (float)Math.Abs(ig.States[i].Component(JointName, JointComponent) -\n\t\t\t\t\t\t\t\t\t   ig.States[i-1].Component(JointName, JointComponent));\n\t\t\t}\n\t\t\treturn sum / (float)ig.States.Count;\n\t\t}\n\t\tpublic override string ToString () {\n\t\t\treturn string.Format(\"[ProportionChange({0},{1})]\", JointName, JointComponent);\n\t\t}\n\t}\n\n\tpublic class ProportionFrames : IGestureFeature {\n\t\tIFrameFeature mFeature;\n\t\tpublic ProportionFrames(IFrameFeature f) {\n\t\t\tmFeature = f;\n\t\t}\n\t\tpublic float QueryGesture (InputGesture ig) {\n\t\t\treturn ig.States.Sum(x => mFeature.QueryFrame(x)) / (float)ig.States.Count;\n\t\t}\n\t\tpublic override string ToString() {\n\t\t\treturn string.Format (\"[ProportionFrames({0})]\", mFeature.ToString());\n\t\t}\n\t}\n\n\tpublic class NumberCriticalPoints : IGestureFeature {\n\t\tstring JN;\n\t\tJointState.JointComponent JC;\n\n\t\tpublic NumberCriticalPoints(string jn, JointState.JointComponent jc) {\n\t\t\tJN = jn;\n\t\t\tJC = jc;\n\t\t}\n\t\tpublic float QueryGesture(InputGesture ig) {\n\t\t\tFunc<JointState, float> f = x => x.Component(JN, JC);\n\t\t\tfloat min = ig.States.Min(f), max = ig.States.Max(f);\n\t\t\tfloat center = (max + min) / 2.0f;\n\t\t\tfloat dist_threshold = 0.5f;\n\n\t\t\tbool dir = (f(ig.States[1]) - f(ig.States[0])) > 0.0f;\n\t\t\tvar count = 0;\n\t\t\tvar sinceLast = 100;\n\t\t\tfor ( int i = 1; i < ig.States.Count; i++ ) {\n\t\t\t\tfloat maxthres = (max - center) * dist_threshold;\n\t\t\t\tfloat minthres = (min - center) * dist_threshold;\n\t\t\t\tbool newdir = (f(ig.States[i]) - f(ig.States[i-1])) > 0.0f;\n\t\t\t\tif ( newdir != dir && sinceLast > 10 ) {\n\t\t\t\t\tfloat relpos = f(ig.States[i]) - center;\n\t\t\t\t\tif ( relpos > maxthres || relpos < minthres ) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t}\n\t\t\t\t\tsinceLast = 0;\n\t\t\t\t}\n\t\t\t\tdir = newdir;\n\t\t\t\tsinceLast++;\n\t\t\t}\n\n\t\t\treturn (float)count / (float)ig.States.Count;\n\t\t}\n\t}\n\n\tpublic class DerivativeSum : IGestureFeature {\n\t\tstring JN;\n\t\tJointState.JointComponent JC;\n\t\tFunc<JointState, bool> Cond;\n\n\t\tpublic DerivativeSum(string jn, JointState.JointComponent jc, Func<JointState, bool> condition) {\n\t\t\tJN = jn;\n\t\t\tJC = jc;\n\t\t\tCond = condition;\n\t\t}\n\t\tpublic float QueryGesture(InputGesture ig) {\n\t\t\tFunc<JointState, float> f = x => x.Component(JN, JC);\n\t\t\tfloat count = 0.0f;\n\t\t\tfloat sum = 0.0f;\n\t\t\tfor ( int i = 1; i < ig.States.Count; i++ ) {\n\t\t\t\tvar state = ig.States[i];\n\t\t\t\tif ( Cond(state) ) {\n\t\t\t\t\tsum += f(state) - f(ig.States[i-1]);\n\t\t\t\t\tcount += 1.0f;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn (count == 0.0f) ? 0.0f : sum / count;\n\t\t}\n\t}\n\n\n\n\tpublic class AxisCoincidence : IGestureFeature {\n\t\tstring JN;\n\t\tJointState.JointComponent JA;\n\t\tJointState.JointComponent JB;\n\n\t\tpublic AxisCoincidence(string jn, JointState.JointComponent ja, JointState.JointComponent jb) {\n\t\t\tJN = jn;\n\t\t\tJA = ja;\n\t\t\tJB = jb;\n\t\t}\n\t\tpublic float QueryGesture(InputGesture ig) {\n\t\t\tFunc<JointState, float> f1 = x => x.Component(JN, JA),\n\t\t\t\t\t\t\t\t\tf2 = x => x.Component(JN, JB);\n\n\t\t\tdouble sum = 0.0f;\n\t\t\tfor ( int i = 1; i < ig.States.Count; i++ ) {\n\t\t\t\tvar state = ig.States[i];\n\t\t\t\tvar pstate = ig.States[i-1];\n\t\t\t\tif ( f1(state) - f1(pstate) > 0.0f ) {\n\t\t\t\t\tsum += f2(state) - f2(pstate);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsum -= f2(state) - f2(pstate);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn (float)(sum * 100.0) / (float)ig.States.Count;\n\t\t}\n\t}\n\n\tpublic class MinDistance : IGestureFeature {\n\t\tstring JN1, JN2;\n\t\tpublic MinDistance(string j1, string j2) {\n\t\t\tJN1 = j1;\n\t\t\tJN2 = j2;\n\t\t}\n\t\tpublic float QueryGesture(InputGesture ig) {\n\t\t\treturn ig.States.Select(x => (x.Pos(JN1) - x.Pos(JN2)).LengthFast).Min();\n\t\t}\n\t}\n\n\tpublic class MaxDistance : IGestureFeature {\n\t\tstring JN1, JN2;\n\t\tpublic MaxDistance(string j1, string j2) {\n\t\t\tJN1 = j1;\n\t\t\tJN2 = j2;\n\t\t}\n\t\tpublic float QueryGesture(InputGesture ig) {\n\t\t\treturn ig.States.Select(x => (x.Pos(JN1) - x.Pos(JN2)).LengthFast).Max();\n\t\t}\n\t}\n}\n'kinectgest/FinalProject/Features/FrameFeatures.cs'\n:using System;\n\nusing FinalProject;\n\nnamespace FinalProject.Features\n{\n\tpublic class HighFoot : IFrameFeature {\n\t\tpublic float QueryFrame(JointState js) {\n\t\t\tif ( js.Pos(\"right-foot\").Y >= -0.2f )\n\t\t\t\treturn 1.0f;\n\t\t\telse\n\t\t\t\treturn 0.0f;\n\t\t}\n\t}\n\n\tpublic class HandsTogether : IFrameFeature {\n\t\tpublic float QueryFrame(JointState js) {\n\t\t\tif ((js.Pos(\"right-palm\") - js.Pos(\"left-palm\")).Length < 0.2f)\n\t\t\t\treturn 1.0f;\n\t\t\telse\n\t\t\t\treturn 0.0f;\n\t\t}\n\t}\n\n\tpublic class RHPastNeck : IFrameFeature {\n\t\tpublic float QueryFrame(JointState js) {\n\t\t\tif (js.Pos(\"right-palm\").X - js.Pos(\"neck\").X < 0.0f)\n\t\t\t\treturn 1.0f;\n\t\t\telse\n\t\t\t\treturn 0.0f;\n\t\t}\n\t}\n\n\tpublic class RHandForward : IFrameFeature {\n\t\tpublic float QueryFrame(JointState js) {\n\t\t\tif (js.Pos(\"right-palm\").Z > 0.5f)\n\t\t\t\treturn 1.0f;\n\t\t\telse\n\t\t\t\treturn 0.0f;\n\t\t}\n\t}\n}\n\n\n'kinectgest/FinalProject/Recognition/DumbSegmenter.cs'\n:using System;\nusing System.Linq;\nusing System.Collections.Generic;\n\nusing FinalProject.Features;\n\nnamespace FinalProject\n{\n\tpublic class DumbSegmenter : ISegmenter\n\t{\n\n\n\n\t\tconst int _minSegmentSize = 12;\n\n\n\n\t\tconst int _noiseTolerance = 2;\n\n\n\n\t\tconst int _numBufferFrames = 4;\n\n\t\tint mCurrSegmentSize;\n\t\tQueue<JointState> mBuffer;\n\t\tList<JointState> mCurrGesture;\n\n\t\tpublic DumbSegmenter ()\n\t\t{\n\t\t\tLastGesture = null;\n\t\t\tmCurrSegmentSize = 0;\n\t\t\tmBuffer = new Queue<JointState>();\n\t\t\tmCurrGesture = new List<JointState>();\n\t\t}\n\n\t\tpublic event EventHandler GestureSegmented;\n\t\tpublic InputGesture LastGesture { get; private set; }\n\n\t\tvoid _AddToBuffer(JointState js) {\n\t\t\tmBuffer.Enqueue(js);\n\t\t\tif ( mBuffer.Count > _numBufferFrames ) mBuffer.Dequeue();\n\t\t}\n\n\t\tbool _IsNeutralStance(JointState js) {\n\n\t\t\tfloat tolerance = 0.85f;\n\t\t\tfloat damping = mCurrSegmentSize / 175.0f;\n            float final = tolerance - damping * damping * damping;\n            var conf = AllFeatures.LearnedFrameFeatures[\"NeutralStance\"].QueryFrame(js);\n\t\t\tConsole.WriteLine(\"Neutral tolerance: {1} / {0}\", final, conf);\n\t\t\treturn conf > final;\n\t\t}\n\n\t\tvoid _CheckIfSegmented() {\n\t\t\tif ( mCurrSegmentSize >= _minSegmentSize ) {\n\t\t\t\tConsole.WriteLine(\"Segmented gesture\");\n\t\t\t\tLastGesture = InputGesture.FromJointStates(mCurrGesture);\n\t\t\t\tGestureSegmented(this, null);\n\t\t\t}\n\t\t}\n\n\t\tpublic void AddState (JointState js) {\n\t\t\tif ( _IsNeutralStance(js) ) {\n\t\t\t\t_CheckIfSegmented();\n\t\t\t\t_AddToBuffer(js);\n\t\t\t\tif ( mCurrSegmentSize > 0 ) {\n\t\t\t\t\tmCurrGesture.Clear();\n\t\t\t\t}\n\t\t\t\tmCurrSegmentSize = 0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmCurrGesture.AddRange(mBuffer);\n\t\t\t\tmBuffer.Clear();\n\t\t\t\tmCurrGesture.Add(js);\n\t\t\t\tmCurrSegmentSize++;\n\t\t\t}\n\t\t}\n\n\t\tpublic void Finish() {\n\t\t\t_CheckIfSegmented();\n\t\t}\n\t}\n}\n\n\n'kinectgest/FinalProject/JointState.cs'\n:using System;\nusing System.Linq;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Diagnostics;\n\nusing System.Runtime.Serialization;\n\nusing OpenTK;\n\nnamespace FinalProject\n{\n\t[Serializable()]\n\tpublic class JointState : ISerializable\n\t{\n\t\tstatic public Dictionary<string, int> NamesToJoints;\n\t\tstatic public List<int> JointParents;\n\t\tstatic JointState()\n\t\t{\n\t\t\tNamesToJoints = new Dictionary<string, int>() {\n\t\t\t\t{\"neck\", 0},\n\t\t\t\t{\"head\", 1},\n\t\t\t\t{\"right-shoulder\", 2},\n\t\t\t\t{\"left-shoulder\", 6},\n\t\t\t\t{\"right-elbow\", 3},\n\t\t\t\t{\"left-elbow\", 7},\n\t\t\t\t{\"right-wrist\", 4},\n\t\t\t\t{\"right-pelvis\", 18},\n\t\t\t\t{\"left-pelvis\", 19},\n\t\t\t\t{\"left-wrist\", 8},\n\t\t\t\t{\"right-palm\", 5},\n\t\t\t\t{\"right-hip\", 10},\n\t\t\t\t{\"left-hip\", 14},\n\t\t\t\t{\"left-palm\", 9},\n\t\t\t\t{\"right-knee\", 11},\n\t\t\t\t{\"left-knee\", 15},\n\t\t\t\t{\"right-ankle\", 12},\n\t\t\t\t{\"right-foot\", 13},\n\t\t\t\t{\"left-ankle\", 16},\n\t\t\t\t{\"left-foot\", 17}\n\t\t\t};\n\n\t\t\tJointParents = new List<int>() { -1,\n\t\t\t\t0,\n\t\t\t\t0, 2, 3, 4,\n\t\t\t\t0, 6, 7, 8,\n\t\t\t\t18, 10, 11, 12,\n\t\t\t\t19, 14, 15, 16,\n\t\t\t\t0, 0\n\t\t\t};\n\n\n\t\t\tforeach ( var nj in NamesToJoints ) {\n\t\t\t\tvar c = NamesToJoints.Count(x => (x.Value == nj.Value));\n\t\t\t\tif ( c > 1 ) throw new Exception(\"Duplicate joints in relative joint name list!\");\n\t\t\t}\n\n\t\t\tforeach ( var jp in JointParents ) {\n\n\t\t\t}\n\t\t}\n\n\t\tpublic float Timestamp;\n\t\tpublic Vector3 NeckPos;\n\n\n\n\t\tpublic Vector3[] RelativeJoints;\n\n\n\n\t\tpublic float[] RelativeAngles;\n\n\t\tpublic JointState() {\n\t\t}\n\n\t\tpublic JointState(SerializationInfo si, StreamingContext sc) {\n\t\t\tTimestamp = (float)si.GetValue(\"Timestamp\", typeof(int));\n\t\t\tNeckPos = (Vector3)si.GetValue(\"NeckPos\", typeof(Vector3));\n\t\t}\n\n\t\tpublic Vector3 Pos(string name)\n\t\t{\n\t\t\tDebug.Assert(NamesToJoints.ContainsKey(name));\n\t\t\treturn RelativeJoints[NamesToJoints[name]];\n\t\t}\n\n\t\tpublic float Angle(string name)\n\t\t{\n\t\t\tDebug.Assert(NamesToJoints.ContainsKey(name));\n\t\t\treturn RelativeAngles[NamesToJoints[name]];\n\t\t}\n\n\t\tpublic enum JointComponent { PosX = 0, PosY, PosZ, Angle };\n\t\tpublic float Component(string name, JointComponent jc)\n\t\t{\n\t\t\tif ( jc == JointState.JointComponent.Angle ) {\n\t\t\t\treturn Angle(name);\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn Pos(name).Comp((int)jc);\n\t\t\t}\n\t\t}\n\n\n\t\tpublic RawJointState ToRawJointState() {\n\t\t\tvar output = new RawJointState();\n\t\t\toutput.Timestamp = Timestamp;\n\t\t\toutput.Joints = new Vector3[RelativeJoints.Length];\n\t\t\toutput.Joints[0] = NeckPos;\n\t\t\tfor ( int i = 1; i < output.Joints.Length; i++ ) {\n\t\t\t\toutput.Joints[i] = NeckPos + RelativeJoints[i];\n\t\t\t}\n\t\t\treturn output;\n\t\t}\n\n\t\tstatic public JointState FromRawJointState(RawJointState rjs)\n\t\t{\n\t\t\tJointState rel = new JointState();\n\n\t\t\trel.Timestamp = rjs.Timestamp;\n\t\t\trel.NeckPos = rjs.Joints[0];\n\n\t\t\trel.RelativeJoints = rjs.Joints.Select(x => x - rel.NeckPos).ToArray();\n\n\t\t\trel.RelativeAngles = new float[rjs.Joints.Length];\n\t\t\tfor ( int i = 1; i < rel.RelativeJoints.Length; i++ ) {\n\t\t\t\tVector3 thisVec = rel.RelativeJoints[i] - rel.RelativeJoints[JointParents[i]];\n\t\t\t\tVector3 parentVec = (JointParents[JointParents[i]] == -1) ? Vector3.UnitY :\n\t\t\t\t\trel.RelativeJoints[JointParents[i]] - rel.RelativeJoints[JointParents[JointParents[i]]];\n\t\t\t\trel.RelativeAngles[i] = Vector3.CalculateAngle(thisVec, parentVec);\n\t\t\t}\n\n\t\t\treturn rel;\n\t\t}\n\n\t\tstatic public JointState CloneFrom(JointState rjs)\n\t\t{\n\t\t\tJointState rel = new JointState();\n\t\t\trel.Timestamp = rjs.Timestamp;\n\t\t\trel.NeckPos = rjs.NeckPos;\n\t\t\trel.RelativeJoints = new Vector3[rjs.RelativeJoints.Length];\n\t\t\trjs.RelativeJoints.CopyTo(rel.RelativeJoints, 0);\n\t\t\treturn rel;\n\t\t}\n\n\n\t\t#region ISerializable implementation\n\n\t\tpublic void GetObjectData (SerializationInfo info, StreamingContext context)\n\t\t{\n\t\t\tinfo.AddValue(\"Timestamp\", Timestamp);\n\t\t}\n\t\t#endregion\n\t}\n}\n\n",
        "gt": [
            "'kinectgest/FinalProject/JointState.cs'",
            "'kinectgest/FinalProject/Features/FrameFeatures.cs'",
            "'kinectgest/FinalProject/Recognition/DumbSegmenter.cs'",
            "'kinectgest/FinalProject/Features/GestureFeatures.cs'"
        ]
    },
    {
        "files": [
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Operations/ListCollectionsOperation.cs'",
            "'ETCore/ETClient/Unity/Assets/ETFramework/Editor/GlobalConfigEditor/GlobalConfigEditor.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ConnectionSentMessagesEvent.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/IOperationExecutor.cs'",
            "'ETCore/ETServer/Server/ET.Core/Module/DB/DBQuery2JsonTask.cs'"
        ],
        "content": "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Operations/ListCollectionsOperation.cs'\n:\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing MongoDB.Bson;\nusing MongoDB.Bson.Serialization.Serializers;\nusing MongoDB.Driver.Core.Bindings;\nusing MongoDB.Driver.Core.Events;\nusing MongoDB.Driver.Core.Misc;\nusing MongoDB.Driver.Core.WireProtocol.Messages.Encoders;\n\nnamespace MongoDB.Driver.Core.Operations\n{\n\n\n\n    public class ListCollectionsOperation : IReadOperation<IAsyncCursor<BsonDocument>>\n    {\n\n        private BsonDocument _filter;\n        private readonly DatabaseNamespace _databaseNamespace;\n        private readonly MessageEncoderSettings _messageEncoderSettings;\n        private bool? _nameOnly;\n\n\n\n\n\n\n\n        public ListCollectionsOperation(\n            DatabaseNamespace databaseNamespace,\n            MessageEncoderSettings messageEncoderSettings)\n        {\n            _databaseNamespace = Ensure.IsNotNull(databaseNamespace, nameof(databaseNamespace));\n            _messageEncoderSettings = Ensure.IsNotNull(messageEncoderSettings, nameof(messageEncoderSettings));\n        }\n\n\n\n\n\n\n\n\n        public BsonDocument Filter\n        {\n            get { return _filter; }\n            set { _filter = value; }\n        }\n\n\n\n\n\n\n\n        public DatabaseNamespace DatabaseNamespace\n        {\n            get { return _databaseNamespace; }\n        }\n\n\n\n\n\n\n\n        public MessageEncoderSettings MessageEncoderSettings\n        {\n            get { return _messageEncoderSettings; }\n        }\n\n\n\n\n\n\n\n        public bool? NameOnly\n        {\n            get { return _nameOnly; }\n            set { _nameOnly = value; }\n        }\n\n\n\n        public IAsyncCursor<BsonDocument> Execute(IReadBinding binding, CancellationToken cancellationToken)\n        {\n            Ensure.IsNotNull(binding, nameof(binding));\n\n            using (EventContext.BeginOperation())\n            using (var channelSource = binding.GetReadChannelSource(cancellationToken))\n            using (var channel = channelSource.GetChannel(cancellationToken))\n            using (var channelBinding = new ChannelReadBinding(channelSource.Server, channel, binding.ReadPreference, binding.Session.Fork()))\n            {\n                var operation = CreateOperation(channel);\n                return operation.Execute(channelBinding, cancellationToken);\n            }\n        }\n\n\n        public async Task<IAsyncCursor<BsonDocument>> ExecuteAsync(IReadBinding binding, CancellationToken cancellationToken)\n        {\n            Ensure.IsNotNull(binding, nameof(binding));\n\n            using (EventContext.BeginOperation())\n            using (var channelSource = await binding.GetReadChannelSourceAsync(cancellationToken).ConfigureAwait(false))\n            using (var channel = await channelSource.GetChannelAsync(cancellationToken).ConfigureAwait(false))\n            using (var channelBinding = new ChannelReadBinding(channelSource.Server, channel, binding.ReadPreference, binding.Session.Fork()))\n            {\n                var operation = CreateOperation(channel);\n                return await operation.ExecuteAsync(channelBinding, cancellationToken).ConfigureAwait(false);\n            }\n        }\n\n\n        private IReadOperation<IAsyncCursor<BsonDocument>> CreateOperation(IChannel channel)\n        {\n            if (Feature.ListCollectionsCommand.IsSupported(channel.ConnectionDescription.ServerVersion))\n            {\n                return new ListCollectionsUsingCommandOperation(_databaseNamespace, _messageEncoderSettings)\n                {\n                    Filter = _filter,\n                    NameOnly = _nameOnly\n                };\n            }\n            else\n            {\n                return new ListCollectionsUsingQueryOperation(_databaseNamespace, _messageEncoderSettings)\n                {\n                    Filter = _filter\n                };\n            }\n        }\n    }\n}\n\n'ETCore/ETClient/Unity/Assets/ETFramework/Editor/GlobalConfigEditor/GlobalConfigEditor.cs'\n:﻿using System.IO;\nusing ETModel;\nusing UnityEditor;\nusing UnityEngine;\n\nnamespace ETEditor\n{\n    public class GlobalProtoEditor: EditorWindow\n    {\n        const string path = @\"./Assets/Res/Config/GlobalProto.txt\";\n\n        private GlobalProto globalProto;\n\n        [MenuItem(\"Tools/全局配置\")]\n        public static void ShowWindow()\n        {\n            GetWindow<GlobalProtoEditor>();\n        }\n\n        public void Awake()\n        {\n            if (File.Exists(path))\n            {\n                this.globalProto = JsonHelper.FromJson<GlobalProto>(File.ReadAllText(path));\n            }\n            else\n            {\n                this.globalProto = new GlobalProto();\n            }\n        }\n\n        public void OnGUI()\n        {\n            this.globalProto.AssetBundleServerUrl = EditorGUILayout.TextField(\"资源路径:\", this.globalProto.AssetBundleServerUrl);\n            this.globalProto.Address = EditorGUILayout.TextField(\"服务器地址:\", this.globalProto.Address);\n\n            if (GUILayout.Button(\"保存\"))\n            {\n                File.WriteAllText(path, JsonHelper.ToJson(this.globalProto));\n                AssetDatabase.Refresh();\n            }\n        }\n    }\n}\n\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ConnectionSentMessagesEvent.cs'\n:\n\nusing System;\nusing System.Collections.Generic;\nusing MongoDB.Driver.Core.Clusters;\nusing MongoDB.Driver.Core.Connections;\nusing MongoDB.Driver.Core.Servers;\n\nnamespace MongoDB.Driver.Core.Events\n{\n\n\n\n\n    public struct ConnectionSentMessagesEvent\n    {\n        private readonly ConnectionId _connectionId;\n        private readonly TimeSpan _networkDuration;\n        private readonly TimeSpan _serializationDuration;\n        private readonly int _length;\n        private readonly long? _operationId;\n        private readonly IReadOnlyList<int> _requestIds;\n\n\n\n\n\n\n\n\n\n\n        public ConnectionSentMessagesEvent(ConnectionId connectionId, IReadOnlyList<int> requestIds, int length, TimeSpan networkDuration, TimeSpan serializationDuration, long? operationId)\n        {\n            _connectionId = connectionId;\n            _requestIds = requestIds;\n            _length = length;\n            _networkDuration = networkDuration;\n            _serializationDuration = serializationDuration;\n            _operationId = operationId;\n        }\n\n\n\n\n        public ClusterId ClusterId\n        {\n            get { return _connectionId.ServerId.ClusterId; }\n        }\n\n\n\n\n        public ConnectionId ConnectionId\n        {\n            get { return _connectionId; }\n        }\n\n\n\n\n        public TimeSpan Duration\n        {\n            get { return _networkDuration + _serializationDuration; }\n        }\n\n\n\n\n        public TimeSpan NetworkDuration\n        {\n            get { return _networkDuration; }\n        }\n\n\n\n\n        public long? OperationId\n        {\n            get { return _operationId; }\n        }\n\n\n\n\n        public TimeSpan SerializationDuration\n        {\n            get { return _serializationDuration; }\n        }\n\n\n\n\n        public int Length\n        {\n            get { return _length; }\n        }\n\n\n\n\n        public IReadOnlyList<int> RequestIds\n        {\n            get { return _requestIds; }\n        }\n\n\n\n\n        public ServerId ServerId\n        {\n            get { return _connectionId.ServerId; }\n        }\n    }\n}\n\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/IOperationExecutor.cs'\n:\n\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing MongoDB.Driver.Core.Bindings;\nusing MongoDB.Driver.Core.Operations;\n\nnamespace MongoDB.Driver\n{\n    internal interface IOperationExecutor\n    {\n        TResult ExecuteReadOperation<TResult>(IReadBinding binding, IReadOperation<TResult> operation, CancellationToken cancellationToken);\n        Task<TResult> ExecuteReadOperationAsync<TResult>(IReadBinding binding, IReadOperation<TResult> operation, CancellationToken cancellationToken);\n\n        TResult ExecuteWriteOperation<TResult>(IWriteBinding binding, IWriteOperation<TResult> operation, CancellationToken cancellationToken);\n        Task<TResult> ExecuteWriteOperationAsync<TResult>(IWriteBinding binding, IWriteOperation<TResult> operation, CancellationToken cancellationToken);\n\n        IClientSessionHandle StartImplicitSession(CancellationToken cancellationToken);\n        Task<IClientSessionHandle> StartImplicitSessionAsync(CancellationToken cancellationToken);\n    }\n}\n\n'ETCore/ETServer/Server/ET.Core/Module/DB/DBQuery2JsonTask.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing MongoDB.Driver;\n\nnamespace ETModel\n{\n\t[ObjectSystem]\n\tpublic class DBQuery2JsonTaskAwakeSystem : AwakeSystem<DBQuery2JsonTask, string, string, TaskCompletionSource<List<Component>>>\n\t{\n\t\tpublic override void Awake(DBQuery2JsonTask self, string collectionName, string json, TaskCompletionSource<List<Component>> tcs)\n\t\t{\n\t\t\tself.CollectionName = collectionName;\n\t\t\tself.Json = json;\n\t\t\tself.Tcs = tcs;\n\t\t}\n\t}\n\n\tpublic sealed class DBQuery2JsonTask : DBTask\n\t{\n\t\tpublic string CollectionName { get; set; }\n\n\t\tpublic string Json { get; set; }\n\n\t\tpublic TaskCompletionSource<List<Component>> Tcs { get; set; }\n\n\t\tpublic override async Task Run()\n\t\t{\n\t\t\tDBComponent dbComponent = Game.Scene.GetComponent<DBComponent>();\n\t\t\ttry\n\t\t\t{\n\n\t\t\t\tFilterDefinition<Component> filterDefinition = new JsonFilterDefinition<Component>(this.Json);\n\t\t\t\tIAsyncCursor<Component> cursor = await dbComponent.Get2Collection(this.CollectionName).FindAsync(filterDefinition);\n\t\t\t\tList<Component> components = await cursor.ToListAsync();\n\t\t\t\tthis.Tcs.SetResult(components);\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tthis.Tcs.SetException(new Exception($\"查询数据库异常! {CollectionName} {this.Json}\", e));\n\t\t\t}\n\t\t}\n\t}\n}",
        "gt": [
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Events/ConnectionSentMessagesEvent.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Operations/ListCollectionsOperation.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver/IOperationExecutor.cs'",
            "'ETCore/ETServer/Server/ET.Core/Module/DB/DBQuery2JsonTask.cs'",
            "'ETCore/ETClient/Unity/Assets/ETFramework/Editor/GlobalConfigEditor/GlobalConfigEditor.cs'"
        ]
    },
    {
        "files": [
            "'Evil-DICOM/EvilDICOM/EvilDICOM/Network/Services/NEventReportService.cs'",
            "'Evil-DICOM/EvilDICOM/EvilDICOM/Network/SCUOps/StorageVerifier.cs'",
            "'Evil-DICOM/EvilDICOM/EvilDICOM/Network/DICOMSCU.cs'"
        ],
        "content": "'Evil-DICOM/EvilDICOM/EvilDICOM/Network/Services/NEventReportService.cs'\n:﻿using System;\nusing EvilDICOM.Network.DIMSE;\nusing EvilDICOM.Network.Enums;\nusing EvilDICOM.Network.Extensions;\nusing EvilDICOM.Network.Messaging;\nusing Microsoft.Extensions.Logging;\n\nnamespace EvilDICOM.Network.Services\n{\n    public class NEventReportService\n    {\n        private DIMSEService _dms;\n\n        public NEventReportService(DIMSEService dIMSEService)\n        {\n            this._dms = dIMSEService;\n        }\n\n        public void OnRequestReceived(NEventReportRequest req, Association asc)\n        {\n            asc.Logger.LogInformation(\"<-- DIMSE\" + req.GetLogString());\n            req.LogData(asc);\n            asc.LastActive = DateTime.Now;\n            var resp = new NEventReportResponse(req, Status.SUCCESS);\n            _dms.RaiseDIMSERequestReceived(req, asc);\n            PDataMessenger.Send(resp, asc);\n        }\n\n        public void OnResponseReceived(NEventReportResponse resp, Association asc)\n        {\n            asc.Logger.LogInformation(\"<-- DIMSE\" + resp.GetLogString());\n            resp.LogData(asc);\n            asc.LastActive = DateTime.Now;\n            _dms.RaiseDIMSEResponseReceived(resp, asc);\n            asc.State = NetworkState.AWAITING_RELEASE;\n        }\n    }\n}\n'Evil-DICOM/EvilDICOM/EvilDICOM/Network/SCUOps/StorageVerifier.cs'\n:﻿using EvilDICOM.Core;\nusing EvilDICOM.Core.Helpers;\nusing EvilDICOM.Network.DIMSE;\nusing EvilDICOM.Network.DIMSE.Actions;\nusing EvilDICOM.Network.Services;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing static EvilDICOM.Network.Services.DIMSEService;\n\nnamespace EvilDICOM.Network.SCUOps\n{\n    public class StorageVerifier\n    {\n        private DICOMSCU _scu;\n        private Entity callingEntity;\n        ushort _messageId = 1;\n\n        public StorageVerifier(DICOMSCU dICOMSCU, Entity callingEntity)\n        {\n            this._scu = dICOMSCU;\n            this.callingEntity = callingEntity;\n        }\n\n        public List<bool> VerifyStorage(Dictionary<string, string> dictionary, int msTimeout = 10000)\n        {\n            var results = new List<bool>();\n            var request = CreateRequest(dictionary);\n            request.MessageID = _messageId;\n            _messageId += 3;\n            System.DateTime lastContact = System.DateTime.Now;\n\n            var mr = new ManualResetEvent(false);\n            NEventReportRequest req = null;\n            var cr = new Services.DIMSEService.DIMSERequestHandler<NEventReportRequest>((res, asc) =>\n            {\n                lastContact = System.DateTime.Now;\n                var origTxId = request.Data.GetSelector().TransactionUID.Data;\n                if (res.Data.GetSelector().TransactionUID.Data == origTxId)\n                {\n                    var refSeq = res.Data.GetSelector().ReferencedSOPSequence;\n                    Dictionary<string, string> refSeqDictionary = new Dictionary<string, string>();\n                    refSeq.Items.ToList().ForEach(i =>\n                    {\n                        refSeqDictionary.Add(i.GetSelector().ReferencedSOPClassUID.Data,\n                            i.GetSelector().ReferencedSOPInstanceUID.Data);\n                    });\n                    foreach (var entry in dictionary)\n                    {\n                        results.Add(refSeqDictionary.Contains(entry));\n                    }\n                }\n                req = res;\n                mr.Set();\n            });\n\n            _scu.DIMSEService.Subscribe(cr);\n            _scu.SendMessage(request, callingEntity);\n            mr.WaitOne(msTimeout);\n            _scu.DIMSEService.Unsubscribe(cr);\n            return results;\n\n        }\n\n        private static StorageCommitmentRequest CreateRequest(Dictionary<string, string> dictionary)\n        {\n            var scr = new StorageCommitmentRequest();\n            var refSeq = DICOMForge.ReferencedPerformedProcedureStepSequence(\n                new DICOMObject(DICOMForge.ReferencedSOPClassUID(\"1.2.840.10008.3.1.2.3.3\"),\n                DICOMForge.ReferencedSOPInstanceUID(UIDHelper.GenerateUID())));\n            var txId = DICOMForge.TransactionUID(UIDHelper.GenerateUID());\n            var seqItems = new List<DICOMObject>();\n            foreach (var entry in dictionary)\n            {\n                seqItems.Add(new DICOMObject(DICOMForge.ReferencedSOPClassUID(entry.Key),\n                    DICOMForge.ReferencedSOPInstanceUID(entry.Value)));\n            }\n            var refSeq2 = DICOMForge.ReferencedSOPSequence(seqItems.ToArray());\n            scr.Data = new DICOMObject(refSeq, txId, refSeq2);\n            return scr;\n        }\n    }\n}\n\n'Evil-DICOM/EvilDICOM/EvilDICOM/Network/DICOMSCU.cs'\n:﻿#region\n\nusing System;\nusing System.Collections.Generic;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Threading;\nusing EvilDICOM.Network.DIMSE;\nusing EvilDICOM.Network.DIMSE.IOD;\nusing EvilDICOM.Network.Enums;\nusing EvilDICOM.Network.Messaging;\nusing EvilDICOM.Network.SCUOps;\nusing EvilDICOM.Core.Enums;\nusing EvilDICOM.Network.Helpers;\nusing System.Linq;\nusing System.Text;\nusing EvilDICOM.Network.Messaging;\nusing static EvilDICOM.Network.Services.AssociationService;\nusing Microsoft.Extensions.Logging;\n\n#endregion\n\nnamespace EvilDICOM.Network\n{\n    public class DICOMSCU : DICOMServiceClass\n    {\n\n        public int IdleTimeout { get; set; } = 60000;\n        public int ConnectionTimeout { get; set; } = 3000;\n\n        public DICOMSCU(Entity ae) : base(ae)\n        {\n#if NETCOREAPP\n\n            System.Text.EncodingProvider provider = System.Text.CodePagesEncodingProvider.Instance;\n            Encoding.RegisterProvider(provider);\n#endif\n        }\n\n\n\n\n\n\n\n        public SendStatus SendMessage(AbstractDIMSERequest dimse, Entity ae)\n        {\n            using (var client = new TcpClient())\n            {\n                var status = new SendStatus();\n                try\n                {\n                    var connectionResult = client.BeginConnect(IPAddress.Parse(ae.IpAddress), ae.Port, null, null);\n                    var completed = connectionResult.AsyncWaitHandle.WaitOne(TimeSpan.FromMilliseconds(ConnectionTimeout));\n\n                    if (completed && !client.Client.Connected)\n                    {\n                        status.DidConnect = false;\n                        return status;\n                    }\n\n\n                    status.DidConnect = true;\n                    var assoc = new Association(this, client) { AeTitle = ae.AeTitle };\n\n                    AssociationRejectedHandler rejectedHandler = (rej, asc) =>\n                    {\n                        status.WasRejected = true;\n                        status.Reason = Enum.GetName(typeof(RejectReason_SCU), rej.Reason);\n                    };\n\n                    this.AssociationService.AssociationRejectionReceived += rejectedHandler;\n                    PDataMessenger.Send(dimse, assoc);\n                    assoc.Listen(TimeSpan.FromMilliseconds(IdleTimeout));\n                    this.AssociationService.AssociationRejectionReceived -= rejectedHandler;\n                    return status;\n                }\n                catch (Exception e)\n                {\n                    Logger.LogError($\"Could not connect to {ae.AeTitle} @{ae.IpAddress}:{ae.Port}\");\n                    Logger.LogError($\"{e.ToString()}\");\n                    return status;\n                }\n            }\n        }\n\n\n\n\n\n\n\n\n        public bool SendMessageForcePort(AbstractDIMSERequest dimse, Entity ae)\n        {\n            var (ipLocalEndPoint, success) =\n                IpHelper.VerifyIPAddress(this.ApplicationEntity.IpAddress, this.ApplicationEntity.Port);\n            if (!success) { return false; }\n\n            using (var client = new TcpClient(ipLocalEndPoint))\n            {\n                try\n                {\n                    var connectionResult = client.BeginConnect(IPAddress.Parse(ae.IpAddress), ae.Port, null, null);\n                    success = connectionResult.AsyncWaitHandle.WaitOne(TimeSpan.FromMilliseconds(ConnectionTimeout));\n                    if (!success)\n                    {\n                        throw new TimeoutException($\"Couldn't connect to {IPAddress.Parse(ae.IpAddress)}:{ae.Port} within {ConnectionTimeout} ms!\");\n                    }\n                    var assoc = new Association(this, client) { AeTitle = ae.AeTitle };\n                    PDataMessenger.Send(dimse, assoc);\n                    assoc.Listen();\n                    return true;\n                }\n                catch (Exception e)\n                {\n                    Logger.LogError($\"Could not connect to {ae.AeTitle} @{ae.IpAddress}:{ae.Port}\");\n                    Logger.LogError($\"{e.ToString()}\");\n                    return false;\n                }\n            }\n        }\n\n        public CFinder GetCFinder(Entity callingEntity)\n        {\n            return new CFinder(this, callingEntity);\n        }\n\n        public CMover GetCMover(Entity callingEntity)\n        {\n            return new CMover(this, callingEntity);\n        }\n\n        public CStorer GetCStorer(Entity callingEnity)\n        {\n            return new CStorer(this, callingEnity);\n        }\n\n        public T GetResponse<T, U>(U request, Entity e, ref ushort msgId) where U : AbstractDIMSERequest where T : AbstractDIMSEResponse\n        {\n            return GetResponses<T, U>(request, e, ref msgId).LastOrDefault();\n        }\n\n        public IEnumerable<T> GetResponses<T, U>(U request, Entity e, ref ushort msgId) where U : AbstractDIMSERequest where T : AbstractDIMSEResponse\n        {\n            System.DateTime lastContact = System.DateTime.Now;\n            int msWait = IdleTimeout;\n\n            var mr = new ManualResetEvent(false);\n            List<T> responses = new List<T>();\n            var cr = new Services.DIMSEService.DIMSEResponseHandler<T>((res, asc) =>\n            {\n                asc.IdleClock.Restart();\n                lastContact = System.DateTime.Now;\n                responses.Add(res);\n                if (res.Status != (ushort)Status.PENDING)\n                    mr.Set();\n                else\n                {\n                    mr.Reset();\n                }\n            });\n\n            DIMSEService.Subscribe(cr);\n\n            bool clientConnected;\n\n            var sendStatus = SendMessage(request, e);\n            if (clientConnected = sendStatus.WasAccepted)\n            {\n\n                mr.WaitOne(msWait);\n            }\n            DIMSEService.Unsubscribe(cr);\n            msgId += 2;\n\n            if (!sendStatus.DidConnect) { throw new Exception($\"Could not connect to remote endpoint {e}\"); }\n            if (sendStatus.WasRejected) { throw new Exception($\"Connected, but association refused by {e} : {sendStatus.Reason}\"); }\n            return responses;\n        }\n\n\n\n\n\n\n\n        public bool Ping(Entity ae, int msTimeout = 0)\n        {\n            msTimeout = (msTimeout == 0) ? IdleTimeout : msTimeout;\n\n            var responseSuccess = false;\n            var ar = new AutoResetEvent(false);\n            DIMSEService.CEchoResponseReceived += (res, asc) =>\n            {\n                responseSuccess = true;\n                ar.Set();\n            };\n            SendMessage(new CEchoRequest(), ae);\n            ar.WaitOne(msTimeout);\n            return responseSuccess;\n        }\n\n\n\n\n\n\n\n\n\n\n        public CGetResponse SendGetImage(Entity daemon, CFindImageIOD iod, ref ushort msgId)\n        {\n            var mr = new ManualResetEvent(false);\n            CGetResponse resp = null;\n            var cr = new Services.DIMSEService.DIMSEResponseHandler<CGetResponse>((res, asc) =>\n            {\n                if (!(res.Status == (ushort)Status.PENDING))\n                    mr.Set();\n                resp = res;\n            });\n\n            iod.QueryLevel = QueryLevel.IMAGE;\n\n            var request = new CGetRequest(iod, Root.STUDY, Core.Enums.Priority.MEDIUM, msgId);\n            DIMSEService.CGetResponseReceived += cr;\n            SendMessage(request, daemon);\n            mr.WaitOne();\n            DIMSEService.CGetResponseReceived -= cr;\n            msgId += 2;\n            return resp;\n        }\n    }\n}",
        "gt": [
            "'Evil-DICOM/EvilDICOM/EvilDICOM/Network/Services/NEventReportService.cs'",
            "'Evil-DICOM/EvilDICOM/EvilDICOM/Network/SCUOps/StorageVerifier.cs'",
            "'Evil-DICOM/EvilDICOM/EvilDICOM/Network/DICOMSCU.cs'"
        ]
    },
    {
        "files": [
            "'MapboxGPSHeading/Assets/UnityARInterface/Scripts/ARCoreInterface.cs'",
            "'MapboxGPSHeading/Assets/UnityARInterface/Examples/Scripts/PlaceOnPlane.cs'",
            "'MapboxGPSHeading/Assets/GoogleARCore/SDK/Scripts/InvalidSessionAccessException.cs'"
        ],
        "content": "'MapboxGPSHeading/Assets/UnityARInterface/Scripts/ARCoreInterface.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Runtime.InteropServices;\nusing UnityEngine;\nusing UnityEngine.XR;\nusing GoogleARCore;\nusing GoogleARCoreInternal;\nusing ARCoreNative = GoogleAR.UnityNative;\n\nnamespace UnityARInterface\n{\n    public class ARCoreInterface : ARInterface\n    {\n        private List<TrackedPlane> m_TrackedPlaneBuffer = new List<TrackedPlane>();\n        private System.Nullable<float> m_HorizontalFov;\n        private System.Nullable<float> m_VerticalFov;\n        private ScreenOrientation m_CachedScreenOrientation;\n        private Dictionary<TrackedPlane, BoundedPlane> m_TrackedPlanes = new Dictionary<TrackedPlane, BoundedPlane>();\n        private SessionComponent m_Session;\n        private Matrix4x4 m_DisplayTransform = Matrix4x4.identity;\n\n        public override bool StartService(Settings settings)\n        {\n            if (m_Session == null)\n            {\n                var sessionConfig = ScriptableObject.CreateInstance<SessionConfig>();\n\n\n\n                sessionConfig.m_enableARBackground = true;\n                sessionConfig.m_enablePlaneFinding = settings.enablePlaneDetection;\n                sessionConfig.m_enablePointcloud = settings.enablePointCloud;\n\n                var gameObject = new GameObject(\"Session Manager\");\n\n\n\n\n                gameObject.SetActive(false);\n                m_Session = gameObject.AddComponent<SessionComponent>();\n                m_Session.m_connectOnAwake = false;\n                m_Session.m_arSessionConfig = sessionConfig;\n\n\n\n                m_Session.m_firstPersonCamera = null;\n                gameObject.SetActive(true);\n            }\n\n            m_Session.Connect();\n            return SessionManager.ConnectionState == SessionConnectionState.Connected;\n        }\n\n        public override void StopService()\n        {\n\n            return;\n        }\n\n        public override bool TryGetUnscaledPose(ref Pose pose)\n        {\n            if (Frame.TrackingState != FrameTrackingState.Tracking)\n                return false;\n\n            ARCoreNative.PoseData poseData;\n\n            bool getPoseSuccess = ARCoreNative.InputTracking.TryGetPoseAtTime(\n                out poseData,\n                ARCoreNative.CoordinateFrame.StartOfService,\n                ARCoreNative.CoordinateFrame.CameraColor);\n\n            if (getPoseSuccess && (poseData.statusCode == ARCoreNative.PoseStatus.Valid))\n            {\n                pose.position = poseData.position;\n                pose.rotation = poseData.rotation;\n                return true;\n            }\n\n            return false;\n        }\n\n        public override bool TryGetCameraImage(ref CameraImage cameraImage)\n        {\n            ARCoreNative.NativeImage nativeImage = new ARCoreNative.NativeImage();\n            if (ARCoreNative.Device.TryAcquireLatestImageBuffer(ref nativeImage))\n            {\n                cameraImage.width = (int)nativeImage.width;\n                cameraImage.height = (int)nativeImage.height;\n\n                var planeInfos = nativeImage.planeInfos;\n\n\n                var yOffset = planeInfos[0].offset;\n                var numYBytes = planeInfos[0].size;\n                IntPtr yPlaneStart = new IntPtr(nativeImage.planeData.ToInt64() + yOffset);\n\n                if (cameraImage.y == null || cameraImage.y.Length != numYBytes)\n                    cameraImage.y = new byte[numYBytes];\n\n                Marshal.Copy(yPlaneStart, cameraImage.y, 0, (int)numYBytes);\n\n\n\n                int uvOffset = Mathf.Min(\n                    (int)nativeImage.planeInfos[1].offset,\n                    (int)nativeImage.planeInfos[2].offset);\n\n\n                int uvDataEnd = 0;\n                for (int i = 1; i < planeInfos.Count; ++i)\n                {\n                    uvDataEnd = Mathf.Max(uvDataEnd, (int)planeInfos[i].offset + planeInfos[i].size);\n                }\n\n\n                var numUVBytes = uvDataEnd - uvOffset;\n                IntPtr uvPlaneStart = new IntPtr(nativeImage.planeData.ToInt64() + uvOffset);\n\n                if (cameraImage.uv == null || cameraImage.uv.Length != numUVBytes)\n                    cameraImage.uv = new byte[numUVBytes];\n\n                Marshal.Copy(uvPlaneStart, cameraImage.uv, 0, (int)numUVBytes);\n\n                ARCoreNative.Device.ReleaseImageBuffer(nativeImage);\n\n\n\n\n\n                for (int i = 1; i < numUVBytes; i += 2)\n                {\n                    var b = cameraImage.uv[i - 1];\n                    cameraImage.uv[i - 1] = cameraImage.uv[i];\n                    cameraImage.uv[i] = b;\n                }\n\n                return true;\n            }\n\n            return false;\n        }\n\n        public override bool TryGetPointCloud(ref PointCloud pointCloud)\n        {\n\n            GoogleARCore.PointCloud nativePointCloud = Frame.PointCloud;\n            if (nativePointCloud.PointCount == 0)\n                return false;\n\n            if (pointCloud.points == null)\n                pointCloud.points = new List<Vector3>();\n\n            pointCloud.points.Clear();\n\n            for (int i = 0; i < nativePointCloud.PointCount; i++)\n            {\n                pointCloud.points.Add(nativePointCloud.GetPoint(i));\n            }\n\n            return true;\n        }\n\n        public override LightEstimate GetLightEstimate()\n        {\n            if (SessionManager.ConnectionState == SessionConnectionState.Connected)\n            {\n                return new LightEstimate()\n                {\n                    capabilities = LightEstimateCapabilities.AmbientIntensity,\n                    ambientIntensity = Frame.LightEstimate.PixelIntensity\n                };\n            }\n            else\n            {\n\n                return new LightEstimate();\n            }\n        }\n\n\t\tpublic override Matrix4x4 GetDisplayTransform()\n\t\t{\n\t\t\treturn m_DisplayTransform;\n\t\t}\n\n        private void CalculateDisplayTransform()\n        {\n            var cosTheta = 1f;\n            var sinTheta = 0f;\n\n            switch (Screen.orientation)\n            {\n                case ScreenOrientation.Portrait:\n                    cosTheta = 0f;\n                    sinTheta = -1f;\n                    break;\n                case ScreenOrientation.PortraitUpsideDown:\n                    cosTheta = 0f;\n                    sinTheta = 1f;\n                    break;\n                case ScreenOrientation.LandscapeLeft:\n                    cosTheta = 1f;\n                    sinTheta = 0f;\n                    break;\n                case ScreenOrientation.LandscapeRight:\n                    cosTheta = -1f;\n                    sinTheta = 0f;\n                    break;\n            }\n\n            m_DisplayTransform.m00 = cosTheta;\n            m_DisplayTransform.m01 = sinTheta;\n            m_DisplayTransform.m10 = sinTheta;\n            m_DisplayTransform.m11 = -cosTheta;\n        }\n\n        public override void SetupCamera(Camera camera)\n        {\n            var backgroundRender = new ARBackgroundRenderer();\n            backgroundRender.backgroundMaterial =\n                Resources.Load(\"Materials/ARBackground\", typeof(Material)) as Material;\n            backgroundRender.mode = ARRenderMode.MaterialAsBackground;\n            backgroundRender.camera = camera;\n\n            ARCoreNative.Device.backgroundRenderer = backgroundRender;\n        }\n\n        public override void UpdateCamera(Camera camera)\n        {\n            if (Screen.orientation == m_CachedScreenOrientation)\n                return;\n\n            CalculateDisplayTransform();\n\n            m_CachedScreenOrientation = Screen.orientation;\n\n            if (m_CachedScreenOrientation == ScreenOrientation.Portrait ||\n                m_CachedScreenOrientation == ScreenOrientation.PortraitUpsideDown)\n            {\n                if (m_HorizontalFov.HasValue)\n                {\n                    camera.fieldOfView = m_HorizontalFov.Value;\n                }\n                else\n                {\n                    float fieldOfView;\n                    if (ARCoreNative.Device.TryGetHorizontalFov(out fieldOfView))\n                    {\n                        m_HorizontalFov = fieldOfView;\n                        camera.fieldOfView = fieldOfView;\n                    }\n                }\n            }\n            else\n            {\n                if (m_VerticalFov.HasValue)\n                {\n                    camera.fieldOfView = m_VerticalFov.Value;\n                }\n                else\n                {\n                    float fieldOfView;\n                    if (ARCoreNative.Device.TryGetVerticalFov(out fieldOfView))\n                    {\n                        m_VerticalFov = fieldOfView;\n                        camera.fieldOfView = fieldOfView;\n                    }\n                }\n            }\n        }\n\n        public override void Update()\n        {\n            SessionManager.Instance.EarlyUpdate();\n\n            if (Frame.TrackingState != FrameTrackingState.Tracking)\n                return;\n\n            Frame.GetAllPlanes(ref m_TrackedPlaneBuffer);\n\n            foreach (var trackedPlane in m_TrackedPlaneBuffer)\n            {\n                if (trackedPlane.IsUpdated)\n                {\n                    BoundedPlane boundedPlane;\n                    if (m_TrackedPlanes.TryGetValue(trackedPlane, out boundedPlane))\n                    {\n                        if (trackedPlane.SubsumedBy == null)\n                        {\n                            OnPlaneUpdated(boundedPlane);\n                        }\n                        else\n                        {\n                            OnPlaneRemoved(boundedPlane);\n                            m_TrackedPlanes.Remove(trackedPlane);\n                        }\n                    }\n                    else\n                    {\n                        boundedPlane = new BoundedPlane()\n                        {\n                            id = Guid.NewGuid().ToString(),\n                            center = trackedPlane.Position,\n                            rotation = trackedPlane.Rotation,\n                            extents = trackedPlane.Bounds\n                        };\n\n                        m_TrackedPlanes.Add(trackedPlane, boundedPlane);\n                        OnPlaneAdded(boundedPlane);\n                    }\n                }\n            }\n\n\n            List<TrackedPlane> planesToRemove = new List<TrackedPlane>();\n            foreach (var kvp in m_TrackedPlanes)\n            {\n                var trackedPlane = kvp.Key;\n\n                if (!m_TrackedPlaneBuffer.Exists(x => x == trackedPlane))\n                {\n                    OnPlaneRemoved(kvp.Value);\n\n\n\n                    planesToRemove.Add(trackedPlane);\n                }\n            }\n\n            foreach (var plane in planesToRemove)\n            {\n                m_TrackedPlanes.Remove(plane);\n            }\n        }\n    }\n}\n\n'MapboxGPSHeading/Assets/UnityARInterface/Examples/Scripts/PlaceOnPlane.cs'\n:﻿using System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityARInterface;\n\npublic class PlaceOnPlane : ARBase\n{\n    [SerializeField]\n    private Transform m_ObjectToPlace;\n\n    void Update ()\n    {\n        if (Input.GetMouseButton(0))\n        {\n            var camera = GetCamera();\n\n            Ray ray = camera.ScreenPointToRay(Input.mousePosition);\n\n\t\t\tint layerMask = 1 << LayerMask.NameToLayer(\"ARGameObject\");\n\n            RaycastHit rayHit;\n            if (Physics.Raycast(ray, out rayHit, float.MaxValue, layerMask))\n                m_ObjectToPlace.transform.position = rayHit.point;\n        }\n    }\n}\n\n'MapboxGPSHeading/Assets/GoogleARCore/SDK/Scripts/InvalidSessionAccessException.cs'\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnamespace GoogleARCore\n{\n    using System;\n\n\n\n\n\n    public class InvalidSessionAccessException : Exception\n    {\n        public InvalidSessionAccessException(string message) : base(message) {}\n\n        public InvalidSessionAccessException(string message, Exception inner) : base(message, inner) {}\n    }\n}",
        "gt": [
            "'MapboxGPSHeading/Assets/GoogleARCore/SDK/Scripts/InvalidSessionAccessException.cs'",
            "'MapboxGPSHeading/Assets/UnityARInterface/Scripts/ARCoreInterface.cs'",
            "'MapboxGPSHeading/Assets/UnityARInterface/Examples/Scripts/PlaceOnPlane.cs'"
        ]
    },
    {
        "files": [
            "'CQRSShop/src/CQRSShop.Domain/DomainEntry.cs'",
            "'CQRSShop/src/CQRSShop.Domain/Aggregates/Product.cs'",
            "'CQRSShop/src/CQRSShop.Domain.Tests/TestBase.cs'",
            "'CQRSShop/src/CQRSShop.Domain/CommandHandlers/BasketCommandHandler.cs'",
            "'CQRSShop/src/CQRSShop.Infrastructure/EventStoreDomainRepository.cs'",
            "'CQRSShop/src/CQRSShop.Domain.Tests/BasketTests/ProceedCheckoutBasketTests.cs'"
        ],
        "content": "'CQRSShop/src/CQRSShop.Domain/DomainEntry.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing CQRSShop.Contracts.Commands;\nusing CQRSShop.Domain.CommandHandlers;\nusing CQRSShop.Infrastructure;\n\nnamespace CQRSShop.Domain\n{\n    public class DomainEntry\n    {\n        private readonly CommandDispatcher _commandDispatcher;\n\n        public DomainEntry(IDomainRepository domainRepository, IEnumerable<Action<ICommand>> preExecutionPipe = null, IEnumerable<Action<object>> postExecutionPipe = null)\n        {\n            preExecutionPipe = preExecutionPipe ?? Enumerable.Empty<Action<ICommand>>();\n            postExecutionPipe = CreatePostExecutionPipe(postExecutionPipe);\n            _commandDispatcher = CreateCommandDispatcher(domainRepository, preExecutionPipe, postExecutionPipe);\n        }\n\n        public void ExecuteCommand<TCommand>(TCommand command) where TCommand : ICommand\n        {\n            _commandDispatcher.ExecuteCommand(command);\n        }\n\n        private CommandDispatcher CreateCommandDispatcher(IDomainRepository domainRepository, IEnumerable<Action<ICommand>> preExecutionPipe, IEnumerable<Action<object>> postExecutionPipe)\n        {\n            var commandDispatcher = new CommandDispatcher(domainRepository, preExecutionPipe, postExecutionPipe);\n\n            var customerCommandHandler = new CustomerCommandHandler(domainRepository);\n            commandDispatcher.RegisterHandler<CreateCustomer>(customerCommandHandler);\n            commandDispatcher.RegisterHandler<MarkCustomerAsPreferred>(customerCommandHandler);\n\n            var productCommandHandler = new ProductCommandHandler(domainRepository);\n            commandDispatcher.RegisterHandler(productCommandHandler);\n\n            var basketCommandHandler = new BasketCommandHandler(domainRepository);\n            commandDispatcher.RegisterHandler<CreateBasket>(basketCommandHandler);\n            commandDispatcher.RegisterHandler<AddItemToBasket>(basketCommandHandler);\n            commandDispatcher.RegisterHandler<ProceedToCheckout>(basketCommandHandler);\n            commandDispatcher.RegisterHandler<CheckoutBasket>(basketCommandHandler);\n            commandDispatcher.RegisterHandler<MakePayment>(basketCommandHandler);\n\n            var orderCommandHanler = new OrderHandler(domainRepository);\n            commandDispatcher.RegisterHandler<ApproveOrder>(orderCommandHanler);\n            commandDispatcher.RegisterHandler<StartShippingProcess>(orderCommandHanler);\n            commandDispatcher.RegisterHandler<CancelOrder>(orderCommandHanler);\n            commandDispatcher.RegisterHandler<ShipOrder>(orderCommandHanler);\n\n            return commandDispatcher;\n        }\n\n        private IEnumerable<Action<object>> CreatePostExecutionPipe(IEnumerable<Action<object>> postExecutionPipe)\n        {\n            if (postExecutionPipe != null)\n            {\n                foreach (var action in postExecutionPipe)\n                {\n                    yield return action;\n                }\n            }\n        }\n    }\n}\n\n'CQRSShop/src/CQRSShop.Domain/Aggregates/Product.cs'\n:using System;\nusing CQRSShop.Contracts.Events;\nusing CQRSShop.Infrastructure;\n\nnamespace CQRSShop.Domain.Aggregates\n{\n    internal class Product : AggregateBase\n    {\n        public Product()\n        {\n            RegisterTransition<ProductCreated>(Apply);\n        }\n\n        internal string Name { get; private set; }\n        internal int Price { get; private set; }\n\n        private void Apply(ProductCreated obj)\n        {\n            Id = obj.Id;\n            Name = obj.Name;\n            Price = obj.Price;\n        }\n\n        private Product(Guid id, string name, int price) : this()\n        {\n            RaiseEvent(new ProductCreated(id, name, price));\n        }\n\n        internal static IAggregate Create(Guid id, string name, int price)\n        {\n            return new Product(id, name, price);\n        }\n    }\n}\n'CQRSShop/src/CQRSShop.Domain.Tests/TestBase.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing CQRSShop.Domain;\nusing CQRSShop.Infrastructure;\nusing NUnit.Framework;\n\nnamespace CQRSShop.Tests\n{\n    public class TestBase\n    {\n        private InMemoryDomainRespository _domainRepository;\n        private DomainEntry _domainEntry;\n        private Dictionary<Guid, IEnumerable<IEvent>> _preConditions = new Dictionary<Guid, IEnumerable<IEvent>>();\n\n        private DomainEntry BuildApplication()\n        {\n            _domainRepository = new InMemoryDomainRespository();\n            _domainRepository.AddEvents(_preConditions);\n            return new DomainEntry(_domainRepository);\n        }\n\n        [TestFixtureTearDown]\n        public void TearDown()\n        {\n            IdGenerator.GenerateGuid = null;\n            _preConditions = new Dictionary<Guid, IEnumerable<IEvent>>();\n        }\n\n        protected void When(ICommand command)\n        {\n            var application = BuildApplication();\n            application.ExecuteCommand(command);\n        }\n\n        protected void Then(params IEvent[] expectedEvents)\n        {\n            var latestEvents = _domainRepository.GetLatestEvents().ToList();\n            var expectedEventsList = expectedEvents.ToList();\n            Assert.AreEqual(expectedEventsList.Count, latestEvents.Count);\n\n            for (int i = 0; i < latestEvents.Count; i++)\n            {\n                Assert.AreEqual(expectedEvents[i], latestEvents[i]);\n            }\n        }\n\n        protected void WhenThrows<TException>(ICommand command) where TException : Exception\n        {\n            try\n            {\n                When(command);\n                Assert.Fail(\"Expected exception \" + typeof(TException));\n            }\n            catch (TException)\n            {\n            }\n        }\n\n        protected void Given(params IEvent[] existingEvents)\n        {\n            _preConditions = existingEvents\n                .GroupBy(y => y.Id)\n                .ToDictionary(y => y.Key, y => y.AsEnumerable());\n        }\n    }\n}\n\n'CQRSShop/src/CQRSShop.Domain/CommandHandlers/BasketCommandHandler.cs'\n:using CQRSShop.Contracts.Commands;\nusing CQRSShop.Domain.Aggregates;\nusing CQRSShop.Domain.Exceptions;\nusing CQRSShop.Infrastructure;\nusing CQRSShop.Infrastructure.Exceptions;\n\nnamespace CQRSShop.Domain.CommandHandlers\n{\n    internal class BasketCommandHandler :\n        IHandle<CreateBasket>,\n        IHandle<AddItemToBasket>,\n        IHandle<ProceedToCheckout>,\n        IHandle<CheckoutBasket>,\n        IHandle<MakePayment>\n    {\n        private readonly IDomainRepository _domainRepository;\n\n        public BasketCommandHandler(IDomainRepository domainRepository)\n        {\n            _domainRepository = domainRepository;\n        }\n\n        public IAggregate Handle(CreateBasket command)\n        {\n            try\n            {\n                var basket = _domainRepository.GetById<Basket>(command.Id);\n                throw new BasketAlreadExistsException(command.Id);\n            }\n            catch (AggregateNotFoundException)\n            {\n\n            }\n            var customer = _domainRepository.GetById<Customer>(command.CustomerId);\n            return Basket.Create(command.Id, customer);\n        }\n\n        public IAggregate Handle(AddItemToBasket command)\n        {\n            var basket = _domainRepository.GetById<Basket>(command.Id);\n            var product = _domainRepository.GetById<Product>(command.ProductId);\n            basket.AddItem(product, command.Quantity);\n            return basket;\n        }\n\n        public IAggregate Handle(ProceedToCheckout command)\n        {\n            var basket = _domainRepository.GetById<Basket>(command.Id);\n            basket.ProceedToCheckout();\n            return basket;\n        }\n\n        public IAggregate Handle(CheckoutBasket command)\n        {\n            var basket = _domainRepository.GetById<Basket>(command.Id);\n            basket.Checkout(command.ShippingAddress);\n            return basket;\n        }\n\n        public IAggregate Handle(MakePayment command)\n        {\n            var basket = _domainRepository.GetById<Basket>(command.Id);\n            var order = basket.MakePayment(command.Payment);\n            return order;\n        }\n    }\n}\n'CQRSShop/src/CQRSShop.Infrastructure/EventStoreDomainRepository.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing CQRSShop.Infrastructure.Exceptions;\nusing EventStore.ClientAPI;\nusing Newtonsoft.Json;\n\nnamespace CQRSShop.Infrastructure\n{\n    public class EventStoreDomainRepository : DomainRepositoryBase\n    {\n        private IEventStoreConnection _connection;\n        private const string Category = \"cqrsshop\";\n\n        public EventStoreDomainRepository(IEventStoreConnection connection)\n        {\n            _connection = connection;\n        }\n\n        private string AggregateToStreamName(Type type, Guid id)\n        {\n            return string.Format(\"{0}-{1}-{2}\", Category, type.Name, id);\n        }\n\n        public override IEnumerable<IEvent> Save<TAggregate>(TAggregate aggregate)\n        {\n            var events = aggregate.UncommitedEvents().ToList();\n            var expectedVersion = CalculateExpectedVersion(aggregate, events);\n            var eventData = events.Select(CreateEventData);\n            var streamName = AggregateToStreamName(aggregate.GetType(), aggregate.Id);\n            _connection.AppendToStream(streamName, expectedVersion, eventData);\n            return events;\n        }\n\n        public override TResult GetById<TResult>(Guid id)\n        {\n            var streamName = AggregateToStreamName(typeof(TResult), id);\n            var eventsSlice = _connection.ReadStreamEventsForward(streamName, 0, int.MaxValue, false);\n            if (eventsSlice.Status == SliceReadStatus.StreamNotFound)\n            {\n                throw new AggregateNotFoundException(\"Could not found aggregate of type \" + typeof(TResult) + \" and id \" + id);\n            }\n            var deserializedEvents = eventsSlice.Events.Select(e =>\n            {\n                var metadata = DeserializeObject<Dictionary<string, string>>(e.OriginalEvent.Metadata);\n                var eventData = DeserializeObject(e.OriginalEvent.Data, metadata[EventClrTypeHeader]);\n                return eventData as IEvent;\n            });\n            return BuildAggregate<TResult>(deserializedEvents);\n        }\n\n        private T DeserializeObject<T>(byte[] data)\n        {\n            return (T)(DeserializeObject(data, typeof(T).AssemblyQualifiedName));\n        }\n\n        private object DeserializeObject(byte[] data, string typeName)\n        {\n            var jsonString = Encoding.UTF8.GetString(data);\n            return JsonConvert.DeserializeObject(jsonString, Type.GetType(typeName));\n        }\n\n        public EventData CreateEventData(object @event)\n        {\n            var eventHeaders = new Dictionary<string, string>()\n            {\n                {\n                    EventClrTypeHeader, @event.GetType().AssemblyQualifiedName\n                },\n                {\n                    \"Domain\", \"Enheter\"\n                }\n            };\n            var eventDataHeaders = SerializeObject(eventHeaders);\n            var data = SerializeObject(@event);\n            var eventData = new EventData(Guid.NewGuid(), @event.GetType().Name, true, data, eventDataHeaders);\n            return eventData;\n        }\n\n        private byte[] SerializeObject(object obj)\n        {\n            var jsonObj = JsonConvert.SerializeObject(obj);\n            var data = Encoding.UTF8.GetBytes(jsonObj);\n            return data;\n        }\n\n        public string EventClrTypeHeader = \"EventClrTypeName\";\n    }\n}\n'CQRSShop/src/CQRSShop.Domain.Tests/BasketTests/ProceedCheckoutBasketTests.cs'\n:using System;\nusing CQRSShop.Contracts.Commands;\nusing CQRSShop.Contracts.Events;\nusing CQRSShop.Tests;\nusing NUnit.Framework;\n\nnamespace CQRSShop.Domain.Tests.BasketTests\n{\n    [TestFixture]\n    public class ProceedCheckoutBasketTests : TestBase\n    {\n        [Test]\n        public void GivenABasket_WhenCreatingABasketForCustomerX_ThenTheBasketShouldBeCreated()\n        {\n            var id = Guid.NewGuid();\n            var customerId = Guid.NewGuid();\n            int discount = 0;\n            Given(new BasketCreated(id, customerId, discount));\n            When(new ProceedToCheckout(id));\n            Then(new CustomerIsCheckingOutBasket(id));\n        }\n    }\n}",
        "gt": [
            "'CQRSShop/src/CQRSShop.Infrastructure/EventStoreDomainRepository.cs'",
            "'CQRSShop/src/CQRSShop.Domain/Aggregates/Product.cs'",
            "'CQRSShop/src/CQRSShop.Domain/CommandHandlers/BasketCommandHandler.cs'",
            "'CQRSShop/src/CQRSShop.Domain/DomainEntry.cs'",
            "'CQRSShop/src/CQRSShop.Domain.Tests/TestBase.cs'",
            "'CQRSShop/src/CQRSShop.Domain.Tests/BasketTests/ProceedCheckoutBasketTests.cs'"
        ]
    },
    {
        "files": [
            "'event_horizon/Starship/Assets/Scripts/Installers/ConfigSceneInstaller.cs'",
            "'event_horizon/Starship/Assets/Scripts/Combat/Effects/IEffectComponent.cs'",
            "'event_horizon/Starship/Assets/Scripts/Combat/AI/Helpers.cs'",
            "'event_horizon/Starship/Assets/Scripts/Combat/Component/Platform/AutoAimingPlatform.cs'",
            "'event_horizon/Starship/Assets/Scripts/Combat/Unit/Bullet/Action/PlayEffectAction.cs'",
            "'event_horizon/Starship/Assets/Scripts/Combat/Unit/Bullet/Bullet.cs'"
        ],
        "content": "'event_horizon/Starship/Assets/Scripts/Installers/ConfigSceneInstaller.cs'\n:﻿using Combat;\nusing Combat.Ai;\nusing Combat.Collision.Manager;\nusing Combat.Factory;\nusing Combat.Scene;\nusing Combat.Services;\nusing Gui.Combat;\nusing Services.ObjectPool;\nusing UnityEngine;\nusing Zenject;\n\nnamespace Installers\n{\n    public class ConfigSceneInstaller : MonoInstaller<ConfigSceneInstaller>\n    {\n        [SerializeField] private Settings _settings;\n        [SerializeField] private ShipControlsPanel _shipControlsPanel;\n        [SerializeField] private TrailRendererPool _trailRendererPool;\n\n        public override void InstallBindings()\n        {\n            Container.Bind<Settings>().FromInstance(_settings);\n            Container.BindAllInterfaces<ViewRect>().To<ViewRect>().AsTransient();\n            Container.BindAllInterfaces<Scene>().To<Scene>().AsSingle().WithArguments(new SceneSettings { AreaWidth = 200, AreaHeight = 200 }).NonLazy();\n            Container.BindAllInterfaces<CollisionManager>().To<CollisionManager>().AsSingle();\n            Container.BindAllInterfaces<AiManager>().To<AiManager>().AsSingle().NonLazy();\n            Container.Bind<ShipControlsPanel>().FromInstance(_shipControlsPanel);\n            Container.Bind<WeaponFactory>().AsSingle();\n            Container.Bind<ShipFactory>().AsSingle().WithArguments(new ShipFactory.Settings());\n            Container.Bind<SpaceObjectFactory>().AsSingle();\n            Container.Bind<DeviceFactory>().AsSingle();\n            Container.Bind<DroneBayFactory>().AsSingle();\n            Container.Bind<SatelliteFactory>().AsSingle();\n            Container.Bind<EffectFactory>().AsSingle();\n            Container.BindAllInterfacesAndSelf<IObjectPool>().To<GameObjectPool>().FromGameObject().AsSingle();\n            Container.Bind<TrailRendererPool>().FromInstance(_trailRendererPool);\n            Container.Bind<GameObjectFactory>();\n            Container.BindAllInterfaces<Keyboard>().To<Keyboard>().AsSingle();\n        }\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Combat/Effects/IEffectComponent.cs'\n:﻿using Combat.Helpers;\n\nnamespace Combat.Effects\n{\n    public interface IEffectComponent : IEffect\n    {\n        void Initialize(GameObjectHolder objectHolder);\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Combat/AI/Helpers.cs'\n:using System.Linq;\nusing Combat.Component.Body;\nusing Combat.Component.Platform;\nusing Combat.Component.Ship;\nusing Combat.Component.Systems.Weapons;\nusing Combat.Component.Unit;\nusing UnityEngine;\n\nnamespace Combat.Ai\n{\n\tpublic static class Helpers\n\t{\n\t\tpublic static float Distance(IUnit first, IUnit second)\n\t\t{\n\t\t    return Mathf.Max(0.001f, Vector2.Distance(first.Body.Position, second.Body.Position) - first.Body.Scale/2 - second.Body.Scale/2);\n\t\t}\n\n\t\tpublic static float TargetCourse(IUnit ship, Vector2 target, IWeaponPlatform platform)\n\t\t{\n\t\t\treturn RotationHelpers.Angle(platform.Body.WorldPosition().Direction(target)) + ship.Body.Rotation - platform.FixedRotation;\n\t\t}\n\n\t\tpublic static float ShipMinRange(IShip ship)\n\t\t{\n\t\t\tfloat range = 0;\n\t\t\tforeach (var weapon in ship.Systems.All.OfType<IWeapon>())\n\t\t\t{\n                if (weapon.Info.BulletEffectType == BulletEffectType.Special)\n                    continue;\n\n                range = range > 0 ? Mathf.Min(range, weapon.Info.Range) : weapon.Info.Range;\n\t\t\t}\n\n\t\t\treturn range;\n\t\t}\n\n\t\tpublic static float ShipMaxRange(IShip ship)\n\t\t{\n\t\t\tfloat range = 0;\n\t\t\tforeach (var weapon in ship.Systems.All.OfType<IWeapon>())\n\t\t\t{\n                if (weapon.Info.BulletEffectType == BulletEffectType.Special)\n                    continue;\n\n                range = Mathf.Max(range, weapon.Info.Range);\n\t\t\t}\n\n\t\t\treturn range;\n\t\t}\n\n\t\tpublic static float ShipAvgRange(IShip ship)\n\t\t{\n\t\t\tfloat range = 0;\n\t\t\tint count = 0;\n\t\t\tforeach (var weapon in ship.Systems.All.OfType<IWeapon>())\n\t\t\t{\n                if (weapon.Info.BulletEffectType == BulletEffectType.Special)\n                    continue;\n\n                range += weapon.Info.Range;\n\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\treturn count > 0 ? range/count : 0f;\n\t\t}\n\n\t\tpublic static int AverageWeaponDirection(IShip ship)\n\t\t{\n\t\t\tfloat angle = 0;\n\t\t\tvar shipRotation = ship.Body.Rotation;\n\n\t\t\tforeach (var weapon in ship.Systems.All.OfType<IWeapon>())\n\t\t\t{\n\t\t\t\tvar rotation = Mathf.DeltaAngle(shipRotation, weapon.Platform.FixedRotation);\n\n\t\t\t\tif (rotation > 90)\n\t\t\t\t\trotation = 180 - rotation;\n\t\t\t\telse if (rotation < -90)\n\t\t\t\t\trotation = -180 - rotation;\n\n\t\t\t\tangle += rotation;\n\t\t\t}\n\n\t\t\treturn Mathf.RoundToInt(angle);\n\t\t}\n\n\t\tpublic static float StealthAccuracy = 10;\n\t}\n}\n\n'event_horizon/Starship/Assets/Scripts/Combat/Component/Platform/AutoAimingPlatform.cs'\n:﻿using System.Collections.Generic;\nusing Combat.Component.Body;\nusing Combat.Component.Bullet;\nusing Combat.Component.Ship;\nusing Combat.Component.Triggers;\nusing Combat.Component.Unit;\nusing Combat.Component.Unit.Classification;\nusing Combat.Component.View;\nusing Combat.Scene;\nusing Combat.Unit.HitPoints;\nusing Gui.Utils;\nusing UnityEngine;\n\nnamespace Combat.Component.Platform\n{\n    public sealed class AutoAimingPlatform : IWeaponPlatform, IUnitAction\n    {\n        public AutoAimingPlatform(IShip ship, UnitBase parent, IScene scene, Vector2 position, float rotation, float offset, float maxAngle, float cooldown, float rotationSpeed)\n        {\n            _body = WeaponPlatformBody.Create(scene, parent, position, rotation, offset, maxAngle, rotationSpeed);\n            _cooldown = cooldown;\n            _ship = ship;\n            parent.AddTrigger(this);\n        }\n\n        public UnitType Type { get { return _ship.Type; } }\n        public IBody Body { get { return _body; } }\n        public IResourcePoints EnergyPoints { get { return _ship.Stats.Energy; } }\n        public bool IsTemporary { get { return false; } }\n\n        public bool IsReady { get { return _timeFromLastShot > _cooldown; } }\n        public float Cooldown { get { return Mathf.Clamp01(1f - _timeFromLastShot / _cooldown); } }\n\n        public float FixedRotation { get { return _body.FixedRotation; } }\n        public float AutoAimingAngle { get { return _body.AutoAimingAngle; } }\n\n        public void SetView(IView view, UnityEngine.Color color)\n        {\n            _view = view;\n            _color = color;\n        }\n\n        public void Aim(float bulletVelocity, float weaponRange, bool relative)\n        {\n            _body.Aim(bulletVelocity, weaponRange, relative);\n        }\n\n        public void OnShot()\n        {\n            _timeFromLastShot = 0;\n        }\n\n        public void UpdatePhysics(float elapsedTime)\n        {\n            _body.UpdatePhysics(elapsedTime);\n            _timeFromLastShot += elapsedTime;\n            _timeFromLastCleanup += elapsedTime;\n            if (_timeFromLastCleanup >= CleanupInterval)\n            {\n                _attachedChildren.Purge();\n                _timeFromLastCleanup = 0;\n            }\n        }\n\n        public void UpdateView(float elapsedTime)\n        {\n            _body.UpdateView(elapsedTime);\n\n            if (_view != null)\n            {\n                _view.Color = _color * _ship.Features.Color;\n                _view.UpdateView(elapsedTime);\n            }\n        }\n        public void AddAttachedChild(IBullet bullet)\n        {\n            _attachedChildren.Add(new WeakReference<IBullet>(bullet));\n        }\n\n        public void Dispose() { }\n\n        private IView _view;\n        private Color _color;\n        private float _timeFromLastCleanup;\n        private const float CleanupInterval = 1;\n        private float _timeFromLastShot;\n        private readonly float _cooldown;\n        private readonly IWeaponPlatformBody _body;\n        private readonly IShip _ship;\n        public ConditionType TriggerCondition => ConditionType.OnDestroy;\n        private readonly IList<WeakReference<IBullet>> _attachedChildren = new List<WeakReference<IBullet>>();\n\n        public bool TryUpdateAction(float elapsedTime)\n        {\n            return false;\n        }\n\n        public bool TryInvokeAction(ConditionType condition)\n        {\n            foreach (var child in _attachedChildren)\n            {\n                if(child.IsAlive)\n                {\n                    child.Target.Detonate();\n                }\n            }\n\n            return true;\n        }\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Combat/Unit/Bullet/Action/PlayEffectAction.cs'\n:﻿using Combat.Collision;\nusing Combat.Component.Unit;\nusing Combat.Effects;\nusing Combat.Factory;\nusing GameDatabase.DataModel;\nusing UnityEngine;\n\nnamespace Combat.Component.Bullet.Action\n{\n    public class PlayEffectAction : IAction\n    {\n        public PlayEffectAction(IUnit unit, EffectFactory effectFactory, VisualEffect effectData, Color color, float size, float lifetime, ConditionType condition)\n        {\n            _effectFactory = effectFactory;\n            _unit = unit;\n            _visualEffect = effectData;\n            _color = color;\n            _size = size;\n            _lifetime = lifetime;\n            Condition = condition;\n        }\n\n        public ConditionType Condition { get; private set; }\n\n        public void Dispose()\n        {\n            if (_effect != null && _effect.IsAlive)\n                _effect.Detach();\n        }\n\n        public CollisionEffect Invoke()\n        {\n            if (_effect == null || !_effect.IsAlive)\n            {\n                _effect = CompositeEffect.Create(_visualEffect, _effectFactory, _unit.Body);\n                _effect.Color = _color;\n                _effect.Size = _size;\n            }\n\n            _effect.Run(_lifetime, Vector2.zero, 0);\n            return CollisionEffect.None;\n        }\n\n        private readonly IUnit _unit;\n\n        private CompositeEffect _effect;\n        private readonly float _lifetime;\n        private readonly Color _color;\n        private readonly float _size;\n        private readonly EffectFactory _effectFactory;\n        private readonly VisualEffect _visualEffect;\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Combat/Unit/Bullet/Bullet.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing Combat.Collision;\nusing Combat.Collision.Behaviour;\nusing Combat.Collision.Manager;\nusing Combat.Component.Body;\nusing Combat.Component.Bullet.Action;\nusing Combat.Component.Bullet.Lifetime;\nusing Combat.Component.Collider;\nusing Combat.Component.Controller;\nusing Combat.Component.DamageHandler;\nusing Combat.Component.Physics;\nusing Combat.Component.Unit;\nusing Combat.Component.Unit.Classification;\nusing Combat.Component.View;\nusing Combat.Unit;\n\nnamespace Combat.Component.Bullet\n{\n    public class Bullet : IBullet\n    {\n        public Bullet(IBody body, IView view, ILifetime lifetime, UnitType unitType)\n        {\n            _body = body;\n            _view = view;\n            _lifetime = lifetime;\n            _unitType = unitType;\n            State = UnitState.Active;\n            CanBeDisarmed = true;\n        }\n\n        public UnitType Type { get { return _unitType; } }\n        public IBody Body { get { return _body; } }\n        public IView View { get { return _view; } }\n        public IController Controller { get; set; }\n        public ILifetime Lifetime { get { return _lifetime; } }\n        public IDamageHandler DamageHandler { get; set; }\n        public ICollider Collider { get; set; }\n        public PhysicsManager Physics { get; set; }\n        public ICollisionBehaviour CollisionBehaviour { get; set; }\n\n        public float DefenseMultiplier => _unitType?.Owner?.DefenseMultiplier ?? 1.0f;\n\n        public bool CanBeDisarmed { get; set; }\n\n        public void OnCollision(Impact impact, IUnit target, CollisionData collisionData)\n        {\n            if (State != UnitState.Active)\n                return;\n\n            if (DamageHandler != null)\n                impact.Effects |= DamageHandler.ApplyDamage(impact);\n\n            impact.Effects |= InvokeActions(ConditionType.OnCollide);\n            if (impact.Effects.Contains(CollisionEffect.Disarm) && CanBeDisarmed)\n                Disarm();\n            else if (impact.Effects.Contains(CollisionEffect.Destroy))\n                Detonate();\n        }\n\n        public UnitState State { get; private set; }\n\n        public void UpdatePhysics(float elapsedTime)\n        {\n            if (State != UnitState.Active)\n                return;\n\n            if (Controller != null)\n                Controller.UpdatePhysics(elapsedTime);\n\n            Body.UpdatePhysics(elapsedTime);\n            Lifetime.Update(elapsedTime);\n            Collider.UpdatePhysics(elapsedTime);\n\n            if (Lifetime.IsExpired)\n                Expire();\n        }\n\n        public void UpdateView(float elapsedTime)\n        {\n            Body.UpdateView(elapsedTime);\n            View.Life = Lifetime.Value;\n            View.UpdateView(elapsedTime);\n        }\n\n        public void Vanish()\n        {\n            State = UnitState.Inactive;\n        }\n\n        public void Dispose()\n        {\n            Body.Dispose();\n            View.Dispose();\n\n            if (CollisionBehaviour != null)\n                CollisionBehaviour.Dispose();\n            if (Controller != null)\n                Controller.Dispose();\n            if (DamageHandler != null)\n                DamageHandler.Dispose();\n            if (Physics != null)\n                Physics.Dispose();\n\n            foreach (var item in _resources)\n                item.Dispose();\n\n            if (Collider != null)\n                Collider.Dispose();\n        }\n\n        public void AddAction(IAction action)\n        {\n            if (action.Condition != ConditionType.None)\n                _actions.Add(action);\n\n            AddResource(action);\n\n            if (action.Condition == ConditionType.None)\n                action.Invoke();\n        }\n\n        public void AddResource(IDisposable resource)\n        {\n            _resources.Add(resource);\n        }\n\n        public void Detonate()\n        {\n            if (State != UnitState.Active)\n                return;\n\n            InvokeActions(ConditionType.OnDetonate);\n            Destroy();\n        }\n\n        private void Expire()\n        {\n            var effect = InvokeActions(ConditionType.OnExpire);\n\n            if (effect == CollisionEffect.Destroy)\n                Detonate();\n            else\n                Destroy();\n        }\n\n        private void Disarm()\n        {\n            InvokeActions(ConditionType.OnDisarm);\n\n            if (State == UnitState.Active)\n                State = UnitState.Destroyed;\n        }\n\n        private void Destroy()\n        {\n            InvokeActions(ConditionType.OnDestroy);\n\n            if (State == UnitState.Active)\n                State = UnitState.Destroyed;\n        }\n\n        private CollisionEffect InvokeActions(ConditionType condition)\n        {\n            var effect = CollisionEffect.None;\n            var count = _actions.Count;\n            for (var i = 0; i < count; ++i)\n            {\n                var action = _actions[i];\n                if (action.Condition.Contains(condition))\n                    effect |= action.Invoke();\n            }\n\n            return effect;\n        }\n\n        private readonly ILifetime _lifetime;\n        private readonly UnitType _unitType;\n        private readonly IBody _body;\n        private readonly IView _view;\n        private readonly List<IAction> _actions = new List<IAction>();\n        private readonly List<IDisposable> _resources = new List<IDisposable>();\n    }\n}\n",
        "gt": [
            "'event_horizon/Starship/Assets/Scripts/Combat/Effects/IEffectComponent.cs'",
            "'event_horizon/Starship/Assets/Scripts/Combat/Unit/Bullet/Action/PlayEffectAction.cs'",
            "'event_horizon/Starship/Assets/Scripts/Combat/Unit/Bullet/Bullet.cs'",
            "'event_horizon/Starship/Assets/Scripts/Combat/Component/Platform/AutoAimingPlatform.cs'",
            "'event_horizon/Starship/Assets/Scripts/Combat/AI/Helpers.cs'",
            "'event_horizon/Starship/Assets/Scripts/Installers/ConfigSceneInstaller.cs'"
        ]
    },
    {
        "files": [
            "'Idle-Miner/Assets/Plugins/Zenject/Source/Install/Contexts/SceneDecoratorContext.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Commands/LoadUserDataCommand.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Startup/StartupMediator.cs'",
            "'Idle-Miner/Assets/Scripts/core/Contexts/FSM/StateBehaviour.cs'"
        ],
        "content": "'Idle-Miner/Assets/Plugins/Zenject/Source/Install/Contexts/SceneDecoratorContext.cs'\n:#if !NOT_UNITY3D\n\nusing System;\nusing System.Collections.Generic;\nusing ModestTree;\nusing UnityEngine;\nusing UnityEngine.Serialization;\nusing Zenject.Internal;\n\nnamespace Zenject\n{\n    public class SceneDecoratorContext : Context\n    {\n        [SerializeField]\n        List<MonoInstaller> _lateInstallers = new List<MonoInstaller>();\n\n        [SerializeField]\n        List<MonoInstaller> _lateInstallerPrefabs = new List<MonoInstaller>();\n\n        [SerializeField]\n        List<ScriptableObjectInstaller> _lateScriptableObjectInstallers = new List<ScriptableObjectInstaller>();\n\n        public IEnumerable<MonoInstaller> LateInstallers\n        {\n            get { return _lateInstallers; }\n            set\n            {\n                _lateInstallers.Clear();\n                _lateInstallers.AddRange(value);\n            }\n        }\n\n        public IEnumerable<MonoInstaller> LateInstallerPrefabs\n        {\n            get { return _lateInstallerPrefabs; }\n            set\n            {\n                _lateInstallerPrefabs.Clear();\n                _lateInstallerPrefabs.AddRange(value);\n            }\n        }\n\n        public IEnumerable<ScriptableObjectInstaller> LateScriptableObjectInstallers\n        {\n            get { return _lateScriptableObjectInstallers; }\n            set\n            {\n                _lateScriptableObjectInstallers.Clear();\n                _lateScriptableObjectInstallers.AddRange(value);\n            }\n        }\n\n        [FormerlySerializedAs(\"SceneName\")]\n        [SerializeField]\n        string _decoratedContractName = null;\n\n        DiContainer _container;\n        readonly List<MonoBehaviour> _injectableMonoBehaviours = new List<MonoBehaviour>();\n\n        public string DecoratedContractName\n        {\n            get { return _decoratedContractName; }\n        }\n\n        public override DiContainer Container\n        {\n            get\n            {\n                Assert.IsNotNull(_container);\n                return _container;\n            }\n        }\n\n        public override IEnumerable<GameObject> GetRootGameObjects()\n        {\n\n\n            throw Assert.CreateException();\n        }\n\n        public void Initialize(DiContainer container)\n        {\n            Assert.IsNull(_container);\n            Assert.That(_injectableMonoBehaviours.IsEmpty());\n\n            _container = container;\n\n            GetInjectableMonoBehaviours(_injectableMonoBehaviours);\n\n            foreach (var instance in _injectableMonoBehaviours)\n            {\n                container.QueueForInject(instance);\n            }\n        }\n\n        public void InstallDecoratorSceneBindings()\n        {\n            _container.Bind<SceneDecoratorContext>().FromInstance(this);\n            InstallSceneBindings(_injectableMonoBehaviours);\n        }\n\n        public void InstallDecoratorInstallers()\n        {\n            InstallInstallers();\n        }\n\n        protected override void GetInjectableMonoBehaviours(List<MonoBehaviour> monoBehaviours)\n        {\n            var scene = gameObject.scene;\n\n            ZenUtilInternal.AddStateMachineBehaviourAutoInjectersInScene(scene);\n            ZenUtilInternal.GetInjectableMonoBehavioursInScene(scene, monoBehaviours);\n        }\n\n        public void InstallLateDecoratorInstallers()\n        {\n            InstallInstallers(new List<InstallerBase>(), new List<Type>(), _lateScriptableObjectInstallers, _lateInstallers, _lateInstallerPrefabs);\n        }\n    }\n}\n\n#endif\n\n'Idle-Miner/Assets/Scripts/IdleMiner/Commands/LoadUserDataCommand.cs'\n:﻿using System;\nusing System.IO;\nusing Newtonsoft.Json;\nusing PG.Core.Commands;\nusing PG.IdleMiner.Contexts.Startup;\nusing PG.IdleMiner.Misc;\nusing PG.IdleMiner.Models.DataModels;\nusing PG.IdleMiner.Models.MediatorModels;\nusing PG.IdleMiner.Models.RemoteDataModels;\nusing RSG;\nusing UnityEngine;\nusing Zenject;\n\nnamespace PG.IdleMiner.Commands\n{\n    public class LoadUserDataCommand : BaseCommand\n    {\n        [Inject] private RemoteDataModel _remoteDataModel;\n        [Inject] private readonly StartupModel _startupModel;\n\n        public void Execute(LoadUserDataSignal signal)\n        {\n            try\n            {\n                string path = Path.Combine(Application.streamingAssetsPath, Constants.GameStateFile);\n\n                if (File.Exists(path))\n                {\n                    StreamReader reader = new StreamReader(path);\n                    UserData userData = JsonConvert.DeserializeObject<UserData>(reader.ReadToEnd());\n                    reader.Close();\n\n                    _remoteDataModel.SeedUserData(userData);\n\n                    Debug.Log(\"UserData Loaded From: \" + path);\n\n                    signal.Promise.Resolve();\n                }\n                else\n                    signal.Promise.Reject(new FileNotFoundException(Constants.GameStateFile + \" doesn't Exist.\"));\n\n            }\n            catch (Exception ex)\n            {\n                signal.Promise.Reject(ex);\n            }\n        }\n    }\n\n}\n\n'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Startup/StartupMediator.cs'\n:﻿using System;\nusing PG.Core.Contexts;\nusing PG.Core.Installers;\nusing PG.IdleMiner.Models.MediatorModels;\nusing PG.IdleMiner.Models.RemoteDataModels;\nusing PG.IdleMiner.Views.Startup;\nusing UniRx;\nusing UnityEngine;\nusing Zenject;\n\nnamespace PG.IdleMiner.Contexts.Startup\n{\n    public partial class StartupMediator : StateMachineMediator\n    {\n        [Inject] private readonly StartupView _view;\n\n        [Inject] private readonly StartupModel _startupModel;\n        [Inject] private readonly RemoteDataModel _remoteDataModel;\n\n        public StartupMediator()\n        {\n            Disposables = new CompositeDisposable();\n        }\n\n        public override void Initialize()\n        {\n            base.Initialize();\n\n\n            StateBehaviours.Add((int)StartupModel.ELoadingProgress.LoadPopup, new StartupStateLoadPopup(this));\n            StateBehaviours.Add((int)StartupModel.ELoadingProgress.LoadStaticData, new StartupStateLoadStaticData(this));\n            StateBehaviours.Add((int)StartupModel.ELoadingProgress.LoadUserData, new StartupStateLoadUserData(this));\n            StateBehaviours.Add((int)StartupModel.ELoadingProgress.CreateUserData, new StartupStateCreateUserData(this));\n            StateBehaviours.Add((int)StartupModel.ELoadingProgress.LoadHud, new StartupStateLoadHud(this));\n            StateBehaviours.Add((int)StartupModel.ELoadingProgress.LoadGamePlay, new StartupStateLoadGamePlay(this));\n            StateBehaviours.Add((int)StartupModel.ELoadingProgress.GamePlay, new StartupStateGamePlay(this));\n\n            _startupModel.LoadingProgress.Subscribe(OnLoadingProgressChanged).AddTo(Disposables);\n        }\n\n        private void OnLoadingProgressChanged(StartupModel.ELoadingProgress loadingProgress)\n        {\n            _view.ProgressBar.value = (float)loadingProgress / 100;\n\n            GoToState((int)loadingProgress);\n        }\n\n        private void OnReload()\n        {\n            UnloadAllScenesExceptSignal.UnloadAllExcept(ProjectScenes.Startup, SignalBus).Done\n            (\n                () =>\n                {\n                    _startupModel.LoadingProgress.Value = StartupModel.ELoadingProgress.LoadPopup;\n                },\n                exception =>\n                {\n                    Debug.LogError(\"Error While Reloading: \" + exception.ToString());\n                }\n            );\n        }\n\n        private void OnLoadingStart()\n        {\n            _view.Show();\n        }\n    }\n}\n\n\n'Idle-Miner/Assets/Scripts/core/Contexts/FSM/StateBehaviour.cs'\n:﻿using UniRx;\nusing UnityEngine;\nusing Zenject;\n\nnamespace PG.Core.Contexts\n{\n    public partial class StateMachineMediator\n    {\n        public class StateBehaviour\n        {\n            protected CompositeDisposable Disposables;\n            protected readonly SignalBus SignalBus;\n\n            public StateBehaviour(StateMachineMediator mediator)\n            {\n                SignalBus = mediator.SignalBus;\n            }\n\n            public virtual void OnStateEnter()\n            {\n                Debug.Log(string.Format(\"{0} , OnStateEnter()\", this));\n\n                Disposables = new CompositeDisposable();\n            }\n\n            public virtual void OnStateExit()\n            {\n                Debug.Log(string.Format(\"{0} , OnStateExit()\", this));\n\n                Disposables.Dispose();\n            }\n\n            public virtual bool IsValidOpenState()\n            {\n                return false;\n            }\n\n            public virtual void Tick()\n            {\n\n            }\n        }\n    }\n}\n",
        "gt": [
            "'Idle-Miner/Assets/Plugins/Zenject/Source/Install/Contexts/SceneDecoratorContext.cs'",
            "'Idle-Miner/Assets/Scripts/core/Contexts/FSM/StateBehaviour.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/Startup/StartupMediator.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Commands/LoadUserDataCommand.cs'"
        ]
    },
    {
        "files": [
            "'THREE/SingleSceneSilkExample/ThreeSilkWindow.cs'",
            "'THREE/ThreeSilkExample/LearningThreeJs/Chapter01/MaterialsLightExample.cs'",
            "'THREE/ThreeSilkExample/LearningThreeJs/Chapter10/RepeatWrappingExample.cs'"
        ],
        "content": "'THREE/SingleSceneSilkExample/ThreeSilkWindow.cs'\n:﻿using ImGuiNET;\nusing Silk.NET.GLFW;\nusing Silk.NET.Input;\nusing Silk.NET.Maths;\nusing Silk.NET.OpenGLES;\nusing Silk.NET.OpenGLES.Extensions.ImGui;\nusing Silk.NET.Windowing;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing MouseButton = Silk.NET.Input.MouseButton;\nusing THREE.Silk.Example;\nnamespace THREE.Silk\n{\n    public class ThreeSilkWindow\n    {\n        public IWindow window;\n        public GL gl;\n        public ImGuiController? imGuiManager;\n        public IInputContext input;\n        public IKeyboard primaryKeyboard;\n        public Example.Example currentThreeContainer;\n        private string _title;\n        public string Title\n        {\n            get { return _title; }\n            set { window.Title = value; _title = value; }\n        }\n        public ThreeSilkWindow()\n        {\n            var options = WindowOptions.Default;\n            options.Size = new Vector2D<int>(800, 600);\n            _title = \"Three Example with Silk.NET\";\n            options.Title =_title;\n            options.API = new GraphicsAPI(ContextAPI.OpenGL,ContextProfile.Compatability,ContextFlags.Default,new APIVersion(3,1));\n            window = Window.Create(options);\n\n            window.Load += OnLoad;\n            window.Render += OnRender;\n            window.FramebufferResize += OnResize;\n            window.Closing += OnClose;\n        }\n        public virtual void InitThreeSilkWindow()\n        {\n            input = window.CreateInput();\n            primaryKeyboard = input.Keyboards.FirstOrDefault();\n            if (primaryKeyboard != null)\n            {\n                primaryKeyboard.KeyDown += KeyDown;\n            }\n            for (int i = 0; i < input.Mice.Count; i++)\n            {\n\n                input.Mice[i].MouseMove += OnMouseMove;\n                input.Mice[i].Scroll += OnMouseWheel;\n                input.Mice[i].MouseDown += OnMouseDown;\n                input.Mice[i].MouseUp += OnMouseUp;\n            }\n            gl = GL.GetApi(window);\n            imGuiManager = new ImGuiController(gl, window, input);\n        }\n\n        public virtual void InitImGuiStyle()\n        {\n            ImGui.StyleColorsDark();\n            var style = ImGui.GetStyle();\n            style.Colors[(int)ImGuiCol.WindowBg].W = 0.78f;\n            style.Colors[(int)ImGuiCol.FrameBg].W = 0.71f;\n            style.Colors[(int)ImGuiCol.ChildBg].W = 0.78f;\n        }\n\n        public void SetCurrentExample(Example.Example example)\n        {\n            currentThreeContainer = example;\n        }\n\n        public virtual void OnLoad()\n        {\n            InitThreeSilkWindow();\n            InitImGuiStyle();\n\n            Vector2D<int> size;\n            size.X = window.Size.X;\n            size.Y = window.Size.Y;\n            if (currentThreeContainer != null)\n            {\n                currentThreeContainer.Load(window);\n            }\n            OnResize(size);\n        }\n\n        public virtual void OnResize(Vector2D<int> newSize)\n        {\n            if (currentThreeContainer != null)\n            {\n                gl.Viewport(0,0,(uint)newSize.X,(uint)newSize.Y);\n                currentThreeContainer.OnResize(new ResizeEventArgs(newSize));\n            }\n        }\n        public virtual void KeyDown(IKeyboard keyboard,Key key,int arg)\n        {\n            if (currentThreeContainer == null) return;\n            currentThreeContainer.OnKeyDown(key, (int)key, (KeyModifiers)arg);\n        }\n        public virtual void OnMouseMove(IMouse mouse,System.Numerics.Vector2 position)\n        {\n            if (currentThreeContainer == null) return;\n            currentThreeContainer.OnMouseMove(0, (int)position.X, (int)position.Y);\n        }\n        public virtual void OnMouseWheel(IMouse mouse,ScrollWheel scrollWheel)\n        {\n            if(currentThreeContainer == null) return;\n            currentThreeContainer.OnMouseWheel((int)mouse.Position.X, (int)mouse.Position.Y, (int)scrollWheel.Y * 120);\n        }\n        public virtual void OnMouseDown(IMouse mouse,MouseButton button)\n        {\n            if (currentThreeContainer == null) return;\n            currentThreeContainer.OnMouseDown(button,(int)mouse.Position.X,(int)mouse.Position.Y);\n        }\n        public virtual void OnMouseUp(IMouse mouse,MouseButton button)\n        {\n            if (currentThreeContainer == null) return;\n            currentThreeContainer.OnMouseUp(button,(int)mouse.Position.X, (int)mouse.Position.Y);\n        }\n        public virtual void OnClose()\n        {\n            currentThreeContainer?.Dispose();\n            imGuiManager?.Dispose();\n            input?.Dispose();\n            gl?.Dispose();\n        }\n        public virtual void OnRender(double deltaTime)\n        {\n            window.MakeCurrent();\n            imGuiManager.Update((float)deltaTime);\n            if (currentThreeContainer == null) return;\n\n            currentThreeContainer.Render();\n            if (currentThreeContainer.AddGuiControlsAction != null)\n            {\n                currentThreeContainer.AddGuiControlsAction();\n            }\n            imGuiManager.Render();\n        }\n        public virtual void Render()\n        {\n            window.Run();\n        }\n    }\n}\n\n'THREE/ThreeSilkExample/LearningThreeJs/Chapter01/MaterialsLightExample.cs'\n:﻿using System;\nusing THREE;\nusing THREE.Silk;\nusing Color = THREE.Color;\nnamespace THREE.Silk.Example\n{\n    [Example(\"03-Materials-Light\", ExampleCategory.LearnThreeJS, \"Chapter01\")]\n    public class MaterialsLightExample : Example\n    {\n\n        public Mesh cube,plane,sphere;\n\n        public MaterialsLightExample() : base()\n        {\n\n        }\n        public override void InitLighting()\n        {\n            base.InitLighting();\n            var spotLight = new SpotLight(new Color().SetHex(0xffffff));\n\n            spotLight.Position.Set(-40, 60, -10);\n            spotLight.CastShadow = true;\n            spotLight.Shadow.MapSize = new THREE.Vector2(1024, 1024);\n            spotLight.Shadow.Camera.Far = 130;\n            spotLight.Shadow.Camera.Near = 40;\n            scene.Add(spotLight);\n\n            var ambienLight = new THREE.AmbientLight(0x353535);\n            scene.Add(ambienLight);\n\n        }\n\n        public override void Init()\n        {\n            base.Init();\n\n            scene.Background = Color.Hex(0xffffff);\n\n            var planeGeometry = new PlaneGeometry(60, 20);\n            var planeMaterial = new MeshLambertMaterial() { Color = Color.Hex(0xcccccc) };\n            plane = new Mesh(planeGeometry, planeMaterial);\n            plane.ReceiveShadow = true;\n            plane.Rotation.X = (float)(-0.5 * Math.PI);\n            plane.Position.Set(15, 0, 0);\n\n            scene.Add(plane);\n\n\n            var cubeGeometry = new BoxGeometry(4, 4, 4);\n            var cubeMaterial = new MeshLambertMaterial() { Color = Color.Hex(0xff0000) };\n            cube = new Mesh(cubeGeometry, cubeMaterial);\n            cube.CastShadow = true;\n\n            cube.Position.Set(-4, 3, 0);\n\n\n\n            scene.Add(cube);\n\n\n            var sphereGeometry = new SphereGeometry(4, 20, 20);\n            var sphereMaterial = new MeshLambertMaterial() { Color = Color.Hex(0x7777ff) };\n            sphere = new Mesh(sphereGeometry, sphereMaterial);\n            sphere.CastShadow = true;\n\n            sphere.Position.Set(20, 4, 2);\n\n\n            scene.Add(sphere);\n\n        }\n        public override void Render()\n        {\n            base.Render();\n        }\n        public override void OnResize(ResizeEventArgs clientSize)\n        {\n            base.OnResize(clientSize);\n            camera.Aspect = this.AspectRatio;\n            camera.UpdateProjectionMatrix();\n        }\n    }\n}\n\n'THREE/ThreeSilkExample/LearningThreeJs/Chapter10/RepeatWrappingExample.cs'\n:﻿using ImGuiNET;\nusing System.Diagnostics;\nusing THREE;\nusing THREE.Silk;\nusing THREE.Silk.Example.Learning.Utils;\n\nnamespace THREE.Silk.Example\n{\n    [Example(\"21-repeat-wrapping\", ExampleCategory.LearnThreeJS, \"Chapter10\")]\n    public class RepeatWrappingExample : TemplateExample\n    {\n        Mesh cubeMesh, sphereMesh, polyhedronMesh;\n\n        THREE.Vector2 repeat = new THREE.Vector2(1, 1);\n\n        bool repeatWrapping = true;\n\n        public RepeatWrappingExample() : base()\n        {\n\n        }\n        public override void Init()\n        {\n            base.Init();\n\n            AddGuiControlsAction = () =>\n            {\n                foreach (var item in materialsLib)\n                {\n\n                    AddBasicMaterialSettings(item.Value, item.Key + \"-THREE.Material\");\n                    AddSpecificMaterialSettings(item.Value, item.Key + \"-THREE.MeshStandardMaterial\");\n                }\n\n                ImGui.SliderFloat(\"repeatX\", ref repeat.X, -4, 4);\n                ImGui.SliderFloat(\"repeatY\", ref repeat.Y, -4, 4);\n                ImGui.Checkbox(\"repeatWrapping\", ref repeatWrapping);\n            };\n        }\n        public override void SetGeometryWithTexture()\n        {\n            var groundPlane = DemoUtils.AddLargeGroundPlane(scene);\n            groundPlane.Position.Y = -10;\n\n\n            scene.Add(new AmbientLight(new THREE.Color(0x444444)));\n\n            var polyhedron = new IcosahedronBufferGeometry(8, 0);\n            polyhedronMesh = AddGeometry(scene, polyhedron, \"polyhedron\", TextureLoader.Load(\"../../../../assets/textures/general/metal-rust.jpg\"));\n            polyhedronMesh.Position.X = 20;\n\n            var sphere = new SphereBufferGeometry(5, 20, 20);\n            sphereMesh = AddGeometry(scene, sphere, \"sphere\", TextureLoader.Load(\"../../../../assets/textures/general/floor-wood.jpg\"));\n\n            var cube = new BoxBufferGeometry(10, 10, 10);\n            cubeMesh = AddGeometry(scene, cube, \"cube\", TextureLoader.Load(\"../../../../assets/textures/general/brick-wall.jpg\"));\n            cubeMesh.Position.X = -20;\n        }\n\n        private void UpdateRepeat()\n        {\n\n            cubeMesh.Material.Map.Repeat.Set(repeat.X, repeat.Y);\n            sphereMesh.Material.Map.Repeat.Set(repeat.X, repeat.Y);\n            polyhedronMesh.Material.Map.Repeat.Set(repeat.X, repeat.Y);\n\n\n            if (repeatWrapping)\n            {\n                cubeMesh.Material.Map.WrapS = Constants.RepeatWrapping;\n                cubeMesh.Material.Map.WrapT = Constants.RepeatWrapping;\n                sphereMesh.Material.Map.WrapS = Constants.RepeatWrapping;\n                sphereMesh.Material.Map.WrapT = Constants.RepeatWrapping;\n                polyhedronMesh.Material.Map.WrapS = Constants.RepeatWrapping;\n                polyhedronMesh.Material.Map.WrapT = Constants.RepeatWrapping;\n            }\n            else\n            {\n                cubeMesh.Material.Map.WrapS = Constants.ClampToEdgeWrapping;\n                cubeMesh.Material.Map.WrapT = Constants.ClampToEdgeWrapping;\n                sphereMesh.Material.Map.WrapS = Constants.ClampToEdgeWrapping;\n                sphereMesh.Material.Map.WrapT = Constants.ClampToEdgeWrapping;\n                polyhedronMesh.Material.Map.WrapS = Constants.ClampToEdgeWrapping;\n                polyhedronMesh.Material.Map.WrapT = Constants.ClampToEdgeWrapping;\n            }\n\n            cubeMesh.Material.Map.NeedsUpdate = true;\n            sphereMesh.Material.Map.NeedsUpdate = true;\n            polyhedronMesh.Material.Map.NeedsUpdate = true;\n        }\n        public override void Render()\n        {\n            if (!this.ImWantMouse)\n                controls.Enabled = true;\n            else\n                controls.Enabled = false;\n\n            controls.Update();\n            this.renderer.Render(scene, camera);\n            UpdateRepeat();\n            cubeMesh.Rotation.Y += 0.01f;\n            sphereMesh.Rotation.Y += 0.01f;\n            polyhedronMesh.Rotation.Y += 0.01f;\n\n\n        }\n\n\n    }\n}\n",
        "gt": [
            "'THREE/ThreeSilkExample/LearningThreeJs/Chapter10/RepeatWrappingExample.cs'",
            "'THREE/SingleSceneSilkExample/ThreeSilkWindow.cs'",
            "'THREE/ThreeSilkExample/LearningThreeJs/Chapter01/MaterialsLightExample.cs'"
        ]
    },
    {
        "files": [
            "'app/Stratum.Droid/src/Activity/IntroActivity.cs'",
            "'app/Stratum.Droid/src/Callback/ReorderableListTouchHelperCallback.cs'",
            "'app/Stratum.Droid/src/Interface/Adapter/IReorderableListAdapter.cs'",
            "'app/Stratum.Droid/src/AutoBackupWorker.cs'"
        ],
        "content": "'app/Stratum.Droid/src/Activity/IntroActivity.cs'\n:\n\n\nusing Android.App;\nusing Android.OS;\nusing AndroidX.ViewPager2.Adapter;\nusing AndroidX.ViewPager2.Widget;\nusing Google.Android.Material.BottomNavigation;\nusing Google.Android.Material.Navigation;\nusing Stratum.Droid.Callback;\nusing Stratum.Droid.Interface.Adapter;\n\nnamespace Stratum.Droid.Activity\n{\n    [Activity]\n    public class IntroActivity : BaseActivity\n    {\n        private int _pageCount;\n        private ViewPager2 _pager;\n        private FragmentStateAdapter _adapter;\n        private BottomNavigationView _nav;\n\n        public IntroActivity() : base(Resource.Layout.activityIntro)\n        {\n        }\n\n        protected override void OnCreate(Bundle savedInstanceState)\n        {\n            base.OnCreate(savedInstanceState);\n\n            _pageCount = Resources.GetStringArray(Resource.Array.introTitle).Length;\n\n            _pager = FindViewById<ViewPager2>(Resource.Id.viewPager);\n            _nav = FindViewById<BottomNavigationView>(Resource.Id.navigationView);\n\n            _nav.ItemSelected += OnItemSelected;\n\n            var pageChangeCallback = new PageChangeCallback();\n            pageChangeCallback.PageSelected += delegate { OnPageSelected(); };\n\n            _pager.RegisterOnPageChangeCallback(pageChangeCallback);\n\n            _adapter = new IntroPagerAdapter(this, _pageCount);\n            _pager.Adapter = _adapter;\n\n            var backPressCallback = new BackPressCallback(true);\n            backPressCallback.BackPressed += delegate { _pager.CurrentItem--; };\n\n            OnBackPressedDispatcher.AddCallback(backPressCallback);\n\n            OnPageSelected();\n        }\n\n        private void OnPageSelected()\n        {\n            _nav.Menu.FindItem(Resource.Id.intro_prev).SetVisible(_pager.CurrentItem > 0);\n            _nav.Menu.FindItem(Resource.Id.intro_next).SetVisible(_pager.CurrentItem < _pageCount - 1);\n            _nav.Menu.FindItem(Resource.Id.intro_done).SetVisible(_pager.CurrentItem == _pageCount - 1);\n        }\n\n        private void OnItemSelected(object sender, NavigationBarView.ItemSelectedEventArgs e)\n        {\n            switch (e.P0.ItemId)\n            {\n                case Resource.Id.intro_prev:\n                    _pager.CurrentItem--;\n                    break;\n\n                case Resource.Id.intro_next:\n                    _pager.CurrentItem++;\n                    break;\n\n                case Resource.Id.intro_done:\n                {\n                    _ = new PreferenceWrapper(this) { FirstLaunch = false };\n                    Finish();\n                    break;\n                }\n            }\n\n            OnPageSelected();\n        }\n    }\n}\n'app/Stratum.Droid/src/Callback/ReorderableListTouchHelperCallback.cs'\n:\n\n\nusing Android.Animation;\nusing Android.Content;\nusing AndroidX.Core.View;\nusing AndroidX.RecyclerView.Widget;\nusing Google.Android.Material.Card;\nusing Stratum.Droid.Interface.Adapter;\nusing Stratum.Droid.Util;\n\nnamespace Stratum.Droid.Callback\n{\n    public class ReorderableListTouchHelperCallback : ItemTouchHelper.Callback\n    {\n        private const int DragElevationDp = 8;\n\n        private readonly IReorderableListAdapter _adapter;\n        private readonly GridLayoutManager _layoutManager;\n        private readonly float _dragElevation;\n\n        private int _movementStartPosition;\n        private int _movementEndPosition;\n\n        public ReorderableListTouchHelperCallback(Context context, IReorderableListAdapter adapter,\n            GridLayoutManager layoutManager)\n        {\n            _layoutManager = layoutManager;\n            _adapter = adapter;\n            _movementStartPosition = -1;\n            _movementEndPosition = -1;\n\n            _dragElevation = DimenUtil.DpToPx(context, DragElevationDp);\n        }\n\n        public override bool IsLongPressDragEnabled => true;\n        public override bool IsItemViewSwipeEnabled => false;\n        public bool IsLocked { get; set; }\n\n        public override int GetMovementFlags(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder)\n        {\n            if (IsLocked)\n            {\n                return MakeMovementFlags(0, 0);\n            }\n\n            var dragFlags = ItemTouchHelper.Up | ItemTouchHelper.Down;\n\n            if (_layoutManager.SpanCount > 1)\n            {\n                dragFlags |= ItemTouchHelper.Left | ItemTouchHelper.Right;\n            }\n\n            return MakeMovementFlags(dragFlags, 0);\n        }\n\n        public override bool OnMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder,\n            RecyclerView.ViewHolder target)\n        {\n            if (_movementEndPosition == -1)\n            {\n                _adapter.OnMovementStarted();\n            }\n\n            _movementEndPosition = target.BindingAdapterPosition;\n            _adapter.MoveItemView(viewHolder.BindingAdapterPosition, target.BindingAdapterPosition);\n            return true;\n        }\n\n        public override void OnSelectedChanged(RecyclerView.ViewHolder viewHolder, int actionState)\n        {\n            base.OnSelectedChanged(viewHolder, actionState);\n\n            switch (actionState)\n            {\n                case ItemTouchHelper.ActionStateDrag:\n                {\n                    _movementStartPosition = viewHolder.BindingAdapterPosition;\n\n                    if (viewHolder.ItemView is MaterialCardView card)\n                    {\n                        card.Dragged = true;\n                    }\n                    else\n                    {\n                        var animator = ObjectAnimator.OfFloat(viewHolder.ItemView, \"elevation\", _dragElevation);\n                        animator.SetDuration(200);\n                        animator.Start();\n                    }\n\n                    break;\n                }\n\n                case ItemTouchHelper.ActionStateIdle:\n                {\n                    if (viewHolder == null && _movementStartPosition > -1 && _movementEndPosition > -1)\n                    {\n                        _adapter.OnMovementFinished(_movementStartPosition != _movementEndPosition);\n                        _movementStartPosition = -1;\n                        _movementEndPosition = -1;\n                    }\n\n                    break;\n                }\n            }\n        }\n\n        public override void ClearView(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder)\n        {\n            base.ClearView(recyclerView, viewHolder);\n\n            if (viewHolder.ItemView is MaterialCardView card)\n            {\n                card.Dragged = false;\n            }\n            else\n            {\n                ViewCompat.SetElevation(viewHolder.ItemView, 0f);\n            }\n        }\n\n        public override void OnSwiped(RecyclerView.ViewHolder viewHolder, int direction)\n        {\n        }\n    }\n}\n'app/Stratum.Droid/src/Interface/Adapter/IReorderableListAdapter.cs'\n:\n\n\nnamespace Stratum.Droid.Interface.Adapter\n{\n    public interface IReorderableListAdapter\n    {\n        public void MoveItemView(int oldPosition, int newPosition);\n        public void OnMovementStarted();\n        public void OnMovementFinished(bool orderChanged);\n    }\n}\n'app/Stratum.Droid/src/AutoBackupWorker.cs'\n:\n\n\nusing System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Android.App;\nusing Android.Content;\nusing Android.OS;\nusing AndroidX.Core.App;\nusing AndroidX.Core.Content;\nusing AndroidX.DocumentFile.Provider;\nusing AndroidX.Work;\nusing Stratum.Core.Backup;\nusing Stratum.Core.Backup.Encryption;\nusing Stratum.Core.Service;\nusing Stratum.Droid.Extension;\nusing Serilog;\nusing Stratum.Droid.Activity;\nusing Stratum.Droid.Util;\nusing Uri = Android.Net.Uri;\n\nnamespace Stratum.Droid\n{\n    public class AutoBackupWorker : Worker\n    {\n        public const string Name = \"autobackup\";\n\n        private readonly ILogger _log = Log.ForContext<AutoBackupWorker>();\n        private readonly Context _context;\n        private readonly PreferenceWrapper _preferences;\n        private readonly SecureStorageWrapper _secureStorageWrapper;\n        private readonly Database _database = new();\n        private readonly IBackupService _backupService;\n\n        public AutoBackupWorker(Context context, WorkerParameters workerParams) : base(context, workerParams)\n        {\n            _context = context;\n            _preferences = new PreferenceWrapper(context);\n            _secureStorageWrapper = new SecureStorageWrapper(context);\n\n            using var container = Dependencies.GetChildContainer();\n            container.Register(_database);\n            Dependencies.RegisterRepositories(container);\n            Dependencies.RegisterServices(container);\n\n            _backupService = container.Resolve<IBackupService>();\n        }\n\n        private Task OpenDatabase()\n        {\n            var password = _secureStorageWrapper.GetDatabasePassword();\n            return _database.OpenAsync(password, Database.Origin.AutoBackup);\n        }\n\n        private Task CloseDatabase()\n        {\n            return _database.CloseAsync(Database.Origin.AutoBackup);\n        }\n\n        private bool HasPersistentPermissionsAtUri(Uri uri)\n        {\n            if (uri == null)\n            {\n                throw new ArgumentNullException(nameof(uri), \"No uri provided\");\n            }\n\n\n            var permission =\n                _context.ContentResolver.PersistedUriPermissions.FirstOrDefault(p =>\n                    p.Uri.ToString() == uri.ToString());\n\n            if (permission == null)\n            {\n                return false;\n            }\n\n            return permission.IsReadPermission && permission.IsWritePermission;\n        }\n\n        private string GetBackupPassword()\n        {\n            return _preferences.DatabasePasswordBackup\n                ? _secureStorageWrapper.GetDatabasePassword()\n                : _secureStorageWrapper.GetAutoBackupPassword();\n        }\n\n        private async Task<BackupResult> BackupToDir(Uri destUri)\n        {\n            var backup = await _backupService.CreateBackupAsync();\n\n            if (!backup.Authenticators.Any())\n            {\n                return new BackupResult();\n            }\n\n            if (!HasPersistentPermissionsAtUri(destUri))\n            {\n                throw new InvalidOperationException(\"No permission at URI\");\n            }\n\n            var password = GetBackupPassword();\n\n            if (password == null)\n            {\n                throw new InvalidOperationException(\"No password defined\");\n            }\n\n            IBackupEncryption encryption = !string.IsNullOrEmpty(password)\n                ? new StrongBackupEncryption()\n                : new NoBackupEncryption();\n\n            var dataToWrite = await encryption.EncryptAsync(backup, password);\n\n            var directory = DocumentFile.FromTreeUri(_context, destUri);\n            var file = directory.CreateFile(Backup.MimeType,\n                FormattableString.Invariant($\"backup-{DateTime.Now:yyyy-MM-dd_HHmmss}.{Backup.FileExtension}\"));\n\n            if (file == null)\n            {\n                throw new InvalidOperationException(\"File creation failed, got null\");\n            }\n\n            await FileUtil.WriteFileAsync(_context, file.Uri, dataToWrite);\n            return new BackupResult(file.Name);\n        }\n\n        private void CreateNotificationChannel(NotificationContext context)\n        {\n            var idString = ((int) context).ToString();\n\n            var name = context switch\n            {\n                NotificationContext.BackupFailure => _context.GetString(Resource.String.autoBackupFailureTitle),\n                NotificationContext.BackupSuccess => _context.GetString(Resource.String.autoBackupSuccessTitle),\n                _ => throw new ArgumentOutOfRangeException(nameof(context))\n            };\n\n#pragma warning disable CA1416\n            var channel = new NotificationChannel(idString, name, NotificationImportance.Low);\n            var manager = NotificationManagerCompat.From(_context);\n            manager.CreateNotificationChannel(channel);\n#pragma warning restore CA1416\n        }\n\n        private void ShowNotification(NotificationContext context, bool openAppOnClick, IResult result = null)\n        {\n            var channelId = ((int) context).ToString();\n\n            var builder = new NotificationCompat.Builder(_context, channelId)\n                .SetSmallIcon(Resource.Drawable.ic_notification)\n                .SetColor(ContextCompat.GetColor(_context, Shared.Resource.Color.colorLightBluePrimary))\n                .SetPriority(NotificationCompat.PriorityLow);\n\n            switch (context)\n            {\n                case NotificationContext.BackupFailure:\n                    builder.SetContentTitle(_context.GetString(Resource.String.autoBackupFailureTitle));\n                    builder.SetStyle(\n                        new NotificationCompat.BigTextStyle().BigText(\n                            _context.GetString(Resource.String.autoBackupFailureText)));\n                    break;\n\n                case NotificationContext.BackupSuccess:\n                {\n                    var backupResult = (BackupResult) result;\n                    builder.SetContentTitle(_context.GetString(Resource.String.autoBackupSuccessTitle));\n                    builder.SetContentText(backupResult.ToString(_context));\n                    break;\n                }\n\n                default:\n                    throw new ArgumentOutOfRangeException(nameof(context));\n            }\n\n            if (openAppOnClick)\n            {\n                var intent = new Intent(_context, typeof(MainActivity));\n                intent.SetFlags(ActivityFlags.ClearTask | ActivityFlags.NewTask);\n                var pendingIntent = PendingIntent.GetActivity(_context, 0, intent, PendingIntentFlags.Immutable);\n                builder.SetContentIntent(pendingIntent);\n                builder.SetAutoCancel(true);\n            }\n\n            if (Build.VERSION.SdkInt >= BuildVersionCodes.O)\n            {\n                CreateNotificationChannel(context);\n            }\n\n            var manager = NotificationManagerCompat.From(_context);\n            manager.Notify((int) context, builder.Build());\n        }\n\n        private async Task<Result> DoWorkAsync()\n        {\n            var destination = _preferences.AutoBackupUri;\n\n            var backupTriggered = _preferences.AutoBackupTrigger;\n            _preferences.AutoBackupTrigger = false;\n\n            if (backupTriggered ||\n                (_preferences.AutoBackupEnabled && _preferences.BackupRequired != BackupRequirement.NotRequired))\n            {\n                try\n                {\n                    await OpenDatabase();\n                    var result = await BackupToDir(destination);\n                    ShowNotification(NotificationContext.BackupSuccess, false, result);\n                    _preferences.BackupRequired = BackupRequirement.NotRequired;\n                }\n                catch (Exception e)\n                {\n                    ShowNotification(NotificationContext.BackupFailure, true);\n                    _log.Error(e, \"Error performing backup\");\n                    return Result.InvokeFailure();\n                }\n                finally\n                {\n                    await CloseDatabase();\n                }\n            }\n\n            return Result.InvokeSuccess();\n        }\n\n        public override Result DoWork()\n        {\n            return DoWorkAsync().GetAwaiter().GetResult();\n        }\n\n        private enum NotificationContext\n        {\n            BackupFailure,\n            BackupSuccess\n        }\n    }\n}",
        "gt": [
            "'app/Stratum.Droid/src/Interface/Adapter/IReorderableListAdapter.cs'",
            "'app/Stratum.Droid/src/Callback/ReorderableListTouchHelperCallback.cs'",
            "'app/Stratum.Droid/src/Activity/IntroActivity.cs'",
            "'app/Stratum.Droid/src/AutoBackupWorker.cs'"
        ]
    },
    {
        "files": [
            "'event_horizon/Starship/Assets/Plugins/UniRx/Scripts/Observable.Conversions.cs'",
            "'event_horizon/Starship/Assets/Plugins/UniRx/Scripts/Operators/DefaultIfEmpty.cs'",
            "'event_horizon/Starship/Assets/Plugins/UniRx/Scripts/Operators/Merge.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/MainMenu/SettingsAccount.cs'"
        ],
        "content": "'event_horizon/Starship/Assets/Plugins/UniRx/Scripts/Observable.Conversions.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing UniRx.Operators;\n\nnamespace UniRx\n{\n    public static partial class Observable\n    {\n        public static IObservable<T> AsObservable<T>(this IObservable<T> source)\n        {\n            if (source == null) throw new ArgumentNullException(\"source\");\n\n\n            if (source is UniRx.Operators.AsObservableObservable<T>)\n            {\n                return source;\n            }\n\n            return new AsObservableObservable<T>(source);\n        }\n\n        public static IObservable<T> ToObservable<T>(this IEnumerable<T> source)\n        {\n            return ToObservable(source, Scheduler.DefaultSchedulers.Iteration);\n        }\n\n        public static IObservable<T> ToObservable<T>(this IEnumerable<T> source, IScheduler scheduler)\n        {\n            return new ToObservableObservable<T>(source, scheduler);\n        }\n\n        public static IObservable<TResult> Cast<TSource, TResult>(this IObservable<TSource> source)\n        {\n            return new CastObservable<TSource, TResult>(source);\n        }\n\n\n\n\n        public static IObservable<TResult> Cast<TSource, TResult>(this IObservable<TSource> source, TResult witness)\n        {\n            return new CastObservable<TSource, TResult>(source);\n        }\n\n        public static IObservable<TResult> OfType<TSource, TResult>(this IObservable<TSource> source)\n        {\n            return new OfTypeObservable<TSource, TResult>(source);\n        }\n\n\n\n\n        public static IObservable<TResult> OfType<TSource, TResult>(this IObservable<TSource> source, TResult witness)\n        {\n            return new OfTypeObservable<TSource, TResult>(source);\n        }\n\n\n\n\n        public static IObservable<Unit> AsUnitObservable<T>(this IObservable<T> source)\n        {\n            return new AsUnitObservableObservable<T>(source);\n        }\n\n\n\n\n        public static IObservable<Unit> AsSingleUnitObservable<T>(this IObservable<T> source)\n        {\n            return new AsSingleUnitObservableObservable<T>(source);\n        }\n    }\n}\n'event_horizon/Starship/Assets/Plugins/UniRx/Scripts/Operators/DefaultIfEmpty.cs'\n:﻿using System;\nusing UniRx.Operators;\n\nnamespace UniRx.Operators\n{\n    internal class DefaultIfEmptyObservable<T> : OperatorObservableBase<T>\n    {\n        readonly IObservable<T> source;\n        readonly T defaultValue;\n\n        public DefaultIfEmptyObservable(IObservable<T> source, T defaultValue)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n            this.defaultValue = defaultValue;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)\n        {\n            return source.Subscribe(new DefaultIfEmpty(this, observer, cancel));\n        }\n\n        class DefaultIfEmpty : OperatorObserverBase<T, T>\n        {\n            readonly DefaultIfEmptyObservable<T> parent;\n            bool hasValue;\n\n            public DefaultIfEmpty(DefaultIfEmptyObservable<T> parent, IObserver<T> observer, IDisposable cancel) : base(observer, cancel)\n            {\n                this.parent = parent;\n                this.hasValue = false;\n            }\n\n            public override void OnNext(T value)\n            {\n                hasValue = true;\n                observer.OnNext(value);\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); }\n                finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                if (!hasValue)\n                {\n                    observer.OnNext(parent.defaultValue);\n                }\n\n                try { observer.OnCompleted(); }\n                finally { Dispose(); }\n            }\n        }\n    }\n}\n'event_horizon/Starship/Assets/Plugins/UniRx/Scripts/Operators/Merge.cs'\n:﻿using System;\nusing System.Collections.Generic;\n\nnamespace UniRx.Operators\n{\n    internal class MergeObservable<T> : OperatorObservableBase<T>\n    {\n        private readonly IObservable<IObservable<T>> sources;\n        private readonly int maxConcurrent;\n\n        public MergeObservable(IObservable<IObservable<T>> sources, bool isRequiredSubscribeOnCurrentThread)\n            : base(isRequiredSubscribeOnCurrentThread)\n        {\n            this.sources = sources;\n        }\n\n        public MergeObservable(IObservable<IObservable<T>> sources, int maxConcurrent, bool isRequiredSubscribeOnCurrentThread)\n            : base(isRequiredSubscribeOnCurrentThread)\n        {\n            this.sources = sources;\n            this.maxConcurrent = maxConcurrent;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)\n        {\n            if (maxConcurrent > 0)\n            {\n                return new MergeConcurrentObserver(this, observer, cancel).Run();\n            }\n            else\n            {\n                return new MergeOuterObserver(this, observer, cancel).Run();\n            }\n        }\n\n        class MergeOuterObserver : OperatorObserverBase<IObservable<T>, T>\n        {\n            readonly MergeObservable<T> parent;\n\n            CompositeDisposable collectionDisposable;\n            SingleAssignmentDisposable sourceDisposable;\n            object gate = new object();\n            bool isStopped = false;\n\n            public MergeOuterObserver(MergeObservable<T> parent, IObserver<T> observer, IDisposable cancel) : base(observer, cancel)\n            {\n                this.parent = parent;\n            }\n\n            public IDisposable Run()\n            {\n                collectionDisposable = new CompositeDisposable();\n                sourceDisposable = new SingleAssignmentDisposable();\n                collectionDisposable.Add(sourceDisposable);\n\n                sourceDisposable.Disposable = parent.sources.Subscribe(this);\n                return collectionDisposable;\n            }\n\n            public override void OnNext(IObservable<T> value)\n            {\n                var disposable = new SingleAssignmentDisposable();\n                collectionDisposable.Add(disposable);\n                var collectionObserver = new Merge(this, disposable);\n                disposable.Disposable = value.Subscribe(collectionObserver);\n            }\n\n            public override void OnError(Exception error)\n            {\n                lock (gate)\n                {\n                    try { observer.OnError(error); } finally { Dispose(); };\n                }\n            }\n\n            public override void OnCompleted()\n            {\n                isStopped = true;\n                if (collectionDisposable.Count == 1)\n                {\n                    lock (gate)\n                    {\n                        try { observer.OnCompleted(); } finally { Dispose(); };\n                    }\n                }\n                else\n                {\n                    sourceDisposable.Dispose();\n                }\n            }\n\n            class Merge : OperatorObserverBase<T, T>\n            {\n                readonly MergeOuterObserver parent;\n                readonly IDisposable cancel;\n\n                public Merge(MergeOuterObserver parent, IDisposable cancel)\n                    : base(parent.observer, cancel)\n                {\n                    this.parent = parent;\n                    this.cancel = cancel;\n                }\n\n                public override void OnNext(T value)\n                {\n                    lock (parent.gate)\n                    {\n                        base.observer.OnNext(value);\n                    }\n                }\n\n                public override void OnError(Exception error)\n                {\n                    lock (parent.gate)\n                    {\n                        try { observer.OnError(error); } finally { Dispose(); };\n                    }\n                }\n\n                public override void OnCompleted()\n                {\n                    parent.collectionDisposable.Remove(cancel);\n                    if (parent.isStopped && parent.collectionDisposable.Count == 1)\n                    {\n                        lock (parent.gate)\n                        {\n                            try { observer.OnCompleted(); } finally { Dispose(); };\n                        }\n                    }\n                }\n            }\n        }\n\n        class MergeConcurrentObserver : OperatorObserverBase<IObservable<T>, T>\n        {\n            readonly MergeObservable<T> parent;\n\n            CompositeDisposable collectionDisposable;\n            SingleAssignmentDisposable sourceDisposable;\n            object gate = new object();\n            bool isStopped = false;\n\n\n            Queue<IObservable<T>> q;\n            int activeCount;\n\n            public MergeConcurrentObserver(MergeObservable<T> parent, IObserver<T> observer, IDisposable cancel) : base(observer, cancel)\n            {\n                this.parent = parent;\n            }\n\n            public IDisposable Run()\n            {\n                q = new Queue<IObservable<T>>();\n                activeCount = 0;\n\n                collectionDisposable = new CompositeDisposable();\n                sourceDisposable = new SingleAssignmentDisposable();\n                collectionDisposable.Add(sourceDisposable);\n\n                sourceDisposable.Disposable = parent.sources.Subscribe(this);\n                return collectionDisposable;\n            }\n\n            public override void OnNext(IObservable<T> value)\n            {\n                lock (gate)\n                {\n                    if (activeCount < parent.maxConcurrent)\n                    {\n                        activeCount++;\n                        Subscribe(value);\n                    }\n                    else\n                    {\n                        q.Enqueue(value);\n                    }\n                }\n            }\n\n            public override void OnError(Exception error)\n            {\n                lock (gate)\n                {\n                    try { observer.OnError(error); } finally { Dispose(); };\n                }\n            }\n\n            public override void OnCompleted()\n            {\n                lock (gate)\n                {\n                    isStopped = true;\n                    if (activeCount == 0)\n                    {\n                        try { observer.OnCompleted(); } finally { Dispose(); };\n                    }\n                    else\n                    {\n                        sourceDisposable.Dispose();\n                    }\n                }\n            }\n\n            void Subscribe(IObservable<T> innerSource)\n            {\n                var disposable = new SingleAssignmentDisposable();\n                collectionDisposable.Add(disposable);\n                var collectionObserver = new Merge(this, disposable);\n                disposable.Disposable = innerSource.Subscribe(collectionObserver);\n            }\n\n            class Merge : OperatorObserverBase<T, T>\n            {\n                readonly MergeConcurrentObserver parent;\n                readonly IDisposable cancel;\n\n                public Merge(MergeConcurrentObserver parent, IDisposable cancel)\n                    : base(parent.observer, cancel)\n                {\n                    this.parent = parent;\n                    this.cancel = cancel;\n                }\n\n                public override void OnNext(T value)\n                {\n                    lock (parent.gate)\n                    {\n                        base.observer.OnNext(value);\n                    }\n                }\n\n                public override void OnError(Exception error)\n                {\n                    lock (parent.gate)\n                    {\n                        try { observer.OnError(error); } finally { Dispose(); };\n                    }\n                }\n\n                public override void OnCompleted()\n                {\n                    parent.collectionDisposable.Remove(cancel);\n                    lock (parent.gate)\n                    {\n                        if (parent.q.Count > 0)\n                        {\n                            var source = parent.q.Dequeue();\n                            parent.Subscribe(source);\n                        }\n                        else\n                        {\n                            parent.activeCount--;\n                            if (parent.isStopped && parent.activeCount == 0)\n                            {\n                                try { observer.OnCompleted(); } finally { Dispose(); };\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n'event_horizon/Starship/Assets/Scripts/Gui/MainMenu/SettingsAccount.cs'\n:﻿using GameServices.GameManager;\nusing GameServices.Settings;\nusing Services.Account;\nusing Services.Messenger;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing Zenject;\nusing UniRx;\n\nnamespace Gui.MainMenu\n{\n    public class SettingsAccount : MonoBehaviour\n    {\n        [SerializeField] RectTransform _signInButton;\n        [SerializeField] RectTransform _signOutButton;\n        [SerializeField] RawImage _accountIcon;\n        [SerializeField] Text _accountName;\n        [SerializeField] Image _notConnectedIcon;\n        [SerializeField] Text _notConnectedText;\n        [SerializeField] private GameObject[] _controls;\n\n        [Inject] private readonly GameSettings _gameSettings;\n        [Inject] private readonly IAccount _account;\n        [Inject] private readonly IGameDataManager _gameDataManager;\n\n        [Inject]\n        private void Initialize(IMessenger messenger)\n        {\n            messenger.AddListener<Status>(EventType.AccountStatusChanged, OnAccountChanged);\n        }\n\n        public void SignIn()\n        {\n            _account.SignIn();\n        }\n\n        public void SignOut()\n        {\n            _account.SignOut();\n        }\n\n        private void OnAccountChanged(Status status)\n        {\n            if (!gameObject.activeSelf)\n                return;\n\n            var connected = status == Status.Connected;\n            _signInButton.gameObject.SetActive(!connected && _account.CanSignIn);\n            _signOutButton.gameObject.SetActive(connected && _account.CanSignOut);\n\n            _accountName.gameObject.SetActive(connected);\n            _notConnectedText.gameObject.SetActive(!connected);\n\n            _notConnectedIcon.gameObject.SetActive(!connected);\n            _accountIcon.gameObject.SetActive(connected);\n\n            if (connected)\n                _accountName.text = _account.DisplayName;\n\n            _account.LoadUserIcon().Subscribe(result => _accountIcon.texture = result);\n        }\n\n        private void OnEnable()\n        {\n            OnAccountChanged(_account.Status);\n        }\n    }\n}\n",
        "gt": [
            "'event_horizon/Starship/Assets/Plugins/UniRx/Scripts/Operators/Merge.cs'",
            "'event_horizon/Starship/Assets/Plugins/UniRx/Scripts/Operators/DefaultIfEmpty.cs'",
            "'event_horizon/Starship/Assets/Plugins/UniRx/Scripts/Observable.Conversions.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/MainMenu/SettingsAccount.cs'"
        ]
    },
    {
        "files": [
            "'puyotools/src/PuyoTools.App.UI/GUI/ArchiveCreator.cs'",
            "'puyotools/src/PuyoTools.App.Shared/Formats/Compression/CompressionFactory.cs'",
            "'puyotools/src/PuyoTools.App.Cli/Commands/Textures/GimTextureEncodeOptions.cs'",
            "'puyotools/src/PuyoTools.App.UI/Formats/Textures/SvrFormat.cs'",
            "'puyotools/src/PuyoTools.App.Cli/Program.cs'"
        ],
        "content": "'puyotools/src/PuyoTools.App.UI/GUI/ArchiveCreator.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\nusing System.IO;\n\nusing PuyoTools.Core;\nusing PuyoTools.Core.Archives;\nusing PuyoTools.Core.Compression;\n\nusing Ookii.Dialogs.WinForms;\nusing System.Linq;\nusing PuyoTools.App.Tools;\nusing PuyoTools.App.Formats.Archives;\nusing System.Threading.Tasks;\nusing PuyoTools.App.Formats.Compression;\n\nnamespace PuyoTools.GUI\n{\n    public partial class ArchiveCreator : ToolForm\n    {\n        Dictionary<IArchiveFormat, ModuleSettingsControl> writerSettingsControlsCache;\n\n        public ArchiveCreator()\n        {\n            InitializeComponent();\n\n\n            addFilesButton.Click -= base.addFilesButton_Click;\n            addDirectoryButton.Click -= base.addDirectoryButton_Click;\n\n\n            addFromEntriesButton.Visible = true;\n            addFromEntriesButton.Click += addFromEntriesButton_Click;\n\n\n            listView.SmallImageList = new ImageList\n            {\n                ImageSize = new Size(1, 20),\n            };\n\n\n            listView_ClientSizeChanged(null, null);\n\n\n            writerSettingsControlsCache = new Dictionary<IArchiveFormat, ModuleSettingsControl>();\n\n\n            archiveFormatBox.SelectedIndex = 0;\n            archiveFormatBox.Items.AddRange(ArchiveFactory.WriterFormats.ToArray());\n            archiveFormatBox.DisplayMember = nameof(IArchiveFormat.Name);\n\n\n            compressionFormatBox.SelectedIndex = 0;\n            compressionFormatBox.Items.AddRange(CompressionFactory.EncoderFormats.ToArray());\n            compressionFormatBox.DisplayMember = nameof(ICompressionFormat.Name);\n        }\n\n        private void AddFiles(IEnumerable<string> files)\n        {\n            foreach (string file in files)\n            {\n                FileEntry fileEntry = new FileEntry();\n                fileEntry.SourceFile = file;\n                fileEntry.Filename = Path.GetFileName(file);\n                fileEntry.FilenameInArchive = fileEntry.Filename;\n\n                ListViewItem item = new ListViewItem(new string[] {\n                    (listView.Items.Count + 1).ToString(),\n                    fileEntry.Filename,\n                    fileEntry.FilenameInArchive,\n                });\n\n                item.Tag = fileEntry;\n\n                listView.Items.Add(item);\n            }\n        }\n\n        private void AddFiles(IEnumerable<string> files, string rootPath)\n        {\n            var rootPathUri = new Uri(rootPath + Path.DirectorySeparatorChar);\n\n            foreach (string file in files)\n            {\n                FileEntry fileEntry = new FileEntry();\n                fileEntry.SourceFile = file;\n                fileEntry.Filename = Path.GetFileName(file);\n                fileEntry.FilenameInArchive = rootPathUri.MakeRelativeUri(new Uri(file)).ToString();\n\n                ListViewItem item = new ListViewItem(new string[] {\n                    (listView.Items.Count + 1).ToString(),\n                    fileEntry.Filename,\n                    fileEntry.FilenameInArchive,\n                });\n\n                item.Tag = fileEntry;\n\n                listView.Items.Add(item);\n            }\n        }\n\n        private void EnableRunButton()\n        {\n            runButton.Enabled = (listView.Items.Count > 0 && archiveFormatBox.SelectedIndex > 0);\n        }\n\n        private void Run(Settings settings, ProgressDialog dialog)\n        {\n\n            int entryIndex = 0;\n            string description = string.Format(\"Processing {0}\", Path.GetFileName(settings.OutFilename));\n\n            dialog.ReportProgress(0, description);\n\n\n\n\n            List<string> rejectedFiles = new List<string>();\n\n\n            Stream destination;\n            if (settings.CompressionFormat == null)\n            {\n\n                destination = File.Create(settings.OutFilename);\n            }\n            else\n            {\n\n                destination = new MemoryStream();\n            }\n\n\n            using (LegacyArchiveWriter archive = settings.ArchiveFormat.GetCodec().Create(destination))\n            {\n\n                ModuleSettingsControl settingsControl = settings.WriterSettingsControl;\n                if (settingsControl != null)\n                {\n                    Action moduleSettingsAction = () => settingsControl.SetModuleSettings(archive);\n                    settingsControl.Invoke(moduleSettingsAction);\n                }\n\n\n                archive.EntryWriting += (sender, e) =>\n                {\n                    if (archive.Entries.Count == 1)\n                    {\n                        dialog.Description = description + \"\\n\\n\" + string.Format(\"Adding {0}\", Path.GetFileName(e.Entry.Path));\n                    }\n                    else\n                    {\n                        dialog.Description = description + \"\\n\\n\" + string.Format(\"Adding {0} ({1:N0} of {2:N0})\", Path.GetFileName(e.Entry.Path), entryIndex + 1, archive.Entries.Count);\n                    }\n                };\n\n                archive.EntryWritten += (sender, e) =>\n                {\n                    entryIndex++;\n\n                    dialog.ReportProgress(entryIndex * 100 / archive.Entries.Count, description);\n\n                    if (entryIndex == archive.Entries.Count)\n                    {\n                        dialog.ReportProgress(100, \"Finishing up\");\n                    }\n                };\n\n\n\n\n                foreach (FileEntry entry in settings.FileEntries)\n                {\n                    try\n                    {\n                        archive.CreateEntryFromFile(entry.SourceFile, entry.FilenameInArchive);\n                    }\n                    catch (FileRejectedException)\n                    {\n                        rejectedFiles.Add(entry.SourceFile);\n                    }\n                }\n\n\n\n                if (rejectedFiles.Count > 0)\n                {\n                    if (new RejectedFilesDialog(rejectedFiles).ShowDialog() != DialogResult.Yes)\n                    {\n                        destination.Close();\n                        return;\n                    }\n                }\n            }\n\n\n            if (settings.CompressionFormat != null)\n            {\n                destination.Position = 0;\n\n                using (FileStream outStream = File.Create(settings.OutFilename))\n                {\n                    settings.CompressionFormat.GetCodec().Compress(destination, outStream);\n                }\n            }\n\n            destination.Close();\n        }\n\n        private struct FileEntry\n        {\n            public string SourceFile;\n            public string Filename;\n            public string FilenameInArchive;\n        }\n\n        private void listView_ClientSizeChanged(object sender, EventArgs e)\n        {\n            int columnWidth = Math.Max(150, (listView.ClientSize.Width - 20 - listView.Columns[0].Width) / 2);\n            listView.Columns[1].Width = columnWidth;\n            listView.Columns[2].Width = columnWidth;\n        }\n\n        private new void addFilesButton_Click(object sender, EventArgs e)\n        {\n            OpenFileDialog ofd = new OpenFileDialog();\n            ofd.Filter = \"All Files (*.*)|*.*\";\n            ofd.Multiselect = true;\n            ofd.Title = \"Add Files\";\n\n            if (ofd.ShowDialog() == DialogResult.OK)\n            {\n                AddFiles(ofd.FileNames);\n\n                EnableRunButton();\n            }\n        }\n\n        private new void addDirectoryButton_Click(object sender, EventArgs e)\n        {\n            VistaFolderBrowserDialog fbd = new VistaFolderBrowserDialog();\n            fbd.Description = \"Select a directory.\";\n            fbd.UseDescriptionForTitle = true;\n\n            if (fbd.ShowDialog() == DialogResult.OK)\n            {\n                if (MessageBox.Show(\"Include files within subdirectories?\", \"Subdirectories\", MessageBoxButtons.YesNo) == DialogResult.Yes)\n                {\n\n                    AddFiles(Directory.EnumerateFiles(fbd.SelectedPath, \"*\", SearchOption.AllDirectories));\n                }\n                else\n                {\n\n                    AddFiles(Directory.EnumerateFiles(fbd.SelectedPath));\n                }\n\n                EnableRunButton();\n            }\n        }\n\n        private void addFromEntriesButton_Click(object sender, EventArgs e)\n        {\n            OpenFileDialog ofd = new OpenFileDialog();\n            ofd.Filter = \"entries.txt|entries.txt|All Files (*.*)|*.*\";\n            ofd.Multiselect = true;\n            ofd.Title = \"Add Files\";\n\n            if (ofd.ShowDialog() == DialogResult.OK)\n            {\n                string directory = Path.GetDirectoryName(ofd.FileName);\n\n                AddFiles(File.ReadLines(ofd.FileName).Select(x => Path.Combine(directory, x)));\n\n                EnableRunButton();\n            }\n        }\n\n        private void archiveFormatBox_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            archiveSettingsPanel.Controls.Clear();\n\n            if (archiveFormatBox.SelectedIndex != 0)\n            {\n                var archiveFormat = (IArchiveFormat)archiveFormatBox.SelectedItem;\n                if (!writerSettingsControlsCache.TryGetValue(archiveFormat, out var writerSettingsControl))\n                {\n                    writerSettingsControl = archiveFormat.GetModuleSettingsControl();\n                    writerSettingsControlsCache.Add(archiveFormat, writerSettingsControl);\n                }\n\n                archiveSettingsPanel.Controls.Add(writerSettingsControl);\n            }\n\n            EnableRunButton();\n        }\n\n        private void deleteToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n\n\n            int firstIndex = 0;\n\n\n            foreach (ListViewItem item in listView.SelectedItems)\n            {\n\n                if (item.Index > firstIndex)\n                {\n                    firstIndex = item.Index;\n                }\n\n                listView.Items.Remove(item);\n            }\n\n\n            for (int i = firstIndex; i < listView.Items.Count; i++)\n            {\n                listView.Items[i].SubItems[0].Text = (i + 1).ToString();\n            }\n\n            EnableRunButton();\n        }\n\n        private void renameToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            InputDialog dialog = new InputDialog();\n            dialog.WindowTitle = \"Rename Files\";\n            dialog.MainInstruction = dialog.WindowTitle;\n            dialog.Content = \"Selected files will use this filename when added to the archive.\";\n\n            if (listView.SelectedItems.Count == 1)\n            {\n                dialog.Input = listView.SelectedItems[0].SubItems[2].Text;\n            }\n\n            if (dialog.ShowDialog() == DialogResult.OK)\n            {\n                foreach (ListViewItem item in listView.SelectedItems)\n                {\n                    item.SubItems[2].Text = dialog.Input;\n                    FileEntry fileEntry = (FileEntry)item.Tag;\n                    fileEntry.FilenameInArchive = dialog.Input;\n                }\n            }\n        }\n\n        private async void runButton_Click(object sender, EventArgs e)\n        {\n\n            IArchiveFormat archiveFormat = (IArchiveFormat)archiveFormatBox.SelectedItem;\n            string fileExtension = archiveFormat.FileExtension != string.Empty ? archiveFormat.FileExtension : \".*\";\n\n\n            SaveFileDialog sfd = new SaveFileDialog();\n            sfd.Title = \"Save Archive\";\n            sfd.Filter = archiveFormat.Name + \" Archive (*\" + fileExtension + \")|*\" + fileExtension + \"|All Files (*.*)|*.*\";\n\n            if (sfd.ShowDialog() == DialogResult.OK)\n            {\n\n                Enabled = false;\n\n\n\n                var files = listView.Items\n                    .Cast<ListViewItem>()\n                    .Select(x => (FileEntry)x.Tag)\n                    .Select(x => new ArchiveCreatorFileEntry\n                    {\n                        Filename = x.Filename,\n                        FilenameInArchive = x.FilenameInArchive,\n                        SourceFile = x.SourceFile,\n                    })\n                    .ToList();\n                var outputPath = sfd.FileName;\n\n\n                var toolOptions = new ArchiveCreatorOptions\n                {\n                    CompressionFormat = compressionFormatBox.SelectedIndex != 0\n                        ? (ICompressionFormat)compressionFormatBox.SelectedItem\n                        : null,\n                };\n\n\n                var formatOptions = writerSettingsControlsCache.TryGetValue(archiveFormat, out var writerSettingsControl)\n                        ? (IArchiveFormatOptions)writerSettingsControl\n                        : null;\n\n\n                var progressDialog = new ProgressDialog\n                {\n                    WindowTitle = \"Processing\",\n                    Title = \"ncoding Textures\",\n                };\n\n                var progress = new Progress<ToolProgress>(x =>\n                {\n                    progressDialog.ReportProgress((int)(x.Progress * 100), $\"Processing {Path.GetFileName(x.File)} ({x.Progress:P0})\");\n                });\n\n                progressDialog.Show();\n\n\n                var tool = new PuyoTools.App.Tools.ArchiveCreator(archiveFormat, toolOptions, formatOptions);\n                await Task.Run(() => tool.Execute(files, outputPath, progress));\n\n\n                progressDialog.Close();\n                Close();\n            }\n        }\n\n        private struct Settings\n        {\n            public IArchiveFormat ArchiveFormat;\n            public ICompressionFormat CompressionFormat;\n            public string OutFilename;\n            public List<FileEntry> FileEntries;\n            public ModuleSettingsControl WriterSettingsControl;\n        }\n    }\n}\n\n'puyotools/src/PuyoTools.App.Shared/Formats/Compression/CompressionFactory.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\n\nnamespace PuyoTools.App.Formats.Compression\n{\n    public static class CompressionFactory\n    {\n        private static readonly List<ICompressionFormat> decoderFormats;\n        private static readonly List<ICompressionFormat> encoderFormats;\n\n        static CompressionFactory()\n        {\n\n            decoderFormats = new List<ICompressionFormat>()\n            {\n                CnxFormat.Instance,\n                CompFormat.Instance,\n                CxlzFormat.Instance,\n                Lz00Format.Instance,\n                Lz01Format.Instance,\n                Lz10Format.Instance,\n                Lz11Format.Instance,\n                PrsFormat.Instance,\n            };\n\n\n            encoderFormats = new List<ICompressionFormat>()\n            {\n                CnxFormat.Instance,\n                CompFormat.Instance,\n                CxlzFormat.Instance,\n                Lz00Format.Instance,\n                Lz01Format.Instance,\n                Lz10Format.Instance,\n                Lz11Format.Instance,\n                PrsFormat.Instance,\n            };\n        }\n\n\n\n\n\n\n\n\n        internal static ICompressionFormat GetFormat(Stream source, string filename)\n        {\n            foreach (var format in decoderFormats)\n            {\n                if (format.Identify(source, filename))\n                {\n                    return format;\n                }\n            }\n\n            return null;\n        }\n\n\n\n\n        internal static IEnumerable<ICompressionFormat> EncoderFormats => encoderFormats.AsReadOnly();\n    }\n}\n'puyotools/src/PuyoTools.App.Cli/Commands/Textures/GimTextureEncodeOptions.cs'\n:﻿using PuyoTools.Core.Textures.Gim;\nusing PuyoTools.App.Formats.Textures;\nusing PuyoTools.Core.Textures;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PuyoTools.App.Cli.Commands.Textures\n{\n    class GimTextureEncodeOptions : TextureFormatEncodeOptions, ITextureFormatOptions\n    {\n        public GimPaletteFormat PaletteFormat { get; set; }\n\n        public GimPixelFormat PixelFormat { get; set; }\n\n        public bool Metadata { get; set; }\n\n        public bool Swizzle { get; set; }\n\n        public bool Dither { get; set; }\n\n        public void MapTo(TextureBase obj)\n        {\n            var texture = (GimTexture)obj;\n\n            texture.PaletteFormat = PaletteFormat;\n            texture.DataFormat = PixelFormat;\n            texture.HasMetadata = Metadata;\n            texture.Swizzle = Swizzle;\n            texture.Dither = Dither;\n        }\n    }\n}\n\n'puyotools/src/PuyoTools.App.UI/Formats/Textures/SvrFormat.cs'\n:﻿using PuyoTools.App.Formats.Textures.WriterSettings;\nusing PuyoTools.GUI;\nusing PuyoTools.Core.Textures;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PuyoTools.App.Formats.Textures\n{\n\n    internal partial class SvrFormat : ITextureFormat\n    {\n        public ModuleSettingsControl GetModuleSettingsControl() => new SvrWriterSettings();\n    }\n}\n\n'puyotools/src/PuyoTools.App.Cli/Program.cs'\n:﻿using PuyoTools.App.Cli.Commands.Archives;\nusing PuyoTools.App.Cli.Commands.Compression;\nusing PuyoTools.App.Cli.Commands.Textures;\nusing System;\nusing System.CommandLine;\nusing System.CommandLine.Builder;\nusing System.CommandLine.Invocation;\nusing System.CommandLine.Parsing;\nusing System.Threading.Tasks;\n\nnamespace PuyoTools.App.Cli\n{\n    class Program\n    {\n        static async Task<int> Main(string[] args)\n        {\n            var rootCommand = new RootCommand\n            {\n                new Command(\"compression\", \"Perform compression-based actions on files\")\n                {\n                    new CompressionCompressCommand(),\n                    new CompressionDecompressCommand(),\n                },\n                new Command(\"archive\", \"Perform actions on archives\")\n                {\n                    new ArchiveCreateCommand(),\n                    new ArchiveExtractCommand(),\n                },\n                new Command(\"texture\", \"Perform actions on textures\")\n                {\n                    new TextureEncodeCommand(),\n                    new TextureDecodeCommand(),\n                },\n            };\n\n            var parser = new CommandLineBuilder(rootCommand)\n                .UseDefaults()\n                .UseExceptionHandler(ExceptionHandler)\n                .Build();\n\n            return await parser.InvokeAsync(args);\n        }\n\n        static void ExceptionHandler(Exception e, InvocationContext context)\n        {\n            if (e is System.Reflection.TargetInvocationException)\n            {\n                e = e.InnerException;\n            }\n\n            Console.ForegroundColor = ConsoleColor.Red;\n#if DEBUG\n            Console.Error.WriteLine(e);\n#else\n            Console.Error.WriteLine(e.Message);\n#endif\n            Console.ResetColor();\n\n            context.ExitCode = e.HResult;\n        }\n    }\n}\n",
        "gt": [
            "'puyotools/src/PuyoTools.App.Shared/Formats/Compression/CompressionFactory.cs'",
            "'puyotools/src/PuyoTools.App.UI/GUI/ArchiveCreator.cs'",
            "'puyotools/src/PuyoTools.App.UI/Formats/Textures/SvrFormat.cs'",
            "'puyotools/src/PuyoTools.App.Cli/Commands/Textures/GimTextureEncodeOptions.cs'",
            "'puyotools/src/PuyoTools.App.Cli/Program.cs'"
        ]
    },
    {
        "files": [
            "'THREE/THREE/Materials/MeshLambertMaterial.cs'",
            "'THREE/ThreeSilkExample/LearningThreeJs/Chapter02/ForcedMaterialsExample.cs'",
            "'THREE/ThreeSilkExample/LearningThreeJs/Chapter04/ShaderMaterialExample.cs'",
            "'THREE/SingleSceneSilkExample/ThreeSilkWindow.cs'",
            "'THREE/SilkDemo/SilkDemoWindow.cs'"
        ],
        "content": "'THREE/THREE/Materials/MeshLambertMaterial.cs'\n:﻿using System.Runtime.Serialization;\n\nnamespace THREE\n{\n    [Serializable]\n    public class MeshLambertMaterial : Material\n    {\n        public MeshLambertMaterial() : base()\n        {\n            this.type = \"MeshLambertMaterial\";\n\n            this.Color = THREE.Color.ColorName(ColorKeywords.white);\n\n            this.Opacity = 1;\n\n            this.Emissive = THREE.Color.Hex(0x000000);\n\n            this.Combine = Constants.MultiplyOperation;\n\n            this.RefractionRatio = 0.98f;\n\n            this.Transparent = false;\n\n            this.WireframeLineWidth = 1;\n\n            this.WireframeLineCap = \"round\";\n            this.WireframeLineJoin = \"round\";\n        }\n        public MeshLambertMaterial(SerializationInfo info, StreamingContext context) : base(info, context) { }\n\n        protected MeshLambertMaterial(MeshLambertMaterial source) : base()\n        {\n            Copy(source);\n        }\n        public override object Clone()\n        {\n            var material = new MeshLambertMaterial();\n            material.Copy(this);\n            return material;\n        }\n        public object Copy(MeshLambertMaterial source)\n        {\n            base.Copy(source);\n            this.type = source.type;\n\n            this.Color = source.Color;\n\n            this.Opacity = source.Opacity;\n\n            this.Emissive = source.Emissive;\n\n            this.Combine = source.Combine;\n\n            this.RefractionRatio = source.RefractionRatio;\n\n            this.Transparent = source.Transparent;\n\n            this.WireframeLineWidth = source.WireframeLineWidth;\n\n            this.WireframeLineCap = source.WireframeLineCap;\n            this.WireframeLineJoin = source.WireframeLineJoin;\n\n            return this;\n        }\n    }\n}\n\n'THREE/ThreeSilkExample/LearningThreeJs/Chapter02/ForcedMaterialsExample.cs'\n:﻿using THREE;\nusing THREE.Silk;\nnamespace THREE.Silk.Example\n{\n    [Example(\"03-ForcedMaterials\", ExampleCategory.LearnThreeJS, \"Chapter02\")]\n    public class ForcedMaterialsExample : BasicSceneExample\n    {\n        public ForcedMaterialsExample() : base()\n        {\n            scene.OverrideMaterial = new MeshLambertMaterial() { Color = new THREE.Color().SetHex(0xffffff) };\n        }\n    }\n}\n\n'THREE/ThreeSilkExample/LearningThreeJs/Chapter04/ShaderMaterialExample.cs'\n:﻿\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing THREE;\nusing THREE.Silk;\nusing THREE.Silk.Example.Learning.Utils;\nnamespace THREE.Silk.Example\n{\n    [Example(\"11.ShaderMaterial\", ExampleCategory.LearnThreeJS, \"Chapter04\")]\n    public class ShaderMaterialExample : MaterialExampleTemplate\n    {\n        THREE.Vector2 Resolution = new THREE.Vector2();\n        private string vertexShaderCode = @\"\n        uniform float time;\n        varying vec2 vUv;\n\n\n        void main()\n        {\n        vec3 posChanged = position;\n        posChanged.x = posChanged.x*(abs(sin(time*1.0)));\n        posChanged.y = posChanged.y*(abs(cos(time*1.0)));\n        posChanged.z = posChanged.z*(abs(sin(time*1.0)));\n\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(posChanged,1.0);\n        }\n\n\n\n\n        \";\n\n        private string fragmentShader1 = @\"\n        precision highp float;\n        uniform float time;\n        uniform float alpha;\n        uniform vec2 resolution;\n        varying vec2 vUv;\n\n        void main2(void)\n        {\n        vec2 position = vUv;\n        float red = 1.0;\n        float green = 0.25 + sin(time) * 0.25;\n        float blue = 0.0;\n        vec3 rgb = vec3(red, green, blue);\n        vec4 color = vec4(rgb, alpha);\n        gl_FragColor = color;\n        }\n\n        #define PI 3.14159\n        #define TWO_PI (PI*2.0)\n        #define N 68.5\n\n        void main(void)\n        {\n        vec2 center = (gl_FragCoord.xy);\n        center.x=-10.12*sin(time/200.0);\n        center.y=-10.12*cos(time/200.0);\n\n        vec2 v = (gl_FragCoord.xy - resolution/20.0) / min(resolution.y,resolution.x) * 15.0;\n        v.x=v.x-10.0;\n        v.y=v.y-200.0;\n        float col = 0.0;\n\n        for(float i = 0.0; i < N; i++)\n        {\n        float a = i * (TWO_PI/N) * 61.95;\n        col += cos(TWO_PI*(v.y * cos(a) + v.x * sin(a) + sin(time*0.004)*100.0 ));\n        }\n\n        col /= 5.0;\n\n        gl_FragColor = vec4(col*1.0, -col*1.0,-col*4.0, 1.0);\n        }\n\n\n\n\n        \";\n\n        string fragmentShader2 = @\"\n        uniform float time;\n        uniform vec2 resolution;\n\n\n\n        #define CGFloat float\n        #define M_PI 3.14159265359\n\n        vec3 hsvtorgb(float h, float s, float v)\n        {\n        float c = v * s;\n        h = mod((h * 6.0), 6.0);\n        float x = c * (1.0 - abs(mod(h, 2.0) - 1.0));\n        vec3 color;\n\n        if (0.0 <= h && h < 1.0)\n        {\n        color = vec3(c, x, 0.0);\n        }\n        else if (1.0 <= h && h < 2.0)\n        {\n        color = vec3(x, c, 0.0);\n        }\n        else if (2.0 <= h && h < 3.0)\n        {\n        color = vec3(0.0, c, x);\n        }\n        else if (3.0 <= h && h < 4.0)\n        {\n        color = vec3(0.0, x, c);\n        }\n        else if (4.0 <= h && h < 5.0)\n        {\n        color = vec3(x, 0.0, c);\n        }\n        else if (5.0 <= h && h < 6.0)\n        {\n        color = vec3(c, 0.0, x);\n        }\n        else\n        {\n        color = vec3(0.0);\n        }\n\n        color += v - c;\n\n        return color;\n        }\n\n        void main(void)\n        {\n\n        vec2 position = (gl_FragCoord.xy - 0.5 * resolution) / resolution.y;\n        float x = position.x;\n        float y = position.y;\n\n        CGFloat a = atan(x, y);\n\n        CGFloat d = sqrt(x*x+y*y);\n        CGFloat d0 = 0.5*(sin(d-time)+1.5)*d;\n        CGFloat d1 = 5.0;\n\n        CGFloat u = mod(a*d1+sin(d*10.0+time), M_PI*2.0)/M_PI*0.5 - 0.5;\n        CGFloat v = mod(pow(d0*4.0, 0.75),1.0) - 0.5;\n\n        CGFloat dd = sqrt(u*u+v*v);\n\n        CGFloat aa = atan(u, v);\n\n        CGFloat uu = mod(aa*3.0+3.0*cos(dd*30.0-time), M_PI*2.0)/M_PI*0.5 - 0.5;\n\n\n        CGFloat d2 = sqrt(uu*uu+v*v)*1.5;\n\n        gl_FragColor = vec4( hsvtorgb(dd+time*0.5/d1, sin(dd*time), d2), 1.0 );\n        }\n\n\n\n\n        \";\n\n        string fragmentShader3 = @\"\n        uniform vec2 resolution;\n        uniform float time;\n\n        vec2 rand(vec2 pos)\n        {\n        return fract( 0.00005 * (pow(pos+2.0, pos.yx + 1.0) * 22222.0));\n        }\n        vec2 rand2(vec2 pos)\n        {\n        return rand(rand(pos));\n        }\n\n        float softnoise(vec2 pos, float scale)\n        {\n        vec2 smplpos = pos * scale;\n        float c0 = rand2((floor(smplpos) + vec2(0.0, 0.0)) / scale).x;\n        float c1 = rand2((floor(smplpos) + vec2(1.0, 0.0)) / scale).x;\n        float c2 = rand2((floor(smplpos) + vec2(0.0, 1.0)) / scale).x;\n        float c3 = rand2((floor(smplpos) + vec2(1.0, 1.0)) / scale).x;\n\n        vec2 a = fract(smplpos);\n        return mix(\n        mix(c0, c1, smoothstep(0.0, 1.0, a.x)),\n        mix(c2, c3, smoothstep(0.0, 1.0, a.x)),\n        smoothstep(0.0, 1.0, a.y));\n        }\n\n        void main(void)\n        {\n        vec2 pos = gl_FragCoord.xy / resolution.y;\n        pos.x += time * 0.1;\n        float color = 0.0;\n        float s = 1.0;\n        for(int i = 0; i < 8; i++)\n        {\n        color += softnoise(pos+vec2(i)*0.02, s * 4.0) / s / 2.0;\n        s *= 2.0;\n        }\n        gl_FragColor = vec4(color);\n        }\n\n\n\n        \";\n\n        string fragmentShader4 = @\"\n        uniform float time;\n        uniform vec2 resolution;\n\n        vec2 rand(vec2 pos)\n        {\n        return\n        fract(\n        (\n        pow(\n        pos+2.0,\n        pos.yx+2.0\n        )*555555.0\n        )\n        );\n        }\n\n        vec2 rand2(vec2 pos)\n        {\n        return rand(rand(pos));\n        }\n\n        float softnoise(vec2 pos, float scale) {\n        vec2 smplpos = pos * scale;\n        float c0 = rand2((floor(smplpos) + vec2(0.0, 0.0)) / scale).x;\n        float c1 = rand2((floor(smplpos) + vec2(1.0, 0.0)) / scale).x;\n        float c2 = rand2((floor(smplpos) + vec2(0.0, 1.0)) / scale).x;\n        float c3 = rand2((floor(smplpos) + vec2(1.0, 1.0)) / scale).x;\n\n        vec2 a = fract(smplpos);\n        return mix(mix(c0, c1, smoothstep(0.0, 1.0, a.x)),\n        mix(c2, c3, smoothstep(0.0, 1.0, a.x)),\n        smoothstep(0.0, 1.0, a.x));\n        }\n\n        void main( void ) {\n        vec2 pos = gl_FragCoord.xy / resolution.y - time * 0.4;\n\n        float color = 0.0;\n        float s = 1.0;\n        for (int i = 0; i < 6; ++i) {\n        color += softnoise(pos + vec2(0.01 * float(i)), s * 4.0) / s / 2.0;\n        s *= 2.0;\n        }\n        gl_FragColor = vec4(color,mix(color,cos(color),sin(color)),color,1);\n        }\n\n\n\n\n        \";\n\n        string fragmentShader5 = @\"\n        uniform float time;\n        uniform vec2 resolution;\n\n\n\n        void main( void ) {\n\n        vec3 color = vec3(1.0, 0., 0.);\n        vec2 pos = (( 1.4 * gl_FragCoord.xy - resolution.xy) / resolution.xx)*1.5;\n        float r=sqrt(pos.x*pos.x+pos.y*pos.y)/15.0;\n        float size1=2.0*cos(time/60.0);\n        float size2=2.5*sin(time/12.1);\n\n        float rot1=13.00;\n        float rot2=-50.00;\n        float t=sin(time);\n        float a = (60.0)*sin(rot1*atan(pos.x-size1*pos.y/r,pos.y+size1*pos.x/r)+time);\n        a += 200.0*acos(pos.x*2.0+cos(time/2.0))+asin(pos.y*5.0+sin(time/2.0));\n        a=a*(r/50.0);\n        a=200.0*sin(a*5.0)*(r/30.0);\n        if(a>5.0) a=a/200.0;\n        if(a<0.5) a=a*22.5;\n        gl_FragColor = vec4( cos(a/20.0),a*cos(a/200.0),sin(a/8.0), 1.0 );\n        }\n\n\n\n        \";\n\n        string fragmentShader6 = @\"\n        uniform float time;\n        uniform vec2 resolution;\n\n\n        void main( void )\n        {\n\n        vec2 uPos = ( gl_FragCoord.xy / resolution.xy );\n\n\n        uPos.x -= 1.0;\n        uPos.y -= 0.5;\n\n        vec3 color = vec3(0.0);\n        float vertColor = 2.0;\n        for( float i = 0.0; i < 15.0; ++i )\n        {\n        float t = time * (0.9);\n\n        uPos.y += sin( uPos.x*i + t+i/2.0 ) * 0.1;\n        float fTemp = abs(1.0 / uPos.y / 100.0);\n        vertColor += fTemp;\n        color += vec3( fTemp*(10.0-i)/10.0, fTemp*i/10.0, pow(fTemp,1.5)*1.5 );\n        }\n\n        vec4 color_final = vec4(color, 1.0);\n        gl_FragColor = color_final;\n        }\n\n\n\n\n        \";\n\n\n        Mesh cube;\n        float step = 0;\n        public ShaderMaterialExample() : base()\n        {\n\n        }\n        public override void InitLighting()\n        {\n            var ambientLight = new AmbientLight(THREE.Color.Hex(0x0c0c0c));\n            scene.Add(ambientLight);\n\n            var spotLight = new SpotLight(THREE.Color.Hex(0xffffff));\n            spotLight.Position.Set(-40, 60, -10);\n            spotLight.CastShadow = true;\n            scene.Add(spotLight);\n        }\n        public override void InitCamera()\n        {\n            base.InitCamera();\n            camera.Fov = 45.0f;\n            camera.Aspect = this.AspectRatio;\n            camera.Near = 0.1f;\n            camera.Far = 1000.0f;\n            camera.Position.Set(0, 20, 40);\n            camera.LookAt(new THREE.Vector3(10, 0, 0));\n        }\n        public override void Init()\n        {\n            base.Init();\n            Resolution.X = this.Width;\n            Resolution.Y = this.Height;\n\n            var cubeGeometry = new BoxGeometry(20, 20, 20);\n\n            var meshMaterial1 = CreateMaterial(vertexShaderCode, fragmentShader1);\n\n            var meshMaterial2 = CreateMaterial(vertexShaderCode, fragmentShader2);\n\n            var meshMaterial3 = CreateMaterial(vertexShaderCode, fragmentShader3);\n\n            var meshMaterial4 = CreateMaterial(vertexShaderCode, fragmentShader4);\n\n            var meshMaterial5 = CreateMaterial(vertexShaderCode, fragmentShader5);\n\n            var meshMaterial6 = CreateMaterial(vertexShaderCode, fragmentShader6);\n\n            var material = new List<Material>() { meshMaterial1, meshMaterial2, meshMaterial3, meshMaterial4, meshMaterial5, meshMaterial6 };\n\n            Material meshMaterial = new MeshBasicMaterial()\n            {\n                Color = THREE.Color.Hex(0x7777ff),\n                Name = \"Basic Material\",\n                FlatShading = true,\n                Opacity = 0.01f,\n                ColorWrite = true,\n                Fog = true\n            };\n\n            cube = new Mesh(cubeGeometry, material);\n\n            scene.Add(cube);\n\n\n        }\n\n        public override void OnResize(ResizeEventArgs clientSize)\n        {\n            base.OnResize(clientSize);\n            Resolution.X = clientSize.Width;\n            Resolution.X = clientSize.Height;\n\n        }\n        private ShaderMaterial CreateMaterial(string vertexShader, string fragmentShader)\n        {\n            GLUniforms uniforms = new GLUniforms\n                {\n                    { \"time\",       new GLUniform {{\"value\", 0.2f}}},\n                    { \"scale\",      new GLUniform {{\"value\", 0.2f}}},\n\n                    { \"alpha\",      new GLUniform {{\"value\", 0.6f}}},\n                    { \"resolution\", new GLUniform {{\"value\",Resolution}}}\n                };\n\n            var meshMaterial = new ShaderMaterial()\n            {\n                Uniforms = uniforms,\n                VertexShader = vertexShader,\n                FragmentShader = fragmentShader,\n                Transparent = true\n            };\n\n            return meshMaterial;\n        }\n\n        public override void Render()\n        {\n            if (!this.ImWantMouse)\n                controls.Enabled = true;\n            else\n                controls.Enabled = false;\n\n            controls?.Update();\n            renderer?.Render(scene, camera);\n\n            cube.Rotation.Y = step += 0.001f;\n            cube.Rotation.X = step;\n            cube.Rotation.Z = step;\n\n            cube.Materials.ForEach(m =>\n            {\n                var time = (float)((m as ShaderMaterial).Uniforms[\"time\"] as Dictionary<string,object>)[\"value\"];\n                time += 0.01f;\n                ((m as ShaderMaterial).Uniforms[\"time\"] as Dictionary<string,object>)[\"value\"] = time;\n\n            });\n        }\n    }\n}\n\n'THREE/SingleSceneSilkExample/ThreeSilkWindow.cs'\n:﻿using ImGuiNET;\nusing Silk.NET.GLFW;\nusing Silk.NET.Input;\nusing Silk.NET.Maths;\nusing Silk.NET.OpenGLES;\nusing Silk.NET.OpenGLES.Extensions.ImGui;\nusing Silk.NET.Windowing;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing MouseButton = Silk.NET.Input.MouseButton;\nusing THREE.Silk.Example;\nnamespace THREE.Silk\n{\n    public class ThreeSilkWindow\n    {\n        public IWindow window;\n        public GL gl;\n        public ImGuiController? imGuiManager;\n        public IInputContext input;\n        public IKeyboard primaryKeyboard;\n        public Example.Example currentThreeContainer;\n        private string _title;\n        public string Title\n        {\n            get { return _title; }\n            set { window.Title = value; _title = value; }\n        }\n        public ThreeSilkWindow()\n        {\n            var options = WindowOptions.Default;\n            options.Size = new Vector2D<int>(800, 600);\n            _title = \"Three Example with Silk.NET\";\n            options.Title =_title;\n            options.API = new GraphicsAPI(ContextAPI.OpenGL,ContextProfile.Compatability,ContextFlags.Default,new APIVersion(3,1));\n            window = Window.Create(options);\n\n            window.Load += OnLoad;\n            window.Render += OnRender;\n            window.FramebufferResize += OnResize;\n            window.Closing += OnClose;\n        }\n        public virtual void InitThreeSilkWindow()\n        {\n            input = window.CreateInput();\n            primaryKeyboard = input.Keyboards.FirstOrDefault();\n            if (primaryKeyboard != null)\n            {\n                primaryKeyboard.KeyDown += KeyDown;\n            }\n            for (int i = 0; i < input.Mice.Count; i++)\n            {\n\n                input.Mice[i].MouseMove += OnMouseMove;\n                input.Mice[i].Scroll += OnMouseWheel;\n                input.Mice[i].MouseDown += OnMouseDown;\n                input.Mice[i].MouseUp += OnMouseUp;\n            }\n            gl = GL.GetApi(window);\n            imGuiManager = new ImGuiController(gl, window, input);\n        }\n\n        public virtual void InitImGuiStyle()\n        {\n            ImGui.StyleColorsDark();\n            var style = ImGui.GetStyle();\n            style.Colors[(int)ImGuiCol.WindowBg].W = 0.78f;\n            style.Colors[(int)ImGuiCol.FrameBg].W = 0.71f;\n            style.Colors[(int)ImGuiCol.ChildBg].W = 0.78f;\n        }\n\n        public void SetCurrentExample(Example.Example example)\n        {\n            currentThreeContainer = example;\n        }\n\n        public virtual void OnLoad()\n        {\n            InitThreeSilkWindow();\n            InitImGuiStyle();\n\n            Vector2D<int> size;\n            size.X = window.Size.X;\n            size.Y = window.Size.Y;\n            if (currentThreeContainer != null)\n            {\n                currentThreeContainer.Load(window);\n            }\n            OnResize(size);\n        }\n\n        public virtual void OnResize(Vector2D<int> newSize)\n        {\n            if (currentThreeContainer != null)\n            {\n                gl.Viewport(0,0,(uint)newSize.X,(uint)newSize.Y);\n                currentThreeContainer.OnResize(new ResizeEventArgs(newSize));\n            }\n        }\n        public virtual void KeyDown(IKeyboard keyboard,Key key,int arg)\n        {\n            if (currentThreeContainer == null) return;\n            currentThreeContainer.OnKeyDown(key, (int)key, (KeyModifiers)arg);\n        }\n        public virtual void OnMouseMove(IMouse mouse,System.Numerics.Vector2 position)\n        {\n            if (currentThreeContainer == null) return;\n            currentThreeContainer.OnMouseMove(0, (int)position.X, (int)position.Y);\n        }\n        public virtual void OnMouseWheel(IMouse mouse,ScrollWheel scrollWheel)\n        {\n            if(currentThreeContainer == null) return;\n            currentThreeContainer.OnMouseWheel((int)mouse.Position.X, (int)mouse.Position.Y, (int)scrollWheel.Y * 120);\n        }\n        public virtual void OnMouseDown(IMouse mouse,MouseButton button)\n        {\n            if (currentThreeContainer == null) return;\n            currentThreeContainer.OnMouseDown(button,(int)mouse.Position.X,(int)mouse.Position.Y);\n        }\n        public virtual void OnMouseUp(IMouse mouse,MouseButton button)\n        {\n            if (currentThreeContainer == null) return;\n            currentThreeContainer.OnMouseUp(button,(int)mouse.Position.X, (int)mouse.Position.Y);\n        }\n        public virtual void OnClose()\n        {\n            currentThreeContainer?.Dispose();\n            imGuiManager?.Dispose();\n            input?.Dispose();\n            gl?.Dispose();\n        }\n        public virtual void OnRender(double deltaTime)\n        {\n            window.MakeCurrent();\n            imGuiManager.Update((float)deltaTime);\n            if (currentThreeContainer == null) return;\n\n            currentThreeContainer.Render();\n            if (currentThreeContainer.AddGuiControlsAction != null)\n            {\n                currentThreeContainer.AddGuiControlsAction();\n            }\n            imGuiManager.Render();\n        }\n        public virtual void Render()\n        {\n            window.Run();\n        }\n    }\n}\n\n'THREE/SilkDemo/SilkDemoWindow.cs'\n:﻿using ImGuiNET;\nusing Silk.NET.Maths;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Text;\nusing System.Threading.Tasks;\nusing THREE.Silk;\nusing THREE.Silk.Example;\nnamespace SilkDemo\n{\n    public class TreeNode<T> : IEnumerable<TreeNode<T>>\n    {\n\n        public T Data { get; set; }\n        public TreeNode<T> Parent { get; set; }\n        public ICollection<TreeNode<T>> Children { get; set; }\n\n        public bool IsRoot\n        {\n            get { return Parent == null; }\n        }\n\n        public bool IsLeaf\n        {\n            get { return Children.Count == 0; }\n        }\n\n        public int Level\n        {\n            get\n            {\n                if (this.IsRoot)\n                    return 0;\n                return Parent.Level + 1;\n            }\n        }\n\n        public object Tag { get; set; }\n\n        public TreeNode(T data)\n        {\n            this.Data = data;\n            this.Children = new LinkedList<TreeNode<T>>();\n\n            this.ElementsIndex = new LinkedList<TreeNode<T>>();\n            this.ElementsIndex.Add(this);\n        }\n\n        public TreeNode<T> AddChild(T child)\n        {\n            TreeNode<T> childNode = new TreeNode<T>(child) { Parent = this };\n            this.Children.Add(childNode);\n\n            this.RegisterChildForSearch(childNode);\n\n            return childNode;\n        }\n\n        public override string ToString()\n        {\n            return Data != null ? Data.ToString() : \"[data null]\";\n        }\n\n\n        #region searching\n\n        private ICollection<TreeNode<T>> ElementsIndex { get; set; }\n\n        private void RegisterChildForSearch(TreeNode<T> node)\n        {\n            ElementsIndex.Add(node);\n            if (Parent != null)\n                Parent.RegisterChildForSearch(node);\n        }\n\n        public TreeNode<T> FindTreeNode(Func<TreeNode<T>, bool> predicate)\n        {\n            return this.ElementsIndex.FirstOrDefault(predicate);\n        }\n\n        #endregion\n\n\n        #region iterating\n\n        IEnumerator IEnumerable.GetEnumerator()\n        {\n            return GetEnumerator();\n        }\n\n        public IEnumerator<TreeNode<T>> GetEnumerator()\n        {\n            yield return this;\n            foreach (var directChild in this.Children)\n            {\n                foreach (var anyChild in directChild)\n                    yield return anyChild;\n            }\n        }\n\n        #endregion\n    }\n    public class SilkDemoWindow : ThreeSilkWindow\n    {\n        private List<TreeNode<string>> examplesList;\n        private Dictionary<string, Example> exampleInstances = new Dictionary<string, Example>();\n        public SilkDemoWindow() : base() { }\n\n        private TreeNode<string> LoadExampleFromAssembly(Assembly assembly)\n        {\n            TreeNode<string> treeView = new TreeNode<string>(\"Root\");\n            if (assembly == null)\n                throw new ArgumentNullException(\"assembly\");\n\n            var types = assembly.GetTypes();\n            foreach (var type in types)\n            {\n                var attributes = type.GetCustomAttributes(false);\n\n                foreach (var exampleType in attributes)\n                {\n                    if (exampleType is ExampleAttribute)\n                    {\n                        var example = exampleType as ExampleAttribute;\n                        string key = example.Category.ToString();\n                        TreeNode<string> rootNode = treeView.FindTreeNode(node => node.Data != null && node.Data.Equals(key));\n                        if (rootNode == null)\n                        {\n                            rootNode = treeView.AddChild(key);\n                        }\n                        TreeNode<string> subNode = rootNode.FindTreeNode(node => node.Data != null && node.Data.Equals(example.Subcategory));\n                        if (subNode == null)\n                        {\n                            subNode = rootNode.AddChild(example.Subcategory);\n                        }\n                        TreeNode<string> nodeItem = subNode.FindTreeNode(node => node.Data != null && node.Data.Equals(example.Title));\n                        if (nodeItem == null)\n                        {\n                            nodeItem = subNode.AddChild(example.Title);\n                            nodeItem.Tag = new ExampleInfo(type, example);\n\n\n\n\n\n\n\n\n                        }\n                    }\n                }\n            }\n            return treeView;\n        }\n\n        private int SortByName(TreeNode<string> a, TreeNode<string> b)\n        {\n            return a.Data.CompareTo(b.Data);\n        }\n        private void GetExamplesList()\n        {\n            Type t = typeof(Example);\n            examplesList = LoadExampleFromAssembly(Assembly.GetAssembly(t)).Children.ToList();\n            examplesList.Sort(SortByName);\n        }\n        private string MakeExampleTitle(string exampleName)\n        {\n            if (string.IsNullOrEmpty(exampleName))\n                return \"THREE.Silk.Example\";\n            else\n                return \"THREE.Silk.Example : \" + exampleName;\n        }\n        private void ShowExamplesMenu()\n        {\n            if (ImGui.BeginMainMenuBar())\n            {\n                if (ImGui.BeginMenu(\"File\"))\n                {\n                    if (ImGui.MenuItem(\"Exit\", \"Ctrl+E\"))\n                    {\n                        System.Environment.Exit(0);\n                    }\n                    ImGui.EndMenu();\n                }\n                ImGui.EndMainMenuBar();\n            }\n            ImGui.Begin(\"Examples\");\n            for (int i = 0; i < examplesList.Count; i++)\n            {\n                TreeNode<string> category = examplesList[i];\n                if (ImGui.CollapsingHeader(category.Data))\n                {\n                    List<TreeNode<string>> subList = category.Children.ToList();\n                    subList.Sort(SortByName);\n                    for (int j = 0; j < subList.Count; j++)\n                    {\n                        TreeNode<string> subCategory = subList[j];\n                        if (ImGui.TreeNode(subCategory.Data))\n                        {\n                            List<TreeNode<string>> titleList = subCategory.Children.ToList();\n                            titleList.Sort(SortByName);\n                            for (int k = 0; k < titleList.Count; k++)\n                            {\n                                var title = titleList[k];\n                                if (ImGui.Button(title.Data))\n                                {\n                                    RunSample(title.Tag as ExampleInfo);\n                                }\n                            }\n                            ImGui.TreePop();\n                        }\n                    }\n                }\n            }\n            ImGui.End();\n        }\n        private void RunSample(ExampleInfo e)\n        {\n            if (null != currentThreeContainer)\n            {\n                currentThreeContainer.Dispose();\n                currentThreeContainer = null;\n                Title = MakeExampleTitle(\"\");\n            }\n\n\n\n            currentThreeContainer = (Example)Activator.CreateInstance(e.Example);\n            if (null != currentThreeContainer)\n            {\n                currentThreeContainer.Load(this.window);\n                currentThreeContainer.imGuiManager = imGuiManager;\n                Title = MakeExampleTitle(e.Attribute.Title);\n                Vector2D<int> size;\n                size.X = window.Size.X;\n                size.Y = window.Size.Y;\n                OnResize(size);\n            }\n        }\n        public override void OnLoad()\n        {\n            base.OnLoad();\n            currentThreeContainer = new FirstSceneExample();\n            currentThreeContainer.Load(window);\n            currentThreeContainer.imGuiManager = imGuiManager;\n            currentThreeContainer.OnResize(new ResizeEventArgs(window.Size.X,window.Size.Y));\n            GetExamplesList();\n\n        }\n        public override void OnRender(double deltaTime)\n        {\n            imGuiManager.Update((float)deltaTime);\n            if (currentThreeContainer == null) return;\n\n            ShowExamplesMenu();\n\n            currentThreeContainer.Render();\n            if (currentThreeContainer.AddGuiControlsAction != null)\n            {\n                currentThreeContainer.AddGuiControlsAction();\n            }\n            imGuiManager.Render();\n        }\n    }\n\n\n}\n",
        "gt": [
            "'THREE/THREE/Materials/MeshLambertMaterial.cs'",
            "'THREE/ThreeSilkExample/LearningThreeJs/Chapter04/ShaderMaterialExample.cs'",
            "'THREE/SingleSceneSilkExample/ThreeSilkWindow.cs'",
            "'THREE/ThreeSilkExample/LearningThreeJs/Chapter02/ForcedMaterialsExample.cs'",
            "'THREE/SilkDemo/SilkDemoWindow.cs'"
        ]
    },
    {
        "files": [
            "'WolvenKit-7/WolvenKit/Forms/frmJournalEditor.cs'",
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAIMonsterIdleParams.cs'",
            "'WolvenKit-7/CR2WTests/frmUnitTest.cs'"
        ],
        "content": "'WolvenKit-7/WolvenKit/Forms/frmJournalEditor.cs'\n:using System;\nusing System.IO;\nusing System.Linq;\nusing System.Windows.Forms;\nusing WeifenLuo.WinFormsUI.Docking;\nusing WolvenKit.App;\nusing WolvenKit.App.Model;\nusing WolvenKit.Cache;\nusing WolvenKit.CR2W;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit\n{\n    public partial class frmJournalEditor : DockContent\n    {\n        private CR2WFile file;\n\n        private TreeView QuestView;\n\n        public string descriptiontext;\n\n        public frmJournalEditor()\n        {\n            InitializeComponent();\n        }\n\n        public CR2WFile File\n        {\n            get { return file; }\n            set\n            {\n                file = value;\n                ParseJournal();\n                RenderDescription(descriptiontext);\n            }\n        }\n\n        public void ParseJournal()\n        {\n            var basenode = File.chunks[0];\n            CJournalResource journalResource = basenode.data as CJournalResource;\n\n            if (File != null && File.chunks.Count > 0)\n            {\n                switch (basenode.REDType)\n                {\n                    case \"CJournalResource\":\n\n                        ParseJournalType(journalResource.Entry);\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n        }\n\n        public void ParseImageAndPreview(CJournalCreature creature)\n        {\n            var image = creature.Image.REDValue;\n            if (!string.IsNullOrEmpty(image))\n            {\n                try\n                {\n                    var files = MainController.ImportFile(image, MainController.Get().TextureManager);\n                    entityImage.Image = ImageUtility.FromBytes(files[0]);\n                    entimgbox.Image = ImageUtility.FromBytes(files[1]);\n                }\n                catch\n                {\n\n                }\n            }\n        }\n\n        public void ParseImageAndPreview(CJournalCharacter character)\n        {\n            var image = character.Image.REDValue;\n            if (!string.IsNullOrEmpty(image))\n            {\n                try\n                {\n                    var files = MainController.ImportFile(image, MainController.Get().TextureManager);\n                    entityImage.Image = ImageUtility.FromBytes(files[0]);\n                    entimgbox.Image = ImageUtility.FromBytes(files[1]);\n                }\n                catch\n                {\n\n                }\n            }\n        }\n\n        public void ParseJournalType(CPtr<CJournalBase> pointer)\n        {\n            CR2WExportWrapper typenode = pointer.Reference;\n            CVariable target = typenode.data;\n\n            if (target is CJournalCreature creature)\n            {\n                vulnerable_treview.Show();\n                var name = creature.BaseName;\n                this.Text = $@\"Creature editor [{name}]\";\n                descriptiontext += (name + \"<br>\");\n                ParseUsedAgainst(creature.ItemsUsedAgainstCreature);\n                ParseImageAndPreview(creature);\n                ParseCJournalCreatureChildren(creature.Children);\n            }\n            else if (target is CJournalCharacter character)\n            {\n                var name = character.BaseName;\n                ParseImageAndPreview(character);\n                this.Text = $@\"Character editor [{name}]\";\n                descriptiontext += (name + \"<br>\");\n                vulnerable_treview.Hide();\n                ParseChildDescription(character.Children);\n            }\n            else if (target is CJournalGlossary)\n            {\n                var name = (target as CJournalGlossary).BaseName;\n                this.Text = $@\"Glossary editor [{name}]\";\n                descriptiontext += (name + \"<br>\");\n                vulnerable_treview.Hide();\n                ParseChildDescription((target as CJournalGlossary).Children);\n            }\n            else if (target is CJournalTutorial)\n            {\n                var name = (target as CJournalTutorial).BaseName;\n                descriptiontext += (target as CJournalTutorial).Description.ToString();\n                vulnerable_treview.Hide();\n                entityImage.Hide();\n                this.Text = $@\"Tutorial editor [{name}]\";\n            }\n            else if (target is CJournalStoryBookChapter)\n            {\n                var name = (target as CJournalStoryBookChapter).BaseName;\n                vulnerable_treview.Hide();\n                entityImage.Hide();\n                this.Text = $@\"Story book editor [{name}]\";\n            }\n            else if (target is CJournalStoryBookPage)\n            {\n                var name = (target as CJournalStoryBookPage).BaseName;\n                descriptiontext += \"<h3>\" + (target as CJournalStoryBookPage).Title + \"</h3>\";\n                ParseChildDescription((target as CJournalStoryBookPage).Children);\n                vulnerable_treview.Hide();\n                entityImage.Hide();\n                this.Text = $@\"Story book editor [{name}]\";\n            }\n            else if (target is CJournalQuest)\n            {\n                textRender.Hide();\n                vulnerable_treview.Hide();\n                QuestView = new TreeView();\n                splitContainer1.Panel2.Controls.Add(QuestView);\n                QuestView.Dock = DockStyle.Fill;\n                var name = (target as CJournalQuest).Title + \" \" + (target as CJournalQuest).Type;\n                this.Text = $@\"Quest editor [{name}]\";\n                ParseCJournalQuestChild((target as CJournalQuest).Children);\n            }\n            else\n            {\n                vulnerable_treview.Hide();\n                var name = (target as CJournalBase).BaseName;\n                this.Text = $@\"{typenode.REDType} editor [{name}]\";\n            }\n        }\n\n\n        #region CJournalCreature\n        public void ParseUsedAgainst<T>(CArray<T> infos) where T : CVariable\n        {\n            foreach (var info in infos.Elements)\n            {\n                vulnerable_treview.Nodes.Add(info.ToString());\n            }\n        }\n\n        public void ParseCJournalCreatureChildren(CArray<CPtr<CJournalContainerEntry>> childs)\n        {\n            foreach (CPtr<CJournalContainerEntry> child in childs.Elements)\n            {\n                if (child.Reference.data is CJournalCreatureDescriptionGroup)\n                {\n                    ParseCJournalCreatureDescriptionGroupChildren((child.Reference.data as CJournalCreatureDescriptionGroup).Children);\n                }\n            }\n        }\n\n        public void ParseCJournalCreatureDescriptionGroupChildren(CArray<CPtr<CJournalContainerEntry>> childs)\n        {\n            foreach (CPtr<CJournalContainerEntry> child in childs.Elements)\n            {\n\n                if (child.Reference.data is CJournalCreatureDescriptionEntry)\n                {\n                    descriptiontext += (\"\\n\\n\" + (child.Reference.data as CJournalCreatureDescriptionEntry).Description.ToString() + \"\\n\");\n                }\n            }\n        }\n        #endregion\n\n        #region Common\n\n        public void ParseChildDescription(CArray<CPtr<CJournalContainerEntry>> childs)\n        {\n            foreach (var child in childs.Elements)\n            {\n                switch (child.Reference.REDType)\n                {\n                    case \"CJournalGlossaryDescription\":\n                        {\n                            descriptiontext += (child.Reference.data as CJournalGlossaryDescription).Description + \"<br>\";\n                            break;\n                        }\n                    case \"CJournalCharacterDescription\":\n                        {\n                            descriptiontext += (child.Reference.data as CJournalCharacterDescription).Description + \"<br>\";\n                            break;\n                        }\n                    case \"CJournalStoryBookPageDescription\":\n                        {\n                            descriptiontext += (child.Reference.data as CJournalStoryBookPageDescription).Description + \"<br>\";\n                            break;\n                        }\n                }\n            }\n        }\n        #endregion\n\n        #region CJournalQuest\n\n        public void ParseCJournalQuestChild(CArray<CPtr<CJournalContainerEntry>> childs)\n        {\n            foreach (var child in childs.Elements)\n            {\n                switch (child.Reference.REDType)\n                {\n                    case \"CJournalQuestDescriptionGroup\":\n                        {\n                            ParseCJournalQuestDescriptionGroupChild((child.Reference.data as CJournalQuestDescriptionGroup).Children);\n                            break;\n                        }\n                    case \"CJournalQuestPhase\":\n                        {\n                            ParseCJournalQuestPhaseChild((child.Reference.data as CJournalQuestPhase).Children);\n                            break;\n                        }\n                }\n            }\n        }\n\n        public void ParseCJournalQuestDescriptionGroupChild<T>(CArray<CPtr<T>> childs) where T : CVariable\n        {\n            foreach (var child in childs.Elements)\n            {\n                switch (child.Reference.REDType)\n                {\n                    case \"CJournalQuestDescriptionEntry\":\n                        {\n                            var questnode = new TreeNode((child.Reference.data as CJournalQuestDescriptionEntry).BaseName.ToString());\n                            questnode.Nodes.Add(new TreeNode((child.Reference.data as CJournalQuestDescriptionEntry).Description.ToString()));\n\n                            break;\n                        }\n                }\n            }\n        }\n\n        public void ParseCJournalQuestPhaseChild<T>(CArray<CPtr<T>> childs) where T : CVariable\n        {\n            foreach (var child in childs.Elements)\n            {\n                switch (child.Reference.REDType)\n                {\n                    case \"CJournalQuestObjective\":\n                        {\n                            var questnode = new TreeNode((child.Reference.data as CJournalQuestObjective).BaseName.ToString());\n                            questnode.Nodes.Add(new TreeNode((child.Reference.data as CJournalQuestObjective).Title.ToString()));\n                            if ((child.Reference.data as CJournalQuestObjective).Children != null)\n                            {\n                                if ((child.Reference.data as CJournalQuestObjective).Children.Elements.Count > 0)\n                                {\n                                    var detailnode = ParseCJournalQuestObjectiveChild((child.Reference.data as CJournalQuestObjective).Children);\n                                    if (detailnode.Nodes.Count != 0)\n                                    {\n                                        questnode.Nodes.Add(detailnode);\n                                    }\n                                }\n                            }\n                            QuestView.Nodes.Add(questnode);\n                            break;\n                        }\n                }\n            }\n        }\n\n        public TreeNode ParseCJournalQuestObjectiveChild<T>(CArray<CPtr<T>> childs) where T : CVariable\n        {\n            var result = new TreeNode(\"Details\");\n            foreach (var child in childs.Elements)\n            {\n                switch (child.Reference.REDType)\n                {\n                    case \"CJournalQuestMapPin\":\n                        var pin = child as CJournalQuestMapPin;\n                        if (pin != null)\n                        {\n                            var pinnode = new TreeNode(\"Map pin\");\n                            pinnode.Nodes.Add(new TreeNode(\"Name: \" + pin.MapPinID));\n                            pinnode.Nodes.Add(new TreeNode(\"Radius: \" + pin.Radius));\n                            result.Nodes.Add(pinnode);\n                            break;\n                        }\n                        break;\n                }\n            }\n            return result;\n        }\n        #endregion\n\n        public void RenderDescription(string text)\n        {\n            var webBrowser = new WebBrowser();\n            webBrowser.CreateControl();\n            webBrowser.DocumentText = ($\"<html><body>{text}</body></html>\");\n            Application.DoEvents();\n            webBrowser.Document.ExecCommand(\"SelectAll\", false, null);\n            webBrowser.Document.ExecCommand(\"Copy\", false, null);\n            textRender.Paste();\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAIMonsterIdleParams.cs'\n:using System.IO;\nusing System.Runtime.Serialization;\nusing WolvenKit.CR2W.Reflection;\nusing FastMember;\nusing static WolvenKit.CR2W.Types.Enums;\n\n\nnamespace WolvenKit.CR2W.Types\n{\n\t[DataContract(Namespace = \"\")]\n\t[REDMeta]\n\tpublic class CAIMonsterIdleParams : CAIIdleParameters\n\t{\n\t\tpublic CAIMonsterIdleParams(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name){ }\n\n\t\tpublic static new CVariable Create(CR2WFile cr2w, CVariable parent, string name) => new CAIMonsterIdleParams(cr2w, parent, name);\n\n\t\tpublic override void Read(BinaryReader file, uint size) => base.Read(file, size);\n\n\t\tpublic override void Write(BinaryWriter file) => base.Write(file);\n\n\t}\n}\n'WolvenKit-7/CR2WTests/frmUnitTest.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing WolvenKit;\nusing System.IO.MemoryMappedFiles;\nusing System.IO;\nusing WolvenKit.CR2W;\nusing WolvenKit.Bundles;\nusing WolvenKit.Common;\nusing System.Diagnostics;\nusing System.Security.Cryptography;\nusing WolvenKit.Common.Extensions;\nusing System.Collections.Concurrent;\nusing System.Threading;\n\nnamespace CR2WTests\n{\n    public partial class frmUnitTest : Form\n    {\n        private Tuple<long, int> res;\n\n        private string ext;\n        private string bundletag;\n        private BundleManager bm;\n\n        public frmUnitTest(string _ext, string _bundletag, BundleManager _mc)\n        {\n            InitializeComponent();\n\n            ext = _ext;\n            bundletag = _bundletag;\n            bm = _mc;\n\n\n            Setup();\n\n            Task.Run(() => Run());\n\n            this.Text = ext;\n        }\n\n        private void UpdateRichTextBox1(string val)\n        {\n            if (this.richTextBox1.InvokeRequired)\n            {\n                this.richTextBox1.BeginInvoke((MethodInvoker)delegate () { this.richTextBox1.AppendText(val);});\n            }\n            else\n            {\n                this.richTextBox1.AppendText(val);\n            }\n        }\n        private void UpdateRichTextBox2(string val)\n        {\n            if (this.richTextBox2.InvokeRequired)\n            {\n                this.richTextBox2.BeginInvoke((MethodInvoker)delegate () { this.richTextBox2.AppendText(val); });\n            }\n            else\n            {\n                this.richTextBox2.AppendText(val);\n            }\n        }\n        private void UpdateProgress()\n        {\n            if (this.progressBar1.InvokeRequired)\n            {\n                this.progressBar1.BeginInvoke((MethodInvoker)delegate () { this.progressBar1.PerformStep(); });\n            }\n            else\n            {\n                this.progressBar1.PerformStep();\n            }\n        }\n        private void UpdateMaxProgress(int val)\n        {\n            if (this.progressBar1.InvokeRequired)\n            {\n                this.progressBar1.BeginInvoke((MethodInvoker)delegate () { this.progressBar1.Maximum = val; });\n            }\n            else\n            {\n                this.progressBar1.Maximum = val;\n            }\n        }\n\n        private void Setup()\n        {\n            progressBar1.Minimum = 1;\n            progressBar1.Value = 1;\n            progressBar1.Step = 1;\n        }\n\n        public async Task<Tuple<long, int>> Run()\n        {\n            await Task.Run(() => StressTestExt()).ContinueWith(\n                antecedent =>\n                {\n                    res = antecedent.Result;\n                    Thread.Sleep(1000);\n                    try\n                    {\n                        this.Close();\n                    }\n                    catch\n                    {\n\n                    }\n                    return antecedent.Result;\n\n                }\n                );\n            return null;\n        }\n\n        public Tuple<long, int> StressTestExt()\n        {\n            long unknownbytes = 0;\n            long totalbytes = 0;\n            ConcurrentDictionary<string, string> unknownclasses = new ConcurrentDictionary<string, string>();\n            long filecount = 0;\n\n            Dictionary<string, Tuple<long, long>> chunkstate = new Dictionary<string, Tuple<long, long>>();\n            ConcurrentBag<string> unparsedfiles = new ConcurrentBag<string>();\n            var processedfiles = new ConcurrentBag<string>();\n\n            List<IWitcherFile> files = bm.Items\n                .SelectMany(_ => _.Value)\n                .Where(x => x.Name.EndsWith(ext))\n                .ToList();\n\n            filecount = files.Count;\n\n\n            UpdateMaxProgress(files.Count);\n\n            Parallel.For (0, files.Count, new ParallelOptions { MaxDegreeOfParallelism = 8 }, i =>\n            {\n                IWitcherFile f = (IWitcherFile)files[i];\n\n                if (f is BundleItem bi )\n                {\n\n                    UpdateRichTextBox1($\"{i + 1}/{files.Count}: {f.Name}\\r\\n\");\n                    UpdateProgress();\n                    try\n                    {\n                        var fileresult = StressTestFile(bi, ref unknownclasses, ref totalbytes, ref unknownbytes, ref chunkstate);\n                        processedfiles.Add(f.Name);\n                    }\n                    catch (Exception ex)\n                    {\n                        unparsedfiles.Add(f.Name);\n\n                        Console.WriteLine($\"{f.Name}:{ex.Message}\");\n                        UpdateRichTextBox2($\"{f.Name}:{ex.Message}\\r\\n\");\n                    }\n                }\n            });\n\n            Console.WriteLine($\"{ext} test completed...\");\n            Console.WriteLine(\"Results:\");\n            Console.WriteLine($\"\\t- Parsed {filecount} {ext} files\");\n            Console.WriteLine($\"\\t- Parsing percentage => {((double)totalbytes - (double)unknownbytes) / (double)totalbytes:0.00%}\" +\n                $\" | Couldn't parse: {unparsedfiles.Count} files!\");\n            Console.WriteLine($\"Classes: \");\n            UpdateRichTextBox2($\"{ext} test completed...\\r\\n\");\n            UpdateRichTextBox2(\"Results:\\r\\n\");\n            UpdateRichTextBox2($\"\\t- Parsed {filecount} {ext} files\\r\\n\");\n            UpdateRichTextBox2($\"\\t- Parsing percentage => {((double)totalbytes - (double)unknownbytes) / (double)totalbytes:0.00%}\\r\\n\" +\n                $\" | Couldn't parse: {unparsedfiles.Count} files!\\r\\n\");\n            UpdateRichTextBox2($\"Classes: \\r\\n\");\n\n            foreach (var c in chunkstate)\n            {\n                var percentage = (((double)c.Value.Item1 - (double)c.Value.Item2) / (double)c.Value.Item1);\n                if (percentage != (double)1)\n                {\n                    Console.WriteLine($\"\\t- {c.Key} {percentage:0.00%}\");\n                    UpdateRichTextBox2($\"\\t- {c.Key} {percentage:0.00%}\\r\\n\");\n                }\n            }\n\n            Console.WriteLine(\"Files errored during parsing:\");\n            UpdateRichTextBox2(\"Files errored during parsing:\\r\\n\");\n            foreach (var f in unparsedfiles)\n            {\n                Console.WriteLine($\"\\t-{f}\");\n                UpdateRichTextBox2($\"\\t-{f}\\r\\n\");\n            }\n\n            Console.WriteLine(\"Types unparsed:\");\n            UpdateRichTextBox2(\"Types unparsed:\\r\\n\");\n            foreach (var f in unknownclasses)\n            {\n                Console.WriteLine($\"\\t-{f}\");\n                UpdateRichTextBox2($\"\\t-{f}\\r\\n\");\n            }\n\n            return new Tuple<long, int>(unknownbytes, unparsedfiles.Count);\n        }\n\n        private static int StressTestFile(BundleItem f, ref ConcurrentDictionary<string, string> unknownclasses, ref long totalbytes, ref long unknownbytes, ref Dictionary<string, Tuple<long, long>> chunkstate)\n        {\n            var crw = new CR2WFile();\n\n            using (var ms = new MemoryStream())\n            using (var br = new BinaryReader(ms))\n            {\n                f.ExtractExistingMMF(ms);\n                ms.Seek(0, SeekOrigin.Begin);\n\n                #region Reading Test A\n\n                crw.Read(br);\n                #endregion\n\n                #region StringTableTest A.1\n\n                (var dict, var strings, var nameslist, var importslist) = crw.GenerateStringtable();\n                var newdictvalues = dict.Values.ToList();\n                var dictvalues = crw.StringDictionary.Values.ToList();\n                var diffDictList = dictvalues.Except(newdictvalues).ToList();\n\n                bool isclassicalinconsistentw2anims = false;\n                bool isclassicalinconsistentw2phase = false;\n\n                if (diffDictList.Count != 0)\n                {\n\n                    foreach (string str in diffDictList)\n                    {\n                        if (str == \"extAnimEvents\" ||\n                            str == \"array:2,0,handle:CExtAnimEventsFile\" ||\n                            str == \"CExtAnimEventsFile\" ||\n                            str.Contains(\"sounds\\\\\") ||\n                            str.Contains(\"sound\\\\\"))\n                        {\n                            isclassicalinconsistentw2anims = true;\n                            break;\n                        }\n                        else\n                        {\n                            continue;\n                        }\n                    }\n\n                    foreach (string str in diffDictList)\n                    {\n                        if (str == \"@SItem\" ||\n                            str == \"SItem\" ||\n                            str == \"#CEnvironmentDefinition\" ||\n                            str == \"CEnvironmentDefinition\")\n                        {\n                            isclassicalinconsistentw2phase = true;\n                            break;\n                        }\n                        else\n                        {\n                            continue;\n                        }\n                    }\n\n                    if (isclassicalinconsistentw2anims)\n                    {\n\n\n                    }\n                    else if (isclassicalinconsistentw2phase)\n                    {\n\n\n\n\n                    }\n                    else\n                    {\n                        throw new InvalidBundleException(\" Generated dictionary not equal actual dictionary.\");\n                    }\n                }\n                #endregion\n\n                #region Writing Test B\n                if (isclassicalinconsistentw2phase || isclassicalinconsistentw2anims)\n                {\n\n\n                }\n                else\n                {\n                    byte[] buffer_testB;\n                    byte[] buffer_testB_original;\n\n                    using (var ms_testB = new MemoryStream())\n                    using (var bw_testB = new BinaryWriter(ms_testB))\n                    {\n                        crw.Write(bw_testB);\n                        buffer_testB = ms_testB.ToArray();\n                    }\n\n\n                    ms.Seek(0, SeekOrigin.Begin);\n                    buffer_testB_original = ms.ToArray();\n\n                    if (!Enumerable.SequenceEqual(buffer_testB_original, buffer_testB))\n                    {\n                        throw new InvalidBundleException(\" Generated cr2w file not equal to original file.\");\n                    }\n                }\n                #endregion\n\n            }\n            foreach (var ut in crw.UnknownTypes)\n            {\n                unknownclasses.TryAdd(ut,ut);\n            }\n            foreach (var c in crw.chunks)\n            {\n                var ubsl = c.unknownBytes?.Bytes != null ? c.unknownBytes.Bytes.Length : 0;\n\n                lock (chunkstate)\n                {\n                    if (!chunkstate.ContainsKey(c.REDType))\n                    {\n                        chunkstate.Add(c.REDType, new Tuple<long, long>(0, 0));\n                    }\n                    var already = chunkstate[c.REDType];\n                    chunkstate[c.REDType] = new Tuple<long, long>(\n                            already.Item1 + c.Export.dataSize,\n                            already.Item2 + ubsl\n                        );\n                }\n\n                Interlocked.Add(ref totalbytes, c.Export.dataSize);\n                Interlocked.Add(ref unknownbytes, ubsl);\n            }\n            return 0;\n        }\n\n        internal Tuple<long, int> GetResult()\n        {\n\n            return res;\n        }\n\n#pragma warning disable CS1998\n        private async void frmUnitTest_Shown(object sender, EventArgs e)\n#pragma warning restore CS1998\n        {\n\n        }\n    }\n}\n",
        "gt": [
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAIMonsterIdleParams.cs'",
            "'WolvenKit-7/WolvenKit/Forms/frmJournalEditor.cs'",
            "'WolvenKit-7/CR2WTests/frmUnitTest.cs'"
        ]
    },
    {
        "files": [
            "'event_horizon/Starship/Assets/script/Game/Skills/Experience.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/Combat/ShipList.cs'",
            "'event_horizon/Starship/Assets/script/GUI/ViewModel/Common/PlayerExperienceItem.cs'",
            "'event_horizon/Starship/Assets/Scripts/GameStateMachine/States/CombatRewardState.cs'",
            "'event_horizon/Starship/Assets/Scripts/Domain/Galaxy/StarContent/StarBase.cs'",
            "'event_horizon/Starship/Assets/Scripts/Installers/GameInstaller.cs'"
        ],
        "content": "'event_horizon/Starship/Assets/script/Game/Skills/Experience.cs'\n:﻿using System;\n\nnamespace GameModel.Skills\n{\n    public struct Experience\n    {\n        public Experience(long value)\n        {\n            if (value < 0)\n                value = 0;\n            else if (value > MaxExperience)\n                value = MaxExperience;\n\n            _value = value;\n        }\n\n        public int Level\n        {\n            get\n            {\n                var exp = Value;\n                var level = (int)Math.Sqrt(exp/100);\n                return level;\n            }\n        }\n\n        public static long ConvertCombatExperience(long experience, int currentLevel)\n        {\n            return experience > 0 ? 50 + experience/(25 + currentLevel) : 0;\n        }\n\n        public long ExpFromLastLevel { get { return Value - LevelToExp(Level); } }\n\n        public long NextLevelCost\n        {\n            get\n            {\n                var level = Level;\n                return LevelToExp(level + 1) - LevelToExp(level);\n            }\n        }\n\n        public static Experience FromLevel(int level)\n        {\n            return new Experience(LevelToExp(level));\n        }\n\n        public static implicit operator Experience(long value)\n        {\n            return new Experience(value);\n        }\n\n        public static implicit operator long(Experience data)\n        {\n            return data.Value;\n        }\n\n        public override string ToString()\n        {\n            return Value.ToString();\n        }\n\n        private long Value { get { return _value; } }\n\n        private static long LevelToExp(int level) { return 100L * level * level; }\n\n        private readonly ObscuredLong _value;\n\n        public static long MaxExperience = int.MaxValue;\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Gui/Combat/ShipList.cs'\n:﻿using System.Collections.Generic;\nusing System.Linq;\nusing Combat.Component.Ship;\nusing Combat.Domain;\nusing Services.Localization;\nusing Services.Reources;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing ViewModel;\nusing Zenject;\n\nnamespace Gui.Combat\n{\n    public class ShipList : MonoBehaviour\n    {\n        [Inject] private readonly ILocalization _localization;\n        [Inject] private readonly IResourceLocator _resourceLocator;\n\n        [SerializeField] private ScrollRect ShipsArea;\n        [SerializeField] private CanvasGroup CanvasGroup;\n        [SerializeField] private Text ShipNameText;\n\n        public IShipInfo SelectedShip { get { return _selectedIndex >= 0 ? _fleet.Ships[_selectedIndex] : null; } }\n        public int SelectedShipIndex { get { return _selectedIndex; } set { _targetIndex = value; UpdateSelection(); } }\n\n        public void Initialize(IFleetModel fleet, int activeShipIndex)\n        {\n            _fleet = fleet;\n            _targetIndex = activeShipIndex;\n\n            IEnumerator<IShipInfo> enumerator;\n            if (fleet.Ships.Count <= MaxShipCount)\n            {\n                enumerator = fleet.Ships.Take(MaxShipCount).GetEnumerator();\n            }\n            else\n            {\n                _firstShipIndex = Mathf.Max(_targetIndex - MaxShipCount / 2, 0);\n                enumerator = fleet.Ships.Skip(_firstShipIndex).Take(MaxShipCount).GetEnumerator();\n            }\n\n            RectTransform item = null;\n            foreach (Transform transform in ShipsArea.content)\n            {\n                item = transform.GetComponent<RectTransform>();\n                if (enumerator.MoveNext())\n                    UpdateShipItem(item, enumerator.Current);\n                else\n                    item.gameObject.SetActive(false);\n            }\n\n            while (enumerator.MoveNext())\n            {\n                var newItem = (RectTransform)Instantiate(item);\n                newItem.SetParent(item.parent);\n                newItem.localScale = Vector3.one;\n                UpdateShipItem(newItem, enumerator.Current);\n            }\n\n            UpdateSelection();\n        }\n\n        public void OnContentMoved(Vector2 position)\n        {\n            UpdateSelection();\n        }\n\n        private void UpdateSelection()\n        {\n            var areaWidth = ShipsArea.GetComponent<RectTransform>().rect.width;\n            var currentPosition = ShipsArea.horizontalNormalizedPosition * (ShipsArea.content.rect.width - areaWidth) + areaWidth / 2;\n\n            if (_targetIndex >= 0)\n            {\n                var item = ShipsArea.content.GetChild(_targetIndex - _firstShipIndex).GetComponent<RectTransform>();\n                _selectedIndex = _targetIndex;\n                _selectedDistance = currentPosition - item.anchoredPosition.x;\n\n                if (Mathf.Abs(_selectedDistance) < areaWidth * 0.01f)\n                    _targetIndex = -1;\n\n                if (ShipNameText != null)\n                    ShipNameText.text = _localization.GetString(_fleet.Ships[_selectedIndex].ShipData.Name);\n            }\n            else\n            {\n                var deltaMin = float.MaxValue;\n                int index = _firstShipIndex;\n                _selectedIndex = -1;\n                foreach (RectTransform item in ShipsArea.content)\n                {\n                    if (!item.gameObject.activeSelf)\n                        continue;\n\n                    var delta = currentPosition - item.anchoredPosition.x;\n                    if (Mathf.Abs(delta) < Mathf.Abs(deltaMin) && _fleet.Ships[index].Status != ShipStatus.Destroyed)\n                    {\n                        deltaMin = delta;\n                        _selectedIndex = index;\n                    }\n                    index++;\n                }\n                _selectedDistance = deltaMin;\n            }\n\n            if (ShipNameText != null && _selectedIndex >= 0)\n                ShipNameText.text = _localization.GetString(_fleet.Ships[_selectedIndex].ShipData.Name);\n        }\n\n        private void UpdateShipItem(RectTransform item, IShipInfo ship)\n        {\n            item.gameObject.SetActive(true);\n            item.localScale = Vector3.one;\n            var viewModel = item.GetComponent<SelectShipPanelItemViewModel>();\n\n            viewModel.Icon.sprite = _resourceLocator.GetSprite(ship.ShipData.Model.ModelImage);\n            viewModel.Icon.color = ship.ShipData.ColorScheme.HsvColor;\n            viewModel.DisabledIcon.gameObject.SetActive(ship.Status == ShipStatus.Destroyed);\n            viewModel.ConditionText.gameObject.SetActive(ship.Condition > 0 && ship.Condition < 1);\n            viewModel.ConditionText.text = Mathf.FloorToInt(ship.Condition * 100) + \"%\";\n            viewModel.SetClass(ship.ShipData.ExtraThreatLevel);\n            viewModel.SetLevel(ship.ShipData.Experience.Level);\n        }\n\n        private void Update()\n        {\n            var delta = _selectedDistance * 5;\n            var x = Mathf.Lerp(ShipsArea.velocity.x, delta, 0.1f);\n            ShipsArea.velocity = Mathf.Abs(x) > 1 ? new Vector2(x, 0) : Vector2.zero;\n        }\n\n        private int _targetIndex = -1;\n        private float _selectedDistance;\n        private int _selectedIndex;\n        private int _firstShipIndex;\n        private IFleetModel _fleet;\n        private const int MaxShipCount = 24;\n    }\n}\n\n'event_horizon/Starship/Assets/script/GUI/ViewModel/Common/PlayerExperienceItem.cs'\n:﻿using System.Linq;\nusing System.Collections.Generic;\nusing GameModel;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing GameModel.Quests;\nusing GameModel.Skills;\nusing GameServices.Player;\nusing ViewModel.Quests;\nusing Zenject;\nusing Services.Localization;\n\nnamespace ViewModel\n{\n    namespace Common\n    {\n        public class PlayerExperienceItem : MonoBehaviour, IItemDescription\n        {\n            [Inject] private readonly ILocalization _localization;\n            [Inject] private readonly PlayerSkills _playerSkills;\n\n            [SerializeField] Text ExperienceText;\n            [SerializeField] GameObject RankPanel;\n            [SerializeField] Text RankText;\n\n            public string Name { get; private set; }\n            public Color Color { get { return ColorTable.DefaultTextColor; } }\n\n            public void Initialize(ExperienceData data)\n            {\n                var before = (long)data.ExperienceBefore;\n                var after = Mathf.Min(data.ExperienceAfter, Experience.MaxExperience);\n\n                if (after <= before)\n                {\n                    gameObject.SetActive(false);\n                    return;\n                }\n\n                gameObject.SetActive(true);\n\n                Name = _localization.GetString(\"$PlayerExperience\", after - before);\n                ExperienceText.text = \"+\" + (after - before);\n\n                var rank = ((Experience)after).Level - ((Experience)before).Level;\n                RankPanel.gameObject.SetActive(rank > 0);\n                if (rank > 0)\n                    RankText.text = \"+\" + rank;\n            }\n        }\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/GameStateMachine/States/CombatRewardState.cs'\n:﻿using GameModel.Quests;\nusing GameServices.LevelManager;\nusing Gui.Combat;\nusing Services.Gui;\nusing Zenject;\n\nnamespace GameStateMachine.States\n{\n    public class CombatRewardState : BaseState\n    {\n        [Inject]\n        public CombatRewardState(\n            IStateMachine stateMachine,\n            GameStateFactory stateFactory,\n            ILevelLoader levelLoader,\n            IGuiManager guiManager,\n            IReward reward)\n            : base(stateMachine, stateFactory, levelLoader)\n        {\n            _guiManager = guiManager;\n            _reward = reward;\n        }\n\n        public override StateType Type\n        {\n            get { return StateType.Combat; }\n        }\n\n        protected override void OnActivate()\n        {\n            _guiManager.OpenWindow(WindowNames.CombatRewardWindow, new WindowArgs(_reward), OnWindowClosed);\n        }\n\n        private void OnWindowClosed(WindowExitCode exitCode)\n        {\n            StateMachine.UnloadActiveState();\n        }\n\n        protected override LevelName RequiredLevel { get { return LevelName.Combat; } }\n\n        private readonly IReward _reward;\n        private readonly IGuiManager _guiManager;\n\n        public class Factory : Factory<IReward, CombatRewardState> { }\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Domain/Galaxy/StarContent/StarBase.cs'\n:﻿using System.Linq;\nusing Combat.Component.Unit.Classification;\nusing Combat.Domain;\nusing Economy.ItemType;\nusing Economy.Products;\nusing GameDatabase;\nusing GameModel;\nusing GameServices.Economy;\nusing GameServices.Player;\nusing GameStateMachine.States;\nusing Model.Factories;\nusing Services.Messenger;\nusing Session;\nusing UnityEngine;\nusing Zenject;\n\nnamespace Galaxy.StarContent\n{\n    public class StarBase\n    {\n        [Inject] private readonly PlayerFleet _playerFleet;\n        [Inject] private readonly StarData _starData;\n        [Inject] private readonly StarContentChangedSignal.Trigger _starContentChangedTrigger;\n        [Inject] private readonly StartBattleSignal.Trigger _startBattleTrigger;\n        [Inject] private readonly ItemTypeFactory _itemTypeFactory;\n        [Inject] private readonly IDatabase _database;\n        [Inject] private readonly CombatModelBuilder.Factory _combatModelBuilderFactory;\n        [Inject] private readonly LootGenerator _lootGenerator;\n        [Inject] private readonly ISessionData _session;\n\n        public void Attack(int starId)\n        {\n            if (!_starData.HasStarBase(starId))\n                throw new System.InvalidOperationException();\n\n            var region = _starData.GetRegion(starId);\n            if (region.IsCaptured)\n                throw new System.InvalidOperationException();\n\n            var playerFleet = new Model.Military.PlayerFleet(_database, _playerFleet);\n            var defenderFleet = Fleet.Capital(region, _database);\n\n            var builder = _combatModelBuilderFactory.Create();\n            builder.PlayerFleet = playerFleet;\n            builder.EnemyFleet = defenderFleet;\n            builder.Rules = CombatRules.Capital(region);\n            builder.AddSpecialReward(_lootGenerator.GetStarBaseSpecialReward(region));\n\n            _session.Quests.SetFactionRelations(starId, -100);\n            _startBattleTrigger.Fire(builder.Build(), result => OnCombatCompleted(starId, result));\n        }\n\n        private void OnCombatCompleted(int starId, ICombatModel result)\n        {\n            if (result.GetWinner() != UnitSide.Player)\n                return;\n\n            _starData.GetRegion(starId).IsCaptured = true;\n            _starContentChangedTrigger.Fire(starId);\n        }\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Installers/GameInstaller.cs'\n:using System;\nusing Combat.Domain;\nusing Combat.Scene;\nusing Constructor.Ships;\nusing Domain.Player;\nusing Domain.Quests;\nusing Economy;\nusing Economy.ItemType;\nusing Economy.Products;\nusing Galaxy;\nusing Galaxy.StarContent;\nusing Game;\nusing Game.Exploration;\nusing GameModel.Quests;\nusing GameServices;\nusing GameServices.Database;\nusing GameServices.Economy;\nusing GameServices.GameManager;\nusing GameServices.Gui;\nusing GameServices.Multiplayer;\nusing GameServices.Player;\nusing GameServices.Quests;\nusing GameServices.Random;\nusing GameServices.Research;\nusing GameStateMachine;\nusing GameStateMachine.States;\nusing Services.Gui;\nusing Services.InternetTime;\nusing Services.Messenger;\nusing Session;\nusing Session.Content;\nusing UnityEngine;\nusing Zenject;\nusing PlayerInventory = GameServices.Player.PlayerInventory;\n\nnamespace Installers\n{\n    public class GameInstaller : MonoInstaller<GameInstaller>\n    {\n        [SerializeField] GameModel.Config _config;\n\n        public override void InstallBindings()\n        {\n#if EDITOR_MODE\n            InstallEditorBindings();\n            return;\n#endif\n\n            Container.BindAllInterfaces<RandomGenerator>().To<RandomGenerator>().AsSingle();\n\n            Container.Bind<GameModel.Config>().FromInstance(_config);\n\n            Container.Bind<IGameDataManager>().To<GameDataManager>().FromGameObject().AsSingle().NonLazy();\n\n            Container.Bind<GameFlow>().FromGameObject().AsSingle().NonLazy();\n\n            Container.BindAllInterfacesAndSelf<StarMap>().To<StarMap>().AsSingle();\n\n            Container.BindAllInterfacesAndSelf<Research>().To<Research>().AsSingle();\n\n            Container.Bind<OfflineMultiplayer>().To<OfflineMultiplayer>().AsSingle().NonLazy();\n\n            Container.Bind<ItemTypeFactory>();\n            Container.Bind<ProductFactory>();\n            Container.Bind<LootGenerator>();\n            Container.Bind<ModificationFactory>();\n\n            Container.BindFactory<CombatModelBuilder, CombatModelBuilder.Factory>();\n            Container.BindSignal<ShipCreatedSignal>();\n            Container.BindTrigger<ShipCreatedSignal.Trigger>();\n            Container.BindSignal<ShipDestroyedSignal>();\n            Container.BindTrigger<ShipDestroyedSignal.Trigger>();\n\n            Container.Bind<Cheats>();\n            Container.Bind<GuiHelper>();\n            Container.Bind<HolidayManager>().AsSingle();\n            Container.Bind<NotificationManager>().AsSingle().NonLazy();\n            Container.BindAllInterfacesAndSelf<GameTime>().To<GameTime>().AsSingle().NonLazy();\n\n            Container.BindAllInterfaces<Technologies>().To<Technologies>().AsSingle();\n            Container.Bind<Skills>().AsSingle();\n\n            Container.Bind<Planet.Factory>().AsCached();\n\n            Container.Bind<SignalsTranslator>().AsSingle().NonLazy();\n\n            BindPlayerData();\n            BindQuestManager();\n            BindStarContent();\n            BindDatabase();\n            BindStateMachine();\n            BindLegacyServices();\n            BindSignals();\n        }\n\n        private void BindPlayerData()\n        {\n            Container.BindAllInterfacesAndSelf<PlayerSkills>().To<PlayerSkills>().AsSingle();\n            Container.BindAllInterfacesAndSelf<PlayerFleet>().To<PlayerFleet>().AsSingle();\n            Container.BindAllInterfacesAndSelf<PlayerResources>().To<PlayerResources>().AsSingle();\n            Container.BindAllInterfacesAndSelf<MotherShip>().To<MotherShip>().AsSingle();\n            Container.BindAllInterfacesAndSelf<PlayerInventory>().To<PlayerInventory>().AsSingle();\n            Container.BindAllInterfacesAndSelf<SupplyShip>().To<SupplyShip>().AsSingle().NonLazy();\n            Container.BindAllInterfacesAndSelf<StarMapManager>().To<StarMapManager>().AsSingle().NonLazy();\n        }\n\n        private void BindQuestManager()\n        {\n            Container.BindAllInterfaces<QuestManager>().To<QuestManager>().AsSingle();\n            Container.BindSignal<QuestListChangedSignal>();\n            Container.BindTrigger<QuestListChangedSignal.Trigger>();\n            Container.BindSignal<QuestActionRequiredSignal>();\n            Container.BindTrigger<QuestActionRequiredSignal.Trigger>();\n            Container.BindSignal<QuestEventSignal>();\n            Container.BindTrigger<QuestEventSignal.Trigger>();\n            Container.Bind<QuestFactory>().AsSingle();\n            Container.Bind<FleetFactory>().AsSingle();\n            Container.Bind<RequirementsFactory>().AsSingle();\n\n            Container.Bind<InventoryFactory>();\n            Container.BindFactory<GameDatabase.DataModel.LootModel, QuestContext, Loot, Loot.Factory>();\n\n\n\n\n        }\n\n        private void BindStarContent()\n        {\n            Container.BindAllInterfacesAndSelf<StarData>().To<StarData>().AsSingle();\n            Container.Bind<Occupants>().AsSingle();\n            Container.Bind<Boss>().AsSingle();\n            Container.Bind<Ruins>().AsSingle();\n            Container.Bind<Challenge>().AsSingle();\n            Container.Bind<LocalEvent>().AsSingle();\n            Container.Bind<Survival>().AsSingle();\n            Container.Bind<Wormhole>().AsSingle();\n            Container.Bind<StarBase>().AsSingle();\n            Container.Bind<XmasTree>().AsSingle();\n            Container.Bind<Hive>().AsSingle();\n        }\n\n        private void BindDatabase()\n        {\n#if EDITOR_MODE\n            Container.BindAllInterfacesAndSelf<SessionDataStub>().To<SessionDataStub>().AsSingle();\n#else\n            Container.BindAllInterfacesAndSelf<SessionData>().To<SessionData>().AsSingle();\n#endif\n            Container.Bind<ContentFactory>();\n\n            Container.BindSignal<SessionCreatedSignal>();\n            Container.BindTrigger<SessionCreatedSignal.Trigger>();\n            Container.BindSignal<SessionDataLoadedSignal>();\n            Container.BindTrigger<SessionDataLoadedSignal.Trigger>();\n\n            Container.BindSignal<PlayerPositionChangedSignal>();\n            Container.BindTrigger<PlayerPositionChangedSignal.Trigger>();\n            Container.BindSignal<NewStarExploredSignal>();\n            Container.BindTrigger<NewStarExploredSignal.Trigger>();\n            Container.BindSignal<MoneyValueChangedSignal>();\n            Container.BindTrigger<MoneyValueChangedSignal.Trigger>();\n            Container.BindSignal<FuelValueChangedSignal>();\n            Container.BindTrigger<FuelValueChangedSignal.Trigger>();\n            Container.BindSignal<StarsValueChangedSignal>();\n            Container.BindTrigger<StarsValueChangedSignal.Trigger>();\n            Container.BindSignal<PlayerSkillsResetSignal>();\n            Container.BindTrigger<PlayerSkillsResetSignal.Trigger>();\n            Container.BindSignal<TokensValueChangedSignal>();\n            Container.BindTrigger<TokensValueChangedSignal.Trigger>();\n            Container.BindSignal<ResourcesChangedSignal>();\n            Container.BindTrigger<ResourcesChangedSignal.Trigger>();\n        }\n\n        private void BindStateMachine()\n        {\n            Container.BindAllInterfaces<StateMachine>().To<StateMachine>().AsSingle().NonLazy();\n            Container.Bind<GameStateFactory>();\n\n            Container.Bind<TravelState>();\n            Container.BindFactory<int, TravelState, TravelState.Factory>();\n\n\t\t\tContainer.Bind<RetreatState>();\n\t\t\tContainer.BindFactory<RetreatState, RetreatState.Factory>();\n\n            Container.Bind<InitializationState>();\n            Container.BindFactory<InitializationState, InitializationState.Factory>();\n\n            Container.Bind<EditorInitializationState>();\n            Container.BindFactory<EditorInitializationState, EditorInitializationState.Factory>();\n\n            Container.Bind<MainMenuState>();\n            Container.BindFactory<MainMenuState, MainMenuState.Factory>();\n\n            Container.Bind<StarMapState>();\n            Container.BindFactory<StarMapState, StarMapState.Factory>();\n\n\t\t\tContainer.Bind<QuestState>();\n\t\t\tContainer.BindFactory<IUserInteraction, QuestState, QuestState.Factory>();\n\n            Container.Bind<SkillTreeState>();\n            Container.BindFactory<SkillTreeState, SkillTreeState.Factory>();\n\n            Container.Bind<ConstructorState>();\n            Container.BindFactory<IShip, ConstructorState, ConstructorState.Factory>();\n\n            Container.Bind<DialogState>();\n            Container.BindFactory<string, WindowArgs, Action<WindowExitCode>, DialogState, DialogState.Factory>();\n\n            Container.Bind<TestingState>();\n            Container.BindFactory<TestingState, TestingState.Factory>();\n\n            Container.Bind<CombatState>();\n            Container.BindFactory<ICombatModel, Action<ICombatModel>, CombatState, CombatState.Factory>();\n\n            Container.Bind<ExplorationState>();\n            Container.BindFactory<Planet, ExplorationState, ExplorationState.Factory>();\n\n            Container.Bind<EhopediaState>();\n            Container.BindFactory<EhopediaState, EhopediaState.Factory>();\n\n            Container.Bind<CombatRewardState>();\n            Container.BindFactory<IReward, CombatRewardState, CombatRewardState.Factory>();\n\n            Container.Bind<AnnouncementState>();\n            Container.BindFactory<AnnouncementState, AnnouncementState.Factory>();\n\n            Container.BindSignal<GameStateChangedSignal>();\n            Container.BindTrigger<GameStateChangedSignal.Trigger>();\n            Container.BindSignal<StartGameSignal>();\n            Container.BindTrigger<StartGameSignal.Trigger>();\n            Container.BindSignal<StartTravelSignal>();\n            Container.BindTrigger<StartTravelSignal.Trigger>();\n\t\t\tContainer.BindSignal<RetreatSignal>();\n\t\t\tContainer.BindTrigger<RetreatSignal.Trigger>();\n            Container.BindSignal<StartBattleSignal>();\n            Container.BindTrigger<StartBattleSignal.Trigger>();\n            Container.BindSignal<StartQuickBattleSignal>();\n            Container.BindTrigger<StartQuickBattleSignal.Trigger>();\n            Container.BindSignal<ExitSignal>();\n            Container.BindTrigger<ExitSignal.Trigger>();\n            Container.BindSignal<OpenSkillTreeSignal>();\n            Container.BindTrigger<OpenSkillTreeSignal.Trigger>();\n            Container.BindSignal<OpenConstructorSignal>();\n            Container.BindTrigger<OpenConstructorSignal.Trigger>();\n            Container.BindSignal<OpenShopSignal>();\n            Container.BindTrigger<OpenShopSignal.Trigger>();\n            Container.BindSignal<OpenWorkshopSignal>();\n            Container.BindTrigger<OpenWorkshopSignal.Trigger>();\n            Container.BindSignal<OpenEhopediaSignal>();\n            Container.BindTrigger<OpenEhopediaSignal.Trigger>();\n            Container.BindSignal<ConfigureControlsSignal>();\n            Container.BindTrigger<ConfigureControlsSignal.Trigger>();\n            Container.BindSignal<ShipSelectedSignal>();\n            Container.BindTrigger<ShipSelectedSignal.Trigger>();\n            Container.BindSignal<CombatCompletedSignal>();\n            Container.BindTrigger<CombatCompletedSignal.Trigger>();\n            Container.BindSignal<OpenShipyardSignal>();\n            Container.BindTrigger<OpenShipyardSignal.Trigger>();\n            Container.BindSignal<StartExplorationSignal>();\n            Container.BindTrigger<StartExplorationSignal.Trigger>();\n            Container.BindSignal<SupplyShipActivatedSignal>();\n            Container.BindTrigger<SupplyShipActivatedSignal.Trigger>();\n        }\n\n        private void BindSignals()\n        {\n            Container.BindSignal<SessionAboutToSaveSignal>();\n            Container.BindTrigger<SessionAboutToSaveSignal.Trigger>();\n            Container.BindSignal<MultiplayerStatusChangedSignal>();\n            Container.BindTrigger<MultiplayerStatusChangedSignal.Trigger>();\n            Container.BindSignal<EnemyFleetLoadedSignal>();\n            Container.BindTrigger<EnemyFleetLoadedSignal.Trigger>();\n            Container.BindSignal<EnemyFoundSignal>();\n            Container.BindTrigger<EnemyFoundSignal.Trigger>();\n            Container.BindSignal<GameModel.BaseCapturedSignal>();\n            Container.BindTrigger<GameModel.BaseCapturedSignal.Trigger>();\n            Container.BindSignal<GameModel.RegionFleetDefeatedSignal>();\n            Container.BindTrigger<GameModel.RegionFleetDefeatedSignal.Trigger>();\n            Container.BindSignal<StarContentChangedSignal>();\n            Container.BindTrigger<StarContentChangedSignal.Trigger>();\n        }\n\n        private void BindLegacyServices()\n        {\n            Container.BindAllInterfacesAndSelf<GameModel.RegionMap>().To<GameModel.RegionMap>().AsSingle();\n        }\n\n        private void InstallEditorBindings()\n        {\n            Container.BindAllInterfaces<RandomGenerator>().To<RandomGenerator>().AsSingle();\n            Container.Bind<GuiHelper>();\n            Container.Bind<NotificationManager>().AsSingle().NonLazy();\n            Container.Bind<SignalsTranslator>().AsSingle().NonLazy();\n\n            Container.Bind<GameModel.Config>().FromInstance(_config);\n\n            Container.BindSignal<ShipCreatedSignal>();\n            Container.BindTrigger<ShipCreatedSignal.Trigger>();\n            Container.BindSignal<ShipDestroyedSignal>();\n            Container.BindTrigger<ShipDestroyedSignal.Trigger>();\n\n            BindDatabase();\n            BindStateMachine();\n            BindLegacyServices();\n            BindSignals();\n        }\n    }\n}\n",
        "gt": [
            "'event_horizon/Starship/Assets/script/Game/Skills/Experience.cs'",
            "'event_horizon/Starship/Assets/script/GUI/ViewModel/Common/PlayerExperienceItem.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/Combat/ShipList.cs'",
            "'event_horizon/Starship/Assets/Scripts/GameStateMachine/States/CombatRewardState.cs'",
            "'event_horizon/Starship/Assets/Scripts/Domain/Galaxy/StarContent/StarBase.cs'",
            "'event_horizon/Starship/Assets/Scripts/Installers/GameInstaller.cs'"
        ]
    },
    {
        "files": [
            "'OGDI-DataLab/DataLoader/DataLoader/Implementations/Kml/KmlToTablesDataLoaderParams.cs'",
            "'OGDI-DataLab/DataLoader/DataLoaderGuiApp/ViewModels/ProcessorParamsControlViewModel.cs'",
            "'OGDI-DataLab/DataLoader/DataLoader/DataLoaderFactory.cs'",
            "'OGDI-DataLab/DataLoader/DataLoaderGuiApp/App.xaml.cs'"
        ],
        "content": "'OGDI-DataLab/DataLoader/DataLoader/Implementations/Kml/KmlToTablesDataLoaderParams.cs'\n:﻿using System;\nusing System.IO;\nusing System.Linq;\nusing System.Xml.Linq;\nusing System.Xml.Serialization;\n\nnamespace Ogdi.Data.DataLoader.Kml\n{\n    [XmlRoot(ElementName = \"KmlDataLoaderParams\")]\n    public class KmlToTablesDataLoaderParams : DataLoaderParams\n    {\n        public static KmlToTablesDataLoaderParams FromFile(UploadParam uploadParam)\n        {\n            string configFileName = string.Empty;\n            string kmlFileName = string.Empty;\n            KmlToTablesDataLoaderParams parameters;\n\n            if (!string.IsNullOrEmpty(uploadParam.Directory) && !string.IsNullOrEmpty(uploadParam.Name))\n            {\n                configFileName = Path.Combine(uploadParam.Directory, string.Concat(uploadParam.Name, DataLoaderConstants.FileExtConfig));\n                kmlFileName = Path.Combine(uploadParam.Directory, string.Concat(uploadParam.Name, DataLoaderConstants.FileExtKml));\n            }\n\n\n            if (!string.IsNullOrEmpty(configFileName) && File.Exists(configFileName))\n            {\n                KmlToTablesDataLoaderParams data;\n\n                using (var stream = File.Open(configFileName, FileMode.Open, FileAccess.Read))\n                {\n                    data = SerializationHelper.DeserializeFromFile<KmlToTablesDataLoaderParams>(stream);\n                }\n                if (data.TableMetadataEntity.ReleasedDate.Year < 2008)\n                    data.TableMetadataEntity.ReleasedDate = DateTime.Now;\n\n                if (data.TableMetadataEntity.ExpiredDate.Year < 2008)\n                    data.TableMetadataEntity.ExpiredDate = DateTime.Now.AddDays(1);\n\n                parameters = data;\n            }\n            else\n            {\n                parameters = File.Exists(kmlFileName)\n                                 ? CreateEmptyData(kmlFileName)\n                                 : new KmlToTablesDataLoaderParams\n                                       {\n                                           TableMetadataEntity =\n                                               new TableMetadataEntity\n                                                   {\n                                                       IsEmpty = true,\n                                                       ReleasedDate = DateTime.Now,\n                                                       ExpiredDate = DateTime.Now.AddDays(1),\n                                                       LastUpdateDate = DateTime.Now\n                                                   },\n                                           ProcessorParams =\n                                                new TableProcessorParams\n                                                    {\n                                                        PartitionKeyPropertyName = string.Empty,\n                                                        RowKeyPropertyName = string.Empty,\n                                                        TableMetadataPartitionKeyPropertyName = string.Empty,\n                                                        TableMetadataRowKeyPropertyName = string.Empty,\n                                                        EntityMetadataPartitionKeyPropertyName = string.Empty,\n                                                        EntityMetadataRowKeyPropertyName = string.Empty,\n                                                        SourceTimeZoneName = string.Empty\n                                                    },\n                                                    TableColumnsMetadata = new TableColumnsMetadata\n                                                    {\n                                                        TableColumnsMetadataPartitionKeyPropertyName = string.Empty,\n                                                        TableColumnsMetadataRowKeyPropertyName = string.Empty\n                                                    }\n                                       };\n            }\n            return parameters;\n        }\n\n        private static KmlToTablesDataLoaderParams CreateEmptyData(string fileName)\n        {\n            var name = Path.GetFileNameWithoutExtension(fileName);\n\n            var dataLoaderParams = new KmlToTablesDataLoaderParams();\n\n            dataLoaderParams.TableMetadataEntity = new TableMetadataEntity\n                                                       {\n                                                           EntitySet = name,\n                                                           Name = name,\n                                                           Source = name,\n                                                           Category = name,\n                                                           ReleasedDate = DateTime.Now,\n                                                           ExpiredDate = DateTime.Now.AddDays(1),\n                                                           LastUpdateDate = DateTime.Now\n                                                       };\n\n            dataLoaderParams.ProducerParams = new EntityProducerParams\n                                                  {\n                                                      PlacemarkParams = new PlacemarkParams(),\n                                                      PropertyToTypeMap = new PropertyToTypeMapper()\n                                                  };\n\n            dataLoaderParams.ProcessorParams = new TableProcessorParams\n                                                    {\n                                                        PartitionKeyPropertyName = DataLoaderConstants.ValueUniqueAutoGenInitCaps,\n                                                        RowKeyPropertyName = DataLoaderConstants.ValueUniqueAutoGenInitCaps,\n                                                        TableMetadataPartitionKeyPropertyName = \"Name\",\n                                                        TableMetadataRowKeyPropertyName = DataLoaderConstants.ValueUniqueAutoGenInitCaps,\n                                                        TableColumnsMetadataPartitionKeyPropertyName = DataLoaderConstants.PropNameEntitySet,\n                                                        TableColumnsMetadataRowKeyPropertyName = \"Column\",\n                                                        EntityMetadataPartitionKeyPropertyName = DataLoaderConstants.PropNameEntitySet,\n                                                        EntityMetadataRowKeyPropertyName = DataLoaderConstants.PropNameEntityKind\n                                                    };\n\n\n            dataLoaderParams.TableColumnsMetadata = new TableColumnsMetadata\n            {\n                PropertyToTypeColumnsMetadata = new PropertyToTypeColumnsMetadataMapper()\n            };\n\n            using (var kmlFile = new FileStream(fileName, FileMode.Open, FileAccess.Read))\n            {\n                const string mapToString = \"string\";\n                const string mapToDouble = \"double\";\n                const string nameAttribute = \"name\";\n\n                var kmlDocument = XDocument.Load(kmlFile);\n\n                if (kmlDocument != null)\n                {\n                    XNamespace kmlNamespace = kmlDocument.Root.Attributes(\"xmlns\").First().Value;\n                    PropertyToTypeMapper propertyTypeMapper = dataLoaderParams.ProducerParams.PropertyToTypeMap;\n\n                    var firstPlacemarkInKmlFile =\n                        kmlDocument.Descendants(kmlNamespace + DataLoaderConstants.ElemNamePlacemark).First();\n\n                    if (!firstPlacemarkInKmlFile.IsEmpty)\n                    {\n                        propertyTypeMapper.Add(DataLoaderConstants.ElemNameName, mapToString);\n                        propertyTypeMapper.Add(DataLoaderConstants.ElemNameDescription, mapToString);\n\n                        #region RDF\n\n                        string defaultDescription = DefaultDescription();\n                        string rdfNamespace = \"ogdi=\\\"ogdiUrl\\\"\";\n\n                        dataLoaderParams.TableColumnsMetadata.PropertyToTypeColumnsMetadata.Add(DataLoaderConstants.ElemNameName.Trim(), string.Empty, FormattedDescription(defaultDescription, DataLoaderConstants.ElemNameName), rdfNamespace);\n                        dataLoaderParams.TableColumnsMetadata.PropertyToTypeColumnsMetadata.Add(DataLoaderConstants.ElemNameDescription.Trim(), string.Empty, FormattedDescription(defaultDescription, DataLoaderConstants.ElemNameDescription), rdfNamespace);\n\n                        #endregion\n\n                        if (firstPlacemarkInKmlFile.Element(kmlNamespace + DataLoaderConstants.ElemNamePoint) != null)\n                        {\n                            propertyTypeMapper.Add(DataLoaderConstants.PropNameLongitude, mapToDouble);\n                            propertyTypeMapper.Add(DataLoaderConstants.PropNameLatitude, mapToDouble);\n                            dataLoaderParams.ProducerParams.PlacemarkParams.LongitudeProperty = DataLoaderConstants.PropNameLongitude;\n                            dataLoaderParams.ProducerParams.PlacemarkParams.LatitudeProperty = DataLoaderConstants.PropNameLatitude;\n\n                            #region RDF\n\n                            dataLoaderParams.TableColumnsMetadata.PropertyToTypeColumnsMetadata.Add(DataLoaderConstants.PropNameLongitude.Trim(), string.Empty, FormattedDescription(defaultDescription, DataLoaderConstants.PropNameLongitude), rdfNamespace);\n                            dataLoaderParams.TableColumnsMetadata.PropertyToTypeColumnsMetadata.Add(DataLoaderConstants.PropNameLatitude.Trim(), string.Empty, FormattedDescription(defaultDescription, DataLoaderConstants.PropNameLatitude), rdfNamespace);\n\n                            #endregion\n                        }\n                        else if (firstPlacemarkInKmlFile.Element(kmlNamespace + DataLoaderConstants.ElemNamePolygon) != null)\n                        {\n                            propertyTypeMapper.Add(DataLoaderConstants.PropNameKmlCoords, mapToString);\n\n                            #region RDF\n\n                            dataLoaderParams.TableColumnsMetadata.PropertyToTypeColumnsMetadata.Add(DataLoaderConstants.PropNameKmlCoords.Trim(), string.Empty, FormattedDescription(defaultDescription, DataLoaderConstants.PropNameKmlCoords), rdfNamespace);\n\n                            #endregion\n                        }\n\n                        foreach (var simpleData in firstPlacemarkInKmlFile.Descendants(kmlNamespace + DataLoaderConstants.ElemNameSimpleData))\n                        {\n                            if (simpleData.Attribute(nameAttribute) == null) continue;\n                            string val = string.Concat(\"sd0\", simpleData.Attribute(nameAttribute).Value);\n                            propertyTypeMapper.Add(val, mapToString);\n\n                            #region RDF\n\n                            dataLoaderParams.TableColumnsMetadata.PropertyToTypeColumnsMetadata.Add(val.Trim(), string.Empty, FormattedDescription(defaultDescription, val), rdfNamespace);\n\n                            #endregion\n                        }\n                    }\n                }\n            }\n\n            return dataLoaderParams;\n        }\n\n        private static string DefaultDescription()\n        {\n            XDocument xmlDoc = XDocument.Load(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @\".\\RdfNamespaces.xml\"));\n\n            foreach (XElement desc in xmlDoc.Descendants(\"metadata\"))\n            {\n                return desc.Element(\"description\").Value.ToString();\n            }\n\n            return string.Empty;\n        }\n\n        private static string FormattedDescription(string defaultDescription, string parameter)\n        {\n            return string.Format(defaultDescription, parameter, DataLoaderConstants.ElemNamePlacemark);\n        }\n\n        public override void Save(string fileName)\n        {\n            base.Save(fileName);\n\n            if (ProducerParams != null && ProducerParams.PlacemarkParams != null)\n            {\n                var names = ProducerParams.PropertyToTypeMap.Mappings\n                    .Where(x => !string.IsNullOrEmpty(x.IndexInName))\n                    .OrderBy(x => x.IndexInName)\n                    .Select(x => x.Name).ToArray();\n\n                ProducerParams.PlacemarkParams.NameProperties = names;\n            }\n            SerializationHelper.SerializeToFile(fileName, this);\n        }\n    }\n}\n'OGDI-DataLab/DataLoader/DataLoaderGuiApp/ViewModels/ProcessorParamsControlViewModel.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Ogdi.Data.DataLoader;\n\nnamespace Ogdi.Data.DataLoaderGuiApp.ViewModels\n{\n    public class ProcessorParamsControlViewModel\n    {\n        private readonly TableProcessorParams _processorParameters;\n        private readonly IEnumerable<string> _timeZones;\n        private readonly IEnumerable<string> _datasetColumns;\n\n        public ProcessorParamsControlViewModel(DataLoaderParams parameters)\n        {\n            #region fill timezones\n\n            var timeZones = TimeZoneInfo.GetSystemTimeZones();\n\n            _timeZones = timeZones.OrderBy(x => x.BaseUtcOffset.Hours).Select(x => x.DisplayName).ToArray();\n\n            #endregion fill timezones\n\n            _processorParameters = parameters.ProcessorParams;\n\n            if (parameters.ProducerParams != null)\n                _datasetColumns = (new[] { \"New.Guid\" }).Union(parameters.ProducerParams.PropertyToTypeMap.Mappings.Select(x => x.Name));\n        }\n\n        public string PartitionKeyPropertyName\n        {\n            get { return _processorParameters.PartitionKeyPropertyName; }\n            set { _processorParameters.PartitionKeyPropertyName = value; }\n        }\n\n        public string RowKeyPropertyName\n        {\n            get { return _processorParameters.RowKeyPropertyName; }\n            set { _processorParameters.RowKeyPropertyName = value; }\n        }\n\n        public string SourceTimeZoneName\n        {\n            get { return _processorParameters.SourceTimeZoneName; }\n            set { _processorParameters.SourceTimeZoneName = value; }\n        }\n\n        public IEnumerable<string> TimeZones\n        {\n            get { return _timeZones; }\n        }\n\n        public IEnumerable<string> DatasetColumns\n        {\n            get { return _datasetColumns; }\n        }\n    }\n}\n\n'OGDI-DataLab/DataLoader/DataLoader/DataLoaderFactory.cs'\n:﻿using System;\nusing System.IO;\nusing System.Xml.Serialization;\nusing Ogdi.Data.DataLoader.Csv;\nusing Ogdi.Data.DataLoader.DbaseKml;\nusing Ogdi.Data.DataLoader.Kml;\n\nnamespace Ogdi.Data.DataLoader\n{\n    public enum SourceDataType\n    {\n        DbfAndKml,\n        Csv,\n        Kml\n    }\n\n    public enum DataLoadingTarget\n    {\n        Console,\n        Tables\n    }\n\n\n    public enum TableOverwriteMode\n    {\n        Create,\n        Add,\n        Update\n    }\n\n    public static class DataLoaderFactory\n    {\n        public static IDataLoader CreateDataLoader(SourceDataType type, DataLoadingTarget target, string fileSetName, TableOverwriteMode overwriteMode, bool sourceOrder)\n        {\n            string dir = Directory.GetCurrentDirectory();\n            string file = string.Concat(fileSetName, DataLoaderConstants.FileExtConfig);\n\n            using (var stream = File.Open(Path.Combine(dir, file), FileMode.Open, FileAccess.Read))\n                switch (type)\n                {\n                    case SourceDataType.DbfAndKml:\n                        return CreateLoader<DbaseKmlToTablesDataLoaderParams, DbaseKmlEntityProducer>(fileSetName, target, stream, sourceOrder, overwriteMode);\n\n                    case SourceDataType.Csv:\n                        return CreateLoader<CsvToTablesDataLoaderParams, CsvEntityProducer>(fileSetName, target, stream, sourceOrder, overwriteMode);\n\n                    case SourceDataType.Kml:\n                        return CreateLoader<KmlToTablesDataLoaderParams, KmlEntityProducer>(fileSetName, target, stream, sourceOrder, overwriteMode);\n                }\n            throw new NotSupportedException(type.ToString());\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n        private static IDataLoader CreateLoader<DLParams, Producer>(string fileSetName, DataLoadingTarget target, FileStream stream, bool sourceOrder, TableOverwriteMode overwriteMode)\n            where DLParams : DataLoaderParams\n            where Producer : EntityProducer\n        {\n            switch (target)\n            {\n                case DataLoadingTarget.Console:\n                    return CreateConsoleLoader<DLParams, Producer>(stream, fileSetName, sourceOrder);\n                case DataLoadingTarget.Tables:\n                    return CreateTablesLoader<DLParams, Producer>(stream, fileSetName, sourceOrder, overwriteMode);\n            }\n            throw new NotSupportedException(target.ToString());\n        }\n\n        private static IDataLoader CreateTablesLoader<DLParams, Producer>(FileStream stream, string fileSetName, bool sourceOrder, TableOverwriteMode overwriteMode)\n            where DLParams : DataLoaderParams\n            where Producer : EntityProducer\n        {\n            var serializer = new XmlSerializer(typeof(DLParams));\n            var p = (DLParams)serializer.Deserialize(stream);\n            p.TableMetadataEntity.EntityKind = p.TableMetadataEntity.EntitySet + \"Item\";\n            if (p.ProcessorParams != null)\n            {\n                p.ProcessorParams.EntityKind = p.TableMetadataEntity.EntityKind;\n                p.ProcessorParams.EntitySet = p.TableMetadataEntity.EntitySet;\n            }\n\n            if (sourceOrder && p.ProcessorParams != null && !String.IsNullOrEmpty(p.ProcessorParams.PartitionKeyPropertyName)\n                    && p.ProcessorParams.PartitionKeyPropertyName.ToLower() != DataLoaderConstants.ValueUniqueAutoGen)\n                throw new ApplicationException(\"PartitionKey must be empty or equal to 'New.Guid' in .cfg when use sourceOrder\");\n\n            if (overwriteMode == TableOverwriteMode.Update && p.ProcessorParams != null\n                && (String.IsNullOrEmpty(p.ProcessorParams.PartitionKeyPropertyName)\n                    || p.ProcessorParams.PartitionKeyPropertyName.ToLower() == DataLoaderConstants.ValueUniqueAutoGen\n                    || String.IsNullOrEmpty(p.ProcessorParams.PartitionKeyPropertyName)\n                    || p.ProcessorParams.PartitionKeyPropertyName.ToLower() == DataLoaderConstants.ValueUniqueAutoGen))\n                throw new ApplicationException(\"PartitionKey and RowKey must be provided in .cfg for /mode=update\");\n\n            EntityProducer producer = null;\n\n            if (!p.TableMetadataEntity.IsEmpty)\n                producer = (Producer)Activator.CreateInstance(typeof(Producer),\n                    fileSetName,\n                    p.TableMetadataEntity.EntitySet,\n                    p.TableMetadataEntity.EntityKind,\n                    p.ProducerParams,\n                    sourceOrder);\n\n            var processor = new TableEntityProcessor(p.ProcessorParams, overwriteMode);\n            return new TableDataLoader(p, producer, processor, overwriteMode);\n        }\n\n        private static IDataLoader CreateConsoleLoader<DLParams, Producer>(FileStream stream, string fileSetName, bool sourceOrder)\n            where DLParams : DataLoaderParams\n            where Producer : EntityProducer\n        {\n            var serializer = new XmlSerializer(typeof(DLParams));\n            var p = (DLParams)serializer.Deserialize(stream);\n            p.TableMetadataEntity.EntityKind = p.TableMetadataEntity.EntitySet + \"Item\";\n            EntityProducer producer = null;\n            if (!p.TableMetadataEntity.IsEmpty)\n                producer = (Producer)Activator.CreateInstance(typeof(Producer),\n                    fileSetName,\n                    p.TableMetadataEntity.EntitySet,\n                    p.TableMetadataEntity.EntityKind,\n                    p.ProducerParams,\n                    sourceOrder);\n            var processor = new CoutEntityProcessor();\n            var loader = new DataLoader(p, producer, processor);\n            return loader;\n        }\n    }\n}\n\n'OGDI-DataLab/DataLoader/DataLoaderGuiApp/App.xaml.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Windows;\nusing Ogdi.Data.DataLoaderGuiApp.ViewModels;\nusing Ogdi.Data.DataLoaderGuiApp.Views;\n\nnamespace Ogdi.Data.DataLoaderGuiApp\n{\n\n\n\n    public partial class App : Application\n    {\n        private void OnStartup(object sender, StartupEventArgs e)\n        {\n\n            var view = new MainView { DataContext = new MainViewModel() };\n            view.Show();\n        }\n    }\n}\n",
        "gt": [
            "'OGDI-DataLab/DataLoader/DataLoader/Implementations/Kml/KmlToTablesDataLoaderParams.cs'",
            "'OGDI-DataLab/DataLoader/DataLoader/DataLoaderFactory.cs'",
            "'OGDI-DataLab/DataLoader/DataLoaderGuiApp/ViewModels/ProcessorParamsControlViewModel.cs'",
            "'OGDI-DataLab/DataLoader/DataLoaderGuiApp/App.xaml.cs'"
        ]
    },
    {
        "files": [
            "'okta-sdk-dotnet/src/Okta.Sdk.UnitTest/Internal/MockOAuthApi.cs'",
            "'okta-sdk-dotnet/src/Okta.Sdk.UnitTest/Api/UsersApiTests.cs'",
            "'okta-sdk-dotnet/src/Okta.Sdk/Model/OAuth2ScopesMediationPolicyRuleCondition.cs'",
            "'okta-sdk-dotnet/src/Okta.Sdk/Api/SSFTransmitterApi.cs'"
        ],
        "content": "'okta-sdk-dotnet/src/Okta.Sdk.UnitTest/Internal/MockOAuthApi.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Okta.Sdk.Api;\nusing Okta.Sdk.Client;\n\nnamespace Okta.Sdk.UnitTest.Internal\n{\n    public class MockOAuthApi : IOAuthApi\n    {\n        private Queue<string> _returnQueue;\n        private bool _isDpop;\n\n        public MockOAuthApi(IReadableConfiguration configuration, Queue<string> returnQueue = null, bool isDpop = false)\n        {\n            Configuration = configuration;\n            _returnQueue = returnQueue;\n            _isDpop = isDpop;\n        }\n        public IReadableConfiguration Configuration { get ; set; }\n        public ExceptionFactory ExceptionFactory { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }\n\n        public string GetBasePath()\n        {\n            return \"https:\n        }\n\n        public Task<OAuthTokenResponse> GetBearerTokenAsync(CancellationToken cancellationToken = default)\n        {\n            var token = _returnQueue?.Dequeue() ?? \"foo\";\n            return Task.FromResult<OAuthTokenResponse>(new OAuthTokenResponse { AccessToken = token, TokenType = (_isDpop) ? \"DPoP\" : \"Bearer\"});\n        }\n\n        public Task<ApiResponse<OAuthTokenResponse>> GetBearerTokenWithHttpInfoAsync(CancellationToken cancellationToken = default)\n        {\n            return null;\n        }\n    }\n}\n\n'okta-sdk-dotnet/src/Okta.Sdk.UnitTest/Api/UsersApiTests.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net;\nusing System.Threading.Tasks;\nusing FluentAssertions;\nusing Okta.Sdk.Api;\nusing Okta.Sdk.Client;\nusing Okta.Sdk.Model;\nusing Okta.Sdk.UnitTest.Internal;\nusing WireMock.RequestBuilders;\nusing WireMock.ResponseBuilders;\nusing WireMock.Server;\nusing Xunit;\n\nnamespace Okta.Sdk.UnitTest.Api\n{\n    public class UsersApiTests\n    {\n        private readonly WireMockServer _server;\n\n\n        public UsersApiTests()\n        {\n            _server = WireMockServer.Start();\n        }\n\n        public void Dispose()\n        {\n            _server.Stop();\n        }\n\n        private void CreateStubReturningRateLimitResponse()\n        {\n            var dateHeader = new DateTimeOffset(DateTime.Now);\n            var resetTime = dateHeader.AddSeconds(1).ToUnixTimeSeconds();\n\n            _server.Given(\n                    Request.Create().WithPath(\"/api/v1/users/foo\")\n                ).AtPriority(1)\n                .RespondWith(\n                    Response.Create()\n                        .WithStatusCode(429)\n                        .WithHeader(\"Content-Type\", \"text/json\")\n                        .WithHeader(\"Date\", dateHeader.ToString())\n                        .WithHeader(\"x-rate-limit-reset\", resetTime.ToString())\n                        .WithHeader(DefaultRetryStrategy.XOktaRequestId, \"foo\")\n                        .WithBody(@\"{\n                                        \"\"errorCode\"\": \"\"E0000047\"\",\n                                        \"\"errorSummary\"\": \"\"API call exceeded rate limit due to too many requests.\"\",\n                                        \"\"errorLink\"\": \"\"E0000047\"\",\n                                        \"\"errorId\"\": \"\"sample0eww_TKcLhu8FoK7qM4\"\",\n                                        \"\"errorCauses\"\": []\n                                    }\")\n\n                );\n        }\n\n        private void CreateStubReturningOAuthTokenResponse()\n        {\n            var tokenResponse =\n                @\"{\"\"access_token\"\" : \"\"eyJhbGciOiJSUzI1NiJ9.eyJ2ZXIiOjEsImlzcyI6Imh0dHA6Ly9yYWluLm9rdGExLmNvbToxODAyIiwiaWF0IjoxNDQ5NjI0MDI2LCJleHAiOjE0NDk2Mjc2MjYsImp0aSI6IlVmU0lURzZCVVNfdHA3N21BTjJxIiwic2NvcGVzIjpbIm9wZW5pZCIsImVtYWlsIl0sImNsaWVudF9pZCI6InVBYXVub2ZXa2FESnh1a0NGZUJ4IiwidXNlcl9pZCI6IjAwdWlkNEJ4WHc2STZUVjRtMGczIn0.HaBu5oQxdVCIvea88HPgr2O5evqZlCT4UXH4UKhJnZ5px-ArNRqwhxXWhHJisslswjPpMkx1IgrudQIjzGYbtLFjrrg2ueiU5-YfmKuJuD6O2yPWGTsV7X6i7ABT6P-t8PRz_RNbk-U1GXWIEkNnEWbPqYDAm_Ofh7iW0Y8WDA5ez1jbtMvd-oXMvJLctRiACrTMLJQ2e5HkbUFxgXQ_rFPNHJbNSUBDLqdi2rg_ND64DLRlXRY7hupNsvWGo0gF4WEUk8IZeaLjKw8UoIs-ETEwJlAMcvkhoVVOsN5dPAaEKvbyvPC1hUGXb4uuThlwdD3ECJrtwgKqLqcWonNtiw\"\",\n                    \"\"token_type\"\" : \"\"Bearer\"\",\n                    \"\"expires_in\"\" : 3600,\n                    \"\"scope\"\"      : \"\"openid email\"\",\n                    \"\"refresh_token\"\" : \"\"a9VpZDRCeFh3Nkk2VdY\"\",\n                    \"\"id_token\"\" : \"\"eyJhbGciOiJSUzI1NiJ9.eyJzdWIiOiIwMHVpZDRCeFh3Nkk2VFY0bTBnMyIsImVtYWlsIjoid2VibWFzdGVyQGNsb3VkaXR1ZG\n                                  UubmV0IiwiZW1haWxfdmVyaWZpZWQiOnRydWUsInZlciI6MSwiaXNzIjoiaHR0cDovL3JhaW4ub2t0YTEuY29tOjE4MDIiLCJsb\n                                  2dpbiI6ImFkbWluaXN0cmF0b3IxQGNsb3VkaXR1ZGUubmV0IiwiYXVkIjoidUFhdW5vZldrYURKeHVrQ0ZlQngiLCJpYXQiOjE0\n                                  NDk2MjQwMjYsImV4cCI6MTQ0OTYyNzYyNiwiYW1yIjpbInB3ZCJdLCJqdGkiOiI0ZUFXSk9DTUIzU1g4WGV3RGZWUiIsImF1dGh\n                                  fdGltZSI6MTQ0OTYyNDAyNiwiYXRfaGFzaCI6ImNwcUtmZFFBNWVIODkxRmY1b0pyX1EifQ.Btw6bUbZhRa89DsBb8KmL9rfhku\n                                  --_mbNC2pgC8yu8obJnwO12nFBepui9KzbpJhGM91PqJwi_AylE6rp-ehamfnUAO4JL14PkemF45Pn3u_6KKwxJnxcWxLvMuuis\n                                  nvIs7NScKpOAab6ayZU0VL8W6XAijQmnYTtMWQfSuaaR8rYOaWHrffh3OypvDdrQuYacbkT0csxdrayXfBG3UF5-ZAlhfch1fhF\n                                  T3yZFdWwzkSDc0BGygfiFyNhCezfyT454wbciSZgrA9ROeHkfPCaX7KCFO8GgQEkGRoQntFBNjluFhNLJIUkEFovEDlfuB4tv_M\n                                  8BM75celdy3jkpOurg\"\"\n                }\";\n_server.Given(\n                    Request.Create().WithPath(\"/oauth2/v1/token*\")\n                ).AtPriority(1)\n                .RespondWith(\n                    Response.Create()\n                        .WithStatusCode(200)\n                        .WithHeader(\"Content-Type\", \"text/json\")\n                        .WithBody(tokenResponse.Replace(\"\\r|\\n\", string.Empty))\n                );\n        }\n\n        [Fact]\n        public async Task PartialUpdateUserAsyncThrowOnRateLimitErrorAfterMaxWithApiToken()\n        {\n            var configuration = new Configuration\n            {\n                OktaDomain = _server.Url!,\n                Token = \"foo\",\n                DisableOktaDomainCheck = true,\n                MaxRetries = 1,\n\n            };\n\n            var userApi = new UserApi(configuration);\n\n            CreateStubReturningRateLimitResponse();\n\n            var exception = await Assert.ThrowsAsync<ApiException>(async () => await userApi.UpdateUserAsync(\"foo\",\n                new UpdateUserRequest\n                {\n                    Profile = new UserProfile\n                    {\n                        Email = \"foo@test.com\",\n                    }\n                }));\n\n            exception.Should().NotBeNull();\n            exception.ErrorCode.Should().Be(429);\n        }\n\n        [Fact]\n        public async Task PartialUpdateUserAsyncThrowOnRateLimitErrorAfterMaxRetriesWithOAuthToken()\n        {\n            var jsonPrivateKey = @\"{\n                                    \"\"p\"\":\"\"2-8pgwYv9jrkM2KsbnQmnJZnr69Rsj95M20I1zx5HhM3tgjGSa7d_dELPRkp9Usy8UGISt7eUHpYOVl529irHwbXevuId1Q804aQ_AtNJwpbRY48rw2T8LdtyVSaEyoFMCa8PJwtzZYzKJCKAe5eoXvW5zxB65RaIct0igYcoIs\"\",\n                                    \"\"kty\"\":\"\"RSA\"\",\n                                    \"\"q\"\":\"\"slkNUY_SCIn95ip7HoPs_IIiNoKOGeesIV1gacyoAycly1vBPMhtar9gwx51nN1tCMVGlSOk583eRJe2omAbqkIEYm1jSWtMdJKQSOJvx812xbF1afMgJDlJ6iRIlcnWEYhNNMCK5s_UR5zE0Mc5jktxDFeiEatriyu6o9hQix8\"\",\n                                    \"\"d\"\":\"\"LIpJTKCi9hPTiuUU954hayd3lXNwTVS6Fdny2iUj6iZ22eRp1V_UswECuMy5B-8lWbp1Gu_eASvhElSCB26m3UgHRVy8LP6Lmvm9VlJuZ5NtOK5D0R-gzFLINGdQH1PehzEc44jsTWyu297lgCLrVy-VScHQJodni3txTzxY4jwjILMfLB7OWdKVkvDQ4g70BYTVN5kZKjA9B0lLsofi1gUY_EVlojuvSKbm3HY0JR_JThtEd_nZw_tXTYmlP58plVYX-9JnA8NcFRB6dUNO7XqcXU1SafWqoM9yam1nGSMYRknwjSSTKRdBXHSy7PVxVHhpC72wb3aWNsOqWNo0ZQ\"\",\n                                    \"\"e\"\":\"\"AQAB\"\",\n                                    \"\"qi\"\":\"\"u1mS53N4BUSoMeOHFd0o4_n3QGH4izNUsiJVBIkv_UZUAk4LYudPEikTWRLqWsrcXmOyZYao5sSaZyt-B2XCkfdnkIhl-Q7b0_W0yt3Eh5XjAzH9oy5Dklog255lh-Y0yoWXvLjq-KEDs7Nd2uIT4gvKU4ymTqybvzazr2jY9qQ\"\",\"\"dp\"\":\"\"nCtPBsK1-9oFgJdoaWYApOAH8DBFipSXs3SQ-oTuW_S5coD4jAmniDuQB2p-6LblDXrDFKb8pZi6XL60UO-hUv7As4s4c8NVDb5X5SEBP9-Sv-koHgU-L4eQZY21ejY0SOS4dTFRNNKasQsxc_2XJIOTLc8T3_wPpD-cGQYN_dE\"\",\"\"dq\"\":\"\"ZWb4iZ0qICzFLW6N3gXIYrFi3ndQcC4m0jmTLdRs2o4RkRQ0RGj4vS7ex1G0MWI8MjZoMTe49Qs6Cunvr1bRo_YxI_1p7D6Tk9wZKTeFsqaBl1mUlo7jgXUJL5U9p9zAV-uVah7nWuBjo-vgg4wij2MZfZj9zuoWFWThk3LUKKU\"\",\"\"n\"\":\"\"mTjMc8AxU102LT1Jf-1qkGmaSiK4L7DDlC1SMvtyCRbDaiJDIagedfp1w8Pgud8YWOaS5FFx0S6JqGGP2U8OtpowzBcv5sYa-e5LHfnoueTJPj_jnI3fj5omZM1w-ofhFLPZoYEQ7DFYw0yLrzf8zaKB5-9BZ8yyOLhSKqxaOl2s7lw2TrwBRuQpPXmEir70oDPvazd8-An5ow6F5q7mzMtHAt61DJqrosRHiRwh4N37zIX_RNu-Tn1aMktCBl01rdoDyVq7Y4iwNH8ZAtT5thKK2eo8d-jb9TF9PH6LGffYCth157w-K4AZwXw74Ybo5NOux3XpIpKRbFTwvBLp1Q\"\"\n                                 }\";\n\n            var configuration = new Configuration();\n            configuration.Scopes = new HashSet<string> { \"okta.user.read\" };\n            configuration.ClientId = \"foo\";\n            configuration.PrivateKey = new JsonWebKeyConfiguration(jsonPrivateKey);\n            configuration.AuthorizationMode = AuthorizationMode.PrivateKey;\n            configuration.OktaDomain = _server.Url!;\n            configuration.MaxRetries = 1;\n            configuration.DisableOktaDomainCheck = true;\n\n            var userApi = new UserApi(configuration);\n\n            CreateStubReturningOAuthTokenResponse();\n            CreateStubReturningRateLimitResponse();\n\n            var exception = await Assert.ThrowsAsync<ApiException>(async () => await userApi.UpdateUserAsync(\"foo\",\n                new UpdateUserRequest\n                {\n                    Profile = new UserProfile\n                    {\n                        Email = \"foo@test.com\",\n                    }\n                }));\n\n            exception.Should().NotBeNull();\n            exception.ErrorCode.Should().Be(429);\n        }\n\n    }\n}\n\n'okta-sdk-dotnet/src/Okta.Sdk/Model/OAuth2ScopesMediationPolicyRuleCondition.cs'\n:\n\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Linq;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Converters;\nusing Newtonsoft.Json.Linq;\nusing OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;\n\nnamespace Okta.Sdk.Model\n{\n\n\n\n\n    [DataContract(Name = \"OAuth2ScopesMediationPolicyRuleCondition\")]\n\n    public partial class OAuth2ScopesMediationPolicyRuleCondition : IEquatable<OAuth2ScopesMediationPolicyRuleCondition>\n    {\n\n\n\n\n        [DataMember(Name = \"include\", EmitDefaultValue = true)]\n        public List<string> Include { get; set; }\n\n\n\n\n\n        public override string ToString()\n        {\n            StringBuilder sb = new StringBuilder();\n            sb.Append(\"class OAuth2ScopesMediationPolicyRuleCondition {\\n\");\n            sb.Append(\"  Include: \").Append(Include).Append(\"\\n\");\n            sb.Append(\"}\\n\");\n            return sb.ToString();\n        }\n\n\n\n\n\n        public virtual string ToJson()\n        {\n            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);\n        }\n\n\n\n\n\n\n        public override bool Equals(object input)\n        {\n            return this.Equals(input as OAuth2ScopesMediationPolicyRuleCondition);\n        }\n\n\n\n\n\n\n        public bool Equals(OAuth2ScopesMediationPolicyRuleCondition input)\n        {\n            if (input == null)\n            {\n                return false;\n            }\n            return\n                (\n                    this.Include == input.Include ||\n                    this.Include != null &&\n                    input.Include != null &&\n                    this.Include.SequenceEqual(input.Include)\n                );\n        }\n\n\n\n\n\n        public override int GetHashCode()\n        {\n            unchecked\n            {\n                int hashCode = 41;\n\n                if (this.Include != null)\n                {\n                    hashCode = (hashCode * 59) + this.Include.GetHashCode();\n                }\n                return hashCode;\n            }\n        }\n\n    }\n\n}\n\n'okta-sdk-dotnet/src/Okta.Sdk/Api/SSFTransmitterApi.cs'\n:\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Mime;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Okta.Sdk.Client;\nusing Okta.Sdk.Model;\n\nnamespace Okta.Sdk.Api\n{\n\n\n\n    public partial interface ISSFTransmitterApiAsync : IApiAccessor\n    {\n        #region Asynchronous Operations\n\n\n\n\n\n\n\n\n\n        System.Threading.Tasks.Task<WellKnownSSFMetadata> GetWellknownSsfMetadataAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));\n\n\n\n\n\n\n\n\n\n        System.Threading.Tasks.Task<ApiResponse<WellKnownSSFMetadata>> GetWellknownSsfMetadataWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));\n        #endregion Asynchronous Operations\n    }\n\n\n\n\n    public partial interface ISSFTransmitterApi :  ISSFTransmitterApiAsync\n    {\n\n    }\n\n\n\n\n    public partial class SSFTransmitterApi : ISSFTransmitterApi\n    {\n        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;\n        private IOAuthTokenProvider _oAuthTokenProvider;\n\n\n\n\n\n\n\n\n\n        public SSFTransmitterApi(Okta.Sdk.Client.Configuration configuration = null, IOAuthTokenProvider oAuthTokenProvider = null, WebProxy webProxy = null)\n        {\n            configuration = Sdk.Client.Configuration.GetConfigurationOrDefault(configuration);\n\n            this.Configuration = Okta.Sdk.Client.Configuration.MergeConfigurations(\n                Okta.Sdk.Client.GlobalConfiguration.Instance,\n                configuration\n            );\n\n            Sdk.Client.Configuration.Validate((Configuration)this.Configuration);\n\n            _oAuthTokenProvider = NullOAuthTokenProvider.Instance;\n            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration))\n            {\n                _oAuthTokenProvider = oAuthTokenProvider ?? new DefaultOAuthTokenProvider(Configuration);\n            }\n\n            this.AsynchronousClient = new Okta.Sdk.Client.ApiClient(this.Configuration.OktaDomain, _oAuthTokenProvider, webProxy);\n            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;\n        }\n\n\n\n\n\n\n\n        public SSFTransmitterApi(Okta.Sdk.Client.IAsynchronousClient asyncClient, Okta.Sdk.Client.IReadableConfiguration configuration)\n        {\n            if (asyncClient == null) throw new ArgumentNullException(\"asyncClient\");\n            if (configuration == null) throw new ArgumentNullException(\"configuration\");\n\n            this.AsynchronousClient = asyncClient;\n            this.Configuration = configuration;\n            this.ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;\n             _oAuthTokenProvider = NullOAuthTokenProvider.Instance;\n            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration))\n            {\n                _oAuthTokenProvider = new DefaultOAuthTokenProvider(Configuration);\n            }\n        }\n\n\n\n\n        public Okta.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }\n\n\n\n\n\n        public string GetBasePath()\n        {\n            return this.Configuration.OktaDomain;\n        }\n\n\n\n\n\n        public Okta.Sdk.Client.IReadableConfiguration Configuration { get; set; }\n\n\n\n\n        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory\n        {\n            get\n            {\n                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)\n                {\n                    throw new InvalidOperationException(\"Multicast delegate for ExceptionFactory is unsupported.\");\n                }\n                return _exceptionFactory;\n            }\n            set { _exceptionFactory = value; }\n        }\n\n\n\n\n\n\n\n        public async System.Threading.Tasks.Task<WellKnownSSFMetadata> GetWellknownSsfMetadataAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))\n        {\n            Okta.Sdk.Client.ApiResponse<WellKnownSSFMetadata> localVarResponse = await GetWellknownSsfMetadataWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);\n            return localVarResponse.Data;\n        }\n\n\n\n\n\n\n        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<WellKnownSSFMetadata>> GetWellknownSsfMetadataWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))\n        {\n\n            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();\n\n            string[] _contentTypes = new string[] {\n            };\n\n\n            string[] _accepts = new string[] {\n                \"application/json\"\n            };\n\n            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);\n            if (localVarContentType != null)\n            {\n                localVarRequestOptions.HeaderParameters.Add(\"Content-Type\", localVarContentType);\n            }\n\n            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);\n            if (localVarAccept != null)\n            {\n                localVarRequestOptions.HeaderParameters.Add(\"Accept\", localVarAccept);\n            }\n\n\n\n\n            var localVarResponse = await this.AsynchronousClient.GetAsync<WellKnownSSFMetadata>(\"/.well-known/ssf-configuration\", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);\n\n            if (this.ExceptionFactory != null)\n            {\n                Exception _exception = this.ExceptionFactory(\"GetWellknownSsfMetadata\", localVarResponse);\n                if (_exception != null)\n                {\n                    throw _exception;\n                }\n            }\n\n            return localVarResponse;\n        }\n\n    }\n}\n",
        "gt": [
            "'okta-sdk-dotnet/src/Okta.Sdk/Model/OAuth2ScopesMediationPolicyRuleCondition.cs'",
            "'okta-sdk-dotnet/src/Okta.Sdk/Api/SSFTransmitterApi.cs'",
            "'okta-sdk-dotnet/src/Okta.Sdk.UnitTest/Internal/MockOAuthApi.cs'",
            "'okta-sdk-dotnet/src/Okta.Sdk.UnitTest/Api/UsersApiTests.cs'"
        ]
    },
    {
        "files": [
            "'Swashbuckle.WebApi/Swashbuckle.Tests/Swagger/XmlCommentsTests.cs'",
            "'Swashbuckle.WebApi/Swashbuckle.Tests/Swagger/XmlTextHelperTests.cs'",
            "'Swashbuckle.WebApi/Swashbuckle.Tests/Swagger/SecurityTests.cs'"
        ],
        "content": "'Swashbuckle.WebApi/Swashbuckle.Tests/Swagger/XmlCommentsTests.cs'\n:﻿using System;\nusing NUnit.Framework;\nusing Newtonsoft.Json.Linq;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing Swashbuckle.Application;\nusing Swashbuckle.Dummy.Controllers;\nusing Swashbuckle.Tests.Swagger;\nusing Swashbuckle.Dummy.SwaggerExtensions;\n\nnamespace Swashbuckle.Tests.Swagger\n{\n    [TestFixture]\n    public class XmlCommentsTests : SwaggerTestBase\n    {\n        public XmlCommentsTests()\n            : base(\"swagger/docs/{apiVersion}\")\n        {\n        }\n\n        [SetUp]\n        public void SetUp()\n        {\n            SetUpAttributeRoutesFrom(typeof(XmlAnnotatedController).Assembly);\n            SetUpDefaultRouteFor<XmlAnnotatedController>();\n            SetUpHandler(IncludeXmlComments);\n        }\n\n        [Test]\n        public void It_documents_operations_from_action_summary_and_remarks_tags_including_paramrefs()\n        {\n            var swagger = GetContent<JObject>(\"http:\n\n            var postOp = swagger[\"paths\"][\"/xmlannotated\"][\"post\"];\n\n            Assert.IsNotNull(postOp[\"summary\"]);\n            Assert.AreEqual(\"Registers a new Account based on {account}.\", postOp[\"summary\"].ToString());\n\n            Assert.IsNotNull(postOp[\"description\"]);\n            Assert.AreEqual(\"Create an {Swashbuckle.Dummy.Controllers.Account} to access restricted resources\", postOp[\"description\"].ToString());\n        }\n\n        [Test]\n        public void It_documents_parameters_from_action_param_tags()\n        {\n            var swagger = GetContent<JObject>(\"http:\n\n            var accountParam = swagger[\"paths\"][\"/xmlannotated\"][\"post\"][\"parameters\"][0];\n            Assert.IsNotNull(accountParam[\"description\"]);\n            Assert.AreEqual(\"Details for the account to be created\", accountParam[\"description\"].ToString());\n\n            var keywordsParam = swagger[\"paths\"][\"/xmlannotated\"][\"get\"][\"parameters\"][0];\n            Assert.IsNotNull(keywordsParam[\"description\"]);\n            Assert.AreEqual(\"List of search keywords\", keywordsParam[\"description\"].ToString());\n        }\n\n        [Test]\n        public void It_documents_responses_from_action_response_tags()\n        {\n            var swagger = GetContent<JObject>(\"http:\n\n            var createResponses = swagger[\"paths\"][\"/xmlannotated\"][\"post\"][\"responses\"];\n\n            var expected = JObject.FromObject(new Dictionary<string, object>()\n                {\n                    {\n                        \"201\", new\n                        {\n                            description = \"{account} created\",\n                            schema = new\n                            {\n                                format = \"int32\",\n                                type = \"integer\"\n                            }\n                        }\n                    },\n                    {\n                        \"400\", new\n                        {\n                            description = \"Username already in use\"\n                        }\n                    }\n                });\n            Assert.AreEqual(expected.ToString(), createResponses.ToString());\n        }\n\n        [Test]\n        public void It_documents_schemas_from_type_summary_tags()\n        {\n            var swagger = GetContent<JObject>(\"http:\n\n            var accountSchema = swagger[\"definitions\"][\"Account\"];\n\n            Assert.IsNotNull(accountSchema[\"description\"]);\n            Assert.AreEqual(\"Account details\", accountSchema[\"description\"].ToString());\n        }\n\n        [Test]\n        public void It_documents_schema_properties_from_property_summary_tags()\n        {\n            var swagger = GetContent<JObject>(\"http:\n\n            var usernameProperty = swagger[\"definitions\"][\"Account\"][\"properties\"][\"Username\"];\n            Assert.IsNotNull(usernameProperty[\"description\"]);\n            Assert.AreEqual(\"Uniquely identifies the account\", usernameProperty[\"description\"].ToString());\n\n            var passwordProperty = swagger[\"definitions\"][\"Account\"][\"properties\"][\"Password\"];\n            Assert.IsNotNull(passwordProperty[\"description\"]);\n            Assert.AreEqual(\"For authentication\", passwordProperty[\"description\"].ToString());\n        }\n\n        [Test]\n        public void It_documents_schema_properties_including_property_summary_tags_from_base_classes()\n        {\n            var swagger = GetContent<JObject>(\"http:\n\n            var usernameProperty = swagger[\"definitions\"][\"SubAccount\"][\"properties\"][\"Username\"];\n            Assert.IsNotNull(usernameProperty[\"description\"]);\n            Assert.AreEqual(\"Uniquely identifies the account\", usernameProperty[\"description\"].ToString());\n        }\n\n        [Test]\n        public void It_documents_schema_properties_favoring_property_summary_tags_from_derived_vs_base_classes()\n        {\n            var swagger = GetContent<JObject>(\"http:\n\n            var usernameProperty = swagger[\"definitions\"][\"SubAccount\"][\"properties\"][\"AccountID\"];\n            Assert.IsNotNull(usernameProperty[\"description\"]);\n            Assert.AreEqual(\"The Account ID for SubAccounts should be 7 digits.\", usernameProperty[\"description\"].ToString());\n        }\n\n        [Test]\n        public void It_documents_schema_properties_from_summary_tags_of_complex_type_when_query_parameter_is_annotated_with_fromuri_attribute()\n        {\n            var swagger = GetContent<JObject>(\"http:\n\n            var parameters = swagger[\"paths\"][\"/xmlannotated/filter\"][\"get\"][\"parameters\"];\n\n            var qParam = parameters[0];\n            Assert.IsNotNull(qParam[\"description\"]);\n            Assert.AreEqual(\"The search query on which to filter accounts\", qParam[\"description\"].ToString());\n\n            var limitParam = parameters[1];\n            Assert.IsNotNull(limitParam[\"description\"]);\n            Assert.AreEqual(\"The maximum number of accounts to return\", limitParam[\"description\"].ToString());\n\n            var offsetParam = parameters[2];\n            Assert.IsNotNull(offsetParam[\"description\"]);\n            Assert.AreEqual(\"Offset into the result\", offsetParam[\"description\"].ToString());\n        }\n\n        [Test]\n        public void It_handles_actions_decorated_with_action_name()\n        {\n            Configuration.Routes.Clear();\n            SetUpCustomRouteFor<XmlAnnotatedController>(\"XmlAnnotated/{id}/{action}\");\n\n            var swagger = GetContent<JObject>(\"http:\n            var operation = swagger[\"paths\"][\"/XmlAnnotated/{id}/put-on-hold\"][\"put\"];\n            Assert.IsNotNull(operation[\"summary\"]);\n            Assert.AreEqual(\"Prevents the account from being used\", operation[\"summary\"].ToString());\n        }\n\n        [Test]\n        public void It_handles_actions_with_array_of_generic_parameters()\n        {\n            var swagger = GetContent<JObject>(\"http:\n            var operation = swagger[\"paths\"][\"/xmlannotated/{id}/metadata\"][\"put\"];\n            Assert.IsNotNull(operation[\"summary\"]);\n            Assert.AreEqual(\"Updates metadata associated with an account\", operation[\"summary\"].ToString());\n        }\n\n        [Test]\n        public void It_handles_nested_class_properties()\n        {\n            var swagger = GetContent<JObject>(\"http:\n            var displayNameProperty = swagger[\"definitions\"][\"AccountPreferences\"][\"properties\"][\"DisplayName\"];\n            Assert.IsNotNull(displayNameProperty[\"description\"]);\n            Assert.AreEqual(\"Provide a display name to use instead of Username when signed in\", displayNameProperty[\"description\"].ToString());\n        }\n\n        [Test]\n        public void It_handles_json_annotated_properties()\n        {\n            var swagger = GetContent<JObject>(\"http:\n            var marketingEmailsProperty = swagger[\"definitions\"][\"AccountPreferences\"][\"properties\"][\"allow-marketing-emails\"];\n            Assert.IsNotNull(marketingEmailsProperty[\"description\"]);\n            Assert.AreEqual(\"Flag to indicate if marketing emails may be sent\", marketingEmailsProperty[\"description\"].ToString());\n        }\n\n        [Test]\n        public void It_handles_generic_types()\n        {\n            var swagger = GetContent<JObject>(\"http:\n\n            var genericTypeSchema = swagger[\"definitions\"][\"Reward[String]\"];\n            Assert.NotNull(genericTypeSchema[\"description\"]);\n            Assert.AreEqual(\"A redeemable reward\", genericTypeSchema[\"description\"].ToString());\n\n            var genericProperty = genericTypeSchema[\"properties\"][\"RewardType\"];\n            Assert.NotNull(genericProperty[\"description\"]);\n            Assert.AreEqual(\"The reward type\", genericProperty[\"description\"].ToString());\n        }\n\n        [Test]\n        public void It_does_not_error_on_types_with_public_fields()\n        {\n            var swagger = GetContent<JObject>(\"http:\n            var valueProperty = swagger[\"definitions\"][\"Reward[String]\"][\"properties\"][\"value\"];\n            Assert.IsNull(valueProperty[\"description\"]);\n        }\n\n        [Test]\n        public void It_does_not_clear_previously_added_responses()\n        {\n            SetUpHandler(c =>\n            {\n                IncludeXmlComments(c);\n                c.OperationFilter<InternalServerErrorResponseOperationFilter>();\n            });\n\n            var swagger = GetContent<JObject>(\"http:\n            var responsesProperty = swagger[\"paths\"][\"/xmlannotated\"][\"post\"][\"responses\"];\n            Assert.IsNotNull(responsesProperty[\"500\"]);\n        }\n\n        private void IncludeXmlComments(SwaggerDocsConfig config)\n        {\n            config.IncludeXmlComments(String.Format(@\"{0}\\XmlComments.xml\", AppDomain.CurrentDomain.BaseDirectory));\n        }\n    }\n}\n'Swashbuckle.WebApi/Swashbuckle.Tests/Swagger/XmlTextHelperTests.cs'\n:﻿using NUnit.Framework;\nusing Swashbuckle.Swagger.XmlComments;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\n\nnamespace Swashbuckle.Tests.Swagger\n{\n\n\n\n\n\n\n\n\n\n\n\n    [TestFixture]\n    public class XmlTextHelperTests\n    {\n        [Test]\n        public void XmlComment_returns_verbatim_from_single_line_input()\n        {\n            string input = @\"My single line comment\";\n            string expected = @\"My single line comment\";\n            string actual = XmlTextHelper.NormalizeIndentation(input);\n            Assert.AreEqual(expected, actual);\n        }\n\n        [Test]\n        public void XmlComment_returns_verbatim_from_padding_single_line_input()\n        {\n            string input = @\"\n    My single line indented comment\n\";\n            string expected = @\"My single line indented comment\";\n            string actual = XmlTextHelper.NormalizeIndentation(input);\n            Assert.AreEqual(expected, actual);\n        }\n\n        [Test]\n        public void XmlComment_trims_common_leading_whitespace_over_all_lines()\n        {\n            string input = @\"\n            ## Test Heading\n\n            Another line of text\n\n              * list item 1\n              * list item 2\n\n            Third paragraph\";\n\n            string expected = @\"## Test Heading\n\nAnother line of text\n\n  * list item 1\n  * list item 2\n\nThird paragraph\";\n\n            string actual = XmlTextHelper.NormalizeIndentation(input);\n\n            Assert.AreEqual(expected, actual);\n        }\n\n        [Test]\n        public void XmlComment_does_not_apply_trimming_if_no_common_sequence_found()\n        {\n            string input = @\"\n            ## Test Heading\n\nI'm a line affecting the leading whitespace\n\n              * list item 1\n              * list item 2\n\n            Third paragraph\";\n\n            string expected = @\"            ## Test Heading\n\nI'm a line affecting the leading whitespace\n\n              * list item 1\n              * list item 2\n\n            Third paragraph\";\n\n            string actual = XmlTextHelper.NormalizeIndentation(input);\n\n            Assert.AreEqual(expected, actual);\n        }\n\n        [Test]\n        public void XmlComment_honours_code_blocks_when_finding_common_leading_whitespace()\n        {\n            string input = @\"\n            ## Test Heading\n\n            Another line of text\n\n            \tvar object = {\n            \t\t\"\"key1\"\": value,\n            \t\t\"\"key2\"\": value\n            \t}\n            \";\n\n            string expected =\n@\"## Test Heading\n\nAnother line of text\n\n\tvar object = {\n\t\t\"\"key1\"\": value,\n\t\t\"\"key2\"\": value\n\t}\";\n\n            string actual = XmlTextHelper.NormalizeIndentation(input);\n\n            Assert.AreEqual(expected, actual);\n        }\n\n\n\n\n        [Test]\n        public void XmlComment_handles_mixed_indendation_using_tab_space()\n        {\n            string input = @\"\n\t ## Test Heading\n\n\t Another line of text\n\n\t \tvar object = {\n\t \t\t\"\"key1\"\": value,\n\t \t\t\"\"key2\"\": value\n\t \t}\n\";\n\n            string expected =\n@\"## Test Heading\n\nAnother line of text\n\n\tvar object = {\n\t\t\"\"key1\"\": value,\n\t\t\"\"key2\"\": value\n\t}\";\n\n            string actual = XmlTextHelper.NormalizeIndentation(input);\n\n            Assert.AreEqual(expected, actual);\n        }\n\n\n\n\n        [Test]\n        public void XmlComment_handles_mixed_indendation_using_space_tab()\n        {\n            string input = @\"\n \t## Test Heading\n\n \tAnother line of text\n\n \t\tvar object = {\n \t\t\t\"\"key1\"\": value,\n \t\t\t\"\"key2\"\": value\n \t\t}\n\";\n\n            string expected =\n@\"## Test Heading\n\nAnother line of text\n\n\tvar object = {\n\t\t\"\"key1\"\": value,\n\t\t\"\"key2\"\": value\n\t}\";\n\n            string actual = XmlTextHelper.NormalizeIndentation(input);\n\n            Assert.AreEqual(expected, actual);\n        }\n\n\n\n\n        [Test]\n        public void XmlComment_detects_consistent_space_indendation()\n        {\n            string input = @\"\n    Space Indentation Line 1\n    Space Indentation Line 2\n\tMisplaced Tab Indentation\n    Space Indentation Line 4\n\";\n\n            string expected =\n@\"    Space Indentation Line 1\n    Space Indentation Line 2\n\tMisplaced Tab Indentation\n    Space Indentation Line 4\";\n\n            string actual = XmlTextHelper.NormalizeIndentation(input);\n\n            Assert.AreEqual(expected, actual);\n        }\n\n\n\n\n        [Test]\n        public void XmlComment_detects_consistent_tab_indendation()\n        {\n            string input = @\"\n\tTab Indentation Line 1\n\tTab Indentation Line 2\n    Misplaced Space Indentation\n\tTab Indentation Line 4\n\";\n\n            string expected =\n@\"\tTab Indentation Line 1\n\tTab Indentation Line 2\n    Misplaced Space Indentation\n\tTab Indentation Line 4\";\n\n            string actual = XmlTextHelper.NormalizeIndentation(input);\n\n            Assert.AreEqual(expected, actual);\n        }\n\n        [Test]\n        public void XmlComment_handles_mixed_complex_content()\n        {\n            string input = @\"\n            Some details about this\n            method and why you'd like to use it.\n\n            Here's an example of posting a new `TestModel` to the test endpoint.\n\n                POST /api/test\n\n                {\n                  \"\"prop1\"\": {\n                    \"\"name\"\": \"\"value\"\",\n                    ...\n                  },\n                  \"\"prop2\"\": {\n                    \"\"name\"\": \"\"value\"\",\n                    ...\n                  }\n                }\n\";\n\n            string expected = @\"Some details about this\nmethod and why you'd like to use it.\n\nHere's an example of posting a new `TestModel` to the test endpoint.\n\n    POST /api/test\n\n    {\n      \"\"prop1\"\": {\n        \"\"name\"\": \"\"value\"\",\n        ...\n      },\n      \"\"prop2\"\": {\n        \"\"name\"\": \"\"value\"\",\n        ...\n      }\n    }\";\n\n            string actual = XmlTextHelper.NormalizeIndentation(input);\n\n            Assert.AreEqual(expected, actual);\n        }\n\n\n\n\n        [Test]\n        public void XmlComment_handles_code_on_the_first_line_poorly()\n        {\n            string input = @\"\n    POST /api/test\n\n    {\n      \"\"prop1\"\": {\n        \"\"name\"\": \"\"value\"\",\n        ...\n      },\n      \"\"prop2\"\": {\n        \"\"name\"\": \"\"value\"\",\n        ...\n      }\n    }\n\";\n\n            string expectedButUndesired =\n@\"POST /api/test\n\n{\n  \"\"prop1\"\": {\n    \"\"name\"\": \"\"value\"\",\n    ...\n  },\n  \"\"prop2\"\": {\n    \"\"name\"\": \"\"value\"\",\n    ...\n  }\n}\";\n\n            string actual = XmlTextHelper.NormalizeIndentation(input);\n\n            Assert.AreEqual(expectedButUndesired, actual);\n        }\n\n\n\n\n        [Test]\n        public void XmlComment_handles_code_on_the_first_line_when_subsequent_non_code_lines_are_present()\n        {\n            string input = @\"\n    POST /api/test\n\n    {\n      \"\"prop1\"\": {\n        \"\"name\"\": \"\"value\"\",\n        ...\n      },\n      \"\"prop2\"\": {\n        \"\"name\"\": \"\"value\"\",\n        ...\n      }\n    }\n\nThe above is a sample code block\n\";\n\n            string expectedButUndesired =\n@\"    POST /api/test\n\n    {\n      \"\"prop1\"\": {\n        \"\"name\"\": \"\"value\"\",\n        ...\n      },\n      \"\"prop2\"\": {\n        \"\"name\"\": \"\"value\"\",\n        ...\n      }\n    }\n\nThe above is a sample code block\";\n\n            string actual = XmlTextHelper.NormalizeIndentation(input);\n\n            Assert.AreEqual(expectedButUndesired, actual);\n        }\n    }\n}\n\n'Swashbuckle.WebApi/Swashbuckle.Tests/Swagger/SecurityTests.cs'\n:﻿using System;\nusing NUnit.Framework;\nusing Newtonsoft.Json.Linq;\nusing System.Collections.Generic;\nusing System.Net.Http;\nusing Swashbuckle.Application;\nusing Swashbuckle.Dummy.Controllers;\nusing Swashbuckle.Tests.Swagger;\n\nnamespace Swashbuckle.Tests.SwaggerFilters\n{\n    [TestFixture]\n    public class SecurityTests : SwaggerTestBase\n    {\n        public SecurityTests()\n            : base(\"swagger/docs/{apiVersion}\")\n        {\n        }\n\n        [SetUp]\n        public void SetUp()\n        {\n            SetUpDefaultRouteFor<ProtectedResourcesController>();\n        }\n\n        [Test]\n        public void It_exposes_config_to_define_a_basic_auth_scheme_for_the_api()\n        {\n            SetUpHandler(c =>\n                {\n                    c.BasicAuth(\"basic\")\n                        .Description(\"Basic HTTP Authentication\");\n                });\n\n            var swagger = GetContent<JObject>(\"http:\n            var securityDefinitions = swagger[\"securityDefinitions\"];\n            var expected = JObject.FromObject(new\n                {\n                    basic = new\n                    {\n                        type = \"basic\",\n                        description = \"Basic HTTP Authentication\"\n                    }\n                });\n\n            Assert.AreEqual(expected.ToString(), securityDefinitions.ToString());\n        }\n\n        [Test]\n        public void It_exposes_config_to_define_an_api_key_auth_scheme_for_the_api()\n        {\n            SetUpHandler(c =>\n                {\n                    c.ApiKey(\"apiKey\")\n                        .Description(\"API Key Authentication\")\n                        .Name(\"apiKey\")\n                        .In(\"header\");\n                });\n\n            var swagger = GetContent<JObject>(\"http:\n            var securityDefinitions = swagger[\"securityDefinitions\"];\n            var expected = JObject.FromObject(new\n                {\n                    apiKey = new\n                    {\n                        type = \"apiKey\",\n                        description = \"API Key Authentication\",\n                        name = \"apiKey\",\n                        @in = \"header\",\n                    }\n                });\n\n            Assert.AreEqual(expected.ToString(), securityDefinitions.ToString());\n        }\n\n        [Test]\n        public void It_exposes_config_to_define_oauth2_flows_for_the_api()\n        {\n            SetUpHandler(c =>\n                {\n                    c.OAuth2(\"oauth2\")\n                        .Description(\"OAuth2 Authorization Code Grant\")\n                        .Flow(\"accessCode\")\n                        .AuthorizationUrl(\"https:\n                        .TokenUrl(\"https:\n                        .Scopes(s =>\n                        {\n                            s.Add(\"read\", \"Read access to protected resources\");\n                            s.Add(\"write\", \"Write access to protected resources\");\n                        });\n                });\n\n            var swagger = GetContent<JObject>(\"http:\n            var securityDefinitions = swagger[\"securityDefinitions\"];\n            var expected = JObject.FromObject(new\n                {\n                    oauth2 = new\n                    {\n                        type = \"oauth2\",\n                        description = \"OAuth2 Authorization Code Grant\",\n                        flow = \"accessCode\",\n                        authorizationUrl = \"https:\n                        tokenUrl = \"https:\n                        scopes = new\n                        {\n                            read = \"Read access to protected resources\",\n                            write = \"Write access to protected resources\"\n                        },\n                    }\n                });\n\n            Assert.AreEqual(expected.ToString(), securityDefinitions.ToString());\n        }\n    }\n}",
        "gt": [
            "'Swashbuckle.WebApi/Swashbuckle.Tests/Swagger/XmlTextHelperTests.cs'",
            "'Swashbuckle.WebApi/Swashbuckle.Tests/Swagger/XmlCommentsTests.cs'",
            "'Swashbuckle.WebApi/Swashbuckle.Tests/Swagger/SecurityTests.cs'"
        ]
    },
    {
        "files": [
            "'SharpShell/SharpShell.API/Data/Source/SharpSploit/Misc/Utilities.cs'",
            "'SharpShell/SharpShell/Data/Source/SharpSploit/Enumeration/Network.cs'",
            "'SharpShell/SharpShell.API.SharpShell/SharpShell.cs'"
        ],
        "content": "'SharpShell/SharpShell.API/Data/Source/SharpSploit/Misc/Utilities.cs'\n:﻿\n\n\n\nusing System.IO;\nusing System.IO.Compression;\nusing System.Linq;\nusing System.Reflection;\n\nnamespace SharpSploit.Misc\n{\n    public static class Utilities\n    {\n        private static string[] manifestResources = Assembly.GetExecutingAssembly().GetManifestResourceNames();\n\n        public static byte[] GetEmbeddedResourceBytes(string resourceName)\n        {\n            string resourceFullName = manifestResources.FirstOrDefault(N => N.Contains(resourceName + \".comp\"));\n            if (resourceFullName != null)\n            {\n                return Decompress(Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceFullName).ReadFully());\n            }\n            else if ((resourceFullName = manifestResources.FirstOrDefault(N => N.Contains(resourceName))) != null)\n            {\n                return Assembly.GetExecutingAssembly().GetManifestResourceStream(resourceFullName).ReadFully();\n            }\n            return null;\n        }\n\n        public static byte[] ReadFully(this Stream input)\n        {\n            byte[] buffer = new byte[16 * 1024];\n            using (MemoryStream ms = new MemoryStream())\n            {\n                int read;\n                while((read = input.Read(buffer, 0, buffer.Length)) > 0)\n                {\n                    ms.Write(buffer, 0, read);\n                }\n                return ms.ToArray();\n            }\n        }\n\n        public static byte[] Compress(byte[] Bytes)\n        {\n            byte[] compressedBytes;\n            using (MemoryStream memoryStream = new MemoryStream())\n            {\n                using (DeflateStream deflateStream = new DeflateStream(memoryStream, CompressionMode.Compress))\n                {\n                    deflateStream.Write(Bytes, 0, Bytes.Length);\n                }\n                compressedBytes = memoryStream.ToArray();\n            }\n            return compressedBytes;\n        }\n\n        public static byte[] Decompress(byte[] compressed)\n        {\n            using (MemoryStream inputStream = new MemoryStream(compressed.Length))\n            {\n                inputStream.Write(compressed, 0, compressed.Length);\n                inputStream.Seek(0, SeekOrigin.Begin);\n                using (MemoryStream outputStream = new MemoryStream())\n                {\n                    using (DeflateStream deflateStream = new DeflateStream(inputStream, CompressionMode.Decompress))\n                    {\n                        byte[] buffer = new byte[4096];\n                        int bytesRead;\n                        while ((bytesRead = deflateStream.Read(buffer, 0, buffer.Length)) != 0)\n                        {\n                            outputStream.Write(buffer, 0, bytesRead);\n                        }\n                    }\n                    return outputStream.ToArray();\n                }\n            }\n        }\n    }\n}\n\n'SharpShell/SharpShell/Data/Source/SharpSploit/Enumeration/Network.cs'\n:﻿\n\n\n\nusing System;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Net.NetworkInformation;\nusing System.Collections.Generic;\n\nusing SharpSploit.Generic;\nusing SharpSploit.Misc;\n\nnamespace SharpSploit.Enumeration\n{\n\n\n\n    public class Network\n    {\n\n\n\n\n\n\n\n\n        public static SharpSploitResultList<PortScanResult> PortScan(string ComputerName, int Port, bool Ping = true, int Timeout = 250)\n        {\n            return PortScan(new List<string> { ComputerName }, new List<int> { Port }, Ping, Timeout, 1);\n        }\n\n\n\n\n\n\n\n\n\n\n        public static SharpSploitResultList<PortScanResult> PortScan(IList<string> ComputerNames, int Port, bool Ping = true, int Timeout = 250, int Threads = 100)\n        {\n            return PortScan(ComputerNames, new List<int> { Port }, Ping, Timeout, Threads);\n        }\n\n\n\n\n\n\n\n\n\n\n        public static SharpSploitResultList<PortScanResult> PortScan(string ComputerName, IList<int> Ports, bool Ping = true, int Timeout = 250, int Threads = 100)\n        {\n            return PortScan(new List<string> { ComputerName }, Ports, Ping, Timeout, Threads);\n        }\n\n\n\n\n\n\n\n\n\n\n        public static SharpSploitResultList<PortScanResult> PortScan(IList<string> ComputerNames, IList<int> Ports, bool Ping = true, int Timeout = 250, int Threads = 100)\n        {\n            IList<string> scanAddresses = Utilities.ConvertCidrToIPs(ComputerNames).Distinct().ToList();\n            IList<int> scanPorts = Ports.Where(P => P > 1 && P < 65536).Distinct().ToList();\n            if (Ping)\n            {\n                SharpSploitResultList<PingResult> pingResults = Network.Ping(scanAddresses, Timeout, Threads);\n                scanAddresses = pingResults.Where(PR => PR.IsUp).Select(PR => PR.ComputerName).ToList();\n            }\n            IList<PortScanResult> portScanResults = new List<PortScanResult>();\n            using (CountdownEvent waiter = new CountdownEvent(scanAddresses.Count * Ports.Count))\n            {\n                object portScanResultsLock = new object();\n                int runningThreads = 0;\n                foreach (string ComputerName in scanAddresses)\n                {\n                    foreach (int Port in scanPorts)\n                    {\n                        TcpClient client = null;\n                        if (!Utilities.IsIP(ComputerName))\n                        {\n                            client = new TcpClient();\n                        }\n                        else\n                        {\n                            IPAddress.TryParse(ComputerName, out IPAddress address);\n                            client = new TcpClient(address.AddressFamily);\n                        }\n                        PortScanResult portScanResult = new PortScanResult(ComputerName, Port, true);\n                        while (runningThreads >= Threads)\n                        {\n                            waiter.WaitOne(Timeout);\n                            runningThreads--;\n                        }\n                        IAsyncResult asyncResult = client.BeginConnect(ComputerName, Port, new AsyncCallback((state) => {\n                            try\n                            {\n                                client.EndConnect(state);\n                                client.Close();\n                            }\n                            catch\n                            {\n                                portScanResult.IsOpen = false;\n                            }\n                            if (portScanResult.IsOpen)\n                            {\n                                lock (portScanResultsLock)\n                                {\n                                    portScanResults.Add(portScanResult);\n                                }\n                            }\n                            ((CountdownEvent)state.AsyncState).Signal();\n                        }), waiter);\n                        runningThreads++;\n                    }\n                }\n                waiter.Wait(Timeout * scanAddresses.Count * Ports.Count);\n            }\n            SharpSploitResultList<PortScanResult> results = new SharpSploitResultList<PortScanResult>();\n            results.AddRange(portScanResults);\n\n            return results;\n        }\n\n\n\n\n\n\n\n        public static SharpSploitResultList<PingResult> Ping(string ComputerName, int Timeout = 250)\n        {\n            return Ping(new List<string> { ComputerName }, Timeout, 1);\n        }\n\n\n\n\n\n\n\n        public static SharpSploitResultList<PingResult> Ping(IList<string> ComputerNames, int Timeout = 250, int Threads = 100)\n        {\n            IList<string> pingAddresses = Utilities.ConvertCidrToIPs(ComputerNames).Distinct().ToList();\n            SharpSploitResultList<PingResult> pingResults = new SharpSploitResultList<PingResult>();\n            using (CountdownEvent waiter = new CountdownEvent(pingAddresses.Count))\n            {\n                object pingResultsLock = new object();\n                int runningThreads = 0;\n                foreach (string ComputerName in pingAddresses)\n                {\n                    Ping ping = new Ping();\n                    PingResult pingResult = new PingResult(ComputerName, true);\n                    ping.PingCompleted += new PingCompletedEventHandler((sender, e) =>\n                    {\n                        if (e.Reply != null && e.Reply.Status == IPStatus.Success)\n                        {\n                            lock (pingResultsLock)\n                            {\n                                pingResults.Add(pingResult);\n                            }\n                        }\n                        ((CountdownEvent)e.UserState).Signal();\n                    });\n                    while (runningThreads >= Threads)\n                    {\n                        waiter.WaitOne();\n                        runningThreads--;\n                    }\n                    try\n                    {\n                        ping.SendAsync(ComputerName, Timeout, waiter);\n                        runningThreads++;\n                    }\n                    catch { }\n                }\n                waiter.Wait(Timeout * pingAddresses.Count);\n            }\n            return pingResults;\n        }\n\n\n\n\n        public sealed class PingResult : SharpSploitResult\n        {\n            public string ComputerName { get; } = \"\";\n            public bool IsUp { get; } = false;\n            protected internal override IList<SharpSploitResultProperty> ResultProperties\n            {\n                get\n                {\n                    return new List<SharpSploitResultProperty>\n                    {\n                        new SharpSploitResultProperty\n                        {\n                            Name = \"ComputerName\",\n                            Value = this.ComputerName\n                        },\n                        new SharpSploitResultProperty\n                        {\n                            Name = \"IsUp\",\n                            Value = this.IsUp\n                        }\n                    };\n                }\n            }\n\n            public PingResult(string ComputerName = \"\", bool IsUp = false)\n            {\n                this.ComputerName = ComputerName;\n                this.IsUp = IsUp;\n            }\n        }\n\n\n\n\n        public sealed class PortScanResult : SharpSploitResult\n        {\n            public string ComputerName { get; } = \"\";\n            public int Port { get; } = 0;\n            public bool IsOpen { get; set; } = false;\n            protected internal override IList<SharpSploitResultProperty> ResultProperties\n            {\n                get\n                {\n                    return new List<SharpSploitResultProperty>\n                    {\n                        new SharpSploitResultProperty\n                        {\n                            Name = \"ComputerName\",\n                            Value = this.ComputerName\n                        },\n                        new SharpSploitResultProperty\n                        {\n                            Name = \"Port\",\n                            Value = this.Port\n                        },\n                        new SharpSploitResultProperty\n                        {\n                            Name = \"IsOpen\",\n                            Value = this.IsOpen\n                        }\n                    };\n                }\n            }\n\n            public PortScanResult(string ComputerName = \"\", int Port = 0, bool IsOpen = false)\n            {\n                this.ComputerName = ComputerName;\n                this.Port = Port;\n                this.IsOpen = IsOpen;\n            }\n        }\n\n        private class Utilities\n        {\n            private static IList<string> ConvertCidrToIPs(string CidrComputerName)\n            {\n                if (CidrComputerName == null || CidrComputerName == \"\")\n                {\n                    return new List<string>();\n                }\n                if (!IsCidr(CidrComputerName))\n                {\n                    return new List<string> { CidrComputerName };\n                }\n\n                string[] parts = CidrComputerName.Split('.', '/');\n                uint ipasnum = (Convert.ToUInt32(parts[0]) << 24) | (Convert.ToUInt32(parts[1]) << 16) |\n                               (Convert.ToUInt32(parts[2]) << 8) | (Convert.ToUInt32(parts[3]));\n                int maskbits = Convert.ToInt32(parts[4]);\n                uint mask = 0xffffffff;\n                mask <<= (32 - maskbits);\n                uint ipstart = ipasnum & mask;\n                uint ipend = ipasnum | ~mask;\n                List<string> IPAddresses = new List<string>();\n                for (uint i = ipstart; i < ipend + 1; i++)\n                {\n                    IPAddresses.Add(String.Format(\"{0}.{1}.{2}.{3}\", i >> 24, (i >> 16) & 0xff, (i >> 8) & 0xff, i & 0xff));\n                }\n                return IPAddresses;\n            }\n\n            public static IList<string> ConvertCidrToIPs(IList<string> CidrComputerNames)\n            {\n                List<string> ComputerNames = new List<string>();\n                foreach (string CidrComputerName in CidrComputerNames)\n                {\n                    IList<string> cns = ConvertCidrToIPs(CidrComputerName);\n                    ComputerNames.AddRange(cns);\n                }\n                return ComputerNames;\n            }\n\n            public static bool IsCidr(string ComputerName)\n            {\n                string[] parts = ComputerName.Split('.', '/');\n                if (parts.Length != 5)\n                {\n                    return false;\n                }\n                foreach (string part in parts)\n                {\n                    if (!int.TryParse(part, out int i))\n                    {\n                        return false;\n                    }\n                    if (i < 0 || i > 255)\n                    {\n                        return false;\n                    }\n                }\n                if (!ComputerName.Contains(\"/\"))\n                {\n                    return false;\n                }\n                string ippart = ComputerName.Split('/')[0];\n                return ippart.Split('.').Length == 4;\n            }\n\n            public static bool IsIP(string ComputerName)\n            {\n                return IPAddress.TryParse(ComputerName, out IPAddress address);\n            }\n        }\n    }\n}\n\n'SharpShell/SharpShell.API.SharpShell/SharpShell.cs'\n:﻿\n\n\n\nusing System;\nusing System.Linq;\nusing System.Reflection;\nusing System.Collections.Generic;\n\nnamespace SharpShell.API.SharpShell\n{\n    class SharpShell\n    {\n        public static string WrapperFunctionFormat =\n@\"using System;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Security;\nusing System.Security.Principal;\nusing System.Collections.Generic;\n{0}\n\nusing SharpSploit.Credentials;\nusing SharpSploit.Enumeration;\nusing SharpSploit.Execution;\nusing SharpSploit.Generic;\nusing SharpSploit.Misc;\n\npublic static class {1}\n{{\n    public static object Execute()\n    {{\n        {2}\n    }}\n}}\n\";\n\n        static void Main(string[] args)\n        {\n            bool printPrompt = true;\n            List<string> UsingImports = new List<string>();\n            List<string> lines = new List<string>();\n            APICompiler compiler = new APICompiler(args.Length > 0 ? args[0] : \"http:\n            while (true)\n            {\n\n                if (printPrompt)\n                {\n                    Console.Write(\"SharpShell > \");\n                }\n                else\n                {\n                    Console.Write(\">>> \");\n                }\n\n\n                string line = Console.ReadLine();\n\n\n                if (line.Trim().ToLower() == \"exit\" || line.Trim().ToLower() == \"quit\")\n                {\n                    return;\n                }\n                else if (line.Trim() == \"\")\n                {\n                    continue;\n                }\n                else if (line.Trim().EndsWith(\"\\\\\"))\n                {\n                    printPrompt = false;\n                    lines.Add(line.TrimEnd('\\\\'));\n                    continue;\n                }\n                else if (line.Trim().StartsWith(\"using \") && line.Trim().Split(' ').Length == 2 && line.Trim().EndsWith(\";\"))\n                {\n                    Console.WriteLine(\"Import:\\\"\" + line.Trim() + \"\\\" now being used.\");\n                    UsingImports.Add(line.Trim());\n                    continue;\n                }\n\n                try\n                {\n\n                    printPrompt = true;\n                    string source = String.Join(Environment.NewLine, lines.ToArray());\n                    lines.Clear();\n                    source = source + Environment.NewLine + line;\n                    if (!source.Contains(\"return \"))\n                    {\n                        source = \"return \" + source;\n                    }\n\n\n                    string ClassName = RandomString();\n                    byte[] assemblyBytes = compiler.Compile(new APICompiler.CompilationRequest\n                    {\n                        Source = String.Format(WrapperFunctionFormat, String.Join(Environment.NewLine, UsingImports.ToArray()), ClassName, source),\n                        AssemblyName = \"SharpShell\",\n                        Optimize = true,\n                        TargetDotNetVersion = APICompiler.DotNetVersion.Net35,\n                        OutputKind = APICompiler.OutputKind.DynamicallyLinkedLibrary,\n                        Platform = APICompiler.Platform.AnyCpu\n                    });\n\n\n                    Assembly assembly = Assembly.Load(assemblyBytes);\n                    object result = assembly.GetType(ClassName).GetMethod(\"Execute\").Invoke(null, null);\n                    Console.WriteLine(result.ToString());\n                }\n                catch (CompilationException e)\n                {\n                    Console.Error.WriteLine(e.Message);\n                }\n                catch (Exception e)\n                {\n                    Console.Error.WriteLine(\"RuntimeException: \" + e.Message + e.StackTrace);\n                }\n            }\n        }\n\n        private static Random random = new Random();\n        private static string RandomString()\n        {\n            const string alphachars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n            const string chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n            return alphachars[random.Next(alphachars.Length)] + new string(Enumerable.Repeat(chars, random.Next(10, 30)).Select(s => s[random.Next(s.Length)]).ToArray());\n        }\n    }\n}\n",
        "gt": [
            "'SharpShell/SharpShell.API/Data/Source/SharpSploit/Misc/Utilities.cs'",
            "'SharpShell/SharpShell/Data/Source/SharpSploit/Enumeration/Network.cs'",
            "'SharpShell/SharpShell.API.SharpShell/SharpShell.cs'"
        ]
    },
    {
        "files": [
            "'vssurvivalmod/Systems/WorldGen/Standard/ChunkGen/8.GenVegetationAndPatches/Treegen/ForestFloorSystem.cs'",
            "'vssurvivalmod/Systems/Handbook/Tutorial/TutorialBase.cs'",
            "'vssurvivalmod/Block/BlockBituCoal.cs'"
        ],
        "content": "'vssurvivalmod/Systems/WorldGen/Standard/ChunkGen/8.GenVegetationAndPatches/Treegen/ForestFloorSystem.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing Vintagestory.API.Common;\nusing Vintagestory.API.MathTools;\nusing Vintagestory.API.Server;\nusing Vintagestory.GameContent;\nusing Vintagestory.ServerMods.NoObf;\n\nnamespace Vintagestory.ServerMods\n{\n    public class ForestFloorSystem\n    {\n\n\n\n        public const int Range = 16;\n\n\n\n        public const int GridRowSize = 2 * Range + 1;\n        private ICoreServerAPI sapi;\n        IServerWorldAccessor worldAccessor;\n        private IBlockAccessor api;\n\n\n\n\n        [ThreadStatic]\n        private static short[] outlineThreadSafe;\n\n        int[] forestBlocks;\n\n        List<BlockPatch> underTreePatches;\n        List<BlockPatch> onTreePatches;\n\n        GenVegetationAndPatches genPatchesSystem;\n\n        public ForestFloorSystem(ICoreServerAPI api)\n        {\n            this.sapi = api;\n            this.worldAccessor = sapi.World;\n\n            genPatchesSystem = sapi.ModLoader.GetModSystem<GenVegetationAndPatches>();\n        }\n\n        internal short[] GetOutline()\n        {\n            return outlineThreadSafe ?? (outlineThreadSafe = new short[GridRowSize * GridRowSize]);\n        }\n\n        public void SetBlockPatches(BlockPatchConfig bpc)\n        {\n            forestBlocks = BlockForestFloor.InitialiseForestBlocks(worldAccessor);\n\n            underTreePatches = new List<BlockPatch>();\n            onTreePatches = new List<BlockPatch>();\n\n            for (int i = 0; i < bpc.Patches.Length; i++)\n            {\n                BlockPatch blockPatch = bpc.Patches[i];\n                if (blockPatch.Placement == EnumBlockPatchPlacement.UnderTrees || blockPatch.Placement == EnumBlockPatchPlacement.OnSurfacePlusUnderTrees)\n                {\n                    underTreePatches.Add(blockPatch);\n                }\n                if (blockPatch.Placement == EnumBlockPatchPlacement.OnTrees)\n                {\n                    onTreePatches.Add(blockPatch);\n                }\n            }\n        }\n\n        internal void ClearOutline()\n        {\n\n            short[] outline = GetOutline();\n            for (int i = 0; i < outline.Length; i++) outline[i] = 0;\n        }\n\n        internal void CreateForestFloor(IBlockAccessor blockAccessor, TreeGenConfig config, BlockPos pos, IRandom rnd, int treesInChunkGenerated)\n        {\n            int grassLevelOffset = 0;\n\n            ClimateCondition climate = blockAccessor.GetClimateAt(pos, EnumGetClimateMode.WorldGenValues);\n            if (climate.Temperature > 24 && climate.Rainfall > 160) grassLevelOffset = 2;\n\n            short[] outline = GetOutline();\n            this.api = blockAccessor;\n\n            float forestness = climate.ForestDensity * climate.ForestDensity * 4 * (climate.Fertility + 0.25f);\n\n\n\n            if (climate.Fertility <= 0.25 || forestness <= 0.4) return;\n\n\n            for (int i = 0; i < outline.Length; i++) outline[i] = (short)(outline[i] * forestness + 0.3f);\n\n\n            for (int pass = 0; pass < 7; pass++)\n            {\n                bool noChange = true;\n\n                for (int x = 0; x < Range; x++)\n                {\n                    for (int z = 0; z < Range; z++)\n                    {\n                        if (x == 0 && z == 0) continue;\n                        int zBase = (Range + z) * GridRowSize;\n                        int o = Math.Min((int)outline[zBase + (Range + x)], 18 * 9);\n                        if (o == 0) continue;\n\n                        int n1 = zBase + GridRowSize + (Range + x);\n                        int n2 = zBase + (Range + 1 + x);\n                        if (outline[n1] < o - 18)\n                        {\n                            outline[n1] = (short)(o - 18);\n                            noChange = false;\n                        }\n                        if (outline[n2] < o - 18)\n                        {\n                            outline[n2] = (short)(o - 18);\n                            noChange = false;\n                        }\n\n                        zBase = (Range - z) * GridRowSize;\n                        o = Math.Min((int)outline[zBase + (Range + x)], 18 * 9);\n                        n1 = zBase - GridRowSize + (Range + x);\n                        n2 = zBase + (Range + 1 + x);\n                        if (outline[n1] < o - 18)\n                        {\n                            outline[n1] = (short)(o - 18);\n                            noChange = false;\n                        }\n                        if (outline[n2] < o - 18)\n                        {\n                            outline[n2] = (short)(o - 18);\n                            noChange = false;\n                        }\n                    }\n\n                    for (int z = 0; z < Range; z++)\n                    {\n                        if (x == 0 && z == 0) continue;\n                        int zBase = (Range + z) * GridRowSize;\n                        int o = Math.Min((int)outline[zBase + (Range - x)], 18 * 9);\n                        int n1 = zBase + GridRowSize + (Range - x);\n                        int n2 = zBase + (Range - 1 - x);\n                        if (outline[n1] < o - 18)\n                        {\n                            outline[n1] = (short)(o - 18);\n                            noChange = false;\n                        }\n                        if (outline[n2] < o - 18)\n                        {\n                            outline[n2] = (short)(o - 18);\n                            noChange = false;\n                        }\n\n                        zBase = (Range - z) * GridRowSize;\n                        o = Math.Min((int)outline[zBase + (Range - x)], 18 * 9);\n                        n1 = zBase - GridRowSize + (Range - x);\n                        n2 = zBase + (Range - 1 - x);\n                        if (outline[n1] < o - 18)\n                        {\n                            outline[n1] = (short)(o - 18);\n                            noChange = false;\n                        }\n                        if (outline[n2] < o - 18)\n                        {\n                            outline[n2] = (short)(o - 18);\n                            noChange = false;\n                        }\n                    }\n                }\n                if (noChange) break;\n            }\n\n\n            BlockPos currentPos = new BlockPos();\n            for (int canopyIndex = 0; canopyIndex < outline.Length; canopyIndex++)\n            {\n                int intensity = outline[canopyIndex];\n                if (intensity == 0) continue;\n\n                int dz = canopyIndex / GridRowSize - Range;\n                int dx = canopyIndex % GridRowSize - Range;\n                currentPos.Set(pos.X + dx, pos.Y, pos.Z + dz);\n                currentPos.Y = blockAccessor.GetTerrainMapheightAt(currentPos);\n\n                if (currentPos.Y - pos.Y < 4)\n                {\n                    CheckAndReplaceForestFloor(currentPos, intensity, grassLevelOffset);\n                }\n            }\n\n            GenPatches(blockAccessor, pos, forestness, config.Treetype, rnd);\n        }\n\n\n        BlockPos tmpPos = new BlockPos();\n        private void GenPatches(IBlockAccessor blockAccessor, BlockPos pos, float forestNess, EnumTreeType treetype, IRandom rnd)\n        {\n            var bpc = genPatchesSystem.bpc;\n            int radius = 5;\n            int worldheight = blockAccessor.MapSizeY;\n\n            int cnt = underTreePatches?.Count ?? 0;\n            for (int i = 0; i < cnt; i++)\n            {\n                BlockPatch bPatch = underTreePatches[i];\n                if (bPatch.TreeType != EnumTreeType.Any && bPatch.TreeType != treetype)\n                {\n                    continue;\n                }\n\n                float chance = 0.003f * forestNess * bPatch.Chance * bpc.ChanceMultiplier.nextFloat(1f, rnd);\n\n\n\n                while (chance-- > rnd.NextFloat())\n                {\n                    int dx = rnd.NextInt(2 * radius) - radius;\n                    int dz = rnd.NextInt(2 * radius) - radius;\n\n                    tmpPos.Set(pos.X + dx, 0, pos.Z + dz);\n\n                    int y = blockAccessor.GetTerrainMapheightAt(tmpPos);\n                    if (y <= 0 || y >= worldheight - 8) continue;\n\n                    tmpPos.Y = y;\n\n                    var climate = blockAccessor.GetClimateAt(tmpPos, EnumGetClimateMode.WorldGenValues);\n                    if (climate == null)\n                    {\n                        continue;\n                    }\n\n                    if (bpc.IsPatchSuitableUnderTree(bPatch, worldheight, climate, y))\n                    {\n                        int regionX = pos.X / blockAccessor.RegionSize;\n                        int regionZ = pos.Z / blockAccessor.RegionSize;\n                        if (bPatch.MapCode != null && rnd.NextInt(255) > genPatchesSystem.GetPatchDensity(bPatch.MapCode, tmpPos.X, tmpPos.Z, blockAccessor.GetMapRegion(regionX, regionZ)))\n                        {\n                            continue;\n                        }\n\n                        int firstBlockId = 0;\n                        bool found = true;\n\n                        if (bPatch.BlocksByRockType != null)\n                        {\n                            found = false;\n                            int dy = 1;\n                            while (dy < 5 && y - dy > 0)\n                            {\n                                string lastCodePart = blockAccessor.GetBlock(tmpPos.X, y - dy, tmpPos.Z).LastCodePart();\n                                if (genPatchesSystem.RockBlockIdsByType.TryGetValue(lastCodePart, out firstBlockId)) { found = true; break; }\n                                dy++;\n                            }\n                        }\n\n                        if (found)\n                        {\n                            var blockPatchRandom = new LCGRandom(sapi.WorldManager.Seed + i);\n                            blockPatchRandom.InitPositionSeed(tmpPos.X, tmpPos.Z);\n                            bPatch.Generate(blockAccessor, rnd, tmpPos.X, tmpPos.Y, tmpPos.Z, firstBlockId, false);\n                        }\n                    }\n                }\n            }\n\n            cnt = onTreePatches?.Count ?? 0;\n            for (int i = 0; i < cnt; i++)\n            {\n                BlockPatch blockPatch = onTreePatches[i];\n\n                float chance = 3 * forestNess * blockPatch.Chance * bpc.ChanceMultiplier.nextFloat(1f, rnd);\n\n                while (chance-- > rnd.NextFloat())\n                {\n                    int dx = 1 - rnd.NextInt(2) * 2;\n                    int dy = rnd.NextInt(5);\n                    int dz = 1 - rnd.NextInt(2) * 2;\n\n                    tmpPos.Set(pos.X + dx, pos.Y + dy, pos.Z + dz);\n\n                    var block = api.GetBlock(tmpPos);\n                    if (block.Id != 0) continue;\n                    BlockFacing facing = null;\n\n                    for (int j = 0; j < 4; j++)\n                    {\n                        var f = BlockFacing.HORIZONTALS[j];\n                        var nblock = api.GetBlock(tmpPos.X + f.Normali.X, tmpPos.Y, tmpPos.Z + f.Normali.Z);\n                        if (nblock is BlockLog && nblock.Variant[\"type\"] != \"resin\")\n                        {\n                            facing = f;\n                            break;\n                        }\n                    }\n                    if (facing == null) break;\n\n                    var climate = blockAccessor.GetClimateAt(tmpPos, EnumGetClimateMode.WorldGenValues);\n                    if (climate == null)\n                    {\n                        continue;\n                    }\n\n                    if (bpc.IsPatchSuitableUnderTree(blockPatch, worldheight, climate, tmpPos.Y))\n                    {\n                        int regionX = pos.X / blockAccessor.RegionSize;\n                        int regionZ = pos.Z / blockAccessor.RegionSize;\n                        if (blockPatch.MapCode != null && rnd.NextInt(255) > genPatchesSystem.GetPatchDensity(blockPatch.MapCode, tmpPos.X, tmpPos.Z, blockAccessor.GetMapRegion(regionX, regionZ)))\n                        {\n                            continue;\n                        }\n\n                        int index = rnd.NextInt(blockPatch.Blocks.Length);\n                        blockPatch.Blocks[index].TryPlaceBlockForWorldGen(blockAccessor, tmpPos, facing, rnd);\n                    }\n                }\n            }\n        }\n\n\n\n\n\n\n\n\n        private void CheckAndReplaceForestFloor(BlockPos pos, int intensity, int grassLevelOffset)\n        {\n            if (forestBlocks == null) return;\n\n            Block soilBlock = api.GetBlock(pos);\n\n            if (soilBlock is BlockForestFloor || soilBlock is BlockSoil)\n            {\n\n                if (soilBlock is BlockForestFloor bff)\n                {\n                    int existingLevel = bff.CurrentLevel();\n                    intensity += existingLevel * 18 - 9;\n                    intensity = Math.Min(intensity, Math.Max(existingLevel * 18, (BlockForestFloor.MaxStage - 1) * 18));\n                }\n\n\n                int forestFloorBlockId;\n                int level = grassLevelOffset + intensity / 18;\n                if (level >= forestBlocks.Length - 1)\n                {\n                    forestFloorBlockId = forestBlocks[level > forestBlocks.Length ? 0 : 1];\n                }\n                else\n                {\n                    if (level == 0) level = 1;\n                    forestFloorBlockId = forestBlocks[forestBlocks.Length - level];\n                }\n\n                api.SetBlock(forestFloorBlockId, pos);\n            }\n        }\n\n\n\n        private int GetRandomBlock(BlockPatch blockPatch)\n        {\n            return blockPatch.Blocks[0].Id;\n        }\n\n        private float GetDistance(ClimateCondition climate, BlockPatch variant)\n        {\n            float fertDist, rainDist, tempDist, forestDist;\n\n            tempDist = Math.Abs(climate.Temperature * 2 - variant.MaxTemp - variant.MinTemp) / (variant.MaxTemp - variant.MinTemp);\n            if (tempDist > 1f) return 5f;\n            fertDist = Math.Abs(climate.Fertility * 2 - variant.MaxFertility - variant.MinFertility) / (variant.MaxFertility - variant.MinFertility);\n            if (fertDist > 1f) return 5f;\n            rainDist = Math.Abs(climate.Rainfall * 2 - variant.MaxRain - variant.MinRain) / (variant.MaxRain - variant.MinRain);\n            if (rainDist > 1.3f) return 5f;\n            forestDist = Math.Abs((climate.ForestDensity + 0.2f) * 2 - variant.MaxForest - variant.MinForest) / (variant.MaxForest - variant.MinForest);\n\n            return tempDist * tempDist + fertDist * fertDist + rainDist * rainDist + forestDist * forestDist;\n        }\n    }\n}\n\n\n'vssurvivalmod/Systems/Handbook/Tutorial/TutorialBase.cs'\n:﻿using Newtonsoft.Json.Linq;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Vintagestory.API.Client;\nusing Vintagestory.API.Common;\nusing Vintagestory.API.Datastructures;\n\nnamespace Vintagestory.GameContent\n{\n    public interface ITutorial\n    {\n        bool Complete { get; }\n        float Progress { get; }\n        string PageCode { get; }\n        void Restart();\n        void Skip(int count);\n        void Load();\n        void Save();\n\n        bool OnStateUpdate(ActionBoolReturn<TutorialStepBase> stepCall);\n\n        List<TutorialStepBase> GetTutorialSteps(bool skipOld);\n    }\n\n    public abstract class TutorialBase : ITutorial\n    {\n        protected ICoreClientAPI capi;\n\n        protected JsonObject stepData;\n        protected List<TutorialStepBase> steps = new List<TutorialStepBase>();\n        public int currentStep;\n        public string pageCode;\n\n        protected TutorialBase(ICoreClientAPI capi, string pageCode)\n        {\n            this.capi = capi;\n            this.pageCode = pageCode;\n        }\n\n        public JsonObject StepDataForSaving\n        {\n            get\n            {\n                if (stepData == null)\n                {\n                    stepData = new JsonObject(new JObject());\n                }\n\n                return stepData;\n            }\n        }\n\n        public string PageCode => pageCode;\n\n        public void Restart()\n        {\n            stepData = new JsonObject(new JObject());\n\n            foreach (var step in steps)\n            {\n                step.Restart();\n                step.ToJson(StepDataForSaving);\n            }\n\n            Save();\n        }\n\n\n        public bool OnStateUpdate(ActionBoolReturn<TutorialStepBase> stepCall)\n        {\n            bool anyDirty = false;\n            bool anyNowCompleted = false;\n\n            foreach (var step in steps)\n            {\n                if (step.Complete) continue;\n                bool dirty = stepCall(step);\n                anyDirty |= dirty;\n\n                if (dirty) step.ToJson(StepDataForSaving);\n\n                if (step.Complete) anyNowCompleted = true;\n            }\n\n            if (anyNowCompleted)\n            {\n                capi.Gui.PlaySound(new AssetLocation(\"sounds/tutorialstepsuccess.ogg\"), false, 1);\n                Save();\n            }\n\n            return anyDirty;\n        }\n\n        public bool Complete => steps[steps.Count - 1].Complete;\n\n        public float Progress => steps.Sum((t) => t.Complete ? 1 : 0) / (float)steps.Count;\n\n        public void addSteps(params TutorialStepBase[] steps)\n        {\n            for (int i = 0; i < steps.Length; i++)\n            {\n                steps[i].index = i;\n            }\n\n            this.steps.AddRange(steps);\n        }\n\n\n        public List<TutorialStepBase> GetTutorialSteps(bool skipOld)\n        {\n            if (this.steps.Count == 0) initTutorialSteps();\n\n            List<TutorialStepBase> steps = new List<TutorialStepBase>();\n            int showActive = 1;\n\n            foreach (var step in this.steps)\n            {\n                if (showActive <= 0) break;\n                if (stepData != null) step.FromJson(stepData);\n\n                steps.Add(step);\n\n                if (!step.Complete) showActive--;\n            }\n\n            if (skipOld)\n            {\n                while (steps.Count > 1)\n                {\n                    if (steps[0].Complete)\n                    {\n                        steps.RemoveAt(0);\n                        continue;\n                    }\n                    break;\n                }\n            }\n\n            return steps;\n        }\n\n        protected abstract void initTutorialSteps();\n\n        public void Skip(int cnt)\n        {\n            while (cnt-- > 0)\n            {\n                var step = steps.FirstOrDefault(s => !s.Complete);\n                if (step != null)\n                {\n                    step.Skip();\n                    step.ToJson(StepDataForSaving);\n                }\n            }\n\n            capi.Gui.PlaySound(new AssetLocation(\"sounds/tutorialstepsuccess.ogg\"), false, 1);\n        }\n\n\n        public void Save()\n        {\n            JsonObject job = new JsonObject(new JObject());\n            foreach (var step in steps)\n            {\n                step.ToJson(job);\n            }\n\n            capi.StoreModConfig(job, \"tutorial-\"+PageCode+\".json\");\n        }\n\n        public void Load()\n        {\n            stepData = capi.LoadModConfig(\"tutorial-\" + PageCode + \".json\");\n            if (stepData != null)\n            {\n                foreach (var step in steps)\n                {\n                    step.FromJson(stepData);\n                }\n            }\n        }\n\n    }\n}\n'vssurvivalmod/Block/BlockBituCoal.cs'\n:using Vintagestory.API.Common;\nusing Vintagestory.API.Config;\nusing Vintagestory.API.MathTools;\nusing Vintagestory.API.Server;\nusing Vintagestory.ServerMods;\n\nnamespace Vintagestory.GameContent;\n\npublic class BlockBituCoal: BlockOre\n{\n    private Block clay;\n    private static RockStrataConfig rockStrata;\n    private static LCGRandom rand;\n    private const int chunksize = GlobalConstants.ChunkSize;\n    private static int regionChunkSize;\n\n    public override void OnLoaded(ICoreAPI api)\n    {\n        base.OnLoaded(api);\n        clay = api.World.BlockAccessor.GetBlock(new AssetLocation(\"rawclay-fire-none\"));\n\n        if (rockStrata == null && api is ICoreServerAPI sapi)\n        {\n            regionChunkSize = sapi.WorldManager.RegionSize / chunksize;\n            rockStrata= BlockLayerConfig.GetInstance(sapi).RockStrata;\n            rand = new LCGRandom(api.World.Seed);\n        }\n    }\n\n    public override void OnUnloaded(ICoreAPI api)\n    {\n        base.OnUnloaded(api);\n        rockStrata = null;\n        clay = null;\n        rand = null;\n    }\n\n    public float GetDepositDistortTop(BlockPos pos, int lx, int lz, IMapChunk heremapchunk)\n    {\n        var rdx = (pos.X / chunksize) % regionChunkSize;\n        var rdz = (pos.Z / chunksize) % regionChunkSize;\n        var reg = heremapchunk.MapRegion;\n        var step = (float)heremapchunk.MapRegion.OreMapVerticalDistortTop.InnerSize / regionChunkSize;\n        return reg.OreMapVerticalDistortTop.GetIntLerpedCorrectly(rdx * step + step * ((float)lx / chunksize), rdz * step + step * ((float)lz / chunksize));\n    }\n\n    public float GetDepositDistortBot(BlockPos pos, int lx, int lz, IMapChunk heremapchunk)\n    {\n        var rdx = (pos.X / chunksize) % regionChunkSize;\n        var rdz = (pos.Z / chunksize) % regionChunkSize;\n        var reg = heremapchunk.MapRegion;\n        var step = (float)heremapchunk.MapRegion.OreMapVerticalDistortBottom.InnerSize / regionChunkSize;\n        return reg.OreMapVerticalDistortBottom.GetIntLerpedCorrectly(rdx * step + step * ((float)lx / chunksize), rdz * step + step * ((float)lz / chunksize));\n    }\n\n    public override bool TryPlaceBlockForWorldGen(IBlockAccessor blockAccessor, BlockPos pos, BlockFacing onBlockFace, IRandom worldgenRandom, BlockPatchAttributes attributes = null)\n    {\n        var mapChunk = blockAccessor.GetMapChunk(pos.X / chunksize, pos.Z / chunksize);\n        var posX = pos.X % chunksize;\n        var posZ = pos.Z % chunksize;\n        var extraDistX = (int)GetDepositDistortTop(pos, posX, posZ, mapChunk) / 7;\n        var extraDistZ = (int)GetDepositDistortBot(pos, posX, posZ, mapChunk) / 7;\n        rand.InitPositionSeed(pos.X / 100 + extraDistX, pos.Z / 100 + extraDistZ);\n\n        var beloPos = pos.DownCopy();\n        var blockBelow = blockAccessor.GetBlock(beloPos);\n        for (int i = 0; i < rockStrata.Variants.Length; i++)\n        {\n            if (rockStrata.Variants[i].RockGroup == EnumRockGroup.Sedimentary && rockStrata.Variants[i].BlockCode == blockBelow.Code)\n            {\n                if (rand.NextDouble() > 0.6)\n                {\n                    blockAccessor.SetBlock(clay.BlockId, beloPos);\n                }\n                break;\n            }\n        }\n        blockAccessor.SetBlock(BlockId, pos);\n\n        return base.TryPlaceBlockForWorldGen(blockAccessor, pos, onBlockFace, worldgenRandom, attributes);\n    }\n}\n",
        "gt": [
            "'vssurvivalmod/Systems/Handbook/Tutorial/TutorialBase.cs'",
            "'vssurvivalmod/Systems/WorldGen/Standard/ChunkGen/8.GenVegetationAndPatches/Treegen/ForestFloorSystem.cs'",
            "'vssurvivalmod/Block/BlockBituCoal.cs'"
        ]
    },
    {
        "files": [
            "'OpenC1/OpenC1/Physics/VehicleChassis.cs'",
            "'OpenC1/OpenC1/Screens/SelectCarScreen.cs'",
            "'OpenC1/OpenC1/Game1.cs'",
            "'OpenC1/OpenC1/Screens/PauseMenuScreen.cs'"
        ],
        "content": "'OpenC1/OpenC1/Physics/VehicleChassis.cs'\n:﻿using System;\nusing System.IO;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing Microsoft.Xna.Framework;\nusing Microsoft.Xna.Framework.Graphics;\nusing StillDesign.PhysX;\nusing OneamEngine;\nusing OpenC1;\nusing OpenC1.Parsers;\nusing OneAmEngine;\n\nnamespace OpenC1.Physics\n{\n\n    class VehicleChassis\n    {\n        public Vehicle Vehicle { get; set; }\n        public Actor Actor { get { return _physXActor; } }\n        public List<VehicleWheel> Wheels {get; private set; }\n        public Motor Motor { get; private set; }\n\n        public bool Backwards {get; private set; }\n        public float Speed { get; private set; }\n\n        public CircularList LastSpeeds = new CircularList(5);\n\n        private Actor _physXActor;\n        float _currentTorque;\n        float _desiredSteerAngle = 0f;\n        float _handbrake;\n        public float _steerAngle = 0.0f;\n        float _motorTorque = 0.0f;\n        float _brakeTorque = 0.0f;\n        TireFunctionDescription _frontLateralTireFn, _rearLateralTireFn;\n        public float _heightOffset;\n        private Vector3 _massPos;\n\n\n        public VehicleChassis(Vehicle vehicle)\n        {\n            Vehicle = vehicle;\n\n            Wheels = new List<VehicleWheel>();\n\n            VehicleFile carFile = vehicle.Config;\n\n            ActorDescription actorDesc = new ActorDescription();\n\n            actorDesc.BodyDescription = new BodyDescription();\n            actorDesc.BodyDescription.Mass = carFile.Mass;\n            var boxDesc = new BoxShapeDescription();\n            boxDesc.Size = carFile.BoundingBox.GetSize();\n            boxDesc.LocalPosition = carFile.BoundingBox.GetCenter();\n            boxDesc.Name = PhysXConsts.VehicleBody;\n            boxDesc.Flags |= ShapeFlag.PointContactForce;\n            actorDesc.Shapes.Add(boxDesc);\n\n            foreach (Vector3 extraPoint in carFile.ExtraBoundingBoxPoints)\n            {\n                var extraDesc = new SphereShapeDescription(0.2f);\n                extraDesc.LocalPosition = extraPoint;\n                extraDesc.Mass = 0;\n                actorDesc.Shapes.Add(extraDesc);\n            }\n\n            using (UtilitiesLibrary lib = new UtilitiesLibrary())\n            {\n                Vector3 size = carFile.Size;\n                Vector3 inertiaTensor = lib.ComputeBoxInteriaTensor(Vector3.Zero, carFile.Mass, size);\n\n            }\n\n\n            TireFunctionDescription lngTFD = new TireFunctionDescription();\n            lngTFD.ExtremumSlip = 0.1f;\n            lngTFD.ExtremumValue = 4f;\n            lngTFD.AsymptoteSlip = 2.0f;\n            lngTFD.AsymptoteValue = 3.2f;\n\n            _rearLateralTireFn = new TireFunctionDescription();\n\n            _rearLateralTireFn.ExtremumSlip = 0.2f;\n            _rearLateralTireFn.ExtremumValue = 2.1f;\n            _rearLateralTireFn.AsymptoteSlip = 0.0013f * carFile.Mass;\n            _rearLateralTireFn.AsymptoteValue = 0.02f;\n\n            _frontLateralTireFn = _rearLateralTireFn;\n            _frontLateralTireFn.ExtremumValue = 1.9f;\n\n            MaterialDescription md = new MaterialDescription();\n            md.Flags = MaterialFlag.DisableFriction;\n            Material m = PhysX.Instance.Scene.CreateMaterial(md);\n\n            int wheelIndex = 0;\n\n            foreach (CWheelActor wheel in carFile.WheelActors)\n            {\n                WheelShapeDescription wheelDesc = new WheelShapeDescription();\n                wheelDesc.InverseWheelMass = 0.08f;\n                wheelDesc.LongitudalTireForceFunction = lngTFD;\n                wheelDesc.Flags = WheelShapeFlag.ClampedFriction;\n                wheelDesc.Material = m;\n\n                wheelDesc.Radius = wheel.IsDriven ? carFile.DrivenWheelRadius : carFile.NonDrivenWheelRadius;\n                wheelDesc.SuspensionTravel = (wheel.IsFront ? carFile.SuspensionGiveFront : carFile.SuspensionGiveRear) * 18;\n\n                float heightModifier = (wheelDesc.SuspensionTravel + wheelDesc.Radius) / wheelDesc.SuspensionTravel;\n\n                SpringDescription spring = new SpringDescription();\n                if (carFile.Mass > 3000)\n                    spring.SpringCoefficient = 10.5f * heightModifier * carFile.Mass;\n                else\n                    spring.SpringCoefficient = 6.5f * heightModifier * Math.Min(1000, carFile.Mass);\n                spring.DamperCoefficient = carFile.SuspensionDamping * 6f;\n\n                wheelDesc.Suspension = spring;\n                wheelDesc.LocalPosition = wheel.Position;\n                wheelDesc.Name = (wheelIndex).ToString();\n                wheelIndex++;\n\n                wheelDesc.LateralTireForceFunction = wheel.IsFront ? _frontLateralTireFn : _rearLateralTireFn;\n                actorDesc.Shapes.Add(wheelDesc);\n            }\n\n            _physXActor = PhysX.Instance.Scene.CreateActor(actorDesc);\n\n\n            _heightOffset = _physXActor.Shapes[0].LocalPosition.Y * -2;\n            if (_heightOffset < 0) _heightOffset = 0;\n\n            foreach (Shape shape in _physXActor.Shapes)\n            {\n                shape.LocalPosition += new Vector3(0, _heightOffset, 0);\n                if (shape is WheelShape)\n                {\n                    wheelIndex = int.Parse(shape.Name);\n                    Wheels.Add(new VehicleWheel(this, carFile.WheelActors[wheelIndex], (WheelShape)shape, carFile.WheelActors[wheelIndex].IsLeft ? 0.17f : -0.17f) { Index = wheelIndex });\n                }\n            }\n\n            _physXActor.Group = PhysXConsts.VehicleId;\n            _physXActor.UserData = vehicle;\n\n            _physXActor.WakeUp(60.0f);\n\n\n\n\n            Vector3 massPos = carFile.CenterOfMass;\n            massPos.Y = carFile.WheelActors[0].Position.Y - carFile.NonDrivenWheelRadius + _heightOffset + 0.35f;\n            _massPos = massPos;\n            _physXActor.SetCenterOfMassOffsetLocalPosition(massPos);\n\n\n            List<float> power = new List<float>(new float[] { 0.5f, 0.5f, 0.5f, 1f, 1f, 1.0f, 1.0f, 0 });\n            List<float> ratios = new List<float>(new float[] { 3.227f, 2.360f, 1.685f, 1.312f, 1.000f, 0.793f });\n\n            BaseGearbox gearbox = BaseGearbox.Create(false, ratios, 0.4f);\n            Motor = new Motor(power, carFile.EnginePower, 6f, carFile.TopSpeed, gearbox);\n            Motor.Gearbox.CurrentGear = 0;\n        }\n\n\n\n\n\n        public void FixSuspension()\n        {\n            foreach (VehicleWheel wheel in this.Wheels)\n            {\n                Vector3 localPos = wheel.Shape.LocalPosition;\n                localPos.Y += wheel.CurrentSuspensionTravel;\n                wheel.Shape.LocalPosition = localPos;\n            }\n        }\n\n        public void Delete()\n        {\n            _physXActor.Dispose();\n            _physXActor = null;\n        }\n\n\n        public float SteerRatio\n        {\n            get { return _steerAngle / 0.5f; }\n        }\n\n\n        public void Update()\n        {\n            LastSpeeds.Add(Speed);\n\n            GameConsole.WriteLine(\"Height\", Actor.GlobalPosition.Y);\n\n\n\n\n\n\n\n            Vector3 vDirection = _physXActor.GlobalOrientation.Forward;\n            Vector3 vNormal = _physXActor.LinearVelocity * vDirection;\n            Speed = vNormal.Length() * 2.9f;\n\n            float endLocal = _desiredSteerAngle;\n\n            float diff = Math.Abs(endLocal - _steerAngle);\n            float max = 0.0017f;\n            if (diff > 0.0025f)\n            {\n\n                if (diff > max)\n                    diff = max;\n                else\n                    diff *= 0.05f;\n\n                diff *= Engine.ElapsedSeconds * 1000;\n                if (endLocal > _steerAngle)\n                {\n                    _steerAngle += diff;\n                }\n                else\n                {\n                    _steerAngle -= diff;\n                }\n\n\n                float steerFactor = Vehicle.Driver.ModerateSteeringAtSpeed ? Math.Min(Math.Max(0.1f, (1 - Speed / 175)), 1) : 1;\n\n                foreach (VehicleWheel wheel in Wheels)\n                {\n                    if (wheel.CActor.IsSteerable)\n                        wheel.Shape.SteeringAngle = _steerAngle * steerFactor;\n                }\n            }\n\n            if (Speed < 1f)\n            {\n                if (Backwards && _currentTorque > 0.01f)\n                {\n                    Backwards = false;\n                    Motor.Gearbox.CurrentGear = 1;\n                }\n                else if (!Backwards && _currentTorque < -0.01f)\n                {\n                    Backwards = true;\n                    Motor.Gearbox.CurrentGear = -1;\n                }\n            }\n\n            bool isSkiddingTooMuch = false;\n            Motor.WheelsSpinning = false;\n            float maxlat = 0;\n            bool allWheelsInAir = true;\n            foreach (VehicleWheel wheel in Wheels)\n            {\n                wheel.Update();\n                if (!wheel.InAir) allWheelsInAir = false;\n                if (wheel.CActor.IsDriven && (wheel.IsSkiddingLng || wheel.InAir))\n                {\n                    Motor.WheelsSpinning = true;\n                }\n                if (maxlat < Math.Abs(wheel.LatSlip)) maxlat = Math.Abs(wheel.LatSlip);\n                if (Math.Abs(wheel.LatSlip) > 0.8f && !wheel.InAir) isSkiddingTooMuch = true;\n            }\n\n            if (!InAir)\n            {\n                _physXActor.MaximumAngularVelocity = 3.5f;\n\n                if (Speed < 10)\n                {\n                    _physXActor.LinearDamping = Motor.IsAccelerating ? 1 : 4;\n                    _physXActor.AngularDamping = 0.02f;\n                    GameConsole.WriteLine(\"mode slow\");\n                }\n                else if ((_steerAngle < -0.1f && Wheels[0].LatSlip > 0.35f) || (_steerAngle > 0.1f && Wheels[0].LatSlip < -0.35f))\n                {\n                    _physXActor.AngularDamping = maxlat * 2.05f;\n                    _physXActor.LinearDamping = maxlat * 1.3f;\n                    Motor.WheelsSpinning = true;\n                    GameConsole.WriteLine(\"mode alt steer\");\n                }\n                else if ((_steerAngle < -0.1f && Wheels[0].LatSlip < -0.4f) || (_steerAngle > 0.1f && Wheels[0].LatSlip > 0.4f))\n                {\n                    _physXActor.AngularDamping = 0;\n                    _physXActor.LinearDamping = Speed > 20 ? maxlat * 1.18f : maxlat * 0.9f;\n                    GameConsole.WriteLine(\"mode steer into\");\n                }\n                else if ((Math.Abs(_steerAngle) < 0.1f && Math.Abs(Wheels[0].LatSlip) > 0.4f))\n                {\n                    _physXActor.AngularDamping = Speed > 20 ? maxlat * 0.6f : maxlat * 1.9f;\n                    _physXActor.LinearDamping = Speed > 20 ? maxlat * 1.18f : maxlat * 0.8f;\n                    GameConsole.WriteLine(\"no steer\");\n                }\n                else if (isSkiddingTooMuch)\n                {\n                    if (Speed < 20)\n                        _physXActor.LinearDamping = maxlat * 0.8f;\n                    else\n                        _physXActor.LinearDamping = maxlat * 0.4f;\n                    _physXActor.AngularDamping = 0.01f;\n                    GameConsole.WriteLine(\"mode overskid\");\n                }\n                else\n                {\n                    _physXActor.LinearDamping = 0;\n                    _physXActor.AngularDamping = 0.01f;\n                }\n\n                if (_physXActor.GlobalOrientation.Up.Y < 0)\n                {\n                    _physXActor.LinearDamping = 7f;\n                    _physXActor.AngularDamping = 2f;\n                    GameConsole.WriteLine(\"mode on roof\");\n                }\n            }\n            if (allWheelsInAir)\n            {\n                _physXActor.AngularDamping = 0.00f;\n                _physXActor.MaximumAngularVelocity = 10f;\n                _physXActor.LinearDamping = 0;\n                GameConsole.WriteLine(\"mode in air\");\n            }\n        }\n\n\n        public void OutputDebugInfo()\n        {\n            GameConsole.WriteLine(\"Speed\", Speed);\n            GameConsole.WriteLine(\"Brake\", _brakeTorque);\n        }\n\n\n        public void Brake(float value)\n        {\n            Motor.Throttle = -value;\n            Motor.Update(Speed);\n            float motorTorque = Motor.CurrentPowerOutput;\n            _currentTorque = motorTorque;\n\n            if (Backwards)\n            {\n                _motorTorque = motorTorque;\n                _brakeTorque = 0f;\n            }\n            else\n            {\n                _motorTorque = 0.0f;\n                _brakeTorque = Math.Max(870, _brakeTorque + 0.9f);\n            }\n            UpdateTorque();\n\n        }\n\n        public void Accelerate(float value)\n        {\n            Motor.Throttle = value;\n            Motor.Update(Speed);\n            float motorTorque = Motor.CurrentPowerOutput;\n            _currentTorque = motorTorque;\n\n            if (motorTorque > 0.0001f)\n            {\n                if (Backwards)\n                {\n                    _motorTorque = 0f;\n                    _brakeTorque = Math.Max(700, _brakeTorque + 0.7f);\n                }\n                else\n                {\n                    _motorTorque = motorTorque;\n                    _brakeTorque = 0.0f;\n                }\n            }\n            else\n            {\n                _motorTorque = 0.0f;\n                _brakeTorque = Motor.CurrentFriction;\n            }\n\n            UpdateTorque();\n            _physXActor.WakeUp();\n        }\n\n        public void Steer(float angle)\n        {\n            _desiredSteerAngle = angle*0.33f;\n        }\n\n        public void PullHandbrake()\n        {\n\n\n            _handbrake = 1;\n        }\n\n        public void ReleaseHandbrake()\n        {\n            if (_handbrake == 0) return;\n            _handbrake -= Engine.ElapsedSeconds * 1.8f;\n            if (_handbrake < 0) _handbrake = 0;\n        }\n\n\n        private void UpdateTorque()\n        {\n            foreach (VehicleWheel wheel in Wheels)\n            {\n                if (wheel.CActor.IsDriven)\n                    wheel.Shape.MotorTorque = -_motorTorque;\n                if (wheel.IsRear)\n                    wheel.ApplyHandbrake(_handbrake);\n            }\n\n            if (_handbrake == 1) return;\n\n\n            foreach (VehicleWheel wheel in Wheels)\n            {\n                wheel.Shape.BrakeTorque = _brakeTorque;\n            }\n        }\n\n\n        public void Reset()\n        {\n            Matrix m = _physXActor.GlobalOrientation;\n            m.Up = Vector3.Up;\n\n            _physXActor.GlobalOrientation = m;\n            _physXActor.GlobalPosition += new Vector3(0.0f, 1.5f, 0.0f);\n            _physXActor.LinearMomentum = _physXActor.LinearVelocity = Vector3.Zero;\n            _physXActor.AngularMomentum = _physXActor.AngularVelocity = Vector3.Zero;\n        }\n\n        public bool InAir\n        {\n            get\n            {\n                foreach (VehicleWheel wheel in Wheels)\n                    if (!wheel.InAir) return false;\n                return true;\n            }\n        }\n\n        internal void Boost()\n        {\n            _physXActor.AddForce(_physXActor.GlobalOrientation.Forward * 1000, ForceMode.Force);\n        }\n    }\n}\n\n\n'OpenC1/OpenC1/Screens/SelectCarScreen.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing OpenC1.Parsers;\nusing Microsoft.Xna.Framework;\nusing Microsoft.Xna.Framework.Graphics;\n\nusing System.IO;\nusing OpenC1.HUD;\nusing OneAmEngine;\n\nnamespace OpenC1.Screens\n{\n    class SelectCarScreen : BaseMenuScreen\n    {\n        BasicEffect2 _effect;\n        List<OpponentInfo> _opponents;\n        public static SpriteFont _titleFont;\n\n        public SelectCarScreen(BaseMenuScreen parent)\n            : base(parent)\n        {\n            _titleFont = Engine.ContentManager.Load<SpriteFont>(\"content/LucidaConsole\");\n\n            SimpleCamera cam = Engine.Camera as SimpleCamera;\n            cam.DrawDistance = 999999;\n\n            _inAnimation = new AnimationPlayer(LoadAnimation(\"chcrcome.fli\"));\n            _inAnimation.Play(false);\n\n            _outAnimation = new AnimationPlayer(LoadAnimation(\"chcraway.fli\"));\n\n            _effect = new BasicEffect2();\n\n\t\t\t_effect.PreferPerPixelLighting = true;\n            _effect.TexCoordsMultiplier = 1;\n            _effect.TextureEnabled = true;\n\n            Engine.Camera.Position = new Vector3(-1.5f, 3.5f, 10);\n            Engine.Camera.Orientation = new Vector3(0, -0.28f, -1);\n            Engine.Camera.Update();\n            _effect.View = Engine.Camera.View;\n            _effect.Projection = Engine.Camera.Projection;\n\n            _opponents = OpponentsFile.Instance.Opponents;\n            if (GameVars.Emulation != EmulationMode.Demo && GameVars.Emulation != EmulationMode.SplatPackDemo)\n            {\n\n\n                List<string> carFiles = new List<string>(Directory.GetFiles(GameVars.BasePath + \"cars\"));\n                carFiles.RemoveAll(a => !a.ToUpper().EndsWith(\".TXT\"));\n                carFiles.Sort();\n                carFiles.Reverse();\n\t\t\t\tforeach (string file in carFiles)\n\t\t\t\t{\n\t\t\t\t\tstring filename = Path.GetFileName(file);\n\t\t\t\t\tif (!_opponents.Exists(a => a.FileName.Equals(filename, StringComparison.InvariantCultureIgnoreCase)))\n\t\t\t\t\t{\n\t\t\t\t\t\t_opponents.Add(new OpponentInfo { FileName = filename, Name = Path.GetFileNameWithoutExtension(filename), StrengthRating = 1 });\n\t\t\t\t\t}\n\t\t\t\t}\n\n            }\n\n\t\t\tforeach (var opponent in _opponents)\n\t\t\t{\n\t\t\t\t_options.Add(new CarModelMenuOption(_effect, opponent));\n\t\t\t}\n        }\n\n        public override void Update()\n        {\n            base.Update();\n        }\n\n        public override void Render()\n        {\n            GameVars.CurrentEffect = _effect;\n            base.Render();\n        }\n\n        public override void OnOutAnimationFinished()\n        {\n            GameVars.SelectedCarFileName = _opponents[_selectedOption].FileName;\n            ReturnToParent();\n        }\n    }\n\n    class CarModelMenuOption : IMenuOption\n    {\n        BasicEffect2 _effect;\n        VehicleModel _model;\n        OpponentInfo _info;\n\t\tstring _loadException;\n\n        public CarModelMenuOption(BasicEffect2 effect, OpponentInfo info)\n        {\n            _effect = effect;\n            _info = info;\n        }\n\n\t\tpublic bool CanBeSelected\n\t\t{\n\t\t\tget { return _loadException == null; }\n\t\t}\n\n\t\tprivate void LoadModel()\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tvar carfile = new VehicleFile(GameVars.BasePath + \"cars\\\\\" + _info.FileName);\n\t\t\t\t_model = new VehicleModel(carfile, true);\n\t\t\t}\n\t\t\tcatch (Exception ex)\n\t\t\t{\n\t\t\t\t_loadException = \"Error: \" + ex.Message;\n\t\t\t}\n\t\t}\n\n        public void RenderInSpriteBatch()\n        {\n            Engine.SpriteBatch.DrawString(SelectCarScreen._titleFont, _info.Name.ToUpperInvariant(), BaseHUDItem.ScaleVec2(0.22f, 0.17f), Color.White, 0, Vector2.Zero, 2f, SpriteEffects.None, 0);\n            Engine.SpriteBatch.DrawString(SelectCarScreen._titleFont, new String('_', _info.Name.Length), BaseHUDItem.ScaleVec2(0.22f, 0.175f), Color.Red, 0, Vector2.Zero, 2f, SpriteEffects.None, 0);\n\n\t\t\tif (_loadException != null)\n\t\t\t{\n\t\t\t\tEngine.SpriteBatch.DrawString(SelectCarScreen._titleFont, _loadException, BaseHUDItem.ScaleVec2(0.22f, 0.37f), Color.White, 0, Vector2.Zero, 2f, SpriteEffects.None, 0);\n\t\t\t}\n        }\n\n        public void RenderOutsideSpriteBatch()\n        {\n\t\t\tif (_model == null && _loadException == null)\n\t\t\t{\n\t\t\t\tLoadModel();\n\t\t\t}\n            if (_model == null)\n                return;\n\n            Engine.Device.SamplerStates[0].AddressU = TextureAddressMode.Wrap;\n            Engine.Device.SamplerStates[0].AddressV = TextureAddressMode.Wrap;\n\n            _effect.Begin(SaveStateMode.None);\n\n            _model.Update();\n            Engine.Device.RenderState.DepthBufferEnable = true;\n            Engine.Device.RenderState.CullMode = CullMode.None;\n\n\t\t\t_effect.TextureEnabled = true;\n            _model.Render(Matrix.CreateScale(1.2f) * Matrix.CreateRotationY(2.55f));\n\t\t\tEngine.Device.RenderState.FillMode = FillMode.Solid;\n\n            _effect.End();\n        }\n    }\n}\n\n'OpenC1/OpenC1/Game1.cs'\n:using System;\nusing System.Collections.Generic;\nusing Microsoft.Xna.Framework;\nusing Microsoft.Xna.Framework.Audio;\nusing Microsoft.Xna.Framework.Content;\nusing Microsoft.Xna.Framework.GamerServices;\nusing Microsoft.Xna.Framework.Graphics;\nusing Microsoft.Xna.Framework.Input;\nusing Microsoft.Xna.Framework.Net;\nusing Microsoft.Xna.Framework.Storage;\nusing OpenC1.Screens;\nusing OpenC1.Parsers;\nusing OneAmEngine;\nusing OneAmEngine.Audio;\nusing System.IO;\nusing System.Threading;\nusing System.Globalization;\nusing System.Text;\n\nnamespace OpenC1\n{\n\n\n\n    public class Game1 : Microsoft.Xna.Framework.Game\n    {\n        GraphicsDeviceManager _graphics;\n\n        public Game1()\n        {\n\n\n            _graphics = new GraphicsDeviceManager(this);\n            Content.RootDirectory = \"Content\";\n\n            AppDomain.CurrentDomain.UnhandledException += new UnhandledExceptionEventHandler(CurrentDomain_UnhandledException);\n\n            _graphics.PreferredBackBufferWidth = 800;\n            _graphics.PreferredBackBufferHeight = 600;\n            _graphics.PreferMultiSampling = true;\n\n            Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture;\n            Thread.CurrentThread.CurrentUICulture = CultureInfo.InvariantCulture;\n\n            SettingsFile settings = new SettingsFile();\n\n            Engine.ScreenSize = new Vector2(GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Width, GraphicsAdapter.DefaultAdapter.CurrentDisplayMode.Height);\n\n            _graphics.IsFullScreen = GameVars.FullScreen;\n\n\n            _graphics.MinimumVertexShaderProfile = ShaderProfile.VS_1_1;\n            _graphics.MinimumPixelShaderProfile = ShaderProfile.PS_2_0;\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)\n        {\n            Logger.Log(\"CRASH:\\r\\n\" + e.ExceptionObject.ToString());\n        }\n\n\n\n\n\n\n\n        protected override void Initialize()\n        {\n            base.Initialize();\n\n            Engine.Startup(this, _graphics);\n\n            Engine.DrawDistance = GameVars.DrawDistance;\n            Engine.Audio = new MdxSoundEngine();\n\n\t\t\tstring gameDataPath = \"GameData\";\n\t\t\tif (!Directory.Exists(gameDataPath) || Directory.GetDirectories(gameDataPath).Length == 0)\n\t\t\t\tEngine.Screen = new ChooseDownloadGameDataScreen(null);\n\t\t\telse\n\t\t\t\tEngine.Screen = new GameSelectionScreen(null);\n        }\n\n\n\n\n\n        protected override void LoadContent()\n        {\n        }\n\n\n\n\n\n        protected override void UnloadContent()\n        {\n            Engine.ContentManager.Unload();\n        }\n\n\n\n\n\n\n        protected override void Update(GameTime gameTime)\n        {\n\n\n\n\n\n\n            Engine.Update(gameTime);\n\n            base.Update(gameTime);\n        }\n\n\n\n\n\n        protected override void Draw(GameTime gameTime)\n        {\n            Engine.Render(gameTime);\n            base.Draw(gameTime);\n        }\n    }\n}\n\n'OpenC1/OpenC1/Screens/PauseMenuScreen.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing OpenC1.Parsers;\nusing OpenC1.HUD;\nusing OpenC1.Physics;\nusing OneAmEngine;\n\nnamespace OpenC1.Screens\n{\n    class PauseMenuScreen : BaseMenuScreen\n    {\n\n        public PauseMenuScreen(PlayGameScreen parent)\n            : base(parent)\n        {\n            _inAnimation = new AnimationPlayer(LoadAnimation(\"MAINCOME.fli\"));\n            _inAnimation.Play(false);\n\n            _outAnimation = new AnimationPlayer(LoadAnimation(\"MAINAWAY.fli\"));\n\n            _options.Add(\n               new TextureMenuOption(BaseHUDItem.ScaleRect(0.202f, 0.185f, 0.65f, 0.045f),\n                   LoadAnimation(\"MAINCNGL.fli\")[0])\n           );\n            _options.Add(\n                new TextureMenuOption(BaseHUDItem.ScaleRect(0.172f, 0.356f, 0.715f, 0.045f),\n                    LoadAnimation(\"MAINARGL.fli\")[0])\n            );\n\n            _options.Add(\n                new TextureMenuOption(BaseHUDItem.ScaleRect(0.201f, 0.778f, 0.725f, 0.045f),\n                    LoadAnimation(\"MAINQTGL.fli\")[0])\n            );\n        }\n\n        public override void Update()\n        {\n            base.Update();\n        }\n\n        public override void OnOutAnimationFinished()\n        {\n            switch (_selectedOption)\n            {\n                case 0:\n                    ReturnToParent();\n                    break;\n                case 1:\n\t\t\t\t\tRace.Current.ExitAndReturnToMenu();\n                    break;\n                case 2:\n                    Engine.Game.Exit();\n                    break;\n            }\n        }\n    }\n}\n",
        "gt": [
            "'OpenC1/OpenC1/Screens/SelectCarScreen.cs'",
            "'OpenC1/OpenC1/Game1.cs'",
            "'OpenC1/OpenC1/Physics/VehicleChassis.cs'",
            "'OpenC1/OpenC1/Screens/PauseMenuScreen.cs'"
        ]
    },
    {
        "files": [
            "'vssurvivalmod/Item/ItemWearableAttachment.cs'",
            "'vssurvivalmod/Systems/WorldGen/Standard/ModStdWorldGen.cs'",
            "'vssurvivalmod/Block/BlockStalagSection.cs'",
            "'vssurvivalmod/Item/ItemSnowball.cs'"
        ],
        "content": "'vssurvivalmod/Item/ItemWearableAttachment.cs'\n:﻿using System.Collections.Generic;\nusing System;\nusing Vintagestory.API.Client;\nusing Vintagestory.API.Common;\nusing Vintagestory.API.Common.Entities;\nusing Vintagestory.API.Datastructures;\nusing Vintagestory.API.MathTools;\nusing Vintagestory.API.Util;\n\nnamespace Vintagestory.GameContent\n{\n    public class ItemWearableAttachment : Item, IContainedMeshSource, ITexPositionSource\n    {\n        bool attachableToEntity;\n\n        public override void OnLoaded(ICoreAPI api)\n        {\n            attachableToEntity = IAttachableToEntity.FromCollectible(this) != null;\n            base.OnLoaded(api);\n        }\n\n        public override void OnUnloaded(ICoreAPI api)\n        {\n            var meshRefs = ObjectCacheUtil.TryGet<Dictionary<string, MultiTextureMeshRef>>(api, \"wearableAttachmentMeshRefs\");\n            if (meshRefs?.Count > 0)\n            {\n                foreach (var (_, meshRef) in meshRefs)\n                {\n                    meshRef.Dispose();\n                }\n                ObjectCacheUtil.Delete(api, \"wearableAttachmentMeshRefs\");\n            }\n            base.OnUnloaded(api);\n        }\n\n        #region For ground storable mesh\n        ITextureAtlasAPI curAtlas;\n        Shape nowTesselatingShape;\n\n        public Size2i AtlasSize => curAtlas.Size;\n\n        public virtual TextureAtlasPosition this[string textureCode]\n        {\n            get\n            {\n                AssetLocation texturePath = null;\n                CompositeTexture tex;\n\n\n                if (Textures.TryGetValue(textureCode, out tex))\n                {\n                    texturePath = tex.Baked.BakedName;\n                }\n\n\n                if (texturePath == null && Textures.TryGetValue(\"all\", out tex))\n                {\n                    texturePath = tex.Baked.BakedName;\n                }\n\n\n                if (texturePath == null)\n                {\n                    nowTesselatingShape?.Textures.TryGetValue(textureCode, out texturePath);\n                }\n\n\n                if (texturePath == null)\n                {\n                    texturePath = new AssetLocation(textureCode);\n                }\n\n                return getOrCreateTexPos(texturePath);\n            }\n        }\n\n\n        protected TextureAtlasPosition getOrCreateTexPos(AssetLocation texturePath)\n        {\n            var capi = api as ICoreClientAPI;\n\n            curAtlas.GetOrInsertTexture(texturePath, out _, out var texpos, () =>\n            {\n                IAsset texAsset = capi.Assets.TryGet(texturePath.Clone().WithPathPrefixOnce(\"textures/\").WithPathAppendixOnce(\".png\"));\n                if (texAsset != null)\n                {\n                    return texAsset.ToBitmap(capi);\n                }\n\n                capi.World.Logger.Warning(\"Item {0} defined texture {1}, not no such texture found.\", Code, texturePath);\n                return null;\n            }, 0.1f);\n\n            return texpos;\n        }\n\n        public MeshData GenMesh(ItemStack itemstack, ITextureAtlasAPI targetAtlas, BlockPos forBlockPos = null)\n        {\n            var capi = api as ICoreClientAPI;\n            if (targetAtlas == capi.ItemTextureAtlas)\n            {\n                ITexPositionSource texSource = capi.Tesselator.GetTextureSource(itemstack.Item);\n                return genMesh(capi, itemstack, texSource);\n            }\n\n\n            curAtlas = targetAtlas;\n            MeshData mesh = genMesh(api as ICoreClientAPI, itemstack, this);\n            mesh.RenderPassesAndExtraBits.Fill((short)EnumChunkRenderPass.OpaqueNoCull);\n            return mesh;\n        }\n\n        public virtual string GetMeshCacheKey(ItemStack itemstack)\n        {\n            return \"wearableAttachmentModelRef-\" + itemstack.Collectible.Code.ToString();\n        }\n\n        #endregion\n\n\n        public override void OnBeforeRender(ICoreClientAPI capi, ItemStack itemstack, EnumItemRenderTarget target, ref ItemRenderInfo renderinfo)\n        {\n            if (!attachableToEntity) return;\n\n            Dictionary<string, MultiTextureMeshRef> meshrefs = ObjectCacheUtil.GetOrCreate(capi, \"wearableAttachmentMeshRefs\", () => new Dictionary<string, MultiTextureMeshRef>());\n            string key = GetMeshCacheKey(itemstack);\n\n            if (!meshrefs.TryGetValue(key, out renderinfo.ModelRef))\n            {\n                ITexPositionSource texSource = capi.Tesselator.GetTextureSource(itemstack.Item);\n                var mesh = genMesh(capi, itemstack, texSource);\n                renderinfo.ModelRef = meshrefs[key] = mesh == null ? renderinfo.ModelRef : capi.Render.UploadMultiTextureMesh(mesh);\n            }\n\n            if (Attributes[\"visibleDamageEffect\"].AsBool())\n            {\n                renderinfo.DamageEffect = Math.Max(0, 1 - (float)GetRemainingDurability(itemstack) / GetMaxDurability(itemstack) * 1.1f);\n            }\n        }\n\n        protected MeshData genMesh(ICoreClientAPI capi, ItemStack itemstack, ITexPositionSource texSource)\n        {\n            JsonObject attrObj = itemstack.Collectible.Attributes;\n            EntityProperties props = capi.World.GetEntityType(new AssetLocation(attrObj?[\"wearerEntityCode\"].ToString() ?? \"player\"));\n            Shape entityShape = props.Client.LoadedShape;\n            AssetLocation shapePathForLogging = props.Client.Shape.Base;\n            Shape newShape;\n\n\n            if (!attachableToEntity)\n            {\n\n                newShape = entityShape;\n            }\n            else\n            {\n                newShape = new Shape()\n                {\n                    Elements = entityShape.CloneElements(),\n                    Animations = entityShape.Animations,\n                    AnimationsByCrc32 = entityShape.AnimationsByCrc32,\n                    JointsById = entityShape.JointsById,\n                    TextureWidth = entityShape.TextureWidth,\n                    TextureHeight = entityShape.TextureHeight,\n                    Textures = null,\n                };\n            }\n\n            MeshData meshdata;\n            if (attrObj[\"wearableInvShape\"].Exists)\n            {\n                var shapePath = new AssetLocation(\"shapes/\" + attrObj[\"wearableInvShape\"] + \".json\");\n                var shape = API.Common.Shape.TryGet(capi, shapePath);\n                capi.Tesselator.TesselateShape(itemstack.Collectible, shape, out meshdata);\n            }\n            else\n            {\n                CompositeShape compArmorShape = !attrObj[\"attachShape\"].Exists ? (itemstack.Class == EnumItemClass.Item ? itemstack.Item.Shape : itemstack.Block.Shape) : attrObj[\"attachShape\"].AsObject<CompositeShape>(null, itemstack.Collectible.Code.Domain);\n\n                if (compArmorShape == null)\n                {\n                    capi.World.Logger.Warning(\"Wearable shape {0} {1} does not define a shape through either the shape property or the attachShape Attribute. Item will be invisible.\", itemstack.Class, itemstack.Collectible.Code);\n                    return null;\n                }\n\n                AssetLocation shapePath = compArmorShape.Base.CopyWithPath(\"shapes/\" + compArmorShape.Base.Path + \".json\");\n\n                Shape armorShape = API.Common.Shape.TryGet(capi, shapePath);\n                if (armorShape == null)\n                {\n                    capi.World.Logger.Warning(\"Wearable shape {0} defined in {1} {2} not found or errored, was supposed to be at {3}. Item will be invisible.\", compArmorShape.Base, itemstack.Class, itemstack.Collectible.Code, shapePath);\n                    return null;\n                }\n\n                newShape.StepParentShape(armorShape, shapePath.ToShortString(), shapePathForLogging.ToShortString(), capi.Logger, (key, code) => { });\n\n                if (compArmorShape.Overlays != null)\n                {\n                    foreach (var overlay in compArmorShape.Overlays)\n                    {\n                        Shape oshape = API.Common.Shape.TryGet(capi, overlay.Base.CopyWithPath(\"shapes/\" + overlay.Base.Path + \".json\"));\n                        if (oshape == null)\n                        {\n                            capi.World.Logger.Warning(\"Wearable shape {0} overlay {4} defined in {1} {2} not found or errored, was supposed to be at {3}. Item will be invisible.\", compArmorShape.Base, itemstack.Class, itemstack.Collectible.Code, shapePath, overlay.Base);\n                            continue;\n                        }\n\n                        newShape.StepParentShape(oshape, overlay.Base.ToShortString(), shapePathForLogging.ToShortString(), capi.Logger, (key,Code) => { });\n                    }\n                }\n\n                nowTesselatingShape = newShape;\n                capi.Tesselator.TesselateShapeWithJointIds(\"entity\", newShape, out meshdata, texSource, new Vec3f());\n                nowTesselatingShape = null;\n            }\n\n            return meshdata;\n        }\n    }\n}\n\n'vssurvivalmod/Systems/WorldGen/Standard/ModStdWorldGen.cs'\n:﻿using System;\nusing System.Security.Cryptography;\nusing Vintagestory.API.Common;\nusing Vintagestory.API.Config;\nusing Vintagestory.API.MathTools;\nusing Vintagestory.API.Server;\nusing Vintagestory.GameContent;\nusing Vintagestory.ServerMods.NoObf;\n\nnamespace Vintagestory.ServerMods\n{\n    public abstract class ModStdWorldGen : ModSystem\n    {\n        public static int SkipStructuresgHashCode;\n        public static int SkipPatchesgHashCode;\n        public static int SkipCavesgHashCode;\n        public static int SkipTreesgHashCode;\n        public static int SkipShurbsgHashCode;\n        public static int SkipStalagHashCode;\n        public static int SkipHotSpringsgHashCode;\n        public static int SkipRivuletsgHashCode;\n        public static int SkipPondgHashCode;\n        public static int SkipCreaturesgHashCode;\n\n        static ModStdWorldGen()\n        {\n            SkipStructuresgHashCode = BitConverter.ToInt32(SHA256.HashData(\"structures\"u8.ToArray()));\n            SkipPatchesgHashCode = BitConverter.ToInt32(SHA256.HashData(\"patches\"u8.ToArray()));\n            SkipCavesgHashCode = BitConverter.ToInt32(SHA256.HashData(\"caves\"u8.ToArray()));\n            SkipTreesgHashCode = BitConverter.ToInt32(SHA256.HashData(\"trees\"u8.ToArray()));\n            SkipShurbsgHashCode = BitConverter.ToInt32(SHA256.HashData(\"shrubs\"u8.ToArray()));\n            SkipHotSpringsgHashCode = BitConverter.ToInt32(SHA256.HashData(\"hotsprings\"u8.ToArray()));\n            SkipRivuletsgHashCode = BitConverter.ToInt32(SHA256.HashData(\"rivulets\"u8.ToArray()));\n            SkipStalagHashCode = BitConverter.ToInt32(SHA256.HashData(\"stalag\"u8.ToArray()));\n            SkipPondgHashCode = BitConverter.ToInt32(SHA256.HashData(\"pond\"u8.ToArray()));\n            SkipCreaturesgHashCode = BitConverter.ToInt32(SHA256.HashData(\"creatures\"u8.ToArray()));\n        }\n        public GlobalConfig GlobalConfig;\n        protected const int chunksize = GlobalConstants.ChunkSize;\n        internal GenStoryStructures modSys;\n\n\n        public override bool ShouldLoad(EnumAppSide side)\n        {\n            return side == EnumAppSide.Server;\n        }\n\n        public void LoadGlobalConfig(ICoreServerAPI api)\n        {\n            modSys = api.ModLoader.GetModSystem<GenStoryStructures>();\n\n            GlobalConfig = GlobalConfig.GetInstance(api);\n        }\n\n\n\n\n\n\n\n\n\n\n        public string GetIntersectingStructure(Vec3d position, int skipCategory)\n        {\n            return modSys.GetStoryStructureCodeAt(position, skipCategory);\n        }\n\n\n\n\n\n\n\n\n\n        public string GetIntersectingStructure(int x, int z, int skipCategory)\n        {\n            return modSys.GetStoryStructureCodeAt(x, z,skipCategory);\n        }\n\n\n\n\n\n\n\n        public string GetIntersectingStructure(BlockPos position, int skipCategory)\n        {\n            return modSys.GetStoryStructureCodeAt(position, skipCategory);\n        }\n    }\n}\n\n'vssurvivalmod/Block/BlockStalagSection.cs'\n:﻿using System.Collections.Generic;\nusing System.Text;\nusing Vintagestory.API.Common;\nusing Vintagestory.API.Config;\nusing Vintagestory.API.MathTools;\nusing Vintagestory.API.Server;\nusing Vintagestory.ServerMods;\n\nnamespace Vintagestory.GameContent\n{\n    public class BlockStalagSection : Block\n    {\n        public string[] Thicknesses = new string[] { \"14\", \"12\", \"10\", \"08\", \"06\", \"04\" };\n\n        public string Thickness => Variant[\"thickness\"];\n        public int ThicknessInt;\n\n        public override void OnLoaded(ICoreAPI api)\n        {\n            CanStep = false;\n\n            ThicknessInt = int.Parse(Variant[\"thickness\"]);\n            base.OnLoaded(api);\n        }\n\n        public Block GetBlock(IWorldAccessor world, string rocktype, string thickness)\n        {\n            return world.GetBlock(CodeWithParts(rocktype, thickness));\n        }\n\n        public Dictionary<string, int> thicknessIndex = new Dictionary<string, int>()\n        {\n            { \"14\", 0 },\n            { \"12\", 1 },\n            { \"10\", 2 },\n            { \"08\", 3 },\n            { \"06\", 4 },\n            { \"04\", 5 }\n        };\n\n\n\n        public override void OnNeighbourBlockChange(IWorldAccessor world, BlockPos pos, BlockPos neibpos)\n        {\n            if (IsSurroundedByNonSolid(world, pos))\n            {\n                world.BlockAccessor.BreakBlock(pos, null);\n            }\n        }\n\n\n        public bool IsSurroundedByNonSolid(IWorldAccessor world, BlockPos pos)\n        {\n            foreach (BlockFacing facing in BlockFacing.ALLFACES)\n            {\n                BlockPos neighborPos = pos.AddCopy(facing.Normali);\n                Block neighborBlock = world.BlockAccessor.GetBlock(neighborPos);\n\n                if (neighborBlock.SideSolid[facing.Opposite.Index] || neighborBlock is BlockStalagSection) return false;\n            }\n            return true;\n        }\n\n\n        public override bool TryPlaceBlockForWorldGen(IBlockAccessor blockAccessor, BlockPos pos, BlockFacing onBlockFace, IRandom worldGenRand, BlockPatchAttributes attributes = null)\n        {\n            bool didplace = false;\n\n            if (blockAccessor.GetBlock(pos).Replaceable < 6000) return false;\n\n            pos = pos.Copy();\n\n            ModStdWorldGen modSys = null;\n            if (blockAccessor is IWorldGenBlockAccessor wgba) modSys = wgba.WorldgenWorldAccessor.Api.ModLoader.GetModSystem<GenVegetationAndPatches>();\n\n            for (int i = 0; i < 5 + worldGenRand.NextInt(25); i++)\n            {\n                if (pos.Y < 15) continue;\n                if (modSys != null && modSys.GetIntersectingStructure(pos, ModStdWorldGen.SkipStalagHashCode) != null) continue;\n\n                didplace |= TryGenStalag(blockAccessor, pos, worldGenRand.NextInt(4), worldGenRand);\n                pos.X += worldGenRand.NextInt(9) - 4;\n                pos.Y += worldGenRand.NextInt(3) - 1;\n                pos.Z += worldGenRand.NextInt(9) - 4;\n            }\n\n            return didplace;\n        }\n\n        private bool TryGenStalag(IBlockAccessor blockAccessor, BlockPos pos, int thickOff, IRandom worldGenRand)\n        {\n            bool didplace = false;\n\n            for (int dy = 0; dy < 5; dy++)\n            {\n                Block block = blockAccessor.GetBlockAbove(pos, dy);\n                if (block.SideSolid[BlockFacing.DOWN.Index] && block.BlockMaterial == EnumBlockMaterial.Stone)\n                {\n                    string rocktype;\n                    if (block.Variant.TryGetValue(\"rock\", out rocktype))\n                    {\n                        GrowDownFrom(blockAccessor, pos.AddCopy(0, dy - 1, 0), rocktype, thickOff, worldGenRand);\n                        didplace = true;\n                    }\n                    break;\n                }\n                else if (block.Id != 0) break;\n            }\n\n            if (!didplace) return false;\n\n            for (int dy = 0; dy < 12; dy++)\n            {\n                Block block = blockAccessor.GetBlockBelow(pos, dy);\n                if (block.SideSolid[BlockFacing.UP.Index] && block.BlockMaterial == EnumBlockMaterial.Stone)\n                {\n                    string rocktype;\n                    if (block.Variant.TryGetValue(\"rock\", out rocktype))\n                    {\n                        GrowUpFrom(blockAccessor, pos.AddCopy(0, -dy + 1, 0), rocktype, thickOff);\n                        didplace = true;\n                    }\n                    break;\n                }\n                else if (block.Id != 0 && !(block is BlockStalagSection)) break;\n            }\n\n            return didplace;\n        }\n\n        private void GrowUpFrom(IBlockAccessor blockAccessor, BlockPos pos, string rocktype, int thickOff)\n        {\n\n            for (int i = thicknessIndex[Thickness] + thickOff; i < Thicknesses.Length; i++)\n            {\n                BlockStalagSection stalagBlock = (BlockStalagSection)GetBlock(api.World, rocktype, Thicknesses[i]);\n                if (stalagBlock == null) continue;\n\n                Block block = blockAccessor.GetBlock(pos);\n                if (block.Replaceable >= 6000 || (block as BlockStalagSection)?.ThicknessInt < stalagBlock.ThicknessInt)\n                {\n                    blockAccessor.SetBlock(stalagBlock.BlockId, pos);\n                }\n                else break;\n                pos.Y++;\n            }\n        }\n\n        private void GrowDownFrom(IBlockAccessor blockAccessor, BlockPos pos, string rocktype, int thickOff, IRandom worldGenRand)\n        {\n            for (int i = thicknessIndex[Thickness] + thickOff + worldGenRand.NextInt(2); i < Thicknesses.Length; i++)\n            {\n                Block stalagBlock = GetBlock(api.World, rocktype, Thicknesses[i]);\n                if (stalagBlock == null) continue;\n\n                Block block = blockAccessor.GetBlock(pos);\n                if (block.Replaceable >= 6000)\n                {\n                    blockAccessor.SetBlock(stalagBlock.BlockId, pos);\n                }\n                else break;\n                pos.Y--;\n\n            }\n        }\n\n        public override string GetHeldItemName(ItemStack itemStack)\n        {\n            return Lang.Get(\"block-speleothem\", Lang.Get(\"rock-\" + Variant[\"rock\"]));\n        }\n\n        public override string GetPlacedBlockName(IWorldAccessor world, BlockPos pos)\n        {\n            return Lang.Get(\"block-speleothem\", Lang.Get(\"rock-\" + Variant[\"rock\"]));\n        }\n\n        public override void GetHeldItemInfo(ItemSlot inSlot, StringBuilder dsc, IWorldAccessor world, bool withDebugInfo)\n        {\n            base.GetHeldItemInfo(inSlot, dsc, world, withDebugInfo);\n\n            dsc.AppendLine();\n            dsc.AppendLine(Lang.Get(\"rock-\" + Variant[\"rock\"]));\n        }\n    }\n}\n\n'vssurvivalmod/Item/ItemSnowball.cs'\n:﻿using System.Text;\nusing Vintagestory.API.Client;\nusing Vintagestory.API.Common;\nusing Vintagestory.API.Common.Entities;\nusing Vintagestory.API.Config;\nusing Vintagestory.API.MathTools;\nusing Vintagestory.API.Util;\nusing Vintagestory.GameContent;\n\nnamespace Vintagestory.GameContent\n{\n    public class ItemSnowball : Item\n    {\n        float damage;\n\n        public override void OnLoaded(ICoreAPI api)\n        {\n            base.OnLoaded(api);\n            damage = Attributes[\"damage\"].AsFloat(0.001f);\n        }\n\n        public override string GetHeldTpUseAnimation(ItemSlot activeHotbarSlot, Entity byEntity)\n        {\n            return null;\n        }\n\n        public override void OnHeldInteractStart(ItemSlot itemslot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel, bool firstEvent, ref EnumHandHandling handling)\n        {\n\n            if (blockSel != null && BlockBehaviorSnowballable.canPickSnowballFrom(api.World.BlockAccessor.GetBlock(blockSel.Position), blockSel.Position, (byEntity as EntityPlayer).Player)) {\n                handling = EnumHandHandling.NotHandled;\n                return;\n            }\n\n\n            byEntity.Attributes.SetInt(\"aiming\", 1);\n            byEntity.Attributes.SetInt(\"aimingCancel\", 0);\n            byEntity.StartAnimation(\"aim\");\n\n            handling = EnumHandHandling.PreventDefault;\n        }\n\n        public override bool OnHeldInteractStep(float secondsUsed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel)\n        {\n            if (byEntity.Attributes.GetInt(\"aimingCancel\") == 1) return false;\n\n            if (byEntity.World is IClientWorldAccessor)\n            {\n                ModelTransform tf = new ModelTransform();\n                tf.EnsureDefaultValues();\n\n                float offset = GameMath.Clamp(secondsUsed * 3, 0, 1.5f);\n\n                tf.Translation.Set(offset / 4f, offset / 2f, 0);\n                tf.Rotation.Set(0, 0, GameMath.Min(90, secondsUsed * 360/1.5f));\n\n                byEntity.Controls.UsingHeldItemTransformBefore = tf;\n            }\n\n\n            return true;\n        }\n\n        public override bool OnHeldInteractCancel(float secondsUsed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel, EnumItemUseCancelReason cancelReason)\n        {\n            byEntity.Attributes.SetInt(\"aiming\", 0);\n            byEntity.StopAnimation(\"aim\");\n\n            if (cancelReason != EnumItemUseCancelReason.ReleasedMouse)\n            {\n                byEntity.Attributes.SetInt(\"aimingCancel\", 1);\n            }\n\n            return true;\n        }\n\n        public override void OnHeldInteractStop(float secondsUsed, ItemSlot slot, EntityAgent byEntity, BlockSelection blockSel, EntitySelection entitySel)\n        {\n            if (byEntity.Attributes.GetInt(\"aimingCancel\") == 1) return;\n\n            byEntity.Attributes.SetInt(\"aiming\", 0);\n            byEntity.StopAnimation(\"aim\");\n\n            if (secondsUsed < 0.35f) return;\n\n            ItemStack stack = slot.TakeOut(1);\n            slot.MarkDirty();\n\n            IPlayer byPlayer = null;\n            if (byEntity is EntityPlayer) byPlayer = byEntity.World.PlayerByUid(((EntityPlayer)byEntity).PlayerUID);\n            byEntity.World.PlaySoundAt(new AssetLocation(\"sounds/player/throw\"), byEntity, byPlayer, false, 8);\n\n            EntityProperties type = byEntity.World.GetEntityType(new AssetLocation(\"thrownsnowball-\" + Variant[\"rock\"]));\n            Entity entity = byEntity.World.ClassRegistry.CreateEntity(type);\n            ((EntityThrownSnowball)entity).FiredBy = byEntity;\n            ((EntityThrownSnowball)entity).Damage = damage;\n            ((EntityThrownSnowball)entity).ProjectileStack = stack;\n\n\n            float acc = (1 - byEntity.Attributes.GetFloat(\"aimingAccuracy\", 0));\n            double rndpitch = byEntity.WatchedAttributes.GetDouble(\"aimingRandPitch\", 1) * acc * 0.75;\n            double rndyaw = byEntity.WatchedAttributes.GetDouble(\"aimingRandYaw\", 1) * acc * 0.75;\n\n            Vec3d pos = byEntity.ServerPos.XYZ.Add(0, byEntity.LocalEyePos.Y, 0);\n            Vec3d aheadPos = pos.AheadCopy(1, byEntity.ServerPos.Pitch + rndpitch, byEntity.ServerPos.Yaw + rndyaw);\n            Vec3d velocity = (aheadPos - pos) * 0.5;\n\n            entity.ServerPos.SetPosWithDimension(\n                byEntity.ServerPos.BehindCopy(0.21).XYZ.Add(0, byEntity.LocalEyePos.Y, 0)\n            );\n\n            entity.ServerPos.Motion.Set(velocity);\n\n            entity.Pos.SetFrom(entity.ServerPos);\n            entity.World = byEntity.World;\n\n            byEntity.World.SpawnEntity(entity);\n            byEntity.StartAnimation(\"throw\");\n            if (byEntity is EntityPlayer) RefillSlotIfEmpty(slot, byEntity, (itemstack) => itemstack.Collectible is ItemSnowball );\n        }\n\n        public override void GetHeldItemInfo(ItemSlot inSlot, StringBuilder dsc, IWorldAccessor world, bool withDebugInfo)\n        {\n            base.GetHeldItemInfo(inSlot, dsc, world, withDebugInfo);\n            dsc.AppendLine(Lang.Get(\"{0} blunt damage when thrown\", damage));\n        }\n\n        public override WorldInteraction[] GetHeldInteractionHelp(ItemSlot inSlot)\n        {\n            return new WorldInteraction[] {\n                new WorldInteraction()\n                {\n                    ActionLangCode = \"heldhelp-throw\",\n                    MouseButton = EnumMouseButton.Right,\n                }\n            }.Append(base.GetHeldInteractionHelp(inSlot));\n        }\n    }\n}\n",
        "gt": [
            "'vssurvivalmod/Item/ItemWearableAttachment.cs'",
            "'vssurvivalmod/Systems/WorldGen/Standard/ModStdWorldGen.cs'",
            "'vssurvivalmod/Block/BlockStalagSection.cs'",
            "'vssurvivalmod/Item/ItemSnowball.cs'"
        ]
    },
    {
        "files": [
            "'JsonSrcGen/JsonSrcGen/TypeGenerators/ListGenerator.cs'",
            "'JsonSrcGen/JsonSrcGen/ToJsonGenerator.cs'",
            "'JsonSrcGen/UnitTests/ListTests/DoubleListTests.cs'"
        ],
        "content": "'JsonSrcGen/JsonSrcGen/TypeGenerators/ListGenerator.cs'\n:using System;\nusing System.Text;\nusing JsonSrcGen;\n\nnamespace JsonSrcGen.TypeGenerators\n{\n    public class ListGenerator : IJsonGenerator\n    {\n        readonly Func<JsonType, IJsonGenerator> _getGeneratorForType;\n        public string GeneratorId => \"List\";\n\n        public ListGenerator(Func<JsonType, IJsonGenerator> getGeneratorForType)\n        {\n            _getGeneratorForType = getGeneratorForType;\n        }\n\n        public void GenerateFromJson(CodeBuilder codeBuilder, int indentLevel, JsonType type, Func<string, string> valueSetter, string valueGetter, JsonFormat format)\n        {\n            var listElementType = type.GenericArguments[0];\n            var generator = _getGeneratorForType(listElementType);\n\n            string foundVariable = $\"found{UniqueNumberGenerator.UniqueNumber}\";\n            codeBuilder.AppendLine(indentLevel, $\"json = json.SkipWhitespaceTo('[', 'n', out char {foundVariable});\");\n\n            codeBuilder.AppendLine(indentLevel, $\"if({foundVariable} == 'n')\");\n            codeBuilder.AppendLine(indentLevel, \"{\");\n            codeBuilder.AppendLine(indentLevel+1, \"json = json.Slice(3);\");\n            codeBuilder.AppendLine(indentLevel+1, valueSetter(\"null\"));\n            codeBuilder.AppendLine(indentLevel, \"}\");\n            codeBuilder.AppendLine(indentLevel, \"else\");\n            codeBuilder.AppendLine(indentLevel, \"{\");\n\n            indentLevel++;\n\n            codeBuilder.AppendLine(indentLevel, $\"if({valueGetter} == null)\");\n            codeBuilder.AppendLine(indentLevel, \"{\");\n            codeBuilder.AppendLine(indentLevel+1, valueSetter($\"new List<{listElementType.FullName}{listElementType.NullibleReferenceTypeAnnotation}>()\"));\n            codeBuilder.AppendLine(indentLevel, \"}\");\n            codeBuilder.AppendLine(indentLevel, \"else\");\n            codeBuilder.AppendLine(indentLevel, \"{\");\n            codeBuilder.AppendLine(indentLevel+1, $\"{valueGetter}.Clear();\");\n            codeBuilder.AppendLine(indentLevel, \"}\");\n\n\n\n\n            Func<string, string> listAdder = value => $\"{valueGetter}.Add({value});\";\n\n            codeBuilder.AppendLine(indentLevel, \"while(true)\");\n            codeBuilder.AppendLine(indentLevel, \"{\");\n\n            codeBuilder.AppendLine(indentLevel+1, \"if(json[0] == ']')\");\n            codeBuilder.AppendLine(indentLevel+1, \"{\");\n            codeBuilder.AppendLine(indentLevel+2, \"json = json.Slice(1);\");\n            codeBuilder.AppendLine(indentLevel+2, \"break;\");\n            codeBuilder.AppendLine(indentLevel+1, \"}\");\n\n            string cast = format == JsonFormat.String ? \"\" : \"(byte)\";\n\n            generator.GenerateFromJson(codeBuilder, indentLevel+1, listElementType, listAdder, null, format);\n            codeBuilder.AppendLine(indentLevel+1, \"json = json.SkipWhitespace();\");\n            codeBuilder.AppendLine(indentLevel+1, \"switch (json[0])\");\n            codeBuilder.AppendLine(indentLevel+1, \"{\");\n            codeBuilder.AppendLine(indentLevel+2, $\"case {cast}',':\");\n            codeBuilder.AppendLine(indentLevel+3, \"json = json.Slice(1);\");\n            codeBuilder.AppendLine(indentLevel+3, \"continue;\");\n            codeBuilder.AppendLine(indentLevel+2, $\"case {cast}']':\");\n            codeBuilder.AppendLine(indentLevel+3, \"json = json.Slice(1);\");\n            codeBuilder.AppendLine(indentLevel+3, \"break;\");\n            codeBuilder.AppendLine(indentLevel+2, \"default:\");\n\n            string getJsonString = format == JsonFormat.String ? \"json\" : \"Encoding.UTF8.GetString(json)\";\n            codeBuilder.AppendLine(indentLevel+3, $\"throw new InvalidJsonException($\\\"Unexpected character while parsing list Expected ',' or ']' but got '{{{cast}json[0]}}'\\\", {getJsonString});\");\n            codeBuilder.AppendLine(indentLevel+1, \"}\");\n            codeBuilder.AppendLine(indentLevel+1, \"break;\");\n            codeBuilder.AppendLine(indentLevel, \"}\");\n            indentLevel--;\n            codeBuilder.AppendLine(indentLevel, \"}\");\n\n        }\n\n        int _listNumber = 0;\n\n        public void GenerateToJson(CodeBuilder codeBuilder, int indentLevel, StringBuilder appendBuilder, JsonType type, string valueGetter, bool canBeNull, JsonFormat format)\n        {\n            codeBuilder.MakeAppend(indentLevel, appendBuilder, format);\n\n            string listName = $\"list{_listNumber}\";\n            _listNumber++;\n\n            codeBuilder.AppendLine(indentLevel, $\"var {listName} = {valueGetter};\");\n\n            if(canBeNull)\n            {\n                codeBuilder.AppendLine(indentLevel, $\"if({listName} == null)\");\n                codeBuilder.AppendLine(indentLevel, \"{\");\n                appendBuilder.Append(\"null\");\n                codeBuilder.MakeAppend(indentLevel+1, appendBuilder, format);\n                codeBuilder.AppendLine(indentLevel, \"}\");\n                codeBuilder.AppendLine(indentLevel, \"else\");\n                codeBuilder.AppendLine(indentLevel, \"{\");\n                indentLevel++;\n            }\n            var listElementType = type.GenericArguments[0];\n            var generator = _getGeneratorForType(listElementType);\n            appendBuilder.Append(\"[\");\n            codeBuilder.MakeAppend(indentLevel, appendBuilder, format);\n\n\n\n            codeBuilder.AppendLine(indentLevel, $\"for(int index = 0; index < {valueGetter}.Count-1; index++)\");\n            codeBuilder.AppendLine(indentLevel, \"{\");\n\n            generator.GenerateToJson(codeBuilder, indentLevel+1, appendBuilder, listElementType, $\"{listName}[index]\", listElementType.CanBeNull, format);\n\n            appendBuilder.Append(\",\");\n            codeBuilder.MakeAppend(indentLevel+1, appendBuilder, format);\n\n\n            codeBuilder.AppendLine(indentLevel, \"}\");\n\n            codeBuilder.AppendLine(indentLevel, $\"if({valueGetter}.Count > 0)\");\n            codeBuilder.AppendLine(indentLevel, \"{\");\n            generator.GenerateToJson(codeBuilder, indentLevel+1, appendBuilder, listElementType, $\"{listName}[{valueGetter}.Count-1]\", listElementType.CanBeNull, format);\n            codeBuilder.AppendLine(indentLevel, \"}\");\n\n            appendBuilder.Append(\"]\");\n            codeBuilder.MakeAppend(indentLevel, appendBuilder, format);\n\n            if(canBeNull)\n            {\n                indentLevel--;\n                codeBuilder.AppendLine(indentLevel, \"}\");\n            }\n        }\n\n        public CodeBuilder ClassLevelBuilder => null;\n\n        public string OnNewObject(CodeBuilder codeBuilder, int indentLevel, Func<string, string> valueSetter)\n        {\n            string wasSetVariable = $\"wasSet{UniqueNumberGenerator.UniqueNumber}\";\n            codeBuilder.AppendLine(indentLevel, $\"bool {wasSetVariable} = false;\");\n            return wasSetVariable;\n        }\n\n        public void OnObjectFinished(CodeBuilder codeBuilder, int indentLevel, Func<string, string> valueSetter, string wasSetVariableName)\n        {\n            codeBuilder.AppendLine(indentLevel, $\"if(!{wasSetVariableName})\");\n            codeBuilder.AppendLine(indentLevel, \"{\");\n            codeBuilder.AppendLine(indentLevel+1, valueSetter($\"null\"));\n            codeBuilder.AppendLine(indentLevel, \"}\");\n        }\n    }\n}\n'JsonSrcGen/JsonSrcGen/ToJsonGenerator.cs'\n:using System.Text;\nusing System.Linq;\nusing System;\nusing System.Collections.Generic;\nusing JsonSrcGen.TypeGenerators;\nusing JsonSrcGen;\n\nnamespace JsonSrcGen\n{\n    public class ToJsonGenerator\n    {\n        const string BuilderText = @\"\n            var builder = Builder;\n            if(builder == null)\n            {\n                builder = new JsonStringBuilder();\n                Builder = builder;\n            }\n            builder.Clear();\";\n\n        const string Utf8BuilderText = @\"\n            var builder = Utf8Builder;\n            if(builder == null)\n            {\n                builder = new JsonUtf8Builder();\n                Utf8Builder = builder;\n            }\n            builder.Clear();\";\n\n        readonly Func<JsonType, IJsonGenerator> _getGeneratorForType;\n        readonly Utf8Literals _utf8Literals;\n\n        public ToJsonGenerator(Func<JsonType, IJsonGenerator> getGeneratorForType, Utf8Literals utf8Literals)\n        {\n            _getGeneratorForType = getGeneratorForType;\n            _utf8Literals = utf8Literals;\n        }\n\n        public void Generate(JsonClass jsonClass, CodeBuilder classBuilder)\n        {\n            if (jsonClass.StructRef)\n        \t{\n            \tclassBuilder.AppendLine(2, $\"public ReadOnlySpan<char> ToJson(ref {jsonClass.FullName} value)\");\n        \t}\n        \telse\n        \t{\n        \t\tclassBuilder.AppendLine(2, $\"public ReadOnlySpan<char> ToJson({jsonClass.FullName} value)\");\n        \t}\n\n            classBuilder.AppendLine(2, \"{\");\n            classBuilder.AppendLine(0, BuilderText);\n            if (jsonClass.StructRef)\n        \t{\n                classBuilder.AppendLine(3, \"ToJson(ref value, builder);\");\n        \t}\n        \telse\n        \t{\n                classBuilder.AppendLine(3, \"ToJson(value, builder);\");\n        \t}\n            classBuilder.AppendLine(3, \"return builder.AsSpan();\");\n            classBuilder.AppendLine(2, \"}\");\n\n            if (jsonClass.StructRef)\n        \t{\n                classBuilder.AppendLine(2, $\"public void ToJson(ref {jsonClass.FullName} value, JsonStringBuilder builder)\");\n        \t}\n        \telse\n        \t{\n                classBuilder.AppendLine(2, $\"public void ToJson({jsonClass.FullName} value, JsonStringBuilder builder)\");\n        \t}\n            classBuilder.AppendLine(2, \"{\");\n\n            var appendBuilder = new StringBuilder();\n            appendBuilder.Append(\"{\");\n\n            bool isFirst = true;\n            foreach(var property in jsonClass.Properties.OrderBy(p => p.JsonName))\n            {\n                int indent = 3;\n\n                if(jsonClass.IgnoreNull && property.Type.CanBeNull)\n                {\n                    classBuilder.MakeAppend(indent, appendBuilder, JsonFormat.String);\n                    classBuilder.AppendLine(indent, $\"if(value.{property.CodeName} != null)\");\n                    classBuilder.AppendLine(indent, \"{\");\n                    indent++;\n\n                }\n                if(!isFirst)\n                {\n                    appendBuilder.Append(\",\");\n                }\n\n                appendBuilder.Append($\"\\\\\\\"\");\n                appendBuilder.AppendDoubleEscaped(property.JsonName);\n                appendBuilder.Append($\"\\\\\\\":\");\n\n\n                var generator = GetGeneratorForType(property.Type);\n                bool canBeNull = jsonClass.IgnoreNull ? false : property.Type.CanBeNull;\n                generator.GenerateToJson(classBuilder, indent, appendBuilder, property.Type, $\"value.{property.CodeName}\", canBeNull, JsonFormat.String);\n\n                if(jsonClass.IgnoreNull && property.Type.CanBeNull)\n                {\n                    indent--;\n                    classBuilder.AppendLine(indent, \"}\");\n                }\n\n                if(isFirst) isFirst = false;\n            }\n            appendBuilder.Append(\"}\");\n            classBuilder.MakeAppend(3, appendBuilder, JsonFormat.String);\n            classBuilder.AppendLine(2, \"}\");\n        }\n\n        public void GenerateUtf8(JsonClass jsonClass, CodeBuilder classBuilder)\n        {\n        \tif (jsonClass.StructRef)\n\t\t\t{\n\t\t\t\tclassBuilder.AppendLine(2, $\"public ReadOnlySpan<byte> ToJsonUtf8(ref {jsonClass.FullName} value)\");\n\t\t    }\n\t\t    else\n\t\t    {\n\t\t    \tclassBuilder.AppendLine(2, $\"public ReadOnlySpan<byte> ToJsonUtf8({jsonClass.FullName} value)\");\n\t\t    }\n\n            classBuilder.AppendLine(2, \"{\");\n            classBuilder.AppendLine(0, Utf8BuilderText);\n            classBuilder.AppendLine(3, \"ToJson(value, builder);\");\n            classBuilder.AppendLine(3, \"return builder.AsSpan();\");\n            classBuilder.AppendLine(2, \"}\");\n\n\n            classBuilder.AppendLine(2, $\"public void ToJson({jsonClass.FullName} value, JsonUtf8Builder builder)\");\n            classBuilder.AppendLine(2, \"{\");\n\n            var appendBuilder = new StringBuilder();\n            appendBuilder.Append(\"{\");\n\n            bool isFirst = true;\n            foreach(var property in jsonClass.Properties.OrderBy(p => p.JsonName))\n            {\n                int indent = 3;\n\n                if(jsonClass.IgnoreNull && property.Type.CanBeNull)\n                {\n                    classBuilder.MakeAppend(indent, appendBuilder, JsonFormat.UTF8);\n                    classBuilder.AppendLine(indent, $\"if(value.{property.CodeName} != null)\");\n                    classBuilder.AppendLine(indent, \"{\");\n                    indent++;\n\n                }\n                if(!isFirst)\n                {\n                    appendBuilder.Append(\",\");\n                }\n\n                appendBuilder.Append($\"\\\\\\\"\");\n                appendBuilder.AppendDoubleEscaped(property.JsonName);\n                appendBuilder.Append($\"\\\\\\\":\");\n\n\n                var generator = GetGeneratorForType(property.Type);\n                bool canBeNull = jsonClass.IgnoreNull ? false : property.Type.CanBeNull;\n                generator.GenerateToJson(classBuilder, indent, appendBuilder, property.Type, $\"value.{property.CodeName}\", canBeNull, JsonFormat.UTF8);\n\n                if(jsonClass.IgnoreNull && property.Type.CanBeNull)\n                {\n                    indent--;\n                    classBuilder.AppendLine(indent, \"}\");\n                }\n\n                if(isFirst) isFirst = false;\n            }\n            appendBuilder.Append(\"}\");\n            classBuilder.MakeAppend(3, appendBuilder, JsonFormat.UTF8);\n            classBuilder.AppendLine(2, \"}\");\n        }\n\n        public void GenerateList(JsonType type, CodeBuilder codeBuilder)\n        {\n            codeBuilder.AppendLine(2, $\"public ReadOnlySpan<char> ToJson(List<{type.FullName}> value)\");\n            codeBuilder.AppendLine(2, \"{\");\n            codeBuilder.AppendLine(0, BuilderText);\n\n            var listJsonType = new JsonType(\"List\", \"List\", \"System.Collection.Generic\", false, new List<JsonType>(){type}, true, true);\n            var generator = _getGeneratorForType(listJsonType);\n            generator.GenerateToJson(codeBuilder, 3, new StringBuilder(), listJsonType, \"value\", listJsonType.CanBeNull, JsonFormat.String);\n\n            codeBuilder.AppendLine(3, \"return builder.AsSpan();\");\n            codeBuilder.AppendLine(2, \"}\");\n        }\n\n        public void GenerateListUtf8(JsonType type, CodeBuilder codeBuilder)\n        {\n            codeBuilder.AppendLine(2, $\"public ReadOnlySpan<byte> ToJsonUtf8(List<{type.FullName}> value)\");\n            codeBuilder.AppendLine(2, \"{\");\n            codeBuilder.AppendLine(0, Utf8BuilderText);\n\n            var listJsonType = new JsonType(\"List\", \"List\", \"System.Collection.Generic\", false, new List<JsonType>(){type}, true, true);\n            var generator = _getGeneratorForType(listJsonType);\n            generator.GenerateToJson(codeBuilder, 3, new StringBuilder(), listJsonType, \"value\", listJsonType.CanBeNull, JsonFormat.UTF8);\n\n            codeBuilder.AppendLine(3, \"return builder.AsSpan();\");\n            codeBuilder.AppendLine(2, \"}\");\n        }\n\n        public void GenerateArray(JsonType type, CodeBuilder codeBuilder)\n        {\n            codeBuilder.AppendLine(2, $\"public ReadOnlySpan<char> ToJson({type.FullName}[] value)\");\n            codeBuilder.AppendLine(2, \"{\");\n            codeBuilder.AppendLine(0, BuilderText);\n\n            var arrayJsonType = new JsonType(\"Array\", \"Array\", \"NA\", false, new List<JsonType>(){type}, true, true);\n            var generator = _getGeneratorForType(arrayJsonType);\n            generator.GenerateToJson(codeBuilder, 3, new StringBuilder(), arrayJsonType, \"value\", arrayJsonType.CanBeNull, JsonFormat.String);\n\n            codeBuilder.AppendLine(3, \"return builder.AsSpan();\");\n            codeBuilder.AppendLine(2, \"}\");\n        }\n\n        public void GenerateArrayUtf8(JsonType type, CodeBuilder codeBuilder)\n        {\n            codeBuilder.AppendLine(2, $\"public ReadOnlySpan<byte> ToJsonUtf8({type.FullName}[] value)\");\n            codeBuilder.AppendLine(2, \"{\");\n            codeBuilder.AppendLine(0, Utf8BuilderText);\n\n            var arrayJsonType = new JsonType(\"Array\", \"Array\", \"NA\", false, new List<JsonType>(){type}, true, true);\n            var generator = _getGeneratorForType(arrayJsonType);\n            generator.GenerateToJson(codeBuilder, 3, new StringBuilder(), arrayJsonType, \"value\", arrayJsonType.CanBeNull, JsonFormat.UTF8);\n\n            codeBuilder.AppendLine(3, \"return builder.AsSpan();\");\n            codeBuilder.AppendLine(2, \"}\");\n        }\n\n        public void GenerateValue(JsonType type, CodeBuilder codeBuilder)\n        {\n            codeBuilder.AppendLine(2, $\"public ReadOnlySpan<char> ToJson({type.FullName} value)\");\n            codeBuilder.AppendLine(2, \"{\");\n            codeBuilder.AppendLine(0, BuilderText);\n\n            var generator = _getGeneratorForType(type);\n            generator.GenerateToJson(codeBuilder, 3, new StringBuilder(), type, \"value\", type.CanBeNull, JsonFormat.String);\n\n            codeBuilder.AppendLine(3, \"return builder.AsSpan();\");\n            codeBuilder.AppendLine(2, \"}\");\n        }\n\n        public void GenerateValueUtf8(JsonType type, CodeBuilder codeBuilder)\n        {\n            codeBuilder.AppendLine(2, $\"public ReadOnlySpan<byte> ToJsonUtf8({type.FullName} value)\");\n            codeBuilder.AppendLine(2, \"{\");\n            codeBuilder.AppendLine(0, Utf8BuilderText);\n\n            var generator = _getGeneratorForType(type);\n            generator.GenerateToJson(codeBuilder, 3, new StringBuilder(), type, \"value\", type.CanBeNull, JsonFormat.UTF8);\n\n            codeBuilder.AppendLine(3, \"return builder.AsSpan();\");\n            codeBuilder.AppendLine(2, \"}\");\n        }\n\n        public void GenerateDictionary(JsonType keyType, JsonType valueType, CodeBuilder codeBuilder)\n        {\n            codeBuilder.AppendLine(2, $\"public ReadOnlySpan<char> ToJson(Dictionary<{keyType.FullName},{valueType.FullName}> value)\");\n            codeBuilder.AppendLine(2, \"{\");\n            codeBuilder.AppendLine(0, BuilderText);\n\n            var arrayJsonType = new JsonType(\"Dictionary\", \"Dictionary\", \"NA\", false, new List<JsonType>(){keyType, valueType}, true, true);\n            var generator = _getGeneratorForType(arrayJsonType);\n            generator.GenerateToJson(codeBuilder, 3, new StringBuilder(), arrayJsonType, \"value\", arrayJsonType.CanBeNull, JsonFormat.String);\n\n            codeBuilder.AppendLine(3, \"return builder.AsSpan();\");\n            codeBuilder.AppendLine(2, \"}\");\n        }\n\n        public void GenerateDictionaryUtf8(JsonType keyType, JsonType valueType, CodeBuilder codeBuilder)\n        {\n            codeBuilder.AppendLine(2, $\"public ReadOnlySpan<byte> ToJsonUtf8(Dictionary<{keyType.FullName},{valueType.FullName}> value)\");\n            codeBuilder.AppendLine(2, \"{\");\n            codeBuilder.AppendLine(0, Utf8BuilderText);\n\n            var arrayJsonType = new JsonType(\"Dictionary\", \"Dictionary\", \"NA\", false, new List<JsonType>(){keyType, valueType}, true, true);\n            var generator = _getGeneratorForType(arrayJsonType);\n            generator.GenerateToJson(codeBuilder, 3, new StringBuilder(), arrayJsonType, \"value\", arrayJsonType.CanBeNull, JsonFormat.UTF8);\n\n            codeBuilder.AppendLine(3, \"return builder.AsSpan();\");\n            codeBuilder.AppendLine(2, \"}\");\n        }\n\n        IJsonGenerator GetGeneratorForType(JsonType type)\n        {\n            return _getGeneratorForType(type);\n        }\n    }\n}\n'JsonSrcGen/UnitTests/ListTests/DoubleListTests.cs'\n:using NUnit.Framework;\nusing JsonSrcGen;\nusing System.Collections.Generic;\nusing System.Text;\n\n[assembly: JsonList(typeof(double))]\n\nnamespace UnitTests.ListTests\n{\n    public class DoubleListTests : DoubleListTestsBase\n    {\n        protected override string ToJson(List<double> json)\n        {\n            return _convert.ToJson(json).ToString();\n        }\n\n        protected override List<double> FromJson(List<double> value, string json)\n        {\n            return _convert.FromJson(value, json);\n        }\n    }\n\n    public class UtfDoubleListTests : DoubleListTestsBase\n    {\n        protected override string ToJson(List<double> json)\n        {\n            var jsonUtf8 = _convert.ToJsonUtf8(json);\n            return Encoding.UTF8.GetString(jsonUtf8);\n        }\n\n        protected override List<double> FromJson(List<double> value, string json)\n        {\n            return _convert.FromJson(value, Encoding.UTF8.GetBytes(json));\n        }\n    }\n\n    public abstract class DoubleListTestsBase\n    {\n        protected JsonSrcGen.JsonConverter _convert;\n\n        string ExpectedJson = \"[42.21,176.568,1.7976931348623157E+308,-1.7976931348623157E+308,0]\";\n\n        [SetUp]\n        public void Setup()\n        {\n            _convert = new JsonConverter();\n            System.Threading.Thread.CurrentThread.CurrentUICulture = new System.Globalization.CultureInfo(\"en-us\");\n            System.Threading.Thread.CurrentThread.CurrentCulture = System.Threading.Thread.CurrentThread.CurrentUICulture;\n\n        }\n\n        protected abstract string ToJson(List<double> json);\n\n        [Test]\n        public void ToJson_CorrectString()\n        {\n\n            var list = new List<double>(){42.21d, 176.568d, double.MaxValue, double.MinValue, 0};\n\n\n            var json = ToJson(list);\n\n\n            Assert.That(json.ToString(), Is.EqualTo(ExpectedJson));\n        }\n\n        [Test]\n        public void ToJson_Null_CorrectString()\n        {\n\n\n            var json = ToJson((List<double>)null);\n\n\n            Assert.That(json.ToString(), Is.EqualTo(\"null\"));\n        }\n\n        protected abstract List<double> FromJson(List<double> value, string json);\n\n        [Test]\n        public void FromJson_EmptyList_CorrectList()\n        {\n\n            var list = new List<double>();\n\n\n            FromJson(list, ExpectedJson);\n\n\n            Assert.That(list.Count, Is.EqualTo(5));\n            Assert.That(list[0], Is.EqualTo(42.21d));\n            Assert.That(list[1], Is.EqualTo(176.568d));\n            Assert.That(list[2], Is.EqualTo(double.MaxValue));\n            Assert.That(list[3], Is.EqualTo(double.MinValue));\n            Assert.That(list[4], Is.EqualTo(0));\n        }\n\n        [Test]\n        public void FromJson_PopulatedList_CorrectList()\n        {\n\n            var list = new List<double>(){1, 2, 3};\n\n\n            list =FromJson(list, ExpectedJson);\n\n\n            Assert.That(list.Count, Is.EqualTo(5));\n            Assert.That(list[0], Is.EqualTo(42.21d));\n            Assert.That(list[1], Is.EqualTo(176.568d));\n            Assert.That(list[2], Is.EqualTo(double.MaxValue));\n            Assert.That(list[3], Is.EqualTo(double.MinValue));\n            Assert.That(list[4], Is.EqualTo(0));\n        }\n\n        [Test]\n        public void FromJson_JsonNull_ReturnsNull()\n        {\n\n            var list = new List<double>(){1, 2, 3};\n\n\n            list = FromJson(list, \"null\");\n\n\n            Assert.That(list, Is.Null);\n        }\n\n        [Test]\n        public void FromJson_ListNull_MakesList()\n        {\n\n\n            var list = FromJson((List<double>)null, ExpectedJson);\n\n\n            Assert.That(list.Count, Is.EqualTo(5));\n            Assert.That(list[0], Is.EqualTo(42.21d));\n            Assert.That(list[1], Is.EqualTo(176.568d));\n            Assert.That(list[2], Is.EqualTo(double.MaxValue));\n            Assert.That(list[3], Is.EqualTo(double.MinValue));\n            Assert.That(list[4], Is.EqualTo(0));\n        }\n    }\n}",
        "gt": [
            "'JsonSrcGen/JsonSrcGen/TypeGenerators/ListGenerator.cs'",
            "'JsonSrcGen/JsonSrcGen/ToJsonGenerator.cs'",
            "'JsonSrcGen/UnitTests/ListTests/DoubleListTests.cs'"
        ]
    },
    {
        "files": [
            "'Lunar-Engine/src/Lunar.Server/Utilities/Commands/CommandHandler.cs'",
            "'Lunar-Engine/src/Lunar.Server/World/Actors/Player.cs'",
            "'Lunar-Engine/src/Lunar.Server/World/Structure/MapItem.cs'",
            "'Lunar-Engine/src/Lunar.Server/World/Actors/Components/PlayerNetworkComponent.cs'"
        ],
        "content": "'Lunar-Engine/src/Lunar.Server/Utilities/Commands/CommandHandler.cs'\n:﻿\n\nusing System;\nusing System.Collections.Generic;\nusing Lidgren.Network;\nusing Lunar.Core;\nusing Lunar.Core.Net;\nusing Lunar.Core.Utilities;\nusing Lunar.Server.Net;\nusing Lunar.Server.Utilities.Scripting;\nusing Lunar.Server.World.Actors;\n\nnamespace Lunar.Server.Utilities.Commands\n{\n    public class CommandHandler : IService\n    {\n        private readonly Dictionary<string, List<dynamic>> _scriptedCommandHandlers;\n        private Script _script;\n\n        public CommandHandler(NetHandler netHandler)\n        {\n            netHandler.AddPacketHandler(PacketType.CLIENT_COMMAND, this.Handle_ClientCommand);\n\n            _scriptedCommandHandlers = new Dictionary<string, List<dynamic>>();\n        }\n\n        public void AddHandler(string command, dynamic action)\n        {\n            if (!_scriptedCommandHandlers.ContainsKey(command))\n                _scriptedCommandHandlers.Add(command, new List<dynamic>());\n\n            _scriptedCommandHandlers[command].Add(action);\n        }\n\n        private void LoadScript()\n        {\n            _script = Engine.Services.Get<ScriptManager>().CreateScript(Constants.FILEPATH_SCRIPTS + \"command_handler.py\");\n            _script?.SetVariable<CommandHandler>(\"command_handler\", this);\n        }\n\n        private void Handle_ClientCommand(PacketReceivedEventArgs args)\n        {\n            string command = args.Message.ReadString();\n\n            int cArgsLength = args.Message.ReadInt32();\n\n            string[] cArgs = new string[cArgsLength];\n\n            for (int i = 0; i < cArgsLength; i++)\n            {\n                cArgs[i] = args.Message.ReadString();\n            }\n\n            if (_scriptedCommandHandlers.ContainsKey(command))\n            {\n\n                var player = Engine.Services.Get<PlayerManager>().GetPlayer(args.Connection.UniqueIdentifier.ToString());\n\n                _scriptedCommandHandlers[command].ForEach(a =>\n                    {\n                        try\n                        {\n                            a(new CommandArgs(this, player, cArgs));\n                        }\n                        catch (Exception ex)\n                        {\n                            Engine.Services.Get<ScriptManager>().HandleException(ex);\n                        }\n                    }\n                );\n            }\n        }\n\n        public void Initalize()\n        {\n            this.LoadScript();\n        }\n\n        public NetBuffer Pack()\n        {\n            var netBuffer = new NetBuffer();\n\n            netBuffer.Write(_scriptedCommandHandlers.Keys.Count);\n            foreach (var commmand in _scriptedCommandHandlers.Keys)\n            {\n                netBuffer.Write(commmand);\n            }\n\n            return netBuffer;\n        }\n    }\n}\n'Lunar-Engine/src/Lunar.Server/World/Actors/Player.cs'\n:﻿\n\nusing Lidgren.Network;\nusing Lunar.Server.Net;\nusing Lunar.Server.Utilities;\nusing Lunar.Server.Utilities.Scripting;\nusing Lunar.Server.World.BehaviorDefinition;\nusing Lunar.Server.World.Structure;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Lunar.Core;\nusing Lunar.Core.Net;\nusing Lunar.Core.Utilities;\nusing Lunar.Core.Utilities.Data;\nusing Lunar.Core.World;\nusing Lunar.Core.World.Actor;\nusing Lunar.Core.World.Actor.Descriptors;\nusing Lunar.Server.Utilities.Commands;\nusing Lunar.Server.World.Actors.Components;\nusing Lunar.Server.World.Actors.PacketHandlers;\nusing Lunar.Server.World.Conversation;\n\nnamespace Lunar.Server.World.Actors\n{\n    public class Player : PlayerModel, IActor\n    {\n        private readonly PlayerModel _descriptor;\n        private readonly PlayerConnection _connection;\n        private readonly Inventory _inventory;\n        private readonly Equipment _equipment;\n        private readonly PlayerPacketHandler _packetHandler;\n        private readonly PlayerNetworkComponent _networkComponent;\n        private readonly ActionProcessor<Player> _actionProcessor;\n\n        private IActor _lastAttacker;\n\n        private Map _map;\n\n        private Script _script;\n\n        private Dictionary<string, List<Action<EventArgs>>> _eventHandlers;\n\n        public event EventHandler<EventArgs> LeftGame;\n\n        public event EventHandler<SubjectEventArgs> EventOccured;\n\n        public PlayerModel Descriptor => _descriptor;\n\n        public PlayerNetworkComponent NetworkComponent => _networkComponent;\n\n        public ActionProcessor<Player> ActionProcessor => _actionProcessor;\n\n        public Map Map => _map;\n\n        public string MapID => _map != null ? _map.Name : _descriptor.MapID;\n\n        public string UniqueID => _connection.UniqueIdentifier.ToString();\n\n        public Layer Layer { get; set; }\n\n        public bool MapLoaded { get; set; }\n\n        public Inventory Inventory => _inventory;\n\n        public Equipment Equipment => _equipment;\n\n        public IActor Target { get; set; }\n\n\n\n\n        public IActor LastAttacker => _lastAttacker;\n\n\n\n\n        public bool InLoadingScreen => !this.MapLoaded;\n\n        public bool Alive => (this.Descriptor.Stats.Vitality + this.Descriptor.StatBoosts.Vitality) >= 0;\n\n        public bool Attackable\n        {\n            get\n            {\n                return (this.Alive && !this.InLoadingScreen);\n            }\n        }\n\n\n\n\n        public Dialogue EngagedDialogue { get; set; }\n\n        public ActorStates State { get; set; }\n\n        public Direction Direction { get; set; }\n\n        public ActorBehaviorDefinition Behavior { get; }\n\n        public CollisionBody CollisionBody { get; }\n\n        public Player(PlayerModel descriptor, PlayerConnection connection)\n        {\n            _descriptor = descriptor;\n            _connection = connection;\n            _connection.Player = this;\n            this.State = ActorStates.Idle;\n\n            this.Descriptor.CollisionBounds = new Rect(16, 52, 16, 20);\n\n            this.CollisionBody = new CollisionBody(this);\n\n            _inventory = new Inventory(this);\n            _equipment = new Equipment(this);\n            _networkComponent = new PlayerNetworkComponent(this, connection);\n            _packetHandler = new PlayerPacketHandler(this);\n            _actionProcessor = new ActionProcessor<Player>(this);\n\n            _eventHandlers = new Dictionary<string, List<Action<EventArgs>>>();\n\n            Script script = Engine.Services.Get<ScriptManager>().CreateScript(Constants.FILEPATH_SCRIPTS + \"player.py\");\n            _script = script;\n\n            try\n            {\n                this.Behavior = script.GetVariable<ActorBehaviorDefinition>(\"BehaviorDefinition\");\n            }\n            catch { }\n\n            if (this.Behavior == null)\n            {\n                Engine.Services.Get<Logger>().LogEvent(\"Error hooking player behavior definition.\", LogTypes.ERROR, new Exception(\"Error hooking player behavior definition.\"));\n            }\n            else\n            {\n                this.Behavior.OnCreated(this);\n                this.Behavior.EventOccured += this.BehaviorDescriptor_EventOccured;\n            }\n\n            this.Descriptor.Stats.Changed += (o, args) =>\n            {\n                this.NetworkComponent.SendPlayerStats();\n            };\n        }\n\n        private void OnDeath()\n        {\n            if (_lastAttacker != null)\n            {\n                _lastAttacker.Target = null;\n            }\n\n            try\n            {\n                this.Behavior.OnDeath(this);\n            }\n            catch (Exception ex)\n            {\n                Engine.Services.Get<Logger>().LogEvent(\"Error in OnDeath handling: \" + ex.Message, LogTypes.ERROR, ex);\n            }\n        }\n\n        public void SendChatMessage(string message, ChatMessageType messageType)\n        {\n            this.NetworkComponent.SendChatMessage(message, messageType);\n        }\n\n        public void InflictDamage(int amount)\n        {\n            this.Descriptor.Stats.Vitality -= amount;\n\n            if (this.Descriptor.Stats.Vitality <= 0)\n            {\n                this.OnDeath();\n            }\n        }\n\n        public void OnAttacked(IActor attacker, int damageDelt)\n        {\n            _lastAttacker = attacker;\n\n            this.Behavior?.Attacked(this, attacker, damageDelt);\n        }\n\n        private void BehaviorDescriptor_EventOccured(object sender, SubjectEventArgs e)\n        {\n\n            this.OnEvent(e.EventName, e.Args);\n        }\n\n        public void CalculateBoostedStats()\n        {\n            this.Descriptor.StatBoosts.Strength = 0;\n            this.Descriptor.StatBoosts.Intelligence = 0;\n            this.Descriptor.StatBoosts.Defense = 0;\n            this.Descriptor.StatBoosts.Dexterity = 0;\n\n            foreach (Item item in this.Equipment.Items)\n            {\n\n                if (item == null)\n                    continue;\n\n                this.Descriptor.StatBoosts.Strength += item.Descriptor.Strength;\n                this.Descriptor.StatBoosts.Intelligence += item.Descriptor.Intelligence;\n                this.Descriptor.StatBoosts.Defense += item.Descriptor.Defence;\n                this.Descriptor.StatBoosts.Dexterity += item.Descriptor.Dexterity;\n            }\n\n            this.NetworkComponent.SendPlayerStats();\n        }\n\n        private void OnEvent(string eventName, params object[] args)\n        {\n            this.EventOccured?.Invoke(this, new SubjectEventArgs(eventName, args));\n        }\n\n        public void AddEventHandler(string eventName, Action<EventArgs> handler)\n        {\n            if (!_eventHandlers.ContainsKey(eventName))\n                _eventHandlers.Add(eventName, new List<Action<EventArgs>>());\n\n            _eventHandlers[eventName].Add(handler);\n        }\n\n        public void WarpTo(Vector position)\n        {\n            this.Descriptor.Position = position;\n\n            this.Layer.OnPlayerWarped(this);\n\n            this.NetworkComponent.SendPositionUpdate();\n\n            this.OnEvent(\"moved\");\n        }\n\n        public void JoinMap(Map map)\n        {\n            this.State = ActorStates.Idle;\n\n            this.Layer = map.Layers.ElementAt(0);\n\n            this.NetworkComponent.SendLoadingScreen();\n\n            this.MapLoaded = false;\n\n            this.Map?.OnPlayerQuit(this);\n            _map = map;\n\n            this.Map?.OnPlayerJoined(this);\n\n            this.OnEvent(\"joinedMap\");\n        }\n\n        public void JoinGame(Map map)\n        {\n            this.JoinMap(map);\n\n            this.NetworkComponent.SendAvailableCommands();\n\n            this.NetworkComponent.SendChatMessage(Settings.WelcomeMessage, ChatMessageType.Announcement);\n\n            this.OnEvent(\"joinedGame\");\n        }\n\n        public void LeaveGame()\n        {\n            _map.OnPlayerQuit(this);\n\n            this.LeftGame?.Invoke(this, new EventArgs());\n        }\n\n        public bool CanMove(float dX, float dY)\n        {\n            return !(this.Layer.CheckCollision(this.CollisionBody.CollisionArea.Move(dX, dY)));\n        }\n\n        public bool CanMove(Direction direction, float magnitude)\n        {\n            int orient = (this.Direction == Direction.Right || this.Direction == Direction.Down) ? 1 : -1;\n            float delta = this.Descriptor.Speed * orient * magnitude;\n            float dX = delta * ((this.Direction == Direction.Right || this.Direction == Direction.Left) ? 1 : 0);\n            float dY = delta * ((this.Direction == Direction.Up || this.Direction == Direction.Down) ? 1 : 0);\n\n            return this.CanMove(dX, dY);\n        }\n\n        private void ProcessMovement(GameTime gameTime)\n        {\n            int orient = (this.Direction == Direction.Right || this.Direction == Direction.Down) ? 1 : -1;\n            float delta = this.Descriptor.Speed * orient * (float)gameTime.ElapsedGameTime.TotalMilliseconds;\n            float dX = delta * ((this.Direction == Direction.Right || this.Direction == Direction.Left) ? 1 : 0);\n            float dY = delta * ((this.Direction == Direction.Up || this.Direction == Direction.Down) ? 1 : 0);\n\n            if (!this.CanMove(dX, dY))\n            {\n                this.OnEvent(\"stopped\");\n\n                this.State = ActorStates.Idle;\n\n                this.NetworkComponent.SendMovementPacket();\n            }\n            else\n            {\n                this.Descriptor.Position = this.Descriptor.Position.Move(dX, dY);\n                this.Layer.OnPlayerMoved(this);\n                this.OnEvent(\"moved\");\n            }\n        }\n\n        public void Update(GameTime gameTime)\n        {\n            if (!this.InLoadingScreen)\n            {\n                _actionProcessor.Update(gameTime);\n\n                if (this.Descriptor.Stats.Vitality <= 0)\n                {\n                    this.OnDeath();\n                    return;\n                }\n\n                if (this.State == ActorStates.Moving)\n                {\n                    this.ProcessMovement(gameTime);\n                }\n            }\n        }\n\n        public IActor FindTarget()\n        {\n            return this.FindTarget<IActor>();\n        }\n\n        public T FindTarget<T>() where T : IActor\n        {\n            foreach (var actor in _map.GetActors<T>())\n            {\n                if (actor.Equals(this))\n                {\n                    continue;\n                }\n\n                if (actor.CollisionBody.Collides(this.CollisionBody, this.Descriptor.Reach))\n                {\n                    return actor;\n                }\n            }\n\n            return default(T);\n        }\n\n        public NetBuffer Pack()\n        {\n            var buffer = new NetBuffer();\n\n            buffer.Write(this.UniqueID);\n            buffer.Write(this.Descriptor.Name);\n            buffer.Write(this.Descriptor.Speed);\n            buffer.Write(this.Descriptor.Level);\n            buffer.Write(this.Descriptor.Experience);\n\n            buffer.Write(Settings.ExperienceThreshhold.Length > this.Descriptor.Level + 1\n                ? Settings.ExperienceThreshhold[this.Descriptor.Level + 1]\n                : 0);\n\n            buffer.Write(this.Descriptor.Stats.Vitality);\n            buffer.Write(this.Descriptor.Stats.Vitality);\n            buffer.Write(this.Descriptor.Stats.Strength);\n            buffer.Write(this.Descriptor.Stats.Intelligence);\n            buffer.Write(this.Descriptor.Stats.Dexterity);\n            buffer.Write(this.Descriptor.Stats.Defense);\n            buffer.Write(this.Descriptor.Position);\n            buffer.Write(this.Descriptor.SpriteSheet.Pack());\n            buffer.Write(this.Descriptor.CollisionBounds);\n            buffer.Write(this.Layer.Name);\n\n            return buffer;\n        }\n    }\n}\n'Lunar-Engine/src/Lunar.Server/World/Structure/MapItem.cs'\n:﻿\n\nusing Lunar.Core.Utilities.Data;\nusing Lunar.Core.World.Actor.Descriptors;\nusing Lunar.Server.World.Actors;\n\nnamespace Lunar.Server.World.Structure\n{\n    public class MapItem\n    {\n        private readonly Item _item;\n        private CollisionBody _collisionDescriptor;\n        private Vector _position;\n        private Layer _layer;\n\n        public Item Item { get { return _item; } }\n\n        public int Amount { get; set; }\n\n        public Vector Position\n        {\n            get\n            {\n                return _position;\n            }\n            set\n            {\n                _position = value;\n\n                _collisionDescriptor = new CollisionBody(new Rect((int)_position.X, (int)_position.Y, Constants.MAP_ITEM_WIDTH, Constants.MAP_ITEM_HEIGHT));\n            }\n        }\n\n        public Layer Layer { get => _layer; set => _layer = value; }\n\n        public MapItem(Item item, int amount)\n        {\n            _item = item;\n            this.Amount = amount;\n        }\n\n        public bool WithinReachOf(IActor actor)\n        {\n            return (_collisionDescriptor.Collides(actor));\n        }\n    }\n}\n'Lunar-Engine/src/Lunar.Server/World/Actors/Components/PlayerNetworkComponent.cs'\n:﻿\n\nusing System;\nusing Lidgren.Network;\nusing Lunar.Core;\nusing Lunar.Core.Net;\nusing Lunar.Core.World;\nusing Lunar.Server.Net;\nusing Lunar.Server.Utilities.Commands;\n\nnamespace Lunar.Server.World.Actors.Components\n{\n    public class PlayerNetworkComponent\n    {\n        private readonly Player _player;\n\n        public PlayerConnection Connection { get; }\n\n        public PlayerNetworkComponent(Player player, PlayerConnection connection)\n        {\n            _player = player;\n            this.Connection = connection;\n        }\n\n        public void SendAvailableCommands()\n        {\n            var packet = new Packet(PacketType.AVAILABLE_COMMANDS, ChannelType.UNASSIGNED);\n            packet.Message.Write(Engine.Services.Get<CommandHandler>().Pack());\n            this.SendPacket(packet, NetDeliveryMethod.ReliableOrdered);\n        }\n\n        public void SendPositionUpdate()\n        {\n            var packet = new Packet(PacketType.POSITION_UPDATE, ChannelType.UNASSIGNED);\n            packet.Message.Write(_player.UniqueID);\n            packet.Message.Write(_player.Layer.Name);\n            packet.Message.Write(_player.Descriptor.Position);\n            _player.Map.SendPacket(packet, NetDeliveryMethod.ReliableOrdered);\n        }\n\n        public void SendPlayerData()\n        {\n            var packet = new Packet(PacketType.PLAYER_DATA, ChannelType.UNASSIGNED);\n            packet.Message.Write(_player.Pack());\n            this.SendPacket(packet, NetDeliveryMethod.ReliableOrdered);\n        }\n\n        public void SendChatMessage(string message, ChatMessageType type)\n        {\n            var packet = new Packet(PacketType.PLAYER_MSG, ChannelType.UNASSIGNED);\n\n            packet.Message.Write((byte)type);\n            packet.Message.Write(message);\n\n            this.SendPacket(packet, NetDeliveryMethod.Unreliable);\n        }\n\n        public void SendPacket(Packet packet, NetDeliveryMethod method)\n        {\n            _player.NetworkComponent.Connection.SendPacket(packet, method);\n        }\n\n        public void SendPlayerStats()\n        {\n            var packet = new Packet(PacketType.PLAYER_STATS, ChannelType.UNASSIGNED);\n            packet.Message.Write(_player.UniqueID);\n            packet.Message.Write(_player.Descriptor.Speed);\n            packet.Message.Write(_player.Descriptor.Level);\n            packet.Message.Write(_player.Descriptor.Stats.Vitality);\n            packet.Message.Write(_player.Descriptor.Stats.Vitality);\n            packet.Message.Write(_player.Descriptor.Stats.Strength + _player.Descriptor.StatBoosts.Strength);\n            packet.Message.Write(_player.Descriptor.Stats.Intelligence + _player.Descriptor.StatBoosts.Intelligence);\n            packet.Message.Write(_player.Descriptor.Stats.Dexterity + _player.Descriptor.StatBoosts.Dexterity);\n            packet.Message.Write(_player.Descriptor.Stats.Defense + _player.Descriptor.StatBoosts.Defense);\n            _player.Map.SendPacket(packet, NetDeliveryMethod.ReliableOrdered);\n        }\n\n        public void SendInventoryUpdate()\n        {\n            var packet = new Packet(PacketType.INVENTORY_UPDATE, ChannelType.UNASSIGNED);\n\n            for (int i = 0; i < Settings.MaxInventoryItems; i++)\n            {\n                if (_player.Inventory.GetSlot(i) != null)\n                {\n                    packet.Message.Write(true);\n\n                    packet.Message.Write(_player.Inventory.GetSlot(i).Item.PackData());\n                    packet.Message.Write(_player.Inventory.GetSlot(i).Amount);\n                }\n                else\n                {\n                    packet.Message.Write(false);\n                }\n            }\n\n            this.SendPacket(packet, NetDeliveryMethod.ReliableOrdered);\n        }\n\n        public void SendMovementPacket()\n        {\n            var packet = new Packet(PacketType.PLAYER_MOVING, ChannelType.UNASSIGNED);\n            packet.Message.Write(_player.UniqueID);\n            packet.Message.Write((byte)_player.Direction);\n            packet.Message.Write((byte)_player.State);\n            packet.Message.Write(_player.Descriptor.Position);\n\n            _player.Map.SendPacket(packet, NetDeliveryMethod.ReliableOrdered);\n        }\n\n        public void SendLoadingScreen(bool active = true)\n        {\n            var packet = new Packet(PacketType.LOADING_SCREEN, ChannelType.UNASSIGNED);\n            packet.Message.Write(active);\n            this.SendPacket(packet, NetDeliveryMethod.ReliableOrdered);\n        }\n\n        public void SendEquipmentUpdate()\n        {\n            var packet = new Packet(PacketType.EQUIPMENT_UPDATE, ChannelType.UNASSIGNED);\n\n            for (int i = 0; i < Enum.GetNames(typeof(EquipmentSlots)).Length; i++)\n            {\n                if (_player.Equipment.GetSlot(i) == null)\n                {\n\n                    packet.Message.Write(false);\n                    continue;\n                }\n\n                packet.Message.Write(true);\n                packet.Message.Write(_player.Equipment.GetSlot(i).PackData());\n            }\n\n            this.SendPacket(packet, NetDeliveryMethod.ReliableOrdered);\n        }\n    }\n}",
        "gt": [
            "'Lunar-Engine/src/Lunar.Server/World/Structure/MapItem.cs'",
            "'Lunar-Engine/src/Lunar.Server/World/Actors/Player.cs'",
            "'Lunar-Engine/src/Lunar.Server/Utilities/Commands/CommandHandler.cs'",
            "'Lunar-Engine/src/Lunar.Server/World/Actors/Components/PlayerNetworkComponent.cs'"
        ]
    },
    {
        "files": [
            "'SharpPulsar/src/SharpPulsar/PulsarSystem.cs'",
            "'SharpPulsar/src/SharpPulsar/Builder/ProducerConfigBuilder.cs'",
            "'SharpPulsar/src/SharpPulsar/Events/ReaderSourceBuilder.cs'",
            "'SharpPulsar/src/SharpPulsar/SystemClock.cs'"
        ],
        "content": "'SharpPulsar/src/SharpPulsar/PulsarSystem.cs'\n:﻿using Akka.Actor;\nusing Akka.Configuration;\nusing Serilog;\nusing SharpPulsar.Configuration;\nusing SharpPulsar.Messages.Client;\nusing System;\nusing System.Threading.Tasks;\nusing SharpPulsar.Builder;\nusing SharpPulsar.Events;\nusing SharpPulsar.TransactionImpl;\nusing SharpPulsar.Trino;\nusing System.Collections.Generic;\nusing SharpPulsar.Client;\nusing SharpPulsar.Messages;\n\nnamespace SharpPulsar\n{\n    public sealed class PulsarSystem : IDisposable\n    {\n        static PulsarSystem()\n        {\n\n            AppDomain.CurrentDomain.UnhandledException += CurrentDomain_UnhandledException;\n        }\n        private int _newClient = 0;\n        private static PulsarSystem _instance;\n        private static readonly Nito.AsyncEx.AsyncLock _lock = new Nito.AsyncEx.AsyncLock();\n        private static ActorSystem _actorSystem;\n        private readonly ClientConfigurationData _conf = new();\n        private readonly List<IActorRef> _actorRefs= new List<IActorRef>();\n        private readonly Action _logSetup = () =>\n        {\n            Log.Logger = new LoggerConfiguration()\n                .WriteTo.File(\"logs.log\", rollingInterval: RollingInterval.Hour)\n                .MinimumLevel.Information()\n                .CreateLogger();\n        };\n\n\n\n\n\n\n\n\n        public static PulsarSystem GetInstance(ActorSystem actorSystem, string actorSystemName = \"apache-pulsar\")\n        {\n            if (_instance == null)\n            {\n                using (_lock.Lock())\n                {\n                    if (_instance == null)\n                    {\n                        _instance = CreateActorSystem(null, null, false, actorSystemName, actorSystem);\n                    }\n                }\n            }\n            return _instance;\n        }\n        public static PulsarSystem GetInstance(Action logSetup = null, Config config = null, string actorSystemName = \"apache-pulsar\")\n        {\n            if (_instance == null)\n            {\n                using (_lock.Lock())\n                {\n                    if (_instance == null)\n                    {\n                        _instance = CreateActorSystem(logSetup, config, true, actorSystemName);\n\n                    }\n                }\n            }\n            return _instance;\n        }\n\n        private static PulsarSystem CreateActorSystem(Action logSetup, Config config, bool runLogSetup, string actorSystemName, ActorSystem actorsystem = null)\n        {\n            var confg = config ?? ConfigurationFactory.ParseString(@\"\n            akka\n            {\n                log-dead-letters = off\n                loglevel = INFO\n\t\t\t    log-config-on-start = on\n                loggers=[\"\"Akka.Logger.Serilog.SerilogLogger, Akka.Logger.Serilog\"\"]\n\t\t\t    actor\n                {\n\t\t\t\t      debug\n\t\t\t\t      {\n\t\t\t\t\t      receive = on\n\t\t\t\t\t      autoreceive = on\n\t\t\t\t\t      lifecycle = on\n\t\t\t\t\t      event-stream = on\n\t\t\t\t\t      unhandled = on\n\t\t\t\t      }\n\t\t\t    }\n                coordinated-shutdown\n                {\n                    exit-clr = on\n                }\n            }\");\n\n\n            var actorSystem = actorsystem ?? ActorSystem.Create(actorSystemName, confg);\n            return new PulsarSystem(actorSystem, logSetup, runLogSetup);\n        }\n\n        private PulsarSystem(ActorSystem actorSystem, Action logSetup, bool runLogSetup)\n        {\n            _actorSystem = actorSystem;\n            if (runLogSetup)\n            {\n                var logging = logSetup ?? _logSetup;\n                logging();\n            }\n\n        }\n\n        public async ValueTask<PulsarClient> NewClient(PulsarClientConfigBuilder conf)\n        {\n            _newClient++;\n            var actorSystem = _actorSystem;\n            if (conf.GetServiceUrlProvider != null)\n            {\n                conf.GetServiceUrlProvider.CreateActor(actorSystem);\n            }\n            var clientConf = conf.ClientConfigurationData;\n\n            var cnxPool = actorSystem.ActorOf(Client.ConnectionPool.Prop(clientConf), $\"ConnectionPool{_newClient}\");\n            _actorRefs.Add(cnxPool);\n            var generator = actorSystem.ActorOf(IdGeneratorActor.Prop(), $\"IdGenerator{_newClient}\");\n            _actorRefs.Add(generator);\n            var lookup = actorSystem.ActorOf(BinaryProtoLookupService.Prop(cnxPool, generator, clientConf.ServiceUrl, clientConf.ListenerName,\n                clientConf.UseTls, clientConf.MaxLookupRequest, clientConf.OperationTimeout, clientConf.ClientCnx), $\"BinaryProtoLookupService{_newClient}\");\n            _actorRefs.Add(lookup);\n            var client = _actorSystem.ActorOf(Props.Create(() => new PulsarClientActor(conf.ClientConfigurationData, cnxPool, lookup, generator)), $\"PulsarClient{_newClient}\");\n            _actorRefs.Add(client);\n            lookup.Tell(new SetClient(client));\n            var clientS = new PulsarClient(client, lookup, cnxPool, generator, conf.ClientConfigurationData, _actorSystem);\n            if (conf.ClientConfigurationData.ServiceUrlProvider != null)\n            {\n                conf.ClientConfigurationData.ServiceUrlProvider.Initialize(clientS);\n            }\n\n            IActorRef tcClient = ActorRefs.Nobody;\n            if (clientConf.EnableTransaction)\n            {\n                try\n                {\n                    var tcs = new TaskCompletionSource<object>(TaskCreationOptions.RunContinuationsAsynchronously);\n                    tcClient = actorSystem.ActorOf(TransactionCoordinatorClient.Prop(client, lookup, cnxPool, generator, clientConf, tcs), $\"transaction_coord_client{_newClient}\");\n                    var count = await tcs.Task.ConfigureAwait(false);\n                    if ((int)count <= 0)\n                        throw new Exception($\"Tranaction Coordinator has '{count}' transaction handler\");\n                    _actorRefs.Add(tcClient);\n                    client.Tell(new SetTcClient(tcClient));\n                }\n                catch\n                {\n                    tcClient.Tell(PoisonPill.Instance);\n                    throw;\n                }\n            }\n            clientS.TransactionCoordinatorClient(tcClient);\n            return clientS;\n        }\n        public EventSourceBuilder EventSource(PulsarClient client, string tenant, string @namespace, string topic, long fromMessageId, long toMessageId, string brokerWebServiceUrl)\n        {\n            return new EventSourceBuilder(client.ActorSystem, client.Client, client.Lookup, client.CnxPool, client.Generator, tenant, @namespace, topic, fromMessageId, toMessageId, brokerWebServiceUrl);\n        }\n\n        public static SqlInstance Sql(ClientOptions options)\n        {\n            return new SqlInstance(_actorSystem, options);\n        }\n        public static SqlInstance Sql(ActorSystem actorSystem, ClientOptions options)\n        {\n            if (actorSystem == null)\n                throw new Exception(\"ActorSystem can not be null\");\n\n            return new SqlInstance(actorSystem, options);\n        }\n        public static LiveSqlInstance LiveSql(ClientOptions options, string topic, TimeSpan interval, DateTime startAtPublishTime)\n        {\n            return new LiveSqlInstance(_actorSystem, options, topic, interval, startAtPublishTime);\n        }\n        public static LiveSqlInstance LiveSql(ActorSystem actorSystem, ClientOptions options, string topic, TimeSpan interval, DateTime startAtPublishTime)\n        {\n            if (actorSystem == null)\n                throw new Exception(\"ActorSystem can not be null\");\n            return new LiveSqlInstance(_actorSystem, options, topic, interval, startAtPublishTime);\n        }\n\n        public ActorSystem System => _actorSystem;\n        public ClientConfigurationData ClientConfigurationData => _conf;\n        public async Task Shutdown()\n        {\n            await _actorSystem.Terminate();\n        }\n        public void Dispose()\n        {\n            foreach(var c in _actorRefs)\n                EnsureStopped(c);\n\n            _actorSystem.Dispose();\n            _actorSystem.WhenTerminated.Wait();\n        }\n        private static void CurrentDomain_UnhandledException(object sender, UnhandledExceptionEventArgs e)\n        {\n            UtilityActor.Log(\"UnhandledException\", AkkaLogLevel.Fatal, e.ExceptionObject);\n        }\n        public void EnsureStopped(IActorRef actor)\n        {\n            using Inbox inbox = Inbox.Create(_actorSystem);\n            inbox.Watch(actor);\n            _actorSystem.Stop(actor);\n            inbox.Receive(TimeSpan.FromMinutes(5));\n        }\n    }\n}\n\n'SharpPulsar/src/SharpPulsar/Builder/ProducerConfigBuilder.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing SharpPulsar.Messages;\n\nusing SharpPulsar.Batch.Api;\nusing SharpPulsar.Interfaces.Interceptor;\n\nusing SharpPulsar.Interfaces;\nusing SharpPulsar.Common;\nusing SharpPulsar.Protocol.Proto;\n\n\nusing SharpPulsar.Extension;\nusing SharpPulsar.Configuration;\nusing SharpPulsar.Common.Compression;\nusing SharpPulsar.Crypto;\nusing SharpPulsar.Precondition;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnamespace SharpPulsar.Builder\n{\n\n    public class ProducerConfigBuilder<T>\n    {\n        private ProducerConfigurationData _conf = new ProducerConfigurationData();\n        private ISchema<T> _schema;\n        private List<IProducerInterceptor<T>> _interceptorList;\n\n        public virtual ProducerConfigurationData Build()\n        {\n            return _conf;\n        }\n        public ProducerConfigBuilder<T> LoadConf(IDictionary<string, object> config)\n        {\n            _conf = (ProducerConfigurationData)ConfigurationDataUtils.LoadData(config, _conf);\n            return this;\n        }\n        public ProducerConfigBuilder<T> EventListener(IProducerEventListener listener)\n        {\n            if (listener == null)\n                throw new ArgumentException(\"listener is null\");\n            _conf.ProducerEventListener = listener;\n            return this;\n        }\n\n\n\n\n\n        public ProducerConfigBuilder<T> ChunkMaxMessageSize(int max)\n        {\n            if (max < 1)\n                throw new ArgumentException(\"max should be > 0\");\n            _conf.ChunkMaxMessageSize = max;\n            return this;\n        }\n        public ProducerConfigBuilder<T> Topic(string topicName)\n        {\n            if (string.IsNullOrWhiteSpace(topicName))\n                throw new ArgumentException(\"topicName cannot be blank or null\");\n            _conf.TopicName = topicName.Trim();\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> ProducerName(string producerName)\n        {\n            _conf.ProducerName = producerName;\n            return this;\n        }\n        public ProducerConfigBuilder<T> AccessMode(Common.ProducerAccessMode accessMode)\n        {\n            _conf.AccessMode = accessMode;\n            return this;\n        }\n        public ProducerConfigBuilder<T> EnableBatching(bool enableBatching)\n        {\n            _conf.BatchingEnabled = enableBatching;\n            return this;\n        }\n\n\n\n\n\n        public ProducerConfigBuilder<T> SetAckReceivedListerner(Action<AckReceived> listerner)\n        {\n            if (!_conf.BatchingEnabled)\n                throw new InvalidOperationException(\"AckReceived Listerner is only allowed for batched producer!\");\n\n            _conf.AckReceivedListerner = listerner;\n            return this;\n        }\n        public ProducerConfigBuilder<T> BatchBuilder(IBatcherBuilder builder)\n        {\n            _conf.BatcherBuilder = builder;\n            return this;\n        }\n        public ProducerConfigBuilder<T> BatchingMaxPublishDelay(TimeSpan batchDelay)\n        {\n            _conf.SetBatchingMaxPublishDelayMs(batchDelay);\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> BatchingMaxMessages(int batchingMaxMessages)\n        {\n            _conf.BatchingMaxMessages = batchingMaxMessages;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> SendTimeout(TimeSpan sendTimeoutMs)\n        {\n            _conf.SetSendTimeoutMs(sendTimeoutMs);\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> MaxPendingMessages(int maxPendingMessages)\n        {\n            _conf.MaxPendingMessages = maxPendingMessages;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> MaxPendingMessagesAcrossPartitions(int maxPendingMessagesAcrossPartitions)\n        {\n            _conf.MaxPendingMessagesAcrossPartitions = maxPendingMessagesAcrossPartitions;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> EnableChunking(bool chunk)\n        {\n            _conf.ChunkingEnabled = chunk;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> MessageRoutingMode(MessageRoutingMode messageRouteMode)\n        {\n            _conf.MessageRoutingMode = messageRouteMode;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> CompressionType(CompressionType compressionType)\n        {\n            _conf.CompressionType = compressionType;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> HashingScheme(HashingScheme hashingScheme)\n        {\n            _conf.HashingScheme = hashingScheme;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> CryptoKeyReader(ICryptoKeyReader cryptoKeyReader)\n        {\n            _conf.CryptoKeyReader = cryptoKeyReader;\n            return this;\n        }\n        public ProducerConfigBuilder<T> DefaultCryptoKeyReader(string publicKey)\n        {\n            Condition.CheckArgument(!string.IsNullOrWhiteSpace(publicKey), \"publicKey cannot be blank\");\n            return CryptoKeyReader(Crypto.DefaultCryptoKeyReader.Builder().DefaultPublicKey(publicKey).Build());\n        }\n        public ProducerConfigBuilder<T> DefaultCryptoKeyReader(IDictionary<string, string> publicKeys)\n        {\n            Condition.CheckArgument(publicKeys.Count > 0, \"publicKeys cannot be empty\");\n            return CryptoKeyReader(Crypto.DefaultCryptoKeyReader.Builder().PublicKeys(publicKeys).Build());\n        }\n        public ProducerConfigBuilder<T> MessageCrypto(MessageCrypto messageCrypto)\n        {\n            _conf.MessageCrypto = messageCrypto;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> AddEncryptionKey(string key)\n        {\n            if (string.IsNullOrWhiteSpace(key))\n                throw new ArgumentException(\"Encryption key cannot be blank or null\");\n            _conf.EncryptionKeys.Add(key);\n            return this;\n        }\n\n\n\n\n\n\n\n\n\n        public ProducerConfigBuilder<T> InitialSubscriptionName(string initialSubscriptionName)\n        {\n            _conf.InitialSubscriptionName = initialSubscriptionName;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> CryptoFailureAction(ProducerCryptoFailureAction action)\n        {\n            _conf.CryptoFailureAction = action;\n            return this;\n        }\n\n\n        public ProducerConfigBuilder<T> InitialSequenceId(long initialSequenceId)\n        {\n            _conf.InitialSequenceId = initialSequenceId;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> Property(string key, string value)\n        {\n            if (string.IsNullOrWhiteSpace(key))\n                throw new ArgumentException(\"property key cannot be blank or null\");\n            if (string.IsNullOrWhiteSpace(value))\n                throw new ArgumentException(\"property value cannot be blank or null\");\n            _conf.Properties.Add(key, value);\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> Properties(IDictionary<string, string> properties)\n        {\n            if (properties == null)\n                throw new ArgumentException(\"properties cannot be null\");\n            if (properties.Count == 0)\n                throw new ArgumentException(\"properties cannot be empty\");\n            properties.SetOfKeyValuePairs().ToList().ForEach(entry =>\n            {\n                var (key, value) = entry;\n                if (string.IsNullOrWhiteSpace(key) || string.IsNullOrWhiteSpace(value))\n                {\n                    throw new ArgumentException(\"properties' key/value cannot be blank\");\n                }\n\n                _conf.Properties.Add(key, value);\n            });\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> Schema(ISchema<T> schema)\n        {\n            if (schema == null)\n                throw new ArgumentException(\"Schema is null\");\n            _schema = schema;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> Intercept(params IProducerInterceptor<T>[] interceptors)\n        {\n            if (_interceptorList == null)\n            {\n                _interceptorList = new List<IProducerInterceptor<T>>();\n            }\n            _interceptorList.AddRange(interceptors);\n            return this;\n        }\n        public ProducerConfigBuilder<T> AutoUpdatePartitions(bool autoUpdate)\n        {\n            _conf.AutoUpdatePartitions = autoUpdate;\n            return this;\n        }\n        public ProducerConfigBuilder<T> AutoUpdatePartitionsInterval(TimeSpan interval)\n        {\n            _conf.SetAutoUpdatePartitionsIntervalSeconds(interval);\n            return this;\n        }\n\n        public List<IProducerInterceptor<T>> GetInterceptors => _interceptorList;\n\n        public ISchema<T> GetSchema => _schema;\n\n        public ProducerConfigBuilder<T> EnableMultiSchema(bool multiSchema)\n        {\n            _conf.MultiSchema = multiSchema;\n            return this;\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        public ProducerConfigBuilder<T> EnableLazyStartPartitionedProducers(bool lazyStartPartitionedProducers)\n        {\n            _conf.LazyStartPartitionedProducers =  lazyStartPartitionedProducers;\n            return this;\n        }\n        public override string ToString()\n        {\n            return _conf?.ToString();\n        }\n\n    }\n\n    public interface IProducerEventListener\n    {\n        public void MessageSent(SentReceipt receipt);\n        public void Log(object log);\n    }\n}\n'SharpPulsar/src/SharpPulsar/Events/ReaderSourceBuilder.cs'\n:﻿using Akka.Actor;\nusing SharpPulsar.Builder;\nusing SharpPulsar.Configuration;\nusing SharpPulsar.Interfaces;\n\nnamespace SharpPulsar.Events\n{\n    public class ReaderSourceBuilder<T>\n    {\n        private readonly string _tenant;\n        private readonly string _namespace;\n        private readonly string _topic;\n\n        private readonly long _fromMessageId;\n        private readonly long _toMessageId;\n        private readonly string _brokerWebServiceUrl;\n        private readonly ReaderConfigBuilder<T> _conf;\n        private readonly ActorSystem _actorSystem;\n        private readonly IActorRef _cnxPool;\n        private readonly IActorRef _client;\n        private readonly IActorRef _lookup;\n        private readonly IActorRef _generator;\n        private readonly ISchema<T> _schema;\n        private readonly ClientConfigurationData _clientConfiguration;\n        public ReaderSourceBuilder(ClientConfigurationData clientConfiguration, ISchema<T> schema, ActorSystem actorSystem, IActorRef client, IActorRef lookup, IActorRef cnxPool, IActorRef generator, string tenant, string @namespace, string topic, long fromMessageId, long toMessageId, string brokerWebServiceUrl, ReaderConfigBuilder<T> readerConfigBuilder)\n        {\n            _clientConfiguration = clientConfiguration;\n            _schema = schema;\n            _client = client;\n            _lookup = lookup;\n            _cnxPool = cnxPool;\n            _generator = generator;\n            _actorSystem = actorSystem;\n            _fromMessageId = fromMessageId;\n            _toMessageId = toMessageId;\n            _tenant = tenant;\n            _namespace = @namespace;\n            _topic = topic;\n            _brokerWebServiceUrl = brokerWebServiceUrl;\n            _conf = readerConfigBuilder;\n        }\n\n        public ReaderSourceMethod<T> SourceMethod()\n        {\n            return new ReaderSourceMethod<T>(_clientConfiguration, _schema, _actorSystem, _client, _lookup, _cnxPool, _generator, _tenant, _namespace, _topic, _fromMessageId, _toMessageId, _brokerWebServiceUrl, _conf);\n        }\n    }\n}\n\n'SharpPulsar/src/SharpPulsar/SystemClock.cs'\n:﻿using System;\nnamespace SharpPulsar\n{\n    internal class SystemClock\n    {\n        public DateTime Now => DateTime.UtcNow;\n    }\n}\n",
        "gt": [
            "'SharpPulsar/src/SharpPulsar/SystemClock.cs'",
            "'SharpPulsar/src/SharpPulsar/Builder/ProducerConfigBuilder.cs'",
            "'SharpPulsar/src/SharpPulsar/Events/ReaderSourceBuilder.cs'",
            "'SharpPulsar/src/SharpPulsar/PulsarSystem.cs'"
        ]
    },
    {
        "files": [
            "'BGCurve/Assets/BansheeGz/BGCurve/Scripts/Cc/BGCcSweep2D.cs'",
            "'BGCurve/Assets/BansheeGz/BGCurve/Scripts/Editor/Cc/BGCcCursorChangeLinearEditor.cs'",
            "'BGCurve/Assets/BansheeGz/BGCurve/Scripts/Curve/BGCurveChangedArgs.cs'"
        ],
        "content": "'BGCurve/Assets/BansheeGz/BGCurve/Scripts/Cc/BGCcSweep2D.cs'\n:﻿using System;\nusing UnityEngine;\nusing System.Collections.Generic;\nusing BansheeGz.BGSpline.Curve;\n\nnamespace BansheeGz.BGSpline.Components\n{\n\n    [HelpURL(\"http:\n    [DisallowMultipleComponent]\n    [\n        CcDescriptor(\n            Description = \"Sweep a line or 2d spline along another 2d spline.\",\n            Name = \"Sweep 2D\",\n            Icon = \"BGCcSweep2d123\")\n    ]\n    [RequireComponent(typeof(MeshFilter), typeof(MeshRenderer))]\n    [AddComponentMenu(\"BansheeGz/BGCurve/Components/BGCcSweep2D\")]\n    [ExecuteInEditMode]\n    public class BGCcSweep2D : BGCcSplitterPolyline\n    {\n\n\n\n\n        public enum ProfileModeEnum\n        {\n\n            Line = 0,\n\n\n            Spline = 1,\n        }\n\n\n\n\n        [SerializeField] [Tooltip(\"Profile mode.\\r\\n \" +\n                                  \"StraightLine -use straight line as cross section;\\r\\n \" +\n                                  \"Spline - use 2d spline as cross section;\")] private ProfileModeEnum profileMode = ProfileModeEnum.Line;\n\n        [SerializeField] [Tooltip(\"Line width for StraightLine profile mode\")] private float lineWidth = 1;\n\n        [SerializeField] [Tooltip(\"U coordinate for line start\")] private float uCoordinateStart;\n\n        [SerializeField] [Tooltip(\"U coordinate for line end\")] private float uCoordinateEnd = 1;\n\n        [SerializeField] [Tooltip(\"Profile spline for Spline profile mode\")] private BGCcSplitterPolyline profileSpline;\n\n\n\n        [SerializeField] [Tooltip(\"V coordinate multiplier\")] private float vCoordinateScale = 1;\n\n        [SerializeField] [Tooltip(\"Swap U with V coordinate\")] private bool swapUV;\n\n        [SerializeField] [Tooltip(\"Swap mesh normals direction\")] private bool swapNormals;\n\n\n        public ProfileModeEnum ProfileMode\n        {\n            get { return profileMode; }\n            set { ParamChanged(ref profileMode, value); }\n        }\n\n\n        public float LineWidth\n        {\n            get { return lineWidth; }\n            set { ParamChanged(ref lineWidth, value); }\n        }\n\n\n        public float UCoordinateStart\n        {\n            get { return uCoordinateStart; }\n            set { ParamChanged(ref uCoordinateStart, value); }\n        }\n\n\n        public float UCoordinateEnd\n        {\n            get { return uCoordinateEnd; }\n            set { ParamChanged(ref uCoordinateEnd, value); }\n        }\n\n\n        public BGCcSplitterPolyline ProfileSpline\n        {\n            get { return profileSpline; }\n            set\n            {\n                ParamChanged(ref profileSpline, value);\n\n            }\n        }\n\n\n        public bool SwapUv\n        {\n            get { return swapUV; }\n            set { ParamChanged(ref swapUV, value); }\n        }\n\n\n        public bool SwapNormals\n        {\n            get { return swapNormals; }\n            set { ParamChanged(ref swapNormals, value); }\n        }\n\n\n\n\n        public float VCoordinateScale\n        {\n            get { return vCoordinateScale; }\n            set { ParamChanged(ref vCoordinateScale, value); }\n        }\n\n\n\n\n        public override string Error\n        {\n            get\n            {\n                return ChoseMessage(base.Error, () =>\n                {\n                    if (!Curve.Mode2DOn) return \"Curve should be in 2D mode\";\n\n                    if (profileMode == ProfileModeEnum.Spline)\n                    {\n                        if (profileSpline == null) return \"Profile spline is not set.\";\n                        if (profileSpline.Curve.Mode2D != BGCurve.Mode2DEnum.XY) return \"Profile spline should be in XY 2D mode.\";\n                        profileSpline.InvalidateData();\n                        if (profileSpline.PointsCount < 2) return \"Profile spline should have at least 2 points.\";\n                    }\n\n                    var profilePointsCount = profileMode == ProfileModeEnum.Line ? 2 : profileSpline.PointsCount;\n                    if (PointsCount*profilePointsCount > 65534) return \"Vertex count per mesh limit is exceeded ( > 65534)\";\n                    return null;\n                });\n            }\n        }\n\n\n\n\n        private static readonly List<PositionWithU> crossSectionList = new List<PositionWithU>();\n\n        [NonSerialized] private MeshFilter meshFilter;\n        private readonly List<Vector3> vertices = new List<Vector3>();\n        private readonly List<Vector2> uvs = new List<Vector2>();\n        private readonly List<int> triangles = new List<int>();\n\n        public MeshFilter MeshFilter\n        {\n            get\n            {\n\n                if (meshFilter == null) meshFilter = GetComponent<MeshFilter>();\n                return meshFilter;\n            }\n        }\n\n\n\n\n\n        public override void Start()\n        {\n            useLocal = true;\n            base.Start();\n            if (MeshFilter.sharedMesh == null) UpdateUI();\n        }\n\n\n\n\n        public void UpdateUI()\n        {\n            if (Error != null) return;\n\n            if (!UseLocal)\n            {\n                useLocal = true;\n                dataValid = false;\n            }\n            var positions = Positions;\n            if (positions.Count < 2) return;\n\n            MeshFilter meshFilter;\n            try\n            {\n                meshFilter = MeshFilter;\n            }\n            catch (MissingReferenceException)\n            {\n                RemoveListeners();\n                return;\n            }\n            var mesh = meshFilter.sharedMesh;\n            if (mesh == null)\n            {\n                mesh = new Mesh();\n                meshFilter.mesh = mesh;\n            }\n\n\n            crossSectionList.Clear();\n            triangles.Clear();\n            uvs.Clear();\n            vertices.Clear();\n\n\n            if (profileMode == ProfileModeEnum.Line)\n            {\n                crossSectionList.Add(new PositionWithU {Position = Vector3.left*lineWidth*.5f, U = uCoordinateStart});\n                crossSectionList.Add(new PositionWithU {Position = Vector3.right*lineWidth*.5f, U = uCoordinateEnd});\n            }\n            else\n            {\n                var points = profileSpline.Positions;\n                for (var i = 0; i < points.Count; i++) crossSectionList.Add(new PositionWithU {Position = points[i]});\n            }\n            var crossSectionCount = crossSectionList.Count;\n            var crossSectionDistance = .0f;\n            for (var i = 0; i < crossSectionCount - 1; i++) crossSectionDistance += Vector3.Distance(crossSectionList[i].Position, crossSectionList[i + 1].Position);\n\n\n            if (profileMode == ProfileModeEnum.Spline)\n            {\n                var distance = 0f;\n                for (var i = 0; i < crossSectionCount - 1; i++)\n                {\n                    crossSectionList[i] = new PositionWithU {Position = crossSectionList[i].Position, U = uCoordinateStart + (distance/crossSectionDistance)*(uCoordinateEnd - uCoordinateStart)};\n                    distance += Vector3.Distance(crossSectionList[i].Position, crossSectionList[i + 1].Position);\n                }\n                crossSectionList[crossSectionList.Count - 1] = new PositionWithU {Position = crossSectionList[crossSectionList.Count - 1].Position, U = uCoordinateEnd};\n            }\n\n\n            Vector3 normal;\n            switch (Curve.Mode2D)\n            {\n                case BGCurve.Mode2DEnum.XY:\n                    normal = swapNormals ? Vector3.back : Vector3.forward;\n                    break;\n                case BGCurve.Mode2DEnum.XZ:\n                    normal = swapNormals ? Vector3.down : Vector3.up;\n                    break;\n                case BGCurve.Mode2DEnum.YZ:\n                    normal = swapNormals ? Vector3.left : Vector3.right;\n                    break;\n                default:\n                    throw new ArgumentOutOfRangeException(\"Curve.Mode2D\");\n            }\n\n\n\n            var closed = Curve.Closed;\n            Vector3 firstTangent;\n            if (closed)\n            {\n                var first = positions[1] - positions[0];\n                var firstDistance = first.magnitude;\n                var last = positions[positions.Count - 1] - positions[positions.Count - 2];\n                var lastDistance = last.magnitude;\n\n                var distanceRatio = firstDistance/lastDistance;\n                firstTangent = first.normalized + last.normalized*distanceRatio;\n            }\n            else firstTangent = positions[1] - positions[0];\n\n            var previousForward = firstTangent;\n            var previousForwardNormalized = previousForward.normalized;\n            var previousForwardDistance = (positions[1] - positions[0]).magnitude;\n            var matrix = Matrix4x4.TRS(positions[0], Quaternion.LookRotation(previousForward, normal), Vector3.one);\n            for (var i = 0; i < crossSectionCount; i++)\n            {\n                var positionWithU = crossSectionList[i];\n                vertices.Add(matrix.MultiplyPoint(positionWithU.Position));\n                uvs.Add(swapUV ? new Vector2(0, positionWithU.U) : new Vector2(positionWithU.U, 0));\n            }\n\n\n            var currentDistance = previousForwardDistance;\n            var positionsCount = positions.Count;\n            for (var i = 1; i < positionsCount; i++)\n            {\n                var pos = positions[i];\n                var lastPoint = i == positionsCount - 1;\n\n                var forward = lastPoint ? previousForward : positions[i + 1] - pos;\n                var forwardNormalized = forward.normalized;\n                var forwardDistance = forward.magnitude;\n\n                var distanceRatio = forwardDistance/previousForwardDistance;\n                var tangent = forwardNormalized + previousForwardNormalized*distanceRatio;\n\n\n                if (lastPoint && closed) tangent = firstTangent;\n\n                matrix = Matrix4x4.TRS(pos, Quaternion.LookRotation(tangent, normal), Vector3.one);\n                var v = currentDistance/crossSectionDistance*vCoordinateScale;\n\n\n                for (var j = 0; j < crossSectionCount; j++)\n                {\n                    var positionWithU = crossSectionList[j];\n                    vertices.Add(matrix.MultiplyPoint(positionWithU.Position));\n                    uvs.Add(swapUV ? new Vector2(v, positionWithU.U) : new Vector2(positionWithU.U, v));\n                }\n\n\n                var firstRowStart = vertices.Count - crossSectionCount*2;\n                var secondRowStart = vertices.Count - crossSectionCount;\n                for (var j = 0; j < crossSectionCount - 1; j++)\n                {\n                    triangles.Add(firstRowStart + j);\n                    triangles.Add(secondRowStart + j);\n                    triangles.Add(firstRowStart + j + 1);\n\n                    triangles.Add(firstRowStart + j + 1);\n                    triangles.Add(secondRowStart + j);\n                    triangles.Add(secondRowStart + j + 1);\n                }\n\n\n                currentDistance += forwardDistance;\n                previousForward = forward;\n                previousForwardNormalized = forwardNormalized;\n                previousForwardDistance = forwardDistance;\n            }\n\n\n\n            mesh.Clear();\n            mesh.SetVertices(vertices);\n            mesh.SetUVs(0, uvs);\n            mesh.SetTriangles(triangles, 0);\n            mesh.RecalculateNormals();\n        }\n\n\n\n\n\n        protected override void UpdateRequested(object sender, EventArgs e)\n        {\n            base.UpdateRequested(sender, e);\n            UpdateUI();\n        }\n\n\n\n\n\n        private struct PositionWithU\n        {\n            public Vector3 Position;\n            public float U;\n        }\n    }\n}\n'BGCurve/Assets/BansheeGz/BGCurve/Scripts/Editor/Cc/BGCcCursorChangeLinearEditor.cs'\n:﻿using System;\nusing BansheeGz.BGSpline.Components;\nusing BansheeGz.BGSpline.Curve;\nusing UnityEditor;\nusing UnityEngine;\n\nnamespace BansheeGz.BGSpline.Editor\n{\n    [CustomEditor(typeof (BGCcCursorChangeLinear))]\n    public class BGCcCursorChangeLinearEditor : BGCcEditor\n    {\n        private GUIContent speedFieldContent;\n        private GUIContent delayFieldContent;\n\n        private BGCcCursorChangeLinear ChangeLinear\n        {\n            get { return (BGCcCursorChangeLinear) cc; }\n        }\n\n        protected override void InternalOnInspectorGUI()\n        {\n            BGEditorUtility.Assign(ref speedFieldContent, () => new GUIContent(\"Speed Field\", \"Speed field to take a speed from. Each point will have it's own speed. Should be a float field.\"));\n            BGEditorUtility.Assign(ref delayFieldContent, () => new GUIContent(\"Delay Field\", \"Delay field to take a delay from. Each point will have it's own delay. Should be a float field.\"));\n\n\n            EditorGUILayout.PropertyField(serializedObject.FindProperty(\"useFixedUpdate\"));\n\n\n            BGEditorUtility.VerticalBox(() =>\n            {\n                BGEditorUtility.CustomField(speedFieldContent, cc.Curve, ChangeLinear.SpeedField, BGCurvePointField.TypeEnum.Float, field => ChangeLinear.SpeedField = field);\n\n                if (ChangeLinear.SpeedField == null) EditorGUILayout.PropertyField(serializedObject.FindProperty(\"speed\"));\n            });\n\n\n            BGEditorUtility.VerticalBox(() =>\n            {\n                BGEditorUtility.CustomField(delayFieldContent, cc.Curve, ChangeLinear.DelayField, BGCurvePointField.TypeEnum.Float, field => ChangeLinear.DelayField = field);\n\n                if (ChangeLinear.DelayField == null) EditorGUILayout.PropertyField(serializedObject.FindProperty(\"delay\"));\n            });\n\n\n            EditorGUILayout.PropertyField(serializedObject.FindProperty(\"overflowControl\"));\n            EditorGUILayout.PropertyField(serializedObject.FindProperty(\"adjustByTotalLength\"));\n\n            try\n            {\n\n                EditorGUILayout.PropertyField(serializedObject.FindProperty(\"pointReachedEvent\"));\n            }\n            catch (NullReferenceException)\n            {\n            }\n        }\n    }\n}\n'BGCurve/Assets/BansheeGz/BGCurve/Scripts/Curve/BGCurveChangedArgs.cs'\n:﻿using System;\n\nnamespace BansheeGz.BGSpline.Curve\n{\n\n\n\n\n\n\n\n\n\n\n\n\n\n    public class BGCurveChangedArgs : EventArgs, ICloneable\n    {\n\n        private static readonly BGCurveChangedArgs Instance = new BGCurveChangedArgs();\n\n\n\n        public enum ChangeTypeEnum\n        {\n            Multiple,\n            CurveTransform,\n            Points,\n            Point,\n            Fields,\n            Snap,\n            Curve\n        }\n\n\n        private ChangeTypeEnum changeType;\n\n\n        private BGCurve curve;\n\n        private BGCurvePointI point;\n\n        private string message;\n\n        private BGCurveChangedArgs[] multipleChanges;\n\n\n        public ChangeTypeEnum ChangeType\n        {\n            get { return changeType; }\n        }\n\n\n        public BGCurve Curve\n        {\n            get { return curve; }\n        }\n\n\n        public string Message\n        {\n            get { return message; }\n        }\n\n\n        public BGCurveChangedArgs[] MultipleChanges\n        {\n            get { return multipleChanges; }\n        }\n\n\n\n        private BGCurveChangedArgs()\n        {\n        }\n\n\n        public static BGCurveChangedArgs GetInstance(BGCurve curve, ChangeTypeEnum type, string message)\n        {\n            Instance.curve = curve;\n            Instance.changeType = type;\n            Instance.message = message;\n            Instance.multipleChanges = null;\n            Instance.point = null;\n            return Instance;\n        }\n\n\n        public static BGCurveChangedArgs GetInstance(BGCurve curve, BGCurveChangedArgs[] changes, string changesInTransaction)\n        {\n            Instance.curve = curve;\n            Instance.changeType = ChangeTypeEnum.Multiple;\n            Instance.message = BGCurve.EventTransaction;\n            Instance.multipleChanges = changes;\n            Instance.point = null;\n            return Instance;\n        }\n\n\n        public static BGCurveChangedArgs GetInstance(BGCurve curve, BGCurvePointI point, string changesInTransaction)\n        {\n            Instance.curve = curve;\n            Instance.changeType = ChangeTypeEnum.Point;\n            Instance.message = BGCurve.EventTransaction;\n            Instance.point = point;\n            return Instance;\n        }\n\n\n        public object Clone()\n        {\n            return new BGCurveChangedArgs\n            {\n                changeType = changeType,\n                curve = curve,\n                multipleChanges = multipleChanges,\n                message = message,\n                point = point\n            };\n        }\n\n        protected bool Equals(BGCurveChangedArgs other)\n        {\n            return changeType == other.changeType && Equals(curve, other.curve) ;\n        }\n\n        public override bool Equals(object obj)\n        {\n            if (ReferenceEquals(null, obj)) return false;\n            if (ReferenceEquals(this, obj)) return true;\n            if (obj.GetType() != this.GetType()) return false;\n            return Equals((BGCurveChangedArgs) obj);\n        }\n\n        public override int GetHashCode()\n        {\n            var hashCode = (int) changeType;\n            hashCode = (hashCode*397) ^ (curve != null ? curve.GetHashCode() : 0);\n            return hashCode;\n        }\n\n\n        public class BeforeChange : EventArgs\n        {\n            public static readonly BeforeChange BeforeChangeInstance = new BeforeChange();\n\n            public string Operation;\n\n            private BeforeChange()\n            {\n            }\n\n            public static BeforeChange GetInstance(string operation)\n            {\n                BeforeChangeInstance.Operation = operation;\n                return BeforeChangeInstance;\n            }\n        }\n    }\n}",
        "gt": [
            "'BGCurve/Assets/BansheeGz/BGCurve/Scripts/Curve/BGCurveChangedArgs.cs'",
            "'BGCurve/Assets/BansheeGz/BGCurve/Scripts/Cc/BGCcSweep2D.cs'",
            "'BGCurve/Assets/BansheeGz/BGCurve/Scripts/Editor/Cc/BGCcCursorChangeLinearEditor.cs'"
        ]
    },
    {
        "files": [
            "'ETCore/ETClient/Unity/Assets/ThirdParty/LitJson/Lexer.cs'",
            "'ETCore/ETServer/Server/ET.Core/Base/Helper/JsonHelper.cs'",
            "'ETCore/ETServer/Server/Hotfix/Handler/C2G_PlayerInfoHandler.cs'"
        ],
        "content": "'ETCore/ETClient/Unity/Assets/ThirdParty/LitJson/Lexer.cs'\n:#region Header\n\n#endregion\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\n\n\nnamespace LitJson\n{\n    internal class FsmContext\n    {\n        public bool  Return;\n        public int   NextState;\n        public Lexer L;\n        public int   StateStack;\n    }\n\n\n    internal class Lexer\n    {\n        #region Fields\n        private delegate bool StateHandler (FsmContext ctx);\n\n        private static int[]          fsm_return_table;\n        private static StateHandler[] fsm_handler_table;\n\n        private bool          allow_comments;\n        private bool          allow_single_quoted_strings;\n        private bool          end_of_input;\n        private FsmContext    fsm_context;\n        private int           input_buffer;\n        private int           input_char;\n        private TextReader    reader;\n        private int           state;\n        private StringBuilder string_buffer;\n        private string        string_value;\n        private int           token;\n        private int           unichar;\n        #endregion\n\n\n        #region Properties\n        public bool AllowComments {\n            get { return allow_comments; }\n            set { allow_comments = value; }\n        }\n\n        public bool AllowSingleQuotedStrings {\n            get { return allow_single_quoted_strings; }\n            set { allow_single_quoted_strings = value; }\n        }\n\n        public bool EndOfInput {\n            get { return end_of_input; }\n        }\n\n        public int Token {\n            get { return token; }\n        }\n\n        public string StringValue {\n            get { return string_value; }\n        }\n        #endregion\n\n\n        #region Constructors\n        static Lexer ()\n        {\n            PopulateFsmTables ();\n        }\n\n        public Lexer (TextReader reader)\n        {\n            allow_comments = true;\n            allow_single_quoted_strings = true;\n\n            input_buffer = 0;\n            string_buffer = new StringBuilder (128);\n            state = 1;\n            end_of_input = false;\n            this.reader = reader;\n\n            fsm_context = new FsmContext ();\n            fsm_context.L = this;\n        }\n        #endregion\n\n\n        #region Static Methods\n        private static int HexValue (int digit)\n        {\n            switch (digit) {\n            case 'a':\n            case 'A':\n                return 10;\n\n            case 'b':\n            case 'B':\n                return 11;\n\n            case 'c':\n            case 'C':\n                return 12;\n\n            case 'd':\n            case 'D':\n                return 13;\n\n            case 'e':\n            case 'E':\n                return 14;\n\n            case 'f':\n            case 'F':\n                return 15;\n\n            default:\n                return digit - '0';\n            }\n        }\n\n        private static void PopulateFsmTables ()\n        {\n\n\n            fsm_handler_table = new StateHandler[28] {\n                State1,\n                State2,\n                State3,\n                State4,\n                State5,\n                State6,\n                State7,\n                State8,\n                State9,\n                State10,\n                State11,\n                State12,\n                State13,\n                State14,\n                State15,\n                State16,\n                State17,\n                State18,\n                State19,\n                State20,\n                State21,\n                State22,\n                State23,\n                State24,\n                State25,\n                State26,\n                State27,\n                State28\n            };\n\n            fsm_return_table = new int[28] {\n                (int) ParserToken.Char,\n                0,\n                (int) ParserToken.Number,\n                (int) ParserToken.Number,\n                0,\n                (int) ParserToken.Number,\n                0,\n                (int) ParserToken.Number,\n                0,\n                0,\n                (int) ParserToken.True,\n                0,\n                0,\n                0,\n                (int) ParserToken.False,\n                0,\n                0,\n                (int) ParserToken.Null,\n                (int) ParserToken.CharSeq,\n                (int) ParserToken.Char,\n                0,\n                0,\n                (int) ParserToken.CharSeq,\n                (int) ParserToken.Char,\n                0,\n                0,\n                0,\n                0\n            };\n        }\n\n        private static char ProcessEscChar (int esc_char)\n        {\n            switch (esc_char) {\n            case '\"':\n            case '\\'':\n            case '\\\\':\n            case '/':\n                return Convert.ToChar (esc_char);\n\n            case 'n':\n                return '\\n';\n\n            case 't':\n                return '\\t';\n\n            case 'r':\n                return '\\r';\n\n            case 'b':\n                return '\\b';\n\n            case 'f':\n                return '\\f';\n\n            default:\n\n                return '?';\n            }\n        }\n\n        private static bool State1 (FsmContext ctx)\n        {\n            while (ctx.L.GetChar ()) {\n                if (ctx.L.input_char == ' ' ||\n                    ctx.L.input_char >= '\\t' && ctx.L.input_char <= '\\r')\n                    continue;\n\n                if (ctx.L.input_char >= '1' && ctx.L.input_char <= '9') {\n                    ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                    ctx.NextState = 3;\n                    return true;\n                }\n\n                switch (ctx.L.input_char) {\n                case '\"':\n                    ctx.NextState = 19;\n                    ctx.Return = true;\n                    return true;\n\n                case ',':\n                case ':':\n                case '[':\n                case ']':\n                case '{':\n                case '}':\n                    ctx.NextState = 1;\n                    ctx.Return = true;\n                    return true;\n\n                case '-':\n                    ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                    ctx.NextState = 2;\n                    return true;\n\n                case '0':\n                    ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                    ctx.NextState = 4;\n                    return true;\n\n                case 'f':\n                    ctx.NextState = 12;\n                    return true;\n\n                case 'n':\n                    ctx.NextState = 16;\n                    return true;\n\n                case 't':\n                    ctx.NextState = 9;\n                    return true;\n\n                case '\\'':\n                    if (! ctx.L.allow_single_quoted_strings)\n                        return false;\n\n                    ctx.L.input_char = '\"';\n                    ctx.NextState = 23;\n                    ctx.Return = true;\n                    return true;\n\n                case '/':\n                    if (! ctx.L.allow_comments)\n                        return false;\n\n                    ctx.NextState = 25;\n                    return true;\n\n                default:\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        private static bool State2 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            if (ctx.L.input_char >= '1' && ctx.L.input_char<= '9') {\n                ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                ctx.NextState = 3;\n                return true;\n            }\n\n            switch (ctx.L.input_char) {\n            case '0':\n                ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                ctx.NextState = 4;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State3 (FsmContext ctx)\n        {\n            while (ctx.L.GetChar ()) {\n                if (ctx.L.input_char >= '0' && ctx.L.input_char <= '9') {\n                    ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                    continue;\n                }\n\n                if (ctx.L.input_char == ' ' ||\n                    ctx.L.input_char >= '\\t' && ctx.L.input_char <= '\\r') {\n                    ctx.Return = true;\n                    ctx.NextState = 1;\n                    return true;\n                }\n\n                switch (ctx.L.input_char) {\n                case ',':\n                case ']':\n                case '}':\n                    ctx.L.UngetChar ();\n                    ctx.Return = true;\n                    ctx.NextState = 1;\n                    return true;\n\n                case '.':\n                    ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                    ctx.NextState = 5;\n                    return true;\n\n                case 'e':\n                case 'E':\n                    ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                    ctx.NextState = 7;\n                    return true;\n\n                default:\n                    return false;\n                }\n            }\n            return true;\n        }\n\n        private static bool State4 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            if (ctx.L.input_char == ' ' ||\n                ctx.L.input_char >= '\\t' && ctx.L.input_char <= '\\r') {\n                ctx.Return = true;\n                ctx.NextState = 1;\n                return true;\n            }\n\n            switch (ctx.L.input_char) {\n            case ',':\n            case ']':\n            case '}':\n                ctx.L.UngetChar ();\n                ctx.Return = true;\n                ctx.NextState = 1;\n                return true;\n\n            case '.':\n                ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                ctx.NextState = 5;\n                return true;\n\n            case 'e':\n            case 'E':\n                ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                ctx.NextState = 7;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State5 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            if (ctx.L.input_char >= '0' && ctx.L.input_char <= '9') {\n                ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                ctx.NextState = 6;\n                return true;\n            }\n\n            return false;\n        }\n\n        private static bool State6 (FsmContext ctx)\n        {\n            while (ctx.L.GetChar ()) {\n                if (ctx.L.input_char >= '0' && ctx.L.input_char <= '9') {\n                    ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                    continue;\n                }\n\n                if (ctx.L.input_char == ' ' ||\n                    ctx.L.input_char >= '\\t' && ctx.L.input_char <= '\\r') {\n                    ctx.Return = true;\n                    ctx.NextState = 1;\n                    return true;\n                }\n\n                switch (ctx.L.input_char) {\n                case ',':\n                case ']':\n                case '}':\n                    ctx.L.UngetChar ();\n                    ctx.Return = true;\n                    ctx.NextState = 1;\n                    return true;\n\n                case 'e':\n                case 'E':\n                    ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                    ctx.NextState = 7;\n                    return true;\n\n                default:\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        private static bool State7 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            if (ctx.L.input_char >= '0' && ctx.L.input_char<= '9') {\n                ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                ctx.NextState = 8;\n                return true;\n            }\n\n            switch (ctx.L.input_char) {\n            case '+':\n            case '-':\n                ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                ctx.NextState = 8;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State8 (FsmContext ctx)\n        {\n            while (ctx.L.GetChar ()) {\n                if (ctx.L.input_char >= '0' && ctx.L.input_char<= '9') {\n                    ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                    continue;\n                }\n\n                if (ctx.L.input_char == ' ' ||\n                    ctx.L.input_char >= '\\t' && ctx.L.input_char<= '\\r') {\n                    ctx.Return = true;\n                    ctx.NextState = 1;\n                    return true;\n                }\n\n                switch (ctx.L.input_char) {\n                case ',':\n                case ']':\n                case '}':\n                    ctx.L.UngetChar ();\n                    ctx.Return = true;\n                    ctx.NextState = 1;\n                    return true;\n\n                default:\n                    return false;\n                }\n            }\n\n            return true;\n        }\n\n        private static bool State9 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            switch (ctx.L.input_char) {\n            case 'r':\n                ctx.NextState = 10;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State10 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            switch (ctx.L.input_char) {\n            case 'u':\n                ctx.NextState = 11;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State11 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            switch (ctx.L.input_char) {\n            case 'e':\n                ctx.Return = true;\n                ctx.NextState = 1;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State12 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            switch (ctx.L.input_char) {\n            case 'a':\n                ctx.NextState = 13;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State13 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            switch (ctx.L.input_char) {\n            case 'l':\n                ctx.NextState = 14;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State14 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            switch (ctx.L.input_char) {\n            case 's':\n                ctx.NextState = 15;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State15 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            switch (ctx.L.input_char) {\n            case 'e':\n                ctx.Return = true;\n                ctx.NextState = 1;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State16 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            switch (ctx.L.input_char) {\n            case 'u':\n                ctx.NextState = 17;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State17 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            switch (ctx.L.input_char) {\n            case 'l':\n                ctx.NextState = 18;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State18 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            switch (ctx.L.input_char) {\n            case 'l':\n                ctx.Return = true;\n                ctx.NextState = 1;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State19 (FsmContext ctx)\n        {\n            while (ctx.L.GetChar ()) {\n                switch (ctx.L.input_char) {\n                case '\"':\n                    ctx.L.UngetChar ();\n                    ctx.Return = true;\n                    ctx.NextState = 20;\n                    return true;\n\n                case '\\\\':\n                    ctx.StateStack = 19;\n                    ctx.NextState = 21;\n                    return true;\n\n                default:\n                    ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                    continue;\n                }\n            }\n\n            return true;\n        }\n\n        private static bool State20 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            switch (ctx.L.input_char) {\n            case '\"':\n                ctx.Return = true;\n                ctx.NextState = 1;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State21 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            switch (ctx.L.input_char) {\n            case 'u':\n                ctx.NextState = 22;\n                return true;\n\n            case '\"':\n            case '\\'':\n            case '/':\n            case '\\\\':\n            case 'b':\n            case 'f':\n            case 'n':\n            case 'r':\n            case 't':\n                ctx.L.string_buffer.Append (\n                    ProcessEscChar (ctx.L.input_char));\n                ctx.NextState = ctx.StateStack;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State22 (FsmContext ctx)\n        {\n            int counter = 0;\n            int mult    = 4096;\n\n            ctx.L.unichar = 0;\n\n            while (ctx.L.GetChar ()) {\n\n                if (ctx.L.input_char >= '0' && ctx.L.input_char <= '9' ||\n                    ctx.L.input_char >= 'A' && ctx.L.input_char <= 'F' ||\n                    ctx.L.input_char >= 'a' && ctx.L.input_char <= 'f') {\n\n                    ctx.L.unichar += HexValue (ctx.L.input_char) * mult;\n\n                    counter++;\n                    mult /= 16;\n\n                    if (counter == 4) {\n                        ctx.L.string_buffer.Append (\n                            Convert.ToChar (ctx.L.unichar));\n                        ctx.NextState = ctx.StateStack;\n                        return true;\n                    }\n\n                    continue;\n                }\n\n                return false;\n            }\n\n            return true;\n        }\n\n        private static bool State23 (FsmContext ctx)\n        {\n            while (ctx.L.GetChar ()) {\n                switch (ctx.L.input_char) {\n                case '\\'':\n                    ctx.L.UngetChar ();\n                    ctx.Return = true;\n                    ctx.NextState = 24;\n                    return true;\n\n                case '\\\\':\n                    ctx.StateStack = 23;\n                    ctx.NextState = 21;\n                    return true;\n\n                default:\n                    ctx.L.string_buffer.Append ((char) ctx.L.input_char);\n                    continue;\n                }\n            }\n\n            return true;\n        }\n\n        private static bool State24 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            switch (ctx.L.input_char) {\n            case '\\'':\n                ctx.L.input_char = '\"';\n                ctx.Return = true;\n                ctx.NextState = 1;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State25 (FsmContext ctx)\n        {\n            ctx.L.GetChar ();\n\n            switch (ctx.L.input_char) {\n            case '*':\n                ctx.NextState = 27;\n                return true;\n\n            case '/':\n                ctx.NextState = 26;\n                return true;\n\n            default:\n                return false;\n            }\n        }\n\n        private static bool State26 (FsmContext ctx)\n        {\n            while (ctx.L.GetChar ()) {\n                if (ctx.L.input_char == '\\n') {\n                    ctx.NextState = 1;\n                    return true;\n                }\n            }\n\n            return true;\n        }\n\n        private static bool State27 (FsmContext ctx)\n        {\n            while (ctx.L.GetChar ()) {\n                if (ctx.L.input_char == '*') {\n                    ctx.NextState = 28;\n                    return true;\n                }\n            }\n\n            return true;\n        }\n\n        private static bool State28 (FsmContext ctx)\n        {\n            while (ctx.L.GetChar ()) {\n                if (ctx.L.input_char == '*')\n                    continue;\n\n                if (ctx.L.input_char == '/') {\n                    ctx.NextState = 1;\n                    return true;\n                }\n\n                ctx.NextState = 27;\n                return true;\n            }\n\n            return true;\n        }\n        #endregion\n\n\n        private bool GetChar ()\n        {\n            if ((input_char = NextChar ()) != -1)\n                return true;\n\n            end_of_input = true;\n            return false;\n        }\n\n        private int NextChar ()\n        {\n            if (input_buffer != 0) {\n                int tmp = input_buffer;\n                input_buffer = 0;\n\n                return tmp;\n            }\n\n            return reader.Read ();\n        }\n\n        public bool NextToken ()\n        {\n            StateHandler handler;\n            fsm_context.Return = false;\n\n            while (true) {\n                handler = fsm_handler_table[state - 1];\n\n                if (! handler (fsm_context))\n                    throw new JsonException (input_char);\n\n                if (end_of_input)\n                    return false;\n\n                if (fsm_context.Return) {\n                    string_value = string_buffer.ToString ();\n                    string_buffer.Remove (0, string_buffer.Length);\n                    token = fsm_return_table[state - 1];\n\n                    if (token == (int) ParserToken.Char)\n                        token = input_char;\n\n                    state = fsm_context.NextState;\n\n                    return true;\n                }\n\n                state = fsm_context.NextState;\n            }\n        }\n\n        private void UngetChar ()\n        {\n            input_buffer = input_char;\n        }\n    }\n}\n\n'ETCore/ETServer/Server/ET.Core/Base/Helper/JsonHelper.cs'\n:﻿#if SERVER\nusing System;\nnamespace ETModel\n{\n\tpublic static class JsonHelper\n\t{\n\t\tpublic static string ToJson(object obj)\n\t\t{\n\t\t\treturn MongoHelper.ToJson(obj);\n\t\t}\n\n\t\tpublic static T FromJson<T>(string str)\n\t\t{\n\t\t\treturn MongoHelper.FromJson<T>(str);\n\t\t}\n\n\t\tpublic static object FromJson(Type type, string str)\n\t\t{\n\t\t\treturn MongoHelper.FromJson(type, str);\n\t\t}\n\n\t\tpublic static T Clone<T>(T t)\n\t\t{\n\t\t\treturn FromJson<T>(ToJson(t));\n\t\t}\n\t}\n}\n#else\nusing System;\nusing System.ComponentModel;\nusing LitJson;\n\nnamespace ETModel\n{\n\tpublic static class JsonHelper\n\t{\n\t\tpublic static string ToJson(object obj)\n\t\t{\n\t\t\treturn JsonMapper.ToJson(obj);\n\t\t}\n\n\t\tpublic static T FromJson<T>(string str)\n\t\t{\n\t\t\tT t = JsonMapper.ToObject<T>(str);\n\t\t\tISupportInitialize iSupportInitialize = t as ISupportInitialize;\n\t\t\tif (iSupportInitialize == null)\n\t\t\t{\n\t\t\t\treturn t;\n\t\t\t}\n\t\t\tiSupportInitialize.EndInit();\n\t\t\treturn t;\n\t\t}\n\n\t\tpublic static object FromJson(Type type, string str)\n\t\t{\n\t\t\tobject t = JsonMapper.ToObject(type, str);\n\t\t\tISupportInitialize iSupportInitialize = t as ISupportInitialize;\n\t\t\tif (iSupportInitialize == null)\n\t\t\t{\n\t\t\t\treturn t;\n\t\t\t}\n\t\t\tiSupportInitialize.EndInit();\n\t\t\treturn t;\n\t\t}\n\n\t\tpublic static T Clone<T>(T t)\n\t\t{\n\t\t\treturn FromJson<T>(ToJson(t));\n\t\t}\n\t}\n}\n#endif\n'ETCore/ETServer/Server/Hotfix/Handler/C2G_PlayerInfoHandler.cs'\n:﻿using System;\nusing ETModel;\n\nnamespace ETHotfix\n{\n\n\t[MessageHandler(AppType.Gate)]\n\tpublic class C2G_PlayerInfoHandler : AMRpcHandler<C2G_PlayerInfo, G2C_PlayerInfo>\n\t{\n\t\tprotected override async ETTask Run(Session session, C2G_PlayerInfo request, G2C_PlayerInfo response, Action reply)\n\t\t{\n\t\t\tresponse.PlayerInfo = new PlayerInfo();\n\t\t\tresponse.PlayerInfos.Add(new PlayerInfo() {RpcId = 1});\n\t\t\tresponse.PlayerInfos.Add(new PlayerInfo() {RpcId = 2});\n\t\t\tresponse.PlayerInfos.Add(new PlayerInfo() {RpcId = 3});\n\t\t\tresponse.TestRepeatedInt32.Add(4);\n\t\t\tresponse.TestRepeatedInt32.Add(5);\n\t\t\tresponse.TestRepeatedInt32.Add(6);\n\t\t\tresponse.TestRepeatedInt64.Add(7);\n\t\t\tresponse.TestRepeatedInt64.Add(8);\n\t\t\tresponse.TestRepeatedString.Add(\"9\");\n\t\t\tresponse.TestRepeatedString.Add(\"10\");\n\t\t\treply();\n\t\t\tawait ETTask.CompletedTask;\n\t\t}\n\t}\n}\n",
        "gt": [
            "'ETCore/ETClient/Unity/Assets/ThirdParty/LitJson/Lexer.cs'",
            "'ETCore/ETServer/Server/ET.Core/Base/Helper/JsonHelper.cs'",
            "'ETCore/ETServer/Server/Hotfix/Handler/C2G_PlayerInfoHandler.cs'"
        ]
    },
    {
        "files": [
            "'G-Shark/src/GShark/Optimization/CurvesIntersectionObjectives.cs'",
            "'G-Shark/src/GShark/Intersection/IntersectionRefiner.cs'",
            "'G-Shark/src/GShark/Optimization/MinimizationResult.cs'",
            "'G-Shark/src/GShark/Geometry/Circle.cs'"
        ],
        "content": "'G-Shark/src/GShark/Optimization/CurvesIntersectionObjectives.cs'\n:﻿using GShark.Geometry;\nusing GShark.Operation;\nusing System.Collections.Generic;\n\nnamespace GShark.Optimization\n{\n\n\n\n    internal class CurvesIntersectionObjectives : IObjectiveFunction\n    {\n        private readonly NurbsBase _curve0;\n        private readonly NurbsBase _curve1;\n\n\n\n\n\n\n        internal CurvesIntersectionObjectives(NurbsBase curve0, NurbsBase curve1)\n        {\n            _curve0 = curve0;\n            _curve1 = curve1;\n        }\n\n        public double Value(Vector v)\n        {\n            Vector p0 = Evaluate.Curve.PointAt(_curve0, v[0]);\n            Vector p1 = Evaluate.Curve.PointAt(_curve1, v[1]);\n\n            Vector p0P1 = p0 - p1;\n\n            return Vector.Dot(p0P1, p0P1);\n        }\n\n        public Vector Gradient(Vector v)\n        {\n            List<Vector3> deriveC0 = Evaluate.Curve.RationalDerivatives(_curve0, v[0], 1);\n            List<Vector3> deriveC1 = Evaluate.Curve.RationalDerivatives(_curve1, v[1], 1);\n\n            Vector r = deriveC0[0] - deriveC1[0];\n            Vector drDt = deriveC1[1] * -1.0;\n\n            double value0 = 2.0 * Vector.Dot(deriveC0[1], r);\n            double value1 = 2.0 * Vector.Dot(drDt, r);\n\n            return new Vector { value0, value1 };\n        }\n    }\n}\n\n'G-Shark/src/GShark/Intersection/IntersectionRefiner.cs'\n:﻿using GShark.Geometry;\nusing GShark.Optimization;\n\nnamespace GShark.Intersection\n{\n    internal static class IntersectionRefiner\n    {\n\n\n\n\n\n\n\n\n\n\n        internal static CurvesIntersectionResult CurvesWithEstimation(NurbsBase crv0, NurbsBase crv1,\n            double firstGuess, double secondGuess, double tolerance)\n        {\n            IObjectiveFunction objectiveFunctions = new CurvesIntersectionObjectives(crv0, crv1);\n            Minimizer min = new Minimizer(objectiveFunctions);\n            MinimizationResult solution = min.UnconstrainedMinimizer(new Vector { firstGuess, secondGuess }, tolerance * tolerance);\n\n\n            Point3 pt1 = crv0.PointAt(solution.SolutionPoint[0]);\n            Point3 pt2 = crv1.PointAt(solution.SolutionPoint[1]);\n\n            return new CurvesIntersectionResult(pt1, pt2, solution.SolutionPoint[0], solution.SolutionPoint[1]);\n        }\n\n\n\n\n\n\n\n\n\n\n\n        internal static CurvePlaneIntersectionResult CurvePlaneWithEstimation(NurbsBase crv, Plane plane,\n            double firstGuess, double secondGuess, double tolerance)\n        {\n            IObjectiveFunction objectiveFunctions = new CurvePlaneIntersectionObjectives(crv, plane);\n            Minimizer min = new Minimizer(objectiveFunctions);\n            MinimizationResult solution = min.UnconstrainedMinimizer(new Vector { firstGuess, secondGuess }, tolerance * tolerance);\n\n            Point3 pt = crv.PointAt(solution.SolutionPoint[0]);\n            (double u, double v) parameters = plane.ClosestParameters(pt);\n            Vector uv = new Vector { parameters.u, parameters.v, 0.0 };\n\n            return new CurvePlaneIntersectionResult(pt, solution.SolutionPoint[0], uv);\n        }\n    }\n}\n\n'G-Shark/src/GShark/Optimization/MinimizationResult.cs'\n:﻿using GShark.Core;\nusing GShark.Geometry;\n\nnamespace GShark.Optimization\n{\n\n\n\n    internal class MinimizationResult\n    {\n\n\n\n        internal MinimizationResult(Vector solutionPoint, double initialGuess, Vector gradient, Matrix hessianMatrix, int iterations, string message)\n        {\n            SolutionPoint = solutionPoint;\n            InitialGuess = initialGuess;\n            Gradient = gradient;\n            HessianMatrix = hessianMatrix;\n            Iterations = iterations;\n            Message = message;\n        }\n\n        internal Vector SolutionPoint { get; private set; }\n        internal double InitialGuess { get; private set; }\n        internal Vector Gradient { get; private set; }\n        internal Matrix HessianMatrix { get; private set; }\n        internal int Iterations { get; private set; }\n        internal string Message { get; private set; }\n    }\n}\n\n'G-Shark/src/GShark/Geometry/Circle.cs'\n:﻿using GShark.Core;\nusing GShark.Interfaces;\nusing GShark.Intersection;\nusing System;\nusing System.ComponentModel;\nusing System.Linq;\n\nnamespace GShark.Geometry\n{\n\n\n\n\n\n\n\n    public class Circle : NurbsBase, IGeometry<Circle>\n    {\n        internal Interval _domain = new Interval(0.0, 2.0 * Math.PI);\n        internal double _length;\n\n\n\n\n\n\n        public Circle(Plane plane, double radius)\n        {\n            Plane = plane;\n            Radius = Math.Abs(radius);\n            _length = Math.Abs(2.0 * Math.PI * radius);\n            ToNurbs();\n        }\n\n\n\n\n\n        public Circle(double radius)\n            : this(Plane.PlaneXY, radius)\n        {\n        }\n\n\n\n\n\n\n\n\n        public Circle(Point3 pt1, Point3 pt2, Point3 pt3)\n        {\n            if (!pt1.IsValid)\n            {\n                throw new Exception(\"The first point is not valid.\");\n            }\n            if (!pt2.IsValid)\n            {\n                throw new Exception(\"The second point is not valid.\");\n            }\n            if (!pt3.IsValid)\n            {\n                throw new Exception(\"The third point is not valid.\");\n            }\n\n            Point3 center = Trigonometry.EquidistantPoint(pt1, pt2, pt3);\n            Vector3 normal = Vector3.ZAxis.PerpendicularTo(pt1, pt2, pt3);\n            Vector3 xDir = pt1 - center;\n            Vector3 yDir = Vector3.CrossProduct(normal, xDir);\n\n            Plane = new Plane(center, xDir, yDir);\n            Radius = xDir.Length;\n            _length = Math.Abs(2.0 * Math.PI * Radius);\n            ToNurbs();\n        }\n\n\n\n\n        public Plane Plane { get; }\n\n\n\n\n        public double Radius { get; }\n\n\n\n\n        public Interval AngleDomain => _domain;\n\n\n\n\n        public Point3 Center => Plane.Origin;\n\n\n\n\n        public override double Length => _length;\n\n\n\n\n        public override Point3 StartPoint => PointAt(0.0);\n\n\n\n\n        public override Point3 MidPoint => PointAt(_domain.Mid);\n\n\n\n\n        public override Point3 EndPoint => PointAt(_domain.T1);\n\n\n\n\n        public override BoundingBox GetBoundingBox()\n        {\n            double val1 = Radius * SelectionLength(Plane.ZAxis[1], Plane.ZAxis[2]);\n            double val2 = Radius * SelectionLength(Plane.ZAxis[2], Plane.ZAxis[0]);\n            double val3 = Radius * SelectionLength(Plane.ZAxis[0], Plane.ZAxis[1]);\n\n            double minX = Plane.Origin[0] - val1;\n            double maxX = Plane.Origin[0] + val1;\n            double minY = Plane.Origin[1] - val2;\n            double maxY = Plane.Origin[1] + val2;\n            double minZ = Plane.Origin[2] - val3;\n            double maxZ = Plane.Origin[2] + val3;\n\n            Point3 min = new Point3(minX, minY, minZ);\n            Point3 max = new Point3(maxX, maxY, maxZ);\n            return new BoundingBox(min, max);\n        }\n\n\n\n\n\n\n\n        public new Vector3 DerivativeAt(double t, int derivative = 0)\n        {\n            if (t < 0.0)\n            {\n                t = 0.0;\n            }\n\n            if (t > _domain.Max)\n            {\n                t = _domain.Max;\n            }\n\n            double r0 = 0;\n            double r1 = 0;\n            switch (derivative % 4)\n            {\n                case 0:\n                    r0 = Radius * Math.Cos(t);\n                    r1 = Radius * Math.Sin(t);\n                    break;\n                case 1:\n                    r0 = Radius * -Math.Sin(t);\n                    r1 = Radius * Math.Cos(t);\n                    break;\n                case 2:\n                    r0 = Radius * -Math.Cos(t);\n                    r1 = Radius * -Math.Sin(t);\n                    break;\n                case 3:\n                    r0 = Radius * Math.Sin(t);\n                    r1 = Radius * -Math.Cos(t);\n                    break;\n            }\n\n            return r0 * Plane.XAxis + r1 * Plane.YAxis;\n        }\n\n\n\n\n\n\n        public override Point3 PointAt(double t)\n        {\n            if (t < 0.0)\n            {\n                t = 0.0;\n            }\n\n            if (t > _domain.Max)\n            {\n                t = _domain.Max;\n            }\n\n            return Plane.PointAt(Math.Cos(t) * Radius, Math.Sin(t) * Radius);\n        }\n\n\n\n\n\n\n        public override Point3 PointAtLength(double length)\n        {\n            if (length <= 0.0)\n            {\n                return StartPoint;\n            }\n\n            if (length >= Length)\n            {\n                return EndPoint;\n            }\n\n            double theta = GSharkMath.ToRadians((length * 360) / (Math.PI * 2 * Radius));\n\n            Vector3 xDir = Plane.XAxis * Math.Cos(theta) * Radius;\n            Vector3 yDir = Plane.YAxis * Math.Sin(theta) * Radius;\n\n            return Plane.Origin + xDir + yDir;\n        }\n\n\n\n\n\n\n        public override Point3 PointAtNormalizedLength(double normalizedLength)\n        {\n            double theta = _domain.T0 + (_domain.T1 - _domain.T0) * normalizedLength;\n            return PointAt(theta);\n        }\n\n\n\n\n\n\n        public override Vector3 TangentAt(double t)\n        {\n            if (t <= 0.0)\n            {\n                t = 0.0;\n            }\n\n            if (t >= 1.0)\n            {\n                t = 1.0;\n            }\n\n            Vector3 derivative = DerivativeAt(t, 1);\n            return derivative.Unitize();\n        }\n\n\n\n\n\n\n        public Vector3 TangentAtLength(double length)\n        {\n            Point3 pt = PointAtLength(length);\n            (double u, double v) = Plane.ClosestParameters(pt);\n            double t = EvaluateParameter(u, v, false);\n            return DerivativeAt(t, 1).Unitize();\n        }\n\n\n\n\n\n\n        public override double LengthAt(double t)\n        {\n            if (t <= 0)\n            {\n                return 0;\n            }\n\n            if (t >= _domain.T1)\n            {\n                return _length;\n            }\n\n            return Radius * t;\n        }\n\n\n\n\n\n\n        public override Point3 ClosestPoint(Point3 pt)\n        {\n            (double u, double v) = Plane.ClosestParameters(pt);\n            if (Math.Abs(u) < GSharkMath.MinTolerance && Math.Abs(v) < GSharkMath.MinTolerance)\n            {\n                return PointAt(0.0);\n            }\n\n            double t = EvaluateParameter(u, v, false);\n\n            return PointAt(t);\n        }\n\n\n\n\n\n\n        public override double ClosestParameter(Point3 pt)\n        {\n            (double u, double v) = Plane.ClosestParameters(pt);\n            if (Math.Abs(u) < GSharkMath.MinTolerance && Math.Abs(v) < GSharkMath.MinTolerance)\n            {\n                return 0.0;\n            }\n\n            return EvaluateParameter(u, v, false);\n        }\n\n\n\n\n\n\n        public Circle Offset(double distance)\n        {\n            if (distance == 0.0)\n            {\n                return this;\n            }\n\n            return new Circle(Plane, Radius + distance);\n        }\n\n\n\n\n\n\n        internal void ToNurbs()\n        {\n            Vector3 axisX = Plane.XAxis;\n            Vector3 axisY = Plane.YAxis;\n            double curveAngle = _domain.Length;\n            int numberOfArc;\n            Point3[] pts;\n            Point4[] ctrPts;\n            double[] weights;\n\n\n            double piNum = 0.5 * Math.PI;\n            if ((curveAngle - piNum) <= GSharkMath.Epsilon)\n            {\n                numberOfArc = 1;\n                pts = new Point3[3];\n                ctrPts = new Point4[3];\n                weights = new double[3];\n            }\n            else if ((curveAngle - piNum * 2) <= GSharkMath.Epsilon)\n            {\n                numberOfArc = 2;\n                pts = new Point3[5];\n                ctrPts = new Point4[5];\n                weights = new double[5];\n            }\n            else if ((curveAngle - piNum * 3) <= GSharkMath.Epsilon)\n            {\n                numberOfArc = 3;\n                pts = new Point3[7];\n                ctrPts = new Point4[7];\n                weights = new double[7];\n            }\n            else\n            {\n                numberOfArc = 4;\n                pts = new Point3[9];\n                ctrPts = new Point4[9];\n                weights = new double[9];\n            }\n\n            double detTheta = curveAngle / numberOfArc;\n            double weight = Math.Cos(detTheta / 2);\n            Point3 p0 = Center + (axisX * (Radius * Math.Cos(_domain.T0)) + axisY * (Radius * Math.Sin(_domain.T0)));\n            Vector3 t0 = axisY * Math.Cos(_domain.T0) - axisX * Math.Sin(_domain.T0);\n\n            KnotVector knots = new KnotVector(CollectionHelpers.RepeatData(0.0, ctrPts.Length + 3));\n            int index = 0;\n            double angle = _domain.T0;\n\n            pts[0] = p0;\n            ctrPts[0] = new Point4(p0);\n            weights[0] = weight;\n\n            for (int i = 1; i < numberOfArc + 1; i++)\n            {\n                angle += detTheta;\n                Point3 p2 = Center + (axisX * (Radius * Math.Cos(angle)) + axisY * (Radius * Math.Sin(angle)));\n\n                ctrPts[index + 2] = new Point4(p2);\n                pts[index + 2] = p2;\n                weights[index + 2] = 1.0;\n\n                Vector3 t2 = (axisY * Math.Cos(angle)) - (axisX * Math.Sin(angle));\n                Line ln0 = new Line(p0, t0.Unitize() + p0);\n                Line ln1 = new Line(p2, t2.Unitize() + p2);\n                Intersect.LineLine(ln0, ln1, out _, out _, out double u0, out _);\n                Point3 p1 = p0 + (t0 * u0);\n\n                ctrPts[index + 1] = new Point4(p1, weight);\n                pts[index + 1] = p1;\n                weights[index + 1] = weight;\n                index += 2;\n\n                if (i >= numberOfArc)\n                {\n                    continue;\n                }\n\n                p0 = p2;\n                t0 = t2;\n            }\n\n            int j = 2 * numberOfArc + 1;\n            for (int i = 0; i < 3; i++)\n            {\n                knots[i] = 0.0;\n                knots[i + j] = 1.0;\n            }\n\n            switch (numberOfArc)\n            {\n                case 2:\n                    knots[3] = knots[4] = 0.5;\n                    break;\n                case 3:\n                    knots[3] = knots[4] = (double)1 / 3;\n                    knots[5] = knots[6] = (double)2 / 3;\n                    break;\n                case 4:\n                    knots[3] = knots[4] = 0.25;\n                    knots[5] = knots[6] = 0.5;\n                    knots[7] = knots[8] = 0.75;\n                    break;\n            }\n\n            Weights = weights.ToList();\n            Degree = 2;\n            Knots = knots;\n            ControlPoints = ctrPts.ToList();\n            ControlPointLocations = pts.ToList();\n        }\n\n\n\n\n\n\n        public Circle Transform(TransformMatrix t)\n        {\n            Plane plane = Plane.Transform(t);\n            return new Circle(plane, Radius);\n        }\n\n\n\n\n\n\n\n        public bool Equals(Circle other)\n        {\n            if (ReferenceEquals(null, other))\n            {\n                return false;\n            }\n\n            if (ReferenceEquals(this, other))\n            {\n                return false;\n            }\n\n            return Math.Abs(Radius - other.Radius) < GSharkMath.MinTolerance && Plane == other.Plane;\n        }\n\n\n\n\n\n        public override int GetHashCode()\n        {\n            return Radius.GetHashCode() ^ Plane.GetHashCode();\n        }\n\n\n\n\n\n        public override string ToString()\n        {\n            return $\"Circle(R:{Radius})\";\n        }\n\n        private static double SelectionLength(double x, double y)\n        {\n            x = Math.Abs(x);\n            y = Math.Abs(y);\n            if (y > x)\n            {\n                double num = x;\n                x = y;\n                y = num;\n            }\n            double num1;\n            if (x > double.Epsilon)\n            {\n                double num2 = 1.0 / x;\n                y *= num2;\n                num1 = x * Math.Sqrt(1.0 + y * y);\n            }\n            else\n            {\n                num1 = x <= 0.0 || double.IsInfinity(x) ? 0.0 : x;\n            }\n\n            return num1;\n        }\n\n        private double EvaluateParameter(double u, double v, bool parametrize = false)\n        {\n            double twoPi = 2.0 * Math.PI;\n\n            double t = Math.Atan2(v, u);\n            if (t < 0.0)\n            {\n                t += twoPi;\n            }\n\n            t -= _domain.T0;\n\n            while (t < 0.0)\n            {\n                t += twoPi;\n            }\n\n            while (t >= twoPi)\n            {\n                t -= twoPi;\n            }\n\n            double t1 = _domain.Length;\n            if (t > t1)\n            {\n                t = t > 0.5 * t1 + Math.PI ? 0.0 : t1;\n            }\n\n            return (parametrize) ? (t - _domain.T0) / (_domain.T1 - _domain.T0) : t;\n        }\n    }\n}\n",
        "gt": [
            "'G-Shark/src/GShark/Optimization/CurvesIntersectionObjectives.cs'",
            "'G-Shark/src/GShark/Intersection/IntersectionRefiner.cs'",
            "'G-Shark/src/GShark/Geometry/Circle.cs'",
            "'G-Shark/src/GShark/Optimization/MinimizationResult.cs'"
        ]
    },
    {
        "files": [
            "'Transformalize/src/Transformalize/Providers/Internal/InternalReader.cs'",
            "'Transformalize/src/Transformalize/Transforms/ReverseTransform.cs'",
            "'Transformalize/src/Transformalize/Contracts/IConnectionContext.cs'",
            "'Transformalize/src/Containers/Autofac/Autofac.Shared/ConfigurationContainer.cs'",
            "'Transformalize/src/Containers/Autofac/Autofac.Shared/Modules/InternalModule.cs'",
            "'Transformalize/src/Tests/Test.Unit.Shared/TestParameterTransforms.cs'"
        ],
        "content": "'Transformalize/src/Transformalize/Providers/Internal/InternalReader.cs'\n:#region license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\n\nusing System.Collections.Generic;\nusing System.Linq;\nusing Transformalize.Configuration;\nusing Transformalize.Context;\nusing Transformalize.Contracts;\nusing Transformalize.Transforms;\n\nnamespace Transformalize.Providers.Internal {\n\n   public class InternalReader : IRead {\n\n      private readonly InputContext _input;\n      private readonly IRowFactory _rowFactory;\n      private readonly HashSet<string> _missing;\n      private readonly List<ITransform> _transforms = new List<ITransform>();\n      private readonly Field[] _fields;\n\n      public InternalReader(InputContext input, IRowFactory rowFactory) : this(input, input.Entity.Fields, rowFactory) { }\n\n      public InternalReader(InputContext input, IEnumerable<Field> fields, IRowFactory rowFactory) {\n         _input = input;\n         _rowFactory = rowFactory;\n         _missing = new HashSet<string>();\n         _fields = fields.Where(f=>f.Input).ToArray();\n\n         foreach (var field in _fields.Where(f => f.Type != \"string\" && (!f.Transforms.Any() || f.Transforms.First().Method != \"convert\"))) {\n            _transforms.Add(new ConvertTransform(new PipelineContext(input.Logger, input.Process, input.Entity, field, new Operation { Method = \"convert\" })));\n         }\n      }\n\n      private IEnumerable<IRow> PreRead() {\n\n         var rows = new List<IRow>();\n         foreach (var row in _input.Entity.Rows) {\n\n            var stringRow = _rowFactory.Create();\n            foreach (var field in _fields) {\n               if (row.Map.ContainsKey(field.Name)) {\n                  stringRow[field] = row[field.Name];\n               } else {\n                  if (_missing.Add(field.Name)) {\n                     _input.Warn($\"An internal row in {_input.Entity.Alias} is missing the field {field.Name}.\");\n                  }\n               }\n            }\n            rows.Add(stringRow);\n         }\n         _input.Entity.Hits = rows.Count;\n         return rows;\n      }\n\n      public IEnumerable<IRow> Read() {\n         return _transforms.Aggregate(PreRead(), (rows, transform) => transform.Operate(rows));\n      }\n\n      public object GetVersion() {\n         return null;\n      }\n   }\n}\n'Transformalize/src/Transformalize/Transforms/ReverseTransform.cs'\n:#region license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Transformalize.Configuration;\nusing Transformalize.Contracts;\n\nnamespace Transformalize.Transforms {\n   public class ReverseTransform : BaseTransform {\n      private readonly Field _input;\n      private readonly Func<object, string[]> _sort;\n      public ReverseTransform(IContext context = null) : base(context, \"object\") {\n         if (IsMissingContext()) {\n            return;\n         }\n\n         Context.Operation.ProducesArray = true;\n\n         var lastOperation = LastOperation();\n         if (lastOperation == null) {\n            Error($\"The reverse operation should receive an array. You may want proceed it with a split operation.\");\n            Run = false;\n            return;\n         }\n\n         if (!lastOperation.ProducesArray) {\n            Error($\"The reverse operation should receive an array. The {lastOperation.Method} method is not producing an array.\");\n            Run = false;\n            return;\n         }\n\n         _input = SingleInput();\n         _sort = o => ((string[])o).Reverse().ToArray();\n      }\n\n      public override IRow Operate(IRow row) {\n         row[Context.Field] = _sort(row[_input]);\n         return row;\n      }\n\n      public override IEnumerable<OperationSignature> GetSignatures() {\n         yield return new OperationSignature(\"reverse\");\n      }\n   }\n}\n'Transformalize/src/Transformalize/Contracts/IConnectionContext.cs'\n:﻿#region license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing Transformalize.Configuration;\n\nnamespace Transformalize.Contracts {\n    public interface IConnectionContext : IContext {\n        Connection Connection { get; }\n        int RowCapacity { get; }\n    }\n}\n\n'Transformalize/src/Containers/Autofac/Autofac.Shared/ConfigurationContainer.cs'\n:﻿#region license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\n\nusing Autofac;\nusing Autofac.Core;\nusing Cfg.Net.Contracts;\nusing Cfg.Net.Environment;\nusing Cfg.Net.Reader;\nusing Cfg.Net.Shorthand;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Transformalize.Configuration;\nusing Transformalize.Containers.Autofac.Modules;\nusing Transformalize.Context;\nusing Transformalize.Contracts;\nusing Process = Transformalize.Configuration.Process;\n\nnamespace Transformalize.Containers.Autofac {\n\n\n\n\n\n\n   public class ConfigurationContainer {\n\n      private readonly List<IModule> _modules = new List<IModule>();\n      private readonly List<TransformHolder> _transforms = new List<TransformHolder>();\n      private readonly List<ValidatorHolder> _validators = new List<ValidatorHolder>();\n      private readonly List<IDependency> _dependencies = new List<IDependency>();\n\n      public ConfigurationContainer() { }\n\n\n\n\n\n\n      public ConfigurationContainer(params IModule[] args) {\n         _modules.AddRange(args);\n      }\n\n      public ConfigurationContainer(params TransformHolder[] transforms) {\n         _transforms.AddRange(transforms);\n      }\n\n      public ConfigurationContainer(params ValidatorHolder[] validators) {\n         _validators.AddRange(validators);\n      }\n\n      private readonly HashSet<string> _methods = new HashSet<string>();\n      private readonly ShorthandRoot _shortHand = new ShorthandRoot();\n      public ILifetimeScope CreateScope(string cfg, IPipelineLogger logger, IDictionary<string, string> parameters = null, string placeHolderStyle = \"@[]\") {\n\n         if (placeHolderStyle == null || placeHolderStyle.Length != 3) {\n            throw new ArgumentException(\"The placeHolderStyle parameter must be three characters (e.g. @[], or @())\");\n         }\n\n         if (parameters == null) {\n            parameters = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);\n         }\n\n         var builder = new ContainerBuilder();\n\n         builder.Register((ctx) => logger).As<IPipelineLogger>();\n         builder.Register<IReader>(c => new DefaultReader(new FileReader(), new WebReader())).As<IReader>();\n\n\n         var transformModule = new TransformModule(new Process { Name = \"TransformShorthand\" }, _methods, _shortHand, logger);\n         foreach (var t in _transforms) {\n            transformModule.AddTransform(t);\n         }\n         builder.RegisterModule(transformModule);\n\n\n         var validateModule = new ValidateModule(new Process { Name = \"ValidateShorthand\" }, _methods, _shortHand, logger);\n         foreach (var v in _validators) {\n            validateModule.AddValidator(v);\n         }\n         builder.RegisterModule(validateModule);\n\n\n         builder.Register((c, p) => _shortHand).Named<ShorthandRoot>(ValidateModule.FieldsName).InstancePerLifetimeScope();\n         builder.Register((c, p) => new ShorthandCustomizer(c.ResolveNamed<ShorthandRoot>(ValidateModule.FieldsName), new[] { \"fields\", \"calculated-fields\", \"calculatedfields\" }, \"v\", \"validators\", \"method\")).Named<IDependency>(ValidateModule.FieldsName).InstancePerLifetimeScope();\n\n\n         builder.Register((c, p) => _shortHand).Named<ShorthandRoot>(TransformModule.FieldsName).InstancePerLifetimeScope();\n         builder.Register((c, p) => _shortHand).Named<ShorthandRoot>(TransformModule.ParametersName).InstancePerLifetimeScope();\n         builder.Register((c, p) => new ShorthandCustomizer(c.ResolveNamed<ShorthandRoot>(TransformModule.FieldsName), new[] { \"fields\", \"calculated-fields\", \"calculatedfields\" }, \"t\", \"transforms\", \"method\")).Named<IDependency>(TransformModule.FieldsName).InstancePerLifetimeScope();\n         builder.Register((c, p) => new ShorthandCustomizer(c.ResolveNamed<ShorthandRoot>(TransformModule.ParametersName), new[] { \"parameters\" }, \"t\", \"transforms\", \"method\")).Named<IDependency>(TransformModule.ParametersName).InstancePerLifetimeScope();\n\n#if PLUGINS\n\n         builder.Properties[\"ShortHand\"] = _shortHand;\n         builder.Properties[\"Methods\"] = _methods;\n#endif\n\n         foreach (var module in _modules) {\n            builder.RegisterModule(module);\n         }\n\n         builder.Register((c, p) => _methods).Named<HashSet<string>>(\"Methods\").InstancePerLifetimeScope();\n         builder.Register((c, p) => _shortHand).As<ShorthandRoot>().InstancePerLifetimeScope();\n\n         builder.Register(ctx => {\n\n            var transformed = TransformParameters(ctx, cfg);\n\n            var dependancies = new List<IDependency> {\n                 ctx.Resolve<IReader>(),\n                 new ParameterModifier(new PlaceHolderReplacer(placeHolderStyle[0], placeHolderStyle[1], placeHolderStyle[2]), \"parameters\", \"name\", \"value\"),\n                 ctx.ResolveNamed<IDependency>(TransformModule.FieldsName),\n                 ctx.ResolveNamed<IDependency>(TransformModule.ParametersName),\n                 ctx.ResolveNamed<IDependency>(ValidateModule.FieldsName)\n             };\n            dependancies.AddRange(_dependencies);\n\n            return new Process(transformed ?? cfg, parameters, dependancies.ToArray());\n\n         }).As<Process>().InstancePerDependency();\n         return builder.Build().BeginLifetimeScope();\n      }\n\n      private string TransformParameters(IComponentContext ctx, string cfg) {\n\n         var parameters = new Dictionary<string, string>();\n         var dependencies = new List<IDependency>() {\n            ctx.Resolve<IReader>(),\n            new DateMathModifier(),\n            new ParameterModifier(new NullPlaceHolderReplacer()),\n            ctx.ResolveNamed<IDependency>(TransformModule.ParametersName)\n         };\n         dependencies.AddRange(_dependencies);\n\n         var preProcess = new ConfigurationFacade.Process(cfg, parameters, dependencies.ToArray());\n\n         if (!preProcess.Parameters.Any(pr => pr.Transforms.Any()))\n            return null;\n\n         var fields = preProcess.Parameters.Select(pr => new Field {\n            Name = pr.Name,\n            Alias = pr.Name,\n            Default = pr.Value,\n            Type = pr.Type,\n            Transforms = pr.Transforms.Select(o => o.ToOperation()).ToList()\n         }).ToList();\n         var len = fields.Count;\n         var entity = new Entity { Name = \"Parameters\", Alias = \"Parameters\", Fields = fields };\n         var mini = new Process {\n            Name = \"ParameterTransform\",\n            ReadOnly = true,\n            Entities = new List<Entity> { entity },\n            Maps = preProcess.Maps.Select(m => m.ToMap()).ToList(),\n            Scripts = preProcess.Scripts.Select(s => s.ToScript()).ToList()\n         };\n\n         mini.Load();\n\n         if (!mini.Errors().Any()) {\n\n\n            fields = mini.Entities.First().Fields;\n            entity = mini.Entities.First();\n\n            var c = new PipelineContext(ctx.Resolve<IPipelineLogger>(), mini, entity);\n            var transforms = new List<ITransform> {\n               new Transforms.System.DefaultTransform(c, fields)\n            };\n            transforms.AddRange(TransformFactory.GetTransforms(ctx, c, fields));\n\n\n            var input = new List<IRow>();\n            var row = new MasterRow(len);\n            for (var i = 0; i < len; i++) {\n               row[fields[i]] = preProcess.Parameters[i].Value;\n            }\n\n            input.Add(row);\n\n            var output = transforms.Aggregate(input.AsEnumerable(), (rows, t) => t.Operate(rows)).ToList().First();\n\n            for (var i = 0; i < len; i++) {\n               var parameter = preProcess.Parameters[i];\n               parameter.Value = output[fields[i]].ToString();\n               parameter.T = string.Empty;\n               parameter.Transforms.Clear();\n            }\n\n            return preProcess.Serialize();\n         }\n\n         var context = new PipelineContext(ctx.Resolve<IPipelineLogger>(), mini, entity);\n         foreach (var error in mini.Errors()) {\n            context.Error(error);\n         }\n\n         return null;\n      }\n\n      public void AddValidator(Func<IContext, IValidate> getValidator, IEnumerable<OperationSignature> signatures) {\n         _validators.Add(new ValidatorHolder(getValidator, signatures));\n      }\n      public void AddTransform(Func<IContext, ITransform> getTransform, IEnumerable<OperationSignature> signatures) {\n         _transforms.Add(new TransformHolder(getTransform, signatures));\n      }\n\n      [Obsolete(\"This method is obsolete.  Use AddDependency instead.\")]\n      public void AddCustomizer(ICustomizer customizer) {\n         _dependencies.Add(customizer);\n      }\n\n      public void AddDependency(IDependency dependency) {\n         _dependencies.Add(dependency);\n      }\n      public void AddModule(IModule module) {\n         _modules.Add(module);\n      }\n\n   }\n\n}\n\n'Transformalize/src/Containers/Autofac/Autofac.Shared/Modules/InternalModule.cs'\n:#region license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\n\nusing Autofac;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Transformalize.Actions;\nusing Transformalize.Configuration;\nusing Transformalize.Context;\nusing Transformalize.Contracts;\nusing Transformalize.Extensions;\nusing Transformalize.Impl;\nusing Transformalize.Nulls;\nusing Transformalize.Providers.Internal;\nusing Module = Autofac.Module;\n\nnamespace Transformalize.Containers.Autofac.Modules {\n\n\n\n\n\n   public class InternalModule : Module {\n\n      private readonly HashSet<string> _internalActions = new HashSet<string> { \"log\", \"web\", \"wait\", \"sleep\", \"tfl\", \"exit\" };\n      private const string Internal = \"internal\";\n      private readonly Process _process;\n\n      public InternalModule(Process process) {\n         _process = process;\n      }\n\n      protected override void Load(ContainerBuilder builder) {\n\n         if (_process == null)\n            return;\n\n         foreach (var action in _process.Templates.Where(t => t.Enabled).SelectMany(t => t.Actions).Where(a => a.GetModes().Any(m => m == _process.Mode || m == \"*\"))) {\n            if (_internalActions.Contains(action.Type)) {\n               builder.Register(ctx => SwitchAction(ctx, _process, action)).Named<IAction>(action.Key);\n            }\n         }\n         foreach (var action in _process.Actions.Where(a => a.GetModes().Any(m => m == _process.Mode || m == \"*\"))) {\n            if (_internalActions.Contains(action.Type)) {\n               builder.Register(ctx => SwitchAction(ctx, _process, action)).Named<IAction>(action.Key);\n            }\n         }\n\n         if (_process.Connections.All(c=>c.Provider != Internal)) {\n            return;\n         }\n\n\n         foreach (var connection in _process.Connections.Where(c => c.Provider == Internal)) {\n            builder.RegisterType<NullSchemaReader>().Named<ISchemaReader>(connection.Key);\n         }\n\n\n\n         if (_process.GetOutputConnection().Provider == \"internal\") {\n\n\n            builder.Register<IOutputController>(ctx => new NullOutputController()).As<IOutputController>();\n\n            foreach (var entity in _process.Entities) {\n\n               builder.Register<IOutputController>(ctx => new NullOutputController()).Named<IOutputController>(entity.Key);\n               builder.Register<IOutputProvider>(ctx => new InternalOutputProvider(ctx.ResolveNamed<OutputContext>(entity.Key), ctx.ResolveNamed<IWrite>(entity.Key))).Named<IOutputProvider>(entity.Key);\n\n\n               builder.Register<IWrite>(ctx => new InternalWriter(ctx.ResolveNamed<OutputContext>(entity.Key))).Named<IWrite>(entity.Key);\n            }\n         }\n\n\n\n         foreach (var entity in _process.Entities.Where(e => _process.Connections.First(c => c.Name == e.Input).Provider == Internal)) {\n\n            builder.RegisterType<NullInputProvider>().Named<IInputProvider>(entity.Key);\n\n\n            if (entity.Delete) {\n               builder.Register<IReadInputKeysAndHashCodes>(ctx => {\n\n                  var inputContext = ctx.ResolveNamed<InputContext>(entity.Key);\n                  var rowFactory = new RowFactory(inputContext.RowCapacity, entity.IsMaster, false);\n                  return new InternalKeysReader(new InternalReader(inputContext, rowFactory));\n               }).Named<IReadInputKeysAndHashCodes>(entity.Key);\n            }\n\n\n            builder.Register<IRead>(ctx => {\n               var input = ctx.ResolveNamed<InputContext>(entity.Key);\n               var rowFactory = ctx.ResolveNamed<IRowFactory>(entity.Key, new NamedParameter(\"capacity\", input.RowCapacity));\n\n               return new InternalReader(input, rowFactory);\n            }).Named<IRead>(entity.Key);\n\n         }\n      }\n\n      private static IAction SwitchAction(IComponentContext ctx, Process process, Configuration.Action action) {\n\n         var context = new PipelineContext(ctx.Resolve<IPipelineLogger>(), process);\n\n         switch (action.Type) {\n            case \"log\":\n               return new LogAction(context, action);\n            case \"wait\":\n            case \"sleep\":\n               return new WaitAction(action);\n            case \"tfl\":\n               var cfg = string.IsNullOrEmpty(action.Url) ? action.File : action.Url;\n               if (string.IsNullOrEmpty(cfg) && !string.IsNullOrEmpty(action.Body)) {\n                  cfg = action.Body;\n               }\n               return new PipelineAction(context, action, cfg);\n            case \"exit\":\n               return new ExitAction(context, action);\n            default:\n               context.Error(\"{0} action is not registered.\", action.Type);\n               return new NullAction();\n         }\n      }\n\n   }\n}\n\n'Transformalize/src/Tests/Test.Unit.Shared/TestParameterTransforms.cs'\n:﻿using Autofac;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing System.Linq;\nusing Transformalize.Configuration;\nusing Transformalize.Containers.Autofac;\nusing Transformalize.Logging;\nusing Transformalize.Providers.Console;\n\nnamespace Tests {\n\n   [TestClass]\n   public class TestParameterTransforms {\n\n      [TestMethod]\n      public void TestProcessName() {\n\n         var cfg = @\"<cfg name='test'></cfg>\";\n         using (var c = new ConfigurationContainer().CreateScope(cfg, new DebugLogger())) {\n            var process = c.Resolve<Process>();\n            Assert.AreEqual(0, process.Errors().Length);\n            Assert.AreEqual(\"test\", process.Name);\n         }\n      }\n\n      [TestMethod]\n      public void TestParameterTransform() {\n\n         var cfg = @\"<cfg name='test'><parameters><add name='x' value='x' t='upper().append(y)' /></parameters></cfg>\";\n         using (var c = new ConfigurationContainer().CreateScope(cfg, new DebugLogger())) {\n            var process = c.Resolve<Process>();\n            Assert.AreEqual(0, process.Errors().Length);\n            Assert.AreEqual(\"Xy\", process.Parameters.First().Value);\n         }\n      }\n\n      [TestMethod]\n      public void TestBadAttribute() {\n\n         var cfg = @\"<cfg name='test' bad='bad'></cfg>\";\n         using (var c = new ConfigurationContainer().CreateScope(cfg, new DebugLogger())) {\n            var process = c.Resolve<Process>();\n            Assert.AreEqual(1, process.Errors().Length);\n         }\n      }\n\n      [TestMethod]\n      public void TestParameterTransform2() {\n\n         var cfg = @\"<cfg name='test'>\n   <parameters>\n      <add name='OpCo' type='int' value='4000' />\n      <add name='Op' t='copy(OpCo).convert().left(1)' />\n   </parameters>\n</cfg>\";\n         using (var c = new ConfigurationContainer().CreateScope(cfg, new ConsoleLogger())) {\n            var process = c.Resolve<Process>();\n            Assert.AreEqual(0, process.Errors().Length);\n            Assert.AreEqual(\"4\", process.Parameters.Last().Value);\n         }\n      }\n\n\n   }\n}\n",
        "gt": [
            "'Transformalize/src/Transformalize/Contracts/IConnectionContext.cs'",
            "'Transformalize/src/Transformalize/Transforms/ReverseTransform.cs'",
            "'Transformalize/src/Transformalize/Providers/Internal/InternalReader.cs'",
            "'Transformalize/src/Containers/Autofac/Autofac.Shared/Modules/InternalModule.cs'",
            "'Transformalize/src/Containers/Autofac/Autofac.Shared/ConfigurationContainer.cs'",
            "'Transformalize/src/Tests/Test.Unit.Shared/TestParameterTransforms.cs'"
        ]
    },
    {
        "files": [
            "'OpenC1/OpenC1/SoundDesc.cs'",
            "'OpenC1/OpenC1/Screens/PlayGameScreen.cs'",
            "'OpenC1/OpenC1/CameraViews/ChaseView.cs'",
            "'OpenC1/OpenC1/GameModes/OpponentEditMode.cs'",
            "'OpenC1/OpenC1/Physics/VehicleChassis.cs'"
        ],
        "content": "'OpenC1/OpenC1/SoundDesc.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing OneAmEngine.Audio;\n\nnamespace OpenC1\n{\n    class SoundDesc\n    {\n        public int Id;\n        public string FileName;\n        public int Priority;\n        public int RepeatRate;\n        public string MinMaxVolume;\n        public string MinMaxPitch;\n        public string MinMaxSpeed;\n        public bool FailedToLoad;\n    }\n}\n\n'OpenC1/OpenC1/Screens/PlayGameScreen.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing Microsoft.Xna.Framework;\nusing Microsoft.Xna.Framework.Graphics;\nusing OpenC1.Parsers;\nusing Microsoft.Xna.Framework.Input;\nusing OpenC1.Gfx;\nusing System.Diagnostics;\nusing OpenC1.CameraViews;\nusing OpenC1.Physics;\nusing System.IO;\nusing OneAmEngine;\nusing OpenC1.Screens;\nusing OpenC1.GameModes;\nusing Microsoft.Xna.Framework.Storage;\n\n\nnamespace OpenC1\n{\n    class PlayGameScreen : IGameScreen\n    {\n        public IGameScreen Parent { get; private set; }\n\n        Race _race;\n        BasicEffect2 _effect;\n        List<GameMode> _modes = new List<GameMode>();\n\n        int _currentEditMode = 0;\n\n        public PlayGameScreen(IGameScreen parent)\n        {\n            Parent = parent;\n            GC.Collect();\n\n            _race = new Race(GameVars.BasePath + \"races\\\\\" + GameVars.SelectedRaceInfo.RaceFilename, GameVars.SelectedCarFileName);\n\n            _modes.Add(new StandardGameMode());\n            _modes.Add(new FlyMode());\n            _modes.Add(new OpponentEditMode());\n            _modes.Add(new PedEditMode());\n            GameMode.Current = _modes[_currentEditMode];\n\n        }\n\n\n        public void Update()\n        {\n            PhysX.Instance.Simulate();\n            PhysX.Instance.Fetch();\n\n            _race.Update();\n\n            foreach (ParticleSystem system in ParticleSystem.AllParticleSystems)\n                system.Update();\n\n            if (Engine.Input.WasPressed(Keys.F4))\n            {\n                _currentEditMode = (_currentEditMode + 1) % _modes.Count;\n                GameMode.Current = _modes[_currentEditMode];\n            }\n            if (Engine.Input.WasPressed(Keys.P))\n            {\n                TakeScreenshot();\n\n            }\n\n            GameMode.Current.Update();\n            _race.PlayerVehicle.Chassis.OutputDebugInfo();\n\n            Engine.Camera.Update();\n\n            GameConsole.WriteLine(\"FPS\", Engine.Fps);\n        }\n\n        public void Render()\n        {\n            Engine.Device.Clear(GameVars.FogColor);\n\n            GameVars.NbrDrawCalls = 0;\n\n            GameVars.CurrentEffect = SetupRenderEffect();\n\n            GameVars.NbrSectionsChecked = GameVars.NbrSectionsRendered = 0;\n\n            Engine.SpriteBatch.Begin();\n\n            _race.Render();\n            _modes[_currentEditMode].Render();\n\n\t\t\tEngine.Device.RenderState.CullMode = CullMode.None;\n\n            foreach (ParticleSystem system in ParticleSystem.AllParticleSystems)\n            {\n                system.Render();\n            }\n\n            Engine.SpriteBatch.End();\n            Engine.Device.RenderState.DepthBufferEnable = true;\n            Engine.Device.RenderState.AlphaBlendEnable = false;\n            Engine.Device.SamplerStates[0].AddressU = TextureAddressMode.Wrap;\n            Engine.Device.SamplerStates[0].AddressV = TextureAddressMode.Wrap;\n\n            GameVars.CurrentEffect.End();\n\n            GameConsole.WriteLine(\"Position\", Race.Current.PlayerVehicle.GetBodyBottom() / 6);\n\n            GameConsole.WriteLine(\"Draw Calls\", GameVars.NbrDrawCalls);\n\n            OpenC1.Physics.PhysX.Instance.Draw();\n        }\n\n\n        private BasicEffect2 SetupRenderEffect()\n        {\n            GraphicsDevice device = Engine.Device;\n\n            if (_effect == null)\n            {\n                _effect = new BasicEffect2();\n\n                if (Race.Current.ConfigFile.DepthCueMode == DepthCueMode.Dark)\n                {\n                    GameVars.FogColor = new Color(0, 0, 0);\n                }\n                else if (Race.Current.ConfigFile.DepthCueMode == DepthCueMode.Fog)\n                {\n                    GameVars.FogColor = new Color(245, 245, 245);\n                }\n                else\n                {\n                    Trace.Assert(false);\n                }\n\t\t\t\t_effect.FogEnabled = true;\n                _effect.FogColor = GameVars.FogColor.ToVector3();\n                _effect.FogEnd = Engine.DrawDistance * 6 * (1 / Race.Current.ConfigFile.FogAmount);\n\t\t\t\t_effect.FogStart = _effect.FogEnd - 200;\n                _effect.TextureEnabled = true;\n                _effect.TexCoordsMultiplier = 1;\n                _effect.PreferPerPixelLighting = true;\n\t\t\t\t_effect.LightingEnabled = false;\n            }\n\n\t\t\tEngine.Device.RenderState.AlphaTestEnable = true;\n\t\t\tEngine.Device.RenderState.ReferenceAlpha = 200;\n\t\t\tEngine.Device.RenderState.AlphaFunction = CompareFunction.Greater;\n\n\t\t\tif (GameVars.CullingOff)\n\t\t\t\tEngine.Device.RenderState.CullMode = CullMode.None;\n\t\t\telse\n\t\t\t\tEngine.Device.RenderState.CullMode = CullMode.CullClockwiseFace;\n\n            _effect.View = Engine.Camera.View;\n            _effect.Projection = Engine.Camera.Projection;\n\n            _effect.Begin(SaveStateMode.None);\n\n            return _effect;\n        }\n\n        private void TakeScreenshot()\n        {\n            int count = Directory.GetFiles(StorageContainer.TitleLocation+\"\\\\\", \"ndump*.bmp\").Length + 1;\n            string name = \"\\\\ndump\" + count.ToString(\"000\") + \".bmp\";\n\n            GraphicsDevice device = Engine.Device;\n            using (ResolveTexture2D screenshot = new ResolveTexture2D(device, device.PresentationParameters.BackBufferWidth, device.PresentationParameters.BackBufferHeight, 1, SurfaceFormat.Color))\n            {\n                device.ResolveBackBuffer(screenshot);\n                screenshot.Save(StorageContainer.TitleLocation + name, ImageFileFormat.Bmp);\n            }\n\n\n        }\n    }\n}\n\n'OpenC1/OpenC1/CameraViews/ChaseView.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing OpenC1.HUD;\nusing Microsoft.Xna.Framework.Graphics;\n\nusing Microsoft.Xna.Framework;\nusing OpenC1.Physics;\nusing OneAmEngine;\nusing Microsoft.Xna.Framework.Input;\n\nnamespace OpenC1.CameraViews\n{\n    class ChaseView : ICameraView\n    {\n        List<BaseHUDItem> _hudItems = new List<BaseHUDItem>();\n        Vehicle _vehicle;\n        FixedChaseCamera _camera;\n\t\tconst float DefaultChaseDistance = 6.3f;\n\t\tconst float DefaultChaseHeight = 2.3f;\n\t\tfloat _chaseCameraPositionMultiplier = 1;\n\n        public ChaseView(Vehicle vehicle)\n        {\n\t\t\t_camera = new FixedChaseCamera(DefaultChaseDistance, DefaultChaseHeight);\n            _camera.FieldOfView = MathHelper.ToRadians(55.55f);\n\n            _vehicle = vehicle;\n\n            _hudItems.Add(new StandardHudItem());\n            _hudItems.Add(new RevCounter(_vehicle.Chassis));\n            _hudItems.Add(new Timer());\n        }\n\n        #region ICameraView Members\n\n\n        public bool Selectable\n        {\n            get { return true; }\n        }\n\n        public void Update()\n        {\n\n\t\t\tif (Engine.Input.IsKeyDown(Keys.PageDown))\n\t\t\t{\n\t\t\t\t_chaseCameraPositionMultiplier += Engine.ElapsedSeconds;\n\t\t\t}\n\t\t\telse if (Engine.Input.IsKeyDown(Keys.PageUp))\n\t\t\t{\n\t\t\t\t_chaseCameraPositionMultiplier -= Engine.ElapsedSeconds;\n\t\t\t\tif (_chaseCameraPositionMultiplier < 1)\n\t\t\t\t\t_chaseCameraPositionMultiplier = 1;\n\t\t\t}\n\n            VehicleChassis chassis = _vehicle.Chassis;\n            _camera.Position = _vehicle.GetBodyBottom();\n\n            if (!chassis.InAir)\n            {\n                _camera.Orientation = chassis.Actor.GlobalOrientation.Forward;\n                if (chassis.Speed > 15)\n                {\n                    _camera.RotateTo(chassis.Backwards ? MathHelper.Pi : 0);\n                }\n                if (Race.Current.RaceTime.IsStarted) _camera.MinHeight = 0;\n\t\t\t\t_camera.SetChaseDistance(DefaultChaseDistance * _chaseCameraPositionMultiplier, DefaultChaseHeight * _chaseCameraPositionMultiplier);\n            }\n            else\n            {\n                if (Race.Current.RaceTime.IsStarted) _camera.MinHeight = 2;\n\t\t\t\t_camera.SetChaseDistance(7, DefaultChaseHeight);\n            }\n\n            foreach (BaseHUDItem item in _hudItems)\n                item.Update();\n\n            Engine.Camera = _camera;\n        }\n\n        public void Render()\n        {\n            _vehicle.Render();\n\n            foreach (BaseHUDItem item in _hudItems)\n                item.Render();\n        }\n\n        public void Activate()\n        {\n            Engine.Camera = _camera;\n        }\n\n        public void Deactivate()\n        {\n\n        }\n\n        #endregion\n    }\n}\n\n'OpenC1/OpenC1/GameModes/OpponentEditMode.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing Microsoft.Xna.Framework;\nusing Microsoft.Xna.Framework.Graphics;\nusing Microsoft.Xna.Framework.Input;\n\nusing OpenC1.CameraViews;\nusing OneAmEngine;\n\nnamespace OpenC1.GameModes\n{\n    class OpponentEditMode : GameMode\n    {\n        FixedChaseCamera _opponentCamera;\n        FlyView _fpsView;\n        int _watchingOpponent = 0;\n\n        public OpponentEditMode()\n        {\n            _opponentCamera = new FixedChaseCamera(6.3f, 2.3f);\n            _opponentCamera.FieldOfView = MathHelper.ToRadians(55.55f);\n            _fpsView = new FlyView(Race.Current.PlayerVehicle);\n        }\n\n        public override void Activate()\n        {\n            _fpsView.Activate();\n            MessageRenderer.Instance.PostHeaderMessage(\"Edit Mode: Opponents\", 3);\n        }\n\n        public override void Update()\n        {\n            if (Engine.Input.WasPressed(Keys.D0))\n            {\n                _watchingOpponent = (_watchingOpponent + 1) % (Race.Current.Opponents.Count + 1);\n            }\n\n            if (_watchingOpponent == 0)\n            {\n                _opponentCamera.Position = Race.Current.PlayerVehicle.GetBodyBottom();\n                _opponentCamera.Orientation = Race.Current.PlayerVehicle.Chassis.Actor.GlobalOrientation.Forward;\n                Engine.Camera = _opponentCamera;\n            }\n            else\n            {\n                Opponent opponent = Race.Current.Opponents[_watchingOpponent - 1];\n                _opponentCamera.Position = opponent.Vehicle.GetBodyBottom();\n                _opponentCamera.Orientation = opponent.Vehicle.Chassis.Actor.GlobalOrientation.Forward;\n                Engine.Camera = _opponentCamera;\n\n                opponent.Vehicle.Chassis.OutputDebugInfo();\n            }\n        }\n\n        public override void Render()\n        {\n            if (_watchingOpponent == 0)\n            {\n                Race.Current.PlayerVehicle.Render();\n            }\n\n            foreach (OpponentPathNode node in Race.Current.ConfigFile.OpponentPathNodes)\n            {\n\n                Engine.DebugRenderer.AddCube(Matrix.CreateTranslation(node.Position), Color.White);\n                foreach (OpponentPath path in node.Paths)\n                {\n                        Color c = Color.Yellow;\n                        if (path.Type == PathType.Race) c = Color.Red;\n                        if (path.Type == PathType.Cheat) c = Color.Blue;\n\n\n                        Vector3 offs = new Vector3(0, 0, path.Width);\n\n                        Vector3 s3 = path.End.Position - node.Position;\n                        s3.Normalize();\n                        s3 *= path.Width;\n                        Vector3 s1 = Vector3.Transform(s3, Matrix.CreateRotationY(90) * Matrix.CreateTranslation(node.Position));\n                        s1.Y = node.Position.Y;\n                        Vector3 s2 = Vector3.Transform(s3, Matrix.CreateRotationY(90) * Matrix.CreateTranslation(path.End.Position));\n                        s2.Y = path.End.Position.Y;\n\n                        Engine.DebugRenderer.AddLine(s1, s2, c);\n                        s1 = Vector3.Transform(s3, Matrix.CreateRotationY(-90) * Matrix.CreateTranslation(node.Position));\n                        s1.Y = node.Position.Y;\n                        s2 = Vector3.Transform(s3, Matrix.CreateRotationY(-90) * Matrix.CreateTranslation(path.End.Position));\n                        s2.Y = path.End.Position.Y;\n                        Engine.DebugRenderer.AddLine(s1, s2, c);\n\n                }\n            }\n        }\n    }\n}\n\n'OpenC1/OpenC1/Physics/VehicleChassis.cs'\n:﻿using System;\nusing System.IO;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing Microsoft.Xna.Framework;\nusing Microsoft.Xna.Framework.Graphics;\nusing StillDesign.PhysX;\nusing OneamEngine;\nusing OpenC1;\nusing OpenC1.Parsers;\nusing OneAmEngine;\n\nnamespace OpenC1.Physics\n{\n\n    class VehicleChassis\n    {\n        public Vehicle Vehicle { get; set; }\n        public Actor Actor { get { return _physXActor; } }\n        public List<VehicleWheel> Wheels {get; private set; }\n        public Motor Motor { get; private set; }\n\n        public bool Backwards {get; private set; }\n        public float Speed { get; private set; }\n\n        public CircularList LastSpeeds = new CircularList(5);\n\n        private Actor _physXActor;\n        float _currentTorque;\n        float _desiredSteerAngle = 0f;\n        float _handbrake;\n        public float _steerAngle = 0.0f;\n        float _motorTorque = 0.0f;\n        float _brakeTorque = 0.0f;\n        TireFunctionDescription _frontLateralTireFn, _rearLateralTireFn;\n        public float _heightOffset;\n        private Vector3 _massPos;\n\n\n        public VehicleChassis(Vehicle vehicle)\n        {\n            Vehicle = vehicle;\n\n            Wheels = new List<VehicleWheel>();\n\n            VehicleFile carFile = vehicle.Config;\n\n            ActorDescription actorDesc = new ActorDescription();\n\n            actorDesc.BodyDescription = new BodyDescription();\n            actorDesc.BodyDescription.Mass = carFile.Mass;\n            var boxDesc = new BoxShapeDescription();\n            boxDesc.Size = carFile.BoundingBox.GetSize();\n            boxDesc.LocalPosition = carFile.BoundingBox.GetCenter();\n            boxDesc.Name = PhysXConsts.VehicleBody;\n            boxDesc.Flags |= ShapeFlag.PointContactForce;\n            actorDesc.Shapes.Add(boxDesc);\n\n            foreach (Vector3 extraPoint in carFile.ExtraBoundingBoxPoints)\n            {\n                var extraDesc = new SphereShapeDescription(0.2f);\n                extraDesc.LocalPosition = extraPoint;\n                extraDesc.Mass = 0;\n                actorDesc.Shapes.Add(extraDesc);\n            }\n\n            using (UtilitiesLibrary lib = new UtilitiesLibrary())\n            {\n                Vector3 size = carFile.Size;\n                Vector3 inertiaTensor = lib.ComputeBoxInteriaTensor(Vector3.Zero, carFile.Mass, size);\n\n            }\n\n\n            TireFunctionDescription lngTFD = new TireFunctionDescription();\n            lngTFD.ExtremumSlip = 0.1f;\n            lngTFD.ExtremumValue = 4f;\n            lngTFD.AsymptoteSlip = 2.0f;\n            lngTFD.AsymptoteValue = 3.2f;\n\n            _rearLateralTireFn = new TireFunctionDescription();\n\n            _rearLateralTireFn.ExtremumSlip = 0.2f;\n            _rearLateralTireFn.ExtremumValue = 2.1f;\n            _rearLateralTireFn.AsymptoteSlip = 0.0013f * carFile.Mass;\n            _rearLateralTireFn.AsymptoteValue = 0.02f;\n\n            _frontLateralTireFn = _rearLateralTireFn;\n            _frontLateralTireFn.ExtremumValue = 1.9f;\n\n            MaterialDescription md = new MaterialDescription();\n            md.Flags = MaterialFlag.DisableFriction;\n            Material m = PhysX.Instance.Scene.CreateMaterial(md);\n\n            int wheelIndex = 0;\n\n            foreach (CWheelActor wheel in carFile.WheelActors)\n            {\n                WheelShapeDescription wheelDesc = new WheelShapeDescription();\n                wheelDesc.InverseWheelMass = 0.08f;\n                wheelDesc.LongitudalTireForceFunction = lngTFD;\n                wheelDesc.Flags = WheelShapeFlag.ClampedFriction;\n                wheelDesc.Material = m;\n\n                wheelDesc.Radius = wheel.IsDriven ? carFile.DrivenWheelRadius : carFile.NonDrivenWheelRadius;\n                wheelDesc.SuspensionTravel = (wheel.IsFront ? carFile.SuspensionGiveFront : carFile.SuspensionGiveRear) * 18;\n\n                float heightModifier = (wheelDesc.SuspensionTravel + wheelDesc.Radius) / wheelDesc.SuspensionTravel;\n\n                SpringDescription spring = new SpringDescription();\n                if (carFile.Mass > 3000)\n                    spring.SpringCoefficient = 10.5f * heightModifier * carFile.Mass;\n                else\n                    spring.SpringCoefficient = 6.5f * heightModifier * Math.Min(1000, carFile.Mass);\n                spring.DamperCoefficient = carFile.SuspensionDamping * 6f;\n\n                wheelDesc.Suspension = spring;\n                wheelDesc.LocalPosition = wheel.Position;\n                wheelDesc.Name = (wheelIndex).ToString();\n                wheelIndex++;\n\n                wheelDesc.LateralTireForceFunction = wheel.IsFront ? _frontLateralTireFn : _rearLateralTireFn;\n                actorDesc.Shapes.Add(wheelDesc);\n            }\n\n            _physXActor = PhysX.Instance.Scene.CreateActor(actorDesc);\n\n\n            _heightOffset = _physXActor.Shapes[0].LocalPosition.Y * -2;\n            if (_heightOffset < 0) _heightOffset = 0;\n\n            foreach (Shape shape in _physXActor.Shapes)\n            {\n                shape.LocalPosition += new Vector3(0, _heightOffset, 0);\n                if (shape is WheelShape)\n                {\n                    wheelIndex = int.Parse(shape.Name);\n                    Wheels.Add(new VehicleWheel(this, carFile.WheelActors[wheelIndex], (WheelShape)shape, carFile.WheelActors[wheelIndex].IsLeft ? 0.17f : -0.17f) { Index = wheelIndex });\n                }\n            }\n\n            _physXActor.Group = PhysXConsts.VehicleId;\n            _physXActor.UserData = vehicle;\n\n            _physXActor.WakeUp(60.0f);\n\n\n\n\n            Vector3 massPos = carFile.CenterOfMass;\n            massPos.Y = carFile.WheelActors[0].Position.Y - carFile.NonDrivenWheelRadius + _heightOffset + 0.35f;\n            _massPos = massPos;\n            _physXActor.SetCenterOfMassOffsetLocalPosition(massPos);\n\n\n            List<float> power = new List<float>(new float[] { 0.5f, 0.5f, 0.5f, 1f, 1f, 1.0f, 1.0f, 0 });\n            List<float> ratios = new List<float>(new float[] { 3.227f, 2.360f, 1.685f, 1.312f, 1.000f, 0.793f });\n\n            BaseGearbox gearbox = BaseGearbox.Create(false, ratios, 0.4f);\n            Motor = new Motor(power, carFile.EnginePower, 6f, carFile.TopSpeed, gearbox);\n            Motor.Gearbox.CurrentGear = 0;\n        }\n\n\n\n\n\n        public void FixSuspension()\n        {\n            foreach (VehicleWheel wheel in this.Wheels)\n            {\n                Vector3 localPos = wheel.Shape.LocalPosition;\n                localPos.Y += wheel.CurrentSuspensionTravel;\n                wheel.Shape.LocalPosition = localPos;\n            }\n        }\n\n        public void Delete()\n        {\n            _physXActor.Dispose();\n            _physXActor = null;\n        }\n\n\n        public float SteerRatio\n        {\n            get { return _steerAngle / 0.5f; }\n        }\n\n\n        public void Update()\n        {\n            LastSpeeds.Add(Speed);\n\n            GameConsole.WriteLine(\"Height\", Actor.GlobalPosition.Y);\n\n\n\n\n\n\n\n            Vector3 vDirection = _physXActor.GlobalOrientation.Forward;\n            Vector3 vNormal = _physXActor.LinearVelocity * vDirection;\n            Speed = vNormal.Length() * 2.9f;\n\n            float endLocal = _desiredSteerAngle;\n\n            float diff = Math.Abs(endLocal - _steerAngle);\n            float max = 0.0017f;\n            if (diff > 0.0025f)\n            {\n\n                if (diff > max)\n                    diff = max;\n                else\n                    diff *= 0.05f;\n\n                diff *= Engine.ElapsedSeconds * 1000;\n                if (endLocal > _steerAngle)\n                {\n                    _steerAngle += diff;\n                }\n                else\n                {\n                    _steerAngle -= diff;\n                }\n\n\n                float steerFactor = Vehicle.Driver.ModerateSteeringAtSpeed ? Math.Min(Math.Max(0.1f, (1 - Speed / 175)), 1) : 1;\n\n                foreach (VehicleWheel wheel in Wheels)\n                {\n                    if (wheel.CActor.IsSteerable)\n                        wheel.Shape.SteeringAngle = _steerAngle * steerFactor;\n                }\n            }\n\n            if (Speed < 1f)\n            {\n                if (Backwards && _currentTorque > 0.01f)\n                {\n                    Backwards = false;\n                    Motor.Gearbox.CurrentGear = 1;\n                }\n                else if (!Backwards && _currentTorque < -0.01f)\n                {\n                    Backwards = true;\n                    Motor.Gearbox.CurrentGear = -1;\n                }\n            }\n\n            bool isSkiddingTooMuch = false;\n            Motor.WheelsSpinning = false;\n            float maxlat = 0;\n            bool allWheelsInAir = true;\n            foreach (VehicleWheel wheel in Wheels)\n            {\n                wheel.Update();\n                if (!wheel.InAir) allWheelsInAir = false;\n                if (wheel.CActor.IsDriven && (wheel.IsSkiddingLng || wheel.InAir))\n                {\n                    Motor.WheelsSpinning = true;\n                }\n                if (maxlat < Math.Abs(wheel.LatSlip)) maxlat = Math.Abs(wheel.LatSlip);\n                if (Math.Abs(wheel.LatSlip) > 0.8f && !wheel.InAir) isSkiddingTooMuch = true;\n            }\n\n            if (!InAir)\n            {\n                _physXActor.MaximumAngularVelocity = 3.5f;\n\n                if (Speed < 10)\n                {\n                    _physXActor.LinearDamping = Motor.IsAccelerating ? 1 : 4;\n                    _physXActor.AngularDamping = 0.02f;\n                    GameConsole.WriteLine(\"mode slow\");\n                }\n                else if ((_steerAngle < -0.1f && Wheels[0].LatSlip > 0.35f) || (_steerAngle > 0.1f && Wheels[0].LatSlip < -0.35f))\n                {\n                    _physXActor.AngularDamping = maxlat * 2.05f;\n                    _physXActor.LinearDamping = maxlat * 1.3f;\n                    Motor.WheelsSpinning = true;\n                    GameConsole.WriteLine(\"mode alt steer\");\n                }\n                else if ((_steerAngle < -0.1f && Wheels[0].LatSlip < -0.4f) || (_steerAngle > 0.1f && Wheels[0].LatSlip > 0.4f))\n                {\n                    _physXActor.AngularDamping = 0;\n                    _physXActor.LinearDamping = Speed > 20 ? maxlat * 1.18f : maxlat * 0.9f;\n                    GameConsole.WriteLine(\"mode steer into\");\n                }\n                else if ((Math.Abs(_steerAngle) < 0.1f && Math.Abs(Wheels[0].LatSlip) > 0.4f))\n                {\n                    _physXActor.AngularDamping = Speed > 20 ? maxlat * 0.6f : maxlat * 1.9f;\n                    _physXActor.LinearDamping = Speed > 20 ? maxlat * 1.18f : maxlat * 0.8f;\n                    GameConsole.WriteLine(\"no steer\");\n                }\n                else if (isSkiddingTooMuch)\n                {\n                    if (Speed < 20)\n                        _physXActor.LinearDamping = maxlat * 0.8f;\n                    else\n                        _physXActor.LinearDamping = maxlat * 0.4f;\n                    _physXActor.AngularDamping = 0.01f;\n                    GameConsole.WriteLine(\"mode overskid\");\n                }\n                else\n                {\n                    _physXActor.LinearDamping = 0;\n                    _physXActor.AngularDamping = 0.01f;\n                }\n\n                if (_physXActor.GlobalOrientation.Up.Y < 0)\n                {\n                    _physXActor.LinearDamping = 7f;\n                    _physXActor.AngularDamping = 2f;\n                    GameConsole.WriteLine(\"mode on roof\");\n                }\n            }\n            if (allWheelsInAir)\n            {\n                _physXActor.AngularDamping = 0.00f;\n                _physXActor.MaximumAngularVelocity = 10f;\n                _physXActor.LinearDamping = 0;\n                GameConsole.WriteLine(\"mode in air\");\n            }\n        }\n\n\n        public void OutputDebugInfo()\n        {\n            GameConsole.WriteLine(\"Speed\", Speed);\n            GameConsole.WriteLine(\"Brake\", _brakeTorque);\n        }\n\n\n        public void Brake(float value)\n        {\n            Motor.Throttle = -value;\n            Motor.Update(Speed);\n            float motorTorque = Motor.CurrentPowerOutput;\n            _currentTorque = motorTorque;\n\n            if (Backwards)\n            {\n                _motorTorque = motorTorque;\n                _brakeTorque = 0f;\n            }\n            else\n            {\n                _motorTorque = 0.0f;\n                _brakeTorque = Math.Max(870, _brakeTorque + 0.9f);\n            }\n            UpdateTorque();\n\n        }\n\n        public void Accelerate(float value)\n        {\n            Motor.Throttle = value;\n            Motor.Update(Speed);\n            float motorTorque = Motor.CurrentPowerOutput;\n            _currentTorque = motorTorque;\n\n            if (motorTorque > 0.0001f)\n            {\n                if (Backwards)\n                {\n                    _motorTorque = 0f;\n                    _brakeTorque = Math.Max(700, _brakeTorque + 0.7f);\n                }\n                else\n                {\n                    _motorTorque = motorTorque;\n                    _brakeTorque = 0.0f;\n                }\n            }\n            else\n            {\n                _motorTorque = 0.0f;\n                _brakeTorque = Motor.CurrentFriction;\n            }\n\n            UpdateTorque();\n            _physXActor.WakeUp();\n        }\n\n        public void Steer(float angle)\n        {\n            _desiredSteerAngle = angle*0.33f;\n        }\n\n        public void PullHandbrake()\n        {\n\n\n            _handbrake = 1;\n        }\n\n        public void ReleaseHandbrake()\n        {\n            if (_handbrake == 0) return;\n            _handbrake -= Engine.ElapsedSeconds * 1.8f;\n            if (_handbrake < 0) _handbrake = 0;\n        }\n\n\n        private void UpdateTorque()\n        {\n            foreach (VehicleWheel wheel in Wheels)\n            {\n                if (wheel.CActor.IsDriven)\n                    wheel.Shape.MotorTorque = -_motorTorque;\n                if (wheel.IsRear)\n                    wheel.ApplyHandbrake(_handbrake);\n            }\n\n            if (_handbrake == 1) return;\n\n\n            foreach (VehicleWheel wheel in Wheels)\n            {\n                wheel.Shape.BrakeTorque = _brakeTorque;\n            }\n        }\n\n\n        public void Reset()\n        {\n            Matrix m = _physXActor.GlobalOrientation;\n            m.Up = Vector3.Up;\n\n            _physXActor.GlobalOrientation = m;\n            _physXActor.GlobalPosition += new Vector3(0.0f, 1.5f, 0.0f);\n            _physXActor.LinearMomentum = _physXActor.LinearVelocity = Vector3.Zero;\n            _physXActor.AngularMomentum = _physXActor.AngularVelocity = Vector3.Zero;\n        }\n\n        public bool InAir\n        {\n            get\n            {\n                foreach (VehicleWheel wheel in Wheels)\n                    if (!wheel.InAir) return false;\n                return true;\n            }\n        }\n\n        internal void Boost()\n        {\n            _physXActor.AddForce(_physXActor.GlobalOrientation.Forward * 1000, ForceMode.Force);\n        }\n    }\n}\n\n",
        "gt": [
            "'OpenC1/OpenC1/SoundDesc.cs'",
            "'OpenC1/OpenC1/Physics/VehicleChassis.cs'",
            "'OpenC1/OpenC1/CameraViews/ChaseView.cs'",
            "'OpenC1/OpenC1/GameModes/OpponentEditMode.cs'",
            "'OpenC1/OpenC1/Screens/PlayGameScreen.cs'"
        ]
    },
    {
        "files": [
            "'Osu-Toy/osu.Game.Rulesets.Taiko/Difficulty/TaikoDifficultyCalculator.cs'",
            "'Osu-Toy/osu.Game.Rulesets.Taiko/TaikoRuleset.cs'",
            "'Osu-Toy/osu.Game.Tests/Visual/Online/TestSceneUserRequest.cs'"
        ],
        "content": "'Osu-Toy/osu.Game.Rulesets.Taiko/Difficulty/TaikoDifficultyCalculator.cs'\n:\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing osu.Game.Beatmaps;\nusing osu.Game.Rulesets.Difficulty;\nusing osu.Game.Rulesets.Difficulty.Preprocessing;\nusing osu.Game.Rulesets.Difficulty.Skills;\nusing osu.Game.Rulesets.Mods;\nusing osu.Game.Rulesets.Scoring;\nusing osu.Game.Rulesets.Taiko.Difficulty.Preprocessing;\nusing osu.Game.Rulesets.Taiko.Difficulty.Skills;\nusing osu.Game.Rulesets.Taiko.Mods;\nusing osu.Game.Rulesets.Taiko.Objects;\nusing osu.Game.Rulesets.Taiko.Scoring;\n\nnamespace osu.Game.Rulesets.Taiko.Difficulty\n{\n    public class TaikoDifficultyCalculator : DifficultyCalculator\n    {\n        private const double rhythm_skill_multiplier = 0.014;\n        private const double colour_skill_multiplier = 0.01;\n        private const double stamina_skill_multiplier = 0.02;\n\n        public TaikoDifficultyCalculator(Ruleset ruleset, WorkingBeatmap beatmap)\n            : base(ruleset, beatmap)\n        {\n        }\n\n        protected override Skill[] CreateSkills(IBeatmap beatmap) => new Skill[]\n        {\n            new Colour(),\n            new Rhythm(),\n            new Stamina(true),\n            new Stamina(false),\n        };\n\n        protected override Mod[] DifficultyAdjustmentMods => new Mod[]\n        {\n            new TaikoModDoubleTime(),\n            new TaikoModHalfTime(),\n            new TaikoModEasy(),\n            new TaikoModHardRock(),\n        };\n\n        protected override IEnumerable<DifficultyHitObject> CreateDifficultyHitObjects(IBeatmap beatmap, double clockRate)\n        {\n            List<TaikoDifficultyHitObject> taikoDifficultyHitObjects = new List<TaikoDifficultyHitObject>();\n\n            for (int i = 2; i < beatmap.HitObjects.Count; i++)\n            {\n                taikoDifficultyHitObjects.Add(\n                    new TaikoDifficultyHitObject(\n                        beatmap.HitObjects[i], beatmap.HitObjects[i - 1], beatmap.HitObjects[i - 2], clockRate, i\n                    )\n                );\n            }\n\n            new StaminaCheeseDetector(taikoDifficultyHitObjects).FindCheese();\n            return taikoDifficultyHitObjects;\n        }\n\n        protected override DifficultyAttributes CreateDifficultyAttributes(IBeatmap beatmap, Mod[] mods, Skill[] skills, double clockRate)\n        {\n            if (beatmap.HitObjects.Count == 0)\n                return new TaikoDifficultyAttributes { Mods = mods, Skills = skills };\n\n            var colour = (Colour)skills[0];\n            var rhythm = (Rhythm)skills[1];\n            var staminaRight = (Stamina)skills[2];\n            var staminaLeft = (Stamina)skills[3];\n\n            double colourRating = colour.DifficultyValue() * colour_skill_multiplier;\n            double rhythmRating = rhythm.DifficultyValue() * rhythm_skill_multiplier;\n            double staminaRating = (staminaRight.DifficultyValue() + staminaLeft.DifficultyValue()) * stamina_skill_multiplier;\n\n            double staminaPenalty = simpleColourPenalty(staminaRating, colourRating);\n            staminaRating *= staminaPenalty;\n\n            double combinedRating = locallyCombinedDifficulty(colour, rhythm, staminaRight, staminaLeft, staminaPenalty);\n            double separatedRating = norm(1.5, colourRating, rhythmRating, staminaRating);\n            double starRating = 1.4 * separatedRating + 0.5 * combinedRating;\n            starRating = rescale(starRating);\n\n            HitWindows hitWindows = new TaikoHitWindows();\n            hitWindows.SetDifficulty(beatmap.BeatmapInfo.BaseDifficulty.OverallDifficulty);\n\n            return new TaikoDifficultyAttributes\n            {\n                StarRating = starRating,\n                Mods = mods,\n                StaminaStrain = staminaRating,\n                RhythmStrain = rhythmRating,\n                ColourStrain = colourRating,\n\n                GreatHitWindow = (int)hitWindows.WindowFor(HitResult.Great) / clockRate,\n                MaxCombo = beatmap.HitObjects.Count(h => h is Hit),\n                Skills = skills\n            };\n        }\n\n\n\n\n\n\n\n\n        private double simpleColourPenalty(double staminaDifficulty, double colorDifficulty)\n        {\n            if (colorDifficulty <= 0) return 0.79 - 0.25;\n\n            return 0.79 - Math.Atan(staminaDifficulty / colorDifficulty - 12) / Math.PI / 2;\n        }\n\n\n\n\n\n\n        private double norm(double p, params double[] values) => Math.Pow(values.Sum(x => Math.Pow(x, p)), 1 / p);\n\n\n\n\n\n\n\n\n        private double locallyCombinedDifficulty(Colour colour, Rhythm rhythm, Stamina staminaRight, Stamina staminaLeft, double staminaPenalty)\n        {\n            List<double> peaks = new List<double>();\n\n            for (int i = 0; i < colour.StrainPeaks.Count; i++)\n            {\n                double colourPeak = colour.StrainPeaks[i] * colour_skill_multiplier;\n                double rhythmPeak = rhythm.StrainPeaks[i] * rhythm_skill_multiplier;\n                double staminaPeak = (staminaRight.StrainPeaks[i] + staminaLeft.StrainPeaks[i]) * stamina_skill_multiplier * staminaPenalty;\n                peaks.Add(norm(2, colourPeak, rhythmPeak, staminaPeak));\n            }\n\n            double difficulty = 0;\n            double weight = 1;\n\n            foreach (double strain in peaks.OrderByDescending(d => d))\n            {\n                difficulty += strain * weight;\n                weight *= 0.9;\n            }\n\n            return difficulty;\n        }\n\n\n\n\n\n        private double rescale(double sr)\n        {\n            if (sr < 0) return sr;\n\n            return 10.43 * Math.Log(sr / 8 + 1);\n        }\n    }\n}\n\n'Osu-Toy/osu.Game.Rulesets.Taiko/TaikoRuleset.cs'\n:﻿\n\n\nusing osu.Game.Beatmaps;\nusing osu.Game.Graphics;\nusing osu.Game.Rulesets.Mods;\nusing osu.Game.Rulesets.Taiko.Mods;\nusing osu.Game.Rulesets.Taiko.UI;\nusing osu.Game.Rulesets.UI;\nusing System.Collections.Generic;\nusing osu.Framework.Graphics;\nusing osu.Framework.Graphics.Sprites;\nusing osu.Framework.Input.Bindings;\nusing osu.Game.Rulesets.Replays.Types;\nusing osu.Game.Rulesets.Taiko.Replays;\nusing osu.Game.Beatmaps.Legacy;\nusing osu.Game.Rulesets.Difficulty;\nusing osu.Game.Rulesets.Scoring;\nusing osu.Game.Rulesets.Taiko.Beatmaps;\nusing osu.Game.Rulesets.Taiko.Difficulty;\nusing osu.Game.Rulesets.Taiko.Scoring;\nusing osu.Game.Scoring;\nusing System;\nusing System.Linq;\nusing osu.Game.Rulesets.Edit;\nusing osu.Game.Rulesets.Taiko.Edit;\nusing osu.Game.Rulesets.Taiko.Objects;\nusing osu.Game.Rulesets.Taiko.Skinning.Legacy;\nusing osu.Game.Screens.Ranking.Statistics;\nusing osu.Game.Skinning;\n\nnamespace osu.Game.Rulesets.Taiko\n{\n    public class TaikoRuleset : Ruleset, ILegacyRuleset\n    {\n        public override DrawableRuleset CreateDrawableRulesetWith(IBeatmap beatmap, IReadOnlyList<Mod> mods = null) => new DrawableTaikoRuleset(this, beatmap, mods);\n\n        public override ScoreProcessor CreateScoreProcessor() => new TaikoScoreProcessor();\n\n        public override HealthProcessor CreateHealthProcessor(double drainStartTime) => new TaikoHealthProcessor();\n\n        public override IBeatmapConverter CreateBeatmapConverter(IBeatmap beatmap) => new TaikoBeatmapConverter(beatmap, this);\n\n        public override ISkin CreateLegacySkinProvider(ISkinSource source, IBeatmap beatmap) => new TaikoLegacySkinTransformer(source);\n\n        public const string SHORT_NAME = \"taiko\";\n\n        public override IEnumerable<KeyBinding> GetDefaultKeyBindings(int variant = 0) => new[]\n        {\n            new KeyBinding(InputKey.MouseLeft, TaikoAction.LeftCentre),\n            new KeyBinding(InputKey.MouseRight, TaikoAction.LeftRim),\n            new KeyBinding(InputKey.D, TaikoAction.LeftRim),\n            new KeyBinding(InputKey.F, TaikoAction.LeftCentre),\n            new KeyBinding(InputKey.J, TaikoAction.RightCentre),\n            new KeyBinding(InputKey.K, TaikoAction.RightRim),\n        };\n\n        public override IEnumerable<Mod> ConvertFromLegacyMods(LegacyMods mods)\n        {\n            if (mods.HasFlag(LegacyMods.Nightcore))\n                yield return new TaikoModNightcore();\n            else if (mods.HasFlag(LegacyMods.DoubleTime))\n                yield return new TaikoModDoubleTime();\n\n            if (mods.HasFlag(LegacyMods.Perfect))\n                yield return new TaikoModPerfect();\n            else if (mods.HasFlag(LegacyMods.SuddenDeath))\n                yield return new TaikoModSuddenDeath();\n\n            if (mods.HasFlag(LegacyMods.Cinema))\n                yield return new TaikoModCinema();\n            else if (mods.HasFlag(LegacyMods.Autoplay))\n                yield return new TaikoModAutoplay();\n\n            if (mods.HasFlag(LegacyMods.Easy))\n                yield return new TaikoModEasy();\n\n            if (mods.HasFlag(LegacyMods.Flashlight))\n                yield return new TaikoModFlashlight();\n\n            if (mods.HasFlag(LegacyMods.HalfTime))\n                yield return new TaikoModHalfTime();\n\n            if (mods.HasFlag(LegacyMods.HardRock))\n                yield return new TaikoModHardRock();\n\n            if (mods.HasFlag(LegacyMods.Hidden))\n                yield return new TaikoModHidden();\n\n            if (mods.HasFlag(LegacyMods.NoFail))\n                yield return new TaikoModNoFail();\n\n            if (mods.HasFlag(LegacyMods.Relax))\n                yield return new TaikoModRelax();\n\n            if (mods.HasFlag(LegacyMods.Random))\n                yield return new TaikoModRandom();\n        }\n\n        public override LegacyMods ConvertToLegacyMods(Mod[] mods)\n        {\n            var value = base.ConvertToLegacyMods(mods);\n\n            if (mods.OfType<TaikoModRandom>().Any())\n                value |= LegacyMods.Random;\n\n            return value;\n        }\n\n        public override IEnumerable<Mod> GetModsFor(ModType type)\n        {\n            switch (type)\n            {\n                case ModType.DifficultyReduction:\n                    return new Mod[]\n                    {\n                        new TaikoModEasy(),\n                        new TaikoModNoFail(),\n                        new MultiMod(new TaikoModHalfTime(), new TaikoModDaycore()),\n                    };\n\n                case ModType.DifficultyIncrease:\n                    return new Mod[]\n                    {\n                        new TaikoModHardRock(),\n                        new MultiMod(new TaikoModSuddenDeath(), new TaikoModPerfect()),\n                        new MultiMod(new TaikoModDoubleTime(), new TaikoModNightcore()),\n                        new TaikoModHidden(),\n                        new TaikoModFlashlight(),\n                    };\n\n                case ModType.Conversion:\n                    return new Mod[]\n                    {\n                        new TaikoModRandom(),\n                        new TaikoModDifficultyAdjust(),\n                    };\n\n                case ModType.Automation:\n                    return new Mod[]\n                    {\n                        new MultiMod(new TaikoModAutoplay(), new TaikoModCinema()),\n                        new TaikoModRelax(),\n                    };\n\n                case ModType.Fun:\n                    return new Mod[]\n                    {\n                        new MultiMod(new ModWindUp(), new ModWindDown())\n                    };\n\n                default:\n                    return Array.Empty<Mod>();\n            }\n        }\n\n        public override string Description => \"osu!taiko\";\n\n        public override string ShortName => SHORT_NAME;\n\n        public override string PlayingVerb => \"Bashing drums\";\n\n        public override Drawable CreateIcon() => new SpriteIcon { Icon = OsuIcon.RulesetTaiko };\n\n        public override HitObjectComposer CreateHitObjectComposer() => new TaikoHitObjectComposer(this);\n\n        public override DifficultyCalculator CreateDifficultyCalculator(WorkingBeatmap beatmap) => new TaikoDifficultyCalculator(this, beatmap);\n\n        public override PerformanceCalculator CreatePerformanceCalculator(DifficultyAttributes attributes, ScoreInfo score) => new TaikoPerformanceCalculator(this, attributes, score);\n\n        public int LegacyID => 1;\n\n        public override IConvertibleReplayFrame CreateConvertibleReplayFrame() => new TaikoReplayFrame();\n\n        protected override IEnumerable<HitResult> GetValidHitResults()\n        {\n            return new[]\n            {\n                HitResult.Great,\n                HitResult.Ok,\n\n                HitResult.SmallTickHit,\n\n                HitResult.SmallBonus,\n            };\n        }\n\n        public override string GetDisplayNameForHitResult(HitResult result)\n        {\n            switch (result)\n            {\n                case HitResult.SmallTickHit:\n                    return \"drum tick\";\n\n                case HitResult.SmallBonus:\n                    return \"strong bonus\";\n            }\n\n            return base.GetDisplayNameForHitResult(result);\n        }\n\n        public override StatisticRow[] CreateStatisticsForScore(ScoreInfo score, IBeatmap playableBeatmap)\n        {\n            var timedHitEvents = score.HitEvents.Where(e => e.HitObject is Hit).ToList();\n\n            return new[]\n            {\n                new StatisticRow\n                {\n                    Columns = new[]\n                    {\n                        new StatisticItem(\"Timing Distribution\", new HitEventTimingDistributionGraph(timedHitEvents)\n                        {\n                            RelativeSizeAxes = Axes.X,\n                            Height = 250\n                        }),\n                    }\n                },\n                new StatisticRow\n                {\n                    Columns = new[]\n                    {\n                        new StatisticItem(string.Empty, new SimpleStatisticTable(3, new SimpleStatisticItem[]\n                        {\n                            new UnstableRate(timedHitEvents)\n                        }))\n                    }\n                }\n            };\n        }\n    }\n}\n\n'Osu-Toy/osu.Game.Tests/Visual/Online/TestSceneUserRequest.cs'\n:﻿\n\n\nusing NUnit.Framework;\nusing osu.Framework.Allocation;\nusing osu.Framework.Bindables;\nusing osu.Framework.Graphics.Containers;\nusing osu.Game.Online.API;\nusing osu.Game.Online.API.Requests;\nusing osu.Game.Rulesets;\nusing osu.Game.Rulesets.Mania;\nusing osu.Game.Users;\nusing osu.Framework.Graphics;\nusing osu.Game.Graphics.Sprites;\nusing osu.Game.Graphics.UserInterface;\nusing osu.Game.Rulesets.Taiko;\n\nnamespace osu.Game.Tests.Visual.Online\n{\n    [TestFixture]\n    public class TestSceneUserRequest : OsuTestScene\n    {\n        [Resolved]\n        private IAPIProvider api { get; set; }\n\n        private readonly Bindable<User> user = new Bindable<User>();\n        private GetUserRequest request;\n        private readonly LoadingLayer loading;\n\n        public TestSceneUserRequest()\n        {\n            Add(new Container\n            {\n                Anchor = Anchor.Centre,\n                Origin = Anchor.Centre,\n                AutoSizeAxes = Axes.Both,\n                Children = new Drawable[]\n                {\n                    new UserTestContainer\n                    {\n                        User = { BindTarget = user }\n                    },\n                    loading = new LoadingLayer()\n                }\n            });\n        }\n\n        protected override void LoadComplete()\n        {\n            base.LoadComplete();\n\n            AddStep(@\"local user\", () => getUser());\n            AddStep(@\"local user with taiko ruleset\", () => getUser(ruleset: new TaikoRuleset().RulesetInfo));\n            AddStep(@\"cookiezi\", () => getUser(124493));\n            AddStep(@\"cookiezi with mania ruleset\", () => getUser(124493, new ManiaRuleset().RulesetInfo));\n        }\n\n        private void getUser(long? userId = null, RulesetInfo ruleset = null)\n        {\n            loading.Show();\n\n            request?.Cancel();\n            request = new GetUserRequest(userId, ruleset);\n            request.Success += user =>\n            {\n                this.user.Value = user;\n                loading.Hide();\n            };\n            api.Queue(request);\n        }\n\n        private class UserTestContainer : FillFlowContainer\n        {\n            public readonly Bindable<User> User = new Bindable<User>();\n\n            public UserTestContainer()\n            {\n                AutoSizeAxes = Axes.Both;\n                Direction = FillDirection.Vertical;\n            }\n\n            protected override void LoadComplete()\n            {\n                base.LoadComplete();\n                User.BindValueChanged(onUserUpdate, true);\n            }\n\n            private void onUserUpdate(ValueChangedEvent<User> user)\n            {\n                Clear();\n\n                AddRange(new Drawable[]\n                {\n                    new OsuSpriteText\n                    {\n                        Text = $@\"Username: {user.NewValue?.Username}\"\n                    },\n                    new OsuSpriteText\n                    {\n                        Text = $@\"RankedScore: {user.NewValue?.Statistics.RankedScore}\"\n                    },\n                });\n            }\n        }\n    }\n}\n",
        "gt": [
            "'Osu-Toy/osu.Game.Rulesets.Taiko/Difficulty/TaikoDifficultyCalculator.cs'",
            "'Osu-Toy/osu.Game.Rulesets.Taiko/TaikoRuleset.cs'",
            "'Osu-Toy/osu.Game.Tests/Visual/Online/TestSceneUserRequest.cs'"
        ]
    },
    {
        "files": [
            "'Lunar-Engine/src/Lunar.Editor/SuiteForm.cs'",
            "'Lunar-Engine/src/Lunar.Editor/Program.cs'",
            "'Lunar-Engine/src/Lunar.Editor/Controls/View.cs'"
        ],
        "content": "'Lunar-Engine/src/Lunar.Editor/SuiteForm.cs'\n:﻿using DarkUI.Docking;\nusing DarkUI.Forms;\nusing DarkUI.Win32;\nusing System;\nusing System.Collections.Generic;\nusing System.Drawing;\nusing System.IO;\nusing System.Windows.Forms;\nusing Lunar.Core;\nusing Lunar.Editor.Controls;\nusing Lunar.Editor.Utilities;\nusing System.Diagnostics;\n\nnamespace Lunar.Editor\n{\n    public partial class SuiteForm : DarkForm\n    {\n        #region Field Region\n\n        private List<SavableDocument> _editorDocuments;\n\n        private DockProject _dockProject;\n        private DockTilesetTools _dockTilesetTools;\n        private DockLayers _dockLayers;\n        private DockProperties _dockProperties;\n        private DockMapObjectProperties _dockMapObject;\n        private DockMapAttributes _dockMapAttributes;\n\n        private Project _project;\n\n        public Project Project => _project;\n\n        #endregion Field Region\n\n        #region Constructor Region\n\n        public SuiteForm()\n        {\n            InitializeComponent();\n\n\n\n            Application.AddMessageFilter(new ControlScrollFilter());\n\n\n            Application.AddMessageFilter(DockPanel.DockContentDragFilter);\n\n\n\n            Application.AddMessageFilter(DockPanel.DockResizeFilter);\n\n\n            HookEvents();\n\n\n            _dockProject = new DockProject();\n            _dockTilesetTools = new DockTilesetTools();\n            _dockLayers = new DockLayers();\n            _dockProperties = new DockProperties();\n            _dockMapObject = new DockMapObjectProperties();\n            _dockMapAttributes = new DockMapAttributes();\n\n            this.DockPanel.AllowDrop = false;\n            _dockTilesetTools.AllowDrop = false;\n            _dockProject.AllowDrop = false;\n            _dockLayers.AllowDrop = false;\n            _dockProperties.AllowDrop = false;\n            _dockMapObject.AllowDrop = false;\n            _dockMapAttributes.AllowDrop = false;\n\n            _editorDocuments = new List<SavableDocument>();\n\n            _dockProject.FileCreated += _dockProject_File_Created;\n            _dockProject.FileSelected += _dockProject_File_Selected;\n            _dockProject.FileRemoved += _dockProject_File_Removed;\n            _dockProject.FileChanged += DockProjectOnFileChanged;\n\n            this.DockPanel.AddContent(_dockProject);\n            this.DockPanel.AddContent(_dockTilesetTools);\n\n            this.DockPanel.ContentRemoved += DockPanelOnContentRemoved;\n\n            _dockTilesetTools.DockRegion.Size = new Size(_dockTilesetTools.Width, _dockTilesetTools.DockRegion.Height);\n\n            this.DockPanel.AddContent(_dockLayers, _dockTilesetTools.DockGroup);\n\n            this.DockPanel.AddContent(_dockMapObject, _dockTilesetTools.DockGroup);\n\n            this.DockPanel.AddContent(_dockMapAttributes, _dockTilesetTools.DockGroup);\n\n            this.DockPanel.AddContent(_dockProperties, _dockTilesetTools.DockGroup);\n\n            _dockTilesetTools.DockGroup.SetVisibleContent(_dockTilesetTools);\n\n            _dockTilesetTools.DockGroup.Hide();\n            _dockTilesetTools.DockRegion.Hide();\n\n\n            BuildWindowMenu();\n        }\n\n        private void DockPanelOnContentRemoved(object sender, DockContentEventArgs e)\n        {\n            if (e.Content is DockMapDocument)\n            {\n                _dockTilesetTools.DockGroup.Hide();\n                _dockTilesetTools.DockRegion.Hide();\n            }\n        }\n\n        private void DockProjectOnFileChanged(object sender, GameFileChangedEventArgs e)\n        {\n            foreach (var editor in _editorDocuments)\n            {\n                if (((FileInfo)editor.Tag).Name == e.OldFile.Name)\n                {\n                    editor.Tag = e.NewFile;\n                }\n            }\n        }\n\n        private void _dockProject_File_Removed(object sender, FileEventArgs e)\n        {\n            this.CloseDocument(e.File);\n        }\n\n        public void OpenPythonDocument(FileInfo file)\n        {\n            var pyDoc = new DockScriptDocument(file.Name, Icons.document_16xLG, file)\n            {\n                Tag = file\n            };\n\n\n            var existingDoc = this.FindOpenDocument(file);\n            if (existingDoc != null)\n            {\n                this.DockPanel.ActiveContent = existingDoc;\n                return;\n            }\n\n            pyDoc.Parent = this.DockPanel;\n\n            _editorDocuments.Add(pyDoc);\n            this.DockPanel.AddContent(pyDoc);\n        }\n\n        public void OpenItemDocument(FileInfo file)\n        {\n            var itemDoc = new DockItemDocument(_project, file.Name, Icons.document_16xLG, file)\n            {\n                Tag = file\n            };\n\n\n            var existingDoc = this.FindOpenDocument(file);\n            if (existingDoc != null)\n            {\n                this.DockPanel.ActiveContent = existingDoc;\n                return;\n            }\n\n            itemDoc.Closed += ItemDoc_Closed;\n\n            itemDoc.Parent = this.DockPanel;\n\n            _editorDocuments.Add(itemDoc);\n            this.DockPanel.AddContent(itemDoc);\n        }\n\n        private void ItemDoc_Closed(object sender, EventArgs e)\n        {\n            var file = (sender as DockDialogueDocument).ContentFile;\n            _project.UnloadItem(file.FullName);\n\n            _dockProject.RefreshItemScripts(file);\n        }\n\n        public void OpenAnimationDocument(FileInfo file)\n        {\n            var animDoc = new DockAnimationEditor(_project, file.Name, Icons.document_16xLG, file)\n            {\n                Tag = file\n            };\n\n\n            var existingDoc = this.FindOpenDocument(file);\n            if (existingDoc != null)\n            {\n                this.DockPanel.ActiveContent = existingDoc;\n                return;\n            }\n\n            animDoc.Parent = this.DockPanel;\n\n            _editorDocuments.Add(animDoc);\n            this.DockPanel.AddContent(animDoc);\n        }\n\n        private void CloseDocument(FileInfo file)\n        {\n\n            foreach (var iDoc in _editorDocuments)\n            {\n                if (iDoc.Tag == file)\n                {\n                    _editorDocuments.Remove(iDoc);\n                    iDoc.Close();\n                    DockPanel.RemoveContent(iDoc);\n                    return;\n                }\n            }\n        }\n\n        private SavableDocument FindOpenDocument(FileInfo file)\n        {\n            foreach (var doc in _editorDocuments)\n            {\n                if (doc.Tag == file)\n                {\n                    return doc;\n                }\n            }\n\n            return default(SavableDocument);\n        }\n\n        private void OpenDialogueDocument(FileInfo file)\n        {\n            var dialogueDoc = new DockDialogueDocument(_project, file.Name, Icons.document_16xLG, file)\n            {\n                Tag = file\n            };\n\n\n            var existingDoc = this.FindOpenDocument(file);\n            if (existingDoc != null)\n            {\n                this.DockPanel.ActiveContent = existingDoc;\n                return;\n            }\n\n            dialogueDoc.Closed += DialogueDoc_Closed;\n\n            _editorDocuments.Add(dialogueDoc);\n            this.DockPanel.AddContent(dialogueDoc);\n        }\n\n        private void DialogueDoc_Closed(object sender, EventArgs e)\n        {\n            var file = (sender as DockDialogueDocument).ContentFile;\n            _project.UnloadDialogue(file.FullName);\n\n            _dockProject.RefreshDialogueScripts(file);\n        }\n\n        private void OpenSpellDocument(FileInfo file)\n        {\n            var spellDoc = new DockSpellDocument(_project, file.Name, Icons.document_16xLG, file)\n            {\n                Tag = file\n            };\n\n\n            var existingDoc = this.FindOpenDocument(file);\n            if (existingDoc != null)\n            {\n                this.DockPanel.ActiveContent = existingDoc;\n                return;\n            }\n\n            spellDoc.Closed += SpellDoc_Closed;\n\n            _editorDocuments.Add(spellDoc);\n            this.DockPanel.AddContent(spellDoc);\n        }\n\n        private void SpellDoc_Closed(object sender, EventArgs e)\n        {\n            var file = (sender as DockSpellDocument).ContentFile;\n            _project.UnloadSpell(file.FullName);\n\n            _dockProject.RefreshSpellScripts(file);\n        }\n\n        private void OpenMapDocument(FileInfo file)\n        {\n            var mapDoc = new DockMapDocument(file.Name, Icons.document_16xLG, file, _project, _dockTilesetTools, _dockLayers, _dockMapObject, _dockMapAttributes)\n            {\n                Tag = file\n            };\n\n\n            var existingDoc = this.FindOpenDocument(file);\n            if (existingDoc != null)\n            {\n                this.DockPanel.ActiveContent = existingDoc;\n                return;\n            }\n\n            mapDoc.Enter += MapDoc_Enter;\n            mapDoc.VisibleChanged += MapDoc_VisibleChanged;\n            mapDoc.Closed += MapDoc_Closed;\n            mapDoc.Parent = this.DockPanel;\n\n            _editorDocuments.Add(mapDoc);\n            this.DockPanel.AddContent(mapDoc);\n        }\n\n        private void MapDoc_VisibleChanged(object sender, EventArgs e)\n        {\n            if ((sender as DockMapDocument).Visible)\n            {\n                _dockTilesetTools.DockGroup?.Show();\n                _dockTilesetTools.DockRegion?.Show();\n            }\n            else\n            {\n                _dockTilesetTools.DockGroup?.Hide();\n                _dockTilesetTools.DockRegion?.Hide();\n            }\n        }\n\n        private void MapDoc_Closed(object sender, EventArgs e)\n        {\n            var mapFile = (sender as DockMapDocument).ContentFile;\n            _project.UnloadMap(mapFile.FullName);\n\n            _dockTilesetTools.DockGroup.Hide();\n            _dockTilesetTools.DockRegion.Hide();\n\n            _dockProject.RefreshMapScripts(mapFile);\n        }\n\n        public void OpenNPCDocument(FileInfo file)\n        {\n            var npcDoc = new DockNPCEditor(_project, file.Name, Icons.document_16xLG, file)\n            {\n                Tag = file\n            };\n\n\n            var existingDoc = this.FindOpenDocument(file);\n            if (existingDoc != null)\n            {\n                this.DockPanel.ActiveContent = existingDoc;\n                return;\n            }\n\n            npcDoc.Closed += NpcDoc_Closed;\n\n            _editorDocuments.Add(npcDoc);\n            npcDoc.Size = new Size(npcDoc.Width, npcDoc.Height);\n            this.DockPanel.AddContent(npcDoc);\n\n            npcDoc.Initalize();\n        }\n\n        private void NpcDoc_Closed(object sender, EventArgs e)\n        {\n            var npcFile = (sender as DockNPCEditor).ContentFile;\n            _project.UnloadNPC(npcFile.FullName);\n\n            _dockProject.RefreshNPCScripts(npcFile);\n        }\n\n        private void MapDoc_Enter(object sender, EventArgs e)\n        {\n            _dockTilesetTools.DockGroup?.Show();\n            _dockTilesetTools.DockRegion.Show();\n\n            _dockProperties.SetSubject(((DockMapDocument)sender).Map);\n            _dockTilesetTools.SetMapSubject(((DockMapDocument)sender).Map);\n            _dockLayers.SetMapSubject(((DockMapDocument)sender).Map);\n            _dockMapAttributes.SetMapSubject(((DockMapDocument)sender).Map);\n        }\n\n        private void OpenFile(FileInfo file)\n        {\n            if (file.Extension == EngineConstants.SCRIPT_FILE_EXT)\n            {\n                this.OpenPythonDocument(file);\n            }\n            else if (file.Extension == EngineConstants.MAP_FILE_EXT)\n            {\n                this.OpenMapDocument(file);\n            }\n            else if (file.Extension == EngineConstants.ITEM_FILE_EXT)\n            {\n                this.OpenItemDocument(file);\n            }\n            else if (file.Extension == EngineConstants.ANIM_FILE_EXT)\n            {\n                this.OpenAnimationDocument(file);\n            }\n            else if (file.Extension == EngineConstants.NPC_FILE_EXT)\n            {\n                this.OpenNPCDocument(file);\n            }\n            else if (file.Extension == EngineConstants.DIALOGUE_FILE_EXT)\n            {\n                this.OpenDialogueDocument(file);\n            }\n            else if (file.Extension == EngineConstants.SPELL_FILE_EXT)\n            {\n                this.OpenSpellDocument(file);\n            }\n        }\n\n        private void _dockProject_File_Created(object sender, FileEventArgs e)\n        {\n            this.OpenFile(e.File);\n        }\n\n        private void _dockProject_File_Selected(object sender, FileEventArgs e)\n        {\n            this.OpenFile(e.File);\n        }\n\n        #endregion Constructor Region\n\n        #region Method Region\n\n        private void HookEvents()\n        {\n            FormClosing += MainForm_FormClosing;\n\n            DockPanel.ContentAdded += DockPanel_ContentAdded;\n            DockPanel.ContentRemoved += DockPanel_ContentRemoved;\n\n            mnuClose.Click += Close_Click;\n\n            mnuProject.Click += Project_Click;\n        }\n\n        private void ToggleToolWindow(DarkToolWindow toolWindow)\n        {\n            if (toolWindow.DockPanel == null)\n                DockPanel.AddContent(toolWindow);\n            else\n                DockPanel.RemoveContent(toolWindow);\n        }\n\n        private void BuildWindowMenu()\n        {\n            mnuProject.Checked = DockPanel.ContainsContent(_dockProject);\n        }\n\n        #endregion Method Region\n\n        #region Event Handler Region\n\n        private void MainForm_FormClosing(object sender, FormClosingEventArgs e)\n        {\n            SerializeDockPanel(\"dockpanel.config\");\n        }\n\n        private void DockPanel_ContentAdded(object sender, DockContentEventArgs e)\n        {\n        }\n\n        private void DockPanel_ContentRemoved(object sender, DockContentEventArgs e)\n        {\n            if (e.Content is SavableDocument)\n            {\n                _editorDocuments.Remove((SavableDocument)e.Content);\n            }\n        }\n\n        private void Close_Click(object sender, EventArgs e)\n        {\n            Close();\n        }\n\n        private void Project_Click(object sender, EventArgs e)\n        {\n            ToggleToolWindow(_dockProject);\n        }\n\n        #endregion Event Handler Region\n\n        #region Serialization Region\n\n        private void SerializeDockPanel(string path)\n        {\n            var state = DockPanel.GetDockPanelState();\n            SerializerHelper.Serialize(state, path);\n        }\n\n        #endregion Serialization Region\n\n        private void toolStripMenuItem1_Click(object sender, EventArgs e)\n        {\n            var fileBrowserDialog = new OpenFileDialog();\n            fileBrowserDialog.Filter = @\"Project Files (*.lproj)|*.lproj\";\n            fileBrowserDialog.DefaultExt = \".lproj\";\n            fileBrowserDialog.AddExtension = true;\n\n            if (fileBrowserDialog.ShowDialog() == DialogResult.OK)\n            {\n                _project = Project.Load(fileBrowserDialog.FileName);\n\n                Properties.Settings.Default[\"LastProjectPath\"] = fileBrowserDialog.FileName;\n                Properties.Settings.Default.Save();\n\n                _dockTilesetTools.SetProject(_project);\n\n                this.PopulateProjectTree();\n            }\n        }\n\n        private void PopulateProjectTree()\n        {\n            _dockProject.InitalizeFromProject(_project);\n        }\n\n        private void saveToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            foreach (var doc in this.DockPanel.Controls)\n            {\n                if (doc is SavableDocument)\n                    ((SavableDocument)doc).Save();\n            }\n        }\n\n        private void mostRecentToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            string path = Properties.Settings.Default[\"LastProjectPath\"].ToString();\n            if (File.Exists(path))\n            {\n                _project = Project.Load(path);\n\n                _dockTilesetTools.SetProject(_project);\n\n                this.PopulateProjectTree();\n            }\n        }\n\n        private void mnuNewFile_Click(object sender, EventArgs e)\n        {\n            var createProjectDialog = new CreateProjectDialog();\n\n            if (createProjectDialog.ShowDialog() == DialogResult.OK)\n            {\n\n                if (string.IsNullOrEmpty(createProjectDialog.ClientDataPath) || string.IsNullOrEmpty(createProjectDialog.ServerDataPath))\n                {\n                    DarkMessageBox.ShowError(\"At least one project directory path is missing!\", \"Error Creating Project!\", DarkDialogButton.Ok);\n                    return;\n                }\n\n                string clientDataPath = Path.GetFullPath(createProjectDialog.ClientDataPath);\n                string serverDataPath = Path.GetFullPath(createProjectDialog.ServerDataPath);\n\n\n                if (Directory.Exists(clientDataPath) && Directory.Exists(serverDataPath))\n                {\n                    var fileBrowserDialog = new SaveFileDialog();\n                    fileBrowserDialog.Filter = @\"Project Files (*.lproj)|*.lproj\";\n                    fileBrowserDialog.DefaultExt = \".lproj\";\n                    fileBrowserDialog.AddExtension = true;\n\n                    if (fileBrowserDialog.ShowDialog() == DialogResult.OK)\n                    {\n                        _project = Project.Create(fileBrowserDialog.FileName, serverDataPath, clientDataPath);\n\n                        _dockTilesetTools.SetProject(_project);\n\n                        this.PopulateProjectTree();\n                    }\n                }\n                else\n                {\n                    DarkMessageBox.ShowError(\"Invalid project directories specified!\", \"Error Creating Project!\", DarkDialogButton.Ok);\n                    return;\n                }\n            }\n        }\n\n        private void SuiteForm_Paint(object sender, PaintEventArgs e)\n        {\n            this.lblMemUsage.Text = $\"Memory: {((Process.GetCurrentProcess().PrivateMemorySize64 / 1024) / 1024)} MB\";\n        }\n    }\n}\n'Lunar-Engine/src/Lunar.Editor/Program.cs'\n:﻿using System;\nusing System.Windows.Forms;\nusing Lunar.Editor;\n\nnamespace Example\n{\n    static class Program\n    {\n        [STAThread]\n        static void Main()\n        {\n            Application.EnableVisualStyles();\n            Application.SetCompatibleTextRenderingDefault(false);\n            Application.Run(new SuiteForm());\n        }\n    }\n}\n\n'Lunar-Engine/src/Lunar.Editor/Controls/View.cs'\n:﻿using System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Threading;\nusing System.Windows.Forms;\nusing Microsoft.Xna.Framework;\nusing Microsoft.Xna.Framework.Content;\nusing Microsoft.Xna.Framework.Graphics;\n\nnamespace Lunar.Editor.Controls\n{\n    public partial class View : UserControl\n    {\n        private SwapChainRenderTarget _chain;\n        private PresentationParameters _presentationParams;\n        private GraphicsDevice _graphicsDevice;\n        private SpriteBatch _spriteBatch;\n\n        private GameTime _gameTime;\n        private Stopwatch _timer;\n        private TimeSpan _elapsed;\n        private bool _active;\n\n        public GraphicsDevice GraphicsDevice => _graphicsDevice;\n        public SpriteBatch SpriteBatch => _spriteBatch;\n        public bool SuspendOnFormInactive { get; set; }\n        public GameTime GameTime => _gameTime;\n\n        public View()\n        {\n            InitializeComponent();\n\n            _timer = Stopwatch.StartNew();\n            _elapsed = _timer.Elapsed;\n            _active = true;\n\n            this.Resize += View_Resize;\n\n            Application.Idle += delegate\n            {\n                this.GameLoop();\n\n                this.ParentForm?.Invalidate();\n            };\n\n            this.Load += View_Load;\n        }\n\n        private void View_Resize(object sender, EventArgs e)\n        {\n            if (_presentationParams == null)\n                return;\n\n            _presentationParams.IsFullScreen = false;\n            _presentationParams.BackBufferWidth = this.Width;\n            _presentationParams.BackBufferHeight = this.Height;\n            _presentationParams.RenderTargetUsage = RenderTargetUsage.DiscardContents;\n            _presentationParams.PresentationInterval = PresentInterval.Immediate;\n            this.CreateSwapChain();\n        }\n\n        private void View_Load(object sender, EventArgs e)\n        {\n            this.InitMonogame();\n            this.CreateSwapChain();\n        }\n\n        private void InitMonogame()\n        {\n            try\n            {\n\n                _presentationParams = new PresentationParameters();\n                _presentationParams.IsFullScreen = false;\n                _presentationParams.BackBufferWidth = this.Width;\n                _presentationParams.BackBufferHeight = this.Height;\n                _presentationParams.RenderTargetUsage = RenderTargetUsage.DiscardContents;\n                _presentationParams.PresentationInterval = PresentInterval.Immediate;\n\n\n                _graphicsDevice = new GraphicsDevice(GraphicsAdapter.DefaultAdapter, GraphicsProfile.HiDef,\n                    _presentationParams);\n\n\n                _spriteBatch = new SpriteBatch(_graphicsDevice);\n\n                this.OnInitalize?.Invoke(this);\n            }\n            catch (Exception ex)\n            {\n\n                MessageBox.Show(\"Failed to initialize MonoGame. Exception Info: \" + ex + \"\\nClosing Now\");\n                Application.Exit();\n            }\n        }\n\n        private void CreateSwapChain()\n        {\n            if (_chain != null)\n            {\n                _chain.Dispose();\n            }\n            if (_graphicsDevice != null)\n            {\n                if (this.Width > 0 && this.Height > 0)\n                {\n                    _chain = new SwapChainRenderTarget(_graphicsDevice,\n                        this.Handle,\n                        this.Width, this.Height, false, SurfaceFormat.Color,\n                            DepthFormat.Depth24, 0, RenderTargetUsage.DiscardContents, PresentInterval.Immediate);\n                }\n            }\n        }\n\n        private void GameLoop()\n        {\n            if (SuspendOnFormInactive && !_active)\n            {\n                return;\n            }\n\n            _gameTime = new GameTime(_timer.Elapsed, _timer.Elapsed - _elapsed);\n            _elapsed = _timer.Elapsed;\n\n            this.OnUpdate?.Invoke(this);\n\n            if (this.Visible)\n            {\n                this.Draw();\n            }\n        }\n\n        private void Draw()\n        {\n            if (_graphicsDevice != null && _chain != null && this.ParentForm?.WindowState != FormWindowState.Minimized)\n            {\n                _graphicsDevice.SetRenderTarget(_chain);\n                _graphicsDevice.Clear(Color.Black);\n\n                _spriteBatch.Begin();\n\n                this.OnDraw?.Invoke(this);\n\n                _spriteBatch.End();\n\n                _chain.Present();\n                _graphicsDevice.SetRenderTarget(null);\n            }\n        }\n\n        public Texture2D LoadTexture2D(string filePath)\n        {\n            Texture2D file;\n            RenderTarget2D result;\n\n            using (var titleStream = new FileStream(filePath, FileMode.Open))\n            {\n                file = Texture2D.FromStream(this.GraphicsDevice, titleStream);\n            }\n\n\n            result = new RenderTarget2D(this.GraphicsDevice, file.Width, file.Height);\n\n            this.GraphicsDevice.SetRenderTarget(result);\n            this.GraphicsDevice.Clear(Color.Black);\n\n\n            var blendColor = new BlendState\n            {\n                ColorWriteChannels = ColorWriteChannels.Red | ColorWriteChannels.Green | ColorWriteChannels.Blue,\n                AlphaDestinationBlend = Blend.Zero,\n                ColorDestinationBlend = Blend.Zero,\n                AlphaSourceBlend = Blend.SourceAlpha,\n                ColorSourceBlend = Blend.SourceAlpha\n            };\n\n            var spriteBatch = new SpriteBatch(this.GraphicsDevice);\n            spriteBatch.Begin(SpriteSortMode.Immediate, blendColor);\n            spriteBatch.Draw(file, file.Bounds, Color.White);\n            spriteBatch.End();\n\n\n            var blendAlpha = new BlendState\n            {\n                ColorWriteChannels = ColorWriteChannels.Alpha,\n                AlphaDestinationBlend = Blend.Zero,\n                ColorDestinationBlend = Blend.Zero,\n                AlphaSourceBlend = Blend.One,\n                ColorSourceBlend = Blend.One\n            };\n\n            spriteBatch.Begin(SpriteSortMode.Immediate, blendAlpha);\n            spriteBatch.Draw(file, file.Bounds, Color.White);\n            spriteBatch.End();\n\n\n            this.GraphicsDevice.SetRenderTarget(null);\n\n            return result;\n        }\n\n        public Action<View> OnDraw { get; set; }\n        public Action<View> OnUpdate { get; set; }\n        public Action<View> OnInitalize { get; set; }\n    }\n}",
        "gt": [
            "'Lunar-Engine/src/Lunar.Editor/Controls/View.cs'",
            "'Lunar-Engine/src/Lunar.Editor/SuiteForm.cs'",
            "'Lunar-Engine/src/Lunar.Editor/Program.cs'"
        ]
    },
    {
        "files": [
            "'couchbase-net-client/src/Couchbase/Management/Analytics/DropAnalyticsIndexOptions.cs'",
            "'couchbase-net-client/src/Couchbase/Stellar/StellarCluster.cs'",
            "'couchbase-net-client/src/Couchbase/Analytics/AnalyticsIngester.cs'"
        ],
        "content": "'couchbase-net-client/src/Couchbase/Management/Analytics/DropAnalyticsIndexOptions.cs'\n:using System;\nusing System.Threading;\nusing Couchbase.Analytics;\n\nnamespace Couchbase.Management.Analytics\n{\n    public class DropAnalyticsIndexOptions\n    {\n        internal bool IgnoreIfNotExistsValue { get; set; }\n        internal string DataverseNameValue { get; set; }\n\n        public DropAnalyticsIndexOptions IgnoreIfNotExists(bool ignoreIfNotExists)\n        {\n            IgnoreIfNotExistsValue = ignoreIfNotExists;\n            return this;\n        }\n\n        public DropAnalyticsIndexOptions DataverseName(string dataverseName)\n        {\n            DataverseNameValue = dataverseName;\n            return this;\n        }\n\n        internal CancellationToken TokenValue { get; set; }\n\n        public  DropAnalyticsIndexOptions CancellationToken(CancellationToken token)\n        {\n            TokenValue = token;\n            return this;\n        }\n\n        internal TimeSpan TimeoutValue { get; set; }\n\n        public  DropAnalyticsIndexOptions Timeout(TimeSpan timeout)\n        {\n            TimeoutValue = timeout;\n            return this;\n        }\n\n        internal AnalyticsOptions CreateAnalyticsOptions()\n        {\n            return new AnalyticsOptions()\n                .CancellationToken(TokenValue)\n                .Timeout(TimeoutValue);\n        }\n    }\n}\n\n\n\n\n'couchbase-net-client/src/Couchbase/Stellar/StellarCluster.cs'\n:#if NETCOREAPP3_1_OR_GREATER\nusing System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Net.Http;\nusing System.Net.Security;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Couchbase.Analytics;\nusing Couchbase.Core.Bootstrapping;\nusing Couchbase.Core.Diagnostics.Tracing;\nusing Couchbase.Core.Exceptions;\nusing Couchbase.Core.IO.Authentication.X509;\nusing Couchbase.Core.IO.Serializers;\nusing Couchbase.Core.Retry;\nusing Couchbase.Diagnostics;\nusing Couchbase.Integrated.Transactions;\nusing Couchbase.Management.Analytics;\nusing Couchbase.Management.Buckets;\nusing Couchbase.Management.Eventing;\nusing Couchbase.Management.Query;\nusing Couchbase.Management.Search;\nusing Couchbase.Management.Users;\nusing Couchbase.Protostellar.Query.V1;\nusing Couchbase.Query;\nusing Couchbase.Search;\nusing Couchbase.Stellar.Analytics;\nusing Couchbase.Stellar.Core;\nusing Couchbase.Stellar.Core.Retry;\nusing Couchbase.Stellar.Management.Buckets;\nusing Couchbase.Stellar.Management.Query;\nusing Couchbase.Stellar.Management.Search;\nusing Couchbase.Stellar.Query;\nusing Couchbase.Stellar.Search;\nusing Couchbase.Stellar.Util;\nusing Couchbase.Utils;\nusing Google.Protobuf.WellKnownTypes;\nusing Grpc.Core;\nusing Grpc.Net.Client;\n\nnamespace Couchbase.Stellar;\n\n#nullable enable\n\ninternal class StellarCluster : ICluster, IBootstrappable, IClusterExtended\n{\n    private readonly ClusterOptions _clusterOptions;\n    private readonly List<Exception> _deferredExceptions = new();\n    private readonly IBucketManager _bucketManager;\n    private readonly ISearchIndexManager _searchIndexManager;\n    private readonly IQueryIndexManager _queryIndexManager;\n    private readonly IAnalyticsClient _analyticsClient;\n    private readonly IStellarSearchClient _searchClient;\n    private readonly IQueryClient _queryClient;\n    private readonly Metadata _metaData;\n    private readonly ConcurrentDictionary<string, IBucket> _buckets = new();\n    private volatile bool _disposed;\n\n    private ClusterChannelCredentials ChannelCredentials { get; }\n\n    internal StellarCluster(IBucketManager bucketManager, ISearchIndexManager searchIndexManager,\n        IQueryIndexManager queryIndexManager, IQueryClient queryClient,\n        IAnalyticsClient analyticsClient, IStellarSearchClient searchClient,\n        Metadata metaData, ClusterChannelCredentials channelCredentials, IRequestTracer requestTracer, GrpcChannel grpcChannel,\n        ITypeSerializer typeSerializer, IRetryOrchestrator retryHandler, ClusterOptions clusterOptions)\n    {\n        _bucketManager = bucketManager;\n        _searchIndexManager = searchIndexManager;\n        _queryClient = queryClient;\n        _analyticsClient = analyticsClient;\n        _searchClient = searchClient;\n        _clusterOptions = clusterOptions;\n        _queryIndexManager = queryIndexManager;\n        _metaData = metaData;\n        ChannelCredentials = channelCredentials;\n        RequestTracer = requestTracer;\n        GrpcChannel = grpcChannel;\n        TypeSerializer = typeSerializer;\n        RetryHandler = retryHandler;\n    }\n\n    private StellarCluster(ClusterOptions clusterOptions)\n    {\n        _clusterOptions = clusterOptions;\n        RequestTracer = clusterOptions.TracingOptions.RequestTracer;\n        TypeSerializer = clusterOptions.Serializer ?? DefaultSerializer.Instance;\n        ChannelCredentials = new ClusterChannelCredentials(clusterOptions);\n        var socketsHandler = new SocketsHttpHandler();\n        var serverCertValidationCallback = clusterOptions.HttpCertificateCallbackValidation ??\n                                           clusterOptions.KvCertificateCallbackValidation;\n        var ignoreNameMismatch = clusterOptions.HttpIgnoreRemoteCertificateMismatch ||\n                                 clusterOptions.KvIgnoreRemoteCertificateNameMismatch;\n\n        if (serverCertValidationCallback is not null && ignoreNameMismatch)\n        {\n\n            var existingCallback = serverCertValidationCallback;\n            serverCertValidationCallback = (sender, certificate, chain, errors) =>\n            {\n                errors = CertificateFactory.WithoutNameMismatch(errors);\n                return existingCallback(sender, certificate, chain, errors);\n            };\n        }\n        else if (ignoreNameMismatch)\n        {\n            serverCertValidationCallback = (_, _, _, errors) =>\n            {\n                var sslPolicyErrors = CertificateFactory.WithoutNameMismatch(errors);\n                return sslPolicyErrors == SslPolicyErrors.None;\n            };\n        }\n\n        if (serverCertValidationCallback is not null)\n        {\n            socketsHandler.SslOptions = new SslClientAuthenticationOptions()\n            {\n                RemoteCertificateValidationCallback = serverCertValidationCallback\n            };\n        }\n\n        var grpcChannelOptions = new GrpcChannelOptions()\n        {\n            LoggerFactory = clusterOptions.Logging,\n            HttpHandler = socketsHandler,\n        };\n\n        GrpcChannel = GrpcChannel.ForAddress(_clusterOptions.ConnectionStringValue!.GetStellarBootstrapUri(), grpcChannelOptions);\n        RetryHandler = new StellarRetryHandler();\n\n        _bucketManager = new StellarBucketManager(this);\n        _searchIndexManager = new StellarSearchIndexManager(this);\n        _queryIndexManager = new StellarQueryIndexManager(this);\n        _queryClient = new StellarQueryClient(this, new QueryService.QueryServiceClient(GrpcChannel), TypeSerializer,\n            RetryHandler);\n        _metaData = new Metadata();\n        _analyticsClient = new StellarAnalyticsClient(this);\n        _searchClient = new StellarSearchClient(this);\n\n        if (ChannelCredentials.BasicAuthHeader != null)\n        {\n            _metaData.Add(\"Authorization\", ChannelCredentials.BasicAuthHeader);\n        }\n    }\n\n    public static async Task<ICluster> ConnectAsync(string connectionString, ClusterOptions? clusterOptions = null)\n    {\n        clusterOptions ??= new ClusterOptions();\n        var opts = clusterOptions.WithConnectionString(connectionString);\n        return await ConnectAsync(opts).ConfigureAwait(false);\n    }\n\n    public static async Task<ICluster> ConnectAsync(ClusterOptions clusterOptions)\n    {\n        var cluster = new StellarCluster(clusterOptions);\n        await cluster.ConnectGrpcAsync(clusterOptions.KvConnectTimeout).ConfigureAwait(false);\n        return cluster;\n    }\n\n    internal IRequestTracer RequestTracer { get; }\n\n    private void CheckIfDisposed()\n    {\n        if (_disposed)\n        {\n            ThrowHelper.ThrowObjectDisposedException(nameof(StellarCluster));\n        }\n    }\n\n    private async Task ConnectGrpcAsync(TimeSpan kvConnectTimeout)\n    {\n        CheckIfDisposed();\n\n        var stopwatch = new Stopwatch();\n        using var cts = new CancellationTokenSource(kvConnectTimeout);\n        try\n        {\n            _deferredExceptions.Clear();\n            stopwatch.Start();\n            await GrpcChannel.ConnectAsync(cts.Token).ConfigureAwait(false);\n        }\n        catch (OperationCanceledException e)\n        {\n            stopwatch.Stop();\n            if (cts.IsCancellationRequested)\n            {\n                var ex = new Couchbase.Core.Exceptions.TimeoutException(\n                    ExceptionUtil.GetMessage(ExceptionUtil.ConnectTimeoutExceptionMsg,\n                        _clusterOptions.ConnectionString, stopwatch.Elapsed.TotalSeconds, kvConnectTimeout),\n                    e);\n                _deferredExceptions.Add(ex);\n            }\n            else\n            {\n                _deferredExceptions.Add(new ConnectException(\n                    ExceptionUtil.GetMessage(ExceptionUtil.ConnectException, _clusterOptions.ConnectionString), e));\n            }\n        }\n        catch (Exception e)\n        {\n            stopwatch.Stop();\n            _deferredExceptions.Add(new ConnectException(\n                ExceptionUtil.GetMessage(ExceptionUtil.ConnectException, _clusterOptions.ConnectionString), e));\n        }\n        finally\n        {\n            stopwatch.Stop();\n        }\n    }\n    internal IRetryOrchestrator RetryHandler { get; }\n\n    internal GrpcChannel GrpcChannel { get; }\n\n    internal ITypeSerializer TypeSerializer { get; }\n\n    public IServiceProvider ClusterServices =>\n        throw ThrowHelper.ThrowFeatureNotAvailableException(\"Cluster Service Provider\", \"Protostellar\");\n\n    public IQueryIndexManager QueryIndexes\n    {\n        get\n        {\n            CheckIfDisposed();\n            return _queryIndexManager;\n        }\n    }\n\n    public IAnalyticsIndexManager AnalyticsIndexes =>\n        throw ThrowHelper.ThrowFeatureNotAvailableException(\"Analytics Index Management\", \"Protostellar\");\n\n    public ISearchIndexManager SearchIndexes\n    {\n        get\n        {\n            CheckIfDisposed();\n            return _searchIndexManager;\n        }\n    }\n\n    public IBucketManager Buckets\n    {\n        get\n        {\n            CheckIfDisposed();\n            return _bucketManager;\n        }\n    }\n\n    public IUserManager Users =>\n        throw ThrowHelper.ThrowFeatureNotAvailableException(\"User Management\", \"Protostellar\");\n\n    public IEventingFunctionManager EventingFunctions =>\n        throw ThrowHelper.ThrowFeatureNotAvailableException(\"Eventing Functions\", \"Protostellar\");\n\n    public Transactions Transactions =>\n        throw ThrowHelper.ThrowFeatureNotAvailableException(\"Transactions\", \"Protostellar\");\n\n    public async Task<IAnalyticsResult<T>> AnalyticsQueryAsync<T>(string statement, AnalyticsOptions? options = null)\n    {\n        CheckIfDisposed();\n        ThrowIfBootStrapFailed();\n\n        options ??= new AnalyticsOptions();\n        return await _analyticsClient.QueryAsync<T>(statement, options).ConfigureAwait(false);\n    }\n\n    public ValueTask<IBucket> BucketAsync(string name)\n    {\n        CheckIfDisposed();\n        return new ValueTask<IBucket>(_buckets.GetOrAdd(name, new StellarBucket(name, this)));\n    }\n\n    #region Diagnostics - Not Supported\n\n    public Task<IDiagnosticsReport> DiagnosticsAsync(DiagnosticsOptions? options = null) =>\n        throw ThrowHelper.ThrowFeatureNotAvailableException(\"Diagnostics\", \"Protostellar\");\n\n    public Task<IPingReport> PingAsync(PingOptions? options = null) =>\n        throw ThrowHelper.ThrowFeatureNotAvailableException(\"Ping\", \"Protostellar\");\n\n    #endregion\n\n    public void Dispose()\n    {\n        if (_disposed)\n        {\n            return;\n        }\n\n        _disposed = true;\n        foreach (var bucket in _buckets.Values)\n        {\n            bucket.Dispose();\n        }\n        GrpcChannel.Dispose();\n    }\n\n    public ValueTask DisposeAsync()\n    {\n        Dispose();\n        return ValueTask.CompletedTask;\n    }\n\n    public Task<IQueryResult<T>> QueryAsync<T>(string statement, QueryOptions? options = null)\n    {\n        CheckIfDisposed();\n        ThrowIfBootStrapFailed();\n\n        return _queryClient.QueryAsync<T>(statement, options!);\n    }\n\n    public async Task<ISearchResult> SearchQueryAsync(string indexName, ISearchQuery query, SearchOptions? options = null)\n    {\n        CheckIfDisposed();\n        ThrowIfBootStrapFailed();\n\n        return await _searchClient.QueryAsync(indexName, query, options).ConfigureAwait(false);\n    }\n\n    public Task WaitUntilReadyAsync(TimeSpan timeout, WaitUntilReadyOptions? options = null)=>\n        throw ThrowHelper.ThrowFeatureNotAvailableException(\"WaitUntilReady\", \"Protostellar\");\n\n    public CallOptions GrpcCallOptions() => new (headers: _metaData);\n\n    public CallOptions GrpcCallOptions(CancellationToken cancellationToken) => new (headers: _metaData, cancellationToken: cancellationToken);\n\n    public CallOptions GrpcCallOptions(TimeSpan? timeout, CancellationToken cancellationToken) =>\n        new (headers: _metaData, deadline: timeout.FromNow(), cancellationToken: cancellationToken);\n\n    private IRequestSpan TraceSpan(string attr, IRequestSpan? parentSpan) =>\n        this.RequestTracer.RequestSpan(attr, parentSpan);\n\n    #region Bootstrapping/start up error propagation\n\n    public Task BootStrapAsync() =>\n        throw ThrowHelper.ThrowFeatureNotAvailableException(\"BootStrap\", \"Protostellar\");\n\n    public bool IsBootstrapped => _deferredExceptions.Count == 0;\n\n    public List<Exception> DeferredExceptions => _deferredExceptions;\n\n\n\n\n\n    internal void ThrowIfBootStrapFailed()\n    {\n        if (!IsBootstrapped)\n        {\n            ThrowBootStrapFailed();\n        }\n    }\n\n\n\n\n\n\n\n\n    private void ThrowBootStrapFailed()\n    {\n        throw new AggregateException($\"Bootstrapping for the cluster as failed.\", DeferredExceptions);\n    }\n\n    #endregion\n\n\n    void IClusterExtended.RemoveBucket(string bucketName)\n    {\n        _buckets.TryRemove(bucketName, out _);\n    }\n\n\n    bool IClusterExtended.BucketExists(string bucketName)\n    {\n        return _buckets.TryGetValue(bucketName, out _);\n    }\n}\n#endif\n\n'couchbase-net-client/src/Couchbase/Analytics/AnalyticsIngester.cs'\n:using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Couchbase.KeyValue;\n\nnamespace Couchbase.Analytics\n{\n\n\n\n    public static class AnalyticsExtensions\n    {\n\n\n\n\n\n\n\n\n\n\n\n\n        public static Task<IEnumerable<IMutationResult>> IngestAsync<T>(this ICluster cluster, string statement, ICouchbaseCollection collection, Action<IngestOptions> configureOptions)\n        {\n            var options = new IngestOptions();\n            configureOptions(options);\n\n            return IngestAsync<T>(\n                cluster,\n                statement,\n                collection,\n                options\n            );\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n        public static async Task<IEnumerable<IMutationResult>> IngestAsync<T>(this ICluster cluster, string statement, ICouchbaseCollection collection, IngestOptions ingestOptions = null)\n        {\n\n            ingestOptions ??= new IngestOptions();\n\n            if (ingestOptions.TokenValue.IsCancellationRequested)\n            {\n                ingestOptions.TokenValue.ThrowIfCancellationRequested();\n            }\n\n\n            var result = await cluster.AnalyticsQueryAsync<T>(\n                statement,\n                options => options.CancellationToken(ingestOptions.TokenValue)\n            ).ConfigureAwait(false);\n\n\n            var results = new ConcurrentBag<Task<IMutationResult>>();\n            await foreach (var row in result.WithCancellation(ingestOptions.TokenValue).ConfigureAwait(false))\n            {\n                Task<IMutationResult> op;\n                switch (ingestOptions.IngestMethodValue)\n                {\n                    case IngestMethod.Insert:\n                        op = collection.InsertAsync(\n                            ingestOptions.IdGeneratorValue(row),\n                            row,\n                            options =>\n                            {\n                                options.Expiry(ingestOptions.ExpiryValue);\n                                options.Timeout(ingestOptions.TimeoutValue);\n                            });\n                        break;\n                    case IngestMethod.Upsert:\n                        op = collection.UpsertAsync(\n                            ingestOptions.IdGeneratorValue(row),\n                            row,\n                            options =>\n                            {\n                                options.Expiry(ingestOptions.ExpiryValue);\n                                options.Timeout(ingestOptions.TimeoutValue);\n                            });\n                        break;\n                    case IngestMethod.Replace:\n                        op = collection.ReplaceAsync(\n                            ingestOptions.IdGeneratorValue(row),\n                            row,\n                            options =>\n                            {\n                                options.Expiry(ingestOptions.ExpiryValue);\n                                options.Timeout(ingestOptions.TimeoutValue);\n                            });\n                        break;\n                    default:\n                        throw new ArgumentOutOfRangeException();\n                }\n\n                results.Add(op);\n            }\n\n            return await Task.WhenAll(results).ConfigureAwait(false);\n        }\n    }\n}\n\n\n\n",
        "gt": [
            "'couchbase-net-client/src/Couchbase/Analytics/AnalyticsIngester.cs'",
            "'couchbase-net-client/src/Couchbase/Management/Analytics/DropAnalyticsIndexOptions.cs'",
            "'couchbase-net-client/src/Couchbase/Stellar/StellarCluster.cs'"
        ]
    },
    {
        "files": [
            "'ETCore/ETServer/Server/ET.Core/Module/DB/DBQuery2JsonTask.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Bindings/IChannelSource.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Operations/BulkDeleteOperationEmulator.cs'",
            "'ETCore/ETClient/Unity/Assets/ETFramework/Editor/BuildEditor/BuildEditor.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongoDBDriver/MongoDB.Driver/ChangeStreamHelper.cs'"
        ],
        "content": "'ETCore/ETServer/Server/ET.Core/Module/DB/DBQuery2JsonTask.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing MongoDB.Driver;\n\nnamespace ETModel\n{\n\t[ObjectSystem]\n\tpublic class DBQuery2JsonTaskAwakeSystem : AwakeSystem<DBQuery2JsonTask, string, string, TaskCompletionSource<List<Component>>>\n\t{\n\t\tpublic override void Awake(DBQuery2JsonTask self, string collectionName, string json, TaskCompletionSource<List<Component>> tcs)\n\t\t{\n\t\t\tself.CollectionName = collectionName;\n\t\t\tself.Json = json;\n\t\t\tself.Tcs = tcs;\n\t\t}\n\t}\n\n\tpublic sealed class DBQuery2JsonTask : DBTask\n\t{\n\t\tpublic string CollectionName { get; set; }\n\n\t\tpublic string Json { get; set; }\n\n\t\tpublic TaskCompletionSource<List<Component>> Tcs { get; set; }\n\n\t\tpublic override async Task Run()\n\t\t{\n\t\t\tDBComponent dbComponent = Game.Scene.GetComponent<DBComponent>();\n\t\t\ttry\n\t\t\t{\n\n\t\t\t\tFilterDefinition<Component> filterDefinition = new JsonFilterDefinition<Component>(this.Json);\n\t\t\t\tIAsyncCursor<Component> cursor = await dbComponent.Get2Collection(this.CollectionName).FindAsync(filterDefinition);\n\t\t\t\tList<Component> components = await cursor.ToListAsync();\n\t\t\t\tthis.Tcs.SetResult(components);\n\t\t\t}\n\t\t\tcatch (Exception e)\n\t\t\t{\n\t\t\t\tthis.Tcs.SetException(new Exception($\"查询数据库异常! {CollectionName} {this.Json}\", e));\n\t\t\t}\n\t\t}\n\t}\n}\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Bindings/IChannelSource.cs'\n:\n\nusing System;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing MongoDB.Driver.Core.Connections;\nusing MongoDB.Driver.Core.Servers;\n\nnamespace MongoDB.Driver.Core.Bindings\n{\n\n\n\n    public interface IChannelSource : IDisposable\n    {\n\n\n\n\n\n\n        IServer Server{ get; }\n\n\n\n\n\n\n\n        ServerDescription ServerDescription { get; }\n\n\n\n\n\n\n\n        ICoreSessionHandle Session { get; }\n\n\n\n\n\n\n        IChannelHandle GetChannel(CancellationToken cancellationToken);\n\n\n\n\n\n\n        Task<IChannelHandle> GetChannelAsync(CancellationToken cancellationToken);\n    }\n\n\n\n\n    public interface IChannelSourceHandle : IChannelSource\n    {\n\n\n\n\n        IChannelSourceHandle Fork();\n    }\n}\n\n'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Operations/BulkDeleteOperationEmulator.cs'\n:﻿\n\nusing System;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing MongoDB.Driver.Core.Bindings;\nusing MongoDB.Driver.Core.WireProtocol.Messages.Encoders;\n\nnamespace MongoDB.Driver.Core.Operations\n{\n    internal class BulkDeleteOperationEmulator : BulkUnmixedWriteOperationEmulatorBase<DeleteRequest>\n    {\n\n        public BulkDeleteOperationEmulator(\n            CollectionNamespace collectionNamespace,\n            IEnumerable<DeleteRequest> requests,\n            MessageEncoderSettings messageEncoderSettings)\n            : base(collectionNamespace, requests, messageEncoderSettings)\n        {\n        }\n\n\n        protected override WriteConcernResult ExecuteProtocol(IChannelHandle channel, DeleteRequest request, CancellationToken cancellationToken)\n        {\n            if (request.Collation != null)\n            {\n                throw new NotSupportedException(\"OP_DELETE does not support collations.\");\n            }\n            var isMulti = request.Limit == 0;\n\n            return channel.Delete(\n               CollectionNamespace,\n               request.Filter,\n               isMulti,\n               MessageEncoderSettings,\n               WriteConcern,\n               cancellationToken);\n        }\n\n        protected override Task<WriteConcernResult> ExecuteProtocolAsync(IChannelHandle channel, DeleteRequest request, CancellationToken cancellationToken)\n        {\n            var isMulti = request.Limit == 0;\n            if (request.Collation != null)\n            {\n                throw new NotSupportedException(\"OP_DELETE does not support collations.\");\n            }\n\n            return channel.DeleteAsync(\n               CollectionNamespace,\n               request.Filter,\n               isMulti,\n               MessageEncoderSettings,\n               WriteConcern,\n               cancellationToken);\n        }\n    }\n}\n\n'ETCore/ETClient/Unity/Assets/ETFramework/Editor/BuildEditor/BuildEditor.cs'\n:﻿using System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing ETModel;\nusing UnityEditor;\nusing UnityEngine;\nusing Object = UnityEngine.Object;\nusing UnityEngine.SceneManagement;\nnamespace ETEditor\n{\n\tpublic class BundleInfo\n\t{\n\t\tpublic List<string> ParentPaths = new List<string>();\n\t}\n\n\tpublic enum PlatformType\n\t{\n\t\tNone,\n\t\tAndroid,\n\t\tIOS,\n\t\tPC,\n\t\tMacOS,\n\t\tWebGL\n\t}\n\n\tpublic enum BuildType\n\t{\n\t\tDevelopment,\n\t\tRelease,\n\t}\n\n\tpublic class BuildEditor : EditorWindow\n\t{\n\t\tprivate readonly Dictionary<string, BundleInfo> dictionary = new Dictionary<string, BundleInfo>();\n\n\t\tprivate PlatformType platformType;\n\t\tprivate bool isBuildExe;\n\t\tprivate bool isContainAB;\n\t\tprivate BuildType buildType;\n\t\tprivate BuildOptions buildOptions = BuildOptions.AllowDebugging | BuildOptions.Development;\n\t\tprivate BuildAssetBundleOptions buildAssetBundleOptions = BuildAssetBundleOptions.None;\n\n\t\t[MenuItem(\"Tools/打包工具\")]\n\t\tpublic static void ShowWindow()\n\t\t{\n\t\t\tGetWindow(typeof(BuildEditor));\n\t\t}\n\n\t\tprivate void OnGUI()\n\t\t{\n\t\t\tBuildHelper.exeName = EditorGUILayout.TextField(\"EXEName:\",SceneManager.GetActiveScene ().name);\n\t\t\tBuildHelper.sceneName = BuildHelper.exeName;\n\t\t\tthis.platformType = (PlatformType)EditorGUILayout.EnumPopup(platformType);\n\t\t\tthis.isBuildExe = EditorGUILayout.Toggle(\"是否打包EXE: \", this.isBuildExe);\n\t\t\tthis.isContainAB = EditorGUILayout.Toggle(\"是否同将资源打进EXE: \", this.isContainAB);\n\t\t\tthis.buildType = (BuildType)EditorGUILayout.EnumPopup(\"BuildType: \", this.buildType);\n\n\t\t\tswitch (buildType)\n\t\t\t{\n\t\t\t\tcase BuildType.Development:\n\t\t\t\t\tthis.buildOptions = BuildOptions.Development | BuildOptions.AutoRunPlayer | BuildOptions.ConnectWithProfiler | BuildOptions.AllowDebugging;\n\t\t\t\t\tbreak;\n\t\t\t\tcase BuildType.Release:\n\t\t\t\t\tthis.buildOptions = BuildOptions.None;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.buildAssetBundleOptions = (BuildAssetBundleOptions)EditorGUILayout.EnumFlagsField(\"BuildAssetBundleOptions(可多选): \", this.buildAssetBundleOptions);\n\n\t\t\tif (GUILayout.Button(\"开始打包\"))\n\t\t\t{\n\t\t\t\tif (this.platformType == PlatformType.None)\n\t\t\t\t{\n\t\t\t\t\tLog.Error(\"请选择打包平台!\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tBuildAssetBundles.BuildAllAssetBundles(this.platformType);\n\t\t\t\tBuildHelper.Build(this.platformType, this.buildAssetBundleOptions, this.buildOptions, this.isBuildExe, this.isContainAB);\n\t\t\t}\n\t\t}\n\n\t\tprivate void SetPackingTagAndAssetBundle()\n\t\t{\n\t\t\tClearPackingTagAndAssetBundle();\n\n\t\t\tSetIndependentBundleAndAtlas(\"Assets/Bundles/Independent\");\n\n\t\t\tSetBundleAndAtlasWithoutShare(\"Assets/Bundles/UI\");\n\n\t\t\tSetRootBundleOnly(\"Assets/Bundles/Unit\");\n\n\t\t\tAssetDatabase.SaveAssets();\n\t\t\tAssetDatabase.Refresh(ImportAssetOptions.ForceSynchronousImport | ImportAssetOptions.ForceUpdate);\n\t\t}\n\n\t\tprivate static void SetNoAtlas(string dir)\n\t\t{\n\t\t\tList<string> paths = EditorResHelper.GetPrefabsAndScenes(dir);\n\n\t\t\tforeach (string path in paths)\n\t\t\t{\n\t\t\t\tList<string> pathes = CollectDependencies(path);\n\n\t\t\t\tforeach (string pt in pathes)\n\t\t\t\t{\n\t\t\t\t\tif (pt == path)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tSetAtlas(pt, \"\", true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\tprivate static void SetBundles(string dir)\n\t\t{\n\t\t\tList<string> paths = EditorResHelper.GetPrefabsAndScenes(dir);\n\t\t\tforeach (string path in paths)\n\t\t\t{\n\t\t\t\tstring path1 = path.Replace('\\\\', '/');\n\t\t\t\tObject go = AssetDatabase.LoadAssetAtPath<Object>(path1);\n\n\t\t\t\tSetBundle(path1, go.name);\n\t\t\t}\n\t\t}\n\n\n\t\tprivate static void SetRootBundleOnly(string dir)\n\t\t{\n\t\t\tList<string> paths = EditorResHelper.GetPrefabsAndScenes(dir);\n\t\t\tforeach (string path in paths)\n\t\t\t{\n\t\t\t\tstring path1 = path.Replace('\\\\', '/');\n\t\t\t\tObject go = AssetDatabase.LoadAssetAtPath<Object>(path1);\n\n\t\t\t\tSetBundle(path1, go.name);\n\t\t\t}\n\t\t}\n\n\n\t\tprivate static void SetIndependentBundleAndAtlas(string dir)\n\t\t{\n\t\t\tList<string> paths = EditorResHelper.GetPrefabsAndScenes(dir);\n\t\t\tforeach (string path in paths)\n\t\t\t{\n\t\t\t\tstring path1 = path.Replace('\\\\', '/');\n\t\t\t\tObject go = AssetDatabase.LoadAssetAtPath<Object>(path1);\n\n\t\t\t\tAssetImporter importer = AssetImporter.GetAtPath(path1);\n\t\t\t\tif (importer == null || go == null)\n\t\t\t\t{\n\t\t\t\t\tLog.Error(\"error: \" + path1);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\timporter.assetBundleName = $\"{go.name}.unity3d\";\n\n\t\t\t\tList<string> pathes = CollectDependencies(path1);\n\n\t\t\t\tforeach (string pt in pathes)\n\t\t\t\t{\n\t\t\t\t\tif (pt == path1)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tSetBundleAndAtlas(pt, go.name, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate static void SetBundleAndAtlasWithoutShare(string dir)\n\t\t{\n\t\t\tList<string> paths = EditorResHelper.GetPrefabsAndScenes(dir);\n\t\t\tforeach (string path in paths)\n\t\t\t{\n\t\t\t\tstring path1 = path.Replace('\\\\', '/');\n\t\t\t\tObject go = AssetDatabase.LoadAssetAtPath<Object>(path1);\n\n\t\t\t\tSetBundle(path1, go.name);\n\n\n\n\n\n\n\n\n\n\n\n\t\t\t}\n\t\t}\n\n\t\tprivate static List<string> CollectDependencies(string o)\n\t\t{\n\t\t\tstring[] paths = AssetDatabase.GetDependencies(o);\n\n\n\t\t\treturn paths.ToList();\n\t\t}\n\n\n\t\tprivate void SetShareBundleAndAtlas(string dir)\n\t\t{\n\t\t\tthis.dictionary.Clear();\n\t\t\tList<string> paths = EditorResHelper.GetPrefabsAndScenes(dir);\n\n\t\t\tforeach (string path in paths)\n\t\t\t{\n\t\t\t\tstring path1 = path.Replace('\\\\', '/');\n\t\t\t\tObject go = AssetDatabase.LoadAssetAtPath<Object>(path1);\n\n\t\t\t\tSetBundle(path1, go.name);\n\n\t\t\t\tList<string> pathes = CollectDependencies(path1);\n\t\t\t\tforeach (string pt in pathes)\n\t\t\t\t{\n\t\t\t\t\tif (pt == path1)\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\n\t\t\t\t\tif (!this.dictionary.ContainsKey(pt))\n\t\t\t\t\t{\n\n\t\t\t\t\t\tif (GetBundleName(pt) != \"\")\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tLog.Info($\"{path1}----{pt}\");\n\t\t\t\t\t\tBundleInfo bundleInfo = new BundleInfo();\n\t\t\t\t\t\tbundleInfo.ParentPaths.Add(path1);\n\t\t\t\t\t\tthis.dictionary.Add(pt, bundleInfo);\n\n\t\t\t\t\t\tSetAtlas(pt, go.name);\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\n\t\t\t\t\tBundleInfo info = this.dictionary[pt];\n\t\t\t\t\tif (info.ParentPaths.Contains(path1))\n\t\t\t\t\t{\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tinfo.ParentPaths.Add(path1);\n\n\t\t\t\t\tDirectoryInfo dirInfo = new DirectoryInfo(dir);\n\t\t\t\t\tstring dirName = dirInfo.Name;\n\n\t\t\t\t\tSetBundleAndAtlas(pt, $\"{dirName}-share\", true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tprivate static void ClearPackingTagAndAssetBundle()\n\t\t{\n\n\n\n\n\n\n\t\t\tList<string> paths = EditorResHelper.GetAllResourcePath(\"Assets/Res\", true);\n\t\t\tforeach (string pt in paths)\n\t\t\t{\n\t\t\t\tSetBundleAndAtlas(pt, \"\", true);\n\t\t\t}\n\t\t}\n\n\t\tprivate static string GetBundleName(string path)\n\t\t{\n\t\t\tstring extension = Path.GetExtension(path);\n\t\t\tif (extension == \".cs\" || extension == \".dll\" || extension == \".js\")\n\t\t\t{\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\tif (path.Contains(\"Resources\"))\n\t\t\t{\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\tAssetImporter importer = AssetImporter.GetAtPath(path);\n\t\t\tif (importer == null)\n\t\t\t{\n\t\t\t\treturn \"\";\n\t\t\t}\n\n\t\t\treturn importer.assetBundleName;\n\t\t}\n\n\t\tprivate static void SetBundle(string path, string name, bool overwrite = false)\n\t\t{\n\t\t\tstring extension = Path.GetExtension(path);\n\t\t\tif (extension == \".cs\" || extension == \".dll\" || extension == \".js\")\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (path.Contains(\"Resources\"))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tAssetImporter importer = AssetImporter.GetAtPath(path);\n\t\t\tif (importer == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (importer.assetBundleName != \"\" && overwrite == false)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\n\t\t\tstring bundleName = \"\";\n\t\t\tif (name != \"\")\n\t\t\t{\n\t\t\t\tbundleName = $\"{name}.unity3d\";\n\t\t\t}\n\n\t\t\timporter.assetBundleName = bundleName;\n\t\t}\n\n\t\tprivate static void SetAtlas(string path, string name, bool overwrite = false)\n\t\t{\n\t\t\tstring extension = Path.GetExtension(path);\n\t\t\tif (extension == \".cs\" || extension == \".dll\" || extension == \".js\")\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (path.Contains(\"Resources\"))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tTextureImporter textureImporter = AssetImporter.GetAtPath(path) as TextureImporter;\n\t\t\tif (textureImporter == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (textureImporter.spritePackingTag != \"\" && overwrite == false)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttextureImporter.spritePackingTag = name;\n\t\t\tAssetDatabase.ImportAsset(path, ImportAssetOptions.ForceSynchronousImport | ImportAssetOptions.ForceUpdate);\n\t\t}\n\n\t\tprivate static void SetBundleAndAtlas(string path, string name, bool overwrite = false)\n\t\t{\n\t\t\tstring extension = Path.GetExtension(path);\n\t\t\tif (extension == \".cs\" || extension == \".dll\" || extension == \".js\" || extension == \".mat\")\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (path.Contains(\"Resources\"))\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tAssetImporter importer = AssetImporter.GetAtPath(path);\n\t\t\tif (importer == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (importer.assetBundleName == \"\" || overwrite)\n\t\t\t{\n\t\t\t\tstring bundleName = \"\";\n\t\t\t\tif (name != \"\")\n\t\t\t\t{\n\t\t\t\t\tbundleName = $\"{name}.unity3d\";\n\t\t\t\t}\n\n\t\t\t\timporter.assetBundleName = bundleName;\n\t\t\t}\n\n\t\t\tTextureImporter textureImporter = importer as TextureImporter;\n\t\t\tif (textureImporter == null)\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (textureImporter.spritePackingTag == \"\" || overwrite)\n\t\t\t{\n\t\t\t\ttextureImporter.spritePackingTag = name;\n\t\t\t\tAssetDatabase.ImportAsset(path, ImportAssetOptions.ForceSynchronousImport | ImportAssetOptions.ForceUpdate);\n\t\t\t}\n\t\t}\n\t}\n}\n\n'ETCore/ETServer/Server/ThirdParty/MongoDBDriver/MongoDB.Driver/ChangeStreamHelper.cs'\n:﻿\n\nusing MongoDB.Bson;\nusing MongoDB.Bson.Serialization;\nusing MongoDB.Bson.Serialization.Serializers;\nusing MongoDB.Driver.Core.Operations;\nusing MongoDB.Driver.Core.WireProtocol.Messages.Encoders;\n\nnamespace MongoDB.Driver\n{\n    internal static class ChangeStreamHelper\n    {\n\n        public static ChangeStreamOperation<TResult> CreateChangeStreamOperation<TResult>(\n            PipelineDefinition<ChangeStreamDocument<BsonDocument>, TResult> pipeline,\n            ChangeStreamOptions options,\n            ReadConcern readConcern,\n            MessageEncoderSettings messageEncoderSettings)\n        {\n            var renderedPipeline = RenderPipeline(pipeline, BsonDocumentSerializer.Instance);\n\n            var operation = new ChangeStreamOperation<TResult>(\n                renderedPipeline.Documents,\n                renderedPipeline.OutputSerializer,\n                messageEncoderSettings);\n            SetOperationOptions(operation, options, readConcern);\n\n            return operation;\n        }\n\n        public static ChangeStreamOperation<TResult> CreateChangeStreamOperation<TResult>(\n            IMongoDatabase database,\n            PipelineDefinition<ChangeStreamDocument<BsonDocument>, TResult> pipeline,\n            ChangeStreamOptions options,\n            ReadConcern readConcern,\n            MessageEncoderSettings messageEncoderSettings)\n        {\n            var renderedPipeline = RenderPipeline(pipeline, BsonDocumentSerializer.Instance);\n\n            var operation = new ChangeStreamOperation<TResult>(\n                database.DatabaseNamespace,\n                renderedPipeline.Documents,\n                renderedPipeline.OutputSerializer,\n                messageEncoderSettings);\n            SetOperationOptions(operation, options, readConcern);\n\n            return operation;\n        }\n\n        public static ChangeStreamOperation<TResult> CreateChangeStreamOperation<TResult, TDocument>(\n            IMongoCollection<TDocument> collection,\n            PipelineDefinition<ChangeStreamDocument<TDocument>, TResult> pipeline,\n            IBsonSerializer<TDocument> documentSerializer,\n            ChangeStreamOptions options,\n            ReadConcern readConcern,\n            MessageEncoderSettings messageEncoderSettings)\n        {\n            var renderedPipeline = RenderPipeline(pipeline, documentSerializer);\n\n            var operation = new ChangeStreamOperation<TResult>(\n                collection.CollectionNamespace,\n                renderedPipeline.Documents,\n                renderedPipeline.OutputSerializer,\n                messageEncoderSettings);\n            SetOperationOptions(operation, options, readConcern);\n\n            return operation;\n        }\n\n\n        private static RenderedPipelineDefinition<TResult> RenderPipeline<TResult, TDocument>(\n            PipelineDefinition<ChangeStreamDocument<TDocument>, TResult> pipeline,\n            IBsonSerializer<TDocument> documentSerializer)\n        {\n            var changeStreamDocumentSerializer = new ChangeStreamDocumentSerializer<TDocument>(documentSerializer);\n            var serializerRegistry = BsonSerializer.SerializerRegistry;\n            return pipeline.Render(changeStreamDocumentSerializer, serializerRegistry);\n        }\n\n        private static void SetOperationOptions<TResult>(\n            ChangeStreamOperation<TResult> operation,\n            ChangeStreamOptions options,\n            ReadConcern readConcern)\n        {\n            options = options ?? new ChangeStreamOptions();\n\n            operation.BatchSize = options.BatchSize;\n            operation.Collation = options.Collation;\n            operation.FullDocument = options.FullDocument;\n            operation.MaxAwaitTime = options.MaxAwaitTime;\n            operation.ReadConcern = readConcern;\n            operation.ResumeAfter = options.ResumeAfter;\n            operation.StartAtOperationTime = options.StartAtOperationTime;\n        }\n    }\n}\n",
        "gt": [
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Bindings/IChannelSource.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongodbDriver/MongoDB.Driver.Core/Core/Operations/BulkDeleteOperationEmulator.cs'",
            "'ETCore/ETServer/Server/ThirdParty/MongoDBDriver/MongoDB.Driver/ChangeStreamHelper.cs'",
            "'ETCore/ETServer/Server/ET.Core/Module/DB/DBQuery2JsonTask.cs'",
            "'ETCore/ETClient/Unity/Assets/ETFramework/Editor/BuildEditor/BuildEditor.cs'"
        ]
    },
    {
        "files": [
            "'event_horizon/Starship/Assets/script/GUI/ViewModel/StarMap/InformationPanel.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/StarMap/CargoHold.cs'",
            "'event_horizon/Starship/Assets/Scripts/Installers/ExplorationSceneInstaller.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/Combat/ShipStatsPanel.cs'",
            "'event_horizon/Starship/Assets/Zenject/Source/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder3.cs'",
            "'event_horizon/Starship/Assets/Scripts/Domain/Economy/ItemType/StarMapItem.cs'"
        ],
        "content": "'event_horizon/Starship/Assets/script/GUI/ViewModel/StarMap/InformationPanel.cs'\n:using System.Linq;\nusing Galaxy;\nusing Game.Exploration;\nusing GameDatabase.DataModel;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing GameServices.Player;\nusing Gui.Exploration;\nusing Gui.StarMap;\nusing Services.Gui;\nusing Services.Localization;\nusing Services.Messenger;\nusing Services.ObjectPool;\nusing Services.Reources;\nusing Zenject;\n\nnamespace ViewModel\n{\n\tpublic class InformationPanel : MonoBehaviour\n\t{\n\t    [Inject] private readonly MotherShip _motherShip;\n\t    [Inject] private readonly Planet.Factory _planetFactory;\n\t    [Inject] private readonly GameObjectFactory _factory;\n\t    [Inject] private readonly ILocalization _localization;\n\t    [Inject] private readonly IMessenger _messenger;\n\t    [Inject] private readonly IResourceLocator _resourceLocator;\n\n        [SerializeField] private Text NameText;\n        [SerializeField] private Text FactionNameText;\n        [SerializeField] private LayoutGroup Planets;\n        [SerializeField] private InputField Bookmark;\n        [SerializeField] private LayoutGroup ObjectsGroup;\n\n        public void OnBookmarkChanged(string value)\n\t\t{\n\t\t\tif (_suppressBookmarkChangeEvent) return;\n\n\t\t\tvar star = _motherShip.CurrentStar;\n\t\t\tstar.Bookmark = value;\n\t\t}\n\n\t\tpublic void Initialize(WindowArgs args)\n\t\t{\n\t\t\tvar star = _motherShip.CurrentStar;\n\n\t\t\tNameText.text = star.Name;\n\n\t\t\t_suppressBookmarkChangeEvent = true;\n\t\t\tBookmark.text = star.Bookmark;\n\t\t\t_suppressBookmarkChangeEvent = false;\n\n\t\t\tvar faction = star.Region.Faction;\n\t\t\tif (faction != Faction.Neutral)\n\t\t\t{\n\t\t\t\tFactionNameText.gameObject.SetActive(true);\n\t\t\t\tFactionNameText.color = faction.Color;\n\t\t\t\tFactionNameText.text = _localization.GetString(faction.Name);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tFactionNameText.gameObject.SetActive(false);\n\t\t\t}\n\n\t\t\tPlanets.InitializeElements<PlanetInfo, Planet>(_planetFactory.CreatePlanets(star.Id), UpdatePlanetInfo, _factory);\n\t\t    ObjectsGroup.InitializeElements<StarSystemObjectItem, StarObjectType>(star.Objects.ToEnumerable().Where(item => item.IsActive(star)), UpdateStarObject);\n\t\t}\n\n\t\tprivate void UpdatePlanetInfo(PlanetInfo planet, Planet model)\n\t\t{\n\t\t\tplanet.UpdatePlanet(model);\n\t\t}\n\n        private void UpdateStarObject(StarSystemObjectItem item, StarObjectType type)\n        {\n            item.Initialize(_motherShip.CurrentStar, type, _messenger, _localization, _resourceLocator);\n        }\n\n        private bool _suppressBookmarkChangeEvent = false;\n\t}\n}\n\n'event_horizon/Starship/Assets/Scripts/Gui/StarMap/CargoHold.cs'\n:﻿using System.Linq;\nusing Economy;\nusing Economy.ItemType;\nusing Economy.Products;\nusing GameDatabase.Enums;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing GameModel.Quests;\nusing GameServices.Gui;\nusing GameServices.Player;\nusing Services.Audio;\nusing Services.Gui;\nusing Services.Localization;\nusing Services.Reources;\nusing ViewModel;\nusing Zenject;\n\nnamespace Gui.StarMap\n{\n    public class CargoHold : MonoBehaviour\n    {\n        [Inject] private readonly ILocalization _localization;\n        [Inject] private readonly ISoundPlayer _soundPlayer;\n        [Inject] private readonly PlayerResources _playerResources;\n        [Inject] private readonly GuiHelper _helper;\n        [Inject] private readonly InventoryFactory _inventoryFactory;\n        [Inject] private readonly IResourceLocator _resourceLocator;\n\n        public enum Filter\n        {\n            All = -1,\n            Resource = 0,\n            Ship = 1,\n            Weapon = 2,\n            Module = 3,\n            Other = 4,\n        }\n\n        [SerializeField] private ToggleGroup ItemsGroup;\n        [SerializeField] private AudioClip Sound;\n        [SerializeField] private GameObject QuantityPanel;\n        [SerializeField] private Slider QuantitySlider;\n        [SerializeField] private RadioGroupViewModel FilterGroup;\n        [SerializeField] private ViewModel.Common.PricePanel PricePanel;\n        [SerializeField] private GameObject DescriptionPanel;\n        [SerializeField] private Text QuantityText;\n        [SerializeField] private Text NameText;\n        [SerializeField] private Text DescrtiptionText;\n        [SerializeField] private Image Icon;\n        [SerializeField] private GameObject EmptyLabel;\n        [SerializeField] private Text MoneyText;\n        [SerializeField] private Text StarText;\n        [SerializeField] private GameObject StarPanel;\n        [SerializeField] private Button ScrapButton;\n\n        [SerializeField] private MarketContentFiller ContentFiller;\n        [SerializeField] private ListScrollRect ItemList;\n\n        public void Initialize(WindowArgs args)\n        {\n            _inventory = _inventoryFactory.CreateCargoHoldInventory();\n            DescriptionPanel.gameObject.SetActive(false);\n\n            FilterGroup.Value = (int)Filter.All;\n            EmptyLabel.gameObject.SetActive(UpdatePlayerItems(true) == 0);\n            _selectedItem = null;\n            ItemsGroup.SetAllTogglesOff();\n            UpdateButtons();\n            UpdateStats();\n        }\n\n        public void OnItemSelected(ViewModel.Common.InventoryItem item)\n        {\n            _selectedItem = item;\n            _quantity = 1;\n            ContentFiller.OnItemSelected(item);\n            UpdateButtons();\n        }\n\n        public void OnItemDeselected()\n        {\n            _selectedItem = null;\n            UpdateButtons();\n        }\n\n        public void MoreInfoButtonClicked()\n        {\n            if (_selectedItem != null)\n                _helper.ShowItemInfoWindow(_selectedItem.Product);\n        }\n\n        public void ScrapButtonClicked()\n        {\n            if (!_selectedItem) return;\n\n            _selectedItem.Product.Sell(_quantity);\n            _soundPlayer.Play(Sound);\n            UpdateItems();\n        }\n\n        public void OnQuantityChanged(float value)\n        {\n            _quantity = Mathf.RoundToInt(value);\n            QuantityText.text = _quantity.ToString();\n\n            if (_selectedItem != null)\n                PricePanel.Initialize(_selectedItem.Product.Type, _selectedItem.Product.Price * _quantity);\n        }\n\n        public void OnFilterSelected(int value)\n        {\n            UpdateItems();\n        }\n\n        private void UpdateStats()\n        {\n            MoneyText.text = _playerResources.Money.ToString();\n            StarPanel.gameObject.SetActive(CurrencyExtensions.PremiumCurrencyAllowed);\n            StarText.text = _playerResources.Stars.ToString();\n        }\n\n        private void UpdateButtons()\n        {\n            var quantity = _selectedItem != null ? _selectedItem.Product.Quantity : 0;\n            var price = _selectedItem != null ? _selectedItem.Product.Price.Amount : 0;\n\n            if (quantity > 1 && price > 0)\n            {\n                QuantityPanel.gameObject.SetActive(true);\n                QuantitySlider.gameObject.SetActive(true);\n                QuantitySlider.maxValue = quantity;\n                QuantitySlider.value = 1;\n                QuantitySlider.onValueChanged.Invoke(1);\n                ScrapButton.interactable = true;\n            }\n            else\n            {\n                QuantityPanel.gameObject.SetActive(false);\n                QuantitySlider.gameObject.SetActive(false);\n                ScrapButton.interactable = price > 0;\n            }\n\n            UpdateItemDescription(_selectedItem != null ? _selectedItem.Product : null);\n        }\n\n        private void UpdateItemDescription(IProduct product)\n        {\n            if (product != null)\n            {\n                DescriptionPanel.gameObject.SetActive(true);\n                Icon.sprite = product.Type.GetIcon(_resourceLocator);\n                Icon.color = product.Type.Color;\n                NameText.text = _localization.GetString(product.Type.Name);\n                DescrtiptionText.gameObject.SetActive(!string.IsNullOrEmpty(DescrtiptionText.text = product.Type.Description));\n                NameText.color = DescrtiptionText.color = ColorTable.QualityColor(product.Type.Quality);\n                PricePanel.Initialize(product.Type, product.Price);\n                PricePanel.gameObject.SetActive(product.Price.Amount > 0);\n            }\n            else\n            {\n                DescriptionPanel.gameObject.SetActive(false);\n            }\n        }\n\n        private int UpdatePlayerItems(bool clearSelection = false)\n        {\n            ContentFiller.InitializeItems(_inventory.Items.Where(IsItemVisible).OrderBy(item => item.Type.Id), true, clearSelection);\n            ItemList.RefreshContent();\n            return ContentFiller.GetItemCount();\n        }\n\n        private bool IsItemVisible(IProduct item)\n        {\n            var filter = (Filter)FilterGroup.Value;\n            if (filter == Filter.All)\n                return true;\n\n            if (item.Type is ComponentItem)\n            {\n                var component = ((ComponentItem)item.Type).Component;\n                if (component.Data.DisplayCategory == ComponentCategory.Weapon)\n                    return filter == Filter.Weapon;\n                else\n                    return filter == Filter.Module;\n            }\n\n            if (item.Type is ShipItem)\n                return filter == Filter.Ship;\n\n            if (item.Type is SatelliteItem)\n                return filter == Filter.Module;\n\n            if (item.Type is ArtifactItem || item.Type is FuelItem)\n                return filter == Filter.Resource;\n\n            return filter == Filter.Other;\n        }\n\n        private void UpdateItems()\n        {\n            var count = UpdatePlayerItems();\n            EmptyLabel.gameObject.SetActive(count == 0);\n\n            _selectedItem = null;\n            if (ItemsGroup.AnyTogglesOn())\n            {\n                var first = ItemsGroup.ActiveToggles().FirstOrDefault();\n                foreach (var item in ItemsGroup.ActiveToggles().Skip(1))\n                    item.isOn = false;\n                if (first != null)\n                    first.onValueChanged.Invoke(true);\n            }\n\n            UpdateButtons();\n            UpdateStats();\n        }\n\n        private int _quantity;\n        private IInventory _inventory;\n        private ViewModel.Common.InventoryItem _selectedItem;\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Installers/ExplorationSceneInstaller.cs'\n:﻿using Combat;\nusing Combat.Ai;\nusing Combat.Collision.Manager;\nusing Combat.Component.Triggers;\nusing Combat.Factory;\nusing Combat.Manager;\nusing Combat.Scene;\nusing Combat.Services;\nusing Game.Exploration;\nusing Gui.Combat;\nusing Services.ObjectPool;\nusing UnityEngine;\nusing Zenject;\n\nnamespace Installers\n{\n    public class ExplorationSceneInstaller : MonoInstaller<ExplorationSceneInstaller>\n    {\n        [SerializeField] private ShipStatsPanel _playerStatsPanel;\n        [SerializeField] private ShipStatsPanel _enemyStatsPanel;\n        [SerializeField] private ShipControlsPanel _shipControlsPanel;\n        [SerializeField] private RadarPanel _radarPanel;\n        [SerializeField] private Settings _settings;\n        [SerializeField] private TrailRendererPool _trailRendererPool;\n\n        [Inject] private readonly GameStateMachine.IStateMachine _stateMachine;\n\n        public override void InstallBindings()\n        {\n            Container.BindAllInterfacesAndSelf<ExplorationData>().To<ExplorationData>().AsSingle().NonLazy();\n            Container.BindAllInterfacesAndSelf<ExplorationSceneManager>().To<ExplorationSceneManager>().AsSingle().NonLazy();\n            Container.BindAllInterfaces<ExplorationViewRect>().To<ExplorationViewRect>().AsTransient();\n            Container.BindAllInterfaces<Scene>().To<Scene>().AsSingle().WithArguments(new SceneSettings { AreaWidth = 1000, AreaHeight = 1000, PlayerAlwaysInCenter = true }).NonLazy();\n            Container.BindAllInterfaces<CollisionManager>().To<CollisionManager>().AsSingle();\n            Container.BindAllInterfaces<AiManager>().To<AiManager>().AsSingle().NonLazy();\n            Container.Bind<ShipStatsPanel>().FromInstance(_playerStatsPanel).When(context => context.MemberName.Contains(\"player\"));\n            Container.Bind<ShipStatsPanel>().FromInstance(_enemyStatsPanel).When(context => context.MemberName.Contains(\"enemy\"));\n            Container.Bind<ShipControlsPanel>().FromInstance(_shipControlsPanel);\n            Container.Bind<RadarPanel>().FromInstance(_radarPanel);\n            Container.Bind<Settings>().FromInstance(_settings);\n            Container.Bind<WeaponFactory>().AsSingle();\n            Container.Bind<ShipFactory>().AsSingle().WithArguments(new ShipFactory.Settings { Shadows = true, StaticWrecks = true });\n            Container.Bind<SpaceObjectFactory>().AsSingle();\n            Container.Bind<DeviceFactory>().AsSingle();\n            Container.Bind<DroneBayFactory>().AsSingle();\n            Container.Bind<SatelliteFactory>().AsSingle();\n            Container.Bind<EffectFactory>().AsSingle();\n            Container.BindAllInterfacesAndSelf<IObjectPool>().To<GameObjectPool>().FromGameObject().AsSingle();\n            Container.Bind<TrailRendererPool>().FromInstance(_trailRendererPool);\n            Container.Bind<GameObjectFactory>();\n            Container.BindAllInterfaces<Keyboard>().To<Keyboard>().AsSingle();\n        }\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Gui/Combat/ShipStatsPanel.cs'\n:﻿using Combat.Component.Ship;\nusing Combat.Unit;\nusing Gui.Controls;\nusing Gui.Windows;\nusing Services.Gui;\nusing Services.Reources;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing ViewModel;\nusing Zenject;\n\nnamespace Gui.Combat\n{\n    [RequireComponent(typeof(AnimatedWindow))]\n    public class ShipStatsPanel : MonoBehaviour\n    {\n        [Inject] private readonly IResourceLocator _resourceLocator;\n\n        [SerializeField] private ProgressBar _armorPoints;\n        [SerializeField] private ProgressBar _shieldPoints;\n        [SerializeField] private ProgressBar _energyPoints;\n        [SerializeField] private Image _icon;\n        [SerializeField] private SelectShipPanelItemViewModel _shipItem;\n        [SerializeField] private GameObject _fireResistIcon;\n        [SerializeField] private GameObject _energyResistIcon;\n        [SerializeField] private GameObject _kineticResistIcon;\n        [SerializeField] private Text _fireResistText;\n        [SerializeField] private Text _energyResistText;\n        [SerializeField] private Text _kineticResistText;\n\n        public void Close()\n        {\n            GetComponent<AnimatedWindow>().Close(WindowExitCode.Ok);\n        }\n\n        public void Open(IShip ship)\n        {\n            if (!ship.IsActive())\n                return;\n\n            GetComponent<AnimatedWindow>().Open();\n\n            if (_ship == ship)\n                return;\n\n            _ship = ship;\n\n            if (_icon)\n                _icon.sprite = _resourceLocator.GetSprite(ship.Specification.Stats.IconImage) ?? _resourceLocator.GetSprite(ship.Specification.Stats.ModelImage);\n\n            _shipItem.SetLevel(ship.Specification.Type.Level);\n            _shipItem.SetClass(ship.Specification.Type.Class);\n\n            UpdateResistance();\n\n            _hasShield = _ship.Stats.Shield.Exists;\n            _hasArmor = _ship.Stats.Armor.Exists;\n\n            _shieldPoints.gameObject.SetActive(_hasShield);\n            _armorPoints.gameObject.SetActive(_hasArmor);\n        }\n\n        private void UpdateResistance()\n        {\n            var resistance = _ship.Stats.Resistance;\n\n            if (_fireResistIcon != null)\n            {\n                var active = resistance.Heat > 0.01f;\n                _fireResistIcon.gameObject.SetActive(active);\n                _fireResistText.gameObject.SetActive(active);\n                if (active)\n                    _fireResistText.text = Mathf.RoundToInt(resistance.Heat * 100) + \"%\";\n            }\n\n            if (_energyResistIcon != null)\n            {\n                var active = resistance.Energy > 0.01f;\n                _energyResistIcon.gameObject.SetActive(active);\n                _energyResistText.gameObject.SetActive(active);\n                if (active)\n                    _energyResistText.text = Mathf.RoundToInt(resistance.Energy * 100) + \"%\";\n            }\n\n            if (_kineticResistIcon != null)\n            {\n                var active = resistance.Kinetic > 0.01f;\n                _kineticResistIcon.gameObject.SetActive(active);\n                _kineticResistText.gameObject.SetActive(active);\n                if (active)\n                    _kineticResistText.text = Mathf.RoundToInt(resistance.Kinetic * 100) + \"%\";\n            }\n        }\n\n        private void Update()\n        {\n            if (!_ship.IsActive())\n            {\n                Close();\n                return;\n            }\n\n            _updateResistanceCooldown -= Time.deltaTime;\n            if (_updateResistanceCooldown <= 0)\n            {\n                _updateResistanceCooldown = 0.5f;\n                UpdateResistance();\n            }\n\n            var total = 0f;\n            if (_hasArmor) total += _ship.Stats.Armor.MaxValue;\n            if (_hasShield) total += _ship.Stats.Shield.MaxValue;\n\n            var armor = _hasArmor ? _ship.Stats.Armor.Value : 0;\n            var shield = _hasShield ? _ship.Stats.Shield.Value : 0;\n\n            if (_hasArmor)\n            {\n                _armorPoints.Y0 = 0;\n                _armorPoints.Y1 = armor / total;\n                _armorPoints.SetAllDirty();\n            }\n            if (_hasShield)\n            {\n                _shieldPoints.Y0 = armor / total;\n                _shieldPoints.Y1 = (armor + shield) / total;\n                _shieldPoints.SetAllDirty();\n            }\n\n            var energy = _ship.Stats.Energy.Percentage;\n            if (!Mathf.Approximately(_energyPoints.Y1, energy))\n            {\n                _energyPoints.Y1 = energy;\n                _energyPoints.SetAllDirty();\n            }\n        }\n\n        private float _updateResistanceCooldown;\n        private bool _hasShield;\n        private bool _hasArmor;\n        private IShip _ship;\n    }\n}\n\n'event_horizon/Starship/Assets/Zenject/Source/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder3.cs'\n:using System;\nusing System.Collections.Generic;\nusing ModestTree;\n\nnamespace Zenject\n{\n    public class FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> : FactoryFromBinder<TParam1, TParam2, TParam3, TContract>\n    {\n        public FactoryToChoiceBinder(\n            BindInfo bindInfo, Type factoryType,\n            BindFinalizerWrapper finalizerWrapper)\n            : base(bindInfo, factoryType, finalizerWrapper)\n        {\n        }\n\n\n        public FactoryFromBinder<TParam1, TParam2, TParam3, TContract> ToSelf()\n        {\n            Assert.IsEqual(BindInfo.ToChoice, ToChoices.Self);\n            return this;\n        }\n\n        public FactoryFromBinder<TParam1, TParam2, TParam3, TConcrete> To<TConcrete>()\n            where TConcrete : TContract\n        {\n            BindInfo.ToChoice = ToChoices.Concrete;\n            BindInfo.ToTypes = new List<Type>()\n            {\n                typeof(TConcrete)\n            };\n\n            return new FactoryFromBinder<TParam1, TParam2, TParam3, TConcrete>(\n                BindInfo, FactoryType, FinalizerWrapper);\n        }\n    }\n\n    public class FactoryToChoiceIdBinder<TParam1, TParam2, TParam3, TContract> : FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract>\n    {\n        public FactoryToChoiceIdBinder(\n            BindInfo bindInfo, Type factoryType,\n            BindFinalizerWrapper finalizerWrapper)\n            : base(bindInfo, factoryType, finalizerWrapper)\n        {\n        }\n\n        public FactoryToChoiceBinder<TParam1, TParam2, TParam3, TContract> WithId(object identifier)\n        {\n            BindInfo.Identifier = identifier;\n            return this;\n        }\n    }\n}\n\n\n\n'event_horizon/Starship/Assets/Scripts/Domain/Economy/ItemType/StarMapItem.cs'\n:﻿using System;\nusing Galaxy;\nusing Maths;\nusing Services.Localization;\nusing Services.Messenger;\nusing Services.Reources;\nusing UnityEngine;\nusing Zenject;\n\nnamespace Economy.ItemType\n{\n    public class StarMapItem : IItemType\n    {\n        [Inject]\n        public StarMapItem(StarMap starMap, IMessenger messenger, ILocalization localization, int starId)\n        {\n            Id = \"sm\";\n            _starMap = starMap;\n            _star = _starMap.GetStarById(starId);\n            _localization = localization;\n            _messenger = messenger;\n        }\n\n        public string Id { get; private set; }\n        public string Name { get { return _localization.GetString(\"$StarMapItem\"); } }\n        public string Description { get { return string.Empty; } }\n        public Sprite GetIcon(IResourceLocator resourceLocator) { return CommonSpriteTable.StarMap; }\n        public Price Price { get { return Price.Common(Distance.Credits(_star.Level)); } }\n        public Color Color { get { return Color.cyan; } }\n        public ItemQuality Quality { get { return ItemQuality.Medium; } }\n\n        public void Consume(int amount)\n        {\n            var center = _star.Position;\n            var stars = _starMap.GetVisibleStars(center - Vector2.one * _radius, center + Vector2.one * _radius);\n            foreach (var item in stars)\n                if (Vector2.Distance(item.Position, center) <= _radius)\n                    item.SetVisited();\n\n            _messenger.Broadcast(EventType.StarMapChanged);\n        }\n\n        public void Withdraw(int amount)\n        {\n            throw new InvalidOperationException();\n        }\n\n        public int MaxItemsToConsume { get { return 1; } }\n        public int MaxItemsToWithdraw { get { return 0; } }\n\n        private readonly Galaxy.Star _star;\n        private const float _radius = 3.2f;\n\n        private readonly StarMap _starMap;\n        private readonly ILocalization _localization;\n        private readonly IMessenger _messenger;\n    }\n}\n",
        "gt": [
            "'event_horizon/Starship/Assets/Zenject/Source/Binding/Binders/Factory/FactoryToChoiceBinder/FactoryToChoiceBinder3.cs'",
            "'event_horizon/Starship/Assets/Scripts/Domain/Economy/ItemType/StarMapItem.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/StarMap/CargoHold.cs'",
            "'event_horizon/Starship/Assets/script/GUI/ViewModel/StarMap/InformationPanel.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/Combat/ShipStatsPanel.cs'",
            "'event_horizon/Starship/Assets/Scripts/Installers/ExplorationSceneInstaller.cs'"
        ]
    },
    {
        "files": [
            "'Newbe.Claptrap/src/Newbe.Claptrap.StorageProvider.MySql/Extensions/MySqlStateStoreConfigurator.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.StorageTestWebApi/Startup.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap/Design/ClaptrapDesignStore.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap/Bootstrapper/AutofacClaptrapBootstrapperBuilder.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.StorageProvider.MySql/Options/IMySqlEventStoreOptions.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.StorageProvider.MySql/Extensions/BootstrapperBuilderExtensions.cs'"
        ],
        "content": "'Newbe.Claptrap/src/Newbe.Claptrap.StorageProvider.MySql/Extensions/MySqlStateStoreConfigurator.cs'\n:using System;\nusing Newbe.Claptrap.StorageProvider.MySql.Options;\nusing Newbe.Claptrap.StorageProvider.Relational.StateStore;\n\nnamespace Newbe.Claptrap.StorageProvider.MySql.Extensions\n{\n    public class MySqlStateStoreConfigurator\n    {\n        private readonly ClaptrapStorageProviderOptions _claptrapStorageProviderOptions;\n\n        public MySqlStateStoreConfigurator(\n            ClaptrapStorageProviderOptions claptrapStorageProviderOptions)\n        {\n            _claptrapStorageProviderOptions = claptrapStorageProviderOptions;\n        }\n\n\n        public MySqlStateStoreConfigurator SharedTable(Action<MySqlStateStoreOptions>? action = null)\n        {\n            return UseLocator(new RelationalStateStoreLocator\n            {\n                SchemaName = Defaults.SchemaName,\n                ConnectionName = Defaults.ConnectionName,\n                StateTableName = Defaults.StateTableName\n            }, action);\n        }\n\n        public MySqlStateStoreConfigurator OneIdOneTable(Action<MySqlStateStoreOptions>? action = null)\n        {\n            return UseLocator(new RelationalStateStoreLocator\n            {\n                SchemaName = Defaults.SchemaName,\n                ConnectionName = Defaults.ConnectionName,\n                StateTableName = $\"[TypeCode]_[Id]_{Defaults.StateTableName}\"\n            }, action);\n        }\n\n\n        public MySqlStateStoreConfigurator OneTypeOneTable(Action<MySqlStateStoreOptions>? action = null)\n        {\n            return UseLocator(new RelationalStateStoreLocator\n            {\n                SchemaName = Defaults.SchemaName,\n                ConnectionName = Defaults.ConnectionName,\n                StateTableName = $\"[TypeCode]_{Defaults.StateTableName}\"\n            }, action);\n        }\n\n        public MySqlStateStoreConfigurator ConfigureOptions(\n            Action<ClaptrapStorageProviderOptions> optionsAction)\n        {\n            optionsAction(_claptrapStorageProviderOptions);\n            return this;\n        }\n\n        public MySqlStateStoreConfigurator UseLocator(\n            IRelationalStateStoreLocator relationalEventStoreLocator,\n            Action<MySqlStateStoreOptions>? action = null\n        )\n        {\n            return ConfigureOptions(providerOptions =>\n            {\n                var stateOptions = new MySqlStateStoreOptions\n                {\n                    RelationalStateStoreLocator = relationalEventStoreLocator\n                };\n                action?.Invoke(stateOptions);\n                providerOptions.StateLoaderOptions = stateOptions;\n                providerOptions.StateSaverOptions = stateOptions;\n            });\n        }\n    }\n}\n'Newbe.Claptrap/src/Newbe.Claptrap.StorageTestWebApi/Startup.cs'\n:using App.Metrics;\nusing Autofac;\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.OpenApi.Models;\nusing Newbe.Claptrap.AppMetrics;\nusing Newbe.Claptrap.Bootstrapper;\nusing Newbe.Claptrap.StorageSetup;\nusing Newbe.Claptrap.StorageTestWebApi.Services;\nusing Newbe.Claptrap.TestSuit.QuickSetupTools;\n\nnamespace Newbe.Claptrap.StorageTestWebApi\n{\n    public class Startup\n    {\n        private readonly AutofacClaptrapBootstrapper _claptrapBootstrapper;\n        private readonly IClaptrapDesignStore _claptrapDesignStore;\n\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n            var loggerFactory = new ServiceCollection()\n                .AddLogging(logging => logging.AddConsole())\n                .BuildServiceProvider()\n                .GetRequiredService<ILoggerFactory>();\n\n            var bootstrapperBuilder = new AutofacClaptrapBootstrapperBuilder(loggerFactory);\n            _claptrapBootstrapper = (AutofacClaptrapBootstrapper) bootstrapperBuilder\n                .ScanClaptrapModule()\n                .AddConfiguration(configuration)\n                .ScanClaptrapDesigns(new[]\n                {\n                    typeof(IAccount),\n                    typeof(Account),\n                    typeof(IAccountBalanceMinion),\n                    typeof(AccountBalanceMinion),\n                    typeof(IAccountHistoryBalanceMinion),\n                    typeof(AccountHistoryBalanceMinion)\n                })\n                .ConfigureClaptrapDesign(x =>\n                    x.ClaptrapOptions.EventCenterOptions.EventCenterType = EventCenterType.None)\n                .Build();\n            _claptrapDesignStore = _claptrapBootstrapper.DumpDesignStore();\n        }\n\n        public IConfiguration Configuration { get; }\n\n\n        public void ConfigureServices(IServiceCollection services)\n        {\n            services.AddControllers();\n            services.AddClaptrapServerOptions();\n            services.AddOptions<TestConsoleOptions>()\n                .BindConfiguration(nameof(TestConsoleOptions));\n            services.AddSwaggerGen(c =>\n            {\n                c.SwaggerDoc(\"v1\", new OpenApiInfo {Title = \"Newbe.Claptrap.StorageTestWebApi\", Version = \"v1\"});\n            });\n        }\n\n\n\n\n\n        public void ConfigureContainer(ContainerBuilder builder)\n        {\n\n\n\n            builder.RegisterType<Account>()\n                .AsSelf()\n                .InstancePerDependency();\n            builder.RegisterType<AccountBalanceMinion>()\n                .AsSelf()\n                .InstancePerDependency();\n            builder.RegisterModule<StorageSetupModule>();\n            builder.RegisterModule<StorageTestWebApiModule>();\n            _claptrapBootstrapper.Boot(builder);\n        }\n\n\n        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n        {\n            var metricsRoot = app.ApplicationServices.GetRequiredService<IMetricsRoot>();\n            ClaptrapMetrics.MetricsRoot = metricsRoot;\n\n            if (env.IsDevelopment())\n            {\n                app.UseDeveloperExceptionPage();\n                app.UseSwagger();\n                app.UseSwaggerUI(c =>\n                    c.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"Newbe.Claptrap.StorageTestWebApi v1\"));\n            }\n\n            app.UseHttpsRedirection();\n\n            app.UseRouting();\n\n            app.UseAuthorization();\n\n            app.UseEndpoints(endpoints => { endpoints.MapControllers(); });\n\n            using var serviceScope = app.ApplicationServices.CreateScope();\n            var service = serviceScope.ServiceProvider.GetRequiredService<IInMemoryActorTestService>();\n            service.InitAsync().Wait();\n        }\n    }\n}\n'Newbe.Claptrap/src/Newbe.Claptrap/Design/ClaptrapDesignStore.cs'\n:using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Logging.Abstractions;\nusing Newbe.Claptrap.Bootstrapper;\n\nnamespace Newbe.Claptrap.Design\n{\n    public class ClaptrapDesignStore : IClaptrapDesignStore\n    {\n        private readonly ILogger<ClaptrapDesignStore> _logger;\n\n        public delegate ClaptrapDesignStore Factory();\n\n        private readonly IDictionary<string, IClaptrapDesign> _globalDic\n            = new Dictionary<string, IClaptrapDesign>();\n\n        private readonly IDictionary<string, ClaptrapDesignFactory> _factories\n            = new Dictionary<string, ClaptrapDesignFactory>();\n\n        public static IClaptrapDesignStore Instance { get; internal set; }\n\n        public ClaptrapDesignStore(\n            ILogger<ClaptrapDesignStore>? logger = null)\n        {\n            _logger = logger\n                      ?? LoggerFactoryHolder.Instance?.CreateLogger<ClaptrapDesignStore>()\n                      ?? NullLogger<ClaptrapDesignStore>.Instance;\n        }\n\n        public IClaptrapDesign FindDesign(IClaptrapIdentity claptrapIdentity)\n        {\n            var typeCode = claptrapIdentity.TypeCode;\n\n            if (!_globalDic.TryGetValue(typeCode, out var globalDesign))\n            {\n                throw new ClaptrapDesignNotFoundException(claptrapIdentity);\n            }\n\n            if (_factories.TryGetValue(typeCode, out var factory))\n            {\n                var re = factory.Invoke(claptrapIdentity, globalDesign);\n                return re;\n            }\n\n            return globalDesign;\n        }\n\n        public void AddOrReplace(IClaptrapDesign design)\n        {\n            var typeCode = design.ClaptrapTypeCode;\n            if (_globalDic.TryGetValue(typeCode, out var old))\n            {\n                _logger.LogInformation(\n                    \"found a old claptrap design in global store and it will be replaced. old: {@design}\",\n                    old);\n            }\n\n            _globalDic[typeCode] = design;\n            _logger.LogInformation(\n                \"a claptrap design add to global store. design: {@design}\",\n                design);\n        }\n\n        public void AddOrReplaceFactory(string claptrapTypeCode, ClaptrapDesignFactory designFactory)\n        {\n            if (_factories.TryGetValue(claptrapTypeCode, out var old))\n            {\n                _logger.LogInformation(\n                    \"Found a old claptrap design factory and it will be replaced. typeCode : {@typeCode} old: {@designFactory}\",\n                    claptrapTypeCode,\n                    old);\n            }\n\n            _factories[claptrapTypeCode] = designFactory;\n            _logger.LogInformation(\n                \"a claptrap design factory add to factories. typeCode : {@typeCode} \",\n                claptrapTypeCode);\n        }\n\n        public void Remove(Func<IClaptrapDesign, bool> removedSelector)\n        {\n            var needRemoved = this.Where(removedSelector)\n                .ToArray();\n            foreach (var claptrapDesign in needRemoved)\n            {\n                var typeCode = claptrapDesign.ClaptrapTypeCode;\n                if (_globalDic.Remove(typeCode))\n                {\n                    _logger.LogInformation(\"design for {typeCode} remove from global design store\", typeCode);\n                }\n            }\n        }\n\n        public void RemoveFactory(string claptrapTypeCode)\n        {\n            if (_factories.ContainsKey(claptrapTypeCode))\n            {\n                _factories.Remove(claptrapTypeCode);\n                _logger.LogInformation(\"Remove a factory with claptrap type code : {claptrapTypeCode}\",\n                    claptrapTypeCode);\n            }\n            else\n            {\n                _logger.LogTrace(\"There is not factory found with claptrap type code : {claptrapTypeCode}\",\n                    claptrapTypeCode);\n            }\n        }\n\n        public IEnumerator<IClaptrapDesign> GetEnumerator()\n        {\n            return _globalDic.Values.Cast<IClaptrapDesign>().GetEnumerator();\n        }\n\n        IEnumerator IEnumerable.GetEnumerator()\n        {\n            return GetEnumerator();\n        }\n    }\n}\n'Newbe.Claptrap/src/Newbe.Claptrap/Bootstrapper/AutofacClaptrapBootstrapperBuilder.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Autofac;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Logging.Abstractions;\nusing Newbe.Claptrap.Design;\nusing Newbe.Claptrap.Extensions;\nusing Newbe.Claptrap.Localization;\nusing Newbe.Claptrap.Localization.Modules;\nusing Newbe.Claptrap.Modules;\nusing Newtonsoft.Json;\nusing Module = Autofac.Module;\n\nnamespace Newbe.Claptrap.Bootstrapper\n{\n    public class AutofacClaptrapBootstrapperBuilder : IClaptrapBootstrapperBuilder\n    {\n        private readonly ILoggerFactory _loggerFactory;\n        private readonly ILogger<AutofacClaptrapBootstrapperBuilder> _logger;\n        private readonly Lazy<IL> _l;\n\n        public AutofacClaptrapBootstrapperBuilder(\n            ILoggerFactory? loggerFactory = default)\n        {\n            _loggerFactory = loggerFactory ?? new NullLoggerFactory();\n            LoggerFactoryHolder.Instance = _loggerFactory;\n            _logger = _loggerFactory.CreateLogger<AutofacClaptrapBootstrapperBuilder>();\n            _l = new Lazy<IL>(CreateL);\n            Options = new ClaptrapBootstrapperBuilderOptions\n            {\n                DesignTypes = Enumerable.Empty<Type>(),\n                ModuleTypes = Enumerable.Empty<Type>(),\n                ClaptrapDesignStoreConfigurators = new List<IClaptrapDesignStoreConfigurator>(),\n                ClaptrapDesignStoreProviders = new List<IClaptrapDesignStoreProvider>(),\n                ClaptrapModuleProviders = new List<IClaptrapModuleProvider>()\n            };\n        }\n\n        private IL CreateL()\n        {\n            var builder = new ContainerBuilder();\n            builder.RegisterModule(new LocalizationModule(Options.ClaptrapLocalizationOptions));\n            var logger = _loggerFactory.CreateLogger<L>();\n            builder.RegisterInstance(logger)\n                .SingleInstance();\n            var container = builder.Build();\n            var l = container.Resolve<IL>();\n            return l;\n        }\n\n        public ClaptrapBootstrapperBuilderOptions Options { get; }\n\n        public IClaptrapBootstrapper Build()\n        {\n            try\n            {\n                return BuildCore();\n            }\n            catch (Exception e)\n            {\n                _logger.LogError(e, _l.Value[LK.failed_to_build_claptrap_bootstrapper]);\n                throw;\n            }\n\n            IClaptrapBootstrapper BuildCore()\n            {\n                var container = CreateContainerForScanning();\n                using var storeScope = container.BeginLifetimeScope();\n                var factory = storeScope.Resolve<IClaptrapDesignStoreFactory>();\n                var store =\n                    CreateDefaultStore(factory, Options.DesignTypes ?? throw new ArgumentNullException());\n\n                this.ConfigureClaptrapDesign(x => x.IsMinion(),\n                    x =>\n                    {\n                        x.EventSaverFactoryType = typeof(EmptyEventSaverFactory);\n                        x.ClaptrapStorageProviderOptions.EventSaverOptions = new EmptyEventSaverOptions();\n                    });\n\n                IEnumerable<Module> appAutofacModules = Enumerable.Empty<Module>();\n                var (appProviderScope, appProviders) = CreateAppProviders(container, store);\n                using (appProviderScope)\n                {\n                    var claptrapDesignStoreConfigurators =\n                        appProviders.SelectMany(x => x.GetClaptrapDesignStoreConfigurators());\n                    var allConfig =\n                        claptrapDesignStoreConfigurators.Concat(Options.ClaptrapDesignStoreConfigurators);\n\n                    store = ConfigStore(store, allConfig);\n                    var validator = storeScope.Resolve<IClaptrapDesignStoreValidator>();\n                    store = ValidateStore(store, validator);\n\n                    var appModules = appProviders\n                        .SelectMany(x =>\n                        {\n                            var ms = x.GetClaptrapApplicationModules().ToArray();\n                            _logger.LogDebug(\"Found {Count} claptrap application modules from {Type} : {Modules}\",\n                                ms.Length,\n                                x,\n                                ms.Select(a => a.Name));\n                            return ms;\n                        })\n                        .ToArray();\n\n                    _logger.LogInformation(\n                        \"Scanned {TypesCount}, and found {Count} claptrap application modules : {Modules}\",\n                        Options.ModuleTypes.Count(),\n                        appModules.Length,\n                        appModules.Select(x => x.Name));\n                    appAutofacModules = appModules\n                        .OfType<Module>()\n                        .ToArray();\n                    _logger.LogInformation(\n                        \"Filtered and found {Count} Autofac modules : {@Modules}\",\n                        appAutofacModules.Count(),\n                        appAutofacModules);\n                }\n\n                var providers = ScanClaptrapModuleProviders();\n\n                var claptrapBootstrapper =\n                    new AutofacClaptrapBootstrapper(\n                        providers,\n                        appAutofacModules\n                            .Concat(new[] {new ClaptrapBootstrapperBuilderOptionsModule(Options)}),\n                        store);\n\n                return claptrapBootstrapper;\n            }\n        }\n\n        private (ILifetimeScope scope, IClaptrapAppProvider[] appProviders) CreateAppProviders(\n            ILifetimeScope container,\n            IClaptrapDesignStore claptrapDesignStore)\n        {\n            var scope = container.BeginLifetimeScope(innerBuilder =>\n            {\n                var providerTypes = Options.ModuleTypes\n                    .Where(x => x.IsClass && !x.IsAbstract)\n                    .Where(x => x.GetInterface(typeof(IClaptrapAppProvider).FullName!) != null)\n                    .ToArray();\n                _logger.LogDebug(\"Found type {ProviderTypes} as {Name}\",\n                    providerTypes,\n                    nameof(IClaptrapAppProvider));\n                innerBuilder.RegisterTypes(providerTypes)\n                    .As<IClaptrapAppProvider>()\n                    .InstancePerLifetimeScope();\n                innerBuilder.RegisterInstance(claptrapDesignStore);\n            });\n            var appProviders = scope.Resolve<IEnumerable<IClaptrapAppProvider>>();\n            return (scope, appProviders.ToArray());\n        }\n\n        private Type[] ScanClaptrapModuleProviders()\n        {\n            var providers = Options.ModuleTypes\n                .Where(x => x.IsClass && !x.IsAbstract)\n                .Where(x => x.GetInterface(typeof(IClaptrapModuleProvider).FullName!) != null)\n                .ToArray();\n            _logger.LogInformation(\n                \"Scanned {TypeCount}, and found {Count} claptrap modules providers : {Modules}\",\n                Options.ModuleTypes.Count(),\n                providers.Length,\n                providers);\n            return providers;\n        }\n\n        private IContainer CreateContainerForScanning()\n        {\n            var builder = new ContainerBuilder();\n            builder.RegisterModule<ClaptrapDesignScanningModule>();\n            builder.RegisterModule(new LoggingModule(_loggerFactory));\n            builder.RegisterModule(new LocalizationModule(Options.ClaptrapLocalizationOptions));\n            builder.RegisterInstance(Options);\n            var container = builder.Build();\n            return container;\n        }\n\n        private IClaptrapDesignStore CreateDefaultStore(\n            IClaptrapDesignStoreFactory factory,\n            IEnumerable<Type> types)\n        {\n            foreach (var provider in Options.ClaptrapDesignStoreProviders)\n            {\n                _logger.LogDebug(_l.Value[LK.add__provider__as_claptrap_design_provider], provider);\n                factory.AddProvider(provider);\n            }\n\n            var typeArray = types as Type[] ?? types.ToArray();\n            _logger.LogDebug(_l.Value[LK.start_to_scan__assemblyArrayCount__types], typeArray.Length);\n            _logger.LogDebug(_l.Value[LK.start_to_create_claptrap_design]);\n            var claptrapDesignStore = factory.Create(typeArray);\n            return claptrapDesignStore;\n        }\n\n\n        private IClaptrapDesignStore ConfigStore(\n            IClaptrapDesignStore claptrapDesignStore,\n            IEnumerable<IClaptrapDesignStoreConfigurator> configurators)\n        {\n            _logger.LogInformation(_l.Value[LK.claptrap_design_store_created__start_to_configure_it]);\n            _logger.LogDebug(_l.Value[LK.all_designs____designs_],\n                JsonConvert.SerializeObject(claptrapDesignStore.ToArray()));\n\n            foreach (var configurator in configurators)\n            {\n                _logger.LogDebug(_l.Value[LK.start_to_configure_claptrap_design_store_by__configurator_],\n                    configurator);\n                configurator.Configure(claptrapDesignStore);\n            }\n\n            _logger.LogInformation(_l.Value[LK.found__actorCount__claptrap_designs],\n                claptrapDesignStore.Count());\n            _logger.LogDebug(_l.Value[LK.all_designs_after_configuration___designs_],\n                JsonConvert.SerializeObject(claptrapDesignStore.ToArray()));\n            return claptrapDesignStore;\n        }\n\n\n        private IClaptrapDesignStore ValidateStore(\n            IClaptrapDesignStore claptrapDesignStore,\n            IClaptrapDesignStoreValidator validator)\n        {\n            if (Options.ClaptrapDesignStoreValidationOptions.Enabled)\n            {\n                _logger.LogDebug(_l.Value[LK.start_to_validate_all_design_in_claptrap_design_store]);\n                var (isOk, errorMessage) = validator.Validate(claptrapDesignStore);\n                if (!isOk)\n                {\n                    throw new ClaptrapDesignStoreValidationFailException(errorMessage);\n                }\n\n                _logger.LogInformation(_l.Value[LK.all_design_validated_ok]);\n            }\n            else\n            {\n                _logger.LogInformation(\"Validation disabled\");\n            }\n\n            return claptrapDesignStore;\n        }\n    }\n}\n'Newbe.Claptrap/src/Newbe.Claptrap.StorageProvider.MySql/Options/IMySqlEventStoreOptions.cs'\n:using Newbe.Claptrap.StorageProvider.Relational.Options;\n\nnamespace Newbe.Claptrap.StorageProvider.MySql.Options\n{\n    public interface IMySqlEventStoreOptions :\n        IMySqlEventLoaderOptions,\n        IMySqlEventSaverOptions,\n        IBatchSaverOptions,\n        IRelationalEventStoreLocatorOptions,\n        IMySqlMigrationOptions\n    {\n    }\n}\n'Newbe.Claptrap/src/Newbe.Claptrap.StorageProvider.MySql/Extensions/BootstrapperBuilderExtensions.cs'\n:using System;\nusing Newbe.Claptrap.StorageProvider.MySql.Extensions;\nusing Newbe.Claptrap.StorageProvider.MySql.Options;\nusing Newbe.Claptrap.StorageProvider.Relational.EventStore;\nusing Newbe.Claptrap.StorageProvider.Relational.StateStore;\n\n\nnamespace Newbe.Claptrap.Bootstrapper\n{\n    public static class BootstrapperBuilderExtensions\n    {\n\n\n\n\n\n\n        public static IClaptrapBootstrapperBuilder UseMySqlAsEventStore(\n            this IClaptrapBootstrapperBuilder builder,\n            StorageOptions storageOptions)\n        {\n            return builder.UseMySql(sqlite =>\n                sqlite.AsEventStore(eventStore =>\n                {\n                    switch (storageOptions.Strategy)\n                    {\n                        case RelationLocatorStrategy.SharedTable:\n                            eventStore.SharedTable(ConfigMore);\n                            break;\n                        case RelationLocatorStrategy.OneTypeOneTable:\n                            eventStore.OneTypeOneTable(ConfigMore);\n                            break;\n                        case RelationLocatorStrategy.OneIdOneTable:\n                            eventStore.OneIdOneTable(ConfigMore);\n                            break;\n                        case RelationLocatorStrategy.Known:\n                        default:\n                            eventStore.UseLocator(new RelationalEventStoreLocator\n                            {\n                                ConnectionName = storageOptions.ConnectionName,\n                                SchemaName = storageOptions.SchemaName,\n                                EventTableName = storageOptions.TableName\n                            }, ConfigMore);\n                            break;\n                    }\n\n                    void ConfigMore(MySqlEventStoreOptions options)\n                    {\n                        options.IsAutoMigrationEnabled = storageOptions.IsAutoMigrationEnabled;\n                        options.InsertManyWindowTimeInMilliseconds =\n                            storageOptions.InsertManyWindowTimeInMilliseconds;\n                        options.InsertManyWindowCount = storageOptions.InsertManyWindowCount;\n                    }\n                }));\n        }\n\n\n\n\n\n\n\n        public static IClaptrapBootstrapperBuilder UseMySqlAsStateStore(\n            this IClaptrapBootstrapperBuilder builder,\n            StorageOptions storageOptions)\n        {\n            return builder.UseMySql(sqlite =>\n                sqlite.AsStateStore(stateStore =>\n                {\n                    switch (storageOptions.Strategy)\n                    {\n                        case RelationLocatorStrategy.SharedTable:\n                            stateStore.SharedTable(ConfigMore);\n                            break;\n                        case RelationLocatorStrategy.OneTypeOneTable:\n                            stateStore.OneTypeOneTable(ConfigMore);\n                            break;\n                        case RelationLocatorStrategy.OneIdOneTable:\n                            stateStore.OneIdOneTable(ConfigMore);\n                            break;\n                        case RelationLocatorStrategy.Known:\n                        default:\n                            stateStore.UseLocator(new RelationalStateStoreLocator\n                            {\n                                ConnectionName = storageOptions.ConnectionName,\n                                SchemaName = storageOptions.SchemaName,\n                                StateTableName = storageOptions.TableName\n                            }, ConfigMore);\n                            break;\n                    }\n\n                    void ConfigMore(MySqlStateStoreOptions options)\n                    {\n                        options.IsAutoMigrationEnabled = storageOptions.IsAutoMigrationEnabled;\n                        options.InsertManyWindowTimeInMilliseconds =\n                            storageOptions.InsertManyWindowTimeInMilliseconds;\n                        options.InsertManyWindowCount = storageOptions.InsertManyWindowCount;\n                    }\n                }));\n        }\n\n        public static IClaptrapBootstrapperBuilder UseMySql(\n            this IClaptrapBootstrapperBuilder builder,\n            Action<MySqlProviderConfigurator> mysql)\n        {\n            return builder.UseMySql(x => true, mysql);\n        }\n\n        public static IClaptrapBootstrapperBuilder UseMySql(\n            this IClaptrapBootstrapperBuilder builder,\n            Func<IClaptrapDesign, bool> designFilter,\n            Action<MySqlProviderConfigurator> mysql)\n        {\n            var configurator = new MySqlProviderConfigurator(designFilter, builder);\n            mysql(configurator);\n            return builder;\n        }\n    }\n}",
        "gt": [
            "'Newbe.Claptrap/src/Newbe.Claptrap.StorageProvider.MySql/Options/IMySqlEventStoreOptions.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.StorageProvider.MySql/Extensions/MySqlStateStoreConfigurator.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.StorageProvider.MySql/Extensions/BootstrapperBuilderExtensions.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap/Design/ClaptrapDesignStore.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap/Bootstrapper/AutofacClaptrapBootstrapperBuilder.cs'",
            "'Newbe.Claptrap/src/Newbe.Claptrap.StorageTestWebApi/Startup.cs'"
        ]
    },
    {
        "files": [
            "'WolvenKit-7/WolvenKit/Forms/frmMimics.cs'",
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAIAnimalCombat.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/Program.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'",
            "'WolvenKit-7/WolvenKit.Render/Animation/ExportAnimation.cs'"
        ],
        "content": "'WolvenKit-7/WolvenKit/Forms/frmMimics.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System.IO;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing IniParserLTK;\n\nusing WolvenKit.CR2W;\n#if !USE_RENDER\nusing WolvenKit.Render;\n#endif\n\nnamespace WolvenKit\n{\n    public partial class frmMimics : Form\n    {\n        private CR2WFile animsFile;\n#if !USE_RENDER\n        private ExportFace exportFac { get; set; }\n#endif\n\n        public frmMimics(string w2animsFilePath = null, string w3facFilePath = null)\n        {\n            InitializeComponent();\n\n            txw3fac.Text = w3facFilePath;\n            txw2anims.Text = w2animsFilePath;\n\n\n            btSave.Enabled =\n                (File.Exists(txw2anims.Text) && Path.GetExtension(txw2anims.Text) == \".w2anims\" || Path.GetExtension(txw2anims.Text) == \".w2cutscene\") &&\n                (File.Exists(txw3fac.Text) && Path.GetExtension(txw3fac.Text) == \".w3fac\");\n            setupcomboBox();\n        }\n\n\n\n\n        private void setupcomboBox()\n        {\n            if (File.Exists(txw2anims.Text))\n            {\n                {\n                    string w3facFilePath = txw3fac.Text;\n                    string w2animsFilePath = txw2anims.Text;\n\n#if !USE_RENDER\n                    exportFac = new ExportFace();\n#endif\n\n                    byte[] animsData;\n                    animsData = File.ReadAllBytes(w2animsFilePath);\n                    using (MemoryStream ms = new MemoryStream(animsData))\n                    using (BinaryReader br = new BinaryReader(ms))\n                    {\n                        animsFile = new CR2WFile()\n                        {\n                            FileName = w2animsFilePath\n                        };\n                        animsFile.Read(br);\n#if !USE_RENDER\n                        exportFac.LoadData(animsFile);\n#endif\n                    }\n                    comboBoxAnim.Items.Clear();\n#if !USE_RENDER\n                    for (int i = 0; i < ExportAnimation.AnimationNames.Count; i++)\n                        comboBoxAnim.Items.Add(ExportAnimation.AnimationNames[i].Key);\n                    comboBoxAnim.SelectedItem = ExportAnimation.AnimationNames[0].Key;\n#endif\n                }\n            }\n            else\n            {\n\n            }\n        }\n\n        private void btnBrowseRig_Click(object sender, EventArgs e)\n        {\n            var dlg = new System.Windows.Forms.OpenFileDialog();\n            dlg.Title = \"Select Witcher 3 Face File.\";\n            dlg.FileName = txw3fac.Text;\n            dlg.Filter = \"Witcher 3 Rig File (*.w3fac)|*.w3fac\";\n            if (dlg.ShowDialog(this) == DialogResult.OK)\n            {\n                txw3fac.Text = dlg.FileName;\n            }\n        }\n\n        private void btSave_Click(object sender, EventArgs e)\n        {\n            if (!File.Exists(txw3fac.Text))\n            {\n                DialogResult = DialogResult.None;\n                txw3fac.Focus();\n                MessageBox.Show(\"Invalid path\", \"failed to save.\");\n                return;\n            }\n\n            if (!File.Exists(txw2anims.Text))\n            {\n                DialogResult = DialogResult.None;\n                txw2anims.Focus();\n                MessageBox.Show(\"Invalid path\", \"failed to save.\");\n                return;\n            }\n            using (var sf = new SaveFileDialog())\n            {\n                sf.Filter = \"W3 json | *.json\";\n                sf.FileName = Path.GetFileName(txw2anims.Text) + \".json\";\n                if (sf.ShowDialog() == DialogResult.OK)\n                {\n#if !USE_RENDER\n                    CommonData cdata = new CommonData();\n                    Rig exportRig = new Rig(cdata);\n#endif\n                    byte[] data;\n                    data = File.ReadAllBytes(txw3fac.Text);\n                    using (MemoryStream ms = new MemoryStream(data))\n                    using (BinaryReader br = new BinaryReader(ms))\n                    {\n                        CR2WFile rigFile = new CR2WFile();\n                        rigFile.Read(br);\n#if !USE_RENDER\n                        exportRig.LoadData(rigFile);\n#endif\n                    }\n\n\n                    MessageBox.Show(this, \"Sucessfully wrote file!\", \"WolvenKit\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                }\n            }\n        }\n\n        private void btBrowseAnims_Click(object sender, EventArgs e)\n        {\n            var dlg = new System.Windows.Forms.OpenFileDialog\n            {\n                Title = \"Select Witcher 3 Animation File.\",\n                FileName = txw3fac.Text,\n                Filter = \"Witcher 3 Animation File (*.w2anims)|*.w2anims|Witcher 3 Cutscene File (*.w2cutscene)|*.w2cutscene\"\n            };\n            if (dlg.ShowDialog(this) == DialogResult.OK)\n            {\n                txw2anims.Text = dlg.FileName;\n            }\n        }\n\n        private void txWCC_Lite_TextChanged(object sender, EventArgs e)\n        {\n            var path = txw2anims.Text;\n            if (File.Exists(path) && (Path.GetExtension(path) == \".w2anims\" || Path.GetExtension(path) == \".w2cutscene\"))\n            {\n                WCCexeTickLBL.Text = \"✓\";\n                WCCexeTickLBL.ForeColor = Color.Green;\n            }\n            else\n            {\n                WCCexeTickLBL.Text = \"X\";\n                WCCexeTickLBL.ForeColor = Color.Red;\n            }\n            btSave.Enabled =\n                (File.Exists(txw2anims.Text) && (Path.GetExtension(txw2anims.Text) == \".w2anims\" || Path.GetExtension(txw2anims.Text) == \".w2cutscene\")) &&\n                (File.Exists(txw3fac.Text) && Path.GetExtension(txw3fac.Text) == \".w3fac\");\n            setupcomboBox();\n        }\n\n        private void txExecutablePath_TextChanged(object sender, EventArgs e)\n        {\n            var path = txw3fac.Text;\n            if (File.Exists(path) && Path.GetExtension(path) == \".w3fac\")\n            {\n                W3exeTickLBL.Text = \"✓\";\n                W3exeTickLBL.ForeColor = Color.Green;\n            }\n            else\n            {\n                W3exeTickLBL.Text = \"X\";\n                W3exeTickLBL.ForeColor = Color.Red;\n            }\n            btSave.Enabled =\n                (File.Exists(txw2anims.Text) && (Path.GetExtension(txw2anims.Text) == \".w2anims\" || Path.GetExtension(txw2anims.Text) == \".w2cutscene\")) &&\n                (File.Exists(txw3fac.Text) && Path.GetExtension(txw3fac.Text) == \".w3fac\");\n        }\n\n        private void comboBoxAnim_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            ComboBox comboBoxAnim = (ComboBox)sender;\n            int resultIndex = -1;\n            string selectedAnim = (string)comboBoxAnim.SelectedItem;\n            resultIndex = comboBoxAnim.FindStringExact(selectedAnim);\n\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAIAnimalCombat.cs'\n:using System.IO;\nusing System.Runtime.Serialization;\nusing WolvenKit.CR2W.Reflection;\nusing FastMember;\nusing static WolvenKit.CR2W.Types.Enums;\n\n\nnamespace WolvenKit.CR2W.Types\n{\n\t[DataContract(Namespace = \"\")]\n\t[REDMeta]\n\tpublic class CAIAnimalCombat : CAICombatTree\n\t{\n\t\t[Ordinal(1)] [RED(\"chanceOfBeingScared\")] \t\tpublic CFloat ChanceOfBeingScared { get; set;}\n\n\t\t[Ordinal(2)] [RED(\"chanceOfBeingScaredRerollTime\")] \t\tpublic CFloat ChanceOfBeingScaredRerollTime { get; set;}\n\n\t\t[Ordinal(3)] [RED(\"scaredIfTargetRuns\")] \t\tpublic CBool ScaredIfTargetRuns { get; set;}\n\n\t\t[Ordinal(4)] [RED(\"maxTolerableTargetDistance\")] \t\tpublic CFloat MaxTolerableTargetDistance { get; set;}\n\n\t\t[Ordinal(5)] [RED(\"maxFleeRunDistance\")] \t\tpublic CFloat MaxFleeRunDistance { get; set;}\n\n\t\t[Ordinal(6)] [RED(\"maxFleeWalkDistance\")] \t\tpublic CFloat MaxFleeWalkDistance { get; set;}\n\n\t\t[Ordinal(7)] [RED(\"stopFleeingDistance\")] \t\tpublic CFloat StopFleeingDistance { get; set;}\n\n\t\t[Ordinal(8)] [RED(\"fleeInGroup\")] \t\tpublic CBool FleeInGroup { get; set;}\n\n\t\t[Ordinal(9)] [RED(\"neutralIsDanger\")] \t\tpublic CBool NeutralIsDanger { get; set;}\n\n\t\tpublic CAIAnimalCombat(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name){ }\n\n\t\tpublic static new CVariable Create(CR2WFile cr2w, CVariable parent, string name) => new CAIAnimalCombat(cr2w, parent, name);\n\n\t\tpublic override void Read(BinaryReader file, uint size) => base.Read(file, size);\n\n\t\tpublic override void Write(BinaryWriter file) => base.Write(file);\n\n\t}\n}\n'WolvenKit-7/WolvenKit.Nvidia/Program.cs'\n:﻿using System;\nusing System.IO;\nusing WolvenKit.Nvidia.HairWorks;\nusing WolvenKit.CR2W;\n\nnamespace WolvenKit.Nvidia\n{\n    class Program\n    {\n\n        [STAThread]\n        static void Main(string[] args)\n        {\n            var br = new BinaryReader(new FileStream(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\hw.redfur\",FileMode.Open));\n            var redfur = new CR2WFile();\n            redfur.Read(br);\n            Apex.HairWorks.ConvertToApexXml(redfur).Save(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\out.apx\");\n            NvidiaXML.BreakXmlHeader(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\out.apx\");\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'\n:﻿using System.Linq;\nusing System.Xml.Linq;\nusing WolvenKit;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit.Nvidia.HairWorks\n{\n    class NvHairAssetDescriptor\n    {\n\n        public string checksum = \"0x299b335f 0x2cad8b54 0xcaf3c98f 0xa3094fa7\";\n\n        public XElement serialize(CFurMeshResource chunk)\n        {\n\n\n            var ret = NvidiaXML.CreateStructHeader(\"\", \"Ref\", \"HairSceneDescriptor\", \"1.0\", checksum);\n            ret.AddNvValue(\"numGuideHairs\", \"U32\", chunk.BoneIndices.Count.ToString());\n            ret.AddNvValue(\"numVertices\",\"U32\", chunk.Positions.Count.ToString());\n            ret.AddNvArray(\"vertices\",\"Vec3\",\"\",Apex.FormatCoordinateArray(chunk.Positions));\n            var endindicies = chunk.EndIndices;\n            ret.AddNvArray(\"endIndices\",\"U32\",endindicies.Count.ToString(),endindicies.Aggregate(\"\",(c,n) => c += \" \" + n));\n            ret.AddNvValue(\"numFaces\",\"U32\",\"\");\n            var faceIndices = chunk.FaceIndices;\n            ret.AddNvArray(\"faceIndices\",\"U32\",faceIndices.Count.ToString(),faceIndices.Aggregate(\"\",(c,n) => c += \" \" + n));\n            ret.AddNvArray(\"faceUVs\",\"Vec2\",\"\",\"\");\n            ret.AddNvValue(\"numBones\", \"U32\", chunk.BoneCount.ToString());\n            ret.AddNvArray(\"boneIndices\",\"Vec4\",\"\",\"\");\n            ret.AddNvArray(\"boneWeights\",\"Vec4\",\"\",\"\");\n            ret.AddNvArray(\"boneNames\",\"U8\",\"\",\"\");\n            ret.AddNvArray(\"boneNameList\",\"String\",\"\",\"\");\n            ret.AddNvArray(\"bindPoses\",\"Mat44\",\"\",\"\");\n            ret.AddNvArray(\"boneParents\",\"I32\",\"\",\"\");\n            ret.AddNvValue(\"numBoneSpheres\",\"U32\",\"\");\n            ret.AddNvArray(\"boneSpheres\",\"Struct\",\"\",\"\");\n            ret.AddNvValue(\"numBoneCapsules\",\"U32\",\"\");\n            ret.AddNvArray(\"boneCapsuleIndices\",\"U32\",\"\",\"\");\n            ret.AddNvValue(\"numPinConstraints\",\"U32\",\"\");\n            ret.AddNvArray(\"pinConstraints\",\"Struct\",\"\",\"\");\n            ret.AddNvValue(\"sceneUnit\",\"F32\",\"\");\n            ret.AddNvValue(\"upAxis\",\"U32\",\"\");\n            ret.AddNvValue(\"handedness\",\"U32\",\"\");\n            return ret;\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.Render/Animation/ExportAnimation.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.IO;\nusing System.Threading.Tasks;\nusing WolvenKit.CR2W;\nusing WolvenKit.CR2W.Types;\nusing Newtonsoft.Json;\nusing IrrlichtLime;\nusing IrrlichtLime.Core;\nusing IrrlichtLime.Scene;\n\nnamespace WolvenKit.Render\n{\n\n    class AnimExportData\n    {\n        public string name;\n        public List<Bone> bones;\n        public float duration;\n        public uint numFrames;\n        public float dt;\n    }\n\n\n    public class ExportAnimation\n    {\n        AnimExportData exportData = new AnimExportData();\n        List<Bone> bones = new List<Bone>();\n        private float animationSpeed = 0;\n        private List<List<uint>> positionsKeyframes = new List<List<uint>>();\n        private List<List<uint>> orientKeyframes = new List<List<uint>>();\n        private List<List<uint>> scalesKeyframes = new List<List<uint>>();\n        private List<List<Vector3Df>> positions = new List<List<Vector3Df>>();\n        private List<List<Quaternion>> orientations = new List<List<Quaternion>>();\n        private List<List<Vector3Df>> orientationsEuler = new List<List<Vector3Df>>();\n        private List<List<Vector3Df>> scales = new List<List<Vector3Df>>();\n        private List<SAnimationBufferBitwiseCompressedBoneTrack> currentBones = new List<SAnimationBufferBitwiseCompressedBoneTrack>();\n        public string currentAnimName;\n\n        public static List<KeyValuePair<string, int>> AnimationNames = new List<KeyValuePair<string, int>>();\n        public ExportAnimation()\n        {\n        }\n\n\n\n        public void LoadData(CR2WFile animFile)\n        {\n            AnimationNames.Clear();\n            if (animFile != null)\n                foreach (var chunk in animFile.chunks)\n                {\n                    if (chunk.REDType == \"CSkeletalAnimation\" && chunk.data is CSkeletalAnimation anim)\n                    {\n                        var name = anim.Name;\n                        var chunkIdx = anim.AnimBuffer.Reference.ChunkIndex;\n                        AnimationNames.Add(new KeyValuePair<string, int>(name.Value, chunkIdx));\n                    }\n                }\n            SelectAnimation(animFile, 0);\n        }\n\n\n\n\n        public void SelectAnimation(CR2WFile animFile, int selectedAnimIdx)\n        {\n            positionsKeyframes.Clear();\n            orientKeyframes.Clear();\n            scalesKeyframes.Clear();\n            positions.Clear();\n            orientations.Clear();\n            orientationsEuler.Clear();\n            scales.Clear();\n            currentBones.Clear();\n\n            if (animFile != null)\n                foreach (var chunk in animFile.chunks)\n                {\n                    if (chunk.REDType == \"CAnimationBufferMultipart\" && chunk.ChunkIndex == AnimationNames[selectedAnimIdx].Value\n                        && chunk.data is CAnimationBufferMultipart multipart)\n                    {\n                        foreach (CPtr<IAnimationBuffer> Buffer in multipart.Parts)\n                        {\n                            var a_buffer = Buffer.Reference;\n\n                            throw new NotImplementedException();\n\n\n\n                        }\n                        break;\n                    }\n                    if (chunk.REDType == \"CAnimationBufferBitwiseCompressed\" && chunk.ChunkIndex == AnimationNames[selectedAnimIdx].Value)\n                    {\n                        readBuffer(chunk.data as CAnimationBufferBitwiseCompressed, selectedAnimIdx, animFile);\n                        break;\n                    }\n                }\n        }\n\n        public void readBuffer(CAnimationBufferBitwiseCompressed buffer, int selectedAnimIdx, CR2WFile animFile)\n        {\n            uint numFrames = buffer.NumFrames.val;\n            float animDuration = buffer.Duration?.val ?? 1.0f;\n            animationSpeed = numFrames / animDuration;\n            uint keyFrame = 0;\n            byte[] data;\n\n            currentAnimName = AnimationNames[selectedAnimIdx].Key;\n            exportData.name = AnimationNames[selectedAnimIdx].Key;\n            exportData.duration = animDuration;\n            exportData.numFrames = numFrames;\n            exportData.dt = buffer.Dt?.val ?? 0.03333333f;\n            DeferredDataBuffer deferredData = buffer.DeferredData;\n            var streamingOption = buffer.StreamingOption;\n\n            if (deferredData != null && deferredData.Bufferdata.val != 0)\n                if (streamingOption.WrappedEnum == Enums.SAnimationBufferStreamingOption.ABSO_PartiallyStreamable)\n                    data = ConvertAnimation.Combine(buffer.Data.Bytes,\n                    File.ReadAllBytes(animFile.FileName + \".\" + deferredData.Bufferdata.val + \".buffer\"));\n                else\n                    data = File.ReadAllBytes(animFile.FileName + \".\" + deferredData.Bufferdata.val + \".buffer\");\n            else\n                data = buffer.Data.Bytes;\n            using (MemoryStream ms = new MemoryStream(data))\n            using (BinaryReader br = new BinaryReader(ms))\n            {\n                foreach (SAnimationBufferBitwiseCompressedBoneTrack bone in buffer.Bones)\n                {\n                    List<uint> currkeyframe = new List<uint>();\n                    List<Quaternion> currorient = new List<Quaternion>();\n                    List<Vector3Df> currorientEuler = new List<Vector3Df>();\n                    currentBones.Add(bone);\n\n                    br.BaseStream.Position = bone.Orientation.DataAddr.val;\n                    int orientNumFrames = bone.Orientation.NumFrames.val;\n\n                    for (uint idx = 0; idx < orientNumFrames; idx++)\n                    {\n                        keyFrame = idx;\n\n                        currkeyframe.Add(keyFrame);\n\n                        byte[] odata = br.ReadBytes(6);\n                        ulong bits = (ulong)odata[0] << 40 | (ulong)odata[1] << 32 | (ulong)odata[2] << 24 | (ulong)odata[3] << 16 | (ulong)odata[4] << 8 | odata[5];\n\n                        ushort[] orients = new ushort[4];\n                        float[] quart = new float[4];\n                        orients[0] = (ushort)((bits & 0x0000FFF000000000) >> 36);\n                        orients[1] = (ushort)((bits & 0x0000000FFF000000) >> 24);\n                        orients[2] = (ushort)((bits & 0x0000000000FFF000) >> 12);\n                        orients[3] = (ushort)((bits & 0x0000000000000FFF));\n\n                        for (int i = 0; i < orients.Length; i++)\n                        {\n                            float fVal = (2047.0f - orients[i]) * (1 / 2048.0f);\n                            quart[i] = fVal;\n                        }\n                        quart[3] = -quart[3];\n\n                        Quaternion orientation = new Quaternion(quart[0], quart[1], quart[2], quart[3]);\n                        currorient.Add(orientation);\n                        Vector3Df euler = orientation.ToEuler();\n                        currorientEuler.Add(euler);\n\n                    }\n\n                    orientKeyframes.Add(currkeyframe);\n                    orientations.Add(currorient);\n                    orientationsEuler.Add(currorientEuler);\n\n\n                    List<Vector3Df> currposition = new List<Vector3Df>();\n                    currkeyframe = new List<uint>();\n                    int compression = 0;\n                    var compr = bone.Position.Compression;\n                    if (compr != null)\n                        compression = compr.val;\n                    var addr = bone.Position.DataAddr;\n                    if (addr != null)\n                        br.BaseStream.Position = addr.val;\n                    else\n                        br.BaseStream.Position = 0;\n                    var posNumFrames = bone.Position.NumFrames.val;\n                    for (uint idx = 0; idx < posNumFrames; idx++)\n                    {\n                        keyFrame = idx;\n\n                        currkeyframe.Add(keyFrame);\n                        var vec = new SVector3D(null, null, \"\");\n                        vec.Read(br, compression);\n                        Vector3Df pos = new Vector3Df(vec.X.val, vec.Y.val, vec.Z.val);\n                        currposition.Add(pos);\n                    }\n                    positionsKeyframes.Add(currkeyframe);\n                    positions.Add(currposition);\n\n                    List<Vector3Df> currscale = new List<Vector3Df>();\n                    currkeyframe = new List<uint>();\n                    compression = 0;\n                    compr = bone.Scale.Compression;\n                    if (compr != null)\n                        compression = compr.val;\n                    addr = bone.Scale.DataAddr;\n                    if (addr != null)\n                        br.BaseStream.Position = addr.val;\n                    else\n                        br.BaseStream.Position = 0;\n                    var scaleNumFrames = bone.Scale.NumFrames.val;\n                    for (uint idx = 0; idx < scaleNumFrames; idx++)\n                    {\n                        keyFrame = idx;\n\n                        currkeyframe.Add(keyFrame);\n                        var vec = new SVector3D(null, null, \"\");\n                        vec.Read(br, compression);\n                        Vector3Df scale = new Vector3Df(vec.X.val, vec.Y.val, vec.Z.val);\n                        currscale.Add(scale);\n                    }\n                    scalesKeyframes.Add(currkeyframe);\n                    scales.Add(currscale);\n                }\n            }\n        }\n\n\n\n\n\n        public void Apply(Rig rig)\n        {\n            bones.Clear();\n            Vector3Df current;\n            for (int i = 0; i < orientations.Count; i++)\n            {\n                Bone bone = new Bone();\n                bones.Add(bone);\n\n                var animBone = currentBones[i];\n\n                var positionVar = animBone.Position;\n                CFloat dtPos = positionVar.Dt;\n                CUInt32 dataAddrPos = positionVar.DataAddr;\n                CUInt32 dataAddrFallbackPos = positionVar.DataAddrFallback;\n                CUInt16 numframesPos = positionVar.NumFrames;\n                if (dtPos != null)\n                    bone.position_dt = dtPos.val;\n                if (dataAddrPos != null)\n                    bone.position_dataAddr = dataAddrPos.val;\n                if (dataAddrFallbackPos != null)\n                    bone.position_dataAddrFallback = dataAddrFallbackPos.val;\n                if (numframesPos != null)\n                    bone.position_numFrames = numframesPos.val;\n\n                var orientationVar = animBone.Orientation;\n                CFloat dtRot = orientationVar.Dt;\n                CUInt32 dataAddrRot = orientationVar.DataAddr;\n                CUInt32 dataAddrFallbackRot = orientationVar.DataAddrFallback;\n                CUInt16 numframesRot = orientationVar.NumFrames;\n                if (dtRot != null)\n                    bone.rotation_dt = dtRot.val;\n                if (dataAddrRot != null)\n                    bone.rotation_dataAddr = dataAddrRot.val;\n                if (dataAddrFallbackRot != null)\n                    bone.rotation_dataAddrFallback = dataAddrFallbackRot.val;\n                if (numframesRot != null)\n                    bone.rotation_numFrames = numframesRot.val;\n\n                var scaleVar = animBone.Scale;\n                CFloat dtScale = scaleVar.Dt;\n                CUInt32 dataAddrScale = scaleVar.DataAddr;\n                CUInt32 dataAddrFallbackScale = scaleVar.DataAddrFallback;\n                CUInt16 numframesScale = scaleVar.NumFrames;\n                if (dtScale != null)\n                    bone.scale_dt = dtScale.val;\n                if (dataAddrScale != null)\n                    bone.scale_dataAddr = dataAddrScale.val;\n                if (dataAddrFallbackScale != null)\n                    bone.scale_dataAddrFallback = dataAddrFallbackScale.val;\n                if (numframesScale != null)\n                    bone.scale_numFrames = numframesScale.val;\n\n                bone.BoneName = rig.meshSkeleton.names[i];\n                for (int j = 0; j < positions[i].Count; j++)\n                {\n                    bone.positionFrames.Add(new Vector(positions[i][j].X, positions[i][j].Y, positions[i][j].Z));\n                }\n\n                for (int j = 0; j < orientations[i].Count; j++)\n                {\n                    current = orientationsEuler[i][j];\n                    bone.rotationFrames.Add(orientations[i][j]);\n                }\n\n                for (int j = 0; j < scales[i].Count; j++)\n                {\n                    bone.scaleFrames.Add(new Vector(scales[i][j].X, scales[i][j].Y, scales[i][j].Z));\n                }\n            }\n            exportData.bones = bones;\n        }\n\n        public void SaveJson(string filename)\n        {\n\n            using (StreamWriter file = File.CreateText(filename))\n            {\n                JsonSerializer serializer = new JsonSerializer();\n                serializer.Formatting = Formatting.Indented;\n\n                serializer.Serialize(file, exportData);\n            }\n        }\n    }\n}\n",
        "gt": [
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAIAnimalCombat.cs'",
            "'WolvenKit-7/WolvenKit.Render/Animation/ExportAnimation.cs'",
            "'WolvenKit-7/WolvenKit/Forms/frmMimics.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/Program.cs'"
        ]
    },
    {
        "files": [
            "'THREE/THREEExample/3rd/Typography.GlyphLayout/GlyphSubstitution.cs'",
            "'THREE/THREEExample/3rd/DrawingGL.Text/TextPrinter.cs'",
            "'THREE/THREEExample/3rd/Typography.OpenFont/Tables.AdvancedLayout/CPAL.cs'"
        ],
        "content": "'THREE/THREEExample/3rd/Typography.GlyphLayout/GlyphSubstitution.cs'\n:﻿\n\nusing System;\nusing System.Collections.Generic;\nusing Typography.OpenFont;\nusing Typography.OpenFont.Tables;\n\nnamespace Typography.TextLayout\n{\n\n\n\n    class GSubLkContext\n    {\n        public readonly GSUB.LookupTable lookup;\n        public GSubLkContextName ContextName;\n#if DEBUG\n        public string dbugFeatureName;\n#endif\n        public GSubLkContext(GSUB.LookupTable lookup)\n        {\n            this.lookup = lookup;\n        }\n\n\n        int _glyphCount;\n        public void SetGlyphCount(int glyphCount)\n        {\n            _glyphCount = glyphCount;\n        }\n        public bool WillCheckThisGlyph(int pos)\n        {\n            switch (ContextName)\n            {\n                default: return true;\n                case GSubLkContextName.Init: return _glyphCount > 1 && pos == 0;\n                case GSubLkContextName.Medi: return _glyphCount > 2 && (pos > 0 && pos < _glyphCount);\n                case GSubLkContextName.Fina: return _glyphCount > 1 && pos == _glyphCount - 1;\n            }\n        }\n    }\n\n\n    enum GSubLkContextName : byte\n    {\n        None,\n\n        Fina,\n        Init,\n        Medi\n    }\n\n\n    static class KnownLayoutTags\n    {\n\n        static readonly Dictionary<string, bool> s_knownGSubTags = new Dictionary<string, bool>();\n\n        static KnownLayoutTags()\n        {\n\n            CollectTags(s_knownGSubTags, \"ccmp\");\n\n            CollectTags(s_knownGSubTags, \"liga,dlig,falt,rclt,rlig,locl,init,medi,fina,isol\");\n\n            CollectTags(s_knownGSubTags, \"math,ssty,dlts,flac\");\n\n            CollectTags(s_knownGSubTags, \"abvs,akhn,blwf,blws,cjct,half,haln,nukt,pres,psts,rkrf,rphf\");\n        }\n\n        public static bool IsKnownGSUB_Tags(string tagName) => s_knownGSubTags.ContainsKey(tagName);\n\n        static void CollectTags(Dictionary<string, bool> dic, string tags_str)\n        {\n            string[] tags = tags_str.Split(',');\n            for (int i = 0; i < tags.Length; ++i)\n            {\n                dic[tags[i].Trim()] = true;\n            }\n        }\n    }\n\n\n\n\n\n\n    class GlyphSubstitution\n    {\n\n        bool _enableLigation = true;\n        bool _enableComposition = true;\n        bool _mustRebuildTables = true;\n        bool _enableMathFeature = true;\n\n        readonly Typeface _typeface;\n\n        public GlyphSubstitution(Typeface typeface, uint scriptTag, uint langTag)\n        {\n            ScriptTag = scriptTag;\n            LangTag = langTag;\n\n            _typeface = typeface;\n            _mustRebuildTables = true;\n        }\n#if DEBUG\n        public string dbugScriptLang;\n#endif\n\n        public void DoSubstitution(IGlyphIndexList glyphIndexList)\n        {\n\n            if (_mustRebuildTables)\n            {\n                RebuildTables();\n                _mustRebuildTables = false;\n            }\n\n\n\n\n\n\n            foreach (GSubLkContext lookupCtx in _lookupTables)\n            {\n                GSUB.LookupTable lookupTable = lookupCtx.lookup;\n                lookupCtx.SetGlyphCount(glyphIndexList.Count);\n\n                for (int pos = 0; pos < glyphIndexList.Count; ++pos)\n                {\n                    if (!lookupCtx.WillCheckThisGlyph(pos))\n                    {\n                        continue;\n                    }\n                    lookupTable.DoSubstitutionAt(glyphIndexList, pos, glyphIndexList.Count - pos);\n                }\n            }\n        }\n\n        public uint ScriptTag { get; }\n        public uint LangTag { get; }\n\n\n\n\n        public bool EnableLigation\n        {\n            get => _enableLigation;\n            set\n            {\n                if (value != _enableLigation)\n                {\n                    _mustRebuildTables = true;\n                }\n                _enableLigation = value;\n            }\n        }\n\n\n\n\n        public bool EnableComposition\n        {\n            get => _enableComposition;\n            set\n            {\n                if (value != _enableComposition)\n                {\n\n                    _mustRebuildTables = true;\n                }\n                _enableComposition = value;\n            }\n        }\n\n        public bool EnableMathFeature\n        {\n            get => _enableMathFeature;\n            set\n            {\n                if (value != _enableMathFeature)\n                {\n                    _mustRebuildTables = true;\n                }\n                _enableMathFeature = value;\n            }\n        }\n\n        internal List<GSubLkContext> _lookupTables = new List<GSubLkContext>();\n\n        internal void RebuildTables()\n        {\n            _lookupTables.Clear();\n\n\n            GSUB gsubTable = _typeface.GSUBTable;\n            ScriptTable scriptTable = gsubTable.ScriptList[ScriptTag];\n            if (scriptTable == null) return;\n\n\n            ScriptTable.LangSysTable selectedLang = null;\n            if (LangTag == 0)\n            {\n\n                selectedLang = scriptTable.defaultLang;\n\n                if (selectedLang == null && scriptTable.langSysTables != null && scriptTable.langSysTables.Length > 0)\n                {\n\n\n\n\n                    selectedLang = scriptTable.langSysTables[0];\n                }\n            }\n            else\n            {\n                if (LangTag == scriptTable.defaultLang.langSysTagIden)\n                {\n\n                    selectedLang = scriptTable.defaultLang;\n                }\n\n                if (scriptTable.langSysTables != null && scriptTable.langSysTables.Length > 0)\n                {\n\n\n                    for (int i = 0; i < scriptTable.langSysTables.Length; ++i)\n                    {\n                        ScriptTable.LangSysTable s = scriptTable.langSysTables[i];\n                        if (s.langSysTagIden == LangTag)\n                        {\n\n                            selectedLang = s;\n                            break;\n                        }\n                    }\n                }\n            }\n\n\n\n\n\n\n#if DEBUG\n            if (selectedLang == null)\n            {\n\n                throw new NotSupportedException();\n            }\n            if (selectedLang.HasRequireFeature)\n            {\n\n            }\n#endif\n\n            if (selectedLang.featureIndexList == null)\n            {\n                return;\n            }\n\n\n\n            foreach (ushort featureIndex in selectedLang.featureIndexList)\n            {\n                FeatureList.FeatureTable feature = gsubTable.FeatureList.featureTables[featureIndex];\n                bool includeThisFeature = false;\n                GSubLkContextName contextName = GSubLkContextName.None;\n\n                switch (feature.TagName)\n                {\n                    case \"ccmp\":\n                        includeThisFeature = EnableComposition;\n                        break;\n                    case \"liga\":\n                        includeThisFeature = EnableLigation;\n                        break;\n                    case \"init\":\n                        includeThisFeature = true;\n                        contextName = GSubLkContextName.Init;\n                        break;\n                    case \"medi\":\n                        includeThisFeature = true;\n                        contextName = GSubLkContextName.Medi;\n                        break;\n                    case \"fina\":\n\n\n                        includeThisFeature = true;\n                        contextName = GSubLkContextName.Fina;\n                        break;\n                    default:\n                        {\n\n\n                            includeThisFeature = true;\n                            if (!KnownLayoutTags.IsKnownGSUB_Tags(feature.TagName))\n                            {\n                                includeThisFeature = false;\n\n#if DEBUG\n\n                                System.Diagnostics.Debug.WriteLine(\"gsub_skip_feature_tag:\" + feature.TagName);\n#endif\n                            }\n                            else\n                            {\n\n                            }\n                        }\n                        break;\n                }\n\n\n\n                if (includeThisFeature)\n                {\n                    foreach (ushort lookupIndex in feature.LookupListIndices)\n                    {\n                        var gsubcontext = new GSubLkContext(gsubTable.LookupList[lookupIndex]) { ContextName = contextName };\n#if DEBUG\n                        gsubcontext.dbugFeatureName = feature.TagName;\n#endif\n\n                        _lookupTables.Add(gsubcontext);\n                    }\n                }\n            }\n        }\n\n\n\n\n\n        public void CollectAdditionalSubstitutionGlyphIndices(List<ushort> outputGlyphIndices)\n        {\n            if (_mustRebuildTables)\n            {\n                RebuildTables();\n                _mustRebuildTables = false;\n            }\n\n\n\n            foreach (GSubLkContext subLkctx in _lookupTables)\n            {\n                subLkctx.lookup.CollectAssociatedSubstitutionGlyph(outputGlyphIndices);\n            }\n\n\n\n        }\n    }\n\n}\n\nnamespace Typography.OpenFont.Extensions\n{\n\n    public static class TypefaceExtension5\n    {\n        public static void CollectAdditionalGlyphIndices(this Typeface typeface, List<ushort> outputGlyphs, ScriptLang scLang)\n        {\n            if (typeface.GSUBTable != null)\n            {\n                (new Typography.TextLayout.GlyphSubstitution(typeface, scLang.scriptTag, scLang.sysLangTag)).CollectAdditionalSubstitutionGlyphIndices(outputGlyphs);\n            }\n        }\n    }\n}\n\n\n'THREE/THREEExample/3rd/DrawingGL.Text/TextPrinter.cs'\n:﻿\nusing System.Collections.Generic;\nusing Typography.OpenFont;\nusing Typography.TextLayout;\nusing Typography.Contours;\nusing Tesselate;\n\nnamespace DrawingGL.Text\n{\n\n\n\n    class TextPrinter : TextPrinterBase\n    {\n\n\n\n\n        GlyphTranslatorToPath _pathTranslator;\n        string _currentFontFile;\n        GlyphOutlineBuilder _currentGlyphPathBuilder;\n\n\n\n\n        readonly SimpleCurveFlattener _curveFlattener;\n        readonly Tesselate.TessTool _tessTool;\n\n        Typeface _currentTypeface;\n\n\n        struct ProcessedGlyph\n        {\n            public readonly float[] tessData;\n            public readonly ushort vertextCount;\n            public ProcessedGlyph(float[] tessData, ushort vertextCount)\n            {\n                this.tessData = tessData;\n                this.vertextCount = vertextCount;\n            }\n        }\n        GlyphMeshCollection<ProcessedGlyph> _glyphMeshCollection = new GlyphMeshCollection<ProcessedGlyph>();\n\n        public TextPrinter()\n        {\n            FontSizeInPoints = 14;\n\n            ScriptLang = new ScriptLang(\"latn\");\n\n\n            _curveFlattener = new SimpleCurveFlattener();\n\n            _tessTool = new Tesselate.TessTool();\n        }\n\n\n        public override void DrawFromGlyphPlans(GlyphPlanSequence glyphPlanList, int startAt, int len, float x, float y)\n        {\n            throw new System.NotImplementedException();\n        }\n        public override GlyphLayout GlyphLayoutMan { get; } = new GlyphLayout();\n\n        public override Typeface Typeface\n        {\n            get => _currentTypeface;\n            set\n            {\n                _currentTypeface = value;\n                GlyphLayoutMan.Typeface = value;\n            }\n        }\n        public MeasuredStringBox Measure(char[] textBuffer, int startAt, int len)\n        {\n            return GlyphLayoutMan.LayoutAndMeasureString(\n                textBuffer, startAt, len,\n                this.FontSizeInPoints\n                );\n        }\n\n\n\n\n        public string FontFilename\n        {\n            get => _currentFontFile;\n            set\n            {\n                if (_currentFontFile != value)\n                {\n                    _currentFontFile = value;\n\n\n                    using (var stream = Utility.ReadFile(value))\n                    {\n                        var reader = new OpenFontReader();\n                        Typeface = reader.Read(stream);\n                    }\n\n\n                    _currentGlyphPathBuilder = new GlyphOutlineBuilder(Typeface);\n                    _currentGlyphPathBuilder.UseTrueTypeInstructions = false;\n                    _currentGlyphPathBuilder.UseVerticalHinting = false;\n                    switch (this.HintTechnique)\n                    {\n                        case HintTechnique.TrueTypeInstruction:\n                            _currentGlyphPathBuilder.UseTrueTypeInstructions = true;\n                            break;\n                        case HintTechnique.TrueTypeInstruction_VerticalOnly:\n                            _currentGlyphPathBuilder.UseTrueTypeInstructions = true;\n                            _currentGlyphPathBuilder.UseVerticalHinting = true;\n                            break;\n                        case HintTechnique.CustomAutoFit:\n\n                            break;\n                    }\n\n\n                    _pathTranslator = new GlyphTranslatorToPath();\n\n\n                    GlyphLayoutMan.ScriptLang = this.ScriptLang;\n                    GlyphLayoutMan.PositionTechnique = this.PositionTechnique;\n                    GlyphLayoutMan.EnableLigature = this.EnableLigature;\n                }\n            }\n        }\n\n\n        UnscaledGlyphPlanList _resuableGlyphPlanList = new UnscaledGlyphPlanList();\n\n\n\n\n\n\n\n\n        public void GenerateGlyphRuns(TextRun outputTextRun, char[] charBuffer, int start, int len)\n        {\n\n            float sizeInPoints = this.FontSizeInPoints;\n            outputTextRun.typeface = this.Typeface;\n            outputTextRun.sizeInPoints = sizeInPoints;\n\n\n\n            _glyphMeshCollection.SetCacheInfo(this.Typeface, 0, this.HintTechnique);\n\n\n            GlyphLayoutMan.Typeface = this.Typeface;\n            GlyphLayoutMan.Layout(charBuffer, start, len);\n\n            float pxscale = this.Typeface.CalculateScaleToPixelFromPointSize(sizeInPoints);\n\n            _resuableGlyphPlanList.Clear();\n            GenerateGlyphPlan(charBuffer, 0, charBuffer.Length, _resuableGlyphPlanList);\n\n\n            int planCount = _resuableGlyphPlanList.Count;\n            for (var i = 0; i < planCount; ++i)\n            {\n\n                _pathTranslator.Reset();\n\n\n\n                UnscaledGlyphPlan glyphPlan = _resuableGlyphPlanList[i];\n\n\n\n\n\n\n                if (!_glyphMeshCollection.TryGetCacheGlyph(glyphPlan.glyphIndex, out ProcessedGlyph processGlyph))\n                {\n\n                    var writablePath = new WritablePath();\n                    _pathTranslator.SetOutput(writablePath);\n                    _currentGlyphPathBuilder.BuildFromGlyphIndex(glyphPlan.glyphIndex, sizeInPoints);\n                    _currentGlyphPathBuilder.ReadShapes(_pathTranslator);\n\n\n\n                    float[] flattenPoints = _curveFlattener.Flatten(writablePath._points, out int[] endContours);\n\n                    float[] tessData = _tessTool.TessAsTriVertexArray(flattenPoints, endContours, out int vertexCount);\n                    processGlyph = new ProcessedGlyph(tessData, (ushort)vertexCount);\n\n                    _glyphMeshCollection.RegisterCachedGlyph(glyphPlan.glyphIndex, processGlyph);\n                }\n\n                outputTextRun.AddGlyph(\n                    new GlyphRun(glyphPlan,\n                        processGlyph.tessData,\n                        processGlyph.vertextCount));\n            }\n        }\n        public override void DrawString(char[] textBuffer, int startAt, int len, float x, float y)\n        {\n\n        }\n\n    }\n\n\n}\n'THREE/THREEExample/3rd/Typography.OpenFont/Tables.AdvancedLayout/CPAL.cs'\n:﻿\n\nusing System.IO;\n\nnamespace Typography.OpenFont.Tables\n{\n    public class CPAL : TableEntry\n    {\n        public const string _N = \"CPAL\";\n        public override string Name => _N;\n\n\n        byte[] _colorBGRABuffer;\n\n\n\n\n        protected override void ReadContentFrom(BinaryReader reader)\n        {\n            long beginAt = reader.BaseStream.Position;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n            ushort version = reader.ReadUInt16();\n            ushort numPaletteEntries = reader.ReadUInt16();\n            ushort numPalettes = reader.ReadUInt16();\n            ColorCount = reader.ReadUInt16();\n            uint offsetFirstColorRecord = reader.ReadUInt32();\n            Palettes = Utils.ReadUInt16Array(reader, numPalettes);\n\n#if DEBUG\n            if (version == 1)\n            {\n\n\n\n            }\n#endif\n\n\n            reader.BaseStream.Seek(beginAt + offsetFirstColorRecord, SeekOrigin.Begin);\n            _colorBGRABuffer = reader.ReadBytes(4 * ColorCount);\n        }\n\n        public ushort[] Palettes { get; private set; }\n        public ushort ColorCount { get; private set; }\n        public void GetColor(int colorIndex, out byte r, out byte g, out byte b, out byte a)\n        {\n\n\n\n\n\n\n\n            byte[] colorBGRABuffer = _colorBGRABuffer;\n            int startAt = colorIndex * 4;\n            b = colorBGRABuffer[startAt];\n            g = colorBGRABuffer[startAt + 1];\n            r = colorBGRABuffer[startAt + 2];\n            a = colorBGRABuffer[startAt + 3];\n        }\n    }\n}\n\n",
        "gt": [
            "'THREE/THREEExample/3rd/Typography.OpenFont/Tables.AdvancedLayout/CPAL.cs'",
            "'THREE/THREEExample/3rd/Typography.GlyphLayout/GlyphSubstitution.cs'",
            "'THREE/THREEExample/3rd/DrawingGL.Text/TextPrinter.cs'"
        ]
    },
    {
        "files": [
            "'THREE/ThreeSilkExample/LearningThreeJs/Utils/MaterialExampleTemplate.cs'",
            "'THREE/ThreeSilkExample/LearningThreeJs/Chapter03/AmbientLightExample.cs'",
            "'THREE/THREE/Core/GLBufferAttribute.cs'",
            "'THREE/SilkDemo/SilkDemoWindow.cs'"
        ],
        "content": "'THREE/ThreeSilkExample/LearningThreeJs/Utils/MaterialExampleTemplate.cs'\n:﻿using ImGuiNET;\nusing System.Collections.Generic;\nusing THREE;\nusing THREE.Silk;\nusing Color = THREE.Color;\nnamespace THREE.Silk.Example.Learning.Utils\n{\n    public class MaterialExampleTemplate : Example\n    {\n\n        public Dictionary<string, Material> materialsLib = new Dictionary<string, Material>();\n\n        int wireframeLinejoinIndex = 0;\n        int wireframeLinecapIndex = 0;\n\n        public MaterialExampleTemplate() : base()\n        {\n        }\n\n\n\n        public override void InitCamera()\n        {\n            base.InitCamera();\n            camera.Position.Set(0, 20, 40);\n            camera.LookAt(new THREE.Vector3(10,0,0));\n        }\n\n        public virtual void MaterialsGUIControls()\n        {\n            foreach (var item in materialsLib)\n            {\n                AddBasicMaterialSettings(item.Value, item.Key + \"-THREE.Material\");\n                AddSpecificMaterialSettings(item.Value, item.Key + \"-THREE.MeshStandardMaterial\");\n            }\n        }\n\n        public virtual void AddBasicMaterialSettings(Material material, string name)\n        {\n            int currentSide = material.Side;\n            int shadowSide = material.ShadowSide == null ? 0 : material.ShadowSide.Value;\n            if (ImGui.TreeNode(name))\n            {\n                ImGui.Text($\"id={material.Id}\");\n                ImGui.Text($\"uuid={material.Uuid}\");\n                ImGui.Text($\"name={material.Name}\");\n                ImGui.SliderFloat(\"opacity\", ref material.Opacity, 0.0f, 1.0f);\n                ImGui.Checkbox(\"transparent\", ref material.Transparent);\n                ImGui.Checkbox(\"visible\", ref material.Visible);\n                if (ImGui.Combo(\"side\", ref currentSide, \"FrontSide\\0BackSide\\0BothSide\\0\"))\n                {\n                    material.Side = currentSide;\n                }\n                ImGui.Checkbox(\"colorWrite\", ref material.ColorWrite);\n                if (ImGui.Checkbox(\"flatShading\", ref material.FlatShading))\n                {\n                    material.NeedsUpdate = true;\n                }\n                ImGui.Checkbox(\"premultipliedAlpha\", ref material.PremultipliedAlpha);\n                ImGui.Checkbox(\"dithering\", ref material.Dithering);\n                if (ImGui.Combo(\"shadowSide\", ref shadowSide, \"FrontSide\\0BackSide\\0BothSide\\0\"))\n                {\n                    material.ShadowSide = shadowSide;\n                }\n                ImGui.Checkbox(\"fog\", ref material.Fog);\n                ImGui.TreePop();\n            }\n        }\n        public virtual void AddColorPicker(Material material)\n        {\n            System.Numerics.Vector3 color = new System.Numerics.Vector3(material.Color.Value.R, material.Color.Value.G, material.Color.Value.B);\n            if(ImGui.ColorPicker3(\"color\",ref color))\n            {\n                material.Color = new Color(color.X, color.Y, color.Z);\n            }\n        }\n        public virtual void AddEmissivePicker(Material material)\n        {\n\n        }\n        public virtual void AddSpecularPicker(Material material)\n        {\n\n        }\n        public virtual void AddShiness(Material material)\n        {\n\n        }\n        public virtual void AddRoughness(Material material)\n        {\n\n        }\n        public virtual void AddMetalness(Material material)\n        {\n\n        }\n        public virtual void AddWireframeProperty(Material material)\n        {\n            ImGui.Checkbox(\"wireframe\", ref material.Wireframe);\n            ImGui.SliderFloat(\"wireframeLineWidth\", ref material.WireframeLineWidth, 0, 20);\n        }\n        public virtual void AddWireframeLineProperty(Material material)\n        {\n            if(ImGui.Combo(\"wireframeLinejoin\",ref wireframeLinejoinIndex, \"round\\0bevel\\0miter\\0\"))\n            {\n                if (wireframeLinejoinIndex == 0) material.WireframeLineJoin = \"round\";\n                else if (wireframeLinejoinIndex == 1) material.WireframeLineJoin = \"bevel\";\n                else  material.WireframeLineJoin = \"miter\";\n            }\n            if (ImGui.Combo(\"wireframeLinecap\", ref wireframeLinecapIndex, \"butt\\0round\\0square\\0\"))\n            {\n                if (wireframeLinecapIndex == 0) material.WireframeLineCap = \"round\";\n                else if (wireframeLinecapIndex == 1) material.WireframeLineCap = \"bevel\";\n                else material.WireframeLineCap = \"miter\";\n            }\n        }\n        public virtual void AddSpecificMaterialSettings(Material material, string name)\n        {\n            Color? materialColor = material.Color;\n            Color? emissiveColor = material.Emissive;\n\n            if (ImGui.TreeNode(name))\n            {\n                if (materialColor != null)\n                    AddColorPicker(material);\n                if (emissiveColor != null)\n                    AddEmissivePicker(material);\n                AddSpecularPicker(material);\n                AddShiness(material);\n                AddMetalness(material);\n                AddRoughness(material);\n                AddWireframeProperty(material);\n                ImGui.TreePop();\n            }\n        }\n    }\n}\n\n'THREE/ThreeSilkExample/LearningThreeJs/Chapter03/AmbientLightExample.cs'\n:﻿using ImGuiNET;\n\nusing THREE;\nusing THREE.Silk;\nusing THREE.Silk.Example.Learning.Utils;\n\nnamespace THREE.Silk.Example\n{\n    [Example(\"01.Ambient-Light\", ExampleCategory.LearnThreeJS, \"Chapter03\")]\n    public class AmbientLightExample : Example\n    {\n\n\n        AmbientLight ambientLight;\n        SpotLight spotLight;\n\n        public AmbientLightExample() : base()\n        {\n        }\n        public override void InitRenderer()\n        {\n            base.InitRenderer();\n            this.renderer.SetClearColor(THREE.Color.Hex(0x000000));\n        }\n\n        public override void InitLighting()\n        {\n            base.InitLighting();\n            ambientLight = new AmbientLight(THREE.Color.Hex(0x606008), 1);\n            scene.Add(ambientLight);\n\n            spotLight = new SpotLight(THREE.Color.Hex(0xffffff), 1, 180, (float)System.Math.PI / 4);\n            spotLight.Shadow.MapSize.Set(2048, 2048);\n            spotLight.Position.Set(-30, 40, -10);\n            spotLight.CastShadow = true;\n            scene.Add(spotLight);\n        }\n        public override void Init()\n        {\n            base.Init();\n            DemoUtils.AddHouseAndTree(scene);\n\n            AddGuiControlsAction = () =>\n            {\n                ImGui.SliderFloat(\"intensity\", ref ambientLight.Intensity, 0, 3);\n                System.Numerics.Vector3 color = new System.Numerics.Vector3(ambientLight.Color.R, ambientLight.Color.G, ambientLight.Color.B);\n                if (ImGui.TreeNode(\"Light Colors\"))\n                {\n                    if (ImGui.ColorPicker3(\"ambientColor\", ref color))\n                    {\n                        ambientLight.Color = new THREE.Color(color.X, color.Y, color.Z);\n                    }\n                }\n                ImGui.Checkbox(\"disableSpotlight\", ref spotLight.Visible);\n            };\n        }\n    }\n}\n\n'THREE/THREE/Core/GLBufferAttribute.cs'\n:﻿using System.Collections.Generic;\nusing System.Runtime.Serialization;\n\nnamespace THREE\n{\n    [Serializable]\n    public class GLBufferAttribute : Dictionary<object, object>\n    {\n        public int Version = 0;\n        public int Buffer\n        {\n            get\n            {\n                return (int)this[\"buffer\"];\n            }\n            set\n            {\n                this[\"buffer\"] = value;\n            }\n        }\n\n        public int Type\n        {\n            get\n            {\n                return (int)this[\"type\"];\n            }\n            set\n            {\n                this[\"type\"] = value;\n            }\n        }\n\n        public int ItemSize\n        {\n            get\n            {\n                return (int)this[\"itemSize\"];\n            }\n            set\n            {\n                this[\"itemSize\"] = value;\n            }\n        }\n        public bool NeedsUpdate\n        {\n            get\n            {\n                return (bool)this[\"needsUpdate\"];\n            }\n            set\n            {\n                this.Version++;\n                this[\"needsUpdate\"] = value;\n            }\n        }\n\n        public int ElementSize\n        {\n            get\n            {\n                return (int)this[\"elementSize\"];\n            }\n            set\n            {\n                this[\"elementSize\"] = value;\n            }\n        }\n\n        public int count\n        {\n            get\n            {\n                return (int)this[\"count\"];\n            }\n            set\n            {\n                this[\"count\"] = value;\n            }\n        }\n\n        bool isGLBufferAttribute = true;\n\n\n        public GLBufferAttribute(int buffer, int type, int itemSize, int elementSize, int count)\n        {\n            this.Buffer = buffer;\n            this.Type = type;\n            this.ItemSize = itemSize;\n            this.ElementSize = elementSize;\n            this.count = count;\n\n        }\n        public GLBufferAttribute() :base() { }\n        public GLBufferAttribute(SerializationInfo info, StreamingContext context) : base(info, context) { }\n    }\n}\n\n'THREE/SilkDemo/SilkDemoWindow.cs'\n:﻿using ImGuiNET;\nusing Silk.NET.Maths;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Text;\nusing System.Threading.Tasks;\nusing THREE.Silk;\nusing THREE.Silk.Example;\nnamespace SilkDemo\n{\n    public class TreeNode<T> : IEnumerable<TreeNode<T>>\n    {\n\n        public T Data { get; set; }\n        public TreeNode<T> Parent { get; set; }\n        public ICollection<TreeNode<T>> Children { get; set; }\n\n        public bool IsRoot\n        {\n            get { return Parent == null; }\n        }\n\n        public bool IsLeaf\n        {\n            get { return Children.Count == 0; }\n        }\n\n        public int Level\n        {\n            get\n            {\n                if (this.IsRoot)\n                    return 0;\n                return Parent.Level + 1;\n            }\n        }\n\n        public object Tag { get; set; }\n\n        public TreeNode(T data)\n        {\n            this.Data = data;\n            this.Children = new LinkedList<TreeNode<T>>();\n\n            this.ElementsIndex = new LinkedList<TreeNode<T>>();\n            this.ElementsIndex.Add(this);\n        }\n\n        public TreeNode<T> AddChild(T child)\n        {\n            TreeNode<T> childNode = new TreeNode<T>(child) { Parent = this };\n            this.Children.Add(childNode);\n\n            this.RegisterChildForSearch(childNode);\n\n            return childNode;\n        }\n\n        public override string ToString()\n        {\n            return Data != null ? Data.ToString() : \"[data null]\";\n        }\n\n\n        #region searching\n\n        private ICollection<TreeNode<T>> ElementsIndex { get; set; }\n\n        private void RegisterChildForSearch(TreeNode<T> node)\n        {\n            ElementsIndex.Add(node);\n            if (Parent != null)\n                Parent.RegisterChildForSearch(node);\n        }\n\n        public TreeNode<T> FindTreeNode(Func<TreeNode<T>, bool> predicate)\n        {\n            return this.ElementsIndex.FirstOrDefault(predicate);\n        }\n\n        #endregion\n\n\n        #region iterating\n\n        IEnumerator IEnumerable.GetEnumerator()\n        {\n            return GetEnumerator();\n        }\n\n        public IEnumerator<TreeNode<T>> GetEnumerator()\n        {\n            yield return this;\n            foreach (var directChild in this.Children)\n            {\n                foreach (var anyChild in directChild)\n                    yield return anyChild;\n            }\n        }\n\n        #endregion\n    }\n    public class SilkDemoWindow : ThreeSilkWindow\n    {\n        private List<TreeNode<string>> examplesList;\n        private Dictionary<string, Example> exampleInstances = new Dictionary<string, Example>();\n        public SilkDemoWindow() : base() { }\n\n        private TreeNode<string> LoadExampleFromAssembly(Assembly assembly)\n        {\n            TreeNode<string> treeView = new TreeNode<string>(\"Root\");\n            if (assembly == null)\n                throw new ArgumentNullException(\"assembly\");\n\n            var types = assembly.GetTypes();\n            foreach (var type in types)\n            {\n                var attributes = type.GetCustomAttributes(false);\n\n                foreach (var exampleType in attributes)\n                {\n                    if (exampleType is ExampleAttribute)\n                    {\n                        var example = exampleType as ExampleAttribute;\n                        string key = example.Category.ToString();\n                        TreeNode<string> rootNode = treeView.FindTreeNode(node => node.Data != null && node.Data.Equals(key));\n                        if (rootNode == null)\n                        {\n                            rootNode = treeView.AddChild(key);\n                        }\n                        TreeNode<string> subNode = rootNode.FindTreeNode(node => node.Data != null && node.Data.Equals(example.Subcategory));\n                        if (subNode == null)\n                        {\n                            subNode = rootNode.AddChild(example.Subcategory);\n                        }\n                        TreeNode<string> nodeItem = subNode.FindTreeNode(node => node.Data != null && node.Data.Equals(example.Title));\n                        if (nodeItem == null)\n                        {\n                            nodeItem = subNode.AddChild(example.Title);\n                            nodeItem.Tag = new ExampleInfo(type, example);\n\n\n\n\n\n\n\n\n                        }\n                    }\n                }\n            }\n            return treeView;\n        }\n\n        private int SortByName(TreeNode<string> a, TreeNode<string> b)\n        {\n            return a.Data.CompareTo(b.Data);\n        }\n        private void GetExamplesList()\n        {\n            Type t = typeof(Example);\n            examplesList = LoadExampleFromAssembly(Assembly.GetAssembly(t)).Children.ToList();\n            examplesList.Sort(SortByName);\n        }\n        private string MakeExampleTitle(string exampleName)\n        {\n            if (string.IsNullOrEmpty(exampleName))\n                return \"THREE.Silk.Example\";\n            else\n                return \"THREE.Silk.Example : \" + exampleName;\n        }\n        private void ShowExamplesMenu()\n        {\n            if (ImGui.BeginMainMenuBar())\n            {\n                if (ImGui.BeginMenu(\"File\"))\n                {\n                    if (ImGui.MenuItem(\"Exit\", \"Ctrl+E\"))\n                    {\n                        System.Environment.Exit(0);\n                    }\n                    ImGui.EndMenu();\n                }\n                ImGui.EndMainMenuBar();\n            }\n            ImGui.Begin(\"Examples\");\n            for (int i = 0; i < examplesList.Count; i++)\n            {\n                TreeNode<string> category = examplesList[i];\n                if (ImGui.CollapsingHeader(category.Data))\n                {\n                    List<TreeNode<string>> subList = category.Children.ToList();\n                    subList.Sort(SortByName);\n                    for (int j = 0; j < subList.Count; j++)\n                    {\n                        TreeNode<string> subCategory = subList[j];\n                        if (ImGui.TreeNode(subCategory.Data))\n                        {\n                            List<TreeNode<string>> titleList = subCategory.Children.ToList();\n                            titleList.Sort(SortByName);\n                            for (int k = 0; k < titleList.Count; k++)\n                            {\n                                var title = titleList[k];\n                                if (ImGui.Button(title.Data))\n                                {\n                                    RunSample(title.Tag as ExampleInfo);\n                                }\n                            }\n                            ImGui.TreePop();\n                        }\n                    }\n                }\n            }\n            ImGui.End();\n        }\n        private void RunSample(ExampleInfo e)\n        {\n            if (null != currentThreeContainer)\n            {\n                currentThreeContainer.Dispose();\n                currentThreeContainer = null;\n                Title = MakeExampleTitle(\"\");\n            }\n\n\n\n            currentThreeContainer = (Example)Activator.CreateInstance(e.Example);\n            if (null != currentThreeContainer)\n            {\n                currentThreeContainer.Load(this.window);\n                currentThreeContainer.imGuiManager = imGuiManager;\n                Title = MakeExampleTitle(e.Attribute.Title);\n                Vector2D<int> size;\n                size.X = window.Size.X;\n                size.Y = window.Size.Y;\n                OnResize(size);\n            }\n        }\n        public override void OnLoad()\n        {\n            base.OnLoad();\n            currentThreeContainer = new FirstSceneExample();\n            currentThreeContainer.Load(window);\n            currentThreeContainer.imGuiManager = imGuiManager;\n            currentThreeContainer.OnResize(new ResizeEventArgs(window.Size.X,window.Size.Y));\n            GetExamplesList();\n\n        }\n        public override void OnRender(double deltaTime)\n        {\n            imGuiManager.Update((float)deltaTime);\n            if (currentThreeContainer == null) return;\n\n            ShowExamplesMenu();\n\n            currentThreeContainer.Render();\n            if (currentThreeContainer.AddGuiControlsAction != null)\n            {\n                currentThreeContainer.AddGuiControlsAction();\n            }\n            imGuiManager.Render();\n        }\n    }\n\n\n}\n",
        "gt": [
            "'THREE/THREE/Core/GLBufferAttribute.cs'",
            "'THREE/ThreeSilkExample/LearningThreeJs/Utils/MaterialExampleTemplate.cs'",
            "'THREE/ThreeSilkExample/LearningThreeJs/Chapter03/AmbientLightExample.cs'",
            "'THREE/SilkDemo/SilkDemoWindow.cs'"
        ]
    },
    {
        "files": [
            "'okta-sdk-dotnet/src/Okta.Sdk/Api/ApplicationLogosApi.cs'",
            "'okta-sdk-dotnet/src/Okta.Sdk.UnitTest/Api/GroupApiTests.cs'",
            "'okta-sdk-dotnet/src/Okta.Sdk/Model/OAuth2ScopesMediationPolicyRuleCondition.cs'"
        ],
        "content": "'okta-sdk-dotnet/src/Okta.Sdk/Api/ApplicationLogosApi.cs'\n:\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Mime;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Okta.Sdk.Client;\nusing Okta.Sdk.Model;\n\nnamespace Okta.Sdk.Api\n{\n\n\n\n    public partial interface IApplicationLogosApiAsync : IApiAccessor\n    {\n        #region Asynchronous Operations\n\n\n\n\n\n\n\n\n\n\n\n        System.Threading.Tasks.Task UploadApplicationLogoAsync(  string appId ,   System.IO.Stream file , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));\n\n\n\n\n\n\n\n\n\n\n\n        System.Threading.Tasks.Task<ApiResponse<Object>> UploadApplicationLogoWithHttpInfoAsync(  string appId ,   System.IO.Stream file , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));\n        #endregion Asynchronous Operations\n    }\n\n\n\n\n    public partial interface IApplicationLogosApi :  IApplicationLogosApiAsync\n    {\n\n    }\n\n\n\n\n    public partial class ApplicationLogosApi : IApplicationLogosApi\n    {\n        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;\n        private IOAuthTokenProvider _oAuthTokenProvider;\n\n\n\n\n\n\n\n\n\n        public ApplicationLogosApi(Okta.Sdk.Client.Configuration configuration = null, IOAuthTokenProvider oAuthTokenProvider = null, WebProxy webProxy = null)\n        {\n            configuration = Sdk.Client.Configuration.GetConfigurationOrDefault(configuration);\n\n            this.Configuration = Okta.Sdk.Client.Configuration.MergeConfigurations(\n                Okta.Sdk.Client.GlobalConfiguration.Instance,\n                configuration\n            );\n\n            Sdk.Client.Configuration.Validate((Configuration)this.Configuration);\n\n            _oAuthTokenProvider = NullOAuthTokenProvider.Instance;\n            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration))\n            {\n                _oAuthTokenProvider = oAuthTokenProvider ?? new DefaultOAuthTokenProvider(Configuration);\n            }\n\n            this.AsynchronousClient = new Okta.Sdk.Client.ApiClient(this.Configuration.OktaDomain, _oAuthTokenProvider, webProxy);\n            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;\n        }\n\n\n\n\n\n\n\n        public ApplicationLogosApi(Okta.Sdk.Client.IAsynchronousClient asyncClient, Okta.Sdk.Client.IReadableConfiguration configuration)\n        {\n            if (asyncClient == null) throw new ArgumentNullException(\"asyncClient\");\n            if (configuration == null) throw new ArgumentNullException(\"configuration\");\n\n            this.AsynchronousClient = asyncClient;\n            this.Configuration = configuration;\n            this.ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;\n             _oAuthTokenProvider = NullOAuthTokenProvider.Instance;\n            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration))\n            {\n                _oAuthTokenProvider = new DefaultOAuthTokenProvider(Configuration);\n            }\n        }\n\n\n\n\n        public Okta.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }\n\n\n\n\n\n        public string GetBasePath()\n        {\n            return this.Configuration.OktaDomain;\n        }\n\n\n\n\n\n        public Okta.Sdk.Client.IReadableConfiguration Configuration { get; set; }\n\n\n\n\n        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory\n        {\n            get\n            {\n                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)\n                {\n                    throw new InvalidOperationException(\"Multicast delegate for ExceptionFactory is unsupported.\");\n                }\n                return _exceptionFactory;\n            }\n            set { _exceptionFactory = value; }\n        }\n\n\n\n\n\n\n\n\n\n        public async System.Threading.Tasks.Task UploadApplicationLogoAsync(  string appId ,   System.IO.Stream file , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))\n        {\n            await UploadApplicationLogoWithHttpInfoAsync(appId, file, cancellationToken).ConfigureAwait(false);\n        }\n\n\n\n\n\n\n\n\n        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<Object>> UploadApplicationLogoWithHttpInfoAsync(  string appId ,   System.IO.Stream file , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))\n        {\n\n            if (appId == null)\n            {\n                throw new Okta.Sdk.Client.ApiException(400, \"Missing required parameter 'appId' when calling ApplicationLogosApi->UploadApplicationLogo\");\n            }\n\n\n            if (file == null)\n            {\n                throw new Okta.Sdk.Client.ApiException(400, \"Missing required parameter 'file' when calling ApplicationLogosApi->UploadApplicationLogo\");\n            }\n\n\n            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();\n\n            string[] _contentTypes = new string[] {\n                \"multipart/form-data\"\n            };\n\n\n            string[] _accepts = new string[] {\n                \"application/json\"\n            };\n\n            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);\n            if (localVarContentType != null)\n            {\n                localVarRequestOptions.HeaderParameters.Add(\"Content-Type\", localVarContentType);\n            }\n\n            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);\n            if (localVarAccept != null)\n            {\n                localVarRequestOptions.HeaderParameters.Add(\"Accept\", localVarAccept);\n            }\n\n            localVarRequestOptions.PathParameters.Add(\"appId\", Okta.Sdk.Client.ClientUtils.ParameterToString(appId));\n            localVarRequestOptions.FileParameters.Add(\"file\", file);\n\n\n            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix(\"Authorization\")))\n            {\n                localVarRequestOptions.HeaderParameters.Add(\"Authorization\", this.Configuration.GetApiKeyWithPrefix(\"Authorization\"));\n            }\n\n\n            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey(\"Authorization\"))\n            {\n                localVarRequestOptions.HeaderParameters.Add(\"Authorization\", \"Bearer \" + this.Configuration.AccessToken);\n            }\n\n            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey(\"Authorization\"))\n            {\n                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $\"/api/v1/apps/{appId}/logo\", \"POST\", cancellationToken = default);\n            }\n\n\n            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>(\"/api/v1/apps/{appId}/logo\", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);\n\n            if (this.ExceptionFactory != null)\n            {\n                Exception _exception = this.ExceptionFactory(\"UploadApplicationLogo\", localVarResponse);\n                if (_exception != null)\n                {\n                    throw _exception;\n                }\n            }\n\n            return localVarResponse;\n        }\n\n    }\n}\n\n'okta-sdk-dotnet/src/Okta.Sdk.UnitTest/Api/GroupApiTests.cs'\n:﻿\n\nusing System;\nusing System.Linq;\nusing System.Net;\nusing System.Threading.Tasks;\nusing FluentAssertions;\nusing Okta.Sdk.Api;\nusing Okta.Sdk.Client;\nusing Okta.Sdk.UnitTest.Internal;\nusing WireMock.RequestBuilders;\nusing WireMock.ResponseBuilders;\nusing WireMock.Server;\nusing Xunit;\n\nnamespace Okta.Sdk.UnitTest.Api\n{\n\n\n\n\n\n\n\n    public class GroupApiTests\n    {\n        private readonly WireMockServer _server;\n\n        public GroupApiTests()\n        {\n            _server = WireMockServer.Start();\n        }\n\n        public void Dispose()\n        {\n            _server.Stop();\n        }\n\n        private void CreateStubReturningDelayedResponse()\n        {\n            _server.Given(\n                    Request.Create().WithPath(\"/api/v1/groups*\")\n                )\n                .RespondWith(\n                    Response.Create()\n                        .WithStatusCode(200)\n                        .WithHeader(\"Content-Type\", \"text/json\")\n                        .WithBody(@\"{}\")\n\n                        .WithDelay(TimeSpan.FromMilliseconds(5000))\n                );\n        }\n\n        [Fact]\n        public async Task ThrowOnTimeout()\n        {\n            var groupsApi = new GroupApi(new Configuration { OktaDomain = _server.Url!, Token = \"foo\", ConnectionTimeout = 1000, DisableOktaDomainCheck = true });\n\n            CreateStubReturningDelayedResponse();\n\n            await Assert.ThrowsAsync<TimeoutException>(async () => await groupsApi.GetGroupAsync(\"foo\"));\n            await Assert.ThrowsAsync<TimeoutException>(async () => await groupsApi.ListGroups().ToListAsync());\n        }\n\n        [Fact]\n        public async Task ListApplicationTargetsForApplicationAdministratorRoleForGroup()\n        {\n            var rawResponse = @\"[\n                                    {\n                                        \"\"name\"\": \"\"facebook\"\",\n                                        \"\"displayName\"\": \"\"Facebook\"\",\n                                        \"\"description\"\": \"\"Description\"\",\n                                        \"\"status\"\": \"\"ACTIVE\"\",\n                                        \"\"lastUpdated\"\": \"\"2017-07-19T23:37:37.000Z\"\",\n                                        \"\"category\"\": \"\"SOCIAL\"\",\n                                        \"\"verificationStatus\"\": \"\"OKTA_VERIFIED\"\",\n                                        \"\"website\"\": \"\"http:\n                                        \"\"signOnModes\"\": [\n                                            \"\"BROWSER_PLUGIN\"\"\n                                        ],\n                                        \"\"_links\"\": {\n                                            \"\"logo\"\": [\n                                                {\n                                                    \"\"name\"\": \"\"medium\"\",\n                                                    \"\"href\"\": \"\"http:\n                                                    \"\"type\"\": \"\"image/png\"\"\n                                                }\n                                            ],\n                                            \"\"self\"\": {\n                                                \"\"href\"\": \"\"http:\n                                            }\n                                        }\n                                    },\n                                    {\n                                        \"\"name\"\": \"\"24 Seven Office 0\"\",\n                                        \"\"status\"\": \"\"ACTIVE\"\",\n                                        \"\"id\"\": \"\"0oasrudLtMlzAsTxk0g3\"\",\n                                        \"\"_links\"\": {\n                                            \"\"self\"\": {\n                                                \"\"href\"\": \"\"http:\n                                            }\n                                        }\n                                    }\n                                ]\";\n\n            var mockClient = new MockAsyncClient(rawResponse, HttpStatusCode.OK);\n            var roleTargetApi = new RoleTargetApi(mockClient, new Configuration { BasePath = \"https:\n\n            var apps = await roleTargetApi.ListApplicationTargetsForApplicationAdministratorRoleForGroup(\"foo\", \"bar\")\n                .ToListAsync();\n\n            mockClient.ReceivedPath.Should().StartWith(\"/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps\");\n            mockClient.ReceivedPathParams[\"groupId\"].Should().Contain(\"foo\");\n            mockClient.ReceivedPathParams[\"roleId\"].Should().Contain(\"bar\");\n\n\n\n            apps.Should().NotBeNullOrEmpty();\n            apps.Should().HaveCount(2);\n            apps.FirstOrDefault().Name.Should().Be(\"facebook\");\n            apps.FirstOrDefault().Status.Value.Should().Be(\"ACTIVE\");\n            apps.FirstOrDefault().Id.Should().BeNullOrEmpty();\n            apps.FirstOrDefault().Description.Should().Be(\"Description\");\n            apps.FirstOrDefault().DisplayName.Should().Be(\"Facebook\");\n            apps.FirstOrDefault().Category.Should().Be(\"SOCIAL\");\n            apps.FirstOrDefault().VerificationStatus.Should().Be(\"OKTA_VERIFIED\");\n            apps.FirstOrDefault().Website.Should().Be(\"http:\n            apps.FirstOrDefault().SignOnModes.Should().Contain(\"BROWSER_PLUGIN\");\n\n            apps[1].Name.Should().Be(\"24 Seven Office 0\");\n            apps[1].Status.Value.Should().Be(\"ACTIVE\");\n            apps[1].Id.Should().Be(\"0oasrudLtMlzAsTxk0g3\");\n        }\n\n        [Fact]\n        public async Task GetGroupWithCustomProperties()\n        {\n\n            var response = @\"{\n                               \"\"id\"\":\"\"foo\"\",\n                               \"\"created\"\":\"\"2021-09-24T17:52:26.000Z\"\",\n                               \"\"lastUpdated\"\":\"\"2021-09-24T17:52:26.000Z\"\",\n                               \"\"lastMembershipUpdated\"\":\"\"2021-09-27T19:44:46.000Z\"\",\n                               \"\"objectClass\"\":[\n                                  \"\"okta:user_group\"\"\n                               ],\n                               \"\"type\"\":\"\"OKTA_GROUP\"\",\n                               \"\"profile\"\":{\n                                  \"\"name\"\":\"\"Admins\"\",\n                                  \"\"description\"\":\"\"Admin Group\"\",\n                                  \"\"customProp\"\":\"\"customValue\"\"\n                               }\n                            }\";\n            var mockClient = new MockAsyncClient(response, HttpStatusCode.OK);\n            var groupApi = new GroupApi(mockClient, new Configuration { BasePath = \"https:\n\n            var retrievedGroup = await groupApi.GetGroupAsync(\"foo\");\n\n            retrievedGroup.Profile.AdditionalProperties[\"customProp\"].Should().Be(\"customValue\");\n        }\n\n        [Fact]\n        public async Task AddApplicationTargetToAdminRoleGivenToGroup()\n        {\n\n            var mockClient = new MockAsyncClient(String.Empty, HttpStatusCode.OK);\n            var roleTargetApi = new RoleTargetApi(mockClient, new Configuration { BasePath = \"https:\n\n            await roleTargetApi.AssignAppTargetToAdminRoleForGroupAsync(\"foo\", \"bar\", \"baz\");\n\n            mockClient.ReceivedPath.Should().StartWith(\"/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}\");\n            mockClient.ReceivedPathParams[\"groupId\"].Should().Contain(\"foo\");\n            mockClient.ReceivedPathParams[\"roleId\"].Should().Contain(\"bar\");\n            mockClient.ReceivedPathParams[\"appName\"].Should().Contain(\"baz\");\n        }\n\n        [Fact]\n        public async Task AddApplicationInstanceTargetToAppAdminRoleGivenToGroup()\n        {\n            var mockClient = new MockAsyncClient(String.Empty, HttpStatusCode.NoContent);\n            var roleTargetApi = new RoleTargetApi(mockClient, new Configuration { BasePath = \"https:\n\n\n            await roleTargetApi.AssignAppInstanceTargetToAppAdminRoleForGroupAsync(\"foo\", \"bar\", \"baz\", \"bax\");\n\n            mockClient.ReceivedPath.Should().StartWith(\"/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}/{appId}\");\n            mockClient.ReceivedPathParams[\"groupId\"].Should().Contain(\"foo\");\n            mockClient.ReceivedPathParams[\"roleId\"].Should().Contain(\"bar\");\n            mockClient.ReceivedPathParams[\"appName\"].Should().Contain(\"baz\");\n            mockClient.ReceivedPathParams[\"appId\"].Should().Contain(\"bax\");\n        }\n\n        [Fact]\n        public async Task RemoveApplicationTargetFromAdministratorRoleGivenToGroup()\n        {\n            var mockClient = new MockAsyncClient(String.Empty, HttpStatusCode.NoContent);\n            var roleTargetApi = new RoleTargetApi(mockClient, new Configuration { BasePath = \"https:\n\n            await roleTargetApi.UnassignAppInstanceTargetToAppAdminRoleForGroupWithHttpInfoAsync(\"foo\", \"bar\", \"baz\", \"bax\");\n\n            mockClient.ReceivedPath.Should().StartWith(\"/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}/{appId}\");\n            mockClient.ReceivedPathParams[\"groupId\"].Should().Contain(\"foo\");\n            mockClient.ReceivedPathParams[\"roleId\"].Should().Contain(\"bar\");\n            mockClient.ReceivedPathParams[\"appName\"].Should().Contain(\"baz\");\n            mockClient.ReceivedPathParams[\"appId\"].Should().Contain(\"bax\");\n        }\n\n        [Fact]\n        public async Task RemoveApplicationTargetFromApplicationAdministratorRoleGivenToGroup()\n        {\n            var mockClient = new MockAsyncClient(String.Empty, HttpStatusCode.NoContent);\n            var roleTargetApi = new RoleTargetApi(mockClient, new Configuration { BasePath = \"https:\n\n            await roleTargetApi.UnassignAppTargetToAdminRoleForGroupAsync(\"foo\", \"bar\", \"baz\");\n\n            mockClient.ReceivedPath.Should().StartWith(\"/api/v1/groups/{groupId}/roles/{roleId}/targets/catalog/apps/{appName}\");\n            mockClient.ReceivedPathParams[\"groupId\"].Should().Contain(\"foo\");\n            mockClient.ReceivedPathParams[\"roleId\"].Should().Contain(\"bar\");\n            mockClient.ReceivedPathParams[\"appName\"].Should().Contain(\"baz\");\n        }\n    }\n}\n'okta-sdk-dotnet/src/Okta.Sdk/Model/OAuth2ScopesMediationPolicyRuleCondition.cs'\n:\n\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Linq;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Converters;\nusing Newtonsoft.Json.Linq;\nusing OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;\n\nnamespace Okta.Sdk.Model\n{\n\n\n\n\n    [DataContract(Name = \"OAuth2ScopesMediationPolicyRuleCondition\")]\n\n    public partial class OAuth2ScopesMediationPolicyRuleCondition : IEquatable<OAuth2ScopesMediationPolicyRuleCondition>\n    {\n\n\n\n\n        [DataMember(Name = \"include\", EmitDefaultValue = true)]\n        public List<string> Include { get; set; }\n\n\n\n\n\n        public override string ToString()\n        {\n            StringBuilder sb = new StringBuilder();\n            sb.Append(\"class OAuth2ScopesMediationPolicyRuleCondition {\\n\");\n            sb.Append(\"  Include: \").Append(Include).Append(\"\\n\");\n            sb.Append(\"}\\n\");\n            return sb.ToString();\n        }\n\n\n\n\n\n        public virtual string ToJson()\n        {\n            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);\n        }\n\n\n\n\n\n\n        public override bool Equals(object input)\n        {\n            return this.Equals(input as OAuth2ScopesMediationPolicyRuleCondition);\n        }\n\n\n\n\n\n\n        public bool Equals(OAuth2ScopesMediationPolicyRuleCondition input)\n        {\n            if (input == null)\n            {\n                return false;\n            }\n            return\n                (\n                    this.Include == input.Include ||\n                    this.Include != null &&\n                    input.Include != null &&\n                    this.Include.SequenceEqual(input.Include)\n                );\n        }\n\n\n\n\n\n        public override int GetHashCode()\n        {\n            unchecked\n            {\n                int hashCode = 41;\n\n                if (this.Include != null)\n                {\n                    hashCode = (hashCode * 59) + this.Include.GetHashCode();\n                }\n                return hashCode;\n            }\n        }\n\n    }\n\n}\n",
        "gt": [
            "'okta-sdk-dotnet/src/Okta.Sdk/Model/OAuth2ScopesMediationPolicyRuleCondition.cs'",
            "'okta-sdk-dotnet/src/Okta.Sdk/Api/ApplicationLogosApi.cs'",
            "'okta-sdk-dotnet/src/Okta.Sdk.UnitTest/Api/GroupApiTests.cs'"
        ]
    },
    {
        "files": [
            "'ASP.NET-Core-MVC-Tutorial-Code/22 start/Heavy.Web/Controllers/AlbumController.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/19 start/Heavy.Web/Models/Album.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/23 start/Heavy.Web/ViewModels/RoleAddViewModel.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/26 start/Heavy.Web/Controllers/AlbumController.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/26 start/Heavy.Web/Controllers/RoleController.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/22 start/Heavy.Web/ViewModels/RoleAddViewModel.cs'"
        ],
        "content": "'ASP.NET-Core-MVC-Tutorial-Code/22 start/Heavy.Web/Controllers/AlbumController.cs'\n:﻿using System.Collections.Generic;\nusing System.Text.Encodings.Web;\nusing System.Threading.Tasks;\nusing Heavy.Web.Models;\nusing Heavy.Web.Services;\nusing Heavy.Web.ViewModels;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Heavy.Web.Controllers\n{\n    [Authorize(Policy = \"编辑专辑2\")]\n    public class AlbumController : Controller\n    {\n        private readonly IAlbumService _albumService;\n        private readonly HtmlEncoder _htmlEncoder;\n\n        public AlbumController(IAlbumService albumService,\n            HtmlEncoder htmlEncoder)\n        {\n            _albumService = albumService;\n            _htmlEncoder = htmlEncoder;\n        }\n\n\n        public async Task<ActionResult> Index()\n        {\n            var albums = await _albumService.GetAllAsync();\n            return View(albums);\n        }\n\n\n        public async Task<ActionResult> Details(int id)\n        {\n            var album = await _albumService.GetByIdAsync(id);\n            if (album == null)\n            {\n                return RedirectToAction(nameof(Index));\n            }\n            return View(album);\n        }\n\n\n        public ActionResult Create()\n        {\n            var newModel = new AlbumCreateViewModel();\n            return View(newModel);\n        }\n\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<ActionResult> Create(AlbumCreateViewModel albumCreateViewModel)\n        {\n            if (!ModelState.IsValid)\n            {\n                ModelState.AddModelError(string.Empty, \"Model is not valid\");\n                return View();\n            }\n            try\n            {\n                var newModel = await _albumService.AddAsync(new Album\n                {\n                    Artist = _htmlEncoder.Encode(albumCreateViewModel.Artist),\n                    Title = albumCreateViewModel.Title,\n                    CoverUrl = albumCreateViewModel.CoverUrl,\n                    Price = albumCreateViewModel.Price,\n                    ReleaseDate = albumCreateViewModel.ReleaseDate\n                });\n                return RedirectToAction(nameof(Details), new { id = newModel.Id });\n            }\n            catch\n            {\n                return View(albumCreateViewModel);\n            }\n        }\n\n\n        public async Task<ActionResult> Edit(int id)\n        {\n            var model = await _albumService.GetByIdAsync(id);\n            if (model == null)\n            {\n                return RedirectToAction(nameof(Index));\n            }\n\n            var editModel = new AlbumUpdateViewModel\n            {\n                Artist = model.Artist,\n                Title = model.Title,\n                CoverUrl = model.CoverUrl,\n                Price = model.Price,\n                ReleaseDate = model.ReleaseDate\n            };\n            return View(editModel);\n        }\n\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<ActionResult> Edit(int id, AlbumUpdateViewModel albumUpdateViewModel)\n        {\n            var model = await _albumService.GetByIdAsync(id);\n            if (model == null)\n            {\n\n                return View(albumUpdateViewModel);\n            }\n\n            try\n            {\n                model.Artist = albumUpdateViewModel.Artist;\n                model.Title = albumUpdateViewModel.Title;\n                model.CoverUrl = albumUpdateViewModel.CoverUrl;\n                model.ReleaseDate = albumUpdateViewModel.ReleaseDate;\n                model.Price = albumUpdateViewModel.Price;\n\n                await _albumService.UpdateAsync(model);\n\n                return RedirectToAction(nameof(Index));\n            }\n            catch\n            {\n                return View(albumUpdateViewModel);\n            }\n        }\n\n\n        public async Task<ActionResult> Delete(int id)\n        {\n            var model = await _albumService.GetByIdAsync(id);\n            if (model == null)\n            {\n                return RedirectToAction(nameof(Index));\n            }\n\n            return View(model);\n        }\n\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<ActionResult> Delete(int id, IFormCollection collection)\n        {\n            var model = await _albumService.GetByIdAsync(id);\n            if (model == null)\n            {\n                return RedirectToAction(nameof(Index));\n\n            }\n\n            try\n            {\n                await _albumService.DeleteAsync(model);\n                return RedirectToAction(nameof(Index));\n            }\n            catch\n            {\n                return View();\n            }\n        }\n\n        public ActionResult List(\n            [FromQuery] int id,\n            [FromHeader(Name = \"Accept\")] string accept)\n        {\n            return View();\n        }\n\n        [HttpPost]\n        public IActionResult List(List<SomeModel> items)\n        {\n            return View();\n        }\n    }\n\n    public class SomeModel\n    {\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n    }\n}\n'ASP.NET-Core-MVC-Tutorial-Code/19 start/Heavy.Web/Models/Album.cs'\n:﻿using System;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace Heavy.Web.Models\n{\n    public class Album\n    {\n        public int Id { get; set; }\n\n        [Display(Name = \"专辑名\")]\n        public string Title { get; set; }\n\n        [Display(Name = \"艺人\")]\n        public string Artist { get; set; }\n\n        [Display(Name = \"发行日期\")]\n        public DateTime ReleaseDate { get; set; }\n\n        [Display(Name = \"价格\")]\n        public decimal Price { get; set; }\n\n        [Display(Name = \"封面地址\")]\n        public string CoverUrl { get; set; }\n    }\n}\n\n\n'ASP.NET-Core-MVC-Tutorial-Code/23 start/Heavy.Web/ViewModels/RoleAddViewModel.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Heavy.Web.Controllers;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Heavy.Web.ViewModels\n{\n    public class RoleAddViewModel\n    {\n        [Required]\n        [Display(Name = \"角色名称\")]\n        [Remote(nameof(RoleController.CheckRoleExist), \"Role\", ErrorMessage = \"角色已存在\")]\n        public string RoleName { get; set; }\n    }\n}\n\n'ASP.NET-Core-MVC-Tutorial-Code/26 start/Heavy.Web/Controllers/AlbumController.cs'\n:﻿using System.Collections.Generic;\nusing System.Text.Encodings.Web;\nusing System.Threading.Tasks;\nusing Heavy.Web.Data;\nusing Heavy.Web.Models;\nusing Heavy.Web.Services;\nusing Heavy.Web.ViewModels;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\n\nnamespace Heavy.Web.Controllers\n{\n    [Authorize(Policy = \"编辑专辑2\")]\n    public class AlbumController : Controller\n    {\n        private readonly IAlbumService _albumService;\n        private readonly HtmlEncoder _htmlEncoder;\n        private readonly ILogger<AlbumController> _logger;\n\n        public AlbumController(IAlbumService albumService,\n            HtmlEncoder htmlEncoder,\n            ILogger<AlbumController> logger)\n        {\n            _albumService = albumService;\n            _htmlEncoder = htmlEncoder;\n            _logger = logger;\n        }\n\n\n        public async Task<ActionResult> Index()\n        {\n            var albums = await _albumService.GetAllAsync();\n            return View(albums);\n        }\n\n\n        public async Task<ActionResult> Details(int id)\n        {\n            _logger.LogInformation(MyLogEventIds.AlbumPage, \"Visiting Album {0}\", id);\n\n            var album = await _albumService.GetByIdAsync(id);\n            if (album == null)\n            {\n                return RedirectToAction(nameof(Index));\n            }\n            return View(album);\n        }\n\n\n        public ActionResult Create()\n        {\n            var newModel = new AlbumCreateViewModel();\n            return View(newModel);\n        }\n\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<ActionResult> Create(AlbumCreateViewModel albumCreateViewModel)\n        {\n            if (!ModelState.IsValid)\n            {\n                ModelState.AddModelError(string.Empty, \"Model is not valid\");\n                return View();\n            }\n            try\n            {\n                var newModel = await _albumService.AddAsync(new Album\n                {\n                    Artist = _htmlEncoder.Encode(albumCreateViewModel.Artist),\n                    Title = albumCreateViewModel.Title,\n                    CoverUrl = albumCreateViewModel.CoverUrl,\n                    Price = albumCreateViewModel.Price,\n                    ReleaseDate = albumCreateViewModel.ReleaseDate\n                });\n                return RedirectToAction(nameof(Details), new { id = newModel.Id });\n            }\n            catch\n            {\n                return View(albumCreateViewModel);\n            }\n        }\n\n\n        public async Task<ActionResult> Edit(int id)\n        {\n            var model = await _albumService.GetByIdAsync(id);\n            if (model == null)\n            {\n                return RedirectToAction(nameof(Index));\n            }\n\n            var editModel = new AlbumUpdateViewModel\n            {\n                Artist = model.Artist,\n                Title = model.Title,\n                CoverUrl = model.CoverUrl,\n                Price = model.Price,\n                ReleaseDate = model.ReleaseDate\n            };\n            return View(editModel);\n        }\n\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<ActionResult> Edit(int id, AlbumUpdateViewModel albumUpdateViewModel)\n        {\n            var model = await _albumService.GetByIdAsync(id);\n            if (model == null)\n            {\n\n                return View(albumUpdateViewModel);\n            }\n\n            try\n            {\n                model.Artist = albumUpdateViewModel.Artist;\n                model.Title = albumUpdateViewModel.Title;\n                model.CoverUrl = albumUpdateViewModel.CoverUrl;\n                model.ReleaseDate = albumUpdateViewModel.ReleaseDate;\n                model.Price = albumUpdateViewModel.Price;\n\n                await _albumService.UpdateAsync(model);\n\n                return RedirectToAction(nameof(Index));\n            }\n            catch\n            {\n                return View(albumUpdateViewModel);\n            }\n        }\n\n\n        public async Task<ActionResult> Delete(int id)\n        {\n            var model = await _albumService.GetByIdAsync(id);\n            if (model == null)\n            {\n                return RedirectToAction(nameof(Index));\n            }\n\n            return View(model);\n        }\n\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<ActionResult> Delete(int id, IFormCollection collection)\n        {\n            var model = await _albumService.GetByIdAsync(id);\n            if (model == null)\n            {\n                return RedirectToAction(nameof(Index));\n\n            }\n\n            try\n            {\n                await _albumService.DeleteAsync(model);\n                return RedirectToAction(nameof(Index));\n            }\n            catch\n            {\n                return View();\n            }\n        }\n\n        public ActionResult List(\n            [FromQuery] int id,\n            [FromHeader(Name = \"Accept\")] string accept)\n        {\n            return View();\n        }\n\n        [HttpPost]\n        public IActionResult List(List<SomeModel> items)\n        {\n            return View();\n        }\n    }\n\n    public class SomeModel\n    {\n        public string FirstName { get; set; }\n        public string LastName { get; set; }\n    }\n}\n'ASP.NET-Core-MVC-Tutorial-Code/26 start/Heavy.Web/Controllers/RoleController.cs'\n:﻿using System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Heavy.Web.Models;\nusing Heavy.Web.ViewModels;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\n\nnamespace Heavy.Web.Controllers\n{\n    [Authorize(Policy = \"仅限管理员\")]\n    public class RoleController : Controller\n    {\n        private readonly UserManager<ApplicationUser> _userManager;\n        private readonly RoleManager<IdentityRole> _roleManager;\n\n        public RoleController(\n            UserManager<ApplicationUser> userManager,\n            RoleManager<IdentityRole> roleManager)\n        {\n            _userManager = userManager;\n            _roleManager = roleManager;\n        }\n\n        public async Task<IActionResult> Index()\n        {\n            var roles = await _roleManager.Roles.ToListAsync();\n            return View(roles);\n        }\n\n        public IActionResult AddRole()\n        {\n            return View();\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddRole(RoleAddViewModel roleAddViewModel)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(roleAddViewModel);\n            }\n\n            var role = new IdentityRole\n            {\n                Name = roleAddViewModel.RoleName\n            };\n\n            var result = await _roleManager.CreateAsync(role);\n            if (result.Succeeded)\n            {\n                return RedirectToAction(\"Index\");\n            }\n\n            foreach (var error in result.Errors)\n            {\n                ModelState.AddModelError(string.Empty, error.Description);\n            }\n            return View(roleAddViewModel);\n        }\n\n        public async Task<IActionResult> EditRole(string id)\n        {\n            var role = await _roleManager.FindByIdAsync(id);\n\n            if (role == null)\n            {\n                return RedirectToAction(\"Index\");\n            }\n\n            var roleEditViewModel = new RoleEditViewModel\n            {\n                Id = id,\n                RoleName = role.Name,\n                Users = new List<string>()\n            };\n\n            var users = await _userManager.Users.ToListAsync();\n            foreach (var user in users)\n            {\n                if (await _userManager.IsInRoleAsync(user, role.Name))\n                {\n                    roleEditViewModel.Users.Add(user.UserName);\n                }\n            }\n\n            return View(roleEditViewModel);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> EditRole(RoleEditViewModel roleEditViewModel)\n        {\n            var role = await _roleManager.FindByIdAsync(roleEditViewModel.Id);\n\n            if (role != null)\n            {\n                role.Name = roleEditViewModel.RoleName;\n\n                var result = await _roleManager.UpdateAsync(role);\n\n                if (result.Succeeded)\n                {\n                    return RedirectToAction(\"Index\");\n                }\n\n                ModelState.AddModelError(string.Empty, \"更新角色时出错\");\n\n                return View(roleEditViewModel);\n            }\n\n            return RedirectToAction(\"Index\");\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> DeleteRole(string id)\n        {\n            var role = await _roleManager.FindByIdAsync(id);\n            if (role != null)\n            {\n                var result = await _roleManager.DeleteAsync(role);\n                if (result.Succeeded)\n                {\n                    return RedirectToAction(\"Index\");\n                }\n                ModelState.AddModelError(string.Empty, \"删除角色时出错\");\n            }\n            ModelState.AddModelError(string.Empty, \"没找到该角色\");\n            return View(\"Index\", await _roleManager.Roles.ToListAsync());\n        }\n\n        public async Task<IActionResult> AddUserToRole(string roleId)\n        {\n            var role = await _roleManager.FindByIdAsync(roleId);\n\n            if (role == null)\n            {\n                return RedirectToAction(\"Index\");\n            }\n\n            var vm = new UserRoleViewModel\n            {\n                RoleId = role.Id\n            };\n\n            var users = await _userManager.Users.ToListAsync();\n\n            foreach (var user in users)\n            {\n                if (!await _userManager.IsInRoleAsync(user, role.Name))\n                {\n                    vm.Users.Add(user);\n                }\n            }\n\n            return View(vm);\n\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> AddUserToRole(UserRoleViewModel userRoleViewModel)\n        {\n            var user = await _userManager.FindByIdAsync(userRoleViewModel.UserId);\n            var role = await _roleManager.FindByIdAsync(userRoleViewModel.RoleId);\n\n            if (user != null && role != null)\n            {\n                var result = await _userManager.AddToRoleAsync(user, role.Name);\n\n                if (result.Succeeded)\n                {\n                    return RedirectToAction(\"EditRole\", new { id = role.Id });\n                }\n\n                foreach (var error in result.Errors)\n                {\n                    ModelState.AddModelError(string.Empty, error.Description);\n                }\n                return View(userRoleViewModel);\n            }\n\n            ModelState.AddModelError(string.Empty, \"用户或角色未找到\");\n            return View(userRoleViewModel);\n        }\n\n        public async Task<IActionResult> DeleteUserFromRole(string roleId)\n        {\n            var role = await _roleManager.FindByIdAsync(roleId);\n\n            if (role == null)\n            {\n                return RedirectToAction(\"Index\");\n            }\n\n            var vm = new UserRoleViewModel\n            {\n                RoleId = role.Id\n            };\n\n            var users = await _userManager.Users.ToListAsync();\n\n            foreach (var user in users)\n            {\n                if (await _userManager.IsInRoleAsync(user, role.Name))\n                {\n                    vm.Users.Add(user);\n                }\n            }\n\n            return View(vm);\n\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> DeleteUserFromRole(UserRoleViewModel userRoleViewModel)\n        {\n            var user = await _userManager.FindByIdAsync(userRoleViewModel.UserId);\n            var role = await _roleManager.FindByIdAsync(userRoleViewModel.RoleId);\n\n            if (user != null && role != null)\n            {\n                if (await _userManager.IsInRoleAsync(user, role.Name))\n                {\n                    var result = await _userManager.RemoveFromRoleAsync(user, role.Name);\n\n                    if (result.Succeeded)\n                    {\n                        return RedirectToAction(\"EditRole\", new { id = role.Id });\n                    }\n\n                    foreach (var error in result.Errors)\n                    {\n                        ModelState.AddModelError(string.Empty, error.Description);\n                    }\n                    return View(userRoleViewModel);\n                }\n\n                ModelState.AddModelError(string.Empty, \"用户不在角色里\");\n                return View(userRoleViewModel);\n            }\n\n            ModelState.AddModelError(string.Empty, \"用户或角色未找到\");\n            return View(userRoleViewModel);\n        }\n\n        [AcceptVerbs(\"Get\", \"Post\")]\n        public async Task<IActionResult> CheckRoleExist([Bind(\"RoleName\")] string roleName)\n        {\n            var role = await _roleManager.FindByNameAsync(roleName);\n            if (role != null)\n            {\n\n                return Json(\"角色已经存在了\");\n            }\n\n            return Json(true);\n        }\n    }\n}\n\n'ASP.NET-Core-MVC-Tutorial-Code/22 start/Heavy.Web/ViewModels/RoleAddViewModel.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Heavy.Web.Controllers;\nusing Microsoft.AspNetCore.Mvc;\n\nnamespace Heavy.Web.ViewModels\n{\n    public class RoleAddViewModel\n    {\n        [Required]\n        [Display(Name = \"角色名称\")]\n        [Remote(nameof(RoleController.CheckRoleExist), \"Role\", ErrorMessage = \"角色已存在\")]\n        public string RoleName { get; set; }\n    }\n}\n",
        "gt": [
            "'ASP.NET-Core-MVC-Tutorial-Code/19 start/Heavy.Web/Models/Album.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/26 start/Heavy.Web/Controllers/AlbumController.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/22 start/Heavy.Web/ViewModels/RoleAddViewModel.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/22 start/Heavy.Web/Controllers/AlbumController.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/23 start/Heavy.Web/ViewModels/RoleAddViewModel.cs'",
            "'ASP.NET-Core-MVC-Tutorial-Code/26 start/Heavy.Web/Controllers/RoleController.cs'"
        ]
    },
    {
        "files": [
            "'puyotools/src/PuyoTools.App.UI/Formats/Archives/SvmFormat.cs'",
            "'puyotools/src/PuyoTools.App.UI/Formats/Archives/WriterSettings/PvmWriterSettings.cs'",
            "'puyotools/src/PuyoTools.App.UI/GUI/ArchiveCreator.cs'",
            "'puyotools/src/PuyoTools.App.Cli/Formats/Archives/SntFormat.cs'"
        ],
        "content": "'puyotools/src/PuyoTools.App.UI/Formats/Archives/SvmFormat.cs'\n:﻿using PuyoTools.Formats.Archives.WriterSettings;\nusing PuyoTools.GUI;\nusing PuyoTools.Core;\nusing PuyoTools.Core.Archives;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PuyoTools.App.Formats.Archives\n{\n\n    internal partial class SvmFormat : IArchiveFormat\n    {\n        public ModuleSettingsControl GetModuleSettingsControl() => new PvmWriterSettings();\n    }\n}\n\n'puyotools/src/PuyoTools.App.UI/Formats/Archives/WriterSettings/PvmWriterSettings.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Drawing;\nusing System.Data;\nusing System.Linq;\nusing System.Text;\nusing System.Windows.Forms;\nusing PuyoTools.GUI;\nusing PuyoTools.Core;\nusing PuyoTools.Core.Archives;\nusing PuyoTools.App.Formats.Archives;\n\nnamespace PuyoTools.Formats.Archives.WriterSettings\n{\n    public partial class PvmWriterSettings : ModuleSettingsControl, IArchiveFormatOptions\n    {\n        public PvmWriterSettings()\n        {\n            InitializeComponent();\n        }\n\n        public void MapTo(LegacyArchiveWriter obj)\n        {\n            SetModuleSettings(obj);\n        }\n\n        public override void SetModuleSettings(IModule module)\n        {\n\n            if (module is GvmArchiveWriter)\n            {\n                GvmArchiveWriter archive = (GvmArchiveWriter)module;\n\n                archive.HasFilenames = hasFilenamesCheckbox.Checked;\n                archive.HasGlobalIndexes = hasGlobalIndexesCheckbox.Checked;\n                archive.HasFormats = hasFormatsCheckbox.Checked;\n                archive.HasDimensions = hasDimensionsCheckbox.Checked;\n            }\n\n\n            else if (module is PvmArchiveWriter)\n            {\n                PvmArchiveWriter archive = (PvmArchiveWriter)module;\n\n                archive.HasFilenames = hasFilenamesCheckbox.Checked;\n                archive.HasGlobalIndexes = hasGlobalIndexesCheckbox.Checked;\n                archive.HasFormats = hasFormatsCheckbox.Checked;\n                archive.HasDimensions = hasDimensionsCheckbox.Checked;\n            }\n\n\n            else if (module is SvmArchiveWriter)\n            {\n                SvmArchiveWriter archive = (SvmArchiveWriter)module;\n\n                archive.HasFilenames = hasFilenamesCheckbox.Checked;\n                archive.HasGlobalIndexes = hasGlobalIndexesCheckbox.Checked;\n                archive.HasFormats = hasFormatsCheckbox.Checked;\n                archive.HasDimensions = hasDimensionsCheckbox.Checked;\n            }\n        }\n    }\n}\n\n'puyotools/src/PuyoTools.App.UI/GUI/ArchiveCreator.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Text;\nusing System.Windows.Forms;\nusing System.IO;\n\nusing PuyoTools.Core;\nusing PuyoTools.Core.Archives;\nusing PuyoTools.Core.Compression;\n\nusing Ookii.Dialogs.WinForms;\nusing System.Linq;\nusing PuyoTools.App.Tools;\nusing PuyoTools.App.Formats.Archives;\nusing System.Threading.Tasks;\nusing PuyoTools.App.Formats.Compression;\n\nnamespace PuyoTools.GUI\n{\n    public partial class ArchiveCreator : ToolForm\n    {\n        Dictionary<IArchiveFormat, ModuleSettingsControl> writerSettingsControlsCache;\n\n        public ArchiveCreator()\n        {\n            InitializeComponent();\n\n\n            addFilesButton.Click -= base.addFilesButton_Click;\n            addDirectoryButton.Click -= base.addDirectoryButton_Click;\n\n\n            addFromEntriesButton.Visible = true;\n            addFromEntriesButton.Click += addFromEntriesButton_Click;\n\n\n            listView.SmallImageList = new ImageList\n            {\n                ImageSize = new Size(1, 20),\n            };\n\n\n            listView_ClientSizeChanged(null, null);\n\n\n            writerSettingsControlsCache = new Dictionary<IArchiveFormat, ModuleSettingsControl>();\n\n\n            archiveFormatBox.SelectedIndex = 0;\n            archiveFormatBox.Items.AddRange(ArchiveFactory.WriterFormats.ToArray());\n            archiveFormatBox.DisplayMember = nameof(IArchiveFormat.Name);\n\n\n            compressionFormatBox.SelectedIndex = 0;\n            compressionFormatBox.Items.AddRange(CompressionFactory.EncoderFormats.ToArray());\n            compressionFormatBox.DisplayMember = nameof(ICompressionFormat.Name);\n        }\n\n        private void AddFiles(IEnumerable<string> files)\n        {\n            foreach (string file in files)\n            {\n                FileEntry fileEntry = new FileEntry();\n                fileEntry.SourceFile = file;\n                fileEntry.Filename = Path.GetFileName(file);\n                fileEntry.FilenameInArchive = fileEntry.Filename;\n\n                ListViewItem item = new ListViewItem(new string[] {\n                    (listView.Items.Count + 1).ToString(),\n                    fileEntry.Filename,\n                    fileEntry.FilenameInArchive,\n                });\n\n                item.Tag = fileEntry;\n\n                listView.Items.Add(item);\n            }\n        }\n\n        private void AddFiles(IEnumerable<string> files, string rootPath)\n        {\n            var rootPathUri = new Uri(rootPath + Path.DirectorySeparatorChar);\n\n            foreach (string file in files)\n            {\n                FileEntry fileEntry = new FileEntry();\n                fileEntry.SourceFile = file;\n                fileEntry.Filename = Path.GetFileName(file);\n                fileEntry.FilenameInArchive = rootPathUri.MakeRelativeUri(new Uri(file)).ToString();\n\n                ListViewItem item = new ListViewItem(new string[] {\n                    (listView.Items.Count + 1).ToString(),\n                    fileEntry.Filename,\n                    fileEntry.FilenameInArchive,\n                });\n\n                item.Tag = fileEntry;\n\n                listView.Items.Add(item);\n            }\n        }\n\n        private void EnableRunButton()\n        {\n            runButton.Enabled = (listView.Items.Count > 0 && archiveFormatBox.SelectedIndex > 0);\n        }\n\n        private void Run(Settings settings, ProgressDialog dialog)\n        {\n\n            int entryIndex = 0;\n            string description = string.Format(\"Processing {0}\", Path.GetFileName(settings.OutFilename));\n\n            dialog.ReportProgress(0, description);\n\n\n\n\n            List<string> rejectedFiles = new List<string>();\n\n\n            Stream destination;\n            if (settings.CompressionFormat == null)\n            {\n\n                destination = File.Create(settings.OutFilename);\n            }\n            else\n            {\n\n                destination = new MemoryStream();\n            }\n\n\n            using (LegacyArchiveWriter archive = settings.ArchiveFormat.GetCodec().Create(destination))\n            {\n\n                ModuleSettingsControl settingsControl = settings.WriterSettingsControl;\n                if (settingsControl != null)\n                {\n                    Action moduleSettingsAction = () => settingsControl.SetModuleSettings(archive);\n                    settingsControl.Invoke(moduleSettingsAction);\n                }\n\n\n                archive.EntryWriting += (sender, e) =>\n                {\n                    if (archive.Entries.Count == 1)\n                    {\n                        dialog.Description = description + \"\\n\\n\" + string.Format(\"Adding {0}\", Path.GetFileName(e.Entry.Path));\n                    }\n                    else\n                    {\n                        dialog.Description = description + \"\\n\\n\" + string.Format(\"Adding {0} ({1:N0} of {2:N0})\", Path.GetFileName(e.Entry.Path), entryIndex + 1, archive.Entries.Count);\n                    }\n                };\n\n                archive.EntryWritten += (sender, e) =>\n                {\n                    entryIndex++;\n\n                    dialog.ReportProgress(entryIndex * 100 / archive.Entries.Count, description);\n\n                    if (entryIndex == archive.Entries.Count)\n                    {\n                        dialog.ReportProgress(100, \"Finishing up\");\n                    }\n                };\n\n\n\n\n                foreach (FileEntry entry in settings.FileEntries)\n                {\n                    try\n                    {\n                        archive.CreateEntryFromFile(entry.SourceFile, entry.FilenameInArchive);\n                    }\n                    catch (FileRejectedException)\n                    {\n                        rejectedFiles.Add(entry.SourceFile);\n                    }\n                }\n\n\n\n                if (rejectedFiles.Count > 0)\n                {\n                    if (new RejectedFilesDialog(rejectedFiles).ShowDialog() != DialogResult.Yes)\n                    {\n                        destination.Close();\n                        return;\n                    }\n                }\n            }\n\n\n            if (settings.CompressionFormat != null)\n            {\n                destination.Position = 0;\n\n                using (FileStream outStream = File.Create(settings.OutFilename))\n                {\n                    settings.CompressionFormat.GetCodec().Compress(destination, outStream);\n                }\n            }\n\n            destination.Close();\n        }\n\n        private struct FileEntry\n        {\n            public string SourceFile;\n            public string Filename;\n            public string FilenameInArchive;\n        }\n\n        private void listView_ClientSizeChanged(object sender, EventArgs e)\n        {\n            int columnWidth = Math.Max(150, (listView.ClientSize.Width - 20 - listView.Columns[0].Width) / 2);\n            listView.Columns[1].Width = columnWidth;\n            listView.Columns[2].Width = columnWidth;\n        }\n\n        private new void addFilesButton_Click(object sender, EventArgs e)\n        {\n            OpenFileDialog ofd = new OpenFileDialog();\n            ofd.Filter = \"All Files (*.*)|*.*\";\n            ofd.Multiselect = true;\n            ofd.Title = \"Add Files\";\n\n            if (ofd.ShowDialog() == DialogResult.OK)\n            {\n                AddFiles(ofd.FileNames);\n\n                EnableRunButton();\n            }\n        }\n\n        private new void addDirectoryButton_Click(object sender, EventArgs e)\n        {\n            VistaFolderBrowserDialog fbd = new VistaFolderBrowserDialog();\n            fbd.Description = \"Select a directory.\";\n            fbd.UseDescriptionForTitle = true;\n\n            if (fbd.ShowDialog() == DialogResult.OK)\n            {\n                if (MessageBox.Show(\"Include files within subdirectories?\", \"Subdirectories\", MessageBoxButtons.YesNo) == DialogResult.Yes)\n                {\n\n                    AddFiles(Directory.EnumerateFiles(fbd.SelectedPath, \"*\", SearchOption.AllDirectories));\n                }\n                else\n                {\n\n                    AddFiles(Directory.EnumerateFiles(fbd.SelectedPath));\n                }\n\n                EnableRunButton();\n            }\n        }\n\n        private void addFromEntriesButton_Click(object sender, EventArgs e)\n        {\n            OpenFileDialog ofd = new OpenFileDialog();\n            ofd.Filter = \"entries.txt|entries.txt|All Files (*.*)|*.*\";\n            ofd.Multiselect = true;\n            ofd.Title = \"Add Files\";\n\n            if (ofd.ShowDialog() == DialogResult.OK)\n            {\n                string directory = Path.GetDirectoryName(ofd.FileName);\n\n                AddFiles(File.ReadLines(ofd.FileName).Select(x => Path.Combine(directory, x)));\n\n                EnableRunButton();\n            }\n        }\n\n        private void archiveFormatBox_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            archiveSettingsPanel.Controls.Clear();\n\n            if (archiveFormatBox.SelectedIndex != 0)\n            {\n                var archiveFormat = (IArchiveFormat)archiveFormatBox.SelectedItem;\n                if (!writerSettingsControlsCache.TryGetValue(archiveFormat, out var writerSettingsControl))\n                {\n                    writerSettingsControl = archiveFormat.GetModuleSettingsControl();\n                    writerSettingsControlsCache.Add(archiveFormat, writerSettingsControl);\n                }\n\n                archiveSettingsPanel.Controls.Add(writerSettingsControl);\n            }\n\n            EnableRunButton();\n        }\n\n        private void deleteToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n\n\n            int firstIndex = 0;\n\n\n            foreach (ListViewItem item in listView.SelectedItems)\n            {\n\n                if (item.Index > firstIndex)\n                {\n                    firstIndex = item.Index;\n                }\n\n                listView.Items.Remove(item);\n            }\n\n\n            for (int i = firstIndex; i < listView.Items.Count; i++)\n            {\n                listView.Items[i].SubItems[0].Text = (i + 1).ToString();\n            }\n\n            EnableRunButton();\n        }\n\n        private void renameToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            InputDialog dialog = new InputDialog();\n            dialog.WindowTitle = \"Rename Files\";\n            dialog.MainInstruction = dialog.WindowTitle;\n            dialog.Content = \"Selected files will use this filename when added to the archive.\";\n\n            if (listView.SelectedItems.Count == 1)\n            {\n                dialog.Input = listView.SelectedItems[0].SubItems[2].Text;\n            }\n\n            if (dialog.ShowDialog() == DialogResult.OK)\n            {\n                foreach (ListViewItem item in listView.SelectedItems)\n                {\n                    item.SubItems[2].Text = dialog.Input;\n                    FileEntry fileEntry = (FileEntry)item.Tag;\n                    fileEntry.FilenameInArchive = dialog.Input;\n                }\n            }\n        }\n\n        private async void runButton_Click(object sender, EventArgs e)\n        {\n\n            IArchiveFormat archiveFormat = (IArchiveFormat)archiveFormatBox.SelectedItem;\n            string fileExtension = archiveFormat.FileExtension != string.Empty ? archiveFormat.FileExtension : \".*\";\n\n\n            SaveFileDialog sfd = new SaveFileDialog();\n            sfd.Title = \"Save Archive\";\n            sfd.Filter = archiveFormat.Name + \" Archive (*\" + fileExtension + \")|*\" + fileExtension + \"|All Files (*.*)|*.*\";\n\n            if (sfd.ShowDialog() == DialogResult.OK)\n            {\n\n                Enabled = false;\n\n\n\n                var files = listView.Items\n                    .Cast<ListViewItem>()\n                    .Select(x => (FileEntry)x.Tag)\n                    .Select(x => new ArchiveCreatorFileEntry\n                    {\n                        Filename = x.Filename,\n                        FilenameInArchive = x.FilenameInArchive,\n                        SourceFile = x.SourceFile,\n                    })\n                    .ToList();\n                var outputPath = sfd.FileName;\n\n\n                var toolOptions = new ArchiveCreatorOptions\n                {\n                    CompressionFormat = compressionFormatBox.SelectedIndex != 0\n                        ? (ICompressionFormat)compressionFormatBox.SelectedItem\n                        : null,\n                };\n\n\n                var formatOptions = writerSettingsControlsCache.TryGetValue(archiveFormat, out var writerSettingsControl)\n                        ? (IArchiveFormatOptions)writerSettingsControl\n                        : null;\n\n\n                var progressDialog = new ProgressDialog\n                {\n                    WindowTitle = \"Processing\",\n                    Title = \"ncoding Textures\",\n                };\n\n                var progress = new Progress<ToolProgress>(x =>\n                {\n                    progressDialog.ReportProgress((int)(x.Progress * 100), $\"Processing {Path.GetFileName(x.File)} ({x.Progress:P0})\");\n                });\n\n                progressDialog.Show();\n\n\n                var tool = new PuyoTools.App.Tools.ArchiveCreator(archiveFormat, toolOptions, formatOptions);\n                await Task.Run(() => tool.Execute(files, outputPath, progress));\n\n\n                progressDialog.Close();\n                Close();\n            }\n        }\n\n        private struct Settings\n        {\n            public IArchiveFormat ArchiveFormat;\n            public ICompressionFormat CompressionFormat;\n            public string OutFilename;\n            public List<FileEntry> FileEntries;\n            public ModuleSettingsControl WriterSettingsControl;\n        }\n    }\n}\n\n'puyotools/src/PuyoTools.App.Cli/Formats/Archives/SntFormat.cs'\n:﻿using PuyoTools.App.Cli.Commands.Archives;\nusing PuyoTools.Core;\nusing PuyoTools.Core.Archives;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace PuyoTools.App.Formats.Archives\n{\n\n    internal partial class SntFormat : IArchiveFormat\n    {\n        public string CommandName => \"snt\";\n\n        public ArchiveFormatCreateCommand GetCreateCommand() => new SntArchiveCreateCommand(this);\n    }\n}\n",
        "gt": [
            "'puyotools/src/PuyoTools.App.Cli/Formats/Archives/SntFormat.cs'",
            "'puyotools/src/PuyoTools.App.UI/GUI/ArchiveCreator.cs'",
            "'puyotools/src/PuyoTools.App.UI/Formats/Archives/SvmFormat.cs'",
            "'puyotools/src/PuyoTools.App.UI/Formats/Archives/WriterSettings/PvmWriterSettings.cs'"
        ]
    },
    {
        "files": [
            "'DotNetUniversalPatcher/DotNetUniversalPatcher/Engine/ScriptEngine.cs'",
            "'DotNetUniversalPatcher/DotNetUniversalPatcher/UI/FrmAddTarget.cs'",
            "'DotNetUniversalPatcher/DotNetUniversalPatcher/Utilities/Constants.cs'"
        ],
        "content": "'DotNetUniversalPatcher/DotNetUniversalPatcher/Engine/ScriptEngine.cs'\n:﻿using dnlib.DotNet;\nusing DotNetUniversalPatcher.Models;\nusing DotNetUniversalPatcher.UI;\nusing DotNetUniversalPatcher.Utilities;\nusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Windows.Forms;\nusing DotNetUniversalPatcher.Properties;\n\nnamespace DotNetUniversalPatcher.Engine\n{\n    internal class ScriptEngine : ScriptEngineBase\n    {\n        internal static Dictionary<string, string> Placeholders { get; set; } = new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase);\n\n        public override string[] GetSoftwareNames()\n        {\n            string[] softwareNames = new string[LoadedScripts.Count];\n\n            for (int i = 0; i < LoadedScripts.Count; i++)\n            {\n                softwareNames[i] = LoadedScripts[i].PatcherOptions.PatcherInfo.Software;\n            }\n\n            return softwareNames;\n        }\n\n        public override void LoadAndParseScripts()\n        {\n            try\n            {\n                Logger.ClearLogs();\n\n                string[] scriptFiles = Directory.GetFiles(Constants.PatchersDir, Constants.ScriptFilePattern, SearchOption.TopDirectoryOnly).Select(Path.GetFullPath).ToArray();\n\n                foreach (string file in scriptFiles)\n                {\n                    try\n                    {\n                        var script = JsonConvert.DeserializeObject<PatcherScript>(File.ReadAllText(file), new JsonSerializerSettings\n                        {\n                            DefaultValueHandling = DefaultValueHandling.Ignore,\n                            NullValueHandling = NullValueHandling.Ignore,\n                            DateFormatString = \"dd.MM.yyyy\"\n                        });\n\n                        if (ScriptEngineHelpers.ValidateScript(script))\n                        {\n                            ScriptEngineHelpers.AddPlaceholders(script);\n                            ScriptEngineHelpers.ParsePlaceholders(script);\n                            ScriptEngineHelpers.AddTargetFilesText(script);\n\n                            LoadedScripts.Add(script);\n                        }\n                    }\n                    catch (Exception ex)\n                    {\n                        Logger.Error(string.Format(Resources.ScriptEngine_LoadAndParseScripts_Exception_Msg,\n                            Path.GetFileName(file), Program.IsDebugModeEnabled ? \"\\r\\n\" : string.Empty, ex.Message,\n                            Program.IsDebugModeEnabled ? string.Format(\"\\r\\n{0}\", ex.StackTrace) : string.Empty));\n                        IsLoadingError = true;\n                        FrmMain.Instance.grpReleaseInfo.Enabled = true;\n                    }\n                }\n            }\n            catch (DirectoryNotFoundException ex)\n            {\n                Logger.Error(string.Format(Resources.ScriptEngine_LoadAndParseScripts__DirectoryNotFoundException_Msg,\n                    Program.IsDebugModeEnabled ? \"\\r\\n\" : string.Empty, ex.Message,\n                    Program.IsDebugModeEnabled ? string.Format(\"\\r\\n{0}\", ex.StackTrace) : string.Empty));\n                IsLoadingError = true;\n                FrmMain.Instance.grpReleaseInfo.Enabled = true;\n            }\n            catch\n            {\n\n            }\n\n            if (LoadedScripts.Count > 0)\n            {\n                FrmMain.Instance.grpPatcherInfo.Enabled = true;\n                FrmMain.Instance.grpReleaseInfo.Enabled = true;\n                FrmMain.Instance.txtReleaseInfo.Enabled = true;\n                FrmMain.Instance.chkMakeBackup.Enabled = true;\n                FrmMain.Instance.btnPatch.Enabled = true;\n            }\n            else\n            {\n                FrmMain.Instance.grpPatcherInfo.Enabled = false;\n                FrmMain.Instance.txtReleaseInfo.Enabled = false;\n                FrmMain.Instance.chkMakeBackup.Enabled = false;\n                FrmMain.Instance.btnPatch.Enabled = false;\n\n                FrmMain.Instance.txtTargetFiles.Clear();\n                FrmMain.Instance.txtAuthor.Clear();\n                FrmMain.Instance.txtWebsite.Clear();\n                FrmMain.Instance.txtReleaseDate.Clear();\n                FrmMain.Instance.txtReleaseInfo.Clear();\n\n                FrmMain.Instance.chkMakeBackup.Checked = false;\n\n                RefreshTargetFilesText();\n            }\n        }\n\n        public override void ChangeScript()\n        {\n            CurrentScript = LoadedScripts[FrmMain.Instance.cmbSoftware.SelectedIndex];\n\n            RefreshTargetFilesText();\n        }\n\n        public override void Process()\n        {\n            int patchedFileCount = 0;\n\n            try\n            {\n                foreach (var patch in CurrentScript.PatchList)\n                {\n                    foreach (string path in patch.TargetInfo.TargetFiles)\n                    {\n                        string filePath = path;\n\n                        if (!File.Exists(filePath))\n                        {\n                            Logger.Error(string.Format(Resources.ScriptEngine_Process_File_not_found_Msg, filePath));\n\n                            using (var ofd = new OpenFileDialog())\n                            {\n                                ofd.FileName = Path.GetFileName(filePath);\n                                ofd.Filter = Resources.ScriptEngine_Process_Filter_ExtName;\n                                ofd.CheckFileExists = true;\n\n                                string directoryName = Path.GetDirectoryName(filePath);\n\n                                if (Directory.Exists(directoryName))\n                                {\n                                    ofd.InitialDirectory = directoryName;\n                                }\n                                else\n                                {\n                                    ofd.RestoreDirectory = true;\n                                }\n\n                                if (ofd.ShowDialog() == DialogResult.OK)\n                                {\n                                    filePath = ofd.FileName;\n                                }\n                                else\n                                {\n                                    Logger.Log(Resources.ScriptEngine_Process__Skipping_file_Msg);\n                                    Logger.Log();\n                                    continue;\n                                }\n                            }\n                        }\n\n                        bool keepOldMaxStack = patch.TargetInfo.KeepOldMaxStack;\n\n                        using (var p = new Patcher(filePath, keepOldMaxStack))\n                        {\n                            Logger.Log(string.Format(Resources.ScriptEngine_Process__File_Path_Msg, filePath,\n                                keepOldMaxStack ? \"-> KeepOldMaxStack: True\" : string.Empty));\n\n                            foreach (var target in patch.TargetList)\n                            {\n                                ProcessInternal(p, target);\n                            }\n\n                            p.Save(Convert.ToBoolean(CurrentScript.PatcherOptions.PatcherInfo.MakeBackup));\n                        }\n\n                        patchedFileCount++;\n\n                        Logger.Log(string.Format(Resources.ScriptEngine_Process__File_Patched_Msg, filePath));\n                        Logger.Log();\n                    }\n\n                    Logger.Log();\n                }\n            }\n            catch (Exception ex)\n            {\n                Logger.Error(string.Format(\"{0}{1}\", ex.Message,\n                    Program.IsDebugModeEnabled ? string.Format(\"\\r\\n{0}\", ex.StackTrace) : string.Empty));\n                Logger.Log();\n            }\n\n            Logger.Info(patchedFileCount > 0 ? string.Format(Resources.ScriptEngine_Process_Patching_process_finished_Msg,\n                    patchedFileCount)\n                : Resources.ScriptEngine_Process_Nothing_patched_Msg);\n        }\n\n        internal void ProcessInternal(Patcher p, Target target)\n        {\n            p.Method = p.FindMethod(target.FullName).ResolveMethodDef();\n            p.Instructions = p.Method.Body.Instructions;\n\n            if (target.ILCodes != null && target.ILCodes.Count > 0)\n            {\n                ScriptEngineHelpers.ParseILCodes(p, target);\n            }\n\n            ScriptEngineHelpers.PatchTarget(p, target);\n\n            ScriptEngineHelpers.WriteActionToLog(target);\n        }\n\n        private void RefreshTargetFilesText()\n        {\n            FrmMain.Instance.lblTargetFiles.Text = string.Format(Resources.FrmMain_Target_Files_Text, CurrentScript.TargetFilesCount);\n        }\n    }\n}\n'DotNetUniversalPatcher/DotNetUniversalPatcher/UI/FrmAddTarget.cs'\n:﻿using dnlib.DotNet.Emit;\nusing DotNetUniversalPatcher.Extensions;\nusing DotNetUniversalPatcher.Models;\nusing DotNetUniversalPatcher.Utilities;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Windows.Forms;\nusing DotNetUniversalPatcher.Properties;\n\nnamespace DotNetUniversalPatcher.UI\n{\n    public partial class FrmAddTarget : Form\n    {\n        internal static FrmAddTarget Instance { get; } = new FrmAddTarget();\n\n        private static List<OpCode> _opCodes;\n\n        private int _selectedActionMethod;\n        private int _selectedInstructionIndex;\n        private OpCode _selectedOpCode;\n\n        internal int SelectedTargetId;\n\n        public FrmAddTarget()\n        {\n            InitializeComponent();\n        }\n\n        private void FrmAddTarget_Load(object sender, EventArgs e)\n        {\n            if (cmbActionMethod.Items.Count == 0)\n            {\n                foreach (var action in Enum.GetNames(typeof(ActionMethod)))\n                {\n                    cmbActionMethod.Items.Add(action);\n                }\n            }\n\n            if (cmbOpCodes.Items.Count == 0)\n            {\n                LoadOpCodes();\n                cmbOpCodes.Items.AddRange(_opCodes.ToArray());\n            }\n\n            txtFullName.Text = string.Empty;\n            cmbActionMethod.SelectedIndex = -1;\n            cmbOptional.SelectedIndex = -1;\n\n            ClearControls();\n\n            if (dgvInstructions.Rows.Count > 0)\n            {\n                dgvInstructions.Rows.Clear();\n            }\n\n            btnAddTarget.Text = Resources.FrmAddTarget_TsmiRemoveInstruction_AddTarget_Text;\n\n            if (Text == Resources.FrmAddTarget_Edit_Target_Text)\n            {\n                var selectedPatchIndex = FrmScriptEditor.Instance.cmbPatchList.SelectedIndex;\n\n                var target = FrmScriptEditor.Instance.PatchList[selectedPatchIndex].TargetList[SelectedTargetId];\n\n                txtFullName.Text = target.FullName;\n\n                if (target.Action != null)\n                {\n                    cmbActionMethod.SelectedIndex = (int)target.Action;\n                }\n                else\n                {\n                    cmbActionMethod.SelectedIndex = -1;\n                }\n\n                switch (target.Optional?.ToLowerInvariant())\n                {\n                    case \"true\":\n                        cmbOptional.SelectedIndex = 0;\n                        break;\n\n                    case \"false\":\n                        cmbOptional.SelectedIndex = 1;\n                        break;\n\n                    default:\n                        cmbOptional.SelectedIndex = -1;\n                        break;\n                }\n\n                for (var i = 0; i < target.ILCodes?.Count; i++)\n                {\n                    var ilCode = target.ILCodes?[i];\n\n                    dgvInstructions.Rows.Add(target.Indices?.Count > 0 ? target.Indices[i] : string.Empty, ilCode.OpCode, ilCode.Operand);\n                }\n            }\n        }\n\n        private void BtnAddTarget_Click(object sender, EventArgs e)\n        {\n            if (_selectedActionMethod == -1)\n            {\n                Helpers.CustomMessageBox(\"Action Method is empty!\");\n                cmbActionMethod.Focus();\n                return;\n            }\n\n            switch (_selectedActionMethod)\n            {\n                case (int)ActionMethod.Insert:\n                case (int)ActionMethod.Replace:\n                case (int)ActionMethod.Remove:\n                    {\n                        if (string.IsNullOrWhiteSpace(txtIndex.Text))\n                        {\n                            Helpers.CustomMessageBox(\"Index is empty!\");\n                            txtIndex.Focus();\n                            return;\n                        }\n\n                        break;\n                    }\n            }\n\n            switch (_selectedActionMethod)\n            {\n                case (int)ActionMethod.Patch:\n                case (int)ActionMethod.Insert:\n                case (int)ActionMethod.Replace:\n                    {\n                        if (cmbOpCodes.SelectedIndex == -1)\n                        {\n                            Helpers.CustomMessageBox(\"OpCode is empty!\");\n                            cmbOpCodes.Focus();\n                            return;\n                        }\n\n                        break;\n                    }\n            }\n\n            if (btnAddTarget.Text == Resources.FrmAddTarget_TsmiRemoveInstruction_AddTarget_Text)\n            {\n                string[] cells = new string[3];\n\n                cells[0] = txtIndex.Text.EmptyIfNull();\n                cells[1] = cmbOpCodes.Text.EmptyIfNull();\n\n                if (_selectedOpCode != null)\n                {\n                    switch (_selectedOpCode.OperandType)\n                    {\n                        case OperandType.InlineNone:\n                        case OperandType.InlinePhi:\n                        case OperandType.NOT_USED_8:\n                            cells[2] = string.Empty;\n                            break;\n\n                        default:\n                            cells[2] = txtOperand.Text.EmptyIfNull();\n                            break;\n                    }\n                }\n\n                dgvInstructions.Rows.Add(cells);\n            }\n            else if (btnAddTarget.Text == Resources.FrmAddTarget_TsmiEditInstruction_Update_Text)\n            {\n                dgvInstructions.Rows[_selectedInstructionIndex].Cells[0].Value = txtIndex.Text.EmptyIfNull();\n                dgvInstructions.Rows[_selectedInstructionIndex].Cells[1].Value = cmbOpCodes.Text.EmptyIfNull();\n\n                if (_selectedOpCode != null)\n                {\n                    switch (_selectedOpCode.OperandType)\n                    {\n                        case OperandType.InlineNone:\n                        case OperandType.InlinePhi:\n                        case OperandType.NOT_USED_8:\n                            dgvInstructions.Rows[_selectedInstructionIndex].Cells[2].Value = string.Empty;\n                            break;\n\n                        default:\n                            dgvInstructions.Rows[_selectedInstructionIndex].Cells[2].Value = txtOperand.Text.EmptyIfNull();\n                            break;\n                    }\n                }\n\n                btnAddTarget.Text = Resources.FrmAddTarget_TsmiRemoveInstruction_AddTarget_Text;\n            }\n        }\n\n        private void BtnClear_Click(object sender, EventArgs e)\n        {\n            if (txtIndex.TextLength > 0 || cmbOpCodes.SelectedIndex != -1 || txtOperand.TextLength > 0)\n            {\n                ClearControls();\n            }\n        }\n\n        private void BtnCancel_Click(object sender, EventArgs e)\n        {\n            Close();\n        }\n\n        private void BtnSave_Click(object sender, EventArgs e)\n        {\n            if (string.IsNullOrWhiteSpace(txtFullName.Text))\n            {\n                Helpers.CustomMessageBox(\"Full Name is empty!\");\n                txtFullName.Focus();\n                return;\n            }\n\n            if (_selectedActionMethod == (int)ActionMethod.ReturnBody && cmbOptional.SelectedIndex == -1)\n            {\n                Helpers.CustomMessageBox(\"Optional is empty!\");\n                cmbOptional.Focus();\n                return;\n            }\n\n            var selectedPatchIndex = FrmScriptEditor.Instance.cmbPatchList.SelectedIndex;\n\n            List<ILCode> ilCodes = new List<ILCode>();\n            List<string> indices = new List<string>();\n\n            foreach (DataGridViewRow dgvInstructionsRow in dgvInstructions.Rows)\n            {\n                indices.Add(dgvInstructionsRow.Cells[0].Value?.ToString().EmptyIfNull());\n                ilCodes.Add(new ILCode { OpCode = dgvInstructionsRow.Cells[1].Value?.ToString().EmptyIfNull(), Operand = dgvInstructionsRow.Cells[2].Value?.ToString().EmptyIfNull() });\n            }\n\n            if (btnSave.Text == Resources.FrmAddTarget_Save_Text)\n            {\n                FrmScriptEditor.Instance.PatchList[selectedPatchIndex].TargetList.Add(new Target\n                {\n                    FullName = txtFullName.Text,\n                    Action = (ActionMethod)cmbActionMethod.SelectedIndex,\n                    Optional = cmbOptional.Text,\n                    ILCodes = ilCodes,\n                    Indices = indices\n                });\n\n                FrmScriptEditor.Instance.dgvTargetList.Rows.Add($\"[{cmbActionMethod.Text}]\", txtFullName.Text);\n\n                SelectedTargetId = FrmScriptEditor.Instance.PatchList[selectedPatchIndex].TargetList.Count - 1;\n\n                btnSave.Text = Resources.FrmAddTarget_BtnSave_Update_Text;\n            }\n            else if (btnSave.Text == Resources.FrmAddTarget_BtnSave_Update_Text)\n            {\n                var selectedTarget = FrmScriptEditor.Instance.PatchList[selectedPatchIndex].TargetList[SelectedTargetId];\n\n                selectedTarget.FullName = txtFullName.Text;\n                selectedTarget.Action = (ActionMethod)cmbActionMethod.SelectedIndex;\n                selectedTarget.Optional = cmbOptional.Text;\n                selectedTarget.ILCodes = ilCodes;\n                selectedTarget.Indices = indices;\n\n                FrmScriptEditor.Instance.dgvTargetList.Rows[SelectedTargetId].Cells[0].Value = $\"[{cmbActionMethod.Text}]\";\n                FrmScriptEditor.Instance.dgvTargetList.Rows[SelectedTargetId].Cells[1].Value = txtFullName.Text;\n            }\n\n            FrmScriptEditor.Instance.CheckChanges();\n        }\n\n        private void CmbActionMethod_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            _selectedActionMethod = cmbActionMethod.SelectedIndex;\n\n            cmbOptional.Enabled = cmbActionMethod.SelectedIndex == (int)ActionMethod.ReturnBody;\n\n            txtIndex.Enabled = _selectedActionMethod != (int)ActionMethod.Patch;\n\n            if (_selectedActionMethod == (int)ActionMethod.Remove)\n            {\n                cmbOpCodes.Enabled = false;\n                txtOperand.Enabled = false;\n            }\n            else if (_selectedActionMethod == (int)ActionMethod.Insert || _selectedActionMethod == (int)ActionMethod.Replace)\n            {\n                cmbOpCodes.Enabled = true;\n                txtOperand.Enabled = true;\n            }\n\n            if (_selectedActionMethod == (int)ActionMethod.EmptyBody || _selectedActionMethod == (int)ActionMethod.ReturnBody)\n            {\n                grpInstructions.Enabled = false;\n                grpAddInstruction.Enabled = false;\n            }\n            else\n            {\n                grpInstructions.Enabled = true;\n                grpAddInstruction.Enabled = true;\n            }\n        }\n\n        private void CmbOpCodes_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            if (cmbOpCodes.SelectedIndex != -1)\n            {\n                _selectedOpCode = (OpCode)cmbOpCodes.SelectedItem;\n\n                switch (_selectedOpCode.OperandType)\n                {\n                    case OperandType.InlineNone:\n                    case OperandType.InlinePhi:\n                    case OperandType.NOT_USED_8:\n                        txtOperand.Enabled = false;\n                        break;\n\n                    default:\n                        txtOperand.Enabled = true;\n                        break;\n                }\n            }\n        }\n\n        private void TsmiEditInstruction_Click(object sender, EventArgs e)\n        {\n            if (dgvInstructions.SelectedRows.Count > 0)\n            {\n                _selectedInstructionIndex = dgvInstructions.SelectedRows[0].Index;\n\n                txtIndex.Text = dgvInstructions.Rows[_selectedInstructionIndex].Cells[0].Value?.ToString().EmptyIfNull();\n                cmbOpCodes.Text = dgvInstructions.Rows[_selectedInstructionIndex].Cells[1].Value?.ToString().EmptyIfNull();\n                txtOperand.Text = dgvInstructions.Rows[_selectedInstructionIndex].Cells[2].Value?.ToString().EmptyIfNull();\n\n                btnAddTarget.Text = Resources.FrmAddTarget_TsmiEditInstruction_Update_Text;\n            }\n        }\n\n        private void TsmiRemoveInstruction_Click(object sender, EventArgs e)\n        {\n            if (dgvInstructions.SelectedRows.Count > 0)\n            {\n                dgvInstructions.Rows.RemoveAt(dgvInstructions.SelectedRows[0].Index);\n\n                if (btnAddTarget.Text == Resources.FrmAddTarget_TsmiEditInstruction_Update_Text)\n                {\n                    btnAddTarget.Text = Resources.FrmAddTarget_TsmiRemoveInstruction_AddTarget_Text;\n                    _selectedInstructionIndex = -1;\n                }\n            }\n        }\n\n        private void TsmiMoveUpInstruction_Click(object sender, EventArgs e)\n        {\n            if (dgvInstructions.SelectedRows.Count > 0)\n            {\n                dgvInstructions.MoveUp();\n\n                ResetAddTarget();\n            }\n        }\n\n        private void TsmiMoveDownInstruction_Click(object sender, EventArgs e)\n        {\n            if (dgvInstructions.SelectedRows.Count > 0)\n            {\n                dgvInstructions.MoveDown();\n\n                ResetAddTarget();\n            }\n        }\n\n        public void LoadOpCodes()\n        {\n            _opCodes = new List<OpCode>();\n\n            var type = typeof(OpCodes);\n            var fields = type.GetFields(BindingFlags.Public | BindingFlags.Static);\n            foreach (var field in fields)\n            {\n                if (field.FieldType.Name == \"OpCode\")\n                {\n                    var opCode = (OpCode)type.InvokeMember(field.Name, BindingFlags.Public | BindingFlags.Static | BindingFlags.GetField, null, null, null);\n                    _opCodes.Add(opCode);\n                }\n            }\n\n            _opCodes = _opCodes.OrderBy(x => x.Name).ToList();\n        }\n\n        private void ClearControls()\n        {\n            txtIndex.Text = string.Empty;\n            cmbOpCodes.SelectedIndex = -1;\n            txtOperand.Text = string.Empty;\n        }\n\n        private void ResetAddTarget()\n        {\n            if (btnAddTarget.Text == Resources.FrmAddTarget_TsmiEditInstruction_Update_Text)\n            {\n                btnAddTarget.Text = Resources.FrmAddTarget_TsmiRemoveInstruction_AddTarget_Text;\n                _selectedInstructionIndex = -1;\n            }\n        }\n    }\n}\n'DotNetUniversalPatcher/DotNetUniversalPatcher/Utilities/Constants.cs'\n:﻿using System;\nusing System.IO;\nusing System.Reflection;\n\nnamespace DotNetUniversalPatcher.Utilities\n{\n    internal static class Constants\n    {\n        internal static readonly string MainDir = AppDomain.CurrentDomain.BaseDirectory;\n\n        internal static readonly string PatchersDirName = \"Patchers\";\n        internal static readonly string PatchersDir = Path.Combine(MainDir, PatchersDirName);\n\n        internal static readonly string Title = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyTitleAttribute>().Title;\n        internal static readonly string Version = Assembly.GetExecutingAssembly().GetCustomAttribute<AssemblyFileVersionAttribute>().Version;\n\n        internal static readonly string TitleAndVersion = $\"{Title} v{Version.Substring(0, Version.IndexOf('.', 2))}\";\n\n        internal static readonly string ScriptFileExtension = \"dnup\";\n\n        internal static readonly char DefaultSeparator = '|';\n        internal static readonly string RangeExpressionSeparator = \"...\";\n        internal static readonly string RangeExpressionRegexPattern = @\"\\.\\.\\.\";\n\n        internal static readonly string PlaceholderPattern = \"(?<!#)(#[^#]+#)(?!#)\";\n        internal static readonly string ScriptFilePattern = $\"*.{ScriptFileExtension}\";\n    }\n}",
        "gt": [
            "'DotNetUniversalPatcher/DotNetUniversalPatcher/Utilities/Constants.cs'",
            "'DotNetUniversalPatcher/DotNetUniversalPatcher/UI/FrmAddTarget.cs'",
            "'DotNetUniversalPatcher/DotNetUniversalPatcher/Engine/ScriptEngine.cs'"
        ]
    },
    {
        "files": [
            "'MCDSaveEdit/MCDSaveEdit/ViewModels/ItemListViewModel.cs'",
            "'MCDSaveEdit/MCDSaveEdit/Data/Profiles/ProfileSaveFile.cs'",
            "'MCDSaveEdit/MCDSaveEdit/AppModel.cs'"
        ],
        "content": "'MCDSaveEdit/MCDSaveEdit/ViewModels/ItemListViewModel.cs'\n:﻿using MCDSaveEdit.Data;\nusing MCDSaveEdit.Logic;\nusing MCDSaveEdit.Save.Models.Enums;\nusing MCDSaveEdit.Save.Models.Profiles;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n#nullable enable\n\nnamespace MCDSaveEdit.ViewModels\n{\n    public abstract class ItemListViewModel: EquipmentViewModel\n    {\n        protected static IEnumerable<Item> applyFilterToItems(IEnumerable<Item> items, ItemFilterEnum filter)\n        {\n            switch (filter)\n            {\n                case ItemFilterEnum.All: return items;\n                case ItemFilterEnum.MeleeWeapons: return items.Where(x => x.isMeleeWeapon());\n                case ItemFilterEnum.RangedWeapons: return items.Where(x => x.isRangedWeapon());\n                case ItemFilterEnum.Armor: return items.Where(x => x.isArmor());\n                case ItemFilterEnum.Artifacts: return items.Where(x => x.isArtifact());\n                case ItemFilterEnum.Enchanted: return items.Where(x => x.enchantmentPoints() > 0);\n            }\n            throw new NotImplementedException();\n        }\n        protected static Item? equipmentSlot(IEnumerable<Item> itemList, EquipmentSlotEnum equipmentSlot)\n        {\n            var equipmentSlotString = equipmentSlot.ToString();\n            return itemList.FirstOrDefault(x => x.EquipmentSlot == equipmentSlotString);\n        }\n        protected static int? computeCharacterPower(IEnumerable<Item> items)\n        {\n            var melee = equipmentSlot(items, EquipmentSlotEnum.MeleeGear)?.Power ?? 0;\n            var armor = equipmentSlot(items, EquipmentSlotEnum.ArmorGear)?.Power ?? 0;\n            var ranged = equipmentSlot(items, EquipmentSlotEnum.RangedGear)?.Power ?? 0;\n            var slot1 = equipmentSlot(items, EquipmentSlotEnum.HotbarSlot1)?.Power ?? 0;\n            var slot2 = equipmentSlot(items, EquipmentSlotEnum.HotbarSlot2)?.Power ?? 0;\n            var slot3 = equipmentSlot(items, EquipmentSlotEnum.HotbarSlot3)?.Power ?? 0;\n            var characterPower = GameCalculator.characterPowerFromEquippedItemPowers(melee, armor, ranged, slot1, slot2, slot3);\n            var chacarterDisplayPower = GameCalculator.levelFromPower(characterPower);\n            return chacarterDisplayPower;\n        }\n\n        public ItemListViewModel(Property<ProfileSaveFile?> profile) : base(profile)\n        {\n            equipmentCanExist = _profile.map<ProfileSaveFile?, bool>(p => p != null);\n            level = _profile.map<ProfileSaveFile?, int?>(\n                p => p?.level() ?? Constants.MINIMUM_CHARACTER_LEVEL,\n                setXpFromLevel);\n            filteredItemList = _filter.map(getFilteredItems);\n            equippedItemList = _profile.map<ProfileSaveFile?, IEnumerable<Item>>(p => p?.Items?.Where(x => x.EquipmentSlot != null) ?? new Item[0]);\n            characterPower = equippedItemList.map(computeCharacterPower);\n\n            _profile.subscribe(p => {\n\n                this.filter.setValue = ItemFilterEnum.All;\n                _selectedItem.value = null;\n            });\n            level.subscribe(_ => this.updateEnchantmentPoints());\n            equippedItemList.subscribe(_ => this.updateEnchantmentPoints());\n            selectedItem.subscribe(_ => this.updateEnchantmentPoints());\n        }\n\n        private void setXpFromLevel(ProfileSaveFile? p, int? value)\n        {\n            if (p == null || !value.HasValue) { return; }\n            p!.Xp = GameCalculator.experienceForLevel(value.Value);\n        }\n        protected abstract IEnumerable<Item> items { get; set; }\n\n        protected IEnumerable<Item> getFilteredItems(ItemFilterEnum filter)\n        {\n            var items = this.items.Where(x => x.EquipmentSlot == null) ?? new Item[0];\n            return applyFilterToItems(items, filter).OrderBy(x => x.InventoryIndex!.Value);\n        }\n\n\n        protected readonly Property<ItemFilterEnum> _filter = new Property<ItemFilterEnum>(ItemFilterEnum.All);\n        public IReadWriteProperty<ItemFilterEnum> filter { get { return _filter; } }\n\n        public IReadProperty<IEnumerable<Item>> filteredItemList { get; protected set; }\n\n        public void addItemToList(Item item)\n        {\n            if (item == null || profile.value == null) { return; }\n            var inventory = addingItemToCollection(this.items, item);\n            this.items = inventory;\n\n            triggerSubscribersForItem(item);\n        }\n\n        public void removeItem(Item item)\n        {\n            if (item == null || profile.value == null) { return; }\n            var inventory = this.items.removing(item);\n            this.items = inventory;\n\n            triggerSubscribersForItem(item);\n        }\n\n        public override void saveItem(Item item)\n        {\n            if (item == null || profile.value == null || selectedItem.value == null) { return; }\n            var inventory = this.items.replacing(selectedItem.value!, item);\n            this.items = inventory;\n\n            triggerSubscribersForItem(item);\n        }\n\n        protected IEnumerable<Item> addingItemToCollection(IEnumerable<Item> collection, Item item)\n        {\n            var index = getMaxIndex(collection) + 1;\n            item.InventoryIndex = index;\n            return collection.Append(item);\n        }\n\n        private long getFirstAvailableIndex(IEnumerable<Item> collection)\n        {\n            var inventoryIndexes = new HashSet<long>(collection.Select(i => i.InventoryIndex ?? 0));\n            long index = 0;\n            while (inventoryIndexes.Contains(index))\n            {\n                index++;\n            }\n            return index;\n        }\n\n        private long getMaxIndex(IEnumerable<Item> collection)\n        {\n            var list = collection.ToList();\n            var maxIndex = list.Count > 0 ? list.Select(i => i.InventoryIndex ?? 0).Max() : -1;\n            return maxIndex;\n        }\n    }\n}\n\n'MCDSaveEdit/MCDSaveEdit/Data/Profiles/ProfileSaveFile.cs'\n:﻿using System.Collections.Generic;\nusing System.Text.Json.Serialization;\n\nnamespace MCDSaveEdit.Save.Models.Profiles\n{\n    public partial class ProfileSaveFile\n    {\n        [JsonPropertyName(\"bonus_prerequisites\")]\n        public string[] BonusPrerequisites { get; set; }\n\n        [JsonPropertyName(\"clone\")]\n        public bool Clone { get; set; }\n\n        [JsonPropertyName(\"cosmetics\")]\n        public Cosmetic[] Cosmetics { get; set; }\n\n        [JsonPropertyName(\"cosmeticsEverEquipped\")]\n        public string[] CosmeticsEverEquipped { get; set; }\n\n        [JsonPropertyName(\"creationDate\")]\n        public string CreationDate { get; set; }\n\n        [JsonPropertyName(\"currenciesFound\")]\n        public string[] CurrenciesFound { get; set; }\n\n        [JsonPropertyName(\"currency\")]\n        public Currency[] Currency { get; set; }\n\n        [JsonPropertyName(\"customized\")]\n        public bool Customized { get; set; }\n\n        [JsonPropertyName(\"difficulties\")]\n        public Difficulties? Difficulties { get; set; }\n\n        [JsonPropertyName(\"endGameContentProgress\")]\n        public object EndGameContentProgress { get; set; }\n\n        [JsonPropertyName(\"finishedObjectiveTags\")]\n        public Dictionary<string, long> FinishedObjectiveTags { get; set; }\n\n        [JsonPropertyName(\"items\")]\n        public Item[] Items { get; set; }\n\n        [JsonPropertyName(\"itemsFound\")]\n        public string[] ItemsFound { get; set; }\n\n        [JsonPropertyName(\"legendaryStatus\")]\n        public double? LegendaryStatus { get; set; }\n\n        [JsonPropertyName(\"lobbychest_progress\")]\n        public Dictionary<string, LobbychestProgress> LobbychestProgress { get; set; }\n\n        [JsonPropertyName(\"mapUIState\")]\n        public object MapUiState { get; set; }\n\n\n        [JsonPropertyName(\"merchantData\")]\n        public Dictionary<string, MerchantDef> MerchantData { get; set; }\n\n        [JsonPropertyName(\"missionStatesMap\")]\n        public object? MissionStatesMap { get; set; }\n\n        [JsonPropertyName(\"mob_kills\")]\n        public Dictionary<string, long> MobKills { get; set; }\n\n        [JsonPropertyName(\"name\")]\n        public string Name { get; set; }\n\n        [JsonPropertyName(\"pendingRewardItem\")]\n        public object PendingRewardItem { get; set; }\n\n        [JsonPropertyName(\"pendingRewardItems\")]\n        public object PendingRewardItems { get; set; }\n\n        [JsonPropertyName(\"playerId\")]\n        public string PlayerId { get; set; }\n\n        [JsonPropertyName(\"progress\")]\n        public Dictionary<string, Progress> Progress { get; set; }\n\n        [JsonPropertyName(\"progressStatCounters\")]\n        public Dictionary<string, long> ProgressStatCounters { get; set; }\n\n        [JsonPropertyName(\"progressionKeys\")]\n        public string[] ProgressionKeys { get; set; }\n\n        [JsonPropertyName(\"skin\")]\n        public string Skin { get; set; }\n\n        [JsonPropertyName(\"storageChestAnnouncement\")]\n        public object StorageChestAnnouncement { get; set; }\n\n        [JsonPropertyName(\"storageChestItems\")]\n        public Item[] StorageChestItems { get; set; }\n\n        [JsonPropertyName(\"strongholdProgress\")]\n        public Dictionary<string, bool>? StrongholdProgess { get; set; }\n\n        [JsonPropertyName(\"threatLevels\")]\n        public ThreatLevels ThreatLevels { get; set; }\n\n        [JsonPropertyName(\"timestamp\")]\n        public long Timestamp { get; set; }\n\n        [JsonPropertyName(\"totalGearPower\")]\n        public long TotalGearPower { get; set; }\n\n        [JsonPropertyName(\"trialsCompleted\")]\n        public object[] TrialsCompleted { get; set; }\n\n        [JsonPropertyName(\"uiHintsExpired\")]\n        public object[] UiHintsExpired { get; set; }\n\n\n        [JsonPropertyName(\"uniqueSaveId\")]\n        public string UniqueSaveId { get; set; }\n\n        [JsonPropertyName(\"version\")]\n        public long Version { get; set; }\n\n        [JsonPropertyName(\"videosPlayed\")]\n        public string[] VideosPlayed { get; set; }\n\n        [JsonPropertyName(\"xp\")]\n        public long Xp { get; set; }\n    }\n}\n\n'MCDSaveEdit/MCDSaveEdit/AppModel.cs'\n:﻿using FModel;\nusing MCDSaveEdit.Data;\nusing MCDSaveEdit.Services;\nusing MCDSaveEdit.ViewModels;\nusing PakReader;\nusing PakReader.Pak;\nusing PakReader.Parsers.Objects;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\nusing System.Threading.Tasks;\n#nullable enable\n\nnamespace MCDSaveEdit\n{\n    public class AppModel\n    {\n        public MainViewModel mainModel = new MainViewModel();\n\n        public void initPakReader()\n        {\n            Globals.Game = new FGame(EGame.MinecraftDungeons, EPakVersion.FNAME_BASED_COMPRESSION_METHOD);\n        }\n\n        public string? usableGameContentIfExists()\n        {\n#if DEBUG\n            string? result = null;\n            foreach (var path in contentPathsToCheck())\n            {\n                if (string.IsNullOrWhiteSpace(path) == false)\n                {\n                    if (Directory.Exists(path))\n                    {\n                        Console.WriteLine($\"{path} exists\");\n                        result = result ?? path;\n                    }\n                    else\n                    {\n                        Console.WriteLine($\"{path} does not exist\");\n                    }\n                }\n            }\n            return result;\n#else\n            foreach(var path in contentPathsToCheck())\n            {\n                if (string.IsNullOrWhiteSpace(path) == false && Directory.Exists(path))\n                {\n                    return path;\n                }\n            }\n\n            return null;\n#endif\n        }\n\n        private IEnumerable<string?> contentPathsToCheck()\n        {\n            yield return RegistryTools.GetSetting(Constants.APPLICATION_NAME, Constants.PAK_FILE_LOCATION_REGISTRY_KEY, string.Empty);\n            yield return Constants.STEAM_PAKS_FOLDER_PATH;\n            yield return Constants.LAUNCHER_PAKS_FOLDER_PATH;\n            yield return Constants.XBOX_PC_GAMES_PAKS_FOLDER_PATH;\n\n        }\n\n        public static bool gameContentLoaded { get; private set; } = false;\n\n        public async Task loadGameContentAsync(string paksFolderPath)\n        {\n            var pakIndex = await loadPakIndex(paksFolderPath);\n            if (pakIndex == null)\n            {\n                throw new NullReferenceException($\"PakIndex is null. Cannot Continue.\");\n            }\n\n            var pakContentResolver = new PakContentResolver(pakIndex!, paksFolderPath);\n            await pakContentResolver.loadPakFilesAsync(preloadBitmaps: false);\n            ImageResolver.instance = pakContentResolver;\n            LanguageResolver.instance = pakContentResolver;\n            gameContentLoaded = true;\n\n            RegistryTools.SaveSetting(Constants.APPLICATION_NAME, Constants.PAK_FILE_LOCATION_REGISTRY_KEY, paksFolderPath!);\n\n\n            var lang = RegistryTools.GetSetting(Constants.APPLICATION_NAME, Constants.LANG_SPECIFIER_REGISTRY_KEY, Constants.DEFAULT_LANG_SPECIFIER);\n            loadLanguageStrings(lang);\n        }\n\n        public static string currentLangSpecifier { get; private set; } = string.Empty;\n\n        public static void loadLanguageStrings(string lang)\n        {\n            if(lang == currentLangSpecifier)\n            {\n                return;\n            }\n\n            R.unloadExternalStrings();\n\n            Console.WriteLine($\"Extracting '{lang}' language strings...\");\n            var stringLibrary = LanguageResolver.instance.loadLanguageStrings(lang);\n            if (stringLibrary != null)\n            {\n                Console.WriteLine($\"Loading '{lang}' language strings...\");\n                R.loadExternalStrings(stringLibrary);\n            }\n\n            currentLangSpecifier = lang;\n\n            RegistryTools.SaveSetting(Constants.APPLICATION_NAME, Constants.LANG_SPECIFIER_REGISTRY_KEY, lang);\n        }\n\n        private Task<PakIndex?> loadPakIndex(string paksFolderPath)\n        {\n            var tcs = new TaskCompletionSource<PakIndex?>();\n            Task.Run(() =>\n            {\n                try\n                {\n                    var filter = new PakFilter(new[] { Constants.PAKS_FILTER_STRING }, false);\n                    var pakIndex = new PakIndex(path: paksFolderPath, cacheFiles: true, caseSensitive: true, filter: filter);\n                    if (pakIndex.PakFileCount == 0)\n                    {\n                        throw new FileNotFoundException($\"No files were found at {paksFolderPath}\");\n                    }\n                    var success = unlockPakIndex(pakIndex);\n                    if (success == false)\n                    {\n                        throw new InvalidOperationException($\"Could not decrypt pak files at {paksFolderPath}\");\n                    }\n                    var versionStr = R.formatMCD_VERSION(mainModel.detectedGameVersion ?? R.ERROR);\n                    Console.WriteLine($\"Detected Pak Files for {versionStr}\");\n\n                    tcs.SetResult(pakIndex);\n                }\n                catch (Exception e)\n                {\n                    Console.WriteLine($\"Could not load Minecraft Dungeons Paks: {e}\");\n                    tcs.SetException(e);\n                }\n            });\n            return tcs.Task;\n        }\n\n        private bool unlockPakIndex(PakIndex pakIndex)\n        {\n            foreach (var key in Secrets.PAKS_AES_KEYS)\n            {\n                var keyStr = key.key;\n                byte[] keyBytes;\n                if (keyStr.StartsWith(\"0x\"))\n                {\n                    keyBytes = keyStr.Substring(2).ToBytesKey();\n                }\n                else\n                {\n                    keyBytes = keyStr.ToBytesKey();\n                }\n\n                if (keyBytes.Length != 32)\n                {\n                    throw new InvalidOperationException($\"AES Key ({keyStr.Substring(0, 3)}...) is {keyBytes.Length} bytes instead of the expected 32\");\n                }\n                var count = pakIndex.UseKey(FGuid.Zero, keyBytes);\n                if (count > 0)\n                {\n                    mainModel.detectedGameVersion = key.versions;\n                    return true;\n                }\n            }\n            mainModel.detectedGameVersion = null;\n            return false;\n        }\n\n        public void unloadGameContent()\n        {\n\n            RegistryTools.DeleteSetting(Constants.APPLICATION_NAME, Constants.PAK_FILE_LOCATION_REGISTRY_KEY);\n\n            if (gameContentLoaded)\n            {\n                gameContentLoaded = false;\n                var localContentResolver = new LocalContentResolver();\n                ImageResolver.instance = localContentResolver;\n                LanguageResolver.instance = localContentResolver;\n                mainModel.detectedGameVersion = null;\n            }\n\n            if (!string.IsNullOrWhiteSpace(currentLangSpecifier))\n            {\n                R.unloadExternalStrings();\n            }\n        }\n\n        private static string spaceOutWords(string input)\n        {\n            var output = new StringBuilder();\n            for (int ii = 0; ii < input.Length; ii++)\n            {\n                var letter = input[ii];\n                if (ii > 0 && char.IsUpper(letter) && output[output.Length] != ' ')\n                {\n                    output.Append(' ');\n                }\n                output.Append(letter);\n            }\n            return output.ToString();\n        }\n\n    }\n}\n",
        "gt": [
            "'MCDSaveEdit/MCDSaveEdit/Data/Profiles/ProfileSaveFile.cs'",
            "'MCDSaveEdit/MCDSaveEdit/ViewModels/ItemListViewModel.cs'",
            "'MCDSaveEdit/MCDSaveEdit/AppModel.cs'"
        ]
    },
    {
        "files": [
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/Synchronize.cs'",
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/Take.cs'",
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/Aggregate.cs'",
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/RefCount.cs'",
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/Materialize.cs'",
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/AsSingleUnitObservable.cs'"
        ],
        "content": "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/Synchronize.cs'\n:﻿using System;\nusing UniRx.Operators;\n\nnamespace UniRx.Operators\n{\n    internal class SynchronizeObservable<T> : OperatorObservableBase<T>\n    {\n        readonly IObservable<T> source;\n        readonly object gate;\n\n        public SynchronizeObservable(IObservable<T> source, object gate)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n            this.gate = gate;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)\n        {\n            return source.Subscribe(new Synchronize(this, observer, cancel));\n        }\n\n        class Synchronize : OperatorObserverBase<T, T>\n        {\n            readonly SynchronizeObservable<T> parent;\n\n            public Synchronize(SynchronizeObservable<T> parent, IObserver<T> observer, IDisposable cancel) : base(observer, cancel)\n            {\n                this.parent = parent;\n            }\n\n            public override void OnNext(T value)\n            {\n                lock (parent.gate)\n                {\n                    base.observer.OnNext(value);\n                }\n            }\n\n            public override void OnError(Exception error)\n            {\n                lock (parent.gate)\n                {\n                    try { observer.OnError(error); } finally { Dispose(); };\n                }\n            }\n\n            public override void OnCompleted()\n            {\n                lock (parent.gate)\n                {\n                    try { observer.OnCompleted(); } finally { Dispose(); };\n                }\n            }\n        }\n    }\n}\n'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/Take.cs'\n:﻿using System;\nusing UniRx.Operators;\n\nnamespace UniRx.Operators\n{\n    internal class TakeObservable<T> : OperatorObservableBase<T>\n    {\n        readonly IObservable<T> source;\n        readonly int count;\n        readonly TimeSpan duration;\n        internal readonly IScheduler scheduler;\n\n        public TakeObservable(IObservable<T> source, int count)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n            this.count = count;\n        }\n\n        public TakeObservable(IObservable<T> source, TimeSpan duration, IScheduler scheduler)\n            : base(scheduler == Scheduler.CurrentThread || source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n            this.duration = duration;\n            this.scheduler = scheduler;\n        }\n\n\n\n        public IObservable<T> Combine(int count)\n        {\n\n\n\n\n\n            return (this.count <= count)\n                ? this\n                : new TakeObservable<T>(source, count);\n        }\n\n        public IObservable<T> Combine(TimeSpan duration)\n        {\n\n\n\n\n\n            return (this.duration <= duration)\n                ? this\n                : new TakeObservable<T>(source, duration, scheduler);\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)\n        {\n            if (scheduler == null)\n            {\n                return source.Subscribe(new Take(this, observer, cancel));\n            }\n            else\n            {\n                return new Take_(this, observer, cancel).Run();\n            }\n        }\n\n        class Take : OperatorObserverBase<T, T>\n        {\n            int rest;\n\n            public Take(TakeObservable<T> parent, IObserver<T> observer, IDisposable cancel) : base(observer, cancel)\n            {\n                this.rest = parent.count;\n            }\n\n            public override void OnNext(T value)\n            {\n                if (rest > 0)\n                {\n                    rest -= 1;\n                    base.observer.OnNext(value);\n                    if (rest == 0)\n                    {\n                        try { observer.OnCompleted(); } finally { Dispose(); };\n                    }\n                }\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); } finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                try { observer.OnCompleted(); } finally { Dispose(); }\n            }\n        }\n\n        class Take_ : OperatorObserverBase<T, T>\n        {\n            readonly TakeObservable<T> parent;\n            readonly object gate = new object();\n\n            public Take_(TakeObservable<T> parent, IObserver<T> observer, IDisposable cancel) : base(observer, cancel)\n            {\n                this.parent = parent;\n            }\n\n            public IDisposable Run()\n            {\n                var d1 = parent.scheduler.Schedule(parent.duration, Tick);\n                var d2 = parent.source.Subscribe(this);\n\n                return StableCompositeDisposable.Create(d1, d2);\n            }\n\n            void Tick()\n            {\n                lock (gate)\n                {\n                    try { observer.OnCompleted(); } finally { Dispose(); };\n                }\n            }\n\n            public override void OnNext(T value)\n            {\n                lock (gate)\n                {\n                    base.observer.OnNext(value);\n                }\n            }\n\n            public override void OnError(Exception error)\n            {\n                lock (gate)\n                {\n                    try { observer.OnError(error); } finally { Dispose(); };\n                }\n            }\n\n            public override void OnCompleted()\n            {\n                lock (gate)\n                {\n                    try { observer.OnCompleted(); } finally { Dispose(); };\n                }\n            }\n        }\n    }\n}\n'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/Aggregate.cs'\n:﻿using System;\nusing UniRx.Operators;\n\nnamespace UniRx.Operators\n{\n    internal class AggregateObservable<TSource> : OperatorObservableBase<TSource>\n    {\n        readonly IObservable<TSource> source;\n        readonly Func<TSource, TSource, TSource> accumulator;\n\n        public AggregateObservable(IObservable<TSource> source, Func<TSource, TSource, TSource> accumulator)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n            this.accumulator = accumulator;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<TSource> observer, IDisposable cancel)\n        {\n            return source.Subscribe(new Aggregate(this, observer, cancel));\n        }\n\n        class Aggregate : OperatorObserverBase<TSource, TSource>\n        {\n            readonly AggregateObservable<TSource> parent;\n            TSource accumulation;\n            bool seenValue;\n\n            public Aggregate(AggregateObservable<TSource> parent, IObserver<TSource> observer, IDisposable cancel) : base(observer, cancel)\n            {\n                this.parent = parent;\n                this.seenValue = false;\n            }\n\n            public override void OnNext(TSource value)\n            {\n                if (!seenValue)\n                {\n                    seenValue = true;\n                    accumulation = value;\n                }\n                else\n                {\n                    try\n                    {\n                        accumulation = parent.accumulator(accumulation, value);\n                    }\n                    catch (Exception ex)\n                    {\n                        try { observer.OnError(ex); }\n                        finally { Dispose(); }\n                        return;\n                    }\n                }\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); }\n                finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                if (!seenValue)\n                {\n                    throw new InvalidOperationException(\"Sequence contains no elements.\");\n                }\n\n                observer.OnNext(accumulation);\n                try { observer.OnCompleted(); }\n                finally { Dispose(); }\n            }\n        }\n    }\n\n    internal class AggregateObservable<TSource, TAccumulate> : OperatorObservableBase<TAccumulate>\n    {\n        readonly IObservable<TSource> source;\n        readonly TAccumulate seed;\n        readonly Func<TAccumulate, TSource, TAccumulate> accumulator;\n\n        public AggregateObservable(IObservable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> accumulator)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n            this.seed = seed;\n            this.accumulator = accumulator;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<TAccumulate> observer, IDisposable cancel)\n        {\n            return source.Subscribe(new Aggregate(this, observer, cancel));\n        }\n\n        class Aggregate : OperatorObserverBase<TSource, TAccumulate>\n        {\n            readonly AggregateObservable<TSource, TAccumulate> parent;\n            TAccumulate accumulation;\n\n            public Aggregate(AggregateObservable<TSource, TAccumulate> parent, IObserver<TAccumulate> observer, IDisposable cancel) : base(observer, cancel)\n            {\n                this.parent = parent;\n                this.accumulation = parent.seed;\n            }\n\n            public override void OnNext(TSource value)\n            {\n                try\n                {\n                    accumulation = parent.accumulator(accumulation, value);\n                }\n                catch (Exception ex)\n                {\n                    try { observer.OnError(ex); }\n                    finally { Dispose(); }\n                    return;\n                }\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); }\n                finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                observer.OnNext(accumulation);\n                try { observer.OnCompleted(); }\n                finally { Dispose(); }\n            }\n        }\n    }\n\n    internal class AggregateObservable<TSource, TAccumulate, TResult> : OperatorObservableBase<TResult>\n    {\n        readonly IObservable<TSource> source;\n        readonly TAccumulate seed;\n        readonly Func<TAccumulate, TSource, TAccumulate> accumulator;\n        readonly Func<TAccumulate, TResult> resultSelector;\n\n        public AggregateObservable(IObservable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> accumulator, Func<TAccumulate, TResult> resultSelector)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n            this.seed = seed;\n            this.accumulator = accumulator;\n            this.resultSelector = resultSelector;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<TResult> observer, IDisposable cancel)\n        {\n            return source.Subscribe(new Aggregate(this, observer, cancel));\n        }\n\n        class Aggregate : OperatorObserverBase<TSource, TResult>\n        {\n            readonly AggregateObservable<TSource, TAccumulate, TResult> parent;\n            TAccumulate accumulation;\n\n            public Aggregate(AggregateObservable<TSource, TAccumulate, TResult> parent, IObserver<TResult> observer, IDisposable cancel) : base(observer, cancel)\n            {\n                this.parent = parent;\n                this.accumulation = parent.seed;\n            }\n\n            public override void OnNext(TSource value)\n            {\n                try\n                {\n                    accumulation = parent.accumulator(accumulation, value);\n                }\n                catch (Exception ex)\n                {\n                    try { observer.OnError(ex); }\n                    finally { Dispose(); }\n                    return;\n                }\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); }\n                finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                TResult result;\n                try\n                {\n                    result = parent.resultSelector(accumulation);\n                }\n                catch (Exception ex)\n                {\n                    OnError(ex);\n                    return;\n                }\n\n                observer.OnNext(result);\n                try { observer.OnCompleted(); }\n                finally { Dispose(); }\n            }\n        }\n    }\n}\n'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/RefCount.cs'\n:﻿using System;\nusing UniRx.Operators;\n\nnamespace UniRx.Operators\n{\n    internal class RefCountObservable<T> : OperatorObservableBase<T>\n    {\n        readonly IConnectableObservable<T> source;\n        readonly object gate = new object();\n        int refCount = 0;\n        IDisposable connection;\n\n        public RefCountObservable(IConnectableObservable<T> source)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)\n        {\n            return new RefCount(this, observer, cancel).Run();\n        }\n\n        class RefCount : OperatorObserverBase<T, T>\n        {\n            readonly RefCountObservable<T> parent;\n\n            public RefCount(RefCountObservable<T> parent, IObserver<T> observer, IDisposable cancel) : base(observer, cancel)\n            {\n                this.parent = parent;\n            }\n\n            public IDisposable Run()\n            {\n                var subcription = parent.source.Subscribe(this);\n\n                lock (parent.gate)\n                {\n                    if (++parent.refCount == 1)\n                    {\n                        parent.connection = parent.source.Connect();\n                    }\n                }\n\n                return Disposable.Create(() =>\n                {\n                    subcription.Dispose();\n\n                    lock (parent.gate)\n                    {\n                        if (--parent.refCount == 0)\n                        {\n                            parent.connection.Dispose();\n                        }\n                    }\n                });\n            }\n\n            public override void OnNext(T value)\n            {\n                base.observer.OnNext(value);\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); }\n                finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                try { observer.OnCompleted(); }\n                finally { Dispose(); }\n            }\n        }\n    }\n}\n'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/Materialize.cs'\n:﻿using System;\n\nnamespace UniRx.Operators\n{\n    internal class MaterializeObservable<T> : OperatorObservableBase<Notification<T>>\n    {\n        readonly IObservable<T> source;\n\n        public MaterializeObservable(IObservable<T> source)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<Notification<T>> observer, IDisposable cancel)\n        {\n            return new Materialize(this, observer, cancel).Run();\n        }\n\n        class Materialize : OperatorObserverBase<T, Notification<T>>\n        {\n            readonly MaterializeObservable<T> parent;\n\n            public Materialize(MaterializeObservable<T> parent, IObserver<Notification<T>> observer, IDisposable cancel)\n                : base(observer, cancel)\n            {\n                this.parent = parent;\n            }\n\n            public IDisposable Run()\n            {\n                return parent.source.Subscribe(this);\n            }\n\n            public override void OnNext(T value)\n            {\n                observer.OnNext(Notification.CreateOnNext(value));\n            }\n\n            public override void OnError(Exception error)\n            {\n                observer.OnNext(Notification.CreateOnError<T>(error));\n                try { observer.OnCompleted(); } finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                observer.OnNext(Notification.CreateOnCompleted<T>());\n                try { observer.OnCompleted(); } finally { Dispose(); }\n            }\n        }\n    }\n}\n'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/AsSingleUnitObservable.cs'\n:﻿using System;\nusing UniRx.Operators;\n\nnamespace UniRx.Operators\n{\n    internal class AsSingleUnitObservableObservable<T> : OperatorObservableBase<Unit>\n    {\n        readonly IObservable<T> source;\n\n        public AsSingleUnitObservableObservable(IObservable<T> source)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<Unit> observer, IDisposable cancel)\n        {\n            return source.Subscribe(new AsSingleUnitObservable(observer, cancel));\n        }\n\n        class AsSingleUnitObservable : OperatorObserverBase<T, Unit>\n        {\n            public AsSingleUnitObservable(IObserver<Unit> observer, IDisposable cancel) : base(observer, cancel)\n            {\n            }\n\n            public override void OnNext(T value)\n            {\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); }\n                finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                observer.OnNext(Unit.Default);\n\n                try { observer.OnCompleted(); }\n                finally { Dispose(); }\n            }\n        }\n    }\n}",
        "gt": [
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/Materialize.cs'",
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/Aggregate.cs'",
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/RefCount.cs'",
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/Synchronize.cs'",
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/AsSingleUnitObservable.cs'",
            "'UniRxSimpleGame/Assets/Plugins/UniRx/Scripts/Operators/Take.cs'"
        ]
    },
    {
        "files": [
            "'WolvenKit-7/WolvenKit/UIConfiguration.cs'",
            "'WolvenKit-7/CR2WTests/StressTest.cs'",
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAICommonerReactionTree.cs'"
        ],
        "content": "'WolvenKit-7/WolvenKit/UIConfiguration.cs'\n:﻿using System.Collections.Generic;\nusing System.Drawing;\nusing System.IO;\nusing System.Linq;\nusing System.Windows.Forms;\nusing System.Xml.Serialization;\nusing WeifenLuo.WinFormsUI.Docking;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit\n{\n    public class UIConfiguration\n    {\n        public static string ConfigurationPath\n        {\n            get\n            {\n                var path = Application.ExecutablePath;\n                var filename = Path.GetFileNameWithoutExtension(path);\n                var dir = Path.GetDirectoryName(path);\n                return Path.Combine(dir ?? \"\", filename + \"_uiconfig.xml\");\n            }\n        }\n\n\n\n\n\n\n\n        public Size MainSize { get; set; }\n        public Point MainLocation { get; set; }\n        public FormWindowState MainState { get; set; }\n        public EColorThemes ColorTheme { get; set; }\n\n        public List<int> CustomHighlightColor { get; set; }\n\n        ~UIConfiguration()\n        {\n            Save();\n        }\n\n        public void Save()\n        {\n            var ser = new XmlSerializer(typeof (UIConfiguration));\n            var stream = new FileStream(ConfigurationPath, FileMode.Create, FileAccess.Write);\n            ser.Serialize(stream, this);\n            stream.Close();\n        }\n\n        public static UIConfiguration Load()\n        {\n            if (File.Exists(ConfigurationPath) && new FileInfo(ConfigurationPath).Length != 0)\n            {\n                var ser = new XmlSerializer(typeof (UIConfiguration));\n                var stream = new FileStream(ConfigurationPath, FileMode.Open, FileAccess.Read);\n                var config = (UIConfiguration) ser.Deserialize(stream);\n                stream.Close();\n\n\n                if (config.CustomHighlightColor == null || config.CustomHighlightColor.Count < 3)\n                    config.CustomHighlightColor = new List<int> { Color.BlueViolet.ToArgb(), SystemColors.MenuHighlight.ToArgb(), Color.BlueViolet.ToArgb() };\n\n                return config;\n            }\n\n\n            return new UIConfiguration\n            {\n                ColorTheme = EColorThemes.VS2015Light,\n                CustomHighlightColor = new List<int> { Color.BlueViolet.ToArgb(), Color.LightSeaGreen.ToArgb(), Color.BlueViolet.ToArgb() }\n            };\n        }\n    }\n}\n'WolvenKit-7/CR2WTests/StressTest.cs'\n:﻿using System;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing WolvenKit;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.IO.MemoryMappedFiles;\nusing System.IO;\nusing WolvenKit.CR2W;\nusing WolvenKit.Bundles;\nusing WolvenKit.Common;\nusing System.Threading.Tasks;\nusing System.Diagnostics;\nusing System.Text;\nusing System.Security.Cryptography;\nusing WolvenKit.Common.Extensions;\nusing Microsoft.Win32;\n\nnamespace CR2WTests\n{\n    public static class AssertEx\n    {\n        public static async Task<TException>\n          ThrowsAsync<TException>(Func<Task> action,\n          bool allowDerivedTypes = true) where TException : Exception\n        {\n            try\n            {\n                await action();\n            }\n            catch (Exception ex)\n            {\n                if (allowDerivedTypes && !(ex is TException))\n                    throw new Exception(\"Delegate threw exception of type \" +\n                      ex.GetType().Name + \", but \" + typeof(TException).Name +\n                      \" or a derived type was expected.\", ex);\n                if (!allowDerivedTypes && ex.GetType() != typeof(TException))\n                    throw new Exception(\"Delegate threw exception of type \" +\n                      ex.GetType().Name + \", but \" + typeof(TException).Name +\n                      \" was expected.\", ex);\n                return (TException)ex;\n            }\n            throw new Exception(\"Delegate did not throw expected exception \" +\n              typeof(TException).Name + \".\");\n        }\n        public static Task<Exception> ThrowsAsync(Func<Task> action)\n        {\n            return ThrowsAsync<Exception>(action, true);\n        }\n    }\n\n    [TestClass]\n    public class StressTest\n    {\n        static string bundletag = \"*\";\n        static Dictionary<string, MemoryMappedFile> memorymappedbundles;\n        static BundleManager bm;\n\n        [ClassInitialize]\n        public static void Setup(TestContext context)\n        {\n            var tw3Finaldir = \"\";\n\n            var W3_DIR = System.Environment.GetEnvironmentVariable(\"W3_DIR\", EnvironmentVariableTarget.User);\n            if (!string.IsNullOrEmpty(W3_DIR))\n                tw3Finaldir = W3_DIR;\n\n            else\n            {\n                var exedir = new FileInfo(LookUpW3exe()).Directory.FullName;\n                if (Directory.Exists(exedir))\n                    tw3Finaldir = exedir;\n\n                else\n                    Assert.IsFalse(true, \"Aborting test. No valid Wicther 3 directory found.\");\n            }\n\n\n            memorymappedbundles = new Dictionary<string, MemoryMappedFile>();\n            bm = new BundleManager();\n            bm.LoadAll(tw3Finaldir);\n\n\n            foreach (var b in bm.Bundles.Values)\n            {\n                var e = b.ArchiveAbsolutePath.GetHashMD5();\n\n                memorymappedbundles.Add(e, MemoryMappedFile.CreateFromFile(b.ArchiveAbsolutePath, FileMode.Open, e, 0, MemoryMappedFileAccess.Read));\n\n            }\n        }\n\n        private static string LookUpW3exe()\n        {\n            const string uninstallkey = \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\\";\n            const string uninstallkey2 = \"SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\\";\n            var w3 = \"\";\n            try\n            {\n                Parallel.ForEach(Registry.LocalMachine.OpenSubKey(uninstallkey)?.GetSubKeyNames(), item =>\n                {\n                    var programName = Registry.LocalMachine.OpenSubKey(uninstallkey + item)\n                        ?.GetValue(\"DisplayName\");\n                    var installLocation = Registry.LocalMachine.OpenSubKey(uninstallkey + item)\n                        ?.GetValue(\"InstallLocation\");\n                    if (programName != null && installLocation != null)\n                    {\n                        if (programName.ToString().Contains(\"The Witcher 3 - Wild Hunt\") ||\n                            programName.ToString().Contains(\"The Witcher 3: Wild Hunt\"))\n                        {\n                            w3 = Directory.GetFiles(installLocation.ToString(), \"witcher3.exe\",\n                                SearchOption.AllDirectories).First();\n                        }\n                    }\n                });\n                Parallel.ForEach(Registry.LocalMachine.OpenSubKey(uninstallkey2)?.GetSubKeyNames(), item =>\n                {\n                    var programName = Registry.LocalMachine.OpenSubKey(uninstallkey2 + item)\n                        ?.GetValue(\"DisplayName\");\n                    var installLocation = Registry.LocalMachine.OpenSubKey(uninstallkey2 + item)\n                        ?.GetValue(\"InstallLocation\");\n                    if (programName != null && installLocation != null)\n                    {\n                        if (programName.ToString().Contains(\"The Witcher 3 - Wild Hunt\") ||\n                            programName.ToString().Contains(\"The Witcher 3: Wild Hunt\"))\n                        {\n                            if (Directory.Exists(installLocation.ToString()))\n                                w3 = Directory.GetFiles(installLocation.ToString(), \"witcher3.exe\",\n                                SearchOption.AllDirectories).First();\n                        }\n                    }\n                });\n                return w3;\n            }\n            catch (Exception ex)\n            {\n                throw ex;\n            }\n        }\n\n\n        #region Methods\n        [TestMethod]\n        public async Task Cellmap()\n        {\n            await Task.Run(() => StressTestExt(\"cellmap\"));\n        }\n\n        [TestMethod]\n        public async Task Env()\n        {\n            await Task.Run(() => StressTestExt(\"env\"));\n        }\n\n        [TestMethod]\n        public async Task Flyr()\n        {\n            await Task.Run(() => StressTestExt(\"flyr\"));\n        }\n\n        [TestMethod]\n        public async Task Formation()\n        {\n            await Task.Run(() => StressTestExt(\"formation\"));\n        }\n\n        [TestMethod]\n        public async Task Grassmask()\n        {\n            await Task.Run(() => StressTestExt(\"grassmask\"));\n        }\n\n        [TestMethod]\n        public async Task Guiconfig()\n        {\n            await Task.Run(() => StressTestExt(\"guiconfig\"));\n        }\n\n        [TestMethod]\n        public async Task hud()\n        {\n            await Task.Run(() => StressTestExt(\"hud\"));\n        }\n\n        [TestMethod]\n        public async Task journal()\n        {\n            await Task.Run(() => StressTestExt(\"journal\"));\n        }\n\n        [TestMethod]\n        public async Task menu()\n        {\n            await Task.Run(() => StressTestExt(\"menu\"));\n        }\n\n\n\n        [TestMethod]\n        public async Task popup()\n        {\n            await Task.Run(() => StressTestExt(\"popup\"));\n        }\n\n        [TestMethod]\n        public async Task redapex()\n        {\n            await Task.Run(() => StressTestExt(\"redapex\"));\n        }\n\n        [TestMethod]\n        public async Task redcloth()\n        {\n            await Task.Run(() => StressTestExt(\"redcloth\"));\n        }\n\n        [TestMethod]\n        public async Task reddest()\n        {\n            await Task.Run(() => StressTestExt(\"reddest\"));\n        }\n\n        [TestMethod]\n        public async Task reddlc()\n        {\n            await Task.Run(() => StressTestExt(\"reddlc\"));\n        }\n\n        [TestMethod]\n        public async Task redexp()\n        {\n            await Task.Run(() => StressTestExt(\"redexp\"));\n        }\n\n        [TestMethod]\n        public async Task redfur()\n        {\n            await Task.Run(() => StressTestExt(\"redfur\"));\n        }\n\n        [TestMethod]\n        public async Task redgame()\n        {\n            await Task.Run(() => StressTestExt(\"redgame\"));\n        }\n\n        [TestMethod]\n        public async Task redicsv()\n        {\n            await Task.Run(() => StressTestExt(\"redicsv\"));\n        }\n\n        [TestMethod]\n        public async Task redswf()\n        {\n            await Task.Run(() => StressTestExt(\"redswf\"));\n        }\n\n        [TestMethod]\n        public async Task redwpset()\n        {\n            await Task.Run(() => StressTestExt(\"redwpset\"));\n        }\n\n        [TestMethod]\n        public async Task spawntree()\n        {\n            await Task.Run(() => StressTestExt(\"spawntree\"));\n        }\n\n        [TestMethod]\n        public async Task texarray()\n        {\n            await Task.Run(() => StressTestExt(\"texarray\"));\n        }\n\n        [TestMethod]\n        public async Task vbrush()\n        {\n            await Task.Run(() => StressTestExt(\"vbrush\"));\n        }\n\n        [TestMethod]\n        public async Task w2am()\n        {\n            await Task.Run(() => StressTestExt(\"w2am\"));\n        }\n\n        [TestMethod]\n        public async Task w2animev()\n        {\n            await Task.Run(() => StressTestExt(\"w2animev\"));\n        }\n\n        [TestMethod]\n        public async Task w2anims()\n        {\n            await Task.Run(() => StressTestExt(\"w2anims\"));\n        }\n\n        [TestMethod]\n        public async Task w2beh()\n        {\n            await Task.Run(() => StressTestExt(\"w2beh\"));\n        }\n\n        [TestMethod]\n        public async Task w2behtree()\n        {\n            await Task.Run(() => StressTestExt(\"w2behtree\"));\n        }\n\n        [TestMethod]\n        public async Task w2cent()\n        {\n            await Task.Run(() => StressTestExt(\"w2cent\"));\n        }\n\n        [TestMethod]\n        public async Task w2comm()\n        {\n            await Task.Run(() => StressTestExt(\"w2comm\"));\n        }\n\n        [TestMethod]\n        public async Task w2cube()\n        {\n            await Task.Run(() => StressTestExt(\"w2cube\"));\n        }\n\n        [TestMethod]\n        public async Task w2cutscene()\n        {\n            await Task.Run(() => StressTestExt(\"w2cutscene\"));\n        }\n\n        [TestMethod]\n        public async Task w2dset()\n        {\n            await Task.Run(() => StressTestExt(\"w2dset\"));\n        }\n\n        [TestMethod]\n        public async Task w2em()\n        {\n            await Task.Run(() => StressTestExt(\"w2em\"));\n        }\n\n        [TestMethod]\n        public async Task w2ent()\n        {\n            await Task.Run(() => StressTestExt(\"w2ent\"));\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        [TestMethod]\n        public async Task w2fnt()\n        {\n\n\n\n\n\n\n\n            await Task.Run(() => StressTestExt(\"w2fnt\"));\n        }\n\n        [TestMethod]\n        public async Task w2je()\n        {\n            await Task.Run(() => StressTestExt(\"w2je\"));\n        }\n\n        [TestMethod]\n        public async Task w2job()\n        {\n            await Task.Run(() => StressTestExt(\"w2job\"));\n        }\n\n        [TestMethod]\n        public async Task w2l()\n        {\n            await Task.Run(() => StressTestExt(\"w2l\"));\n        }\n\n        [TestMethod]\n        public async Task w2mesh()\n        {\n            await Task.Run(() => StressTestExt(\"w2mesh\"));\n        }\n\n        [TestMethod]\n        public async Task w2mg()\n        {\n            await Task.Run(() => StressTestExt(\"w2mg\"));\n        }\n\n        [TestMethod]\n        public async Task w2mi()\n        {\n            await Task.Run(() => StressTestExt(\"w2mi\"));\n        }\n\n        [TestMethod]\n        public async Task w2p()\n        {\n            await Task.Run(() => StressTestExt(\"w2p\"));\n        }\n\n        [TestMethod]\n        public async Task w2phase()\n        {\n            await Task.Run(() => StressTestExt(\"w2phase\"));\n        }\n\n        [TestMethod]\n        public async Task w2qm()\n        {\n            await Task.Run(() => StressTestExt(\"w2qm\"));\n        }\n\n        [TestMethod]\n        public async Task w2quest()\n        {\n            await Task.Run(() => StressTestExt(\"w2quest\"));\n        }\n\n        [TestMethod]\n        public async Task w2ragdoll()\n        {\n            await Task.Run(() => StressTestExt(\"w2ragdoll\"));\n        }\n\n        [TestMethod]\n        public async Task w2rig()\n        {\n            await Task.Run(() => StressTestExt(\"w2rig\"));\n        }\n\n        [TestMethod]\n        public async Task w2scene()\n        {\n            await Task.Run(() => StressTestExt(\"w2scene\"));\n        }\n\n        [TestMethod]\n        public async Task w2sf()\n        {\n            await Task.Run(() => StressTestExt(\"w2sf\"));\n        }\n\n        [TestMethod]\n        public async Task w2steer()\n        {\n            await Task.Run(() => StressTestExt(\"w2steer\"));\n        }\n\n        [TestMethod]\n        public async Task w2ter()\n        {\n            await Task.Run(() => StressTestExt(\"w2ter\"));\n        }\n\n        [TestMethod]\n        public async Task w2w()\n        {\n            await Task.Run(() => StressTestExt(\"w2w\"));\n        }\n\n        [TestMethod]\n        public async Task w3app()\n        {\n            await Task.Run(() => StressTestExt(\"w3app\"));\n        }\n\n        [TestMethod]\n        public async Task w3dyng()\n        {\n            await Task.Run(() => StressTestExt(\"w3dyng\"));\n        }\n\n        [TestMethod]\n        public async Task w3fac()\n        {\n            await Task.Run(() => StressTestExt(\"w3fac\"));\n        }\n\n        [TestMethod]\n        public async Task w3occlusion()\n        {\n            await Task.Run(() => StressTestExt(\"w3occlusion\"));\n        }\n\n        [TestMethod]\n        public async Task w3simplex()\n        {\n            await Task.Run(() => StressTestExt(\"w3simplex\"));\n        }\n\n        [TestMethod]\n        public async Task xbm()\n        {\n            await Task.Run(() => StressTestExt(\"xbm\"));\n        }\n\n\n\n\n\n        #endregion\n\n\n        public void StressTestExt(string ext)\n        {\n\n            using (var frm = new frmUnitTest(ext, bundletag, bm))\n            {\n\n                frm.Load += (sender, e) => (sender as frmUnitTest).Visible = true;\n                frm.ShowDialog();\n\n                var result = frm.GetResult();\n\n                Assert.AreEqual(0, result.Item1, $\"Unknown bytes remained -> {result.Item1}bytes\");\n                Assert.AreEqual(0, result.Item2, $\"Unparsed files -> {result.Item2}\");\n            }\n        }\n\n\n    }\n}\n'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAICommonerReactionTree.cs'\n:using System.IO;\nusing System.Runtime.Serialization;\nusing WolvenKit.CR2W.Reflection;\nusing FastMember;\nusing static WolvenKit.CR2W.Types.Enums;\n\n\nnamespace WolvenKit.CR2W.Types\n{\n\t[DataContract(Namespace = \"\")]\n\t[REDMeta]\n\tpublic class CAICommonerReactionTree : CAINpcReactionsTree\n\t{\n\t\tpublic CAICommonerReactionTree(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name){ }\n\n\t\tpublic static new CVariable Create(CR2WFile cr2w, CVariable parent, string name) => new CAICommonerReactionTree(cr2w, parent, name);\n\n\t\tpublic override void Read(BinaryReader file, uint size) => base.Read(file, size);\n\n\t\tpublic override void Write(BinaryWriter file) => base.Write(file);\n\n\t}\n}",
        "gt": [
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAICommonerReactionTree.cs'",
            "'WolvenKit-7/WolvenKit/UIConfiguration.cs'",
            "'WolvenKit-7/CR2WTests/StressTest.cs'"
        ]
    },
    {
        "files": [
            "'event_horizon/Starship/Assets/Scripts/Domain/Constructor/CompanionSpecification.cs'",
            "'event_horizon/Starship/Assets/script/GUI/ViewModel/Constructor/ComponentInfoViewModel.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/Constructor/ComponentList.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/StarMap/Arena/SpecialStore.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/ShipService/FleetPanel.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/ComponentList/FleetContentFiller.cs'"
        ],
        "content": "'event_horizon/Starship/Assets/Scripts/Domain/Constructor/CompanionSpecification.cs'\n:namespace Constructor\n{\n\tpublic enum CompanionLocation { Left, Right }\n}\n\n'event_horizon/Starship/Assets/script/GUI/ViewModel/Constructor/ComponentInfoViewModel.cs'\n:using UnityEngine;\nusing UnityEngine.UI;\nusing Constructor;\nusing System.Linq;\nusing Constructor.Model;\nusing DataModel.Technology;\nusing Economy;\nusing GameDatabase.Enums;\nusing GameServices.Database;\nusing GameServices.Gui;\nusing GameServices.Player;\nusing GameServices.Research;\nusing Gui.Constructor;\nusing Services.Localization;\nusing Services.Reources;\nusing Zenject;\n\nnamespace ViewModel\n{\n\tpublic class ComponentInfoViewModel : MonoBehaviour\n\t{\n\t\tpublic enum Status\n\t\t{\n\t\t\tOk,\n\t\t\tAlreadyInstalled,\n\t\t\tNotSuitable,\n\t\t};\n\n\t    [InjectOptional] private readonly PlayerResources _playerResources;\n\t    [InjectOptional] private readonly Research _research;\n\t    [InjectOptional] private readonly ITechnologies _technologies;\n\t    [Inject] private readonly GuiHelper _guiHelper;\n\t    [Inject] private readonly ILocalization _localization;\n\t    [Inject] private readonly IResourceLocator _resourceLocator;\n\n        [SerializeField]\n        private ConstructorViewModel.CommandEvent _onCommandExecutedEvent = new ConstructorViewModel.CommandEvent();\n\n        public ComponentViewModel ComponentViewModel;\n\t\tpublic DragAndDropComponent ComponentPanel;\n\t\tpublic ShipLayoutViewModel ShipLayout;\n\t\tpublic ShipLayoutViewModel LeftPlatformLayout;\n\t\tpublic ShipLayoutViewModel RightPlatformLayout;\n\t\tpublic ConstructorViewModel ConstructorViewModel;\n\t\tpublic GameObject InstallPanel;\n\t\tpublic GameObject InstallLabel;\n\t\tpublic GameObject AlreadyInstalledLabel;\n\t\tpublic GameObject NotSuitableLabel;\n\t\tpublic Button DeleteButton;\n\t\tpublic Button UnlockButton;\n        public Button UnlockAllButton;\n        public ControlsPanel Controls;\n\t\tpublic GameObject[] ActiveOnlyObjects;\n\n\t\tpublic Text SizeText;\n\t\tpublic Image RequiredCellIcon;\n\t\tpublic Text RequiredCellText;\n\t\tpublic Color[] ColorList;\n\n\t\tpublic void OnKeyBindingChanged()\n\t\t{\n\t\t    if (_componentId >= 0 && _activeLayout != null)\n\t\t    {\n                var component = _activeLayout.Ship.GetComponent(_componentId);\n                component.KeyBinding = Controls.KeyBinding;\n                component.Behaviour = Controls.ComponentMode;\n            }\n\t\t}\n\n\t\tpublic void OnComponentPositionChanged(Vector2 position)\n\t\t{\n\t\t\tShipLayout.PreviewComponent(position, _component);\n\t\t\tLeftPlatformLayout.PreviewComponent(position, _component);\n\t\t\tRightPlatformLayout.PreviewComponent(position, _component);\n\t\t}\n\n\t\tpublic void OnComponentReleased(Vector2 position)\n\t\t{\n            if (InstallComponentCommand.TryExecuteCommand(ShipLayout, position, _component, Controls.KeyBinding, Controls.ComponentMode, _onCommandExecutedEvent))\n                return;\n            if (InstallComponentCommand.TryExecuteCommand(LeftPlatformLayout, position, _component, Controls.KeyBinding, Controls.ComponentMode, _onCommandExecutedEvent))\n                return;\n            if (InstallComponentCommand.TryExecuteCommand(RightPlatformLayout, position, _component, Controls.KeyBinding, Controls.ComponentMode, _onCommandExecutedEvent))\n                return;\n\t\t}\n\n\t\tpublic void Clear()\n\t\t{\n\t\t\tComponentViewModel.Clear();\n\t\t\tComponentPanel.Interactable = false;\n\t\t\t_componentId = -1;\n\t\t\t_activeLayout = null;\n\t\t\tControls.Clear();\n\n\t\t\tforeach (var item in ActiveOnlyObjects)\n\t\t\t\titem.SetActive(false);\n        }\n\n\t\tpublic void DeleteButtonPressed()\n\t\t{\n\t\t\tif (_activeLayout == null)\n\t\t\t\tthrow new System.InvalidOperationException(\"layout not selected\");\n\n            var command = new RemoveComponentCommand(_activeLayout, _componentId);\n            if (command.TryExecute())\n                _onCommandExecutedEvent.Invoke(command);\n\t\t}\n\n\t\tpublic void UnlockButtonPressed()\n\t\t{\n            if (_playerResources == null)\n                return;\n\n\t\t\tif (_activeLayout == null)\n\t\t\t\tthrow new System.InvalidOperationException(\"layout not selected\");\n\t\t\tvar id = _componentId;\n\t\t\tvar component = _activeLayout.Ship.GetComponent(id);\n\t\t\tvar price = component.Info.Price*2;\n            _guiHelper.ShowConfirmation(_localization.GetString(\"$UnlockConfirmation\"), price, () =>\n            {\n                if (!CanBeUnlocked(component))\n                    throw new System.InvalidOperationException(\"invalid component\");\n\n\t\t\t    if (!price.TryWithdraw(_playerResources))\n                    return;\n\t\t\t\t_activeLayout.UnlockComponent(id);\n\t\t\t\tSetComponent(_activeLayout, id);\n\t\t\t});\n\t\t}\n\n        public void UnlockAllButtonPressed()\n        {\n            if (_playerResources == null)\n                return;\n\n            var lockedItems = ShipLayout.Components.Concat(LeftPlatformLayout.Components).Concat(RightPlatformLayout.Components).Where(CanBeUnlocked);\n\n            var price = Price.Common(lockedItems.Sum(item => item.Info.Price.Amount*2));\n            _guiHelper.ShowConfirmation(_localization.GetString(\"$UnlockAllConfirmation\"), price, () =>\n            {\n                if (!price.TryWithdraw(_playerResources))\n                    return;\n\n                ShipLayout.Layout?.ComponentsIndex.Where(item => CanBeUnlocked(item.Value)).Select(item => item.Key).ToList().ForEach(ShipLayout.UnlockComponent);\n                LeftPlatformLayout.Layout?.ComponentsIndex.Where(item => CanBeUnlocked(item.Value)).Select(item => item.Key).ToList().ForEach(LeftPlatformLayout.UnlockComponent);\n                RightPlatformLayout.Layout?.ComponentsIndex.Where(item => CanBeUnlocked(item.Value)).Select(item => item.Key).ToList().ForEach(RightPlatformLayout.UnlockComponent);\n\n                SetComponent(_activeLayout, _componentId);\n            });\n        }\n\n        public void SetComponent(ShipLayoutViewModel activeLayout, int id)\n\t\t{\n\t\t\t_activeLayout = activeLayout;\n\t\t\tvar component = _activeLayout.Ship.GetComponent(id);\n\t\t\t_component = component.Info;\n\t\t\t_componentId = id;\n\n\t\t\tforeach (var item in ActiveOnlyObjects)\n\t\t\t\titem.SetActive(true);\n\n\t\t\tvar componentInfo = _component.CreateComponent(ConstructorViewModel.ShipSize);\n\t\t\tControls.Initialize(componentInfo, component.KeyBinding, ConstructorViewModel.GetDefaultKey(_component.Data.Id), component.Behaviour);\n\n\t\t\tInstallPanel.SetActive(false);\n\t\t\tDeleteButton.gameObject.SetActive(!component.Locked);\n\t\t\tUnlockButton.gameObject.SetActive(component.Locked);\n            UnlockAllButton.gameObject.SetActive(component.Locked);\n\n            UnlockButton.interactable = CanBeUnlocked(component);\n            UnlockAllButton.interactable = UnlockButton.interactable;\n\n            ComponentPanel.gameObject.SetActive(false);\n\t\t\tComponentPanel.Interactable = false;\n\n\t\t\tUpdateDescription(componentInfo);\n\t\t}\n\n\t    private bool CanBeUnlocked(IntegratedComponent component)\n\t    {\n\t        if (!component.Locked)\n\t            return false;\n\t        if (component.Info.Data.Availability == Availability.Common)\n\t            return true;\n\t        if (component.Info.Data.Id.Value == 96)\n\t            return true;\n\n            ITechnology tech;\n            return _technologies == null || _research == null || _technologies.TryGetComponentTechnology(component.Info.Data, out tech) && _research.IsTechResearched(tech);\n\t    }\n\n\t\tpublic void SetComponent(ComponentInfo data)\n\t\t{\n\t\t\t_activeLayout = null;\n\t\t\t_component = data;\n\t\t\t_componentId = -1;\n\n\t\t\tforeach (var item in ActiveOnlyObjects)\n\t\t\t\titem.SetActive(true);\n\n\t\t\tvar componentInfo = _component.CreateComponent(ConstructorViewModel.ShipSize);\n\t\t\tControls.Initialize(componentInfo, -1, ConstructorViewModel.GetDefaultKey(data.Data.Id), 0);\n\n\t\t\tvar status = Status.Ok;\n\t\t\tif (ConstructorViewModel.IsUniqueItemInstalled(_component.Data))\n\t\t\t\tstatus = Status.AlreadyInstalled;\n\n\t\t\tif (!componentInfo.IsSuitable(ConstructorViewModel.Ship.Model))\n\t\t\t\tstatus = Status.NotSuitable;\n\n\t\t\tInstallPanel.SetActive(true);\n\t\t\tInstallLabel.SetActive(status == Status.Ok);\n\t\t\tAlreadyInstalledLabel.SetActive(status == Status.AlreadyInstalled);\n\t\t\tNotSuitableLabel.SetActive(status == Status.NotSuitable);\n\n\t\t\tDeleteButton.gameObject.SetActive(false);\n\t\t\tUnlockButton.gameObject.SetActive(false);\n\t\t\tComponentPanel.gameObject.SetActive(true);\n\t\t\tComponentPanel.Interactable = status == Status.Ok;\n\t\t\tComponentPanel.RectSize = _component.Data.Layout.Size*ShipLayout.BlockSize;\n\t\t\tComponentPanel.GetComponent<ComponentIconViewModel>().SetIcon(_resourceLocator.GetSprite(_component.Data.Icon), _component.Data.Layout.Data, _component.Data.Layout.Size, _component.Data.Color);\n\n\t\t\tUpdateDescription(componentInfo);\n\t\t}\n\n\t\tprivate void UpdateDescription(Constructor.Component.IComponent component)\n\t\t{\n\t\t\tComponentViewModel.Initialize(_component, 0);\n\n\t\t\tswitch (_component.Data.CellType)\n\t\t\t{\n\t\t\tcase CellType.Empty:\n\t\t\t\tRequiredCellIcon.color = ColorList[0];\n\t\t\t\tbreak;\n\t\t\tcase CellType.Weapon:\n\t\t\t\tRequiredCellIcon.color = ColorList[1];\n\t\t\t\tbreak;\n\t\t\tcase CellType.Outer:\n\t\t\t\tRequiredCellIcon.color = ColorList[2];\n\t\t\t\tbreak;\n\t\t\tcase CellType.Inner:\n\t\t\t\tRequiredCellIcon.color = ColorList[3];\n\t\t\t\tbreak;\n\t\t\tcase CellType.InnerOuter:\n\t\t\t\tRequiredCellIcon.color = ColorList[4];\n\t\t\t\tbreak;\n\t\t\tcase CellType.Engine:\n\t\t\t\tRequiredCellIcon.color = ColorList[5];\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tRequiredCellText.text = _component.Data.CellType == CellType.Weapon ? _component.Data.WeaponSlotType.ToString() : string.Empty;\n\n\t\t\tvar stats = new ShipEquipmentStats();\n\t\t\tcomponent.UpdateStats(ref stats);\n\n\t\t\tSizeText.text = _component.Data.Layout.CellCount.ToString();\n\t\t}\n\n\t\tprivate void OnEnable()\n\t\t{\n\t\t\tClear();\n\t\t}\n\n\t\tprivate ShipLayoutViewModel _activeLayout;\n\t\tprivate int _componentId = -1;\n\t\tprivate ComponentInfo _component;\n\t}\n}\n\n'event_horizon/Starship/Assets/Scripts/Gui/Constructor/ComponentList.cs'\n:﻿using UnityEngine;\nusing Constructor;\nusing Gui.ComponentList;\nusing Utils;\n\nnamespace Gui.Constructor\n{\n    public class ComponentList : MonoBehaviour\n    {\n\n        [SerializeField] private ComponentContentFiller _contentFiller;\n        [SerializeField] private ListScrollRect _componentList;\n        [SerializeField] private GameObject _noItemsText;\n\n        public void Initialize(IReadOnlyGameItemCollection<ComponentInfo> components)\n        {\n            _componentQuantityProvider = new ComponentQuantityProvider(components);\n            _rootNode = new RootNode(_componentQuantityProvider);\n            _rootNode.Assign(components);\n            _selectedNode = _rootNode;\n            _components = components;\n            _noItemsText.SetActive(components.Count == 0);\n            RefreshList();\n        }\n\n        public void ShowAll()\n        {\n            _selectedNode = _rootNode;\n            RefreshList();\n        }\n\n        public void ShowWeapon()\n        {\n            _selectedNode = _rootNode.Weapon;\n            RefreshList();\n        }\n\n        public void ShowArmor()\n        {\n            _selectedNode = _rootNode.Armor;\n            RefreshList();\n        }\n\n        public void ShowEngine()\n        {\n            _selectedNode = _rootNode.Engine;\n            RefreshList();\n        }\n\n        public void ShowEnergy()\n        {\n            _selectedNode = _rootNode.Energy;\n            RefreshList();\n        }\n\n        public void ShowDrone()\n        {\n            _selectedNode = _rootNode.Drone;\n            RefreshList();\n        }\n\n        public void ShowSpecial()\n        {\n            _selectedNode = _rootNode.Special;\n            RefreshList();\n        }\n\n        public void OnGroupSelected(GroupListItem item)\n        {\n            _selectedNode = item.Node;\n            RefreshList();\n        }\n\n        public void RefreshList()\n        {\n            _rootNode.Assign(_components);\n            _contentFiller.InitializeItems(_selectedNode);\n            _componentList.RefreshContent();\n            _noItemsText.SetActive(_components.Count == 0);\n        }\n\n        private RootNode _rootNode;\n        private IComponentTreeNode _selectedNode;\n        private ComponentQuantityProvider _componentQuantityProvider;\n        private IReadOnlyGameItemCollection<ComponentInfo> _components;\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Gui/StarMap/Arena/SpecialStore.cs'\n:﻿using GameModel.Quests;\nusing GameServices.Player;\nusing Services.Audio;\nusing Services.Gui;\nusing UnityEngine;\nusing ViewModel;\nusing Zenject;\n\nnamespace Gui.StarMap\n{\n    public class SpecialStore : MonoBehaviour\n    {\n        [Inject] private readonly ISoundPlayer _soundPlayer;\n        [Inject] private readonly PlayerResources _playerResources;\n\n        [SerializeField] private MarketContentFiller ContentFiller;\n        [SerializeField] private ListScrollRect ItemList;\n        [SerializeField] private AudioClip BuySound;\n\n        public void InitializeWindow(WindowArgs args)\n        {\n            _inventory = args.Get<IInventory>();\n            UpdateItems();\n        }\n\n        public void BuyButtonClicked(ViewModel.Common.InventoryItem item)\n        {\n            var product = item.Product;\n            if (!product.Price.IsEnough(_playerResources))\n                return;\n\n            product.Buy();\n            _soundPlayer.Play(BuySound);\n\n            UpdateItems();\n        }\n\n        public void UpdateItems()\n        {\n            _inventory.Refresh();\n            ContentFiller.InitializeItems(_inventory.Items, false, true);\n            ItemList.RefreshContent();\n        }\n\n        private IInventory _inventory;\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Gui/ShipService/FleetPanel.cs'\n:﻿using System;\nusing System.Linq;\nusing GameServices.Player;\nusing Services.Localization;\nusing Constructor.Ships;\nusing GameDatabase;\nusing Gui.StarMap;\nusing Services.Reources;\nusing UnityEngine;\nusing UnityEngine.Events;\nusing Zenject;\n\nnamespace Gui.ShipService\n{\n    public class FleetPanel : MonoBehaviour\n    {\n        [Inject] private readonly PlayerFleet _playerFleet;\n        [Inject] private readonly ILocalization _localization;\n        [Inject] private readonly IDatabase _database;\n        [Inject] private readonly IResourceLocator _resourceLocator;\n\n        [SerializeField] private ListScrollRect _shipList;\n        [SerializeField] private ShipListContentFiller _shipListContentFiller;\n\n        [SerializeField] private ShipSelectedEvent _shipSelectedEvent = new ShipSelectedEvent();\n\n        [Serializable]\n        public class ShipSelectedEvent : UnityEvent<IShip> { }\n\n        public void Initialize()\n        {\n            _shipListContentFiller.SelectedShip = null;\n            _shipListContentFiller.InitializeShips(_playerFleet.Ships.OrderBy(ship => ship.Id.Value));\n            _shipList.RefreshContent();\n        }\n\n        public void OnItemSelected(ShipListItem ship)\n        {\n            _shipSelectedEvent.Invoke(ship.Ship);\n        }\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Gui/ComponentList/FleetContentFiller.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing Constructor;\nusing Constructor.Ships;\nusing GameStateMachine.States;\nusing Services.Localization;\nusing Services.ObjectPool;\nusing Services.Reources;\nusing UnityEngine;\nusing UnityEngine.Events;\nusing ViewModel;\nusing Zenject;\n\nnamespace Gui.ComponentList\n{\n    public class FleetContentFiller : MonoBehaviour, IContentFiller\n    {\n        [Inject] private readonly GameObjectFactory _gameObjectFactory;\n        [Inject] private readonly IResourceLocator _resourceLocator;\n        [Inject] private readonly ILocalization _localization;\n        [Inject] private readonly ShipSelectedSignal.Trigger _shipSelectedTrigger;\n\n        [SerializeField] private ShipInfoViewModel _shipInfoPrefab;\n\n        [SerializeField] private ItemSelectedEvent _itemSelectedEvent = new ItemSelectedEvent();\n\n        [Serializable]\n        public class ItemSelectedEvent : UnityEvent<ComponentInfo> { }\n\n        private void Awake()\n        {\n            _shipInfoPrefab.gameObject.SetActive(false);\n        }\n\n        public GameObject GetListItem(int index, int itemType, GameObject obj)\n        {\n            if (obj == null)\n            {\n                obj = _gameObjectFactory.Create(_shipInfoPrefab.gameObject);\n            }\n\n            var item = obj.GetComponent<ShipInfoViewModel>();\n            var ship = _ships[index];\n            UpdateShip(item, ship);\n\n            return obj;\n        }\n\n        public int GetItemCount()\n        {\n            return _ships.Count;\n        }\n\n        public int GetItemType(int index)\n        {\n            return 0;\n        }\n\n        public void SetShips(IEnumerable<IShip> ships)\n        {\n            _ships.Clear();\n            _ships.AddRange(ships);\n        }\n\n        private void UpdateShip(ShipInfoViewModel item, IShip ship)\n        {\n            item.Icon.sprite = _resourceLocator.GetSprite(ship.Model.IconImage) ?? _resourceLocator.GetSprite(ship.Model.ModelImage);\n            item.Icon.color = ship.ColorScheme.HsvColor;\n            item.Icon.rectTransform.localScale = 1.4f*ship.Model.IconScale*Vector3.one;\n            item.NameText.text = _localization.GetString(ship.Name);\n            item.SetLevel(ship.Experience.Level);\n            item.ClassText.text = ship.Model.SizeClass.ToString(_localization);\n            item.Button.onClick.RemoveAllListeners();\n            item.Button.onClick.AddListener(() => ShipButtonClicked(ship));\n        }\n\n        private void ShipButtonClicked(IShip ship)\n        {\n            _shipSelectedTrigger.Fire(ship);\n        }\n\n        private ComponentInfo _selectedItem;\n        private readonly List<IShip> _ships = new List<IShip>();\n    }\n}\n",
        "gt": [
            "'event_horizon/Starship/Assets/Scripts/Domain/Constructor/CompanionSpecification.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/ComponentList/FleetContentFiller.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/Constructor/ComponentList.cs'",
            "'event_horizon/Starship/Assets/script/GUI/ViewModel/Constructor/ComponentInfoViewModel.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/StarMap/Arena/SpecialStore.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/ShipService/FleetPanel.cs'"
        ]
    },
    {
        "files": [
            "'Idle-Miner/Assets/Plugins/Zenject/Source/Providers/TransientProvider.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/GamePlay/GamePlayMediator.cs'",
            "'Idle-Miner/Assets/Plugins/Zenject/Source/Editor/ZenUnityEditorUtil.cs'"
        ],
        "content": "'Idle-Miner/Assets/Plugins/Zenject/Source/Providers/TransientProvider.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing ModestTree;\nusing Zenject.Internal;\n\nnamespace Zenject\n{\n    [NoReflectionBaking]\n    public class TransientProvider : IProvider\n    {\n        readonly DiContainer _container;\n        readonly Type _concreteType;\n        readonly List<TypeValuePair> _extraArguments;\n        readonly object _concreteIdentifier;\n        readonly Action<InjectContext, object> _instantiateCallback;\n\n        public TransientProvider(\n            Type concreteType, DiContainer container,\n            IEnumerable<TypeValuePair> extraArguments, string bindingContext,\n            object concreteIdentifier,\n            Action<InjectContext, object> instantiateCallback)\n        {\n            Assert.That(!concreteType.IsAbstract(),\n                \"Expected non-abstract type for given binding but instead found type '{0}'{1}\",\n                concreteType, bindingContext == null ? \"\" : \" when binding '{0}'\".Fmt(bindingContext));\n\n            _container = container;\n            _concreteType = concreteType;\n            _extraArguments = extraArguments.ToList();\n            _concreteIdentifier = concreteIdentifier;\n            _instantiateCallback = instantiateCallback;\n        }\n\n        public bool IsCached\n        {\n            get { return false; }\n        }\n\n        public bool TypeVariesBasedOnMemberType\n        {\n            get { return _concreteType.IsOpenGenericType(); }\n        }\n\n        public Type GetInstanceType(InjectContext context)\n        {\n            if (!_concreteType.DerivesFromOrEqual(context.MemberType))\n            {\n                return null;\n            }\n\n            return GetTypeToCreate(context.MemberType);\n        }\n\n        public void GetAllInstancesWithInjectSplit(\n            InjectContext context, List<TypeValuePair> args, out Action injectAction, List<object> buffer)\n        {\n            Assert.IsNotNull(context);\n\n            var instanceType = GetTypeToCreate(context.MemberType);\n\n            var extraArgs = ZenPools.SpawnList<TypeValuePair>();\n\n            extraArgs.AllocFreeAddRange(_extraArguments);\n            extraArgs.AllocFreeAddRange(args);\n\n            var instance = _container.InstantiateExplicit(instanceType, false, extraArgs, context, _concreteIdentifier);\n\n            injectAction = () =>\n            {\n                _container.InjectExplicit(\n                    instance, instanceType, extraArgs, context, _concreteIdentifier);\n\n                Assert.That(extraArgs.Count == 0);\n                ZenPools.DespawnList(extraArgs);\n\n                if (_instantiateCallback != null)\n                {\n                    _instantiateCallback(context, instance);\n                }\n            };\n\n            buffer.Add(instance);\n        }\n\n        Type GetTypeToCreate(Type contractType)\n        {\n            return ProviderUtil.GetTypeToInstantiate(contractType, _concreteType);\n        }\n    }\n}\n\n'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/GamePlay/GamePlayMediator.cs'\n:﻿using System;\nusing PG.Core.Contexts;\nusing PG.IdleMiner.Misc;\nusing PG.IdleMiner.Models;\nusing PG.IdleMiner.Models.MediatorModels;\nusing PG.IdleMiner.Models.RemoteDataModels;\nusing PG.IdleMiner.Views.GamePlay;\nusing UniRx;\nusing UnityEngine;\nusing Zenject;\n\nnamespace PG.IdleMiner.Contexts.GamePlay\n{\n    public partial class GamePlayMediator : StateMachineMediator\n    {\n        [Inject] private readonly GamePlayView _view;\n\n        [Inject] private readonly GamePlayModel _gamePlayModel;\n        [Inject] private readonly RemoteDataModel _remoteDataModel;\n        [Inject] private readonly StaticDataModel _staticDataModel;\n\n        public GamePlayMediator()\n        {\n            Disposables = new CompositeDisposable();\n        }\n\n        public override void Initialize()\n        {\n            base.Initialize();\n\n            StateBehaviours.Add((int)GamePlayModel.EGamePlayState.Game, new GamePlayStateDefault(this));\n\n            foreach(ShaftRemoteDataModel shaft in _remoteDataModel.Shafts)\n            {\n                SetupShaft(shaft);\n            }\n\n            _remoteDataModel.Shafts.ObserveAdd().Subscribe(OnShaftAdd).AddTo(Disposables);\n\n            _remoteDataModel.Warehouse.ReactiveWarehouse.Subscribe(_view.UpdateWarehouse).AddTo(Disposables);\n            _remoteDataModel.Elevator.ReactiveElevator.Subscribe((e) => { _view.UpdateElevator(e, _remoteDataModel.Shafts.Count * Constants.ShaftDistance); });\n\n            _view.SubscribeUpgradeElevator(OnElevatorUpgradeRequest);\n            _view.SubscribeUpgradeWareHouse(OnWareHouseUpgradeRequest);\n\n            _gamePlayModel.GamePlayState.Subscribe(OnGamePlayStateChanged).AddTo(Disposables);\n        }\n\n        public void OnShaftAdd(CollectionAddEvent<ShaftRemoteDataModel> evt)\n        {\n            SetupShaft(evt.Value);\n        }\n\n        private void SetupShaft(ShaftRemoteDataModel shaftRemoteDataModel)\n        {\n            ShaftView shaftView = _view.AddShaft(shaftRemoteDataModel.ReactiveShaft.Value);\n\n            shaftView.OnShaftUpgradeClick = data =>\n            {\n                shaftRemoteDataModel.Upgrade();\n            };\n\n            shaftRemoteDataModel.ReactiveShaft.Subscribe(_view.UpdateShaft).AddTo(Disposables);\n        }\n\n        public void OnElevatorUpgradeRequest()\n        {\n            Debug.Log(\"OnElevatorUpgradeRequest\");\n            _remoteDataModel.Elevator.Upgrade();\n        }\n\n        public void OnWareHouseUpgradeRequest()\n        {\n            _remoteDataModel.Warehouse.Upgrade();\n        }\n\n        private void OnGamePlayStateChanged(GamePlayModel.EGamePlayState gamePlayState)\n        {\n            GoToState((int)gamePlayState);\n        }\n\n        public override void Dispose()\n        {\n            base.Dispose();\n            _view.UnSubscribeElevatorHouse(OnElevatorUpgradeRequest);\n            _view.UnSubscribeUpgradeWareHouse(OnWareHouseUpgradeRequest);\n        }\n    }\n}\n\n\n'Idle-Miner/Assets/Plugins/Zenject/Source/Editor/ZenUnityEditorUtil.cs'\n:#if !NOT_UNITY3D\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing ModestTree;\nusing UnityEditor;\nusing UnityEditor.SceneManagement;\nusing UnityEngine;\nusing UnityEngine.SceneManagement;\n\nnamespace Zenject.Internal\n{\n    public static class ZenUnityEditorUtil\n    {\n\n        public static bool SaveThenRunPreserveSceneSetup(Action action)\n        {\n            if (EditorSceneManager.SaveCurrentModifiedScenesIfUserWantsTo())\n            {\n                var originalSceneSetup = EditorSceneManager.GetSceneManagerSetup();\n\n                try\n                {\n                    action();\n                    return true;\n                }\n                catch (Exception e)\n                {\n                    Log.ErrorException(e);\n                    return false;\n                }\n                finally\n                {\n                    EditorSceneManager.RestoreSceneManagerSetup(originalSceneSetup);\n                }\n            }\n\n            return false;\n        }\n\n\n\n        public static void ValidateCurrentSceneSetup()\n        {\n            bool encounteredError = false;\n\n            Application.LogCallback logCallback = (condition, stackTrace, type) =>\n            {\n                if (type == LogType.Error || type == LogType.Assert\n                    || type == LogType.Exception)\n                {\n                    encounteredError = true;\n                }\n            };\n\n            Application.logMessageReceived += logCallback;\n\n            try\n            {\n                Assert.That(!ProjectContext.HasInstance);\n                ProjectContext.ValidateOnNextRun = true;\n\n                foreach (var sceneContext in GetAllSceneContexts())\n                {\n                    sceneContext.Validate();\n                }\n            }\n            catch (Exception e)\n            {\n                Log.ErrorException(e);\n                encounteredError = true;\n            }\n            finally\n            {\n                Application.logMessageReceived -= logCallback;\n            }\n\n            if (encounteredError)\n            {\n                throw new ZenjectException(\"Zenject Validation Failed!  See errors below for details.\");\n            }\n        }\n\n\n\n        public static int ValidateAllActiveScenes()\n        {\n            var activeScenePaths = EditorBuildSettings.scenes.Where(x => x.enabled)\n                .Select(x => x.path).ToList();\n\n            foreach (var scenePath in activeScenePaths)\n            {\n                EditorSceneManager.OpenScene(scenePath, OpenSceneMode.Single);\n                ValidateCurrentSceneSetup();\n            }\n\n            return activeScenePaths.Count;\n        }\n\n\n        public static void RunCurrentSceneSetup()\n        {\n            Assert.That(!ProjectContext.HasInstance);\n\n            foreach (var sceneContext in GetAllSceneContexts())\n            {\n                try\n                {\n                    sceneContext.Run();\n                }\n                catch (Exception e)\n                {\n\n                    throw new ZenjectException(\n                        \"Scene '{0}' Failed To Start!\".Fmt(sceneContext.gameObject.scene.name), e);\n                }\n            }\n        }\n\n        public static SceneContext GetSceneContextForScene(Scene scene)\n        {\n            var sceneContext = TryGetSceneContextForScene(scene);\n\n            Assert.IsNotNull(sceneContext,\n                \"Could not find scene context for scene '{0}'\", scene.name);\n\n            return sceneContext;\n        }\n\n        public static SceneContext TryGetSceneContextForScene(Scene scene)\n        {\n            if (!scene.isLoaded)\n            {\n                return null;\n            }\n\n            var sceneContexts = scene.GetRootGameObjects()\n                .SelectMany(x => x.GetComponentsInChildren<SceneContext>()).ToList();\n\n            if (sceneContexts.IsEmpty())\n            {\n                return null;\n            }\n\n            Assert.That(sceneContexts.Count == 1,\n                \"Found multiple SceneContexts in scene '{0}'.  Expected a maximum of one.\", scene.name);\n\n            return sceneContexts[0];\n        }\n\n        public static SceneDecoratorContext GetDecoratorContextForScene(Scene scene)\n        {\n            var decoratorContext = TryGetDecoratorContextForScene(scene);\n\n            Assert.IsNotNull(decoratorContext,\n                \"Could not find decorator context for scene '{0}'\", scene.name);\n\n            return decoratorContext;\n        }\n\n        public static SceneDecoratorContext TryGetDecoratorContextForScene(Scene scene)\n        {\n            if (!scene.isLoaded)\n            {\n                return null;\n            }\n\n            var decoratorContexts = scene.GetRootGameObjects()\n                .SelectMany(x => x.GetComponentsInChildren<SceneDecoratorContext>()).ToList();\n\n            if (decoratorContexts.IsEmpty())\n            {\n                return null;\n            }\n\n            Assert.That(decoratorContexts.Count == 1,\n                \"Found multiple DecoratorContexts in scene '{0}'.  Expected a maximum of one.\", scene.name);\n\n            return decoratorContexts[0];\n        }\n\n        static IEnumerable<SceneContext> GetAllSceneContexts()\n        {\n            var decoratedSceneNames = new List<string>();\n\n            for (int i = 0; i < EditorSceneManager.sceneCount; i++)\n            {\n                var scene = EditorSceneManager.GetSceneAt(i);\n\n                var sceneContext = TryGetSceneContextForScene(scene);\n                var decoratorContext = TryGetDecoratorContextForScene(scene);\n\n                if (sceneContext != null)\n                {\n                    Assert.That(decoratorContext == null,\n                        \"Found both SceneDecoratorContext and SceneContext in the same scene '{0}'.  This is not allowed\", scene.name);\n\n                    decoratedSceneNames.RemoveAll(x => sceneContext.ContractNames.Contains(x));\n\n                    yield return sceneContext;\n                }\n                else if (decoratorContext != null)\n                {\n                    Assert.That(!string.IsNullOrEmpty(decoratorContext.DecoratedContractName),\n                        \"Missing Decorated Contract Name on SceneDecoratorContext in scene '{0}'\", scene.name);\n\n                    decoratedSceneNames.Add(decoratorContext.DecoratedContractName);\n                }\n            }\n\n            Assert.That(decoratedSceneNames.IsEmpty(),\n                \"Found decorator scenes without a corresponding scene to decorator.  Missing scene contracts: {0}\", decoratedSceneNames.Join(\", \"));\n        }\n\n        public static string ConvertAssetPathToAbsolutePath(string assetPath)\n        {\n            return Path.Combine(\n                Path.Combine(Path.GetFullPath(Application.dataPath), \"..\"), assetPath);\n        }\n\n        public static string ConvertFullAbsolutePathToAssetPath(string fullPath)\n        {\n            fullPath = Path.GetFullPath(fullPath);\n\n            var assetFolderFullPath = Path.GetFullPath(Application.dataPath);\n\n            if (fullPath.Length == assetFolderFullPath.Length)\n            {\n                Assert.IsEqual(fullPath, assetFolderFullPath);\n                return \"Assets\";\n            }\n\n            var assetPath = fullPath.Remove(0, assetFolderFullPath.Length + 1).Replace(\"\\\\\", \"/\");\n            return \"Assets/\" + assetPath;\n        }\n\n        public static string GetCurrentDirectoryAssetPathFromSelection()\n        {\n            return ConvertFullAbsolutePathToAssetPath(\n                GetCurrentDirectoryAbsolutePathFromSelection());\n        }\n\n        public static string GetCurrentDirectoryAbsolutePathFromSelection()\n        {\n            var folderPath = TryGetSelectedFolderPathInProjectsTab();\n\n            if (folderPath != null)\n            {\n                return folderPath;\n            }\n\n            var filePath = TryGetSelectedFilePathInProjectsTab();\n\n            if (filePath != null)\n            {\n                return Path.GetDirectoryName(filePath);\n            }\n\n            return Application.dataPath;\n        }\n\n        public static string TryGetSelectedFilePathInProjectsTab()\n        {\n            return GetSelectedFilePathsInProjectsTab().OnlyOrDefault();\n        }\n\n        public static List<string> GetSelectedFilePathsInProjectsTab()\n        {\n            return GetSelectedPathsInProjectsTab()\n                .Where(x => File.Exists(x)).ToList();\n        }\n\n        public static List<string> GetSelectedAssetPathsInProjectsTab()\n        {\n            var paths = new List<string>();\n\n            UnityEngine.Object[] selectedAssets = Selection.GetFiltered(\n                typeof(UnityEngine.Object), SelectionMode.Assets);\n\n            foreach (var item in selectedAssets)\n            {\n                var assetPath = AssetDatabase.GetAssetPath(item);\n\n                if (!string.IsNullOrEmpty(assetPath))\n                {\n                    paths.Add(assetPath);\n                }\n            }\n\n            return paths;\n        }\n\n        public static List<string> GetSelectedPathsInProjectsTab()\n        {\n            var paths = new List<string>();\n\n            UnityEngine.Object[] selectedAssets = Selection.GetFiltered(\n                typeof(UnityEngine.Object), SelectionMode.Assets);\n\n            foreach (var item in selectedAssets)\n            {\n                var relativePath = AssetDatabase.GetAssetPath(item);\n\n                if (!string.IsNullOrEmpty(relativePath))\n                {\n                    var fullPath = Path.GetFullPath(Path.Combine(\n                        Application.dataPath, Path.Combine(\"..\", relativePath)));\n\n                    paths.Add(fullPath);\n                }\n            }\n\n            return paths;\n        }\n\n\n        public static void SaveScriptableObjectAsset(\n            string path, ScriptableObject asset)\n        {\n            Assert.That(path.EndsWith(\".asset\"));\n\n            string assetPathAndName = AssetDatabase.GenerateUniqueAssetPath(path);\n\n            AssetDatabase.CreateAsset(asset, assetPathAndName);\n\n            AssetDatabase.SaveAssets();\n            AssetDatabase.Refresh();\n            EditorUtility.FocusProjectWindow();\n            Selection.activeObject = asset;\n        }\n\n\n        public static List<string> GetSelectedFolderPathsInProjectsTab()\n        {\n            return GetSelectedPathsInProjectsTab()\n                .Where(x => Directory.Exists(x)).ToList();\n        }\n\n\n\n\n\n        public static string TryGetSelectedFolderPathInProjectsTab()\n        {\n            return GetSelectedFolderPathsInProjectsTab().OnlyOrDefault();\n        }\n    }\n}\n\n#endif\n",
        "gt": [
            "'Idle-Miner/Assets/Plugins/Zenject/Source/Editor/ZenUnityEditorUtil.cs'",
            "'Idle-Miner/Assets/Plugins/Zenject/Source/Providers/TransientProvider.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Contexts/GamePlay/GamePlayMediator.cs'"
        ]
    },
    {
        "files": [
            "'SharpPulsar/src/SharpPulsar/Builder/ProducerConfigBuilder.cs'",
            "'SharpPulsar/src/SharpPulsar/TopicListWatcherActor.cs'",
            "'SharpPulsar/src/SharpPulsar.Test/OTelTest.cs'"
        ],
        "content": "'SharpPulsar/src/SharpPulsar/Builder/ProducerConfigBuilder.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing SharpPulsar.Messages;\n\nusing SharpPulsar.Batch.Api;\nusing SharpPulsar.Interfaces.Interceptor;\n\nusing SharpPulsar.Interfaces;\nusing SharpPulsar.Common;\nusing SharpPulsar.Protocol.Proto;\n\n\nusing SharpPulsar.Extension;\nusing SharpPulsar.Configuration;\nusing SharpPulsar.Common.Compression;\nusing SharpPulsar.Crypto;\nusing SharpPulsar.Precondition;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnamespace SharpPulsar.Builder\n{\n\n    public class ProducerConfigBuilder<T>\n    {\n        private ProducerConfigurationData _conf = new ProducerConfigurationData();\n        private ISchema<T> _schema;\n        private List<IProducerInterceptor<T>> _interceptorList;\n\n        public virtual ProducerConfigurationData Build()\n        {\n            return _conf;\n        }\n        public ProducerConfigBuilder<T> LoadConf(IDictionary<string, object> config)\n        {\n            _conf = (ProducerConfigurationData)ConfigurationDataUtils.LoadData(config, _conf);\n            return this;\n        }\n        public ProducerConfigBuilder<T> EventListener(IProducerEventListener listener)\n        {\n            if (listener == null)\n                throw new ArgumentException(\"listener is null\");\n            _conf.ProducerEventListener = listener;\n            return this;\n        }\n\n\n\n\n\n        public ProducerConfigBuilder<T> ChunkMaxMessageSize(int max)\n        {\n            if (max < 1)\n                throw new ArgumentException(\"max should be > 0\");\n            _conf.ChunkMaxMessageSize = max;\n            return this;\n        }\n        public ProducerConfigBuilder<T> Topic(string topicName)\n        {\n            if (string.IsNullOrWhiteSpace(topicName))\n                throw new ArgumentException(\"topicName cannot be blank or null\");\n            _conf.TopicName = topicName.Trim();\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> ProducerName(string producerName)\n        {\n            _conf.ProducerName = producerName;\n            return this;\n        }\n        public ProducerConfigBuilder<T> AccessMode(Common.ProducerAccessMode accessMode)\n        {\n            _conf.AccessMode = accessMode;\n            return this;\n        }\n        public ProducerConfigBuilder<T> EnableBatching(bool enableBatching)\n        {\n            _conf.BatchingEnabled = enableBatching;\n            return this;\n        }\n\n\n\n\n\n        public ProducerConfigBuilder<T> SetAckReceivedListerner(Action<AckReceived> listerner)\n        {\n            if (!_conf.BatchingEnabled)\n                throw new InvalidOperationException(\"AckReceived Listerner is only allowed for batched producer!\");\n\n            _conf.AckReceivedListerner = listerner;\n            return this;\n        }\n        public ProducerConfigBuilder<T> BatchBuilder(IBatcherBuilder builder)\n        {\n            _conf.BatcherBuilder = builder;\n            return this;\n        }\n        public ProducerConfigBuilder<T> BatchingMaxPublishDelay(TimeSpan batchDelay)\n        {\n            _conf.SetBatchingMaxPublishDelayMs(batchDelay);\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> BatchingMaxMessages(int batchingMaxMessages)\n        {\n            _conf.BatchingMaxMessages = batchingMaxMessages;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> SendTimeout(TimeSpan sendTimeoutMs)\n        {\n            _conf.SetSendTimeoutMs(sendTimeoutMs);\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> MaxPendingMessages(int maxPendingMessages)\n        {\n            _conf.MaxPendingMessages = maxPendingMessages;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> MaxPendingMessagesAcrossPartitions(int maxPendingMessagesAcrossPartitions)\n        {\n            _conf.MaxPendingMessagesAcrossPartitions = maxPendingMessagesAcrossPartitions;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> EnableChunking(bool chunk)\n        {\n            _conf.ChunkingEnabled = chunk;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> MessageRoutingMode(MessageRoutingMode messageRouteMode)\n        {\n            _conf.MessageRoutingMode = messageRouteMode;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> CompressionType(CompressionType compressionType)\n        {\n            _conf.CompressionType = compressionType;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> HashingScheme(HashingScheme hashingScheme)\n        {\n            _conf.HashingScheme = hashingScheme;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> CryptoKeyReader(ICryptoKeyReader cryptoKeyReader)\n        {\n            _conf.CryptoKeyReader = cryptoKeyReader;\n            return this;\n        }\n        public ProducerConfigBuilder<T> DefaultCryptoKeyReader(string publicKey)\n        {\n            Condition.CheckArgument(!string.IsNullOrWhiteSpace(publicKey), \"publicKey cannot be blank\");\n            return CryptoKeyReader(Crypto.DefaultCryptoKeyReader.Builder().DefaultPublicKey(publicKey).Build());\n        }\n        public ProducerConfigBuilder<T> DefaultCryptoKeyReader(IDictionary<string, string> publicKeys)\n        {\n            Condition.CheckArgument(publicKeys.Count > 0, \"publicKeys cannot be empty\");\n            return CryptoKeyReader(Crypto.DefaultCryptoKeyReader.Builder().PublicKeys(publicKeys).Build());\n        }\n        public ProducerConfigBuilder<T> MessageCrypto(MessageCrypto messageCrypto)\n        {\n            _conf.MessageCrypto = messageCrypto;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> AddEncryptionKey(string key)\n        {\n            if (string.IsNullOrWhiteSpace(key))\n                throw new ArgumentException(\"Encryption key cannot be blank or null\");\n            _conf.EncryptionKeys.Add(key);\n            return this;\n        }\n\n\n\n\n\n\n\n\n\n        public ProducerConfigBuilder<T> InitialSubscriptionName(string initialSubscriptionName)\n        {\n            _conf.InitialSubscriptionName = initialSubscriptionName;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> CryptoFailureAction(ProducerCryptoFailureAction action)\n        {\n            _conf.CryptoFailureAction = action;\n            return this;\n        }\n\n\n        public ProducerConfigBuilder<T> InitialSequenceId(long initialSequenceId)\n        {\n            _conf.InitialSequenceId = initialSequenceId;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> Property(string key, string value)\n        {\n            if (string.IsNullOrWhiteSpace(key))\n                throw new ArgumentException(\"property key cannot be blank or null\");\n            if (string.IsNullOrWhiteSpace(value))\n                throw new ArgumentException(\"property value cannot be blank or null\");\n            _conf.Properties.Add(key, value);\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> Properties(IDictionary<string, string> properties)\n        {\n            if (properties == null)\n                throw new ArgumentException(\"properties cannot be null\");\n            if (properties.Count == 0)\n                throw new ArgumentException(\"properties cannot be empty\");\n            properties.SetOfKeyValuePairs().ToList().ForEach(entry =>\n            {\n                var (key, value) = entry;\n                if (string.IsNullOrWhiteSpace(key) || string.IsNullOrWhiteSpace(value))\n                {\n                    throw new ArgumentException(\"properties' key/value cannot be blank\");\n                }\n\n                _conf.Properties.Add(key, value);\n            });\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> Schema(ISchema<T> schema)\n        {\n            if (schema == null)\n                throw new ArgumentException(\"Schema is null\");\n            _schema = schema;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> Intercept(params IProducerInterceptor<T>[] interceptors)\n        {\n            if (_interceptorList == null)\n            {\n                _interceptorList = new List<IProducerInterceptor<T>>();\n            }\n            _interceptorList.AddRange(interceptors);\n            return this;\n        }\n        public ProducerConfigBuilder<T> AutoUpdatePartitions(bool autoUpdate)\n        {\n            _conf.AutoUpdatePartitions = autoUpdate;\n            return this;\n        }\n        public ProducerConfigBuilder<T> AutoUpdatePartitionsInterval(TimeSpan interval)\n        {\n            _conf.SetAutoUpdatePartitionsIntervalSeconds(interval);\n            return this;\n        }\n\n        public List<IProducerInterceptor<T>> GetInterceptors => _interceptorList;\n\n        public ISchema<T> GetSchema => _schema;\n\n        public ProducerConfigBuilder<T> EnableMultiSchema(bool multiSchema)\n        {\n            _conf.MultiSchema = multiSchema;\n            return this;\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        public ProducerConfigBuilder<T> EnableLazyStartPartitionedProducers(bool lazyStartPartitionedProducers)\n        {\n            _conf.LazyStartPartitionedProducers =  lazyStartPartitionedProducers;\n            return this;\n        }\n        public override string ToString()\n        {\n            return _conf?.ToString();\n        }\n\n    }\n\n    public interface IProducerEventListener\n    {\n        public void MessageSent(SentReceipt receipt);\n        public void Log(object log);\n    }\n}\n'SharpPulsar/src/SharpPulsar/TopicListWatcherActor.cs'\n:﻿using System;\nusing System.Collections.ObjectModel;\nusing System.Threading.Tasks;\nusing Akka.Actor;\nusing SharpPulsar.Common.Naming;\nusing SharpPulsar.Configuration;\nusing SharpPulsar.Exceptions;\nusing SharpPulsar.Messages;\nusing SharpPulsar.Messages.Requests;\nusing SharpPulsar.Protocol.Proto;\nusing SharpPulsar.Protocol;\nusing SharpPulsar.Messages.Client;\nusing SharpPulsar.Messages.Consumer;\nusing SharpPulsar.Messages.Transaction;\nusing SharpPulsar.Client;\nusing SharpPulsar.Consumer;\n\nnamespace SharpPulsar\n{\n\n    internal class TopicListWatcherActor : ReceiveActor, IWithUnboundedStash\n    {\n        private readonly IActorRef _connectionHandler;\n        private readonly IActorRef _self;\n        private IActorRef _cnx;\n        private readonly TimeSpan _lookupDeadline;\n        private readonly Collection<Exception> _previousExceptions = new Collection<Exception>();\n        private readonly string _name;\n        private readonly string _topicsPattern;\n        private readonly long _watcherId;\n        private long _createWatcherDeadline = 0;\n        private readonly NamespaceName _namespace;\n        private string _topicsHash;\n        private readonly ILoggingAdapter _log;\n        protected internal IActorRef _state;\n        private TaskCompletionSource<IActorRef> _watcherFuture;\n        private ClientConfigurationData _conf;\n        private readonly IActorRef _generator;\n        private IActorRef _clientCnxUsedForWatcherRegistration;\n        private IActorRef _patternConsumerUpdateQueue;\n        private IActorRef _recheckTopicsChangeAfterReconnect;\n        public TopicListWatcherActor(IActorRef patternConsumerUpdateQueue, IActorRef idGenerator, ClientConfigurationData conf, string topicsPattern, long watcherId, NamespaceName @namespace, string topicsHash, IActorRef state, TaskCompletionSource<IActorRef> watcherFuture)\n        {\n            _patternConsumerUpdateQueue = patternConsumerUpdateQueue;\n            _self = Self;\n            _lookupDeadline = TimeSpan.FromMilliseconds(DateTimeHelper.CurrentUnixTimeMillis() + conf.LookupTimeout.TotalMilliseconds);\n            _connectionHandler = Context.ActorOf(ConnectionHandler.Prop(conf, state, new BackoffBuilder().SetInitialTime(TimeSpan.FromMilliseconds(conf.InitialBackoffIntervalMs))\n                .SetMax(TimeSpan.FromMilliseconds(conf.MaxBackoffIntervalMs)).SetMandatoryStop(TimeSpan.FromMilliseconds(0)).Create(), Self));\n            _state = state;\n            _name = \"Watcher(\" + topicsPattern + \")\";\n            _topicsPattern = topicsPattern;\n            _watcherId = watcherId;\n            _namespace = @namespace;\n            _topicsHash = topicsHash;\n            _log = Context.GetLogger();\n           _watcherFuture = watcherFuture;\n            _conf = conf;\n            _generator = idGenerator;\n            _recheckTopicsChangeAfterReconnect = Context.Parent;\n            Handle();\n            GrabCnx();\n        }\n        public static Props Prop(IActorRef patternConsumerUpdateQueue, IActorRef idGenerator, ClientConfigurationData conf, string topicsPattern, long watcherId, NamespaceName @namespace, string topicsHash, IActorRef state, TaskCompletionSource<IActorRef> watcherFuture)\n        {\n            return Props.Create(() => new TopicListWatcherActor(patternConsumerUpdateQueue, idGenerator, conf, topicsPattern, watcherId, @namespace, topicsHash, state, watcherFuture));\n        }\n        private void GrabCnx()\n        {\n            _connectionHandler.Tell(new GrabCnx($\"Create connection from topicListWatcher: {_name}\"));\n        }\n        private void Handle()\n        {\n            ReceiveAsync<AskResponse>(async ask =>\n            {\n                if (ask.Failed)\n                {\n                    ConnectionFailed(ask.Exception);\n                }\n                else\n                {\n                    await ConnectionOpened(ask.ConvertTo<ConnectionOpened>()).ConfigureAwait(false);\n                }\n\n            });\n            ReceiveAsync<Close>(async _ =>\n            {\n                var ask = await Close();\n               Sender.Tell(ask);\n            });\n            Receive<HandleWatchTopicUpdate>(update =>\n            {\n                HandleCommandWatchTopicUpdate(update.Update);\n            });\n            Receive<ConnectionClosed>(ctx =>\n            {\n                ConnectionClosed(ctx.ClientCnx);\n            });\n\n        }\n\n        private void ConnectionFailed(PulsarClientException exception)\n        {\n            var nonRetriableError = !PulsarClientException.IsRetriableError(exception);\n            if (nonRetriableError)\n            {\n                exception.SetPreviousExceptions(_previousExceptions);\n                if (_watcherFuture.TrySetException(exception))\n                {\n                    _state.Tell(new SetState(State.Failed));\n\n                    _log.Info($\"[Topic] Watcher creation failed for {_name} with non-retriable error {exception}\");\n                    DeregisterFromClientCnx();\n                }\n            }\n            else\n            {\n                _previousExceptions.Add(exception);\n            }\n        }\n\n        private async ValueTask ConnectionOpened(ConnectionOpened c)\n        {\n            ClientCnx = c.ClientCnx;\n            _previousExceptions.Clear();\n            var state = await _state.Ask<State>(GetState.Instance);\n\n            if (state == State.Closing || state == State.Closed)\n            {\n                _state.Tell(new SetState(State.Closed));\n\n                DeregisterFromClientCnx();\n                return;\n            }\n\n            _log.Info($\"[Topic][{HandlerName}] Creating topic list watcher on cnx, watcherId {_watcherId}\");\n            var id = await _generator.Ask<NewRequestIdResponse>(NewRequestId.Instance).ConfigureAwait(false);\n            var requestId = id.Id;\n            _createWatcherDeadline =  DateTimeHelper.CurrentUnixTimeMillis() + (long)_conf.OperationTimeout.TotalMilliseconds;\n\n\n            var watchRequest = Commands.NewWatchTopicList(requestId, _watcherId, _namespace.ToString(), _topicsPattern, _topicsHash);\n            try\n            {\n                var response = await _cnx.Ask<CommandWatchTopicListSuccessResponse>(new Payload(watchRequest, requestId, \"NewWatchTopicList\"), _conf.OperationTimeout).ConfigureAwait(false);\n                var tf = await _state.Ask<bool>(ChangeToReadyState.Instance);\n                if (!tf)\n                {\n                    _state.Tell(new SetState(State.Closed));\n\n                    DeregisterFromClientCnx();\n                    _cnx.Tell(Messages.Requests.Close.Instance);\n                    return;\n                }\n                ResetBackoff();\n                _recheckTopicsChangeAfterReconnect.Tell(RecheckTopicsChangeAfterReconnect.Instance);\n                _watcherFuture.SetResult(_self);\n            }\n            catch (Exception e)\n            {\n                DeregisterFromClientCnx();\n                var sta = await _state.Ask<State>(GetState.Instance);\n                if (sta == State.Closing || sta == State.Closed)\n                {\n                    _cnx.Tell(Messages.Requests.Close.Instance);\n                    return;\n                }\n                _log.Warning($\"[Topic][{HandlerName}] Failed to subscribe to topic on 'remoteAddress'\");\n                if (e.InnerException is PulsarClientException && PulsarClientException.IsRetriableError(e.InnerException) && DateTimeHelper.CurrentUnixTimeMillis() < _createWatcherDeadline)\n                {\n                    _watcherFuture.SetException(new PulsarClientException(e));\n\n                }\n                else if (!_watcherFuture.Task.IsCompleted)\n                {\n                    _state.Tell(new SetState(State.Failed));\n\n                    _watcherFuture.SetException(PulsarClientException.Wrap(e, $\"Failed to create topic list watcher {HandlerName} when connecting to the broker\"));\n                }\n                else\n                {\n\n                    _watcherFuture.SetException(new PulsarClientException(e));\n\n                }\n                if(_watcherFuture.Task.IsCompleted)\n                {\n                    _watcherFuture = null;\n                }\n            }\n\n        }\n        private string HandlerName\n        {\n            get\n            {\n                return _name;\n            }\n        }\n\n        private void ResetBackoff()\n        {\n            _connectionHandler.Tell(Messages.Requests.ResetBackoff.Instance);\n        }\n        private bool Connected\n        {\n            get\n            {\n                var state = _state.Ask<State>(GetState.Instance).GetAwaiter().GetResult();\n                return ClientCnx != null && (state == State.Ready);\n            }\n        }\n\n        public virtual IActorRef ClientCnx\n        {\n            get\n            {\n                return _cnx;\n            }\n            set\n            {\n                if (value != null)\n                {\n                    _cnx = value;\n                    _cnx.Tell(new RegisterTopicListWatcher(_watcherId, _self));\n                }\n                var previousClientCnx = _clientCnxUsedForWatcherRegistration = value;\n                if (previousClientCnx != null && previousClientCnx != value)\n                {\n                    previousClientCnx.Tell(new RemoveTopicListWatcher(_watcherId));\n                }\n            }\n        }\n\n        public IStash Stash { get; set; }\n\n        private async ValueTask<AskResponse> Close()\n        {\n            var state = await _state.Ask<State>(GetState.Instance);\n\n            if (state == State.Closing || state == State.Closed)\n            {\n                return new AskResponse();\n            }\n\n            if (!Connected)\n            {\n                _log.Info($\"[Topic] [{HandlerName}] Closed watcher (not connected)\");\n                _state.Tell(new SetState(State.Closed));\n\n                DeregisterFromClientCnx();\n                return new AskResponse(null);\n            }\n            _state.Tell(new SetState(State.Closing));\n\n\n            var id = await _generator.Ask<NewRequestIdResponse>(NewRequestId.Instance).ConfigureAwait(false);\n            var requestId = id.Id;\n            CommandSuccess response = null;\n            if (null == _cnx)\n            {\n                CleanupAtClose(null);\n            }\n            else\n            {\n                try\n                {\n                    var cmd = Commands.NewWatchTopicListClose(_watcherId, requestId);\n                    response = await _cnx.Ask<CommandSuccess>(new Payload(cmd, requestId, \"NewWatchTopicListClose\"), _conf.OperationTimeout).ConfigureAwait(false);\n\n                }\n                catch(Exception ex)\n                {\n                    _log.Debug($\"Exception ignored in closing watcher {ex}\");\n                    CleanupAtClose(ex);\n                }\n\n            }\n\n            return new AskResponse(response);\n        }\n\n\n        private IActorRef Cnx()\n        {\n            return _cnx;\n        }\n\n       private void ConnectionClosed(IActorRef clientCnx)\n        {\n            _connectionHandler.Tell(new ConnectionClosed(clientCnx));\n        }\n\n\n        private void DeregisterFromClientCnx()\n        {\n            ClientCnx = null;\n        }\n\n        private void ReconnectLater(Exception exception)\n        {\n            _connectionHandler.Tell(new ReconnectLater(exception));\n        }\n\n\n        private Exception CleanupAtClose(Exception exception)\n        {\n            _log.Info($\"[{HandlerName}] Closed topic list watcher\");\n            _state.Tell(new SetState(State.Closed));\n\n            DeregisterFromClientCnx();\n            if (exception != null)\n            {\n                return exception;\n            }\n            else\n            {\n                return null;\n            }\n        }\n\n        private void HandleCommandWatchTopicUpdate(CommandWatchTopicUpdate update)\n        {\n            _patternConsumerUpdateQueue.Tell(new AppendTopicsRemovedOp(update.DeletedTopics));\n            _patternConsumerUpdateQueue.Tell(new AppendTopicsAddedOp(update.NewTopics));\n        }\n    }\n}\n\n'SharpPulsar/src/SharpPulsar.Test/OTelTest.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing OpenTelemetry;\nusing OpenTelemetry.Resources;\nusing OpenTelemetry.Trace;\nusing SharpPulsar.Builder;\nusing SharpPulsar.Telemetry.Trace;\nusing SharpPulsar.Test.Fixture;\nusing SharpPulsar.TestContainer;\nusing Xunit;\nusing Xunit.Abstractions;\n\nnamespace SharpPulsar.Test\n{\n    [Collection(nameof(PulsarCollection))]\n    public class OTelTest : IAsyncLifetime\n    {\n        private PulsarClient _client;\n        private readonly ITestOutputHelper _output;\n        private PulsarSystem _system;\n        private PulsarClientConfigBuilder _configBuilder;\n        public OTelTest(ITestOutputHelper output, PulsarFixture fixture)\n        {\n            _output = output;\n            _configBuilder = fixture.ConfigBuilder;\n            _system = fixture.System;\n        }\n        [Fact]\n        public async Task ProduceAndConsume()\n        {\n            var topic = $\"persistent:\n            var exportedItems = new List<Activity>();\n            Sdk.CreateTracerProviderBuilder()\n            .AddSource(\"producer\", \"consumer\")\n            .SetResourceBuilder(ResourceBuilder.CreateDefault().AddService(\"inmemory-test\"))\n            .AddInMemoryExporter(exportedItems)\n            .Build();\n\n            var r = new Random(0);\n            var byteKey = new byte[1000];\n            r.NextBytes(byteKey);\n\n            var producerBuilder = new ProducerConfigBuilder<byte[]>()\n                .Intercept(new ProducerOTelInterceptor<byte[]>(\"producer\", _client.Log))\n                .Topic(topic);\n            var producer = await _client.NewProducerAsync(producerBuilder);\n\n            await producer.NewMessage().KeyBytes(byteKey)\n               .Properties(new Dictionary<string, string> { { \"KeyBytes\", Encoding.UTF8.GetString(byteKey) } })\n               .Value(Encoding.UTF8.GetBytes(\"TestMessage\"))\n               .SendAsync();\n            await Task.Delay(TimeSpan.FromSeconds(1));\n            var consumerBuilder = new ConsumerConfigBuilder<byte[]>()\n                .Intercept(new ConsumerOTelInterceptor<byte[]>(\"consumer\", _client.Log))\n                .Topic(topic)\n\n                .SubscriptionInitialPosition(Common.SubscriptionInitialPosition.Earliest)\n                .SubscriptionName($\"ByteKeysTest-subscriber-{Guid.NewGuid()}\");\n            var consumer = await _client.NewConsumerAsync(consumerBuilder);\n\n            await Task.Delay(TimeSpan.FromSeconds(10));\n            var message = (Message<byte[]>)await consumer.ReceiveAsync(TimeSpan.FromSeconds(10));\n\n            if (message != null)\n                _output.WriteLine($\"BrokerEntryMetadata[timestamp:{message.BrokerEntryMetadata?.BrokerTimestamp} index: {message.BrokerEntryMetadata?.Index.ToString()}\");\n\n            Assert.Equal(byteKey, message.KeyBytes);\n\n            Assert.True(message.HasBase64EncodedKey());\n            var receivedMessage = Encoding.UTF8.GetString(message.Data);\n            _output.WriteLine($\"Received message: [{receivedMessage}]\");\n            Assert.Equal(\"TestMessage\", receivedMessage);\n            await consumer.AcknowledgeAsync(message);\n\n            await consumer.CloseAsync();\n            foreach (var activity in exportedItems)\n            {\n                _output.WriteLine($\"ActivitySource: {activity.Source.Name} logged the activity {activity.DisplayName} with tags: {activity.Tags.Count()}\");\n                foreach (var tag in activity.Tags)\n                {\n                    _output.WriteLine($\"{tag.Key}:{tag.Value}\");\n                }\n            }\n        }\n        public async Task InitializeAsync()\n        {\n\n            _client = await _system.NewClient(_configBuilder);\n        }\n\n        public async Task DisposeAsync()\n        {\n            await _client.ShutdownAsync();\n        }\n    }\n}\n",
        "gt": [
            "'SharpPulsar/src/SharpPulsar/TopicListWatcherActor.cs'",
            "'SharpPulsar/src/SharpPulsar/Builder/ProducerConfigBuilder.cs'",
            "'SharpPulsar/src/SharpPulsar.Test/OTelTest.cs'"
        ]
    },
    {
        "files": [
            "'IW4M-Admin/Application/Factories/ConfigurationHandlerFactory.cs'",
            "'IW4M-Admin/Application/Main.cs'",
            "'IW4M-Admin/Tests/ApplicationTests/VcrTests.cs'"
        ],
        "content": "'IW4M-Admin/Application/Factories/ConfigurationHandlerFactory.cs'\n:﻿using System.Threading.Tasks;\nusing IW4MAdmin.Application.Misc;\nusing SharedLibraryCore.Interfaces;\n\nnamespace IW4MAdmin.Application.Factories\n{\n\n\n\n\n    public class ConfigurationHandlerFactory : IConfigurationHandlerFactory\n    {\n\n\n\n\n\n\n        public IConfigurationHandler<T> GetConfigurationHandler<T>(string name) where T : IBaseConfiguration\n        {\n            var handler = new BaseConfigurationHandler<T>(name);\n            handler.BuildAsync().Wait();\n            return handler;\n        }\n\n\n        public async Task<IConfigurationHandler<T>> GetConfigurationHandlerAsync<T>(string name) where T : IBaseConfiguration\n        {\n            var handler = new BaseConfigurationHandler<T>(name);\n            await handler.BuildAsync();\n            return handler;\n        }\n    }\n}\n\n'IW4M-Admin/Application/Main.cs'\n:﻿using IW4MAdmin.Application.API.Master;\nusing IW4MAdmin.Application.EventParsers;\nusing IW4MAdmin.Application.Factories;\nusing IW4MAdmin.Application.Meta;\nusing IW4MAdmin.Application.Migration;\nusing IW4MAdmin.Application.Misc;\nusing Microsoft.Extensions.DependencyInjection;\nusing SharedLibraryCore;\nusing SharedLibraryCore.Configuration;\nusing SharedLibraryCore.Database.Models;\nusing SharedLibraryCore.Dtos.Meta.Responses;\nusing SharedLibraryCore.Exceptions;\nusing SharedLibraryCore.Helpers;\nusing SharedLibraryCore.Interfaces;\nusing SharedLibraryCore.QueryHelper;\nusing SharedLibraryCore.Repositories;\nusing SharedLibraryCore.Services;\nusing Stats.Dtos;\nusing System;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Data.Abstractions;\nusing Data.Helpers;\nusing Integrations.Source.Extensions;\nusing IW4MAdmin.Application.Alerts;\nusing IW4MAdmin.Application.Extensions;\nusing IW4MAdmin.Application.IO;\nusing IW4MAdmin.Application.Localization;\nusing IW4MAdmin.Application.Plugin;\nusing IW4MAdmin.Application.Plugin.Script;\nusing IW4MAdmin.Application.QueryHelpers;\nusing Microsoft.Extensions.Logging;\nusing ILogger = Microsoft.Extensions.Logging.ILogger;\nusing IW4MAdmin.Plugins.Stats.Client.Abstractions;\nusing IW4MAdmin.Plugins.Stats.Client;\nusing Microsoft.Extensions.Hosting;\n#if DEBUG\nusing PluginDebugReference;\n#endif\nusing Refit;\nusing SharedLibraryCore.Interfaces.Events;\nusing Stats.Client.Abstractions;\nusing Stats.Client;\nusing Stats.Config;\nusing Stats.Helpers;\nusing WebfrontCore.QueryHelpers.Models;\n\nnamespace IW4MAdmin.Application\n{\n    public class Program\n    {\n        public static BuildNumber Version { get; } = BuildNumber.Parse(Utilities.GetVersionAsString());\n        private static ApplicationManager _serverManager;\n        private static Task _applicationTask;\n        private static IServiceProvider _serviceProvider;\n\n\n\n\n\n        public static async Task Main(bool noConfirm = false, int? maxConcurrentRequests = 25, int? requestQueueLimit = 25)\n        {\n            AppDomain.CurrentDomain.SetData(\"DataDirectory\", Utilities.OperatingDirectory);\n            AppDomain.CurrentDomain.AssemblyResolve += (sender, eventArgs) =>\n            {\n                var libraryName = eventArgs.Name.Split(\",\").First();\n\n                var overrides = new[] { nameof(SharedLibraryCore), nameof(Stats) };\n                if (!overrides.Contains(libraryName))\n                {\n                    return AppDomain.CurrentDomain.GetAssemblies().FirstOrDefault(asm => asm.FullName == eventArgs.Name);\n                }\n\n                return AppDomain.CurrentDomain.GetAssemblies()\n                    .FirstOrDefault(asm => asm.FullName?.StartsWith(libraryName) ?? false);\n            };\n\n            if (noConfirm)\n            {\n                AppContext.SetSwitch(\"NoConfirmPrompt\", true);\n            }\n\n            Environment.SetEnvironmentVariable(\"MaxConcurrentRequests\", (maxConcurrentRequests * Environment.ProcessorCount).ToString());\n            Environment.SetEnvironmentVariable(\"RequestQueueLimit\", requestQueueLimit.ToString());\n\n            Console.OutputEncoding = Encoding.UTF8;\n            Console.ForegroundColor = ConsoleColor.Gray;\n\n            Console.CancelKeyPress += OnCancelKey;\n\n            Console.WriteLine(\"=====================================================\");\n            Console.WriteLine(\" IW4MAdmin\");\n            Console.WriteLine(\" by RaidMax \");\n            Console.WriteLine($\" Version {Utilities.GetVersionAsString()}\");\n            Console.WriteLine(\"=====================================================\");\n\n            await LaunchAsync();\n        }\n\n\n\n\n\n\n\n        private static async void OnCancelKey(object sender, ConsoleCancelEventArgs e)\n        {\n            if (_serverManager is not null)\n            {\n                await _serverManager.Stop();\n            }\n\n            if (_applicationTask is not null)\n            {\n                await _applicationTask;\n            }\n        }\n\n\n\n\n\n        private static async Task LaunchAsync()\n        {\n            restart:\n            ITranslationLookup translationLookup = null;\n            var logger = BuildDefaultLogger<Program>(new ApplicationConfiguration());\n            Utilities.DefaultLogger = logger;\n            logger.LogInformation(\"Begin IW4MAdmin startup. Version is {Version}\", Version);\n\n    #if DEBUG\n            StrongReferencesLoader.Load();\n    #endif\n\n            try\n            {\n\n                ConfigurationMigration.MoveConfigFolder10518(null);\n                ConfigurationMigration.CheckDirectories();\n                ConfigurationMigration.RemoveObsoletePlugins20210322();\n\n                logger.LogDebug(\"Configuring services...\");\n\n                var configHandler = new BaseConfigurationHandler<ApplicationConfiguration>(\"IW4MAdminSettings\");\n                await configHandler.BuildAsync();\n                _serviceProvider = WebfrontCore.Program.InitializeServices(ConfigureServices,\n                    (configHandler.Configuration() ?? new ApplicationConfiguration()).WebfrontBindUrl);\n\n                _serverManager = (ApplicationManager)_serviceProvider.GetRequiredService<IManager>();\n                translationLookup = _serviceProvider.GetRequiredService<ITranslationLookup>();\n\n                await _serverManager.Init();\n\n                _applicationTask = RunApplicationTasksAsync(logger, _serverManager, _serviceProvider);\n\n                await _applicationTask;\n                logger.LogInformation(\"Shutdown completed successfully\");\n            }\n\n            catch (Exception e)\n            {\n                var failMessage = translationLookup == null\n                    ? \"Failed to initialize IW4MAdmin\"\n                    : translationLookup[\"MANAGER_INIT_FAIL\"];\n                var exitMessage = translationLookup == null\n                    ? \"Press enter to exit...\"\n                    : translationLookup[\"MANAGER_EXIT\"];\n\n                logger.LogCritical(e, \"Failed to initialize IW4MAdmin\");\n                Console.WriteLine(failMessage);\n\n                while (e.InnerException != null)\n                {\n                    e = e.InnerException;\n                }\n\n                if (e is ConfigurationException configException)\n                {\n                    Console.WriteLine(\"{{fileName}} contains an error.\"\n                        .FormatExt(Path.GetFileName(configException.ConfigurationFileName)));\n\n                    foreach (var error in configException.Errors)\n                    {\n                        Console.WriteLine(error);\n                    }\n                }\n\n                else\n                {\n                    Console.WriteLine(e.Message);\n                }\n\n                if (_serverManager is not null)\n                {\n                    await _serverManager?.Stop();\n                }\n\n                Console.WriteLine(exitMessage);\n                await Console.In.ReadAsync(new char[1], 0, 1);\n                return;\n            }\n\n            if (_serverManager.IsRestartRequested)\n            {\n                goto restart;\n            }\n        }\n\n\n\n\n\n        private static Task RunApplicationTasksAsync(ILogger logger, ApplicationManager applicationManager,\n            IServiceProvider serviceProvider)\n        {\n            var collectionService = serviceProvider.GetRequiredService<IServerDataCollector>();\n            var versionChecker = serviceProvider.GetRequiredService<IMasterCommunication>();\n            var masterCommunicator = serviceProvider.GetRequiredService<IMasterCommunication>();\n            var webfrontLifetime = serviceProvider.GetRequiredService<IHostApplicationLifetime>();\n            using var onWebfrontErrored = new ManualResetEventSlim();\n\n            var webfrontTask = _serverManager.GetApplicationSettings().Configuration().EnableWebFront\n                ? WebfrontCore.Program.GetWebHostTask(_serverManager.CancellationToken).ContinueWith(continuation =>\n                {\n                    if (!continuation.IsFaulted)\n                    {\n                        return;\n                    }\n\n                    logger.LogCritical(\"Unable to start webfront task. {Message}\",\n                        continuation.Exception?.InnerException?.Message);\n\n                    logger.LogDebug(continuation.Exception, \"Unable to start webfront task\");\n\n                    onWebfrontErrored.Set();\n\n                })\n                : Task.CompletedTask;\n\n            if (_serverManager.GetApplicationSettings().Configuration().EnableWebFront)\n            {\n                try\n                {\n                    onWebfrontErrored.Wait(webfrontLifetime.ApplicationStarted);\n                }\n                catch\n                {\n\n                }\n\n                if (onWebfrontErrored.IsSet)\n                {\n                    return Task.CompletedTask;\n                }\n            }\n\n\n\n            async void ReadInput() => await ReadConsoleInput(logger);\n\n            var inputThread = new Thread(ReadInput);\n            inputThread.Start();\n\n            var tasks = new[]\n            {\n                applicationManager.Start(),\n                versionChecker.CheckVersion(),\n                webfrontTask,\n                masterCommunicator.RunUploadStatus(_serverManager.CancellationToken),\n                collectionService.BeginCollectionAsync(cancellationToken: _serverManager.CancellationToken)\n            };\n\n            logger.LogDebug(\"Starting webfront and input tasks\");\n            return Task.WhenAll(tasks);\n        }\n\n\n\n\n\n        private static async Task ReadConsoleInput(ILogger logger)\n        {\n            if (Console.IsInputRedirected)\n            {\n                logger.LogInformation(\"Disabling console input as it has been redirected\");\n                return;\n            }\n\n            EFClient origin = null;\n\n            try\n            {\n                while (!_serverManager.CancellationToken.IsCancellationRequested)\n                {\n                    if (!_serverManager.IsInitialized)\n                    {\n                        await Task.Delay(1000);\n                        continue;\n                    }\n\n                    var lastCommand = await Console.In.ReadLineAsync();\n\n                    if (lastCommand == null)\n                    {\n                        continue;\n                    }\n\n                    if (!lastCommand.Any())\n                    {\n                        continue;\n                    }\n\n                    var gameEvent = new GameEvent\n                    {\n                        Type = GameEvent.EventType.Command,\n                        Data = lastCommand,\n                        Origin = origin ??= Utilities.IW4MAdminClient(_serverManager.Servers.FirstOrDefault()),\n                        Owner = _serverManager.Servers[0]\n                    };\n\n                    _serverManager.AddEvent(gameEvent);\n                    await gameEvent.WaitAsync(Utilities.DefaultCommandTimeout, _serverManager.CancellationToken);\n                    Console.Write('>');\n                }\n            }\n            catch (OperationCanceledException)\n            {\n            }\n        }\n\n        private static IServiceCollection HandlePluginRegistration(ApplicationConfiguration appConfig,\n            IServiceCollection serviceCollection,\n            IMasterApi masterApi)\n        {\n            var defaultLogger = BuildDefaultLogger<Program>(appConfig);\n            var pluginServiceProvider = new ServiceCollection()\n                .AddBaseLogger(appConfig)\n                .AddSingleton(appConfig)\n                .AddSingleton(masterApi)\n                .AddSingleton<IRemoteAssemblyHandler, RemoteAssemblyHandler>()\n                .AddSingleton<IPluginImporter, PluginImporter>()\n                .BuildServiceProvider();\n\n            var pluginImporter = pluginServiceProvider.GetRequiredService<IPluginImporter>();\n\n\n            serviceCollection.AddSingleton(masterApi);\n\n\n            foreach (var commandType in typeof(SharedLibraryCore.Commands.QuitCommand).Assembly.GetTypes()\n                .Concat(typeof(Program).Assembly.GetTypes().Where(type => type.Namespace?.StartsWith(\"IW4MAdmin.Application.Commands\") ?? false))\n                .Where(command => command.BaseType == typeof(Command)))\n            {\n                defaultLogger.LogDebug(\"Registered native command type {Name}\", commandType.Name);\n                serviceCollection.AddSingleton(typeof(IManagerCommand), commandType);\n            }\n\n\n            var (plugins, commands, configurations) = pluginImporter.DiscoverAssemblyPluginImplementations();\n            foreach (var pluginType in plugins)\n            {\n                var isV2 = pluginType.GetInterface(nameof(IPluginV2), false) != null;\n\n                defaultLogger.LogDebug(\"Registering plugin type {Name}\", pluginType.FullName);\n\n                serviceCollection.AddSingleton(!isV2 ? typeof(IPlugin) : typeof(IPluginV2), pluginType);\n\n                try\n                {\n                    var registrationMethod = pluginType.GetMethod(nameof(IPluginV2.RegisterDependencies));\n                    registrationMethod?.Invoke(null, new object[] { serviceCollection });\n                }\n                catch (Exception ex)\n                {\n                    defaultLogger.LogError(ex, \"Could not register plugin of type {Type}\", pluginType.Name);\n                }\n            }\n\n\n            foreach (var commandType in commands)\n            {\n                defaultLogger.LogDebug(\"Registered plugin command type {Name}\", commandType.FullName);\n                serviceCollection.AddSingleton(typeof(IManagerCommand), commandType);\n            }\n\n            foreach (var configurationType in configurations)\n            {\n                defaultLogger.LogDebug(\"Registered plugin config type {Name}\", configurationType.Name);\n                var configInstance = (IBaseConfiguration) Activator.CreateInstance(configurationType);\n                var handlerType = typeof(BaseConfigurationHandler<>).MakeGenericType(configurationType);\n                var handlerInstance = Activator.CreateInstance(handlerType, configInstance.Name());\n                var genericInterfaceType = typeof(IConfigurationHandler<>).MakeGenericType(configurationType);\n\n                serviceCollection.AddSingleton(genericInterfaceType, handlerInstance);\n            }\n\n            var scriptPlugins = pluginImporter.DiscoverScriptPlugins();\n\n            foreach (var scriptPlugin in scriptPlugins)\n            {\n                serviceCollection.AddSingleton(scriptPlugin.Item1, sp =>\n                    sp.GetRequiredService<IScriptPluginFactory>()\n                        .CreateScriptPlugin(scriptPlugin.Item1, scriptPlugin.Item2));\n            }\n\n\n            foreach (var assemblyType in typeof(Program).Assembly.GetTypes()\n                .Where(asmType => typeof(IRegisterEvent).IsAssignableFrom(asmType))\n                .Union(plugins.SelectMany(asm => asm.Assembly.GetTypes())\n                    .Distinct()\n                    .Where(asmType => typeof(IRegisterEvent).IsAssignableFrom(asmType))))\n            {\n                var instance = Activator.CreateInstance(assemblyType) as IRegisterEvent;\n                serviceCollection.AddSingleton(instance);\n            }\n\n            return serviceCollection;\n        }\n\n\n\n\n\n        private static void ConfigureServices(IServiceCollection serviceCollection)\n        {\n\n            AppContext.SetSwitch(\"Npgsql.EnableLegacyTimestampBehavior\", true);\n\n            serviceCollection.AddConfiguration<ApplicationConfiguration>(\"IW4MAdminSettings\")\n                .AddConfiguration<DefaultSettings>()\n                .AddConfiguration<CommandConfiguration>()\n                .AddConfiguration<StatsConfiguration>(\"StatsPluginSettings\");\n\n\n            var appConfigHandler = new BaseConfigurationHandler<ApplicationConfiguration>(\"IW4MAdminSettings\");\n            appConfigHandler.BuildAsync().GetAwaiter().GetResult();\n            var commandConfigHandler = new BaseConfigurationHandler<CommandConfiguration>(\"CommandConfiguration\");\n            commandConfigHandler.BuildAsync().GetAwaiter().GetResult();\n\n            if (appConfigHandler.Configuration()?.MasterUrl == new Uri(\"http:\n            {\n                appConfigHandler.Configuration().MasterUrl = new ApplicationConfiguration().MasterUrl;\n            }\n\n            var appConfig = appConfigHandler.Configuration();\n            var masterUri = Utilities.IsDevelopment\n                ? new Uri(\"http:\n                : appConfig?.MasterUrl ?? new ApplicationConfiguration().MasterUrl;\n            var httpClient = new HttpClient(new HttpClientHandler {AllowAutoRedirect = true})\n            {\n                BaseAddress = masterUri,\n                Timeout = TimeSpan.FromSeconds(15)\n            };\n            var masterRestClient = RestService.For<IMasterApi>(httpClient);\n            var translationLookup = Configure.Initialize(Utilities.DefaultLogger, masterRestClient, appConfig);\n\n            if (appConfig == null)\n            {\n                appConfig = (ApplicationConfiguration) new ApplicationConfiguration().Generate();\n                appConfigHandler.Set(appConfig);\n                appConfigHandler.Save().GetAwaiter().GetResult();\n            }\n\n\n            foreach (var (key, value) in appConfig.OverridePermissionLevelNames)\n            {\n                Utilities.PermissionLevelOverrides.TryAdd(key, value);\n            }\n\n\n            serviceCollection\n                .AddBaseLogger(appConfig)\n                .AddSingleton((IConfigurationHandler<ApplicationConfiguration>) appConfigHandler)\n                .AddSingleton<IConfigurationHandler<CommandConfiguration>>(commandConfigHandler)\n                .AddSingleton(serviceProvider =>\n                    serviceProvider.GetRequiredService<IConfigurationHandler<CommandConfiguration>>()\n                        .Configuration() ?? new CommandConfiguration())\n                .AddSingleton<IPluginImporter, PluginImporter>()\n                .AddSingleton<IMiddlewareActionHandler, MiddlewareActionHandler>()\n                .AddSingleton<IRConConnectionFactory, RConConnectionFactory>()\n                .AddSingleton<IGameServerInstanceFactory, GameServerInstanceFactory>()\n                .AddSingleton<IConfigurationHandlerFactory, ConfigurationHandlerFactory>()\n                .AddSingleton<IParserRegexFactory, ParserRegexFactory>()\n                .AddSingleton<IDatabaseContextFactory, DatabaseContextFactory>()\n                .AddSingleton<IGameLogReaderFactory, GameLogReaderFactory>()\n                .AddSingleton<IScriptCommandFactory, ScriptCommandFactory>()\n                .AddSingleton<IAuditInformationRepository, AuditInformationRepository>()\n                .AddSingleton<IEntityService<EFClient>, ClientService>()\n#pragma warning disable CS0618\n                .AddSingleton<IMetaService, MetaService>()\n#pragma warning restore CS0618\n                .AddSingleton<IMetaServiceV2, MetaServiceV2>()\n                .AddSingleton<ClientService>()\n                .AddSingleton<PenaltyService>()\n                .AddSingleton<ChangeHistoryService>()\n                .AddSingleton<IMetaRegistration, MetaRegistration>()\n                .AddSingleton<IScriptPluginServiceResolver, ScriptPluginServiceResolver>()\n                .AddSingleton<IResourceQueryHelper<ClientPaginationRequest, ReceivedPenaltyResponse>,\n                    ReceivedPenaltyResourceQueryHelper>()\n                .AddSingleton<IResourceQueryHelper<ClientPaginationRequest, AdministeredPenaltyResponse>,\n                    AdministeredPenaltyResourceQueryHelper>()\n                .AddSingleton<IResourceQueryHelper<ClientPaginationRequest, UpdatedAliasResponse>,\n                    UpdatedAliasResourceQueryHelper>()\n                .AddSingleton<IResourceQueryHelper<ChatSearchQuery, MessageResponse>, ChatResourceQueryHelper>()\n                .AddSingleton<IResourceQueryHelper<ClientPaginationRequest, ConnectionHistoryResponse>, ConnectionsResourceQueryHelper>()\n                .AddSingleton<IResourceQueryHelper<ClientPaginationRequest, PermissionLevelChangedResponse>, PermissionLevelChangedResourceQueryHelper>()\n                .AddSingleton<IResourceQueryHelper<ClientResourceRequest, ClientResourceResponse>, ClientResourceQueryHelper>()\n                .AddTransient<IParserPatternMatcher, ParserPatternMatcher>()\n                .AddSingleton<IRemoteAssemblyHandler, RemoteAssemblyHandler>()\n                .AddSingleton<IMasterCommunication, MasterCommunication>()\n                .AddSingleton<IManager, ApplicationManager>()\n#pragma warning disable CS0612\n                .AddSingleton<SharedLibraryCore.Interfaces.ILogger, Logger>()\n#pragma warning restore CS0612\n                .AddSingleton<IClientNoticeMessageFormatter, ClientNoticeMessageFormatter>()\n                .AddSingleton<IClientStatisticCalculator, HitCalculator>()\n                .AddSingleton<IServerDistributionCalculator, ServerDistributionCalculator>()\n                .AddSingleton<IWeaponNameParser, WeaponNameParser>()\n                .AddSingleton<IHitInfoBuilder, HitInfoBuilder>()\n                .AddSingleton(typeof(ILookupCache<>), typeof(LookupCache<>))\n                .AddSingleton(typeof(IDataValueCache<,>), typeof(DataValueCache<,>))\n                .AddSingleton<IServerDataViewer, ServerDataViewer>()\n                .AddSingleton<IServerDataCollector, ServerDataCollector>()\n                .AddSingleton<IGeoLocationService>(new GeoLocationService(Path.Join(\".\", \"Resources\", \"GeoLite2-Country.mmdb\")))\n                .AddSingleton<IAlertManager, AlertManager>()\n#pragma warning disable CS0618\n                .AddTransient<IScriptPluginTimerHelper, ScriptPluginTimerHelper>()\n#pragma warning restore CS0618\n                .AddSingleton<IInteractionRegistration, InteractionRegistration>()\n                .AddSingleton<IRemoteCommandService, RemoteCommandService>()\n                .AddSingleton(new ConfigurationWatcher())\n                .AddSingleton(typeof(IConfigurationHandlerV2<>), typeof(BaseConfigurationHandlerV2<>))\n                .AddSingleton<IScriptPluginFactory, ScriptPluginFactory>()\n                .AddSingleton<IGameScriptEventFactory, GameScriptEventFactory>()\n                .AddSingleton(translationLookup)\n                .AddDatabaseContextOptions(appConfig);\n\n            serviceCollection.AddSingleton<ICoreEventHandler, CoreEventHandler>();\n            serviceCollection.AddSource();\n            HandlePluginRegistration(appConfig, serviceCollection, masterRestClient);\n        }\n\n        private static ILogger BuildDefaultLogger<T>(ApplicationConfiguration appConfig)\n        {\n            var collection = new ServiceCollection()\n                .AddBaseLogger(appConfig)\n                .BuildServiceProvider();\n\n            return collection.GetRequiredService<ILogger<T>>();\n        }\n    }\n}\n\n'IW4M-Admin/Tests/ApplicationTests/VcrTests.cs'\n:﻿using ApplicationTests.Fixtures;\nusing IW4MAdmin;\nusing IW4MAdmin.Application;\nusing IW4MAdmin.Application.Misc;\nusing Microsoft.Extensions.DependencyInjection;\nusing NUnit.Framework;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace ApplicationTests\n{\n    [TestFixture]\n    public class VcrTests\n    {\n        private IServiceProvider serviceProvider;\n\n        [SetUp]\n        public void Setup()\n        {\n            serviceProvider = new ServiceCollection().BuildBase()\n                .BuildServiceProvider();\n        }\n\n        [Test]\n        [TestCase(\"replay\")]\n        public async Task ReplayEvents(string source)\n        {\n            var sourceData = await serviceProvider\n                .GetRequiredService<DataFileLoader>()\n                .Load<EventLog>(source);\n\n            var server = serviceProvider.GetRequiredService<IW4MServer>();\n\n            foreach (var gameEvent in sourceData.Values.First())\n            {\n                await server.ExecuteEvent(gameEvent);\n            }\n        }\n    }\n}\n",
        "gt": [
            "'IW4M-Admin/Application/Factories/ConfigurationHandlerFactory.cs'",
            "'IW4M-Admin/Application/Main.cs'",
            "'IW4M-Admin/Tests/ApplicationTests/VcrTests.cs'"
        ]
    },
    {
        "files": [
            "'GTFO_VR_Plugin/GTFO_VR/Core/GTFO_VR_Plugin.cs'",
            "'GTFO_VR_Plugin/GTFO_VR/Core/UI/RadialMenu.cs'",
            "'GTFO_VR_Plugin/GTFO_VR/Injections/Gameplay/InjectSemanticInteractionTweaks.cs'"
        ],
        "content": "'GTFO_VR_Plugin/GTFO_VR/Core/GTFO_VR_Plugin.cs'\n:﻿using BepInEx;\nusing BepInEx.IL2CPP;\nusing GTFO_VR.Core.PlayerBehaviours;\nusing GTFO_VR.Core.UI;\nusing GTFO_VR.Core.UI.Terminal.Pointer;\nusing GTFO_VR.Core.UI.Terminal;\nusing GTFO_VR.Core.VR_Input;\nusing GTFO_VR.Detours;\nusing GTFO_VR.UI;\nusing HarmonyLib;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing GTFO_VR.Core.PlayerBehaviours.BodyHaptics;\nusing GTFO_VR.Core.PlayerBehaviours.BodyHaptics.Bhaptics;\nusing GTFO_VR.Core.PlayerBehaviours.BodyHaptics.Shockwave;\nusing BepInEx.Unity.IL2CPP;\nusing Il2CppInterop.Runtime.Injection;\nusing GTFO_VR.Util;\n\nnamespace GTFO_VR.Core\n{\n\n\n\n    [BepInPlugin(GUID, MODNAME, VERSION)]\n    public class GTFO_VR_Plugin : BasePlugin\n    {\n        public const string\n            MODNAME = \"GTFO_VR_Plugin\",\n            AUTHOR = \"Spartan\",\n            GUID = \"com.\" + AUTHOR + \".\" + MODNAME,\n            VERSION = \"1.3.4.2\";\n\n        public override void Load()\n        {\n            Core.Log.Setup(BepInEx.Logging.Logger.CreateLogSource(MODNAME));\n            Core.Log.Info($\"Loading VR plugin v.{VERSION}\");\n\n            VRConfig.SetupConfig(Config);\n\n            if (SteamVRRunningCheck())\n            {\n                InjectVR();\n            }\n            else\n            {\n                Log.LogWarning(\"VR launch aborted, VR is disabled or SteamVR is off!\");\n            }\n        }\n\n        private void InjectVR()\n        {\n            SetupIL2CPPClassInjections();\n            TerminalInputDetours.HookAll();\n            BioscannerDetours.HookAll();\n            HammerAttackCheckDetour.HookAll();\n            InjectPlayerHudEventsDetour.HookAll();\n\n            Harmony harmony = new Harmony(\"com.github.dsprtn.gtfovr\");\n            harmony.PatchAll();\n        }\n\n        private void SetupIL2CPPClassInjections()\n        {\n            ClassInjector.RegisterTypeInIl2Cpp<VRSystems>();\n            ClassInjector.RegisterTypeInIl2Cpp<VRAssets>();\n            ClassInjector.RegisterTypeInIl2Cpp<VRKeyboard>();\n            ClassInjector.RegisterTypeInIl2Cpp<VR_UI_Overlay>();\n            ClassInjector.RegisterTypeInIl2Cpp<VRWorldSpaceUI>();\n            ClassInjector.RegisterTypeInIl2Cpp<Controllers>();\n            ClassInjector.RegisterTypeInIl2Cpp<HMD>();\n            ClassInjector.RegisterTypeInIl2Cpp<VRRendering>();\n            ClassInjector.RegisterTypeInIl2Cpp<CollisionFade>();\n            ClassInjector.RegisterTypeInIl2Cpp<LaserPointer>();\n            ClassInjector.RegisterTypeInIl2Cpp<PlayerOrigin>();\n            ClassInjector.RegisterTypeInIl2Cpp<VRPlayer>();\n            ClassInjector.RegisterTypeInIl2Cpp<Haptics>();\n            ClassInjector.RegisterTypeInIl2Cpp<BodyHapticsIntegrator>();\n            ClassInjector.RegisterTypeInIl2Cpp<ElevatorSequenceIntegrator>();\n            ClassInjector.RegisterTypeInIl2Cpp<Snapturn>();\n            ClassInjector.RegisterTypeInIl2Cpp<Watch>();\n            ClassInjector.RegisterTypeInIl2Cpp<VRMeleeWeapon>();\n            ClassInjector.RegisterTypeInIl2Cpp<DividedBarShaderController>();\n            ClassInjector.RegisterTypeInIl2Cpp<MovementVignette>();\n            ClassInjector.RegisterTypeInIl2Cpp<RadialMenu>();\n            ClassInjector.RegisterTypeInIl2Cpp<RadialItem>();\n            ClassInjector.RegisterTypeInIl2Cpp<WeaponRadialMenu>();\n            ClassInjector.RegisterTypeInIl2Cpp<WeaponAmmoHologram>();\n\n            ClassInjector.RegisterTypeInIl2Cpp<MonoPointerEvent>();\n            ClassInjector.RegisterTypeInIl2Cpp<RoundedCubeBackground>();\n            ClassInjector.RegisterTypeInIl2Cpp<PhysicalButton>();\n            ClassInjector.RegisterTypeInIl2Cpp<TerminalKeyboardCanvas>();\n            ClassInjector.RegisterTypeInIl2Cpp<TerminalPointer>();\n            ClassInjector.RegisterTypeInIl2Cpp<TerminalKeyboardInterface>();\n            ClassInjector.RegisterTypeInIl2Cpp<TerminalReader>();\n\n            ClassInjector.RegisterTypeInIl2Cpp<GTFODebugDraw3D>();\n        }\n\n        private bool SteamVRRunningCheck()\n        {\n            if (!VRConfig.configCheckSteamVR.Value)\n            {\n                return true;\n            }\n            List<Process> possibleVRProcesses = new List<Process>();\n\n            possibleVRProcesses.AddRange(Process.GetProcessesByName(\"vrserver\"));\n            possibleVRProcesses.AddRange(Process.GetProcessesByName(\"vrcompositor\"));\n\n            Core.Log.Debug(\"VR processes found - \" + possibleVRProcesses.Count);\n            foreach (Process p in possibleVRProcesses)\n            {\n                Core.Log.Debug(p.ToString());\n            }\n            return possibleVRProcesses.Count > 0;\n        }\n    }\n}\n'GTFO_VR_Plugin/GTFO_VR/Core/UI/RadialMenu.cs'\n:﻿using GTFO_VR.Core.VR_Input;\nusing SteamVR_Standalone_IL2CPP.Util;\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\nnamespace GTFO_VR.Core.UI\n{\n    public class RadialMenu : MonoBehaviour\n    {\n        public RadialMenu(IntPtr value)\n: base(value) { }\n\n        private UnityEngine.Canvas m_canvas;\n\n        private InteractionHand targetHand;\n        private GameObject originOverride;\n\n        private List<RadialItem> radialItems;\n        private RadialItem closest;\n\n        private float m_maxDistance = 0.125f;\n        private float m_itemDistance = 135f;\n        private float m_outsideofMenuDistance = 0.3f;\n\n        private float m_scale = 1.25f;\n        private float m_lastOpenTime;\n        private RadialItem m_lastHovered;\n\n        public event Action<float> OnMenuClosedWithoutItem;\n\n        public void Setup(InteractionHand hand, GameObject originOverride = null)\n        {\n            this.originOverride = originOverride;\n            targetHand = hand;\n            m_canvas = gameObject.AddComponent<UnityEngine.Canvas>();\n            m_canvas.renderMode = RenderMode.WorldSpace;\n            m_canvas.enabled = false;\n            RectTransform canvasTransform = m_canvas.GetComponent<RectTransform>();\n            MelonCoroutines.Start(SetSize(canvasTransform, new Vector2(80, 80) * m_scale));\n            canvasTransform.localScale = Vector3.one * .001f;\n            radialItems = new List<RadialItem>();\n        }\n\n        private IEnumerator SetSize(RectTransform rect, Vector2 size)\n        {\n            yield return new WaitForSeconds(0.1f);\n            rect.sizeDelta = size;\n        }\n\n        private void Update()\n        {\n            if (m_canvas == null)\n            {\n                return;\n            }\n            if (m_canvas.enabled)\n            {\n                SelectClosestRadialItem();\n                CheckForQuickSelectOutsideMenu();\n            }\n        }\n\n        private void CheckForQuickSelectOutsideMenu()\n        {\n            if (m_lastHovered && m_lastHovered.Active)\n            {\n                GameObject hand = GetHand();\n                float distance = Vector3.Distance(transform.position, hand.transform.position);\n                if (distance > m_outsideofMenuDistance)\n                {\n                    closest = m_lastHovered;\n                    Hide();\n                }\n            }\n        }\n\n        public void AddRadialItem(string text, Action OnExecuted, out RadialItem newItem)\n        {\n            RadialItem item = new GameObject(\"RadialItem\").AddComponent<RadialItem>();\n            item.transform.SetParent(transform);\n            item.transform.SetPositionAndRotation(Vector3.zero, Quaternion.identity);\n            item.transform.localScale = Vector3.one;\n            item.scale = m_scale;\n            item.Setup(OnExecuted, VRAssets.RadialBG);\n            item.SetText(text);\n            newItem = item;\n            radialItems.Add(item);\n        }\n\n        private GameObject GetHand()\n        {\n            GameObject hand = Controllers.GetInteractionHandGO(targetHand);\n            if (originOverride != null)\n            {\n                hand = originOverride;\n            }\n            return hand;\n        }\n\n        private void SelectClosestRadialItem()\n        {\n            RadialItem lastClosest = closest;\n            float closestDistance = 9999f;\n\n            GameObject hand = GetHand();\n\n            if (closest != null && Vector3.Distance(closest.transform.position, hand.transform.position) > m_maxDistance * m_scale)\n            {\n                closest = null;\n            }\n\n            foreach (RadialItem item in radialItems)\n            {\n                if (item != closest)\n                {\n                    item.Deselect();\n                }\n            }\n\n            foreach (RadialItem item in radialItems)\n            {\n                if (!item.Active)\n                {\n                    continue;\n                }\n                float distance = Vector3.Distance(item.transform.position, hand.transform.position);\n                if (distance < closestDistance)\n                {\n                    closestDistance = distance;\n                    closest = item;\n                }\n            }\n\n            if (closest != null && closest != lastClosest)\n            {\n                if (closestDistance < m_maxDistance * m_scale)\n                {\n                    CellSound.Post(AK.EVENTS.GAME_MENU_SELECT_GEAR, closest.transform.position);\n                    SteamVR_InputHandler.TriggerHapticPulse(0.02f, 40f, 0.25f, Controllers.GetDeviceFromInteractionHandType(targetHand));\n                    closest.Select();\n                    m_lastHovered = closest;\n                }\n                else\n                {\n                    closest = null;\n                }\n            }\n        }\n\n        public void Show()\n        {\n            OrientMenu();\n            OrientAllItems();\n            m_canvas.enabled = true;\n            foreach (RadialItem item in radialItems)\n            {\n                item.Show();\n            }\n            m_lastOpenTime = Time.time;\n        }\n\n        private void OrientMenu()\n        {\n            if (originOverride != null)\n            {\n                transform.position = originOverride.transform.position;\n            }\n            else\n            {\n                transform.position = Controllers.GetInteractionHandGO(targetHand).transform.position;\n            }\n\n            transform.rotation = Quaternion.LookRotation(transform.position -HMD.GetWorldPosition());\n        }\n\n        private void OrientAllItems()\n        {\n            int itemsAmount = radialItems.Count;\n            if (itemsAmount == 0)\n            {\n                return;\n            }\n            float currAngle = 0f;\n            float angleStep = 360 / itemsAmount;\n            foreach (RadialItem item in radialItems)\n            {\n                Vector3 offset = new Vector3(0, m_itemDistance, 0f) * m_scale;\n                offset = Quaternion.Euler(0, 0, -currAngle) * offset;\n                item.transform.localPosition = offset;\n                currAngle += angleStep;\n            }\n        }\n\n        public void ToggleAllInfoText(bool toggle)\n        {\n            foreach(RadialItem item in radialItems)\n            {\n                item.ToggleInfoText(toggle);\n            }\n        }\n\n        public void Hide()\n        {\n            if (!m_canvas.enabled)\n            {\n                return;\n            }\n            m_canvas.enabled = false;\n            if (closest != null)\n            {\n                closest.Execute();\n                closest = null;\n            }\n            else\n            {\n                Log.Debug($\"Radial menu closed after {Time.time - m_lastOpenTime} seconds...\");\n                OnMenuClosedWithoutItem?.Invoke(Time.time - m_lastOpenTime);\n            }\n\n            foreach (RadialItem item in radialItems)\n            {\n                item.Hide();\n            }\n        }\n    }\n}\n'GTFO_VR_Plugin/GTFO_VR/Injections/Gameplay/InjectSemanticInteractionTweaks.cs'\n:﻿using Gear;\nusing GTFO_VR.Core;\nusing GTFO_VR.Core.VR_Input;\nusing HarmonyLib;\nusing Player;\nusing UnityEngine;\n\nnamespace GTFO_VR.Injections.Gameplay\n{\n\n\n\n\n\n    [HarmonyPatch(typeof(Interact_Timed), nameof(Interact_Timed.EvaluateTimedInteraction))]\n    internal class InjectInteractionFromPos\n    {\n        private static void Prefix(Interact_Timed __instance)\n        {\n            __instance.m_triggerStartAgentWorldPos = HMD.GetVRInteractionFromPosition();\n        }\n    }\n\n    [HarmonyPatch(typeof(GuiManager), nameof(GuiManager.IsOnScreen))]\n    internal class InjectDisableOnScreenCheck\n    {\n        private static void Postfix(ref bool __result)\n        {\n            __result = true;\n        }\n    }\n\n    [HarmonyPatch(typeof(PlayerInteraction), nameof(PlayerInteraction.UpdateWorldInteractions))]\n    internal class InjectWorldInteractionsTweak\n    {\n        private static Vector3 cachedCamPos;\n\n        private static void Prefix(PlayerInteraction __instance)\n        {\n            if (!VRConfig.configUseControllers.Value)\n            {\n                return;\n            }\n            cachedCamPos = __instance.m_owner.m_camPos;\n            __instance.m_owner.m_camPos = HMD.GetVRInteractionFromPosition();\n        }\n\n        private static void Postfix(PlayerInteraction __instance)\n        {\n            if (!VRConfig.configUseControllers.Value)\n            {\n                return;\n            }\n            __instance.m_owner.m_camPos = cachedCamPos;\n        }\n    }\n\n    [HarmonyPatch(typeof(SentryGunFirstPerson), nameof(SentryGunFirstPerson.CheckCanPlace))]\n    internal class InjectSentryGunPlacementFix\n    {\n        private static void Prefix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRControllerForward = true;\n            InjectFPSCameraPositionTweakForInteraction.useControllerPosition = true;\n        }\n\n        private static void Postfix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRControllerForward = false;\n            InjectFPSCameraPositionTweakForInteraction.useControllerPosition = false;\n        }\n    }\n\n    [HarmonyPatch(typeof(MineDeployerFirstPerson), nameof(MineDeployerFirstPerson.CheckCanPlace))]\n    internal class InjectMineDeployerPlacementFix\n    {\n        private static void Prefix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRControllerForward = true;\n            InjectFPSCameraPositionTweakForInteraction.useControllerPosition = true;\n        }\n\n        private static void Postfix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRControllerForward = false;\n            InjectFPSCameraPositionTweakForInteraction.useControllerPosition = false;\n        }\n    }\n\n    [HarmonyPatch(typeof(PlayerLocomotion), nameof(PlayerLocomotion.FixedUpdate))]\n    internal class InjectFlashlightSyncAimTweak\n    {\n        private static void Prefix(PlayerLocomotion __instance)\n        {\n            if(!__instance.LocallyOwned)\n            {\n                return;\n            }\n            InjectFPSCameraForwardTweakForInteraction.useVRInteractionForward = true;\n            InjectFPSCameraPositionTweakForInteraction.useInteractionControllersPosition = true;\n        }\n\n        private static void Postfix(PlayerLocomotion __instance)\n        {\n            if (!__instance.LocallyOwned)\n            {\n                return;\n            }\n            InjectFPSCameraForwardTweakForInteraction.useVRInteractionForward = false;\n            InjectFPSCameraPositionTweakForInteraction.useInteractionControllersPosition = false;\n        }\n    }\n\n    [HarmonyPatch(typeof(ResourcePackFirstPerson), nameof(ResourcePackFirstPerson.UpdateInteraction))]\n    internal class InjectResourcePackInteractionTweak\n    {\n        private static void Prefix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRInteractionForward = true;\n            InjectFPSCameraPositionTweakForInteraction.useInteractionControllersPosition = true;\n        }\n\n        private static void Postfix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRInteractionForward = false;\n            InjectFPSCameraPositionTweakForInteraction.useInteractionControllersPosition = false;\n        }\n    }\n\n    [HarmonyPatch(typeof(LockMelterFirstPerson), nameof(LockMelterFirstPerson.UpdateApplyActionInput))]\n    internal class InjectLockMelterInteractionTweak\n    {\n        private static void Prefix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRInteractionForward = true;\n            InjectFPSCameraPositionTweakForInteraction.useInteractionControllersPosition = true;\n        }\n\n        private static void Postfix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRInteractionForward = false;\n            InjectFPSCameraPositionTweakForInteraction.useInteractionControllersPosition = false;\n        }\n    }\n\n    [HarmonyPatch(typeof(CarryItemEquippableFirstPerson), nameof(CarryItemEquippableFirstPerson.UpdateInsertOrDropItem))]\n    internal class InjectCarryItemInteractionTweak\n    {\n        private static void Prefix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRInteractionForward = true;\n            InjectFPSCameraPositionTweakForInteraction.useInteractionControllersPosition = true;\n        }\n\n        private static void Postfix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRInteractionForward = false;\n            InjectFPSCameraPositionTweakForInteraction.useInteractionControllersPosition = false;\n        }\n    }\n\n    [HarmonyPatch(typeof(PUI_CommunicationMenu), nameof(PUI_CommunicationMenu.UpdateCmdTripMine))]\n    internal class InjectCommsMinerPlacementTweak\n    {\n        private static void Prefix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRControllerForward = true;\n            InjectFPSCameraPositionTweakForInteraction.useControllerPosition = true;\n        }\n\n        private static void Postfix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRControllerForward = false;\n            InjectFPSCameraPositionTweakForInteraction.useControllerPosition = false;\n        }\n    }\n\n    [HarmonyPatch(typeof(PUI_CommunicationMenu), nameof(PUI_CommunicationMenu.UpdateCmdSentryGun))]\n    internal class InjectCommsSentryPlacementTweak\n    {\n        private static void Prefix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRControllerForward = true;\n            InjectFPSCameraPositionTweakForInteraction.useControllerPosition = true;\n        }\n\n        private static void Postfix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRControllerForward = false;\n            InjectFPSCameraPositionTweakForInteraction.useControllerPosition = false;\n        }\n    }\n\n\n    [HarmonyPatch(typeof(PUI_CommunicationMenu), nameof(PUI_CommunicationMenu.UpdateButtonsForNode))]\n    internal class InjectCommsFinalPlacementTweak\n    {\n        private static void Prefix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRControllerForward = true;\n            InjectFPSCameraPositionTweakForInteraction.useControllerPosition = true;\n        }\n\n        private static void Postfix()\n        {\n            InjectFPSCameraForwardTweakForInteraction.useVRControllerForward = false;\n            InjectFPSCameraPositionTweakForInteraction.useControllerPosition = false;\n        }\n    }\n\n    [HarmonyPatch(typeof(FPSCamera), nameof(FPSCamera.Forward))]\n    [HarmonyPatch(MethodType.Getter)]\n    internal class InjectFPSCameraForwardTweakForInteraction\n    {\n        public static bool useVRInteractionForward = false;\n        public static bool useVRControllerForward = false;\n\n        private static void Postfix(FPSCamera __instance, ref Vector3 __result)\n        {\n            if(!VRConfig.configUseControllers.Value)\n            {\n                return;\n            }\n\n            if (useVRInteractionForward)\n            {\n                __result = HMD.GetVRInteractionLookDir();\n            }\n\n            if (useVRControllerForward)\n            {\n                __result = Controllers.GetAimForward();\n            }\n        }\n    }\n\n    [HarmonyPatch(typeof(FPSCamera), nameof(FPSCamera.Position))]\n    [HarmonyPatch(MethodType.Getter)]\n    internal class InjectFPSCameraPositionTweakForInteraction\n    {\n        public static bool useInteractionControllersPosition = false;\n        public static bool useControllerPosition = false;\n\n        private static void Postfix(FPSCamera __instance, ref Vector3 __result)\n        {\n            if (!VRConfig.configUseControllers.Value)\n            {\n                return;\n            }\n            if (useInteractionControllersPosition)\n            {\n                __result = HMD.GetVRInteractionFromPosition();\n            }\n            if (useControllerPosition)\n            {\n                __result = Controllers.GetAimForward();\n            }\n        }\n    }\n}",
        "gt": [
            "'GTFO_VR_Plugin/GTFO_VR/Core/UI/RadialMenu.cs'",
            "'GTFO_VR_Plugin/GTFO_VR/Core/GTFO_VR_Plugin.cs'",
            "'GTFO_VR_Plugin/GTFO_VR/Injections/Gameplay/InjectSemanticInteractionTweaks.cs'"
        ]
    },
    {
        "files": [
            "'event_horizon/Starship/Assets/Scripts/Installers/ExplorationSceneInstaller.cs'",
            "'event_horizon/Starship/Assets/script/GUI/ViewModel/Constructor/ComponentInfoViewModel.cs'",
            "'event_horizon/Starship/Assets/script/GUI/ViewModel/Quests/ActionsPanel.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/Combat/ShipStatsPanel.cs'",
            "'event_horizon/Starship/Assets/Scripts/Domain/Quests/Requirements/CharacterRelationsRequirement.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/Constructor/Commands.cs'"
        ],
        "content": "'event_horizon/Starship/Assets/Scripts/Installers/ExplorationSceneInstaller.cs'\n:﻿using Combat;\nusing Combat.Ai;\nusing Combat.Collision.Manager;\nusing Combat.Component.Triggers;\nusing Combat.Factory;\nusing Combat.Manager;\nusing Combat.Scene;\nusing Combat.Services;\nusing Game.Exploration;\nusing Gui.Combat;\nusing Services.ObjectPool;\nusing UnityEngine;\nusing Zenject;\n\nnamespace Installers\n{\n    public class ExplorationSceneInstaller : MonoInstaller<ExplorationSceneInstaller>\n    {\n        [SerializeField] private ShipStatsPanel _playerStatsPanel;\n        [SerializeField] private ShipStatsPanel _enemyStatsPanel;\n        [SerializeField] private ShipControlsPanel _shipControlsPanel;\n        [SerializeField] private RadarPanel _radarPanel;\n        [SerializeField] private Settings _settings;\n        [SerializeField] private TrailRendererPool _trailRendererPool;\n\n        [Inject] private readonly GameStateMachine.IStateMachine _stateMachine;\n\n        public override void InstallBindings()\n        {\n            Container.BindAllInterfacesAndSelf<ExplorationData>().To<ExplorationData>().AsSingle().NonLazy();\n            Container.BindAllInterfacesAndSelf<ExplorationSceneManager>().To<ExplorationSceneManager>().AsSingle().NonLazy();\n            Container.BindAllInterfaces<ExplorationViewRect>().To<ExplorationViewRect>().AsTransient();\n            Container.BindAllInterfaces<Scene>().To<Scene>().AsSingle().WithArguments(new SceneSettings { AreaWidth = 1000, AreaHeight = 1000, PlayerAlwaysInCenter = true }).NonLazy();\n            Container.BindAllInterfaces<CollisionManager>().To<CollisionManager>().AsSingle();\n            Container.BindAllInterfaces<AiManager>().To<AiManager>().AsSingle().NonLazy();\n            Container.Bind<ShipStatsPanel>().FromInstance(_playerStatsPanel).When(context => context.MemberName.Contains(\"player\"));\n            Container.Bind<ShipStatsPanel>().FromInstance(_enemyStatsPanel).When(context => context.MemberName.Contains(\"enemy\"));\n            Container.Bind<ShipControlsPanel>().FromInstance(_shipControlsPanel);\n            Container.Bind<RadarPanel>().FromInstance(_radarPanel);\n            Container.Bind<Settings>().FromInstance(_settings);\n            Container.Bind<WeaponFactory>().AsSingle();\n            Container.Bind<ShipFactory>().AsSingle().WithArguments(new ShipFactory.Settings { Shadows = true, StaticWrecks = true });\n            Container.Bind<SpaceObjectFactory>().AsSingle();\n            Container.Bind<DeviceFactory>().AsSingle();\n            Container.Bind<DroneBayFactory>().AsSingle();\n            Container.Bind<SatelliteFactory>().AsSingle();\n            Container.Bind<EffectFactory>().AsSingle();\n            Container.BindAllInterfacesAndSelf<IObjectPool>().To<GameObjectPool>().FromGameObject().AsSingle();\n            Container.Bind<TrailRendererPool>().FromInstance(_trailRendererPool);\n            Container.Bind<GameObjectFactory>();\n            Container.BindAllInterfaces<Keyboard>().To<Keyboard>().AsSingle();\n        }\n    }\n}\n\n'event_horizon/Starship/Assets/script/GUI/ViewModel/Constructor/ComponentInfoViewModel.cs'\n:using UnityEngine;\nusing UnityEngine.UI;\nusing Constructor;\nusing System.Linq;\nusing Constructor.Model;\nusing DataModel.Technology;\nusing Economy;\nusing GameDatabase.Enums;\nusing GameServices.Database;\nusing GameServices.Gui;\nusing GameServices.Player;\nusing GameServices.Research;\nusing Gui.Constructor;\nusing Services.Localization;\nusing Services.Reources;\nusing Zenject;\n\nnamespace ViewModel\n{\n\tpublic class ComponentInfoViewModel : MonoBehaviour\n\t{\n\t\tpublic enum Status\n\t\t{\n\t\t\tOk,\n\t\t\tAlreadyInstalled,\n\t\t\tNotSuitable,\n\t\t};\n\n\t    [InjectOptional] private readonly PlayerResources _playerResources;\n\t    [InjectOptional] private readonly Research _research;\n\t    [InjectOptional] private readonly ITechnologies _technologies;\n\t    [Inject] private readonly GuiHelper _guiHelper;\n\t    [Inject] private readonly ILocalization _localization;\n\t    [Inject] private readonly IResourceLocator _resourceLocator;\n\n        [SerializeField]\n        private ConstructorViewModel.CommandEvent _onCommandExecutedEvent = new ConstructorViewModel.CommandEvent();\n\n        public ComponentViewModel ComponentViewModel;\n\t\tpublic DragAndDropComponent ComponentPanel;\n\t\tpublic ShipLayoutViewModel ShipLayout;\n\t\tpublic ShipLayoutViewModel LeftPlatformLayout;\n\t\tpublic ShipLayoutViewModel RightPlatformLayout;\n\t\tpublic ConstructorViewModel ConstructorViewModel;\n\t\tpublic GameObject InstallPanel;\n\t\tpublic GameObject InstallLabel;\n\t\tpublic GameObject AlreadyInstalledLabel;\n\t\tpublic GameObject NotSuitableLabel;\n\t\tpublic Button DeleteButton;\n\t\tpublic Button UnlockButton;\n        public Button UnlockAllButton;\n        public ControlsPanel Controls;\n\t\tpublic GameObject[] ActiveOnlyObjects;\n\n\t\tpublic Text SizeText;\n\t\tpublic Image RequiredCellIcon;\n\t\tpublic Text RequiredCellText;\n\t\tpublic Color[] ColorList;\n\n\t\tpublic void OnKeyBindingChanged()\n\t\t{\n\t\t    if (_componentId >= 0 && _activeLayout != null)\n\t\t    {\n                var component = _activeLayout.Ship.GetComponent(_componentId);\n                component.KeyBinding = Controls.KeyBinding;\n                component.Behaviour = Controls.ComponentMode;\n            }\n\t\t}\n\n\t\tpublic void OnComponentPositionChanged(Vector2 position)\n\t\t{\n\t\t\tShipLayout.PreviewComponent(position, _component);\n\t\t\tLeftPlatformLayout.PreviewComponent(position, _component);\n\t\t\tRightPlatformLayout.PreviewComponent(position, _component);\n\t\t}\n\n\t\tpublic void OnComponentReleased(Vector2 position)\n\t\t{\n            if (InstallComponentCommand.TryExecuteCommand(ShipLayout, position, _component, Controls.KeyBinding, Controls.ComponentMode, _onCommandExecutedEvent))\n                return;\n            if (InstallComponentCommand.TryExecuteCommand(LeftPlatformLayout, position, _component, Controls.KeyBinding, Controls.ComponentMode, _onCommandExecutedEvent))\n                return;\n            if (InstallComponentCommand.TryExecuteCommand(RightPlatformLayout, position, _component, Controls.KeyBinding, Controls.ComponentMode, _onCommandExecutedEvent))\n                return;\n\t\t}\n\n\t\tpublic void Clear()\n\t\t{\n\t\t\tComponentViewModel.Clear();\n\t\t\tComponentPanel.Interactable = false;\n\t\t\t_componentId = -1;\n\t\t\t_activeLayout = null;\n\t\t\tControls.Clear();\n\n\t\t\tforeach (var item in ActiveOnlyObjects)\n\t\t\t\titem.SetActive(false);\n        }\n\n\t\tpublic void DeleteButtonPressed()\n\t\t{\n\t\t\tif (_activeLayout == null)\n\t\t\t\tthrow new System.InvalidOperationException(\"layout not selected\");\n\n            var command = new RemoveComponentCommand(_activeLayout, _componentId);\n            if (command.TryExecute())\n                _onCommandExecutedEvent.Invoke(command);\n\t\t}\n\n\t\tpublic void UnlockButtonPressed()\n\t\t{\n            if (_playerResources == null)\n                return;\n\n\t\t\tif (_activeLayout == null)\n\t\t\t\tthrow new System.InvalidOperationException(\"layout not selected\");\n\t\t\tvar id = _componentId;\n\t\t\tvar component = _activeLayout.Ship.GetComponent(id);\n\t\t\tvar price = component.Info.Price*2;\n            _guiHelper.ShowConfirmation(_localization.GetString(\"$UnlockConfirmation\"), price, () =>\n            {\n                if (!CanBeUnlocked(component))\n                    throw new System.InvalidOperationException(\"invalid component\");\n\n\t\t\t    if (!price.TryWithdraw(_playerResources))\n                    return;\n\t\t\t\t_activeLayout.UnlockComponent(id);\n\t\t\t\tSetComponent(_activeLayout, id);\n\t\t\t});\n\t\t}\n\n        public void UnlockAllButtonPressed()\n        {\n            if (_playerResources == null)\n                return;\n\n            var lockedItems = ShipLayout.Components.Concat(LeftPlatformLayout.Components).Concat(RightPlatformLayout.Components).Where(CanBeUnlocked);\n\n            var price = Price.Common(lockedItems.Sum(item => item.Info.Price.Amount*2));\n            _guiHelper.ShowConfirmation(_localization.GetString(\"$UnlockAllConfirmation\"), price, () =>\n            {\n                if (!price.TryWithdraw(_playerResources))\n                    return;\n\n                ShipLayout.Layout?.ComponentsIndex.Where(item => CanBeUnlocked(item.Value)).Select(item => item.Key).ToList().ForEach(ShipLayout.UnlockComponent);\n                LeftPlatformLayout.Layout?.ComponentsIndex.Where(item => CanBeUnlocked(item.Value)).Select(item => item.Key).ToList().ForEach(LeftPlatformLayout.UnlockComponent);\n                RightPlatformLayout.Layout?.ComponentsIndex.Where(item => CanBeUnlocked(item.Value)).Select(item => item.Key).ToList().ForEach(RightPlatformLayout.UnlockComponent);\n\n                SetComponent(_activeLayout, _componentId);\n            });\n        }\n\n        public void SetComponent(ShipLayoutViewModel activeLayout, int id)\n\t\t{\n\t\t\t_activeLayout = activeLayout;\n\t\t\tvar component = _activeLayout.Ship.GetComponent(id);\n\t\t\t_component = component.Info;\n\t\t\t_componentId = id;\n\n\t\t\tforeach (var item in ActiveOnlyObjects)\n\t\t\t\titem.SetActive(true);\n\n\t\t\tvar componentInfo = _component.CreateComponent(ConstructorViewModel.ShipSize);\n\t\t\tControls.Initialize(componentInfo, component.KeyBinding, ConstructorViewModel.GetDefaultKey(_component.Data.Id), component.Behaviour);\n\n\t\t\tInstallPanel.SetActive(false);\n\t\t\tDeleteButton.gameObject.SetActive(!component.Locked);\n\t\t\tUnlockButton.gameObject.SetActive(component.Locked);\n            UnlockAllButton.gameObject.SetActive(component.Locked);\n\n            UnlockButton.interactable = CanBeUnlocked(component);\n            UnlockAllButton.interactable = UnlockButton.interactable;\n\n            ComponentPanel.gameObject.SetActive(false);\n\t\t\tComponentPanel.Interactable = false;\n\n\t\t\tUpdateDescription(componentInfo);\n\t\t}\n\n\t    private bool CanBeUnlocked(IntegratedComponent component)\n\t    {\n\t        if (!component.Locked)\n\t            return false;\n\t        if (component.Info.Data.Availability == Availability.Common)\n\t            return true;\n\t        if (component.Info.Data.Id.Value == 96)\n\t            return true;\n\n            ITechnology tech;\n            return _technologies == null || _research == null || _technologies.TryGetComponentTechnology(component.Info.Data, out tech) && _research.IsTechResearched(tech);\n\t    }\n\n\t\tpublic void SetComponent(ComponentInfo data)\n\t\t{\n\t\t\t_activeLayout = null;\n\t\t\t_component = data;\n\t\t\t_componentId = -1;\n\n\t\t\tforeach (var item in ActiveOnlyObjects)\n\t\t\t\titem.SetActive(true);\n\n\t\t\tvar componentInfo = _component.CreateComponent(ConstructorViewModel.ShipSize);\n\t\t\tControls.Initialize(componentInfo, -1, ConstructorViewModel.GetDefaultKey(data.Data.Id), 0);\n\n\t\t\tvar status = Status.Ok;\n\t\t\tif (ConstructorViewModel.IsUniqueItemInstalled(_component.Data))\n\t\t\t\tstatus = Status.AlreadyInstalled;\n\n\t\t\tif (!componentInfo.IsSuitable(ConstructorViewModel.Ship.Model))\n\t\t\t\tstatus = Status.NotSuitable;\n\n\t\t\tInstallPanel.SetActive(true);\n\t\t\tInstallLabel.SetActive(status == Status.Ok);\n\t\t\tAlreadyInstalledLabel.SetActive(status == Status.AlreadyInstalled);\n\t\t\tNotSuitableLabel.SetActive(status == Status.NotSuitable);\n\n\t\t\tDeleteButton.gameObject.SetActive(false);\n\t\t\tUnlockButton.gameObject.SetActive(false);\n\t\t\tComponentPanel.gameObject.SetActive(true);\n\t\t\tComponentPanel.Interactable = status == Status.Ok;\n\t\t\tComponentPanel.RectSize = _component.Data.Layout.Size*ShipLayout.BlockSize;\n\t\t\tComponentPanel.GetComponent<ComponentIconViewModel>().SetIcon(_resourceLocator.GetSprite(_component.Data.Icon), _component.Data.Layout.Data, _component.Data.Layout.Size, _component.Data.Color);\n\n\t\t\tUpdateDescription(componentInfo);\n\t\t}\n\n\t\tprivate void UpdateDescription(Constructor.Component.IComponent component)\n\t\t{\n\t\t\tComponentViewModel.Initialize(_component, 0);\n\n\t\t\tswitch (_component.Data.CellType)\n\t\t\t{\n\t\t\tcase CellType.Empty:\n\t\t\t\tRequiredCellIcon.color = ColorList[0];\n\t\t\t\tbreak;\n\t\t\tcase CellType.Weapon:\n\t\t\t\tRequiredCellIcon.color = ColorList[1];\n\t\t\t\tbreak;\n\t\t\tcase CellType.Outer:\n\t\t\t\tRequiredCellIcon.color = ColorList[2];\n\t\t\t\tbreak;\n\t\t\tcase CellType.Inner:\n\t\t\t\tRequiredCellIcon.color = ColorList[3];\n\t\t\t\tbreak;\n\t\t\tcase CellType.InnerOuter:\n\t\t\t\tRequiredCellIcon.color = ColorList[4];\n\t\t\t\tbreak;\n\t\t\tcase CellType.Engine:\n\t\t\t\tRequiredCellIcon.color = ColorList[5];\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tRequiredCellText.text = _component.Data.CellType == CellType.Weapon ? _component.Data.WeaponSlotType.ToString() : string.Empty;\n\n\t\t\tvar stats = new ShipEquipmentStats();\n\t\t\tcomponent.UpdateStats(ref stats);\n\n\t\t\tSizeText.text = _component.Data.Layout.CellCount.ToString();\n\t\t}\n\n\t\tprivate void OnEnable()\n\t\t{\n\t\t\tClear();\n\t\t}\n\n\t\tprivate ShipLayoutViewModel _activeLayout;\n\t\tprivate int _componentId = -1;\n\t\tprivate ComponentInfo _component;\n\t}\n}\n\n'event_horizon/Starship/Assets/script/GUI/ViewModel/Quests/ActionsPanel.cs'\n:using System.Linq;\nusing System.Collections.Generic;\nusing Domain.Quests;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing Zenject;\n\nnamespace ViewModel\n{\n\tnamespace Quests\n\t{\n\t\tpublic class ActionsPanel : MonoBehaviour\n\t\t{\n\t\t\t[Inject] private readonly Services.ObjectPool.GameObjectFactory _factory;\n\n\t\t\tpublic LayoutGroup LayoutGroup;\n\n\t\t\tpublic void Initialize(IEnumerable<UserAction> actions)\n\t\t\t{\n\t\t\t\tgameObject.SetActive(true);\n\t\t\t\tLayoutGroup.InitializeElements<QuestAction, UserAction>(actions, UpdateActionItem, _factory);\n\t\t\t}\n\n\t\t\tprivate void UpdateActionItem(QuestAction item, UserAction action)\n\t\t\t{\n\t\t\t\titem.Initialize(action);\n\t\t\t}\n\t\t}\n\t}\n}\n\n'event_horizon/Starship/Assets/Scripts/Gui/Combat/ShipStatsPanel.cs'\n:﻿using Combat.Component.Ship;\nusing Combat.Unit;\nusing Gui.Controls;\nusing Gui.Windows;\nusing Services.Gui;\nusing Services.Reources;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing ViewModel;\nusing Zenject;\n\nnamespace Gui.Combat\n{\n    [RequireComponent(typeof(AnimatedWindow))]\n    public class ShipStatsPanel : MonoBehaviour\n    {\n        [Inject] private readonly IResourceLocator _resourceLocator;\n\n        [SerializeField] private ProgressBar _armorPoints;\n        [SerializeField] private ProgressBar _shieldPoints;\n        [SerializeField] private ProgressBar _energyPoints;\n        [SerializeField] private Image _icon;\n        [SerializeField] private SelectShipPanelItemViewModel _shipItem;\n        [SerializeField] private GameObject _fireResistIcon;\n        [SerializeField] private GameObject _energyResistIcon;\n        [SerializeField] private GameObject _kineticResistIcon;\n        [SerializeField] private Text _fireResistText;\n        [SerializeField] private Text _energyResistText;\n        [SerializeField] private Text _kineticResistText;\n\n        public void Close()\n        {\n            GetComponent<AnimatedWindow>().Close(WindowExitCode.Ok);\n        }\n\n        public void Open(IShip ship)\n        {\n            if (!ship.IsActive())\n                return;\n\n            GetComponent<AnimatedWindow>().Open();\n\n            if (_ship == ship)\n                return;\n\n            _ship = ship;\n\n            if (_icon)\n                _icon.sprite = _resourceLocator.GetSprite(ship.Specification.Stats.IconImage) ?? _resourceLocator.GetSprite(ship.Specification.Stats.ModelImage);\n\n            _shipItem.SetLevel(ship.Specification.Type.Level);\n            _shipItem.SetClass(ship.Specification.Type.Class);\n\n            UpdateResistance();\n\n            _hasShield = _ship.Stats.Shield.Exists;\n            _hasArmor = _ship.Stats.Armor.Exists;\n\n            _shieldPoints.gameObject.SetActive(_hasShield);\n            _armorPoints.gameObject.SetActive(_hasArmor);\n        }\n\n        private void UpdateResistance()\n        {\n            var resistance = _ship.Stats.Resistance;\n\n            if (_fireResistIcon != null)\n            {\n                var active = resistance.Heat > 0.01f;\n                _fireResistIcon.gameObject.SetActive(active);\n                _fireResistText.gameObject.SetActive(active);\n                if (active)\n                    _fireResistText.text = Mathf.RoundToInt(resistance.Heat * 100) + \"%\";\n            }\n\n            if (_energyResistIcon != null)\n            {\n                var active = resistance.Energy > 0.01f;\n                _energyResistIcon.gameObject.SetActive(active);\n                _energyResistText.gameObject.SetActive(active);\n                if (active)\n                    _energyResistText.text = Mathf.RoundToInt(resistance.Energy * 100) + \"%\";\n            }\n\n            if (_kineticResistIcon != null)\n            {\n                var active = resistance.Kinetic > 0.01f;\n                _kineticResistIcon.gameObject.SetActive(active);\n                _kineticResistText.gameObject.SetActive(active);\n                if (active)\n                    _kineticResistText.text = Mathf.RoundToInt(resistance.Kinetic * 100) + \"%\";\n            }\n        }\n\n        private void Update()\n        {\n            if (!_ship.IsActive())\n            {\n                Close();\n                return;\n            }\n\n            _updateResistanceCooldown -= Time.deltaTime;\n            if (_updateResistanceCooldown <= 0)\n            {\n                _updateResistanceCooldown = 0.5f;\n                UpdateResistance();\n            }\n\n            var total = 0f;\n            if (_hasArmor) total += _ship.Stats.Armor.MaxValue;\n            if (_hasShield) total += _ship.Stats.Shield.MaxValue;\n\n            var armor = _hasArmor ? _ship.Stats.Armor.Value : 0;\n            var shield = _hasShield ? _ship.Stats.Shield.Value : 0;\n\n            if (_hasArmor)\n            {\n                _armorPoints.Y0 = 0;\n                _armorPoints.Y1 = armor / total;\n                _armorPoints.SetAllDirty();\n            }\n            if (_hasShield)\n            {\n                _shieldPoints.Y0 = armor / total;\n                _shieldPoints.Y1 = (armor + shield) / total;\n                _shieldPoints.SetAllDirty();\n            }\n\n            var energy = _ship.Stats.Energy.Percentage;\n            if (!Mathf.Approximately(_energyPoints.Y1, energy))\n            {\n                _energyPoints.Y1 = energy;\n                _energyPoints.SetAllDirty();\n            }\n        }\n\n        private float _updateResistanceCooldown;\n        private bool _hasShield;\n        private bool _hasArmor;\n        private IShip _ship;\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Domain/Quests/Requirements/CharacterRelationsRequirement.cs'\n:﻿using GameDatabase.DataModel;\nusing Services.Localization;\nusing Session;\nusing UnityEngine.Assertions;\n\nnamespace Domain.Quests\n{\n    public class CharacterRelationsRequirement : IRequirements\n    {\n        public CharacterRelationsRequirement(Character character, int minValue, int maxValue, ISessionData session)\n        {\n            if (minValue > maxValue)\n            {\n                if (maxValue == 0) maxValue = int.MaxValue;\n                else if (minValue == 0) minValue = int.MinValue;\n            }\n\n            Assert.IsTrue(minValue <= maxValue);\n\n            _minValue = minValue;\n            _maxValue = maxValue;\n            _character = character;\n            _session = session;\n        }\n\n        public bool IsMet\n        {\n            get\n            {\n                var value = _session.Quests.GetCharacterRelations(_character.Id.Value);\n                return value >= _minValue && value <= _maxValue;\n            }\n        }\n\n        public bool CanStart(int starId, int seed) { return IsMet; }\n\n        public string GetDescription(ILocalization localization)\n        {\n#if UNITY_EDITOR\n            return \"CHARACTER RELATIONS \" + _character.Id + \" \" + _session.Quests.GetCharacterRelations(_character.Id.Value) + \" -> [\" + _minValue + \",\" + _maxValue + \"]\";\n#else\n            return string.Empty;\n#endif\n        }\n\n        public int BeaconPosition { get { return -1; } }\n\n        private readonly int _minValue;\n        private readonly int _maxValue;\n        private readonly Character _character;\n        private readonly ISessionData _session;\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Gui/Constructor/Commands.cs'\n:﻿using System.Collections.Generic;\nusing System.Linq;\nusing Constructor;\nusing UnityEngine;\nusing ViewModel;\n\nnamespace Gui.Constructor\n{\n    public interface ICommand\n    {\n        bool TryExecute();\n        bool TryRollback();\n    }\n\n    public class InstallComponentCommand : ICommand\n    {\n        public InstallComponentCommand(ShipLayoutViewModel layout, Vector2 position, ComponentInfo component, int keyBinding, int behaviour)\n        {\n            _layout = layout;\n            _position = position;\n            _component = component;\n            _keyBinding = keyBinding;\n            _behaviour = behaviour;\n        }\n\n        public static bool TryExecuteCommand(ShipLayoutViewModel layout, Vector2 position, ComponentInfo component, int keyBinding, int behaviour, ConstructorViewModel.CommandEvent onCommandEvent)\n        {\n            var command = new InstallComponentCommand(layout, position, component, keyBinding, behaviour);\n            if (command.TryExecute())\n            {\n                onCommandEvent.Invoke(command);\n                return true;\n            }\n\n            return false;\n        }\n\n        public bool TryExecute()\n        {\n            _id = _layout.InstallComponent(_position, _component, _keyBinding, _behaviour);\n            return _id >= 0;\n        }\n\n        public bool TryRollback()\n        {\n            _layout.RemoveComponent(_id);\n            return true;\n        }\n\n        private int _id = -1;\n        private readonly Vector2 _position;\n        private readonly int _keyBinding;\n        private readonly int _behaviour;\n        private readonly ComponentInfo _component;\n        private readonly ShipLayoutViewModel _layout;\n    }\n\n    public class RemoveComponentCommand : ICommand\n    {\n        public RemoveComponentCommand(ShipLayoutViewModel layout, int id)\n        {\n            _layout = layout;\n            _id = id;\n        }\n\n        public bool TryExecute()\n        {\n            var component = _layout.Layout.GetComponent(_id);\n            if (component == null)\n                return false;\n\n            _x = component.X;\n            _y = component.Y;\n            _behaviour = component.Behaviour;\n            _keyBinding = component.KeyBinding;\n            _component = component.Info;\n\n            _layout.RemoveComponent(_id);\n\n            return true;\n        }\n\n        public bool TryRollback()\n        {\n            return _id == _layout.InstallComponent(_x, _y, _component, _keyBinding, _behaviour, _id);\n        }\n\n        private int _x;\n        private int _y;\n        private int _keyBinding;\n        private int _behaviour;\n        private readonly int _id;\n        private ComponentInfo _component;\n        private readonly ShipLayoutViewModel _layout;\n    }\n\n    public class ComplexCommand : ICommand\n    {\n        public ComplexCommand(params ICommand[] commands)\n        {\n            _commands = new List<ICommand>(commands.Where(item => item != null));\n        }\n\n        public bool TryExecute()\n        {\n            for (var i = 0; i < _commands.Count; ++i)\n                if (!_commands[i].TryExecute())\n                    return false;\n\n            return true;\n        }\n\n        public bool TryRollback()\n        {\n            for (var i = _commands.Count - 1; i >= 0; --i)\n                if (!_commands[i].TryRollback())\n                    return false;\n\n            return true;\n        }\n\n        private readonly List<ICommand> _commands;\n    }\n}\n",
        "gt": [
            "'event_horizon/Starship/Assets/Scripts/Domain/Quests/Requirements/CharacterRelationsRequirement.cs'",
            "'event_horizon/Starship/Assets/script/GUI/ViewModel/Quests/ActionsPanel.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/Constructor/Commands.cs'",
            "'event_horizon/Starship/Assets/script/GUI/ViewModel/Constructor/ComponentInfoViewModel.cs'",
            "'event_horizon/Starship/Assets/Scripts/Gui/Combat/ShipStatsPanel.cs'",
            "'event_horizon/Starship/Assets/Scripts/Installers/ExplorationSceneInstaller.cs'"
        ]
    },
    {
        "files": [
            "'DungeonTemplateLibraryUnity/Assets/DungeonTemplateLibrary/Demo/PerlinIsland/GeneratePerlinIslandTerrain.cs'",
            "'DungeonTemplateLibraryUnity/Assets/DungeonTemplateLibrary/Scripts/Util/PerlinNoise.cs'",
            "'DungeonTemplateLibraryUnity/Assets/DungeonTemplateLibrary/Scripts/Shape/SimpleRogueLike.cs'",
            "'DungeonTemplateLibraryUnity/Assets/DungeonTemplateLibrary/Scripts/Util/TerrainUtil.cs'"
        ],
        "content": "'DungeonTemplateLibraryUnity/Assets/DungeonTemplateLibrary/Demo/PerlinIsland/GeneratePerlinIslandTerrain.cs'\n:﻿\n\nusing System.Collections.Generic;\nusing UnityEngine;\n\nusing DTL.Util;\nusing DTL.Shape;\n\npublic class GeneratePerlinIslandTerrain : MonoBehaviour {\n    public int depth = 200;\n    public int height = 1024;\n    public int width = 1024;\n    public double frequency = 6.0;\n    public uint octaves = 8;\n    public int maxHeight = 150;\n\n    private Terrain terrain;\n    private PerlinIsland perlinIsland;\n\n    public List<Texture2D> texture2D = new List<Texture2D>();\n\n    void Start() {\n        perlinIsland = new PerlinIsland(frequency, octaves, maxHeight);\n        this.terrain = GetComponent<Terrain>();\n        TerrainUtil terrainUtil = new TerrainUtil(terrain, texture2D, perlinIsland, height, width, depth);\n        terrainUtil.Draw();\n    }\n}\n'DungeonTemplateLibraryUnity/Assets/DungeonTemplateLibrary/Scripts/Util/PerlinNoise.cs'\n:﻿\n\nusing System;\nusing System.Collections.Specialized;\nusing DTL.Random;\nusing DTL.Util;\nusing UnityEngine;\n\nnamespace DTL.Util {\n\n    public class PerlinNoise {\n\n        private XorShift128 rand;\n        private int[] p = new int[512];\n\n\n\n        private double GetFade(double t) {\n            return t * t * t * (t * (t * 6 - 15) + 10);\n        }\n\n        private double GetLerp(double t, double a, double b) {\n            return a + t * (b - a);\n        }\n\n        private double MakeGradUV(int hash, double u, double v) {\n            return ((hash & 1) == 0 ? u : -u) + ((hash & 2) == 0 ? v : -v);\n        }\n\n        private double MakeGrad(int hash, double x, double y) {\n            return MakeGradUV(hash, (hash < 8) ? x : y, (hash < 4) ? y : hash == 12 || hash == 14 ? x : 0.0);\n        }\n\n        private double MakeGrad(int hash, double x, double y, double z) {\n            return MakeGradUV(hash, (hash < 8) ? x : y, (hash < 4) ? y : hash == 12 || hash == 14 ? x : z);\n        }\n\n        private double GetGrad(int hash, double x, double y) {\n            return MakeGrad(hash & 15, x, y);\n        }\n\n        private double GetGrad(int hash, double x, double y, double z) {\n            return MakeGrad(hash & 15, x, y, z);\n        }\n\n        private double SetNoise(double x = 0.0, double y = 0.0) {\n            uint xInt = (uint) Math.Floor(x) & 255;\n            uint yInt = (uint) Math.Floor(y) & 255;\n            x -= Math.Floor(x);\n            y -= Math.Floor(y);\n            double u = this.GetFade(x);\n            double v = this.GetFade(y);\n            uint a0 = (uint) (this.p[xInt] + yInt);\n            uint a1 = (uint) this.p[a0];\n            uint a2 = (uint) this.p[a0 + 1];\n            uint b0 = (uint) (this.p[xInt + 1] + yInt);\n            uint b1 = (uint) this.p[b0];\n            uint b2 = (uint) this.p[b0 + 1];\n\n            return GetLerp(v,\n                GetLerp(u, GetGrad(this.p[a1], x, y), GetGrad(this.p[b1], x - 1, y)),\n                GetLerp(u, GetGrad(this.p[a2], x, y - 1), GetGrad(this.p[b2], x - 1, y - 1)));\n        }\n\n        private double SetNoise(double x, double y, double z) {\n            uint xInt = (uint) Math.Floor(x) & 255;\n            uint yInt = (uint) Math.Floor(y) & 255;\n            uint zInt = (uint) Math.Floor(z) & 255;\n            x -= Math.Floor(x);\n            y -= Math.Floor(y);\n            z -= Math.Floor(z);\n            double u = GetFade(x);\n            double v = GetFade(y);\n            double w = GetFade(z);\n            uint a0 = (uint) this.p[xInt] + yInt;\n            uint a1 = (uint) this.p[a0] + zInt;\n            uint a2 = (uint) this.p[a0 + 1] + zInt;\n            uint b0 = (uint) this.p[xInt + 1] + yInt;\n            uint b1 = (uint) this.p[b0] + zInt;\n            uint b2 = (uint) this.p[b0 + 1] + zInt;\n\n            return GetLerp(w,\n                GetLerp(v,\n                    GetLerp(u, this.GetGrad(this.p[a1], x, y, z), this.GetGrad(this.p[b1], x - 1, y, z)),\n                    GetLerp(u, this.GetGrad(this.p[a2], x, y - 1, z),\n                        this.GetGrad(this.p[b2], x - 1, y - 1, z))),\n                GetLerp(v,\n                    GetLerp(u, this.GetGrad(this.p[a1 + 1], x, y, z - 1),\n                        this.GetGrad(this.p[b1 + 1], x - 1, y, z - 1)),\n                    GetLerp(u, this.GetGrad(this.p[a2 + 1], x, y - 1, z - 1),\n                        this.GetGrad(this.p[b2 + 1], x - 1, y - 1, z - 1))));\n        }\n\n        private double SetOctaveNoise(uint octaves, double x) {\n            double noiseValue = 0;\n            double amp = 1.0;\n            for (int i = 0; i < octaves; ++i) {\n                noiseValue += this.SetNoise(x) * amp;\n                x *= 2.0;\n                amp *= 0.5;\n            }\n\n            return noiseValue;\n        }\n\n        private double SetOctaveNoise(uint octaves, double x, double y) {\n            double noiseValue = 0;\n            double amp = 1.0;\n            for (int i = 0; i < octaves; ++i) {\n                noiseValue += this.SetNoise(x, y) * amp;\n                x *= 2.0;\n                y *= 2.0;\n                amp *= 0.5;\n            }\n\n            return noiseValue;\n        }\n\n        private double SetOctaveNoise(uint octaves, double x, double y, double z) {\n            double noiseValue = 0;\n            double amp = 1.0;\n            for (int i = 0; i < octaves; ++i) {\n                noiseValue += this.SetNoise(x, y, z) * amp;\n                x *= 2.0;\n                y *= 2.0;\n                z *= 2.0;\n                amp *= 0.5;\n            }\n\n            return noiseValue;\n        }\n\n\n\n\n        public double Noise(double x, double y) {\n            double noiseValue = SetNoise(x, y) * 0.5 + 0.5;\n            return (noiseValue >= 1.0) ? 1.0 : (noiseValue <= 0.0) ? 0.0 : noiseValue;\n        }\n\n        public double Noise(double x, double y, double z) {\n            double noiseValue = SetNoise(x, y, z) * 0.5 * 0.5;\n            return (noiseValue >= 1.0) ? 1.0 : (noiseValue <= 0.0) ? 0.0 : noiseValue;\n        }\n\n\n\n        public double OctaveNoise(uint octaves_, double x) {\n            double noiseValue = SetOctaveNoise(octaves_, x) * 0.5 + 0.5;\n            return (noiseValue >= 1.0) ? 1.0 : (noiseValue <= 0.0) ? 0.0 : noiseValue;\n        }\n\n        public double OctaveNoise(uint octaves_, double x, double y) {\n            double noiseValue = SetOctaveNoise(octaves_, x, y) * 0.5 + 0.5;\n            return (noiseValue >= 1.0) ? 1.0 : (noiseValue <= 0.0) ? 0.0 : noiseValue;\n        }\n\n        public double OctaveNoise(uint octaves_, double x, double y, double z) {\n            double noiseValue = SetOctaveNoise(octaves_, x, y, z) * 0.5 + 0.5;\n            return (noiseValue >= 1.0) ? 1.0 : (noiseValue <= 0.0) ? 0.0 : noiseValue;\n        }\n\n\n        public void SetSeed(uint seed) {\n            for (int i = 0; i < 256; ++i)\n                this.p[i] = i;\n            ArrayUtil.Shuffle(p, 256, rand);\n            for (int i = 0; i < 256; ++i) {\n                this.p[256 + i] = this.p[i];\n            }\n        }\n\n\n        public PerlinNoise() {\n            this.rand = new XorShift128();\n            SetSeed(rand.Next());\n        }\n\n        public PerlinNoise(int seed) {\n            this.rand = new XorShift128((uint)seed);\n            SetSeed((uint) seed);\n        }\n    }\n}\n'DungeonTemplateLibraryUnity/Assets/DungeonTemplateLibrary/Scripts/Shape/SimpleRogueLike.cs'\n:﻿\n\nusing System;\nusing DTL.Random;\nusing UnityEngine;\nusing MatrixRange = DTL.Base.Coordinate2DimensionalAndLength2Dimensional;\n\n\n\n\nnamespace DTL.Shape {\n\n\n\n    public class SimpleRogueLike : DTL.Range.RectBaseSimpleRogueLike<SimpleRogueLike>, IDrawer<int> {\n\n        private RandomBase rand = new RandomBase();\n\n        private const int RL_COUNT_X = 0;\n        private const int RL_COUNT_Y = 1;\n\n\n\n\n        private bool DrawNormal(int[,] matrix_, uint endX_, uint endY_) {\n\n            var mapDivCount = divisionMin + rand.Next(divisionRandMax);\n\n\n            var dungeonDivision = new uint[mapDivCount, 4];\n\n            var dungeonRoom = new uint[mapDivCount, 4];\n\n            var dungeonRoad = new uint[mapDivCount, 4];\n\n            dungeonDivision[0, 0] = endY_ - 1;\n            dungeonDivision[0, 1] = endX_ - 1;\n            dungeonDivision[0, 2] = startX + 1;\n            dungeonDivision[0, 3] = startY + 1;\n\n            dungeonRoad[0, 0] = uint.MaxValue;\n            dungeonRoad[0, 1] = uint.MaxValue;\n\n            CreateDivision(dungeonRoad, dungeonDivision, mapDivCount);\n            CreateRoom(dungeonRoom, dungeonDivision, mapDivCount);\n            AssignRoom(dungeonRoom, matrix_, mapDivCount);\n            CreateRoad(dungeonRoad, dungeonRoom, dungeonDivision, matrix_, mapDivCount);\n            return true;\n        }\n\n        private void CreateDivision(uint[,] dungeonRoad, uint[,] dungeonDivision, uint mapDivCount) {\n\n            uint divisionAfter = 0;\n            int count = 0;\n\n            for (int i = 1; i < mapDivCount; ++i) {\n\n                divisionAfter = rand.Next((uint)i);\n\n\n                if (dungeonDivision[divisionAfter, 0] - dungeonDivision[divisionAfter, 2] >\n                    dungeonDivision[divisionAfter, 1] - dungeonDivision[divisionAfter, 3]) {\n                    count = RL_COUNT_X;\n                } else {\n                    count = RL_COUNT_Y;\n                }\n\n\n                if (dungeonDivision[divisionAfter, count] - dungeonDivision[divisionAfter, count + 2] <\n                    divisionRandMax * 2 + 8) {\n                    uint k = 0;\n                    for (int j = 1; j < mapDivCount; ++j) {\n                        if (dungeonDivision[j, 0] - dungeonDivision[j, 2] > k) {\n                            k = dungeonDivision[j, 0] - dungeonDivision[j, 2];\n                            divisionAfter = (uint)j;\n                            count = RL_COUNT_X;\n                        }\n\n                        if (dungeonDivision[j, 1] - dungeonDivision[j, 3] > k) {\n                            k = dungeonDivision[j, 1] - dungeonDivision[j, 3];\n                            divisionAfter = (uint)j;\n                            count = RL_COUNT_Y;\n                        }\n                    }\n                }\n\n                dungeonRoad[i, 0] = divisionAfter;\n                dungeonRoad[i, 1] = (uint)count;\n\n                for (int j = 1; j < i; ++j) {\n                    if (dungeonRoad[j, 0] == divisionAfter) dungeonRoad[j, 0] = (uint)i;\n                }\n\n                dungeonDivision[i, count] =\n                    dungeonDivision[divisionAfter, count + 2]\n                    + (dungeonDivision[divisionAfter, count] - dungeonDivision[divisionAfter, count + 2]) / 3\n                    + (uint)rand.Next(1, (dungeonDivision[divisionAfter, count] - dungeonDivision[divisionAfter, count + 2]) / 3);\n\n                dungeonDivision[i, count + 2] = dungeonDivision[divisionAfter, count + 2];\n                dungeonDivision[divisionAfter, count + 2] = dungeonDivision[i, count];\n\n                dungeonDivision[i, Math.Abs(count - 1)] = dungeonDivision[divisionAfter, Math.Abs(count - 1)];\n                dungeonDivision[i, Math.Abs(count - 1) + 2] = dungeonDivision[divisionAfter, Math.Abs(count - 1) + 2];\n            }\n        }\n\n        private void CreateRoom(uint[,] dungeonRoom, uint[,] dungeonDivision, uint mapDivCount) {\n\n\n            for (int i = 0; i < mapDivCount; ++i) {\n                dungeonRoom[i, 2] = dungeonDivision[i, 2];\n                dungeonRoom[i, 3] = dungeonDivision[i, 3];\n\n\n                dungeonRoom[i, 0] = dungeonDivision[i, 2] + roomMinY + rand.Next(roomRandMaxX);\n\n                if (dungeonDivision[i, 0] - dungeonDivision[i, 2] < dungeonRoom[i, 0] - dungeonRoom[i, 2] + 5) {\n                    dungeonRoom[i, 0] = dungeonDivision[i, 0] - 4;\n                    if (dungeonDivision[i, 0] - dungeonDivision[i, 2] < dungeonRoom[i, 0] - dungeonRoom[i, 2] + 5) {\n                        dungeonRoom[i, 0] = dungeonDivision[i, 2] + 1;\n                    }\n                }\n\n\n                dungeonRoom[i, 1] = dungeonDivision[i, 3] + roomMinX + rand.Next(roomRandMaxY);\n\n                if (dungeonDivision[i, 1] - dungeonDivision[i, 3] < dungeonRoom[i, 1] - dungeonRoom[i, 3] + 5) {\n                    dungeonRoom[i, 1] = dungeonDivision[i, 1] - 4;\n                    if (dungeonDivision[i, 1] - dungeonDivision[i, 3] < dungeonRoom[i, 1] - dungeonRoom[i, 3] + 5) {\n                        dungeonRoom[i, 1] = dungeonDivision[i, 3] + 1;\n                    }\n                }\n\n                if (dungeonRoom[i, 0] - dungeonDivision[i, 2] <= 1 || dungeonRoom[i, 1] - dungeonDivision[i, 3] <= 1) {\n                    dungeonRoom[i, 0] = dungeonDivision[i, 2] + 1;\n                    dungeonRoom[i, 1] = dungeonDivision[i, 3] + 1;\n                }\n\n\n                uint l = dungeonDivision[i, 0] - dungeonRoom[i, 0] - 5 == 0 ? 2 : rand.Next(1, (dungeonDivision[i, 0] - dungeonRoom[i, 0]) - 5) + 2;\n                uint n = dungeonDivision[i, 1] - dungeonRoom[i, 1] - 5 == 0 ? 2 : rand.Next(1, (dungeonDivision[i, 1] - dungeonRoom[i, 1]) - 5) + 2;\n\n                dungeonRoom[i, 0] += l;\n                dungeonRoom[i, 2] += l;\n                dungeonRoom[i, 1] += n;\n                dungeonRoom[i, 3] += n;\n            }\n        }\n\n        private void CreateRoad(uint[,] dungeonRoad, uint[,] dungeonRoom, uint[,] dungeonDivision, int[,] matrix_, uint mapDivCount) {\n            for (uint roomBefore = 0, roomAfter = 0; roomBefore < mapDivCount; ++roomBefore) {\n                roomAfter = dungeonRoad[roomBefore, 0];\n                switch (dungeonRoad[roomBefore, 1]) {\n                    case RL_COUNT_X:\n                        dungeonRoad[roomBefore, 2] = rand.Next(dungeonRoom[roomBefore, 1] - dungeonRoom[roomBefore, 3] - 1);\n                        dungeonRoad[roomBefore, 3] = rand.Next(dungeonRoom[roomAfter, 1] - dungeonRoom[roomAfter, 3] - 1);\n\n\n                        for (uint j = dungeonRoom[roomBefore, 0]; j < dungeonDivision[roomBefore, 0]; ++j)\n                            matrix_[j, dungeonRoad[roomBefore, 2] + dungeonRoom[roomBefore, 3]] = roadValue;\n\n                        for (uint j = dungeonDivision[roomAfter, 2]; j < dungeonRoom[roomAfter, 2]; ++j)\n                            matrix_[j, dungeonRoad[roomBefore, 3] + dungeonRoom[roomAfter, 3]] = roadValue;\n\n\n                        for (uint j = dungeonRoad[roomBefore, 2] + dungeonRoom[roomBefore, 3]; j <= dungeonRoad[roomBefore, 3] + dungeonRoom[roomAfter, 3]; ++j)\n                            matrix_[dungeonDivision[roomBefore, 0], j] = roadValue;\n                        for (uint j = dungeonRoad[roomBefore, 3] + dungeonRoom[roomAfter, 3]; j <= dungeonRoad[roomBefore, 2] + dungeonRoom[roomBefore, 3]; ++j)\n                            matrix_[dungeonDivision[roomBefore, 0], j] = roadValue;\n                        break;\n                    case RL_COUNT_Y:\n                        dungeonRoad[roomBefore, 2] = rand.Next(dungeonRoom[roomBefore, 0] - dungeonRoom[roomBefore, 2] - 1);\n                        dungeonRoad[roomBefore, 3] = rand.Next(dungeonRoom[roomAfter, 0] - dungeonRoom[roomAfter, 2] - 1);\n\n\n                        for (uint j = dungeonRoom[roomBefore, 1]; j < dungeonDivision[roomBefore, 1]; ++j)\n                            matrix_[dungeonRoad[roomBefore, 2] + dungeonRoom[roomBefore, 2], j] = roadValue;\n\n                        for (uint j = dungeonDivision[roomAfter, 3]; j < dungeonRoom[roomAfter, 3]; ++j)\n                            matrix_[dungeonRoad[roomBefore, 3] + dungeonRoom[roomAfter, 2], j] = roadValue;\n\n\n                        for (uint j = dungeonRoad[roomBefore, 2] + dungeonRoom[roomBefore, 2]; j <= dungeonRoad[roomBefore, 3] + dungeonRoom[roomAfter, 2]; ++j)\n                            matrix_[j, dungeonDivision[roomBefore, 1]] = roadValue;\n                        for (uint j = dungeonRoad[roomBefore, 3] + dungeonRoom[roomAfter, 2]; j <= dungeonRoad[roomBefore, 2] + dungeonRoom[roomBefore, 2]; ++j)\n                            matrix_[j, dungeonDivision[roomBefore, 1]] = roadValue;\n                        break;\n\n                }\n            }\n        }\n\n        private void AssignRoom(uint[,] dungeonRoom, int[,] matrix_, uint mapDivCount) {\n\n            for (uint i = 0; i < mapDivCount; ++i)\n                for (uint j = dungeonRoom[i, 2]; j < dungeonRoom[i, 0]; ++j)\n                    for (uint k = dungeonRoom[i, 3]; k < dungeonRoom[i, 1]; ++k)\n                        matrix_[j, k] = roomValue;\n        }\n\n\n        public bool Draw(int[,] matrix_) {\n            return DrawNormal(\n                matrix_,\n                (width == 0 || startX + width >= (matrix_.Length == 0 ? 0 : (uint)(matrix_.Length / matrix_.GetLength(0)))) ? (uint)(matrix_.Length / matrix_.GetLength(0)) : startX + width,\n                (height == 0 || startY + height >= matrix_.GetLength(0)) ? (uint)(matrix_.Length == 0 ? 0 : matrix_.GetLength(0)) : startY + height);\n        }\n\n        public int[,] Create(int[,] matrix) {\n            this.Draw(matrix);\n            return matrix;\n        }\n\n\n        public SimpleRogueLike() { }\n\n        public SimpleRogueLike(int roomValue) : base(roomValue) { }\n\n        public SimpleRogueLike(int roomValue, int roadValue) : base(roomValue, roadValue) { }\n\n        public SimpleRogueLike(int roomValue, int roadValue, uint divisionMin,\n            uint divisionRandMax, uint roomMinX, uint roomRandMaxX, uint roomMinY, uint roomRandMaxY) : base(roomValue, roadValue, divisionMin, divisionRandMax, roomMinX, roomRandMaxX, roomMinY, roomRandMaxY) { }\n\n        public SimpleRogueLike(MatrixRange matrixRange) : base(matrixRange) { }\n\n        public SimpleRogueLike(MatrixRange matrixRange, int roomValue) : base(matrixRange, roomValue) { }\n\n        public SimpleRogueLike(MatrixRange matrixRange, int roomValue, int roadValue) : base(matrixRange, roomValue, roadValue) { }\n\n        public SimpleRogueLike(MatrixRange matrixRange, int roomValue, int roadValue, uint divisionMin,\n            uint divisionRandMax, uint roomMinX, uint roomRandMaxX, uint roomMinY, uint roomRandMaxY)\n            : base(matrixRange, roomValue, roadValue, divisionMin, divisionRandMax, roomMinX, roomRandMaxX, roomMinY, roomRandMaxY) { }\n    }\n}\n'DungeonTemplateLibraryUnity/Assets/DungeonTemplateLibrary/Scripts/Util/TerrainUtil.cs'\n:﻿\n\n\n\nusing System.Collections.Generic;\nusing UnityEngine;\nusing DTL.Shape;\n\nnamespace DTL.Util {\n    public class TerrainUtil {\n        public Terrain terrain { get; private set; }\n        public TerrainData terrainData { get; private set; }\n        public List<float> textureToHeight { get; set; }\n        public int depth { get; set; }\n        public int width { get; set; }\n        public int height { get; set; }\n        public float[,] matrix { get; private set; }\n        public uint smooth { get; set; }\n\n        private List<Texture2D> texture2D;\n        private ITerrainDrawer terrainGenerator;\n\n        public void Draw() {\n            Generate();\n            SetTerrainData();\n            float[,,] textureMap;\n            terrainData.SetHeights(0, 0, matrix);\n            if (this.texture2D.Count > 0) {\n                textureMap = GetTexture(matrix, terrainData.alphamapWidth, terrainData.alphamapHeight);\n                terrainData.SetAlphamaps(0, 0, textureMap);\n            }\n        }\n\n        private void Generate() {\n            matrix = new float[height, width];\n            terrainGenerator.DrawNormalize(matrix);\n            Smooth(matrix, smooth);\n        }\n\n\n        private void SetTerrainData() {\n            terrainData.size = new Vector3(width, depth, height);\n            var alphaMapResolution = Mathf.Max(height, width);\n            var heightMapResolution = Mathf.Max(height, width);\n            var splatPrototypeArray = this.SetSplatPrototypes();\n            SetResolutions(alphaMapResolution, heightMapResolution);\n            terrainData.splatPrototypes = splatPrototypeArray;\n        }\n\n\n        private void SetResolutions(int alphaR, int heightR) {\n            this.terrainData.alphamapResolution = alphaR;\n            this.terrainData.heightmapResolution = heightR;\n        }\n\n\n        private SplatPrototype[] SetSplatPrototypes() {\n            var len = this.texture2D.Count;\n            var splatPrototype = new SplatPrototype[len];\n            for (int i = 0; i < len; ++i) {\n                splatPrototype[i] = new SplatPrototype();\n                splatPrototype[i].tileSize = Vector2.one;\n                splatPrototype[i].texture = texture2D[i];\n            }\n\n            return splatPrototype;\n        }\n\n\n        private float[,,] GetTexture(float[,] matrix, int w, int h) {\n            var map = new float[w, h, texture2D.Count];\n            for (var y = 0; y < h; ++y) {\n                for (var x = 0; x < h; ++x) {\n                    var idx = LowerBound(this.textureToHeight, matrix[y, x]);\n                    map[y, x, idx] = 1f;\n                }\n            }\n\n            return map;\n        }\n\n\n\n\n        private int LowerBound(List<float> list, float value) {\n            var left = 0;\n            var right = list.Count;\n            while (left + 1 < right) {\n                int mid = (left + right) / 2;\n                if (value > list[mid]) {\n                    left = mid;\n                } else {\n                    right = mid;\n                }\n            }\n\n            return left;\n        }\n\n\n        private void SetTextureToHeight() {\n            var len = this.texture2D.Count;\n            this.textureToHeight = new List<float>();\n            var hValue = 0.0f;\n            var dh = (float)1.0f / len;\n\n            this.textureToHeight.Add(hValue);\n            for (int i = 1; i < len; ++i)\n                textureToHeight.Add(hValue + i * dh);\n\n        }\n\n        public void Smooth(float[,] heightMap, uint iterationNum) {\n\n\n\n\n            var dh = new[] { 1, -1, 0, 0 };\n            var dw = new[] { 0, 0, 1, -1 };\n            for (int iter = 0; iter < iterationNum; ++iter) {\n                for (var h = 0; h < height; ++h) {\n                    for (var w = 0; w < width; ++w) {\n\n                        var cumulative = 0;\n                        float cumulativeValue = 0f;\n                        for (int i = 0; i < 4; ++i) {\n                            var nh = h + dh[i];\n                            var nw = w + dw[i];\n\n                            if (nh >= 0 && nw >= 0 && nh < height && nw < width) {\n                                ++cumulative;\n                                cumulativeValue += heightMap[nh, nw];\n                            }\n                        }\n\n\n                        cumulativeValue += heightMap[h, w];\n                        ++cumulative;\n\n                        heightMap[h, w] = (float)cumulativeValue / cumulative;\n                    }\n                }\n            }\n        }\n\n        public TerrainUtil(Terrain terrain, List<Texture2D> texture2D, ITerrainDrawer terrainGenerator,\n            int height, int width, int depth, uint smooth = 0) {\n            this.terrain = terrain;\n            this.texture2D = texture2D;\n            this.terrainGenerator = terrainGenerator;\n            this.terrainData = terrain.terrainData;\n            this.height = height;\n            this.width = width;\n            this.depth = depth;\n            this.smooth = smooth;\n            SetTextureToHeight();\n        }\n\n        public TerrainUtil(Terrain terrain, List<Texture2D> texture2D, ITerrainDrawer terrainGenerator,\n            int height, int width, int depth, List<float> textureToHeight, uint smooth = 0) {\n            this.terrain = terrain;\n            this.texture2D = texture2D;\n            this.terrainGenerator = terrainGenerator;\n            this.terrainData = terrain.terrainData;\n            this.textureToHeight = textureToHeight;\n            this.height = height;\n            this.width = width;\n            this.depth = depth;\n            this.smooth = smooth;\n        }\n    }\n}",
        "gt": [
            "'DungeonTemplateLibraryUnity/Assets/DungeonTemplateLibrary/Scripts/Shape/SimpleRogueLike.cs'",
            "'DungeonTemplateLibraryUnity/Assets/DungeonTemplateLibrary/Scripts/Util/TerrainUtil.cs'",
            "'DungeonTemplateLibraryUnity/Assets/DungeonTemplateLibrary/Scripts/Util/PerlinNoise.cs'",
            "'DungeonTemplateLibraryUnity/Assets/DungeonTemplateLibrary/Demo/PerlinIsland/GeneratePerlinIslandTerrain.cs'"
        ]
    },
    {
        "files": [
            "'WolvenKit-7/WolvenKit.CR2W/CR2W/CR2WName.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/Program.cs'",
            "'WolvenKit-7/WolvenKit/Forms/frmJournalEditor.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'"
        ],
        "content": "'WolvenKit-7/WolvenKit.CR2W/CR2W/CR2WName.cs'\n:﻿using System;\nusing System.IO;\nusing System.Runtime.InteropServices;\nusing System.Runtime.Serialization;\nusing System.Text;\nusing System.Xml.Serialization;\n\nnamespace WolvenKit.CR2W\n{\n    [StructLayout(LayoutKind.Explicit, Size = 8)]\n    public struct CR2WName\n    {\n        [FieldOffset(0)]\n        public uint value;\n\n        [FieldOffset(4)]\n        public uint hash;\n    }\n\n    [DataContract(Namespace = \"\")]\n    public class CR2WNameWrapper\n    {\n        public CR2WName Name { get; set; }\n        [XmlIgnore]\n        [NonSerialized()]\n        private readonly CR2WFile _cr2w;\n\n        public string Str => _cr2w.StringDictionary[Name.value];\n\n        public CR2WNameWrapper(CR2WName name, CR2WFile cr2w)\n        {\n            Name = name;\n            _cr2w = cr2w;\n        }\n\n        public override string ToString() => Str;\n    }\n}\n'WolvenKit-7/WolvenKit.Nvidia/Program.cs'\n:﻿using System;\nusing System.IO;\nusing WolvenKit.Nvidia.HairWorks;\nusing WolvenKit.CR2W;\n\nnamespace WolvenKit.Nvidia\n{\n    class Program\n    {\n\n        [STAThread]\n        static void Main(string[] args)\n        {\n            var br = new BinaryReader(new FileStream(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\hw.redfur\",FileMode.Open));\n            var redfur = new CR2WFile();\n            redfur.Read(br);\n            Apex.HairWorks.ConvertToApexXml(redfur).Save(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\out.apx\");\n            NvidiaXML.BreakXmlHeader(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\out.apx\");\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit/Forms/frmJournalEditor.cs'\n:using System;\nusing System.IO;\nusing System.Linq;\nusing System.Windows.Forms;\nusing WeifenLuo.WinFormsUI.Docking;\nusing WolvenKit.App;\nusing WolvenKit.App.Model;\nusing WolvenKit.Cache;\nusing WolvenKit.CR2W;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit\n{\n    public partial class frmJournalEditor : DockContent\n    {\n        private CR2WFile file;\n\n        private TreeView QuestView;\n\n        public string descriptiontext;\n\n        public frmJournalEditor()\n        {\n            InitializeComponent();\n        }\n\n        public CR2WFile File\n        {\n            get { return file; }\n            set\n            {\n                file = value;\n                ParseJournal();\n                RenderDescription(descriptiontext);\n            }\n        }\n\n        public void ParseJournal()\n        {\n            var basenode = File.chunks[0];\n            CJournalResource journalResource = basenode.data as CJournalResource;\n\n            if (File != null && File.chunks.Count > 0)\n            {\n                switch (basenode.REDType)\n                {\n                    case \"CJournalResource\":\n\n                        ParseJournalType(journalResource.Entry);\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n        }\n\n        public void ParseImageAndPreview(CJournalCreature creature)\n        {\n            var image = creature.Image.REDValue;\n            if (!string.IsNullOrEmpty(image))\n            {\n                try\n                {\n                    var files = MainController.ImportFile(image, MainController.Get().TextureManager);\n                    entityImage.Image = ImageUtility.FromBytes(files[0]);\n                    entimgbox.Image = ImageUtility.FromBytes(files[1]);\n                }\n                catch\n                {\n\n                }\n            }\n        }\n\n        public void ParseImageAndPreview(CJournalCharacter character)\n        {\n            var image = character.Image.REDValue;\n            if (!string.IsNullOrEmpty(image))\n            {\n                try\n                {\n                    var files = MainController.ImportFile(image, MainController.Get().TextureManager);\n                    entityImage.Image = ImageUtility.FromBytes(files[0]);\n                    entimgbox.Image = ImageUtility.FromBytes(files[1]);\n                }\n                catch\n                {\n\n                }\n            }\n        }\n\n        public void ParseJournalType(CPtr<CJournalBase> pointer)\n        {\n            CR2WExportWrapper typenode = pointer.Reference;\n            CVariable target = typenode.data;\n\n            if (target is CJournalCreature creature)\n            {\n                vulnerable_treview.Show();\n                var name = creature.BaseName;\n                this.Text = $@\"Creature editor [{name}]\";\n                descriptiontext += (name + \"<br>\");\n                ParseUsedAgainst(creature.ItemsUsedAgainstCreature);\n                ParseImageAndPreview(creature);\n                ParseCJournalCreatureChildren(creature.Children);\n            }\n            else if (target is CJournalCharacter character)\n            {\n                var name = character.BaseName;\n                ParseImageAndPreview(character);\n                this.Text = $@\"Character editor [{name}]\";\n                descriptiontext += (name + \"<br>\");\n                vulnerable_treview.Hide();\n                ParseChildDescription(character.Children);\n            }\n            else if (target is CJournalGlossary)\n            {\n                var name = (target as CJournalGlossary).BaseName;\n                this.Text = $@\"Glossary editor [{name}]\";\n                descriptiontext += (name + \"<br>\");\n                vulnerable_treview.Hide();\n                ParseChildDescription((target as CJournalGlossary).Children);\n            }\n            else if (target is CJournalTutorial)\n            {\n                var name = (target as CJournalTutorial).BaseName;\n                descriptiontext += (target as CJournalTutorial).Description.ToString();\n                vulnerable_treview.Hide();\n                entityImage.Hide();\n                this.Text = $@\"Tutorial editor [{name}]\";\n            }\n            else if (target is CJournalStoryBookChapter)\n            {\n                var name = (target as CJournalStoryBookChapter).BaseName;\n                vulnerable_treview.Hide();\n                entityImage.Hide();\n                this.Text = $@\"Story book editor [{name}]\";\n            }\n            else if (target is CJournalStoryBookPage)\n            {\n                var name = (target as CJournalStoryBookPage).BaseName;\n                descriptiontext += \"<h3>\" + (target as CJournalStoryBookPage).Title + \"</h3>\";\n                ParseChildDescription((target as CJournalStoryBookPage).Children);\n                vulnerable_treview.Hide();\n                entityImage.Hide();\n                this.Text = $@\"Story book editor [{name}]\";\n            }\n            else if (target is CJournalQuest)\n            {\n                textRender.Hide();\n                vulnerable_treview.Hide();\n                QuestView = new TreeView();\n                splitContainer1.Panel2.Controls.Add(QuestView);\n                QuestView.Dock = DockStyle.Fill;\n                var name = (target as CJournalQuest).Title + \" \" + (target as CJournalQuest).Type;\n                this.Text = $@\"Quest editor [{name}]\";\n                ParseCJournalQuestChild((target as CJournalQuest).Children);\n            }\n            else\n            {\n                vulnerable_treview.Hide();\n                var name = (target as CJournalBase).BaseName;\n                this.Text = $@\"{typenode.REDType} editor [{name}]\";\n            }\n        }\n\n\n        #region CJournalCreature\n        public void ParseUsedAgainst<T>(CArray<T> infos) where T : CVariable\n        {\n            foreach (var info in infos.Elements)\n            {\n                vulnerable_treview.Nodes.Add(info.ToString());\n            }\n        }\n\n        public void ParseCJournalCreatureChildren(CArray<CPtr<CJournalContainerEntry>> childs)\n        {\n            foreach (CPtr<CJournalContainerEntry> child in childs.Elements)\n            {\n                if (child.Reference.data is CJournalCreatureDescriptionGroup)\n                {\n                    ParseCJournalCreatureDescriptionGroupChildren((child.Reference.data as CJournalCreatureDescriptionGroup).Children);\n                }\n            }\n        }\n\n        public void ParseCJournalCreatureDescriptionGroupChildren(CArray<CPtr<CJournalContainerEntry>> childs)\n        {\n            foreach (CPtr<CJournalContainerEntry> child in childs.Elements)\n            {\n\n                if (child.Reference.data is CJournalCreatureDescriptionEntry)\n                {\n                    descriptiontext += (\"\\n\\n\" + (child.Reference.data as CJournalCreatureDescriptionEntry).Description.ToString() + \"\\n\");\n                }\n            }\n        }\n        #endregion\n\n        #region Common\n\n        public void ParseChildDescription(CArray<CPtr<CJournalContainerEntry>> childs)\n        {\n            foreach (var child in childs.Elements)\n            {\n                switch (child.Reference.REDType)\n                {\n                    case \"CJournalGlossaryDescription\":\n                        {\n                            descriptiontext += (child.Reference.data as CJournalGlossaryDescription).Description + \"<br>\";\n                            break;\n                        }\n                    case \"CJournalCharacterDescription\":\n                        {\n                            descriptiontext += (child.Reference.data as CJournalCharacterDescription).Description + \"<br>\";\n                            break;\n                        }\n                    case \"CJournalStoryBookPageDescription\":\n                        {\n                            descriptiontext += (child.Reference.data as CJournalStoryBookPageDescription).Description + \"<br>\";\n                            break;\n                        }\n                }\n            }\n        }\n        #endregion\n\n        #region CJournalQuest\n\n        public void ParseCJournalQuestChild(CArray<CPtr<CJournalContainerEntry>> childs)\n        {\n            foreach (var child in childs.Elements)\n            {\n                switch (child.Reference.REDType)\n                {\n                    case \"CJournalQuestDescriptionGroup\":\n                        {\n                            ParseCJournalQuestDescriptionGroupChild((child.Reference.data as CJournalQuestDescriptionGroup).Children);\n                            break;\n                        }\n                    case \"CJournalQuestPhase\":\n                        {\n                            ParseCJournalQuestPhaseChild((child.Reference.data as CJournalQuestPhase).Children);\n                            break;\n                        }\n                }\n            }\n        }\n\n        public void ParseCJournalQuestDescriptionGroupChild<T>(CArray<CPtr<T>> childs) where T : CVariable\n        {\n            foreach (var child in childs.Elements)\n            {\n                switch (child.Reference.REDType)\n                {\n                    case \"CJournalQuestDescriptionEntry\":\n                        {\n                            var questnode = new TreeNode((child.Reference.data as CJournalQuestDescriptionEntry).BaseName.ToString());\n                            questnode.Nodes.Add(new TreeNode((child.Reference.data as CJournalQuestDescriptionEntry).Description.ToString()));\n\n                            break;\n                        }\n                }\n            }\n        }\n\n        public void ParseCJournalQuestPhaseChild<T>(CArray<CPtr<T>> childs) where T : CVariable\n        {\n            foreach (var child in childs.Elements)\n            {\n                switch (child.Reference.REDType)\n                {\n                    case \"CJournalQuestObjective\":\n                        {\n                            var questnode = new TreeNode((child.Reference.data as CJournalQuestObjective).BaseName.ToString());\n                            questnode.Nodes.Add(new TreeNode((child.Reference.data as CJournalQuestObjective).Title.ToString()));\n                            if ((child.Reference.data as CJournalQuestObjective).Children != null)\n                            {\n                                if ((child.Reference.data as CJournalQuestObjective).Children.Elements.Count > 0)\n                                {\n                                    var detailnode = ParseCJournalQuestObjectiveChild((child.Reference.data as CJournalQuestObjective).Children);\n                                    if (detailnode.Nodes.Count != 0)\n                                    {\n                                        questnode.Nodes.Add(detailnode);\n                                    }\n                                }\n                            }\n                            QuestView.Nodes.Add(questnode);\n                            break;\n                        }\n                }\n            }\n        }\n\n        public TreeNode ParseCJournalQuestObjectiveChild<T>(CArray<CPtr<T>> childs) where T : CVariable\n        {\n            var result = new TreeNode(\"Details\");\n            foreach (var child in childs.Elements)\n            {\n                switch (child.Reference.REDType)\n                {\n                    case \"CJournalQuestMapPin\":\n                        var pin = child as CJournalQuestMapPin;\n                        if (pin != null)\n                        {\n                            var pinnode = new TreeNode(\"Map pin\");\n                            pinnode.Nodes.Add(new TreeNode(\"Name: \" + pin.MapPinID));\n                            pinnode.Nodes.Add(new TreeNode(\"Radius: \" + pin.Radius));\n                            result.Nodes.Add(pinnode);\n                            break;\n                        }\n                        break;\n                }\n            }\n            return result;\n        }\n        #endregion\n\n        public void RenderDescription(string text)\n        {\n            var webBrowser = new WebBrowser();\n            webBrowser.CreateControl();\n            webBrowser.DocumentText = ($\"<html><body>{text}</body></html>\");\n            Application.DoEvents();\n            webBrowser.Document.ExecCommand(\"SelectAll\", false, null);\n            webBrowser.Document.ExecCommand(\"Copy\", false, null);\n            textRender.Paste();\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'\n:﻿using System.Linq;\nusing System.Xml.Linq;\nusing WolvenKit;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit.Nvidia.HairWorks\n{\n    class NvHairAssetDescriptor\n    {\n\n        public string checksum = \"0x299b335f 0x2cad8b54 0xcaf3c98f 0xa3094fa7\";\n\n        public XElement serialize(CFurMeshResource chunk)\n        {\n\n\n            var ret = NvidiaXML.CreateStructHeader(\"\", \"Ref\", \"HairSceneDescriptor\", \"1.0\", checksum);\n            ret.AddNvValue(\"numGuideHairs\", \"U32\", chunk.BoneIndices.Count.ToString());\n            ret.AddNvValue(\"numVertices\",\"U32\", chunk.Positions.Count.ToString());\n            ret.AddNvArray(\"vertices\",\"Vec3\",\"\",Apex.FormatCoordinateArray(chunk.Positions));\n            var endindicies = chunk.EndIndices;\n            ret.AddNvArray(\"endIndices\",\"U32\",endindicies.Count.ToString(),endindicies.Aggregate(\"\",(c,n) => c += \" \" + n));\n            ret.AddNvValue(\"numFaces\",\"U32\",\"\");\n            var faceIndices = chunk.FaceIndices;\n            ret.AddNvArray(\"faceIndices\",\"U32\",faceIndices.Count.ToString(),faceIndices.Aggregate(\"\",(c,n) => c += \" \" + n));\n            ret.AddNvArray(\"faceUVs\",\"Vec2\",\"\",\"\");\n            ret.AddNvValue(\"numBones\", \"U32\", chunk.BoneCount.ToString());\n            ret.AddNvArray(\"boneIndices\",\"Vec4\",\"\",\"\");\n            ret.AddNvArray(\"boneWeights\",\"Vec4\",\"\",\"\");\n            ret.AddNvArray(\"boneNames\",\"U8\",\"\",\"\");\n            ret.AddNvArray(\"boneNameList\",\"String\",\"\",\"\");\n            ret.AddNvArray(\"bindPoses\",\"Mat44\",\"\",\"\");\n            ret.AddNvArray(\"boneParents\",\"I32\",\"\",\"\");\n            ret.AddNvValue(\"numBoneSpheres\",\"U32\",\"\");\n            ret.AddNvArray(\"boneSpheres\",\"Struct\",\"\",\"\");\n            ret.AddNvValue(\"numBoneCapsules\",\"U32\",\"\");\n            ret.AddNvArray(\"boneCapsuleIndices\",\"U32\",\"\",\"\");\n            ret.AddNvValue(\"numPinConstraints\",\"U32\",\"\");\n            ret.AddNvArray(\"pinConstraints\",\"Struct\",\"\",\"\");\n            ret.AddNvValue(\"sceneUnit\",\"F32\",\"\");\n            ret.AddNvValue(\"upAxis\",\"U32\",\"\");\n            ret.AddNvValue(\"handedness\",\"U32\",\"\");\n            return ret;\n        }\n    }\n}\n",
        "gt": [
            "'WolvenKit-7/WolvenKit.CR2W/CR2W/CR2WName.cs'",
            "'WolvenKit-7/WolvenKit/Forms/frmJournalEditor.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/Program.cs'"
        ]
    },
    {
        "files": [
            "'OpenH2/src/OpenH2.Foundation/Physics/IRigidBody.cs'",
            "'OpenH2/src/OpenH2.Engine/EntityFactories/ItemFactory.cs'",
            "'OpenH2/src/OpenH2.Engine/Factories/ColliderFactory.cs'",
            "'OpenH2/src/OpenH2.Engine/Entities/EntityCreator.cs'"
        ],
        "content": "'OpenH2/src/OpenH2.Foundation/Physics/IRigidBody.cs'\n:﻿using System.Numerics;\n\nnamespace OpenH2.Foundation.Physics\n{\n    public interface IRigidBody : IBody\n    {\n        bool IsDynamic { get; }\n        float Mass { get; }\n        float InverseMass { get; }\n        Vector3 CenterOfMass { get; }\n        Matrix4x4 InertiaTensor { get; }\n\n        Vector3 Velocity { get; }\n        Vector3 AngularVelocity { get; }\n    }\n}\n\n'OpenH2/src/OpenH2.Engine/EntityFactories/ItemFactory.cs'\n:﻿using OpenH2.Core.Architecture;\nusing OpenH2.Core.Extensions;\nusing OpenH2.Core.Maps;\nusing OpenH2.Core.Maps.Vista;\nusing OpenH2.Core.Tags;\nusing OpenH2.Core.Tags.Scenario;\nusing OpenH2.Engine.Components;\nusing OpenH2.Engine.Entities;\nusing OpenH2.Engine.Factories;\nusing OpenH2.Foundation;\nusing System;\nusing System.Collections.Generic;\n\nnamespace OpenH2.Engine.EntityFactories\n{\n    public class ItemFactory\n    {\n        public static Entity FromTag(H2vMap map, ScenarioTag scenario,  ScenarioTag.ItemCollectionPlacement instance)\n        {\n            if (instance.ItemCollectionReference.IsInvalid)\n                return new Scenery();\n\n            if(map.TryGetTag<BaseTag>(instance.ItemCollectionReference, out var itemTag) == false)\n                throw new Exception(\"Unable to load itmc\");\n\n            if (itemTag is ItemCollectionTag itmc)\n            {\n                return CreateFromItemCollection(map, itmc, instance)[0];\n            }\n\n            if(itemTag is VehicleCollectionTag vehc)\n            {\n                return CreateFromVehicleCollection(map, vehc, instance)[0];\n            }\n\n            return new Scenery();\n        }\n\n        private static List<Entity> CreateFromItemCollection(H2vMap map, ItemCollectionTag itmc, ScenarioTag.ItemCollectionPlacement instance)\n        {\n            var entities = new List<Entity>();\n\n\n            foreach (var item in itmc.Items)\n            {\n                if (map.TryGetTag<BaseTag>(item.ItemTag, out var tag) == false)\n                {\n                    throw new Exception(\"No tag found for weap/equip\");\n                }\n\n                TagRef<HaloModelTag> itemHlmt = default;\n\n                if (tag is WeaponTag weap)\n                    itemHlmt = weap.Hlmt;\n\n                if (tag is EquipmentTag eqip)\n                    itemHlmt = eqip.Hlmt;\n\n                if (itemHlmt == default)\n                    continue;\n\n                var entity = new Item();\n                entity.FriendlyName = tag.Name;\n\n                var renderModel = new RenderModelComponent(entity, new Model<BitmapTag>\n                {\n                    Note = $\"[{itmc.Id}] {itmc.Name}\",\n\n\n\n                    Flags = ModelFlags.Diffuse | ModelFlags.CastsShadows | ModelFlags.ReceivesShadows,\n                    Meshes = MeshFactory.GetRenderModel(map, itemHlmt)\n                });\n\n                var xform = new TransformComponent(entity, instance.Position, QuaternionExtensions.FromH2vOrientation(instance.Orientation));\n                var body = PhysicsComponentFactory.CreateDynamicRigidBody(entity, xform, map, itemHlmt);\n\n                entity.SetComponents(xform, renderModel, body);\n                entities.Add(entity);\n            }\n\n            return entities;\n        }\n\n        private static List<Entity> CreateFromVehicleCollection(H2vMap map, VehicleCollectionTag vehc, ScenarioTag.ItemCollectionPlacement instance)\n        {\n            var entities = new List<Entity>();\n\n\n            foreach (var vehicle in vehc.VehicleReferences)\n            {\n                if (map.TryGetTag(vehicle.Vehicle, out var vehi) == false)\n                {\n                    throw new Exception(\"No tag found for vehc reference\");\n                }\n\n                var entity = new Vehicle();\n                entity.FriendlyName = vehi.Name;\n                var xform = new TransformComponent(entity, instance.Position, QuaternionExtensions.FromH2vOrientation(instance.Orientation));\n                PopulateVehicle(entity, map, xform, vehi);\n                entities.Add(entity);\n            }\n\n            return entities;\n        }\n\n        public static Vehicle CreateFromVehicleInstance(H2vMap map, ScenarioTag scenario, ScenarioTag.VehicleInstance instance)\n        {\n            var item = new Vehicle();\n            item.FriendlyName = \"Vehicle_\" + instance.Index;\n\n            var def = scenario.VehicleDefinitions[instance.Index];\n\n            if (map.TryGetTag(def.Vehicle, out var vehi) == false)\n            {\n                throw new Exception(\"No tag found for vehi reference\");\n            }\n\n            var xform = new TransformComponent(item, instance.Position, QuaternionExtensions.FromH2vOrientation(instance.Orientation));\n\n            PopulateVehicle(item, map, xform, vehi);\n\n            return item;\n        }\n\n        private static void PopulateVehicle(Vehicle item, H2vMap map, TransformComponent xform, VehicleTag vehi)\n        {\n            item.FriendlyName = vehi.Name;\n            item.SetComponents(xform,\n                PhysicsComponentFactory.CreateDynamicRigidBody(item, xform, map, vehi.Hlmt),\n                new RenderModelComponent(item, new Model<BitmapTag>\n                {\n                    Note = $\"[{vehi.Id}] {vehi.Name}\",\n                    Flags = ModelFlags.Diffuse | ModelFlags.CastsShadows | ModelFlags.ReceivesShadows,\n                    Meshes = MeshFactory.GetRenderModel(map, vehi.Hlmt)\n                }));\n        }\n    }\n}\n\n'OpenH2/src/OpenH2.Engine/Factories/ColliderFactory.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Numerics;\nusing OpenH2.Core.Maps.Vista;\nusing OpenH2.Core.Tags;\nusing OpenH2.Foundation;\nusing OpenH2.Foundation.Physics;\nusing OpenH2.Physics.Colliders;\n\nnamespace OpenH2.Engine.Factories\n{\n    public static class ColliderFactory\n    {\n        private static ICollider DefaultCollider = new BoxCollider(IdentityTransform.Instance, new Vector3(0.1f));\n\n        public static ICollider GetAggregateColliderForPhmo(PhysicsModelTag phmo)\n        {\n            var collider = new AggregateCollider();\n\n            foreach (var body in phmo.RigidBodies)\n            {\n                AddColliderForBody(collider, phmo, body);\n            }\n\n            return collider;\n        }\n\n        public static ICollider GetAggregateColliderForPhmoBody(PhysicsModelTag phmo, PhysicsModelTag.RigidBody body)\n        {\n            var collider = new AggregateCollider();\n\n            AddColliderForBody(collider, phmo, body);\n\n            return collider;\n        }\n\n        private static void AddColliderForBody(AggregateCollider collider, PhysicsModelTag phmo, PhysicsModelTag.RigidBody body)\n        {\n            switch (body.ComponentType)\n            {\n                case PhysicsModelTag.RigidBodyComponentType.Capsule:\n                    break;\n                case PhysicsModelTag.RigidBodyComponentType.Sphere:\n                    break;\n                case PhysicsModelTag.RigidBodyComponentType.Box:\n                    AddBoxCollider(collider, phmo.BoxDefinitions[body.ComponentIndex]);\n                    break;\n                case PhysicsModelTag.RigidBodyComponentType.Triangles:\n                    break;\n                case PhysicsModelTag.RigidBodyComponentType.Polyhedra:\n                    AddPolyhedronCollider(collider, phmo, phmo.PolyhedraDefinitions[body.ComponentIndex]);\n                    break;\n                case PhysicsModelTag.RigidBodyComponentType.FixedList:\n                case PhysicsModelTag.RigidBodyComponentType.ComponentList:\n                    AddCompositeCollider(collider, phmo, body);\n                    break;\n                case PhysicsModelTag.RigidBodyComponentType.Phantom:\n                    break;\n                default:\n                    break;\n            }\n        }\n\n        private static void AddBoxCollider(AggregateCollider aggregate, PhysicsModelTag.BoxDefinition box)\n        {\n            var xform = new Transform();\n            xform.UseTransformationMatrix(box.Transform);\n            var boxCollider = new BoxCollider(xform, box.HalfWidthsMaybe);\n            boxCollider.PhysicsMaterial = box.Material;\n            aggregate.AddCollider(boxCollider);\n        }\n\n        private static void AddPolyhedronCollider(AggregateCollider aggregate, PhysicsModelTag phmo, PhysicsModelTag.PolyhedraDefinition mesh)\n        {\n            var meshVerts = new List<Vector3>(mesh.HullCount * 4);\n\n            ReadOnlySpan<TetrahedralHull> hulls = mesh.InlineHulls;\n\n            if (mesh.HullCount > 3)\n            {\n                hulls = phmo.PolyhedraAlternativeDefinitions.AsSpan().Slice(mesh.ExternalHullsOffset, mesh.HullCount);\n            }\n\n            for (var i = 0; i < mesh.HullCount; i++)\n            {\n                var hull = hulls[i];\n                meshVerts.Add(hull[0]);\n                meshVerts.Add(hull[1]);\n                meshVerts.Add(hull[2]);\n                meshVerts.Add(hull[3]);\n            }\n\n            var convexModel = new ConvexModelCollider(new() { meshVerts.ToArray() });\n            convexModel.PhysicsMaterial = mesh.Material;\n\n            aggregate.AddCollider(convexModel);\n        }\n\n        private static void AddCompositeCollider(AggregateCollider aggregate, PhysicsModelTag phmo, PhysicsModelTag.RigidBody body)\n        {\n            var list = phmo.Lists[body.ComponentIndex];\n            Span<PhysicsModelTag.ListShape> shapes;\n\n            if (list.Count < 5)\n            {\n                shapes = new PhysicsModelTag.ListShape[list.Count];\n                for(var i = 0; i < list.Count; i++)\n                {\n                    shapes[i] = new PhysicsModelTag.ListShape()\n                    {\n                        ComponentType = (PhysicsModelTag.RigidBodyComponentType)list.InlineShapes[i * 4 + 0],\n                        ComponentIndex = list.InlineShapes[i * 4 + 2],\n                    };\n                }\n            }\n            else\n            {\n                shapes = phmo.ListShapes.AsSpan().Slice(list.ExternalShapesOffset, list.Count);\n            }\n\n            foreach(var shape in shapes)\n            {\n                switch (shape.ComponentType)\n                {\n                    case PhysicsModelTag.RigidBodyComponentType.Sphere:\n                        break;\n                    case PhysicsModelTag.RigidBodyComponentType.Capsule:\n                        break;\n                    case PhysicsModelTag.RigidBodyComponentType.Box:\n                        AddBoxCollider(aggregate, phmo.BoxDefinitions[shape.ComponentIndex]);\n                        break;\n                    case PhysicsModelTag.RigidBodyComponentType.Polyhedra:\n                        AddPolyhedronCollider(aggregate, phmo, phmo.PolyhedraDefinitions[shape.ComponentIndex]);\n                        break;\n                    case PhysicsModelTag.RigidBodyComponentType.Phantom:\n                        break;\n                    default:\n                    case PhysicsModelTag.RigidBodyComponentType.Triangles:\n                    case PhysicsModelTag.RigidBodyComponentType.FixedList:\n                    case PhysicsModelTag.RigidBodyComponentType.ComponentList:\n                        throw new Exception(\"what\");\n                }\n            }\n        }\n\n        public static ICollider GetTriangleColliderForHlmt(H2vMap map, HaloModelTag hlmt, int damageLevel = 0)\n        {\n            if(hlmt.ColliderId.IsInvalid)\n            {\n                return DefaultCollider;\n            }\n\n            if (map.TryGetTag(hlmt.ColliderId, out var coll) == false)\n            {\n                Console.WriteLine($\"Couldn't find COLL[{hlmt.ColliderId.Id}]\");\n                return DefaultCollider;\n            }\n\n            if (coll.ColliderComponents.Length == 0\n                || coll.ColliderComponents[0].DamageLevels.Length <= damageLevel\n                || coll.ColliderComponents[0].DamageLevels[damageLevel].Parts.Length == 0)\n            {\n                Console.WriteLine($\"No colliders defined in coll[{hlmt.ColliderId}] for damage level {damageLevel}\");\n                return DefaultCollider;\n            }\n\n            var colliderMeshes = new List<TriangleMeshCollider>();\n\n            foreach (var component in coll.ColliderComponents)\n            {\n                var container = component.DamageLevels[damageLevel];\n\n\n                colliderMeshes.Add(TriangleMeshCollider.Create(container.Parts, i => -1));\n            }\n\n\n            var collider = new TriangleModelCollider()\n            {\n                MeshColliders = colliderMeshes.ToArray()\n            };\n\n            return collider;\n        }\n    }\n}\n\n'OpenH2/src/OpenH2.Engine/Entities/EntityCreator.cs'\n:﻿using OpenH2.Core.Architecture;\nusing OpenH2.Core.Maps.Vista;\nusing OpenH2.Core.Tags;\nusing OpenH2.Core.Tags.Scenario;\nusing OpenH2.Engine.Components.Globals;\nusing OpenH2.Engine.EntityFactories;\nusing OpenH2.Physics.Core;\n\nnamespace OpenH2.Engine.Entities\n{\n    public class EntityCreator : IEntityCreator\n    {\n        public H2vMap Map { get; }\n\n        public EntityCreator(H2vMap map)\n        {\n            this.Map = map;\n        }\n\n        public Entity FromBsp(BspTag bsp)\n        {\n            return TerrainFactory.FromBspData(this.Map, bsp);\n        }\n\n        public Entity FromInstancedGeometry(BspTag bsp, BspTag.InstancedGeometryInstance instance)\n        {\n            return SceneryFactory.FromInstancedGeometry(this.Map, bsp, instance);\n        }\n\n        public Entity FromSkyboxInstance(ScenarioTag.SkyboxInstance sky)\n        {\n            return SkyboxFactory.FromTag(this.Map, this.Map.Scenario, sky);\n        }\n\n        public Entity FromSceneryInstance(ScenarioTag.SceneryInstance scen)\n        {\n            var entity = SceneryFactory.FromTag(this.Map, this.Map.Scenario, scen);\n            scen.GameObject = entity;\n            return entity;\n        }\n\n        public Entity FromBlocInstance(ScenarioTag.BlocInstance bloc)\n        {\n            var entity = BlocFactory.FromTag(this.Map, this.Map.Scenario, bloc);\n            bloc.GameObject = entity;\n            return entity;\n        }\n\n        public Entity FromMachineryInstance(ScenarioTag.MachineryInstance mach)\n        {\n            var entity = MachineryFactory.FromTag(this.Map, this.Map.Scenario, mach);\n            mach.GameObject = entity;\n            return entity;\n        }\n\n        public Entity FromItemCollectionPlacement(ScenarioTag.ItemCollectionPlacement item)\n        {\n            return ItemFactory.FromTag(this.Map, this.Map.Scenario, item);\n        }\n\n        public Entity FromVehicleInstance(ScenarioTag.VehicleInstance item)\n        {\n            var entity = ItemFactory.CreateFromVehicleInstance(this.Map, this.Map.Scenario, item);\n            item.GameObject = entity;\n            return entity;\n        }\n\n        public Entity FromTriggerVolume(ScenarioTag.TriggerVolume tv)\n        {\n            var entity = TriggerFactory.FromScenarioTriggerVolume(this.Map.Scenario, tv);\n            tv.GameObject = entity;\n            return entity;\n        }\n\n        public Entity FromSquadStartingLocation(ScenarioTag.AiSquadDefinition.StartingLocation loc)\n        {\n            var entity = ActorFactory.FromStartingLocation(this.Map, loc);\n            loc.Actor = entity;\n            return entity;\n        }\n\n        public Entity FromGlobals()\n        {\n            var globalEntity = new GlobalSettings();\n            globalEntity.FriendlyName = \"Globals\";\n            var globalMaterials = new MaterialListComponent(globalEntity);\n\n            for (var i = 0; i < this.Map.Globals.MaterialDefinitions.Length; i++)\n            {\n                var def = this.Map.Globals.MaterialDefinitions[i];\n                var mat = new PhysicsMaterial(i, def.Friction, def.Friction, def.Restitution);\n\n                globalMaterials.AddPhysicsMaterial(mat);\n            }\n\n            globalEntity.SetComponents(new Component[] { globalMaterials });\n            return globalEntity;\n        }\n    }\n}\n",
        "gt": [
            "'OpenH2/src/OpenH2.Foundation/Physics/IRigidBody.cs'",
            "'OpenH2/src/OpenH2.Engine/Factories/ColliderFactory.cs'",
            "'OpenH2/src/OpenH2.Engine/EntityFactories/ItemFactory.cs'",
            "'OpenH2/src/OpenH2.Engine/Entities/EntityCreator.cs'"
        ]
    },
    {
        "files": [
            "'OnePomodoro/OnePomodoro/OnePomodoro/PomodoroViews/EllipseClipView.xaml.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/ViewModels/PomodoroViewModel.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/Views/VisualSettingView.xaml.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/Services/FirstRunDisplayService.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/PomodoroViews/PomodoroView.cs'"
        ],
        "content": "'OnePomodoro/OnePomodoro/OnePomodoro/PomodoroViews/EllipseClipView.xaml.cs'\n:﻿using System;\nusing System.Numerics;\nusing OnePomodoro.Helpers;\nusing Windows.UI.Composition;\nusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Hosting;\n\n\n\n\n\n\nnamespace OnePomodoro.PomodoroViews\n{\n    [Title(\"Ellipse Clip\")]\n    [Screenshot(\"/Assets/Screenshots/EllipseClip.png\")]\n    [CompactOverlay(CustomWidth = 288, CustomHeight = 157.5)]\n    [FunctionTags(Tags.CompositionAnimation, Tags.CompositionGeometricClip)]\n    [SourceCode(\"https:\n    public sealed partial class EllipseClipView : PomodoroView\n    {\n        private Visual _oldVisual;\n\n        public EllipseClipView()\n        {\n            this.InitializeComponent();\n            ViewModel.IsInPomodoroChanged += OnIsPomodoroChanged;\n            UpdateContent();\n        }\n\n        private Compositor Compositor => Window.Current.Compositor;\n\n        private void OnIsPomodoroChanged(object sender, EventArgs e)\n        {\n            UpdateContent();\n        }\n\n        private void UpdateContent()\n        {\n            var width = (float)ActualWidth;\n            var newContent = ViewModel.IsInPomodoro ? (UIElement)new EllipseClipWorkControl() : new EllipseClipPlayControl();\n            Root.Children.Add(newContent);\n            var visual = ElementCompositionPreview.GetElementVisual(newContent);\n            visual.Offset = new Vector3(width, 0, 0);\n            var animation = Compositor.CreateVector3KeyFrameAnimation();\n            var easing = Compositor.CreateCubicBezierEasingFunction(new Vector2(0.1f, 0.9f), new Vector2(0.2f, 1f));\n\n            animation.Duration = TimeSpan.FromSeconds(1);\n            animation.InsertKeyFrame(1, Vector3.Zero, easing);\n            visual.StartAnimation(nameof(Visual.Offset), animation);\n\n            if (_oldVisual != null)\n            {\n                animation = Compositor.CreateVector3KeyFrameAnimation();\n                easing = Compositor.CreateCubicBezierEasingFunction(new Vector2(0.1f, 0.9f), new Vector2(0.2f, 1f));\n\n                animation.Duration = TimeSpan.FromSeconds(1);\n                animation.InsertKeyFrame(1, new Vector3(-width, 0, 0), easing);\n\n                CompositionScopedBatch batch = Compositor.CreateScopedBatch(CompositionBatchTypes.Animation);\n\n                _oldVisual.StartAnimation(nameof(Visual.Offset), animation);\n\n                batch.Completed += (s, e) => Root.Children.RemoveAt(0);\n                batch.End();\n            }\n\n            _oldVisual = visual;\n        }\n    }\n}\n\n'OnePomodoro/OnePomodoro/OnePomodoro/ViewModels/PomodoroViewModel.cs'\n:﻿using System;\nusing System.Threading.Tasks;\nusing Microsoft.Toolkit.Mvvm.ComponentModel;\nusing Microsoft.Toolkit.Mvvm.Input;\nusing OnePomodoro.Helpers;\nusing OnePomodoro.Services;\nusing Windows.ApplicationModel;\nusing Windows.ApplicationModel.Core;\n\nnamespace OnePomodoro.ViewModels\n{\n    public class PomodoroViewModel : ObservableObject\n    {\n        private int _completedPomodoros;\n        private CountdownTimer _currentTimer;\n        private bool _isInPomodoro;\n        private bool _isTimerInProgress;\n        private bool _isUserStop;\n        private TimeSpan _remainingBreakTime;\n        private TimeSpan _remainingPomodoroTime;\n\n        public PomodoroViewModel()\n        {\n            StartTimerCommand = new RelayCommand(StartTimer);\n            StopTimerCommand = new RelayCommand(StopTimer);\n\n            IsInPomodoro = true;\n            RemainingPomodoroTime = PomodoroLength;\n            TotalPomodoroTime = PomodoroLength;\n\n            CoreApplication.LeavingBackground += OnLeavingBackground;\n            CoreApplication.EnteredBackground += OnEnteredBackground;\n        }\n\n        public event EventHandler IsInPomodoroChanged;\n\n        public event EventHandler RemainingBreakTimeChanged;\n\n        public event EventHandler RemainingPomodoroTimeChanged;\n\n        public static PomodoroViewModel Current { get; } = new PomodoroViewModel();\n\n        public int CompletedPomodoros\n        {\n            get { return _completedPomodoros; }\n            set\n            {\n                _completedPomodoros = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public CountdownTimer CurrentTimer\n        {\n            get\n            {\n                return _currentTimer;\n            }\n            set\n            {\n                _currentTimer = value;\n                _currentTimer.Elapsed += OnCurrentTimerElapsed;\n                _currentTimer.Finished += OnCurrentFinished; ;\n            }\n        }\n\n        public bool IsInPomodoro\n        {\n            get => _isInPomodoro;\n\n            private set\n            {\n                _isInPomodoro = value;\n                IsInPomodoroChanged?.Invoke(this, EventArgs.Empty);\n                OnPropertyChanged();\n            }\n        }\n\n        public bool IsTimerInProgress\n        {\n            get => _isTimerInProgress;\n\n            private set\n            {\n                _isTimerInProgress = value;\n                OnPropertyChanged();\n            }\n        }\n\n        public TimeSpan RemainingBreakTime\n        {\n            get => _remainingBreakTime;\n\n            private set\n            {\n                _remainingBreakTime = value;\n                RemainingBreakTimeChanged?.Invoke(this, EventArgs.Empty);\n                OnPropertyChanged();\n            }\n        }\n\n        public TimeSpan RemainingPomodoroTime\n        {\n            get => _remainingPomodoroTime;\n\n            private set\n            {\n                _remainingPomodoroTime = value;\n                RemainingPomodoroTimeChanged?.Invoke(this, EventArgs.Empty);\n                OnPropertyChanged();\n            }\n        }\n\n        public RelayCommand StartTimerCommand { get; }\n        public RelayCommand StopTimerCommand { get; }\n        public TimeSpan TotalBreakTime { get; private set; }\n        public TimeSpan TotalPomodoroTime { get; private set; }\n        private int LongBreakAfter => SettingsService.Current == null ? 4 : SettingsService.Current.LongBreakAfter;\n        private TimeSpan LongBreakLength => TimeSpan.FromMinutes(SettingsService.Current == null ? 15 : SettingsService.Current.LongBreakLength);\n        private TimeSpan PomodoroLength => TimeSpan.FromMinutes(SettingsService.Current == null ? 25 : SettingsService.Current.PomodoroLength);\n        private TimeSpan ShortBreakLength => TimeSpan.FromMinutes(SettingsService.Current == null ? 5 : SettingsService.Current.ShortBreakLength);\n\n        private async void OnBreakTimerFinished()\n        {\n            var startTime = CurrentTimer.StartTime;\n            RemainingPomodoroTime = PomodoroLength;\n            IsTimerInProgress = false;\n            IsInPomodoro = true;\n\n            if (SettingsService.Current.AutoStartOfNextPomodoro)\n                await StartPomodoroAsync();\n\n            await DataService.AddPeriodAsync(false, _isUserStop == false, startTime, DateTime.Now);\n            _isUserStop = false;\n        }\n\n        private void OnCurrentFinished(object sender, EventArgs e)\n        {\n            if (_isInPomodoro)\n                OnPomodoroTimerFinished();\n            else\n                OnBreakTimerFinished();\n        }\n\n        private void OnCurrentTimerElapsed(object sender, EventArgs e)\n        {\n            if (_isInPomodoro)\n                RemainingPomodoroTime = CurrentTimer.RemainingTime;\n            else\n                RemainingBreakTime = CurrentTimer.RemainingTime;\n        }\n\n        private async void OnEnteredBackground(object sender, EnteredBackgroundEventArgs e)\n        {\n            if (IsTimerInProgress && App.Current.HasExited == false)\n            {\n                var deferral = e.GetDeferral();\n                try\n                {\n                    await NotificationManager.Current.AddAllNotificationsAsync(IsInPomodoro, CurrentTimer.StartTime + CurrentTimer.TotalTime,\n                        SettingsService.Current.AutoStartOfNextPomodoro, SettingsService.Current.AutoStartOfBreak,\n                        _completedPomodoros, LongBreakAfter, PomodoroLength,\n                        ShortBreakLength, LongBreakLength);\n\n                    await DataService.AddFuturePeriodsAsync(IsInPomodoro, CurrentTimer.StartTime + CurrentTimer.TotalTime,\n                     SettingsService.Current.AutoStartOfNextPomodoro, SettingsService.Current.AutoStartOfBreak,\n                     _completedPomodoros, LongBreakAfter, PomodoroLength,\n                     ShortBreakLength, LongBreakLength);\n                }\n                catch (Exception ex)\n                {\n                    Microsoft.AppCenter.Crashes.Crashes.TrackError(ex);\n                }\n                deferral.Complete();\n            }\n        }\n\n        private async void OnLeavingBackground(object sender, LeavingBackgroundEventArgs e)\n        {\n            try\n            {\n                if (CurrentTimer != null && IsTimerInProgress)\n                    CurrentTimer.CheckTime();\n\n                if (IsTimerInProgress)\n                {\n                    await NotificationManager.Current.RemoveAllNotificationsButFirstAsync(IsInPomodoro, CurrentTimer.StartTime + CurrentTimer.TotalTime);\n                    await DataService.RemoveFuturePeriodsAsync();\n                }\n            }\n            catch (Exception ex)\n            {\n                Microsoft.AppCenter.Crashes.Crashes.TrackError(ex);\n            }\n        }\n\n        private async void OnPomodoroTimerFinished()\n        {\n            var startTime = CurrentTimer.StartTime;\n            IsTimerInProgress = false;\n            IsInPomodoro = false;\n            CompletedPomodoros++;\n\n            var breakLength = (CompletedPomodoros % LongBreakAfter == 0) ? LongBreakLength : ShortBreakLength;\n\n            TotalBreakTime = breakLength;\n            RemainingBreakTime = breakLength;\n\n            if (SettingsService.Current.AutoStartOfBreak)\n                await StartBreakAsync();\n\n            await DataService.AddPeriodAsync(true, _isUserStop == false, startTime, DateTime.Now);\n            _isUserStop = false;\n        }\n\n        private async Task StartBreakAsync()\n        {\n            IsTimerInProgress = true;\n\n            var breakLength = (CompletedPomodoros % LongBreakAfter == 0) ? LongBreakLength : ShortBreakLength;\n            if (SettingsService.Current.AutoStartOfBreak && CurrentTimer != null && CurrentTimer.RemainingTime == TimeSpan.Zero)\n                CurrentTimer = new CountdownTimer(CurrentTimer.StartTime + CurrentTimer.TotalTime, breakLength);\n            else\n                CurrentTimer = new CountdownTimer(DateTime.Now, breakLength);\n\n            if (SettingsService.Current.IsNotifyWhenBreakFinished && (CurrentTimer.StartTime + CurrentTimer.TotalTime) > DateTime.Now)\n                await NotificationManager.Current.AddBreakFinishedToastNotificationScheduleAsync(CurrentTimer.StartTime + CurrentTimer.TotalTime);\n\n            CurrentTimer.Start();\n        }\n\n        private async Task StartPomodoroAsync()\n        {\n            IsTimerInProgress = true;\n\n            if (SettingsService.Current.AutoStartOfNextPomodoro && CurrentTimer != null && CurrentTimer.RemainingTime == TimeSpan.Zero)\n                CurrentTimer = new CountdownTimer(CurrentTimer.StartTime + CurrentTimer.TotalTime, PomodoroLength);\n            else\n                CurrentTimer = new CountdownTimer(DateTime.Now, PomodoroLength);\n\n            if (SettingsService.Current.IsNotifyWhenPomodoroFinished && (CurrentTimer.StartTime + CurrentTimer.TotalTime) > DateTime.Now)\n                await NotificationManager.Current.AddPomodoroFinishedToastNotificationScheduleAsync(CurrentTimer.StartTime + CurrentTimer.TotalTime);\n\n            CurrentTimer.Start();\n        }\n\n        private async void StartTimer()\n        {\n            if (_isInPomodoro)\n                await StartPomodoroAsync();\n            else\n                await StartBreakAsync();\n        }\n\n        private async void StopTimer()\n        {\n            await NotificationManager.Current.RemovePomodoroFinishedToastNotificationScheduleAsync();\n            await NotificationManager.Current.RemoveBreakFinishedToastNotificationScheduleAsync();\n            _isUserStop = true;\n            CurrentTimer.Stop();\n        }\n    }\n}\n\n'OnePomodoro/OnePomodoro/OnePomodoro/Views/VisualSettingView.xaml.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Microsoft.Toolkit.Uwp.UI;\nusing OnePomodoro.Helpers;\nusing OnePomodoro.PomodoroViews;\nusing OnePomodoro.Services;\nusing Windows.UI.Xaml;\nusing Windows.UI.Xaml.Controls;\n\n\n\nnamespace OnePomodoro.Views\n{\n    public class VisualSettingItem\n    {\n        private readonly string DefaultScreenshotUri = \"/Assets/SplashScreen.png\";\n\n        public VisualSettingItem(Type pomodoroViewType)\n        {\n            Type = pomodoroViewType;\n\n            var attributes = Type.GetCustomAttributes(true);\n            var titleAttribute = attributes.OfType<TitleAttribute>().FirstOrDefault();\n            if (titleAttribute != null)\n                Title = titleAttribute.Title;\n\n            var screenshotAttribute = attributes.OfType<ScreenshotAttribute>().FirstOrDefault();\n            if (screenshotAttribute != null && string.IsNullOrWhiteSpace(screenshotAttribute.Uri) == false)\n                ScreenshotUri = screenshotAttribute.Uri;\n            else\n                ScreenshotUri = DefaultScreenshotUri;\n\n            var compactOverlayAttribute = attributes.OfType<CompactOverlayAttribute>().FirstOrDefault();\n            Pinable = compactOverlayAttribute != null;\n\n            var tagsAttribute = attributes.OfType<FunctionTagsAttribute>().FirstOrDefault();\n            Tags = tagsAttribute?.Tags;\n\n            var sourceCodeAttribute = attributes.OfType<SourceCodeAttribute>().FirstOrDefault();\n            SourceCodeUri = sourceCodeAttribute == null ? \"https:\n        }\n\n        public bool Pinable { get; }\n        public string ScreenshotUri { get; }\n\n        public string SourceCodeUri { get; }\n\n        public string[] Tags { get; }\n        public string Title { get; }\n\n        public Type Type { get; }\n    }\n\n    public sealed partial class VisualSettingView : UserControl\n    {\n        public VisualSettingView()\n        {\n            this.InitializeComponent();\n            Items = PomodoroView.Views.Select(v => new VisualSettingItem(v));\n        }\n\n        public event EventHandler<Tuple<Type, Image>> VisualChanged;\n\n        public IEnumerable<VisualSettingItem> Items { get; }\n\n        private async void OnSelectVisual(object sender, RoutedEventArgs e)\n        {\n            var element = (sender as FrameworkElement);\n            var image = element.FindDescendant<Image>();\n            var item = element.DataContext as VisualSettingItem;\n\n            SettingsService.Current.ViewType = item.Type.Name;\n            VisualChanged?.Invoke(item.Type, new Tuple<Type, Image>(item.Type, image));\n            await SettingsService.SaveAsync();\n        }\n    }\n}\n\n'OnePomodoro/OnePomodoro/OnePomodoro/Services/FirstRunDisplayService.cs'\n:﻿using System;\nusing System.Threading.Tasks;\n\nusing Microsoft.Toolkit.Uwp.Helpers;\n\nusing OnePomodoro.Views;\n\nnamespace OnePomodoro.Services\n{\n    public class FirstRunDisplayService : IFirstRunDisplayService\n    {\n        private static bool shown = false;\n\n        public async Task ShowIfAppropriateAsync()\n        {\n            if (SystemInformation.Instance.IsFirstRun && !shown)\n            {\n                shown = true;\n                var dialog = new FirstRunDialog();\n                await dialog.ShowAsync();\n            }\n        }\n    }\n}\n\n'OnePomodoro/OnePomodoro/OnePomodoro/PomodoroViews/PomodoroView.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing OnePomodoro.ViewModels;\nusing Windows.UI.Xaml.Controls;\n\nnamespace OnePomodoro.PomodoroViews\n{\n    public class PomodoroView : UserControl\n    {\n        public PomodoroView()\n        {\n            DataContext = PomodoroViewModel.Current;\n        }\n\n        public static IEnumerable<Type> Views { get; } = new List<Type>\n        {\n            typeof(LongShadow),\n            typeof(AudioCall),\n            typeof(TheFirst),\n            typeof(TheBigOne),\n            typeof(SimpleCircle),\n            typeof(Gradients),\n            typeof(GradientsWithBlend),\n            typeof(SpringTextView),\n            typeof(KonosubaView),\n            typeof(HiddenTextView),\n            typeof(WhiteTextView),\n            typeof(OutlineTextView),\n            typeof(ShadowTextView),\n            typeof(SplitTo5View),\n            typeof(EllipseClipView),\n            typeof(DoNotDisturbView),\n        };\n\n        public PomodoroViewModel ViewModel => DataContext as PomodoroViewModel;\n    }\n}\n",
        "gt": [
            "'OnePomodoro/OnePomodoro/OnePomodoro/PomodoroViews/EllipseClipView.xaml.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/Views/VisualSettingView.xaml.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/Services/FirstRunDisplayService.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/ViewModels/PomodoroViewModel.cs'",
            "'OnePomodoro/OnePomodoro/OnePomodoro/PomodoroViews/PomodoroView.cs'"
        ]
    },
    {
        "files": [
            "'command-line/src/DotMake.CommandLine/CliCommandBuilder.cs'",
            "'command-line/src/TestApp/Commands/ArgumentConverterCliCommand.cs'",
            "'command-line/src/TestApp/CliExamples.cs'",
            "'command-line/src/DotMake.CommandLine/Binding/TypeExtensions.cs'"
        ],
        "content": "'command-line/src/DotMake.CommandLine/CliCommandBuilder.cs'\n:using System;\nusing System.Collections.Concurrent;\nusing System.Collections.Generic;\nusing System.CommandLine;\nusing System.CommandLine.Parsing;\nusing System.Linq;\nusing System.Reflection;\nusing DotMake.CommandLine.Binding;\n\nnamespace DotMake.CommandLine\n{\n\n\n\n    public abstract class CliCommandBuilder\n    {\n\n\n\n        protected Func<ParseResult, object> Binder;\n\n        private readonly ConcurrentDictionary<ParseResult, object> bindResults = new();\n\n\n\n\n        protected CliCommandBuilder()\n        {\n            var defaults = CliCommandAttribute.Default;\n            NameCasingConvention = defaults.NameCasingConvention;\n            NamePrefixConvention = defaults.NamePrefixConvention;\n            ShortFormPrefixConvention = defaults.ShortFormPrefixConvention;\n            ShortFormAutoGenerate = defaults.ShortFormAutoGenerate;\n        }\n\n\n\n\n        public Type DefinitionType { get; protected set; }\n\n\n\n\n        public Type ParentDefinitionType { get; protected set; }\n\n\n\n\n        public CliNameCasingConvention NameCasingConvention { get; protected set; }\n\n\n\n\n        public CliNamePrefixConvention NamePrefixConvention { get; protected set; }\n\n\n\n\n        public CliNamePrefixConvention ShortFormPrefixConvention { get; protected set; }\n\n\n\n\n        public bool ShortFormAutoGenerate { get; protected set; }\n\n\n\n\n\n        public abstract CliCommand Build();\n\n\n\n\n\n\n\n\n\n\n\n        public object Bind(ParseResult parseResult)\n        {\n            return bindResults.GetOrAdd(parseResult, pr =>\n            {\n                if (Binder == null)\n                    throw new Exception(\"Binder is not set. Ensure Build method is called first.\");\n\n                return Binder(pr);\n            });\n        }\n\n\n\n\n        public IEnumerable<CliCommandBuilder> Children => GetChildren(DefinitionType);\n\n\n\n\n\n        public void Register()\n        {\n            if (DefinitionType != null)\n                Register(DefinitionType, this);\n\n            if (ParentDefinitionType != null)\n                RegisterAsChild(ParentDefinitionType, this);\n        }\n\n        #region Static\n\n        private static readonly Dictionary<Type, CliCommandBuilder> RegisteredDefinitionTypes =\n            new Dictionary<Type, CliCommandBuilder>();\n\n        private static readonly Dictionary<Type, HashSet<CliCommandBuilder>> RegisteredParentDefinitionTypes =\n            new Dictionary<Type, HashSet<CliCommandBuilder>>();\n\n\n\n\n\n\n        public static void Register<TDefinition>(CliCommandBuilder commandBuilder)\n        {\n            var definitionType = typeof(TDefinition);\n\n            Register(definitionType, commandBuilder);\n        }\n\n\n\n\n\n\n        public static void Register(Type definitionType, CliCommandBuilder commandBuilder)\n        {\n            RegisteredDefinitionTypes[definitionType] = commandBuilder;\n        }\n\n\n\n\n\n\n        public static CliCommandBuilder Get<TDefinition>()\n        {\n            var definitionType = typeof(TDefinition);\n\n            return Get(definitionType);\n        }\n\n\n\n\n\n\n        public static CliCommandBuilder Get(Type definitionType)\n        {\n            if (!RegisteredDefinitionTypes.TryGetValue(definitionType, out var commandBuilder))\n            {\n                if (definitionType.GetCustomAttribute<CliCommandAttribute>() == null)\n                    throw new Exception($\"The class '{definitionType.Name}' should have [CliCommand] attribute.\");\n\n                var parentWithoutAttribute = definitionType.RecurseWhileNotNull(t => t.DeclaringType)\n                    .FirstOrDefault(t => t.GetCustomAttribute<CliCommandAttribute>() == null);\n                if (parentWithoutAttribute != null)\n                    throw new Exception($\"The parent class '{parentWithoutAttribute.Name}' of nested class '{definitionType.Name}' should have [CliCommand] attribute.\");\n\n\n                throw new Exception($\"A registered command builder is not found for '{definitionType.Name}'. \" +\n                                    $\"Please ensure the source generator is running and generating a command builder for your definition class.\");\n            }\n\n            return commandBuilder;\n        }\n\n\n\n\n\n\n        public static void RegisterAsChild<TParentDefinition>(CliCommandBuilder childCommandBuilder)\n        {\n            var parentDefinitionType = typeof(TParentDefinition);\n\n            RegisterAsChild(parentDefinitionType, childCommandBuilder);\n        }\n\n\n\n\n\n\n        public static void RegisterAsChild(Type parentDefinitionType, CliCommandBuilder childCommandBuilder)\n        {\n            if (!RegisteredParentDefinitionTypes.TryGetValue(parentDefinitionType, out var children))\n                RegisteredParentDefinitionTypes[parentDefinitionType] = children = new HashSet<CliCommandBuilder>();\n\n            children.Add(childCommandBuilder);\n        }\n\n\n\n\n\n\n        public static IEnumerable<CliCommandBuilder> GetChildren<TParentDefinition>()\n        {\n            var parentDefinitionType = typeof(TParentDefinition);\n\n            return GetChildren(parentDefinitionType);\n        }\n\n\n\n\n\n\n        public static IEnumerable<CliCommandBuilder> GetChildren(Type parentDefinitionType)\n        {\n            if (parentDefinitionType == null\n                || !RegisteredParentDefinitionTypes.TryGetValue(parentDefinitionType, out var children))\n                return Enumerable.Empty<CliCommandBuilder>();\n\n            return children;\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n        public static Func<ArgumentResult, TCollection> GetArgumentParser<TCollection, TItem>(Func<Array, TCollection> convertFromArray, Func<string, TItem> convertFromString = null)\n        {\n            ArgumentConverter.RegisterCollectionConverter(convertFromArray);\n            ArgumentConverter.RegisterStringConverter(convertFromString);\n\n            return GetArgumentParser<TCollection>();\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n        public static Func<ArgumentResult, TArgument> GetArgumentParser<TArgument>(Func<string, TArgument> convertFromString = null)\n        {\n            ArgumentConverter.RegisterStringConverter(convertFromString);\n\n            return (result) =>\n            {\n                var tryConvertArgument = ArgumentConverter.GetConverter(result.Argument);\n\n                if (tryConvertArgument == null)\n                {\n                    result.AddError($\"No argument converter found for type '{result.Argument.ValueType}'\");\n                    return default;\n                }\n\n                tryConvertArgument(result, out var value);\n\n                return value != null\n                    ? (TArgument)value\n                    : default;\n            };\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n        public static T GetValueForOption<T>(ParseResult parseResult, CliOption<T> option)\n        {\n            var result = parseResult.GetResult(option);\n            if (result != null)\n            {\n                var value = result.GetValueOrDefault<T>();\n                if (value != null)\n                    return value;\n            }\n\n            return (T)ArgumentConverter.GetDefaultValue(typeof(T));\n        }\n\n\n        public static object GetValueForOption(ParseResult parseResult, CliOption option)\n        {\n            var result = parseResult.GetResult(option);\n            if (result != null)\n            {\n                var value = result.GetValueOrDefault<object>();\n                if (value != null)\n                    return value;\n            }\n\n            return ArgumentConverter.GetDefaultValue(option.GetArgument().ValueType);\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n        public static T GetValueForArgument<T>(ParseResult parseResult, CliArgument<T> argument)\n        {\n            var result = parseResult.GetResult(argument);\n            if (result != null)\n            {\n                var value = result.GetValueOrDefault<T>();\n                if (value != null)\n                    return value;\n            }\n\n            return (T)ArgumentConverter.GetDefaultValue(typeof(T));\n        }\n\n\n        public static object GetValueForArgument(ParseResult parseResult, CliArgument argument)\n        {\n            var result = parseResult.GetResult(argument);\n            if (result != null)\n            {\n                var value = result.GetValueOrDefault<object>();\n                if (value != null)\n                    return value;\n            }\n\n            return ArgumentConverter.GetDefaultValue(argument.ValueType);\n        }\n\n        #endregion\n    }\n}\n\n'command-line/src/TestApp/Commands/ArgumentConverterCliCommand.cs'\n:#pragma warning disable CS1591\nusing System;\nusing System.Collections.Generic;\nusing DotMake.CommandLine;\n\nnamespace TestApp.Commands\n{\n    #region ArgumentConverterCliCommand\n\n\n\n\n\n    [CliCommand]\n    public class ArgumentConverterCliCommand\n    {\n        [CliOption(Required = false)]\n        public ClassWithConstructor Opt { get; set; }\n\n        [CliOption(Required = false, AllowMultipleArgumentsPerToken = true)]\n        public ClassWithConstructor[] OptArray { get; set; }\n\n        [CliOption(Required = false)]\n        public CustomStruct? OptNullable { get; set; }\n\n        [CliOption(Required = false)]\n        public IEnumerable<ClassWithConstructor> OptEnumerable { get; set; }\n\n        [CliOption(Required = false)]\n        public List<ClassWithConstructor> OptList { get; set; }\n\n        [CliOption(Required = false)]\n        public CustomList<ClassWithConstructor> OptCustomList { get; set; }\n\n        [CliArgument]\n        public IEnumerable<ClassWithParser> Arg { get; set; }\n\n        public void Run(CliContext context)\n        {\n            context.ShowValues();\n        }\n    }\n\n    public class ClassWithConstructor\n    {\n        private readonly string value;\n\n        public ClassWithConstructor(string value)\n        {\n            if (value == \"exception\")\n                throw new Exception(\"Exception in ClassWithConstructor\");\n\n            this.value = value;\n        }\n\n        public override string ToString()\n        {\n            return value;\n        }\n    }\n\n    public class ClassWithParser\n    {\n        private string value;\n\n        public override string ToString()\n        {\n            return value;\n        }\n\n        public static ClassWithParser Parse(string value)\n        {\n            if (value == \"exception\")\n                throw new Exception(\"Exception in ClassWithParser\");\n\n            var instance = new ClassWithParser();\n            instance.value = value;\n            return instance;\n        }\n    }\n\n    public struct CustomStruct\n    {\n        private readonly string value;\n\n        public CustomStruct(string value)\n        {\n            this.value = value;\n        }\n\n        public override string ToString()\n        {\n            return value;\n        }\n    }\n\n    #endregion\n}\n\n'command-line/src/TestApp/CliExamples.cs'\n:#pragma warning disable CS1591\nusing System;\nusing System.Threading.Tasks;\nusing DotMake.CommandLine;\nusing TestApp.Commands;\n\nnamespace TestApp\n{\n\n    public class CliExamples\n    {\n        public void CliRun(string[] args)\n        {\n            #region CliRun\n\n\n            Cli.Run<RootCliCommand>(args);\n\n            #endregion\n        }\n\n        public void CliRunString()\n        {\n            #region CliRunString\n\n\n            Cli.Run<RootCliCommand>(\"NewValueForArgument1 --option-1 NewValueForOption1\");\n\n            #endregion\n        }\n\n        public int CliRunWithReturn(string[] args)\n        {\n            #region CliRunWithReturn\n\n\n            return Cli.Run<RootCliCommand>(args);\n\n            #endregion\n        }\n\n        public int CliRunStringWithReturn()\n        {\n            #region CliRunStringWithReturn\n\n\n            return Cli.Run<RootCliCommand>(\"NewValueForArgument1 --option-1 NewValueForOption1\");\n\n            #endregion\n        }\n\n\n        public async void CliRunAsync(string[] args)\n        {\n            #region CliRunAsync\n\n\n            await Cli.RunAsync<RootCliCommand>(args);\n\n            #endregion\n        }\n\n        public async void CliRunAsyncString()\n        {\n            #region CliRunAsyncString\n\n\n            await Cli.RunAsync<RootCliCommand>(\"NewValueForArgument1 --option-1 NewValueForOption1\");\n\n            #endregion\n        }\n\n        public async Task<int> CliRunAsyncWithReturn(string[] args)\n        {\n            #region CliRunAsyncWithReturn\n\n\n            return await Cli.RunAsync<RootCliCommand>(args);\n\n            #endregion\n        }\n\n        public async Task<int> CliRunAsyncStringWithReturn()\n        {\n            #region CliRunAsyncStringWithReturn\n\n\n            return await Cli.RunAsync<RootCliCommand>(\"NewValueForArgument1 --option-1 NewValueForOption1\");\n\n            #endregion\n        }\n\n\n        public void CliRunExceptions(string[] args)\n        {\n            #region CliRunExceptions\n\n\n            try\n            {\n                Cli.Run<RootCliCommand>(args);\n            }\n            catch (Exception e)\n            {\n                Console.WriteLine(@\"Exception in main: {0}\", e.Message);\n            }\n\n\n\n\n\n            Cli.Run<RootCliCommand>(args, new CliSettings { EnableDefaultExceptionHandler = true });\n\n            #endregion\n        }\n\n\n        public void CliParse(string[] args)\n        {\n            #region CliParse\n\n\n            var parseResult = Cli.Parse<RootCliCommand>(args);\n            var rootCliCommand = parseResult.Bind<RootCliCommand>();\n\n            #endregion\n        }\n\n        public void CliParseString()\n        {\n            #region CliParseString\n\n\n            var parseResult = Cli.Parse<RootCliCommand>(\"NewValueForArgument1 --option-1 NewValueForOption1\");\n            var rootCliCommand = parseResult.Bind<RootCliCommand>();\n\n            #endregion\n        }\n\n        public void CliParseWithResult(string[] args)\n        {\n            #region CliParseWithResult\n\n\n            var parseResult = Cli.Parse<RootCliCommand>(args);\n            if (parseResult.Errors.Count > 0)\n            {\n\n            }\n\n            #endregion\n        }\n\n        public void CliParseStringWithResult()\n        {\n            #region CliParseStringWithResult\n\n\n            var parseResult = Cli.Parse<RootCliCommand>(\"NewValueForArgument1 --option-1 NewValueForOption1\");\n            if (parseResult.Errors.Count > 0)\n            {\n\n            }\n\n            #endregion\n        }\n\n\n        public void CliRunDelegate()\n        {\n            #region CliRunDelegate\n\n\n\n            Cli.Run(([CliArgument] string argument1, bool option1) =>\n            {\n                Console.WriteLine($@\"Value for {nameof(argument1)} parameter is '{argument1}'\");\n                Console.WriteLine($@\"Value for {nameof(option1)} parameter is '{option1}'\");\n            });\n\n\n            Cli.Run(Method);\n\n            void Method([CliArgument] string argument2, bool option2)\n            {\n                Console.WriteLine($@\"Value for {nameof(argument2)} parameter is '{argument2}'\");\n                Console.WriteLine($@\"Value for {nameof(option2)} parameter is '{option2}'\");\n            }\n\n            #endregion\n        }\n\n        public int CliRunDelegateWithReturn()\n        {\n            #region CliRunDelegateWithReturn\n\n\n            return Cli.Run(([CliArgument] string argument1, bool option1) =>\n            {\n                Console.WriteLine($@\"Value for {nameof(argument1)} parameter is '{argument1}'\");\n                Console.WriteLine($@\"Value for {nameof(option1)} parameter is '{option1}'\");\n\n                return 0;\n            });\n\n            #endregion\n        }\n\n        public void CliRunAsyncDelegate()\n        {\n            #region CliRunAsyncDelegate\n\n\n            Cli.Run(async ([CliArgument] string argument1, bool option1) =>\n            {\n                Console.WriteLine($@\"Value for {nameof(argument1)} parameter is '{argument1}'\");\n                Console.WriteLine($@\"Value for {nameof(option1)} parameter is '{option1}'\");\n\n                await Task.Delay(1000);\n            });\n\n\n            Cli.Run(Method);\n\n            async Task Method([CliArgument] string argument2, bool option2)\n            {\n                Console.WriteLine($@\"Value for {nameof(argument2)} parameter is '{argument2}'\");\n                Console.WriteLine($@\"Value for {nameof(option2)} parameter is '{option2}'\");\n\n                await Task.Delay(1000);\n            }\n\n            #endregion\n        }\n\n        public int CliRunAsyncDelegateWithReturn()\n        {\n            #region CliRunAsyncDelegateWithReturn\n\n\n            return Cli.Run(async ([CliArgument] string argument1, bool option1) =>\n            {\n                Console.WriteLine($@\"Value for {nameof(argument1)} parameter is '{argument1}'\");\n                Console.WriteLine($@\"Value for {nameof(option1)} parameter is '{option1}'\");\n\n                await Task.Delay(1000);\n                return 0;\n            });\n\n            #endregion\n        }\n    }\n}\n\n'command-line/src/DotMake.CommandLine/Binding/TypeExtensions.cs'\n:\n\n#nullable enable\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Diagnostics.CodeAnalysis;\nusing System.Linq;\n\nnamespace DotMake.CommandLine.Binding\n{\n    internal static class TypeExtensions\n    {\n\n\n        [UnconditionalSuppressMessage(\"ReflectionAnalysis\", \"IL2070\", Justification = \"We probably pass known and used types\")]\n        internal static Type? GetElementTypeIfEnumerable(this Type type, Type? nonGenericElementType)\n        {\n\n            type = type.GetNullableUnderlyingTypeOrSelf();\n\n            if (type.IsArray)\n                return type.GetElementType();\n\n            if (type == typeof(string))\n                return null;\n\n\n            if (type.GenericTypeArguments.Length == 1\n                && type.GetGenericTypeDefinition() == typeof(IEnumerable<>))\n                return type.GenericTypeArguments[0];\n\n\n            var enumerableType = type.GetInterfaces()\n                .Where(i => i.GenericTypeArguments.Length == 1\n                                    && i.GetGenericTypeDefinition() == typeof(IEnumerable<>))\n                .Select(i => i.GenericTypeArguments[0])\n                .FirstOrDefault();\n            if (enumerableType != null)\n                return enumerableType;\n\n            if (typeof(IEnumerable).IsAssignableFrom(type))\n                return nonGenericElementType;\n\n            return null;\n        }\n\n        internal static bool IsNullable(this Type t) => Nullable.GetUnderlyingType(t) is not null;\n\n\n        internal static Type GetNullableUnderlyingTypeOrSelf(this Type type)\n        {\n            return Nullable.GetUnderlyingType(type) ?? type;\n        }\n    }\n}\n",
        "gt": [
            "'command-line/src/DotMake.CommandLine/Binding/TypeExtensions.cs'",
            "'command-line/src/DotMake.CommandLine/CliCommandBuilder.cs'",
            "'command-line/src/TestApp/Commands/ArgumentConverterCliCommand.cs'",
            "'command-line/src/TestApp/CliExamples.cs'"
        ]
    },
    {
        "files": [
            "'event_horizon/Starship/Assets/Scripts/GameDatabase/GeneratedGameCode/DataModel/Engine.cs'",
            "'event_horizon/Starship/Assets/Scripts/Domain/Ships/ShipWrapper.cs'",
            "'event_horizon/Starship/Assets/Scripts/Installers/GameInstaller.cs'",
            "'event_horizon/Starship/Assets/Scripts/GameDatabase/Legacy/LegacySatelliteBuildNames.cs'",
            "'event_horizon/Starship/Assets/Scripts/GameDatabase/GeneratedGameCode/Enums/RequiredViewMode.cs'",
            "'event_horizon/Starship/Assets/Scripts/Domain/Satellites/SatelliteExtensions.cs'"
        ],
        "content": "'event_horizon/Starship/Assets/Scripts/GameDatabase/GeneratedGameCode/DataModel/Engine.cs'\n:\n\n\n\n\n\n\n\nusing System.Linq;\nusing GameDatabase.Enums;\nusing GameDatabase.Serializable;\nusing GameDatabase.Model;\n\nnamespace GameDatabase.DataModel\n{\n\tpublic partial class Engine\n\t{\n\t\tpartial void OnDataDeserialized(EngineSerializable serializable, Database.Loader loader);\n\n\t\tpublic static Engine Create(EngineSerializable serializable, Database.Loader loader)\n\t\t{\n\t\t\treturn new Engine(serializable, loader);\n\t\t}\n\n\t\tprivate Engine(EngineSerializable serializable, Database.Loader loader)\n\t\t{\n\t\t\tPosition = serializable.Position;\n\t\t\tSize = UnityEngine.Mathf.Clamp(serializable.Size, 0f, 3.402823E+38f);\n\n\t\t\tOnDataDeserialized(serializable, loader);\n\t\t}\n\n\t\tpublic UnityEngine.Vector2 Position { get; private set; }\n\t\tpublic float Size { get; private set; }\n\n\t\tpublic static Engine DefaultValue { get; private set; }\n\t}\n}\n\n'event_horizon/Starship/Assets/Scripts/Domain/Ships/ShipWrapper.cs'\n:using Constructor.Satellites;\nusing GameDatabase.DataModel;\nusing GameDatabase.Enums;\nusing GameDatabase.Model;\nusing Maths;\nusing Utils;\n\nnamespace Constructor.Ships\n{\n    public class ShipWrapper : IShip\n    {\n        protected virtual IShip Ship { get; set; }\n\n        public static ShipWrapper Wrap(IShip ship)\n        {\n            var wrapped = new ShipWrapper();\n            if (ship is ShipWrapper wrapper) wrapped.Ship = wrapper.Ship;\n            wrapped.Ship = ship;\n            return wrapped;\n        }\n\n        public ItemId<Ship> Id => Ship.Id;\n        public string Name\n        {\n            get => Ship.Name;\n            set => Ship.Name = value;\n        }\n\n        public ShipColorScheme ColorScheme => Ship.ColorScheme;\n        public IShipModel Model => Ship.Model;\n        public IItemCollection<IntegratedComponent> Components => Ship.Components;\n        public ISatellite FirstSatellite\n        {\n            get => Ship.FirstSatellite;\n            set => Ship.FirstSatellite = value;\n        }\n        public ISatellite SecondSatellite\n        {\n            get => Ship.SecondSatellite;\n            set => Ship.SecondSatellite = value;\n        }\n\n        public DifficultyClass ExtraThreatLevel => Ship.ExtraThreatLevel;\n\n        public Experience Experience\n        {\n            get => Ship.Experience;\n            set => Ship.Experience = value;\n        }\n\n        public ShipBuilder CreateBuilder() => Ship.CreateBuilder();\n\n        public bool DataChanged\n        {\n            get => Ship.DataChanged;\n            set => Ship.DataChanged = value;\n        }\n\n        public int RemoveInvalidComponents(IGameItemCollection<ComponentInfo> inventory) =>\n            Ship.RemoveInvalidComponents(inventory);\n    }\n\n    public delegate IShip ShipProvider();\n    public class LazyShip : ShipWrapper\n    {\n        private ShipProvider _provider;\n        private IShip _cache;\n        public LazyShip(ShipProvider provider)\n        {\n            _provider = provider;\n        }\n\n        protected override IShip Ship\n        {\n            get\n            {\n                if (_cache != null) return _cache;\n                _cache = _provider();\n                _provider = null;\n\n                return _cache;\n            }\n            set => _cache = value;\n        }\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/Installers/GameInstaller.cs'\n:using System;\nusing Combat.Domain;\nusing Combat.Scene;\nusing Constructor.Ships;\nusing Domain.Player;\nusing Domain.Quests;\nusing Economy;\nusing Economy.ItemType;\nusing Economy.Products;\nusing Galaxy;\nusing Galaxy.StarContent;\nusing Game;\nusing Game.Exploration;\nusing GameModel.Quests;\nusing GameServices;\nusing GameServices.Database;\nusing GameServices.Economy;\nusing GameServices.GameManager;\nusing GameServices.Gui;\nusing GameServices.Multiplayer;\nusing GameServices.Player;\nusing GameServices.Quests;\nusing GameServices.Random;\nusing GameServices.Research;\nusing GameStateMachine;\nusing GameStateMachine.States;\nusing Services.Gui;\nusing Services.InternetTime;\nusing Services.Messenger;\nusing Session;\nusing Session.Content;\nusing UnityEngine;\nusing Zenject;\nusing PlayerInventory = GameServices.Player.PlayerInventory;\n\nnamespace Installers\n{\n    public class GameInstaller : MonoInstaller<GameInstaller>\n    {\n        [SerializeField] GameModel.Config _config;\n\n        public override void InstallBindings()\n        {\n#if EDITOR_MODE\n            InstallEditorBindings();\n            return;\n#endif\n\n            Container.BindAllInterfaces<RandomGenerator>().To<RandomGenerator>().AsSingle();\n\n            Container.Bind<GameModel.Config>().FromInstance(_config);\n\n            Container.Bind<IGameDataManager>().To<GameDataManager>().FromGameObject().AsSingle().NonLazy();\n\n            Container.Bind<GameFlow>().FromGameObject().AsSingle().NonLazy();\n\n            Container.BindAllInterfacesAndSelf<StarMap>().To<StarMap>().AsSingle();\n\n            Container.BindAllInterfacesAndSelf<Research>().To<Research>().AsSingle();\n\n            Container.Bind<OfflineMultiplayer>().To<OfflineMultiplayer>().AsSingle().NonLazy();\n\n            Container.Bind<ItemTypeFactory>();\n            Container.Bind<ProductFactory>();\n            Container.Bind<LootGenerator>();\n            Container.Bind<ModificationFactory>();\n\n            Container.BindFactory<CombatModelBuilder, CombatModelBuilder.Factory>();\n            Container.BindSignal<ShipCreatedSignal>();\n            Container.BindTrigger<ShipCreatedSignal.Trigger>();\n            Container.BindSignal<ShipDestroyedSignal>();\n            Container.BindTrigger<ShipDestroyedSignal.Trigger>();\n\n            Container.Bind<Cheats>();\n            Container.Bind<GuiHelper>();\n            Container.Bind<HolidayManager>().AsSingle();\n            Container.Bind<NotificationManager>().AsSingle().NonLazy();\n            Container.BindAllInterfacesAndSelf<GameTime>().To<GameTime>().AsSingle().NonLazy();\n\n            Container.BindAllInterfaces<Technologies>().To<Technologies>().AsSingle();\n            Container.Bind<Skills>().AsSingle();\n\n            Container.Bind<Planet.Factory>().AsCached();\n\n            Container.Bind<SignalsTranslator>().AsSingle().NonLazy();\n\n            BindPlayerData();\n            BindQuestManager();\n            BindStarContent();\n            BindDatabase();\n            BindStateMachine();\n            BindLegacyServices();\n            BindSignals();\n        }\n\n        private void BindPlayerData()\n        {\n            Container.BindAllInterfacesAndSelf<PlayerSkills>().To<PlayerSkills>().AsSingle();\n            Container.BindAllInterfacesAndSelf<PlayerFleet>().To<PlayerFleet>().AsSingle();\n            Container.BindAllInterfacesAndSelf<PlayerResources>().To<PlayerResources>().AsSingle();\n            Container.BindAllInterfacesAndSelf<MotherShip>().To<MotherShip>().AsSingle();\n            Container.BindAllInterfacesAndSelf<PlayerInventory>().To<PlayerInventory>().AsSingle();\n            Container.BindAllInterfacesAndSelf<SupplyShip>().To<SupplyShip>().AsSingle().NonLazy();\n            Container.BindAllInterfacesAndSelf<StarMapManager>().To<StarMapManager>().AsSingle().NonLazy();\n        }\n\n        private void BindQuestManager()\n        {\n            Container.BindAllInterfaces<QuestManager>().To<QuestManager>().AsSingle();\n            Container.BindSignal<QuestListChangedSignal>();\n            Container.BindTrigger<QuestListChangedSignal.Trigger>();\n            Container.BindSignal<QuestActionRequiredSignal>();\n            Container.BindTrigger<QuestActionRequiredSignal.Trigger>();\n            Container.BindSignal<QuestEventSignal>();\n            Container.BindTrigger<QuestEventSignal.Trigger>();\n            Container.Bind<QuestFactory>().AsSingle();\n            Container.Bind<FleetFactory>().AsSingle();\n            Container.Bind<RequirementsFactory>().AsSingle();\n\n            Container.Bind<InventoryFactory>();\n            Container.BindFactory<GameDatabase.DataModel.LootModel, QuestContext, Loot, Loot.Factory>();\n\n\n\n\n        }\n\n        private void BindStarContent()\n        {\n            Container.BindAllInterfacesAndSelf<StarData>().To<StarData>().AsSingle();\n            Container.Bind<Occupants>().AsSingle();\n            Container.Bind<Boss>().AsSingle();\n            Container.Bind<Ruins>().AsSingle();\n            Container.Bind<Challenge>().AsSingle();\n            Container.Bind<LocalEvent>().AsSingle();\n            Container.Bind<Survival>().AsSingle();\n            Container.Bind<Wormhole>().AsSingle();\n            Container.Bind<StarBase>().AsSingle();\n            Container.Bind<XmasTree>().AsSingle();\n            Container.Bind<Hive>().AsSingle();\n        }\n\n        private void BindDatabase()\n        {\n#if EDITOR_MODE\n            Container.BindAllInterfacesAndSelf<SessionDataStub>().To<SessionDataStub>().AsSingle();\n#else\n            Container.BindAllInterfacesAndSelf<SessionData>().To<SessionData>().AsSingle();\n#endif\n            Container.Bind<ContentFactory>();\n\n            Container.BindSignal<SessionCreatedSignal>();\n            Container.BindTrigger<SessionCreatedSignal.Trigger>();\n            Container.BindSignal<SessionDataLoadedSignal>();\n            Container.BindTrigger<SessionDataLoadedSignal.Trigger>();\n\n            Container.BindSignal<PlayerPositionChangedSignal>();\n            Container.BindTrigger<PlayerPositionChangedSignal.Trigger>();\n            Container.BindSignal<NewStarExploredSignal>();\n            Container.BindTrigger<NewStarExploredSignal.Trigger>();\n            Container.BindSignal<MoneyValueChangedSignal>();\n            Container.BindTrigger<MoneyValueChangedSignal.Trigger>();\n            Container.BindSignal<FuelValueChangedSignal>();\n            Container.BindTrigger<FuelValueChangedSignal.Trigger>();\n            Container.BindSignal<StarsValueChangedSignal>();\n            Container.BindTrigger<StarsValueChangedSignal.Trigger>();\n            Container.BindSignal<PlayerSkillsResetSignal>();\n            Container.BindTrigger<PlayerSkillsResetSignal.Trigger>();\n            Container.BindSignal<TokensValueChangedSignal>();\n            Container.BindTrigger<TokensValueChangedSignal.Trigger>();\n            Container.BindSignal<ResourcesChangedSignal>();\n            Container.BindTrigger<ResourcesChangedSignal.Trigger>();\n        }\n\n        private void BindStateMachine()\n        {\n            Container.BindAllInterfaces<StateMachine>().To<StateMachine>().AsSingle().NonLazy();\n            Container.Bind<GameStateFactory>();\n\n            Container.Bind<TravelState>();\n            Container.BindFactory<int, TravelState, TravelState.Factory>();\n\n\t\t\tContainer.Bind<RetreatState>();\n\t\t\tContainer.BindFactory<RetreatState, RetreatState.Factory>();\n\n            Container.Bind<InitializationState>();\n            Container.BindFactory<InitializationState, InitializationState.Factory>();\n\n            Container.Bind<EditorInitializationState>();\n            Container.BindFactory<EditorInitializationState, EditorInitializationState.Factory>();\n\n            Container.Bind<MainMenuState>();\n            Container.BindFactory<MainMenuState, MainMenuState.Factory>();\n\n            Container.Bind<StarMapState>();\n            Container.BindFactory<StarMapState, StarMapState.Factory>();\n\n\t\t\tContainer.Bind<QuestState>();\n\t\t\tContainer.BindFactory<IUserInteraction, QuestState, QuestState.Factory>();\n\n            Container.Bind<SkillTreeState>();\n            Container.BindFactory<SkillTreeState, SkillTreeState.Factory>();\n\n            Container.Bind<ConstructorState>();\n            Container.BindFactory<IShip, ConstructorState, ConstructorState.Factory>();\n\n            Container.Bind<DialogState>();\n            Container.BindFactory<string, WindowArgs, Action<WindowExitCode>, DialogState, DialogState.Factory>();\n\n            Container.Bind<TestingState>();\n            Container.BindFactory<TestingState, TestingState.Factory>();\n\n            Container.Bind<CombatState>();\n            Container.BindFactory<ICombatModel, Action<ICombatModel>, CombatState, CombatState.Factory>();\n\n            Container.Bind<ExplorationState>();\n            Container.BindFactory<Planet, ExplorationState, ExplorationState.Factory>();\n\n            Container.Bind<EhopediaState>();\n            Container.BindFactory<EhopediaState, EhopediaState.Factory>();\n\n            Container.Bind<CombatRewardState>();\n            Container.BindFactory<IReward, CombatRewardState, CombatRewardState.Factory>();\n\n            Container.Bind<AnnouncementState>();\n            Container.BindFactory<AnnouncementState, AnnouncementState.Factory>();\n\n            Container.BindSignal<GameStateChangedSignal>();\n            Container.BindTrigger<GameStateChangedSignal.Trigger>();\n            Container.BindSignal<StartGameSignal>();\n            Container.BindTrigger<StartGameSignal.Trigger>();\n            Container.BindSignal<StartTravelSignal>();\n            Container.BindTrigger<StartTravelSignal.Trigger>();\n\t\t\tContainer.BindSignal<RetreatSignal>();\n\t\t\tContainer.BindTrigger<RetreatSignal.Trigger>();\n            Container.BindSignal<StartBattleSignal>();\n            Container.BindTrigger<StartBattleSignal.Trigger>();\n            Container.BindSignal<StartQuickBattleSignal>();\n            Container.BindTrigger<StartQuickBattleSignal.Trigger>();\n            Container.BindSignal<ExitSignal>();\n            Container.BindTrigger<ExitSignal.Trigger>();\n            Container.BindSignal<OpenSkillTreeSignal>();\n            Container.BindTrigger<OpenSkillTreeSignal.Trigger>();\n            Container.BindSignal<OpenConstructorSignal>();\n            Container.BindTrigger<OpenConstructorSignal.Trigger>();\n            Container.BindSignal<OpenShopSignal>();\n            Container.BindTrigger<OpenShopSignal.Trigger>();\n            Container.BindSignal<OpenWorkshopSignal>();\n            Container.BindTrigger<OpenWorkshopSignal.Trigger>();\n            Container.BindSignal<OpenEhopediaSignal>();\n            Container.BindTrigger<OpenEhopediaSignal.Trigger>();\n            Container.BindSignal<ConfigureControlsSignal>();\n            Container.BindTrigger<ConfigureControlsSignal.Trigger>();\n            Container.BindSignal<ShipSelectedSignal>();\n            Container.BindTrigger<ShipSelectedSignal.Trigger>();\n            Container.BindSignal<CombatCompletedSignal>();\n            Container.BindTrigger<CombatCompletedSignal.Trigger>();\n            Container.BindSignal<OpenShipyardSignal>();\n            Container.BindTrigger<OpenShipyardSignal.Trigger>();\n            Container.BindSignal<StartExplorationSignal>();\n            Container.BindTrigger<StartExplorationSignal.Trigger>();\n            Container.BindSignal<SupplyShipActivatedSignal>();\n            Container.BindTrigger<SupplyShipActivatedSignal.Trigger>();\n        }\n\n        private void BindSignals()\n        {\n            Container.BindSignal<SessionAboutToSaveSignal>();\n            Container.BindTrigger<SessionAboutToSaveSignal.Trigger>();\n            Container.BindSignal<MultiplayerStatusChangedSignal>();\n            Container.BindTrigger<MultiplayerStatusChangedSignal.Trigger>();\n            Container.BindSignal<EnemyFleetLoadedSignal>();\n            Container.BindTrigger<EnemyFleetLoadedSignal.Trigger>();\n            Container.BindSignal<EnemyFoundSignal>();\n            Container.BindTrigger<EnemyFoundSignal.Trigger>();\n            Container.BindSignal<GameModel.BaseCapturedSignal>();\n            Container.BindTrigger<GameModel.BaseCapturedSignal.Trigger>();\n            Container.BindSignal<GameModel.RegionFleetDefeatedSignal>();\n            Container.BindTrigger<GameModel.RegionFleetDefeatedSignal.Trigger>();\n            Container.BindSignal<StarContentChangedSignal>();\n            Container.BindTrigger<StarContentChangedSignal.Trigger>();\n        }\n\n        private void BindLegacyServices()\n        {\n            Container.BindAllInterfacesAndSelf<GameModel.RegionMap>().To<GameModel.RegionMap>().AsSingle();\n        }\n\n        private void InstallEditorBindings()\n        {\n            Container.BindAllInterfaces<RandomGenerator>().To<RandomGenerator>().AsSingle();\n            Container.Bind<GuiHelper>();\n            Container.Bind<NotificationManager>().AsSingle().NonLazy();\n            Container.Bind<SignalsTranslator>().AsSingle().NonLazy();\n\n            Container.Bind<GameModel.Config>().FromInstance(_config);\n\n            Container.BindSignal<ShipCreatedSignal>();\n            Container.BindTrigger<ShipCreatedSignal.Trigger>();\n            Container.BindSignal<ShipDestroyedSignal>();\n            Container.BindTrigger<ShipDestroyedSignal.Trigger>();\n\n            BindDatabase();\n            BindStateMachine();\n            BindLegacyServices();\n            BindSignals();\n        }\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/GameDatabase/Legacy/LegacySatelliteBuildNames.cs'\n:using System.Collections.Generic;\nusing GameDatabase.DataModel;\nusing GameDatabase.Model;\n\nnamespace Database.Legacy\n{\n    public static class LegacySatelliteBuildNames\n    {\n        public static ItemId<Satellite> GetId(string value) { int id; return new ItemId<Satellite>(_items.TryGetValue(value, out id) ? id : -1); }\n\n        private static readonly Dictionary<string, int> _items = new Dictionary<string, int>()\n        {\n            { \"1l_1\", 1 },\n            { \"1m_1\", 2 },\n            { \"1s_1\", 3 },\n            { \"2l_1\", 4 },\n            { \"2l_2\", 5 },\n            { \"2l_3\", 6 },\n            { \"2m_1\", 7 },\n            { \"2s_1\", 8 },\n            { \"3l_1\", 9 },\n            { \"3l_2\", 10 },\n            { \"3m_1\", 11 },\n            { \"3s_1\", 12 },\n            { \"4l_1\", 13 },\n            { \"4l_2\", 14 },\n            { \"4m_1\", 15 },\n            { \"4s_1\", 16 },\n            { \"5l_1\", 17 },\n            { \"5l_2\", 18 },\n            { \"5m_1\", 19 },\n            { \"5s_1\", 20 },\n            { \"6l_1\", 21 },\n            { \"6l_2\", 22 },\n            { \"6m_1\", 23 },\n            { \"6m_2\", 24 },\n            { \"6s_1\", 25 },\n            { \"7l_1\", 26 },\n            { \"7m_1\", 27 },\n            { \"7s_1\", 28 },\n        };\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/GameDatabase/GeneratedGameCode/Enums/RequiredViewMode.cs'\n:\n\n\n\n\n\n\n\nnamespace GameDatabase.Enums\n{\n\tpublic enum RequiredViewMode\n\t{\n\t\tAny = 0,\n\t\tStarSystem = 1,\n\t\tStarMap = 2,\n\t\tGalaxyMap = 3,\n\t}\n}\n\n'event_horizon/Starship/Assets/Scripts/Domain/Satellites/SatelliteExtensions.cs'\n:﻿using System.Collections.Generic;\nusing System.Linq;\nusing Database.Legacy;\nusing GameDatabase;\nusing GameDatabase.DataModel;\nusing GameDatabase.Enums;\nusing GameDatabase.Model;\nusing Session.Content;\n\nnamespace Constructor.Satellites\n{\n    public static class SatelliteExtensions\n    {\n        public static ISatellite CreateCopy(this ISatellite satellite)\n        {\n            if (satellite == null)\n                return null;\n\n            return new CommonSatellite(satellite.Information, satellite.Components);\n        }\n\n        public static ISatellite FromSatelliteData(IDatabase database, SatelliteData data,\n            List<ShipComponentsData.Component> orphanedComponents = null)\n        {\n            var satellite = database.GetSatellite(new ItemId<Satellite>(data.Id));\n            if (satellite == null)\n            {\n                orphanedComponents?.AddRange(data.Components.Components);\n                return null;\n            }\n\n            return new CommonSatellite(satellite, data.Components.FromShipComponentsData(database));\n        }\n\n        public static SatelliteData ToSatelliteData(this ISatellite satellite)\n        {\n            if (satellite == null)\n                return new SatelliteData { Id = 0, Components = new ShipComponentsData() };\n\n            var info = new SatelliteData\n            {\n                Id = satellite.Information.Id.Value,\n                Components = satellite.Components.ToShipComponentsData()\n            };\n\n            return info;\n        }\n\n        public static bool IsSuitable(this Satellite satellite, SizeClass shipClass, float shipModelScale)\n        {\n            if (satellite.SizeClass != SizeClass.Undefined)\n                return shipClass >= satellite.SizeClass;\n\n            return shipModelScale >= satellite.ModelScale * 2;\n        }\n\n        public static IEnumerable<SatelliteBuild> SuitableFor(this IEnumerable<SatelliteBuild> satellites, Ship ship)\n        {\n            return satellites.Where(item => item.Satellite.IsSuitable(ship.SizeClass, ship.ModelScale));\n        }\n\n        public static IEnumerable<SatelliteBuild> LimitClass(this IEnumerable<SatelliteBuild> satellites,\n            DifficultyClass shipClass)\n        {\n            return satellites.Where(item => item.DifficultyClass <= shipClass);\n        }\n\n        #region Obsolete\n        public static ISatellite FromSatelliteInfo(IDatabase database, FleetData.SatelliteInfoV2 info)\n        {\n            if (string.IsNullOrEmpty(info.Id))\n                return null;\n\n            int id;\n            return new CommonSatellite(database.GetSatellite(int.TryParse(info.Id, out id) ? new ItemId<Satellite>(id) : LegacySatelliteNames.GetId(info.Id)),\n                info.Components.Select(item => ComponentExtensions.Deserialize(database, item)));\n        }\n\n        public static ISatellite FromSatelliteInfoObsolete(IDatabase database, FleetData.SatelliteInfoV2 info)\n        {\n            if (string.IsNullOrEmpty(info.Id))\n                return null;\n\n            int id;\n            return new CommonSatellite(database.GetSatellite(int.TryParse(info.Id, out id) ? new ItemId<Satellite>(id) : LegacySatelliteNames.GetId(info.Id)),\n                info.Components.Select(item => ComponentExtensions.DeserializeObsolete(database, item)));\n        }\n        #endregion\n    }\n}\n",
        "gt": [
            "'event_horizon/Starship/Assets/Scripts/GameDatabase/GeneratedGameCode/Enums/RequiredViewMode.cs'",
            "'event_horizon/Starship/Assets/Scripts/GameDatabase/GeneratedGameCode/DataModel/Engine.cs'",
            "'event_horizon/Starship/Assets/Scripts/GameDatabase/Legacy/LegacySatelliteBuildNames.cs'",
            "'event_horizon/Starship/Assets/Scripts/Domain/Satellites/SatelliteExtensions.cs'",
            "'event_horizon/Starship/Assets/Scripts/Domain/Ships/ShipWrapper.cs'",
            "'event_horizon/Starship/Assets/Scripts/Installers/GameInstaller.cs'"
        ]
    },
    {
        "files": [
            "'vMixUTC/vMixController/Controls/vMixControlContainerDummy.cs'",
            "'vMixUTC/vMixController/Converters/ValueNullToStringConverter.cs'",
            "'vMixUTC/vMixController/Converters/ControlIntToParameterConverter.cs'",
            "'vMixUTC/vMixController/Widgets/vMixControlTBar.cs'"
        ],
        "content": "'vMixUTC/vMixController/Controls/vMixControlContainerDummy.cs'\n:﻿using CommonServiceLocator;\nusing GalaSoft.MvvmLight.CommandWpf;\nusing System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Data;\nusing System.Windows.Input;\nusing System.Windows.Media;\nusing vMixController.Classes;\nusing vMixController.Converters;\nusing vMixController.ViewModel;\n\nnamespace vMixController.Controls\n{\n    public class vMixControlContainerDummy: UserControl\n    {\n        protected override void OnInitialized(EventArgs e)\n        {\n\n            base.OnInitialized(e);\n            var CC = new vMixControlContainer\n            {\n                ParentContainer = this\n            };\n            Content = CC;\n            PreviewMouseDown += VMixControlContainerDummy_PreviewMouseDown;\n\n            this.SizeChanged += CC_SizeChanged;\n        }\n\n        private void VMixControlContainerDummy_PreviewMouseDown(object sender, System.Windows.Input.MouseButtonEventArgs e)\n        {\n            if (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl))\n            {\n                Control.Selected = !Control.Selected && !Control.Locked;\n                e.Handled = true;\n            }\n        }\n\n\n\n        public Color BorderColorProxy\n        {\n            get { return (Color)GetValue(BorderColorProxyProperty); }\n            set { SetValue(BorderColorProxyProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty BorderColorProxyProperty =\n            DependencyProperty.Register(\"BorderColorProxy\", typeof(Color), typeof(vMixControlContainerDummy), new PropertyMetadata(null));\n\n\n\n\n        public bool IsBorderDashed\n        {\n            get { return (bool)GetValue(IsBorderDashedProperty); }\n            set { SetValue(IsBorderDashedProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty IsBorderDashedProperty =\n            DependencyProperty.Register(\"IsBorderDashed\", typeof(bool), typeof(vMixControlContainerDummy), new PropertyMetadata(false));\n\n\n\n\n        public string Caption\n        {\n            get { return (string)GetValue(CaptionProperty); }\n            set { SetValue(CaptionProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty CaptionProperty =\n            DependencyProperty.Register(\"Caption\", typeof(string), typeof(vMixControlContainerDummy), new PropertyMetadata(\"\"));\n\n\n\n\n        public vMixController.Widgets.vMixControl Control\n        {\n            get { return (vMixController.Widgets.vMixControl)GetValue(ControlProperty); }\n            set { SetValue(ControlProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty ControlProperty =\n            DependencyProperty.Register(\"Control\", typeof(vMixController.Widgets.vMixControl), typeof(vMixControlContainerDummy), new PropertyMetadata(null, _controlChanged));\n\n        private static void _controlChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n        {\n            BindingOperations.ClearBinding(d, VisibilityProperty);\n\n            MultiBinding b = new MultiBinding() { Converter = new IntegersToVisibilityConverter() };\n            b.Bindings.Add(new Binding(\"Page\") { Source = e.NewValue });\n            b.Bindings.Add(new Binding(\"PageIndex\") { Source = ServiceLocator.Current.GetInstance<MainViewModel>() });\n            BindingOperations.SetBinding(d, VisibilityProperty, b);\n\n\n        }\n\n        public RelayCommand<Widgets.vMixControl> CloseCommand\n        {\n            get { return (RelayCommand<Widgets.vMixControl>)GetValue(CloseCommandProperty); }\n            set { SetValue(CloseCommandProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty CloseCommandProperty =\n            DependencyProperty.Register(\"CloseCommand\", typeof(RelayCommand<Widgets.vMixControl>), typeof(vMixControlContainerDummy), new PropertyMetadata(null));\n\n\n\n        public RelayCommand<Widgets.vMixControl> SettingsCommand\n        {\n            get { return (RelayCommand<Widgets.vMixControl>)GetValue(SettingsCommandProperty); }\n            set { SetValue(SettingsCommandProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty SettingsCommandProperty =\n            DependencyProperty.Register(\"SettingsCommand\", typeof(RelayCommand<Widgets.vMixControl>), typeof(vMixControlContainerDummy), new PropertyMetadata(null));\n\n\n\n\n        public RelayCommand<Widgets.vMixControl> CopyCommand\n        {\n            get { return (RelayCommand<Widgets.vMixControl>)GetValue(CopyCommandProperty); }\n            set { SetValue(CopyCommandProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty CopyCommandProperty =\n            DependencyProperty.Register(\"CopyCommand\", typeof(RelayCommand<Widgets.vMixControl>), typeof(vMixControlContainerDummy), new PropertyMetadata(null));\n\n\n\n\n        public RelayCommand<ControlIntParameter> MoveCommand\n        {\n            get { return (RelayCommand<ControlIntParameter>)GetValue(MoveCommandProperty); }\n            set { SetValue(MoveCommandProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty MoveCommandProperty =\n            DependencyProperty.Register(\"MoveCommand\", typeof(RelayCommand<ControlIntParameter>), typeof(vMixControlContainerDummy), new PropertyMetadata(null));\n\n\n\n        public RelayCommand<Widgets.vMixControl> ScaleUpCommand\n        {\n            get { return (RelayCommand<Widgets.vMixControl>)GetValue(ScaleUpCommandProperty); }\n            set { SetValue(ScaleUpCommandProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty ScaleUpCommandProperty =\n            DependencyProperty.Register(\"ScaleUpCommand\", typeof(RelayCommand<Widgets.vMixControl>), typeof(vMixControlContainerDummy), new PropertyMetadata(null));\n\n\n        public RelayCommand<Widgets.vMixControl> ScaleDownCommand\n        {\n            get { return (RelayCommand<Widgets.vMixControl>)GetValue(ScaleDownCommandProperty); }\n            set { SetValue(ScaleDownCommandProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty ScaleDownCommandProperty =\n            DependencyProperty.Register(\"ScaleDownCommand\", typeof(RelayCommand<Widgets.vMixControl>), typeof(vMixControlContainerDummy), new PropertyMetadata(null));\n\n        public RelayCommand<Widgets.vMixControl> ToggleCaptionCommand\n        {\n            get { return (RelayCommand<Widgets.vMixControl>)GetValue(ToggleCaptionCommandProperty); }\n            set { SetValue(ToggleCaptionCommandProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty ToggleCaptionCommandProperty =\n            DependencyProperty.Register(\"ToggleCaptionCommand\", typeof(RelayCommand<Widgets.vMixControl>), typeof(vMixControlContainerDummy), new PropertyMetadata(null));\n\n        public RelayCommand<Widgets.vMixControl> SwitchPasswordLockableCommand\n        {\n            get { return (RelayCommand<Widgets.vMixControl>)GetValue(SwitchPasswordLockableCommandProperty); }\n            set { SetValue(SwitchPasswordLockableCommandProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty SwitchPasswordLockableCommandProperty =\n            DependencyProperty.Register(\"SwitchPasswordLockableCommand\", typeof(RelayCommand<Widgets.vMixControl>), typeof(vMixControlContainerDummy), new PropertyMetadata(null));\n\n\n\n\n        public object MainContent\n        {\n            get { return (object)GetValue(MainContentProperty); }\n            set { SetValue(MainContentProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty MainContentProperty =\n            DependencyProperty.Register(\"MainContent\", typeof(object), typeof(vMixControlContainerDummy), new PropertyMetadata(null));\n\n\n\n        public object CaptionContent\n        {\n            get { return (object)GetValue(CaptionContentProperty); }\n            set { SetValue(CaptionContentProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty CaptionContentProperty =\n            DependencyProperty.Register(\"CaptionContent\", typeof(object), typeof(vMixControlContainerDummy), new PropertyMetadata(null));\n\n        private void CC_SizeChanged(object sender, SizeChangedEventArgs e)\n        {\n\n\n            if (!Control.IsResizeableVertical)\n            {\n                if (!double.IsNaN(((vMixControlContainer)Content).ContentControl.ActualHeight) && ((vMixControlContainer)Content).ContentControl.ActualHeight != 0)\n                    Control.Height = ((vMixControlContainer)Content).ContentControl.ActualHeight;\n                if (!double.IsNaN(((vMixControlContainer)Content).Caption.ActualHeight) && ((vMixControlContainer)Content).Caption.ActualHeight != 0)\n                    Control.CaptionHeight = ((vMixControlContainer)Content).Caption.ActualHeight;\n            }\n        }\n\n\n    }\n\n    public class LockButtonConverter : IValueConverter\n    {\n        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            return ((bool)value) ? (char)0xF33E : (char)0xF340;\n        }\n\n        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            throw new NotImplementedException();\n        }\n    }\n\n    public class LockToVisibilityConverter : IValueConverter\n    {\n        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            return ((bool)value) ? Visibility.Hidden : Visibility.Visible;\n        }\n\n        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n\n'vMixUTC/vMixController/Converters/ValueNullToStringConverter.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Data;\nusing System.Windows.Markup;\n\nnamespace vMixController.Converters\n{\n    public class ValueNullToStringConverter : MarkupExtension, IValueConverter\n    {\n        private static IValueConverter _instance;\n\n\n\n\n        public static IValueConverter Instance => _instance ?? (_instance = new ValueNullToStringConverter());\n\n        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            if (value == null) return \"0\";\n            else return value;\n        }\n\n        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)\n        {\n            if (value == null) return \"0\";\n            else return value;\n        }\n\n        public override object ProvideValue(IServiceProvider serviceProvider)\n        {\n            return Instance;\n        }\n    }\n    }\n\n'vMixUTC/vMixController/Converters/ControlIntToParameterConverter.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Data;\nusing System.Windows.Markup;\nusing vMixController.Classes;\nusing vMixController.Widgets;\n\nnamespace vMixController.Converters\n{\n    public class ControlIntToParameterConverter : MarkupExtension, IMultiValueConverter\n    {\n        private static IMultiValueConverter _instance;\n\n\n\n\n        public static IMultiValueConverter Instance => _instance ?? (_instance = new ControlIntToParameterConverter());\n\n        public object Convert(object[] values, Type targetType, object parameter, CultureInfo culture)\n        {\n            return new ControlIntParameter((vMixControl)values[0], (int)values[1]);\n        }\n\n        public object[] ConvertBack(object value, Type[] targetTypes, object parameter, CultureInfo culture)\n        {\n            throw new NotImplementedException();\n        }\n\n        public override object ProvideValue(IServiceProvider serviceProvider)\n        {\n            return Instance;\n        }\n    }\n}\n\n'vMixUTC/vMixController/Widgets/vMixControlTBar.cs'\n:﻿using GalaSoft.MvvmLight.CommandWpf;\nusing Microsoft.VisualBasic.ApplicationServices;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Controls;\nusing vMixController.Classes;\nusing vMixController.Controls;\nusing vMixController.PropertiesControls;\n\nnamespace vMixController.Widgets\n{\n    public class vMixControlTBar : vMixControl\n    {\n        public override string Type => \"TBar\";\n        public override bool IsResizeableVertical => true;\n        private bool _reverse = false;\n        private bool _reset = false;\n        public override int MaxCount => 1;\n\n        public vMixControlTBar()\n        {\n            Height = 48;\n        }\n\n\n\n\n        public const string StylePropertyName = \"Style\";\n\n        private string _style = \"Horizontal\";\n\n\n\n\n\n        public string Style\n        {\n            get\n            {\n                return _style;\n            }\n\n            set\n            {\n                if (_style == value)\n                {\n                    return;\n                }\n\n                _style = value;\n                RaisePropertyChanged(StylePropertyName);\n            }\n        }\n\n\n\n\n        public const string ModePropertyName = \"Mode\";\n\n        private string _mode = \"A/B\";\n\n\n\n\n\n        public string Mode\n        {\n            get\n            {\n                return _mode;\n            }\n\n            set\n            {\n                if (_mode == value)\n                {\n                    return;\n                }\n\n                _mode = value;\n                RaisePropertyChanged(ModePropertyName);\n            }\n        }\n\n        public int Value\n        {\n            get { return (int)GetValue(ValueProperty); }\n            set { SetValue(ValueProperty, value); }\n        }\n\n\n        public static readonly DependencyProperty ValueProperty =\n            DependencyProperty.Register(\"Value\", typeof(int), typeof(vMixControlTBar), new PropertyMetadata(0, ValueChanged));\n\n        private static void ValueChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)\n        {\n            var bar = ((vMixControlTBar)d);\n            if (e.Property.Name == \"Value\" && !bar._reset)\n            {\n                int value = Math.Min((int)e.NewValue, 255);\n\n                bool reverse = bar._reverse;\n                value = reverse ? 255 - value : value;\n                bar.SendValue(value);\n                if (value == 255 && bar.Mode != \"Snap Back\")\n                    ((vMixControlTBar)d)._reverse = !reverse;\n            }\n            else\n                bar._reset = false;\n        }\n\n        public override UserControl[] GetPropertiesControls()\n        {\n            var styleComboBox = GetPropertyControl<ComboBoxControl>();\n            styleComboBox.Title = Extensions.LocalizationManager.Get(\"Style\");\n            styleComboBox.Items = new System.Collections.ObjectModel.ObservableCollection<string>\n            {\n                \"Horizontal\",\n                \"Vertical\"\n            };\n            styleComboBox.Value = Style;\n\n            var modeComboBox = GetPropertyControl<ComboBoxControl>(Type + \"Mode\");\n            modeComboBox.Title = Extensions.LocalizationManager.Get(\"Mode\");\n            modeComboBox.Items = new System.Collections.ObjectModel.ObservableCollection<string>\n            {\n                \"A/B\",\n                \"Snap Back\"\n            };\n            modeComboBox.Value = Mode;\n\n            return (new UserControl[] { styleComboBox, modeComboBox }).Concat(base.GetPropertiesControls()).ToArray();\n        }\n\n        public override void SetProperties(UserControl[] _controls)\n        {\n            Style = (string)((ComboBoxControl)_controls.Where(x => x is ComboBoxControl).FirstOrDefault()).Value;\n            Mode = (string)((ComboBoxControl)_controls.Where(x => x is ComboBoxControl).LastOrDefault()).Value;\n\n            Value = 0;\n            _reverse = false;\n\n            base.SetProperties(_controls);\n        }\n\n        public override void Update()\n        {\n            Height++;\n            Height--;\n\n            base.Update();\n        }\n\n        private void SendValue(int value)\n        {\n            if (!_sending || value == 0 || value == 255)\n            {\n                if (State != null)\n                    _sending = true;\n                State?.SendFunction(string.Format(\"Function=SetFader&Value={0}\", value), true, (c) =>\n                {\n                    _sending = false;\n                });\n            }\n        }\n\n        internal override void OnStateSynced()\n        {\n            Value = 0;\n            _sending = false;\n            _reverse = false;\n            base.OnStateSynced();\n        }\n\n        private RelayCommand<RoutedEventArgs> _valueChangedCommand;\n        private bool _sending;\n\n\n\n\n        public RelayCommand<RoutedEventArgs> ValueChangedCommand\n        {\n            get\n            {\n                return _valueChangedCommand\n                    ?? (_valueChangedCommand = new RelayCommand<RoutedEventArgs>(\n                    (p) =>\n                    {\n                        if (Value >= 255 && Mode == \"Snap Back\")\n                        {\n                            ((TBarSlider)p.Source).CancelDrag();\n                            _reset = true;\n                            Value = 0;\n                            ((TBarSlider)p.Source).GetBindingExpression(TBarSlider.ValueProperty).UpdateTarget();\n                        }\n                    }));\n            }\n        }\n    }\n}\n",
        "gt": [
            "'vMixUTC/vMixController/Converters/ValueNullToStringConverter.cs'",
            "'vMixUTC/vMixController/Controls/vMixControlContainerDummy.cs'",
            "'vMixUTC/vMixController/Widgets/vMixControlTBar.cs'",
            "'vMixUTC/vMixController/Converters/ControlIntToParameterConverter.cs'"
        ]
    },
    {
        "files": [
            "'FeatureSwitch/EpiSample/Controllers/ContactBlockController.cs'",
            "'FeatureSwitch/EpiSample/Business/PageContextActionFilter.cs'",
            "'FeatureSwitch/EpiSample/Helpers/HtmlHelpers.cs'",
            "'FeatureSwitch/EpiSample/Controllers/PreviewController.cs'",
            "'FeatureSwitch/EpiSample/Business/Rendering/TemplateCoordinator.cs'"
        ],
        "content": "'FeatureSwitch/EpiSample/Controllers/ContactBlockController.cs'\n:using System.Web;\nusing System.Web.Mvc;\nusing EPiServer.Core;\nusing EpiSample.Helpers;\nusing EpiSample.Models.Blocks;\nusing EpiSample.Models.Pages;\nusing EpiSample.Models.ViewModels;\nusing EPiServer.Web;\nusing EPiServer.Web.Mvc;\nusing EPiServer;\n\nnamespace EpiSample.Controllers\n{\n    public class ContactBlockController : BlockController<ContactBlock>\n    {\n        private readonly IContentLoader _contentLoader;\n        private readonly IPermanentLinkMapper _permanentLinkMapper;\n\n        public ContactBlockController(IContentLoader contentLoader, IPermanentLinkMapper permanentLinkMapper)\n        {\n            _contentLoader = contentLoader;\n            _permanentLinkMapper = permanentLinkMapper;\n        }\n\n        public override ActionResult Index(ContactBlock currentBlock)\n        {\n            ContactPage contactPage = null;\n            if(!ContentReference.IsNullOrEmpty(currentBlock.ContactPageLink))\n            {\n                contactPage = _contentLoader.Get<ContactPage>(currentBlock.ContactPageLink);\n            }\n\n            var linkUrl = GetLinkUrl(currentBlock);\n\n            var model = new ContactBlockModel\n                {\n                    Heading = currentBlock.Heading,\n                    Image = currentBlock.Image,\n                    ContactPage = contactPage,\n                    LinkUrl = GetLinkUrl(currentBlock),\n                    LinkText = currentBlock.LinkText,\n                    ShowLink = linkUrl != null\n                };\n\n\n\n            ViewData.GetEditHints<ContactBlockModel, ContactBlock>()\n                .AddConnection(x => x.Heading, x => x.Heading)\n                .AddConnection(x => x.Image, x => x.Image)\n                .AddConnection(x => (object) x.ContactPage, x => (object) x.ContactPageLink)\n                .AddConnection(x => x.LinkText, x => x.LinkText);\n\n            return PartialView(model);\n        }\n\n        private IHtmlString GetLinkUrl(ContactBlock contactBlock)\n        {\n            if (contactBlock.LinkUrl != null && !contactBlock.LinkUrl.IsEmpty())\n            {\n                var linkUrl = contactBlock.LinkUrl.ToString();\n\n\n\n                var linkMap = _permanentLinkMapper.Find(new UrlBuilder(linkUrl));\n                if (linkMap != null && !ContentReference.IsNullOrEmpty(linkMap.ContentReference))\n                {\n                    return Url.PageLinkUrl(linkMap.ContentReference);\n                }\n\n                return new MvcHtmlString(contactBlock.LinkUrl.ToString());\n            }\n\n            return null;\n        }\n\n    }\n}\n\n'FeatureSwitch/EpiSample/Business/PageContextActionFilter.cs'\n:using System.Web.Mvc;\nusing EpiSample.Models.Pages;\nusing EpiSample.Models.ViewModels;\nusing EPiServer.Web.Routing;\n\nnamespace EpiSample.Business\n{\n\n\n\n\n\n\n\n\n\n    public class PageContextActionFilter : IResultFilter\n    {\n        private readonly PageViewContextFactory _contextFactory;\n        public PageContextActionFilter(PageViewContextFactory contextFactory)\n        {\n            _contextFactory = contextFactory;\n        }\n\n        public void OnResultExecuting(ResultExecutingContext filterContext)\n        {\n            var viewModel = filterContext.Controller.ViewData.Model;\n\n            var model = viewModel as IPageViewModel<SitePageData>;\n            if (model != null)\n            {\n                var currentContentLink = filterContext.RequestContext.GetContentLink();\n\n                var layoutModel = model.Layout ?? _contextFactory.CreateLayoutModel(currentContentLink, filterContext.RequestContext);\n\n                var layoutController = filterContext.Controller as IModifyLayout;\n                if(layoutController != null)\n                {\n                    layoutController.ModifyLayout(layoutModel);\n                }\n\n                model.Layout = layoutModel;\n\n                if (model.Section == null)\n                {\n                    model.Section = _contextFactory.GetSection(currentContentLink);\n                }\n            }\n        }\n\n        public void OnResultExecuted(ResultExecutedContext filterContext)\n        {\n        }\n    }\n}\n\n'FeatureSwitch/EpiSample/Helpers/HtmlHelpers.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text;\nusing System.Web;\nusing System.Web.Mvc;\nusing System.Web.WebPages;\nusing EPiServer.Core;\nusing EPiServer.ServiceLocation;\nusing EpiSample.Business;\nusing EPiServer.Web.Mvc.Html;\nusing EPiServer.Web.Routing;\nusing EPiServer;\n\nnamespace EpiSample.Helpers\n{\n    public static class HtmlHelpers\n    {\n\n\n\n\n\n\n\n\n\n\n\n\n        public static IHtmlString MenuList(\n            this HtmlHelper helper,\n            ContentReference rootLink,\n            Func<MenuItem, HelperResult> itemTemplate = null,\n            bool includeRoot = false,\n            bool requireVisibleInMenu = true,\n            bool requirePageTemplate = true)\n        {\n            itemTemplate = itemTemplate ?? GetDefaultItemTemplate(helper);\n            var currentContentLink = helper.ViewContext.RequestContext.GetContentLink();\n            var contentLoader = ServiceLocator.Current.GetInstance<IContentLoader>();\n\n            Func<IEnumerable<PageData>, IEnumerable<PageData>> filter =\n                pages => pages.FilterForDisplay(requirePageTemplate, requireVisibleInMenu);\n\n            var pagePath = contentLoader.GetAncestors(currentContentLink)\n                .Reverse()\n                .Select(x => x.ContentLink)\n                .SkipWhile(x => !x.CompareToIgnoreWorkID(rootLink))\n                .ToList();\n\n            var menuItems = contentLoader.GetChildren<PageData>(rootLink)\n                .FilterForDisplay(requirePageTemplate, requireVisibleInMenu)\n                .Select(x => CreateMenuItem(x, currentContentLink, pagePath, contentLoader, filter))\n                .ToList();\n\n            if(includeRoot)\n            {\n                menuItems.Insert(0, CreateMenuItem(contentLoader.Get<PageData>(rootLink), currentContentLink, pagePath, contentLoader, filter));\n            }\n\n            var buffer = new StringBuilder();\n            var writer = new StringWriter(buffer);\n            foreach (var menuItem in menuItems)\n            {\n                itemTemplate(menuItem).WriteTo(writer);\n            }\n\n            return new MvcHtmlString(buffer.ToString());\n        }\n\n        private static MenuItem CreateMenuItem(PageData page, ContentReference currentContentLink, List<ContentReference> pagePath, IContentLoader contentLoader, Func<IEnumerable<PageData>, IEnumerable<PageData>> filter)\n        {\n            var menuItem = new MenuItem(page)\n                {\n                    Selected = page.ContentLink.CompareToIgnoreWorkID(currentContentLink) ||\n                               pagePath.Contains(page.ContentLink),\n                    HasChildren =\n                        new Lazy<bool>(() => filter(contentLoader.GetChildren<PageData>(page.ContentLink)).Any())\n                };\n            return menuItem;\n        }\n\n        private static Func<MenuItem, HelperResult> GetDefaultItemTemplate(HtmlHelper helper)\n        {\n            return x => new HelperResult(writer => writer.Write(helper.PageLink(x.Page)));\n        }\n\n        public class MenuItem\n        {\n            public MenuItem(PageData page)\n            {\n                Page = page;\n            }\n            public PageData Page { get; set; }\n            public bool Selected { get; set; }\n            public Lazy<bool> HasChildren { get; set; }\n        }\n\n\n\n\n\n\n        public static ConditionalLink BeginConditionalLink(this HtmlHelper helper, bool shouldWriteLink, IHtmlString url, string title = null, string cssClass = null)\n        {\n            if(shouldWriteLink)\n            {\n                var linkTag = new TagBuilder(\"a\");\n                linkTag.Attributes.Add(\"href\", url.ToHtmlString());\n\n                if(!string.IsNullOrWhiteSpace(title))\n                {\n                    linkTag.Attributes.Add(\"title\", helper.Encode(title));\n                }\n\n                if (!string.IsNullOrWhiteSpace(cssClass))\n                {\n                    linkTag.Attributes.Add(\"class\", cssClass);\n                }\n\n                helper.ViewContext.Writer.Write(linkTag.ToString(TagRenderMode.StartTag));\n            }\n            return new ConditionalLink(helper.ViewContext, shouldWriteLink);\n        }\n\n\n\n\n\n\n\n\n\n\n        public static ConditionalLink BeginConditionalLink(this HtmlHelper helper, bool shouldWriteLink, Func<IHtmlString> urlGetter, string title = null, string cssClass = null)\n        {\n            IHtmlString url = MvcHtmlString.Empty;\n\n            if(shouldWriteLink)\n            {\n                url = urlGetter();\n            }\n\n            return helper.BeginConditionalLink(shouldWriteLink, url, title, cssClass);\n        }\n\n        public class ConditionalLink : IDisposable\n        {\n            private readonly ViewContext _viewContext;\n            private readonly bool _linked;\n            private bool _disposed;\n\n            public ConditionalLink(ViewContext viewContext, bool isLinked)\n            {\n                _viewContext = viewContext;\n                _linked = isLinked;\n            }\n\n            public void Dispose()\n            {\n                Dispose(true);\n                GC.SuppressFinalize(this);\n\n            }\n\n            protected virtual void Dispose(bool disposing)\n            {\n                if (_disposed)\n                {\n                    return;\n                }\n\n                _disposed = true;\n\n                if (_linked)\n                {\n                    _viewContext.Writer.Write(\"</a>\");\n                }\n            }\n        }\n    }\n}\n\n'FeatureSwitch/EpiSample/Controllers/PreviewController.cs'\n:using System.Collections.Generic;\nusing System.Linq;\nusing System.Web.Mvc;\nusing EPiServer.Core;\nusing EPiServer.Framework.DataAnnotations;\nusing EPiServer.Framework.Web;\nusing EpiSample.Business;\nusing EpiSample.Business.Rendering;\nusing EpiSample.Models.Pages;\nusing EpiSample.Models.ViewModels;\nusing EPiServer.Web;\nusing EPiServer.Web.Mvc;\nusing EPiServer;\n\nnamespace EpiSample.Controllers\n{\n\n    [TemplateDescriptor(\n        Inherited = true,\n        TemplateTypeCategory = TemplateTypeCategories.MvcController,\n        Tags = new[] { RenderingTags.Preview, RenderingTags.Edit },\n        AvailableWithoutTag = false)]\n    [VisitorGroupImpersonation]\n    public class PreviewController : ActionControllerBase, IRenderTemplate<BlockData>, IModifyLayout\n    {\n        private readonly IContentLoader _contentLoader;\n        private readonly TemplateResolver _templateResolver;\n        private readonly DisplayOptions _displayOptions;\n\n        public PreviewController(IContentLoader contentLoader, TemplateResolver templateResolver, DisplayOptions displayOptions)\n        {\n            _contentLoader = contentLoader;\n            _templateResolver = templateResolver;\n            _displayOptions = displayOptions;\n        }\n\n        public ActionResult Index(IContent currentContent)\n        {\n\n            var startPage = _contentLoader.Get<StartPage>(SiteDefinition.Current.StartPage);\n\n            var model = new PreviewModel(startPage, currentContent);\n\n            var supportedDisplayOptions = _displayOptions\n                .Select(x => new { Tag = x.Tag, Name = x.Name, Supported = SupportsTag(currentContent, x.Tag) })\n                .ToList();\n\n            if (supportedDisplayOptions.Any(x => x.Supported))\n            {\n                foreach (var displayOption in supportedDisplayOptions)\n                {\n                    var contentArea = new ContentArea();\n                    contentArea.Items.Add(new ContentAreaItem\n                    {\n                        ContentLink = currentContent.ContentLink\n                    });\n                    var areaModel = new PreviewModel.PreviewArea\n                        {\n                            Supported = displayOption.Supported,\n                            AreaTag = displayOption.Tag,\n                            AreaName = displayOption.Name,\n                            ContentArea = contentArea\n                        };\n                    model.Areas.Add(areaModel);\n                }\n            }\n\n            return View(model);\n        }\n\n        private bool SupportsTag(IContent content, string tag)\n        {\n            var templateModel = _templateResolver.Resolve(HttpContext,\n                                      content.GetOriginalType(),\n                                      content,\n                                      TemplateTypeCategories.MvcPartial,\n                                      tag);\n\n            return templateModel != null;\n        }\n\n        public void ModifyLayout(LayoutModel layoutModel)\n        {\n            layoutModel.HideHeader = true;\n            layoutModel.HideFooter = true;\n        }\n    }\n}\n\n'FeatureSwitch/EpiSample/Business/Rendering/TemplateCoordinator.cs'\n:using EPiServer.Core;\nusing EPiServer.DataAbstraction;\nusing EPiServer.ServiceLocation;\nusing EpiSample.Controllers;\nusing EpiSample.Models.Blocks;\nusing EpiSample.Models.Pages;\nusing EPiServer.Web;\nusing EPiServer.Web.Mvc;\n\nnamespace EpiSample.Business.Rendering\n{\n    [ServiceConfiguration(typeof(IViewTemplateModelRegistrator))]\n    public class TemplateCoordinator : IViewTemplateModelRegistrator\n    {\n        public const string BlockFolder = \"~/Views/Shared/Blocks/\";\n        public const string PagePartialsFolder = \"~/Views/Shared/PagePartials/\";\n\n        public static void OnTemplateResolved(object sender, TemplateResolverEventArgs args)\n        {\n\n            if (args.ItemToRender is IContainerPage && args.SelectedTemplate != null && args.SelectedTemplate.TemplateType == typeof(DefaultPageController))\n            {\n                args.SelectedTemplate = null;\n            }\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n        public void Register(TemplateModelCollection viewTemplateModelRegistrator)\n        {\n            viewTemplateModelRegistrator.Add(typeof(JumbotronBlock), new TemplateModel\n            {\n                Tags = new[] { Global.ContentAreaTags.FullWidth },\n                AvailableWithoutTag = false,\n                Path = BlockPath(\"JumbotronBlockWide.cshtml\")\n            });\n\n            viewTemplateModelRegistrator.Add(typeof(TeaserBlock), new TemplateModel\n            {\n                Name = \"TeaserBlockWide\",\n                Tags = new[] { Global.ContentAreaTags.TwoThirdsWidth, Global.ContentAreaTags.FullWidth },\n                AvailableWithoutTag = false,\n                Path = BlockPath(\"TeaserBlockWide.cshtml\")\n            });\n\n            viewTemplateModelRegistrator.Add(typeof(SitePageData), new TemplateModel\n            {\n                Name = \"PagePartial\",\n                Inherit = true,\n                AvailableWithoutTag = true,\n                Path = PagePartialPath(\"Page.cshtml\")\n            });\n\n            viewTemplateModelRegistrator.Add(typeof(SitePageData), new TemplateModel\n            {\n                Name = \"PagePartialWide\",\n                Inherit = true,\n                Tags = new[] { Global.ContentAreaTags.TwoThirdsWidth, Global.ContentAreaTags.FullWidth },\n                AvailableWithoutTag = false,\n                Path = PagePartialPath(\"PageWide.cshtml\")\n            });\n\n            viewTemplateModelRegistrator.Add(typeof(ContactPage), new TemplateModel\n            {\n                Name = \"ContactPagePartialWide\",\n                Tags = new[] { Global.ContentAreaTags.TwoThirdsWidth, Global.ContentAreaTags.FullWidth },\n                AvailableWithoutTag = false,\n                Path = PagePartialPath(\"ContactPageWide.cshtml\")\n            });\n\n            viewTemplateModelRegistrator.Add(typeof(IContentData), new TemplateModel\n            {\n                Name = \"NoRendererMessage\",\n                Inherit = true,\n                Tags = new[] { Global.ContentAreaTags.NoRenderer },\n                AvailableWithoutTag = false,\n                Path = BlockPath(\"NoRenderer.cshtml\")\n            });\n        }\n\n        private static string BlockPath(string fileName)\n        {\n            return string.Format(\"{0}{1}\", BlockFolder, fileName);\n        }\n\n        private static string PagePartialPath(string fileName)\n        {\n            return string.Format(\"{0}{1}\", PagePartialsFolder, fileName);\n        }\n    }\n}\n",
        "gt": [
            "'FeatureSwitch/EpiSample/Business/PageContextActionFilter.cs'",
            "'FeatureSwitch/EpiSample/Helpers/HtmlHelpers.cs'",
            "'FeatureSwitch/EpiSample/Controllers/ContactBlockController.cs'",
            "'FeatureSwitch/EpiSample/Business/Rendering/TemplateCoordinator.cs'",
            "'FeatureSwitch/EpiSample/Controllers/PreviewController.cs'"
        ]
    },
    {
        "files": [
            "'VFW/Assets/Plugins/Vexe/Runtime/FastSave/Storage/AssetStorage.cs'",
            "'VFW/Assets/VFW Examples/FastSave Examples/GO/GameObjectTest.cs'",
            "'VFW/Assets/VFW Deprecated/Runtime/Types/Core/BetterScriptableObject.cs'",
            "'VFW/Assets/VFW Deprecated/Runtime/Serialization/Serializers/FullSerializer/FullSerializerBackend.cs'",
            "'VFW/Assets/VFW Deprecated/Runtime/Serialization/Serializers/FullSerializer/Source/fsJsonParser.cs'"
        ],
        "content": "'VFW/Assets/Plugins/Vexe/Runtime/FastSave/Storage/AssetStorage.cs'\n:\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing UnityEngine;\nusing Vexe.Runtime.Types;\nusing UnityObject = UnityEngine.Object;\n\n#if UNITY_EDITOR\nusing UnityEditor;\nusing System.Linq;\n#endif\n\nnamespace Vexe.FastSave\n{\n    public class AssetStorage : BaseScriptableObject\n    {\n        [Display(Dict.HorizontalPairs)]\n        public AssetLookup Assets = new AssetLookup();\n\n        [Hide] public static readonly List<Type> SupportedTypes = new List<Type>()\n        {\n            typeof(Mesh),\n            typeof(AudioClip),\n            typeof(Material),\n            typeof(PhysicMaterial),\n            typeof(PhysicsMaterial2D),\n            typeof(Flare),\n            typeof(GUIStyle),\n            typeof(Texture),\n            typeof(RuntimeAnimatorController),\n            typeof(AnimationClip),\n            typeof(UnityObject),\n        };\n\n        static AssetStorage _Current;\n        public static AssetStorage Current\n        {\n            get\n            {\n                if (_Current == null)\n                    _Current = GetStore();\n                return _Current;\n            }\n        }\n\n        public string Store(UnityObject asset)\n        {\n            var name = asset.name;\n            Assets[name] = asset;\n            return name;\n        }\n\n        public UnityObject Get(string key)\n        {\n            UnityObject result;\n            if (!Assets.TryGetValue(key, out result))\n                return null;\n            return result;\n        }\n\n#if UNITY_EDITOR\n        [Show] void FilterNulls()\n        {\n            var cleaned = new AssetLookup();\n            var iter = Assets.GetEnumerator();\n            while(iter.MoveNext())\n            {\n                var current = iter.Current;\n\n                var value = current.Value;\n                if (value == null)\n                    return;\n\n                cleaned.Add(current.Key, value);\n            }\n            Assets = cleaned;\n        }\n#endif\n\n        static AssetStorage GetStore()\n        {\n            AssetStorage store = null;\n#if UNITY_EDITOR && !UNITY_WEBPLAYER\n            var storeName = typeof(AssetStorage).Name + \".asset\";\n            var directory = Directory.GetDirectories(\"Assets\", \"FastSave\", SearchOption.AllDirectories).FirstOrDefault();\n            if (directory == null)\n                Debug.LogError(\"Couldn't find FastSave directory!\");\n            else\n            {\n                var storePath = directory + \"/Resources/\" + storeName;\n                store = AssetDatabase.LoadAssetAtPath<AssetStorage>(storePath);\n                if (store == null)\n                {\n                    store = ScriptableObject.CreateInstance<AssetStorage>();\n                    AssetDatabase.CreateAsset(store, storePath);\n                    AssetDatabase.ImportAsset(storePath, ImportAssetOptions.ForceUpdate);\n                    AssetDatabase.Refresh();\n                }\n            }\n#endif\n            if (store == null)\n                store = Resources.Load<AssetStorage>(typeof(AssetStorage).Name);\n            return store;\n        }\n    }\n\n    [Serializable]\n    public class AssetLookup : SerializableDictionary<string, UnityObject> { }\n}\n\n'VFW/Assets/VFW Examples/FastSave Examples/GO/GameObjectTest.cs'\n:using System;\nusing UnityEngine;\nusing Vexe.FastSave;\nusing Vexe.Runtime.Types;\n\nnamespace FSExamples\n{\n    public class GameObjectTest : BaseBehaviour\n    {\n        public GameObject target;\n\n        [HideInInspector]\n        public string output;\n\n        [Show] void SaveGo()\n        {\n            output = Save.GameObjectToMemory(target).GetString();\n        }\n\n        [Show] void LoadIntoNewGo()\n        {\n            Load.GameObjectFromMemory(output.GetBytes(), new GameObject());\n        }\n\n        [Show] void LoadIntoTargetGo()\n        {\n            target.LoadFromMemory(output.GetBytes());\n        }\n    }\n}\n\n'VFW/Assets/VFW Deprecated/Runtime/Types/Core/BetterScriptableObject.cs'\n:﻿using System;\nusing UnityEngine;\nusing Vexe.Runtime.Extensions;\nusing Vexe.Runtime.Serialization;\n\nnamespace Vexe.Runtime.Types\n{\n    [Obsolete(\"Please use BaseScrtiptableObject instead\")]\n    public abstract class BetterScriptableObject : BaseScriptableObject, ISerializationCallbackReceiver\n    {\n        [SerializeField]\n        private SerializationData _serializationData;\n        private SerializationData serializationData\n        {\n            get { return _serializationData ?? (_serializationData = new SerializationData()); }\n        }\n\n        private SerializerBackend _serializer;\n        public SerializerBackend Serializer\n        {\n            get\n            {\n                if (_serializer == null)\n                {\n                    var type = GetSerializerType();\n                    _serializer = type.ActivatorInstance<SerializerBackend>();\n                }\n                return _serializer;\n            }\n        }\n\n        public virtual void OnBeforeSerialize()\n        {\n            SerializeObject();\n        }\n\n        public virtual void OnAfterDeserialize()\n        {\n            DeserializeObject();\n        }\n\n        public virtual Type GetSerializerType()\n        {\n            return SerializerBackend.DefaultType;\n        }\n\n        [ContextMenu(\"Load behaviour state\")]\n        public virtual void DeserializeObject()\n        {\n            Serializer.DeserializeTargetFromData(this, serializationData);\n        }\n\n        [ContextMenu(\"Save behaviour state\")]\n        public virtual void SerializeObject()\n        {\n            Serializer.SerializeTargetIntoData(this, serializationData);\n        }\n    }\n}\n\n'VFW/Assets/VFW Deprecated/Runtime/Serialization/Serializers/FullSerializer/FullSerializerBackend.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing FullSerializer;\nusing UnityObject = UnityEngine.Object;\n\nnamespace Vexe.Runtime.Serialization\n{\n\n\n\n    public class FullSerializerBackend : SerializerBackend\n    {\n        public static readonly fsSerializer Serializer;\n\n        public FullSerializerBackend()\n        {\n            Logic = VFWSerializationLogic.Instance;\n        }\n\n        static FullSerializerBackend()\n        {\n            Serializer = new fsSerializer();\n            Serializer.AddConverter(new UnityObjectConverter());\n            Serializer.AddConverter(new MethodInfoConverter());\n\n            fsConfig.SerializeAttributes = VFWSerializationLogic.Instance.SerializeMember;\n            fsConfig.IgnoreSerializeAttributes = VFWSerializationLogic.Instance.DontSerializeMember;\n        }\n\n        public override string Serialize(Type type, object value, object context)\n        {\n            Serializer.Context.Set(context as List<UnityObject>);\n\n            fsData data;\n            var fail = Serializer.TrySerialize(type, value, out data);\n            if (fail.Failed) throw new Exception(fail.FormattedMessages);\n\n            return fsJsonPrinter.CompressedJson(data);\n        }\n\n        public override object Deserialize(Type type, string serializedState, object context)\n        {\n            fsData data;\n            fsResult status = fsJsonParser.Parse(serializedState, out data);\n            if (status.Failed) throw new Exception(status.FormattedMessages);\n\n            Serializer.Context.Set(context as List<UnityObject>);\n\n            object deserialized = null;\n            status = Serializer.TryDeserialize(data, type, ref deserialized);\n            if (status.Failed) throw new Exception(status.FormattedMessages);\n            return deserialized;\n        }\n    }\n}\n\n'VFW/Assets/VFW Deprecated/Runtime/Serialization/Serializers/FullSerializer/Source/fsJsonParser.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Text;\n\nnamespace FullSerializer {\n\n\n\n\n\n    public class fsJsonParser {\n        private int _start;\n        private string _input;\n\n        private fsResult MakeFailure(string message) {\n            int start = Math.Max(0, _start - 20);\n            int length = Math.Min(50, _input.Length - start);\n\n            string error = \"Error while parsing: \" + message + \"; context = <\" +\n                _input.Substring(start, length) + \">\";\n            return fsResult.Fail(error);\n        }\n\n        private bool TryMoveNext() {\n            if (_start < _input.Length) {\n                ++_start;\n                return true;\n            }\n\n            return false;\n        }\n\n        private bool HasValue() {\n            return HasValue(0);\n        }\n\n        private bool HasValue(int offset) {\n            return (_start + offset) >= 0 && (_start + offset) < _input.Length;\n        }\n\n        private char Character() {\n            return Character(0);\n        }\n\n        private char Character(int offset) {\n            return _input[_start + offset];\n        }\n\n\n\n\n        private void SkipSpace() {\n            while (HasValue()) {\n                char c = Character();\n\n\n                if (char.IsWhiteSpace(c)) {\n                    TryMoveNext();\n                    continue;\n                }\n\n\n                if (HasValue(1) &&\n                    (Character(0) == '/' && Character(1) == '/')) {\n\n\n                    while (HasValue() && Environment.NewLine.Contains(\"\" + Character()) == false) {\n                        TryMoveNext();\n                    }\n\n\n                    continue;\n                }\n\n                break;\n            }\n        }\n\n        #region Escaping\n        private bool IsHex(char c) {\n            return ((c >= '0' && c <= '9') ||\n                     (c >= 'a' && c <= 'f') ||\n                     (c >= 'A' && c <= 'F'));\n        }\n\n        private uint ParseSingleChar(char c1, uint multipliyer) {\n            uint p1 = 0;\n            if (c1 >= '0' && c1 <= '9')\n                p1 = (uint)(c1 - '0') * multipliyer;\n            else if (c1 >= 'A' && c1 <= 'F')\n                p1 = (uint)((c1 - 'A') + 10) * multipliyer;\n            else if (c1 >= 'a' && c1 <= 'f')\n                p1 = (uint)((c1 - 'a') + 10) * multipliyer;\n            return p1;\n        }\n\n        private uint ParseUnicode(char c1, char c2, char c3, char c4) {\n            uint p1 = ParseSingleChar(c1, 0x1000);\n            uint p2 = ParseSingleChar(c2, 0x100);\n            uint p3 = ParseSingleChar(c3, 0x10);\n            uint p4 = ParseSingleChar(c4, 0x1);\n\n            return p1 + p2 + p3 + p4;\n        }\n\n        private fsResult TryUnescapeChar(out char escaped) {\n\n            TryMoveNext();\n            if (HasValue() == false) {\n                escaped = ' ';\n                return MakeFailure(\"Unexpected end of input after \\\\\");\n            }\n\n            switch (Character()) {\n                case '\\\\': TryMoveNext(); escaped = '\\\\'; return fsResult.Success;\n                case '\"': TryMoveNext(); escaped = '\\\"'; return fsResult.Success;\n                case 'a': TryMoveNext(); escaped = '\\a'; return fsResult.Success;\n                case 'b': TryMoveNext(); escaped = '\\b'; return fsResult.Success;\n                case 'f': TryMoveNext(); escaped = '\\f'; return fsResult.Success;\n                case 'n': TryMoveNext(); escaped = '\\n'; return fsResult.Success;\n                case 'r': TryMoveNext(); escaped = '\\r'; return fsResult.Success;\n                case 't': TryMoveNext(); escaped = '\\t'; return fsResult.Success;\n                case '0': TryMoveNext(); escaped = '\\0'; return fsResult.Success;\n                case 'u':\n                    TryMoveNext();\n                    if (IsHex(Character(0))\n                     && IsHex(Character(1))\n                     && IsHex(Character(2))\n                     && IsHex(Character(3))) {\n\n                        uint codePoint = ParseUnicode(Character(0), Character(1), Character(2), Character(3));\n\n                        TryMoveNext();\n                        TryMoveNext();\n                        TryMoveNext();\n                        TryMoveNext();\n\n                        escaped = (char)codePoint;\n                        return fsResult.Success;\n                    }\n\n\n                    escaped = (char)0;\n                    return MakeFailure(\n                        string.Format(\"invalid escape sequence '\\\\u{0}{1}{2}{3}'\\n\",\n                            Character(0),\n                            Character(1),\n                            Character(2),\n                            Character(3)));\n                default:\n                    escaped = (char)0;\n                    return MakeFailure(string.Format(\"Invalid escape sequence \\\\{0}\", Character()));\n            }\n        }\n        #endregion\n\n        private fsResult TryParseExact(string content) {\n            for (int i = 0; i < content.Length; ++i) {\n                if (Character() != content[i]) {\n                    return MakeFailure(\"Expected \" + content[i]);\n                }\n\n                if (TryMoveNext() == false) {\n                    return MakeFailure(\"Unexpected end of content when parsing \" + content);\n                }\n            }\n\n            return fsResult.Success;\n        }\n\n        private fsResult TryParseTrue(out fsData data) {\n            var fail = TryParseExact(\"true\");\n\n            if (fail.Succeeded) {\n                data = new fsData(true);\n                return fsResult.Success;\n            }\n\n            data = null;\n            return fail;\n        }\n\n        private fsResult TryParseFalse(out fsData data) {\n            var fail = TryParseExact(\"false\");\n\n            if (fail.Succeeded) {\n                data = new fsData(false);\n                return fsResult.Success;\n            }\n\n            data = null;\n            return fail;\n        }\n\n        private fsResult TryParseNull(out fsData data) {\n            var fail = TryParseExact(\"null\");\n\n            if (fail.Succeeded) {\n                data = new fsData();\n                return fsResult.Success;\n            }\n\n            data = null;\n            return fail;\n        }\n\n\n        private bool IsSeparator(char c) {\n            return char.IsWhiteSpace(c) || c == ',' || c == '}' || c == ']';\n        }\n\n\n\n\n        private fsResult TryParseNumber(out fsData data) {\n            int start = _start;\n\n\n            while (\n                TryMoveNext() &&\n                (HasValue() && IsSeparator(Character()) == false)) {\n            }\n\n\n            string numberString = _input.Substring(start, _start - start);\n\n\n            if (numberString.Contains(\".\") || numberString == \"Infinity\" || numberString == \"-Infinity\" || numberString == \"NaN\") {\n                double doubleValue;\n                if (double.TryParse(numberString, NumberStyles.Any, CultureInfo.InvariantCulture, out doubleValue) == false) {\n                    data = null;\n                    return MakeFailure(\"Bad double format with \" + numberString);\n                }\n\n                data = new fsData(doubleValue);\n                return fsResult.Success;\n            }\n            else {\n                Int64 intValue;\n                if (Int64.TryParse(numberString, NumberStyles.Any, CultureInfo.InvariantCulture, out intValue) == false) {\n                    data = null;\n                    return MakeFailure(\"Bad Int64 format with \" + numberString);\n                }\n\n                data = new fsData(intValue);\n                return fsResult.Success;\n            }\n        }\n\n        private readonly StringBuilder _cachedStringBuilder = new StringBuilder(256);\n\n\n\n        private fsResult TryParseString(out string str) {\n            _cachedStringBuilder.Length = 0;\n\n\n            if (Character() != '\"' || TryMoveNext() == false) {\n                str = string.Empty;\n                return MakeFailure(\"Expected initial \\\" when parsing a string\");\n            }\n\n\n            while (HasValue() && Character() != '\\\"') {\n                char c = Character();\n\n\n                if (c == '\\\\') {\n                    char unescaped;\n                    var fail = TryUnescapeChar(out unescaped);\n                    if (fail.Failed) {\n                        str = string.Empty;\n                        return fail;\n                    }\n\n                    _cachedStringBuilder.Append(unescaped);\n                }\n\n\n                else {\n                    _cachedStringBuilder.Append(c);\n\n\n                    if (TryMoveNext() == false) {\n                        str = string.Empty;\n                        return MakeFailure(\"Unexpected end of input when reading a string\");\n                    }\n                }\n            }\n\n\n            if (HasValue() == false || Character() != '\"' || TryMoveNext() == false) {\n                str = string.Empty;\n                return MakeFailure(\"No closing \\\" when parsing a string\");\n            }\n\n            str = _cachedStringBuilder.ToString();\n            return fsResult.Success;\n        }\n\n\n\n\n        private fsResult TryParseArray(out fsData arr) {\n            if (Character() != '[') {\n                arr = null;\n                return MakeFailure(\"Expected initial [ when parsing an array\");\n            }\n\n\n            if (TryMoveNext() == false) {\n                arr = null;\n                return MakeFailure(\"Unexpected end of input when parsing an array\");\n            }\n            SkipSpace();\n\n            var result = new List<fsData>();\n\n            while (HasValue() && Character() != ']') {\n\n                fsData element;\n                var fail = RunParse(out element);\n                if (fail.Failed) {\n                    arr = null;\n                    return fail;\n                }\n\n                result.Add(element);\n\n\n                SkipSpace();\n                if (HasValue() && Character() == ',') {\n                    if (TryMoveNext() == false) break;\n                    SkipSpace();\n                }\n            }\n\n\n            if (HasValue() == false || Character() != ']' || TryMoveNext() == false) {\n                arr = null;\n                return MakeFailure(\"No closing ] for array\");\n            }\n\n            arr = new fsData(result);\n            return fsResult.Success;\n        }\n\n        private fsResult TryParseObject(out fsData obj) {\n            if (Character() != '{') {\n                obj = null;\n                return MakeFailure(\"Expected initial { when parsing an object\");\n            }\n\n\n            if (TryMoveNext() == false) {\n                obj = null;\n                return MakeFailure(\"Unexpected end of input when parsing an object\");\n            }\n            SkipSpace();\n\n            var result = new Dictionary<string, fsData>(\n                fsConfig.IsCaseSensitive ? StringComparer.CurrentCulture : StringComparer.CurrentCultureIgnoreCase);\n\n            while (HasValue() && Character() != '}') {\n                fsResult failure;\n\n\n                SkipSpace();\n                string key;\n                failure = TryParseString(out key);\n                if (failure.Failed) {\n                    obj = null;\n                    return failure;\n                }\n                SkipSpace();\n\n\n                if (HasValue() == false || Character() != ':' || TryMoveNext() == false) {\n                    obj = null;\n                    return MakeFailure(\"Expected : after key \\\"\" + key + \"\\\"\");\n                }\n                SkipSpace();\n\n\n                fsData value;\n                failure = RunParse(out value);\n                if (failure.Failed) {\n                    obj = null;\n                    return failure;\n                }\n\n                result.Add(key, value);\n\n\n                SkipSpace();\n                if (HasValue() && Character() == ',') {\n                    if (TryMoveNext() == false) break;\n                    SkipSpace();\n                }\n            }\n\n\n            if (HasValue() == false || Character() != '}' || TryMoveNext() == false) {\n                obj = null;\n                return MakeFailure(\"No closing } for object\");\n            }\n\n            obj = new fsData(result);\n            return fsResult.Success;\n        }\n\n        private fsResult RunParse(out fsData data) {\n            SkipSpace();\n\n            switch (Character()) {\n                case 'I':\n                case 'N':\n                case '.':\n                case '+':\n                case '-':\n                case '0':\n                case '1':\n                case '2':\n                case '3':\n                case '4':\n                case '5':\n                case '6':\n                case '7':\n                case '8':\n                case '9': return TryParseNumber(out data);\n                case '\"': {\n                        string str;\n                        fsResult fail = TryParseString(out str);\n                        if (fail.Failed) {\n                            data = null;\n                            return fail;\n                        }\n                        data = new fsData(str);\n                        return fsResult.Success;\n                    }\n                case '[': return TryParseArray(out data);\n                case '{': return TryParseObject(out data);\n                case 't': return TryParseTrue(out data);\n                case 'f': return TryParseFalse(out data);\n                case 'n': return TryParseNull(out data);\n                default:\n                    data = null;\n                    return MakeFailure(\"unable to parse; invalid initial token \\\"\" + Character() + \"\\\"\");\n            }\n        }\n\n\n\n\n\n\n\n        public static fsResult Parse(string input, out fsData data) {\n            var context = new fsJsonParser(input);\n            return context.RunParse(out data);\n        }\n\n\n\n\n\n        public static fsData Parse(string input) {\n            fsData data;\n            Parse(input, out data).AssertSuccess();\n            return data;\n        }\n\n        private fsJsonParser(string input) {\n            _input = input;\n            _start = 0;\n        }\n    }\n}",
        "gt": [
            "'VFW/Assets/VFW Deprecated/Runtime/Serialization/Serializers/FullSerializer/Source/fsJsonParser.cs'",
            "'VFW/Assets/VFW Deprecated/Runtime/Serialization/Serializers/FullSerializer/FullSerializerBackend.cs'",
            "'VFW/Assets/VFW Deprecated/Runtime/Types/Core/BetterScriptableObject.cs'",
            "'VFW/Assets/Plugins/Vexe/Runtime/FastSave/Storage/AssetStorage.cs'",
            "'VFW/Assets/VFW Examples/FastSave Examples/GO/GameObjectTest.cs'"
        ]
    },
    {
        "files": [
            "'couchbase-net-client/tests/Couchbase.UnitTests/Core/Diagnostics/Tracing/Fakes/FakeScope.cs'",
            "'couchbase-net-client/tests/Couchbase.UnitTests/Core/ClusterNodeCollectionTests.cs'",
            "'couchbase-net-client/src/Couchbase/Management/Eventing/EventingFunctionService.cs'"
        ],
        "content": "'couchbase-net-client/tests/Couchbase.UnitTests/Core/Diagnostics/Tracing/Fakes/FakeScope.cs'\n:using System;\nusing System.Collections.Concurrent;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Couchbase.Analytics;\nusing Couchbase.KeyValue;\nusing Couchbase.Management.Eventing;\nusing Couchbase.Management.Search;\nusing Couchbase.Query;\nusing Couchbase.Search;\n\n#pragma warning disable CS8632\nnamespace Couchbase.UnitTests.Core.Diagnostics.Tracing.Fakes\n{\n    public class FakeScope : IScope\n    {\n        private readonly ClusterOptions _clusterOptions;\n\n        private readonly ConcurrentDictionary<string, ICouchbaseCollection> _collections =\n            new ConcurrentDictionary<string, ICouchbaseCollection>();\n\n        public FakeScope(string name, IBucket bucket, ClusterOptions clusterOptions)\n        {\n            _clusterOptions = clusterOptions;\n            Name = name;\n            Bucket = bucket;\n        }\n\n        public string Id { get; }\n        public string Name { get; }\n        public IBucket Bucket { get; }\n        public bool IsDefaultScope => Name == \"_default\";\n\n        public ICouchbaseCollection this[string name] => throw new NotImplementedException();\n\n        public ICouchbaseCollection Collection(string collectionName)\n        {\n            throw new NotImplementedException();\n        }\n\n        public ValueTask<ICouchbaseCollection> CollectionAsync(string collectionName)\n        {\n            if (_collections.TryGetValue(collectionName, out ICouchbaseCollection collection))\n            {\n                return new ValueTask<ICouchbaseCollection>(collection);\n            }\n\n            collection = new FakeCollection(collectionName, this, Bucket, _clusterOptions);\n            _collections.TryAdd(collectionName, collection);\n            return new ValueTask<ICouchbaseCollection>(collection);\n        }\n\n        public Task<IQueryResult<T>> QueryAsync<T>(string statement, QueryOptions? options = default)\n        {\n            throw new NotImplementedException();\n        }\n\n        public Task<IAnalyticsResult<T>> AnalyticsQueryAsync<T>(string statement, AnalyticsOptions? options = default)\n        {\n            throw new NotImplementedException();\n        }\n\n        public ISearchIndexManager SearchIndexes => throw new NotImplementedException();\n        public IEventingFunctionManager EventingFunctions { get; }\n\n        public Task<ISearchResult> SearchAsync(string searchIndexName, SearchRequest searchRequest, CancellationToken cancellationToken) =>\n            throw new NotImplementedException();\n\n        public Task<ISearchResult> SearchAsync(string searchIndexName, SearchRequest searchRequest, SearchOptions options)\n        {\n            throw new NotImplementedException();\n        }\n    }\n}\n\n'couchbase-net-client/tests/Couchbase.UnitTests/Core/ClusterNodeCollectionTests.cs'\n:using System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Collections.Specialized;\nusing System.Net;\nusing Couchbase.Core;\nusing Couchbase.UnitTests.Core.Diagnostics.Tracing.Fakes;\nusing Moq;\nusing Xunit;\n\nnamespace Couchbase.UnitTests.Core\n{\n    public class ClusterNodeCollectionTests\n    {\n        #region Add\n\n        [Fact]\n        public void Add_NotInCollection_ReturnsTrue()\n        {\n\n\n            var node = CreateMockNode(\"default\", CreateEndpoint(1)).Object;\n\n            var nodes = new ClusterNodeCollection();\n\n\n\n            var result = nodes.Add(node);\n\n\n\n            Assert.True(result);\n        }\n\n        [Fact]\n        public void Add_NotInCollection_RegistersForEvents()\n        {\n\n\n            var node = CreateMockNode(\"default\",CreateEndpoint(1));\n\n            var nodes = new ClusterNodeCollection();\n\n\n\n            nodes.Add(node.Object);\n\n\n\n            node.VerifyAdd(m => m.KeyEndPointsChanged += It.IsAny<NotifyCollectionChangedEventHandler>(), Times.Once);\n        }\n\n        [Fact]\n        public void Add_InCollection_ReturnsFalse()\n        {\n\n\n            var node = CreateMockNode(\"default\",CreateEndpoint(1)).Object;\n\n            var nodes = new ClusterNodeCollection\n            {\n                node\n            };\n\n\n\n            var result = nodes.Add(node);\n\n\n\n            Assert.False(result);\n            Assert.Equal(1, nodes.Count);\n        }\n\n        [Fact]\n        public void Add_NotInCollection_RegistersAllEndpoints()\n        {\n\n\n            var node = CreateMockNode(\"default\",CreateEndpoint(1), CreateEndpoint(2)).Object;\n\n            var nodes = new ClusterNodeCollection();\n\n\n\n            nodes.Add(node);\n\n\n\n            Assert.True(nodes.TryGet(CreateEndpoint(1), out var resultNode));\n            Assert.Equal(node, resultNode);\n\n            Assert.True(nodes.TryGet(CreateEndpoint(2), out resultNode));\n            Assert.Equal(node, resultNode);\n        }\n\n        #endregion\n\n        #region Remove\n\n        [Fact]\n        public void Remove_NotInCollection_ReturnsFalse()\n        {\n\n\n            var nodes = new ClusterNodeCollection();\n\n\n\n            var result = nodes.Remove(CreateEndpoint(1), \"default\",  out _);\n\n\n\n            Assert.False(result);\n        }\n\n        [Fact]\n        public void Remove_InCollection_ReturnsTrue()\n        {\n\n\n            var node = CreateMockNode(\"default\",CreateEndpoint(1)).Object;\n\n            var nodes = new ClusterNodeCollection\n            {\n                node\n            };\n\n\n\n            var result = nodes.Remove(CreateEndpoint(1), \"default\", out var removedNode);\n\n\n\n            Assert.True(result);\n            Assert.Equal(node, removedNode);\n        }\n\n        [Fact]\n        public void Remove_InCollection_UnregistersForEvents()\n        {\n\n\n            var node = CreateMockNode(\"default\",CreateEndpoint(1));\n\n            var nodes = new ClusterNodeCollection\n            {\n                node.Object\n            };\n\n\n\n            nodes.Remove(CreateEndpoint(1), \"default\", out _);\n\n\n\n            node.VerifyRemove(m => m.KeyEndPointsChanged -= It.IsAny<NotifyCollectionChangedEventHandler>(), Times.AtLeastOnce);\n        }\n\n        [Fact]\n        public void Remove_InCollection_ReducesCount()\n        {\n\n\n            var node = CreateMockNode(\"default\",CreateEndpoint(1)).Object;\n\n            var nodes = new ClusterNodeCollection\n            {\n                node\n            };\n            Assert.Equal(1, nodes.Count);\n\n\n\n            var result = nodes.Remove(CreateEndpoint(1), \"default\", out _);\n\n\n\n            Assert.Equal(0, nodes.Count);\n        }\n\n        [Fact]\n        public void Remove_AnyMatching_InCollection_ReducesCount()\n        {\n\n\n            var node = CreateMockNode(\"default\",CreateEndpoint(1)).Object;\n            var node1 = CreateMockNode(\"default\",CreateEndpoint(1)).Object;\n\n            var nodes = new ClusterNodeCollection\n            {\n                node,\n                node1\n            };\n            Assert.Equal(2, nodes.Count);\n\n\n\n            var result = nodes.Remove(CreateEndpoint(1), \"default\", out _);\n\n\n\n            Assert.Equal(0, nodes.Count);\n        }\n\n        [Fact]\n        public void Remove_InCollection_UnregistersAllEndpoints()\n        {\n\n\n            var node = CreateMockNode(\"default\",CreateEndpoint(1), CreateEndpoint(2)).Object;\n\n            var nodes = new ClusterNodeCollection()\n            {\n                node\n            };\n\n\n\n            nodes.Remove(CreateEndpoint(1), \"default\", out _);\n\n\n\n            Assert.False(nodes.TryGet(CreateEndpoint(1), out _));\n            Assert.False(nodes.TryGet(CreateEndpoint(2), out _));\n        }\n\n        #endregion\n\n        #region Clear\n\n        [Fact]\n        public void Clear_RemovesNodes()\n        {\n\n\n            var node1 = CreateMockNode(\"default\", CreateEndpoint(1)).Object;\n            var node2 = CreateMockNode(\"default\", CreateEndpoint(2)).Object;\n\n            var nodes = new ClusterNodeCollection\n            {\n                node1,\n                node2\n            };\n            Assert.Equal(2, nodes.Count);\n\n\n\n            var result = nodes.Clear();\n\n\n\n            Assert.Equal(0, nodes.Count);\n        }\n\n        [Fact]\n        public void Clear_ReturnsRemovedNodes()\n        {\n\n\n            var node1 = CreateMockNode(\"default\", CreateEndpoint(1)).Object;\n            var node2 = CreateMockNode(\"default\", CreateEndpoint(2)).Object;\n\n            var nodes = new ClusterNodeCollection\n            {\n                node1,\n                node2\n            };\n            Assert.Equal(2, nodes.Count);\n\n\n\n            var result = nodes.Clear();\n\n\n\n            Assert.Equal(2, result.Count);\n            Assert.Contains(node1, result);\n            Assert.Contains(node2, result);\n        }\n\n        [Fact]\n        public void Clear_RemovesFromLookup()\n        {\n\n\n            var node1 = CreateMockNode(\"default\", CreateEndpoint(1)).Object;\n            var node2 = CreateMockNode(\"default\", CreateEndpoint(2)).Object;\n\n            var nodes = new ClusterNodeCollection\n            {\n                node1,\n                node2\n            };\n            Assert.Equal(2, nodes.Count);\n\n\n\n            nodes.Clear();\n\n\n\n            Assert.False(nodes.TryGet(CreateEndpoint(1), out _));\n            Assert.False(nodes.TryGet(CreateEndpoint(2), out _));\n        }\n\n        [Fact]\n        public void Clear_UnregistersEvents()\n        {\n\n\n            var node1 = CreateMockNode(\"default\", CreateEndpoint(1));\n            var node2 = CreateMockNode(\"default\", CreateEndpoint(2));\n\n            var nodes = new ClusterNodeCollection\n            {\n                node1.Object,\n                node2.Object\n            };\n            Assert.Equal(2, nodes.Count);\n\n\n\n            nodes.Clear();\n\n\n\n            node1.VerifyRemove(m => m.KeyEndPointsChanged -= It.IsAny<NotifyCollectionChangedEventHandler>(), Times.AtLeastOnce);\n            node2.VerifyRemove(m => m.KeyEndPointsChanged -= It.IsAny<NotifyCollectionChangedEventHandler>(), Times.AtLeastOnce);\n        }\n\n        #endregion\n\n        #region GetEnumerator\n\n        [Fact]\n        public void GetEnumerator_ChangeWhileEnumerating_GetsOriginalList()\n        {\n\n\n            var node1 = CreateMockNode(\"default\",CreateEndpoint(1)).Object;\n            var node2 = CreateMockNode(\"default\",CreateEndpoint(2)).Object;\n\n            var nodes = new ClusterNodeCollection\n            {\n                node1,\n                node2\n            };\n            Assert.Equal(2, nodes.Count);\n\n\n\n            using var enumerator = nodes.GetEnumerator();\n            Assert.True(enumerator.MoveNext());\n\n            Assert.True(nodes.Remove(CreateEndpoint(1), \"default\", out _));\n\n\n\n            Assert.True(enumerator.MoveNext());\n            Assert.False(enumerator.MoveNext());\n        }\n\n        #endregion\n\n        #region KeyEndPoint Monitoring\n\n        [Fact]\n        public void AddKeyEndPoint_RemovesFromLookup()\n        {\n\n\n            var node = CreateMockNode(\"default\", CreateEndpoint(1));\n\n            var nodes = new ClusterNodeCollection\n            {\n                node.Object\n            };\n\n            var args = new NotifyCollectionChangedEventArgs(\n                NotifyCollectionChangedAction.Add,\n                new List<HostEndpointWithPort> { CreateEndpoint(2) },\n                1);\n\n\n\n            node.Raise(m => m.KeyEndPointsChanged += null, args);\n\n\n\n            Assert.True(nodes.TryGet(CreateEndpoint(2), out _));\n        }\n\n        [Fact]\n        public void RemoveKeyEndPoint_RemovesFromLookup()\n        {\n\n\n            var node = CreateMockNode(\"default\", CreateEndpoint(1), CreateEndpoint(2));\n\n            var nodes = new ClusterNodeCollection\n            {\n                node.Object\n            };\n\n            var args = new NotifyCollectionChangedEventArgs(\n                NotifyCollectionChangedAction.Remove,\n                new List<HostEndpointWithPort> { CreateEndpoint(2) },\n                1);\n\n\n\n            node.Raise(m => m.KeyEndPointsChanged += null, args);\n\n\n\n            Assert.False(nodes.TryGet(CreateEndpoint(2), out _));\n        }\n\n        #endregion\n\n        #region Helpers\n\n        [Fact]\n        public void Remove_Endpoint_With_Multiple_Buckets()\n        {\n            var node1 = CreateMockNode(\"default\",CreateEndpoint(1));\n            var node2 = CreateMockNode(\"default\",CreateEndpoint(2));\n            var node3 = CreateMockNode(\"default2\",CreateEndpoint(3));\n            var node4 = CreateMockNode(\"default2\",CreateEndpoint(4));\n\n            var nodes = new ClusterNodeCollection { node1.Object, node2.Object, node3.Object, node4.Object };\n            var result = nodes.Remove(node3.Object.EndPoint, \"default2\", out IClusterNode oldNode);\n            Assert.True(result);\n            Assert.Equal(3, nodes.Count);\n            Assert.Equal(3, nodes.LookupDictionary.Count);\n\n            result = nodes.Remove(node4.Object.EndPoint, \"default2\", out IClusterNode oldNode2);\n            Assert.True(result);\n            Assert.Equal(2, nodes.Count);\n            Assert.Equal(2, nodes.LookupDictionary.Count);\n        }\n\n        private HostEndpointWithPort CreateEndpoint(byte i)\n        {\n            return new HostEndpointWithPort($\"127.0.0.{i}\", 11210);\n        }\n\n        private Mock<IClusterNode> CreateMockNode( string bucketName, params HostEndpointWithPort[] endPoints)\n        {\n            var node = new Mock<IClusterNode>();\n            node\n                .Setup(p => p.EndPoint)\n                .Returns(endPoints[0]);\n            node\n                .Setup(p => p.KeyEndPoints)\n                .Returns(new ReadOnlyCollection<HostEndpointWithPort>(endPoints));\n            node\n                .SetupAdd(m => m.KeyEndPointsChanged += It.IsAny<NotifyCollectionChangedEventHandler>());\n            node\n                .SetupRemove(m => m.KeyEndPointsChanged -= It.IsAny<NotifyCollectionChangedEventHandler>());\n            node\n                .Setup(x => x.Owner)\n                .Returns(new FakeBucket(bucketName, new ClusterOptions()));\n\n            return node;\n        }\n\n        #endregion\n    }\n}\n\n'couchbase-net-client/src/Couchbase/Management/Eventing/EventingFunctionService.cs'\n:#nullable enable\nusing System;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Couchbase.Core;\nusing Couchbase.Core.Diagnostics.Tracing;\nusing Couchbase.Core.IO.HTTP;\nusing Couchbase.Core.Logging;\nusing Microsoft.Extensions.Logging;\n\nnamespace Couchbase.Management.Eventing\n{\n\n    internal class EventingFunctionService : HttpServiceBase, IEventingFunctionService\n    {\n        private readonly IServiceUriProvider _serviceUriProvider;\n        private readonly ILogger<EventingFunctionService> _logger;\n        private readonly IRedactor _redactor;\n\n        public EventingFunctionService(ICouchbaseHttpClientFactory httpClientFactory, IServiceUriProvider serviceUriProvider,\n            ILogger<EventingFunctionService> logger, IRedactor redactor)\n            : base(httpClientFactory)\n        {\n            _serviceUriProvider = serviceUriProvider;\n            _logger = logger;\n            _redactor = redactor;\n        }\n\n        private Uri GetUri(string path, EventingFunctionKeyspace? managementScope)\n        {\n            var uri = _serviceUriProvider.GetRandomEventingUri();\n            var ub = new UriBuilder(uri)\n            {\n                Path = path\n            };\n\n            var isGlobal = managementScope is null or { Bucket: \"*\", Scope: \"*\" };\n            if (!isGlobal)\n            {\n                ub.Query =\n                    $\"bucket={Uri.EscapeDataString(managementScope!.Bucket)}&scope={Uri.EscapeDataString(managementScope!.Scope)}\";\n            }\n\n            return ub.Uri;\n        }\n\n\n        public Task<HttpResponseMessage> GetAsync(string path, IRequestSpan parentSpan, IRequestSpan encodeSpan, CancellationToken token, EventingFunctionKeyspace? managementScope = null)\n        {\n            var requestUri = GetUri(path, managementScope);\n            parentSpan.WithRemoteAddress(requestUri);\n\n            encodeSpan.Dispose();\n            using var dispatchSpan = parentSpan.DispatchSpan();\n            var httpClient = CreateHttpClient();\n            return httpClient.GetAsync(requestUri, token);\n        }\n\n\n        public Task<HttpResponseMessage> PostAsync(string path, IRequestSpan parentSpan, IRequestSpan encodeSpan, CancellationToken token, EventingFunction? eventingFunction = null, EventingFunctionKeyspace? managementScope = null)\n        {\n            var requestUri = GetUri(path, managementScope);\n            parentSpan.WithRemoteAddress(requestUri);\n\n            var content = eventingFunction != null ?\n                new StringContent(eventingFunction.ToJson(managementScope)) :\n                new StringContent(string.Empty);\n\n            encodeSpan.Dispose();\n            using var dispatchSpan = parentSpan.DispatchSpan();\n            var httpClient = CreateHttpClient();\n            return httpClient.PostAsync(requestUri, content, token);\n        }\n\n\n        public Task<HttpResponseMessage> DeleteAsync(string path, IRequestSpan parentSpan, IRequestSpan encodeSpan, CancellationToken token, EventingFunctionKeyspace? managementScope = null)\n        {\n            var requestUri = GetUri(path, managementScope);\n            parentSpan.WithRemoteAddress(requestUri);\n\n            encodeSpan.Dispose();\n            using var dispatchSpan = parentSpan.DispatchSpan();\n            var httpClient = CreateHttpClient();\n            return httpClient.DeleteAsync(requestUri, token);\n        }\n    }\n}\n",
        "gt": [
            "'couchbase-net-client/src/Couchbase/Management/Eventing/EventingFunctionService.cs'",
            "'couchbase-net-client/tests/Couchbase.UnitTests/Core/Diagnostics/Tracing/Fakes/FakeScope.cs'",
            "'couchbase-net-client/tests/Couchbase.UnitTests/Core/ClusterNodeCollectionTests.cs'"
        ]
    },
    {
        "files": [
            "'nunit-console/src/NUnitEngine/nunit.engine/Services/TestAgency.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine.core/Agents/RemoteTestAgent.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine.core/Communication/Transports/ITestAgentTransport.cs'",
            "'nunit-console/src/NUnitEngine/nunit-agent/Program.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine.core/Communication/Transports/Tcp/TestAgentTcpTransport.cs'"
        ],
        "content": "'nunit-console/src/NUnitEngine/nunit.engine/Services/TestAgency.cs'\n:\n\n#if NETFRAMEWORK\nusing System;\nusing System.Threading;\nusing System.Diagnostics;\nusing NUnit.Common;\nusing NUnit.Engine.Internal;\nusing NUnit.Engine.Communication.Transports.Remoting;\nusing NUnit.Engine.Communication.Transports.Tcp;\n\nnamespace NUnit.Engine.Services\n{\n\n\n\n\n\n\n\n\n    public partial class TestAgency : ITestAgency, IService\n    {\n        private static readonly Logger log = InternalTrace.GetLogger(typeof(TestAgency));\n\n        private const int NORMAL_TIMEOUT = 30000;\n        private const int DEBUG_TIMEOUT = NORMAL_TIMEOUT * 10;\n\n        private readonly AgentStore _agentStore = new AgentStore();\n\n        private IRuntimeFrameworkService _runtimeService;\n\n\n        private TestAgencyRemotingTransport _remotingTransport;\n        private TestAgencyTcpTransport _tcpTransport;\n\n        internal virtual string RemotingUrl => _remotingTransport.ServerUrl;\n        internal virtual string TcpEndPoint => _tcpTransport.ServerUrl;\n\n        public TestAgency()\n        {\n            var uri = \"TestAgency-\" + Guid.NewGuid();\n            var port = 0;\n            _remotingTransport = new TestAgencyRemotingTransport(this, uri, port);\n            _tcpTransport = new TestAgencyTcpTransport(this, port);\n        }\n\n        public void Register(ITestAgent agent)\n        {\n            _agentStore.Register(agent);\n        }\n\n        public ITestAgent GetAgent(TestPackage package)\n        {\n\n            string runtimeSetting = package.GetSetting(EnginePackageSettings.TargetRuntimeFramework, \"\");\n            Guard.OperationValid(runtimeSetting.Length > 0, \"LaunchAgentProcess called with no runtime specified\");\n            bool runAsX86 = package.GetSetting(EnginePackageSettings.RunAsX86, false);\n\n\n\n            var targetRuntime = RuntimeFramework.Parse(runtimeSetting);\n            if (!_runtimeService.IsAvailable(targetRuntime.Id, runAsX86))\n            {\n                string msg = $\"The {targetRuntime} framework is not available for X86={runAsX86}.\\r\\nAvailable frameworks:\";\n\n                var service = _runtimeService as RuntimeFrameworkService;\n                var availableRuntimes = runAsX86 ? service.AvailableX86Runtimes : service.AvailableRuntimes;\n                foreach (var runtime in availableRuntimes)\n                    msg += $\" {runtime}\";\n                throw new ArgumentException(msg);\n            }\n\n            var agentId = Guid.NewGuid();\n            var agentProcess = new AgentProcess(this, package, agentId);\n\n            agentProcess.Exited += (sender, e) => OnAgentExit((Process)sender, agentId);\n\n            agentProcess.Start();\n            log.Debug(\"Launched Agent process {0} - see nunit-agent_{0}.log\", agentProcess.Id);\n            log.Debug(\"Command line: \\\"{0}\\\" {1}\", agentProcess.StartInfo.FileName, agentProcess.StartInfo.Arguments);\n\n            _agentStore.AddAgent(agentId, agentProcess);\n\n            log.Debug($\"Waiting for agent {agentId:B} to register\");\n\n            const int pollTime = 200;\n\n\n            bool debug = package.GetSetting(EnginePackageSettings.DebugAgent, false) ||\n                         package.GetSetting(EnginePackageSettings.PauseBeforeRun, false);\n\n            int waitTime = debug ? DEBUG_TIMEOUT : NORMAL_TIMEOUT;\n\n\n\n            while (waitTime > agentProcess.TotalProcessorTime.TotalMilliseconds && !agentProcess.HasExited)\n            {\n                Thread.Sleep(pollTime);\n\n                if (_agentStore.IsReady(agentId, out var agent))\n                {\n                    log.Debug($\"Returning new agent {agentId:B}\");\n\n                    return new TestAgentRemotingProxy(agent, agentId);\n                }\n            }\n\n            return null;\n        }\n\n        internal bool IsAgentProcessActive(Guid agentId, out Process process)\n        {\n            return _agentStore.IsAgentProcessActive(agentId, out process);\n        }\n\n        private void OnAgentExit(Process process, Guid agentId)\n        {\n            _agentStore.MarkTerminated(agentId);\n\n            string errorMsg;\n\n            switch (process.ExitCode)\n            {\n                case AgentExitCodes.OK:\n                    return;\n                case AgentExitCodes.PARENT_PROCESS_TERMINATED:\n                    errorMsg = \"Remote test agent believes agency process has exited.\";\n                    break;\n                case AgentExitCodes.UNEXPECTED_EXCEPTION:\n                    errorMsg = \"Unhandled exception on remote test agent. \" +\n                               \"To debug, try running with the --inprocess flag, or using --trace=debug to output logs.\";\n                    break;\n                case AgentExitCodes.FAILED_TO_START_REMOTE_AGENT:\n                    errorMsg = \"Failed to start remote test agent.\";\n                    break;\n                case AgentExitCodes.DEBUGGER_SECURITY_VIOLATION:\n                    errorMsg = \"Debugger could not be started on remote agent due to System.Security.Permissions.UIPermission not being set.\";\n                    break;\n                case AgentExitCodes.DEBUGGER_NOT_IMPLEMENTED:\n                    errorMsg = \"Debugger could not be started on remote agent as not available on platform.\";\n                    break;\n                case AgentExitCodes.UNABLE_TO_LOCATE_AGENCY:\n                    errorMsg = \"Remote test agent unable to locate agency process.\";\n                    break;\n                case AgentExitCodes.STACK_OVERFLOW_EXCEPTION:\n                    if (Environment.OSVersion.Platform == PlatformID.Win32NT)\n                    {\n                        errorMsg = \"Remote test agent was terminated due to a stack overflow.\";\n                    }\n                    else\n                    {\n                        errorMsg = $\"Remote test agent exited with non-zero exit code {process.ExitCode}\";\n                    }\n                    break;\n                default:\n                    errorMsg = $\"Remote test agent exited with non-zero exit code {process.ExitCode}\";\n                    break;\n            }\n\n            throw new NUnitEngineException(errorMsg);\n        }\n\n        public IServiceLocator ServiceContext { get; set; }\n\n        public ServiceStatus Status { get; private set; }\n\n\n\n        public void StopService()\n        {\n            try\n            {\n                _remotingTransport.Stop();\n                _tcpTransport.Stop();\n            }\n            finally\n            {\n                Status = ServiceStatus.Stopped;\n            }\n        }\n\n        public void StartService()\n        {\n            _runtimeService = ServiceContext.GetService<IRuntimeFrameworkService>();\n            if (_runtimeService == null)\n                Status = ServiceStatus.Error;\n            else\n                try\n                {\n                _remotingTransport.Start();\n                    _tcpTransport.Start();\n                    Status = ServiceStatus.Started;\n            }\n            catch\n            {\n                Status = ServiceStatus.Error;\n                throw;\n            }\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    }\n}\n#endif\n\n'nunit-console/src/NUnitEngine/nunit.engine.core/Agents/RemoteTestAgent.cs'\n:\n\nusing System;\nusing NUnit.Common;\nusing NUnit.Engine.Communication.Transports;\n\nnamespace NUnit.Engine.Agents\n{\n\n\n\n\n\n\n\n    public class RemoteTestAgent : TestAgent\n    {\n        private IServiceLocator _services;\n\n\n\n\n\n\n\n\n        public RemoteTestAgent(IServiceLocator services, Guid agentId)\n            : base(agentId)\n        {\n            _services = services;\n        }\n\n        public ITestAgentTransport Transport;\n\n        public int ProcessId => System.Diagnostics.Process.GetCurrentProcess().Id;\n\n        public override bool Start()\n        {\n            Guard.OperationValid(Transport != null, \"Transport must be set before calling Start().\");\n            return Transport.Start();\n        }\n\n        public override void Stop()\n        {\n            Transport.Stop();\n        }\n\n        public override ITestEngineRunner CreateRunner(TestPackage package)\n        {\n            return Services.InProcessTestRunnerFactory.MakeTestRunner(_services, package);\n        }\n    }\n}\n\n'nunit-console/src/NUnitEngine/nunit.engine.core/Communication/Transports/ITestAgentTransport.cs'\n:\n\nusing NUnit.Engine.Agents;\n\nnamespace NUnit.Engine.Communication.Transports\n{\n\n\n\n\n    public interface ITestAgentTransport : ITransport\n    {\n        TestAgent Agent { get; }\n        ITestEngineRunner CreateRunner(TestPackage package);\n    }\n}\n\n'nunit-console/src/NUnitEngine/nunit-agent/Program.cs'\n:\n\nusing System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Reflection;\nusing System.Runtime.InteropServices;\nusing System.Runtime.Versioning;\nusing System.Security;\nusing NUnit.Common;\nusing NUnit.Engine;\nusing NUnit.Engine.Agents;\nusing NUnit.Engine.Internal;\nusing NUnit.Engine.Services;\n\nnamespace NUnit.Agent\n{\n    public class NUnitTestAgent\n    {\n        static Guid AgentId;\n        static string AgencyUrl;\n        static Process AgencyProcess;\n        static RemoteTestAgent Agent;\n        private static Logger log;\n\n\n\n\n        [STAThread]\n        public static void Main(string[] args)\n        {\n            AgentId = new Guid(args[0]);\n            AgencyUrl = args[1];\n\n            var traceLevel = InternalTraceLevel.Off;\n            var pid = Process.GetCurrentProcess().Id;\n            var debugArgPassed = false;\n            var workDirectory = string.Empty;\n            var agencyPid = string.Empty;\n\n            for (int i = 2; i < args.Length; i++)\n            {\n                string arg = args[i];\n\n\n\n                if (arg == \"--debug-agent\")\n                {\n                    debugArgPassed = true;\n                }\n                else if (arg.StartsWith(\"--trace=\"))\n                {\n                    traceLevel = (InternalTraceLevel)Enum.Parse(typeof(InternalTraceLevel), arg.Substring(8));\n                }\n                else if (arg.StartsWith(\"--pid=\"))\n                {\n                    agencyPid = arg.Substring(6);\n                }\n                else if (arg.StartsWith(\"--work=\"))\n                {\n                    workDirectory = arg.Substring(7);\n                }\n            }\n\n\n\n            log = InternalTrace.GetLogger(typeof(NUnitTestAgent));\n\n            log.Info(\"Agent process {0} starting\", pid);\n\n            if (debugArgPassed)\n                TryLaunchDebugger();\n\n            LocateAgencyProcess(agencyPid);\n\n#if NET5_0_OR_GREATER\n            log.Info($\"Running {typeof(NUnitTestAgent).Assembly.GetCustomAttribute<TargetFrameworkAttribute>().FrameworkDisplayName} agent under {RuntimeInformation.FrameworkDescription}\");\n#elif NETCOREAPP3_1\n            log.Info($\"Running .NET Core 3.1 agent under {RuntimeInformation.FrameworkDescription}\");\n#elif NET462\n            log.Info($\"Running .NET 4.6.2 agent under {RuntimeFramework.CurrentFramework.DisplayName}\");\n#endif\n\n\n            var engine = new CoreEngine\n            {\n                WorkDirectory = workDirectory,\n                InternalTraceLevel = traceLevel\n            };\n\n\n            engine.Services.Add(new ExtensionService());\n            engine.Services.Add(new DriverService());\n\n\n            log.Info(\"Initializing Services\");\n            engine.InitializeServices();\n\n            log.Info(\"Starting RemoteTestAgent\");\n            Agent = new RemoteTestAgent(engine.Services, AgentId);\n            Agent.Transport =\n#if NETFRAMEWORK\n                new Engine.Communication.Transports.Remoting.TestAgentRemotingTransport(Agent, AgencyUrl);\n#else\n                new Engine.Communication.Transports.Tcp.TestAgentTcpTransport(Agent, AgencyUrl);\n#endif\n\n            try\n            {\n                if (Agent.Start())\n                    WaitForStop();\n                else\n                {\n                    log.Error(\"Failed to start RemoteTestAgent\");\n                    Environment.Exit(AgentExitCodes.FAILED_TO_START_REMOTE_AGENT);\n                }\n            }\n            catch (Exception ex)\n            {\n                log.Error(\"Exception in RemoteTestAgent. {0}\", ExceptionHelper.BuildMessageAndStackTrace(ex));\n                Environment.Exit(AgentExitCodes.UNEXPECTED_EXCEPTION);\n            }\n            log.Info(\"Agent process {0} exiting cleanly\", pid);\n\n            Environment.Exit(AgentExitCodes.OK);\n        }\n\n        private static void LocateAgencyProcess(string agencyPid)\n        {\n            var agencyProcessId = int.Parse(agencyPid);\n            try\n            {\n                AgencyProcess = Process.GetProcessById(agencyProcessId);\n            }\n            catch (Exception e)\n            {\n                log.Error($\"Unable to connect to agency process with PID: {agencyProcessId}\");\n                log.Error($\"Failed with exception: {e.Message} {e.StackTrace}\");\n                Environment.Exit(AgentExitCodes.UNABLE_TO_LOCATE_AGENCY);\n            }\n        }\n\n        private static void WaitForStop()\n        {\n            log.Debug(\"Waiting for stopSignal\");\n\n            while (!Agent.WaitForStop(500))\n            {\n                if (AgencyProcess.HasExited)\n                {\n                    log.Error(\"Parent process has been terminated.\");\n                    Environment.Exit(AgentExitCodes.PARENT_PROCESS_TERMINATED);\n                }\n            }\n\n            log.Debug(\"Stop signal received\");\n        }\n\n        private static void TryLaunchDebugger()\n        {\n            if (Debugger.IsAttached)\n                return;\n\n            try\n            {\n                Debugger.Launch();\n            }\n            catch (SecurityException se)\n            {\n                if (InternalTrace.Initialized)\n                {\n                    log.Error($\"System.Security.Permissions.UIPermission is not set to start the debugger. {se} {se.StackTrace}\");\n                }\n                Environment.Exit(AgentExitCodes.DEBUGGER_SECURITY_VIOLATION);\n            }\n            catch (NotImplementedException nie)\n            {\n                if (InternalTrace.Initialized)\n                {\n                    log.Error($\"Debugger is not available on all platforms. {nie} {nie.StackTrace}\");\n                }\n                Environment.Exit(AgentExitCodes.DEBUGGER_NOT_IMPLEMENTED);\n            }\n        }\n    }\n}\n\n'nunit-console/src/NUnitEngine/nunit.engine.core/Communication/Transports/Tcp/TestAgentTcpTransport.cs'\n:\n\nusing System.Net;\nusing System.Net.Sockets;\nusing System.Threading;\nusing NUnit.Common;\nusing NUnit.Engine.Agents;\nusing NUnit.Engine.Internal;\nusing NUnit.Engine.Communication.Messages;\nusing NUnit.Engine.Communication.Protocols;\n\nnamespace NUnit.Engine.Communication.Transports.Tcp\n{\n\n\n\n\n\n    public class TestAgentTcpTransport : ITestAgentTransport, ITestEventListener\n    {\n        private static readonly Logger log = InternalTrace.GetLogger(typeof(TestAgentTcpTransport));\n\n        private string _agencyUrl;\n        private Socket _clientSocket;\n        private ITestEngineRunner _runner;\n\n        public TestAgentTcpTransport(RemoteTestAgent agent, string serverUrl)\n        {\n            Guard.ArgumentNotNull(agent, nameof(agent));\n            Agent = agent;\n\n            Guard.ArgumentNotNullOrEmpty(serverUrl, nameof(serverUrl));\n            _agencyUrl = serverUrl;\n\n            var parts = serverUrl.Split(new char[] { ':' });\n            Guard.ArgumentValid(parts.Length == 2, \"Invalid server address specified. Must be a valid endpoint including the port number\", nameof(serverUrl));\n            ServerEndPoint = new IPEndPoint(IPAddress.Parse(parts[0]), int.Parse(parts[1]));\n        }\n\n        public TestAgent Agent { get; }\n\n        public IPEndPoint ServerEndPoint { get; }\n\n        public bool Start()\n        {\n            log.Info(\"Connecting to TestAgency at {0}\", _agencyUrl);\n\n\n            _clientSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);\n            _clientSocket.Connect(ServerEndPoint);\n\n\n            _clientSocket.Send(Agent.Id.ToByteArray());\n\n\n            Thread commandLoop = new Thread(CommandLoop);\n            commandLoop.Start();\n\n            return true;\n        }\n\n        public void Stop()\n        {\n            Agent.StopSignal.Set();\n        }\n\n        public ITestEngineRunner CreateRunner(TestPackage package)\n        {\n            return Agent.CreateRunner(package);\n        }\n\n        private void CommandLoop()\n        {\n            bool keepRunning = true;\n            var socketReader = new SocketReader(_clientSocket, new BinarySerializationProtocol());\n\n            while (keepRunning)\n            {\n                var command = socketReader.GetNextMessage<CommandMessage>();\n\n                switch (command.CommandName)\n                {\n                    case \"CreateRunner\":\n                        var package = (TestPackage)command.Arguments[0];\n                        _runner = CreateRunner(package);\n                        break;\n                    case \"Load\":\n                        SendResult(_runner.Load());\n                        break;\n                    case \"Reload\":\n                        SendResult(_runner.Reload());\n                        break;\n                    case \"Unload\":\n                        _runner.Unload();\n                        break;\n                    case \"Explore\":\n                        var filter = (TestFilter)command.Arguments[0];\n                        SendResult(_runner.Explore(filter));\n                        break;\n                    case \"CountTestCases\":\n                        filter = (TestFilter)command.Arguments[0];\n                        SendResult(_runner.CountTestCases(filter));\n                        break;\n                    case \"Run\":\n                        filter = (TestFilter)command.Arguments[0];\n                        SendResult(_runner.Run(this, filter));\n                        break;\n\n                    case \"RunAsync\":\n                        filter = (TestFilter)command.Arguments[0];\n                        _runner.RunAsync(this, filter);\n                        break;\n\n                    case \"Stop\":\n                        keepRunning = false;\n                        break;\n                }\n            }\n\n            Stop();\n        }\n\n        private void SendResult(object result)\n        {\n            var resultMessage = new CommandReturnMessage(result);\n            var bytes = new BinarySerializationProtocol().Encode(resultMessage);\n            _clientSocket.Send(bytes);\n        }\n\n        public void OnTestEvent(string report)\n        {\n            var progressMessage = new ProgressMessage(report);\n            var bytes = new BinarySerializationProtocol().Encode(progressMessage);\n            _clientSocket.Send(bytes);\n        }\n    }\n}\n",
        "gt": [
            "'nunit-console/src/NUnitEngine/nunit.engine.core/Communication/Transports/ITestAgentTransport.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine.core/Agents/RemoteTestAgent.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine.core/Communication/Transports/Tcp/TestAgentTcpTransport.cs'",
            "'nunit-console/src/NUnitEngine/nunit.engine/Services/TestAgency.cs'",
            "'nunit-console/src/NUnitEngine/nunit-agent/Program.cs'"
        ]
    },
    {
        "files": [
            "'WolvenKit-7/WolvenKit/Forms/UserControl/frmImagePreview.cs'",
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAIActionBruxaBeingHit.cs'",
            "'WolvenKit-7/WolvenKit.App/Model/Arguments/RequestEmbeddedFileOpenArgs.cs'",
            "'WolvenKit-7/CR2WTests/frmUnitTest.cs'"
        ],
        "content": "'WolvenKit-7/WolvenKit/Forms/UserControl/frmImagePreview.cs'\n:using System;\nusing System.Drawing;\nusing System.Windows.Forms;\nusing WeifenLuo.WinFormsUI.Docking;\nusing WolvenKit.CR2W;\nusing WolvenKit.Cache;\nusing WolvenKit.CR2W.Types;\nusing System.IO;\nusing System.Linq;\nusing WolvenKit.App.Model;\n\nnamespace WolvenKit\n{\n    public partial class frmImagePreview : DockContent\n    {\n        CR2WExportWrapper m_chunk = null;\n        private enum EGDIFormats\n        {\n            BMP,\n            GIF,\n            JPG,\n            JPEG,\n            PNG,\n            TIFF\n        }\n\n        public frmImagePreview()\n        {\n            InitializeComponent();\n        }\n\n        public void SetImage(string path)\n        {\n            saveImageAsDdsToolStripMenuItem.Enabled = false;\n            replaceImageWithDdsToolStripMenuItem.Enabled = false;\n            if (!File.Exists(path)) return;\n            if (Enum.GetNames(typeof(EGDIFormats)).Contains(Path.GetExtension(path).TrimStart('.').ToUpper()))\n                ImagePreviewControl.Image = Image.FromFile(path) ?? SystemIcons.Warning.ToBitmap();\n            else if (Path.GetExtension(path).ToUpper().Contains(\"TGA\") || Path.GetExtension(path).ToUpper().Contains(\"DDS\"))\n                ImagePreviewControl.Image = ImageUtility.FromFile(path) ?? SystemIcons.Warning.ToBitmap();\n            else\n                ImagePreviewControl.Image = SystemIcons.Warning.ToBitmap();\n            this.Text = Path.GetFileName(path);\n        }\n\n        public void SetImage(CR2WExportWrapper chunk)\n        {\n            saveImageAsDdsToolStripMenuItem.Enabled = false;\n            replaceImageWithDdsToolStripMenuItem.Enabled = false;\n            if (chunk == null) return;\n            if (chunk.data is CBitmapTexture xbm && xbm.GetBytes() != null)\n            {\n                m_chunk = chunk;\n                saveImageAsDdsToolStripMenuItem.Enabled = true;\n                replaceImageWithDdsToolStripMenuItem.Enabled = true;\n                ImagePreviewControl.Image = ImageUtility.Xbm2Bmp(xbm) ?? SystemIcons.Warning.ToBitmap();\n            }\n        }\n\n\n        private void copyImageToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            Clipboard.SetImage(ImagePreviewControl.Image);\n        }\n\n        private void saveImageAsToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            using (var sf = new SaveFileDialog())\n            {\n                sf.Title = @\"Choose a location to save.\";\n                sf.Filter = @\"Bitmap Image (.bmp)|*.bmp|Gif Image (.gif)|*.gif|JPEG Image (.jpeg)|*.jpeg|Png Image (.png)|*.png|Tiff Image (.tiff)|*.tiff|Wmf Image (.wmf)|*.wmf\"; ;\n                if (sf.ShowDialog() == DialogResult.OK)\n                {\n                    ImagePreviewControl.Image.Save(sf.FileName);\n                }\n            }\n        }\n\n        private void replaceImageToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            using (var of = new OpenFileDialog())\n            {\n                of.Title = @\"Choose an image\";\n                of.Filter = @\"Bitmap Image (.bmp)|*.bmp|Gif Image (.gif)|*.gif|JPEG Image (.jpeg)|*.jpeg|Png Image (.png)|*.png|Tiff Image (.tiff)|*.tiff|Wmf Image (.wmf)|*.wmf\"; ;\n                if (of.ShowDialog() == DialogResult.OK)\n                {\n                    ImagePreviewControl.Image = Image.FromFile(of.FileName);\n                    UpdateFileWithImage(ImagePreviewControl.Image);\n                }\n            }\n        }\n\n        public void UpdateFileWithImage(Image image)\n        {\n\n\n\n\n\n        }\n\n        private void saveImageAsDdsToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            using (var sf = new SaveFileDialog())\n            {\n                sf.Title = @\"Choose a location to save.\";\n                sf.Filter = @\"DDS Image (.dds)|*.dds\";\n                if (sf.ShowDialog() == DialogResult.OK)\n                {\n                    if (m_chunk != null && m_chunk.data is CBitmapTexture xbm)\n                    {\n                        byte[] ddsBytes = ImageUtility.Xbm2DdsBytes(xbm);\n                        System.IO.File.WriteAllBytes(sf.FileName, ddsBytes);\n                    }\n                }\n            }\n        }\n\n        private void replaceImageWithDdsToolStripMenuItem_Click(object sender, EventArgs e)\n        {\n            using (var of = new OpenFileDialog())\n            {\n                of.Title = @\"Choose an image\";\n                of.Filter = @\"DDS Image (.dds)|*.dds\";\n                if (of.ShowDialog() == DialogResult.OK)\n                {\n                    var ddsBytes = System.IO.File.ReadAllBytes(of.FileName);\n                    (m_chunk.data as CBitmapTexture).Residentmip.Bytes = ImageUtility.Dds2Bytes(ddsBytes);\n                    (m_chunk.data as CBitmapTexture).ResidentmipSize.val = (uint)(m_chunk.data as CBitmapTexture).Residentmip.Bytes.Length;\n\n                    ImagePreviewControl.Image = ImageUtility.FromBytes(ddsBytes);\n                }\n            }\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAIActionBruxaBeingHit.cs'\n:using System.IO;\nusing System.Runtime.Serialization;\nusing WolvenKit.CR2W.Reflection;\nusing FastMember;\nusing static WolvenKit.CR2W.Types.Enums;\n\n\nnamespace WolvenKit.CR2W.Types\n{\n\t[DataContract(Namespace = \"\")]\n\t[REDMeta]\n\tpublic class CAIActionBruxaBeingHit : CAINpcActionSubtree\n\t{\n\t\tpublic CAIActionBruxaBeingHit(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name){ }\n\n\t\tpublic static new CVariable Create(CR2WFile cr2w, CVariable parent, string name) => new CAIActionBruxaBeingHit(cr2w, parent, name);\n\n\t\tpublic override void Read(BinaryReader file, uint size) => base.Read(file, size);\n\n\t\tpublic override void Write(BinaryWriter file) => base.Write(file);\n\n\t}\n}\n'WolvenKit-7/WolvenKit.App/Model/Arguments/RequestEmbeddedFileOpenArgs.cs'\n:﻿using System;\nusing System.IO;\nusing WolvenKit.Common.Model;\nusing WolvenKit.CR2W;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit.App.Model\n{\n    public class RequestEmbeddedFileOpenArgs : EventArgs\n    {\n        public CR2WEmbeddedWrapper Embeddedfile { get; }\n\n        public RequestEmbeddedFileOpenArgs(CR2WEmbeddedWrapper embeddedfile)\n        {\n            Embeddedfile = embeddedfile;\n        }\n    }\n\n    public class RequestByteArrayFileOpenArgs : EventArgs\n    {\n        public CVariable Variable { get; }\n\n        public RequestByteArrayFileOpenArgs(CVariable var)\n        {\n            Variable = var;\n        }\n    }\n}\n'WolvenKit-7/CR2WTests/frmUnitTest.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel;\nusing System.Data;\nusing System.Drawing;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing WolvenKit;\nusing System.IO.MemoryMappedFiles;\nusing System.IO;\nusing WolvenKit.CR2W;\nusing WolvenKit.Bundles;\nusing WolvenKit.Common;\nusing System.Diagnostics;\nusing System.Security.Cryptography;\nusing WolvenKit.Common.Extensions;\nusing System.Collections.Concurrent;\nusing System.Threading;\n\nnamespace CR2WTests\n{\n    public partial class frmUnitTest : Form\n    {\n        private Tuple<long, int> res;\n\n        private string ext;\n        private string bundletag;\n        private BundleManager bm;\n\n        public frmUnitTest(string _ext, string _bundletag, BundleManager _mc)\n        {\n            InitializeComponent();\n\n            ext = _ext;\n            bundletag = _bundletag;\n            bm = _mc;\n\n\n            Setup();\n\n            Task.Run(() => Run());\n\n            this.Text = ext;\n        }\n\n        private void UpdateRichTextBox1(string val)\n        {\n            if (this.richTextBox1.InvokeRequired)\n            {\n                this.richTextBox1.BeginInvoke((MethodInvoker)delegate () { this.richTextBox1.AppendText(val);});\n            }\n            else\n            {\n                this.richTextBox1.AppendText(val);\n            }\n        }\n        private void UpdateRichTextBox2(string val)\n        {\n            if (this.richTextBox2.InvokeRequired)\n            {\n                this.richTextBox2.BeginInvoke((MethodInvoker)delegate () { this.richTextBox2.AppendText(val); });\n            }\n            else\n            {\n                this.richTextBox2.AppendText(val);\n            }\n        }\n        private void UpdateProgress()\n        {\n            if (this.progressBar1.InvokeRequired)\n            {\n                this.progressBar1.BeginInvoke((MethodInvoker)delegate () { this.progressBar1.PerformStep(); });\n            }\n            else\n            {\n                this.progressBar1.PerformStep();\n            }\n        }\n        private void UpdateMaxProgress(int val)\n        {\n            if (this.progressBar1.InvokeRequired)\n            {\n                this.progressBar1.BeginInvoke((MethodInvoker)delegate () { this.progressBar1.Maximum = val; });\n            }\n            else\n            {\n                this.progressBar1.Maximum = val;\n            }\n        }\n\n        private void Setup()\n        {\n            progressBar1.Minimum = 1;\n            progressBar1.Value = 1;\n            progressBar1.Step = 1;\n        }\n\n        public async Task<Tuple<long, int>> Run()\n        {\n            await Task.Run(() => StressTestExt()).ContinueWith(\n                antecedent =>\n                {\n                    res = antecedent.Result;\n                    Thread.Sleep(1000);\n                    try\n                    {\n                        this.Close();\n                    }\n                    catch\n                    {\n\n                    }\n                    return antecedent.Result;\n\n                }\n                );\n            return null;\n        }\n\n        public Tuple<long, int> StressTestExt()\n        {\n            long unknownbytes = 0;\n            long totalbytes = 0;\n            ConcurrentDictionary<string, string> unknownclasses = new ConcurrentDictionary<string, string>();\n            long filecount = 0;\n\n            Dictionary<string, Tuple<long, long>> chunkstate = new Dictionary<string, Tuple<long, long>>();\n            ConcurrentBag<string> unparsedfiles = new ConcurrentBag<string>();\n            var processedfiles = new ConcurrentBag<string>();\n\n            List<IWitcherFile> files = bm.Items\n                .SelectMany(_ => _.Value)\n                .Where(x => x.Name.EndsWith(ext))\n                .ToList();\n\n            filecount = files.Count;\n\n\n            UpdateMaxProgress(files.Count);\n\n            Parallel.For (0, files.Count, new ParallelOptions { MaxDegreeOfParallelism = 8 }, i =>\n            {\n                IWitcherFile f = (IWitcherFile)files[i];\n\n                if (f is BundleItem bi )\n                {\n\n                    UpdateRichTextBox1($\"{i + 1}/{files.Count}: {f.Name}\\r\\n\");\n                    UpdateProgress();\n                    try\n                    {\n                        var fileresult = StressTestFile(bi, ref unknownclasses, ref totalbytes, ref unknownbytes, ref chunkstate);\n                        processedfiles.Add(f.Name);\n                    }\n                    catch (Exception ex)\n                    {\n                        unparsedfiles.Add(f.Name);\n\n                        Console.WriteLine($\"{f.Name}:{ex.Message}\");\n                        UpdateRichTextBox2($\"{f.Name}:{ex.Message}\\r\\n\");\n                    }\n                }\n            });\n\n            Console.WriteLine($\"{ext} test completed...\");\n            Console.WriteLine(\"Results:\");\n            Console.WriteLine($\"\\t- Parsed {filecount} {ext} files\");\n            Console.WriteLine($\"\\t- Parsing percentage => {((double)totalbytes - (double)unknownbytes) / (double)totalbytes:0.00%}\" +\n                $\" | Couldn't parse: {unparsedfiles.Count} files!\");\n            Console.WriteLine($\"Classes: \");\n            UpdateRichTextBox2($\"{ext} test completed...\\r\\n\");\n            UpdateRichTextBox2(\"Results:\\r\\n\");\n            UpdateRichTextBox2($\"\\t- Parsed {filecount} {ext} files\\r\\n\");\n            UpdateRichTextBox2($\"\\t- Parsing percentage => {((double)totalbytes - (double)unknownbytes) / (double)totalbytes:0.00%}\\r\\n\" +\n                $\" | Couldn't parse: {unparsedfiles.Count} files!\\r\\n\");\n            UpdateRichTextBox2($\"Classes: \\r\\n\");\n\n            foreach (var c in chunkstate)\n            {\n                var percentage = (((double)c.Value.Item1 - (double)c.Value.Item2) / (double)c.Value.Item1);\n                if (percentage != (double)1)\n                {\n                    Console.WriteLine($\"\\t- {c.Key} {percentage:0.00%}\");\n                    UpdateRichTextBox2($\"\\t- {c.Key} {percentage:0.00%}\\r\\n\");\n                }\n            }\n\n            Console.WriteLine(\"Files errored during parsing:\");\n            UpdateRichTextBox2(\"Files errored during parsing:\\r\\n\");\n            foreach (var f in unparsedfiles)\n            {\n                Console.WriteLine($\"\\t-{f}\");\n                UpdateRichTextBox2($\"\\t-{f}\\r\\n\");\n            }\n\n            Console.WriteLine(\"Types unparsed:\");\n            UpdateRichTextBox2(\"Types unparsed:\\r\\n\");\n            foreach (var f in unknownclasses)\n            {\n                Console.WriteLine($\"\\t-{f}\");\n                UpdateRichTextBox2($\"\\t-{f}\\r\\n\");\n            }\n\n            return new Tuple<long, int>(unknownbytes, unparsedfiles.Count);\n        }\n\n        private static int StressTestFile(BundleItem f, ref ConcurrentDictionary<string, string> unknownclasses, ref long totalbytes, ref long unknownbytes, ref Dictionary<string, Tuple<long, long>> chunkstate)\n        {\n            var crw = new CR2WFile();\n\n            using (var ms = new MemoryStream())\n            using (var br = new BinaryReader(ms))\n            {\n                f.ExtractExistingMMF(ms);\n                ms.Seek(0, SeekOrigin.Begin);\n\n                #region Reading Test A\n\n                crw.Read(br);\n                #endregion\n\n                #region StringTableTest A.1\n\n                (var dict, var strings, var nameslist, var importslist) = crw.GenerateStringtable();\n                var newdictvalues = dict.Values.ToList();\n                var dictvalues = crw.StringDictionary.Values.ToList();\n                var diffDictList = dictvalues.Except(newdictvalues).ToList();\n\n                bool isclassicalinconsistentw2anims = false;\n                bool isclassicalinconsistentw2phase = false;\n\n                if (diffDictList.Count != 0)\n                {\n\n                    foreach (string str in diffDictList)\n                    {\n                        if (str == \"extAnimEvents\" ||\n                            str == \"array:2,0,handle:CExtAnimEventsFile\" ||\n                            str == \"CExtAnimEventsFile\" ||\n                            str.Contains(\"sounds\\\\\") ||\n                            str.Contains(\"sound\\\\\"))\n                        {\n                            isclassicalinconsistentw2anims = true;\n                            break;\n                        }\n                        else\n                        {\n                            continue;\n                        }\n                    }\n\n                    foreach (string str in diffDictList)\n                    {\n                        if (str == \"@SItem\" ||\n                            str == \"SItem\" ||\n                            str == \"#CEnvironmentDefinition\" ||\n                            str == \"CEnvironmentDefinition\")\n                        {\n                            isclassicalinconsistentw2phase = true;\n                            break;\n                        }\n                        else\n                        {\n                            continue;\n                        }\n                    }\n\n                    if (isclassicalinconsistentw2anims)\n                    {\n\n\n                    }\n                    else if (isclassicalinconsistentw2phase)\n                    {\n\n\n\n\n                    }\n                    else\n                    {\n                        throw new InvalidBundleException(\" Generated dictionary not equal actual dictionary.\");\n                    }\n                }\n                #endregion\n\n                #region Writing Test B\n                if (isclassicalinconsistentw2phase || isclassicalinconsistentw2anims)\n                {\n\n\n                }\n                else\n                {\n                    byte[] buffer_testB;\n                    byte[] buffer_testB_original;\n\n                    using (var ms_testB = new MemoryStream())\n                    using (var bw_testB = new BinaryWriter(ms_testB))\n                    {\n                        crw.Write(bw_testB);\n                        buffer_testB = ms_testB.ToArray();\n                    }\n\n\n                    ms.Seek(0, SeekOrigin.Begin);\n                    buffer_testB_original = ms.ToArray();\n\n                    if (!Enumerable.SequenceEqual(buffer_testB_original, buffer_testB))\n                    {\n                        throw new InvalidBundleException(\" Generated cr2w file not equal to original file.\");\n                    }\n                }\n                #endregion\n\n            }\n            foreach (var ut in crw.UnknownTypes)\n            {\n                unknownclasses.TryAdd(ut,ut);\n            }\n            foreach (var c in crw.chunks)\n            {\n                var ubsl = c.unknownBytes?.Bytes != null ? c.unknownBytes.Bytes.Length : 0;\n\n                lock (chunkstate)\n                {\n                    if (!chunkstate.ContainsKey(c.REDType))\n                    {\n                        chunkstate.Add(c.REDType, new Tuple<long, long>(0, 0));\n                    }\n                    var already = chunkstate[c.REDType];\n                    chunkstate[c.REDType] = new Tuple<long, long>(\n                            already.Item1 + c.Export.dataSize,\n                            already.Item2 + ubsl\n                        );\n                }\n\n                Interlocked.Add(ref totalbytes, c.Export.dataSize);\n                Interlocked.Add(ref unknownbytes, ubsl);\n            }\n            return 0;\n        }\n\n        internal Tuple<long, int> GetResult()\n        {\n\n            return res;\n        }\n\n#pragma warning disable CS1998\n        private async void frmUnitTest_Shown(object sender, EventArgs e)\n#pragma warning restore CS1998\n        {\n\n        }\n    }\n}\n",
        "gt": [
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/CAIActionBruxaBeingHit.cs'",
            "'WolvenKit-7/WolvenKit.App/Model/Arguments/RequestEmbeddedFileOpenArgs.cs'",
            "'WolvenKit-7/WolvenKit/Forms/UserControl/frmImagePreview.cs'",
            "'WolvenKit-7/CR2WTests/frmUnitTest.cs'"
        ]
    },
    {
        "files": [
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Observable.Time.cs'",
            "'Idle-Miner/Assets/Plugins/Zenject/OptionalExtras/IntegrationTests/Tests/Misc/TestMonoKernelDecoration/TestMonoKernelDecoration.cs'",
            "'Idle-Miner/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs'",
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Operators/Skip.cs'",
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Operators/Repeat.cs'"
        ],
        "content": "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Observable.Time.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing UniRx.Operators;\n\nnamespace UniRx\n{\n\n    public static partial class Observable\n    {\n        public static IObservable<long> Interval(TimeSpan period)\n        {\n            return new TimerObservable(period, period, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<long> Interval(TimeSpan period, IScheduler scheduler)\n        {\n            return new TimerObservable(period, period, scheduler);\n        }\n\n        public static IObservable<long> Timer(TimeSpan dueTime)\n        {\n            return new TimerObservable(dueTime, null, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<long> Timer(DateTimeOffset dueTime)\n        {\n            return new TimerObservable(dueTime, null, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<long> Timer(TimeSpan dueTime, TimeSpan period)\n        {\n            return new TimerObservable(dueTime, period, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<long> Timer(DateTimeOffset dueTime, TimeSpan period)\n        {\n            return new TimerObservable(dueTime, period, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<long> Timer(TimeSpan dueTime, IScheduler scheduler)\n        {\n            return new TimerObservable(dueTime, null, scheduler);\n        }\n\n        public static IObservable<long> Timer(DateTimeOffset dueTime, IScheduler scheduler)\n        {\n            return new TimerObservable(dueTime, null, scheduler);\n        }\n\n        public static IObservable<long> Timer(TimeSpan dueTime, TimeSpan period, IScheduler scheduler)\n        {\n            return new TimerObservable(dueTime, period, scheduler);\n        }\n\n        public static IObservable<long> Timer(DateTimeOffset dueTime, TimeSpan period, IScheduler scheduler)\n        {\n            return new TimerObservable(dueTime, period, scheduler);\n        }\n\n        public static IObservable<Timestamped<TSource>> Timestamp<TSource>(this IObservable<TSource> source)\n        {\n            return Timestamp<TSource>(source, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<Timestamped<TSource>> Timestamp<TSource>(this IObservable<TSource> source, IScheduler scheduler)\n        {\n            return new TimestampObservable<TSource>(source, scheduler);\n        }\n\n        public static IObservable<UniRx.TimeInterval<TSource>> TimeInterval<TSource>(this IObservable<TSource> source)\n        {\n            return TimeInterval(source, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<UniRx.TimeInterval<TSource>> TimeInterval<TSource>(this IObservable<TSource> source, IScheduler scheduler)\n        {\n            return new UniRx.Operators.TimeIntervalObservable<TSource>(source, scheduler);\n        }\n\n        public static IObservable<T> Delay<T>(this IObservable<T> source, TimeSpan dueTime)\n        {\n            return source.Delay(dueTime, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<TSource> Delay<TSource>(this IObservable<TSource> source, TimeSpan dueTime, IScheduler scheduler)\n        {\n            return new DelayObservable<TSource>(source, dueTime, scheduler);\n        }\n\n        public static IObservable<T> Sample<T>(this IObservable<T> source, TimeSpan interval)\n        {\n            return source.Sample(interval, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<T> Sample<T>(this IObservable<T> source, TimeSpan interval, IScheduler scheduler)\n        {\n            return new SampleObservable<T>(source, interval, scheduler);\n        }\n\n        public static IObservable<TSource> Throttle<TSource>(this IObservable<TSource> source, TimeSpan dueTime)\n        {\n            return source.Throttle(dueTime, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<TSource> Throttle<TSource>(this IObservable<TSource> source, TimeSpan dueTime, IScheduler scheduler)\n        {\n            return new ThrottleObservable<TSource>(source, dueTime, scheduler);\n        }\n\n        public static IObservable<TSource> ThrottleFirst<TSource>(this IObservable<TSource> source, TimeSpan dueTime)\n        {\n            return source.ThrottleFirst(dueTime, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<TSource> ThrottleFirst<TSource>(this IObservable<TSource> source, TimeSpan dueTime, IScheduler scheduler)\n        {\n            return new ThrottleFirstObservable<TSource>(source, dueTime, scheduler);\n        }\n\n        public static IObservable<T> Timeout<T>(this IObservable<T> source, TimeSpan dueTime)\n        {\n            return source.Timeout(dueTime, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<T> Timeout<T>(this IObservable<T> source, TimeSpan dueTime, IScheduler scheduler)\n        {\n            return new TimeoutObservable<T>(source, dueTime, scheduler);\n        }\n\n        public static IObservable<T> Timeout<T>(this IObservable<T> source, DateTimeOffset dueTime)\n        {\n            return source.Timeout(dueTime, Scheduler.DefaultSchedulers.TimeBasedOperations);\n        }\n\n        public static IObservable<T> Timeout<T>(this IObservable<T> source, DateTimeOffset dueTime, IScheduler scheduler)\n        {\n            return new TimeoutObservable<T>(source, dueTime, scheduler);\n        }\n    }\n}\n'Idle-Miner/Assets/Plugins/Zenject/OptionalExtras/IntegrationTests/Tests/Misc/TestMonoKernelDecoration/TestMonoKernelDecoration.cs'\n:using System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing ModestTree.Util;\nusing NUnit.Framework;\nusing UnityEngine;\nusing UnityEngine.TestTools;\nusing Zenject;\nusing Zenject.Tests.TestAnimationStateBehaviourInject;\n\nnamespace Zenject.Tests.Misc.TestMonoKernelDecoration\n{\n    public class TestMonoKernelDecoration : ZenjectIntegrationTestFixture\n    {\n\n        [UnityTest]\n        public IEnumerator TestDelayedMonoKernelDecorator()\n        {\n            PreInstall();\n\n            Container.Rebind<InitializableManager>().To<InitializableManagerSpy>().AsCached();\n            KernelDecoratorInstaller.Install(Container);\n            PostInstall();\n\n            yield return new WaitForSeconds(1.0f);\n\n            InitializableManagerSpy initializableManager = SceneContext.Container.Resolve<InitializableManager>() as InitializableManagerSpy;\n            var initializedBeforeDelay = initializableManager.IsInitialized;\n\n            yield return new WaitForSeconds(6.0f);\n            var initializedAfterDelay = initializableManager.IsInitialized;\n\n            Assert.IsFalse(initializedBeforeDelay);\n            Assert.IsTrue(initializedAfterDelay);\n        }\n\n        private class InitializableManagerSpy : InitializableManager\n        {\n\n            public InitializableManagerSpy(List<IInitializable> initializables, List<ValuePair<Type, int>> priorities) : base(initializables, priorities){}\n\n            public bool IsInitialized => _hasInitialized;\n        }\n\n\n    }\n}\n'Idle-Miner/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs'\n:using System;\nusing System.Collections.Generic;\nusing ModestTree;\n#if ZEN_SIGNALS_ADD_UNIRX\nusing UniRx;\n#endif\n\nnamespace Zenject\n{\n    public class SignalDeclaration : ITickable, IDisposable\n    {\n        readonly List<SignalSubscription> _subscriptions = new List<SignalSubscription>();\n        readonly List<object> _asyncQueue = new List<object>();\n        readonly BindingId _bindingId;\n        readonly SignalMissingHandlerResponses _missingHandlerResponses;\n        readonly bool _isAsync;\n        readonly ZenjectSettings.SignalSettings _settings;\n\n#if ZEN_SIGNALS_ADD_UNIRX\n        readonly Subject<object> _stream = new Subject<object>();\n#endif\n\n        public SignalDeclaration(\n            SignalDeclarationBindInfo bindInfo,\n            [InjectOptional]\n            ZenjectSettings zenjectSettings)\n        {\n            zenjectSettings = zenjectSettings ?? ZenjectSettings.Default;\n            _settings = zenjectSettings.Signals ?? ZenjectSettings.SignalSettings.Default;\n\n            _bindingId = new BindingId(bindInfo.SignalType, bindInfo.Identifier);\n            _missingHandlerResponses = bindInfo.MissingHandlerResponse;\n            _isAsync = bindInfo.RunAsync;\n            TickPriority = bindInfo.TickPriority;\n        }\n\n#if ZEN_SIGNALS_ADD_UNIRX\n        public IObservable<object> Stream\n        {\n            get { return _stream; }\n        }\n#endif\n\n\t\tpublic List<SignalSubscription> Subscriptions => _subscriptions;\n\n        public int TickPriority\n        {\n            get; private set;\n        }\n\n        public bool IsAsync\n        {\n            get { return _isAsync; }\n        }\n\n        public BindingId BindingId\n        {\n            get { return _bindingId; }\n        }\n\n        public void Dispose()\n        {\n            if (_settings.RequireStrictUnsubscribe)\n            {\n                Assert.That(_subscriptions.IsEmpty(),\n                    \"Found {0} signal handlers still added to declaration {1}\", _subscriptions.Count, _bindingId);\n            }\n            else\n            {\n\n\n\n\n\n\n\n                for (int i = 0; i < _subscriptions.Count; i++)\n                {\n                    _subscriptions[i].OnDeclarationDespawned();\n                }\n            }\n        }\n\n        public void Fire(object signal)\n        {\n            Assert.That(signal.GetType().DerivesFromOrEqual(_bindingId.Type));\n\n            if (_isAsync)\n            {\n                _asyncQueue.Add(signal);\n            }\n            else\n            {\n\n                using (var block = DisposeBlock.Spawn())\n                {\n                    var subscriptions = block.SpawnList<SignalSubscription>();\n                    subscriptions.AddRange(_subscriptions);\n                    FireInternal(subscriptions, signal);\n                }\n            }\n        }\n\n        void FireInternal(List<SignalSubscription> subscriptions, object signal)\n        {\n            if (subscriptions.IsEmpty()\n#if ZEN_SIGNALS_ADD_UNIRX\n                && !_stream.HasObservers\n#endif\n                )\n            {\n                if (_missingHandlerResponses == SignalMissingHandlerResponses.Warn)\n                {\n                    Log.Warn(\"Fired signal '{0}' but no subscriptions found!  If this is intentional then either add OptionalSubscriber() to the binding or change the default in ZenjectSettings\", signal.GetType());\n                }\n                else if (_missingHandlerResponses == SignalMissingHandlerResponses.Throw)\n                {\n                    throw Assert.CreateException(\n                        \"Fired signal '{0}' but no subscriptions found!  If this is intentional then either add OptionalSubscriber() to the binding or change the default in ZenjectSettings\", signal.GetType());\n                }\n            }\n\n            for (int i = 0; i < subscriptions.Count; i++)\n            {\n                var subscription = subscriptions[i];\n\n\n\n                if (_subscriptions.Contains(subscription))\n                {\n                    subscription.Invoke(signal);\n                }\n            }\n\n#if ZEN_SIGNALS_ADD_UNIRX\n            _stream.OnNext(signal);\n#endif\n        }\n\n        public void Tick()\n        {\n            Assert.That(_isAsync);\n\n            if (!_asyncQueue.IsEmpty())\n            {\n\n                using (var block = DisposeBlock.Spawn())\n                {\n                    var subscriptions = block.SpawnList<SignalSubscription>();\n                    subscriptions.AddRange(_subscriptions);\n\n\n\n                    var signals = block.SpawnList<object>();\n                    signals.AddRange(_asyncQueue);\n\n                    _asyncQueue.Clear();\n\n                    for (int i = 0; i < signals.Count; i++)\n                    {\n                        FireInternal(subscriptions, signals[i]);\n                    }\n                }\n            }\n        }\n\n        public void Add(SignalSubscription subscription)\n        {\n            Assert.That(!_subscriptions.Contains(subscription));\n            _subscriptions.Add(subscription);\n        }\n\n        public void Remove(SignalSubscription subscription)\n        {\n            _subscriptions.RemoveWithConfirm(subscription);\n        }\n\n        public class Factory : PlaceholderFactory<SignalDeclarationBindInfo, SignalDeclaration>\n        {\n        }\n    }\n}\n\n'Idle-Miner/Assets/Plugins/UniRx/Scripts/Operators/Skip.cs'\n:﻿using System;\nusing UniRx.Operators;\n\nnamespace UniRx.Operators\n{\n    internal class SkipObservable<T> : OperatorObservableBase<T>\n    {\n        readonly IObservable<T> source;\n        readonly int count;\n        readonly TimeSpan duration;\n        internal readonly IScheduler scheduler;\n\n        public SkipObservable(IObservable<T> source, int count)\n            : base(source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n            this.count = count;\n        }\n\n        public SkipObservable(IObservable<T> source, TimeSpan duration, IScheduler scheduler)\n            : base(scheduler == Scheduler.CurrentThread || source.IsRequiredSubscribeOnCurrentThread())\n        {\n            this.source = source;\n            this.duration = duration;\n            this.scheduler = scheduler;\n        }\n\n\n\n        public IObservable<T> Combine(int count)\n        {\n\n\n\n\n\n            return new SkipObservable<T>(source, this.count + count);\n        }\n\n        public IObservable<T> Combine(TimeSpan duration)\n        {\n\n\n\n\n\n            return (duration <= this.duration)\n                ? this\n                : new SkipObservable<T>(source, duration, scheduler);\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)\n        {\n            if (scheduler == null)\n            {\n                return source.Subscribe(new Skip(this, observer, cancel));\n            }\n            else\n            {\n                return new Skip_(this, observer, cancel).Run();\n            }\n        }\n\n        class Skip : OperatorObserverBase<T, T>\n        {\n            int remaining;\n\n            public Skip(SkipObservable<T> parent, IObserver<T> observer, IDisposable cancel) : base(observer, cancel)\n            {\n                this.remaining = parent.count;\n            }\n\n            public override void OnNext(T value)\n            {\n                if (remaining <= 0)\n                {\n                    base.observer.OnNext(value);\n                }\n                else\n                {\n                    remaining--;\n                }\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); } finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                try { observer.OnCompleted(); } finally { Dispose(); }\n            }\n        }\n\n        class Skip_ : OperatorObserverBase<T, T>\n        {\n            readonly SkipObservable<T> parent;\n            volatile bool open;\n\n            public Skip_(SkipObservable<T> parent, IObserver<T> observer, IDisposable cancel) : base(observer, cancel)\n            {\n                this.parent = parent;\n            }\n\n            public IDisposable Run()\n            {\n                var d1 = parent.scheduler.Schedule(parent.duration, Tick);\n                var d2 = parent.source.Subscribe(this);\n\n                return StableCompositeDisposable.Create(d1, d2);\n            }\n\n            void Tick()\n            {\n                open = true;\n            }\n\n            public override void OnNext(T value)\n            {\n                if (open)\n                {\n                    base.observer.OnNext(value);\n                }\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); } finally { Dispose(); };\n            }\n\n            public override void OnCompleted()\n            {\n                try { observer.OnCompleted(); } finally { Dispose(); };\n            }\n        }\n    }\n}\n'Idle-Miner/Assets/Plugins/UniRx/Scripts/Operators/Repeat.cs'\n:﻿using System;\n\nnamespace UniRx.Operators\n{\n    internal class RepeatObservable<T> : OperatorObservableBase<T>\n    {\n        readonly T value;\n        readonly int? repeatCount;\n        readonly IScheduler scheduler;\n\n        public RepeatObservable(T value, int? repeatCount, IScheduler scheduler)\n            : base(scheduler == Scheduler.CurrentThread)\n        {\n            this.value = value;\n            this.repeatCount = repeatCount;\n            this.scheduler = scheduler;\n        }\n\n        protected override IDisposable SubscribeCore(IObserver<T> observer, IDisposable cancel)\n        {\n            observer = new Repeat(observer, cancel);\n\n            if (repeatCount == null)\n            {\n                return scheduler.Schedule((Action self) =>\n                {\n                    observer.OnNext(value);\n                    self();\n                });\n            }\n            else\n            {\n                if (scheduler == Scheduler.Immediate)\n                {\n                    var count = this.repeatCount.Value;\n                    for (int i = 0; i < count; i++)\n                    {\n                        observer.OnNext(value);\n                    }\n                    observer.OnCompleted();\n                    return Disposable.Empty;\n                }\n                else\n                {\n                    var currentCount = this.repeatCount.Value;\n                    return scheduler.Schedule((Action self) =>\n                    {\n                        if (currentCount > 0)\n                        {\n                            observer.OnNext(value);\n                            currentCount--;\n                        }\n\n                        if (currentCount == 0)\n                        {\n                            observer.OnCompleted();\n                            return;\n                        }\n\n                        self();\n                    });\n                }\n            }\n        }\n\n        class Repeat : OperatorObserverBase<T, T>\n        {\n            public Repeat(IObserver<T> observer, IDisposable cancel)\n                : base(observer, cancel)\n            {\n            }\n\n            public override void OnNext(T value)\n            {\n                try\n                {\n                    base.observer.OnNext(value);\n                }\n                catch\n                {\n                    Dispose();\n                    throw;\n                }\n            }\n\n            public override void OnError(Exception error)\n            {\n                try { observer.OnError(error); }\n                finally { Dispose(); }\n            }\n\n            public override void OnCompleted()\n            {\n                try { observer.OnCompleted(); }\n                finally { Dispose(); }\n            }\n        }\n    }\n}",
        "gt": [
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Operators/Repeat.cs'",
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Operators/Skip.cs'",
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Observable.Time.cs'",
            "'Idle-Miner/Assets/Plugins/Zenject/OptionalExtras/Signals/Internal/SignalDeclaration.cs'",
            "'Idle-Miner/Assets/Plugins/Zenject/OptionalExtras/IntegrationTests/Tests/Misc/TestMonoKernelDecoration/TestMonoKernelDecoration.cs'"
        ]
    },
    {
        "files": [
            "'acblog/src/AcBlog.Services/RecordRepoBasedService.cs'",
            "'acblog/src/AcBlog.Tools.Sdk/Models/Workspace.cs'",
            "'acblog/src/AcBlog.Sdk/Api/ApiBlogService.cs'",
            "'acblog/src/AcBlog.Tools.Sdk/Commands/Lists/PostCommand.cs'"
        ],
        "content": "'acblog/src/AcBlog.Services/RecordRepoBasedService.cs'\n:﻿using AcBlog.Data.Models;\nusing AcBlog.Data.Models.Actions;\nusing AcBlog.Data.Repositories;\nusing System.Collections.Generic;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace AcBlog.Services\n{\n    public abstract class RecordRepoBasedService<T, TId, TQuery, TRepo> : IRecordRepository<T, TId, TQuery> where TRepo : IRecordRepository<T, TId, TQuery> where TId : class where T : RHasId<TId> where TQuery : QueryRequest, new()\n    {\n        protected RecordRepoBasedService(IBlogService blogService, TRepo repository)\n        {\n            Repository = repository;\n            BlogService = blogService;\n        }\n\n        public TRepo Repository { get; }\n\n        public IBlogService BlogService { get; }\n\n        public RepositoryAccessContext Context { get => Repository.Context; set => Repository.Context = value; }\n\n        public IAsyncEnumerable<TId> All(CancellationToken cancellationToken = default) => Repository.All(cancellationToken);\n\n        public Task<TId?> Create(T value, CancellationToken cancellationToken = default) => Repository.Create(value, cancellationToken);\n\n        public Task<bool> Delete(TId id, CancellationToken cancellationToken = default) => Repository.Delete(id, cancellationToken);\n\n        public Task<bool> Exists(TId id, CancellationToken cancellationToken = default) => Repository.Exists(id, cancellationToken);\n\n        public Task<T?> Get(TId id, CancellationToken cancellationToken = default) => Repository.Get(id, cancellationToken);\n\n        public Task<bool> Update(T value, CancellationToken cancellationToken = default) => Repository.Update(value, cancellationToken);\n\n        public IAsyncEnumerable<TId> Query(TQuery query, CancellationToken cancellationToken = default) => Repository.Query(query, cancellationToken);\n\n        public Task<RepositoryStatus> GetStatus(CancellationToken cancellationToken = default) => Repository.GetStatus(cancellationToken);\n\n        public Task<QueryStatistic> Statistic(TQuery query, CancellationToken cancellationToken = default) => Repository.Statistic(query, cancellationToken);\n    }\n}\n\n'acblog/src/AcBlog.Tools.Sdk/Models/Workspace.cs'\n:﻿using AcBlog.Data.Extensions;\nusing AcBlog.Data.Models;\nusing AcBlog.Data.Repositories.FileSystem;\nusing AcBlog.Data.Repositories.FileSystem.Builders;\nusing AcBlog.Sdk;\nusing AcBlog.Sdk.Api;\nusing AcBlog.Services.FileSystem;\nusing AcBlog.Tools.Sdk.Helpers;\nusing AcBlog.Tools.Sdk.Repositories;\nusing LibGit2Sharp;\nusing LibGit2Sharp.Handlers;\nusing Microsoft.Extensions.FileProviders;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing StardustDL.Extensions.FileProviders;\nusing StardustDL.Extensions.FileProviders.Http;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing System.Xml;\nusing AcBlog.Services;\nusing AcBlog.Data.Repositories;\nusing AcBlog.Data.Models.Actions;\nusing AcBlog.Services.Generators.Sitemap;\nusing AcBlog.Services.Generators.Syndication;\n\nnamespace AcBlog.Tools.Sdk.Models\n{\n    public class Workspace\n    {\n        public const string OptionPath = \"acblog.json\";\n\n        public const string DBPath = \"db.json\";\n\n        public const string BlogOptionPath = \"blog.json\";\n\n        public const string AssetsPath = \"assets\";\n\n        public Workspace(IOptions<WorkspaceOption> option, IOptions<DB> db, LocalBlogService localBlogService, IHttpClientFactory httpClientFactory, ILogger<Workspace> logger)\n        {\n            HttpClientFactory = httpClientFactory;\n            Logger = logger;\n            Remote = new FileSystemBlogService(\n                new PhysicalFileProvider(Environment.CurrentDirectory).AsFileProvider());\n            Local = localBlogService;\n            Option = option.Value;\n            DB = db.Value;\n        }\n\n        public WorkspaceOption Option { get; private set; }\n\n        public DB DB { get; private set; }\n\n        private IHttpClientFactory HttpClientFactory { get; }\n\n        private ILogger<Workspace> Logger { get; }\n\n        async Task SaveDb()\n        {\n            await using var st = System.IO.File.Open(DBPath, FileMode.Create, FileAccess.Write);\n            await JsonSerializer.SerializeAsync(st, new { db = DB }, options: new JsonSerializerOptions\n            {\n                WriteIndented = true\n            });\n        }\n\n        async Task SaveOption()\n        {\n            await using var st = System.IO.File.Open(OptionPath, FileMode.Create, FileAccess.Write);\n            await JsonSerializer.SerializeAsync(st, new { acblog = Option }, options: new JsonSerializerOptions\n            {\n                WriteIndented = true\n            });\n        }\n\n        public IBlogService Remote { get; private set; }\n\n        public LocalBlogService Local { get; private set; }\n\n\n\n        public async Task Initialize()\n        {\n            Option = new WorkspaceOption();\n            DB = new DB();\n            await Save();\n            FSBuilder builder = new FSBuilder(Environment.CurrentDirectory);\n            builder.EnsureDirectoryExists(\"posts\");\n            builder.EnsureDirectoryExists(\"pages\");\n            builder.EnsureDirectoryExists(\"layouts\");\n            builder.EnsureDirectoryExists(AssetsPath);\n\n            {\n                await using var st = builder.GetFileRewriteStream(BlogOptionPath);\n                await JsonSerializer.SerializeAsync(st, new BlogOptions(), options: new JsonSerializerOptions\n                {\n                    WriteIndented = true\n                });\n            }\n\n            await Clean();\n        }\n\n        public async Task Save()\n        {\n            Logger.LogInformation(\"Save data.\");\n            await SaveOption();\n            await SaveDb();\n        }\n\n        string GitTempFolder { get; } = \"temp/git\";\n\n        public async Task Connect(string name = \"\")\n        {\n            if (string.IsNullOrEmpty(name))\n                name = Option.CurrentRemote;\n\n            Logger.LogInformation($\"Connect to remote {name}.\");\n\n            if (Option.Remotes.TryGetValue(name, out var remote))\n            {\n                Logger.LogInformation($\"Detect remote {remote.Name} ({Enum.GetName(typeof(RemoteType), remote.Type)}).\");\n                switch (remote.Type)\n                {\n                    case RemoteType.LocalFS:\n                        Remote = new FileSystemBlogService(\n                            new PhysicalFileProvider(remote.Uri).AsFileProvider());\n                        break;\n                    case RemoteType.RemoteFS:\n                        {\n                            var client = HttpClientFactory.CreateClient();\n                            client.BaseAddress = new Uri(remote.Uri);\n                            Remote = new FileSystemBlogService(\n                                new HttpFileProvider(client));\n                        }\n                        break;\n                    case RemoteType.Api:\n                        {\n                            var client = HttpClientFactory.CreateClient();\n                            client.BaseAddress = new Uri(remote.Uri);\n                            Remote = new ApiBlogService(client);\n                        }\n                        break;\n                    case RemoteType.Git:\n                        {\n                            FSBuilder builder = new FSBuilder(Environment.CurrentDirectory);\n\n                            Logger.LogInformation(\"Pull git repository.\");\n\n                            try\n                            {\n                                using var repo = new Repository(GitTempFolder);\n\n                                LibGit2Sharp.PullOptions options = new LibGit2Sharp.PullOptions();\n\n\n                                var signature = new LibGit2Sharp.Signature(\n                                    new Identity(\"AcBlog.Tools.Sdk\", \"tools.sdk@acblog\"), DateTimeOffset.Now);\n\n\n                                LibGit2Sharp.Commands.Pull(repo, signature, options);\n                            }\n                            catch\n                            {\n                                builder.EnsureDirectoryEmpty(GitTempFolder);\n                                Repository.Clone(remote.Uri, GitTempFolder);\n                            }\n\n                            Remote = new FileSystemBlogService(\n                                new PhysicalFileProvider(Path.Join(Environment.CurrentDirectory, GitTempFolder)).AsFileProvider());\n                        }\n                        break;\n                }\n\n                Remote.Context.Token = remote.Token;\n\n                Option.CurrentRemote = name;\n                await SaveOption();\n            }\n            else\n            {\n                throw new Exception(\"No remote\");\n            }\n        }\n\n        public async Task SyncRecordRepository<T, TId, TQuery>(IRecordRepository<T, TId, TQuery> source, IRecordRepository<T, TId, TQuery> target, bool full) where TId : class where T : RHasId<TId> where TQuery : QueryRequest, new()\n        {\n            HashSet<TId> remoteIds = await target.All().ToHashSetAsync();\n            await foreach (var item in source.GetAllItems().IgnoreNull())\n            {\n                Logger.LogInformation($\"Loaded {item.Id}\");\n                if (remoteIds.Contains(item.Id))\n                {\n                    var result = await target.Update(item);\n                    if (result)\n                    {\n                        Logger.LogInformation($\"Updated {item.Id}\");\n                    }\n                    else\n                    {\n                        Logger.LogError($\"Failed to update {item.Id}\");\n                    }\n                }\n                else\n                {\n                    var result = await target.Create(item);\n                    if (result is null)\n                    {\n                        Logger.LogError($\"Failed to create {item.Id}\");\n                    }\n                    else\n                    {\n                        Logger.LogInformation($\"Created {item.Id}\");\n                    }\n                }\n                remoteIds.Remove(item.Id);\n            }\n            if (full)\n            {\n                foreach (var v in remoteIds)\n                {\n                    var result = await target.Delete(v);\n                    if (result)\n                    {\n                        Logger.LogInformation($\"Deleted {v}.\");\n                    }\n                    else\n                    {\n                        Logger.LogError($\"Failed to deleted {v}.\");\n                    }\n                }\n            }\n        }\n\n\n        public async Task Push(string name = \"\", bool full = false)\n        {\n            if (string.IsNullOrEmpty(name))\n                name = Option.CurrentRemote;\n\n            Logger.LogInformation($\"Push to remote {name}.\");\n\n            if (Option.Remotes.TryGetValue(name, out var remote))\n            {\n                Logger.LogInformation($\"Detect remote {remote.Name} ({Enum.GetName(typeof(RemoteType), remote.Type)}).\");\n                switch (remote.Type)\n                {\n                    case RemoteType.LocalFS:\n                        {\n                            await toLocalFS(remote);\n                        }\n                        break;\n                    case RemoteType.RemoteFS:\n                        {\n                            throw new NotSupportedException(\"Not support pushing to remote file system, please push to local file system and sync to remote.\");\n                        }\n                    case RemoteType.Api:\n                        {\n                            await Connect(name);\n\n                            Logger.LogInformation($\"Fetch remote posts.\");\n\n                            await Remote.SetOptions(await Local.GetOptions());\n\n                            await SyncRecordRepository(Local.PostService, Remote.PostService, full);\n\n                            await SyncRecordRepository(Local.PageService, Remote.PageService, full);\n\n                            await SyncRecordRepository(Local.LayoutService, Remote.LayoutService, full);\n                        }\n                        break;\n                    case RemoteType.Git:\n                        {\n                            await Connect(name);\n\n                            string tempDist = Path.Join(Environment.CurrentDirectory, \"temp/dist\");\n\n                            Logger.LogInformation(\"Generate data.\");\n\n                            await toLocalFS(new RemoteOption\n                            {\n                                Uri = tempDist,\n                                Type = RemoteType.LocalFS,\n                                Name = remote.Name\n                            });\n\n                            FSExtensions.CopyDirectory(tempDist, GitTempFolder);\n\n                            Logger.LogInformation(\"Load git config.\");\n\n                            string userName = Option.Properties[$\"remote.{remote.Name}.git.username\"],\n                                password = Option.Properties[$\"remote.{remote.Name}.git.password\"];\n\n                            {\n                                if (string.IsNullOrEmpty(userName))\n                                    userName = ConsoleExtensions.Input(\"Input username: \");\n                                if (string.IsNullOrEmpty(password))\n                                    password = ConsoleExtensions.InputPassword(\"Input password: \");\n                            }\n\n                            using (var repo = new Repository(GitTempFolder))\n                            {\n                                Logger.LogInformation(\"Commit to git.\");\n\n                                LibGit2Sharp.Commands.Stage(repo, \"*\");\n\n                                var signature = new LibGit2Sharp.Signature(\n                                        new Identity(\"AcBlog.Tools.Sdk\", \"tools.sdk@acblog\"), DateTimeOffset.Now);\n                                repo.Commit(DateTimeOffset.Now.ToString(), signature, signature, new CommitOptions\n                                {\n                                    AllowEmptyCommit = true\n                                });\n\n                                Logger.LogInformation($\"Push to {repo.Head.RemoteName}.\");\n\n                                PushOptions options = new PushOptions\n                                {\n                                    CredentialsProvider = new CredentialsHandler(\n                                    (url, usernameFromUrl, types) =>\n                                        new UsernamePasswordCredentials()\n                                        {\n                                            Username = string.IsNullOrEmpty(userName) ? usernameFromUrl : userName,\n                                            Password = password\n                                        })\n                                };\n                                repo.Network.Push(repo.Head, options);\n                            }\n                        }\n                        break;\n                }\n            }\n            else\n            {\n                throw new Exception(\"No remote\");\n            }\n\n            async Task toLocalFS(RemoteOption remote)\n            {\n                FSBuilder fsBuilder = new FSBuilder(remote.Uri);\n                fsBuilder.EnsureDirectoryEmpty();\n\n                List<Post> posts = new List<Post>();\n                await foreach (var item in Local.PostService.GetAllItems().IgnoreNull())\n                {\n                    Logger.LogInformation($\"Loaded Post {item.Id}: {item.Title}\");\n                    posts.Add(item);\n                }\n\n                List<Layout> layouts = new List<Layout>();\n                await foreach (var item in Local.LayoutService.GetAllItems().IgnoreNull())\n                {\n                    Logger.LogInformation($\"Loaded Layout {item.Id}\");\n                    layouts.Add(item);\n                }\n\n                List<Page> pages = new List<Page>();\n                await foreach (var item in Local.PageService.GetAllItems().IgnoreNull())\n                {\n                    Logger.LogInformation($\"Loaded Page {item.Id}: {item.Title}\");\n                    pages.Add(item);\n                }\n\n                var baseAddress = Option.Properties[$\"remote.{remote.Name}.generator.baseAddress\"];\n\n                List<Data.Models.File> files = new List<Data.Models.File>();\n                {\n                    string path = Path.Join(Environment.CurrentDirectory, AssetsPath);\n                    if (Directory.Exists(path))\n                    {\n                        foreach (var file in Directory.EnumerateFiles(path, \"*\", SearchOption.AllDirectories))\n                        {\n                            var id = Path.GetRelativePath(Environment.CurrentDirectory, file).Replace('\\\\', '/');\n                            Data.Models.File f = new Data.Models.File\n                            {\n                                Id = id,\n                                Uri = string.IsNullOrWhiteSpace(baseAddress) ? $\"/{id}\" : $\"{baseAddress.TrimEnd('/')}/{id}\"\n                            };\n                            files.Add(f);\n                        }\n                    }\n                }\n\n                Logger.LogInformation(\"Build data.\");\n                {\n                    BlogOptions options = await Local.GetOptions();\n                    BlogBuilder builder = new BlogBuilder(options, Path.Join(remote.Uri));\n                    await builder.Build();\n                    await builder.BuildPosts(posts);\n                    await builder.BuildLayouts(layouts);\n                    await builder.BuildPages(pages);\n                    await builder.BuildFiles(files);\n                }\n\n                {\n                    if (!string.IsNullOrEmpty(baseAddress))\n                    {\n                        Logger.LogInformation(\"Build sitemap.\");\n                        var sub = fsBuilder.CreateSubDirectoryBuilder(\"Site\");\n                        {\n                            var siteMapBuilder = await Local.BuildSitemap(baseAddress);\n                            await using var st = sub.GetFileRewriteStream(\"sitemap.xml\");\n                            await using var writer = XmlWriter.Create(st, new XmlWriterSettings { Async = true });\n                            siteMapBuilder.Build().WriteTo(writer);\n                        }\n                        Logger.LogInformation(\"Build feed.\");\n                        {\n                            var feed = await Local.BuildSyndication(baseAddress);\n                            await using (var st = sub.GetFileRewriteStream(\"atom.xml\"))\n                            {\n                                await using var writer = XmlWriter.Create(st, new XmlWriterSettings { Async = true });\n                                feed.GetAtom10Formatter().WriteTo(writer);\n                            }\n                            await using (var st = sub.GetFileRewriteStream(\"rss.xml\"))\n                            {\n                                await using var writer = XmlWriter.Create(st, new XmlWriterSettings { Async = true });\n                                feed.GetRss20Formatter().WriteTo(writer);\n                            }\n                        }\n                    }\n                }\n                {\n                    string assetsPath = Path.Join(Environment.CurrentDirectory, AssetsPath);\n                    if (Directory.Exists(assetsPath))\n                    {\n                        Logger.LogInformation(\"Copy assets.\");\n                        FSExtensions.CopyDirectory(assetsPath, Path.Join(remote.Uri, AssetsPath));\n                    }\n                }\n            }\n        }\n\n        public Task Clean()\n        {\n            FSBuilder builder = new FSBuilder(Environment.CurrentDirectory);\n            builder.EnsureDirectoryExists(\"temp\", false);\n            return Task.CompletedTask;\n        }\n    }\n}\n\n'acblog/src/AcBlog.Sdk/Api/ApiBlogService.cs'\n:﻿using AcBlog.Data.Models;\nusing AcBlog.Data.Models.Actions;\nusing AcBlog.Data.Repositories;\nusing AcBlog.Services;\nusing AcBlog.Services.Models;\nusing System;\nusing System.Net.Http;\nusing System.Net.Http.Json;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace AcBlog.Sdk.Api\n{\n    public class ApiBlogService : IBlogService\n    {\n        public ApiBlogService(HttpClient httpClient)\n        {\n            HttpClient = httpClient;\n\n            PostService = new PostService(this, httpClient);\n\n            PageService = new PageService(this, httpClient);\n\n            LayoutService = new LayoutService(this, httpClient);\n\n            CommentService = new CommentService(this, httpClient);\n\n            StatisticService = new StatisticService(this, httpClient);\n\n            UserService = new UserService(this, httpClient);\n        }\n\n        public RepositoryAccessContext Context { get; set; } = new RepositoryAccessContext();\n\n        internal void SetHeader()\n        {\n            if (Context is not null && !string.IsNullOrWhiteSpace(Context.Token))\n            {\n                HttpClient.DefaultRequestHeaders.Remove(\"Authorization\");\n                HttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue(\"Bearer\", Context.Token);\n            }\n            else\n            {\n                HttpClient.DefaultRequestHeaders.Remove(\"Authorization\");\n            }\n        }\n\n        public HttpClient HttpClient { get; }\n\n        public IPostService PostService { get; }\n\n        public IPageService PageService { get; }\n\n        public ILayoutService LayoutService { get; }\n\n        public ICommentService CommentService { get; }\n\n        public IStatisticService StatisticService { get; }\n\n        public IUserService UserService { get; }\n\n        public IFileService FileService => throw new NotImplementedException();\n\n\n        protected const string PrepUrl = \"/Blog\";\n\n        public async Task<BlogOptions> GetOptions(CancellationToken cancellationToken = default)\n        {\n            SetHeader();\n            using var responseMessage = await HttpClient.GetAsync($\"{PrepUrl}/options\", cancellationToken).ConfigureAwait(false);\n            responseMessage.EnsureSuccessStatusCode();\n            return await responseMessage.Content.ReadFromJsonAsync<BlogOptions>(cancellationToken: cancellationToken).ConfigureAwait(false)\n                ?? throw new NullReferenceException(\"Null\");\n        }\n\n        public async Task<bool> SetOptions(BlogOptions options, CancellationToken cancellationToken = default)\n        {\n            SetHeader();\n            using var responseMessage = await HttpClient.PostAsJsonAsync($\"{PrepUrl}/options\", options, cancellationToken).ConfigureAwait(false);\n            responseMessage.EnsureSuccessStatusCode();\n            return await responseMessage.Content.ReadFromJsonAsync<bool>(cancellationToken: cancellationToken).ConfigureAwait(false);\n        }\n\n        public async Task<QueryResponse<string>> Query(BlogQueryRequest query, CancellationToken cancellationToken = default)\n        {\n            SetHeader();\n            using var responseMessage = await HttpClient.PostAsJsonAsync($\"{PrepUrl}/query\", query, cancellationToken).ConfigureAwait(false);\n            responseMessage.EnsureSuccessStatusCode();\n            return await responseMessage.Content.ReadFromJsonAsync<QueryResponse<string>>(cancellationToken: cancellationToken).ConfigureAwait(false) ?? QueryResponse.Error<string>();\n        }\n    }\n}\n\n'acblog/src/AcBlog.Tools.Sdk/Commands/Lists/PostCommand.cs'\n:﻿using AcBlog.Sdk;\nusing AcBlog.Services;\nusing AcBlog.Tools.Sdk.Models;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\nusing System;\nusing System.CommandLine;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace AcBlog.Tools.Sdk.Commands.Lists\n{\n    public class PostCommand : BaseCommand<PostCommand.CArgument>\n    {\n        public override string Name => \"post\";\n\n        public override string Description => \"List posts.\";\n\n        public override Command Configure()\n        {\n            var result = base.Configure();\n            result.AddOption(new Option<bool>($\"--{nameof(CArgument.Remote).ToLowerInvariant()}\", \"Remote\"));\n            return result;\n        }\n\n        public override async Task<int> Handle(CArgument argument, IHost host, CancellationToken cancellationToken)\n        {\n            Workspace workspace = host.Services.GetRequiredService<Workspace>();\n\n            IBlogService service;\n            if (argument.Remote)\n            {\n                await workspace.Connect();\n                service = workspace.Remote;\n            }\n            else\n            {\n                service = workspace.Local;\n            }\n\n            await foreach (var id in service.PostService.All(cancellationToken))\n            {\n                var item = await service.PostService.Get(id, cancellationToken);\n                if (item is not null)\n                {\n                    Console.WriteLine(item.Title);\n                }\n            }\n            return 0;\n        }\n\n        public class CArgument\n        {\n            public bool Remote { get; set; }\n        }\n    }\n}\n",
        "gt": [
            "'acblog/src/AcBlog.Services/RecordRepoBasedService.cs'",
            "'acblog/src/AcBlog.Sdk/Api/ApiBlogService.cs'",
            "'acblog/src/AcBlog.Tools.Sdk/Models/Workspace.cs'",
            "'acblog/src/AcBlog.Tools.Sdk/Commands/Lists/PostCommand.cs'"
        ]
    },
    {
        "files": [
            "'WolvenKit-7/WolvenKit.Render/Animations.cs'",
            "'WolvenKit-7/WolvenKit/Forms/frmMimics.cs'",
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/BTTaskEredinSetIsInSpecialAttackDef.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/Program.cs'"
        ],
        "content": "'WolvenKit-7/WolvenKit.Render/Animations.cs'\n:﻿using IrrlichtLime.Core;\nusing IrrlichtLime.Scene;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing WolvenKit.CR2W;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit.Render\n{\n    public class Animations\n    {\n        private float animationSpeed = 0;\n        private List<List<uint>> positionsKeyframes = new List<List<uint>>();\n        private List<List<uint>> orientKeyframes = new List<List<uint>>();\n        private List<List<uint>> scalesKeyframes = new List<List<uint>>();\n        private List<List<Vector3Df>> positions = new List<List<Vector3Df>>();\n        private List<List<Quaternion>> orientations = new List<List<Quaternion>>();\n        private List<List<Vector3Df>> scales = new List<List<Vector3Df>>();\n\n        public static List<KeyValuePair<string, int>> AnimationNames = new List<KeyValuePair<string, int>>();\n\n\n\n\n        public void LoadData(CR2WFile animFile)\n        {\n            AnimationNames.Clear();\n            if (animFile != null)\n            foreach (var chunk in animFile.chunks)\n            {\n                if (chunk.REDType == \"CSkeletalAnimation\" && chunk.data is CSkeletalAnimation anim)\n                {\n                    var name = anim.Name;\n                    var chunkIdx = anim.AnimBuffer.Reference.ChunkIndex;\n                    AnimationNames.Add(new KeyValuePair<string, int>((name as CName).Value, chunkIdx));\n                }\n            }\n\n        }\n\n\n\n\n        public void SelectAnimation(CR2WFile animFile, int selectedAnimIdx)\n        {\n\n            if (animFile != null && selectedAnimIdx != -1)\n            {\n                positions.Clear();\n                positionsKeyframes.Clear();\n                orientations.Clear();\n                orientKeyframes.Clear();\n                scales.Clear();\n                scalesKeyframes.Clear();\n                foreach (var chunk in animFile.chunks)\n                {\n                    if (chunk.REDType == \"CAnimationBufferBitwiseCompressed\" && chunk.ChunkIndex == AnimationNames[selectedAnimIdx].Value\n                        && chunk.data is CAnimationBufferBitwiseCompressed buffer)\n                    {\n                        uint numFrames = buffer.NumFrames.val;\n                        float animDuration = buffer.Duration?.val ?? 1.0f;\n                        animationSpeed = numFrames / animDuration;\n                        uint keyFrame = 0;\n                        byte[] data;\n                        var deferredData = buffer.DeferredData;\n                        var streamingOption = buffer.StreamingOption;\n                        if (deferredData != null && deferredData.Bufferdata.val != 0)\n                            if (streamingOption != null && streamingOption.ToString() == \"ABSO_PartiallyStreamable\")\n                                data = ConvertAnimation.Combine(buffer.Data.Bytes,\n                                File.ReadAllBytes(animFile.FileName + \".\" + deferredData.Bufferdata.val + \".buffer\"));\n                            else\n                                data = File.ReadAllBytes(animFile.FileName + \".\" + deferredData.Bufferdata.val + \".buffer\");\n                        else\n                            data = buffer.Data.Bytes;\n                        using (MemoryStream ms = new MemoryStream(data))\n                        using (BinaryReader br = new BinaryReader(ms))\n                        {\n                            foreach (var bone in buffer.Bones)\n                            {\n                                List<uint> currkeyframe = new List<uint>();\n                                List<Quaternion> currorient = new List<Quaternion>();\n\n                                br.BaseStream.Position = bone.Orientation.DataAddr.val;\n                                int orientNumFrames = bone.Orientation.NumFrames.val;\n                                for (uint idx = 0; idx < orientNumFrames; idx++)\n                                {\n                                    keyFrame = idx;\n\n                                    currkeyframe.Add(keyFrame);\n\n                                    string cm = buffer.OrientationCompressionMethod.ToString() ?? \"\";\n                                    if (cm.Contains(\"ABOCM_PackIn48bitsW\"))\n                                    {\n                                        byte[] odata = br.ReadBytes(6);\n                                        ulong bits = (ulong)odata[0] << 40 | (ulong)odata[1] << 32 | (ulong)odata[2] << 24 | (ulong)odata[3] << 16 | (ulong)odata[4] << 8 | odata[5];\n\n                                        ushort[] orients = new ushort[4];\n                                        float[] quart = new float[4];\n                                        orients[0] = (ushort)((bits & 0x0000FFF000000000) >> 36);\n                                        orients[1] = (ushort)((bits & 0x0000000FFF000000) >> 24);\n                                        orients[2] = (ushort)((bits & 0x0000000000FFF000) >> 12);\n                                        orients[3] = (ushort)((bits & 0x0000000000000FFF));\n\n                                        for (int i = 0; i < orients.Length; i++)\n                                        {\n                                            float fVal = (2047.0f - orients[i]) * (1 / 2048.0f);\n                                            quart[i] = fVal;\n                                        }\n                                        quart[3] = -quart[3];\n\n                                        currorient.Add(new Quaternion(quart[0], quart[1], quart[2], quart[3]));\n                                    }\n                                    else\n                                    {\n                                        byte[] odata = br.ReadBytes(8);\n\n                                        ushort[] plain = new ushort[4];\n                                        float[] quart = new float[4];\n\n                                        plain[0] = BitConverter.ToUInt16(odata, 0);\n                                        plain[1] = BitConverter.ToUInt16(odata, 2);\n                                        plain[2] = BitConverter.ToUInt16(odata, 4);\n                                        plain[3] = BitConverter.ToUInt16(odata, 6);\n\n                                        for (int i = 0; i < plain.Length; i++)\n                                        {\n                                            float fVal = (32767.0f - plain[i]) * (1 / 32768.0f);\n                                            quart[i] = fVal;\n                                        }\n                                        quart[3] = -quart[3];\n\n                                        currorient.Add(new Quaternion(quart[0], quart[1], quart[2], quart[3]));\n                                    }\n                                }\n\n                                orientKeyframes.Add(currkeyframe);\n                                orientations.Add(currorient);\n\n\n                                List<Vector3Df> currposition = new List<Vector3Df>();\n                                currkeyframe = new List<uint>();\n                                int compression = 0;\n                                var compr = bone.Position.Compression;\n                                if (compr != null)\n                                    compression = compr.val;\n                                var addr = bone.Position.DataAddr;\n                                if (addr != null)\n                                    br.BaseStream.Position = addr.val;\n                                else\n                                    br.BaseStream.Position = 0;\n                                var posNumFrames = bone.Position.NumFrames.val;\n                                for (uint idx = 0; idx < posNumFrames; idx++)\n                                {\n                                    keyFrame = idx;\n\n                                    currkeyframe.Add(keyFrame);\n                                    var vec = new SVector3D(null, null, \"\");\n                                    vec.Read(br, compression);\n                                    Vector3Df pos = new Vector3Df(vec.X.val, vec.Y.val, vec.Z.val);\n                                    currposition.Add(pos);\n                                }\n                                positionsKeyframes.Add(currkeyframe);\n                                positions.Add(currposition);\n\n                                List<Vector3Df> currscale = new List<Vector3Df>();\n                                currkeyframe = new List<uint>();\n                                compression = 0;\n                                compr = bone.Scale.Compression;\n                                if (compr != null)\n                                    compression = compr.val;\n                                addr = bone.Scale.DataAddr;\n                                if (addr != null)\n                                    br.BaseStream.Position = addr.val;\n                                else\n                                    br.BaseStream.Position = 0;\n                                var scaleNumFrames = bone.Scale.NumFrames;\n                                for (uint idx = 0; idx < scaleNumFrames.val; idx++)\n                                {\n                                    keyFrame = idx;\n\n                                    currkeyframe.Add(keyFrame);\n                                    var vec = new SVector3D(null, null, \"\");\n                                    vec.Read(br, compression);\n                                    Vector3Df scale = new Vector3Df(vec.X.val, vec.Y.val, vec.Z.val);\n                                    currscale.Add(scale);\n                                }\n                                scalesKeyframes.Add(currkeyframe);\n                                scales.Add(currscale);\n                            }\n                        }\n                        break;\n                    }\n                }\n            }\n        }\n\n\n\n\n        public void Apply(SkinnedMesh skinnedMesh)\n        {\n            skinnedMesh.AnimationSpeed = animationSpeed;\n            for (int i = 0; i < orientations.Count; i++)\n            {\n                SJoint joint = skinnedMesh.GetAllJoints()[i];\n                for (int j = 0; j < positions[i].Count; j++)\n                {\n                    var poskey = skinnedMesh.AddPositionKey(joint);\n                    poskey.Position = positions[i][j];\n                    poskey.Frame = positionsKeyframes[i][j];\n                }\n\n                for (int j = 0; j < orientations[i].Count; j++)\n                {\n                    var rotkey = skinnedMesh.AddRotationKey(joint);\n                    rotkey.Rotation = orientations[i][j];\n                    rotkey.Frame = orientKeyframes[i][j];\n                }\n\n                for (int j = 0; j < scales[i].Count; j++)\n                {\n                    var scalekey = skinnedMesh.AddScaleKey(joint);\n                    scalekey.Scale = scales[i][j];\n                    scalekey.Frame = scalesKeyframes[i][j];\n                }\n            }\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit/Forms/frmMimics.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Drawing;\nusing System.IO;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Windows.Forms;\nusing IniParserLTK;\n\nusing WolvenKit.CR2W;\n#if !USE_RENDER\nusing WolvenKit.Render;\n#endif\n\nnamespace WolvenKit\n{\n    public partial class frmMimics : Form\n    {\n        private CR2WFile animsFile;\n#if !USE_RENDER\n        private ExportFace exportFac { get; set; }\n#endif\n\n        public frmMimics(string w2animsFilePath = null, string w3facFilePath = null)\n        {\n            InitializeComponent();\n\n            txw3fac.Text = w3facFilePath;\n            txw2anims.Text = w2animsFilePath;\n\n\n            btSave.Enabled =\n                (File.Exists(txw2anims.Text) && Path.GetExtension(txw2anims.Text) == \".w2anims\" || Path.GetExtension(txw2anims.Text) == \".w2cutscene\") &&\n                (File.Exists(txw3fac.Text) && Path.GetExtension(txw3fac.Text) == \".w3fac\");\n            setupcomboBox();\n        }\n\n\n\n\n        private void setupcomboBox()\n        {\n            if (File.Exists(txw2anims.Text))\n            {\n                {\n                    string w3facFilePath = txw3fac.Text;\n                    string w2animsFilePath = txw2anims.Text;\n\n#if !USE_RENDER\n                    exportFac = new ExportFace();\n#endif\n\n                    byte[] animsData;\n                    animsData = File.ReadAllBytes(w2animsFilePath);\n                    using (MemoryStream ms = new MemoryStream(animsData))\n                    using (BinaryReader br = new BinaryReader(ms))\n                    {\n                        animsFile = new CR2WFile()\n                        {\n                            FileName = w2animsFilePath\n                        };\n                        animsFile.Read(br);\n#if !USE_RENDER\n                        exportFac.LoadData(animsFile);\n#endif\n                    }\n                    comboBoxAnim.Items.Clear();\n#if !USE_RENDER\n                    for (int i = 0; i < ExportAnimation.AnimationNames.Count; i++)\n                        comboBoxAnim.Items.Add(ExportAnimation.AnimationNames[i].Key);\n                    comboBoxAnim.SelectedItem = ExportAnimation.AnimationNames[0].Key;\n#endif\n                }\n            }\n            else\n            {\n\n            }\n        }\n\n        private void btnBrowseRig_Click(object sender, EventArgs e)\n        {\n            var dlg = new System.Windows.Forms.OpenFileDialog();\n            dlg.Title = \"Select Witcher 3 Face File.\";\n            dlg.FileName = txw3fac.Text;\n            dlg.Filter = \"Witcher 3 Rig File (*.w3fac)|*.w3fac\";\n            if (dlg.ShowDialog(this) == DialogResult.OK)\n            {\n                txw3fac.Text = dlg.FileName;\n            }\n        }\n\n        private void btSave_Click(object sender, EventArgs e)\n        {\n            if (!File.Exists(txw3fac.Text))\n            {\n                DialogResult = DialogResult.None;\n                txw3fac.Focus();\n                MessageBox.Show(\"Invalid path\", \"failed to save.\");\n                return;\n            }\n\n            if (!File.Exists(txw2anims.Text))\n            {\n                DialogResult = DialogResult.None;\n                txw2anims.Focus();\n                MessageBox.Show(\"Invalid path\", \"failed to save.\");\n                return;\n            }\n            using (var sf = new SaveFileDialog())\n            {\n                sf.Filter = \"W3 json | *.json\";\n                sf.FileName = Path.GetFileName(txw2anims.Text) + \".json\";\n                if (sf.ShowDialog() == DialogResult.OK)\n                {\n#if !USE_RENDER\n                    CommonData cdata = new CommonData();\n                    Rig exportRig = new Rig(cdata);\n#endif\n                    byte[] data;\n                    data = File.ReadAllBytes(txw3fac.Text);\n                    using (MemoryStream ms = new MemoryStream(data))\n                    using (BinaryReader br = new BinaryReader(ms))\n                    {\n                        CR2WFile rigFile = new CR2WFile();\n                        rigFile.Read(br);\n#if !USE_RENDER\n                        exportRig.LoadData(rigFile);\n#endif\n                    }\n\n\n                    MessageBox.Show(this, \"Sucessfully wrote file!\", \"WolvenKit\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                }\n            }\n        }\n\n        private void btBrowseAnims_Click(object sender, EventArgs e)\n        {\n            var dlg = new System.Windows.Forms.OpenFileDialog\n            {\n                Title = \"Select Witcher 3 Animation File.\",\n                FileName = txw3fac.Text,\n                Filter = \"Witcher 3 Animation File (*.w2anims)|*.w2anims|Witcher 3 Cutscene File (*.w2cutscene)|*.w2cutscene\"\n            };\n            if (dlg.ShowDialog(this) == DialogResult.OK)\n            {\n                txw2anims.Text = dlg.FileName;\n            }\n        }\n\n        private void txWCC_Lite_TextChanged(object sender, EventArgs e)\n        {\n            var path = txw2anims.Text;\n            if (File.Exists(path) && (Path.GetExtension(path) == \".w2anims\" || Path.GetExtension(path) == \".w2cutscene\"))\n            {\n                WCCexeTickLBL.Text = \"✓\";\n                WCCexeTickLBL.ForeColor = Color.Green;\n            }\n            else\n            {\n                WCCexeTickLBL.Text = \"X\";\n                WCCexeTickLBL.ForeColor = Color.Red;\n            }\n            btSave.Enabled =\n                (File.Exists(txw2anims.Text) && (Path.GetExtension(txw2anims.Text) == \".w2anims\" || Path.GetExtension(txw2anims.Text) == \".w2cutscene\")) &&\n                (File.Exists(txw3fac.Text) && Path.GetExtension(txw3fac.Text) == \".w3fac\");\n            setupcomboBox();\n        }\n\n        private void txExecutablePath_TextChanged(object sender, EventArgs e)\n        {\n            var path = txw3fac.Text;\n            if (File.Exists(path) && Path.GetExtension(path) == \".w3fac\")\n            {\n                W3exeTickLBL.Text = \"✓\";\n                W3exeTickLBL.ForeColor = Color.Green;\n            }\n            else\n            {\n                W3exeTickLBL.Text = \"X\";\n                W3exeTickLBL.ForeColor = Color.Red;\n            }\n            btSave.Enabled =\n                (File.Exists(txw2anims.Text) && (Path.GetExtension(txw2anims.Text) == \".w2anims\" || Path.GetExtension(txw2anims.Text) == \".w2cutscene\")) &&\n                (File.Exists(txw3fac.Text) && Path.GetExtension(txw3fac.Text) == \".w3fac\");\n        }\n\n        private void comboBoxAnim_SelectedIndexChanged(object sender, EventArgs e)\n        {\n            ComboBox comboBoxAnim = (ComboBox)sender;\n            int resultIndex = -1;\n            string selectedAnim = (string)comboBoxAnim.SelectedItem;\n            resultIndex = comboBoxAnim.FindStringExact(selectedAnim);\n\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/BTTaskEredinSetIsInSpecialAttackDef.cs'\n:using System.IO;\nusing System.Runtime.Serialization;\nusing WolvenKit.CR2W.Reflection;\nusing FastMember;\nusing static WolvenKit.CR2W.Types.Enums;\n\n\nnamespace WolvenKit.CR2W.Types\n{\n\t[DataContract(Namespace = \"\")]\n\t[REDMeta]\n\tpublic class BTTaskEredinSetIsInSpecialAttackDef : IBehTreeTaskDefinition\n\t{\n\t\tpublic BTTaskEredinSetIsInSpecialAttackDef(CR2WFile cr2w, CVariable parent, string name) : base(cr2w, parent, name){ }\n\n\t\tpublic static new CVariable Create(CR2WFile cr2w, CVariable parent, string name) => new BTTaskEredinSetIsInSpecialAttackDef(cr2w, parent, name);\n\n\t\tpublic override void Read(BinaryReader file, uint size) => base.Read(file, size);\n\n\t\tpublic override void Write(BinaryWriter file) => base.Write(file);\n\n\t}\n}\n'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'\n:﻿using System.Linq;\nusing System.Xml.Linq;\nusing WolvenKit;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit.Nvidia.HairWorks\n{\n    class NvHairAssetDescriptor\n    {\n\n        public string checksum = \"0x299b335f 0x2cad8b54 0xcaf3c98f 0xa3094fa7\";\n\n        public XElement serialize(CFurMeshResource chunk)\n        {\n\n\n            var ret = NvidiaXML.CreateStructHeader(\"\", \"Ref\", \"HairSceneDescriptor\", \"1.0\", checksum);\n            ret.AddNvValue(\"numGuideHairs\", \"U32\", chunk.BoneIndices.Count.ToString());\n            ret.AddNvValue(\"numVertices\",\"U32\", chunk.Positions.Count.ToString());\n            ret.AddNvArray(\"vertices\",\"Vec3\",\"\",Apex.FormatCoordinateArray(chunk.Positions));\n            var endindicies = chunk.EndIndices;\n            ret.AddNvArray(\"endIndices\",\"U32\",endindicies.Count.ToString(),endindicies.Aggregate(\"\",(c,n) => c += \" \" + n));\n            ret.AddNvValue(\"numFaces\",\"U32\",\"\");\n            var faceIndices = chunk.FaceIndices;\n            ret.AddNvArray(\"faceIndices\",\"U32\",faceIndices.Count.ToString(),faceIndices.Aggregate(\"\",(c,n) => c += \" \" + n));\n            ret.AddNvArray(\"faceUVs\",\"Vec2\",\"\",\"\");\n            ret.AddNvValue(\"numBones\", \"U32\", chunk.BoneCount.ToString());\n            ret.AddNvArray(\"boneIndices\",\"Vec4\",\"\",\"\");\n            ret.AddNvArray(\"boneWeights\",\"Vec4\",\"\",\"\");\n            ret.AddNvArray(\"boneNames\",\"U8\",\"\",\"\");\n            ret.AddNvArray(\"boneNameList\",\"String\",\"\",\"\");\n            ret.AddNvArray(\"bindPoses\",\"Mat44\",\"\",\"\");\n            ret.AddNvArray(\"boneParents\",\"I32\",\"\",\"\");\n            ret.AddNvValue(\"numBoneSpheres\",\"U32\",\"\");\n            ret.AddNvArray(\"boneSpheres\",\"Struct\",\"\",\"\");\n            ret.AddNvValue(\"numBoneCapsules\",\"U32\",\"\");\n            ret.AddNvArray(\"boneCapsuleIndices\",\"U32\",\"\",\"\");\n            ret.AddNvValue(\"numPinConstraints\",\"U32\",\"\");\n            ret.AddNvArray(\"pinConstraints\",\"Struct\",\"\",\"\");\n            ret.AddNvValue(\"sceneUnit\",\"F32\",\"\");\n            ret.AddNvValue(\"upAxis\",\"U32\",\"\");\n            ret.AddNvValue(\"handedness\",\"U32\",\"\");\n            return ret;\n        }\n    }\n}\n\n'WolvenKit-7/WolvenKit.Nvidia/Program.cs'\n:﻿using System;\nusing System.IO;\nusing WolvenKit.Nvidia.HairWorks;\nusing WolvenKit.CR2W;\n\nnamespace WolvenKit.Nvidia\n{\n    class Program\n    {\n\n        [STAThread]\n        static void Main(string[] args)\n        {\n            var br = new BinaryReader(new FileStream(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\hw.redfur\",FileMode.Open));\n            var redfur = new CR2WFile();\n            redfur.Read(br);\n            Apex.HairWorks.ConvertToApexXml(redfur).Save(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\out.apx\");\n            NvidiaXML.BreakXmlHeader(\"C:\\\\Users\\\\bence.hambalko\\\\Documents\\\\Apex\\\\out.apx\");\n        }\n    }\n}\n",
        "gt": [
            "'WolvenKit-7/WolvenKit.CR2W/Types/W3/RTTIConvert/BTTaskEredinSetIsInSpecialAttackDef.cs'",
            "'WolvenKit-7/WolvenKit.Render/Animations.cs'",
            "'WolvenKit-7/WolvenKit/Forms/frmMimics.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/HairWorks/NvHairAssetDescriptor.cs'",
            "'WolvenKit-7/WolvenKit.Nvidia/Program.cs'"
        ]
    },
    {
        "files": [
            "'HolisticMotionCapture/Packages/HolisticMotionCapture/VRM/Editor/SkinnedMeshUtility/VrmMeshIntegratorWizard.cs'",
            "'HolisticMotionCapture/Assets/Scripts/VisualizeCtrlUI.cs'",
            "'HolisticMotionCapture/Packages/HolisticMotionCapture/UniGLTF/Runtime/MeshUtility/MeshIntegratorUtility.cs'"
        ],
        "content": "'HolisticMotionCapture/Packages/HolisticMotionCapture/VRM/Editor/SkinnedMeshUtility/VrmMeshIntegratorWizard.cs'\n:﻿#pragma warning disable 0414, 0649\nusing UnityEditor;\nusing UnityEngine;\nusing System.Linq;\nusing System;\nusing System.Collections.Generic;\nusing UniGLTF.MeshUtility;\nusing System.IO;\nusing UniGLTF.M17N;\n\nnamespace VRM\n{\n    public class VrmMeshIntegratorWizard : ScriptableWizard\n    {\n        const string ASSET_SUFFIX = \".mesh.asset\";\n\n        enum HelpMessage\n        {\n            Ready,\n            SetTarget,\n            InvalidTarget,\n        }\n\n        enum ValidationError\n        {\n            None,\n            NoTarget,\n            HasParent,\n            NotPrefab,\n        }\n\n        [SerializeField]\n        GameObject m_root;\n\n        [SerializeField]\n        bool m_separateByBlendShape = true;\n\n        [Header(\"Validation\")]\n        [SerializeField]\n        Material[] m_uniqueMaterials;\n\n        [Serializable]\n        struct MaterialKey\n        {\n            public string Shader;\n            public KeyValuePair<string, object>[] Properties;\n\n            public override bool Equals(object obj)\n            {\n                if (!(obj is MaterialKey))\n                {\n                    return base.Equals(obj);\n                }\n\n                var key = (MaterialKey)obj;\n\n                return Shader == key.Shader\n                    && Properties.SequenceEqual(key.Properties)\n                    ;\n            }\n\n            public override int GetHashCode()\n            {\n                return base.GetHashCode();\n            }\n        }\n\n        [Serializable]\n        struct MaterialList\n        {\n            public Material[] Materials;\n\n            public MaterialList(Material[] list)\n            {\n                Materials = list;\n            }\n        }\n        [SerializeField]\n        MaterialList[] m_duplicateMaterials;\n\n        [Serializable]\n        public class ExcludeItem\n        {\n            public Mesh Mesh;\n            public bool Exclude;\n        }\n\n        [Header(\"Options\")]\n        [SerializeField]\n        List<ExcludeItem> m_excludes = new List<ExcludeItem>();\n\n        [Header(\"Result\")]\n        [SerializeField]\n        MeshMap[] integrationResults;\n\n        public static void CreateWizard()\n        {\n            ScriptableWizard.DisplayWizard<VrmMeshIntegratorWizard>(\"MeshIntegratorWizard\", \"Integrate and close window\", \"Integrate\");\n        }\n\n        private void OnEnable()\n        {\n            Clear(HelpMessage.Ready, ValidationError.None);\n            OnValidate();\n        }\n\n        protected override bool DrawWizardGUI()\n        {\n            var t = m_root.GetGameObjectType();\n            EditorGUILayout.HelpBox($\"{t}\", MessageType.Info);\n            return base.DrawWizardGUI();\n        }\n\n        static object GetPropertyValue(Shader shader, int i, Material m)\n        {\n            var propType = ShaderUtil.GetPropertyType(shader, i);\n            switch (propType)\n            {\n                case ShaderUtil.ShaderPropertyType.Color:\n                    return m.GetColor(ShaderUtil.GetPropertyName(shader, i));\n\n                case ShaderUtil.ShaderPropertyType.Range:\n                case ShaderUtil.ShaderPropertyType.Float:\n                    return m.GetFloat(ShaderUtil.GetPropertyName(shader, i));\n\n                case ShaderUtil.ShaderPropertyType.Vector:\n                    return m.GetVector(ShaderUtil.GetPropertyName(shader, i));\n\n                case ShaderUtil.ShaderPropertyType.TexEnv:\n                    return m.GetTexture(ShaderUtil.GetPropertyName(shader, i));\n\n                default:\n                    throw new NotImplementedException(propType.ToString());\n            }\n        }\n\n        static MaterialKey GetMaterialKey(Material m)\n        {\n            var key = new MaterialKey\n            {\n                Shader = m.shader.name,\n            };\n\n            key.Properties = Enumerable.Range(0, ShaderUtil.GetPropertyCount(m.shader))\n                .Select(x => new KeyValuePair<string, object>(\n                    ShaderUtil.GetPropertyName(m.shader, x),\n                    GetPropertyValue(m.shader, x, m))\n                    )\n                .OrderBy(x => x.Key)\n                .ToArray()\n                    ;\n\n            return key;\n        }\n\n        void Clear(HelpMessage help, ValidationError error)\n        {\n            helpString = help.Msg();\n            errorString = error != ValidationError.None ? error.Msg() : null;\n            m_uniqueMaterials = new Material[] { };\n            m_duplicateMaterials = new MaterialList[] { };\n            m_excludes.Clear();\n            isValid = false;\n        }\n\n        void OnValidate()\n        {\n            isValid = false;\n            if (m_root == null)\n            {\n                Clear(HelpMessage.SetTarget, ValidationError.NoTarget);\n                return;\n            }\n\n            if (m_root.GetGameObjectType() != GameObjectType.AssetPrefab)\n            {\n                Clear(HelpMessage.SetTarget, ValidationError.NotPrefab);\n                return;\n            }\n\n            if (m_root.transform.parent != null)\n            {\n                Clear(HelpMessage.InvalidTarget, ValidationError.HasParent);\n                return;\n            }\n\n            var backup = m_excludes.ToArray();\n            Clear(HelpMessage.Ready, ValidationError.None);\n            isValid = true;\n            m_uniqueMaterials = MeshIntegratorUtility.EnumerateSkinnedMeshRenderer(m_root.transform, MeshEnumerateOption.OnlyWithoutBlendShape)\n                .SelectMany(x => x.sharedMaterials)\n                .Distinct()\n                .ToArray();\n\n            m_duplicateMaterials = m_uniqueMaterials\n                .GroupBy(x => GetMaterialKey(x), x => x)\n                .Select(x => new MaterialList(x.ToArray()))\n                .Where(x => x.Materials.Length > 1)\n                .ToArray()\n                ;\n\n            UpdateExcludes(backup);\n        }\n\n        void UpdateExcludes(ExcludeItem[] backup)\n        {\n            var exclude_map = new Dictionary<Mesh, ExcludeItem>();\n            var excludes = new List<ExcludeItem>();\n            foreach (var x in m_root.GetComponentsInChildren<Renderer>())\n            {\n                var mesh = x.GetMesh();\n                if (mesh == null)\n                {\n                    continue;\n                }\n                if (exclude_map.ContainsKey(mesh))\n                {\n                    continue;\n                }\n\n                var item = new ExcludeItem\n                {\n                    Mesh = mesh,\n                };\n                var found = backup.FirstOrDefault(y => y.Mesh == mesh);\n                if (found != null)\n                {\n                    item.Exclude = found.Exclude;\n                }\n                excludes.Add(item);\n                exclude_map[mesh] = item;\n            }\n            m_excludes.AddRange(excludes);\n        }\n\n        void OnWizardUpdate()\n        {\n        }\n\n\n\n\n\n\n\n\n\n        void Integrate()\n        {\n            if (m_root.GetGameObjectType() != GameObjectType.AssetPrefab)\n            {\n                throw new Exception(\"for prefab only\");\n            }\n\n            String folder = \"Assets\";\n            var prefab = m_root.GetPrefab();\n            if (prefab != null)\n            {\n                folder = AssetDatabase.GetAssetPath(prefab);\n                Debug.Log(folder);\n            }\n\n\n            var assetFolder = EditorUtility.SaveFolderPanel(\"select asset save folder\", Path.GetDirectoryName(folder), \"VrmIntegrated\");\n            var unityPath = UniGLTF.UnityPath.FromFullpath(assetFolder);\n            if (!unityPath.IsUnderWritableFolder)\n            {\n                EditorUtility.DisplayDialog(\"asset folder\", \"Target folder must be in the Assets or writable Packages folder\", \"cancel\");\n                return;\n            }\n            assetFolder = unityPath.Value;\n\n            var copy = GameObject.Instantiate(m_root);\n\n\n            var excludes = m_excludes.Where(x => x.Exclude).Select(x => x.Mesh);\n            var results = Integrate(copy, excludes, m_separateByBlendShape);\n\n\n            foreach (var result in results)\n            {\n                var childAssetPath = $\"{assetFolder}/{result.IntegratedRenderer.gameObject.name}{ASSET_SUFFIX}\";\n                Debug.LogFormat(\"CreateAsset: {0}\", childAssetPath);\n                AssetDatabase.CreateAsset(result.IntegratedRenderer.sharedMesh, childAssetPath);\n            }\n\n\n            foreach (var result in results)\n            {\n                if (result.IntegratedRenderer != null)\n                {\n                    result.IntegratedRenderer.transform.SetParent(copy.transform, false);\n                }\n            }\n\n\n            var clips = VRMMeshIntegratorUtility.FollowBlendshapeRendererChange(results, copy, assetFolder);\n\n\n            foreach (var result in results)\n            {\n                foreach (var renderer in result.SourceMeshRenderers)\n                {\n                    GameObject.DestroyImmediate(renderer);\n                }\n                foreach (var renderer in result.SourceSkinnedMeshRenderers)\n                {\n                    GameObject.DestroyImmediate(renderer);\n                }\n            }\n\n\n            var firstperson = copy.GetComponent<VRMFirstPerson>();\n            if (firstperson != null)\n            {\n                firstperson.Reset();\n            }\n\n\n            var prefabPath = $\"{assetFolder}/VrmIntegrated.prefab\";\n            Debug.Log(prefabPath);\n            PrefabUtility.SaveAsPrefabAsset(copy, prefabPath, out bool success);\n            if (!success)\n            {\n                throw new System.Exception($\"PrefabUtility.SaveAsPrefabAsset: {prefabPath}\");\n            }\n\n\n            UnityEngine.Object.DestroyImmediate(copy);\n\n            var prefabReference = AssetDatabase.LoadAssetAtPath<GameObject>(prefabPath);\n            foreach (var clip in clips)\n            {\n                var so = new SerializedObject(clip);\n                so.Update();\n\n                var prop = so.FindProperty(\"m_prefab\");\n                prop.objectReferenceValue = prefabReference;\n                so.ApplyModifiedProperties();\n            }\n        }\n\n        static List<UniGLTF.MeshUtility.MeshIntegrationResult> Integrate(GameObject root, IEnumerable<Mesh> excludes, bool separateByBlendShape)\n        {\n            var results = new List<UniGLTF.MeshUtility.MeshIntegrationResult>();\n            if (separateByBlendShape)\n            {\n                results.Add(MeshIntegratorUtility.Integrate(root, onlyBlendShapeRenderers: MeshEnumerateOption.OnlyWithoutBlendShape, excludes: excludes));\n                results.Add(MeshIntegratorUtility.Integrate(root, onlyBlendShapeRenderers: MeshEnumerateOption.OnlyWithBlendShape, excludes: excludes));\n            }\n            else\n            {\n                results.Add(MeshIntegratorUtility.Integrate(root, onlyBlendShapeRenderers: MeshEnumerateOption.All, excludes: excludes));\n            }\n            return results;\n        }\n\n        void OnWizardCreate()\n        {\n            Integrate();\n\n        }\n\n        void OnWizardOtherButton()\n        {\n            Integrate();\n        }\n    }\n}\n\n'HolisticMotionCapture/Assets/Scripts/VisualizeCtrlUI.cs'\n:using System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing HolisticMotionCapture;\nusing SFB;\nusing VRM;\n#if UNITY_STANDALONE_OSX\nusing Klak.Syphon;\n#endif\n\npublic class VisualizeCtrlUI : MonoBehaviour\n{\n    [SerializeField] Visuallizer visuallizer;\n    [SerializeField] Dropdown vrmSelectDropdown;\n    [SerializeField] Texture defaultTexture;\n    [SerializeField] RawImage backGroundTexture;\n    [SerializeField] Dropdown backTextureSelect;\n    [SerializeField] GameObject captureUI;\n    [SerializeField] Toggle mirrorModeToggle;\n    [SerializeField] Toggle captureToggle;\n    [SerializeField] Dropdown hmcTypeSelect;\n    [SerializeField] Toggle isUpperBodyOnlyToggle;\n    [SerializeField] Toggle lookCameraToggle;\n\n    readonly string loadedVrmsPath = \"/VrmFiles\";\n    string defaultVrmPath;\n    readonly string avatarPlayerPrefsKey = \"SelectedVrmFileName\";\n    readonly string loadedImagePath = \"/LoadedImages\";\n    readonly string defaultTextureName = \"Default\";\n    readonly string backOffName = \"None\";\n    readonly string backImagePlayerPrefsKey = \"SelectedBackgroundImageFileName\";\n\n\n    void Awake()\n    {\n#if UNITY_STANDALONE_WIN\n        var unityCapture = Camera.main.gameObject.AddComponent<UnityCapture>();\n        unityCapture.ResizeMode = UnityCapture.EResizeMode.LinearResize;\n        unityCapture.HideWarnings = true;\n#elif UNITY_STANDALONE_OSX\n        var syphon = Camera.main.gameObject.AddComponent<SyphonServer>();\n        syphon.alphaSupport = true;\n        Destroy(mirrorModeToggle.gameObject);\n#else\n        Destroy(captureUI);\n#endif\n    }\n\n    void Start()\n    {\n        defaultVrmPath = Application.streamingAssetsPath + \"/DefaultSampleAvatar.vrm\";\n        CreateVrmDropdownOptions();\n        CreateImageOptions();\n        CaptureSwitched();\n        CreateHolisticMocapTypeOptions();\n        ChangeIsUpperBodyOnly();\n        ChangeLookCamera();\n\n        var lastOpenVrm = PlayerPrefs.GetString(avatarPlayerPrefsKey);\n        var initVrm = string.IsNullOrEmpty(lastOpenVrm) ? defaultVrmPath : lastOpenVrm;\n        ChangeVrmFromFileName(initVrm);\n        for (int i = 0; i < vrmSelectDropdown.options.Count; i++)\n        {\n            var option = vrmSelectDropdown.options[i];\n            if (option.text == initVrm)\n            {\n                vrmSelectDropdown.value = i;\n                vrmSelectDropdown.RefreshShownValue();\n                break;\n            }\n        }\n\n        var lastOpenbackImage = PlayerPrefs.GetString(backImagePlayerPrefsKey);\n        var initBackImage = string.IsNullOrEmpty(lastOpenbackImage) ? defaultTextureName : lastOpenbackImage;\n        ChangeBackTextureFromFileName(initBackImage);\n        for (int i = 0; i < backTextureSelect.options.Count; i++)\n        {\n            var option = backTextureSelect.options[i];\n            if (option.text == initBackImage)\n            {\n                backTextureSelect.value = i;\n                backTextureSelect.RefreshShownValue();\n                break;\n            }\n        }\n    }\n\n    void OnDestroy()\n    {\n        PlayerPrefs.SetString(avatarPlayerPrefsKey, vrmSelectDropdown.options[vrmSelectDropdown.value].text);\n        PlayerPrefs.SetString(backImagePlayerPrefsKey, backTextureSelect.options[backTextureSelect.value].text);\n    }\n\n    void CreateVrmDropdownOptions()\n    {\n        if (!Directory.Exists(Application.persistentDataPath + loadedVrmsPath))\n        {\n            Directory.CreateDirectory(Application.persistentDataPath + loadedVrmsPath);\n        }\n        var vrmPathes = Directory.GetFiles(Application.persistentDataPath + loadedVrmsPath, \"*.vrm\");\n\n        var vrmSelectOptions = new List<string>();\n        vrmSelectOptions.Add(Path.GetFileNameWithoutExtension(defaultVrmPath));\n        foreach (var path in vrmPathes)\n        {\n            vrmSelectOptions.Add(Path.GetFileNameWithoutExtension(path));\n        }\n        vrmSelectDropdown.ClearOptions();\n        vrmSelectDropdown.AddOptions(vrmSelectOptions);\n    }\n\n    void CreateImageOptions()\n    {\n        if (!Directory.Exists(Application.persistentDataPath + loadedImagePath))\n        {\n            Directory.CreateDirectory(Application.persistentDataPath + loadedImagePath);\n        }\n        var imagePathes = Directory.GetFiles(Application.persistentDataPath + loadedImagePath, \"*.png\");\n\n        var backTextureSelectOptions = new List<string>();\n        backTextureSelectOptions.Add(defaultTextureName);\n        backTextureSelectOptions.Add(backOffName);\n        foreach (var path in imagePathes)\n        {\n            backTextureSelectOptions.Add(Path.GetFileName(path));\n        }\n        backTextureSelect.ClearOptions();\n        backTextureSelect.AddOptions(backTextureSelectOptions);\n    }\n\n    void CreateHolisticMocapTypeOptions()\n    {\n        var holisticMocapTypeList = Enum.GetNames(typeof(HolisticMocapType));\n        var selectOptions = new List<string>();\n        foreach (var type in holisticMocapTypeList)\n        {\n            selectOptions.Add(type);\n        }\n        hmcTypeSelect.ClearOptions();\n        hmcTypeSelect.AddOptions(selectOptions);\n\n        var selectedType = (HolisticMocapType)Enum.ToObject(typeof(HolisticMocapType), hmcTypeSelect.value);\n        visuallizer.SetHolisticMocapType(selectedType);\n        hmcTypeSelect.onValueChanged.AddListener(selectValue =>\n        {\n            var selectedType = (HolisticMocapType)Enum.ToObject(typeof(HolisticMocapType), selectValue);\n            visuallizer.SetHolisticMocapType(selectedType);\n        });\n    }\n\n    public void ChangeIsUpperBodyOnly()\n    {\n        visuallizer.SetIsUpperBodyOnly(isUpperBodyOnlyToggle.isOn);\n    }\n\n    public void ChangeLookCamera()\n    {\n        visuallizer.SetMainCameraLook(lookCameraToggle.isOn);\n    }\n\n    public void ChangeVrmFromDropdownUi()\n    {\n        var filename = vrmSelectDropdown.options[vrmSelectDropdown.value].text;\n        ChangeVrmFromFileName(filename);\n    }\n\n    private async Task ChangeVrmFromFileName(string filename)\n    {\n        var path = Application.persistentDataPath + loadedVrmsPath + \"/\" + filename + \".vrm\";\n        if (filename == Path.GetFileNameWithoutExtension(defaultVrmPath))\n        {\n            path = defaultVrmPath;\n        }\n        await ChangeVrmFromPath(path);\n    }\n\n    private async Task ChangeVrmFromPath(string path)\n    {\n        var instance = await VrmUtility.LoadAsync(path);\n        instance.ShowMeshes();\n        var animator = instance.GetComponent<Animator>();\n        visuallizer.SetAnimator(animator);\n        Camera.main.transform.position = animator.GetBoneTransform(HumanBodyBones.Head).position + Vector3.forward * 0.8f;\n    }\n\n    public void VrmFileLoad()\n    {\n        var extensions = new[]{\n            new ExtensionFilter(\"VRM Files\", \"vrm\")\n        };\n        StandaloneFileBrowser.OpenFilePanelAsync(\"Open File\", \"\", extensions, false, async (pathes) =>\n        {\n            if (pathes.Length <= 0) return;\n            var path = pathes[0];\n\n            if (string.IsNullOrEmpty(path)) return;\n\n            var extension = Path.GetExtension(path).ToLower();\n            if (extension != \".vrm\") return;\n\n            await ChangeVrmFromPath(path);\n\n            var filename = Path.GetFileNameWithoutExtension(path) + \".vrm\";\n            var savePath = Application.persistentDataPath + loadedVrmsPath + \"/\" + filename;\n            File.Copy(path, savePath, true);\n\n            var option = new Dropdown.OptionData();\n            option.text = Path.GetFileNameWithoutExtension(path);\n            vrmSelectDropdown.options.Add(option);\n            vrmSelectDropdown.value = vrmSelectDropdown.options.Count - 1;\n            vrmSelectDropdown.RefreshShownValue();\n        });\n    }\n\n    public void ChangeBackTexture()\n    {\n        var filename = backTextureSelect.options[backTextureSelect.value].text;\n        ChangeBackTextureFromFileName(filename);\n    }\n\n    private void ChangeBackTextureFromFileName(string filename)\n    {\n        if (filename == defaultTexture.name)\n        {\n            backGroundTexture.texture = defaultTexture;\n            return;\n        }\n        if (filename == backOffName)\n        {\n            backGroundTexture.texture = Texture2D.blackTexture;\n            return;\n        }\n\n        byte[] bytes = File.ReadAllBytes(Application.persistentDataPath + loadedImagePath + \"/\" + filename);\n        Texture2D texture = new Texture2D(1, 1);\n        bool isLoadSuccess = texture.LoadImage(bytes);\n        if (!isLoadSuccess) return;\n\n        backGroundTexture.texture = texture;\n    }\n\n    public void NewImageLoad()\n    {\n        var extensions = new[]{\n            new ExtensionFilter(\"Image Files\", \"png\", \"jpg\", \"jpeg\")\n        };\n        StandaloneFileBrowser.OpenFilePanelAsync(\"Open File\", \"\", extensions, false, (pathes) =>\n        {\n            if (pathes.Length <= 0) return;\n            var path = pathes[0];\n\n            if (string.IsNullOrEmpty(path)) return;\n\n            byte[] bytes = File.ReadAllBytes(path);\n            Texture2D texture = new Texture2D(1, 1);\n            bool isLoadSuccess = texture.LoadImage(bytes);\n            if (!isLoadSuccess) return;\n\n            backGroundTexture.texture = texture;\n\n            var filename = Path.GetFileNameWithoutExtension(path) + \".png\";\n            var savePath = Application.persistentDataPath + loadedImagePath + \"/\" + filename;\n            File.WriteAllBytes(savePath, texture.EncodeToPNG());\n\n            var option = new Dropdown.OptionData();\n            option.text = filename;\n            backTextureSelect.options.Add(option);\n            backTextureSelect.value = backTextureSelect.options.Count - 1;\n            backTextureSelect.RefreshShownValue();\n        });\n    }\n\n    public void MirrorModeSwitched()\n    {\n#if UNITY_STANDALONE_WIN\n        var unityCapture = Camera.main.GetComponent<UnityCapture>();\n        unityCapture.MirrorMode = mirrorModeToggle.isOn ? UnityCapture.EMirrorMode.MirrorHorizontally : UnityCapture.EMirrorMode.Disabled;\n#endif\n    }\n\n    public void CaptureSwitched()\n    {\n#if UNITY_STANDALONE_WIN\n        var unityCapture = Camera.main.GetComponent<UnityCapture>();\n        unityCapture.enabled = captureToggle.isOn;\n#elif UNITY_STANDALONE_OSX\n        var syphon = Camera.main.GetComponent<SyphonServer>();\n        syphon.enabled = captureToggle.isOn;\n#endif\n    }\n}\n\n'HolisticMotionCapture/Packages/HolisticMotionCapture/UniGLTF/Runtime/MeshUtility/MeshIntegratorUtility.cs'\n:using System.Collections.Generic;\nusing System.IO;\nusing UnityEngine;\n\nnamespace UniGLTF.MeshUtility\n{\n    public static class MeshIntegratorUtility\n    {\n\n\n\n\n\n\n\n\n\n\n        public static MeshIntegrationResult Integrate(GameObject go, MeshEnumerateOption onlyBlendShapeRenderers,\n            IEnumerable<Mesh> excludes = null,\n            bool destroyIntegratedRenderer = false)\n        {\n            var exclude = new MeshExclude(excludes);\n\n            var integrator = new MeshUtility.MeshIntegrator();\n\n            switch (onlyBlendShapeRenderers)\n            {\n                case MeshEnumerateOption.OnlyWithBlendShape:\n                    {\n                        foreach (var x in EnumerateSkinnedMeshRenderer(go.transform, onlyBlendShapeRenderers))\n                        {\n                            if (exclude.IsExcluded(x))\n                            {\n                                continue;\n                            }\n                            integrator.Push(x);\n                        }\n                        break;\n                    }\n\n                case MeshEnumerateOption.OnlyWithoutBlendShape:\n                    {\n                        foreach (var x in EnumerateSkinnedMeshRenderer(go.transform, onlyBlendShapeRenderers))\n                        {\n                            if (exclude.IsExcluded(x))\n                            {\n                                continue;\n                            }\n                            integrator.Push(x);\n                        }\n\n                        foreach (var x in EnumerateMeshRenderer(go.transform))\n                        {\n                            if (exclude.IsExcluded(x))\n                            {\n                                continue;\n                            }\n                            integrator.Push(x);\n                        }\n\n                        break;\n                    }\n\n                case MeshEnumerateOption.All:\n                    {\n                        foreach (var x in EnumerateSkinnedMeshRenderer(go.transform, onlyBlendShapeRenderers))\n                        {\n                            if (exclude.IsExcluded(x))\n                            {\n                                continue;\n                            }\n                            integrator.Push(x);\n                        }\n\n                        foreach (var x in EnumerateMeshRenderer(go.transform))\n                        {\n                            if (exclude.IsExcluded(x))\n                            {\n                                continue;\n                            }\n                            integrator.Push(x);\n                        }\n\n                        break;\n                    }\n            }\n\n            return integrator.Integrate(onlyBlendShapeRenderers);\n        }\n\n        public static IEnumerable<SkinnedMeshRenderer> EnumerateSkinnedMeshRenderer(Transform root, MeshEnumerateOption hasBlendShape)\n        {\n            foreach (var x in Traverse(root))\n            {\n                var renderer = x.GetComponent<SkinnedMeshRenderer>();\n                if (renderer != null &&\n                    renderer.gameObject.activeInHierarchy &&\n                    renderer.sharedMesh != null &&\n                    renderer.enabled)\n                {\n                    switch (hasBlendShape)\n                    {\n                        case MeshEnumerateOption.OnlyWithBlendShape:\n                            if (renderer.sharedMesh.blendShapeCount > 0)\n                            {\n                                yield return renderer;\n                            }\n                            break;\n\n                        case MeshEnumerateOption.OnlyWithoutBlendShape:\n                            if (renderer.sharedMesh.blendShapeCount == 0)\n                            {\n                                yield return renderer;\n                            }\n                            break;\n\n                        case MeshEnumerateOption.All:\n                            {\n                                yield return renderer;\n                                break;\n                            }\n                    }\n                }\n            }\n        }\n\n        public static IEnumerable<MeshRenderer> EnumerateMeshRenderer(Transform root)\n        {\n            foreach (var x in Traverse(root))\n            {\n                var renderer = x.GetComponent<MeshRenderer>();\n                var filter = x.GetComponent<MeshFilter>();\n\n                if (renderer != null &&\n                    filter != null &&\n                    renderer.gameObject.activeInHierarchy &&\n                    filter.sharedMesh != null)\n                {\n                    yield return renderer;\n                }\n            }\n        }\n\n        private static IEnumerable<Transform> Traverse(Transform parent)\n        {\n            if (parent.gameObject.activeSelf)\n            {\n                yield return parent;\n\n                foreach (Transform child in parent)\n                {\n                    foreach (var x in Traverse(child))\n                    {\n                        yield return x;\n                    }\n                }\n            }\n        }\n\n        public static void ReplaceMeshWithResults(GameObject copy, List<MeshIntegrationResult> results)\n        {\n\n            foreach (var skinnedMesh in copy.GetComponentsInChildren<SkinnedMeshRenderer>())\n            {\n                GameObject.DestroyImmediate(skinnedMesh);\n            }\n            foreach (var normalMesh in copy.GetComponentsInChildren<MeshFilter>())\n            {\n                if (normalMesh.gameObject.GetComponent<MeshRenderer>())\n                {\n                    GameObject.DestroyImmediate(normalMesh.gameObject.GetComponent<MeshRenderer>());\n                }\n                GameObject.DestroyImmediate(normalMesh);\n            }\n\n\n            foreach (var result in results)\n            {\n                result.IntegratedRenderer.transform.SetParent(copy.transform, false);\n            }\n        }\n    }\n}",
        "gt": [
            "'HolisticMotionCapture/Packages/HolisticMotionCapture/UniGLTF/Runtime/MeshUtility/MeshIntegratorUtility.cs'",
            "'HolisticMotionCapture/Packages/HolisticMotionCapture/VRM/Editor/SkinnedMeshUtility/VrmMeshIntegratorWizard.cs'",
            "'HolisticMotionCapture/Assets/Scripts/VisualizeCtrlUI.cs'"
        ]
    },
    {
        "files": [
            "'DotnetDesk/src/src/Models/ManageViewModels/ChangePasswordViewModel.cs'",
            "'DotnetDesk/src/src/Extensions/UrlHelperExtensions.cs'",
            "'DotnetDesk/src/src/Controllers/ManageController.cs'"
        ],
        "content": "'DotnetDesk/src/src/Models/ManageViewModels/ChangePasswordViewModel.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.ComponentModel.DataAnnotations;\nusing System.Linq;\nusing System.Threading.Tasks;\n\nnamespace src.Models.ManageViewModels\n{\n    public class ChangePasswordViewModel\n    {\n        [Required]\n        [DataType(DataType.Password)]\n        [Display(Name = \"Current password\")]\n        public string OldPassword { get; set; }\n\n        [Required]\n        [StringLength(100, ErrorMessage = \"The {0} must be at least {2} and at max {1} characters long.\", MinimumLength = 6)]\n        [DataType(DataType.Password)]\n        [Display(Name = \"New password\")]\n        public string NewPassword { get; set; }\n\n        [DataType(DataType.Password)]\n        [Display(Name = \"Confirm new password\")]\n        [Compare(\"NewPassword\", ErrorMessage = \"The new password and confirmation password do not match.\")]\n        public string ConfirmPassword { get; set; }\n\n        public string StatusMessage { get; set; }\n    }\n}\n\n'DotnetDesk/src/src/Extensions/UrlHelperExtensions.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing src.Controllers;\n\nnamespace Microsoft.AspNetCore.Mvc\n{\n    public static class UrlHelperExtensions\n    {\n        public static string EmailConfirmationLink(this IUrlHelper urlHelper, string userId, string code, string scheme)\n        {\n            return urlHelper.Action(\n                action: nameof(AccountController.ConfirmEmail),\n                controller: \"Account\",\n                values: new { userId, code },\n                protocol: scheme);\n        }\n\n        public static string ResetPasswordCallbackLink(this IUrlHelper urlHelper, string userId, string code, string scheme)\n        {\n            return urlHelper.Action(\n                action: nameof(AccountController.ResetPassword),\n                controller: \"Account\",\n                values: new { userId, code },\n                protocol: scheme);\n        }\n    }\n}\n\n'DotnetDesk/src/src/Controllers/ManageController.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.Encodings.Web;\nusing System.Threading.Tasks;\nusing Microsoft.AspNetCore.Authentication;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing src.Models;\nusing src.Models.ManageViewModels;\nusing src.Services;\n\nnamespace src.Controllers\n{\n    [Authorize]\n    [Route(\"[controller]/[action]\")]\n    public class ManageController : Controller\n    {\n        private readonly UserManager<ApplicationUser> _userManager;\n        private readonly SignInManager<ApplicationUser> _signInManager;\n        private readonly IEmailSender _emailSender;\n        private readonly ILogger _logger;\n        private readonly UrlEncoder _urlEncoder;\n\n        private const string AuthenticatorUriFormat = \"otpauth:\n        private const string RecoveryCodesKey = nameof(RecoveryCodesKey);\n\n        public ManageController(\n          UserManager<ApplicationUser> userManager,\n          SignInManager<ApplicationUser> signInManager,\n          IEmailSender emailSender,\n          ILogger<ManageController> logger,\n          UrlEncoder urlEncoder)\n        {\n            _userManager = userManager;\n            _signInManager = signInManager;\n            _emailSender = emailSender;\n            _logger = logger;\n            _urlEncoder = urlEncoder;\n        }\n\n        [TempData]\n        public string StatusMessage { get; set; }\n\n        [HttpGet]\n        public async Task<IActionResult> Index()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var model = new IndexViewModel\n            {\n                Username = user.UserName,\n                Email = user.Email,\n                PhoneNumber = user.PhoneNumber,\n                IsEmailConfirmed = user.EmailConfirmed,\n                StatusMessage = StatusMessage\n            };\n\n            return View(model);\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> Index(IndexViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var email = user.Email;\n            if (model.Email != email)\n            {\n                var setEmailResult = await _userManager.SetEmailAsync(user, model.Email);\n                if (!setEmailResult.Succeeded)\n                {\n                    throw new ApplicationException($\"Unexpected error occurred setting email for user with ID '{user.Id}'.\");\n                }\n            }\n\n            var phoneNumber = user.PhoneNumber;\n            if (model.PhoneNumber != phoneNumber)\n            {\n                var setPhoneResult = await _userManager.SetPhoneNumberAsync(user, model.PhoneNumber);\n                if (!setPhoneResult.Succeeded)\n                {\n                    throw new ApplicationException($\"Unexpected error occurred setting phone number for user with ID '{user.Id}'.\");\n                }\n            }\n\n            StatusMessage = \"Your profile has been updated\";\n            return RedirectToAction(nameof(Index));\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> SendVerificationEmail(IndexViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);\n            var callbackUrl = Url.EmailConfirmationLink(user.Id, code, Request.Scheme);\n            var email = user.Email;\n            await _emailSender.SendEmailConfirmationAsync(email, callbackUrl);\n\n            StatusMessage = \"Verification email sent. Please check your email.\";\n            return RedirectToAction(nameof(Index));\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> ChangePassword()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var hasPassword = await _userManager.HasPasswordAsync(user);\n            if (!hasPassword)\n            {\n                return RedirectToAction(nameof(SetPassword));\n            }\n\n            var model = new ChangePasswordViewModel { StatusMessage = StatusMessage };\n            return View(model);\n        }\n\n        [HttpPost]\n        public async Task<IActionResult> ChangePassword([FromBody]ChangePasswordViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var changePasswordResult = await _userManager.ChangePasswordAsync(user, model.OldPassword, model.NewPassword);\n            if (!changePasswordResult.Succeeded)\n            {\n                AddErrors(changePasswordResult);\n                return View(model);\n            }\n\n            await _signInManager.SignInAsync(user, isPersistent: false);\n            _logger.LogInformation(\"User changed their password successfully.\");\n            StatusMessage = \"Your password has been changed.\";\n\n            return Json(new { success = true, message = StatusMessage });\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> SetPassword()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var hasPassword = await _userManager.HasPasswordAsync(user);\n\n            if (hasPassword)\n            {\n                return RedirectToAction(nameof(ChangePassword));\n            }\n\n            var model = new SetPasswordViewModel { StatusMessage = StatusMessage };\n            return View(model);\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> SetPassword(SetPasswordViewModel model)\n        {\n            if (!ModelState.IsValid)\n            {\n                return View(model);\n            }\n\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var addPasswordResult = await _userManager.AddPasswordAsync(user, model.NewPassword);\n            if (!addPasswordResult.Succeeded)\n            {\n                AddErrors(addPasswordResult);\n                return View(model);\n            }\n\n            await _signInManager.SignInAsync(user, isPersistent: false);\n            StatusMessage = \"Your password has been set.\";\n\n            return RedirectToAction(nameof(SetPassword));\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> ExternalLogins()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var model = new ExternalLoginsViewModel { CurrentLogins = await _userManager.GetLoginsAsync(user) };\n            model.OtherLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync())\n                .Where(auth => model.CurrentLogins.All(ul => auth.Name != ul.LoginProvider))\n                .ToList();\n            model.ShowRemoveButton = await _userManager.HasPasswordAsync(user) || model.CurrentLogins.Count > 1;\n            model.StatusMessage = StatusMessage;\n\n            return View(model);\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> LinkLogin(string provider)\n        {\n\n            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);\n\n\n            var redirectUrl = Url.Action(nameof(LinkLoginCallback));\n            var properties = _signInManager.ConfigureExternalAuthenticationProperties(provider, redirectUrl, _userManager.GetUserId(User));\n            return new ChallengeResult(provider, properties);\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> LinkLoginCallback()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var info = await _signInManager.GetExternalLoginInfoAsync(user.Id);\n            if (info == null)\n            {\n                throw new ApplicationException($\"Unexpected error occurred loading external login info for user with ID '{user.Id}'.\");\n            }\n\n            var result = await _userManager.AddLoginAsync(user, info);\n            if (!result.Succeeded)\n            {\n                throw new ApplicationException($\"Unexpected error occurred adding external login for user with ID '{user.Id}'.\");\n            }\n\n\n            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);\n\n            StatusMessage = \"The external login was added.\";\n            return RedirectToAction(nameof(ExternalLogins));\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> RemoveLogin(RemoveLoginViewModel model)\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var result = await _userManager.RemoveLoginAsync(user, model.LoginProvider, model.ProviderKey);\n            if (!result.Succeeded)\n            {\n                throw new ApplicationException($\"Unexpected error occurred removing external login for user with ID '{user.Id}'.\");\n            }\n\n            await _signInManager.SignInAsync(user, isPersistent: false);\n            StatusMessage = \"The external login was removed.\";\n            return RedirectToAction(nameof(ExternalLogins));\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> TwoFactorAuthentication()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var model = new TwoFactorAuthenticationViewModel\n            {\n                HasAuthenticator = await _userManager.GetAuthenticatorKeyAsync(user) != null,\n                Is2faEnabled = user.TwoFactorEnabled,\n                RecoveryCodesLeft = await _userManager.CountRecoveryCodesAsync(user),\n            };\n\n            return View(model);\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> Disable2faWarning()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            if (!user.TwoFactorEnabled)\n            {\n                throw new ApplicationException($\"Unexpected error occured disabling 2FA for user with ID '{user.Id}'.\");\n            }\n\n            return View(nameof(Disable2fa));\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> Disable2fa()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var disable2faResult = await _userManager.SetTwoFactorEnabledAsync(user, false);\n            if (!disable2faResult.Succeeded)\n            {\n                throw new ApplicationException($\"Unexpected error occured disabling 2FA for user with ID '{user.Id}'.\");\n            }\n\n            _logger.LogInformation(\"User with ID {UserId} has disabled 2fa.\", user.Id);\n            return RedirectToAction(nameof(TwoFactorAuthentication));\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> EnableAuthenticator()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            var model = new EnableAuthenticatorViewModel();\n            await LoadSharedKeyAndQrCodeUriAsync(user, model);\n\n            return View(model);\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> EnableAuthenticator(EnableAuthenticatorViewModel model)\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            if (!ModelState.IsValid)\n            {\n                await LoadSharedKeyAndQrCodeUriAsync(user, model);\n                return View(model);\n            }\n\n\n            var verificationCode = model.Code.Replace(\" \", string.Empty).Replace(\"-\", string.Empty);\n\n            var is2faTokenValid = await _userManager.VerifyTwoFactorTokenAsync(\n                user, _userManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);\n\n            if (!is2faTokenValid)\n            {\n                ModelState.AddModelError(\"Code\", \"Verification code is invalid.\");\n                await LoadSharedKeyAndQrCodeUriAsync(user, model);\n                return View(model);\n            }\n\n            await _userManager.SetTwoFactorEnabledAsync(user, true);\n            _logger.LogInformation(\"User with ID {UserId} has enabled 2FA with an authenticator app.\", user.Id);\n            var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\n            TempData[RecoveryCodesKey] = recoveryCodes.ToArray();\n\n            return RedirectToAction(nameof(ShowRecoveryCodes));\n        }\n\n        [HttpGet]\n        public IActionResult ShowRecoveryCodes()\n        {\n            var recoveryCodes = (string[])TempData[RecoveryCodesKey];\n            if (recoveryCodes == null)\n            {\n                return RedirectToAction(nameof(TwoFactorAuthentication));\n            }\n\n            var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes };\n            return View(model);\n        }\n\n        [HttpGet]\n        public IActionResult ResetAuthenticatorWarning()\n        {\n            return View(nameof(ResetAuthenticator));\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> ResetAuthenticator()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            await _userManager.SetTwoFactorEnabledAsync(user, false);\n            await _userManager.ResetAuthenticatorKeyAsync(user);\n            _logger.LogInformation(\"User with id '{UserId}' has reset their authentication app key.\", user.Id);\n\n            return RedirectToAction(nameof(EnableAuthenticator));\n        }\n\n        [HttpGet]\n        public async Task<IActionResult> GenerateRecoveryCodesWarning()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            if (!user.TwoFactorEnabled)\n            {\n                throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' because they do not have 2FA enabled.\");\n            }\n\n            return View(nameof(GenerateRecoveryCodes));\n        }\n\n        [HttpPost]\n        [ValidateAntiForgeryToken]\n        public async Task<IActionResult> GenerateRecoveryCodes()\n        {\n            var user = await _userManager.GetUserAsync(User);\n            if (user == null)\n            {\n                throw new ApplicationException($\"Unable to load user with ID '{_userManager.GetUserId(User)}'.\");\n            }\n\n            if (!user.TwoFactorEnabled)\n            {\n                throw new ApplicationException($\"Cannot generate recovery codes for user with ID '{user.Id}' as they do not have 2FA enabled.\");\n            }\n\n            var recoveryCodes = await _userManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);\n            _logger.LogInformation(\"User with ID {UserId} has generated new 2FA recovery codes.\", user.Id);\n\n            var model = new ShowRecoveryCodesViewModel { RecoveryCodes = recoveryCodes.ToArray() };\n\n            return View(nameof(ShowRecoveryCodes), model);\n        }\n\n        #region Helpers\n\n        private void AddErrors(IdentityResult result)\n        {\n            foreach (var error in result.Errors)\n            {\n                ModelState.AddModelError(string.Empty, error.Description);\n            }\n        }\n\n        private string FormatKey(string unformattedKey)\n        {\n            var result = new StringBuilder();\n            int currentPosition = 0;\n            while (currentPosition + 4 < unformattedKey.Length)\n            {\n                result.Append(unformattedKey.Substring(currentPosition, 4)).Append(\" \");\n                currentPosition += 4;\n            }\n            if (currentPosition < unformattedKey.Length)\n            {\n                result.Append(unformattedKey.Substring(currentPosition));\n            }\n\n            return result.ToString().ToLowerInvariant();\n        }\n\n        private string GenerateQrCodeUri(string email, string unformattedKey)\n        {\n            return string.Format(\n                AuthenticatorUriFormat,\n                _urlEncoder.Encode(\"src\"),\n                _urlEncoder.Encode(email),\n                unformattedKey);\n        }\n\n        private async Task LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user, EnableAuthenticatorViewModel model)\n        {\n            var unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\n            if (string.IsNullOrEmpty(unformattedKey))\n            {\n                await _userManager.ResetAuthenticatorKeyAsync(user);\n                unformattedKey = await _userManager.GetAuthenticatorKeyAsync(user);\n            }\n\n            model.SharedKey = FormatKey(unformattedKey);\n            model.AuthenticatorUri = GenerateQrCodeUri(user.Email, unformattedKey);\n        }\n\n        #endregion\n    }\n}\n",
        "gt": [
            "'DotnetDesk/src/src/Models/ManageViewModels/ChangePasswordViewModel.cs'",
            "'DotnetDesk/src/src/Controllers/ManageController.cs'",
            "'DotnetDesk/src/src/Extensions/UrlHelperExtensions.cs'"
        ]
    },
    {
        "files": [
            "'HolisticMotionCapture/Packages/HolisticMotionCapture/UniGLTF/Runtime/UniGLTF/IO/MeshIO/MeshUploader.cs'",
            "'HolisticMotionCapture/Assets/Scripts/VisualizeCtrlUI.cs'",
            "'HolisticMotionCapture/Packages/HolisticMotionCapture/VRM/Editor/Format/VRMEditorExporter.cs'"
        ],
        "content": "'HolisticMotionCapture/Packages/HolisticMotionCapture/UniGLTF/Runtime/UniGLTF/IO/MeshIO/MeshUploader.cs'\n:using System;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing UnityEngine;\nusing UnityEngine.Profiling;\nusing UnityEngine.Rendering;\nusing VRMShaders;\n\nnamespace UniGLTF\n{\n    internal static class MeshUploader\n    {\n        private const float FrameWeight = 100.0f;\n\n\n\n\n        public static void UploadMeshVertices(MeshData data, Mesh mesh)\n        {\n            MeshVertexUtility.SetVertexBufferParamsToMesh(mesh, data.Vertices0.Length, data.Vertices2.Length > 0);\n\n            mesh.SetVertexBufferData(data.Vertices0, 0, 0, data.Vertices0.Length);\n            mesh.SetVertexBufferData(data.Vertices1, 0, 0, data.Vertices0.Length, 1);\n            if (data.Vertices2.Length > 0)\n            {\n                mesh.SetVertexBufferData(data.Vertices2, 0, 0, data.Vertices2.Length, 2);\n            }\n        }\n\n\n\n\n\n        private static void UploadMeshIndices(MeshData data, Mesh mesh)\n        {\n            mesh.SetIndexBufferParams(data.Indices.Length, IndexFormat.UInt32);\n            mesh.SetIndexBufferData(data.Indices, 0, 0, data.Indices.Length);\n            mesh.subMeshCount = data.SubMeshes.Count;\n            for (var i = 0; i < data.SubMeshes.Count; i++)\n            {\n                mesh.SetSubMesh(i, data.SubMeshes[i]);\n            }\n        }\n\n        private static async Task BuildBlendShapeAsync(IAwaitCaller awaitCaller, Mesh mesh, BlendShape blendShape,\n            Vector3[] emptyVertices)\n        {\n            Vector3[] positions = null;\n            Vector3[] normals = null;\n            await awaitCaller.Run(() =>\n            {\n                positions = blendShape.Positions.ToArray();\n                if (blendShape.Normals != null)\n                {\n                    normals = blendShape.Normals.ToArray();\n                }\n            });\n\n            Profiler.BeginSample(\"MeshUploader.BuildBlendShapeAsync\");\n            if (blendShape.Positions.Count > 0)\n            {\n                if (blendShape.Positions.Count == mesh.vertexCount)\n                {\n                    mesh.AddBlendShapeFrame(blendShape.Name, FrameWeight,\n                        blendShape.Positions.ToArray(),\n                        normals.Length == mesh.vertexCount && normals.Length == positions.Length ? normals : null,\n                        null\n                    );\n                }\n                else\n                {\n                    Debug.LogWarningFormat(\n                        \"May be partial primitive has blendShape. Require separate mesh or extend blend shape, but not implemented: {0}\",\n                        blendShape.Name);\n                }\n            }\n            else\n            {\n\n\n                mesh.AddBlendShapeFrame(blendShape.Name, FrameWeight,\n                    emptyVertices,\n                    null,\n                    null\n                );\n            }\n\n            Profiler.EndSample();\n        }\n\n        public static async Task<MeshWithMaterials> BuildMeshAndUploadAsync(\n            IAwaitCaller awaitCaller,\n            MeshData data,\n            Func<int, Material> materialFromIndex)\n        {\n\n\n            var mesh = new Mesh\n            {\n                name = data.Name\n            };\n\n            UploadMeshVertices(data, mesh);\n            await awaitCaller.NextFrame();\n\n            UploadMeshIndices(data, mesh);\n            await awaitCaller.NextFrame();\n\n\n            mesh.RecalculateBounds();\n            await awaitCaller.NextFrame();\n\n            if (!data.HasNormal)\n            {\n                mesh.RecalculateNormals();\n                await awaitCaller.NextFrame();\n            }\n\n            mesh.RecalculateTangents();\n            await awaitCaller.NextFrame();\n\n            var result = new MeshWithMaterials\n            {\n                Mesh = mesh,\n                Materials = data.MaterialIndices.Select(materialFromIndex).ToArray(),\n                ShouldSetRendererNodeAsBone  = data.ShouldSetRendererNodeAsBone,\n            };\n            await awaitCaller.NextFrame();\n\n            if (data.BlendShapes.Count > 0)\n            {\n                var emptyVertices = new Vector3[mesh.vertexCount];\n                foreach (var blendShape in data.BlendShapes)\n                {\n                    await BuildBlendShapeAsync(awaitCaller, mesh, blendShape, emptyVertices);\n                }\n            }\n\n            Profiler.BeginSample(\"Mesh.UploadMeshData\");\n            mesh.UploadMeshData(false);\n            Profiler.EndSample();\n\n            return result;\n        }\n    }\n}\n\n'HolisticMotionCapture/Assets/Scripts/VisualizeCtrlUI.cs'\n:using System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing HolisticMotionCapture;\nusing SFB;\nusing VRM;\n#if UNITY_STANDALONE_OSX\nusing Klak.Syphon;\n#endif\n\npublic class VisualizeCtrlUI : MonoBehaviour\n{\n    [SerializeField] Visuallizer visuallizer;\n    [SerializeField] Dropdown vrmSelectDropdown;\n    [SerializeField] Texture defaultTexture;\n    [SerializeField] RawImage backGroundTexture;\n    [SerializeField] Dropdown backTextureSelect;\n    [SerializeField] GameObject captureUI;\n    [SerializeField] Toggle mirrorModeToggle;\n    [SerializeField] Toggle captureToggle;\n    [SerializeField] Dropdown hmcTypeSelect;\n    [SerializeField] Toggle isUpperBodyOnlyToggle;\n    [SerializeField] Toggle lookCameraToggle;\n\n    readonly string loadedVrmsPath = \"/VrmFiles\";\n    string defaultVrmPath;\n    readonly string avatarPlayerPrefsKey = \"SelectedVrmFileName\";\n    readonly string loadedImagePath = \"/LoadedImages\";\n    readonly string defaultTextureName = \"Default\";\n    readonly string backOffName = \"None\";\n    readonly string backImagePlayerPrefsKey = \"SelectedBackgroundImageFileName\";\n\n\n    void Awake()\n    {\n#if UNITY_STANDALONE_WIN\n        var unityCapture = Camera.main.gameObject.AddComponent<UnityCapture>();\n        unityCapture.ResizeMode = UnityCapture.EResizeMode.LinearResize;\n        unityCapture.HideWarnings = true;\n#elif UNITY_STANDALONE_OSX\n        var syphon = Camera.main.gameObject.AddComponent<SyphonServer>();\n        syphon.alphaSupport = true;\n        Destroy(mirrorModeToggle.gameObject);\n#else\n        Destroy(captureUI);\n#endif\n    }\n\n    void Start()\n    {\n        defaultVrmPath = Application.streamingAssetsPath + \"/DefaultSampleAvatar.vrm\";\n        CreateVrmDropdownOptions();\n        CreateImageOptions();\n        CaptureSwitched();\n        CreateHolisticMocapTypeOptions();\n        ChangeIsUpperBodyOnly();\n        ChangeLookCamera();\n\n        var lastOpenVrm = PlayerPrefs.GetString(avatarPlayerPrefsKey);\n        var initVrm = string.IsNullOrEmpty(lastOpenVrm) ? defaultVrmPath : lastOpenVrm;\n        ChangeVrmFromFileName(initVrm);\n        for (int i = 0; i < vrmSelectDropdown.options.Count; i++)\n        {\n            var option = vrmSelectDropdown.options[i];\n            if (option.text == initVrm)\n            {\n                vrmSelectDropdown.value = i;\n                vrmSelectDropdown.RefreshShownValue();\n                break;\n            }\n        }\n\n        var lastOpenbackImage = PlayerPrefs.GetString(backImagePlayerPrefsKey);\n        var initBackImage = string.IsNullOrEmpty(lastOpenbackImage) ? defaultTextureName : lastOpenbackImage;\n        ChangeBackTextureFromFileName(initBackImage);\n        for (int i = 0; i < backTextureSelect.options.Count; i++)\n        {\n            var option = backTextureSelect.options[i];\n            if (option.text == initBackImage)\n            {\n                backTextureSelect.value = i;\n                backTextureSelect.RefreshShownValue();\n                break;\n            }\n        }\n    }\n\n    void OnDestroy()\n    {\n        PlayerPrefs.SetString(avatarPlayerPrefsKey, vrmSelectDropdown.options[vrmSelectDropdown.value].text);\n        PlayerPrefs.SetString(backImagePlayerPrefsKey, backTextureSelect.options[backTextureSelect.value].text);\n    }\n\n    void CreateVrmDropdownOptions()\n    {\n        if (!Directory.Exists(Application.persistentDataPath + loadedVrmsPath))\n        {\n            Directory.CreateDirectory(Application.persistentDataPath + loadedVrmsPath);\n        }\n        var vrmPathes = Directory.GetFiles(Application.persistentDataPath + loadedVrmsPath, \"*.vrm\");\n\n        var vrmSelectOptions = new List<string>();\n        vrmSelectOptions.Add(Path.GetFileNameWithoutExtension(defaultVrmPath));\n        foreach (var path in vrmPathes)\n        {\n            vrmSelectOptions.Add(Path.GetFileNameWithoutExtension(path));\n        }\n        vrmSelectDropdown.ClearOptions();\n        vrmSelectDropdown.AddOptions(vrmSelectOptions);\n    }\n\n    void CreateImageOptions()\n    {\n        if (!Directory.Exists(Application.persistentDataPath + loadedImagePath))\n        {\n            Directory.CreateDirectory(Application.persistentDataPath + loadedImagePath);\n        }\n        var imagePathes = Directory.GetFiles(Application.persistentDataPath + loadedImagePath, \"*.png\");\n\n        var backTextureSelectOptions = new List<string>();\n        backTextureSelectOptions.Add(defaultTextureName);\n        backTextureSelectOptions.Add(backOffName);\n        foreach (var path in imagePathes)\n        {\n            backTextureSelectOptions.Add(Path.GetFileName(path));\n        }\n        backTextureSelect.ClearOptions();\n        backTextureSelect.AddOptions(backTextureSelectOptions);\n    }\n\n    void CreateHolisticMocapTypeOptions()\n    {\n        var holisticMocapTypeList = Enum.GetNames(typeof(HolisticMocapType));\n        var selectOptions = new List<string>();\n        foreach (var type in holisticMocapTypeList)\n        {\n            selectOptions.Add(type);\n        }\n        hmcTypeSelect.ClearOptions();\n        hmcTypeSelect.AddOptions(selectOptions);\n\n        var selectedType = (HolisticMocapType)Enum.ToObject(typeof(HolisticMocapType), hmcTypeSelect.value);\n        visuallizer.SetHolisticMocapType(selectedType);\n        hmcTypeSelect.onValueChanged.AddListener(selectValue =>\n        {\n            var selectedType = (HolisticMocapType)Enum.ToObject(typeof(HolisticMocapType), selectValue);\n            visuallizer.SetHolisticMocapType(selectedType);\n        });\n    }\n\n    public void ChangeIsUpperBodyOnly()\n    {\n        visuallizer.SetIsUpperBodyOnly(isUpperBodyOnlyToggle.isOn);\n    }\n\n    public void ChangeLookCamera()\n    {\n        visuallizer.SetMainCameraLook(lookCameraToggle.isOn);\n    }\n\n    public void ChangeVrmFromDropdownUi()\n    {\n        var filename = vrmSelectDropdown.options[vrmSelectDropdown.value].text;\n        ChangeVrmFromFileName(filename);\n    }\n\n    private async Task ChangeVrmFromFileName(string filename)\n    {\n        var path = Application.persistentDataPath + loadedVrmsPath + \"/\" + filename + \".vrm\";\n        if (filename == Path.GetFileNameWithoutExtension(defaultVrmPath))\n        {\n            path = defaultVrmPath;\n        }\n        await ChangeVrmFromPath(path);\n    }\n\n    private async Task ChangeVrmFromPath(string path)\n    {\n        var instance = await VrmUtility.LoadAsync(path);\n        instance.ShowMeshes();\n        var animator = instance.GetComponent<Animator>();\n        visuallizer.SetAnimator(animator);\n        Camera.main.transform.position = animator.GetBoneTransform(HumanBodyBones.Head).position + Vector3.forward * 0.8f;\n    }\n\n    public void VrmFileLoad()\n    {\n        var extensions = new[]{\n            new ExtensionFilter(\"VRM Files\", \"vrm\")\n        };\n        StandaloneFileBrowser.OpenFilePanelAsync(\"Open File\", \"\", extensions, false, async (pathes) =>\n        {\n            if (pathes.Length <= 0) return;\n            var path = pathes[0];\n\n            if (string.IsNullOrEmpty(path)) return;\n\n            var extension = Path.GetExtension(path).ToLower();\n            if (extension != \".vrm\") return;\n\n            await ChangeVrmFromPath(path);\n\n            var filename = Path.GetFileNameWithoutExtension(path) + \".vrm\";\n            var savePath = Application.persistentDataPath + loadedVrmsPath + \"/\" + filename;\n            File.Copy(path, savePath, true);\n\n            var option = new Dropdown.OptionData();\n            option.text = Path.GetFileNameWithoutExtension(path);\n            vrmSelectDropdown.options.Add(option);\n            vrmSelectDropdown.value = vrmSelectDropdown.options.Count - 1;\n            vrmSelectDropdown.RefreshShownValue();\n        });\n    }\n\n    public void ChangeBackTexture()\n    {\n        var filename = backTextureSelect.options[backTextureSelect.value].text;\n        ChangeBackTextureFromFileName(filename);\n    }\n\n    private void ChangeBackTextureFromFileName(string filename)\n    {\n        if (filename == defaultTexture.name)\n        {\n            backGroundTexture.texture = defaultTexture;\n            return;\n        }\n        if (filename == backOffName)\n        {\n            backGroundTexture.texture = Texture2D.blackTexture;\n            return;\n        }\n\n        byte[] bytes = File.ReadAllBytes(Application.persistentDataPath + loadedImagePath + \"/\" + filename);\n        Texture2D texture = new Texture2D(1, 1);\n        bool isLoadSuccess = texture.LoadImage(bytes);\n        if (!isLoadSuccess) return;\n\n        backGroundTexture.texture = texture;\n    }\n\n    public void NewImageLoad()\n    {\n        var extensions = new[]{\n            new ExtensionFilter(\"Image Files\", \"png\", \"jpg\", \"jpeg\")\n        };\n        StandaloneFileBrowser.OpenFilePanelAsync(\"Open File\", \"\", extensions, false, (pathes) =>\n        {\n            if (pathes.Length <= 0) return;\n            var path = pathes[0];\n\n            if (string.IsNullOrEmpty(path)) return;\n\n            byte[] bytes = File.ReadAllBytes(path);\n            Texture2D texture = new Texture2D(1, 1);\n            bool isLoadSuccess = texture.LoadImage(bytes);\n            if (!isLoadSuccess) return;\n\n            backGroundTexture.texture = texture;\n\n            var filename = Path.GetFileNameWithoutExtension(path) + \".png\";\n            var savePath = Application.persistentDataPath + loadedImagePath + \"/\" + filename;\n            File.WriteAllBytes(savePath, texture.EncodeToPNG());\n\n            var option = new Dropdown.OptionData();\n            option.text = filename;\n            backTextureSelect.options.Add(option);\n            backTextureSelect.value = backTextureSelect.options.Count - 1;\n            backTextureSelect.RefreshShownValue();\n        });\n    }\n\n    public void MirrorModeSwitched()\n    {\n#if UNITY_STANDALONE_WIN\n        var unityCapture = Camera.main.GetComponent<UnityCapture>();\n        unityCapture.MirrorMode = mirrorModeToggle.isOn ? UnityCapture.EMirrorMode.MirrorHorizontally : UnityCapture.EMirrorMode.Disabled;\n#endif\n    }\n\n    public void CaptureSwitched()\n    {\n#if UNITY_STANDALONE_WIN\n        var unityCapture = Camera.main.GetComponent<UnityCapture>();\n        unityCapture.enabled = captureToggle.isOn;\n#elif UNITY_STANDALONE_OSX\n        var syphon = Camera.main.GetComponent<SyphonServer>();\n        syphon.enabled = captureToggle.isOn;\n#endif\n    }\n}\n\n'HolisticMotionCapture/Packages/HolisticMotionCapture/VRM/Editor/Format/VRMEditorExporter.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing UniGLTF;\nusing UniGLTF.MeshUtility;\nusing UniGLTF.Utils;\nusing UnityEngine;\nusing VRMShaders;\n\nnamespace VRM\n{\n    public static class VRMEditorExporter\n    {\n\n\n\n\n\n        public static byte[] Export(GameObject exportRoot, VRMMetaObject meta, VRMExportSettings settings)\n        {\n            List<GameObject> destroy = new List<GameObject>();\n            try\n            {\n                return Export(exportRoot, meta, settings, destroy);\n            }\n            finally\n            {\n                foreach (var x in destroy)\n                {\n                    Debug.LogFormat(\"destroy: {0}\", x.name);\n                    GameObject.DestroyImmediate(x);\n                }\n            }\n        }\n\n        static bool IsPrefab(GameObject go)\n        {\n            return !go.scene.IsValid();\n        }\n\n\n\n\n\n\n        static BlendShapeAvatar CopyBlendShapeAvatar(BlendShapeAvatar src, bool removeUnknown)\n        {\n            var avatar = GameObject.Instantiate(src);\n            avatar.Clips = new List<BlendShapeClip>();\n            foreach (var clip in src.Clips)\n            {\n                if (clip == null)\n                {\n                    continue;\n                }\n\n                if (removeUnknown && clip.Preset == BlendShapePreset.Unknown)\n                {\n                    continue;\n                }\n                avatar.Clips.Add(GameObject.Instantiate(clip));\n            }\n            return avatar;\n        }\n\n\n\n\n\n\n        static void ReplaceMesh(GameObject target, SkinnedMeshRenderer smr, BlendShapeAvatar copyBlendShapeAvatar)\n        {\n            Mesh mesh = smr.sharedMesh;\n            if (mesh == null) return;\n            if (mesh.blendShapeCount == 0) return;\n\n\n            var copyBlendShapeAvatarClips = copyBlendShapeAvatar.Clips.Where(x => x != null).ToArray();\n            var usedBlendshapeIndexArray = copyBlendShapeAvatarClips\n                .SelectMany(clip => clip.Values)\n                .Where(val => target.transform.Find(val.RelativePath) == smr.transform)\n                .Select(val => val.Index)\n                .Distinct()\n                .ToArray();\n\n            var copyMesh = mesh.Copy(copyBlendShape: false);\n\n            foreach (var i in usedBlendshapeIndexArray)\n            {\n                var name = mesh.GetBlendShapeName(i);\n                var vCount = mesh.vertexCount;\n                var vertices = new Vector3[vCount];\n                var normals = new Vector3[vCount];\n                var tangents = new Vector3[vCount];\n                mesh.GetBlendShapeFrameVertices(i, 0, vertices, normals, tangents);\n\n                copyMesh.AddBlendShapeFrame(name, 100f, vertices, normals, tangents);\n            }\n\n\n            var indexMapper = usedBlendshapeIndexArray\n                .Select((x, i) => new { x, i })\n                .ToDictionary(pair => pair.x, pair => pair.i);\n            foreach (var clip in copyBlendShapeAvatarClips)\n            {\n                for (var i = 0; i < clip.Values.Length; ++i)\n                {\n                    var value = clip.Values[i];\n                    if (target.transform.Find(value.RelativePath) != smr.transform) continue;\n                    value.Index = indexMapper[value.Index];\n                    clip.Values[i] = value;\n                }\n            }\n\n\n            smr.sharedMesh = copyMesh;\n        }\n\n        static void ForceUniqueName(Transform transform, Dictionary<string, int> nameCount)\n        {\n            for (int i = 2; i < 5000; ++i)\n            {\n                var sb = new StringBuilder();\n                sb.Append(transform.name);\n                sb.Append('_');\n                sb.Append(i);\n                var newName = sb.ToString();\n                if (!nameCount.ContainsKey(newName))\n                {\n                    Debug.LogWarningFormat(\"force rename {0} => {1}\", transform.name, newName);\n                    transform.name = newName;\n                    nameCount.Add(newName, 1);\n                    return;\n                }\n            }\n            throw new Exception(\"?\");\n        }\n\n\n\n\n\n\n\n        static byte[] Export(GameObject exportRoot, VRMMetaObject meta,\n                    VRMExportSettings settings,\n                    List<GameObject> destroy)\n        {\n            var target = exportRoot;\n\n\n            target = GameObject.Instantiate(target);\n            destroy.Add(target);\n\n            var metaBehaviour = target.GetComponent<VRMMeta>();\n            if (metaBehaviour == null)\n            {\n                metaBehaviour = target.AddComponent<VRMMeta>();\n                metaBehaviour.Meta = meta;\n            }\n            if (metaBehaviour.Meta == null)\n            {\n\n                throw new Exception(\"meta required\");\n            }\n\n            {\n\n                var animator = exportRoot.GetComponent<Animator>();\n                var beforeTransforms = exportRoot.GetComponentsInChildren<Transform>(true);\n\n                var afterTransforms = target.GetComponentsInChildren<Transform>(true);\n\n                var humanTransforms = CachedEnum.GetValues<HumanBodyBones>()\n                    .Where(x => x != HumanBodyBones.LastBone)\n                    .Select(x => animator.GetBoneTransform(x))\n                    .Where(x => x != null)\n                    .Select(x => afterTransforms[Array.IndexOf(beforeTransforms, x)])\n                    .ToArray();\n\n                var nameCount = target.GetComponentsInChildren<Transform>()\n                    .GroupBy(x => x.name)\n                    .ToDictionary(x => x.Key, x => x.Count());\n                foreach (var t in target.GetComponentsInChildren<Transform>())\n                {\n                    if (humanTransforms.Contains(t))\n                    {\n\n                        continue;\n                    }\n\n                    if (nameCount[t.name] > 1)\n                    {\n\n                        ForceUniqueName(t, nameCount);\n                    }\n                }\n            }\n\n\n            if (settings.PoseFreeze)\n            {\n\n                target = VRMBoneNormalizer.Execute(target, settings.ForceTPose);\n                destroy.Add(target);\n            }\n\n            var fp = target.GetComponent<VRMFirstPerson>();\n\n\n            var proxy = target.GetComponent<VRMBlendShapeProxy>();\n            if (proxy != null)\n            {\n                var copyBlendShapeAvatar = CopyBlendShapeAvatar(proxy.BlendShapeAvatar, settings.ReduceBlendshapeClip);\n                proxy.BlendShapeAvatar = copyBlendShapeAvatar;\n\n\n                if (settings.ReduceBlendshape)\n                {\n                    foreach (SkinnedMeshRenderer smr in target.GetComponentsInChildren<SkinnedMeshRenderer>())\n                    {\n\n                        ReplaceMesh(target, smr, copyBlendShapeAvatar);\n                    }\n                }\n            }\n\n\n            var sw = System.Diagnostics.Stopwatch.StartNew();\n            var data = new UniGLTF.ExportingGltfData();\n            var gltfExportSettings = settings.GltfExportSettings;\n            using (var exporter = new VRMExporter(data, gltfExportSettings,\n                settings.KeepAnimation ? new EditorAnimationExporter() : null))\n            {\n                exporter.Prepare(target);\n                exporter.Export(new EditorTextureSerializer());\n            }\n            var bytes = data.ToGlbBytes();\n            Debug.LogFormat(\"Export elapsed {0}\", sw.Elapsed);\n            return bytes;\n        }\n    }\n}\n",
        "gt": [
            "'HolisticMotionCapture/Packages/HolisticMotionCapture/UniGLTF/Runtime/UniGLTF/IO/MeshIO/MeshUploader.cs'",
            "'HolisticMotionCapture/Packages/HolisticMotionCapture/VRM/Editor/Format/VRMEditorExporter.cs'",
            "'HolisticMotionCapture/Assets/Scripts/VisualizeCtrlUI.cs'"
        ]
    },
    {
        "files": [
            "'Osu-Toy/osu.Game.Tests/Visual/Gameplay/TestSceneHUDOverlay.cs'",
            "'Osu-Toy/osu.Game.Tests/Visual/Online/TestSceneCurrentlyPlayingDisplay.cs'",
            "'Osu-Toy/osu.Game/Configuration/OsuConfigManager.cs'",
            "'Osu-Toy/osu.Game/Screens/Select/FilterCriteria.cs'",
            "'Osu-Toy/osu.Game/Screens/Select/Filter/GroupMode.cs'"
        ],
        "content": "'Osu-Toy/osu.Game.Tests/Visual/Gameplay/TestSceneHUDOverlay.cs'\n:\n\n\nusing System;\nusing System.Linq;\nusing NUnit.Framework;\nusing osu.Framework.Allocation;\nusing osu.Framework.Graphics;\nusing osu.Framework.Graphics.Containers;\nusing osu.Framework.Testing;\nusing osu.Game.Configuration;\nusing osu.Game.Rulesets.Mods;\nusing osu.Game.Screens.Play;\nusing osuTK.Input;\n\nnamespace osu.Game.Tests.Visual.Gameplay\n{\n    public class TestSceneHUDOverlay : OsuManualInputManagerTestScene\n    {\n        private HUDOverlay hudOverlay;\n\n\n        private Drawable hideTarget => hudOverlay.KeyCounter;\n        private FillFlowContainer<KeyCounter> keyCounterFlow => hudOverlay.KeyCounter.ChildrenOfType<FillFlowContainer<KeyCounter>>().First();\n\n        [Resolved]\n        private OsuConfigManager config { get; set; }\n\n        [Test]\n        public void TestComboCounterIncrementing()\n        {\n            createNew();\n\n            AddRepeatStep(\"increase combo\", () => { hudOverlay.ComboCounter.Current.Value++; }, 10);\n\n            AddStep(\"reset combo\", () => { hudOverlay.ComboCounter.Current.Value = 0; });\n        }\n\n        [Test]\n        public void TestShownByDefault()\n        {\n            createNew();\n\n            AddAssert(\"showhud is set\", () => hudOverlay.ShowHud.Value);\n\n            AddAssert(\"hidetarget is visible\", () => hideTarget.IsPresent);\n            AddAssert(\"key counter flow is visible\", () => keyCounterFlow.IsPresent);\n            AddAssert(\"pause button is visible\", () => hudOverlay.HoldToQuit.IsPresent);\n        }\n\n        [Test]\n        public void TestFadesInOnLoadComplete()\n        {\n            float? initialAlpha = null;\n\n            createNew(h => h.OnLoadComplete += _ => initialAlpha = hideTarget.Alpha);\n            AddUntilStep(\"wait for load\", () => hudOverlay.IsAlive);\n            AddAssert(\"initial alpha was less than 1\", () => initialAlpha < 1);\n        }\n\n        [Test]\n        public void TestHideExternally()\n        {\n            createNew();\n\n            AddStep(\"set showhud false\", () => hudOverlay.ShowHud.Value = false);\n\n            AddUntilStep(\"hidetarget is hidden\", () => !hideTarget.IsPresent);\n            AddAssert(\"pause button is still visible\", () => hudOverlay.HoldToQuit.IsPresent);\n\n\n            AddAssert(\"key counter flow not affected\", () => keyCounterFlow.IsPresent);\n        }\n\n        [Test]\n        public void TestMomentaryShowHUD()\n        {\n            createNew();\n\n            HUDVisibilityMode originalConfigValue = HUDVisibilityMode.HideDuringGameplay;\n\n            AddStep(\"get original config value\", () => originalConfigValue = config.Get<HUDVisibilityMode>(OsuSetting.HUDVisibilityMode));\n\n            AddStep(\"set hud to never show\", () => config.Set(OsuSetting.HUDVisibilityMode, HUDVisibilityMode.Never));\n\n            AddUntilStep(\"wait for fade\", () => !hideTarget.IsPresent);\n\n            AddStep(\"trigger momentary show\", () => InputManager.PressKey(Key.ControlLeft));\n            AddUntilStep(\"wait for visible\", () => hideTarget.IsPresent);\n\n            AddStep(\"stop trigering\", () => InputManager.ReleaseKey(Key.ControlLeft));\n            AddUntilStep(\"wait for fade\", () => !hideTarget.IsPresent);\n\n            AddStep(\"set original config value\", () => config.Set(OsuSetting.HUDVisibilityMode, originalConfigValue));\n        }\n\n        [Test]\n        public void TestExternalHideDoesntAffectConfig()\n        {\n            HUDVisibilityMode originalConfigValue = HUDVisibilityMode.HideDuringGameplay;\n\n            createNew();\n\n            AddStep(\"get original config value\", () => originalConfigValue = config.Get<HUDVisibilityMode>(OsuSetting.HUDVisibilityMode));\n\n            AddStep(\"set showhud false\", () => hudOverlay.ShowHud.Value = false);\n            AddAssert(\"config unchanged\", () => originalConfigValue == config.Get<HUDVisibilityMode>(OsuSetting.HUDVisibilityMode));\n\n            AddStep(\"set showhud true\", () => hudOverlay.ShowHud.Value = true);\n            AddAssert(\"config unchanged\", () => originalConfigValue == config.Get<HUDVisibilityMode>(OsuSetting.HUDVisibilityMode));\n        }\n\n        [Test]\n        public void TestChangeHUDVisibilityOnHiddenKeyCounter()\n        {\n            bool keyCounterVisibleValue = false;\n\n            createNew();\n            AddStep(\"save keycounter visible value\", () => keyCounterVisibleValue = config.Get<bool>(OsuSetting.KeyOverlay));\n\n            AddStep(\"set keycounter visible false\", () =>\n            {\n                config.Set<bool>(OsuSetting.KeyOverlay, false);\n                hudOverlay.KeyCounter.AlwaysVisible.Value = false;\n            });\n\n            AddStep(\"set showhud false\", () => hudOverlay.ShowHud.Value = false);\n            AddUntilStep(\"hidetarget is hidden\", () => !hideTarget.IsPresent);\n            AddAssert(\"key counters hidden\", () => !keyCounterFlow.IsPresent);\n\n            AddStep(\"set showhud true\", () => hudOverlay.ShowHud.Value = true);\n            AddUntilStep(\"hidetarget is visible\", () => hideTarget.IsPresent);\n            AddAssert(\"key counters still hidden\", () => !keyCounterFlow.IsPresent);\n\n            AddStep(\"return value\", () => config.Set<bool>(OsuSetting.KeyOverlay, keyCounterVisibleValue));\n        }\n\n        private void createNew(Action<HUDOverlay> action = null)\n        {\n            AddStep(\"create overlay\", () =>\n            {\n                hudOverlay = new HUDOverlay(null, null, null, Array.Empty<Mod>());\n\n\n                hudOverlay.KeyCounter.Add(new KeyCounterKeyboard(Key.Space));\n\n                hudOverlay.ComboCounter.Current.Value = 1;\n\n                action?.Invoke(hudOverlay);\n\n                Child = hudOverlay;\n            });\n        }\n    }\n}\n\n'Osu-Toy/osu.Game.Tests/Visual/Online/TestSceneCurrentlyPlayingDisplay.cs'\n:\n\n\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing NUnit.Framework;\nusing osu.Framework.Allocation;\nusing osu.Framework.Graphics;\nusing osu.Framework.Graphics.Containers;\nusing osu.Framework.Testing;\nusing osu.Game.Database;\nusing osu.Game.Online.Spectator;\nusing osu.Game.Overlays.Dashboard;\nusing osu.Game.Tests.Visual.Gameplay;\nusing osu.Game.Users;\n\nnamespace osu.Game.Tests.Visual.Online\n{\n    public class TestSceneCurrentlyPlayingDisplay : OsuTestScene\n    {\n        [Cached(typeof(SpectatorStreamingClient))]\n        private TestSceneSpectator.TestSpectatorStreamingClient testSpectatorStreamingClient = new TestSceneSpectator.TestSpectatorStreamingClient();\n\n        private CurrentlyPlayingDisplay currentlyPlaying;\n\n        [Cached(typeof(UserLookupCache))]\n        private UserLookupCache lookupCache = new TestUserLookupCache();\n\n        private Container nestedContainer;\n\n        [SetUpSteps]\n        public void SetUpSteps()\n        {\n            AddStep(\"add streaming client\", () =>\n            {\n                nestedContainer?.Remove(testSpectatorStreamingClient);\n                Remove(lookupCache);\n\n                Children = new Drawable[]\n                {\n                    lookupCache,\n                    nestedContainer = new Container\n                    {\n                        RelativeSizeAxes = Axes.Both,\n                        Children = new Drawable[]\n                        {\n                            testSpectatorStreamingClient,\n                            currentlyPlaying = new CurrentlyPlayingDisplay\n                            {\n                                RelativeSizeAxes = Axes.Both,\n                            }\n                        }\n                    },\n                };\n            });\n\n            AddStep(\"Reset players\", () => testSpectatorStreamingClient.PlayingUsers.Clear());\n        }\n\n        [Test]\n        public void TestBasicDisplay()\n        {\n            AddStep(\"Add playing user\", () => testSpectatorStreamingClient.PlayingUsers.Add(2));\n            AddUntilStep(\"Panel loaded\", () => currentlyPlaying.ChildrenOfType<UserGridPanel>()?.FirstOrDefault()?.User.Id == 2);\n            AddStep(\"Remove playing user\", () => testSpectatorStreamingClient.PlayingUsers.Remove(2));\n            AddUntilStep(\"Panel no longer present\", () => !currentlyPlaying.ChildrenOfType<UserGridPanel>().Any());\n        }\n\n        internal class TestUserLookupCache : UserLookupCache\n        {\n            protected override Task<User> ComputeValueAsync(int lookup, CancellationToken token = default)\n                => Task.FromResult(new User { Username = \"peppy\", Id = 2 });\n        }\n    }\n}\n\n'Osu-Toy/osu.Game/Configuration/OsuConfigManager.cs'\n:﻿\n\n\nusing System;\nusing System.Diagnostics;\nusing osu.Framework.Bindables;\nusing osu.Framework.Configuration;\nusing osu.Framework.Configuration.Tracking;\nusing osu.Framework.Extensions;\nusing osu.Framework.Platform;\nusing osu.Framework.Testing;\nusing osu.Game.Input;\nusing osu.Game.Input.Bindings;\nusing osu.Game.Overlays;\nusing osu.Game.Rulesets.Scoring;\nusing osu.Game.Screens.Select;\nusing osu.Game.Screens.Select.Filter;\n\nnamespace osu.Game.Configuration\n{\n    [ExcludeFromDynamicCompile]\n    public class OsuConfigManager : IniConfigManager<OsuSetting>\n    {\n        protected override void InitialiseDefaults()\n        {\n\n            Set(OsuSetting.Ruleset, 0, 0, int.MaxValue);\n            Set(OsuSetting.Skin, 0, -1, int.MaxValue);\n\n            Set(OsuSetting.BeatmapDetailTab, PlayBeatmapDetailArea.TabType.Details);\n            Set(OsuSetting.BeatmapDetailModsFilter, false);\n\n            Set(OsuSetting.ShowConvertedBeatmaps, true);\n            Set(OsuSetting.DisplayStarsMinimum, 0.0, 0, 10, 0.1);\n            Set(OsuSetting.DisplayStarsMaximum, 10.1, 0, 10.1, 0.1);\n\n            Set(OsuSetting.SongSelectGroupingMode, GroupMode.All);\n            Set(OsuSetting.SongSelectSortingMode, SortMode.Title);\n\n            Set(OsuSetting.RandomSelectAlgorithm, RandomSelectAlgorithm.RandomPermutation);\n\n            Set(OsuSetting.ChatDisplayHeight, ChatOverlay.DEFAULT_HEIGHT, 0.2f, 1f);\n\n\n            Set(OsuSetting.Username, string.Empty);\n            Set(OsuSetting.Token, string.Empty);\n\n            Set(OsuSetting.AutomaticallyDownloadWhenSpectating, false);\n\n            Set(OsuSetting.SavePassword, false).ValueChanged += enabled =>\n            {\n                if (enabled.NewValue) Set(OsuSetting.SaveUsername, true);\n            };\n\n            Set(OsuSetting.SaveUsername, true).ValueChanged += enabled =>\n            {\n                if (!enabled.NewValue) Set(OsuSetting.SavePassword, false);\n            };\n\n            Set(OsuSetting.ExternalLinkWarning, true);\n            Set(OsuSetting.PreferNoVideo, false);\n\n\n            Set(OsuSetting.VolumeInactive, 0.25, 0, 1, 0.01);\n\n            Set(OsuSetting.MenuVoice, true);\n            Set(OsuSetting.MenuMusic, true);\n\n            Set(OsuSetting.AudioOffset, 0, -500.0, 500.0, 1);\n\n\n            Set(OsuSetting.MenuCursorSize, 1.0f, 0.5f, 2f, 0.01f);\n            Set(OsuSetting.GameplayCursorSize, 1.0f, 0.1f, 2f, 0.01f);\n            Set(OsuSetting.AutoCursorSize, false);\n\n            Set(OsuSetting.MouseDisableButtons, false);\n            Set(OsuSetting.MouseDisableWheel, false);\n            Set(OsuSetting.ConfineMouseMode, OsuConfineMouseMode.DuringGameplay);\n\n\n            Set(OsuSetting.ShowFpsDisplay, false);\n\n            Set(OsuSetting.ShowStoryboard, true);\n            Set(OsuSetting.BeatmapSkins, true);\n            Set(OsuSetting.BeatmapHitsounds, true);\n\n            Set(OsuSetting.CursorRotation, true);\n\n            Set(OsuSetting.MenuParallax, true);\n\n\n            Set(OsuSetting.DimLevel, 0.8, 0, 1, 0.01);\n            Set(OsuSetting.BlurLevel, 0, 0, 1, 0.01);\n            Set(OsuSetting.LightenDuringBreaks, true);\n\n            Set(OsuSetting.HitLighting, true);\n\n            Set(OsuSetting.HUDVisibilityMode, HUDVisibilityMode.Always);\n            Set(OsuSetting.ShowProgressGraph, true);\n            Set(OsuSetting.ShowHealthDisplayWhenCantFail, true);\n            Set(OsuSetting.FadePlayfieldWhenHealthLow, true);\n            Set(OsuSetting.KeyOverlay, false);\n            Set(OsuSetting.PositionalHitSounds, true);\n            Set(OsuSetting.AlwaysPlayFirstComboBreak, true);\n            Set(OsuSetting.ScoreMeter, ScoreMeterType.HitErrorBoth);\n\n            Set(OsuSetting.FloatingComments, false);\n\n            Set(OsuSetting.ScoreDisplayMode, ScoringMode.Standardised);\n\n            Set(OsuSetting.IncreaseFirstObjectVisibility, true);\n            Set(OsuSetting.GameplayDisableWinKey, true);\n\n\n            Set(OsuSetting.ReleaseStream, ReleaseStream.Lazer);\n\n            Set(OsuSetting.Version, string.Empty);\n\n            Set(OsuSetting.ScreenshotFormat, ScreenshotFormat.Jpg);\n            Set(OsuSetting.ScreenshotCaptureMenuCursor, false);\n\n            Set(OsuSetting.SongSelectRightMouseScroll, false);\n\n            Set(OsuSetting.Scaling, ScalingMode.Off);\n\n            Set(OsuSetting.ScalingSizeX, 0.8f, 0.2f, 1f);\n            Set(OsuSetting.ScalingSizeY, 0.8f, 0.2f, 1f);\n\n            Set(OsuSetting.ScalingPositionX, 0.5f, 0f, 1f);\n            Set(OsuSetting.ScalingPositionY, 0.5f, 0f, 1f);\n\n            Set(OsuSetting.UIScale, 1f, 0.8f, 1.6f, 0.01f);\n\n            Set(OsuSetting.UIHoldActivationDelay, 200f, 0f, 500f, 50f);\n\n            Set(OsuSetting.IntroSequence, IntroSequence.Triangles);\n\n            Set(OsuSetting.MenuBackgroundSource, BackgroundSource.Skin);\n            Set(OsuSetting.SeasonalBackgroundMode, SeasonalBackgroundMode.Sometimes);\n\n            Set(OsuSetting.EditorWaveformOpacity, 1f);\n\n\n            Set(OsuSetting.IntifaceAddress, \"ws:\n            Set(OsuSetting.MultiplayerConsentAcknowledged, false);\n        }\n\n        public OsuConfigManager(Storage storage)\n            : base(storage)\n        {\n            Migrate();\n        }\n\n        public void Migrate()\n        {\n\n            var rawVersion = Get<string>(OsuSetting.Version);\n\n            if (rawVersion.Length < 6)\n                return;\n\n            var pieces = rawVersion.Split('.');\n\n\n\n            if (!int.TryParse(pieces[0], out int year)) return;\n            if (!int.TryParse(pieces[1], out int monthDay)) return;\n\n            int combined = (year * 10000) + monthDay;\n\n            if (combined < 20200305)\n            {\n\n\n                var maxStars = (BindableDouble)GetOriginalBindable<double>(OsuSetting.DisplayStarsMaximum);\n\n                if (maxStars.Value == 10)\n                    maxStars.Value = maxStars.MaxValue;\n            }\n        }\n\n        public override TrackedSettings CreateTrackedSettings()\n        {\n\n            Debug.Assert(LookupKeyBindings != null);\n            Debug.Assert(LookupSkinName != null);\n\n            return new TrackedSettings\n            {\n                new TrackedSetting<bool>(OsuSetting.MouseDisableButtons, v => new SettingDescription(!v, \"gameplay mouse buttons\", v ? \"disabled\" : \"enabled\", LookupKeyBindings(GlobalAction.ToggleGameplayMouseButtons))),\n                new TrackedSetting<HUDVisibilityMode>(OsuSetting.HUDVisibilityMode, m => new SettingDescription(m, \"HUD Visibility\", m.GetDescription(), $\"cycle: {LookupKeyBindings(GlobalAction.ToggleInGameInterface)} quick view: {LookupKeyBindings(GlobalAction.HoldForHUD)}\")),\n                new TrackedSetting<ScalingMode>(OsuSetting.Scaling, m => new SettingDescription(m, \"scaling\", m.GetDescription())),\n                new TrackedSetting<int>(OsuSetting.Skin, m =>\n                {\n                    string skinName = LookupSkinName(m) ?? string.Empty;\n                    return new SettingDescription(skinName, \"skin\", skinName, $\"random: {LookupKeyBindings(GlobalAction.RandomSkin)}\");\n                })\n            };\n        }\n\n        public Func<int, string> LookupSkinName { private get; set; }\n\n        public Func<GlobalAction, string> LookupKeyBindings { get; set; }\n    }\n\n    public enum OsuSetting\n    {\n        Ruleset,\n        Token,\n        MenuCursorSize,\n        GameplayCursorSize,\n        AutoCursorSize,\n        DimLevel,\n        BlurLevel,\n        LightenDuringBreaks,\n        ShowStoryboard,\n        KeyOverlay,\n        PositionalHitSounds,\n        AlwaysPlayFirstComboBreak,\n        ScoreMeter,\n        FloatingComments,\n        HUDVisibilityMode,\n        ShowProgressGraph,\n        ShowHealthDisplayWhenCantFail,\n        FadePlayfieldWhenHealthLow,\n        MouseDisableButtons,\n        MouseDisableWheel,\n        ConfineMouseMode,\n        AudioOffset,\n        VolumeInactive,\n        MenuMusic,\n        MenuVoice,\n        CursorRotation,\n        MenuParallax,\n        BeatmapDetailTab,\n        BeatmapDetailModsFilter,\n        Username,\n        ReleaseStream,\n        SavePassword,\n        SaveUsername,\n        DisplayStarsMinimum,\n        DisplayStarsMaximum,\n        SongSelectGroupingMode,\n        SongSelectSortingMode,\n        RandomSelectAlgorithm,\n        ShowFpsDisplay,\n        ChatDisplayHeight,\n        Version,\n        ShowConvertedBeatmaps,\n        Skin,\n        ScreenshotFormat,\n        ScreenshotCaptureMenuCursor,\n        SongSelectRightMouseScroll,\n        BeatmapSkins,\n        BeatmapHitsounds,\n        IncreaseFirstObjectVisibility,\n        ScoreDisplayMode,\n        ExternalLinkWarning,\n        PreferNoVideo,\n        Scaling,\n        ScalingPositionX,\n        ScalingPositionY,\n        ScalingSizeX,\n        ScalingSizeY,\n        UIScale,\n        IntroSequence,\n        UIHoldActivationDelay,\n        HitLighting,\n        MenuBackgroundSource,\n        GameplayDisableWinKey,\n        SeasonalBackgroundMode,\n        EditorWaveformOpacity,\n        AutomaticallyDownloadWhenSpectating,\n\n\n        IntifaceAddress,\n        MultiplayerConsentAcknowledged\n    }\n}\n\n'Osu-Toy/osu.Game/Screens/Select/FilterCriteria.cs'\n:﻿\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing JetBrains.Annotations;\nusing osu.Game.Beatmaps;\nusing osu.Game.Collections;\nusing osu.Game.Rulesets;\nusing osu.Game.Screens.Select.Filter;\n\nnamespace osu.Game.Screens.Select\n{\n    public class FilterCriteria\n    {\n        public GroupMode Group;\n        public SortMode Sort;\n\n        public BeatmapSetInfo SelectedBeatmapSet;\n\n        public OptionalRange<double> StarDifficulty;\n        public OptionalRange<float> ApproachRate;\n        public OptionalRange<float> DrainRate;\n        public OptionalRange<float> CircleSize;\n        public OptionalRange<double> Length;\n        public OptionalRange<double> BPM;\n        public OptionalRange<int> BeatDivisor;\n        public OptionalRange<BeatmapSetOnlineStatus> OnlineStatus;\n        public OptionalTextFilter Creator;\n        public OptionalTextFilter Artist;\n\n        public OptionalRange<double> UserStarDifficulty = new OptionalRange<double>\n        {\n            IsLowerInclusive = true,\n            IsUpperInclusive = true\n        };\n\n        public string[] SearchTerms = Array.Empty<string>();\n\n        public RulesetInfo Ruleset;\n        public bool AllowConvertedBeatmaps;\n\n        private string searchText;\n\n\n\n\n        public int? SearchNumber { get; private set; }\n\n        public string SearchText\n        {\n            get => searchText;\n            set\n            {\n                searchText = value;\n                SearchTerms = searchText.Split(new[] { ',', ' ', '!' }, StringSplitOptions.RemoveEmptyEntries).ToArray();\n\n                SearchNumber = null;\n\n                if (SearchTerms.Length == 1 && int.TryParse(SearchTerms[0], out int parsed))\n                    SearchNumber = parsed;\n            }\n        }\n\n\n\n\n        [CanBeNull]\n        public BeatmapCollection Collection;\n\n        public struct OptionalRange<T> : IEquatable<OptionalRange<T>>\n            where T : struct\n        {\n            public bool HasFilter => Max != null || Min != null;\n\n            public bool IsInRange(T value)\n            {\n                if (Min != null)\n                {\n                    int comparison = Comparer<T>.Default.Compare(value, Min.Value);\n\n                    if (comparison < 0)\n                        return false;\n\n                    if (comparison == 0 && !IsLowerInclusive)\n                        return false;\n                }\n\n                if (Max != null)\n                {\n                    int comparison = Comparer<T>.Default.Compare(value, Max.Value);\n\n                    if (comparison > 0)\n                        return false;\n\n                    if (comparison == 0 && !IsUpperInclusive)\n                        return false;\n                }\n\n                return true;\n            }\n\n            public T? Min;\n            public T? Max;\n            public bool IsLowerInclusive;\n            public bool IsUpperInclusive;\n\n            public bool Equals(OptionalRange<T> other)\n                => EqualityComparer<T?>.Default.Equals(Min, other.Min)\n                   && EqualityComparer<T?>.Default.Equals(Max, other.Max)\n                   && IsLowerInclusive.Equals(other.IsLowerInclusive)\n                   && IsUpperInclusive.Equals(other.IsUpperInclusive);\n        }\n\n        public struct OptionalTextFilter : IEquatable<OptionalTextFilter>\n        {\n            public bool HasFilter => !string.IsNullOrEmpty(SearchTerm);\n\n            public bool Matches(string value)\n            {\n                if (!HasFilter)\n                    return true;\n\n\n                if (string.IsNullOrEmpty(value))\n                    return false;\n\n                return value.Contains(SearchTerm, StringComparison.InvariantCultureIgnoreCase);\n            }\n\n            public string SearchTerm;\n\n            public bool Equals(OptionalTextFilter other) => SearchTerm == other.SearchTerm;\n        }\n    }\n}\n\n'Osu-Toy/osu.Game/Screens/Select/Filter/GroupMode.cs'\n:﻿\n\n\nusing System.ComponentModel;\n\nnamespace osu.Game.Screens.Select.Filter\n{\n    public enum GroupMode\n    {\n        [Description(\"All\")]\n        All,\n\n        [Description(\"Artist\")]\n        Artist,\n\n        [Description(\"Author\")]\n        Author,\n\n        [Description(\"BPM\")]\n        BPM,\n\n        [Description(\"Collections\")]\n        Collections,\n\n        [Description(\"Date Added\")]\n        DateAdded,\n\n        [Description(\"Difficulty\")]\n        Difficulty,\n\n        [Description(\"Favourites\")]\n        Favourites,\n\n        [Description(\"Length\")]\n        Length,\n\n        [Description(\"My Maps\")]\n        MyMaps,\n\n        [Description(\"No Grouping\")]\n        NoGrouping,\n\n        [Description(\"Rank Achieved\")]\n        RankAchieved,\n\n        [Description(\"Ranked Status\")]\n        RankedStatus,\n\n        [Description(\"Recently Played\")]\n        RecentlyPlayed,\n\n        [Description(\"Title\")]\n        Title\n    }\n}\n",
        "gt": [
            "'Osu-Toy/osu.Game/Screens/Select/Filter/GroupMode.cs'",
            "'Osu-Toy/osu.Game/Screens/Select/FilterCriteria.cs'",
            "'Osu-Toy/osu.Game/Configuration/OsuConfigManager.cs'",
            "'Osu-Toy/osu.Game.Tests/Visual/Gameplay/TestSceneHUDOverlay.cs'",
            "'Osu-Toy/osu.Game.Tests/Visual/Online/TestSceneCurrentlyPlayingDisplay.cs'"
        ]
    },
    {
        "files": [
            "'Idle-Miner/Assets/Scripts/IdleMiner/Commands/LoadStaticDataCommand.cs'",
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Notifiers/MessageBroker.cs'",
            "'Idle-Miner/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs'"
        ],
        "content": "'Idle-Miner/Assets/Scripts/IdleMiner/Commands/LoadStaticDataCommand.cs'\n:﻿using System;\nusing System.IO;\nusing Newtonsoft.Json;\nusing PG.Core.Commands;\nusing PG.IdleMiner.Contexts.Startup;\nusing PG.IdleMiner.Misc;\nusing PG.IdleMiner.Models;\nusing PG.IdleMiner.Models.DataModels;\nusing RSG;\nusing UnityEngine;\nusing Zenject;\n\nnamespace PG.IdleMiner.Commands\n{\n    public class LoadStaticDataCommand : BaseCommand\n    {\n        [Inject] private readonly StaticDataModel _staticDataModel;\n\n        public void Execute(LoadStaticDataSignal signal)\n        {\n            var sequence = Promise.Sequence(\n                () => LoadMetaJson(Constants.MetaDataFile)\n\n            );\n\n            sequence\n                .Then(() =>\n                    {\n                        Debug.Log(string.Format(\"{0} , static data load completed!\", this));\n                        signal.Promise.Resolve();\n                    }\n                )\n                .Catch(e =>\n                    {\n                        Debug.LogError(string.Format(\"{0} : failed to load static data, error message = {1}\\n{2}\", this,\n                            e.Message, e.StackTrace));\n                        signal.Promise.Reject(e);\n                    }\n                );\n        }\n\n\n        private IPromise LoadMetaJson(string metaFileName)\n        {\n            Promise promiseReturn = new Promise();\n\n            try\n            {\n                string path = Path.Combine(Application.streamingAssetsPath, metaFileName);\n\n                StreamReader reader = new StreamReader(path);\n                MetaData metaData = JsonConvert.DeserializeObject<MetaData>(reader.ReadToEnd());\n                reader.Close();\n\n                _staticDataModel.SeedMetaData(metaData);\n\n                promiseReturn.Resolve();\n            }\n            catch(Exception ex)\n            {\n                promiseReturn.Reject(ex);\n            }\n\n            return promiseReturn;\n        }\n    }\n}\n'Idle-Miner/Assets/Plugins/UniRx/Scripts/Notifiers/MessageBroker.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing UniRx.InternalUtil;\n\nnamespace UniRx\n{\n    public interface IMessagePublisher\n    {\n\n\n\n        void Publish<T>(T message);\n    }\n\n    public interface IMessageReceiver\n    {\n\n\n\n        IObservable<T> Receive<T>();\n    }\n\n    public interface IMessageBroker : IMessagePublisher, IMessageReceiver\n    {\n    }\n\n    public interface IAsyncMessagePublisher\n    {\n\n\n\n        IObservable<Unit> PublishAsync<T>(T message);\n    }\n\n    public interface IAsyncMessageReceiver\n    {\n\n\n\n        IDisposable Subscribe<T>(Func<T, IObservable<Unit>> asyncMessageReceiver);\n    }\n\n    public interface IAsyncMessageBroker : IAsyncMessagePublisher, IAsyncMessageReceiver\n    {\n    }\n\n\n\n\n    public class MessageBroker : IMessageBroker, IDisposable\n    {\n\n\n\n        public static readonly IMessageBroker Default = new MessageBroker();\n\n        bool isDisposed = false;\n        readonly Dictionary<Type, object> notifiers = new Dictionary<Type, object>();\n\n        public void Publish<T>(T message)\n        {\n            object notifier;\n            lock (notifiers)\n            {\n                if (isDisposed) return;\n\n                if (!notifiers.TryGetValue(typeof(T), out notifier))\n                {\n                    return;\n                }\n            }\n            ((ISubject<T>)notifier).OnNext(message);\n        }\n\n        public IObservable<T> Receive<T>()\n        {\n            object notifier;\n            lock (notifiers)\n            {\n                if (isDisposed) throw new ObjectDisposedException(\"MessageBroker\");\n\n                if (!notifiers.TryGetValue(typeof(T), out notifier))\n                {\n                    ISubject<T> n = new Subject<T>().Synchronize();\n                    notifier = n;\n                    notifiers.Add(typeof(T), notifier);\n                }\n            }\n\n            return ((IObservable<T>)notifier).AsObservable();\n        }\n\n        public void Dispose()\n        {\n            lock (notifiers)\n            {\n                if (!isDisposed)\n                {\n                    isDisposed = true;\n                    notifiers.Clear();\n                }\n            }\n        }\n    }\n\n\n\n\n    public class AsyncMessageBroker : IAsyncMessageBroker, IDisposable\n    {\n\n\n\n        public static readonly IAsyncMessageBroker Default = new AsyncMessageBroker();\n\n        bool isDisposed = false;\n        readonly Dictionary<Type, object> notifiers = new Dictionary<Type, object>();\n\n        public IObservable<Unit> PublishAsync<T>(T message)\n        {\n            UniRx.InternalUtil.ImmutableList<Func<T, IObservable<Unit>>> notifier;\n            lock (notifiers)\n            {\n                if (isDisposed) throw new ObjectDisposedException(\"AsyncMessageBroker\");\n\n                object _notifier;\n                if (notifiers.TryGetValue(typeof(T), out _notifier))\n                {\n                    notifier = (UniRx.InternalUtil.ImmutableList<Func<T, IObservable<Unit>>>)_notifier;\n                }\n                else\n                {\n                    return Observable.ReturnUnit();\n                }\n            }\n\n            var data = notifier.Data;\n            var awaiter = new IObservable<Unit>[data.Length];\n            for (int i = 0; i < data.Length; i++)\n            {\n                awaiter[i] = data[i].Invoke(message);\n            }\n            return Observable.WhenAll(awaiter);\n        }\n\n        public IDisposable Subscribe<T>(Func<T, IObservable<Unit>> asyncMessageReceiver)\n        {\n            lock (notifiers)\n            {\n                if (isDisposed) throw new ObjectDisposedException(\"AsyncMessageBroker\");\n\n                object _notifier;\n                if (!notifiers.TryGetValue(typeof(T), out _notifier))\n                {\n                    var notifier = UniRx.InternalUtil.ImmutableList<Func<T, IObservable<Unit>>>.Empty;\n                    notifier = notifier.Add(asyncMessageReceiver);\n                    notifiers.Add(typeof(T), notifier);\n                }\n                else\n                {\n                    var notifier = (ImmutableList<Func<T, IObservable<Unit>>>)_notifier;\n                    notifier = notifier.Add(asyncMessageReceiver);\n                    notifiers[typeof(T)] = notifier;\n                }\n            }\n\n            return new Subscription<T>(this, asyncMessageReceiver);\n        }\n\n        public void Dispose()\n        {\n            lock (notifiers)\n            {\n                if (!isDisposed)\n                {\n                    isDisposed = true;\n                    notifiers.Clear();\n                }\n            }\n        }\n\n        class Subscription<T> : IDisposable\n        {\n            readonly AsyncMessageBroker parent;\n            readonly Func<T, IObservable<Unit>> asyncMessageReceiver;\n\n            public Subscription(AsyncMessageBroker parent, Func<T, IObservable<Unit>> asyncMessageReceiver)\n            {\n                this.parent = parent;\n                this.asyncMessageReceiver = asyncMessageReceiver;\n            }\n\n            public void Dispose()\n            {\n                lock (parent.notifiers)\n                {\n                    object _notifier;\n                    if (parent.notifiers.TryGetValue(typeof(T), out _notifier))\n                    {\n                        var notifier = (ImmutableList<Func<T, IObservable<Unit>>>)_notifier;\n                        notifier = notifier.Remove(asyncMessageReceiver);\n\n                        parent.notifiers[typeof(T)] = notifier;\n                    }\n                }\n            }\n        }\n    }\n}\n'Idle-Miner/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing ModestTree;\n#if ZEN_SIGNALS_ADD_UNIRX\nusing UniRx;\n#endif\n\nnamespace Zenject\n{\n    public class SignalBus : ILateDisposable\n    {\n        readonly SignalSubscription.Pool _subscriptionPool;\n        readonly Dictionary<BindingId, SignalDeclaration> _localDeclarationMap = new Dictionary<BindingId, SignalDeclaration>();\n        readonly SignalBus _parentBus;\n        readonly Dictionary<SignalSubscriptionId, SignalSubscription> _subscriptionMap = new Dictionary<SignalSubscriptionId, SignalSubscription>();\n        readonly ZenjectSettings.SignalSettings _settings;\n        readonly SignalDeclaration.Factory _signalDeclarationFactory;\n        readonly DiContainer _container;\n\n        public SignalBus(\n            [Inject(Source = InjectSources.Local)]\n            List<SignalDeclaration> signalDeclarations,\n            [Inject(Source = InjectSources.Parent, Optional = true)]\n            SignalBus parentBus,\n            [InjectOptional]\n            ZenjectSettings zenjectSettings,\n            SignalSubscription.Pool subscriptionPool,\n            SignalDeclaration.Factory signalDeclarationFactory,\n            DiContainer container)\n        {\n            _subscriptionPool = subscriptionPool;\n            zenjectSettings = zenjectSettings ?? ZenjectSettings.Default;\n            _settings = zenjectSettings.Signals ?? ZenjectSettings.SignalSettings.Default;\n            _signalDeclarationFactory = signalDeclarationFactory;\n            _container = container;\n\n           signalDeclarations.ForEach(x =>\n\t\t\t{\n\t\t\t\tif (!_localDeclarationMap.ContainsKey(x.BindingId))\n\t\t\t\t{\n\t\t\t\t\t_localDeclarationMap.Add(x.BindingId, x);\n\t\t\t\t}\n\t\t\t\telse _localDeclarationMap[x.BindingId].Subscriptions.AllocFreeAddRange(x.Subscriptions);\n\t\t\t});\n            _parentBus = parentBus;\n        }\n\n        public SignalBus ParentBus\n        {\n            get { return _parentBus; }\n        }\n\n        public int NumSubscribers\n        {\n            get { return _subscriptionMap.Count; }\n        }\n\n\n\n        public void AbstractFire<TSignal>() where TSignal : new() => AbstractFire(new TSignal());\n\t\tpublic void AbstractFire<TSignal>(TSignal signal) => AbstractFireId(null, signal);\n\t\tpublic void AbstractFireId<TSignal>(object identifier, TSignal signal)\n\t\t{\n\n\t\t\tType signalType = typeof(TSignal);\n            InternalFire(signalType, signal, identifier, true);\n\n            Type[] interfaces = signalType.GetInterfaces();\n            int numOfInterfaces = interfaces.Length;\n            for (int i = 0; i < numOfInterfaces; i++)\n            {\n                InternalFire(interfaces[i], signal, identifier, true);\n            }\n\t\t}\n\n        public void LateDispose()\n        {\n            if (_settings.RequireStrictUnsubscribe)\n            {\n                if (!_subscriptionMap.IsEmpty())\n                {\n                    throw Assert.CreateException(\n                        \"Found subscriptions for signals '{0}' in SignalBus.LateDispose!  Either add the explicit Unsubscribe or set SignalSettings.AutoUnsubscribeInDispose to true\",\n                        _subscriptionMap.Values.Select(x => x.SignalId.ToString()).Join(\", \"));\n                }\n            }\n            else\n            {\n                foreach (var subscription in _subscriptionMap.Values)\n                {\n                    subscription.Dispose();\n                }\n            }\n\n            foreach (var declaration in _localDeclarationMap.Values)\n            {\n                declaration.Dispose();\n            }\n        }\n\n        public void FireId<TSignal>(object identifier, TSignal signal)\n        {\n            InternalFire(typeof(TSignal), signal, identifier, true);\n        }\n\n        public void Fire<TSignal>(TSignal signal)\n        {\n            FireId<TSignal>(null, signal);\n        }\n\n        public void FireId<TSignal>(object identifier)\n        {\n            InternalFire(typeof(TSignal), null, identifier, true);\n        }\n\n        public void Fire<TSignal>()\n        {\n            FireId<TSignal>(null);\n        }\n\n        public void FireId(object identifier, object signal)\n        {\n            InternalFire(signal.GetType(), signal, identifier, true);\n        }\n\n        public void Fire(object signal)\n        {\n            FireId(null, signal);\n        }\n\n        public bool IsSignalDeclared<TSignal>()\n        {\n            return IsSignalDeclared(typeof(TSignal), null);\n        }\n\n        public bool IsSignalDeclared<TSignal>(object identifier)\n        {\n            return IsSignalDeclared(typeof(TSignal), identifier);\n        }\n\n        public bool IsSignalDeclared(Type signalType)\n        {\n            return IsSignalDeclared(signalType, null);\n        }\n\n        public bool IsSignalDeclared(Type signalType, object identifier)\n        {\n            var signalId = new BindingId(signalType, identifier);\n            return GetDeclaration(signalId) != null;\n        }\n\n        public void TryFireId<TSignal>(object identifier, TSignal signal)\n        {\n            InternalFire(typeof(TSignal), signal, identifier, false);\n        }\n\n        public void TryFire<TSignal>(TSignal signal)\n        {\n            TryFireId<TSignal>(null, signal);\n        }\n\n        public void TryFireId<TSignal>(object identifier)\n        {\n            InternalFire(typeof(TSignal), null, identifier, false);\n        }\n\n        public void TryFire<TSignal>()\n        {\n            TryFireId<TSignal>(null);\n        }\n\n        public void TryFireId(object identifier, object signal)\n        {\n            InternalFire(signal.GetType(), signal, identifier, false);\n        }\n\n        public void TryFire(object signal)\n        {\n            TryFireId(null, signal);\n        }\n\n        private void InternalFire(Type signalType, object signal, object identifier, bool requireDeclaration)\n        {\n            var signalId = new BindingId(signalType, identifier);\n\n\n            var declaration = GetDeclaration(signalId);\n\n            if (declaration == null)\n            {\n                if (requireDeclaration)\n                {\n                    throw Assert.CreateException(\"Fired undeclared signal '{0}'!\", signalId);\n                }\n            }\n            else\n            {\n                if (signal == null)\n                {\n                    signal = Activator.CreateInstance(signalType);\n                }\n\n                declaration.Fire(signal);\n            }\n        }\n\n#if ZEN_SIGNALS_ADD_UNIRX\n        public IObservable<TSignal> GetStreamId<TSignal>(object identifier)\n        {\n            return GetStreamId(typeof(TSignal), identifier).Select(x => (TSignal)x);\n        }\n\n        public IObservable<TSignal> GetStream<TSignal>()\n        {\n            return GetStreamId<TSignal>(null);\n        }\n\n        public IObservable<object> GetStreamId(Type signalType, object identifier)\n        {\n            return GetDeclaration(new BindingId(signalType, identifier)).Stream;\n        }\n\n        public IObservable<object> GetStream(Type signalType)\n        {\n            return GetStreamId(signalType, null);\n        }\n#endif\n\n        public void SubscribeId<TSignal>(object identifier, Action callback)\n        {\n            Action<object> wrapperCallback = args => callback();\n            SubscribeInternal(typeof(TSignal), identifier, callback, wrapperCallback);\n        }\n\n        public void Subscribe<TSignal>(Action callback)\n        {\n            SubscribeId<TSignal>(null, callback);\n        }\n\n        public void SubscribeId<TSignal>(object identifier, Action<TSignal> callback)\n        {\n            Action<object> wrapperCallback = args => callback((TSignal)args);\n            SubscribeInternal(typeof(TSignal), identifier, callback, wrapperCallback);\n        }\n\n        public void Subscribe<TSignal>(Action<TSignal> callback)\n        {\n            SubscribeId<TSignal>(null, callback);\n        }\n\n        public void SubscribeId(Type signalType, object identifier, Action<object> callback)\n        {\n            SubscribeInternal(signalType, identifier, callback, callback);\n        }\n\n        public void Subscribe(Type signalType, Action<object> callback)\n        {\n            SubscribeId(signalType, null, callback);\n        }\n\n        public void UnsubscribeId<TSignal>(object identifier, Action callback)\n        {\n            UnsubscribeId(typeof(TSignal), identifier, callback);\n        }\n\n        public void Unsubscribe<TSignal>(Action callback)\n        {\n            UnsubscribeId<TSignal>(null, callback);\n        }\n\n        public void UnsubscribeId(Type signalType, object identifier, Action callback)\n        {\n            UnsubscribeInternal(signalType, identifier, callback, true);\n        }\n\n        public void Unsubscribe(Type signalType, Action callback)\n        {\n            UnsubscribeId(signalType, null, callback);\n        }\n\n        public void UnsubscribeId(Type signalType, object identifier, Action<object> callback)\n        {\n            UnsubscribeInternal(signalType, identifier, callback, true);\n        }\n\n        public void Unsubscribe(Type signalType, Action<object> callback)\n        {\n            UnsubscribeId(signalType, null, callback);\n        }\n\n        public void UnsubscribeId<TSignal>(object identifier, Action<TSignal> callback)\n        {\n            UnsubscribeInternal(typeof(TSignal), identifier, callback, true);\n        }\n\n        public void Unsubscribe<TSignal>(Action<TSignal> callback)\n        {\n            UnsubscribeId<TSignal>(null, callback);\n        }\n\n        public void TryUnsubscribeId<TSignal>(object identifier, Action callback)\n        {\n            UnsubscribeInternal(typeof(TSignal), identifier, callback, false);\n        }\n\n        public void TryUnsubscribe<TSignal>(Action callback)\n        {\n            TryUnsubscribeId<TSignal>(null, callback);\n        }\n\n        public void TryUnsubscribeId(Type signalType, object identifier, Action callback)\n        {\n            UnsubscribeInternal(signalType, identifier, callback, false);\n        }\n\n        public void TryUnsubscribe(Type signalType, Action callback)\n        {\n            TryUnsubscribeId(signalType, null, callback);\n        }\n\n        public void TryUnsubscribeId(Type signalType, object identifier, Action<object> callback)\n        {\n            UnsubscribeInternal(signalType, identifier, callback, false);\n        }\n\n        public void TryUnsubscribe(Type signalType, Action<object> callback)\n        {\n            TryUnsubscribeId(signalType, null, callback);\n        }\n\n        public void TryUnsubscribeId<TSignal>(object identifier, Action<TSignal> callback)\n        {\n            UnsubscribeInternal(typeof(TSignal), identifier, callback, false);\n        }\n\n        public void TryUnsubscribe<TSignal>(Action<TSignal> callback)\n        {\n            TryUnsubscribeId<TSignal>(null, callback);\n        }\n\n        void UnsubscribeInternal(Type signalType, object identifier, object token, bool throwIfMissing)\n        {\n            UnsubscribeInternal(new BindingId(signalType, identifier), token, throwIfMissing);\n        }\n\n        void UnsubscribeInternal(BindingId signalId, object token, bool throwIfMissing)\n        {\n            UnsubscribeInternal(\n                new SignalSubscriptionId(signalId, token), throwIfMissing);\n        }\n\n        void UnsubscribeInternal(SignalSubscriptionId id, bool throwIfMissing)\n        {\n            SignalSubscription subscription;\n\n            if (_subscriptionMap.TryGetValue(id, out subscription))\n            {\n                _subscriptionMap.RemoveWithConfirm(id);\n                subscription.Dispose();\n            }\n            else\n            {\n                if (throwIfMissing)\n                {\n                    throw Assert.CreateException(\n                        \"Called unsubscribe for signal '{0}' but could not find corresponding subscribe.  If this is intentional, call TryUnsubscribe instead.\");\n                }\n            }\n        }\n\n        void SubscribeInternal(Type signalType, object identifier, object token, Action<object> callback)\n        {\n            SubscribeInternal(new BindingId(signalType, identifier), token, callback);\n        }\n\n        void SubscribeInternal(BindingId signalId, object token, Action<object> callback)\n        {\n            SubscribeInternal(\n                new SignalSubscriptionId(signalId, token), callback);\n        }\n\n        void SubscribeInternal(SignalSubscriptionId id, Action<object> callback)\n        {\n            Assert.That(!_subscriptionMap.ContainsKey(id),\n                \"Tried subscribing to the same signal with the same callback on Zenject.SignalBus\");\n\n            var declaration = GetDeclaration(id.SignalId);\n\n            if (declaration == null)\n            {\n                throw Assert.CreateException(\"Tried subscribing to undeclared signal '{0}'!\", id.SignalId);\n            }\n\n            var subscription = _subscriptionPool.Spawn(callback, declaration);\n\n            _subscriptionMap.Add(id, subscription);\n        }\n\n        public void DeclareSignal<T>(\n            object identifier = null, SignalMissingHandlerResponses? missingHandlerResponse = null, bool? forceAsync = null, int? asyncTickPriority = null)\n        {\n            DeclareSignal(typeof(T), identifier, missingHandlerResponse, forceAsync, asyncTickPriority);\n        }\n\n        public void DeclareSignal(\n            Type signalType, object identifier = null, SignalMissingHandlerResponses? missingHandlerResponse = null, bool? forceAsync = null, int? asyncTickPriority = null)\n        {\n            var bindInfo = SignalExtensions.CreateDefaultSignalDeclarationBindInfo(_container, signalType);\n\n            bindInfo.Identifier = identifier;\n\n            if (missingHandlerResponse.HasValue)\n            {\n                bindInfo.Identifier = missingHandlerResponse.Value;\n            }\n\n            if (forceAsync.HasValue)\n            {\n                bindInfo.RunAsync = forceAsync.Value;\n            }\n\n            if (asyncTickPriority.HasValue)\n            {\n                bindInfo.TickPriority = asyncTickPriority.Value;\n            }\n\n            var declaration = _signalDeclarationFactory.Create(bindInfo);\n\n            _localDeclarationMap.Add(declaration.BindingId, declaration);\n        }\n\n        SignalDeclaration GetDeclaration(BindingId signalId)\n        {\n            SignalDeclaration handler;\n\n            if (_localDeclarationMap.TryGetValue(signalId, out handler))\n            {\n                return handler;\n            }\n\n            if (_parentBus != null)\n            {\n                return _parentBus.GetDeclaration(signalId);\n            }\n\n            return null;\n        }\n    }\n}\n",
        "gt": [
            "'Idle-Miner/Assets/Plugins/UniRx/Scripts/Notifiers/MessageBroker.cs'",
            "'Idle-Miner/Assets/Plugins/Zenject/OptionalExtras/Signals/Main/SignalBus.cs'",
            "'Idle-Miner/Assets/Scripts/IdleMiner/Commands/LoadStaticDataCommand.cs'"
        ]
    },
    {
        "files": [
            "'WarFactory/WarFactory/App.xaml.cs'",
            "'WarFactory/WarFactory/ViewPage/LsbTankPage.xaml.cs'",
            "'WarFactory/WarFactory/FactoryFunc/LsbTank.cs'"
        ],
        "content": "'WarFactory/WarFactory/App.xaml.cs'\n:﻿using System;\nusing Xamarin.Forms;\nusing WarFactory.MyInterface;\nusing WarFactory.ViewPage;\nusing System.IO;\nusing Xamarin.Essentials;\n\nnamespace WarFactory\n{\n    public partial class App : Application\n    {\n        public App()\n        {\n            InitializeComponent();\n\n\n            string fileName = Path.Combine(FileSystem.AppDataDirectory, \"LastOpenedTimeStamp.txt\");\n            if (File.Exists(fileName))\n            {\n                DateTime LastOpenedTime = DateTime.Parse(File.ReadAllText(fileName));\n                File.WriteAllText(fileName, DateTime.UtcNow.ToString());\n                LsbTankPage.LastOpenedTime = LastOpenedTime;\n            }\n            else\n            {\n                File.WriteAllText(fileName, DateTime.UtcNow.ToString());\n                LsbTankPage.LastOpenedTime = DateTime.UtcNow;\n            }\n\n            MainPage = new NavigationPage(new MainPage());\n        }\n\n        protected override async void OnStart()\n        {\n            await DependencyService.Get<IPlatformService>().RequestPermissions();\n        }\n\n        protected override void OnSleep()\n        {\n            LsbTankPage.IsBackstage = true;\n        }\n\n        protected override void OnResume()\n        {\n            LsbTankPage.IsBackstage = false;\n        }\n    }\n}\n\n'WarFactory/WarFactory/ViewPage/LsbTankPage.xaml.cs'\n:﻿using System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing Xamarin.Forms;\nusing Xamarin.Forms.Xaml;\nusing Xamarin.Essentials;\nusing WarFactory.FactoryFunc;\nusing WarFactory.MyInterface;\nusing MimeMapping;\n\nnamespace WarFactory.ViewPage\n{\n    public struct SInsideFile\n    {\n        public SInsideFile(string name, MemoryStream file)\n        {\n            Name = name;\n            File = file;\n        }\n\n        public string Name;\n        public MemoryStream File;\n    }\n\n    [XamlCompilation(XamlCompilationOptions.Compile)]\n    public partial class LsbTankPage : ContentPage\n    {\n        static private int compression = 4;\n        static private bool compatibleMode;\n        static private string info = \"TK\";\n        static private bool captureMode = false;\n        static private bool isBackstage = false;\n        static private DateTime lastOpenedTime = DateTime.MaxValue;\n\n        static public int Compression { get { return compression; } set { compression = value; } }\n        static public bool CompatibleMode { get { return compatibleMode; } set { compatibleMode = value; } }\n        static public string Info { get { return info; } set { info = value; } }\n        static public bool CaptureMode { get { return captureMode; } set { captureMode = value; } }\n        static public bool IsBackstage { get { return isBackstage; } set { isBackstage = value; } }\n        static public DateTime LastOpenedTime { get { return lastOpenedTime; } set { lastOpenedTime = value; } }\n\n        private List<FileResult> photoFile1 = new List<FileResult>();\n        private List<FileResult> photoFile2 = new List<FileResult>();\n        private List<FileResult> photoFile3 = new List<FileResult>();\n        List<SInsideFile> insideFile = new List<SInsideFile>();\n\n        public LsbTankPage()\n        {\n            InitializeComponent();\n            BackgroundColor = Color.AliceBlue;\n\n            compression = 4;\n            compatibleMode = false;\n            info = \"TK\";\n            captureMode = false;\n            if (DeviceInfo.Platform == DevicePlatform.iOS)\n            {\n                LabelTips1.Text = \"点击\";\n                LabelTips2.Text = \"点击\";\n                LabelTips3.Text = \"点击(原图保存)\";\n                compatibleMode = true;\n            }\n        }\n\n        private async void Image1_Clicked(object sender, EventArgs e)\n        {\n            if (compatibleMode)\n            {\n                photoFile1.Clear();\n                FileResult file = await MediaPicker.PickPhotoAsync();\n                if (file == null)\n                {\n                    Image1.Source = null;\n                    return;\n                }\n                else\n                {\n                    photoFile1.Add(file);\n                    Image1.Source = photoFile1[0].FullPath;\n                }\n            }\n            else\n            {\n                photoFile1.Clear();\n                IEnumerable<FileResult> files = await FilePicker.PickMultipleAsync(PickOptions.Images);\n                if (files == null)\n                {\n                    Image1.Source = null;\n                    return;\n                }\n\n                foreach (FileResult file in files)\n                    photoFile1.Add(file);\n                photoFile1.Reverse();\n                if (photoFile1.Count == 1)\n                    Image1.Source = photoFile1[0].FullPath;\n                else\n                    Image1.Source = ImageSource.FromResource(\"WarFactory.Resources.Images.png\");\n            }\n\n            LabelTips1.Text = \"\";\n        }\n\n        private async void Image2_Clicked(object sender, EventArgs e)\n        {\n            if (compatibleMode)\n            {\n                photoFile2.Clear();\n                FileResult file = await MediaPicker.PickPhotoAsync();\n                if (file == null)\n                {\n                    Image2.Source = null;\n                    return;\n                }\n                else\n                {\n                    photoFile2.Add(file);\n                    Image2.Source = photoFile2[0].FullPath;\n                }\n            }\n            else\n            {\n                photoFile2.Clear();\n                IEnumerable<FileResult> files = await FilePicker.PickMultipleAsync();\n                if (files == null)\n                {\n                    Image2.Source = null;\n                    return;\n                }\n\n                foreach (FileResult file in files)\n                    photoFile2.Add(file);\n                photoFile2.Reverse();\n                if (photoFile2.Count == 1)\n                {\n                    string extension = photoFile2[0].FileName.Substring(photoFile2[0].FileName.LastIndexOf(\".\") + 1).ToLower();\n                    if (extension == \"png\" || extension == \"jpg\" || extension == \"jpeg\" || extension == \"bmp\" || extension == \"gif\")\n                        Image2.Source = photoFile2[0].FullPath;\n                    else\n                        Image2.Source = ImageSource.FromResource(\"WarFactory.Resources.File.png\");\n                }\n                else\n                    Image2.Source = ImageSource.FromResource(\"WarFactory.Resources.Images.png\");\n            }\n\n            LabelTips2.Text = \"\";\n        }\n\n        private async void Image3_Clicked(object sender, EventArgs e)\n        {\n            if (compatibleMode)\n            {\n                photoFile3.Clear();\n                FileResult file = await MediaPicker.PickPhotoAsync();\n                if (file == null)\n                {\n                    Image3.Source = null;\n                    return;\n                }\n                else\n                {\n                    photoFile3.Add(file);\n                    Image3.Source = photoFile3[0].FullPath;\n                }\n            }\n            else\n            {\n                photoFile3.Clear();\n                IEnumerable<FileResult> files = await FilePicker.PickMultipleAsync(PickOptions.Images);\n                if (files == null)\n                {\n                    Image3.Source = null;\n                    return;\n                }\n\n                foreach (FileResult file in files)\n                    photoFile3.Add(file);\n                photoFile3.Reverse();\n                if (photoFile3.Count == 1)\n                    Image3.Source = photoFile3[0].FullPath;\n                else\n                    Image3.Source = ImageSource.FromResource(\"WarFactory.Resources.Images.png\");\n            }\n\n            LabelTips3.Text = \"\";\n        }\n\n        private async void Image4_Clicked(object sender, EventArgs e)\n        {\n            if (insideFile.Count == 1)\n            {\n                string extension = (insideFile[0].Name == null) ? \"png\" : insideFile[0].Name.Substring(insideFile[0].Name.LastIndexOf(\".\") + 1).ToLower();\n                if (extension == \"png\" || extension == \"jpg\" || extension == \"jpeg\" || extension == \"bmp\")\n                    await Navigation.PushAsync(new ImagePage(insideFile[0].File));\n                else\n                {\n                    string fileName = Path.Combine(DependencyService.Get<IPlatformService>().GetAbsoluteSavePath(), insideFile[0].Name);\n                    if (File.Exists(fileName) == false)\n                        await DisplayAlert(\"警告\", \"这个文件需要先保存才能打开！\", \"确认\");\n                    else\n                        await Launcher.OpenAsync(new OpenFileRequest { File = new ReadOnlyFile(fileName) });\n                }\n            }\n            else if (insideFile.Count > 1)\n            {\n                await Navigation.PushAsync(new ImageListPage(insideFile));\n            }\n        }\n\n        private async void Button_Clicked_1(object sender, EventArgs e)\n        {\n            if (photoFile1 == null ||\n                photoFile2 == null ||\n                photoFile1.Count == 0 ||\n                photoFile2.Count == 0)\n            {\n                await DisplayAlert(\"警告\", \"缺少图片！\", \"确认\");\n                return;\n            }\n            foreach (FileResult pf1 in photoFile1)\n            {\n                foreach (FileResult pf2 in photoFile2)\n                {\n                    if (pf1.FullPath == pf2.FullPath)\n                    {\n                        await DisplayAlert(\"警告\", \"里图不能与表图重复！\", \"确认\");\n                        return;\n                    }\n                }\n            }\n\n            foreach (SInsideFile insFile in insideFile)\n                insFile.File.Dispose();\n            insideFile.Clear();\n            LabelFileName.Text = \"\";\n            Image4.Source = null;\n\n            ActivityIndicator1.IsRunning = true;\n            Button1.IsEnabled = false;\n            Button2.IsEnabled = false;\n\n            if(compression >= 6)\n                await DisplayAlert(\"警告\", \"支持压缩度大于等于6的无影坦克的网站很少，很有可能只有本APP能够现形，并且十分不稳定，请酌情考虑是否保存！\", \"确认\");\n\n            string fileName = \"Tank_\" + DateTime.Now.ToLocalTime().ToString(\"yyyyMMdd_HHmmss\");\n            int photoIndex = 0;\n            if ((string.IsNullOrEmpty(info) || string.IsNullOrWhiteSpace(info)) && photoFile2.Count == 1)\n                info = \"TK\";\n            await Task.Run(() =>\n            {\n                foreach (FileResult fr in photoFile2)\n                {\n                    photoIndex++;\n                    MemoryStream tempStream = LsbTank.Encode(new FileStream(photoFile1[photoIndex % photoFile1.Count].FullPath, FileMode.Open),\n                                                             new FileStream(fr.FullPath, FileMode.Open),\n                                                             info + (photoFile2.Count == 1 ? \"\" : photoIndex.ToString()),\n                                                             compression);\n                    if (tempStream != null)\n                    {\n                        insideFile.Add(new SInsideFile(fileName + \"_\" + photoIndex.ToString() + \".png\", tempStream));\n                        tempStream.Dispose();\n                    }\n                }\n            });\n\n            LabelTips4.Text = \"\";\n            if (insideFile.Count == 1)\n            {\n                Image4.Source = ImageSource.FromStream(() => new MemoryStream(insideFile[0].File.ToArray()));\n                LabelFileName.Text = \"成功生成！发送时记得原图发送并且关闭水印！\";\n            }\n            else\n            {\n                Image4.Source = ImageSource.FromResource(\"WarFactory.Resources.Images.png\");\n                LabelFileName.Text = \"成功生成\" + insideFile.Count.ToString() + \"个文件，点击进入查看列表\";\n            }\n\n            if(DeviceInfo.Platform == DevicePlatform.iOS)\n                await DisplayAlert(\"警告\", \"iOS设备似乎即使发送原图也会被压缩，这也就注定了iOS发出去的坦克图全是锤子，因此请谨慎发图！\", \"确认\");\n\n            Button1.IsEnabled = true;\n            Button2.IsEnabled = true;\n            ActivityIndicator1.IsRunning = false;\n        }\n\n        private async void Button_Clicked_2(object sender, EventArgs e)\n        {\n            if (photoFile3.Count == 0)\n            {\n                await DisplayAlert(\"警告\", \"请选择要现形的图片！\", \"确认\");\n                return;\n            }\n\n            List<FileStream> photo3Stream = new List<FileStream>();\n            try\n            {\n                foreach (FileResult file in photoFile3)\n                    photo3Stream.Add(new FileStream(file.FullPath, FileMode.Open));\n            }\n            catch (UnauthorizedAccessException)\n            {\n                await DisplayAlert(\"警告\", \"权限异常！\", \"确认\");\n                photo3Stream.Clear();\n                return;\n            }\n            catch (FileNotFoundException)\n            {\n                await DisplayAlert(\"警告\", \"文件不存在！\", \"确认\");\n                photo3Stream.Clear();\n                return;\n            }\n\n            foreach (SInsideFile insFile in insideFile)\n                insFile.File.Dispose();\n            insideFile.Clear();\n            Image4.Source = null;\n\n            ActivityIndicator1.IsRunning = true;\n            Button1.IsEnabled = false;\n            Button2.IsEnabled = false;\n\n            await Task.Run(() =>\n            {\n                foreach (FileStream fs in photo3Stream)\n                {\n                    MemoryStream tempStream = LsbTank.Decode(fs, out string tempName);\n                    if (tempStream != null)\n                    {\n                        insideFile.Add(new SInsideFile(tempName, tempStream));\n                        tempStream.Dispose();\n                    }\n                }\n            });\n\n            LabelTips4.Text = \"\";\n            if (insideFile.Count == 0)\n            {\n                await DisplayAlert(\"警告\", \"这些图不是无影坦克！\", \"确认\");\n                if(MimeUtility.GetMimeMapping(photoFile3[0].FileName) != MimeUtility.GetMimeMapping(\".png\"))\n                    await DisplayAlert(\"警告\", \"如果确定这不是一张锤子图，请 *查看原图* 后 保存 再现形！\", \"确认\");\n                LabelFileName.Text = \"\";\n            }\n            else if(insideFile.Count == 1)\n            {\n                string extension = insideFile[0].Name.Substring(insideFile[0].Name.LastIndexOf(\".\") + 1).ToLower();\n                if (extension == \"png\" || extension == \"jpg\" || extension == \"jpeg\" || extension == \"bmp\" || extension == \"gif\")\n                    Image4.Source = ImageSource.FromStream(() => new MemoryStream(insideFile[0].File.ToArray()));\n                else\n                    Image4.Source = ImageSource.FromResource(\"WarFactory.Resources.File.png\");\n                LabelFileName.Text = insideFile[0].Name;\n            }\n            else\n            {\n                Image4.Source = ImageSource.FromResource(\"WarFactory.Resources.Images.png\");\n                LabelFileName.Text = \"成功现形\" + insideFile.Count.ToString() + \"个文件，点击进入查看列表\";\n            }\n\n            Button1.IsEnabled = true;\n            Button2.IsEnabled = true;\n            ActivityIndicator1.IsRunning = false;\n\n            foreach (FileStream ms in photo3Stream)\n                ms.Close();\n        }\n\n        private async void Button_Clicked_3(object sender, EventArgs e)\n        {\n            if (insideFile.Count == 0)\n            {\n                await DisplayAlert(\"警告\", \"请先生成图片！\", \"确认\");\n            }\n            else\n            {\n                string tempStr =\n                    \"已保存\" + insideFile.Count.ToString() + \"个文件至：\\n\" +\n                    DependencyService.Get<IPlatformService>().GetSavePath() +\n                    \"\\n可在 战车工厂 相册中找到\\n文件名如下：\";\n\n                foreach (SInsideFile insFile in insideFile)\n                {\n                    string name = await DependencyService.Get<IPlatformService>().ImageSave(insFile.File, compatibleMode, insFile.Name);\n                    tempStr += \"\\n\" + name;\n                }\n\n                await DisplayAlert(\"完成\", tempStr, \"确认\");\n            }\n        }\n\n        private async void Button_Clicked_4(object sender, EventArgs e)\n        {\n            await Navigation.PushAsync(new CourseForLsbTank());\n        }\n\n        private async void Button_Clicked_5(object sender, EventArgs e)\n        {\n            await Navigation.PushAsync(new LsbTankSettingPage(compression, info, compatibleMode));\n        }\n\n        private async void Button_Clicked_6(object sender, EventArgs e)\n        {\n            await Navigation.PushAsync(new LsbTankAdvancedFunctionPage(this, captureMode));\n        }\n\n        public void RunScanner()\n        {\n            Task.Run(() =>\n            {\n                while (captureMode)\n                {\n                    DateTime utc = new DateTime(1970, 1, 1, 0, 0, 0, 0);\n                    long timestamp = Convert.ToInt64((DateTime.UtcNow - utc).TotalMilliseconds);\n                    while (!isBackstage && captureMode) ;\n                    while (isBackstage && captureMode) ;\n                    string[] newPics = DependencyService.Get<IPlatformService>().GetLatestPictures(timestamp);\n                    foreach (string newPic in newPics)\n                        photoFile3.Add(new FileResult(newPic));\n\n                    Device.BeginInvokeOnMainThread(() =>\n                    {\n                        DisplayAlert(\"完成\", \"这次在后台捕获到了\" + newPics.Length.ToString() + \"张图片！您可以继续下载图片或手动关闭捕获模式！\", \"确认\");\n                        if (photoFile3.Count == 1)\n                            Image3.Source = photoFile3[0].FullPath;\n                        else if (photoFile3.Count > 1)\n                            Image3.Source = ImageSource.FromResource(\"WarFactory.Resources.Images.png\");\n                        if (photoFile3.Count != 0)\n                            LabelTips3.Text = \"\";\n                    });\n                }\n            });\n        }\n\n        public void AddTankPicture(FileResult fileResult)\n        {\n            foreach (FileResult file in photoFile3)\n                if (fileResult.FullPath == file.FullPath)\n                    return;\n            photoFile3.Add(fileResult);\n\n            if (photoFile3.Count == 1)\n                Image3.Source = photoFile3[0].FullPath;\n            else if(photoFile3.Count > 1)\n                Image3.Source = ImageSource.FromResource(\"WarFactory.Resources.Images.png\");\n            if (photoFile3.Count != 0)\n                LabelTips3.Text = \"\";\n        }\n    }\n}\n\n'WarFactory/WarFactory/FactoryFunc/LsbTank.cs'\n:﻿using System;\nusing System.IO;\nusing System.Reflection;\nusing System.Collections.Generic;\nusing SkiaSharp;\nusing System.Text;\nusing MimeMapping;\n\nnamespace WarFactory.FactoryFunc\n{\n    class LsbTank\n    {\n        static public MemoryStream Encode(FileStream surPicFile, FileStream insPicFile, string info, int compress)\n        {\n            if (compress == 0 || compress >= 8) return null;\n\n            byte[] lsbMask = { 0x1, 0x3, 0x7, 0xF, 0x1F, 0x3F, 0x7F };\n            char[] signature = \"/By:f_Endman\".ToCharArray();\n\n            long insPicLength = insPicFile.Length;\n\n            SKBitmap surPic = SKBitmap.Decode(surPicFile);\n\n\n            long byteForLSB = insPicLength * 8 / compress;\n            long currentSurPicByte = surPic.Width * surPic.Height * 3;\n            double zoom = (double)byteForLSB / (double)currentSurPicByte * ((compress >= 6) ? 1.05d : 1.01d);\n\n            double squareRootZoom = Math.Sqrt(zoom);\n            SKBitmap tankPic = new SKBitmap((int)(surPic.Width * squareRootZoom), (int)(surPic.Height * squareRootZoom), SKColorType.Bgra8888, SKAlphaType.Premul);\n            surPic.ScalePixels(tankPic, SKFilterQuality.High);\n\n\n            SKPaint paint = new SKPaint\n            {\n                Color = SKColors.Black,\n                TextSize = 24,\n                IsAntialias = true,\n                Typeface = SKTypeface.FromStream(Assembly.GetExecutingAssembly().GetManifestResourceStream(\"WarFactory.Resources.simhei.ttf\"))\n            };\n            SKRect textSize = new SKRect();\n            paint.MeasureText(info, ref textSize);\n            int textWidth = (int)(textSize.Size.Width + 2);\n            if (textWidth > tankPic.Width) textWidth = tankPic.Width;\n            SKBitmap infoPic = new SKBitmap(textWidth, 30);\n            SKCanvas canvas = new SKCanvas(infoPic);\n            canvas.DrawColor(SKColors.White);\n            canvas.DrawText(info, 0, (30 - textSize.Size.Height) / 2 - textSize.Top, paint);\n            byte alpha = 0xCF;\n            for (int i = 0; i < infoPic.Height; i++)\n            {\n                for (int j = 0; j < infoPic.Width; j++)\n                {\n                    SKColor infoColor = infoPic.GetPixel(j, i);\n                    SKColor surColor = tankPic.GetPixel(j, i);\n                    byte red = (byte)((infoColor.Red * alpha + surColor.Red * (0xFF - alpha)) / 0xFF);\n                    byte green = (byte)((infoColor.Green * alpha + surColor.Green * (0xFF - alpha)) / 0xFF);\n                    byte blue = (byte)((infoColor.Blue * alpha + surColor.Blue * (0xFF - alpha)) / 0xFF);\n                    tankPic.SetPixel(j, i, new SKColor(red, green, blue));\n                }\n            }\n\n\n\n            List<byte> insPicByteList = new List<byte>();\n            char[] insPicLengthStr = insPicLength.ToString().ToCharArray();\n            for (int i = 0; i < insPicLengthStr.Length; i++)\n                insPicByteList.Add((byte)insPicLengthStr[i]);\n\n            insPicByteList.Add(0x01);\n\n            char[] insPicLengthFileName = insPicFile.Name.Substring(insPicFile.Name.LastIndexOf(\"/\") + 1).ToCharArray();\n            for (int i = 0; i < insPicLengthFileName.Length; i++)\n                insPicByteList.Add((byte)insPicLengthFileName[i]);\n\n            insPicByteList.Add(0x01);\n\n            char[] insMime;\n            insMime = MimeUtility.GetMimeMapping(insPicFile.Name).ToCharArray();\n\n            for (int i = 0; i < insMime.Length; i++)\n                insPicByteList.Add((byte)insMime[i]);\n\n            insPicByteList.Add(0x00);\n\n\n            byte[] insPicByte = new byte[insPicFile.Length];\n            insPicFile.Read(insPicByte, 0, (int)insPicFile.Length);\n            insPicFile.Seek(0, SeekOrigin.Begin);\n            insPicByteList.AddRange(new List<byte>(insPicByte));\n\n\n            SKColor[] tankColorArray = tankPic.Pixels;\n            byte[] tankByteArray = new byte[tankColorArray.Length * 3];\n            for (int i = 0; i < tankColorArray.Length; i++)\n            {\n                tankByteArray[i * 3 + 0] = (tankColorArray[i].Red);\n                tankByteArray[i * 3 + 1] = (tankColorArray[i].Green);\n                tankByteArray[i * 3 + 2] = (tankColorArray[i].Blue);\n            }\n\n\n\n            tankByteArray[0] &= 0xF8;\n            tankByteArray[0] |= 0x00;\n            tankByteArray[1] &= 0xF8;\n            tankByteArray[1] |= 0x03;\n            tankByteArray[2] &= 0xF8;\n            tankByteArray[2] |= (byte)(compress & 0x7);\n\n\n            int Count = 0, snCount = 0;\n            Int32 FIFO = 0;\n            int FifoCount = 0;\n            byte[] insPicByteArray = insPicByteList.ToArray();\n            insPicByteList.Clear();\n            for (int i = 3; i < tankByteArray.Length; i++)\n            {\n                if (FifoCount < compress)\n                {\n\n\n                    FIFO |= (Int32)(((Count < insPicByteArray.Length) ? insPicByteArray[Count++] : (byte)signature[snCount++ % signature.Length]) << ( 24 - FifoCount));\n                    FifoCount += 8;\n                }\n                tankByteArray[i] &= (byte)~lsbMask[compress - 1];\n\n                tankByteArray[i] |= (byte)((FIFO >> (32 - compress)) & lsbMask[compress - 1]);\n                FIFO <<= compress;\n                FifoCount -= compress;\n            }\n\n            for (int i = 0; i < tankColorArray.Length; i++)\n                tankColorArray[i] = new SKColor(tankByteArray[i * 3 + 0], tankByteArray[i * 3 + 1], tankByteArray[i * 3 + 2]);\n            tankPic.Pixels = tankColorArray;\n\n            byte[] tankPicArray = tankPic.Encode(SKEncodedImageFormat.Png, 100).ToArray();\n\n            surPicFile.Close();\n            surPicFile.Dispose();\n            insPicFile.Close();\n            insPicFile.Dispose();\n\n            return new MemoryStream(tankPicArray);\n        }\n\n        static public MemoryStream Decode(FileStream tankPicFile, out string lsbFileName)\n        {\n            byte[] lsbMask = { 0x1, 0x3, 0x7, 0xF, 0x1F, 0x3F, 0x7F };\n            lsbFileName = \"\";\n\n            SKBitmap sPic = SKBitmap.Decode(tankPicFile);\n            if (sPic == null) return null;\n\n            SKColor[] sPicColorArray = sPic.Pixels;\n            byte[] sPicByteArray = new byte[sPicColorArray.Length * 3];\n\n\n            for (int i = 0; i < sPicColorArray.Length; i++)\n            {\n                sPicByteArray[3 * i + 0] = sPicColorArray[i].Red;\n                sPicByteArray[3 * i + 1] = sPicColorArray[i].Green;\n                sPicByteArray[3 * i + 2] = sPicColorArray[i].Blue;\n            }\n\n\n\n            if ((sPicByteArray[0] & 0x7) != 0x0 ||\n                (sPicByteArray[1] & 0x7) != 0x3 ||\n                (sPicByteArray[2] & 0x7) == 0 ||\n                (sPicByteArray[2] & 0x7) > 7)\n                return null;\n            int lsbCompress = sPicByteArray[2] & 0x7;\n\n\n            int FIFO = 0;\n            int FifoCount = 0;\n            List<byte> lsbByte = new List<byte>();\n            for (int i = 2; i < sPicByteArray.Length; i++)\n            {\n                FIFO |= (sPicByteArray[i]) & lsbMask[lsbCompress - 1];\n                if (FifoCount >= 8)\n                {\n                    lsbByte.Add((byte)((FIFO >> (FifoCount - 8)) & 0xFF));\n                    FifoCount -= 8;\n                }\n                FIFO <<= lsbCompress;\n                FifoCount += lsbCompress;\n            }\n\n\n            string sLsbCount = \"\", lsbFileMime = \"\";\n            List<byte> lsbFileNameList = new List<byte>();\n            int offset = 0;\n            while (offset < 0xFF)\n            {\n                if (lsbByte[offset] != 0x01) sLsbCount += (char)lsbByte[offset];\n                else break;\n                offset++;\n            }\n            offset++;\n            while (offset < 0xFF)\n            {\n                if (lsbByte[offset] != 0x01) lsbFileNameList.Add(lsbByte[offset]);\n                else break;\n                offset++;\n            }\n            lsbFileName = Encoding.UTF8.GetString(lsbFileNameList.ToArray());\n            offset++;\n            while (offset < 0xFF)\n            {\n                if (lsbByte[offset] != 0x00) lsbFileMime += (char)lsbByte[offset];\n                else break;\n                offset++;\n            }\n            if (offset == 0xFF) return null;\n            offset++;\n\n            if(int.TryParse(sLsbCount, out int LsbCount) == false)return null;\n            byte[] lsbByteArray = lsbByte.GetRange(offset, LsbCount).ToArray();\n\n            tankPicFile.Close();\n            tankPicFile.Dispose();\n\n            return new MemoryStream(lsbByteArray);\n        }\n    }\n}\n",
        "gt": [
            "'WarFactory/WarFactory/FactoryFunc/LsbTank.cs'",
            "'WarFactory/WarFactory/ViewPage/LsbTankPage.xaml.cs'",
            "'WarFactory/WarFactory/App.xaml.cs'"
        ]
    },
    {
        "files": [
            "'TS3AudioBot/TS3AudioBot/ResourceFactories/AudioTags/AudioTagReader.cs'",
            "'TS3AudioBot/TS3AudioBot/ResourceFactories/Youtube/YoutubeResolver.cs'",
            "'TS3AudioBot/TS3ABotUnitTests/ResourceFactoriesTests.cs'"
        ],
        "content": "'TS3AudioBot/TS3AudioBot/ResourceFactories/AudioTags/AudioTagReader.cs'\n:\n\n\n\n\n\n\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Text;\n\nnamespace TS3AudioBot.ResourceFactories.AudioTags\n{\n\tinternal static class AudioTagReader\n\t{\n\t\tprivate static readonly NLog.Logger Log = NLog.LogManager.GetCurrentClassLogger();\n\t\tprivate static readonly Dictionary<string, Tag> TagDict = new Dictionary<string, Tag>();\n\n\t\tstatic AudioTagReader()\n\t\t{\n\t\t\tRegister(new Id3_1());\n\t\t\tRegister(new Id3_2());\n\t\t}\n\n\t\tprivate static void Register(Tag tagHeader)\n\t\t{\n\t\t\tTagDict.Add(tagHeader.TagId, tagHeader);\n\t\t}\n\n\t\tpublic static HeaderData? GetData(Stream fileStream)\n\t\t{\n\t\t\tvar sr = new BinaryReader(fileStream);\n\t\t\tstring tag = Encoding.ASCII.GetString(sr.ReadBytes(3));\n\t\t\tif (TagDict.TryGetValue(tag, out var tagHeader))\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t\t\t\tvar data = tagHeader.GetData(sr);\n\t\t\t\t\tif (data is null)\n\t\t\t\t\t\treturn null;\n\t\t\t\t\tdata.Title = data.Title?.TrimEnd('\\0');\n\t\t\t\t\treturn data;\n\t\t\t\t}\n\t\t\t\tcatch (IOException) { }\n\t\t\t\tcatch (FormatException fex) { Log.Debug(fex, \"Audiotag has an invalid format\"); }\n\t\t\t\tcatch (Exception ex) { Log.Warn(ex, \"Unknown error while parsing audiotag\"); }\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\n\t\tprivate abstract class Tag\n\t\t{\n\t\t\tpublic abstract string TagId { get; }\n\t\t\tpublic abstract HeaderData GetData(BinaryReader fileStream);\n\t\t}\n\n\n\t\tprivate class Id3_1 : Tag\n\t\t{\n\t\t\tprivate const int TitleLength = 30;\n\t\t\tpublic override string TagId => \"TAG\";\n\n\t\t\tpublic override HeaderData GetData(BinaryReader fileStream)\n\t\t\t{\n\n\t\t\t\treturn new HeaderData\n\t\t\t\t{\n\t\t\t\t\tTitle = Encoding.ASCII.GetString(fileStream.ReadBytes(TitleLength)),\n\t\t\t\t\tPicture = null,\n\t\t\t\t};\n\n\n\t\t\t}\n\t\t}\n\n\t\tprivate class Id3_2 : Tag\n\t\t{\n\t\t\tprivate readonly int v2_TT2 = FrameIdV2(\"TT2\");\n\t\t\tprivate readonly int v2_PIC = FrameIdV2(\"PIC\");\n\t\t\tprivate readonly uint v3_TIT2 = FrameIdV3(\"TIT2\");\n\t\t\tprivate readonly uint v3_APIC = FrameIdV3(\"APIC\");\n\t\t\tprivate readonly uint v3_PIC0 = FrameIdV3(\"PIC\\0\");\n\n\t\t\tpublic override string TagId => \"ID3\";\n\n\n#pragma warning disable IDE0059\n\t\t\tpublic override HeaderData GetData(BinaryReader fileStream)\n\t\t\t{\n\t\t\t\tvar retdata = new HeaderData();\n\n\n\n\n\n\n\t\t\t\tbyte versionMajor = fileStream.ReadByte();\n\t\t\t\tbyte version_minor = fileStream.ReadByte();\n\t\t\t\tbyte data_flags = fileStream.ReadByte();\n\t\t\t\tint tagSize = fileStream.ReadId3Int();\n\n\n\t\t\t\tint readCount = 0;\n\n\t\t\t\t#region ID3v2\n\t\t\t\tif (versionMajor == 2)\n\t\t\t\t{\n\t\t\t\t\twhile (readCount < tagSize)\n\t\t\t\t\t{\n\n\t\t\t\t\t\tint frameId = fileStream.ReadInt24Be();\n\t\t\t\t\t\tint frameSize = fileStream.ReadInt24Be();\n\t\t\t\t\t\treadCount += 6;\n\n\t\t\t\t\t\tif (readCount + frameSize > tagSize)\n\t\t\t\t\t\t\tthrow new FormatException(\"Frame position+size exceedes header size\");\n\n\t\t\t\t\t\tif (frameId == v2_TT2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar textBuffer = fileStream.ReadBytes(frameSize);\n\t\t\t\t\t\t\tretdata.Title = DecodeString(textBuffer[0], textBuffer, 1, frameSize - 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (frameId == v2_PIC)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar textEncoding = fileStream.ReadByte();\n\t\t\t\t\t\t\tvar imageType = fileStream.ReadInt24Be();\n\t\t\t\t\t\t\tvar pictureType = fileStream.ReadByte();\n\t\t\t\t\t\t\tvar description = new List<byte>();\n\t\t\t\t\t\t\tbyte textByte;\n\t\t\t\t\t\t\twhile ((textByte = fileStream.ReadByte()) != 0)\n\t\t\t\t\t\t\t\tdescription.Add(textByte);\n\n\t\t\t\t\t\t\tretdata.Picture = fileStream.ReadBytes(frameSize - (description.Count + 5));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (frameId == 0) { break; }\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfileStream.ReadBytes(frameSize);\n\t\t\t\t\t\t\treadCount += frameSize;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t#endregion\n\t\t\t\t#region ID3v3/4\n\t\t\t\telse if (versionMajor == 3 || versionMajor == 4)\n\t\t\t\t{\n\t\t\t\t\twhile (readCount < tagSize)\n\t\t\t\t\t{\n\n\t\t\t\t\t\tuint frameId = fileStream.ReadUInt32Be();\n\t\t\t\t\t\tint frameSize = versionMajor == 4\n\t\t\t\t\t\t\t? fileStream.ReadId3Int()\n\t\t\t\t\t\t\t: fileStream.ReadInt32Be();\n\t\t\t\t\t\tushort frame_flags = fileStream.ReadUInt16Be();\n\t\t\t\t\t\treadCount += 10;\n\n\t\t\t\t\t\tif ((frameId & 0xFF) == 0)\n\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (frameSize <= 0 || readCount + frameSize > tagSize)\n\t\t\t\t\t\t\tthrow new FormatException(\"Frame position+size exceedes header size\");\n\n\n\t\t\t\t\t\tif (frameId == v3_TIT2)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar textBuffer = fileStream.ReadBytes(frameSize);\n\n\t\t\t\t\t\t\tretdata.Title = DecodeString(textBuffer[0], textBuffer, 1, frameSize - 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (frameId == v3_APIC || frameId == v3_PIC0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar textEncoding = fileStream.ReadByte();\n\t\t\t\t\t\t\tvar mimeLen = ReadNullTermString(fileStream, 0, null);\n\t\t\t\t\t\t\tvar pictureType = fileStream.ReadByte();\n\t\t\t\t\t\t\tvar descriptionLen = ReadNullTermString(fileStream, textEncoding, null);\n\n\t\t\t\t\t\t\tretdata.Picture = fileStream.ReadBytes(frameSize - (mimeLen + descriptionLen + 2));\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse if (frameId == 0) { break; }\n\t\t\t\t\t\telse { fileStream.ReadBytes(frameSize); }\n\t\t\t\t\t\treadCount += frameSize;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t#endregion\n\t\t\t\telse\n\t\t\t\t\tthrow new FormatException(\"Major id3 tag version not supported\");\n\n\t\t\t\treturn retdata;\n\t\t\t}\n#pragma warning restore IDE0059\n\n\n\t\t\tprivate static int ReadNullTermString(BinaryReader fileStream, byte encoding, List<byte>? text)\n\t\t\t{\n\t\t\t\tbool unicode = encoding == 1 || encoding == 2;\n\n\t\t\t\tif (!unicode)\n\t\t\t\t{\n\t\t\t\t\tint read = 0;\n\t\t\t\t\tbyte textByte;\n\t\t\t\t\twhile ((textByte = fileStream.ReadByte()) > 0)\n\t\t\t\t\t{\n\t\t\t\t\t\ttext?.Add(textByte);\n\t\t\t\t\t\tread++;\n\t\t\t\t\t}\n\t\t\t\t\treturn read + 1;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tvar buffer = new byte[2];\n\t\t\t\t\tint read = 0;\n\t\t\t\t\twhile (fileStream.Read(buffer, 0, 2) == 2 && (buffer[0] != 0 || buffer[1] != 0))\n\t\t\t\t\t{\n\t\t\t\t\t\ttext?.AddRange(buffer);\n\t\t\t\t\t\tread += 2;\n\t\t\t\t\t}\n\t\t\t\t\treturn read + 2;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate static readonly Encoding UnicodeBeEncoding = new UnicodeEncoding(true, false);\n\t\t\tprivate static Encoding GetEncoding(byte type)\n\t\t\t{\n\t\t\t\treturn type switch\n\t\t\t\t{\n\t\t\t\t\t0 => Encoding.GetEncoding(28591),\n\t\t\t\t\t1 => Encoding.Unicode,\n\t\t\t\t\t2 => UnicodeBeEncoding,\n\t\t\t\t\t3 => Encoding.UTF8,\n\t\t\t\t\t_ => throw new FormatException(\"The id3 tag is damaged\"),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tprivate static string DecodeString(byte type, byte[] textBuffer, int offset, int length)\n\t\t\t\t=> GetEncoding(type).GetString(textBuffer, offset, length);\n\n\t\t\tprivate static int FrameIdV2(string id)\n\t\t\t{\n\t\t\t\treturn BitConverterBigEndian.ToInt24(Encoding.ASCII.GetBytes(id));\n\t\t\t}\n\n\t\t\tprivate static uint FrameIdV3(string id)\n\t\t\t{\n\t\t\t\treturn BitConverterBigEndian.ToUInt32(Encoding.ASCII.GetBytes(id));\n\t\t\t}\n\t\t}\n\n\n\t}\n\n\tinternal class HeaderData\n\t{\n\t\tpublic string? Title { get; set; }\n\t\tpublic byte[]? Picture { get; set; }\n\t}\n}\n\n'TS3AudioBot/TS3AudioBot/ResourceFactories/Youtube/YoutubeResolver.cs'\n:\n\n\n\n\n\n\n\n\nusing Newtonsoft.Json;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing System.Threading.Tasks;\nusing TS3AudioBot.Audio;\nusing TS3AudioBot.Config;\nusing TS3AudioBot.Helper;\nusing TS3AudioBot.Localization;\nusing TS3AudioBot.Playlists;\nusing TS3AudioBot.ResourceFactories.AudioTags;\nusing TSLib.Helper;\n\nnamespace TS3AudioBot.ResourceFactories.Youtube\n{\n\tpublic sealed class YoutubeResolver : IResourceResolver, IPlaylistResolver, IThumbnailResolver, ISearchResolver\n\t{\n\t\tprivate static readonly NLog.Logger Log = NLog.LogManager.GetCurrentClassLogger();\n\t\tprivate static readonly Regex IdMatch = new Regex(@\"(?:(?:&|\\?)v=|youtu\\.be\\/)([\\w\\-_]{11})\", Util.DefaultRegexConfig);\n\t\tprivate static readonly Regex YtTimestampMatch = new Regex(@\"(?:&|\\?)t=(\\d+)\", Util.DefaultRegexConfig);\n\t\tprivate static readonly Regex LinkMatch = new Regex(@\"^(https?\\:\\/\\/)?(www\\.|m\\.)?(youtube\\.|youtu\\.be)\", Util.DefaultRegexConfig);\n\t\tprivate static readonly Regex ListMatch = new Regex(@\"(&|\\?)list=([\\w\\-_]+)\", Util.DefaultRegexConfig);\n\t\tprivate static readonly Regex StreamCodecMatch = new Regex(@\"CODECS=\"\"([^\"\"]*)\"\"\", Util.DefaultRegexConfig);\n\t\tprivate static readonly Regex StreamBitrateMatch = new Regex(@\"BANDWIDTH=(\\d+)\", Util.DefaultRegexConfig);\n\t\tprivate string YoutubeProjectId => conf.ApiKey.Value;\n\t\tprivate readonly ConfResolverYoutube conf;\n\n\t\tpublic YoutubeResolver(ConfResolverYoutube conf)\n\t\t{\n\t\t\tthis.conf = conf;\n\t\t}\n\n\t\tpublic string ResolverFor => \"youtube\";\n\n\t\tpublic MatchCertainty MatchResource(ResolveContext? _, string uri) =>\n\t\t\tLinkMatch.IsMatch(uri) || IdMatch.IsMatch(uri)\n\t\t\t\t? MatchCertainty.Always\n\t\t\t\t: MatchCertainty.Never;\n\n\t\tpublic MatchCertainty MatchPlaylist(ResolveContext? _, string uri) => ListMatch.IsMatch(uri) ? MatchCertainty.Always : MatchCertainty.Never;\n\n\t\tpublic async Task<PlayResource> GetResource(ResolveContext? _, string uri)\n\t\t{\n\t\t\tMatch matchYtId = IdMatch.Match(uri);\n\t\t\tif (!matchYtId.Success)\n\t\t\t\tthrow Error.LocalStr(strings.error_media_failed_to_parse_id);\n\n\t\t\tvar play = await GetResourceById(null, new AudioResource(matchYtId.Groups[1].Value, null, ResolverFor));\n\t\t\tMatch matchTimestamp = YtTimestampMatch.Match(uri);\n\t\t\tif (matchYtId.Success && int.TryParse(matchTimestamp.Groups[1].Value, out var secs))\n\t\t\t{\n\t\t\t\tplay.PlayInfo ??= new PlayInfo();\n\t\t\t\tplay.PlayInfo.StartOffset = TimeSpan.FromSeconds(secs);\n\t\t\t}\n\t\t\treturn play;\n\t\t}\n\n\t\tpublic async Task<PlayResource> GetResourceById(ResolveContext? _, AudioResource resource)\n\t\t{\n\t\t\tvar priority = conf.ResolverPriority.Value;\n\t\t\tswitch (priority)\n\t\t\t{\n\t\t\tcase LoaderPriority.Internal:\n\t\t\t\ttry { return await ResolveResourceInternal(resource); }\n\t\t\t\tcatch (AudioBotException) { goto case LoaderPriority.YoutubeDl; }\n\n\t\t\tcase LoaderPriority.YoutubeDl:\n\t\t\t\treturn await YoutubeDlWrapped(resource);\n\n\t\t\tdefault:\n\t\t\t\tthrow Tools.UnhandledDefault(priority);\n\t\t\t}\n\t\t}\n\n\t\tprivate async Task<PlayResource> ResolveResourceInternal(AudioResource resource)\n\t\t{\n\t\t\tvar resulthtml = await WebWrapper.Request($\"https:\n\n\t\t\tvar videoTypes = new List<VideoData>();\n\t\t\tvar dataParse = ParseQueryString(resulthtml);\n\n\t\t\tif (dataParse.TryGetValue(\"player_response\", out var playerData))\n\t\t\t{\n\t\t\t\tvar parsed = JsonConvert.DeserializeObject<JsonPlayerResponse>(playerData[0]);\n\t\t\t\tLog.Debug(\"Extracted data: {@playerData}\", parsed);\n\n\t\t\t\tif (parsed?.videoDetails != null)\n\t\t\t\t{\n\t\t\t\t\tresource.ResourceTitle ??= parsed.videoDetails.title;\n\n\t\t\t\t\tbool isLive = parsed.videoDetails.isLive ?? false;\n\t\t\t\t\tif (isLive && parsed.streamingData?.hlsManifestUrl != null)\n\t\t\t\t\t{\n\t\t\t\t\t\treturn await ParseLiveData(resource, parsed.streamingData.hlsManifestUrl);\n\t\t\t\t\t}\n\t\t\t\t\telse if (isLive)\n\t\t\t\t\t{\n\t\t\t\t\t\tLog.Warn(\"Live stream without hls stream data\");\n\t\t\t\t\t}\n\n\t\t\t\t\tParsePlayerData(parsed, videoTypes);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (dataParse.TryGetValue(\"url_encoded_fmt_stream_map\", out var videoDataUnsplit))\n\t\t\t\tParseEncodedFmt(videoDataUnsplit, videoTypes);\n\n\t\t\tif (dataParse.TryGetValue(\"adaptive_fmts\", out videoDataUnsplit))\n\t\t\t\tParseAdaptiveFmt(videoDataUnsplit, videoTypes);\n\n\n\n\t\t\tif (videoTypes.Count <= 0)\n\t\t\t\tthrow Error.LocalStr(strings.error_media_no_stream_extracted);\n\n\t\t\tint codec = SelectStream(videoTypes);\n\t\t\tif (codec < 0)\n\t\t\t\tthrow Error.LocalStr(strings.error_media_no_stream_extracted);\n\n\t\t\tawait ValidateMedia(videoTypes[codec]);\n\n\t\t\tresource.ResourceTitle ??= $\"<YT - no title : {resource.ResourceId}>\";\n\n\t\t\treturn new PlayResource(videoTypes[codec].Link, resource);\n\t\t}\n\n\t\tprivate static async Task<PlayResource> ParseLiveData(AudioResource resource, string requestUrl)\n\t\t{\n\t\t\tList<M3uEntry>? webList = null;\n\t\t\ttry\n\t\t\t{\n\t\t\t\twebList = await WebWrapper.Request(requestUrl).ToAction(async response =>\n\t\t\t\t\tawait M3uReader.TryGetData(await response.Content.ReadAsStreamAsync())\n\t\t\t\t);\n\t\t\t}\n\t\t\tcatch (Exception ex) { throw Error.Exception(ex).LocalStr(strings.error_media_internal_invalid); }\n\n\t\t\tconst string AacHe = \"mp4a.40.5\";\n\t\t\tconst string AacLc = \"mp4a.40.2\";\n\n\t\t\tvar streamPref = from item in webList\n\t\t\t\t\t\t\t let codecs = item.StreamMeta != null ? StreamCodecMatch.Match(item.StreamMeta).Groups[1].Value : \"\"\n\t\t\t\t\t\t\t let codecPref = codecs.Contains(AacLc) ? 0\n\t\t\t\t\t\t\t\t : codecs.Contains(AacHe) ? 1\n\t\t\t\t\t\t\t\t : 2\n\t\t\t\t\t\t\t let bitrate = item.StreamMeta != null ? int.Parse(StreamBitrateMatch.Match(item.StreamMeta).Groups[1].Value) : int.MaxValue\n\t\t\t\t\t\t\t orderby codecPref, bitrate ascending\n\t\t\t\t\t\t\t select item;\n\t\t\tvar streamSelect = streamPref.FirstOrDefault();\n\t\t\tif (streamSelect is null)\n\t\t\t\tthrow Error.LocalStr(strings.error_media_no_stream_extracted);\n\t\t\treturn new PlayResource(streamSelect.TrackUrl, resource);\n\t\t}\n\n\t\tprivate static void ParsePlayerData(JsonPlayerResponse data, List<VideoData> videoTypes)\n\t\t{\n\n\t\t}\n\n\t\tprivate static void ParseEncodedFmt(List<string> videoDataUnsplit, List<VideoData> videoTypes)\n\t\t{\n\t\t\tif (videoDataUnsplit.Count == 0)\n\t\t\t\treturn;\n\t\t\tstring[] videoData = videoDataUnsplit[0].Split(',');\n\n\t\t\tforeach (string vdat in videoData)\n\t\t\t{\n\t\t\t\tvar videoparse = ParseQueryString(vdat);\n\n\t\t\t\tif (!videoparse.TryGetValue(\"url\", out var vLink))\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (!videoparse.TryGetValue(\"type\", out var vType))\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (!videoparse.TryGetValue(\"quality\", out var vQuality))\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar vt = new VideoData(vLink[0], vQuality[0], GetCodec(vType[0]));\n\t\t\t\tvideoTypes.Add(vt);\n\t\t\t}\n\t\t}\n\n\t\tprivate static void ParseAdaptiveFmt(List<string> videoDataUnsplit, List<VideoData> videoTypes)\n\t\t{\n\t\t\tif (videoDataUnsplit.Count == 0)\n\t\t\t\treturn;\n\n\t\t\tstring[] videoData = videoDataUnsplit[0].Split(',');\n\n\t\t\tforeach (string vdat in videoData)\n\t\t\t{\n\t\t\t\tvar videoparse = ParseQueryString(vdat);\n\n\t\t\t\tif (!videoparse.TryGetValue(\"type\", out var vTypeArr))\n\t\t\t\t\tcontinue;\n\t\t\t\tvar vType = vTypeArr[0];\n\n\t\t\t\tbool audioOnly = false;\n\t\t\t\tif (vType.StartsWith(\"video/\", StringComparison.Ordinal))\n\t\t\t\t\tcontinue;\n\t\t\t\telse if (vType.StartsWith(\"audio/\", StringComparison.Ordinal))\n\t\t\t\t\taudioOnly = true;\n\n\t\t\t\tif (!videoparse.TryGetValue(\"url\", out var vLink))\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar vt = new VideoData(vLink[0], vType, GetCodec(vType), audioOnly, !audioOnly);\n\t\t\t\tvideoTypes.Add(vt);\n\t\t\t}\n\t\t}\n\n\t\tpublic string RestoreLink(ResolveContext _, AudioResource resource) => \"https:\n\n\t\tprivate static int SelectStream(List<VideoData> list)\n\t\t{\n\t\t\tif (Log.IsTraceEnabled)\n\t\t\t{\n\t\t\t\tvar dbg = new System.Text.StringBuilder(\"YT avail codecs: \");\n\t\t\t\tforeach (var yd in list)\n\t\t\t\t\tdbg.Append(yd.Qualitydesciption).Append(\" @ \").Append(yd.Codec).Append(\", \");\n\t\t\t\tLog.Trace(\"{0}\", dbg);\n\t\t\t}\n\n\t\t\tint autoselectIndex = list.FindIndex(t => t.Codec == VideoCodec.M4A);\n\t\t\tif (autoselectIndex == -1)\n\t\t\t\tautoselectIndex = list.FindIndex(t => t.AudioOnly);\n\t\t\tif (autoselectIndex == -1)\n\t\t\t\tautoselectIndex = list.FindIndex(t => !t.VideoOnly);\n\n\t\t\treturn autoselectIndex;\n\t\t}\n\n\t\tprivate static Task ValidateMedia(VideoData media) => WebWrapper.Request(media.Link).Send();\n\n\t\tprivate static VideoCodec GetCodec(string type)\n\t\t{\n\t\t\tstring lowtype = type.ToLowerInvariant();\n\t\t\tbool audioOnly = false;\n\t\t\tstring codecSubStr;\n\t\t\tif (lowtype.StartsWith(\"video/\", StringComparison.Ordinal))\n\t\t\t{\n\t\t\t\tcodecSubStr = lowtype.Substring(\"video/\".Length);\n\t\t\t}\n\t\t\telse if (lowtype.StartsWith(\"audio/\", StringComparison.Ordinal))\n\t\t\t{\n\t\t\t\tcodecSubStr = lowtype.Substring(\"audio/\".Length);\n\t\t\t\taudioOnly = true;\n\t\t\t}\n\t\t\telse return VideoCodec.Unknown;\n\n\t\t\tint codecEnd = codecSubStr.IndexOf(';');\n\t\t\tvar extractedCodec = codecEnd >= 0 ? codecSubStr.Substring(0, codecEnd) : codecSubStr;\n\n\t\t\tswitch (extractedCodec)\n\t\t\t{\n\t\t\tcase \"mp4\":\n\t\t\t\tif (audioOnly)\n\t\t\t\t\treturn VideoCodec.M4A;\n\t\t\t\treturn VideoCodec.Mp4;\n\t\t\tcase \"x-flv\":\n\t\t\t\treturn VideoCodec.Flv;\n\t\t\tcase \"3gpp\":\n\t\t\t\treturn VideoCodec.ThreeGp;\n\t\t\tcase \"webm\":\n\t\t\t\treturn VideoCodec.Webm;\n\t\t\tdefault:\n\t\t\t\treturn VideoCodec.Unknown;\n\t\t\t}\n\t\t}\n\n\t\tpublic async Task<Playlist> GetPlaylist(ResolveContext _, string url)\n\t\t{\n\t\t\tMatch matchYtId = ListMatch.Match(url);\n\t\t\tif (!matchYtId.Success)\n\t\t\t\tthrow Error.LocalStr(strings.error_media_failed_to_parse_id);\n\n\t\t\tstring id = matchYtId.Groups[2].Value;\n\t\t\tif (string.IsNullOrEmpty(YoutubeProjectId))\n\t\t\t\treturn await GetPlaylistYoutubeDl(id, url);\n\t\t\telse\n\t\t\t\treturn await GetPlaylistYoutubeApi(id);\n\t\t}\n\n\t\tprivate async Task<Playlist> GetPlaylistYoutubeApi(string id)\n\t\t{\n\t\t\tvar plist = new Playlist().SetTitle(id);\n\n\t\t\tstring? nextToken = null;\n\t\t\tdo\n\t\t\t{\n\t\t\t\tvar parsed = await WebWrapper.Request(\"https:\n\t\t\t\t\t\t+ \"?part=contentDetails,snippet\"\n\t\t\t\t\t\t+ \"&fields=\" + Uri.EscapeDataString(\"items(contentDetails/videoId,snippet/title),nextPageToken\")\n\t\t\t\t\t\t+ \"&maxResults=50\"\n\t\t\t\t\t\t+ \"&playlistId=\" + id\n\t\t\t\t\t\t+ (nextToken != null ? \"&pageToken=\" + nextToken : string.Empty)\n\t\t\t\t\t\t+ \"&key=\" + YoutubeProjectId).AsJson<JsonVideoListResponse>();\n\n\t\t\t\tvar videoItems = parsed.items;\n\t\t\t\tif (!plist.AddRange(\n\t\t\t\t\tvideoItems.Select(item =>\n\t\t\t\t\t\tnew PlaylistItem(\n\t\t\t\t\t\t\tnew AudioResource(\n\t\t\t\t\t\t\t\titem.contentDetails?.videoId ?? throw new NullReferenceException(\"item.contentDetails.videoId was null\"),\n\t\t\t\t\t\t\t\titem.snippet?.title,\n\t\t\t\t\t\t\t\tResolverFor\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t)) break;\n\n\t\t\t\tnextToken = parsed.nextPageToken;\n\t\t\t} while (nextToken != null);\n\n\t\t\treturn plist;\n\t\t}\n\n\t\tprivate async Task<Playlist> GetPlaylistYoutubeDl(string id, string url)\n\t\t{\n\t\t\tvar plistData = await YoutubeDlHelper.GetPlaylistAsync(url);\n\t\t\tvar plist = new Playlist().SetTitle(plistData.title ?? $\"youtube-{id}\");\n\t\t\tplist.AddRange(plistData.entries\n\t\t\t\t.Where(entry => entry.id != null)\n\t\t\t\t.Select(entry => new PlaylistItem(\n\t\t\t\t\tnew AudioResource(\n\t\t\t\t\t\tentry.id!,\n\t\t\t\t\t\tentry.title,\n\t\t\t\t\t\tResolverFor\n\t\t\t\t\t)\n\t\t\t\t)));\n\n\t\t\treturn plist;\n\t\t}\n\n\t\tprivate static async Task<PlayResource> YoutubeDlWrapped(AudioResource resource)\n\t\t{\n\t\t\tLog.Debug(\"Falling back to youtube-dl!\");\n\n\t\t\tvar response = await YoutubeDlHelper.GetSingleVideo(resource.ResourceId);\n\t\t\tresource.ResourceTitle = response.AutoTitle ?? $\"Youtube-{resource.ResourceId}\";\n\t\t\tvar songInfo = YoutubeDlHelper.MapToSongInfo(response);\n\t\t\tvar format = YoutubeDlHelper.FilterBest(response.formats);\n\t\t\tvar url = format?.url;\n\n\t\t\tif (string.IsNullOrEmpty(url))\n\t\t\t\tthrow Error.LocalStr(strings.error_ytdl_empty_response);\n\n\t\t\tLog.Debug(\"youtube-dl succeeded!\");\n\t\t\treturn new PlayResource(url, resource, songInfo: songInfo);\n\t\t}\n\n\t\tpublic static Dictionary<string, List<string>> ParseQueryString(string requestQueryString)\n\t\t{\n\t\t\tvar rc = new Dictionary<string, List<string>>();\n\t\t\tstring[] ar1 = requestQueryString.Split('&', '?');\n\t\t\tforeach (string row in ar1)\n\t\t\t{\n\t\t\t\tif (string.IsNullOrEmpty(row)) continue;\n\t\t\t\tint index = row.IndexOf('=');\n\t\t\t\tif (index < 0) continue;\n\t\t\t\tvar param = Uri.UnescapeDataString(row.Substring(0, index).Replace('+', ' '));\n\n\t\t\t\tvar list = rc.GetOrNew(param);\n\t\t\t\tlist.Add(Uri.UnescapeDataString(row.Substring(index + 1).Replace('+', ' ')));\n\t\t\t}\n\t\t\treturn rc;\n\t\t}\n\n\t\tpublic Task GetThumbnail(ResolveContext _, PlayResource playResource, Func<Stream, Task> action)\n\t\t{\n\n\n\n\n\n\t\t\treturn WebWrapper\n\t\t\t\t.Request($\"https:\n\t\t\t\t.ToStream(action);\n\t\t}\n\n\t\tpublic async Task<IList<AudioResource>> Search(ResolveContext _, string keyword)\n\t\t{\n\t\t\tif (string.IsNullOrEmpty(YoutubeProjectId))\n\t\t\t\treturn await SearchYoutubeDlAsync(keyword);\n\t\t\telse\n\t\t\t\treturn await SearchYoutubeApi(keyword);\n\t\t}\n\n\t\tpublic async Task<IList<AudioResource>> SearchYoutubeApi(string keyword)\n\t\t{\n\t\t\tconst int maxResults = 10;\n\t\t\tvar parsed = await WebWrapper.Request(\n\t\t\t\t\t\"https:\n\t\t\t\t\t+ \"?part=snippet\"\n\t\t\t\t\t+ \"&fields=\" + Uri.EscapeDataString(\"items(id/videoId,snippet(channelTitle,title))\")\n\t\t\t\t\t+ \"&type=video\"\n\t\t\t\t\t+ \"&safeSearch=none\"\n\t\t\t\t\t+ \"&q=\" + Uri.EscapeDataString(keyword)\n\t\t\t\t\t+ \"&maxResults=\" + maxResults\n\t\t\t\t\t+ \"&key=\" + YoutubeProjectId).AsJson<JsonSearchListResponse>();\n\n\t\t\treturn parsed.items.Select(item => new AudioResource(\n\t\t\t\titem.id?.videoId ?? throw new NullReferenceException(\"item.id.videoId was null\"),\n\t\t\t\titem.snippet?.title,\n\t\t\t\tResolverFor)).ToArray();\n\t\t}\n\n\t\tpublic async Task<IList<AudioResource>> SearchYoutubeDlAsync(string keyword)\n\t\t{\n\t\t\tvar search = await YoutubeDlHelper.GetSearchAsync(keyword);\n\n\t\t\treturn search.entries\n\t\t\t\t.Where(entry => entry.id != null)\n\t\t\t\t.Select(entry => new AudioResource(\n\t\t\t\t\tentry.id!,\n\t\t\t\t\tentry.title,\n\t\t\t\t\tResolverFor\n\t\t\t\t)).ToArray();\n\t\t}\n\n\t\tpublic void Dispose() { }\n\t}\n}\n\n'TS3AudioBot/TS3ABotUnitTests/ResourceFactoriesTests.cs'\n:using NUnit.Framework;\nusing TS3AudioBot.Config;\nusing TS3AudioBot.ResourceFactories;\nusing TS3AudioBot.ResourceFactories.Youtube;\n\nnamespace TS3ABotUnitTests\n{\n\t[TestFixture]\n\tpublic class ResourceFactoriesTests\n\t{\n\t\t[Test]\n\t\tpublic void Factory_YoutubeFactoryTest()\n\t\t{\n\t\t\tvar ctx = new ResolveContext(null, null);\n\t\t\tusing IResourceResolver rfac = new YoutubeResolver(new ConfResolverYoutube());\n\n\t\t\tAssert.AreEqual(rfac.MatchResource(ctx, \"https:\n\t\t\tAssert.AreEqual(rfac.MatchResource(ctx, \"https:\n\t\t\tAssert.AreEqual(rfac.MatchResource(ctx, \"https:\n\t\t\tAssert.AreNotEqual(rfac.MatchResource(ctx, \"http:\n\n\n\t\t\tAssert.AreEqual(\"https:\n\t\t}\n\t}\n}\n",
        "gt": [
            "'TS3AudioBot/TS3AudioBot/ResourceFactories/AudioTags/AudioTagReader.cs'",
            "'TS3AudioBot/TS3AudioBot/ResourceFactories/Youtube/YoutubeResolver.cs'",
            "'TS3AudioBot/TS3ABotUnitTests/ResourceFactoriesTests.cs'"
        ]
    },
    {
        "files": [
            "'event_horizon/Starship/Assets/Scripts/Installers/GameInstaller.cs'",
            "'event_horizon/Starship/Assets/Scripts/GameStateMachine/States/MainMenuState.cs'",
            "'event_horizon/Starship/Assets/Zenject/Source/Providers/Singleton/SubContainer/SubContainerSingletonProviderCreatorByMethod.cs'"
        ],
        "content": "'event_horizon/Starship/Assets/Scripts/Installers/GameInstaller.cs'\n:using System;\nusing Combat.Domain;\nusing Combat.Scene;\nusing Constructor.Ships;\nusing Domain.Player;\nusing Domain.Quests;\nusing Economy;\nusing Economy.ItemType;\nusing Economy.Products;\nusing Galaxy;\nusing Galaxy.StarContent;\nusing Game;\nusing Game.Exploration;\nusing GameModel.Quests;\nusing GameServices;\nusing GameServices.Database;\nusing GameServices.Economy;\nusing GameServices.GameManager;\nusing GameServices.Gui;\nusing GameServices.Multiplayer;\nusing GameServices.Player;\nusing GameServices.Quests;\nusing GameServices.Random;\nusing GameServices.Research;\nusing GameStateMachine;\nusing GameStateMachine.States;\nusing Services.Gui;\nusing Services.InternetTime;\nusing Services.Messenger;\nusing Session;\nusing Session.Content;\nusing UnityEngine;\nusing Zenject;\nusing PlayerInventory = GameServices.Player.PlayerInventory;\n\nnamespace Installers\n{\n    public class GameInstaller : MonoInstaller<GameInstaller>\n    {\n        [SerializeField] GameModel.Config _config;\n\n        public override void InstallBindings()\n        {\n#if EDITOR_MODE\n            InstallEditorBindings();\n            return;\n#endif\n\n            Container.BindAllInterfaces<RandomGenerator>().To<RandomGenerator>().AsSingle();\n\n            Container.Bind<GameModel.Config>().FromInstance(_config);\n\n            Container.Bind<IGameDataManager>().To<GameDataManager>().FromGameObject().AsSingle().NonLazy();\n\n            Container.Bind<GameFlow>().FromGameObject().AsSingle().NonLazy();\n\n            Container.BindAllInterfacesAndSelf<StarMap>().To<StarMap>().AsSingle();\n\n            Container.BindAllInterfacesAndSelf<Research>().To<Research>().AsSingle();\n\n            Container.Bind<OfflineMultiplayer>().To<OfflineMultiplayer>().AsSingle().NonLazy();\n\n            Container.Bind<ItemTypeFactory>();\n            Container.Bind<ProductFactory>();\n            Container.Bind<LootGenerator>();\n            Container.Bind<ModificationFactory>();\n\n            Container.BindFactory<CombatModelBuilder, CombatModelBuilder.Factory>();\n            Container.BindSignal<ShipCreatedSignal>();\n            Container.BindTrigger<ShipCreatedSignal.Trigger>();\n            Container.BindSignal<ShipDestroyedSignal>();\n            Container.BindTrigger<ShipDestroyedSignal.Trigger>();\n\n            Container.Bind<Cheats>();\n            Container.Bind<GuiHelper>();\n            Container.Bind<HolidayManager>().AsSingle();\n            Container.Bind<NotificationManager>().AsSingle().NonLazy();\n            Container.BindAllInterfacesAndSelf<GameTime>().To<GameTime>().AsSingle().NonLazy();\n\n            Container.BindAllInterfaces<Technologies>().To<Technologies>().AsSingle();\n            Container.Bind<Skills>().AsSingle();\n\n            Container.Bind<Planet.Factory>().AsCached();\n\n            Container.Bind<SignalsTranslator>().AsSingle().NonLazy();\n\n            BindPlayerData();\n            BindQuestManager();\n            BindStarContent();\n            BindDatabase();\n            BindStateMachine();\n            BindLegacyServices();\n            BindSignals();\n        }\n\n        private void BindPlayerData()\n        {\n            Container.BindAllInterfacesAndSelf<PlayerSkills>().To<PlayerSkills>().AsSingle();\n            Container.BindAllInterfacesAndSelf<PlayerFleet>().To<PlayerFleet>().AsSingle();\n            Container.BindAllInterfacesAndSelf<PlayerResources>().To<PlayerResources>().AsSingle();\n            Container.BindAllInterfacesAndSelf<MotherShip>().To<MotherShip>().AsSingle();\n            Container.BindAllInterfacesAndSelf<PlayerInventory>().To<PlayerInventory>().AsSingle();\n            Container.BindAllInterfacesAndSelf<SupplyShip>().To<SupplyShip>().AsSingle().NonLazy();\n            Container.BindAllInterfacesAndSelf<StarMapManager>().To<StarMapManager>().AsSingle().NonLazy();\n        }\n\n        private void BindQuestManager()\n        {\n            Container.BindAllInterfaces<QuestManager>().To<QuestManager>().AsSingle();\n            Container.BindSignal<QuestListChangedSignal>();\n            Container.BindTrigger<QuestListChangedSignal.Trigger>();\n            Container.BindSignal<QuestActionRequiredSignal>();\n            Container.BindTrigger<QuestActionRequiredSignal.Trigger>();\n            Container.BindSignal<QuestEventSignal>();\n            Container.BindTrigger<QuestEventSignal.Trigger>();\n            Container.Bind<QuestFactory>().AsSingle();\n            Container.Bind<FleetFactory>().AsSingle();\n            Container.Bind<RequirementsFactory>().AsSingle();\n\n            Container.Bind<InventoryFactory>();\n            Container.BindFactory<GameDatabase.DataModel.LootModel, QuestContext, Loot, Loot.Factory>();\n\n\n\n\n        }\n\n        private void BindStarContent()\n        {\n            Container.BindAllInterfacesAndSelf<StarData>().To<StarData>().AsSingle();\n            Container.Bind<Occupants>().AsSingle();\n            Container.Bind<Boss>().AsSingle();\n            Container.Bind<Ruins>().AsSingle();\n            Container.Bind<Challenge>().AsSingle();\n            Container.Bind<LocalEvent>().AsSingle();\n            Container.Bind<Survival>().AsSingle();\n            Container.Bind<Wormhole>().AsSingle();\n            Container.Bind<StarBase>().AsSingle();\n            Container.Bind<XmasTree>().AsSingle();\n            Container.Bind<Hive>().AsSingle();\n        }\n\n        private void BindDatabase()\n        {\n#if EDITOR_MODE\n            Container.BindAllInterfacesAndSelf<SessionDataStub>().To<SessionDataStub>().AsSingle();\n#else\n            Container.BindAllInterfacesAndSelf<SessionData>().To<SessionData>().AsSingle();\n#endif\n            Container.Bind<ContentFactory>();\n\n            Container.BindSignal<SessionCreatedSignal>();\n            Container.BindTrigger<SessionCreatedSignal.Trigger>();\n            Container.BindSignal<SessionDataLoadedSignal>();\n            Container.BindTrigger<SessionDataLoadedSignal.Trigger>();\n\n            Container.BindSignal<PlayerPositionChangedSignal>();\n            Container.BindTrigger<PlayerPositionChangedSignal.Trigger>();\n            Container.BindSignal<NewStarExploredSignal>();\n            Container.BindTrigger<NewStarExploredSignal.Trigger>();\n            Container.BindSignal<MoneyValueChangedSignal>();\n            Container.BindTrigger<MoneyValueChangedSignal.Trigger>();\n            Container.BindSignal<FuelValueChangedSignal>();\n            Container.BindTrigger<FuelValueChangedSignal.Trigger>();\n            Container.BindSignal<StarsValueChangedSignal>();\n            Container.BindTrigger<StarsValueChangedSignal.Trigger>();\n            Container.BindSignal<PlayerSkillsResetSignal>();\n            Container.BindTrigger<PlayerSkillsResetSignal.Trigger>();\n            Container.BindSignal<TokensValueChangedSignal>();\n            Container.BindTrigger<TokensValueChangedSignal.Trigger>();\n            Container.BindSignal<ResourcesChangedSignal>();\n            Container.BindTrigger<ResourcesChangedSignal.Trigger>();\n        }\n\n        private void BindStateMachine()\n        {\n            Container.BindAllInterfaces<StateMachine>().To<StateMachine>().AsSingle().NonLazy();\n            Container.Bind<GameStateFactory>();\n\n            Container.Bind<TravelState>();\n            Container.BindFactory<int, TravelState, TravelState.Factory>();\n\n\t\t\tContainer.Bind<RetreatState>();\n\t\t\tContainer.BindFactory<RetreatState, RetreatState.Factory>();\n\n            Container.Bind<InitializationState>();\n            Container.BindFactory<InitializationState, InitializationState.Factory>();\n\n            Container.Bind<EditorInitializationState>();\n            Container.BindFactory<EditorInitializationState, EditorInitializationState.Factory>();\n\n            Container.Bind<MainMenuState>();\n            Container.BindFactory<MainMenuState, MainMenuState.Factory>();\n\n            Container.Bind<StarMapState>();\n            Container.BindFactory<StarMapState, StarMapState.Factory>();\n\n\t\t\tContainer.Bind<QuestState>();\n\t\t\tContainer.BindFactory<IUserInteraction, QuestState, QuestState.Factory>();\n\n            Container.Bind<SkillTreeState>();\n            Container.BindFactory<SkillTreeState, SkillTreeState.Factory>();\n\n            Container.Bind<ConstructorState>();\n            Container.BindFactory<IShip, ConstructorState, ConstructorState.Factory>();\n\n            Container.Bind<DialogState>();\n            Container.BindFactory<string, WindowArgs, Action<WindowExitCode>, DialogState, DialogState.Factory>();\n\n            Container.Bind<TestingState>();\n            Container.BindFactory<TestingState, TestingState.Factory>();\n\n            Container.Bind<CombatState>();\n            Container.BindFactory<ICombatModel, Action<ICombatModel>, CombatState, CombatState.Factory>();\n\n            Container.Bind<ExplorationState>();\n            Container.BindFactory<Planet, ExplorationState, ExplorationState.Factory>();\n\n            Container.Bind<EhopediaState>();\n            Container.BindFactory<EhopediaState, EhopediaState.Factory>();\n\n            Container.Bind<CombatRewardState>();\n            Container.BindFactory<IReward, CombatRewardState, CombatRewardState.Factory>();\n\n            Container.Bind<AnnouncementState>();\n            Container.BindFactory<AnnouncementState, AnnouncementState.Factory>();\n\n            Container.BindSignal<GameStateChangedSignal>();\n            Container.BindTrigger<GameStateChangedSignal.Trigger>();\n            Container.BindSignal<StartGameSignal>();\n            Container.BindTrigger<StartGameSignal.Trigger>();\n            Container.BindSignal<StartTravelSignal>();\n            Container.BindTrigger<StartTravelSignal.Trigger>();\n\t\t\tContainer.BindSignal<RetreatSignal>();\n\t\t\tContainer.BindTrigger<RetreatSignal.Trigger>();\n            Container.BindSignal<StartBattleSignal>();\n            Container.BindTrigger<StartBattleSignal.Trigger>();\n            Container.BindSignal<StartQuickBattleSignal>();\n            Container.BindTrigger<StartQuickBattleSignal.Trigger>();\n            Container.BindSignal<ExitSignal>();\n            Container.BindTrigger<ExitSignal.Trigger>();\n            Container.BindSignal<OpenSkillTreeSignal>();\n            Container.BindTrigger<OpenSkillTreeSignal.Trigger>();\n            Container.BindSignal<OpenConstructorSignal>();\n            Container.BindTrigger<OpenConstructorSignal.Trigger>();\n            Container.BindSignal<OpenShopSignal>();\n            Container.BindTrigger<OpenShopSignal.Trigger>();\n            Container.BindSignal<OpenWorkshopSignal>();\n            Container.BindTrigger<OpenWorkshopSignal.Trigger>();\n            Container.BindSignal<OpenEhopediaSignal>();\n            Container.BindTrigger<OpenEhopediaSignal.Trigger>();\n            Container.BindSignal<ConfigureControlsSignal>();\n            Container.BindTrigger<ConfigureControlsSignal.Trigger>();\n            Container.BindSignal<ShipSelectedSignal>();\n            Container.BindTrigger<ShipSelectedSignal.Trigger>();\n            Container.BindSignal<CombatCompletedSignal>();\n            Container.BindTrigger<CombatCompletedSignal.Trigger>();\n            Container.BindSignal<OpenShipyardSignal>();\n            Container.BindTrigger<OpenShipyardSignal.Trigger>();\n            Container.BindSignal<StartExplorationSignal>();\n            Container.BindTrigger<StartExplorationSignal.Trigger>();\n            Container.BindSignal<SupplyShipActivatedSignal>();\n            Container.BindTrigger<SupplyShipActivatedSignal.Trigger>();\n        }\n\n        private void BindSignals()\n        {\n            Container.BindSignal<SessionAboutToSaveSignal>();\n            Container.BindTrigger<SessionAboutToSaveSignal.Trigger>();\n            Container.BindSignal<MultiplayerStatusChangedSignal>();\n            Container.BindTrigger<MultiplayerStatusChangedSignal.Trigger>();\n            Container.BindSignal<EnemyFleetLoadedSignal>();\n            Container.BindTrigger<EnemyFleetLoadedSignal.Trigger>();\n            Container.BindSignal<EnemyFoundSignal>();\n            Container.BindTrigger<EnemyFoundSignal.Trigger>();\n            Container.BindSignal<GameModel.BaseCapturedSignal>();\n            Container.BindTrigger<GameModel.BaseCapturedSignal.Trigger>();\n            Container.BindSignal<GameModel.RegionFleetDefeatedSignal>();\n            Container.BindTrigger<GameModel.RegionFleetDefeatedSignal.Trigger>();\n            Container.BindSignal<StarContentChangedSignal>();\n            Container.BindTrigger<StarContentChangedSignal.Trigger>();\n        }\n\n        private void BindLegacyServices()\n        {\n            Container.BindAllInterfacesAndSelf<GameModel.RegionMap>().To<GameModel.RegionMap>().AsSingle();\n        }\n\n        private void InstallEditorBindings()\n        {\n            Container.BindAllInterfaces<RandomGenerator>().To<RandomGenerator>().AsSingle();\n            Container.Bind<GuiHelper>();\n            Container.Bind<NotificationManager>().AsSingle().NonLazy();\n            Container.Bind<SignalsTranslator>().AsSingle().NonLazy();\n\n            Container.Bind<GameModel.Config>().FromInstance(_config);\n\n            Container.BindSignal<ShipCreatedSignal>();\n            Container.BindTrigger<ShipCreatedSignal.Trigger>();\n            Container.BindSignal<ShipDestroyedSignal>();\n            Container.BindTrigger<ShipDestroyedSignal.Trigger>();\n\n            BindDatabase();\n            BindStateMachine();\n            BindLegacyServices();\n            BindSignals();\n        }\n    }\n}\n\n'event_horizon/Starship/Assets/Scripts/GameStateMachine/States/MainMenuState.cs'\n:﻿using System.Collections.Generic;\nusing System.Linq;\nusing Combat.Domain;\nusing Constructor.Ships;\nusing Database.Legacy;\nusing Domain.Player;\nusing GameDatabase;\nusing GameDatabase.DataModel;\nusing GameDatabase.Enums;\nusing GameDatabase.Extensions;\nusing GameDatabase.Model;\nusing Session;\nusing GameServices.LevelManager;\nusing GameServices.Player;\nusing Model.Military;\nusing Scripts.GameStateMachine;\nusing Utils;\nusing Zenject;\n\nnamespace GameStateMachine.States\n{\n    public class MainMenuState : BaseState\n    {\n        [Inject]\n        public MainMenuState(\n            IStateMachine stateMachine,\n            GameStateFactory stateFactory,\n            ILevelLoader levelLoader,\n            ISessionData session,\n            IDatabase database,\n            StartGameSignal startGameSignal,\n            StartQuickBattleSignal startQuickBattleSignal,\n            ConfigureControlsSignal configureControlsSignal,\n            OpenConstructorSignal openConstructorSignal,\n            OpenEhopediaSignal openEhopediaSignal,\n            CombatModelBuilder.Factory combatModelBuilderFactory,\n            MotherShip motherShip,\n            ExitSignal exitSignal)\n            : base(stateMachine, stateFactory, levelLoader)\n        {\n\n            _motherShip = motherShip;\n            _session = session;\n            _database = database;\n            _combatModelBuilderFactory = combatModelBuilderFactory;\n\n            _startGameSignal = startGameSignal;\n            _startGameSignal.Event += OnStartGame;\n            _startQuickBattleSignal = startQuickBattleSignal;\n            _startQuickBattleSignal.Event += OnStartQuickBattle;\n            _exitSignal = exitSignal;\n            _exitSignal.Event += OnExit;\n            _configureControlsSignal = configureControlsSignal;\n            _configureControlsSignal.Event += OnConfigureControls;\n            _openConstructorSignal = openConstructorSignal;\n            _openConstructorSignal.Event += OnOpenConstructor;\n            _openEhopediaSignal = openEhopediaSignal;\n            _openEhopediaSignal.Event += OnOpenEhopedia;\n        }\n\n        public override StateType Type { get { return StateType.MainMenu; } }\n\n        protected override LevelName RequiredLevel { get { return LevelName.MainMenu; } }\n\n        protected override void OnActivate()\n        {\n        }\n\n        private void OnStartGame()\n        {\n            if (!IsActive)\n                throw new BadGameStateException();\n\n            if (_session.Game.GameStartTime == 0)\n            {\n                _session.Game.GameStartTime = System.DateTime.UtcNow.Ticks;\n                _motherShip.ViewMode = ViewMode.StarSystem;\n            }\n\n            StateMachine.LoadAdditionalState(StateFactory.CreateStarMapState());\n        }\n\n        private void OnStartQuickBattle(bool easyMode, string testShipId)\n        {\n            if (!IsActive)\n                throw new BadGameStateException();\n\n            Model.Military.IFleet firstFleet, secondFleet;\n\n            int shipId;\n            ShipBuild testShip = null;\n            if (int.TryParse(testShipId.Replace(\"*\", string.Empty), out shipId))\n                testShip = _database.GetShipBuild(new ItemId<ShipBuild>(shipId));\n\n            var random = new System.Random();\n            var fleet1 = _database.ShipBuildList.RandomUniqueElements(12, random);\n            var fleet2 = _database.ShipBuildList.RandomUniqueElements(12, random);\n\n            if (_database.IsEditable && testShip != null)\n            {\n                var playerFleet = Enumerable.Repeat(testShip, 1).Concat(fleet1);\n                var enemyFleet = testShipId.Contains('*') ? Enumerable.Repeat(testShip,1) : Enumerable.Repeat(testShip,1).Concat(fleet2);\n\n                var aiLevel = testShipId.Contains(\"**\") ? -1 : (easyMode ? 0 : 100);\n\n                firstFleet = new Model.Military.TestFleet(_database, playerFleet, 100);\n                secondFleet = new Model.Military.TestFleet(_database, enemyFleet, aiLevel);\n            }\n            else\n            {\n                var ships = GetUnlockedShips();\n                firstFleet = new Model.Military.TestFleet(_database, ships.RandomUniqueElements(12, random).OrderBy(item => random.Next()), easyMode ? 0 : 100);\n                secondFleet = new Model.Military.TestFleet(_database, ships.RandomUniqueElements(12, random).OrderBy(item => random.Next()), easyMode ? 0 : 100);\n            }\n\n            var rules = Model.Factories.CombatRules.Default();\n            rules.LootCondition = RewardCondition.Never;\n            rules.ExpCondition = RewardCondition.Never;\n            rules.DisableBonusses = true;\n            rules.TimeoutBehaviour = TimeoutBehaviour.NextEnemy;\n\n\n            var builder = _combatModelBuilderFactory.Create();\n            builder.PlayerFleet = firstFleet;\n            builder.EnemyFleet = secondFleet;\n            builder.Rules = rules;\n\n            StateMachine.LoadAdditionalState(StateFactory.CreateCombatState(builder.Build(), null));\n        }\n\n        private HashSet<ShipBuild> GetUnlockedShips()\n        {\n            var ships = new HashSet<ShipBuild>();\n            {\n                ships.Add(_database.GetShipBuild(LegacyShipBuildNames.GetId(\"f0s1\")));\n                ships.Add(_database.GetShipBuild(LegacyShipBuildNames.GetId(\"f1s1\")));\n                ships.Add(_database.GetShipBuild(LegacyShipBuildNames.GetId(\"f2s1\")));\n                ships.Add(_database.GetShipBuild(LegacyShipBuildNames.GetId(\"f3s1\")));\n                ships.Add(_database.GetShipBuild(LegacyShipBuildNames.GetId(\"f4s1\")));\n                ships.Add(_database.GetShipBuild(LegacyShipBuildNames.GetId(\"f5s1\")));\n                ships.Add(_database.GetShipBuild(LegacyShipBuildNames.GetId(\"f6s1\")));\n                ships.Add(_database.GetShipBuild(LegacyShipBuildNames.GetId(\"f7s1\")));\n\n                foreach (var id in _session.Statistics.UnlockedShips)\n                {\n                    var build = _database.ShipBuildList.Available().FirstOrDefault(item => item.Ship.Id == id && item.DifficultyClass == DifficultyClass.Default);\n                    if (build != null)\n                        ships.Add(build);\n                }\n            }\n\n            return ships;\n        }\n\n        private void OnConfigureControls()\n        {\n            StateMachine.LoadAdditionalState(StateFactory.CreateTestingState());\n        }\n\n        private void OnOpenConstructor(IShip ship)\n        {\n            if (IsActive)\n                StateMachine.LoadAdditionalState(StateFactory.CreateConstructorState(ship));\n        }\n\n        public void OnOpenEhopedia()\n        {\n            if (IsActive)\n                StateMachine.LoadAdditionalState(StateFactory.CreateEchopediaState());\n        }\n\n        private void OnExit()\n        {\n            if (IsActive)\n                StateMachine.UnloadActiveState();\n        }\n\n        private readonly StartGameSignal _startGameSignal;\n        private readonly StartQuickBattleSignal _startQuickBattleSignal;\n        private readonly ConfigureControlsSignal _configureControlsSignal;\n        private readonly OpenConstructorSignal _openConstructorSignal;\n        private readonly OpenEhopediaSignal _openEhopediaSignal;\n        private readonly ExitSignal _exitSignal;\n        private readonly ISessionData _session;\n        private readonly MotherShip _motherShip;\n        private readonly IDatabase _database;\n        private readonly CombatModelBuilder.Factory _combatModelBuilderFactory;\n\n        public class Factory : Factory<MainMenuState> { }\n    }\n\n    public class StartGameSignal : SmartWeakSignal\n    {\n        public class Trigger : TriggerBase { }\n    }\n\n    public class StartQuickBattleSignal : SmartWeakSignal<bool, string>\n    {\n        public class Trigger : TriggerBase { }\n    }\n\n    public class ConfigureControlsSignal : SmartWeakSignal\n    {\n        public class Trigger : TriggerBase { }\n    }\n}\n\n'event_horizon/Starship/Assets/Zenject/Source/Providers/Singleton/SubContainer/SubContainerSingletonProviderCreatorByMethod.cs'\n:using System;\nusing System.Collections.Generic;\nusing ModestTree;\n\nnamespace Zenject\n{\n    public class SubContainerSingletonProviderCreatorByMethod\n    {\n        readonly SingletonMarkRegistry _markRegistry;\n        readonly DiContainer _container;\n        readonly Dictionary<MethodSingletonId, ISubContainerCreator> _subContainerCreators =\n            new Dictionary<MethodSingletonId, ISubContainerCreator>();\n\n        public SubContainerSingletonProviderCreatorByMethod(\n            DiContainer container,\n            SingletonMarkRegistry markRegistry)\n        {\n            _markRegistry = markRegistry;\n            _container = container;\n        }\n\n        public IProvider CreateProvider(\n            Type resultType, string concreteIdentifier,\n            Action<DiContainer> installMethod, object identifier)\n        {\n            _markRegistry.MarkSingleton(\n                new SingletonId(resultType, concreteIdentifier),\n                SingletonTypes.ToSubContainerMethod);\n\n            ISubContainerCreator subContainerCreator;\n\n            var subContainerSingletonId = new MethodSingletonId(\n                concreteIdentifier, installMethod);\n\n            if (!_subContainerCreators.TryGetValue(subContainerSingletonId, out subContainerCreator))\n            {\n                subContainerCreator = new SubContainerCreatorCached(\n                    new SubContainerCreatorByMethod(\n                        _container, installMethod));\n\n                _subContainerCreators.Add(subContainerSingletonId, subContainerCreator);\n            }\n\n            return new SubContainerDependencyProvider(\n                resultType, identifier, subContainerCreator);\n        }\n\n        class MethodSingletonId : IEquatable<MethodSingletonId>\n        {\n            public readonly string ConcreteIdentifier;\n            public readonly Delegate InstallerDelegate;\n\n            public MethodSingletonId(string concreteIdentifier, Delegate installerMethod)\n            {\n                ConcreteIdentifier = concreteIdentifier;\n                InstallerDelegate = installerMethod;\n            }\n\n            public override int GetHashCode()\n            {\n                unchecked\n                {\n                    int hash = 17;\n                    hash = hash * 29 + (this.ConcreteIdentifier == null ? 0 : this.ConcreteIdentifier.GetHashCode());\n\n                    var delegateTarget = this.InstallerDelegate.Target;\n\n                    hash = hash * 29 + (delegateTarget == null ? 0 : delegateTarget.GetHashCode());\n                    hash = hash * 29 + this.InstallerDelegate.Method().GetHashCode();\n                    return hash;\n                }\n            }\n\n            public override bool Equals(object other)\n            {\n                if (other is MethodSingletonId)\n                {\n                    MethodSingletonId otherId = (MethodSingletonId)other;\n                    return otherId == this;\n                }\n                else\n                {\n                    return false;\n                }\n            }\n\n            public bool Equals(MethodSingletonId that)\n            {\n                return this == that;\n            }\n\n            public static bool operator ==(MethodSingletonId left, MethodSingletonId right)\n            {\n                return object.Equals(left.InstallerDelegate.Target, right.InstallerDelegate.Target)\n                    && object.Equals(left.InstallerDelegate.Method(), right.InstallerDelegate.Method())\n                    && object.Equals(left.ConcreteIdentifier, right.ConcreteIdentifier);\n            }\n\n            public static bool operator !=(MethodSingletonId left, MethodSingletonId right)\n            {\n                return !left.Equals(right);\n            }\n        }\n    }\n}\n",
        "gt": [
            "'event_horizon/Starship/Assets/Zenject/Source/Providers/Singleton/SubContainer/SubContainerSingletonProviderCreatorByMethod.cs'",
            "'event_horizon/Starship/Assets/Scripts/GameStateMachine/States/MainMenuState.cs'",
            "'event_horizon/Starship/Assets/Scripts/Installers/GameInstaller.cs'"
        ]
    },
    {
        "files": [
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/WebApi/Extensions/ServicesExtensions.cs'",
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/WebApi/Program.cs'",
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/Presentation/Controllers/BooksController.cs'",
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/Entities/RequestFeatures/RequestParameters.cs'"
        ],
        "content": "'btk-akademi-aspnet-core-web-api/bsStoreApp/WebApi/Extensions/ServicesExtensions.cs'\n:﻿using AspNetCoreRateLimit;\nusing AutoMapper;\nusing Entities.DataTransferObjects;\nusing Entities.Models;\nusing Marvin.Cache.Headers;\nusing Microsoft.AspNetCore.Authentication.JwtBearer;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.AspNetCore.Mvc.Formatters;\nusing Microsoft.AspNetCore.Mvc.Versioning;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.IdentityModel.Tokens;\nusing Microsoft.OpenApi.Models;\nusing Presentation.ActionFilters;\nusing Presentation.Controllers;\nusing Repositories.Contracts;\nusing Repositories.EFCore;\nusing Services;\nusing Services.Contracts;\nusing System.Text;\n\nnamespace WebApi.Extensions\n{\n    public static class ServicesExtensions\n    {\n        public static void ConfigureSqlContext(this IServiceCollection services,\n            IConfiguration configuration) => services.AddDbContext<RepositoryContext>(options =>\n                    options.UseSqlServer(configuration.GetConnectionString(\"sqlConnection\")));\n\n        public static void ConfigureRepositoryManager(this IServiceCollection services) =>\n            services.AddScoped<IRepositoryManager, RepositoryManager>();\n\n        public static void ConfigureServiceManager(this IServiceCollection services) =>\n            services.AddScoped<IServiceManager, ServiceManager>();\n\n        public static void ConfigureLoggerService(this IServiceCollection services) =>\n            services.AddSingleton<ILoggerService, LoggerManager>();\n\n\n        public static void ConfigureActionFilters(this IServiceCollection services)\n        {\n            services.AddScoped<ValidationFilterAttribute>();\n            services.AddSingleton<LogFilterAttribute>();\n            services.AddScoped<ValidateMediaTypeAttribute>();\n        }\n\n        public static void ConfigureCors(this IServiceCollection services)\n        {\n            services.AddCors(options =>\n            {\n                options.AddPolicy(\"CorsPolicy\", builder =>\n                    builder.AllowAnyOrigin()\n                    .AllowAnyMethod()\n                    .AllowAnyHeader()\n                    .WithExposedHeaders(\"X-Pagination\")\n                );\n            });\n        }\n\n        public static void ConfigureDataShaper(this IServiceCollection services)\n        {\n            services.AddScoped<IDataShaper<BookDto>, DataShaper<BookDto>>();\n        }\n\n        public static void AddCustomMediaTypes(this IServiceCollection services)\n        {\n            services.Configure<MvcOptions>(config =>\n            {\n                var systemTextJsonOutputFormatter = config\n                .OutputFormatters\n                .OfType<SystemTextJsonOutputFormatter>()?.FirstOrDefault();\n\n                if (systemTextJsonOutputFormatter != null)\n                {\n                    systemTextJsonOutputFormatter.SupportedMediaTypes\n                    .Add(\"application/vnd.btkakademi.hateoas+json\");\n\n                    systemTextJsonOutputFormatter.SupportedMediaTypes\n                    .Add(\"application/vnd.btkakademi.apiroot+json\");\n                }\n\n                var xmlOutputFormatter = config\n                .OutputFormatters\n                .OfType<XmlDataContractSerializerOutputFormatter>()?.FirstOrDefault();\n\n                if (xmlOutputFormatter is not null)\n                {\n                    xmlOutputFormatter.SupportedMediaTypes\n                    .Add(\"application/vnd.btkakademi.hateoas+xml\");\n\n                    xmlOutputFormatter.SupportedMediaTypes\n                    .Add(\"application/vnd.btkakademi.apiroot+xml\");\n                }\n            });\n        }\n\n        public static void ConfigureVersioning(this IServiceCollection services)\n        {\n            services.AddApiVersioning(opt =>\n            {\n                opt.ReportApiVersions = true;\n                opt.AssumeDefaultVersionWhenUnspecified = true;\n                opt.DefaultApiVersion = new ApiVersion(1, 0);\n                opt.ApiVersionReader = new HeaderApiVersionReader(\"api-version\");\n\n                opt.Conventions.Controller<BooksController>()\n                    .HasApiVersion(new ApiVersion(1, 0));\n\n                opt.Conventions.Controller<BooksV2Controller>()\n                    .HasDeprecatedApiVersion(new ApiVersion(2, 0));\n            });\n        }\n\n        public static void ConfigureResponseCaching(this IServiceCollection services) =>\n            services.AddResponseCaching();\n\n        public static void ConfigureHttpCacheHeaders(this IServiceCollection services) =>\n            services.AddHttpCacheHeaders(expirationOpt =>\n            {\n                expirationOpt.MaxAge = 90;\n                expirationOpt.CacheLocation = CacheLocation.Public;\n            },\n            validationOpt =>\n            {\n                validationOpt.MustRevalidate = false;\n            });\n\n        public static void ConfigureRateLimitingOptions(this IServiceCollection services)\n        {\n            var rateLimitRules = new List<RateLimitRule>()\n            {\n                new RateLimitRule()\n                {\n                    Endpoint = \"*\",\n                    Limit = 60,\n                    Period = \"1m\"\n                }\n            };\n\n            services.Configure<IpRateLimitOptions>(opt =>\n            {\n                opt.GeneralRules = rateLimitRules;\n            });\n\n            services.AddSingleton<IRateLimitCounterStore, MemoryCacheRateLimitCounterStore>();\n            services.AddSingleton<IIpPolicyStore, MemoryCacheIpPolicyStore>();\n            services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();\n            services.AddSingleton<IProcessingStrategy, AsyncKeyLockProcessingStrategy>();\n        }\n\n        public static void ConfigureIdentity(this IServiceCollection services)\n        {\n            var builder = services.AddIdentity<User, IdentityRole>(opts =>\n            {\n                opts.Password.RequireDigit = true;\n                opts.Password.RequireLowercase = false;\n                opts.Password.RequireUppercase = false;\n                opts.Password.RequireNonAlphanumeric = false;\n                opts.Password.RequiredLength = 6;\n\n                opts.User.RequireUniqueEmail = true;\n            })\n                .AddEntityFrameworkStores<RepositoryContext>()\n                .AddDefaultTokenProviders();\n        }\n\n        public static void ConfigureJWT(this IServiceCollection services,\n            IConfiguration configuration)\n        {\n            var jwtSettings = configuration.GetSection(\"JwtSettings\");\n            var secretKey = jwtSettings[\"secretKey\"];\n\n            services.AddAuthentication(opt =>\n            {\n                opt.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;\n                opt.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;\n            }).AddJwtBearer(options =>\n                options.TokenValidationParameters = new TokenValidationParameters\n                {\n                    ValidateIssuer = true,\n                    ValidateAudience = true,\n                    ValidateLifetime = true,\n                    ValidateIssuerSigningKey = true,\n                    ValidIssuer = jwtSettings[\"validIssuer\"],\n                    ValidAudience = jwtSettings[\"validAudience\"],\n                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey))\n                }\n            );\n        }\n\n        public static void ConfigureSwagger(this IServiceCollection services)\n        {\n            services.AddSwaggerGen(s =>\n            {\n                s.SwaggerDoc(\"v1\",\n                    new OpenApiInfo\n                    {\n                        Title = \"BTK Akademi\",\n                        Version = \"v1\",\n                        Description = \"BTK Akademi ASP.NET Core Web API\",\n                        TermsOfService = new Uri(\"https:\n                        Contact = new OpenApiContact\n                        {\n                            Name = \"Zafer CÖMERT\",\n                            Email = \"comertzafer@gmail.com\",\n                            Url = new Uri(\"https:\n                        }\n                    });\n\n                s.SwaggerDoc(\"v2\", new OpenApiInfo { Title = \"BTK Akademi\", Version = \"v2\" });\n\n                s.AddSecurityDefinition(\"Bearer\", new OpenApiSecurityScheme()\n                {\n                    In = ParameterLocation.Header,\n                    Description = \"Place to add JWT with Bearer\",\n                    Name = \"Authorization\",\n                    Type = SecuritySchemeType.ApiKey,\n                    Scheme=\"Bearer\"\n                });\n\n                s.AddSecurityRequirement(new OpenApiSecurityRequirement()\n                {\n                    {\n                        new OpenApiSecurityScheme\n                        {\n                            Reference = new OpenApiReference\n                            {\n                                Type = ReferenceType.SecurityScheme,\n                                Id=\"Bearer\"\n                            },\n                            Name = \"Bearer\"\n                        },\n                        new List<string>()\n                    }\n                });\n            });\n        }\n\n        public static void RegisterRepositories(this IServiceCollection services)\n        {\n            services.AddScoped<IBookRepository, BookRepository>();\n            services.AddScoped<ICategoryRepository, CategoryRepository>();\n        }\n\n        public static void RegisterServices(this IServiceCollection services)\n        {\n            services.AddScoped<IBookService, BookManager>();\n            services.AddScoped<ICategoryService, CategoryManager>();\n            services.AddScoped<IAuthenticationService, AuthenticationManager>();\n        }\n\n    }\n}\n\n'btk-akademi-aspnet-core-web-api/bsStoreApp/WebApi/Program.cs'\n:using AspNetCoreRateLimit;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing NLog;\nusing Presentation.ActionFilters;\nusing Repositories.EFCore;\nusing Services;\nusing Services.Contracts;\nusing WebApi.Extensions;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nLogManager.LoadConfiguration(String.Concat(Directory.GetCurrentDirectory(),\"/nlog.config\"));\n\nbuilder.Services.AddControllers(config =>\n{\n    config.RespectBrowserAcceptHeader = true;\n    config.ReturnHttpNotAcceptable = true;\n    config.CacheProfiles.Add(\"5mins\", new CacheProfile() { Duration = 300 });\n})\n.AddXmlDataContractSerializerFormatters()\n.AddCustomCsvFormatter()\n.AddApplicationPart(typeof(Presentation.AssemblyReference).Assembly)\n.AddNewtonsoftJson(opt =>\n    opt.SerializerSettings.ReferenceLoopHandling =\n    Newtonsoft.Json.ReferenceLoopHandling.Ignore\n);\n\nbuilder.Services.Configure<ApiBehaviorOptions>(options =>\n{\n    options.SuppressModelStateInvalidFilter = true;\n});\n\n\nbuilder.Services.AddEndpointsApiExplorer();\nbuilder.Services.ConfigureSwagger();\nbuilder.Services.ConfigureSqlContext(builder.Configuration);\nbuilder.Services.ConfigureRepositoryManager();\nbuilder.Services.ConfigureServiceManager();\nbuilder.Services.ConfigureLoggerService();\nbuilder.Services.AddAutoMapper(typeof(Program));\nbuilder.Services.ConfigureActionFilters();\nbuilder.Services.ConfigureCors();\nbuilder.Services.ConfigureDataShaper();\nbuilder.Services.AddCustomMediaTypes();\nbuilder.Services.AddScoped<IBookLinks, BookLinks>();\nbuilder.Services.ConfigureVersioning();\nbuilder.Services.ConfigureResponseCaching();\nbuilder.Services.ConfigureHttpCacheHeaders();\nbuilder.Services.AddMemoryCache();\nbuilder.Services.ConfigureRateLimitingOptions();\nbuilder.Services.AddHttpContextAccessor();\nbuilder.Services.ConfigureIdentity();\nbuilder.Services.ConfigureJWT(builder.Configuration);\n\nbuilder.Services.RegisterRepositories();\nbuilder.Services.RegisterServices();\n\nvar app = builder.Build();\n\nvar logger = app.Services.GetRequiredService<ILoggerService>();\napp.ConfigureExceptionHandler(logger);\n\nif (app.Environment.IsDevelopment())\n{\n    app.UseSwagger();\n    app.UseSwaggerUI(s =>\n    {\n        s.SwaggerEndpoint(\"/swagger/v1/swagger.json\", \"BTK Akademi v1\");\n        s.SwaggerEndpoint(\"/swagger/v2/swagger.json\", \"BTK Akademi v2\");\n    });\n}\n\nif(app.Environment.IsProduction())\n{\n    app.UseHsts();\n}\n\napp.UseHttpsRedirection();\n\napp.UseIpRateLimiting();\napp.UseCors(\"CorsPolicy\");\napp.UseResponseCaching();\napp.UseHttpCacheHeaders();\n\napp.UseAuthentication();\napp.UseAuthorization();\n\napp.MapControllers();\n\napp.Run();\n\n'btk-akademi-aspnet-core-web-api/bsStoreApp/Presentation/Controllers/BooksController.cs'\n:﻿using Entities.DataTransferObjects;\nusing Entities.Exceptions;\nusing Entities.Models;\nusing Entities.RequestFeatures;\nusing Marvin.Cache.Headers;\nusing Microsoft.AspNetCore.Authorization;\nusing Microsoft.AspNetCore.JsonPatch;\nusing Microsoft.AspNetCore.Mvc;\nusing Presentation.ActionFilters;\nusing Services.Contracts;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\n\nnamespace Presentation.Controllers\n{\n\n    [ApiExplorerSettings(GroupName = \"v1\")]\n    [ServiceFilter(typeof(LogFilterAttribute))]\n    [ApiController]\n    [Route(\"api/books\")]\n\n\n    public class BooksController : ControllerBase\n    {\n        private readonly IServiceManager _manager;\n        public BooksController(IServiceManager manager)\n        {\n            _manager = manager;\n        }\n\n        [Authorize]\n        [HttpHead]\n        [HttpGet(Name = \"GetAllBooksAsync\")]\n        [ServiceFilter(typeof(ValidateMediaTypeAttribute))]\n\n        public async Task<IActionResult> GetAllBooksAsync([FromQuery] BookParameters bookParameters)\n        {\n            var linkParameters = new LinkParameters()\n            {\n                BookParameters = bookParameters,\n                HttpContext = HttpContext\n            };\n\n            var result = await _manager\n                .BookService\n                .GetAllBooksAsync(linkParameters, false);\n\n            Response.Headers.Add(\"X-Pagination\",\n                JsonSerializer.Serialize(result.metaData));\n\n            return result.linkResponse.HasLinks ?\n                Ok(result.linkResponse.LinkedEntities) :\n                Ok(result.linkResponse.ShapedEntities);\n        }\n\n        [Authorize]\n        [HttpGet(\"{id:int}\")]\n        public async Task<IActionResult> GetOneBookAsync([FromRoute(Name = \"id\")] int id)\n        {\n            var book = await _manager\n            .BookService\n            .GetOneBookByIdAsync(id, false);\n\n            return Ok(book);\n        }\n\n        [Authorize]\n        [HttpGet(\"details\")]\n        public async Task<IActionResult> GetAllBooksWithDetailsAsync()\n        {\n            return Ok(await _manager\n                .BookService\n                .GetAllBooksWithDetailsAsync(false));\n        }\n\n        [Authorize]\n        [ServiceFilter(typeof(ValidationFilterAttribute))]\n        [HttpPost(Name = \"CreateOneBookAsync\")]\n        public async Task<IActionResult> CreateOneBookAsync([FromBody] BookDtoForInsertion bookDto)\n        {\n            var book = await _manager.BookService.CreateOneBookAsync(bookDto);\n            return StatusCode(201, book);\n        }\n\n        [Authorize(Roles = \"Editor, Admin\")]\n        [ServiceFilter(typeof(ValidationFilterAttribute))]\n        [HttpPut(\"{id:int}\")]\n        public async Task<IActionResult> UpdateOneBookAsync([FromRoute(Name = \"id\")] int id,\n            [FromBody] BookDtoForUpdate bookDto)\n        {\n            await _manager.BookService.UpdateOneBookAsync(id, bookDto, false);\n            return NoContent();\n        }\n\n        [Authorize(Roles = \"Admin\")]\n        [HttpDelete(\"{id:int}\")]\n        public async Task<IActionResult> DeleteOneBookAsync([FromRoute(Name = \"id\")] int id)\n        {\n            await _manager.BookService.DeleteOneBookAsync(id, false);\n            return NoContent();\n        }\n\n        [Authorize(Roles = \"Editor, Admin\")]\n        [HttpPatch(\"{id:int}\")]\n        public async Task<IActionResult> PartiallyUpdateOneBookAsync([FromRoute(Name = \"id\")] int id,\n            [FromBody] JsonPatchDocument<BookDtoForUpdate> bookPatch)\n        {\n\n            if (bookPatch is null)\n                return BadRequest();\n\n            var result = await _manager.BookService.GetOneBookForPatchAsync(id, false);\n\n            bookPatch.ApplyTo(result.bookDtoForUpdate, ModelState);\n\n            TryValidateModel(result.bookDtoForUpdate);\n\n            if (!ModelState.IsValid)\n                return UnprocessableEntity(ModelState);\n\n            await _manager.BookService.SaveChangesForPatchAsync(result.bookDtoForUpdate, result.book);\n\n            return NoContent();\n        }\n\n        [Authorize]\n        [HttpOptions]\n        public IActionResult GetBooksOptions()\n        {\n            Response.Headers.Add(\"Allow\", \"GET, PUT, POST, PATCH, DELETE, HEAD, OPTIONS\");\n            return Ok();\n        }\n    }\n}\n\n'btk-akademi-aspnet-core-web-api/bsStoreApp/Entities/RequestFeatures/RequestParameters.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Entities.RequestFeatures\n{\n\tpublic abstract class RequestParameters\n    {\n\t\tconst int maxPageSize = 50;\n\n\n        public int PageNumber { get; set; }\n\n\n\t\tprivate int _pageSize;\n\n\t\tpublic int PageSize\n\t\t{\n\t\t\tget { return _pageSize; }\n\t\t\tset { _pageSize = value > maxPageSize ? maxPageSize : value; }\n\t\t}\n\n\t\tpublic String? OrderBy { get; set; }\n\t\tpublic String? Fields { get; set; }\n\n\t}\n}\n",
        "gt": [
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/Entities/RequestFeatures/RequestParameters.cs'",
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/Presentation/Controllers/BooksController.cs'",
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/WebApi/Extensions/ServicesExtensions.cs'",
            "'btk-akademi-aspnet-core-web-api/bsStoreApp/WebApi/Program.cs'"
        ]
    },
    {
        "files": [
            "'okta-sdk-dotnet/src/Okta.Sdk/Model/PatchAction.cs'",
            "'okta-sdk-dotnet/src/Okta.Sdk/Api/ApplicationSSOApi.cs'",
            "'okta-sdk-dotnet/src/Okta.Sdk.IntegrationTest/SchemaScenarios.cs'"
        ],
        "content": "'okta-sdk-dotnet/src/Okta.Sdk/Model/PatchAction.cs'\n:\n\n\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Linq;\nusing System.IO;\nusing System.Runtime.Serialization;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Converters;\nusing Newtonsoft.Json.Linq;\nusing OpenAPIDateConverter = Okta.Sdk.Client.OpenAPIDateConverter;\n\nnamespace Okta.Sdk.Model\n{\n\n\n\n\n    [JsonConverter(typeof(StringEnumSerializingConverter))]\n    public sealed class PatchAction : StringEnum\n    {\n\n\n\n        public static PatchAction Remove = new PatchAction(\"remove\");\n\n\n\n        public static PatchAction Replace = new PatchAction(\"replace\");\n\n\n\n\n\n        public static implicit operator PatchAction(string value) => new PatchAction(value);\n\n\n\n\n\n        public PatchAction(string value)\n            : base(value)\n        {\n        }\n    }\n\n\n}\n\n'okta-sdk-dotnet/src/Okta.Sdk/Api/ApplicationSSOApi.cs'\n:\n\n\nusing System;\nusing System.Collections.Generic;\nusing System.Collections.ObjectModel;\nusing System.Linq;\nusing System.Net;\nusing System.Net.Mime;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Okta.Sdk.Client;\nusing Okta.Sdk.Model;\n\nnamespace Okta.Sdk.Api\n{\n\n\n\n    public partial interface IApplicationSSOApiAsync : IApiAccessor\n    {\n        #region Asynchronous Operations\n\n\n\n\n\n\n\n\n\n\n        System.Threading.Tasks.Task<string> PreviewSAMLmetadataForApplicationAsync(  string appId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));\n\n\n\n\n\n\n\n\n\n\n        System.Threading.Tasks.Task<ApiResponse<string>> PreviewSAMLmetadataForApplicationWithHttpInfoAsync(  string appId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));\n        #endregion Asynchronous Operations\n    }\n\n\n\n\n    public partial interface IApplicationSSOApi :  IApplicationSSOApiAsync\n    {\n\n    }\n\n\n\n\n    public partial class ApplicationSSOApi : IApplicationSSOApi\n    {\n        private Okta.Sdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;\n        private IOAuthTokenProvider _oAuthTokenProvider;\n\n\n\n\n\n\n\n\n\n        public ApplicationSSOApi(Okta.Sdk.Client.Configuration configuration = null, IOAuthTokenProvider oAuthTokenProvider = null, WebProxy webProxy = null)\n        {\n            configuration = Sdk.Client.Configuration.GetConfigurationOrDefault(configuration);\n\n            this.Configuration = Okta.Sdk.Client.Configuration.MergeConfigurations(\n                Okta.Sdk.Client.GlobalConfiguration.Instance,\n                configuration\n            );\n\n            Sdk.Client.Configuration.Validate((Configuration)this.Configuration);\n\n            _oAuthTokenProvider = NullOAuthTokenProvider.Instance;\n            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration))\n            {\n                _oAuthTokenProvider = oAuthTokenProvider ?? new DefaultOAuthTokenProvider(Configuration);\n            }\n\n            this.AsynchronousClient = new Okta.Sdk.Client.ApiClient(this.Configuration.OktaDomain, _oAuthTokenProvider, webProxy);\n            ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;\n        }\n\n\n\n\n\n\n\n        public ApplicationSSOApi(Okta.Sdk.Client.IAsynchronousClient asyncClient, Okta.Sdk.Client.IReadableConfiguration configuration)\n        {\n            if (asyncClient == null) throw new ArgumentNullException(\"asyncClient\");\n            if (configuration == null) throw new ArgumentNullException(\"configuration\");\n\n            this.AsynchronousClient = asyncClient;\n            this.Configuration = configuration;\n            this.ExceptionFactory = Okta.Sdk.Client.Configuration.DefaultExceptionFactory;\n             _oAuthTokenProvider = NullOAuthTokenProvider.Instance;\n            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration))\n            {\n                _oAuthTokenProvider = new DefaultOAuthTokenProvider(Configuration);\n            }\n        }\n\n\n\n\n        public Okta.Sdk.Client.IAsynchronousClient AsynchronousClient { get; set; }\n\n\n\n\n\n        public string GetBasePath()\n        {\n            return this.Configuration.OktaDomain;\n        }\n\n\n\n\n\n        public Okta.Sdk.Client.IReadableConfiguration Configuration { get; set; }\n\n\n\n\n        public Okta.Sdk.Client.ExceptionFactory ExceptionFactory\n        {\n            get\n            {\n                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)\n                {\n                    throw new InvalidOperationException(\"Multicast delegate for ExceptionFactory is unsupported.\");\n                }\n                return _exceptionFactory;\n            }\n            set { _exceptionFactory = value; }\n        }\n\n\n\n\n\n\n\n\n        public async System.Threading.Tasks.Task<string> PreviewSAMLmetadataForApplicationAsync(  string appId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))\n        {\n            Okta.Sdk.Client.ApiResponse<string> localVarResponse = await PreviewSAMLmetadataForApplicationWithHttpInfoAsync(appId, cancellationToken).ConfigureAwait(false);\n            return localVarResponse.Data;\n        }\n\n\n\n\n\n\n\n        public async System.Threading.Tasks.Task<Okta.Sdk.Client.ApiResponse<string>> PreviewSAMLmetadataForApplicationWithHttpInfoAsync(  string appId , System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))\n        {\n\n            if (appId == null)\n            {\n                throw new Okta.Sdk.Client.ApiException(400, \"Missing required parameter 'appId' when calling ApplicationSSOApi->PreviewSAMLmetadataForApplication\");\n            }\n\n\n            Okta.Sdk.Client.RequestOptions localVarRequestOptions = new Okta.Sdk.Client.RequestOptions();\n\n            string[] _contentTypes = new string[] {\n            };\n\n\n            string[] _accepts = new string[] {\n                \"text/xml\",\n                \"application/json\"\n            };\n\n            var localVarContentType = Okta.Sdk.Client.ClientUtils.SelectHeaderContentType(_contentTypes);\n            if (localVarContentType != null)\n            {\n                localVarRequestOptions.HeaderParameters.Add(\"Content-Type\", localVarContentType);\n            }\n\n            var localVarAccept = Okta.Sdk.Client.ClientUtils.SelectHeaderAccept(_accepts);\n            if (localVarAccept != null)\n            {\n                localVarRequestOptions.HeaderParameters.Add(\"Accept\", localVarAccept);\n            }\n\n            localVarRequestOptions.PathParameters.Add(\"appId\", Okta.Sdk.Client.ClientUtils.ParameterToString(appId));\n\n\n            if (Sdk.Client.Configuration.IsSswsMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix(\"Authorization\")))\n            {\n                localVarRequestOptions.HeaderParameters.Add(\"Authorization\", this.Configuration.GetApiKeyWithPrefix(\"Authorization\"));\n            }\n\n\n            if (Sdk.Client.Configuration.IsBearerTokenMode(this.Configuration) && !string.IsNullOrEmpty(this.Configuration.AccessToken) && !localVarRequestOptions.HeaderParameters.ContainsKey(\"Authorization\"))\n            {\n                localVarRequestOptions.HeaderParameters.Add(\"Authorization\", \"Bearer \" + this.Configuration.AccessToken);\n            }\n\n            if (Sdk.Client.Configuration.IsPrivateKeyMode(this.Configuration) && !localVarRequestOptions.HeaderParameters.ContainsKey(\"Authorization\"))\n            {\n                await _oAuthTokenProvider.AddOrUpdateAuthorizationHeader(localVarRequestOptions, $\"/api/v1/apps/{appId}/sso/saml/metadata\", \"GET\", cancellationToken = default);\n            }\n\n\n            var localVarResponse = await this.AsynchronousClient.GetAsync<string>(\"/api/v1/apps/{appId}/sso/saml/metadata\", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);\n\n            if (this.ExceptionFactory != null)\n            {\n                Exception _exception = this.ExceptionFactory(\"PreviewSAMLmetadataForApplication\", localVarResponse);\n                if (_exception != null)\n                {\n                    throw _exception;\n                }\n            }\n\n            return localVarResponse;\n        }\n\n    }\n}\n\n'okta-sdk-dotnet/src/Okta.Sdk.IntegrationTest/SchemaScenarios.cs'\n:﻿using FluentAssertions;\nusing Okta.Sdk.Api;\nusing Okta.Sdk.Model;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing Xunit;\n\nnamespace Okta.Sdk.IntegrationTest\n{\n    public class SchemaScenarios\n    {\n        private SchemaApi _schemaApi;\n        private ApplicationApi _applicationApi;\n\n        public SchemaScenarios()\n        {\n            _schemaApi = new SchemaApi();\n            _applicationApi = new ApplicationApi();\n        }\n\n        [Fact]\n        public async Task GetUserSchema()\n        {\n            var userSchema = await _schemaApi.GetUserSchemaAsync(\"default\");\n\n            userSchema.Schema.Should().Be(\"http:\n            userSchema.Name.Should().Be(\"user\");\n            userSchema.Title.Should().Be(\"User\");\n            userSchema.Id.Should().NotBeNullOrEmpty();\n            userSchema.Type.Should().Be(\"object\");\n            userSchema.Definitions.Base.Id.Should().Be(\"#base\");\n            userSchema.Definitions.Base.Type.Should().Be(\"object\");\n            userSchema.Definitions.Base.Properties.Login.Title.Should().Be(\"Username\");\n            userSchema.Definitions.Base.Properties.Login.Type.Value.Should().Be(\"string\");\n            userSchema.Definitions.Base.Properties.Login.Required.Should().BeTrue();\n            userSchema.Definitions.Base.Properties.Login.Mutability.Should().Be(\"READ_WRITE\");\n            userSchema.Definitions.Base.Properties.Login.Scope.Value.Should().Be(\"NONE\");\n            userSchema.Definitions.Base.Properties.Login.MinLength.Should().Be(5);\n            userSchema.Definitions.Base.Properties.Login.MaxLength.Should().Be(100);\n            userSchema.Definitions.Base.Properties.Login.Permissions.FirstOrDefault().Principal.Should().Be(\"SELF\");\n            userSchema.Definitions.Base.Properties.Login.Permissions.FirstOrDefault().Action.Should().Be(\"READ_ONLY\");\n            userSchema.Definitions.Base.Required.Should().Contain(\"login\");\n        }\n\n        [Fact]\n        public async Task UpdateUserProfileSchemaProperty()\n        {\n            var testAttributeName = $\"{nameof(UpdateUserProfileSchemaProperty)}_test_{RandomString(6)}\";\n            var userSchema = await _schemaApi.GetUserSchemaAsync(\"default\");\n            var guid = Guid.NewGuid();\n\n\n            var customAttributeDetails = new UserSchemaAttribute()\n            {\n                Title = testAttributeName,\n                Type = \"string\",\n                Description = guid.ToString(),\n                MinLength = 1,\n                MaxLength = 20,\n                Permissions = new List<UserSchemaAttributePermission>\n                {\n                    new UserSchemaAttributePermission\n                    {\n                        Action = \"READ_WRITE\",\n                        Principal = \"SELF\",\n                    },\n                },\n            };\n\n            var customAttribute = new Dictionary<string, UserSchemaAttribute>();\n            customAttribute[testAttributeName] = customAttributeDetails;\n            userSchema.Definitions.Custom.Properties = customAttribute;\n\n            var updatedUserSchema = await _schemaApi.UpdateUserProfileAsync(\"default\", userSchema);\n\n            var retrievedCustomAttribute = updatedUserSchema.Definitions.Custom.Properties[testAttributeName];\n            retrievedCustomAttribute.Title.Should().Be(testAttributeName);\n            retrievedCustomAttribute.Type.Value.Should().Be(\"string\");\n            retrievedCustomAttribute.Description.Should().Be(guid.ToString());\n            retrievedCustomAttribute.Required.Should().BeFalse();\n            retrievedCustomAttribute.MinLength.Should().Be(1);\n            retrievedCustomAttribute.MaxLength.Should().Be(20);\n            retrievedCustomAttribute.Permissions.FirstOrDefault().Principal.Should().Be(\"SELF\");\n            retrievedCustomAttribute.Permissions.FirstOrDefault().Action.Should().Be(\"READ_WRITE\");\n\n\n            Thread.Sleep(6000);\n\n\n            customAttribute[testAttributeName] = null;\n            updatedUserSchema.Definitions.Custom.Properties = customAttribute;\n            updatedUserSchema = await _schemaApi.UpdateUserProfileAsync(\"default\", updatedUserSchema);\n            updatedUserSchema.Definitions.Custom.Properties.ContainsKey(testAttributeName).Should().BeFalse();\n        }\n\n        [Fact]\n        public async Task AddArrayProperty()\n        {\n            var testAttributeName = $\"{nameof(AddArrayProperty)}_test_{RandomString(6)}\";\n            var userSchema = await _schemaApi.GetUserSchemaAsync(\"default\");\n            var guid = Guid.NewGuid();\n\n\n            var customAttributeDetails = new UserSchemaAttribute()\n            {\n                Title = testAttributeName,\n                Type = UserSchemaAttributeType.Array,\n                Description = guid.ToString(),\n                Permissions = new List<UserSchemaAttributePermission>\n                {\n                    new UserSchemaAttributePermission\n                    {\n                        Action = \"READ_WRITE\",\n                        Principal = \"SELF\",\n                    },\n                },\n                Items = new UserSchemaAttributeItems { Type = \"string\" }\n            };\n\n            var customAttribute = new Dictionary<string, UserSchemaAttribute>();\n            customAttribute[testAttributeName] = customAttributeDetails;\n            userSchema.Definitions.Custom.Properties = customAttribute;\n\n            var updatedUserSchema = await _schemaApi.UpdateUserProfileAsync(\"default\", userSchema);\n\n            var retrievedCustomAttribute = updatedUserSchema.Definitions.Custom.Properties[testAttributeName];\n            retrievedCustomAttribute.Title.Should().Be(testAttributeName);\n            retrievedCustomAttribute.Type.Value.Should().Be(\"array\");\n            retrievedCustomAttribute.Description.Should().Be(guid.ToString());\n            retrievedCustomAttribute.Required.Should().BeFalse();\n            retrievedCustomAttribute.MinLength.Should().BeNull();\n            retrievedCustomAttribute.MaxLength.Should().BeNull();\n            retrievedCustomAttribute.Permissions.FirstOrDefault().Principal.Should().Be(\"SELF\");\n            retrievedCustomAttribute.Permissions.FirstOrDefault().Action.Should().Be(\"READ_WRITE\");\n\n\n            Thread.Sleep(6000);\n\n\n            customAttribute[testAttributeName] = null;\n            updatedUserSchema.Definitions.Custom.Properties = customAttribute;\n            updatedUserSchema = await _schemaApi.UpdateUserProfileAsync(\"default\", updatedUserSchema);\n            updatedUserSchema.Definitions.Custom.Properties.ContainsKey(testAttributeName).Should().BeFalse();\n        }\n\n        [Fact]\n        public async Task UpdateApplicationUserProfileSchemaProperty()\n        {\n            var app = new BasicAuthApplication\n            {\n                Name = \"template_basic_auth\",\n                Label = $\"dotnet-sdk: {$\"{nameof(UpdateApplicationUserProfileSchemaProperty)}_{RandomString(6)}\"}\",\n                SignOnMode = \"BASICAUTH\",\n                Settings = new BasicApplicationSettings\n                {\n                    App = new BasicApplicationSettingsApplication\n                    {\n                        Url = \"https:\n                        AuthURL = \"https:\n                    },\n                },\n            };\n\n            var testApp = await _applicationApi.CreateApplicationAsync(app, true);\n            try\n            {\n                var testAttributeName = $\"{nameof(UpdateApplicationUserProfileSchemaProperty)}_test_{RandomString(6)}\";\n                var userSchema = await _schemaApi.GetApplicationUserSchemaAsync(testApp.Id);\n                var guid = Guid.NewGuid();\n\n\n                var customAttributeDetails = new UserSchemaAttribute()\n                {\n                    Title = testAttributeName,\n                    Type = \"string\",\n                    Description = guid.ToString(),\n                    MinLength = 1,\n                    MaxLength = 20,\n                };\n\n                var customAttribute = new Dictionary<string, UserSchemaAttribute>();\n                customAttribute[testAttributeName] = customAttributeDetails;\n                userSchema.Definitions.Custom.Properties = customAttribute;\n\n                var updatedUserSchema = await _schemaApi.UpdateApplicationUserProfileAsync(testApp.Id, userSchema);\n\n                var retrievedCustomAttribute = updatedUserSchema.Definitions.Custom.Properties[testAttributeName];\n                retrievedCustomAttribute.Title.Should().Be(testAttributeName);\n                retrievedCustomAttribute.Type.Value.Should().Be(\"string\");\n                retrievedCustomAttribute.Description.Should().Be(guid.ToString());\n                retrievedCustomAttribute.Required.Should().BeFalse();\n                retrievedCustomAttribute.MinLength.Should().Be(1);\n                retrievedCustomAttribute.MaxLength.Should().Be(20);\n\n\n                Thread.Sleep(6000);\n\n\n                customAttribute[testAttributeName] = null;\n                updatedUserSchema.Definitions.Custom.Properties = customAttribute;\n                updatedUserSchema = await _schemaApi.UpdateApplicationUserProfileAsync(testApp.Id, updatedUserSchema);\n                updatedUserSchema.Definitions.Custom.Properties.ContainsKey(testAttributeName).Should().BeFalse();\n            }\n            finally\n            {\n                await _applicationApi.DeactivateApplicationAsync(testApp.Id);\n                await _applicationApi.DeleteApplicationAsync(testApp.Id);\n            }\n        }\n\n        private static string RandomString(int length)\n        {\n            var random = new Random();\n            var result = string.Empty;\n            for (var i = 0; i < length; i++)\n            {\n                result += Convert.ToChar(random.Next(97, 122));\n            }\n\n            return result;\n        }\n    }\n}\n",
        "gt": [
            "'okta-sdk-dotnet/src/Okta.Sdk/Model/PatchAction.cs'",
            "'okta-sdk-dotnet/src/Okta.Sdk/Api/ApplicationSSOApi.cs'",
            "'okta-sdk-dotnet/src/Okta.Sdk.IntegrationTest/SchemaScenarios.cs'"
        ]
    },
    {
        "files": [
            "'ldap4net/LdapForNet.Tests/SendRequestErrorTest.cs'",
            "'ldap4net/LdapForNet/LdapConnection.cs'",
            "'ldap4net/LdapForNet/RequestHandlers/SearchRequestHandler.cs'"
        ],
        "content": "'ldap4net/LdapForNet.Tests/SendRequestErrorTest.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing LdapForNet;\nusing LdapForNet.Native;\nusing Xunit;\nusing Xunit.Abstractions;\nusing static LdapForNet.Native.Native;\n\nnamespace LdapForNetTests\n{\n    public class SendRequestErrorTest\n    {\n        private readonly ITestOutputHelper _testOutputHelper;\n\n\n\n\n\n\n        private static List<string> GetAttributeValue(Dictionary<string, List<string>> attributes, string name)\n        {\n            if (!attributes.TryGetValue(name, out var result))\n            {\n                if (!attributes.TryGetValue(name.ToLower(), out result))\n                {\n                    throw new KeyNotFoundException(name);\n                }\n            }\n\n            return result;\n        }\n    }\n}\n'ldap4net/LdapForNet/LdapConnection.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nusing System.Security.Cryptography.X509Certificates;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing LdapForNet.Native;\nusing LdapForNet.RequestHandlers;\nusing LdapForNet.Utils;\n\nnamespace LdapForNet\n{\n\tpublic class LdapConnection : ILdapConnection\n\t{\n\t\tprivate readonly LdapNative _native;\n\t\tprivate readonly IRequestHandlerResolver _requestHandlerResolver;\n\t\tprivate SafeHandle _ld;\n\t\tprivate bool _bound;\n\t\tprivate TimeSpan _connectionTimeOut = new TimeSpan(0, 0, 30);\n\n\t\tpublic LdapConnection():this(LdapNative.Instance, new RequestHandlerResolver())\n\t\t{\n\t\t}\n\n\t\tinternal LdapConnection(LdapNative native, IRequestHandlerResolver requestHandlerResolver)\n\t\t{\n\t\t\t_native = native;\n\t\t\t_requestHandlerResolver = requestHandlerResolver;\n\t\t}\n\n\t\tpublic TimeSpan Timeout\n\t\t{\n\t\t\tget => _connectionTimeOut;\n\t\t\tset\n\t\t\t{\n\t\t\t\tif (value < TimeSpan.Zero)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(\"Timeout could not be negative value\", nameof(value));\n\t\t\t\t}\n\n\n\t\t\t\tif (value.TotalSeconds > int.MaxValue)\n\t\t\t\t{\n\t\t\t\t\tthrow new ArgumentException(\"Timeout could not be greater than int.MaxValue\", nameof(value));\n\t\t\t\t}\n\n\t\t\t\t_connectionTimeOut = value;\n\t\t\t}\n\t\t}\n\n\t\tpublic void Connect(string url, Native.Native.LdapVersion version = Native.Native.LdapVersion.LDAP_VERSION3)\n\t\t{\n\t\t\tvar details = new Dictionary<string, string>\n\t\t\t{\n\t\t\t\t[nameof(url)] = url,\n\t\t\t\t[nameof(version)] = version.ToString()\n\t\t\t};\n\t\t\tvar nativeHandle = IntPtr.Zero;\n\n\t\t\t_native.ThrowIfError(\n\t\t\t\t_native.Init(ref nativeHandle, url),\n\t\t\t\tnameof(_native.Init),\n\t\t\t\tdetails\n\t\t\t);\n\t\t\t_ld = new LdapHandle(nativeHandle);\n\t\t\tvar ldapVersion = (int)version;\n\n\t\t\t_native.ThrowIfError(\n\t\t\t\t_native.ldap_set_option(_ld, (int)Native.Native.LdapOption.LDAP_OPT_PROTOCOL_VERSION, ref ldapVersion),\n\t\t\t\tnameof(_native.ldap_set_option),\n\t\t\t\tdetails\n\t\t\t);\n\t\t}\n\n\t\tpublic void Bind(Native.Native.LdapAuthType authType, LdapCredential credential)\n\t\t{\n\t\t\tThrowIfNotInitialized();\n\t\t\t_native.LdapConnect(_ld, _connectionTimeOut);\n\n\t\t\tif (authType == Native.Native.LdapAuthType.Simple)\n\t\t\t{\n\t\t\t\t_native.ThrowIfError(_ld, _native.BindSimple(_ld, credential.UserName, credential.Password),\n\t\t\t\t\tnameof(_native.BindSimple));\n\t\t\t}\n\t\t\telse if (authType == Native.Native.LdapAuthType.Anonymous)\n\t\t\t{\n\t\t\t\t_native.BindSimple(_ld, null, null);\n\t\t\t}\n\t\t\telse if (authType == Native.Native.LdapAuthType.ExternalAd)\n\t\t\t{\n\n\t\t\t}\n\t\t\telse if (authType != Native.Native.LdapAuthType.Unknown)\n\t\t\t{\n\t\t\t\t_native.ThrowIfError(_ld, _native.BindSasl(_ld, authType, credential), nameof(_native.BindSasl));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new LdapAuthMethodNotSupportedException(\n\t\t\t\t\tnew LdapExceptionData($\"Not implemented mechanism: {authType.ToString()}. Available: {Native.Native.LdapAuthType.Simple.ToString()} | {Native.Native.LdapAuthType.GssApi}. \"));\n\t\t\t}\n\n\t\t\t_bound = true;\n\t\t}\n\n\t\tpublic async Task BindAsync(Native.Native.LdapAuthType authType, LdapCredential ldapCredential)\n\t\t{\n\t\t\tThrowIfNotInitialized();\n\t\t\t_native.LdapConnect(_ld, _connectionTimeOut);\n\t\t\tvar timeout = GetConnectionTimeval();\n\t\t\tvar result = IntPtr.Zero;\n\t\t\tif (authType == Native.Native.LdapAuthType.Simple)\n\t\t\t{\n\t\t\t\tresult = await _native.BindSimpleAsync(_ld, ldapCredential.UserName, ldapCredential.Password, timeout);\n\t\t\t}\n\t\t\telse if (authType == Native.Native.LdapAuthType.Anonymous)\n\t\t\t{\n\t\t\t\tresult = await _native.BindSimpleAsync(_ld, null, null, timeout);\n\t\t\t}\n\t\t\telse if (authType == Native.Native.LdapAuthType.ExternalAd)\n\t\t\t{\n\n\t\t\t}\n\t\t\telse if (authType != Native.Native.LdapAuthType.Unknown)\n\t\t\t{\n\t\t\t\tresult = await _native.BindSaslAsync(_ld, authType, ldapCredential, timeout);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthrow new LdapAuthMethodNotSupportedException(\n\t\t\t\t\tnew LdapExceptionData($\"Not implemented mechanism: {authType.ToString()}. Available: {Native.Native.LdapAuthType.Simple.ToString()} | {Native.Native.LdapAuthType.GssApi}. \"));\n\t\t\t}\n\n\t\t\tif (result != IntPtr.Zero)\n\t\t\t{\n\t\t\t\tThrowIfParseResultError(result);\n\t\t\t}\n\n\t\t\t_bound = true;\n\t\t}\n\n\t\tpublic void Bind(string mechanism = Native.Native.LdapAuthMechanism.Kerberos, string userDn = null,\n\t\t\tstring password = null)\n\t\t{\n\t\t\tBind(Native.Native.LdapAuthMechanism.ToAuthType(mechanism), new LdapCredential\n\t\t\t{\n\t\t\t\tUserName = userDn,\n\t\t\t\tPassword = password\n\t\t\t});\n\t\t}\n\n\t\tpublic async Task BindAsync(string mechanism = Native.Native.LdapAuthMechanism.Kerberos, string userDn = null,\n\t\t\tstring password = null)\n\t\t{\n\t\t\tawait BindAsync(Native.Native.LdapAuthMechanism.ToAuthType(mechanism), new LdapCredential\n\t\t\t{\n\t\t\t\tUserName = userDn,\n\t\t\t\tPassword = password\n\t\t\t});\n\t\t}\n\n\t\tpublic void SetOption(Native.Native.LdapOption option, int value, bool global = false)\n\t\t{\n\t\t\tThrowIfNotInitialized();\n\t\t\t_native.ThrowIfError(_native.ldap_set_option(GetLdapHandle(global), (int)option, ref value),\n\t\t\t\tnameof(_native.ldap_set_option));\n\t\t}\n\n\t\tpublic void SetOption(Native.Native.LdapOption option, string value, bool global = false)\n\t\t{\n\t\t\tThrowIfNotInitialized();\n\t\t\t_native.ThrowIfError(_native.ldap_set_option(GetLdapHandle(global), (int)option, value),\n\t\t\t\tnameof(_native.ldap_set_option));\n\t\t}\n\n\t\tpublic void SetOption(Native.Native.LdapOption option, IntPtr valuePtr, bool global = false)\n\t\t{\n\t\t\tThrowIfNotInitialized();\n\t\t\t_native.ThrowIfError(_native.ldap_set_option(GetLdapHandle(global), (int)option, valuePtr),\n\t\t\t\tnameof(_native.ldap_set_option));\n\t\t}\n\n\t\tpublic T GetOption<T>(Native.Native.LdapOption option)\n\t\t{\n\t\t\tThrowIfNotInitialized();\n\t\t\tThrowIfWrongOutputType<T>();\n\n\t\t\tvar type = typeof(T);\n\t\t\tobject output = default;\n\t\t\tvar rc = -1;\n\t\t\tvar ldapHandle = GetLdapHandle(false);\n\n\t\t\tif (type == typeof(string))\n\t\t\t{\n\t\t\t\tstring value = default;\n\t\t\t\trc = _native.ldap_get_option(ldapHandle, (int)option, ref value);\n\t\t\t\toutput = value;\n\t\t\t}\n\n\t\t\tif (type == typeof(int))\n\t\t\t{\n\t\t\t\tint value = default;\n\t\t\t\trc = _native.ldap_get_option(ldapHandle, (int)option, ref value);\n\t\t\t\toutput = value;\n\t\t\t}\n\n\t\t\tif (type == typeof(IntPtr))\n\t\t\t{\n\t\t\t\tIntPtr value = default;\n\t\t\t\trc = _native.ldap_get_option(ldapHandle, (int)option, ref value);\n\t\t\t\toutput = value;\n\t\t\t}\n\n\t\t\t_native.ThrowIfError(rc, nameof(_native.ldap_get_option));\n\t\t\treturn (T)output;\n\t\t}\n\n\t\tprivate static void ThrowIfWrongOutputType<T>()\n\t\t{\n\t\t\tvar type = typeof(T);\n\t\t\tif (type != typeof(string) && type != typeof(int) && type != typeof(IntPtr))\n\t\t\t{\n\t\t\t\tthrow new ArgumentException(\n\t\t\t\t\t$\"The type {type} of return value is not valid. Valid types: {nameof(String)}, {nameof(Int32)}, {nameof(IntPtr)}\");\n\t\t\t}\n\t\t}\n\n\t\tprivate SafeHandle GetLdapHandle(bool global) => global ? new LdapHandle(IntPtr.Zero) : _ld;\n\n\t\tpublic IList<LdapEntry> Search(string @base, string filter, string[] attributes = default,\n\t\t\tNative.Native.LdapSearchScope scope = Native.Native.LdapSearchScope.LDAP_SCOPE_SUBTREE)\n\t\t{\n\t\t\tvar response = (SearchResponse)SendRequest(new SearchRequest(@base, filter, scope, attributes));\n\n\t\t\treturn response.Entries\n\t\t\t\t.Select(_ => _.ToLdapEntry())\n\t\t\t\t.ToList();\n\t\t}\n\n\t\tpublic async Task<IList<LdapEntry>> SearchAsync(string @base, string filter, string[] attributes = default,\n\t\t\tNative.Native.LdapSearchScope scope = Native.Native.LdapSearchScope.LDAP_SCOPE_SUBTREE,\n\t\t\tCancellationToken token = default)\n\t\t{\n\t\t\tvar response =\n\t\t\t\t(SearchResponse)await SendRequestAsync(new SearchRequest(@base, filter, scope, attributes), token);\n\n\t\t\treturn response.Entries\n\t\t\t\t.Select(_ => _.ToLdapEntry())\n\t\t\t\t.ToList();\n\t\t}\n\n\t\tpublic void Add(LdapEntry entry) => SendRequest(new AddRequest(entry));\n\n\t\tpublic async Task<DirectoryResponse> SendRequestAsync(DirectoryRequest directoryRequest,\n\t\t\tCancellationToken token = default)\n\t\t{\n\t\t\ttoken.ThrowIfCancellationRequested();\n\n\t\t\tThrowIfNotBound();\n\n\t\t\tvar requestHandler = SendRequest(directoryRequest, out var messageId);\n\n\t\t\tvar response =  await Task.Factory\n\t\t\t\t.StartNew(() => ProcessResponse(directoryRequest, requestHandler, messageId, token), token)\n\t\t\t\t.ConfigureAwait(false);\n\t\t\tThrowIfResponseError(response);\n\t\t\treturn response;\n\t\t}\n\n\t\tpublic DirectoryResponse SendRequest(DirectoryRequest directoryRequest)\n\t\t{\n\t\t\tThrowIfNotBound();\n\t\t\tvar requestHandler = SendRequest(directoryRequest, out var messageId);\n\t\t\tvar response = ProcessResponse(directoryRequest, requestHandler, messageId, CancellationToken.None);\n            ThrowIfResponseError(response);\n            return response;\n\t\t}\n\n\t\tpublic void StartTransportLayerSecurity(bool trustAll = false)\n\t\t{\n\t\t\tThrowIfNotInitialized();\n\t\t\tif (trustAll)\n\t\t\t{\n\t\t\t\tTrustAllCertificates(CertificateOptions.StartTls);\n\t\t\t}\n\n\t\t\tSendRequest(new TransportLayerSecurityRequest(), out _);\n\t\t}\n\n\t\tpublic void TrustAllCertificates(CertificateOptions certificateType = CertificateOptions.SslTls)\n\t\t{\n\t\t\t_native.ThrowIfError(_native.TrustAllCertificates(_ld, certificateType), nameof(_native.TrustAllCertificates));\n\t\t}\n\n\t\tpublic void SetClientCertificate(X509Certificate2 certificate)\n\t\t{\n\t\t\tThrowIfNotInitialized();\n\t\t\t_native.ThrowIfError(_native.SetClientCertificate(_ld, certificate), nameof(_native.SetClientCertificate));\n\t\t}\n\n\n\t\tpublic async Task ModifyAsync(LdapModifyEntry entry, CancellationToken token = default) =>\n\t\t\tawait SendRequestAsync(new ModifyRequest(entry), token);\n\n\t\tpublic void Modify(LdapModifyEntry entry) => SendRequest(new ModifyRequest(entry));\n\n\t\tpublic void Dispose()\n\t\t{\n\t\t\t_native.Dispose(_ld);\n\t\t\t_ld?.Dispose();\n\t\t}\n\n\t\t[Obsolete]\n\t\tpublic IntPtr GetNativeLdapPtr()\n\t\t{\n\t\t\treturn _ld.DangerousGetHandle();\n\t\t}\n\n\t\tpublic async Task DeleteAsync(string dn, CancellationToken cancellationToken = default) =>\n\t\t\tawait SendRequestAsync(new DeleteRequest(dn), cancellationToken);\n\n\t\tpublic void Delete(string dn) => SendRequest(new DeleteRequest(dn));\n\n\t\tpublic async Task RenameAsync(string dn, string newRdn, string newParent, bool isDeleteOldRdn,\n\t\t\tCancellationToken cancellationToken = default) =>\n\t\t\tawait SendRequestAsync(\n\t\t\t\tnew ModifyDNRequest(dn, newParent, newRdn) { DeleteOldRdn = isDeleteOldRdn },\n\t\t\t\tcancellationToken);\n\n\t\tpublic void Rename(string dn, string newRdn, string newParent, bool isDeleteOldRdn) =>\n\t\t\tSendRequest(new ModifyDNRequest(dn, newParent, newRdn) { DeleteOldRdn = isDeleteOldRdn });\n\n\t\tpublic void Abandon(AbandonRequest abandonRequest)\n\t\t{\n\t\t\tThrowIfNotInitialized();\n\t\t\tSendRequest(abandonRequest, out _);\n\t\t}\n\n\t\tpublic async Task AddAsync(LdapEntry entry, CancellationToken token = default) =>\n\t\t\tawait SendRequestAsync(new AddRequest(entry), token);\n\n\n\t\tprivate DirectoryResponse ProcessResponse(DirectoryRequest directoryRequest,\n\t\t\tRequestHandler requestHandler, int messageId,\n\t\t\tCancellationToken token)\n\t\t{\n\t\t\tvar status = LdapResultCompleteStatus.Unknown;\n\t\t\tvar msg = Marshal.AllocHGlobal(IntPtr.Size);\n\n\t\t\tvar timeout = GetConnectionTimeval();\n\n\t\t\tdirectoryRequest.MessageId = messageId;\n\t\t\tusing(token.Register(() => Abandon(new AbandonRequest(messageId))))\n\t\t\t{\n\t\t\t\tDirectoryResponse response = default;\n\t\t\t\twhile (status != LdapResultCompleteStatus.Complete && !token.IsCancellationRequested)\n\t\t\t\t{\n\t\t\t\t\tvar resType = _native.ldap_result(_ld, messageId, 0, timeout, ref msg);\n\t\t\t\t\tThrowIfResultError(directoryRequest, resType, response);\n\n\t\t\t\t\tstatus = requestHandler.Handle(_ld, resType, msg, out response);\n\t\t\t\t\tresponse.MessageId = messageId;\n\n\t\t\t\t\tif (status == LdapResultCompleteStatus.Unknown)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow new LdapException(new LdapExceptionData($\"Unknown search type {resType}\", nameof(_native.ldap_result), 1){ Response = response});\n\t\t\t\t\t}\n\n\t\t\t\t\tif (status == LdapResultCompleteStatus.Complete)\n\t\t\t\t\t{\n\t\t\t\t\t\tvar responseReferral = new Uri[0];\n\t\t\t\t\t\tvar responseControl = new DirectoryControl[0];\n\t\t\t\t\t\tvar res = ParseResultError(msg, out var errorMessage, out var matchedDn, ref responseReferral, ref responseControl);\n\n                        if (res == (int)Native.Native.ResultCode.SizeLimitExceeded\n                            && directoryRequest is SearchRequest searchRequest\n                            && response is SearchResponse searchResponse\n                            && searchRequest.SizeLimit != 0\n                            && searchResponse.Entries.Count >= searchRequest.SizeLimit)\n                        {\n\t\t\t\t\t\t\tDebug.WriteLine(\"ldap_parse_result returned ResultCode.SizeLimitExceeded but the correct number of entries were already returned\");\n                            res = (int)Native.Native.ResultCode.Success;\n                            errorMessage = null;\n                        }\n\n                        response.ResultCode = (Native.Native.ResultCode)res;\n\t\t\t\t\t\tresponse.ErrorMessage = errorMessage;\n\t\t\t\t\t\tresponse.Referral = responseReferral;\n\t\t\t\t\t\tresponse.Controls = responseControl;\n\t\t\t\t\t\tresponse.MatchedDN = matchedDn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn response;\n\t\t\t}\n\t\t}\n\n\t\tprivate LDAP_TIMEVAL GetConnectionTimeval()\n\t\t{\n\t\t\treturn new LDAP_TIMEVAL\n\t\t\t{\n\t\t\t\ttv_sec = (int)(_connectionTimeOut.Ticks / TimeSpan.TicksPerSecond)\n\t\t\t};\n\t\t}\n\n\t\tprivate RequestHandler SendRequest(DirectoryRequest directoryRequest, out int messageId)\n\t\t{\n\t\t\tvar requestHandler = _requestHandlerResolver.Resolve(directoryRequest);\n\t\t\tmessageId = 0;\n\t\t\t_native.ThrowIfError(_ld, requestHandler.SendRequest(_ld, directoryRequest, ref messageId),\n\t\t\t\trequestHandler.GetType().Name);\n\t\t\treturn requestHandler;\n\t\t}\n\n\t\tprivate void ThrowIfResultError(DirectoryRequest directoryRequest, Native.Native.LdapResultType resType, DirectoryResponse directoryResponse)\n\t\t{\n\t\t\tswitch (resType)\n\t\t\t{\n\t\t\t\tcase Native.Native.LdapResultType.LDAP_ERROR:\n\t\t\t\t\tvar error = _native.LdapGetLastError(_ld);\n\t\t\t\t\tif (error != (int)Native.Native.ResultCode.Success)\n\t\t\t\t\t{\n\t\t\t\t\t\tthrow _native.ConstructException(new LdapExceptionData(_native.LdapError2String(error),\n\t\t\t\t\t\t\tdirectoryRequest.GetType().Name, error)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tResponse = directoryResponse\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase Native.Native.LdapResultType.LDAP_TIMEOUT:\n\t\t\t\t\tthrow new LdapTimeoutException(new LdapExceptionData(\"Timeout exceeded\", nameof(_native.ldap_result), 1)\n\t\t\t\t\t{\n\t\t\t\t\t\tResponse = directoryResponse\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tprivate void ThrowIfParseResultError(IntPtr msg)\n\t\t{\n\t\t\tvar responseReferral = new Uri[0];\n\t\t\tvar responseControl = new DirectoryControl[0];\n\t\t\tvar res = ParseResultError(msg, out var errorMessage, out var matchedMessage, ref responseReferral, ref responseControl);\n\t\t\t_native.ThrowIfError(_ld, res, nameof(_native.ldap_parse_result), new Dictionary<string, string>\n\t\t\t{\n\t\t\t\t[nameof(errorMessage)] = errorMessage,\n\t\t\t\t[nameof(matchedMessage)] = matchedMessage\n\t\t\t});\n\t\t}\n\n\t\tprivate int ParseResultError(IntPtr msg, out string errorMessage, out string matchedDn, ref Uri[] responseReferral, ref DirectoryControl[] responseControl)\n\t\t{\n\t\t\tvar matchedDnPtr = IntPtr.Zero;\n\t\t\tvar errorMessagePtr = IntPtr.Zero;\n\t\t\tvar rc = 0;\n\t\t\tvar referrals = IntPtr.Zero;\n\t\t\tvar serverctrls = IntPtr.Zero;\n\t\t\t_native.ThrowIfError(_ld, _native.ldap_parse_result(_ld, msg, ref rc, ref matchedDnPtr, ref errorMessagePtr,\n\t\t\t\tref referrals, ref serverctrls, 1), nameof(_native.ldap_parse_result));\n\t\t\terrorMessage = Encoder.Instance.PtrToString(errorMessagePtr);\n\t\t\tmatchedDn = Encoder.Instance.PtrToString(matchedDnPtr);\n\t\t\tif (referrals != IntPtr.Zero)\n\t\t\t{\n\n\t\t\t}\n\n\t\t\tif (serverctrls != IntPtr.Zero)\n\t\t\t{\n\t\t\t\tresponseControl = MarshalUtils.GetPointerArray(serverctrls)\n\t\t\t\t\t.Select(ConstructControl)\n\t\t\t\t\t.ToArray();\n\t\t\t}\n\n\t\t\treturn rc;\n\t\t}\n\n\t\tprivate DirectoryControl ConstructControl(IntPtr controlPtr)\n\t\t{\n\t\t\tvar control = new Native.Native.LdapControl();\n\t\t\tMarshal.PtrToStructure(controlPtr, control);\n\n\t\t\tvar controlType = Encoder.Instance.PtrToString(control.ldctl_oid);\n\n\t\t\tvar bytes = new byte[control.ldctl_value.bv_len];\n\t\t\tMarshal.Copy(control.ldctl_value.bv_val, bytes, 0, control.ldctl_value.bv_len);\n\n\t\t\tvar criticality = control.ldctl_iscritical;\n\n\t\t\treturn new DirectoryControl(controlType, bytes, criticality, true);\n\t\t}\n\n\t\tprivate void ThrowIfNotInitialized()\n\t\t{\n\t\t\tif (_ld == null || _ld.IsInvalid)\n\t\t\t{\n\t\t\t\tthrow new LdapException(new LdapExceptionData($\"Not initialized connection. Please invoke {nameof(Connect)} method before.\"));\n\t\t\t}\n\t\t}\n\n\t\tprivate void ThrowIfNotBound()\n\t\t{\n\t\t\tThrowIfNotInitialized();\n\t\t\tif (_bound == false)\n\t\t\t{\n\t\t\t\tthrow new LdapException(new LdapExceptionData($\"Not bound. Please invoke {nameof(Bind)} method before.\"));\n\t\t\t}\n\t\t}\n\n\t\tprivate void ThrowIfResponseError(DirectoryResponse response)\n\t\t{\n\t\t\t_native.ThrowIfError(_ld, (int)response.ResultCode, nameof(_native.ldap_parse_result),\n\t\t\t\tnew Dictionary<string, string>\n\t\t\t\t{\n\t\t\t\t\t[nameof(response.ErrorMessage)] = response.ErrorMessage,\n\t\t\t\t});\n\t\t}\n\t}\n}\n'ldap4net/LdapForNet/RequestHandlers/SearchRequestHandler.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Runtime.InteropServices;\nusing LdapForNet.Utils;\n\nnamespace LdapForNet.RequestHandlers\n{\n    internal class SearchRequestHandler : RequestHandler\n    {\n        private readonly SearchResponse _response = new SearchResponse();\n        private SearchRequest _request;\n        protected override int SendRequest(SafeHandle handle, DirectoryRequest request, IntPtr serverControlArray, IntPtr clientControlArray, ref int messageId)\n        {\n            if (request is SearchRequest searchRequest)\n            {\n                _request = searchRequest;\n                var attributes = GetAttributesPtr(searchRequest);\n                var searchTimeLimit = (int)(searchRequest.TimeLimit.Ticks / TimeSpan.TicksPerSecond);\n                var res = Native.Search(\n                    handle,\n                    searchRequest.DistinguishedName,\n                    (int)searchRequest.Scope,\n                    searchRequest.Filter,\n                    attributes,\n                    searchRequest.AttributesOnly ? 1 : 0,\n                    serverControlArray,\n                    clientControlArray,\n                    searchTimeLimit,\n                    searchRequest.SizeLimit,\n                    ref messageId);\n\n                _response.MessageId = messageId;\n\n                FreeAttributes(attributes);\n                return res;\n            }\n\n            return 0;\n        }\n\n        public override LdapResultCompleteStatus Handle(SafeHandle handle, Native.Native.LdapResultType resType, IntPtr msg, out DirectoryResponse response)\n        {\n            response = _response;\n            LdapResultCompleteStatus resultStatus;\n            switch (resType)\n            {\n                case LdapForNet.Native.Native.LdapResultType.LDAP_RES_SEARCH_ENTRY:\n                    var ber = Marshal.AllocHGlobal(IntPtr.Size);\n                    try\n                    {\n                        var directoryEntries = GetLdapEntries(handle, msg, ber).ToList();\n                        _response.Entries.AddRange(directoryEntries);\n\n                        OnPartialResult(_response.MessageId, directoryEntries);\n                    }\n                    finally\n                    {\n                        Marshal.FreeHGlobal(ber);\n                        Native.ldap_msgfree(msg);\n                    }\n\n                    resultStatus =  LdapResultCompleteStatus.Partial;\n                    break;\n\n                case LdapForNet.Native.Native.LdapResultType.LDAP_RES_SEARCH_REFERENCE:\n                    var reference = GetLdapReference(handle, msg);\n                    if (reference != null)\n                    {\n                        _response.References.Add(reference);\n                    }\n                    resultStatus = LdapResultCompleteStatus.Partial;\n                    break;\n\n                case LdapForNet.Native.Native.LdapResultType.LDAP_RES_SEARCH_RESULT:\n                    resultStatus = LdapResultCompleteStatus.Complete;\n                    break;\n\n                default:\n                    resultStatus = LdapResultCompleteStatus.Unknown;\n                    break;\n            }\n\n            return resultStatus;\n        }\n\n        private void OnPartialResult(int messageId, List<DirectoryEntry> directoryEntries)\n        {\n            try\n            {\n                _request?.OnPartialResult?.Invoke(new SearchResponse\n                {\n                    Entries = directoryEntries,\n                    MessageId = messageId\n                });\n            }\n            catch\n            {\n\n            }\n\n        }\n\n        private IEnumerable<DirectoryEntry> GetLdapEntries(SafeHandle ld, IntPtr msg, IntPtr ber)\n        {\n            for (var entry = Native.ldap_first_entry(ld, msg); entry != IntPtr.Zero;\n                entry = Native.ldap_next_entry(ld, entry))\n            {\n                yield return new DirectoryEntry\n                {\n                    Dn = GetLdapDn(ld, entry),\n                    Attributes = GetLdapAttributes(ld, entry, ref ber)\n                };\n            }\n        }\n\n        private SearchResultAttributeCollection GetLdapAttributes(SafeHandle ld, IntPtr entry, ref IntPtr ber)\n        {\n            var attributes = new SearchResultAttributeCollection();\n            for (var attr = Native.ldap_first_attribute(ld, entry, ref ber);\n                attr != IntPtr.Zero;\n                attr = Native.ldap_next_attribute(ld, entry, ber))\n            {\n                var vals = Native.ldap_get_values_len(ld, entry, attr);\n                if (vals != IntPtr.Zero)\n                {\n                    var attrName = Encoder.Instance.PtrToString(attr);\n                    if (attrName != null)\n                    {\n                        var directoryAttribute = new DirectoryAttribute\n                        {\n                            Name = attrName\n                        };\n                        directoryAttribute.AddValues(MarshalUtils.BerValArrayToByteArrays(vals));\n                        attributes.Add(directoryAttribute);\n                    }\n                    Native.ldap_value_free_len(vals);\n                }\n\n                Native.ldap_memfree(attr);\n            }\n\n            return attributes;\n        }\n\n        private string GetLdapDn(SafeHandle ld, IntPtr entry)\n        {\n            var ptr = Native.ldap_get_dn(ld, entry);\n            var dn = Encoder.Instance.PtrToString(ptr);\n            Native.ldap_memfree(ptr);\n            return dn;\n        }\n\n        private LdapSearchResultReference GetLdapReference(SafeHandle ld, IntPtr msg)\n        {\n            var ctrls = IntPtr.Zero;\n\n            try\n            {\n                var referencePtr = IntPtr.Zero;\n                var rc = Native.ldap_parse_reference(ld, msg, ref referencePtr, ref ctrls, 0);\n                Native.ThrowIfError(ld, rc, nameof(Native.ldap_parse_reference));\n                var arr = MarshalUtils.GetPointerArray(referencePtr);\n                var uris = arr.Select(_ => new Uri(Encoder.Instance.PtrToString(_))).ToArray();\n                if (uris.Any())\n                {\n                    return new LdapSearchResultReference(uris, null);\n                }\n            }\n            finally\n            {\n                if (ctrls != IntPtr.Zero)\n                {\n                    Native.ldap_controls_free(ctrls);\n                }\n            }\n\n            return null;\n        }\n\n\n\n        private static IntPtr GetAttributesPtr(SearchRequest searchRequest)\n        {\n\n            var attributeCount = searchRequest.Attributes?.Count ?? 0;\n            var searchAttributes = IntPtr.Zero;\n            if (searchRequest.Attributes == null || attributeCount == 0)\n            {\n                return searchAttributes;\n            }\n\n\n            searchAttributes = MarshalUtils.AllocHGlobalIntPtrArray(attributeCount + 1);\n            int i;\n            for (i = 0; i < attributeCount; i++)\n            {\n                var controlPtr = Encoder.Instance.StringToPtr(searchRequest.Attributes[i]);\n                Marshal.WriteIntPtr(searchAttributes, IntPtr.Size * i, controlPtr);\n            }\n\n            Marshal.WriteIntPtr(searchAttributes, IntPtr.Size * i, IntPtr.Zero);\n\n            return searchAttributes;\n        }\n\n        private static void FreeAttributes(IntPtr attributes)\n        {\n            foreach (var tempPtr in MarshalUtils.GetPointerArray(attributes))\n            {\n                Marshal.FreeHGlobal(tempPtr);\n            }\n            Marshal.FreeHGlobal(attributes);\n        }\n\n\n    }\n}",
        "gt": [
            "'ldap4net/LdapForNet/RequestHandlers/SearchRequestHandler.cs'",
            "'ldap4net/LdapForNet/LdapConnection.cs'",
            "'ldap4net/LdapForNet.Tests/SendRequestErrorTest.cs'"
        ]
    },
    {
        "files": [
            "'sblog.net/sBlog.Net/Mappers/PathMapper.cs'",
            "'sblog.net/sBlog.Net/Providers/RolePossibilitiesProviderModel.cs'",
            "'sblog.net/sBlog.Net/DependencyManagement/NinjectControllerFactory.cs'",
            "'sblog.net/sBlog.Net/Areas/Admin/Controllers/AdminController.cs'"
        ],
        "content": "'sblog.net/sBlog.Net/Mappers/PathMapper.cs'\n:﻿#region Disclaimer/License Info\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing System.Web;\nusing sBlog.Net.Domain.Interfaces;\n\nnamespace sBlog.Net.Mappers\n{\n    public class PathMapper : IPathMapper\n    {\n        public string MapPath(string relativePath)\n        {\n            return HttpContext.Current\n                              .Server\n                              .MapPath(relativePath);\n        }\n    }\n}\n\n'sblog.net/sBlog.Net/Providers/RolePossibilitiesProviderModel.cs'\n:﻿#region Disclaimer/License Info\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing System.Collections.Generic;\nusing System.Globalization;\nusing System.Linq;\nusing System.Web.Mvc;\nusing sBlog.Net.DependencyManagement;\n\nnamespace sBlog.Net.Providers\n{\n    public static class RolePossibilitiesProviderModel\n    {\n        public static List<SelectListItem> AvailableRoles\n        {\n            get\n            {\n                var roleRepository = InstanceFactory.CreateRoleInstance();\n                return roleRepository.GetAllRoles()\n                                     .Select(\n                                         r => new SelectListItem\n                                              {\n                                                 Text = r.RoleDescription,\n                                                 Value = r.RoleId.ToString(CultureInfo.InvariantCulture)\n                                              })\n                                     .ToList();\n            }\n        }\n    }\n}\n'sblog.net/sBlog.Net/DependencyManagement/NinjectControllerFactory.cs'\n:﻿#region Disclaimer/License Info\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing System;\nusing System.Web;\nusing System.Web.Mvc;\nusing Ninject;\nusing Ninject.Modules;\nusing sBlog.Net.CustomExceptions;\nusing sBlog.Net.Domain.Interfaces;\nusing sBlog.Net.Domain.Concrete;\nusing sBlog.Net.Mappers;\nusing sBlog.Net.Services;\nusing System.Net;\nusing System.Web.Routing;\n\nnamespace sBlog.Net.DependencyManagement\n{\n    public class NinjectControllerFactory : DefaultControllerFactory\n    {\n        private readonly IKernel _kernel = new StandardKernel(new ApplicationIocServices());\n\n\n\n\n\n        public IKernel GetKernel()\n        {\n            return _kernel;\n        }\n\n\n\n\n\n\n\n\n        protected override IController GetControllerInstance(RequestContext requestContext, Type controllerType)\n        {\n            if (controllerType == null)\n            {\n                try\n                {\n                    var defaultController = base.GetControllerInstance(requestContext, null);\n                    return defaultController;\n                }\n                catch (HttpException httpException)\n                {\n                    if (httpException.GetHttpCode() == (int) HttpStatusCode.NotFound)\n                        throw new UrlNotFoundException(\"Unable to find a controller\");\n                    throw;\n                }\n            }\n\n            return (IController)_kernel.Get(controllerType);\n        }\n\n        private class ApplicationIocServices : NinjectModule\n        {\n            public override void Load()\n            {\n                Bind<IUser>().To<User>();\n                Bind<IPost>().To<Post>();\n                Bind<IComment>().To<Comment>();\n                Bind<ICategory>().To<Category>();\n                Bind<ITag>().To<Tag>();\n                Bind<ISettings>().To<Settings>();\n                Bind<IPathMapper>().To<PathMapper>();\n                Bind<IError>().To<Error>();\n                Bind<ICacheService>().To<CacheService>();\n                Bind<IRole>().To<Role>();\n                Bind<ISchema>().To<Schema>();\n            }\n        }\n    }\n}\n\n'sblog.net/sBlog.Net/Areas/Admin/Controllers/AdminController.cs'\n:﻿#region Disclaimer/License Info\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web.Mvc;\nusing sBlog.Net.DB.Enumerations;\nusing sBlog.Net.DB.Helpers;\nusing sBlog.Net.DB.Services;\nusing sBlog.Net.Models;\nusing sBlog.Net.Providers;\nusing sBlog.Net.Controllers;\nusing sBlog.Net.Infrastructure;\nusing sBlog.Net.Models.Account;\nusing sBlog.Net.Domain.Entities;\nusing sBlog.Net.ShortCodeManager;\nusing sBlog.Net.Domain.Utilities;\nusing sBlog.Net.Domain.Interfaces;\nusing sBlog.Net.Domain.Generators;\nusing sBlog.Net.Areas.Admin.Models;\nusing System.Text.RegularExpressions;\n\nnamespace sBlog.Net.Areas.Admin.Controllers\n{\n    public class AdminController : BlogController\n    {\n        private readonly IPost _postRepository;\n        private readonly IComment _commentRepository;\n        private readonly ICategory _categoryRepository;\n        private readonly ITag _tagRepository;\n        private readonly IPathMapper _pathMapper;\n        private readonly IUser _userRepository;\n        private readonly ISchema _schemaRepository;\n\n        public AdminController(IPost postRepository, IComment commentRepository, ICategory categoryRepository, ITag tagRepository, ISettings settingsRepository, IPathMapper pathMapper, IUser userRepository, ISchema schemaRepository)\n            : base(settingsRepository)\n        {\n            _postRepository = postRepository;\n            _commentRepository = commentRepository;\n            _categoryRepository = categoryRepository;\n            _tagRepository = tagRepository;\n            _pathMapper = pathMapper;\n            _userRepository = userRepository;\n            _schemaRepository = schemaRepository;\n            ExpectedMasterName = string.Empty;\n\n            IsAdminController = true;\n        }\n\n        [Authorize]\n        public ActionResult Index()\n        {\n            var comments = _commentRepository.GetAllComments();\n            var userId = GetUserId();\n            var userEntity = _userRepository.GetUserObjByUserID(GetUserId());\n            var posts = _postRepository.GetPostsByUserID(userId).Select(p => p.PostID);\n            var filteredComments = comments.Where(c => posts.Contains(c.PostID)).ToList();\n\n            var model = new AdminDashboardViewModel\n            {\n                PostCount = _postRepository.GetPostsByUserID(userId, 1).Count,\n                PagesCount = _postRepository.GetPostsByUserID(userId, 2).Count,\n                CategoriesCount = _categoryRepository.GetCategories().Count,\n                TagsCount = _tagRepository.GetAllTags().Count,\n\n                AllCommentsCount = filteredComments.Count(),\n                ApprovedCount = filteredComments.Count(c => c.CommentStatus == 0),\n                PendingCount = filteredComments.Count(c => c.CommentStatus == 1),\n                SpamCount = filteredComments.Count(c => c.CommentStatus == 2),\n\n                CanView = userId == 1,\n\n                BlogName = SettingsRepository.BlogName,\n\n                DisplayName = userEntity.UserDisplayName\n            };\n\n            return View(model);\n        }\n\n        [Authorize(Roles = \"SuperAdmin\")]\n        public ActionResult Settings()\n        {\n            var akismetUrl = string.IsNullOrEmpty(SettingsRepository.BlogAkismetUrl)\n                                 ? GetRootUrl().TrimEnd('/')\n                                 : SettingsRepository.BlogAkismetUrl;\n            var adminSettings = new AdminSettingsViewModel\n            {\n                BlogName = SettingsRepository.BlogName,\n                BlogCaption = SettingsRepository.BlogCaption,\n                BlogTheme = SettingsRepository.BlogTheme,\n                BlogSocialSharing = SettingsRepository.BlogSocialSharing,\n                BlogSyntaxHighlighting = SettingsRepository.BlogSyntaxHighlighting,\n                PostsPerPage = SettingsRepository.BlogPostsPerPage,\n                AkismetEnabled = SettingsRepository.BlogAkismetEnabled,\n                AkismetDeleteSpam = SettingsRepository.BlogAkismetDeleteSpam,\n                AkismetKey = SettingsRepository.BlogAkismetKey,\n                AkismetUrl = akismetUrl,\n                AdminEmailAddress = SettingsRepository.BlogAdminEmailAddress,\n                BlogSmtpAddress = SettingsRepository.BlogSmtpAddress,\n                ManageItemsPerPage = SettingsRepository.ManageItemsPerPage,\n                BlogErrorAction = SettingsRepository.BlogSiteErrorEmailAction,\n                Title = SettingsRepository.BlogName,\n                DisqusEnabled = SettingsRepository.DisqusEnabled,\n                DisqusShortName = SettingsRepository.BlogDisqusShortName,\n                EditorType = SettingsRepository.EditorType,\n\n                BlogThemes = GetAvailableThemes(SettingsRepository.BlogTheme),\n                EditorTypes = GetEditorTypes()\n            };\n            return View(adminSettings);\n        }\n\n        [Authorize(Roles = \"SuperAdmin\")]\n        [HttpPost]\n        public ActionResult Settings(AdminSettingsViewModel adminSettingsViewModel)\n        {\n            adminSettingsViewModel.BlogThemes = GetAvailableThemes(adminSettingsViewModel.BlogTheme);\n            adminSettingsViewModel.EditorTypes = GetEditorTypes();\n\n            if (ModelState.IsValid && ValidateAkismetSettings(adminSettingsViewModel))\n            {\n                SettingsRepository.BlogName = adminSettingsViewModel.BlogName;\n                SettingsRepository.BlogCaption = adminSettingsViewModel.BlogCaption;\n                SettingsRepository.BlogTheme = adminSettingsViewModel.BlogTheme;\n                SettingsRepository.BlogSocialSharing = adminSettingsViewModel.BlogSocialSharing;\n                SettingsRepository.BlogSyntaxHighlighting = adminSettingsViewModel.BlogSyntaxHighlighting;\n                SettingsRepository.BlogPostsPerPage = adminSettingsViewModel.PostsPerPage;\n                SettingsRepository.BlogAkismetEnabled = adminSettingsViewModel.AkismetEnabled;\n                SettingsRepository.BlogAkismetDeleteSpam = adminSettingsViewModel.AkismetDeleteSpam;\n                SettingsRepository.BlogAkismetKey = adminSettingsViewModel.AkismetKey;\n                SettingsRepository.BlogAkismetUrl = adminSettingsViewModel.AkismetUrl;\n                SettingsRepository.BlogAdminEmailAddress = adminSettingsViewModel.AdminEmailAddress;\n                SettingsRepository.BlogSmtpAddress = adminSettingsViewModel.BlogSmtpAddress;\n                SettingsRepository.EditorType = adminSettingsViewModel.EditorType;\n\n                if (!string.IsNullOrEmpty(adminSettingsViewModel.BlogSmtpPassword))\n                {\n                    SettingsRepository.BlogSmtpPassword = TripleDES.EncryptString(adminSettingsViewModel.BlogSmtpPassword);\n                }\n\n                SettingsRepository.ManageItemsPerPage = adminSettingsViewModel.ManageItemsPerPage;\n                SettingsRepository.BlogSiteErrorEmailAction = adminSettingsViewModel.BlogErrorAction;\n                SettingsRepository.DisqusEnabled = adminSettingsViewModel.DisqusEnabled;\n                SettingsRepository.BlogDisqusShortName = adminSettingsViewModel.DisqusShortName;\n            }\n\n            adminSettingsViewModel.UpdateStatus = true;\n            adminSettingsViewModel.Title = SettingsRepository.BlogName;\n\n            return View(adminSettingsViewModel);\n        }\n\n        private bool ValidateAkismetSettings(AdminSettingsViewModel adminSettingsViewModel)\n        {\n            if (!adminSettingsViewModel.AkismetEnabled)\n                return true;\n\n            Uri url;\n            if (string.IsNullOrEmpty(adminSettingsViewModel.AkismetUrl) || !Uri.TryCreate(adminSettingsViewModel.AkismetUrl, UriKind.Absolute, out url))\n            {\n                ModelState.AddModelError(\"Akismet_Url\", \"Akismet url entered is invalid\");\n                return false;\n            }\n\n            if (string.IsNullOrEmpty(adminSettingsViewModel.AkismetKey))\n            {\n                ModelState.AddModelError(\"Akismet_Key\", \"Akismet key entered is invalid\");\n                return false;\n            }\n\n            return true;\n        }\n\n        [Authorize(Roles = \"SuperAdmin\")]\n        public ActionResult EnableSocialSharing(bool enableSocialSharing)\n        {\n            if (enableSocialSharing)\n                SettingsRepository.BlogSocialSharing = true;\n            return RedirectToRoute(\"AdminSocialSharingOptions\");\n        }\n\n        [Authorize(Roles = \"SuperAdmin\")]\n        public ActionResult SocialSharingOptions()\n        {\n            var selectedSharing = SettingsRepository.BlogSocialSharingChoice;\n            var adminSocialSharingOptions = AdminSocialSharingOptions.Create(selectedSharing);\n            adminSocialSharingOptions.Title = SettingsRepository.BlogName;\n            adminSocialSharingOptions.IsEnabled = SettingsRepository.BlogSocialSharing;\n            return View(adminSocialSharingOptions);\n        }\n\n        [Authorize(Roles = \"SuperAdmin\")]\n        [HttpPost]\n        public ActionResult SocialSharingOptions(int selectedSharingOption)\n        {\n            SettingsRepository.BlogSocialSharingChoice = selectedSharingOption;\n            var adminSocialSharingOptions = AdminSocialSharingOptions.Create(selectedSharingOption, true);\n            adminSocialSharingOptions.Title = SettingsRepository.BlogName;\n            adminSocialSharingOptions.IsEnabled = SettingsRepository.BlogSocialSharing;\n            return View(adminSocialSharingOptions);\n        }\n\n        [Authorize(Roles = \"SuperAdmin\")]\n        public ActionResult EnableSyntaxHighlighter(bool enableSyntaxHighlighter)\n        {\n            if (enableSyntaxHighlighter)\n                SettingsRepository.BlogSyntaxHighlighting = true;\n            return RedirectToRoute(\"AdminSyntaxHighlighterOptions\");\n        }\n\n        [Authorize]\n        public ActionResult SyntaxHighlighterOptions()\n        {\n            if (!User.IsInRole(\"SuperAdmin\") && !User.IsInRole(\"Admin\"))\n            {\n                return RedirectToAction(\"Index\", \"Admin\", new { Area = \"Admin\" });\n            }\n\n            var currentTheme = SettingsRepository.BlogSyntaxTheme;\n            var selectedItems = SettingsRepository.BlogSyntaxScripts;\n            var model = new SyntaxHighlighterViewModel\n            {\n                Brushes = GetBrushesModel(selectedItems),\n                AvailableThemes = GetAvailableSyntaxThemes(currentTheme),\n                EditThemeAttributes = GetAttributes(GetUserId()),\n                Title = SettingsRepository.BlogName,\n                IsEnabled = SettingsRepository.BlogSyntaxHighlighting,\n                CanEnable = GetUserId() == 1\n            };\n\n            return View(model);\n        }\n\n        [Authorize]\n        [HttpPost]\n        public ActionResult SyntaxHighlighterOptions(string Theme, CheckBoxListViewModel selectedBrushes)\n        {\n            if (!User.IsInRole(\"SuperAdmin\") && !User.IsInRole(\"Admin\"))\n            {\n                return RedirectToAction(\"Index\", \"Home\", new { Area = \"\" });\n            }\n\n            var userId = GetUserId();\n            var updatedTheme = userId == 1 ? Theme : SettingsRepository.BlogSyntaxTheme;\n            SettingsRepository.BlogSyntaxScripts = string.Join(\"~\", selectedBrushes.GetSelectedItems());\n            SettingsRepository.BlogSyntaxTheme = updatedTheme;\n\n            var model = new SyntaxHighlighterViewModel\n            {\n                Brushes = selectedBrushes,\n                AvailableThemes = GetAvailableSyntaxThemes(updatedTheme),\n                EditThemeAttributes = GetAttributes(userId),\n                Title = SettingsRepository.BlogName,\n                IsEnabled = SettingsRepository.BlogSyntaxHighlighting,\n                UpdateStatus = true,\n                CanEnable = GetUserId() == 1\n            };\n\n            return View(model);\n        }\n\n        private static IDictionary<string, object> GetAttributes(int userId)\n        {\n            IDictionary<string, object> editAttributes = new Dictionary<string, object> { { \"class\", \"dropDownBox\" } };\n            if (userId != 1)\n            {\n                editAttributes.Add(\"disabled\", \"disabled\");\n            }\n            return editAttributes;\n        }\n\n        [Authorize]\n        public ActionResult UpdateProfile()\n        {\n            var userEntity = _userRepository.GetUserObjByUserID(GetUserId());\n            var model = new UpdateProfileModel\n            {\n                UserDisplayName = userEntity.UserDisplayName,\n                UserEmailAddress = userEntity.UserEmailAddress,\n                Title = SettingsRepository.BlogName,\n                UserSite = userEntity.UserSite\n            };\n\n            return View(model);\n        }\n\n        [Authorize]\n        [HttpPost]\n        public ActionResult UpdateProfile(UpdateProfileModel model)\n        {\n            if (ModelState.IsValid)\n            {\n                var userEntity = GetUserEntity(model);\n                var status = _userRepository.UpdateProfile(userEntity);\n                if (!status)\n                {\n                    ModelState.AddModelError(\"__FORM\", \"Unable to update the profile. Please try again later or contact the administrator\");\n                }\n                else\n                {\n                    model.UpdateStatus = true;\n                }\n            }\n\n            model.Title = SettingsRepository.BlogName;\n            return View(model);\n        }\n\n        public ActionResult AdminShortcuts()\n        {\n            return PartialView(\"AdminShortcuts\");\n        }\n\n        public ActionResult DatabaseNotice()\n        {\n            var status = GetDatabaseUpdateStatus();\n            var isVisible = (GetUserId() == 1 && (status.StatusCode == SetupStatusCode.DatabaseNotSetup ||\n                                                  status.StatusCode == SetupStatusCode.HasUpdates));\n\n            if (!isVisible)\n                return new EmptyResult();\n\n            return PartialView(status.StatusCode == SetupStatusCode.HasUpdates ? \"DatabaseUpdateNotice\" : \"DatabaseInstallNotice\");\n        }\n\n        private UserEntity GetUserEntity(UpdateProfileModel model)\n        {\n            var userEntity = new UserEntity\n            {\n                UserID = GetUserId(),\n                UserDisplayName = model.UserDisplayName,\n                UserEmailAddress = model.UserEmailAddress,\n                UserSite = model.UserSite\n            };\n\n            if (!string.IsNullOrEmpty(model.NewPassword) && !string.IsNullOrEmpty(model.ConfirmPassword))\n            {\n                var randomCode = RandomStringGenerator.RandomString();\n                userEntity.Password = PasswordHelper.GenerateHashedPassword(model.NewPassword, randomCode);\n                userEntity.UserCode = TripleDES.EncryptString(randomCode);\n            }\n\n            return userEntity;\n        }\n\n        public ActionResult SyntaxHighlighterHelp()\n        {\n            var selectedBrushes = SettingsRepository.BlogSyntaxScripts;\n            var syntaxPossibilitiesViewModel = new SyntaxPossibilitiesViewModel\n            {\n                SyntaxPossibilities = new SyntaxPossibilities(_pathMapper, selectedBrushes),\n                IsEnabled = SettingsRepository.BlogSyntaxHighlighting\n            };\n            return PartialView(syntaxPossibilitiesViewModel);\n        }\n\n        public ActionResult Error()\n        {\n            var errType = Request.QueryString[\"err\"];\n\n            var blogErrorViewModel = new BlogErrorViewModel\n            {\n                Title = SettingsRepository.BlogName,\n                ErrorCode = errType,\n                ErrorDescription = \"An unknown error has occurred\"\n            };\n\n            return View(blogErrorViewModel);\n        }\n\n        private List<SelectListItem> GetAvailableSyntaxThemes(string selectedItem)\n        {\n            var items = new List<SelectListItem>();\n            var basePath = _pathMapper.MapPath(\"~/Content/codeHighlighter/styles\");\n            var files = Directory.GetFiles(basePath, \"shCore*.css\");\n\n            files.ToList().ForEach(file =>\n            {\n                var r1 = new Regex(@\"shCore([A-Za-z0-9\\-]+).css\");\n                var match = r1.Match(Path.GetFileName(file));\n                if (match.Groups[1].Value != string.Empty)\n                {\n                    var item = new SelectListItem { Text = match.Groups[1].Value, Value = match.Groups[1].Value, Selected = match.Groups[1].Value == selectedItem };\n                    items.Add(item);\n                }\n            });\n\n            var defaultItem = items.Single(i => i.Text == \"Default\");\n            defaultItem.Selected = true;\n\n            return items;\n        }\n\n        private CheckBoxListViewModel GetBrushesModel(string selectedItems)\n        {\n            var basePath = _pathMapper.MapPath(\"~/Content/codeHighlighter/scripts\");\n            return SyntaxHighlighterBrushesModel.GetBrushesModel(basePath, selectedItems);\n        }\n\n        private List<SelectListItem> GetAvailableThemes(string selectedTheme)\n        {\n            var baseDirectory = _pathMapper.MapPath(\"~/Themes\");\n            var directories = Directory.GetDirectories(baseDirectory);\n            return directories.Select(directory => directory.Split('\\\\')).Select(split => new SelectListItem { Text = Regex.Replace(split.Last(), \"(\\\\B[A-Z])\", \" $1\"), Value = split.Last(), Selected = split.Last() == selectedTheme }).ToList();\n        }\n\n        private SetupStatus GetDatabaseUpdateStatus()\n        {\n            var databaseStatusGenerator = new SetupStatusGenerator(_schemaRepository, _pathMapper);\n            var databaseStatus = databaseStatusGenerator.GetSetupStatus();\n            return databaseStatus;\n        }\n\n        private static List<SelectListItem> GetEditorTypes()\n        {\n            return new List<SelectListItem>\n                {\n                    new SelectListItem { Text = \"Html (CkEditor)\", Value = \"html\", Selected = true },\n                    new SelectListItem { Text = \"Markdown\", Value = \"markdown\" }\n                };\n        }\n    }\n}\n",
        "gt": [
            "'sblog.net/sBlog.Net/Mappers/PathMapper.cs'",
            "'sblog.net/sBlog.Net/DependencyManagement/NinjectControllerFactory.cs'",
            "'sblog.net/sBlog.Net/Providers/RolePossibilitiesProviderModel.cs'",
            "'sblog.net/sBlog.Net/Areas/Admin/Controllers/AdminController.cs'"
        ]
    },
    {
        "files": [
            "'repository-pattern/RepositoryPattern/DataAccess.Core/ApplicationDBContext.cs'",
            "'repository-pattern/RepositoryPattern/Domain/Entities/Nutrition.cs'",
            "'repository-pattern/RepositoryPattern/DataAccess.Core/Migrations/ApplicationDBContextModelSnapshot.cs'"
        ],
        "content": "'repository-pattern/RepositoryPattern/DataAccess.Core/ApplicationDBContext.cs'\n:﻿using Microsoft.AspNetCore.Identity.EntityFrameworkCore;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.EntityFrameworkCore;\nusing Domain.Entities;\nnamespace DataAccess.Core\n{\n\n\n    public class ApplicationDBContext : IdentityDbContext<ApplicationUser, IdentityRole, string>\n    {\n        public ApplicationDBContext(DbContextOptions<ApplicationDBContext> options) : base(options)\n        {\n\n        }\n\n        public DbSet<Cousine> Cousines { get; set; }\n\n        public DbSet<Diet> Diets { get; set; }\n\n        public DbSet<Instruction> Instructions { get; set; }\n\n        public DbSet<Ingredient> Ingredients { get; set; }\n\n        public DbSet<Nutrient> Nutrients { get; set; }\n\n        public DbSet<Nutrition> Nutritions { get; set; }\n\n        public DbSet<Recipe> Recipes { get; set; }\n\n        public DbSet<RecipeCategory> RecipeCategories { get; set; }\n\n\n\n\n\n        protected override void OnModelCreating(ModelBuilder modelBuilder)\n        {\n            base.OnModelCreating(modelBuilder);\n\n            modelBuilder.Entity<Cousine>().HasData(\n            new Cousine { Id = 1, Name = \"Italian\" },\n            new Cousine { Id = 2, Name = \"Mexican\" }\n           );\n\n            modelBuilder.Entity<RecipeCategory>().HasData(\n            new RecipeCategory { Id = 1, Name = \"Dessert\" },\n            new RecipeCategory { Id = 2, Name = \"Main Course\" }\n           );\n\n            modelBuilder.Entity<Diet>().HasData(\n                new Diet { Id = 1, Name = \"Vegan\" },\n                new Diet { Id = 2, Name = \"Ketogenic\" }\n           );\n\n        }\n    }\n}\n\n'repository-pattern/RepositoryPattern/Domain/Entities/Nutrition.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\n\nnamespace Domain.Entities\n{\n    public class Nutrition\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n        public double Amount { get; set; }\n        public string Unit { get; set; }\n        public int Percentage { get; set; }\n        public int RecipeId { get; set; }\n        public Recipe Recipe { get; set; }\n        public ICollection<Nutrient>  Nutrients { get; set; }\n\n    }\n}\n\n'repository-pattern/RepositoryPattern/DataAccess.Core/Migrations/ApplicationDBContextModelSnapshot.cs'\n:﻿\nusing System;\nusing DataAccess.Core;\nusing Microsoft.EntityFrameworkCore;\nusing Microsoft.EntityFrameworkCore.Infrastructure;\nusing Microsoft.EntityFrameworkCore.Metadata;\nusing Microsoft.EntityFrameworkCore.Storage.ValueConversion;\n\n#nullable disable\n\nnamespace FoodRecipe.DataAccess.Migrations\n{\n    [DbContext(typeof(ApplicationDBContext))]\n    partial class ApplicationDBContextModelSnapshot : ModelSnapshot\n    {\n        protected override void BuildModel(ModelBuilder modelBuilder)\n        {\n#pragma warning disable 612, 618\n            modelBuilder\n                .HasAnnotation(\"ProductVersion\", \"6.0.10\")\n                .HasAnnotation(\"Relational:MaxIdentifierLength\", 128);\n\n            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);\n\n            modelBuilder.Entity(\"Domain.Entities.ApplicationUser\", b =>\n                {\n                    b.Property<string>(\"Id\")\n                        .HasColumnType(\"nvarchar(450)\");\n\n                    b.Property<int>(\"AccessFailedCount\")\n                        .HasColumnType(\"int\");\n\n                    b.Property<string>(\"ConcurrencyStamp\")\n                        .IsConcurrencyToken()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"Email\")\n                        .HasMaxLength(256)\n                        .HasColumnType(\"nvarchar(256)\");\n\n                    b.Property<bool>(\"EmailConfirmed\")\n                        .HasColumnType(\"bit\");\n\n                    b.Property<string>(\"FirstName\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<bool>(\"IsActive\")\n                        .HasColumnType(\"bit\");\n\n                    b.Property<bool>(\"LockoutEnabled\")\n                        .HasColumnType(\"bit\");\n\n                    b.Property<DateTimeOffset?>(\"LockoutEnd\")\n                        .HasColumnType(\"datetimeoffset\");\n\n                    b.Property<string>(\"MiddleName\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"NormalizedEmail\")\n                        .HasMaxLength(256)\n                        .HasColumnType(\"nvarchar(256)\");\n\n                    b.Property<string>(\"NormalizedUserName\")\n                        .HasMaxLength(256)\n                        .HasColumnType(\"nvarchar(256)\");\n\n                    b.Property<string>(\"PasswordHash\")\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"PhoneNumber\")\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<bool>(\"PhoneNumberConfirmed\")\n                        .HasColumnType(\"bit\");\n\n                    b.Property<string>(\"SecurityStamp\")\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<bool>(\"TwoFactorEnabled\")\n                        .HasColumnType(\"bit\");\n\n                    b.Property<string>(\"UserName\")\n                        .HasMaxLength(256)\n                        .HasColumnType(\"nvarchar(256)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"NormalizedEmail\")\n                        .HasDatabaseName(\"EmailIndex\");\n\n                    b.HasIndex(\"NormalizedUserName\")\n                        .IsUnique()\n                        .HasDatabaseName(\"UserNameIndex\")\n                        .HasFilter(\"[NormalizedUserName] IS NOT NULL\");\n\n                    b.ToTable(\"AspNetUsers\", (string)null);\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Cousine\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"), 1L, 1);\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Cousines\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = 1,\n                            Name = \"Italian\"\n                        },\n                        new\n                        {\n                            Id = 2,\n                            Name = \"Mexican\"\n                        });\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Diet\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"), 1L, 1);\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"Diets\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = 1,\n                            Name = \"Vegan\"\n                        },\n                        new\n                        {\n                            Id = 2,\n                            Name = \"Ketogenic\"\n                        });\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Ingredient\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"), 1L, 1);\n\n                    b.Property<double>(\"Amount\")\n                        .HasColumnType(\"float\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<int>(\"RecipeId\")\n                        .HasColumnType(\"int\");\n\n                    b.Property<double>(\"Unit\")\n                        .HasColumnType(\"float\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"RecipeId\");\n\n                    b.ToTable(\"Ingredients\");\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Instruction\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"), 1L, 1);\n\n                    b.Property<string>(\"Detail\")\n                        .IsRequired()\n                        .HasColumnType(\"text\");\n\n                    b.Property<int>(\"RecipeId\")\n                        .HasColumnType(\"int\");\n\n                    b.Property<string>(\"Tip\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"RecipeId\");\n\n                    b.ToTable(\"Instructions\");\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Nutrient\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"), 1L, 1);\n\n                    b.Property<double>(\"Amount\")\n                        .HasColumnType(\"float\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<int>(\"NutritionId\")\n                        .HasColumnType(\"int\");\n\n                    b.Property<double>(\"Percentage\")\n                        .HasColumnType(\"float\");\n\n                    b.Property<string>(\"Unit\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"NutritionId\");\n\n                    b.ToTable(\"Nutrients\");\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Nutrition\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"), 1L, 1);\n\n                    b.Property<double>(\"Amount\")\n                        .HasColumnType(\"float\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<int>(\"Percentage\")\n                        .HasColumnType(\"int\");\n\n                    b.Property<int>(\"RecipeId\")\n                        .HasColumnType(\"int\");\n\n                    b.Property<string>(\"Unit\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"RecipeId\");\n\n                    b.ToTable(\"Nutritions\");\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Recipe\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"), 1L, 1);\n\n                    b.Property<int>(\"CousineId\")\n                        .HasColumnType(\"int\");\n\n                    b.Property<string>(\"Description\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<int>(\"DietId\")\n                        .HasColumnType(\"int\");\n\n                    b.Property<string>(\"Duration\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"ImageUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"LocalUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<int>(\"RecipeCategoryId\")\n                        .HasColumnType(\"int\");\n\n                    b.Property<string>(\"Servings\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"SourceUrl\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"CousineId\");\n\n                    b.HasIndex(\"DietId\");\n\n                    b.HasIndex(\"RecipeCategoryId\");\n\n                    b.ToTable(\"Recipes\");\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.RecipeCategory\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"), 1L, 1);\n\n                    b.Property<string>(\"Name\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.ToTable(\"RecipeCategories\");\n\n                    b.HasData(\n                        new\n                        {\n                            Id = 1,\n                            Name = \"Dessert\"\n                        },\n                        new\n                        {\n                            Id = 2,\n                            Name = \"Main Course\"\n                        });\n                });\n\n            modelBuilder.Entity(\"Microsoft.AspNetCore.Identity.IdentityRole\", b =>\n                {\n                    b.Property<string>(\"Id\")\n                        .HasColumnType(\"nvarchar(450)\");\n\n                    b.Property<string>(\"ConcurrencyStamp\")\n                        .IsConcurrencyToken()\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"Name\")\n                        .HasMaxLength(256)\n                        .HasColumnType(\"nvarchar(256)\");\n\n                    b.Property<string>(\"NormalizedName\")\n                        .HasMaxLength(256)\n                        .HasColumnType(\"nvarchar(256)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"NormalizedName\")\n                        .IsUnique()\n                        .HasDatabaseName(\"RoleNameIndex\")\n                        .HasFilter(\"[NormalizedName] IS NOT NULL\");\n\n                    b.ToTable(\"AspNetRoles\", (string)null);\n                });\n\n            modelBuilder.Entity(\"Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"), 1L, 1);\n\n                    b.Property<string>(\"ClaimType\")\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"ClaimValue\")\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"RoleId\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(450)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"AspNetRoleClaims\", (string)null);\n                });\n\n            modelBuilder.Entity(\"Microsoft.AspNetCore.Identity.IdentityUserClaim<string>\", b =>\n                {\n                    b.Property<int>(\"Id\")\n                        .ValueGeneratedOnAdd()\n                        .HasColumnType(\"int\");\n\n                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>(\"Id\"), 1L, 1);\n\n                    b.Property<string>(\"ClaimType\")\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"ClaimValue\")\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"UserId\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(450)\");\n\n                    b.HasKey(\"Id\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"AspNetUserClaims\", (string)null);\n                });\n\n            modelBuilder.Entity(\"Microsoft.AspNetCore.Identity.IdentityUserLogin<string>\", b =>\n                {\n                    b.Property<string>(\"LoginProvider\")\n                        .HasColumnType(\"nvarchar(450)\");\n\n                    b.Property<string>(\"ProviderKey\")\n                        .HasColumnType(\"nvarchar(450)\");\n\n                    b.Property<string>(\"ProviderDisplayName\")\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.Property<string>(\"UserId\")\n                        .IsRequired()\n                        .HasColumnType(\"nvarchar(450)\");\n\n                    b.HasKey(\"LoginProvider\", \"ProviderKey\");\n\n                    b.HasIndex(\"UserId\");\n\n                    b.ToTable(\"AspNetUserLogins\", (string)null);\n                });\n\n            modelBuilder.Entity(\"Microsoft.AspNetCore.Identity.IdentityUserRole<string>\", b =>\n                {\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"nvarchar(450)\");\n\n                    b.Property<string>(\"RoleId\")\n                        .HasColumnType(\"nvarchar(450)\");\n\n                    b.HasKey(\"UserId\", \"RoleId\");\n\n                    b.HasIndex(\"RoleId\");\n\n                    b.ToTable(\"AspNetUserRoles\", (string)null);\n                });\n\n            modelBuilder.Entity(\"Microsoft.AspNetCore.Identity.IdentityUserToken<string>\", b =>\n                {\n                    b.Property<string>(\"UserId\")\n                        .HasColumnType(\"nvarchar(450)\");\n\n                    b.Property<string>(\"LoginProvider\")\n                        .HasColumnType(\"nvarchar(450)\");\n\n                    b.Property<string>(\"Name\")\n                        .HasColumnType(\"nvarchar(450)\");\n\n                    b.Property<string>(\"Value\")\n                        .HasColumnType(\"nvarchar(max)\");\n\n                    b.HasKey(\"UserId\", \"LoginProvider\", \"Name\");\n\n                    b.ToTable(\"AspNetUserTokens\", (string)null);\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Ingredient\", b =>\n                {\n                    b.HasOne(\"Domain.Entities.Recipe\", \"Recipe\")\n                        .WithMany(\"Ingredients\")\n                        .HasForeignKey(\"RecipeId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Recipe\");\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Instruction\", b =>\n                {\n                    b.HasOne(\"Domain.Entities.Recipe\", \"Recipe\")\n                        .WithMany(\"Instructions\")\n                        .HasForeignKey(\"RecipeId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Recipe\");\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Nutrient\", b =>\n                {\n                    b.HasOne(\"Domain.Entities.Nutrition\", \"Nutrition\")\n                        .WithMany(\"Nutrients\")\n                        .HasForeignKey(\"NutritionId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Nutrition\");\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Nutrition\", b =>\n                {\n                    b.HasOne(\"Domain.Entities.Recipe\", \"Recipe\")\n                        .WithMany(\"Nutritions\")\n                        .HasForeignKey(\"RecipeId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Recipe\");\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Recipe\", b =>\n                {\n                    b.HasOne(\"Domain.Entities.Cousine\", \"Cousine\")\n                        .WithMany(\"Recipes\")\n                        .HasForeignKey(\"CousineId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"Domain.Entities.Diet\", \"Diet\")\n                        .WithMany(\"Recipes\")\n                        .HasForeignKey(\"DietId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"Domain.Entities.RecipeCategory\", \"RecipeCategory\")\n                        .WithMany(\"Recipes\")\n                        .HasForeignKey(\"RecipeCategoryId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.Navigation(\"Cousine\");\n\n                    b.Navigation(\"Diet\");\n\n                    b.Navigation(\"RecipeCategory\");\n                });\n\n            modelBuilder.Entity(\"Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>\", b =>\n                {\n                    b.HasOne(\"Microsoft.AspNetCore.Identity.IdentityRole\", null)\n                        .WithMany()\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"Microsoft.AspNetCore.Identity.IdentityUserClaim<string>\", b =>\n                {\n                    b.HasOne(\"Domain.Entities.ApplicationUser\", null)\n                        .WithMany()\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"Microsoft.AspNetCore.Identity.IdentityUserLogin<string>\", b =>\n                {\n                    b.HasOne(\"Domain.Entities.ApplicationUser\", null)\n                        .WithMany()\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"Microsoft.AspNetCore.Identity.IdentityUserRole<string>\", b =>\n                {\n                    b.HasOne(\"Microsoft.AspNetCore.Identity.IdentityRole\", null)\n                        .WithMany()\n                        .HasForeignKey(\"RoleId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n\n                    b.HasOne(\"Domain.Entities.ApplicationUser\", null)\n                        .WithMany()\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"Microsoft.AspNetCore.Identity.IdentityUserToken<string>\", b =>\n                {\n                    b.HasOne(\"Domain.Entities.ApplicationUser\", null)\n                        .WithMany()\n                        .HasForeignKey(\"UserId\")\n                        .OnDelete(DeleteBehavior.Cascade)\n                        .IsRequired();\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Cousine\", b =>\n                {\n                    b.Navigation(\"Recipes\");\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Diet\", b =>\n                {\n                    b.Navigation(\"Recipes\");\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Nutrition\", b =>\n                {\n                    b.Navigation(\"Nutrients\");\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.Recipe\", b =>\n                {\n                    b.Navigation(\"Ingredients\");\n\n                    b.Navigation(\"Instructions\");\n\n                    b.Navigation(\"Nutritions\");\n                });\n\n            modelBuilder.Entity(\"Domain.Entities.RecipeCategory\", b =>\n                {\n                    b.Navigation(\"Recipes\");\n                });\n#pragma warning restore 612, 618\n        }\n    }\n}\n",
        "gt": [
            "'repository-pattern/RepositoryPattern/Domain/Entities/Nutrition.cs'",
            "'repository-pattern/RepositoryPattern/DataAccess.Core/ApplicationDBContext.cs'",
            "'repository-pattern/RepositoryPattern/DataAccess.Core/Migrations/ApplicationDBContextModelSnapshot.cs'"
        ]
    },
    {
        "files": [
            "'GreenOnions/GreenOnions.BotManagerWindows/FrmMain.cs'",
            "'GreenOnions/GreenOnions.BotMain/MiraiApiHttp/MiraiApiHttpMessageConverter.cs'",
            "'GreenOnions/GreenOnions.Utility/Helper/StringHelper.cs'"
        ],
        "content": "'GreenOnions/GreenOnions.BotManagerWindows/FrmMain.cs'\n:﻿using GreenOnions.BotMain;\nusing GreenOnions.BotMain.Knife;\nusing GreenOnions.BotMain.MiraiApiHttp;\nusing GreenOnions.BotMain.Oicq;\nusing GreenOnions.BotMain.OneBot;\nusing GreenOnions.Interface.Configs.Enums;\nusing GreenOnions.Utility;\nusing GreenOnions.Utility.Helper;\nusing GreenOnions.BotMain.Konata;\nusing GreenOnions.BotMain.Go_CqHttp;\n\nnamespace GreenOnions.BotManagerWindows\n{\n    public partial class FrmMain : Form\n    {\n        private WebBrowserForm? webBrowserForm;\n        private bool _connecting;\n        private MiraiClient? _miraiClient;\n\n        public FrmMain()\n        {\n            InitializeComponent();\n\n            try\n            {\n                webBrowserForm = new WebBrowserForm();\n                EventHelper.GetDocumentByBrowserEvent += webBrowserForm.GetDocument;\n            }\n            catch (Exception ex)\n            {\n                LogHelper.WriteErrorLog(\"初始化浏览器组件失败！请检查 VC++2015-2019 是否已安装\", ex);\n                MessageBox.Show(\"初始化浏览器组件失败！请检查 VC++2015-2019 是否已安装\");\n            }\n\n            #region -- 读取配置 --\n            try\n            {\n                if (!File.Exists(\"config.json\"))\n                {\n                    MessageBox.Show(\"初次使用本机器人，请先配置相关参数。\", \"提示\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                    new FrmAppSetting().ShowDialog();\n                }\n\n                txbQQ.Text = BotInfo.Config.QQId.ToString();\n                txbIP.Text = BotInfo.Config.IP;\n                txbPort.Text = BotInfo.Config.Port.ToString();\n                txbVerifyKey.Text = BotInfo.Config.VerifyKey;\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"读取配置发生异常，{ex.Message}，请删除应用目录下的config.json和cache.json文件后重启应用。\", \"错误\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n            #endregion -- 读取配置 --\n        }\n\n        protected override async void OnShown(EventArgs e)\n        {\n            base.OnShown(e);\n\n            int iLoadCount = 0;\n            await Task.Run(() => iLoadCount = PluginManager.Load());\n            btnPlugins.Text = $\"插件列表({iLoadCount})\";\n\n            btnConnectToMiraiApiHttp.Enabled = true;\n            btnConnectToOneBot.Enabled = true;\n            btnConnectToGoCqhttp.Enabled = true;\n\n\n            if (BotInfo.Config.AutoConnectEnabled)\n            {\n                Task.Delay(BotInfo.Config.AutoConnectDelay * 1000).Wait();\n                ConnectToPlatform(BotInfo.Config.AutoConnectProtocol);\n            }\n\n#if DEBUG\n            btnConnectToOicq.Visible = true;\n            btnKonata.Visible = true;\n#endif\n        }\n\n        protected override void OnSizeChanged(EventArgs e)\n        {\n            base.OnSizeChanged(e);\n            if (WindowState == FormWindowState.Minimized)\n            {\n                if (chkMinimizeToTray.Checked)\n                {\n                    Hide();\n                    ShowInTaskbar = false;\n                    notifyIcon.Visible = true;\n                }\n            }\n        }\n\n        private async void ConnectToPlatform(BotPlatform platform)\n        {\n            if (_connecting)\n                return;\n\n            _connecting = true;\n            if (!CheckInfo())\n                return;\n\n            try\n            {\n                _miraiClient = platform switch\n                {\n                    BotPlatform.Mirai_Api_Http => new MiraiApiHttpClient((bConnect, nickNameOrErrorMessage) => Connecting(bConnect, BotInfo.Config.QQId, BotInfo.Config.IP, BotInfo.Config.Port, BotInfo.Config.VerifyKey, nickNameOrErrorMessage, platform)),\n                    BotPlatform.OneBot => new OneBotClient((bConnect, nickNameOrErrorMessage) => Connecting(bConnect, BotInfo.Config.QQId, BotInfo.Config.IP, BotInfo.Config.Port, BotInfo.Config.VerifyKey, nickNameOrErrorMessage, platform)),\n                    BotPlatform.Oicq => new OicqClient((bConnect, nickNameOrErrorMessage) => Connecting(bConnect, BotInfo.Config.QQId, BotInfo.Config.IP, BotInfo.Config.Port, BotInfo.Config.VerifyKey, nickNameOrErrorMessage, platform)),\n                    BotPlatform.GoCqhttp => new Go_CqHttpClient((bConnect, nickNameOrErrorMessage) => Connecting(bConnect, BotInfo.Config.QQId, BotInfo.Config.IP, BotInfo.Config.Port, BotInfo.Config.VerifyKey, nickNameOrErrorMessage, platform)),\n                    _ => throw new NotImplementedException(),\n                };\n                await _miraiClient.Connect(BotInfo.Config.QQId, BotInfo.Config.IP, BotInfo.Config.Port, BotInfo.Config.VerifyKey);\n\n                WorkingTimeRecorder.StartRecord(platform, ConnectToPlatform, Disconnect);\n            }\n            catch (Exception ex)\n            {\n                MessageBox.Show($\"连接失败：{ex.Message}\", \"错误\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n            }\n            finally\n            {\n                _connecting = false;\n            }\n        }\n\n        private void btnDeconnect_Click(object? sender, EventArgs e)\n        {\n            Disconnect();\n        }\n\n        private async void Disconnect()\n        {\n            if (_miraiClient is not null)\n                await _miraiClient.Disconnect();\n\n            btnConnectToMiraiApiHttp.Click -= btnDeconnect_Click;\n            btnConnectToMiraiApiHttp.Click += btnConnectToMiraiApiHttp_Click;\n\n            btnConnectToOneBot.Click -= btnDeconnect_Click;\n            btnConnectToOneBot.Click += btnConnectToOneBot_Click;\n\n            btnConnectToGoCqhttp.Click -= btnDeconnect_Click;\n            btnConnectToGoCqhttp.Click += btnConnectToGoCqhttp_Click;\n        }\n\n        private void btnConnectToMiraiApiHttp_Click(object? sender, EventArgs e)\n        {\n            ConnectToPlatform(BotPlatform.Mirai_Api_Http);\n        }\n\n        private void btnConnectToGoCqhttp_Click(object? sender, EventArgs e)\n        {\n            ConnectToPlatform(BotPlatform.GoCqhttp);\n        }\n\n        private void btnConnectToOneBot_Click(object? sender, EventArgs e)\n        {\n            ConnectToPlatform(BotPlatform.OneBot);\n        }\n\n        private void btnConnectToOicq_Click(object sender, EventArgs e)\n        {\n            ConnectToPlatform(BotPlatform.Oicq);\n        }\n\n        private void btnBotSettings_Click(object sender, EventArgs e)\n        {\n            btnBotSettings.Enabled = false;\n            FrmAppSetting frmSetting = new FrmAppSetting();\n            frmSetting.FormClosed += (_, _) => btnBotSettings.Enabled = true;\n            frmSetting.Show();\n        }\n\n        private void notifyIcon_MouseDoubleClick(object sender, MouseEventArgs e)\n        {\n            Visible = true;\n            ShowInTaskbar = true;\n            WindowState = FormWindowState.Normal;\n            notifyIcon.Visible = false;\n        }\n\n        private void Connecting(bool bConnect, long qqId, string ip, ushort port, string verifyKey, string nickNameOrErrorMessage, BotPlatform platform)\n        {\n            Invoke(() =>\n            {\n                if (bConnect)\n                {\n                    lblState.Text = $\"连接状态: 已连接到{platform}, 登录昵称:{nickNameOrErrorMessage}\";\n                    lblState.ForeColor = Color.Black;\n\n                    btnConnectToMiraiApiHttp.Text = \"断开连接\";\n                    btnConnectToMiraiApiHttp.Click -= btnConnectToMiraiApiHttp_Click;\n                    btnConnectToMiraiApiHttp.Click += btnDeconnect_Click;\n\n                    btnConnectToOneBot.Text = \"断开连接\";\n                    btnConnectToOneBot.Click -= btnConnectToOneBot_Click;\n                    btnConnectToOneBot.Click += btnDeconnect_Click;\n\n                    btnConnectToGoCqhttp.Text = \"断开连接\";\n                    btnConnectToGoCqhttp.Click -= btnConnectToGoCqhttp_Click;\n                    btnConnectToGoCqhttp.Click += btnDeconnect_Click;\n\n                    notifyIcon.Text = $\"葱葱机器人:{nickNameOrErrorMessage}\";\n\n                    BotInfo.Config.QQId = qqId;\n                    BotInfo.Config.IP = ip;\n                    BotInfo.Config.Port = port;\n                    BotInfo.Config.VerifyKey = verifyKey;\n\n                    BotInfo.SaveConfigFile();\n\n                    webBrowserForm?.Show();\n                }\n                else if (nickNameOrErrorMessage is null)\n                {\n                    MessageBox.Show($\"连接失败，请检查{platform}是否已经正常启动并已配置IP端口相关参数, 以及机器人QQ是否成功登录。\", \"提示\", MessageBoxButtons.OK, MessageBoxIcon.Warning);\n                }\n                else\n                {\n                    btnConnectToMiraiApiHttp.Text = \"连接到mirai-api-http\";\n                    btnConnectToOneBot.Text = \"连接到OneBot\";\n                    btnConnectToGoCqhttp.Text = \"连接到go-cqhttp\";\n                    lblState.Text = $\"连接状态: 未连接到机器人平台\";\n                    lblState.ForeColor = Color.Red;\n                    notifyIcon.Text = $\"葱葱机器人\";\n                    if (nickNameOrErrorMessage.Length > 0)\n                        MessageBox.Show(\"连接失败，\" + nickNameOrErrorMessage, \"提示\", MessageBoxButtons.OK, MessageBoxIcon.Error);\n                }\n            });\n        }\n\n        private bool CheckInfo()\n        {\n            if (BotInfo.IsLogin)\n            {\n                return false;\n            }\n            if (string.IsNullOrEmpty(txbQQ.Text))\n            {\n                MessageBox.Show(\"请先输入机器人QQ号。\", \"提示\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                return false;\n            }\n            if (string.IsNullOrEmpty(txbIP.Text))\n            {\n                MessageBox.Show(\"请先输入机器人平台 IP。\", \"提示\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                return false;\n            }\n            if (string.IsNullOrEmpty(txbPort.Text))\n            {\n                MessageBox.Show(\"请先输入机器人平台端口号。\", \"提示\", MessageBoxButtons.OK, MessageBoxIcon.Information);\n                return false;\n            }\n            BotInfo.Config.QQId = Convert.ToInt64(txbQQ.Text);\n            BotInfo.Config.IP = txbIP.Text;\n            BotInfo.Config.Port = Convert.ToUInt16(txbPort.Text);\n            BotInfo.Config.VerifyKey = txbVerifyKey.Text;\n            return true;\n        }\n\n        private void btnPlugins_Click(object sender, EventArgs e)\n        {\n            new FrmPlugins().ShowDialog();\n        }\n\n        private void btnKonata_Click(object sender, EventArgs e)\n        {\n            KonataClient client = new KonataClient();\n            client.Login();\n        }\n    }\n}\n'GreenOnions/GreenOnions.BotMain/MiraiApiHttp/MiraiApiHttpMessageConverter.cs'\n:﻿using GreenOnions.Interface;\nusing GreenOnions.Utility.Helper;\nusing Mirai.CSharp.HttpApi.Session;\nusing Mirai.CSharp.Models;\nusing Mirai.CSharp.Models.ChatMessages;\n\nnamespace GreenOnions.BotMain.MiraiApiHttp\n{\n    public static class MiraiApiHttpMessageConverter\n    {\n        public static GreenOnionsMessages ToGreenOnionsMessages(this IChatMessage[] miraiMessage, long senderId, string senderName)\n        {\n            GreenOnionsMessages greenOnionsMessages = new GreenOnionsMessages();\n            for (int i = 0; i < miraiMessage.Length; i++)\n            {\n                try\n                {\n                    if (miraiMessage[i] is IAtMessage atMsg)\n                        greenOnionsMessages.Add(new GreenOnionsAtMessage(atMsg.Target, atMsg.Display));\n                    else if (miraiMessage[i] is IPlainMessage plainMsg)\n                        greenOnionsMessages.Add(plainMsg.ToString() ?? string.Empty);\n                    else if (miraiMessage[i] is IImageMessage imageMsg)\n                        greenOnionsMessages.Add(new GreenOnionsImageMessage(ImageHelper.ReplaceGroupUrl(imageMsg.Url!)));\n                    else if (miraiMessage[i] is IFaceMessage faceMsg)\n                        greenOnionsMessages.Add(new GreenOnionsFaceMessage(faceMsg.Id, faceMsg.Name!));\n                }\n                catch (Exception ex)\n                {\n                    LogHelper.WriteErrorLog($\"转换为GreenOnions消息失败, 原消息类型为:{miraiMessage[i].GetType()}\", ex);\n                }\n            }\n\n            greenOnionsMessages.Id = (miraiMessage[0] as Mirai.CSharp.HttpApi.Models.ChatMessages.SourceMessage)!.Id;\n            greenOnionsMessages.SenderId = senderId;\n            greenOnionsMessages.SenderName = senderName;\n            return greenOnionsMessages;\n        }\n\n        public static async Task<IChatMessage[]> ToMiraiApiHttpMessages(this GreenOnionsMessages greenOnionsMessage, IMiraiHttpSession session, UploadTarget uploadTarget)\n        {\n            if (!greenOnionsMessage.IsGreenOnionsCommand)\n                greenOnionsMessage.ReplaceGreenOnionsStringTags();\n\n            List<IChatMessage> miraiApiHttpMessages = new List<IChatMessage>();\n            List<Mirai.CSharp.HttpApi.Models.ChatMessages.ForwardMessageNode> nodes = new List<Mirai.CSharp.HttpApi.Models.ChatMessages.ForwardMessageNode>();\n            for (int i = 0; i < greenOnionsMessage.Count; i++)\n            {\n                try\n                {\n                    if (greenOnionsMessage[i] is GreenOnionsTextMessage txtMsg)\n                    {\n                        if (!string.IsNullOrEmpty(txtMsg.Text))\n                            miraiApiHttpMessages.Add(new Mirai.CSharp.HttpApi.Models.ChatMessages.PlainMessage(txtMsg.Text));\n                    }\n                    else if (greenOnionsMessage[i] is GreenOnionsImageMessage imgMsg)\n                    {\n                        if (!string.IsNullOrEmpty(imgMsg.Url))\n                        {\n                            string? url = null;\n                            string? path = null;\n                            if (File.Exists(imgMsg.Url))\n                                path = imgMsg.Url;\n                            else\n                                url = imgMsg.Url;\n                            miraiApiHttpMessages.Add(new Mirai.CSharp.HttpApi.Models.ChatMessages.ImageMessage(null, url, path));\n                        }\n                        else if (!string.IsNullOrEmpty(imgMsg.Base64Str))\n                        {\n                            using MemoryStream ms = imgMsg.MemoryStream!;\n                            miraiApiHttpMessages.Add(await session.UploadPictureAsync(uploadTarget, ms));\n                        }\n                    }\n                    else if (greenOnionsMessage[i] is GreenOnionsAtMessage atMsg)\n                    {\n                        if (atMsg.AtId == -1)\n                            miraiApiHttpMessages.Add(new Mirai.CSharp.HttpApi.Models.ChatMessages.AtAllMessage());\n                        else\n                            miraiApiHttpMessages.Add(new Mirai.CSharp.HttpApi.Models.ChatMessages.AtMessage(atMsg.AtId));\n                    }\n                    else if (greenOnionsMessage[i] is GreenOnionsForwardMessage forwardMsg)\n                    {\n                        for (int j = 0; j < forwardMsg.ItemMessages.Count; j++)\n                        {\n                            var itemMsg = (await ToMiraiApiHttpMessages(forwardMsg.ItemMessages[j].itemMessage, session, uploadTarget)).Select(msg => msg as Mirai.CSharp.HttpApi.Models.ChatMessages.IChatMessage);\n                            if (itemMsg is not null)\n                            {\n                                Mirai.CSharp.HttpApi.Models.ChatMessages.ForwardMessageNode node = new Mirai.CSharp.HttpApi.Models.ChatMessages.ForwardMessageNode()\n                                {\n                                    Id = i * j + j,\n                                    Name = forwardMsg.ItemMessages[j].NickName,\n                                    QQNumber = forwardMsg.ItemMessages[j].QQid,\n                                    Time = DateTime.Now,\n                                    Chain = itemMsg.ToArray()!,\n                                };\n                                nodes.Add(node);\n                            }\n                        }\n                    }\n                    else if (greenOnionsMessage[i] is GreenOnionsVoiceMessage voiceMsg)\n                    {\n                        if (!string.IsNullOrEmpty(voiceMsg.Url))\n                        {\n                            string? url = null;\n                            string? path = null;\n                            if (File.Exists(voiceMsg.Url))\n                                path = voiceMsg.Url;\n                            else\n                                url = voiceMsg.Url;\n                            miraiApiHttpMessages.Add(new Mirai.CSharp.HttpApi.Models.ChatMessages.VoiceMessage(null, url, path));\n                        }\n                        else if (!string.IsNullOrEmpty(voiceMsg.Base64Str))\n                        {\n                            using MemoryStream ms = voiceMsg.MemoryStream!;\n                            miraiApiHttpMessages.Add(await session.UploadVoiceAsync(uploadTarget, ms));\n                        }\n                    }\n                }\n                catch (Exception ex)\n                {\n                    LogHelper.WriteErrorLog(\"转换为MiraiApiHttp消息失败!!!\", ex);\n                    continue;\n                }\n            }\n            if (nodes.Count > 0)\n            {\n                Mirai.CSharp.HttpApi.Models.ChatMessages.ForwardMessage forwardMessage = new Mirai.CSharp.HttpApi.Models.ChatMessages.ForwardMessage(nodes.ToArray());\n                miraiApiHttpMessages.Add(forwardMessage);\n            }\n            return miraiApiHttpMessages.ToArray();\n        }\n\n        public static GreenOnionsMemberInfo ToGreenOnionsMemberInfo(this IGroupMemberInfo groupMemberInfo)\n        {\n            return new GreenOnionsMemberInfo(groupMemberInfo.Id, groupMemberInfo.Name, (Permission)(int)groupMemberInfo.Permission);\n        }\n    }\n}\n\n'GreenOnions/GreenOnions.Utility/Helper/StringHelper.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Reflection;\nusing System.Text;\nusing System.Text.RegularExpressions;\nusing GreenOnions.Interface;\nusing GreenOnions.Interface.Configs;\nusing TencentCloud.Kms.V20190118.Models;\nusing static System.Net.Mime.MediaTypeNames;\n\nnamespace GreenOnions.Utility.Helper\n{\n    public static class StringHelper\n    {\n\n        #region -- 中文数字转换 --\n\n\n\n\n\n        public static long Chinese2Num( string src)\n        {\n            src = src.Replace(\"壹\", \"一\")\n                .Replace(\"贰\", \"二\")\n                .Replace(\"两\", \"二\")\n                .Replace(\"兩\", \"二\")\n                .Replace(\"叁\", \"三\")\n                .Replace(\"肆\", \"四\")\n                .Replace(\"伍\", \"五\")\n                .Replace(\"陆\", \"六\")\n                .Replace(\"陸\", \"六\")\n                .Replace(\"柒\", \"七\")\n                .Replace(\"捌\", \"八\")\n                .Replace(\"玖\", \"九\")\n                .Replace(\"拾\", \"十\")\n                .Replace(\"佰\", \"百\")\n                .Replace(\"仟\", \"千\")\n                .Replace(\"萬\", \"万\");\n\n\n            string[] srcArr;\n\n            int result = 0;\n\n            if (src.IndexOf(\"亿\") != -1)\n            {\n\n                srcArr = src.Split('亿');\n\n                result += Convert.ToInt32(Convert2Number(srcArr[0]) * Math.Pow(10, 8));\n\n                if (src.IndexOf(\"万\") != -1)\n                {\n\n                    srcArr = srcArr[1].Split('万');\n\n                    result += Convert.ToInt32(Convert2Number(srcArr[0]) * Math.Pow(10, 4)) + Convert.ToInt32(Convert2Number(srcArr[1]));\n                }\n            }\n\n            else\n            {\n\n                if (src.IndexOf(\"万\") != -1)\n                {\n                    srcArr = src.Split('万');\n                    result += Convert.ToInt32(Convert2Number(srcArr[0]) * Math.Pow(10, 4)) + Convert.ToInt32(Convert2Number(srcArr[1]));\n                }\n                else\n                {\n\n                    result += Convert.ToInt32(Convert2Number(src));\n                }\n            }\n            return result;\n        }\n\n\n\n\n\n\n        public static long Convert2Number( string src)\n        {\n\n            string numberString = \"零一二三四五六七八九十\";\n\n            string unitString = \"零十百千\";\n\n            char[] charArr = src.Replace(\" \", \"\").ToCharArray();\n\n            int result = 0;\n\n            if (string.IsNullOrEmpty(src) || string.IsNullOrWhiteSpace(src))\n            {\n                return 0;\n            }\n\n            if (numberString.IndexOf(charArr[0]) == -1)\n            {\n                return 0;\n            }\n            if (src.Length > 1)\n            {\n\n                for (int i = 0; i < charArr.Length; i++)\n                {\n\n                    for (int j = 0; j < unitString.Length; j++)\n                    {\n\n                        if (charArr[i] == unitString[j])\n                        {\n\n                            if (charArr[i] != '零')\n                            {\n                                result += Convert.ToInt32(int.Parse(numberString.IndexOf(charArr[i - 1]).ToString()) * Math.Pow(10, j));\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (numberString.IndexOf(charArr[charArr.Length - 1]) != -1)\n            {\n                result += numberString.IndexOf(charArr[charArr.Length - 1]);\n            }\n\n            return result;\n        }\n\n\n\n\n\n        public static string NumberToChinese( long number)\n        {\n            string res = string.Empty;\n            string str = number.ToString();\n            string schar = str.Substring(0, 1);\n            switch (schar)\n            {\n                case \"1\":\n                    res = \"一\";\n                    break;\n                case \"2\":\n                    res = \"二\";\n                    break;\n                case \"3\":\n                    res = \"三\";\n                    break;\n                case \"4\":\n                    res = \"四\";\n                    break;\n                case \"5\":\n                    res = \"五\";\n                    break;\n                case \"6\":\n                    res = \"六\";\n                    break;\n                case \"7\":\n                    res = \"七\";\n                    break;\n                case \"8\":\n                    res = \"八\";\n                    break;\n                case \"9\":\n                    res = \"九\";\n                    break;\n                default:\n                    res = \"零\";\n                    break;\n            }\n            if (str.Length > 1)\n            {\n                switch (str.Length)\n                {\n                    case 2:\n                    case 6:\n                        res += \"十\";\n                        break;\n                    case 3:\n                    case 7:\n                        res += \"百\";\n                        break;\n                    case 4:\n                        res += \"千\";\n                        break;\n                    case 5:\n                        res += \"万\";\n                        break;\n                    default:\n                        res += \"\";\n                        break;\n                }\n                res += NumberToChinese(int.Parse(str.Substring(1, str.Length - 1)));\n            }\n            return res;\n        }\n        #endregion -- 中文数字转换 --\n\n        public static string GetRegex(string command, string font, string main, string back)\n        {\n            string result = command;\n            Regex All = new Regex(string.Join(\"\", font) + main + string.Join(\"\", back));\n            if (All.IsMatch(command))\n            {\n                Regex rxMain = new Regex(main);\n                if (rxMain.IsMatch(result))\n                {\n                    var match = rxMain.Matches(result).Where(m => m.Value.Length > 0).FirstOrDefault();\n                    if (match is not null)\n                        return match.Value;\n                }\n            }\n            return \"\";\n        }\n\n        public static string GetRegexBySub(string command, string[] font, string main, string[] back)\n        {\n            string result = command;\n            Regex All = new Regex(string.Join(\"\", font) + main + string.Join(\"\", back));\n            if (All.IsMatch(command))\n            {\n                for (int i = 0; i < font?.Length; i++)\n                {\n                    Regex rxFont = new Regex(font[i]);\n                    foreach (Match matchFont in rxFont.Matches(result))\n                    {\n                        if (matchFont is not null)\n                            result = result.Substring(result.IndexOf(matchFont.Value.Trim()) + matchFont.Value.Trim().Length);\n                    }\n                }\n\n                for (int i = back.Length - 1; i >= 0; i--)\n                {\n                    Regex rxBack = new Regex(back[i]);\n                    foreach (Match matchBack in rxBack.Matches(result))\n                    {\n                        if (matchBack is not null)\n                            result = result.Substring(0, result.Length - matchBack.Value.Length);\n                    }\n                }\n            }\n            return result;\n        }\n\n        public static string? ReplaceGreenOnionsStringTags(this string? originalString, params (string Key, string Value)[] customTags)\n        {\n            originalString = originalString.ReplacePropertyChineseNameToValue();\n            if (originalString is null)\n                return null;\n            if (customTags is not null)\n            {\n                foreach (var tag in customTags)\n                {\n                    if (tag.Key.StartsWith('<') && tag.Key.EndsWith('>'))\n                        originalString = originalString.Replace($\"{tag.Key}\", tag.Value);\n                    else\n                        originalString = originalString.Replace($\"<{tag.Key}>\", tag.Value);\n                }\n            }\n            return originalString;\n        }\n\n        public static GreenOnionsMessages ReplaceGreenOnionsStringTags(this GreenOnionsMessages originalMessage, params KeyValuePair<string, string>[] customTags)\n        {\n            for (int i = 0; i < originalMessage.Count; i++)\n            {\n                if (originalMessage[i] is GreenOnionsTextMessage textMessage)\n                {\n                    string? text = textMessage.Text.ReplacePropertyChineseNameToValue();\n                    if (text is null)\n                    {\n                        originalMessage[i] = null;\n                        continue;\n                    }\n                    if (customTags is not null)\n                    {\n                        foreach (var tag in customTags)\n                            text = text.Replace($\"<{tag.Key}>\", tag.Value);\n                    }\n                    originalMessage[i] = text;\n                }\n            }\n            return originalMessage;\n        }\n\n\n        private static string? ReplacePropertyChineseNameToValue(this string? str)\n        {\n            if (str is null)\n            {\n                return null;\n            }\n            PropertyInfo[] PropertyInfos = typeof(BotConfig).GetProperties();\n            if (PropertyInfos is null)\n            {\n                LogHelper.WriteWarningLog(\"获取配置信息失败\");\n                return str;\n            }\n            foreach (PropertyInfo item in PropertyInfos)\n            {\n                try\n                {\n                    foreach (var attributes in item.CustomAttributes)\n                    {\n                        if (attributes.AttributeType.Name == \"PropertyChineseNameAttribute\")\n                        {\n                            var attribute = attributes.ConstructorArguments.Select(v => v.Value).FirstOrDefault();\n                            if (attribute is not null)\n                                str = str.Replace($\"<{attribute}>\", item.GetValue(BotInfo.Config)?.ToString());\n                        }\n                    }\n                }\n                catch (Exception ex)\n                {\n                    LogHelper.WriteErrorLog($\"属性特性转换为属性值时发生异常, 属性为:{item.Name}\", ex);\n                }\n            }\n            return str;\n        }\n    }\n}\n",
        "gt": [
            "'GreenOnions/GreenOnions.Utility/Helper/StringHelper.cs'",
            "'GreenOnions/GreenOnions.BotMain/MiraiApiHttp/MiraiApiHttpMessageConverter.cs'",
            "'GreenOnions/GreenOnions.BotManagerWindows/FrmMain.cs'"
        ]
    },
    {
        "files": [
            "'Transformalize/src/Containers/Autofac/Autofac.Shared/Modules/InternalModule.cs'",
            "'Transformalize/src/Containers/Autofac/Autofac.Shared/Container.cs'",
            "'Transformalize/src/Tests/Test.Unit.Shared/DateConvert.cs'",
            "'Transformalize/src/Transformalize/Transforms/ToTimeTransform.cs'",
            "'Transformalize/src/Transformalize/Nulls/NullTransform.cs'"
        ],
        "content": "'Transformalize/src/Containers/Autofac/Autofac.Shared/Modules/InternalModule.cs'\n:#region license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\n\nusing Autofac;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Transformalize.Actions;\nusing Transformalize.Configuration;\nusing Transformalize.Context;\nusing Transformalize.Contracts;\nusing Transformalize.Extensions;\nusing Transformalize.Impl;\nusing Transformalize.Nulls;\nusing Transformalize.Providers.Internal;\nusing Module = Autofac.Module;\n\nnamespace Transformalize.Containers.Autofac.Modules {\n\n\n\n\n\n   public class InternalModule : Module {\n\n      private readonly HashSet<string> _internalActions = new HashSet<string> { \"log\", \"web\", \"wait\", \"sleep\", \"tfl\", \"exit\" };\n      private const string Internal = \"internal\";\n      private readonly Process _process;\n\n      public InternalModule(Process process) {\n         _process = process;\n      }\n\n      protected override void Load(ContainerBuilder builder) {\n\n         if (_process == null)\n            return;\n\n         foreach (var action in _process.Templates.Where(t => t.Enabled).SelectMany(t => t.Actions).Where(a => a.GetModes().Any(m => m == _process.Mode || m == \"*\"))) {\n            if (_internalActions.Contains(action.Type)) {\n               builder.Register(ctx => SwitchAction(ctx, _process, action)).Named<IAction>(action.Key);\n            }\n         }\n         foreach (var action in _process.Actions.Where(a => a.GetModes().Any(m => m == _process.Mode || m == \"*\"))) {\n            if (_internalActions.Contains(action.Type)) {\n               builder.Register(ctx => SwitchAction(ctx, _process, action)).Named<IAction>(action.Key);\n            }\n         }\n\n         if (_process.Connections.All(c=>c.Provider != Internal)) {\n            return;\n         }\n\n\n         foreach (var connection in _process.Connections.Where(c => c.Provider == Internal)) {\n            builder.RegisterType<NullSchemaReader>().Named<ISchemaReader>(connection.Key);\n         }\n\n\n\n         if (_process.GetOutputConnection().Provider == \"internal\") {\n\n\n            builder.Register<IOutputController>(ctx => new NullOutputController()).As<IOutputController>();\n\n            foreach (var entity in _process.Entities) {\n\n               builder.Register<IOutputController>(ctx => new NullOutputController()).Named<IOutputController>(entity.Key);\n               builder.Register<IOutputProvider>(ctx => new InternalOutputProvider(ctx.ResolveNamed<OutputContext>(entity.Key), ctx.ResolveNamed<IWrite>(entity.Key))).Named<IOutputProvider>(entity.Key);\n\n\n               builder.Register<IWrite>(ctx => new InternalWriter(ctx.ResolveNamed<OutputContext>(entity.Key))).Named<IWrite>(entity.Key);\n            }\n         }\n\n\n\n         foreach (var entity in _process.Entities.Where(e => _process.Connections.First(c => c.Name == e.Input).Provider == Internal)) {\n\n            builder.RegisterType<NullInputProvider>().Named<IInputProvider>(entity.Key);\n\n\n            if (entity.Delete) {\n               builder.Register<IReadInputKeysAndHashCodes>(ctx => {\n\n                  var inputContext = ctx.ResolveNamed<InputContext>(entity.Key);\n                  var rowFactory = new RowFactory(inputContext.RowCapacity, entity.IsMaster, false);\n                  return new InternalKeysReader(new InternalReader(inputContext, rowFactory));\n               }).Named<IReadInputKeysAndHashCodes>(entity.Key);\n            }\n\n\n            builder.Register<IRead>(ctx => {\n               var input = ctx.ResolveNamed<InputContext>(entity.Key);\n               var rowFactory = ctx.ResolveNamed<IRowFactory>(entity.Key, new NamedParameter(\"capacity\", input.RowCapacity));\n\n               return new InternalReader(input, rowFactory);\n            }).Named<IRead>(entity.Key);\n\n         }\n      }\n\n      private static IAction SwitchAction(IComponentContext ctx, Process process, Configuration.Action action) {\n\n         var context = new PipelineContext(ctx.Resolve<IPipelineLogger>(), process);\n\n         switch (action.Type) {\n            case \"log\":\n               return new LogAction(context, action);\n            case \"wait\":\n            case \"sleep\":\n               return new WaitAction(action);\n            case \"tfl\":\n               var cfg = string.IsNullOrEmpty(action.Url) ? action.File : action.Url;\n               if (string.IsNullOrEmpty(cfg) && !string.IsNullOrEmpty(action.Body)) {\n                  cfg = action.Body;\n               }\n               return new PipelineAction(context, action, cfg);\n            case \"exit\":\n               return new ExitAction(context, action);\n            default:\n               context.Error(\"{0} action is not registered.\", action.Type);\n               return new NullAction();\n         }\n      }\n\n   }\n}\n\n'Transformalize/src/Containers/Autofac/Autofac.Shared/Container.cs'\n:#region license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\n\nusing Autofac;\nusing Autofac.Core;\nusing Cfg.Net.Shorthand;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Transformalize.Containers.Autofac.Modules;\nusing Transformalize.Context;\nusing Transformalize.Contracts;\nusing Transformalize.Impl;\nusing Transformalize.Nulls;\nusing Transformalize.Transforms.System;\nusing LogTransform = Transformalize.Transforms.System.LogTransform;\nusing Process = Transformalize.Configuration.Process;\n\nnamespace Transformalize.Containers.Autofac {\n   public class Container {\n\n      private readonly List<IModule> _modules = new List<IModule>();\n      private readonly HashSet<string> _methods = new HashSet<string>();\n      private readonly ShorthandRoot _shortHand = new ShorthandRoot();\n      private readonly List<TransformHolder> _transforms = new List<TransformHolder>();\n      private readonly List<ValidatorHolder> _validators = new List<ValidatorHolder>();\n\n      public Container(params IModule[] modules) {\n         _modules.AddRange(modules);\n      }\n\n      public Container(params TransformHolder[] transforms) {\n         _transforms.AddRange(transforms);\n      }\n\n      public Container(params ValidatorHolder[] validators) {\n         _validators.AddRange(validators);\n      }\n\n      public Container() { }\n\n      public ILifetimeScope CreateScope(Process process, IPipelineLogger logger) {\n\n         var builder = new ContainerBuilder();\n#if PLUGINS\n         builder.Properties[\"Process\"] = process;\n#endif\n         builder.Register(ctx => process).As<Process>();\n         builder.RegisterInstance(logger).As<IPipelineLogger>().SingleInstance();\n\n\n         var transformModule = new TransformModule(process, _methods, _shortHand, logger);\n         foreach (var t in _transforms) {\n            transformModule.AddTransform(t);\n         }\n         builder.RegisterModule(transformModule);\n\n\n         var validateModule = new ValidateModule(process, _methods, _shortHand, logger);\n         foreach (var v in _validators) {\n            validateModule.AddValidator(v);\n         }\n         builder.RegisterModule(validateModule);\n\n         builder.RegisterModule(new InternalModule(process));\n\n#if PLUGINS\n         builder.RegisterModule(new ProviderPlugInModule(process));\n\n\n         builder.Properties[\"ShortHand\"] = _shortHand;\n         builder.Properties[\"Methods\"] = _methods;\n#endif\n\n\n         foreach (var module in _modules) {\n            builder.RegisterModule(module);\n         }\n\n\n         builder.Register<IContext>((ctx, p) => new PipelineContext(logger, process)).As<IContext>();\n\n\n         builder.Register(ctx => {\n            var context = ctx.Resolve<IContext>();\n            return new OutputContext(context);\n         }).As<OutputContext>();\n\n\n         foreach (var connection in process.Connections) {\n\n            builder.Register(ctx => new ConnectionContext(ctx.Resolve<IContext>(), connection)).Named<IConnectionContext>(connection.Key);\n\n            if (connection.Name != process.Output)\n               continue;\n\n\n            builder.Register(ctx => {\n               var context = ctx.ResolveNamed<IConnectionContext>(connection.Key);\n               return new OutputContext(context);\n            }).Named<OutputContext>(connection.Key);\n\n         }\n\n\n         foreach (var entity in process.Entities) {\n            builder.Register<IContext>((ctx, p) => new PipelineContext(ctx.Resolve<IPipelineLogger>(), process, entity)).Named<IContext>(entity.Key);\n\n            builder.Register(ctx => {\n               var context = ctx.ResolveNamed<IContext>(entity.Key);\n               return new InputContext(context);\n            }).Named<InputContext>(entity.Key);\n\n            builder.Register<IRowFactory>((ctx, p) => new RowFactory(p.Named<int>(\"capacity\"), entity.IsMaster, false)).Named<IRowFactory>(entity.Key);\n\n            builder.Register(ctx => {\n               var context = ctx.ResolveNamed<IContext>(entity.Key);\n               return new OutputContext(context);\n            }).Named<OutputContext>(entity.Key);\n\n            var connection = process.Connections.First(c => c.Name == entity.Input);\n            builder.Register(ctx => new ConnectionContext(ctx.Resolve<IContext>(), connection)).Named<IConnectionContext>(entity.Key);\n\n         }\n\n\n         foreach (var entity in process.Entities) {\n            builder.Register(ctx => {\n\n               var context = ctx.ResolveNamed<IContext>(entity.Key);\n               var outputController = ctx.IsRegisteredWithName<IOutputController>(entity.Key) ? ctx.ResolveNamed<IOutputController>(entity.Key) : new NullOutputController();\n               var pipeline = new DefaultPipeline(outputController, context);\n\n\n               pipeline.Register(ctx.IsRegisteredWithName(entity.Key, typeof(IRead)) ? ctx.ResolveNamed<IRead>(entity.Key) : null);\n               pipeline.Register(ctx.IsRegisteredWithName(entity.Key, typeof(IInputProvider)) ? ctx.ResolveNamed<IInputProvider>(entity.Key) : null);\n\n\n               pipeline.Register(new IncrementTransform(context));\n               pipeline.Register(new DefaultTransform(context, context.GetAllEntityFields().Where(f => !f.System)));\n               pipeline.Register(new SystemHashcodeTransform(new PipelineContext(ctx.Resolve<IPipelineLogger>(), process, entity)));\n               pipeline.Register(TransformFactory.GetTransforms(ctx, context, entity.GetAllFields().Where(f => f.Transforms.Any())));\n               pipeline.Register(new SystemFieldsTransform(new PipelineContext(ctx.Resolve<IPipelineLogger>(), process, entity)));\n               pipeline.Register(ValidateFactory.GetValidators(ctx, context, entity.GetAllFields().Where(f => f.Validators.Any())));\n               pipeline.Register(new StringTruncateTransfom(new PipelineContext(ctx.Resolve<IPipelineLogger>(), process, entity)));\n               pipeline.Register(new LogTransform(context));\n\n\n               pipeline.Register(ctx.IsRegisteredWithName(entity.Key, typeof(IWrite)) ? ctx.ResolveNamed<IWrite>(entity.Key) : null);\n               pipeline.Register(ctx.IsRegisteredWithName(entity.Key, typeof(IOutputProvider)) ? ctx.ResolveNamed<IOutputProvider>(entity.Key) : null);\n\n\n               pipeline.Register(process.ReadOnly || !ctx.IsRegisteredWithName(entity.Key, typeof(IUpdate)) ? new NullUpdater() : ctx.ResolveNamed<IUpdate>(entity.Key));\n\n               return pipeline;\n\n            }).Named<IPipeline>(entity.Key);\n         }\n\n\n         builder.Register(ctx => {\n\n            var calc = process.ToCalculatedFieldsProcess();\n            var entity = calc.Entities.First();\n\n            var context = new PipelineContext(ctx.Resolve<IPipelineLogger>(), calc, entity);\n            var outputContext = new OutputContext(context);\n\n            context.Debug(() => $\"Registering {process.Pipeline} pipeline.\");\n            var outputController = ctx.IsRegistered<IOutputController>() ? ctx.Resolve<IOutputController>() : new NullOutputController();\n            var pipeline = new DefaultPipeline(outputController, context);\n\n\n            pipeline.Register(new NullUpdater(context, false));\n\n            if (!process.CalculatedFields.Any()) {\n               pipeline.Register(new NullReader(context, false));\n               pipeline.Register(new NullWriter(context, false));\n               return pipeline;\n            }\n\n\n            pipeline.Register(new IncrementTransform(context));\n            pipeline.Register(new LogTransform(context));\n            pipeline.Register(new DefaultTransform(new PipelineContext(ctx.Resolve<IPipelineLogger>(), calc, entity), entity.CalculatedFields));\n            pipeline.Register(TransformFactory.GetTransforms(ctx, context, entity.CalculatedFields));\n            pipeline.Register(ValidateFactory.GetValidators(ctx, context, entity.GetAllFields().Where(f => f.Validators.Any())));\n            pipeline.Register(new StringTruncateTransfom(new PipelineContext(ctx.Resolve<IPipelineLogger>(), calc, entity)));\n\n\n            pipeline.Register(ctx.IsRegistered<IRead>() ? ctx.Resolve<IRead>() : new NullReader(context));\n            pipeline.Register(ctx.IsRegistered<IWrite>() ? ctx.Resolve<IWrite>() : new NullWriter(context));\n\n            if (outputContext.Connection.Provider == \"sqlserver\") {\n               pipeline.Register(new MinDateTransform(new PipelineContext(ctx.Resolve<IPipelineLogger>(), calc, entity), new DateTime(1753, 1, 1)));\n            }\n\n            return pipeline;\n         }).As<IPipeline>();\n\n\n         builder.Register<IProcessController>(ctx => {\n\n            var pipelines = new List<IPipeline>();\n\n\n            foreach (var entity in process.Entities) {\n               var pipeline = ctx.ResolveNamed<IPipeline>(entity.Key);\n\n               pipelines.Add(pipeline);\n               if (entity.Delete && process.Mode != \"init\") {\n                  pipeline.Register(ctx.ResolveNamed<IEntityDeleteHandler>(entity.Key));\n               }\n            }\n\n\n            if (ctx.IsRegistered<IPipeline>()) {\n               pipelines.Add(ctx.Resolve<IPipeline>());\n            }\n\n            var context = ctx.Resolve<IContext>();\n            var controller = new ProcessController(pipelines, context);\n\n\n            if (process.Mode == \"init\" && ctx.IsRegistered<IInitializer>()) {\n               controller.PreActions.Add(ctx.Resolve<IInitializer>());\n            }\n\n\n            var isAdo = Constants.AdoProviderSet().Contains(process.GetOutputConnection().Provider);\n            if (process.Flatten && isAdo) {\n               if (ctx.IsRegisteredWithName<IAction>(process.GetOutputConnection().Key)) {\n                  controller.PostActions.Add(ctx.ResolveNamed<IAction>(process.GetOutputConnection().Key));\n               } else {\n                  context.Error($\"Could not find ADO Flatten Action for provider {process.GetOutputConnection().Provider}.\");\n               }\n            }\n\n\n            foreach (var action in process.Actions.Where(a => a.GetModes().Any(m => m == process.Mode || m == \"*\"))) {\n               if (action.Before) {\n                  controller.PreActions.Add(ctx.ResolveNamed<IAction>(action.Key));\n               }\n               if (action.After) {\n                  controller.PostActions.Add(ctx.ResolveNamed<IAction>(action.Key));\n               }\n            }\n\n            return controller;\n         }).As<IProcessController>();\n\n         var build = builder.Build();\n\n         return build.BeginLifetimeScope();\n\n      }\n\n      public void AddValidator(Func<IContext, IValidate> getValidator, IEnumerable<OperationSignature> signatures) {\n         _validators.Add(new ValidatorHolder(getValidator, signatures));\n      }\n      public void AddTransform(Func<IContext, ITransform> getTransform, IEnumerable<OperationSignature> signatures) {\n         _transforms.Add(new TransformHolder(getTransform, signatures));\n      }\n      public void AddModule(IModule module) {\n         _modules.Add(module);\n      }\n\n   }\n}\n'Transformalize/src/Tests/Test.Unit.Shared/DateConvert.cs'\n:﻿#region license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing System;\nusing System.Linq;\nusing Autofac;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing Transformalize.Configuration;\nusing Transformalize.Containers.Autofac;\nusing Transformalize.Contracts;\nusing Transformalize.Providers.Console;\n\nnamespace Tests {\n\n   [TestClass]\n   public class TryDateConvert {\n\n      [TestMethod]\n      public void TryConvertSpecificFormat() {\n\n         var xml = @\"\n    <add name='TestProcess'>\n      <entities>\n        <add name='TestData' >\n          <rows>\n            <add OwensDate='02152018040000' />\n          </rows>\n          <fields>\n            <add name='OwensDate' type='datetime' t='convert(date,MMddyyyyHHmmss)' />\n          </fields>\n        </add>\n      </entities>\n    </add>\n            \".Replace('\\'', '\"');\n\n\n         var logger = new ConsoleLogger(LogLevel.Debug);\n         using(var outer = new ConfigurationContainer().CreateScope(xml, logger)) {\n            var process = outer.Resolve<Process>();\n            using(var inner = new Container().CreateScope(process, logger)) {\n               inner.Resolve<IProcessController>().Execute();\n               var row = process.Entities.First().Rows.First();\n               Assert.AreEqual(new DateTime(2018, 2, 15, 4, 0, 0), row[\"OwensDate\"]);\n            }\n         }\n\n\n      }\n\n      [TestMethod]\n      public void MakeSureTimeIsntChanging() {\n\n         var xml = @\"\n    <add name='TestProcess'>\n      <entities>\n        <add name='TestData' >\n          <rows>\n            <add Date='2019-05-05 1:05 PM' />\n          </rows>\n          <fields>\n            <add name='Date' type='datetime' />\n          </fields>\n          <calculated-fields>\n            <add name='DateDefault' type='datetime' default='2019-05-05 1:07 PM' />\n            <add name='DateWithZ' type='datetime' default='2019-05-05 1:08 PM Z' />\n            <add name='DateWithOffSet' type='datetime' default='2019-05-05 1:09 PM +00:00' />\n            <add name='DateWithOffSet4' type='datetime' default='2019-05-05 1:09 PM -04:00' />\n          </calculated-fields>\n        </add>\n      </entities>\n    </add>\";\n\n         var logger = new ConsoleLogger(LogLevel.Debug);\n         using (var outer = new ConfigurationContainer().CreateScope(xml, logger)) {\n            var process = outer.Resolve<Process>();\n            using (var inner = new Container().CreateScope(process, logger)) {\n               inner.Resolve<IProcessController>().Execute();\n               var row = process.Entities.First().Rows.First();\n               Assert.AreEqual(new DateTime(2019, 5, 5, 13, 5, 0), row[\"Date\"]);\n               Assert.AreEqual(new DateTime(2019, 5, 5, 13, 7, 0), row[\"DateDefault\"]);\n               Assert.AreEqual(new DateTime(2019, 5, 5, 13, 8, 0), row[\"DateWithZ\"]);\n               Assert.AreEqual(new DateTime(2019, 5, 5, 13, 9, 0), row[\"DateWithOffSet\"]);\n               Assert.AreEqual(new DateTime(2019, 5, 5, 17, 9, 0), row[\"DateWithOffSet4\"]);\n            }\n         }\n\n\n      }\n   }\n}\n\n'Transformalize/src/Transformalize/Transforms/ToTimeTransform.cs'\n:﻿#region license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing System;\nusing System.Collections.Generic;\nusing Transformalize.Configuration;\nusing Transformalize.Contracts;\n\nnamespace Transformalize.Transforms {\n   public class ToTimeTransform : BaseTransform {\n\n      private readonly Field _input;\n      private readonly Func<double, string> _transform;\n\n      public ToTimeTransform(IContext context = null) : base(context, \"string\") {\n\n         if (IsMissingContext()) {\n            return;\n         }\n\n         if (!Constants.TimeSpanComponents.Contains(Context.Operation.TimeComponent)) {\n            Error($\"The {Context.Operation.Method} expects a time component of {Utility.ReadableDomain(Constants.TimeSpanComponents)}.\");\n            Run = false;\n            return;\n         }\n\n         if (IsNotReceivingNumber()) {\n            return;\n         }\n\n         _input = SingleInput();\n\n         switch (Context.Operation.TimeComponent) {\n            case \"minute\":\n            case \"minutes\":\n               _transform = (value) => TimeSpan.FromMinutes(value).ToString();\n               break;\n            case \"second\":\n            case \"seconds\":\n               _transform = (value) => TimeSpan.FromSeconds(value).ToString();\n               break;\n            case \"millisecond\":\n            case \"milliseconds\":\n               _transform = (value) => TimeSpan.FromMilliseconds(value).ToString();\n               break;\n            case \"tick\":\n            case \"ticks\":\n               _transform = (value) => TimeSpan.FromTicks(Convert.ToInt64(value)).ToString();\n               break;\n            case \"day\":\n            case \"days\":\n               _transform = (value) => TimeSpan.FromDays(value).ToString();\n               break;\n            default:\n               _transform = (value) => TimeSpan.FromHours(value).ToString();\n               break;\n         }\n\n\n      }\n\n      public override IRow Operate(IRow row) {\n         var value = _input.Type == \"double\" ? (double)row[_input] : Convert.ToDouble(row[_input]);\n         row[Context.Field] = _transform(value);\n         return row;\n      }\n\n      public override IEnumerable<OperationSignature> GetSignatures() {\n         yield return new OperationSignature(\"totime\") {\n            Parameters = new List<OperationParameter> {\n               new OperationParameter(\"time-component\")\n            }\n         };\n      }\n\n   }\n}\n'Transformalize/src/Transformalize/Nulls/NullTransform.cs'\n:#region license\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing Transformalize.Contracts;\nusing Transformalize.Transforms;\n\nnamespace Transformalize.Nulls {\n    public class NullTransform : BaseTransform {\n        public NullTransform(IContext context) : base(context, null) { }\n        public override IRow Operate(IRow row) {\n            return row;\n        }\n\n    }\n}",
        "gt": [
            "'Transformalize/src/Transformalize/Transforms/ToTimeTransform.cs'",
            "'Transformalize/src/Transformalize/Nulls/NullTransform.cs'",
            "'Transformalize/src/Containers/Autofac/Autofac.Shared/Modules/InternalModule.cs'",
            "'Transformalize/src/Containers/Autofac/Autofac.Shared/Container.cs'",
            "'Transformalize/src/Tests/Test.Unit.Shared/DateConvert.cs'"
        ]
    },
    {
        "files": [
            "'Idle-Miner/Assets/Plugins/Zenject/OptionalExtras/MemoryPoolMonitor/Editor/DebugWindow/MpmWindow.cs'",
            "'Idle-Miner/Assets/Plugins/Zenject/Source/Util/ReflectionInfoTypeInfoConverter.cs'",
            "'Idle-Miner/Assets/Plugins/Zenject/Source/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabDynamicContext.cs'"
        ],
        "content": "'Idle-Miner/Assets/Plugins/Zenject/OptionalExtras/MemoryPoolMonitor/Editor/DebugWindow/MpmWindow.cs'\n:using System;\nusing ModestTree;\nusing UnityEngine;\nusing UnityEditor;\nusing Zenject;\n\nnamespace Zenject.MemoryPoolMonitor\n{\n    public class MpmWindow : ZenjectEditorWindow\n    {\n        [MenuItem(\"Window/Zenject Pool Monitor\")]\n        public static MpmWindow GetOrCreateWindow()\n        {\n            var window = EditorWindow.GetWindow<MpmWindow>();\n            window.titleContent = new GUIContent(\"Pool Monitor\");\n            return window;\n        }\n\n        public override void InstallBindings()\n        {\n            MpmSettingsInstaller.InstallFromResource(Container);\n\n            Container.BindInstance(this);\n            Container.BindInterfacesTo<MpmView>().AsSingle();\n        }\n    }\n}\n\n'Idle-Miner/Assets/Plugins/Zenject/Source/Util/ReflectionInfoTypeInfoConverter.cs'\n:\n\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Linq.Expressions;\nusing System.Reflection;\nusing ModestTree;\n#if !NOT_UNITY3D\nusing UnityEngine;\n#endif\n\nnamespace Zenject.Internal\n{\n    public static class ReflectionInfoTypeInfoConverter\n    {\n        public static InjectTypeInfo.InjectMethodInfo ConvertMethod(\n            ReflectionTypeInfo.InjectMethodInfo injectMethod)\n        {\n            var methodInfo = injectMethod.MethodInfo;\n            var action = TryCreateActionForMethod(methodInfo);\n\n            if (action == null)\n            {\n                action = (obj, args) => methodInfo.Invoke(obj, args);\n            }\n\n            return new InjectTypeInfo.InjectMethodInfo(\n                action,\n                injectMethod.Parameters.Select(x => x.InjectableInfo).ToArray(),\n                methodInfo.Name);\n        }\n\n        public static InjectTypeInfo.InjectConstructorInfo ConvertConstructor(\n            ReflectionTypeInfo.InjectConstructorInfo injectConstructor, Type type)\n        {\n            return new InjectTypeInfo.InjectConstructorInfo(\n                TryCreateFactoryMethod(type, injectConstructor),\n                injectConstructor.Parameters.Select(x => x.InjectableInfo).ToArray());\n        }\n\n        public static InjectTypeInfo.InjectMemberInfo ConvertField(\n            Type parentType, ReflectionTypeInfo.InjectFieldInfo injectField)\n        {\n            return new InjectTypeInfo.InjectMemberInfo(\n                GetSetter(parentType, injectField.FieldInfo), injectField.InjectableInfo);\n        }\n\n        public static InjectTypeInfo.InjectMemberInfo ConvertProperty(\n            Type parentType, ReflectionTypeInfo.InjectPropertyInfo injectProperty)\n        {\n            return new InjectTypeInfo.InjectMemberInfo(\n                GetSetter(parentType, injectProperty.PropertyInfo), injectProperty.InjectableInfo);\n        }\n\n        static ZenFactoryMethod TryCreateFactoryMethod(\n            Type type, ReflectionTypeInfo.InjectConstructorInfo reflectionInfo)\n        {\n#if !NOT_UNITY3D\n            if (type.DerivesFromOrEqual<Component>())\n            {\n                return null;\n            }\n#endif\n\n            if (type.IsAbstract())\n            {\n                Assert.That(reflectionInfo.Parameters.IsEmpty());\n                return null;\n            }\n\n            var constructor = reflectionInfo.ConstructorInfo;\n\n            var factoryMethod = TryCreateFactoryMethodCompiledLambdaExpression(type, constructor);\n\n            if (factoryMethod == null)\n            {\n                if (constructor == null)\n                {\n\n\n\n\n\n                    factoryMethod = args =>\n                    {\n                        Assert.That(args.Length == 0);\n                        return Activator.CreateInstance(type, new object[0]);\n                    };\n                }\n                else\n                {\n                    factoryMethod = constructor.Invoke;\n                }\n            }\n\n            return factoryMethod;\n        }\n\n        static ZenFactoryMethod TryCreateFactoryMethodCompiledLambdaExpression(\n            Type type, ConstructorInfo constructor)\n        {\n#if NET_4_6 && !ENABLE_IL2CPP && !ZEN_DO_NOT_USE_COMPILED_EXPRESSIONS\n\n            if (type.ContainsGenericParameters)\n            {\n                return null;\n            }\n\n            ParameterExpression param = Expression.Parameter(typeof(object[]));\n\n            if (constructor == null)\n            {\n                return Expression.Lambda<ZenFactoryMethod>(\n                    Expression.Convert(\n                        Expression.New(type), typeof(object)), param).Compile();\n            }\n\n            ParameterInfo[] par = constructor.GetParameters();\n            Expression[] args = new Expression[par.Length];\n\n            for (int i = 0; i != par.Length; ++i)\n            {\n                args[i] = Expression.Convert(\n                    Expression.ArrayIndex(\n                        param, Expression.Constant(i)), par[i].ParameterType);\n            }\n\n            return Expression.Lambda<ZenFactoryMethod>(\n                Expression.Convert(\n                    Expression.New(constructor, args), typeof(object)), param).Compile();\n#else\n            return null;\n#endif\n        }\n\n        static ZenInjectMethod TryCreateActionForMethod(MethodInfo methodInfo)\n        {\n#if NET_4_6 && !ENABLE_IL2CPP && !ZEN_DO_NOT_USE_COMPILED_EXPRESSIONS\n\n            if (methodInfo.DeclaringType.ContainsGenericParameters)\n            {\n                return null;\n            }\n\n            ParameterInfo[] par = methodInfo.GetParameters();\n\n            if (par.Any(x => x.ParameterType.ContainsGenericParameters))\n            {\n                return null;\n            }\n\n            Expression[] args = new Expression[par.Length];\n            ParameterExpression argsParam = Expression.Parameter(typeof(object[]));\n            ParameterExpression instanceParam = Expression.Parameter(typeof(object));\n\n            for (int i = 0; i != par.Length; ++i)\n            {\n                args[i] = Expression.Convert(\n                    Expression.ArrayIndex(\n                        argsParam, Expression.Constant(i)), par[i].ParameterType);\n            }\n\n            return Expression.Lambda<ZenInjectMethod>(\n                Expression.Call(\n                    Expression.Convert(instanceParam, methodInfo.DeclaringType), methodInfo, args),\n                instanceParam, argsParam).Compile();\n#else\n            return null;\n#endif\n        }\n\n#if !(UNITY_WSA && ENABLE_DOTNET) || UNITY_EDITOR\n        static IEnumerable<FieldInfo> GetAllFields(Type t, BindingFlags flags)\n        {\n            if (t == null)\n            {\n                return Enumerable.Empty<FieldInfo>();\n            }\n\n            return t.GetFields(flags).Concat(GetAllFields(t.BaseType, flags)).Distinct();\n        }\n\n        static ZenMemberSetterMethod GetOnlyPropertySetter(\n            Type parentType,\n            string propertyName)\n        {\n            Assert.That(parentType != null);\n            Assert.That(!string.IsNullOrEmpty(propertyName));\n\n            var allFields = GetAllFields(\n                parentType, BindingFlags.Instance | BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.FlattenHierarchy).ToList();\n\n            var writeableFields = allFields.Where(f => f.Name == string.Format(\"<\" + propertyName + \">k__BackingField\", propertyName)).ToList();\n\n            if (!writeableFields.Any())\n            {\n                throw new ZenjectException(string.Format(\n                    \"Can't find backing field for get only property {0} on {1}.\\r\\n{2}\",\n                    propertyName, parentType.FullName, string.Join(\";\", allFields.Select(f => f.Name).ToArray())));\n            }\n\n            return (injectable, value) => writeableFields.ForEach(f => f.SetValue(injectable, value));\n        }\n#endif\n\n        static ZenMemberSetterMethod GetSetter(Type parentType, MemberInfo memInfo)\n        {\n            var setterMethod = TryGetSetterAsCompiledExpression(parentType, memInfo);\n\n            if (setterMethod != null)\n            {\n                return setterMethod;\n            }\n\n            var fieldInfo = memInfo as FieldInfo;\n            var propInfo = memInfo as PropertyInfo;\n\n            if (fieldInfo != null)\n            {\n                return ((injectable, value) => fieldInfo.SetValue(injectable, value));\n            }\n\n            Assert.IsNotNull(propInfo);\n\n#if UNITY_WSA && ENABLE_DOTNET && !UNITY_EDITOR\n            return ((object injectable, object value) => propInfo.SetValue(injectable, value, null));\n#else\n            if (propInfo.CanWrite)\n            {\n                return ((injectable, value) => propInfo.SetValue(injectable, value, null));\n            }\n\n            return GetOnlyPropertySetter(parentType, propInfo.Name);\n#endif\n        }\n\n        static ZenMemberSetterMethod TryGetSetterAsCompiledExpression(Type parentType, MemberInfo memInfo)\n        {\n#if NET_4_6 && !ENABLE_IL2CPP && !ZEN_DO_NOT_USE_COMPILED_EXPRESSIONS\n\n            if (parentType.ContainsGenericParameters)\n            {\n                return null;\n            }\n\n            var fieldInfo = memInfo as FieldInfo;\n            var propInfo = memInfo as PropertyInfo;\n\n\n\n\n            if (!parentType.IsValueType() && (fieldInfo == null || !fieldInfo.IsInitOnly) && (propInfo == null || propInfo.CanWrite))\n            {\n                Type memberType = fieldInfo != null\n                    ? fieldInfo.FieldType : propInfo.PropertyType;\n\n                var typeParam = Expression.Parameter(typeof(object));\n                var valueParam = Expression.Parameter(typeof(object));\n\n                return Expression.Lambda<ZenMemberSetterMethod>(\n                    Expression.Assign(\n                        Expression.MakeMemberAccess(Expression.Convert(typeParam, parentType), memInfo),\n                        Expression.Convert(valueParam, memberType)),\n                        typeParam, valueParam).Compile();\n            }\n#endif\n\n            return null;\n        }\n    }\n}\n\n'Idle-Miner/Assets/Plugins/Zenject/Source/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabDynamicContext.cs'\n:#if !NOT_UNITY3D\n\nusing System;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing ModestTree;\nusing Zenject.Internal;\n\nnamespace Zenject\n{\n    [NoReflectionBaking]\n    public abstract class SubContainerCreatorByNewPrefabDynamicContext : SubContainerCreatorDynamicContext\n    {\n        readonly IPrefabProvider _prefabProvider;\n        readonly GameObjectCreationParameters _gameObjectBindInfo;\n\n        public SubContainerCreatorByNewPrefabDynamicContext(\n            DiContainer container,\n            IPrefabProvider prefabProvider, GameObjectCreationParameters gameObjectBindInfo)\n            : base(container)\n        {\n            _prefabProvider = prefabProvider;\n            _gameObjectBindInfo = gameObjectBindInfo;\n        }\n\n        protected override GameObject CreateGameObject(InjectContext context, out bool shouldMakeActive)\n        {\n            var prefab = _prefabProvider.GetPrefab(context);\n\n            var gameObj = Container.CreateAndParentPrefab(\n                prefab, _gameObjectBindInfo, null, out shouldMakeActive);\n\n            if (gameObj.GetComponent<GameObjectContext>() != null)\n            {\n                throw Assert.CreateException(\n                    \"Found GameObjectContext already attached to prefab with name '{0}'!  When using ByNewPrefabMethod or ByNewPrefabInstaller, the GameObjectContext is added to the prefab dynamically\", prefab.name);\n            }\n\n            return gameObj;\n        }\n    }\n\n    [NoReflectionBaking]\n    public class SubContainerCreatorByNewPrefabInstaller : SubContainerCreatorByNewPrefabDynamicContext\n    {\n        readonly Type _installerType;\n        readonly List<TypeValuePair> _extraArgs;\n\n        public SubContainerCreatorByNewPrefabInstaller(\n            DiContainer container, IPrefabProvider prefabProvider,\n            GameObjectCreationParameters gameObjectBindInfo,\n            Type installerType, List<TypeValuePair> extraArgs)\n            : base(container, prefabProvider, gameObjectBindInfo)\n        {\n            _installerType = installerType;\n            _extraArgs = extraArgs;\n\n            Assert.That(installerType.DerivesFrom<InstallerBase>(),\n                \"Invalid installer type given during bind command.  Expected type '{0}' to derive from 'Installer<>'\", installerType);\n        }\n\n        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)\n        {\n            context.AddNormalInstaller(\n                new ActionInstaller(subContainer =>\n                    {\n                        var extraArgs = ZenPools.SpawnList<TypeValuePair>();\n\n                        extraArgs.AllocFreeAddRange(_extraArgs);\n                        extraArgs.AllocFreeAddRange(args);\n\n                        var installer = (InstallerBase)subContainer.InstantiateExplicit(\n                            _installerType, extraArgs);\n\n                        ZenPools.DespawnList(extraArgs);\n\n                        installer.InstallBindings();\n                    }));\n        }\n    }\n\n    [NoReflectionBaking]\n    public class SubContainerCreatorByNewPrefabMethod : SubContainerCreatorByNewPrefabDynamicContext\n    {\n        readonly Action<DiContainer> _installerMethod;\n\n        public SubContainerCreatorByNewPrefabMethod(\n            DiContainer container, IPrefabProvider prefabProvider,\n            GameObjectCreationParameters gameObjectBindInfo,\n            Action<DiContainer> installerMethod)\n            : base(container, prefabProvider, gameObjectBindInfo)\n        {\n            _installerMethod = installerMethod;\n        }\n\n        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)\n        {\n            Assert.That(args.IsEmpty());\n            context.AddNormalInstaller(\n                new ActionInstaller(_installerMethod));\n        }\n    }\n\n    [NoReflectionBaking]\n    public class SubContainerCreatorByNewPrefabMethod<TParam1> : SubContainerCreatorByNewPrefabDynamicContext\n    {\n        readonly Action<DiContainer, TParam1> _installerMethod;\n\n        public SubContainerCreatorByNewPrefabMethod(\n            DiContainer container, IPrefabProvider prefabProvider,\n            GameObjectCreationParameters gameObjectBindInfo,\n            Action<DiContainer, TParam1> installerMethod)\n            : base(container, prefabProvider, gameObjectBindInfo)\n        {\n            _installerMethod = installerMethod;\n        }\n\n        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)\n        {\n            Assert.IsEqual(args.Count, 1);\n            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());\n\n            context.AddNormalInstaller(\n                new ActionInstaller(subContainer =>\n                    {\n                        _installerMethod(subContainer, (TParam1)args[0].Value);\n                    }));\n        }\n    }\n\n    [NoReflectionBaking]\n    public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2> : SubContainerCreatorByNewPrefabDynamicContext\n    {\n        readonly Action<DiContainer, TParam1, TParam2> _installerMethod;\n\n        public SubContainerCreatorByNewPrefabMethod(\n            DiContainer container, IPrefabProvider prefabProvider,\n            GameObjectCreationParameters gameObjectBindInfo,\n            Action<DiContainer, TParam1, TParam2> installerMethod)\n            : base(container, prefabProvider, gameObjectBindInfo)\n        {\n            _installerMethod = installerMethod;\n        }\n\n        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)\n        {\n            Assert.IsEqual(args.Count, 2);\n            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());\n            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());\n\n            context.AddNormalInstaller(\n                new ActionInstaller(subContainer =>\n                    {\n                        _installerMethod(subContainer,\n                            (TParam1)args[0].Value,\n                            (TParam2)args[1].Value);\n                    }));\n        }\n    }\n\n    [NoReflectionBaking]\n    public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3> : SubContainerCreatorByNewPrefabDynamicContext\n    {\n        readonly Action<DiContainer, TParam1, TParam2, TParam3> _installerMethod;\n\n        public SubContainerCreatorByNewPrefabMethod(\n            DiContainer container, IPrefabProvider prefabProvider,\n            GameObjectCreationParameters gameObjectBindInfo,\n            Action<DiContainer, TParam1, TParam2, TParam3> installerMethod)\n            : base(container, prefabProvider, gameObjectBindInfo)\n        {\n            _installerMethod = installerMethod;\n        }\n\n        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)\n        {\n            Assert.IsEqual(args.Count, 3);\n            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());\n            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());\n            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());\n\n            context.AddNormalInstaller(\n                new ActionInstaller(subContainer =>\n                    {\n                        _installerMethod(subContainer,\n                            (TParam1)args[0].Value,\n                            (TParam2)args[1].Value,\n                            (TParam3)args[2].Value);\n                    }));\n        }\n    }\n\n    [NoReflectionBaking]\n    public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4> : SubContainerCreatorByNewPrefabDynamicContext\n    {\n        readonly\n#if !NET_4_6\n            ModestTree.Util.\n#endif\n            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> _installerMethod;\n\n        public SubContainerCreatorByNewPrefabMethod(\n            DiContainer container, IPrefabProvider prefabProvider,\n            GameObjectCreationParameters gameObjectBindInfo,\n#if !NET_4_6\n            ModestTree.Util.\n#endif\n            Action<DiContainer, TParam1, TParam2, TParam3, TParam4> installerMethod)\n            : base(container, prefabProvider, gameObjectBindInfo)\n        {\n            _installerMethod = installerMethod;\n        }\n\n        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)\n        {\n            Assert.IsEqual(args.Count, 4);\n            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());\n            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());\n            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());\n            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());\n\n            context.AddNormalInstaller(\n                new ActionInstaller(subContainer =>\n                    {\n                        _installerMethod(subContainer,\n                            (TParam1)args[0].Value,\n                            (TParam2)args[1].Value,\n                            (TParam3)args[2].Value,\n                            (TParam4)args[3].Value);\n                    }));\n        }\n    }\n\n    [NoReflectionBaking]\n    public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5> : SubContainerCreatorByNewPrefabDynamicContext\n    {\n        readonly\n#if !NET_4_6\n            ModestTree.Util.\n#endif\n            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> _installerMethod;\n\n        public SubContainerCreatorByNewPrefabMethod(\n            DiContainer container, IPrefabProvider prefabProvider,\n            GameObjectCreationParameters gameObjectBindInfo,\n#if !NET_4_6\n            ModestTree.Util.\n#endif\n            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5> installerMethod)\n            : base(container, prefabProvider, gameObjectBindInfo)\n        {\n            _installerMethod = installerMethod;\n        }\n\n        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)\n        {\n            Assert.IsEqual(args.Count, 5);\n            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());\n            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());\n            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());\n            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());\n            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());\n\n            context.AddNormalInstaller(\n                new ActionInstaller(subContainer =>\n                    {\n                        _installerMethod(subContainer,\n                            (TParam1)args[0].Value,\n                            (TParam2)args[1].Value,\n                            (TParam3)args[2].Value,\n                            (TParam4)args[3].Value,\n                            (TParam5)args[4].Value);\n                    }));\n        }\n    }\n\n    [NoReflectionBaking]\n    public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> : SubContainerCreatorByNewPrefabDynamicContext\n    {\n        readonly\n#if !NET_4_6\n            ModestTree.Util.\n#endif\n            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> _installerMethod;\n\n        public SubContainerCreatorByNewPrefabMethod(\n            DiContainer container, IPrefabProvider prefabProvider,\n            GameObjectCreationParameters gameObjectBindInfo,\n#if !NET_4_6\n            ModestTree.Util.\n#endif\n            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6> installerMethod)\n            : base(container, prefabProvider, gameObjectBindInfo)\n        {\n            _installerMethod = installerMethod;\n        }\n\n        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)\n        {\n            Assert.IsEqual(args.Count, 5);\n            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());\n            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());\n            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());\n            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());\n            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());\n            Assert.That(args[5].Type.DerivesFromOrEqual<TParam6>());\n\n            context.AddNormalInstaller(\n                new ActionInstaller(subContainer =>\n                    {\n                        _installerMethod(subContainer,\n                            (TParam1)args[0].Value,\n                            (TParam2)args[1].Value,\n                            (TParam3)args[2].Value,\n                            (TParam4)args[3].Value,\n                            (TParam5)args[4].Value,\n                            (TParam6)args[5].Value);\n                    }));\n        }\n    }\n\n    [NoReflectionBaking]\n    public class SubContainerCreatorByNewPrefabMethod<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> : SubContainerCreatorByNewPrefabDynamicContext\n    {\n        readonly\n#if !NET_4_6\n            ModestTree.Util.\n#endif\n            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> _installerMethod;\n\n        public SubContainerCreatorByNewPrefabMethod(\n            DiContainer container, IPrefabProvider prefabProvider,\n            GameObjectCreationParameters gameObjectBindInfo,\n#if !NET_4_6\n            ModestTree.Util.\n#endif\n            Action<DiContainer, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10> installerMethod)\n            : base(container, prefabProvider, gameObjectBindInfo)\n        {\n            _installerMethod = installerMethod;\n        }\n\n        protected override void AddInstallers(List<TypeValuePair> args, GameObjectContext context)\n        {\n            Assert.IsEqual(args.Count, 10);\n\n            Assert.That(args[0].Type.DerivesFromOrEqual<TParam1>());\n            Assert.That(args[1].Type.DerivesFromOrEqual<TParam2>());\n            Assert.That(args[2].Type.DerivesFromOrEqual<TParam3>());\n            Assert.That(args[3].Type.DerivesFromOrEqual<TParam4>());\n            Assert.That(args[4].Type.DerivesFromOrEqual<TParam5>());\n            Assert.That(args[5].Type.DerivesFromOrEqual<TParam6>());\n            Assert.That(args[6].Type.DerivesFromOrEqual<TParam7>());\n            Assert.That(args[7].Type.DerivesFromOrEqual<TParam8>());\n            Assert.That(args[8].Type.DerivesFromOrEqual<TParam9>());\n            Assert.That(args[9].Type.DerivesFromOrEqual<TParam10>());\n\n            context.AddNormalInstaller(\n                new ActionInstaller(subContainer =>\n                    {\n                        _installerMethod(subContainer,\n                            (TParam1)args[0].Value,\n                            (TParam2)args[1].Value,\n                            (TParam3)args[2].Value,\n                            (TParam4)args[3].Value,\n                            (TParam5)args[4].Value,\n                            (TParam6)args[5].Value,\n                            (TParam7)args[6].Value,\n                            (TParam8)args[7].Value,\n                            (TParam9)args[8].Value,\n                            (TParam10)args[9].Value);\n                    }));\n        }\n    }\n}\n\n#endif\n",
        "gt": [
            "'Idle-Miner/Assets/Plugins/Zenject/Source/Util/ReflectionInfoTypeInfoConverter.cs'",
            "'Idle-Miner/Assets/Plugins/Zenject/Source/Providers/SubContainerCreators/SubContainerCreatorByNewPrefabDynamicContext.cs'",
            "'Idle-Miner/Assets/Plugins/Zenject/OptionalExtras/MemoryPoolMonitor/Editor/DebugWindow/MpmWindow.cs'"
        ]
    },
    {
        "files": [
            "'vsi-lldb/YetiVSI.Tests/DebugEngine/LldbExceptionManagerTests.cs'",
            "'vsi-lldb/YetiVSI.Tests/TestSupport/Lldb/SbListenerStub.cs'",
            "'vsi-lldb/DebuggerGrpcClient/Interfaces/RemoteValue.cs'",
            "'vsi-lldb/DebuggerGrpcClient/Implementations/SbModuleImpl.cs'"
        ],
        "content": "'vsi-lldb/YetiVSI.Tests/DebugEngine/LldbExceptionManagerTests.cs'\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n﻿using Microsoft.VisualStudio.Debugger.Interop;\nusing NUnit.Framework;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing YetiCommon;\nusing YetiVSI.DebugEngine;\nusing YetiVSI.Test.TestSupport.Lldb;\n\nnamespace YetiVSI.Test.DebugEngine\n{\n    [TestFixture]\n    class LldbExceptionManagerTests\n    {\n        Dictionary<int, Signal> defaultSignals = new Dictionary<int, Signal>()\n        {\n            {1, new Signal { name = \"SIGHUP\", code = 1, stop = true} },\n            {2, new Signal { name = \"SIGINT\", code = 2, stop = true} },\n            {3, new Signal { name = \"SIGQUIT\", code = 3, stop = false} },\n        };\n        RemoteTargetStub sbTargetStub;\n        SbProcessStub sbProcessStub;\n        SbUnixSignalsStub sbUnixSignalsStub;\n        LldbExceptionManager exceptionManager;\n\n        [SetUp]\n        public void SetUp()\n        {\n            sbTargetStub = new RemoteTargetStub(\"test-target\");\n            sbUnixSignalsStub = new SbUnixSignalsStub();\n            sbProcessStub = new SbProcessStub(sbTargetStub, sbUnixSignalsStub);\n            exceptionManager = new LldbExceptionManager(sbProcessStub,\n                defaultSignals);\n        }\n\n        [Test]\n        public void ConstructorTest()\n        {\n            foreach (var signal in defaultSignals)\n            {\n                Assert.AreEqual(signal.Value.stop, sbUnixSignalsStub.GetShouldStop(signal.Key),\n                    $\"Signal {signal.Value.name} has incorrect stop state.\");\n            }\n        }\n\n        [Test]\n        public void SetExceptionsWrongGuid()\n        {\n            Signal firstDefaultSignal = defaultSignals.Values.ToList()[0];\n            Assert.True(firstDefaultSignal.stop, \"Expected the stop value for the first default \"\n                + \"signal to be true.\");\n\n            EXCEPTION_INFO exception = new EXCEPTION_INFO\n            {\n                guidType = new Guid(\"0123456789abcdef0123456789abcedf\"),\n                dwCode = (uint)firstDefaultSignal.code,\n                dwState = AD7Constants.VsExceptionContinueState,\n            };\n            exceptionManager.SetExceptions(new EXCEPTION_INFO[] { exception });\n\n\n            Assert.AreEqual(firstDefaultSignal.stop,\n                sbUnixSignalsStub.GetShouldStop(firstDefaultSignal.code),\n                $\"Signal {firstDefaultSignal.name} has incorrect stop state.\");\n        }\n\n        [Test]\n        public void SetExceptionsWrongSignal()\n        {\n            const int invalidSignal = 5000;\n\n            EXCEPTION_INFO exception = new EXCEPTION_INFO\n            {\n                guidType = YetiConstants.DebugEngineGuid,\n                dwCode = invalidSignal\n            };\n            exceptionManager.SetExceptions(new EXCEPTION_INFO[] { exception });\n\n\n            Assert.False(sbUnixSignalsStub.HasShouldStop(invalidSignal), \"Expected no stop \"\n                + \"information to be available for the invalid signal.\");\n        }\n\n        [Test]\n        public void SetException()\n        {\n            Signal firstDefaultSignal = defaultSignals.Values.ToList()[0];\n            Assert.True(firstDefaultSignal.stop, \"Expected the stop value for the first default \"\n                + \"signal to be true.\");\n\n            EXCEPTION_INFO exception = new EXCEPTION_INFO\n            {\n                guidType = YetiConstants.DebugEngineGuid,\n                dwCode = (uint)firstDefaultSignal.code,\n                dwState = AD7Constants.VsExceptionContinueState,\n            };\n            exceptionManager.SetExceptions(new EXCEPTION_INFO[] { exception });\n\n            Assert.False(sbUnixSignalsStub.GetShouldStop(firstDefaultSignal.code),\n                $\"Signal {firstDefaultSignal.name} has incorrect stop state.\");\n\n\n            exception = new EXCEPTION_INFO\n            {\n                guidType = YetiConstants.DebugEngineGuid,\n                dwCode = (uint)firstDefaultSignal.code,\n                dwState = AD7Constants.VsExceptionStopState,\n            };\n            exceptionManager.SetExceptions(new EXCEPTION_INFO[] { exception });\n\n            Assert.True(sbUnixSignalsStub.GetShouldStop(firstDefaultSignal.code),\n                $\"Signal {firstDefaultSignal.name} has incorrect stop state.\");\n        }\n    }\n}\n\n'vsi-lldb/YetiVSI.Tests/TestSupport/Lldb/SbListenerStub.cs'\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\n﻿using DebuggerApi;\nusing DebuggerGrpcClient;\nusing System.Collections.Generic;\nusing System.Threading;\nusing TestsCommon.TestSupport;\n\nnamespace YetiVSI.Test.TestSupport.Lldb\n{\n    public class GrpcListenerFactoryFake : GrpcListenerFactory\n    {\n        public List<SbListenerStub> Instances = new List<SbListenerStub>();\n\n        public override SbListener Create(GrpcConnection connection, string name)\n        {\n            var instance = new SbListenerStub(name);\n            Instances.Add(instance);\n            return instance;\n        }\n    }\n\n    public class SbListenerStub : SbListener\n    {\n        long _waitForEventCallCount = 0;\n\n        public SbListenerStub(string name)\n        {\n            Name = name;\n        }\n\n        public string Name { get; }\n\n        public long GetId()\n        {\n            throw new NotImplementedTestDoubleException();\n        }\n\n        public bool WaitForEvent(uint numSeconds, out SbEvent evnt)\n        {\n            Interlocked.Increment(ref _waitForEventCallCount);\n            evnt = null;\n            return false;\n        }\n\n        public long GetWaitForEventCallCount() => Interlocked.Read(ref _waitForEventCallCount);\n    }\n}\n\n'vsi-lldb/DebuggerGrpcClient/Interfaces/RemoteValue.cs'\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nusing Debugger.Common;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\n\nnamespace DebuggerApi\n{\n\n\n\n    public enum ValueType\n    {\n        Invalid = 0,\n        VariableGlobal = 1,\n        VariableStatic = 2,\n        VariableArgument = 3,\n        VariableLocal = 4,\n        Register = 5,\n        RegisterSet = 6,\n        ConstResult = 7,\n        VariableThreadLocal = 8,\n    };\n\n\n\n\n    public interface RemoteValue\n    {\n\n\n\n        GrpcSbValue GrpcValue { get; }\n\n\n\n\n        string GetName();\n\n\n\n\n\n        string GetValue(ValueFormat format);\n\n\n\n\n        SbType GetTypeInfo();\n\n\n\n\n        string GetTypeName();\n\n\n\n\n        string GetSummary(ValueFormat format);\n\n\n\n\n        ValueType GetValueType();\n\n\n\n\n        SbError GetError();\n\n\n\n\n        uint GetNumChildren();\n\n\n\n\n\n        List<RemoteValue> GetChildren(uint offset, uint count);\n\n\n\n\n\n\n        RemoteValue CreateValueFromExpression(string name, string expression);\n\n\n\n\n        RemoteValue CreateValueFromAddress(string name, ulong address, SbType type);\n\n\n\n\n\n\n        Task<RemoteValue> CreateValueFromExpressionAsync(string name, string expression);\n\n\n\n\n\n        RemoteValue EvaluateExpression(string expression);\n\n\n\n\n\n\n        Task<RemoteValue> EvaluateExpressionAsync(string expression);\n\n\n\n\n        Task<RemoteValue> EvaluateExpressionLldbEvalAsync(\n            string expression, IDictionary<string, RemoteValue> contextVariables = null);\n\n\n\n\n        RemoteValue Clone();\n\n\n\n\n\n        RemoteValue Dereference();\n\n\n\n\n        RemoteValue GetChildMemberWithName(string name);\n\n\n\n\n        RemoteValue AddressOf();\n\n\n\n\n\n        bool TypeIsPointerType();\n\n\n\n\n        RemoteValue GetValueForExpressionPath(string expressionPath);\n\n\n\n\n        bool GetExpressionPath(out string path);\n\n\n\n\n        RemoteValue GetCachedView(ValueFormat format);\n\n\n\n\n        ulong GetByteSize();\n\n\n\n\n        ulong GetValueAsUnsigned();\n\n\n\n\n\n\n\n\n\n        byte[] GetPointeeAsByteString(uint charSize, uint maxStringSize, out string error);\n    }\n}\n\n'vsi-lldb/DebuggerGrpcClient/Implementations/SbModuleImpl.cs'\n:\n\n\n\n\n\n\n\n\n\n\n\n\n\nusing Debugger.Common;\nusing Debugger.SbModuleRpc;\nusing DebuggerApi;\nusing System;\nusing System.Collections.Generic;\nusing System.Runtime.InteropServices;\nusing SbModuleRpcServiceClient = Debugger.SbModuleRpc.SbModuleRpcService.SbModuleRpcServiceClient;\n\n\nnamespace DebuggerGrpcClient\n{\n\n    public class GrpcModuleFactory\n    {\n        public virtual SbModule Create(GrpcConnection connection, GrpcSbModule grpcSbModule)\n        {\n            return new SbModuleImpl(connection, grpcSbModule);\n        }\n    }\n\n\n\n    public class SbModuleImpl : SbModule, IDisposable\n    {\n        readonly GrpcConnection connection;\n        readonly GrpcSbModule grpcSbModule;\n        readonly SbModuleRpcServiceClient client;\n        readonly GrpcAddressFactory addressFactory;\n        readonly GrpcFileSpecFactory fileSpecFactory;\n        readonly GrpcSectionFactory sectionFactory;\n        readonly GCHandle gcHandle;\n\n        private bool disposed = false;\n\n        internal SbModuleImpl(GrpcConnection connection, GrpcSbModule grpcSbModule)\n            : this(connection, grpcSbModule, new SbModuleRpcServiceClient(connection.CallInvoker),\n                   new GrpcAddressFactory(), new GrpcFileSpecFactory(), new GrpcSectionFactory())\n        {\n        }\n\n        internal SbModuleImpl(GrpcConnection connection, GrpcSbModule grpcSbModule,\n                              SbModuleRpcServiceClient client, GrpcAddressFactory addressFactory,\n                              GrpcFileSpecFactory fileSpecFactory,\n                              GrpcSectionFactory sectionFactory)\n        {\n            this.connection = connection;\n            this.grpcSbModule = grpcSbModule;\n            this.client = client;\n            this.addressFactory = addressFactory;\n            this.fileSpecFactory = fileSpecFactory;\n            this.sectionFactory = sectionFactory;\n\n\n            gcHandle = GCHandle.Alloc(\n                new Tuple<GrpcConnection, SbModuleRpcServiceClient, GrpcSbModule>(\n                    connection, client, grpcSbModule));\n        }\n\n        ~SbModuleImpl()\n        {\n            Dispose(false);\n        }\n\n\n\n\n        protected virtual void Dispose(bool disposing)\n        {\n            if (!disposed)\n            {\n\n                connection\n                    .GetOrCreateBulkDeleter<GrpcSbModule>()\n                    .QueueForDeletion(grpcSbModule, (List<GrpcSbModule> modules) =>\n                    {\n                        var request = new BulkDeleteRequest();\n                        request.Modules.AddRange(modules);\n                        connection.InvokeRpc(() =>\n                        {\n                            client.BulkDelete(request);\n                        });\n                    });\n                gcHandle.Free();\n                disposed = true;\n            }\n        }\n\n        #region IDisposable\n\n        public void Dispose()\n        {\n            Dispose(true);\n\n            GC.SuppressFinalize(this);\n        }\n\n        #endregion\n\n        #region SbModule\n\n        public ulong GetCodeLoadAddress()\n        {\n            GetCodeLoadAddressResponse response = null;\n            if (connection.InvokeRpc(() => {\n                    response = client.GetCodeLoadAddress(\n                        new GetCodeLoadAddressRequest() { Module = grpcSbModule });\n                }))\n            {\n                return response.CodeLoadAddress;\n            }\n            return 0;\n        }\n\n        public SbAddress GetObjectFileHeaderAddress()\n        {\n            GetObjectFileHeaderAddressResponse response = null;\n            if (connection.InvokeRpc(() => {\n                    response = client.GetObjectFileHeaderAddress(\n                        new GetObjectFileHeaderAddressRequest() { Module = grpcSbModule });\n                }))\n            {\n                return addressFactory.Create(connection, response.Address);\n            }\n            return null;\n        }\n\n        public ulong GetCodeSize()\n        {\n            GetCodeSizeResponse response = null;\n            if (connection.InvokeRpc(() =>\n                {\n                    response = client.GetCodeSize(\n                        new GetCodeSizeRequest() { Module = grpcSbModule });\n                }))\n            {\n                return response.CodeSize;\n            }\n            return 0;\n        }\n\n        public SbFileSpec GetFileSpec()\n        {\n            GetFileSpecResponse response = null;\n            if (connection.InvokeRpc(() =>\n                {\n                    response = client.GetFileSpec(\n                        new GetFileSpecRequest() { Module = grpcSbModule });\n                }))\n            {\n                if (response.FileSpec != null)\n                {\n                    return fileSpecFactory.Create(response.FileSpec);\n                }\n            }\n            return null;\n        }\n\n        public SbFileSpec GetPlatformFileSpec()\n        {\n            GetPlatformFileSpecResponse response = null;\n            if (connection.InvokeRpc(() =>\n                {\n                    response = client.GetPlatformFileSpec(\n                        new GetPlatformFileSpecRequest() { Module = grpcSbModule });\n                }))\n            {\n                if (response.FileSpec != null)\n                {\n                    return fileSpecFactory.Create(response.FileSpec);\n                }\n            }\n            return null;\n        }\n\n        public bool SetPlatformFileSpec(string fileDirectory, string fileName)\n        {\n            SetPlatformFileSpecResponse response = null;\n            if (connection.InvokeRpc(() =>\n            {\n                response = client.SetPlatformFileSpec(\n                    new SetPlatformFileSpecRequest\n                    {\n                        Module = grpcSbModule,\n                        FileSpec = new GrpcSbFileSpec\n                        {\n                            Directory = fileDirectory,\n                            Filename = fileName,\n                        },\n                    });\n            }))\n            {\n                return response.Result;\n            }\n            return false;\n        }\n\n        public bool SetPlatformFileSpec(SbFileSpec fileSpec)\n        {\n            return SetPlatformFileSpec(fileSpec.GetDirectory(), fileSpec.GetFilename());\n        }\n\n        public SbFileSpec GetSymbolFileSpec()\n        {\n            GetSymbolFileSpecResponse response = null;\n            if (connection.InvokeRpc(() =>\n            {\n                response = client.GetSymbolFileSpec(\n                    new GetSymbolFileSpecRequest() { Module = grpcSbModule });\n            }))\n            {\n                if (response.FileSpec != null)\n                {\n                    return fileSpecFactory.Create(response.FileSpec);\n                }\n            }\n            return null;\n        }\n\n        public bool HasCompileUnits()\n        {\n            HasCompileUnitsResponse response = null;\n            if (connection.InvokeRpc(() =>\n                {\n                    response = client.HasCompileUnits(\n                        new HasCompileUnitsRequest() { Module = grpcSbModule });\n                }))\n            {\n                return response.Result;\n            }\n            return false;\n        }\n\n        public bool HasSymbols()\n        {\n            HasSymbolsResponse response = null;\n            if (connection.InvokeRpc(() =>\n                {\n                    response = client.HasSymbols(\n                        new HasSymbolsRequest() { Module = grpcSbModule });\n                }))\n            {\n                return response.Result;\n            }\n            return false;\n        }\n\n        public bool Is64Bit()\n        {\n            Is64BitResponse response = null;\n            if (connection.InvokeRpc(() =>\n                {\n                    response = client.Is64Bit(\n                        new Is64BitRequest { Module = grpcSbModule });\n                }))\n            {\n                return response.Result;\n            }\n            return false;\n        }\n\n        public uint GetNumCompileUnits()\n        {\n            GetNumCompileUnitsResponse response = null;\n            if (connection.InvokeRpc(() =>\n                {\n                    response = client.GetNumCompileUnits(\n                        new GetNumCompileUnitsRequest\n                        {\n                            Module = grpcSbModule\n                        });\n                }))\n            {\n                return response.NumCompileUnits;\n            }\n            return 0;\n        }\n\n        public string GetUUIDString()\n        {\n            GetUUIDStringResponse response = null;\n            if (connection.InvokeRpc(() =>\n                {\n                    response = client.GetUUIDString(\n                        new GetUUIDStringRequest { Module = grpcSbModule });\n                }))\n            {\n                return response.Uuid;\n            }\n            return \"\";\n        }\n\n        public string GetTriple()\n        {\n            GetTripleResponse response = null;\n            return connection.InvokeRpc(() =>\n            {\n                response = client.GetTriple(\n                    new GetTripleRequest { Module = grpcSbModule });\n            })\n                ? response.Triple\n                : \"\";\n        }\n\n        public SbSection FindSection(string name)\n        {\n            FindSectionResponse response = null;\n            if (connection.InvokeRpc(() =>\n                {\n                    response = client.FindSection(\n                        new FindSectionRequest\n                        {\n                            Module = grpcSbModule,\n                            Name = name,\n                        });\n                }))\n            {\n                if (response.Section != null && response.Section.Id != 0)\n                {\n                    return sectionFactory.Create(connection, response.Section);\n                }\n            }\n            return null;\n        }\n\n        public ulong GetNumSections()\n        {\n            GetNumSectionsResponse response = null;\n            if (connection.InvokeRpc(() =>\n                {\n                    response = client.GetNumSections(\n                        new GetNumSectionsRequest\n                        {\n                            Module = grpcSbModule\n                        });\n                }))\n            {\n                return response.NumSections;\n            }\n            return 0;\n        }\n\n        public SbSection GetSectionAtIndex(ulong index)\n        {\n            GetSectionAtIndexResponse response = null;\n            if (connection.InvokeRpc(() =>\n                {\n                    response = client.GetSectionAtIndex(\n                        new GetSectionAtIndexRequest\n                        {\n                            Module = grpcSbModule,\n                            Index = index,\n                        });\n                }))\n            {\n                if (response.Section != null && response.Section.Id != 0)\n                {\n                    return sectionFactory.Create(connection, response.Section);\n                }\n            }\n            return null;\n        }\n\n        public long GetId()\n        {\n            return grpcSbModule.Id;\n        }\n\n        #endregion\n    }\n}\n",
        "gt": [
            "'vsi-lldb/DebuggerGrpcClient/Interfaces/RemoteValue.cs'",
            "'vsi-lldb/DebuggerGrpcClient/Implementations/SbModuleImpl.cs'",
            "'vsi-lldb/YetiVSI.Tests/TestSupport/Lldb/SbListenerStub.cs'",
            "'vsi-lldb/YetiVSI.Tests/DebugEngine/LldbExceptionManagerTests.cs'"
        ]
    },
    {
        "files": [
            "'sblog.net/sBlog.Net/Areas/Admin/Controllers/AdminController.cs'",
            "'sblog.net/sBlog.Net/ShortCodeManager/Entities/SyntaxPossibility.cs'",
            "'sblog.net/sBlog.Net/ShortCodeManager/SyntaxPossibilities.cs'"
        ],
        "content": "'sblog.net/sBlog.Net/Areas/Admin/Controllers/AdminController.cs'\n:﻿#region Disclaimer/License Info\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing System;\nusing System.IO;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web.Mvc;\nusing sBlog.Net.DB.Enumerations;\nusing sBlog.Net.DB.Helpers;\nusing sBlog.Net.DB.Services;\nusing sBlog.Net.Models;\nusing sBlog.Net.Providers;\nusing sBlog.Net.Controllers;\nusing sBlog.Net.Infrastructure;\nusing sBlog.Net.Models.Account;\nusing sBlog.Net.Domain.Entities;\nusing sBlog.Net.ShortCodeManager;\nusing sBlog.Net.Domain.Utilities;\nusing sBlog.Net.Domain.Interfaces;\nusing sBlog.Net.Domain.Generators;\nusing sBlog.Net.Areas.Admin.Models;\nusing System.Text.RegularExpressions;\n\nnamespace sBlog.Net.Areas.Admin.Controllers\n{\n    public class AdminController : BlogController\n    {\n        private readonly IPost _postRepository;\n        private readonly IComment _commentRepository;\n        private readonly ICategory _categoryRepository;\n        private readonly ITag _tagRepository;\n        private readonly IPathMapper _pathMapper;\n        private readonly IUser _userRepository;\n        private readonly ISchema _schemaRepository;\n\n        public AdminController(IPost postRepository, IComment commentRepository, ICategory categoryRepository, ITag tagRepository, ISettings settingsRepository, IPathMapper pathMapper, IUser userRepository, ISchema schemaRepository)\n            : base(settingsRepository)\n        {\n            _postRepository = postRepository;\n            _commentRepository = commentRepository;\n            _categoryRepository = categoryRepository;\n            _tagRepository = tagRepository;\n            _pathMapper = pathMapper;\n            _userRepository = userRepository;\n            _schemaRepository = schemaRepository;\n            ExpectedMasterName = string.Empty;\n\n            IsAdminController = true;\n        }\n\n        [Authorize]\n        public ActionResult Index()\n        {\n            var comments = _commentRepository.GetAllComments();\n            var userId = GetUserId();\n            var userEntity = _userRepository.GetUserObjByUserID(GetUserId());\n            var posts = _postRepository.GetPostsByUserID(userId).Select(p => p.PostID);\n            var filteredComments = comments.Where(c => posts.Contains(c.PostID)).ToList();\n\n            var model = new AdminDashboardViewModel\n            {\n                PostCount = _postRepository.GetPostsByUserID(userId, 1).Count,\n                PagesCount = _postRepository.GetPostsByUserID(userId, 2).Count,\n                CategoriesCount = _categoryRepository.GetCategories().Count,\n                TagsCount = _tagRepository.GetAllTags().Count,\n\n                AllCommentsCount = filteredComments.Count(),\n                ApprovedCount = filteredComments.Count(c => c.CommentStatus == 0),\n                PendingCount = filteredComments.Count(c => c.CommentStatus == 1),\n                SpamCount = filteredComments.Count(c => c.CommentStatus == 2),\n\n                CanView = userId == 1,\n\n                BlogName = SettingsRepository.BlogName,\n\n                DisplayName = userEntity.UserDisplayName\n            };\n\n            return View(model);\n        }\n\n        [Authorize(Roles = \"SuperAdmin\")]\n        public ActionResult Settings()\n        {\n            var akismetUrl = string.IsNullOrEmpty(SettingsRepository.BlogAkismetUrl)\n                                 ? GetRootUrl().TrimEnd('/')\n                                 : SettingsRepository.BlogAkismetUrl;\n            var adminSettings = new AdminSettingsViewModel\n            {\n                BlogName = SettingsRepository.BlogName,\n                BlogCaption = SettingsRepository.BlogCaption,\n                BlogTheme = SettingsRepository.BlogTheme,\n                BlogSocialSharing = SettingsRepository.BlogSocialSharing,\n                BlogSyntaxHighlighting = SettingsRepository.BlogSyntaxHighlighting,\n                PostsPerPage = SettingsRepository.BlogPostsPerPage,\n                AkismetEnabled = SettingsRepository.BlogAkismetEnabled,\n                AkismetDeleteSpam = SettingsRepository.BlogAkismetDeleteSpam,\n                AkismetKey = SettingsRepository.BlogAkismetKey,\n                AkismetUrl = akismetUrl,\n                AdminEmailAddress = SettingsRepository.BlogAdminEmailAddress,\n                BlogSmtpAddress = SettingsRepository.BlogSmtpAddress,\n                ManageItemsPerPage = SettingsRepository.ManageItemsPerPage,\n                BlogErrorAction = SettingsRepository.BlogSiteErrorEmailAction,\n                Title = SettingsRepository.BlogName,\n                DisqusEnabled = SettingsRepository.DisqusEnabled,\n                DisqusShortName = SettingsRepository.BlogDisqusShortName,\n                EditorType = SettingsRepository.EditorType,\n\n                BlogThemes = GetAvailableThemes(SettingsRepository.BlogTheme),\n                EditorTypes = GetEditorTypes()\n            };\n            return View(adminSettings);\n        }\n\n        [Authorize(Roles = \"SuperAdmin\")]\n        [HttpPost]\n        public ActionResult Settings(AdminSettingsViewModel adminSettingsViewModel)\n        {\n            adminSettingsViewModel.BlogThemes = GetAvailableThemes(adminSettingsViewModel.BlogTheme);\n            adminSettingsViewModel.EditorTypes = GetEditorTypes();\n\n            if (ModelState.IsValid && ValidateAkismetSettings(adminSettingsViewModel))\n            {\n                SettingsRepository.BlogName = adminSettingsViewModel.BlogName;\n                SettingsRepository.BlogCaption = adminSettingsViewModel.BlogCaption;\n                SettingsRepository.BlogTheme = adminSettingsViewModel.BlogTheme;\n                SettingsRepository.BlogSocialSharing = adminSettingsViewModel.BlogSocialSharing;\n                SettingsRepository.BlogSyntaxHighlighting = adminSettingsViewModel.BlogSyntaxHighlighting;\n                SettingsRepository.BlogPostsPerPage = adminSettingsViewModel.PostsPerPage;\n                SettingsRepository.BlogAkismetEnabled = adminSettingsViewModel.AkismetEnabled;\n                SettingsRepository.BlogAkismetDeleteSpam = adminSettingsViewModel.AkismetDeleteSpam;\n                SettingsRepository.BlogAkismetKey = adminSettingsViewModel.AkismetKey;\n                SettingsRepository.BlogAkismetUrl = adminSettingsViewModel.AkismetUrl;\n                SettingsRepository.BlogAdminEmailAddress = adminSettingsViewModel.AdminEmailAddress;\n                SettingsRepository.BlogSmtpAddress = adminSettingsViewModel.BlogSmtpAddress;\n                SettingsRepository.EditorType = adminSettingsViewModel.EditorType;\n\n                if (!string.IsNullOrEmpty(adminSettingsViewModel.BlogSmtpPassword))\n                {\n                    SettingsRepository.BlogSmtpPassword = TripleDES.EncryptString(adminSettingsViewModel.BlogSmtpPassword);\n                }\n\n                SettingsRepository.ManageItemsPerPage = adminSettingsViewModel.ManageItemsPerPage;\n                SettingsRepository.BlogSiteErrorEmailAction = adminSettingsViewModel.BlogErrorAction;\n                SettingsRepository.DisqusEnabled = adminSettingsViewModel.DisqusEnabled;\n                SettingsRepository.BlogDisqusShortName = adminSettingsViewModel.DisqusShortName;\n            }\n\n            adminSettingsViewModel.UpdateStatus = true;\n            adminSettingsViewModel.Title = SettingsRepository.BlogName;\n\n            return View(adminSettingsViewModel);\n        }\n\n        private bool ValidateAkismetSettings(AdminSettingsViewModel adminSettingsViewModel)\n        {\n            if (!adminSettingsViewModel.AkismetEnabled)\n                return true;\n\n            Uri url;\n            if (string.IsNullOrEmpty(adminSettingsViewModel.AkismetUrl) || !Uri.TryCreate(adminSettingsViewModel.AkismetUrl, UriKind.Absolute, out url))\n            {\n                ModelState.AddModelError(\"Akismet_Url\", \"Akismet url entered is invalid\");\n                return false;\n            }\n\n            if (string.IsNullOrEmpty(adminSettingsViewModel.AkismetKey))\n            {\n                ModelState.AddModelError(\"Akismet_Key\", \"Akismet key entered is invalid\");\n                return false;\n            }\n\n            return true;\n        }\n\n        [Authorize(Roles = \"SuperAdmin\")]\n        public ActionResult EnableSocialSharing(bool enableSocialSharing)\n        {\n            if (enableSocialSharing)\n                SettingsRepository.BlogSocialSharing = true;\n            return RedirectToRoute(\"AdminSocialSharingOptions\");\n        }\n\n        [Authorize(Roles = \"SuperAdmin\")]\n        public ActionResult SocialSharingOptions()\n        {\n            var selectedSharing = SettingsRepository.BlogSocialSharingChoice;\n            var adminSocialSharingOptions = AdminSocialSharingOptions.Create(selectedSharing);\n            adminSocialSharingOptions.Title = SettingsRepository.BlogName;\n            adminSocialSharingOptions.IsEnabled = SettingsRepository.BlogSocialSharing;\n            return View(adminSocialSharingOptions);\n        }\n\n        [Authorize(Roles = \"SuperAdmin\")]\n        [HttpPost]\n        public ActionResult SocialSharingOptions(int selectedSharingOption)\n        {\n            SettingsRepository.BlogSocialSharingChoice = selectedSharingOption;\n            var adminSocialSharingOptions = AdminSocialSharingOptions.Create(selectedSharingOption, true);\n            adminSocialSharingOptions.Title = SettingsRepository.BlogName;\n            adminSocialSharingOptions.IsEnabled = SettingsRepository.BlogSocialSharing;\n            return View(adminSocialSharingOptions);\n        }\n\n        [Authorize(Roles = \"SuperAdmin\")]\n        public ActionResult EnableSyntaxHighlighter(bool enableSyntaxHighlighter)\n        {\n            if (enableSyntaxHighlighter)\n                SettingsRepository.BlogSyntaxHighlighting = true;\n            return RedirectToRoute(\"AdminSyntaxHighlighterOptions\");\n        }\n\n        [Authorize]\n        public ActionResult SyntaxHighlighterOptions()\n        {\n            if (!User.IsInRole(\"SuperAdmin\") && !User.IsInRole(\"Admin\"))\n            {\n                return RedirectToAction(\"Index\", \"Admin\", new { Area = \"Admin\" });\n            }\n\n            var currentTheme = SettingsRepository.BlogSyntaxTheme;\n            var selectedItems = SettingsRepository.BlogSyntaxScripts;\n            var model = new SyntaxHighlighterViewModel\n            {\n                Brushes = GetBrushesModel(selectedItems),\n                AvailableThemes = GetAvailableSyntaxThemes(currentTheme),\n                EditThemeAttributes = GetAttributes(GetUserId()),\n                Title = SettingsRepository.BlogName,\n                IsEnabled = SettingsRepository.BlogSyntaxHighlighting,\n                CanEnable = GetUserId() == 1\n            };\n\n            return View(model);\n        }\n\n        [Authorize]\n        [HttpPost]\n        public ActionResult SyntaxHighlighterOptions(string Theme, CheckBoxListViewModel selectedBrushes)\n        {\n            if (!User.IsInRole(\"SuperAdmin\") && !User.IsInRole(\"Admin\"))\n            {\n                return RedirectToAction(\"Index\", \"Home\", new { Area = \"\" });\n            }\n\n            var userId = GetUserId();\n            var updatedTheme = userId == 1 ? Theme : SettingsRepository.BlogSyntaxTheme;\n            SettingsRepository.BlogSyntaxScripts = string.Join(\"~\", selectedBrushes.GetSelectedItems());\n            SettingsRepository.BlogSyntaxTheme = updatedTheme;\n\n            var model = new SyntaxHighlighterViewModel\n            {\n                Brushes = selectedBrushes,\n                AvailableThemes = GetAvailableSyntaxThemes(updatedTheme),\n                EditThemeAttributes = GetAttributes(userId),\n                Title = SettingsRepository.BlogName,\n                IsEnabled = SettingsRepository.BlogSyntaxHighlighting,\n                UpdateStatus = true,\n                CanEnable = GetUserId() == 1\n            };\n\n            return View(model);\n        }\n\n        private static IDictionary<string, object> GetAttributes(int userId)\n        {\n            IDictionary<string, object> editAttributes = new Dictionary<string, object> { { \"class\", \"dropDownBox\" } };\n            if (userId != 1)\n            {\n                editAttributes.Add(\"disabled\", \"disabled\");\n            }\n            return editAttributes;\n        }\n\n        [Authorize]\n        public ActionResult UpdateProfile()\n        {\n            var userEntity = _userRepository.GetUserObjByUserID(GetUserId());\n            var model = new UpdateProfileModel\n            {\n                UserDisplayName = userEntity.UserDisplayName,\n                UserEmailAddress = userEntity.UserEmailAddress,\n                Title = SettingsRepository.BlogName,\n                UserSite = userEntity.UserSite\n            };\n\n            return View(model);\n        }\n\n        [Authorize]\n        [HttpPost]\n        public ActionResult UpdateProfile(UpdateProfileModel model)\n        {\n            if (ModelState.IsValid)\n            {\n                var userEntity = GetUserEntity(model);\n                var status = _userRepository.UpdateProfile(userEntity);\n                if (!status)\n                {\n                    ModelState.AddModelError(\"__FORM\", \"Unable to update the profile. Please try again later or contact the administrator\");\n                }\n                else\n                {\n                    model.UpdateStatus = true;\n                }\n            }\n\n            model.Title = SettingsRepository.BlogName;\n            return View(model);\n        }\n\n        public ActionResult AdminShortcuts()\n        {\n            return PartialView(\"AdminShortcuts\");\n        }\n\n        public ActionResult DatabaseNotice()\n        {\n            var status = GetDatabaseUpdateStatus();\n            var isVisible = (GetUserId() == 1 && (status.StatusCode == SetupStatusCode.DatabaseNotSetup ||\n                                                  status.StatusCode == SetupStatusCode.HasUpdates));\n\n            if (!isVisible)\n                return new EmptyResult();\n\n            return PartialView(status.StatusCode == SetupStatusCode.HasUpdates ? \"DatabaseUpdateNotice\" : \"DatabaseInstallNotice\");\n        }\n\n        private UserEntity GetUserEntity(UpdateProfileModel model)\n        {\n            var userEntity = new UserEntity\n            {\n                UserID = GetUserId(),\n                UserDisplayName = model.UserDisplayName,\n                UserEmailAddress = model.UserEmailAddress,\n                UserSite = model.UserSite\n            };\n\n            if (!string.IsNullOrEmpty(model.NewPassword) && !string.IsNullOrEmpty(model.ConfirmPassword))\n            {\n                var randomCode = RandomStringGenerator.RandomString();\n                userEntity.Password = PasswordHelper.GenerateHashedPassword(model.NewPassword, randomCode);\n                userEntity.UserCode = TripleDES.EncryptString(randomCode);\n            }\n\n            return userEntity;\n        }\n\n        public ActionResult SyntaxHighlighterHelp()\n        {\n            var selectedBrushes = SettingsRepository.BlogSyntaxScripts;\n            var syntaxPossibilitiesViewModel = new SyntaxPossibilitiesViewModel\n            {\n                SyntaxPossibilities = new SyntaxPossibilities(_pathMapper, selectedBrushes),\n                IsEnabled = SettingsRepository.BlogSyntaxHighlighting\n            };\n            return PartialView(syntaxPossibilitiesViewModel);\n        }\n\n        public ActionResult Error()\n        {\n            var errType = Request.QueryString[\"err\"];\n\n            var blogErrorViewModel = new BlogErrorViewModel\n            {\n                Title = SettingsRepository.BlogName,\n                ErrorCode = errType,\n                ErrorDescription = \"An unknown error has occurred\"\n            };\n\n            return View(blogErrorViewModel);\n        }\n\n        private List<SelectListItem> GetAvailableSyntaxThemes(string selectedItem)\n        {\n            var items = new List<SelectListItem>();\n            var basePath = _pathMapper.MapPath(\"~/Content/codeHighlighter/styles\");\n            var files = Directory.GetFiles(basePath, \"shCore*.css\");\n\n            files.ToList().ForEach(file =>\n            {\n                var r1 = new Regex(@\"shCore([A-Za-z0-9\\-]+).css\");\n                var match = r1.Match(Path.GetFileName(file));\n                if (match.Groups[1].Value != string.Empty)\n                {\n                    var item = new SelectListItem { Text = match.Groups[1].Value, Value = match.Groups[1].Value, Selected = match.Groups[1].Value == selectedItem };\n                    items.Add(item);\n                }\n            });\n\n            var defaultItem = items.Single(i => i.Text == \"Default\");\n            defaultItem.Selected = true;\n\n            return items;\n        }\n\n        private CheckBoxListViewModel GetBrushesModel(string selectedItems)\n        {\n            var basePath = _pathMapper.MapPath(\"~/Content/codeHighlighter/scripts\");\n            return SyntaxHighlighterBrushesModel.GetBrushesModel(basePath, selectedItems);\n        }\n\n        private List<SelectListItem> GetAvailableThemes(string selectedTheme)\n        {\n            var baseDirectory = _pathMapper.MapPath(\"~/Themes\");\n            var directories = Directory.GetDirectories(baseDirectory);\n            return directories.Select(directory => directory.Split('\\\\')).Select(split => new SelectListItem { Text = Regex.Replace(split.Last(), \"(\\\\B[A-Z])\", \" $1\"), Value = split.Last(), Selected = split.Last() == selectedTheme }).ToList();\n        }\n\n        private SetupStatus GetDatabaseUpdateStatus()\n        {\n            var databaseStatusGenerator = new SetupStatusGenerator(_schemaRepository, _pathMapper);\n            var databaseStatus = databaseStatusGenerator.GetSetupStatus();\n            return databaseStatus;\n        }\n\n        private static List<SelectListItem> GetEditorTypes()\n        {\n            return new List<SelectListItem>\n                {\n                    new SelectListItem { Text = \"Html (CkEditor)\", Value = \"html\", Selected = true },\n                    new SelectListItem { Text = \"Markdown\", Value = \"markdown\" }\n                };\n        }\n    }\n}\n\n'sblog.net/sBlog.Net/ShortCodeManager/Entities/SyntaxPossibility.cs'\n:﻿#region Disclaimer/License Info\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing System.Collections.Generic;\n\nnamespace sBlog.Net.ShortCodeManager.Entities\n{\n    public class SyntaxPossibility\n    {\n        public string BrushName { get; set; }\n        public List<string> PossibleAliases { get; set; }\n        public bool IsSelected { get; set; }\n    }\n}\n\n'sblog.net/sBlog.Net/ShortCodeManager/SyntaxPossibilities.cs'\n:﻿#region Disclaimer/License Info\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#endregion\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Collections;\nusing sBlog.Net.ShortCodeManager.Entities;\nusing System.IO;\nusing System.Text.RegularExpressions;\nusing sBlog.Net.Domain.Interfaces;\n\nnamespace sBlog.Net.ShortCodeManager\n{\n    public class SyntaxPossibilities : IEnumerator, IEnumerable\n    {\n        private List<SyntaxPossibility> _syntaxPossibilities;\n        private readonly IPathMapper _pathMapper;\n        private readonly string _selectedBrushes;\n        private readonly string _basePath;\n        int _current = -1;\n\n        public SyntaxPossibilities(IPathMapper pathMapper, string selectedBrushes)\n        {\n            _pathMapper = pathMapper;\n            _selectedBrushes = selectedBrushes;\n            _basePath = _pathMapper.MapPath(\"~/Content/codeHighlighter/scripts\");\n            AddSyntaxPossibilities();\n        }\n\n        public object Current\n        {\n            get { return _syntaxPossibilities[_current]; }\n        }\n\n        public bool MoveNext()\n        {\n            _current++;\n            return _current < _syntaxPossibilities.Count;\n        }\n\n        public void Reset()\n        {\n            _current = -1;\n        }\n\n        public IEnumerator GetEnumerator()\n        {\n            return _syntaxPossibilities.GetEnumerator();\n        }\n\n        public SyntaxPossibility FindPossibility(string brushName)\n        {\n            return _syntaxPossibilities.SingleOrDefault(p => p.BrushName == brushName);\n        }\n\n        private void AddSyntaxPossibilities()\n        {\n            _syntaxPossibilities = new List<SyntaxPossibility>();\n\n            var files = Directory.GetFiles(_basePath, \"shBrush*.js\");\n            var brushes = GetSelectedBrushes();\n\n            files.ToList().ForEach(file =>\n            {\n                var r1 = new Regex(@\"shBrush([A-Za-z0-9\\-]+).js\");\n                var match = r1.Match(Path.GetFileName(file));\n\n                r1 = new Regex(@\"Brush.aliases(.*?)=(.*?)\\[(.*?)\\];\");\n                var match2 = r1.Match(File.ReadAllText(file));\n\n                var aliases = new List<string>();\n                match2.Groups[3].Value.Replace(\"'\", \"\").Split(',').ToList().ForEach(split => aliases.Add(split.Trim()));\n\n                _syntaxPossibilities.Add(new SyntaxPossibility { BrushName = match.Groups[1].Value, PossibleAliases = aliases, IsSelected = brushes.Contains(match.Groups[1].Value)});\n            });\n        }\n\n        private List<string> GetSelectedBrushes()\n        {\n            return !string.IsNullOrEmpty(_selectedBrushes)\n                              ? _selectedBrushes.Split('~').ToList()\n                              : new List<string>();\n        }\n    }\n}\n",
        "gt": [
            "'sblog.net/sBlog.Net/ShortCodeManager/Entities/SyntaxPossibility.cs'",
            "'sblog.net/sBlog.Net/ShortCodeManager/SyntaxPossibilities.cs'",
            "'sblog.net/sBlog.Net/Areas/Admin/Controllers/AdminController.cs'"
        ]
    },
    {
        "files": [
            "'Vector-Search-AI-Assistant/src/Infrastructure/Services/CosmosDbService.cs'",
            "'Vector-Search-AI-Assistant/src/Infrastructure/Services/DependencyInjection.cs'",
            "'Vector-Search-AI-Assistant/src/ChatAPI/Program.cs'",
            "'Vector-Search-AI-Assistant/src/Infrastructure/Interfaces/IRAGService.cs'"
        ],
        "content": "'Vector-Search-AI-Assistant/src/Infrastructure/Services/CosmosDbService.cs'\n:﻿using BuildYourOwnCopilot.Common.Interfaces;\nusing BuildYourOwnCopilot.Common.Models.BusinessDomain;\nusing BuildYourOwnCopilot.Common.Models.Chat;\nusing BuildYourOwnCopilot.Common.Models.Configuration;\nusing BuildYourOwnCopilot.Service.Interfaces;\nusing Microsoft.Azure.Cosmos;\nusing Microsoft.Azure.Cosmos.Fluent;\nusing Microsoft.Extensions.Logging;\nusing Microsoft.Extensions.Options;\nusing Newtonsoft.Json.Linq;\nusing System.Diagnostics;\n\nnamespace BuildYourOwnCopilot.Service.Services\n{\n\n\n\n    public class CosmosDBService : ICosmosDBService\n    {\n        private readonly Container _completions;\n        private readonly Container _customer;\n        private readonly Container _product;\n        private readonly Container _leases;\n        private readonly Database _database;\n        private readonly Dictionary<string, Container> _containers;\n\n        private readonly IItemTransformerFactory _itemTransformerFactory;\n        private readonly IRAGService _ragService;\n        private readonly CosmosDBSettings _settings;\n        private readonly ILogger _logger;\n\n        private List<ChangeFeedProcessor> _changeFeedProcessors;\n        private bool _changeFeedsInitialized = false;\n\n        public bool IsInitialized => _changeFeedsInitialized;\n\n        public CosmosDBService(\n            IItemTransformerFactory itemTransformerFactory,\n            IRAGService ragService,\n            IOptions<CosmosDBSettings> settings,\n            ILogger<CosmosDBService> logger)\n        {\n            _itemTransformerFactory = itemTransformerFactory;\n            _ragService = ragService;\n\n            _settings = settings.Value;\n            ArgumentException.ThrowIfNullOrEmpty(_settings.Endpoint);\n            ArgumentException.ThrowIfNullOrEmpty(_settings.Key);\n            ArgumentException.ThrowIfNullOrEmpty(_settings.Database);\n            ArgumentException.ThrowIfNullOrEmpty(_settings.Containers);\n\n            _logger = logger;\n\n            _logger.LogInformation(\"Initializing Cosmos DB service.\");\n\n            if (!_settings.EnableTracing)\n            {\n                Type defaultTrace = Type.GetType(\"Microsoft.Azure.Cosmos.Core.Trace.DefaultTrace,Microsoft.Azure.Cosmos.Direct\");\n                TraceSource traceSource = (TraceSource)defaultTrace.GetProperty(\"TraceSource\").GetValue(null);\n                traceSource.Switch.Level = SourceLevels.All;\n                traceSource.Listeners.Clear();\n            }\n\n            CosmosSerializationOptions options = new()\n            {\n                PropertyNamingPolicy = CosmosPropertyNamingPolicy.CamelCase\n            };\n\n            CosmosClient client = new CosmosClientBuilder(_settings.Endpoint, _settings.Key)\n                .WithSerializerOptions(options)\n                .WithConnectionModeGateway()\n                .Build();\n\n            Database? database = client?.GetDatabase(_settings.Database);\n\n            _database = database ??\n                        throw new ArgumentException(\"Unable to connect to existing Azure Cosmos DB database.\");\n\n\n\n            _containers = new Dictionary<string, Container>();\n\n            List<string> containers = _settings.Containers.Split(',').ToList();\n\n            foreach (string containerName in containers)\n            {\n                Container? container = database?.GetContainer(containerName.Trim()) ??\n                                       throw new ArgumentException(\"Unable to connect to existing Azure Cosmos DB container or database.\");\n\n                _containers.Add(containerName.Trim(), container);\n            }\n\n            _completions = _containers[\"completions\"];\n            _customer = _containers[\"customer\"];\n            _product = _containers[\"product\"];\n\n            _leases = database?.GetContainer(_settings.ChangeFeedLeaseContainer)\n                ?? throw new ArgumentException($\"Unable to connect to the {_settings.ChangeFeedLeaseContainer} container required to listen to the CosmosDB change feed.\");\n\n            Task.Run(() => StartChangeFeedProcessors());\n            _logger.LogInformation(\"Cosmos DB service initialized.\");\n        }\n\n        private async Task StartChangeFeedProcessors()\n        {\n            _logger.LogInformation(\"Initializing the change feed processors...\");\n            _changeFeedProcessors = new List<ChangeFeedProcessor>();\n\n            try\n            {\n                foreach (string monitoredContainerName in _settings.MonitoredContainers.Split(',').Select(s => s.Trim()))\n                {\n                    var changeFeedProcessor = _containers[monitoredContainerName]\n                        .GetChangeFeedProcessorBuilder<dynamic>($\"{monitoredContainerName}ChangeFeed\", GenericChangeFeedHandler)\n                        .WithInstanceName($\"{monitoredContainerName}ChangeInstance\")\n                        .WithErrorNotification(GenericChangeFeedErrorHandler)\n                        .WithLeaseContainer(_leases)\n                        .Build();\n                    await changeFeedProcessor.StartAsync();\n                    _changeFeedProcessors.Add(changeFeedProcessor);\n                    _logger.LogInformation($\"Initialized the change feed processor for the {monitoredContainerName} container.\");\n                }\n\n                _changeFeedsInitialized = true;\n                _logger.LogInformation(\"Cosmos DB change feed processors initialized.\");\n            }\n            catch (Exception ex)\n            {\n                _logger.LogError(ex, \"Error initializing change feed processors.\");\n            }\n        }\n\n\n        private async Task GenericChangeFeedHandler(\n            ChangeFeedProcessorContext context,\n            IReadOnlyCollection<dynamic> changes,\n            CancellationToken cancellationToken)\n        {\n            if (changes.Count == 0)\n                return;\n\n            var batchRef = Guid.NewGuid().ToString();\n            _logger.LogInformation($\"Starting to generate embeddings for {changes.Count} entities (batch ref {batchRef}).\");\n\n\n            foreach (var item in changes)\n            {\n                try\n                {\n                    if (cancellationToken.IsCancellationRequested)\n                        break;\n\n                    if (item is JObject jObject)\n                    {\n\n                        IItemTransformer itemTransformer = _itemTransformerFactory.CreateItemTransformer(jObject);\n\n\n                        await _ragService.AddMemory(itemTransformer);\n                    }\n                    else\n                        throw new InvalidCastException($\"The Cosmos DB change feed cannot providess objects of type {item.GetType()}.\");\n                }\n                catch (Exception ex)\n                {\n                    _logger.LogError(ex, $\"Error processing an item in the change feed handler: {item}\");\n                }\n            }\n\n            _logger.LogInformation($\"Finished generating embeddings (batch ref {batchRef}).\");\n        }\n\n        private async Task GenericChangeFeedErrorHandler(\n            string LeaseToken,\n            Exception exception)\n        {\n            if (exception is ChangeFeedProcessorUserException userException)\n            {\n                Console.WriteLine($\"Lease {LeaseToken} processing failed with unhandled exception from user delegate {userException.InnerException}\");\n            }\n            else\n            {\n                Console.WriteLine($\"Lease {LeaseToken} failed with {exception}\");\n            }\n\n            await Task.CompletedTask;\n        }\n\n\n\n\n\n        public async Task<List<Session>> GetSessionsAsync()\n        {\n            QueryDefinition query = new QueryDefinition(\"SELECT DISTINCT * FROM c WHERE c.type = @type\")\n                .WithParameter(\"@type\", nameof(Session));\n\n            FeedIterator<Session> response = _completions.GetItemQueryIterator<Session>(query);\n\n            List<Session> output = [];\n            while (response.HasMoreResults)\n            {\n                FeedResponse<Session> results = await response.ReadNextAsync();\n                output.AddRange(results);\n            }\n\n            return output;\n        }\n\n\n\n\n\n        public async Task<Session> GetSessionAsync(string id)\n        {\n            return await _completions.ReadItemAsync<Session>(\n                id: id,\n                partitionKey: new PartitionKey(id));\n        }\n\n\n\n\n\n\n        public async Task<List<Message>> GetSessionMessagesAsync(string sessionId)\n        {\n            QueryDefinition query =\n                new QueryDefinition(\"SELECT * FROM c WHERE c.sessionId = @sessionId AND c.type = @type\")\n                    .WithParameter(\"@sessionId\", sessionId)\n                    .WithParameter(\"@type\", nameof(Message));\n\n            FeedIterator<Message> results = _completions.GetItemQueryIterator<Message>(query);\n\n            List<Message> output = new();\n            while (results.HasMoreResults)\n            {\n                FeedResponse<Message> response = await results.ReadNextAsync();\n                output.AddRange(response);\n            }\n\n            return output;\n        }\n\n\n\n\n\n\n        public async Task<Session> InsertSessionAsync(Session session)\n        {\n            PartitionKey partitionKey = new(session.SessionId);\n            return await _completions.CreateItemAsync(\n                item: session,\n                partitionKey: partitionKey\n            );\n        }\n\n\n\n\n\n\n        public async Task<Message> InsertMessageAsync(Message message)\n        {\n            PartitionKey partitionKey = new(message.SessionId);\n            return await _completions.CreateItemAsync(\n                item: message,\n                partitionKey: partitionKey\n            );\n        }\n\n\n\n\n\n\n        public async Task<Message> UpdateMessageAsync(Message message)\n        {\n            PartitionKey partitionKey = new(message.SessionId);\n            return await _completions.ReplaceItemAsync(\n                item: message,\n                id: message.Id,\n                partitionKey: partitionKey\n            );\n        }\n\n\n\n\n\n\n\n\n        public async Task<Message> UpdateMessageRatingAsync(string id, string sessionId, bool? rating)\n        {\n            var response = await _completions.PatchItemAsync<Message>(\n                id: id,\n                partitionKey: new PartitionKey(sessionId),\n                patchOperations:\n                [\n                    PatchOperation.Set(\"/rating\", rating),\n                ]\n            );\n            return response.Resource;\n        }\n\n\n\n\n\n\n        public async Task<Session> UpdateSessionAsync(Session session)\n        {\n            PartitionKey partitionKey = new(session.SessionId);\n            return await _completions.ReplaceItemAsync(\n                item: session,\n                id: session.Id,\n                partitionKey: partitionKey\n            );\n        }\n\n\n\n\n\n\n\n        public async Task<Session> UpdateSessionNameAsync(string id, string name)\n        {\n            var response = await _completions.PatchItemAsync<Session>(\n                id: id,\n                partitionKey: new PartitionKey(id),\n                patchOperations: new[]\n                {\n                    PatchOperation.Set(\"/name\", name),\n                }\n            );\n            return response.Resource;\n        }\n\n\n\n\n\n        public async Task UpsertSessionBatchAsync(params dynamic[] messages)\n        {\n            if (messages.Select(m => m.SessionId).Distinct().Count() > 1)\n            {\n                throw new ArgumentException(\"All items must have the same partition key.\");\n            }\n\n            PartitionKey partitionKey = new(messages.First().SessionId);\n            var batch = _completions.CreateTransactionalBatch(partitionKey);\n            foreach (var message in messages)\n            {\n                batch.UpsertItem(\n                    item: message\n                );\n            }\n\n            await batch.ExecuteAsync();\n        }\n\n\n\n\n\n        public async Task DeleteSessionAndMessagesAsync(string sessionId)\n        {\n            PartitionKey partitionKey = new(sessionId);\n\n\n\n            var query = new QueryDefinition(\"SELECT c.id FROM c WHERE c.sessionId = @sessionId\")\n                .WithParameter(\"@sessionId\", sessionId);\n\n            var response = _completions.GetItemQueryIterator<Message>(query);\n\n            var batch = _completions.CreateTransactionalBatch(partitionKey);\n            while (response.HasMoreResults)\n            {\n                var results = await response.ReadNextAsync();\n                foreach (var item in results)\n                {\n                    batch.DeleteItem(\n                        id: item.Id\n                    );\n                }\n            }\n\n            await batch.ExecuteAsync();\n        }\n\n\n\n\n\n\n        public async Task<Product> InsertProductAsync(Product product)\n        {\n            try\n            {\n                return await _product.CreateItemAsync(product);\n            }\n            catch (CosmosException ex)\n            {\n\n                if (ex.StatusCode == System.Net.HttpStatusCode.Conflict)\n                {\n                    _logger.LogInformation(\"Product already added.\");\n                }\n                else\n                {\n                    _logger.LogError(ex.Message);\n                    throw;\n                }\n                return product;\n            }\n        }\n\n\n\n\n\n\n        public async Task<Customer> InsertCustomerAsync(Customer customer)\n        {\n            try\n            {\n                return await _customer.CreateItemAsync(customer);\n            }\n            catch (CosmosException ex)\n            {\n\n                if (ex.StatusCode == System.Net.HttpStatusCode.Conflict)\n                {\n                    _logger.LogInformation(\"Customer already added.\");\n                }\n                else\n                {\n                    _logger.LogError(ex.Message);\n                    throw;\n                }\n                return customer;\n            }\n        }\n\n\n\n\n\n\n        public async Task<SalesOrder> InsertSalesOrderAsync(SalesOrder salesOrder)\n        {\n            try\n            {\n                return await _customer.CreateItemAsync(salesOrder);\n            }\n            catch (CosmosException ex)\n            {\n\n                if (ex.StatusCode == System.Net.HttpStatusCode.Conflict)\n                {\n                    _logger.LogInformation(\"Sales order already added.\");\n                }\n                else\n                {\n                    _logger.LogError(ex.Message);\n                    throw;\n                }\n                return salesOrder;\n            }\n        }\n\n\n\n\n\n\n\n        public async Task DeleteProductAsync(string productId, string categoryId)\n        {\n            try\n            {\n\n                await _product.DeleteItemAsync<Product>(id: productId, partitionKey: new PartitionKey(categoryId));\n            }\n            catch (CosmosException ex)\n            {\n                if (ex.StatusCode == System.Net.HttpStatusCode.NotFound)\n                {\n                    _logger.LogInformation(\"The product has already been removed.\");\n                }\n                else\n                    throw;\n            }\n        }\n\n        public async Task<CompletionPrompt> GetCompletionPrompt(string sessionId, string completionPromptId)\n        {\n            return await _completions.ReadItemAsync<CompletionPrompt>(\n                id: completionPromptId,\n                partitionKey: new PartitionKey(sessionId));\n        }\n    }\n}\n\n'Vector-Search-AI-Assistant/src/Infrastructure/Services/DependencyInjection.cs'\n:﻿using BuildYourOwnCopilot.Common.Interfaces;\nusing BuildYourOwnCopilot.Common.Models.Configuration;\nusing BuildYourOwnCopilot.Common.Services;\nusing BuildYourOwnCopilot.Infrastructure.Interfaces;\nusing BuildYourOwnCopilot.Infrastructure.Services;\nusing BuildYourOwnCopilot.Service.Interfaces;\nusing BuildYourOwnCopilot.Service.MemorySource;\nusing BuildYourOwnCopilot.Service.Models.ConfigurationOptions;\nusing BuildYourOwnCopilot.Service.Services;\nusing BuildYourOwnCopilot.Service.Services.Text;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Hosting;\n\nnamespace BuildYourOwnCopilot\n{\n\n\n\n    public static partial class DependencyInjection\n    {\n\n\n\n\n        public static void AddCosmosDBService(this IHostApplicationBuilder builder)\n        {\n            builder.Services.AddOptions<CosmosDBSettings>()\n                .Bind(builder.Configuration.GetSection(\"MSCosmosDBOpenAI:CosmosDB\"));\n            builder.Services.AddSingleton<ICosmosDBService, CosmosDBService>();\n            builder.Services.AddSingleton<ICosmosDBClientFactory, CosmosDBClientFactory>();\n        }\n\n\n\n\n\n        public static void AddSemanticKernelRAGService(this IHostApplicationBuilder builder)\n        {\n            builder.Services.AddOptions<SemanticKernelRAGServiceSettings>()\n                .Bind(builder.Configuration.GetSection(\"MSCosmosDBOpenAI\"));\n            builder.Services.AddSingleton<IRAGService, SemanticKernelRAGService>();\n        }\n\n\n\n\n\n        public static void AddChatService(this IHostApplicationBuilder builder)\n        {\n            builder.Services.AddSingleton<IChatService, ChatService>();\n        }\n\n\n\n\n\n        public static void AddPromptService(this IHostApplicationBuilder builder)\n        {\n\n            builder.Services.AddOptions<DurableSystemPromptServiceSettings>()\n                .Bind(builder.Configuration.GetSection(\"MSCosmosDBOpenAI:DurableSystemPrompt\"));\n            builder.Services.AddSingleton<ISystemPromptService, DurableSystemPromptService>();\n        }\n\n\n\n\n\n        public static void AddMemorySourceServices(this IHostApplicationBuilder builder)\n        {\n            builder.Services.AddOptions<BlobStorageMemorySourceSettings>()\n                .Bind(builder.Configuration.GetSection(\"MSCosmosDBOpenAI:BlobStorageMemorySource\"));\n            builder.Services.AddTransient<IMemorySource, BlobStorageMemorySource>();\n        }\n\n\n\n\n\n        public static void AddTextSplittingServices(this IHostApplicationBuilder builder)\n        {\n            builder.Services.AddSingleton<ITokenizerService, MicrosoftBPETokenizerService>();\n            builder.Services.ActivateSingleton<ITokenizerService>();\n\n            builder.Services.AddOptions<TokenTextSplitterServiceSettings>()\n                .Bind(builder.Configuration.GetSection(\"MSCosmosDBOpenAI:TextSplitter\"));\n            builder.Services.AddSingleton<ITextSplitterService, TokenTextSplitterService>();\n        }\n\n\n\n\n\n        public static void AddItemTransformerFactory(this IHostApplicationBuilder builder) =>\n            builder.Services.AddSingleton<IItemTransformerFactory, ItemTransformerFactory>();\n    }\n}\n\n'Vector-Search-AI-Assistant/src/ChatAPI/Program.cs'\n:using BuildYourOwnCopilot;\n\nnamespace ChatAPI\n{\n    public class Program\n    {\n        public static void Main(string[] args)\n        {\n            var builder = WebApplication.CreateBuilder(args);\n\n            if (!builder.Environment.IsDevelopment())\n                builder.Services.AddApplicationInsightsTelemetry();\n\n            builder.AddItemTransformerFactory();\n\n            builder.AddCosmosDBService();\n\n            builder.AddSemanticKernelRAGService();\n            builder.AddMemorySourceServices();\n\n            builder.AddPromptService();\n            builder.AddTextSplittingServices();\n\n            builder.AddChatService();\n            builder.Services.AddScoped<ChatEndpoints>();\n\n\n            builder.Services.AddAuthorization();\n\n\n            builder.Services.AddEndpointsApiExplorer();\n            builder.Services.AddSwaggerGen();\n\n            var app = builder.Build();\n\n            app.UseExceptionHandler(exceptionHandlerApp\n                    => exceptionHandlerApp.Run(async context\n                        => await Results.Problem().ExecuteAsync(context)));\n\n\n            app.UseSwagger();\n            app.UseSwaggerUI();\n\n            app.UseAuthorization();\n\n\n            using (var scope = app.Services.CreateScope())\n            {\n                var service = scope.ServiceProvider.GetService<ChatEndpoints>();\n                service?.Map(app);\n            }\n\n            app.Run();\n        }\n    }\n}\n'Vector-Search-AI-Assistant/src/Infrastructure/Interfaces/IRAGService.cs'\n:﻿using BuildYourOwnCopilot.Common.Interfaces;\nusing BuildYourOwnCopilot.Common.Models.Chat;\n\nnamespace BuildYourOwnCopilot.Service.Interfaces\n{\n    public interface IRAGService\n    {\n        bool IsInitialized { get; }\n\n        Task<CompletionResult> GetResponse(string userPrompt, List<Message> messageHistory);\n\n        Task<string> Summarize(string sessionId, string userPrompt);\n\n        Task AddMemory(IItemTransformer itemTransformer);\n\n        Task RemoveMemory(IItemTransformer itemTransformer);\n    }\n}\n",
        "gt": [
            "'Vector-Search-AI-Assistant/src/Infrastructure/Interfaces/IRAGService.cs'",
            "'Vector-Search-AI-Assistant/src/Infrastructure/Services/CosmosDbService.cs'",
            "'Vector-Search-AI-Assistant/src/Infrastructure/Services/DependencyInjection.cs'",
            "'Vector-Search-AI-Assistant/src/ChatAPI/Program.cs'"
        ]
    },
    {
        "files": [
            "'WolvenKit-7/WolvenKit.CR2W/Exceptions/InvalidParsingException.cs'",
            "'WolvenKit-7/CR2WTests/StressTest.cs'",
            "'WolvenKit-7/WolvenKit/Utility/ImportExportUtility.cs'"
        ],
        "content": "'WolvenKit-7/WolvenKit.CR2W/Exceptions/InvalidParsingException.cs'\n:﻿using System;\n\nnamespace WolvenKit.CR2W.Types\n{\n    public class InvalidParsingException : Exception\n    {\n        public InvalidParsingException(string message) : base(message)\n        {\n        }\n    }\n}\n'WolvenKit-7/CR2WTests/StressTest.cs'\n:﻿using System;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing WolvenKit;\nusing System.Linq;\nusing System.Collections.Generic;\nusing System.IO.MemoryMappedFiles;\nusing System.IO;\nusing WolvenKit.CR2W;\nusing WolvenKit.Bundles;\nusing WolvenKit.Common;\nusing System.Threading.Tasks;\nusing System.Diagnostics;\nusing System.Text;\nusing System.Security.Cryptography;\nusing WolvenKit.Common.Extensions;\nusing Microsoft.Win32;\n\nnamespace CR2WTests\n{\n    public static class AssertEx\n    {\n        public static async Task<TException>\n          ThrowsAsync<TException>(Func<Task> action,\n          bool allowDerivedTypes = true) where TException : Exception\n        {\n            try\n            {\n                await action();\n            }\n            catch (Exception ex)\n            {\n                if (allowDerivedTypes && !(ex is TException))\n                    throw new Exception(\"Delegate threw exception of type \" +\n                      ex.GetType().Name + \", but \" + typeof(TException).Name +\n                      \" or a derived type was expected.\", ex);\n                if (!allowDerivedTypes && ex.GetType() != typeof(TException))\n                    throw new Exception(\"Delegate threw exception of type \" +\n                      ex.GetType().Name + \", but \" + typeof(TException).Name +\n                      \" was expected.\", ex);\n                return (TException)ex;\n            }\n            throw new Exception(\"Delegate did not throw expected exception \" +\n              typeof(TException).Name + \".\");\n        }\n        public static Task<Exception> ThrowsAsync(Func<Task> action)\n        {\n            return ThrowsAsync<Exception>(action, true);\n        }\n    }\n\n    [TestClass]\n    public class StressTest\n    {\n        static string bundletag = \"*\";\n        static Dictionary<string, MemoryMappedFile> memorymappedbundles;\n        static BundleManager bm;\n\n        [ClassInitialize]\n        public static void Setup(TestContext context)\n        {\n            var tw3Finaldir = \"\";\n\n            var W3_DIR = System.Environment.GetEnvironmentVariable(\"W3_DIR\", EnvironmentVariableTarget.User);\n            if (!string.IsNullOrEmpty(W3_DIR))\n                tw3Finaldir = W3_DIR;\n\n            else\n            {\n                var exedir = new FileInfo(LookUpW3exe()).Directory.FullName;\n                if (Directory.Exists(exedir))\n                    tw3Finaldir = exedir;\n\n                else\n                    Assert.IsFalse(true, \"Aborting test. No valid Wicther 3 directory found.\");\n            }\n\n\n            memorymappedbundles = new Dictionary<string, MemoryMappedFile>();\n            bm = new BundleManager();\n            bm.LoadAll(tw3Finaldir);\n\n\n            foreach (var b in bm.Bundles.Values)\n            {\n                var e = b.ArchiveAbsolutePath.GetHashMD5();\n\n                memorymappedbundles.Add(e, MemoryMappedFile.CreateFromFile(b.ArchiveAbsolutePath, FileMode.Open, e, 0, MemoryMappedFileAccess.Read));\n\n            }\n        }\n\n        private static string LookUpW3exe()\n        {\n            const string uninstallkey = \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\\";\n            const string uninstallkey2 = \"SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\\";\n            var w3 = \"\";\n            try\n            {\n                Parallel.ForEach(Registry.LocalMachine.OpenSubKey(uninstallkey)?.GetSubKeyNames(), item =>\n                {\n                    var programName = Registry.LocalMachine.OpenSubKey(uninstallkey + item)\n                        ?.GetValue(\"DisplayName\");\n                    var installLocation = Registry.LocalMachine.OpenSubKey(uninstallkey + item)\n                        ?.GetValue(\"InstallLocation\");\n                    if (programName != null && installLocation != null)\n                    {\n                        if (programName.ToString().Contains(\"The Witcher 3 - Wild Hunt\") ||\n                            programName.ToString().Contains(\"The Witcher 3: Wild Hunt\"))\n                        {\n                            w3 = Directory.GetFiles(installLocation.ToString(), \"witcher3.exe\",\n                                SearchOption.AllDirectories).First();\n                        }\n                    }\n                });\n                Parallel.ForEach(Registry.LocalMachine.OpenSubKey(uninstallkey2)?.GetSubKeyNames(), item =>\n                {\n                    var programName = Registry.LocalMachine.OpenSubKey(uninstallkey2 + item)\n                        ?.GetValue(\"DisplayName\");\n                    var installLocation = Registry.LocalMachine.OpenSubKey(uninstallkey2 + item)\n                        ?.GetValue(\"InstallLocation\");\n                    if (programName != null && installLocation != null)\n                    {\n                        if (programName.ToString().Contains(\"The Witcher 3 - Wild Hunt\") ||\n                            programName.ToString().Contains(\"The Witcher 3: Wild Hunt\"))\n                        {\n                            if (Directory.Exists(installLocation.ToString()))\n                                w3 = Directory.GetFiles(installLocation.ToString(), \"witcher3.exe\",\n                                SearchOption.AllDirectories).First();\n                        }\n                    }\n                });\n                return w3;\n            }\n            catch (Exception ex)\n            {\n                throw ex;\n            }\n        }\n\n\n        #region Methods\n        [TestMethod]\n        public async Task Cellmap()\n        {\n            await Task.Run(() => StressTestExt(\"cellmap\"));\n        }\n\n        [TestMethod]\n        public async Task Env()\n        {\n            await Task.Run(() => StressTestExt(\"env\"));\n        }\n\n        [TestMethod]\n        public async Task Flyr()\n        {\n            await Task.Run(() => StressTestExt(\"flyr\"));\n        }\n\n        [TestMethod]\n        public async Task Formation()\n        {\n            await Task.Run(() => StressTestExt(\"formation\"));\n        }\n\n        [TestMethod]\n        public async Task Grassmask()\n        {\n            await Task.Run(() => StressTestExt(\"grassmask\"));\n        }\n\n        [TestMethod]\n        public async Task Guiconfig()\n        {\n            await Task.Run(() => StressTestExt(\"guiconfig\"));\n        }\n\n        [TestMethod]\n        public async Task hud()\n        {\n            await Task.Run(() => StressTestExt(\"hud\"));\n        }\n\n        [TestMethod]\n        public async Task journal()\n        {\n            await Task.Run(() => StressTestExt(\"journal\"));\n        }\n\n        [TestMethod]\n        public async Task menu()\n        {\n            await Task.Run(() => StressTestExt(\"menu\"));\n        }\n\n\n\n        [TestMethod]\n        public async Task popup()\n        {\n            await Task.Run(() => StressTestExt(\"popup\"));\n        }\n\n        [TestMethod]\n        public async Task redapex()\n        {\n            await Task.Run(() => StressTestExt(\"redapex\"));\n        }\n\n        [TestMethod]\n        public async Task redcloth()\n        {\n            await Task.Run(() => StressTestExt(\"redcloth\"));\n        }\n\n        [TestMethod]\n        public async Task reddest()\n        {\n            await Task.Run(() => StressTestExt(\"reddest\"));\n        }\n\n        [TestMethod]\n        public async Task reddlc()\n        {\n            await Task.Run(() => StressTestExt(\"reddlc\"));\n        }\n\n        [TestMethod]\n        public async Task redexp()\n        {\n            await Task.Run(() => StressTestExt(\"redexp\"));\n        }\n\n        [TestMethod]\n        public async Task redfur()\n        {\n            await Task.Run(() => StressTestExt(\"redfur\"));\n        }\n\n        [TestMethod]\n        public async Task redgame()\n        {\n            await Task.Run(() => StressTestExt(\"redgame\"));\n        }\n\n        [TestMethod]\n        public async Task redicsv()\n        {\n            await Task.Run(() => StressTestExt(\"redicsv\"));\n        }\n\n        [TestMethod]\n        public async Task redswf()\n        {\n            await Task.Run(() => StressTestExt(\"redswf\"));\n        }\n\n        [TestMethod]\n        public async Task redwpset()\n        {\n            await Task.Run(() => StressTestExt(\"redwpset\"));\n        }\n\n        [TestMethod]\n        public async Task spawntree()\n        {\n            await Task.Run(() => StressTestExt(\"spawntree\"));\n        }\n\n        [TestMethod]\n        public async Task texarray()\n        {\n            await Task.Run(() => StressTestExt(\"texarray\"));\n        }\n\n        [TestMethod]\n        public async Task vbrush()\n        {\n            await Task.Run(() => StressTestExt(\"vbrush\"));\n        }\n\n        [TestMethod]\n        public async Task w2am()\n        {\n            await Task.Run(() => StressTestExt(\"w2am\"));\n        }\n\n        [TestMethod]\n        public async Task w2animev()\n        {\n            await Task.Run(() => StressTestExt(\"w2animev\"));\n        }\n\n        [TestMethod]\n        public async Task w2anims()\n        {\n            await Task.Run(() => StressTestExt(\"w2anims\"));\n        }\n\n        [TestMethod]\n        public async Task w2beh()\n        {\n            await Task.Run(() => StressTestExt(\"w2beh\"));\n        }\n\n        [TestMethod]\n        public async Task w2behtree()\n        {\n            await Task.Run(() => StressTestExt(\"w2behtree\"));\n        }\n\n        [TestMethod]\n        public async Task w2cent()\n        {\n            await Task.Run(() => StressTestExt(\"w2cent\"));\n        }\n\n        [TestMethod]\n        public async Task w2comm()\n        {\n            await Task.Run(() => StressTestExt(\"w2comm\"));\n        }\n\n        [TestMethod]\n        public async Task w2cube()\n        {\n            await Task.Run(() => StressTestExt(\"w2cube\"));\n        }\n\n        [TestMethod]\n        public async Task w2cutscene()\n        {\n            await Task.Run(() => StressTestExt(\"w2cutscene\"));\n        }\n\n        [TestMethod]\n        public async Task w2dset()\n        {\n            await Task.Run(() => StressTestExt(\"w2dset\"));\n        }\n\n        [TestMethod]\n        public async Task w2em()\n        {\n            await Task.Run(() => StressTestExt(\"w2em\"));\n        }\n\n        [TestMethod]\n        public async Task w2ent()\n        {\n            await Task.Run(() => StressTestExt(\"w2ent\"));\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        [TestMethod]\n        public async Task w2fnt()\n        {\n\n\n\n\n\n\n\n            await Task.Run(() => StressTestExt(\"w2fnt\"));\n        }\n\n        [TestMethod]\n        public async Task w2je()\n        {\n            await Task.Run(() => StressTestExt(\"w2je\"));\n        }\n\n        [TestMethod]\n        public async Task w2job()\n        {\n            await Task.Run(() => StressTestExt(\"w2job\"));\n        }\n\n        [TestMethod]\n        public async Task w2l()\n        {\n            await Task.Run(() => StressTestExt(\"w2l\"));\n        }\n\n        [TestMethod]\n        public async Task w2mesh()\n        {\n            await Task.Run(() => StressTestExt(\"w2mesh\"));\n        }\n\n        [TestMethod]\n        public async Task w2mg()\n        {\n            await Task.Run(() => StressTestExt(\"w2mg\"));\n        }\n\n        [TestMethod]\n        public async Task w2mi()\n        {\n            await Task.Run(() => StressTestExt(\"w2mi\"));\n        }\n\n        [TestMethod]\n        public async Task w2p()\n        {\n            await Task.Run(() => StressTestExt(\"w2p\"));\n        }\n\n        [TestMethod]\n        public async Task w2phase()\n        {\n            await Task.Run(() => StressTestExt(\"w2phase\"));\n        }\n\n        [TestMethod]\n        public async Task w2qm()\n        {\n            await Task.Run(() => StressTestExt(\"w2qm\"));\n        }\n\n        [TestMethod]\n        public async Task w2quest()\n        {\n            await Task.Run(() => StressTestExt(\"w2quest\"));\n        }\n\n        [TestMethod]\n        public async Task w2ragdoll()\n        {\n            await Task.Run(() => StressTestExt(\"w2ragdoll\"));\n        }\n\n        [TestMethod]\n        public async Task w2rig()\n        {\n            await Task.Run(() => StressTestExt(\"w2rig\"));\n        }\n\n        [TestMethod]\n        public async Task w2scene()\n        {\n            await Task.Run(() => StressTestExt(\"w2scene\"));\n        }\n\n        [TestMethod]\n        public async Task w2sf()\n        {\n            await Task.Run(() => StressTestExt(\"w2sf\"));\n        }\n\n        [TestMethod]\n        public async Task w2steer()\n        {\n            await Task.Run(() => StressTestExt(\"w2steer\"));\n        }\n\n        [TestMethod]\n        public async Task w2ter()\n        {\n            await Task.Run(() => StressTestExt(\"w2ter\"));\n        }\n\n        [TestMethod]\n        public async Task w2w()\n        {\n            await Task.Run(() => StressTestExt(\"w2w\"));\n        }\n\n        [TestMethod]\n        public async Task w3app()\n        {\n            await Task.Run(() => StressTestExt(\"w3app\"));\n        }\n\n        [TestMethod]\n        public async Task w3dyng()\n        {\n            await Task.Run(() => StressTestExt(\"w3dyng\"));\n        }\n\n        [TestMethod]\n        public async Task w3fac()\n        {\n            await Task.Run(() => StressTestExt(\"w3fac\"));\n        }\n\n        [TestMethod]\n        public async Task w3occlusion()\n        {\n            await Task.Run(() => StressTestExt(\"w3occlusion\"));\n        }\n\n        [TestMethod]\n        public async Task w3simplex()\n        {\n            await Task.Run(() => StressTestExt(\"w3simplex\"));\n        }\n\n        [TestMethod]\n        public async Task xbm()\n        {\n            await Task.Run(() => StressTestExt(\"xbm\"));\n        }\n\n\n\n\n\n        #endregion\n\n\n        public void StressTestExt(string ext)\n        {\n\n            using (var frm = new frmUnitTest(ext, bundletag, bm))\n            {\n\n                frm.Load += (sender, e) => (sender as frmUnitTest).Visible = true;\n                frm.ShowDialog();\n\n                var result = frm.GetResult();\n\n                Assert.AreEqual(0, result.Item1, $\"Unknown bytes remained -> {result.Item1}bytes\");\n                Assert.AreEqual(0, result.Item2, $\"Unparsed files -> {result.Item2}\");\n            }\n        }\n\n\n    }\n}\n'WolvenKit-7/WolvenKit/Utility/ImportExportUtility.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Windows.Forms;\nusing Ionic.Zlib;\nusing WolvenKit.App.Model;\nusing WolvenKit.CR2W.Types;\n\nnamespace WolvenKit\n{\n    public static class ImportExportUtility\n    {\n        public static bool StartsWith(this byte[] bytes, string str)\n        {\n            if (str.Length > bytes.Length)\n                return false;\n\n            return !str.Where((t, i) => bytes[i] != t).Any();\n        }\n\n\n\n\n\n\n\n        public static List<string> GetPossibleExtensions(byte[] bytes, CVariable cvar )\n        {\n            var list = new List<string>();\n\n            if (bytes == null)\n                return list;\n\n            if (bytes.StartsWith(\"CFX\") || bytes.StartsWith(\"CWS\") || bytes.StartsWith(\"FWS\") || bytes.StartsWith(\"GFX\"))\n            {\n                list.Add(\"Decompressed flash file|*.swf\");\n                list.Add(\"Unknown file|*.*\");\n            }\n            else if (cvar is CBitmapTexture)\n            {\n                list.Add(\"DirectDraw Surface image|*.dds\");\n                list.Add(\"Unknown file|*.*\");\n            }\n            else\n            {\n                list.Add(\"Raw binary file|*.bin\");\n                list.Add(\"Unknown file|*.*\");\n            }\n\n            return list;\n        }\n\n\n\n\n\n\n\n\n        public static byte[] GetExportBytes(byte[] bytes, string ext, CVariable cvar)\n        {\n            switch (ext)\n            {\n                case \".swf\":\n                    if (bytes.StartsWith(\"CFX\") || bytes.StartsWith(\"CWS\"))\n                    {\n                        return uncompressToFWS(bytes);\n                    }\n                    break;\n                case \".dds\":\n                    if (cvar is CBitmapTexture xbm)\n                    {\n                        return ImageUtility.Xbm2DdsBytes(xbm);\n                    }\n                    break;\n            }\n\n            return bytes;\n\n\n            byte[] uncompressToFWS(byte[] _bytes)\n            {\n                var mem = new MemoryStream(_bytes);\n                var reader = new BinaryReader(mem);\n                var filetype = reader.ReadBytes(3);\n                var version = reader.ReadByte();\n                var size = reader.ReadUInt32();\n\n                var memout = new MemoryStream();\n                var writer = new BinaryWriter(memout);\n                writer.Write((byte)'F');\n                writer.Write((byte)'W');\n                writer.Write((byte)'S');\n                writer.Write(version);\n                writer.Write(size);\n\n                var zlib = new ZlibStream(mem, CompressionMode.Decompress);\n                zlib.CopyTo(memout);\n\n                return memout.ToArray();\n            }\n        }\n\n\n\n\n\n\n        public static byte[] GetImportBytes(BinaryReader reader)\n        {\n            var startpos = reader.BaseStream.Position;\n\n            var filetype = reader.ReadBytes(3);\n\n            if (filetype.StartsWith(\"FWS\") || filetype.StartsWith(\"GFX\"))\n            {\n                if (MessageBox.Show(\n                    \"Imported file type detected as FWS or GFX, do you want to compress it? \\n\\n Import as is if not.\",\n                    \"Import\",\n                    MessageBoxButtons.YesNo) == DialogResult.Yes)\n                {\n                    return compressToCFX(reader);\n                }\n            }\n\n            else if (filetype.StartsWith(\"DDS\"))\n            {\n                reader.BaseStream.Seek(128, SeekOrigin.Begin);\n\n\n\n\n\n                return reader.ReadBytes((int)reader.BaseStream.Length - 128);\n            }\n\n            reader.BaseStream.Seek(0, SeekOrigin.Begin);\n            return reader.ReadBytes((int) reader.BaseStream.Length);\n\n\n            byte[] compressToCFX(BinaryReader _reader)\n            {\n                var mem = new MemoryStream();\n                var writer = new BinaryWriter(mem);\n                var version = _reader.ReadByte();\n                var size = _reader.ReadUInt32();\n\n                writer.Write((byte)'C');\n                writer.Write((byte)'F');\n                writer.Write((byte)'X');\n                writer.Write(version);\n                writer.Write(size);\n\n                var zlib = new ZlibStream(_reader.BaseStream, CompressionMode.Compress, true);\n                zlib.CopyTo(mem);\n\n                return mem.ToArray();\n            }\n        }\n    }\n}",
        "gt": [
            "'WolvenKit-7/WolvenKit.CR2W/Exceptions/InvalidParsingException.cs'",
            "'WolvenKit-7/WolvenKit/Utility/ImportExportUtility.cs'",
            "'WolvenKit-7/CR2WTests/StressTest.cs'"
        ]
    },
    {
        "files": [
            "'Prig/Test.Urasandesu.Prig.VSPackage/PrigPackageTest.cs'",
            "'Prig/Urasandesu.Prig.VSPackage/Models/ProjectWideInstaller.cs'",
            "'Prig/Urasandesu.Prig.VSPackage/PrigViewModel.cs'"
        ],
        "content": "'Prig/Test.Urasandesu.Prig.VSPackage/PrigPackageTest.cs'\n:﻿\n\n\n\nusing EnvDTE;\nusing Moq;\nusing NUnit.Framework;\nusing Ploeh.AutoFixture;\nusing Ploeh.AutoFixture.AutoMoq;\nusing Urasandesu.Prig.VSPackage;\n\nnamespace Test.Urasandesu.Prig.VSPackage\n{\n    [TestFixture]\n    class PrigPackageTest\n    {\n        [Test]\n        public void NewEnableTestAdapterCommand_should_bind_Text_property_to_CurrentProject_status()\n        {\n\n            var fixture = new Fixture().Customize(new AutoMoqCustomization());\n            var projName = fixture.Create<string>();\n            {\n                var m = fixture.Freeze<Mock<Project>>();\n                m.Setup(_ => _.Name).Returns(projName);\n            }\n\n            var vm = new PrigViewModel();\n            var menuCommand = PrigPackage.NewEnableTestAdapterCommand(vm);\n            menuCommand.Text = null;\n\n\n\n            vm.CurrentProject.Value = null;\n            var defaultText = menuCommand.Text;\n            vm.CurrentProject.Value = fixture.Freeze<Project>();\n            var projectSelectedText = menuCommand.Text;\n\n\n\n            Assert.IsNotNull(defaultText);\n            Assert.AreNotEqual(defaultText, projectSelectedText);\n            Assert.That(projectSelectedText, Is.StringMatching(projName));\n        }\n\n\n\n        [Test]\n        public void NewDisableTestAdapterCommand_should_bind_Text_property_to_CurrentProject_status()\n        {\n\n            var fixture = new Fixture().Customize(new AutoMoqCustomization());\n            var projName = fixture.Create<string>();\n            {\n                var m = fixture.Freeze<Mock<Project>>();\n                m.Setup(_ => _.Name).Returns(projName);\n            }\n\n            var vm = new PrigViewModel();\n            var menuCommand = PrigPackage.NewDisableTestAdapterCommand(vm);\n            menuCommand.Text = null;\n\n\n\n            vm.CurrentProject.Value = null;\n            var defaultText = menuCommand.Text;\n            vm.CurrentProject.Value = fixture.Freeze<Project>();\n            var projectSelectedText = menuCommand.Text;\n\n\n\n            Assert.IsNotNull(defaultText);\n            Assert.AreNotEqual(defaultText, projectSelectedText);\n            Assert.That(projectSelectedText, Is.StringMatching(projName));\n        }\n    }\n}\n\n'Prig/Urasandesu.Prig.VSPackage/Models/ProjectWideInstaller.cs'\n:﻿\n\n\n\nusing EnvDTE;\nusing Microsoft.Practices.Unity;\nusing NuGet.VisualStudio;\nusing System;\n\nnamespace Urasandesu.Prig.VSPackage.Models\n{\n    class ProjectWideInstaller : IProjectWideInstaller\n    {\n        [Dependency]\n        public IVsPackageInstallerServices InstallerServices { private get; set; }\n\n        [Dependency]\n        public IVsPackageInstaller Installer { private get; set; }\n\n        [Dependency]\n        public IVsPackageInstallerEvents InstallerEvents { private get; set; }\n\n        [Dependency]\n        public IVsPackageUninstaller Uninstaller { private get; set; }\n\n        public void Install(ProjectWidePackage pwPkg)\n        {\n            if (pwPkg == null)\n                throw new ArgumentNullException(\"pwPkg\");\n\n            pwPkg.OnPackagePreparing();\n\n            var targetProj = pwPkg.TargetProject;\n            var pkgId = pwPkg.PackageId;\n            var pkgVer = pwPkg.PackageVersion;\n            if (!InstallerServices.IsPackageInstalledEx(targetProj, pkgId, pkgVer))\n            {\n                if (InstallerServices.IsPackageInstalled(targetProj, pkgId))\n                    Uninstaller.UninstallPackage(targetProj, pkgId, false);\n                InstallPackage(pwPkg, targetProj, pkgId, pkgVer);\n            }\n        }\n\n        void InstallPackage(ProjectWidePackage pwPkg, Project proj, string pkgId, string pkgVer)\n        {\n            try\n            {\n                InstallerEvents.PackageInstalling += pwPkg.OnPackageInstalling;\n                InstallerEvents.PackageInstalled += pwPkg.OnPackageInstalled;\n                InstallerEvents.PackageReferenceAdded += pwPkg.OnPackageReferenceAdded;\n\n                var source = default(string);\n                var ignoreDependencies = false;\n                Installer.InstallPackage(source, proj, pkgId, pkgVer, ignoreDependencies);\n            }\n            finally\n            {\n                InstallerEvents.PackageInstalling -= pwPkg.OnPackageInstalling;\n                InstallerEvents.PackageInstalled -= pwPkg.OnPackageInstalled;\n                InstallerEvents.PackageReferenceAdded -= pwPkg.OnPackageReferenceAdded;\n            }\n        }\n    }\n}\n\n'Prig/Urasandesu.Prig.VSPackage/PrigViewModel.cs'\n:﻿\n\n\n\nusing EnvDTE;\nusing Microsoft.VisualStudio;\nusing Microsoft.VisualStudio.Shell.Interop;\nusing NuGet.VisualStudio;\nusing System;\nusing System.Diagnostics;\nusing System.IO;\nusing System.Linq;\nusing System.Reactive;\nusing System.Reactive.Linq;\nusing System.Windows.Input;\nusing Urasandesu.Prig.VSPackage.Infrastructure;\nusing Urasandesu.Prig.VSPackage.Models;\n\nnamespace Urasandesu.Prig.VSPackage\n{\n    class PrigViewModel : PackageViewModel\n    {\n        ApplicationProperty<bool> m_isTestAdapterEnabled;\n        public ApplicationProperty<bool> IsTestAdapterEnabled\n        {\n            get\n            {\n                if (m_isTestAdapterEnabled == null)\n                    m_isTestAdapterEnabled = new ApplicationProperty<bool>();\n                return m_isTestAdapterEnabled;\n            }\n        }\n\n        ApplicationProperty<Project> m_currentProject;\n        public ApplicationProperty<Project> CurrentProject\n        {\n            get\n            {\n                if (m_currentProject == null)\n                    m_currentProject = new ApplicationProperty<Project>();\n                return m_currentProject;\n            }\n        }\n\n        ApplicationProperty<bool> m_isEditPrigIndirectionSettingsCommandVisible;\n        public ApplicationProperty<bool> IsEditPrigIndirectionSettingsCommandVisible\n        {\n            get\n            {\n                if (m_isEditPrigIndirectionSettingsCommandVisible == null)\n                    m_isEditPrigIndirectionSettingsCommandVisible = new ApplicationProperty<bool>(true);\n                return m_isEditPrigIndirectionSettingsCommandVisible;\n            }\n        }\n\n        AddPrigAssemblyForMSCorLibCommand m_addPrigAssemblyForMSCorLibCommand;\n        public ICommand AddPrigAssemblyForMSCorLibCommand\n        {\n            get\n            {\n                if (m_addPrigAssemblyForMSCorLibCommand == null)\n                    m_addPrigAssemblyForMSCorLibCommand = BuildUpCommand(new AddPrigAssemblyForMSCorLibCommand(this));\n                return m_addPrigAssemblyForMSCorLibCommand;\n            }\n        }\n\n        AddPrigAssemblyCommand m_addPrigAssemblyCommand;\n        public ICommand AddPrigAssemblyCommand\n        {\n            get\n            {\n                if (m_addPrigAssemblyCommand == null)\n                    m_addPrigAssemblyCommand = BuildUpCommand(new AddPrigAssemblyCommand(this));\n                return m_addPrigAssemblyCommand;\n            }\n        }\n\n        EnableTestAdapterCommand m_enableTestAdapterCommand;\n        public ICommand EnableTestAdapterCommand\n        {\n            get\n            {\n                if (m_enableTestAdapterCommand == null)\n                {\n                    var canExecuteSource =\n                            IsTestAdapterEnabled.Select(_ => Unit.Default).\n                            Merge(CurrentProject.Select(_ => Unit.Default)).\n                            Select(_ => !IsTestAdapterEnabled.Value && CurrentProject.Value != null);\n                    m_enableTestAdapterCommand = BuildUpCommand(new EnableTestAdapterCommand(this, canExecuteSource));\n                }\n                return m_enableTestAdapterCommand;\n            }\n        }\n\n        TestAdapterBeforeQueryStatusCommand m_testAdapterBeforeQueryStatusCommand;\n        public ICommand TestAdapterBeforeQueryStatusCommand\n        {\n            get\n            {\n                if (m_testAdapterBeforeQueryStatusCommand == null)\n                    m_testAdapterBeforeQueryStatusCommand = BuildUpCommand(new TestAdapterBeforeQueryStatusCommand(this));\n                return m_testAdapterBeforeQueryStatusCommand;\n            }\n        }\n\n        DisableTestAdapterCommand m_disableTestAdapterCommand;\n        public ICommand DisableTestAdapterCommand\n        {\n            get\n            {\n                if (m_disableTestAdapterCommand == null)\n                    m_disableTestAdapterCommand = BuildUpCommand(new DisableTestAdapterCommand(this, IsTestAdapterEnabled));\n                return m_disableTestAdapterCommand;\n            }\n        }\n\n        RegisterPrigCommand m_registerPrigCommand;\n        public ICommand RegisterPrigCommand\n        {\n            get\n            {\n                if (m_registerPrigCommand == null)\n                    m_registerPrigCommand = BuildUpCommand(new RegisterPrigCommand(this));\n                return m_registerPrigCommand;\n            }\n        }\n\n        UnregisterPrigCommand m_unregisterPrigCommand;\n        public ICommand UnregisterPrigCommand\n        {\n            get\n            {\n                if (m_unregisterPrigCommand == null)\n                    m_unregisterPrigCommand = BuildUpCommand(new UnregisterPrigCommand(this));\n                return m_unregisterPrigCommand;\n            }\n        }\n\n        EditPrigIndirectionSettingsCommand m_editPrigIndirectionSettingsCommand;\n        public ICommand EditPrigIndirectionSettingsCommand\n        {\n            get\n            {\n                if (m_editPrigIndirectionSettingsCommand == null)\n                    m_editPrigIndirectionSettingsCommand = BuildUpCommand(new EditPrigIndirectionSettingsCommand(this));\n                return m_editPrigIndirectionSettingsCommand;\n            }\n        }\n\n        RemovePrigAssemblyCommand m_removePrigAssemblyCommand;\n        public ICommand RemovePrigAssemblyCommand\n        {\n            get\n            {\n                if (m_removePrigAssemblyCommand == null)\n                    m_removePrigAssemblyCommand = BuildUpCommand(new RemovePrigAssemblyCommand(this));\n                return m_removePrigAssemblyCommand;\n            }\n        }\n\n        EditPrigIndirectionSettingsBeforeQueryStatusCommand m_editPrigIndirectionSettingsBeforeQueryStatusCommand;\n        public ICommand EditPrigIndirectionSettingsBeforeQueryStatusCommand\n        {\n            get\n            {\n                if (m_editPrigIndirectionSettingsBeforeQueryStatusCommand == null)\n                    m_editPrigIndirectionSettingsBeforeQueryStatusCommand = BuildUpCommand(new EditPrigIndirectionSettingsBeforeQueryStatusCommand(this));\n                return m_editPrigIndirectionSettingsBeforeQueryStatusCommand;\n            }\n        }\n\n        OnBuildDoneCommand m_onBuildDoneCommand;\n        public ICommand OnBuildDoneCommand\n        {\n            get\n            {\n                if (m_onBuildDoneCommand == null)\n                    m_onBuildDoneCommand = BuildUpCommand(new OnBuildDoneCommand(this));\n                return m_onBuildDoneCommand;\n            }\n        }\n\n        ProjectRemovedCommand m_projectRemovedCommand;\n        public ICommand ProjectRemovedCommand\n        {\n            get\n            {\n                if (m_projectRemovedCommand == null)\n                    m_projectRemovedCommand = BuildUpCommand(new ProjectRemovedCommand(this));\n                return m_projectRemovedCommand;\n            }\n        }\n\n\n\n        public void SetToCurrentProjectIfSupported(Project proj)\n        {\n            CurrentProject.Value = IsSupportedProject(proj) ? proj : null;\n        }\n\n        static bool IsSupportedProject(Project proj)\n        {\n            return proj != null &&\n                   (proj.Kind == VSConstantsAlternative.UICONTEXT.CSharpProject_string ||\n                    proj.Kind == VSConstantsAlternative.UICONTEXT.FSharpProject_string ||\n                    proj.Kind == VSConstantsAlternative.UICONTEXT.VBProject_string);\n        }\n\n        public void SetEditPrigIndirectionSettingsCommandVisibility(ProjectItem projItem)\n        {\n            if (projItem == null)\n            {\n                IsEditPrigIndirectionSettingsCommandVisible.Value = false;\n                return;\n            }\n\n            var ext = Path.GetExtension(projItem.Name);\n            IsEditPrigIndirectionSettingsCommandVisible.Value = string.Equals(ext, \".prig\", StringComparison.InvariantCultureIgnoreCase);\n        }\n\n        public bool HasEnabledTestAdapter()\n        {\n            return IsTestAdapterEnabled.Value && CurrentProject.Value != null;\n        }\n\n        public bool HasEnabledTestAdapter(Project proj)\n        {\n            return HasEnabledTestAdapter() && CurrentProject.Value.Name == proj.Name;\n        }\n\n        public Project GetCurrentProjectOrException()\n        {\n            var proj = CurrentProject.Value;\n            if (proj == null)\n                throw new InvalidOperationException(PrigResources.GetString(\"CurrentProjectIsntSelectedMessage\"));\n            return proj;\n        }\n\n        public Project[] GetTargetProjects(DTE dte)\n        {\n            if (dte == null)\n                return new Project[0];\n\n            var sln = dte.Solution;\n            if (sln == null)\n                return new Project[0];\n\n            var projs = sln.Projects;\n            if (projs == null)\n                return new Project[0];\n\n            return projs.OfType<Project>().Where(IsSupportedProject).ToArray();\n        }\n\n\n\n        MachineWideProcesses m_mwProc;\n\n        internal void BeginMachineWideProcessProgress(MachineWideProcesses mwProc)\n        {\n            m_mwProc = mwProc;\n            Statusbar.BeginProgress(100u);\n        }\n\n        internal void ReportProfilerStatusCheckingProgress(uint prog, ProfilerLocation profLoc)\n        {\n            var msg = string.Format(PrigResources.GetString(\"CheckingInstallationStatusForProfiler_0_MessageFormat\"), profLoc.PathOfInstalling);\n            Statusbar.ReportProgress(msg, prog);\n        }\n\n        internal void ReportNuGetPackageCreatingProgress(uint prog, string pkgName)\n        {\n            var msg = string.Format(PrigResources.GetString(\"CreatingNugetPackage_0_MessageFormat\"), pkgName);\n            Statusbar.ReportProgress(msg, prog);\n        }\n\n        internal void ReportNuGetPackageCreatedProgress(uint prog, string stdout)\n        {\n            Statusbar.ReportProgress(stdout, prog);\n        }\n\n        internal void ReportNuGetSourceProcessingProgress(uint prog, string path, string name)\n        {\n            Debug.Assert(m_mwProc != MachineWideProcesses.None);\n            var resName = string.Format(\"ProcessingNugetSource_0_As_1_{0}_MessageFormat\", m_mwProc);\n            var msg = string.Format(PrigResources.GetString(resName), path, name);\n            Statusbar.ReportProgress(msg, prog);\n        }\n\n        internal void ReportNuGetSourceProcessedProgress(uint prog, string stdout)\n        {\n            Statusbar.ReportProgress(stdout, prog);\n        }\n\n        internal void ReportEnvironmentVariableProcessingProgress(uint prog, string name, string value)\n        {\n            Debug.Assert(m_mwProc != MachineWideProcesses.None);\n            var resName = string.Format(\"ProcessingEnvironmentVariable_0_As_1_{0}_MessageFormat\", m_mwProc);\n            var msg = string.Format(PrigResources.GetString(resName), value, name);\n            Statusbar.ReportProgress(msg, prog);\n        }\n\n        internal void ReportEnvironmentVariableProcessedProgress(uint prog)\n        {\n            Debug.Assert(m_mwProc != MachineWideProcesses.None);\n            var resName = string.Format(\"ProcessedEnvironmentVariable_{0}_Message\", m_mwProc);\n            var msg = PrigResources.GetString(resName);\n            Statusbar.ReportProgress(msg, prog);\n        }\n\n        internal void ReportProfilerProcessingProgress(uint prog, ProfilerLocation profLoc)\n        {\n            Debug.Assert(m_mwProc != MachineWideProcesses.None);\n            var resName = string.Format(\"ProcessingProfiler_0_ToRegistry_{0}_MessageFormat\", m_mwProc);\n            var msg = string.Format(PrigResources.GetString(resName), profLoc.PathOfInstalling);\n            Statusbar.ReportProgress(msg, prog);\n        }\n\n        internal void ReportProfilerProcessedProgress(uint prog, string stdout)\n        {\n            Statusbar.ReportProgress(stdout, prog);\n        }\n\n        internal void ReportPrigSourceProcessingProgress(uint prog, string pkgName, string src)\n        {\n            Debug.Assert(m_mwProc != MachineWideProcesses.None);\n            var resName = string.Format(\"ProcessingDefaultSource_0_AsPackage_1_{0}_MessageFormat\", m_mwProc);\n            var msg = string.Format(PrigResources.GetString(resName), src, pkgName);\n            Statusbar.ReportProgress(msg, prog);\n        }\n\n        internal void ReportPrigSourceProcessedProgress(uint prog, string stdout)\n        {\n            Statusbar.ReportProgress(stdout, prog);\n        }\n\n        static string GetSkippedMachineWideProcessMessage(MachineWideProcesses mwProc, SkippedReasons reason)\n        {\n            var resName = string.Format(\"SkippedMachineWideProcess_{0}_{1}_Message\", mwProc, reason);\n            return PrigResources.GetString(resName);\n        }\n\n        internal void ShowSkippedMachineWideProcessMessage(SkippedReasons reason)\n        {\n            Debug.Assert(m_mwProc != MachineWideProcesses.None);\n            var msg = GetSkippedMachineWideProcessMessage(m_mwProc, reason);\n            ShowMessageBox(msg, OLEMSGBUTTON.OLEMSGBUTTON_OK, OLEMSGICON.OLEMSGICON_INFO);\n        }\n\n        internal void EndSkippedMachineWideProcessProgress(SkippedReasons reason)\n        {\n            Debug.Assert(m_mwProc != MachineWideProcesses.None);\n            var msg = GetSkippedMachineWideProcessMessage(m_mwProc, reason);\n            Statusbar.EndProgress();\n            Statusbar.Text.Value = msg;\n            m_mwProc = MachineWideProcesses.None;\n        }\n\n        static string GetCompletedMachineWideProcessMessage(MachineWideProcesses mwProc)\n        {\n            var resName = string.Format(\"CompletedMachineWideProcess_{0}_Message\", mwProc);\n            return PrigResources.GetString(resName);\n        }\n\n        internal bool ConfirmRestartingVisualStudioToTakeEffect()\n        {\n            Debug.Assert(m_mwProc != MachineWideProcesses.None);\n            var msg = GetCompletedMachineWideProcessMessage(m_mwProc);\n            var cfmMsg = string.Format(PrigResources.GetString(\"_0_YouMustRestartVisualStudioForTheseChangesToTakeEffectMessageFormat\"), msg);\n            var ret = ShowMessageBox(cfmMsg, OLEMSGBUTTON.OLEMSGBUTTON_YESNO, OLEMSGICON.OLEMSGICON_WARNING);\n            return ret == VSConstants.MessageBoxResult.IDYES;\n        }\n\n        internal void EndCompletedMachineWideProcessProgress()\n        {\n            Debug.Assert(m_mwProc != MachineWideProcesses.None);\n            var msg = GetCompletedMachineWideProcessMessage(m_mwProc);\n            Statusbar.EndProgress();\n            Statusbar.Text.Value = msg;\n            m_mwProc = MachineWideProcesses.None;\n        }\n\n        internal void ShowVisualStudioHasNotBeenElevatedYetMessage()\n        {\n            var msg = PrigResources.GetString(\"VisualStudioHasNotBeenElevatedYetMessage\");\n            ShowMessageBox(msg, OLEMSGBUTTON.OLEMSGBUTTON_OK, OLEMSGICON.OLEMSGICON_INFO);\n        }\n\n\n\n        ProjectWideProcesses m_pwProc;\n\n        internal void BeginProjectWideProcessProgress(ProjectWideProcesses pwProc)\n        {\n            m_pwProc = pwProc;\n            Statusbar.BeginProgress(100u);\n        }\n\n        internal void ReportPackagePreparingProgress(uint prog)\n        {\n            var msg = PrigResources.GetString(\"CheckingCurrentProjectsPackagesMessage\");\n            Statusbar.ReportProgress(msg, prog);\n        }\n\n        internal void ReportPackageInstallingProgress(uint prog, IVsPackageMetadata metadata)\n        {\n            var msg = string.Format(PrigResources.GetString(\"Installing_0_MessageFormat\"), metadata.Id);\n            Statusbar.ReportProgress(msg, prog);\n        }\n\n        internal void ReportPackageInstalledProgress(uint prog, IVsPackageMetadata metadata)\n        {\n            var msg = string.Format(PrigResources.GetString(\"Installed_0_MessageFormat\"), metadata.Id);\n            Statusbar.ReportProgress(msg, prog);\n        }\n\n        internal void ReportPackageReferenceAddedProgress(uint prog, IVsPackageMetadata metadata)\n        {\n            var msg = string.Format(PrigResources.GetString(\"ReferenceAdded_0_MessageFormat\"), metadata.Id);\n            Statusbar.ReportProgress(msg, prog);\n        }\n\n        internal void ReportProcessingProjectWideProcessProgress(uint prog, Project[] projs)\n        {\n            Debug.Assert(projs != null);\n            ReportProcessingProjectWideProcessProgress(prog, string.Join(\";\", projs.Select(_ => _.Name)));\n        }\n\n        internal void ReportProcessingProjectWideProcessProgress(uint prog, string include)\n        {\n            Debug.Assert(m_pwProc != ProjectWideProcesses.None);\n            var resName = string.Format(\"ProcessingProjectWideProcess_0_{0}_MessageFormat\", m_pwProc);\n            var msg = string.Format(PrigResources.GetString(resName), include);\n            Statusbar.ReportProgress(msg, prog);\n        }\n\n        static string GetSkippedProjectWideProcessMessage(ProjectWideProcesses pwProc, SkippedReasons reason, string include)\n        {\n            var resName = string.Format(\"SkippedProjectWideProcessFor_0_{0}_{1}_MessageFormat\", pwProc, reason);\n            return string.Format(PrigResources.GetString(resName), include);\n        }\n\n        internal void EndSkippedProjectWideProcessProgress(SkippedReasons reason, string include)\n        {\n            Debug.Assert(m_pwProc != ProjectWideProcesses.None);\n            var msg = GetSkippedProjectWideProcessMessage(m_pwProc, reason, include);\n            Statusbar.EndProgress();\n            Statusbar.Text.Value = msg;\n            m_pwProc = ProjectWideProcesses.None;\n        }\n\n        internal void ShowSkippedProjectWideProcessMessage(SkippedReasons reason, string include)\n        {\n            Debug.Assert(m_pwProc != ProjectWideProcesses.None);\n            var msg = GetSkippedProjectWideProcessMessage(m_pwProc, reason, include);\n            ShowMessageBox(msg, OLEMSGBUTTON.OLEMSGBUTTON_OK, OLEMSGICON.OLEMSGICON_WARNING);\n        }\n\n        static string GetCompletedProjectWideProcessMessage(ProjectWideProcesses pwProc, string include)\n        {\n            var resName = string.Format(\"CompletedProjectWideProcessFor_0_{0}_MessageFormat\", pwProc);\n            return string.Format(PrigResources.GetString(resName), include);\n        }\n\n        internal void EndCompletedProjectWideProcessProgress(Project[] projs)\n        {\n            Debug.Assert(projs != null);\n            EndCompletedProjectWideProcessProgress(string.Join(\";\", projs.Select(_ => _.Name)));\n        }\n\n        internal void EndCompletedProjectWideProcessProgress(string include)\n        {\n            Debug.Assert(m_pwProc != ProjectWideProcesses.None);\n            var msg = GetCompletedProjectWideProcessMessage(m_pwProc, include);\n            Statusbar.EndProgress();\n            Statusbar.Text.Value = msg;\n            m_pwProc = ProjectWideProcesses.None;\n        }\n\n        internal void ShowCompletedProjectWideProcessMessage(string include)\n        {\n            Debug.Assert(m_pwProc != ProjectWideProcesses.None);\n            var msg = GetCompletedProjectWideProcessMessage(m_pwProc, include);\n            ShowMessageBox(msg, OLEMSGBUTTON.OLEMSGBUTTON_OK, OLEMSGICON.OLEMSGICON_INFO);\n        }\n\n        internal bool ConfirmRemovingPrigAssembly(string deletionalInclude)\n        {\n            var msg = string.Format(PrigResources.GetString(\"AreYouSureYouWantToRemovePrigAssembly_0_MessageFormat\"), deletionalInclude);\n            var ret = ShowMessageBox(msg, OLEMSGBUTTON.OLEMSGBUTTON_YESNO, OLEMSGICON.OLEMSGICON_QUERY);\n            return ret == VSConstants.MessageBoxResult.IDYES;\n        }\n    }\n}\n",
        "gt": [
            "'Prig/Urasandesu.Prig.VSPackage/Models/ProjectWideInstaller.cs'",
            "'Prig/Urasandesu.Prig.VSPackage/PrigViewModel.cs'",
            "'Prig/Test.Urasandesu.Prig.VSPackage/PrigPackageTest.cs'"
        ]
    },
    {
        "files": [
            "'MCDSaveEdit/MCDSaveEdit/UI/Windows/MainWindow.xaml.cs'",
            "'MCDSaveEdit/MCDSaveEdit/ViewModels/ProfileViewModel.cs'",
            "'MCDSaveEdit/MCDSaveEdit/App.xaml.cs'"
        ],
        "content": "'MCDSaveEdit/MCDSaveEdit/UI/Windows/MainWindow.xaml.cs'\n:using MCDSaveEdit.Data;\nusing MCDSaveEdit.Logic;\nusing MCDSaveEdit.Save.Models.Profiles;\nusing MCDSaveEdit.Services;\nusing MCDSaveEdit.ViewModels;\nusing Microsoft.Win32;\nusing System;\nusing System.Collections.Generic;\nusing System.Diagnostics;\nusing System.Globalization;\nusing System.IO;\nusing System.Linq;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Input;\n#nullable enable\n\nnamespace MCDSaveEdit.UI\n{\n\n\n\n    public partial class MainWindow : Window\n    {\n        public Action? onRelaunch;\n        public Action<string?, ProfileSaveFile?>? onReload;\n\n        private readonly MainViewModel _model;\n\n        private Window? _busyWindow = null;\n\n        public MainWindow(MainViewModel model)\n        {\n            _model = model;\n            InitializeComponent();\n            translateStaticStrings();\n\n            _model.showError = showError;\n            gameFilesLocationMenuItem.Header = ImageResolver.instance.path ?? R.GAME_FILES_WINDOW_NO_CONTENT_BUTTON;\n            var detectedGameVersion = _model.detectedGameVersion;\n            if (detectedGameVersion == null)\n            {\n                gameFilesVersionMenuItem.Header = R.NO_GAME_VERSION_DETECTED;\n            }\n            else\n            {\n                gameFilesVersionMenuItem.Header = R.formatMCD_VERSION(detectedGameVersion);\n            }\n\n            refreshRecentFilesList();\n\n            createLangMenuItems();\n\n\n#if HIDE_CHEST_TAB\n            chestTab.Visibility = Visibility.Collapsed;\n#else\n            chestTab.model = _model.profileModel;\n#endif\n\n            inventoryTab.model = _model.profileModel;\n            statsTab.model = _model.profileModel;\n            _model.profileModel.profile.subscribe(_ => this.updateUI());\n\n\n            updateUI();\n\n            checkForNewVersionAsync();\n        }\n\n        #region UI\n\n        public void updateUI()\n        {\n            updateTitleUI();\n            statsTab.updateUI();\n            inventoryTab.updateUI();\n            chestTab.updateUI();\n            closeBusyIndicator();\n        }\n\n        private void updateTitleUI()\n        {\n            if (_model.profileModel.filePath != null)\n            {\n                Title = string.Format(\"{0} - {1}\", R.APPLICATION_TITLE, Path.GetFileName(_model.profileModel.filePath));\n                saveMenuItem.IsEnabled = saveAsMenuItem.IsEnabled = true;\n            }\n            else\n            {\n                Title = R.APPLICATION_TITLE;\n                saveMenuItem.IsEnabled = saveAsMenuItem.IsEnabled = false;\n            }\n        }\n\n        private void OnTabSelected(object sender, RoutedEventArgs e)\n        {\n            var tab = sender as TabItem;\n            if (tab != null)\n            {\n\n                this._model.profileModel.mainEquipmentModel.updateEnchantmentPoints();\n                this._model.profileModel.storageChestEquipmentModel.updateEnchantmentPoints();\n            }\n        }\n\n        #endregion\n\n        #region Setup\n\n        private void refreshRecentFilesList()\n        {\n            recentFilesMenuItem.Items.Clear();\n            foreach(var menuItem in _model.recentFilesInfos.Select(createRecentFileMenuItem))\n            {\n                recentFilesMenuItem.Items.Add(menuItem);\n            }\n            recentFilesMenuItem.IsEnabled = recentFilesMenuItem.Items.Count > 0;\n        }\n\n        private MenuItem createRecentFileMenuItem(FileInfo fileInfo)\n        {\n            var menuItem = new MenuItem();\n            menuItem.Header = fileInfo.Name;\n            menuItem.CommandParameter = fileInfo;\n            menuItem.Command = new RelayCommand<FileInfo>(openRecentFileCommandBinding_Executed);\n            return menuItem;\n        }\n\n        private void translateStaticStrings()\n        {\n            inventoryTabItem.Header = R.getString(\"Quickaction_inventory\") ?? R.INVENTORY;\n            statsTabItem.Header = R.STATS_COUNTERS;\n            chestTabItem.Header = R.getString(\"StorageChest\") ?? R.CHEST;\n        }\n\n        private void createLangMenuItems()\n        {\n            langMenuItem.Items.Clear();\n            var noneMenuItem = createLangMenuItem(R.getString(\"rebind_none\") ?? R.NONE);\n            langMenuItem.Items.Add(noneMenuItem);\n            langMenuItem.Items.Add(new Separator());\n            foreach(var menuItem in LanguageResolver.instance.localizationOptions.Select(createLangMenuItem))\n            {\n                langMenuItem.Items.Add(menuItem);\n            }\n        }\n\n        private MenuItem createLangMenuItem(string lang)\n        {\n            var specificLangMenuItem = new MenuItem();\n            string header;\n            try\n            {\n                header = CultureInfo.GetCultureInfo(lang).NativeName;\n            }\n            catch\n            {\n                header = lang;\n            }\n            specificLangMenuItem.Header = header;\n            specificLangMenuItem.IsChecked = AppModel.currentLangSpecifier == lang;\n            specificLangMenuItem.CommandParameter = lang;\n            specificLangMenuItem.Command = new RelayCommand<string>(languageSelectedMenuItem_Click);\n            return specificLangMenuItem;\n        }\n\n#endregion\n\n#region Version Check\n\n        private async void checkForNewVersionAsync()\n        {\n            await Config.instance.downloadAsync();\n            if (Config.instance.isNewBetaVersionAvailable())\n            {\n                updateMenuItem.Header = R.BETA_UPDATE_MENU_ITEM_HEADER;\n                updateMenuItem.Visibility = Visibility.Visible;\n            }\n            else if (Config.instance.isNewStableVersionAvailable())\n            {\n                updateMenuItem.Header = R.STABLE_UPDATE_MENU_ITEM_HEADER;\n                updateMenuItem.Visibility = Visibility.Visible;\n            }\n            else\n            {\n                updateMenuItem.Visibility = Visibility.Collapsed;\n            }\n        }\n\n#endregion\n\n#region User Input Methods\n\n#region Keyboard Captures\n\n        protected override void OnKeyUp(KeyEventArgs e)\n        {\n            base.OnKeyUp(e);\n\n\n            if (e.Key == Key.Delete)\n            {\n                if (inventoryTab.IsVisible && !(Keyboard.FocusedElement is TextBox))\n                {\n                    inventoryTab.deleteCurrentSelectedItem();\n                }\n                else if (chestTab.IsVisible && !(Keyboard.FocusedElement is TextBox))\n                {\n                    chestTab.deleteCurrentSelectedItem();\n                }\n            }\n        }\n\n#endregion\n\n#region Menu Items\n\n        private void exitCommandBinding_Executed(object sender, ExecutedRoutedEventArgs e)\n        {\n            EventLogger.logEvent(\"exitCommandBinding_Executed\");\n            Application.Current?.Shutdown();\n        }\n\n        private void relaunchMenuItem_Click(object sender, RoutedEventArgs e)\n        {\n            EventLogger.logEvent(\"relaunchMenuItem_Click\");\n            onRelaunch?.Invoke();\n        }\n\n        private void openCommandBinding_Executed(object sender, ExecutedRoutedEventArgs e)\n        {\n            EventLogger.logEvent(\"openCommandBinding_Executed\");\n            var openFileDialog = new OpenFileDialog();\n            openFileDialog.CheckFileExists = true;\n            openFileDialog.Filter = constructOpenFileDialogFilterString(ProfileViewModel.supportedFileTypesDict);\n            openFileDialog.FilterIndex = 0;\n            if(!string.IsNullOrWhiteSpace(_model.profileModel.filePath))\n            {\n                var directory = Path.GetDirectoryName(_model.profileModel.filePath!);\n                openFileDialog.InitialDirectory = directory;\n            }\n            else\n            {\n                openFileDialog.InitialDirectory = Constants.FILE_DIALOG_INITIAL_DIRECTORY;\n            }\n            if (openFileDialog.ShowDialog() == true)\n            {\n                handleFileOpenAsync(openFileDialog.FileName);\n            }\n        }\n\n        private void saveAsCommandBinding_Executed(object sender, ExecutedRoutedEventArgs e)\n        {\n            EventLogger.logEvent(\"saveAsCommandBinding_Executed\");\n            var saveFileDialog = new SaveFileDialog();\n            saveFileDialog.Filter = constructOpenFileDialogFilterString(ProfileViewModel.supportedFileTypesDict);\n            saveFileDialog.FilterIndex = 0;\n            saveFileDialog.InitialDirectory = Path.GetDirectoryName(_model.profileModel.filePath!);\n            if (saveFileDialog.ShowDialog() == true)\n            {\n                handleFileSaveAsync(saveFileDialog.FileName);\n            }\n        }\n\n        private void saveCommandBinding_Executed(object sender, ExecutedRoutedEventArgs e)\n        {\n            EventLogger.logEvent(\"saveCommandBinding_Executed\");\n            handleFileSaveAsync(_model.profileModel.filePath);\n        }\n\n        private void openRecentFileCommandBinding_Executed(FileInfo fileInfo)\n        {\n            handleFileOpenAsync(fileInfo.FullName);\n        }\n\n        private void languageSelectedMenuItem_Click(string langSpecifier)\n        {\n            EventLogger.logEvent(\"languageSelectedMenuItem_Click\", new Dictionary<string, object> { { \"langSpecifier\", langSpecifier } });\n            AppModel.loadLanguageStrings(langSpecifier);\n            onReload?.Invoke(_model.profileModel.filePath, _model.profileModel.profile.value);\n        }\n\n        private void aboutMenuItem_Click(object sender, RoutedEventArgs e)\n        {\n            EventLogger.logEvent(\"aboutMenuItem_Click\");\n            var aboutWindow = WindowFactory.createAboutWindow();\n            aboutWindow.ShowDialog();\n        }\n\n        private void updateMenuItem_Click(object sender, RoutedEventArgs e)\n        {\n            EventLogger.logEvent(\"updateMenuItem_Click\");\n            Process.Start(Config.instance.newVersionDownloadURL());\n        }\n\n#endregion\n\n#region File Drop Capture\n\n        private void window_File_Drop(object sender, DragEventArgs e)\n        {\n            EventLogger.logEvent(\"window_File_Drop\");\n            if (e.Data.GetDataPresent(DataFormats.FileDrop))\n            {\n\n                string[] files = (string[])e.Data.GetData(DataFormats.FileDrop);\n\n\n\n                handleFileOpenAsync(files[0]);\n            }\n            else\n            {\n                showError(R.FILE_DROP_ERROR_MESSAGE);\n            }\n        }\n\n#endregion\n\n#endregion\n\n#region Helper Functions\n\n        private string constructOpenFileDialogFilterString(Dictionary<string, string> dict)\n        {\n            return string.Join(\"|\", dict.Select(x => string.Join(\"|\", string.Format(\"{0} ({1})\", x.Value, x.Key), x.Key)));\n        }\n\n        public async void handleFileOpenAsync(string? fileName)\n        {\n            if(string.IsNullOrWhiteSpace(fileName)) { return; }\n            if (!File.Exists(fileName))\n            {\n                showError(R.FILE_DOESNT_EXIST_ERROR_MESSAGE);\n                return;\n            }\n            showBusyIndicator();\n            string extension = Path.GetExtension(fileName!);\n            EventLogger.logEvent(\"handleFileOpenAsync\", new Dictionary<string, object>() { { \"extension\", extension } });\n            await _model.handleFileOpenAsync(fileName!);\n            updateTitleUI();\n            refreshRecentFilesList();\n            closeBusyIndicator();\n        }\n\n        private async void handleFileSaveAsync(string? fileName)\n        {\n            if (_model.profileModel.profile.value == null || string.IsNullOrWhiteSpace(fileName)) { return; }\n            showBusyIndicator();\n            string extension = Path.GetExtension(fileName!);\n            EventLogger.logEvent(\"handleFileSaveAsync\", new Dictionary<string, object>() { { \"extension\", extension } });\n            await _model.handleFileSaveAsync(fileName!, _model.profileModel.profile.value!);\n            updateTitleUI();\n            refreshRecentFilesList();\n            closeBusyIndicator();\n        }\n\n        private void showBusyIndicator()\n        {\n            closeBusyIndicator();\n\n            _busyWindow = WindowFactory.createBusyWindow();\n            _busyWindow.Owner = this;\n            _busyWindow.Show();\n        }\n\n        private void closeBusyIndicator()\n        {\n            if (_busyWindow != null)\n            {\n                _busyWindow!.Close();\n                _busyWindow = null;\n            }\n        }\n\n        private void showError(string message)\n        {\n            EventLogger.logEvent(\"showError\", new Dictionary<string, object>() { { \"message\", message } });\n            MessageBox.Show(message, R.ERROR);\n            closeBusyIndicator();\n        }\n\n#endregion\n    }\n}\n\n'MCDSaveEdit/MCDSaveEdit/ViewModels/ProfileViewModel.cs'\n:using MCDSaveEdit.Data;\nusing MCDSaveEdit.Save.Models.Profiles;\nusing MCDSaveEdit.Services;\nusing System.Collections.Generic;\nusing System.Linq;\n#nullable enable\n\nnamespace MCDSaveEdit.ViewModels\n{\n    public class ProfileViewModel\n    {\n        public static readonly Dictionary<string, string> supportedFileTypesDict = new Dictionary<string, string>\n        {\n            {\"*\" + Constants.ENCRYPTED_FILE_EXTENSION, R.ENCRYPTED_CHARACTER_SAVE_FILES },\n            {\"*\" + Constants.DECRYPTED_FILE_EXTENSION, R.DECRYPTED_CHARACTER_SAVE_FILES },\n            {\"*.*\", R.ALL_FILES },\n        };\n\n        public MainEquipmentViewModel mainEquipmentModel;\n        public StorageChestEquipmentViewModel storageChestEquipmentModel;\n\n        public string? filePath { get; set; }\n\n        private Property<ProfileSaveFile?> _profile = new Property<ProfileSaveFile?>(null);\n        public IReadWriteProperty<ProfileSaveFile?> profile { get { return _profile; } }\n\n        public IReadWriteProperty<bool?> unlockPortal;\n        public IReadWriteProperty<ulong?> emeralds;\n        public IReadWriteProperty<ulong?> gold;\n        public IReadWriteProperty<ulong?> eyeOfEnder;\n\n        public ProfileViewModel()\n        {\n            mainEquipmentModel = new MainEquipmentViewModel(_profile);\n            storageChestEquipmentModel = new StorageChestEquipmentViewModel(_profile);\n\n            emeralds = _profile.map<ProfileSaveFile?, ulong?>(\n               p => p?.Currency.FirstOrDefault(c => c.Type == Constants.EMERALD_CURRENCY_NAME)?.Count,\n               (p, value) => {\n                   if (p == null || value == null) { return; }\n                   Currency currency = p!.Currency.FirstOrDefault(c => c.Type == Constants.EMERALD_CURRENCY_NAME) ?? new Currency() { Type = Constants.EMERALD_CURRENCY_NAME };\n                   currency.Count = value.Value;\n                   p!.Currency = (new[] { currency }).Concat(p!.Currency.Where(c => c.Type != Constants.EMERALD_CURRENCY_NAME)).OrderBy(c => c.Type).ToArray();\n               });\n\n            gold = _profile.map<ProfileSaveFile?, ulong?>(\n               p => p?.Currency.FirstOrDefault(c => c.Type == Constants.GOLD_CURRENCY_NAME)?.Count,\n               (p, value) => {\n                   if (p == null || value == null) { return; }\n                   Currency currency = p!.Currency.FirstOrDefault(c => c.Type == Constants.GOLD_CURRENCY_NAME) ?? new Currency() { Type = Constants.GOLD_CURRENCY_NAME };\n                   currency.Count = value.Value;\n                   p!.Currency = (new[] { currency }).Concat(p!.Currency.Where(c => c.Type != Constants.GOLD_CURRENCY_NAME)).OrderBy(c => c.Type).ToArray();\n               });\n\n            eyeOfEnder = _profile.map(\n                p => p?.Currency.FirstOrDefault(c => c.Type == Constants.EYE_OF_ENDER_CURRENCY_NAME)?.Count,\n                (p, value) => {\n                    if (p == null || value == null) { return; }\n\n                    Currency currency =\n                        p.Currency.FirstOrDefault(c => c.Type == Constants.EYE_OF_ENDER_CURRENCY_NAME) ??\n                        new Currency { Type = Constants.EYE_OF_ENDER_CURRENCY_NAME };\n                    currency.Count = value.Value;\n                    p.Currency = (new[] { currency })\n                        .Concat(p.Currency.Where(c => c.Type != Constants.EYE_OF_ENDER_CURRENCY_NAME))\n                        .OrderBy(c => c.Type).ToArray();\n                });\n\n            unlockPortal = _profile.map(p =>\n                p?.StrongholdProgess?.Where(x => x.Key.EndsWith(\"Unlocked\")).All(x => x.Value),\n                (p, value) => {\n                    if (p == null || value == null) { return; }\n\n                    p.StrongholdProgess = p.StrongholdProgess?\n                        .ToDictionary(x => x.Key, x => x.Key.EndsWith(\"Unlocked\") ? value.Value : x.Value);\n                });\n\n        }\n\n    }\n}\n\n'MCDSaveEdit/MCDSaveEdit/App.xaml.cs'\n:﻿using MCDSaveEdit.Data;\nusing MCDSaveEdit.Save.Models.Profiles;\nusing MCDSaveEdit.Services;\nusing MCDSaveEdit.UI;\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.Windows;\nusing System.Windows.Threading;\n#nullable enable\n\nnamespace MCDSaveEdit\n{\n\n\n\n    public partial class App : Application, IDisposable\n    {\n        private readonly AppModel _model = new AppModel();\n        private readonly MultiTextWriter _outputWriter = new MultiTextWriter();\n\n        private ControlWriter? _controlWriter = null;\n        private SplashWindow? _splashWindow = null;\n        private Window? _busyWindow = null;\n\n        protected override void OnStartup(StartupEventArgs e)\n        {\n            base.OnStartup(e);\n            _outputWriter.addWriter(Console.Out);\n            Console.SetOut(_outputWriter);\n\n            EventLogger.init();\n\n            showSplashWindowReplacingOldWindow();\n\n            var args = e.Args;\n            _ = Application.Current?.Dispatcher.Invoke(DispatcherPriority.Background, new ThreadStart(delegate {\n                startAsync(args);\n            }));\n        }\n\n        private async void startAsync(string[] args)\n        {\n            MainThreadConsoleWriteLine($\"{Constants.APPLICATION_NAME} {Constants.CURRENT_VERSION}\");\n\n            string? fileName = args.LastOrDefault();\n            if(!string.IsNullOrWhiteSpace(fileName) && File.Exists(fileName))\n            {\n                string extension = Path.GetExtension(fileName!);\n                EventLogger.logEvent(\"handleFileOpenAsync\", new Dictionary<string, object>() { { \"extension\", extension } });\n                await _model.mainModel.handleFileOpenAsync(fileName!);\n            }\n\n            bool skipGameContent = args.Contains(\"SKIP_GAME_CONTENT\");\n            if (skipGameContent)\n            {\n                showMainWindow();\n            }\n            else\n            {\n                bool askForGameContentLocation = args.Contains(\"ASK_FOR_GAME_CONTENT_LOCATION\");\n                await loadAsync(askForGameContentLocation);\n            }\n        }\n\n        protected override void OnExit(ExitEventArgs e)\n        {\n            EventLogger.dispose();\n            _outputWriter.Dispose();\n            base.OnExit(e);\n        }\n\n        private async Task loadAsync(bool askForGameContentLocation)\n        {\n            MainThreadConsoleWriteLine(\"Searching for pak files...\");\n            bool canContinue = true;\n\n            string? paksFolderPath = _model.usableGameContentIfExists();\n            if (askForGameContentLocation || string.IsNullOrWhiteSpace(paksFolderPath))\n            {\n\n                canContinue = showGameFilesWindow(ref paksFolderPath);\n            }\n\n            if (!string.IsNullOrWhiteSpace(paksFolderPath))\n            {\n                MainThreadConsoleWriteLine($\"Pak files path: {paksFolderPath}\");\n                try\n                {\n                    await loadGameContentAsync(paksFolderPath!);\n                }\n                catch (Exception e)\n                {\n\n                    _model.unloadGameContent();\n\n                    var title = $\"{Constants.APPLICATION_NAME} {Constants.CURRENT_VERSION} - {R.ERROR}\";\n                    var message = $\"{R.FAILED_TO_LOAD_GAME_CONTENT_ERROR_TITLE}\\n\\n{e.Message}\\n\\n{R.PLEASE_HAVE_LATEST_VERSION}\\n\\n{R.LAUNCH_WITH_LIMITED_FEATURES_QUESTION}\";\n                    var result = MessageBox.Show(message, title, MessageBoxButton.YesNo);\n                    canContinue = result == MessageBoxResult.Yes || result == MessageBoxResult.OK;\n                }\n            }\n            else\n            {\n\n                _model.unloadGameContent();\n            }\n\n            if (canContinue == false)\n            {\n\n                _splashWindow?.Close();\n                closeBusyIndicator();\n                this.MainWindow?.Close();\n                this.Shutdown();\n                return;\n            }\n\n            showMainWindow();\n        }\n\n        private void MainThreadConsoleWriteLine(string str)\n        {\n            this.ExecuteOnMainThread(delegate {\n                Console.WriteLine(str);\n            });\n        }\n\n        private bool showGameFilesWindow(ref string? selectedPath)\n        {\n            EventLogger.logEvent(\"showGameFilesWindow\");\n            var gameFilesWindow = WindowFactory.createGameFilesWindow(selectedPath, allowNoContent: true);\n            gameFilesWindow.ShowDialog();\n            var gameFilesWindowResult = gameFilesWindow.result;\n            switch (gameFilesWindowResult)\n            {\n                case GameFilesWindow.GameFilesWindowResult.exit:\n                    selectedPath = null;\n                    return false;\n                case GameFilesWindow.GameFilesWindowResult.useSelectedPath:\n                    selectedPath = gameFilesWindow.selectedPath!;\n                    return true;\n                case GameFilesWindow.GameFilesWindowResult.noContent:\n                    selectedPath = null;\n                    return true;\n            }\n            throw new NotImplementedException();\n        }\n\n        private async Task<bool> loadGameContentAsync(string paksFolderPath)\n        {\n            showBusyIndicator();\n            _model.initPakReader();\n            await _model.loadGameContentAsync(paksFolderPath);\n            await preloadImages();\n            return true;\n        }\n\n        private Task<bool> preloadImages()\n        {\n            var tcs = new TaskCompletionSource<bool>();\n            Task.Run(() => {\n                MainThreadConsoleWriteLine(\"Loading UI images...\");\n                InventoryTab.preload();\n                EquipmentScreen.preload();\n                ItemListScreen.preload();\n                ItemControl.preload();\n#if !HIDE_CHEST_TAB\n                MainThreadConsoleWriteLine(\"Loading Chest images...\");\n                ChestTab.preload();\n#endif\n\n                MainThreadConsoleWriteLine(\"Loading Equipment images...\");\n                BaseSelectionWindow.preload();\n\n                tcs.SetResult(true);\n            });\n            return tcs.Task;\n        }\n\n        private void showMainWindow()\n        {\n            EventLogger.logEvent(\"showMainWindow\", new Dictionary<string, object>() { { \"gameContentLoaded\", AppModel.gameContentLoaded.ToString() } });\n            MainThreadConsoleWriteLine(\"Loading Done\");\n            var mainWindow = WindowFactory.createMainWindow(_model.mainModel);\n            mainWindow.onRelaunch = onRelaunch;\n            mainWindow.onReload = onReload;\n            this.MainWindow = mainWindow;\n\n            _splashWindow?.Close();\n            closeBusyIndicator();\n\n            this.MainWindow.Show();\n        }\n\n        private void onRelaunch()\n        {\n            showSplashWindowReplacingOldWindow();\n            _ = loadAsync(askForGameContentLocation: true);\n        }\n\n        private void onReload(string? autoReloadFilename, ProfileSaveFile? profile)\n        {\n            var oldMainWindow = this.MainWindow;\n            var mainWindow = WindowFactory.createMainWindow(_model.mainModel);\n            mainWindow.onRelaunch = onRelaunch;\n            mainWindow.onReload = onReload;\n            this.MainWindow = mainWindow;\n            oldMainWindow?.Close();\n            this.MainWindow.Show();\n\n            if (!string.IsNullOrWhiteSpace(autoReloadFilename))\n            {\n                if(profile != null)\n                {\n                    _model.mainModel.setProfile(autoReloadFilename!, profile);\n                }\n                else\n                {\n                    mainWindow.handleFileOpenAsync(autoReloadFilename!);\n                }\n            }\n        }\n\n        private void showSplashWindowReplacingOldWindow()\n        {\n            if(_controlWriter != null)\n            {\n                _outputWriter.removeWriter(_controlWriter);\n                _controlWriter.Close();\n            }\n\n            var oldMainWindow = this.MainWindow;\n            _splashWindow = WindowFactory.createSplashWindow();\n            _controlWriter = new ControlWriter(_splashWindow.textbox);\n            this.ExecuteOnMainThreadWithNonnullThis(nonnullThis => {\n                if(nonnullThis._controlWriter != null)\n                    nonnullThis._outputWriter.addWriter(nonnullThis._controlWriter);\n            });\n\n            MainWindow = _splashWindow;\n            oldMainWindow?.Close();\n            this.MainWindow.Show();\n        }\n\n        private void showBusyIndicator()\n        {\n            closeBusyIndicator();\n\n            _busyWindow = WindowFactory.createBusyWindow();\n            _busyWindow.Show();\n        }\n\n        private void closeBusyIndicator()\n        {\n            if (_busyWindow != null)\n            {\n                _busyWindow!.Close();\n                _busyWindow = null;\n            }\n        }\n\n#region Dispose\n\n\n        private bool _disposed = false;\n\n        ~App()\n        {\n            Dispose(true);\n        }\n\n        public void Dispose()\n        {\n\n            Dispose(true);\n\n            GC.SuppressFinalize(this);\n        }\n\n        protected virtual void Dispose(bool disposing)\n        {\n            if (_disposed)\n            {\n                return;\n            }\n\n            if (disposing)\n            {\n\n                _outputWriter.Dispose();\n                _controlWriter?.Dispose();\n            }\n\n\n\n\n            _disposed = true;\n        }\n\n#endregion\n    }\n}\n",
        "gt": [
            "'MCDSaveEdit/MCDSaveEdit/ViewModels/ProfileViewModel.cs'",
            "'MCDSaveEdit/MCDSaveEdit/UI/Windows/MainWindow.xaml.cs'",
            "'MCDSaveEdit/MCDSaveEdit/App.xaml.cs'"
        ]
    },
    {
        "files": [
            "'SharpPulsar/src/SharpPulsar/Builder/ProducerConfigBuilder.cs'",
            "'SharpPulsar/src/SharpPulsar/Extension/ListPartition.cs'",
            "'SharpPulsar/src/SharpPulsar/Interfaces/IConsumerInterceptor.cs'",
            "'SharpPulsar/src/SharpPulsar.Test/TokenTests.cs'"
        ],
        "content": "'SharpPulsar/src/SharpPulsar/Builder/ProducerConfigBuilder.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing SharpPulsar.Messages;\n\nusing SharpPulsar.Batch.Api;\nusing SharpPulsar.Interfaces.Interceptor;\n\nusing SharpPulsar.Interfaces;\nusing SharpPulsar.Common;\nusing SharpPulsar.Protocol.Proto;\n\n\nusing SharpPulsar.Extension;\nusing SharpPulsar.Configuration;\nusing SharpPulsar.Common.Compression;\nusing SharpPulsar.Crypto;\nusing SharpPulsar.Precondition;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnamespace SharpPulsar.Builder\n{\n\n    public class ProducerConfigBuilder<T>\n    {\n        private ProducerConfigurationData _conf = new ProducerConfigurationData();\n        private ISchema<T> _schema;\n        private List<IProducerInterceptor<T>> _interceptorList;\n\n        public virtual ProducerConfigurationData Build()\n        {\n            return _conf;\n        }\n        public ProducerConfigBuilder<T> LoadConf(IDictionary<string, object> config)\n        {\n            _conf = (ProducerConfigurationData)ConfigurationDataUtils.LoadData(config, _conf);\n            return this;\n        }\n        public ProducerConfigBuilder<T> EventListener(IProducerEventListener listener)\n        {\n            if (listener == null)\n                throw new ArgumentException(\"listener is null\");\n            _conf.ProducerEventListener = listener;\n            return this;\n        }\n\n\n\n\n\n        public ProducerConfigBuilder<T> ChunkMaxMessageSize(int max)\n        {\n            if (max < 1)\n                throw new ArgumentException(\"max should be > 0\");\n            _conf.ChunkMaxMessageSize = max;\n            return this;\n        }\n        public ProducerConfigBuilder<T> Topic(string topicName)\n        {\n            if (string.IsNullOrWhiteSpace(topicName))\n                throw new ArgumentException(\"topicName cannot be blank or null\");\n            _conf.TopicName = topicName.Trim();\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> ProducerName(string producerName)\n        {\n            _conf.ProducerName = producerName;\n            return this;\n        }\n        public ProducerConfigBuilder<T> AccessMode(Common.ProducerAccessMode accessMode)\n        {\n            _conf.AccessMode = accessMode;\n            return this;\n        }\n        public ProducerConfigBuilder<T> EnableBatching(bool enableBatching)\n        {\n            _conf.BatchingEnabled = enableBatching;\n            return this;\n        }\n\n\n\n\n\n        public ProducerConfigBuilder<T> SetAckReceivedListerner(Action<AckReceived> listerner)\n        {\n            if (!_conf.BatchingEnabled)\n                throw new InvalidOperationException(\"AckReceived Listerner is only allowed for batched producer!\");\n\n            _conf.AckReceivedListerner = listerner;\n            return this;\n        }\n        public ProducerConfigBuilder<T> BatchBuilder(IBatcherBuilder builder)\n        {\n            _conf.BatcherBuilder = builder;\n            return this;\n        }\n        public ProducerConfigBuilder<T> BatchingMaxPublishDelay(TimeSpan batchDelay)\n        {\n            _conf.SetBatchingMaxPublishDelayMs(batchDelay);\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> BatchingMaxMessages(int batchingMaxMessages)\n        {\n            _conf.BatchingMaxMessages = batchingMaxMessages;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> SendTimeout(TimeSpan sendTimeoutMs)\n        {\n            _conf.SetSendTimeoutMs(sendTimeoutMs);\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> MaxPendingMessages(int maxPendingMessages)\n        {\n            _conf.MaxPendingMessages = maxPendingMessages;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> MaxPendingMessagesAcrossPartitions(int maxPendingMessagesAcrossPartitions)\n        {\n            _conf.MaxPendingMessagesAcrossPartitions = maxPendingMessagesAcrossPartitions;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> EnableChunking(bool chunk)\n        {\n            _conf.ChunkingEnabled = chunk;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> MessageRoutingMode(MessageRoutingMode messageRouteMode)\n        {\n            _conf.MessageRoutingMode = messageRouteMode;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> CompressionType(CompressionType compressionType)\n        {\n            _conf.CompressionType = compressionType;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> HashingScheme(HashingScheme hashingScheme)\n        {\n            _conf.HashingScheme = hashingScheme;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> CryptoKeyReader(ICryptoKeyReader cryptoKeyReader)\n        {\n            _conf.CryptoKeyReader = cryptoKeyReader;\n            return this;\n        }\n        public ProducerConfigBuilder<T> DefaultCryptoKeyReader(string publicKey)\n        {\n            Condition.CheckArgument(!string.IsNullOrWhiteSpace(publicKey), \"publicKey cannot be blank\");\n            return CryptoKeyReader(Crypto.DefaultCryptoKeyReader.Builder().DefaultPublicKey(publicKey).Build());\n        }\n        public ProducerConfigBuilder<T> DefaultCryptoKeyReader(IDictionary<string, string> publicKeys)\n        {\n            Condition.CheckArgument(publicKeys.Count > 0, \"publicKeys cannot be empty\");\n            return CryptoKeyReader(Crypto.DefaultCryptoKeyReader.Builder().PublicKeys(publicKeys).Build());\n        }\n        public ProducerConfigBuilder<T> MessageCrypto(MessageCrypto messageCrypto)\n        {\n            _conf.MessageCrypto = messageCrypto;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> AddEncryptionKey(string key)\n        {\n            if (string.IsNullOrWhiteSpace(key))\n                throw new ArgumentException(\"Encryption key cannot be blank or null\");\n            _conf.EncryptionKeys.Add(key);\n            return this;\n        }\n\n\n\n\n\n\n\n\n\n        public ProducerConfigBuilder<T> InitialSubscriptionName(string initialSubscriptionName)\n        {\n            _conf.InitialSubscriptionName = initialSubscriptionName;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> CryptoFailureAction(ProducerCryptoFailureAction action)\n        {\n            _conf.CryptoFailureAction = action;\n            return this;\n        }\n\n\n        public ProducerConfigBuilder<T> InitialSequenceId(long initialSequenceId)\n        {\n            _conf.InitialSequenceId = initialSequenceId;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> Property(string key, string value)\n        {\n            if (string.IsNullOrWhiteSpace(key))\n                throw new ArgumentException(\"property key cannot be blank or null\");\n            if (string.IsNullOrWhiteSpace(value))\n                throw new ArgumentException(\"property value cannot be blank or null\");\n            _conf.Properties.Add(key, value);\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> Properties(IDictionary<string, string> properties)\n        {\n            if (properties == null)\n                throw new ArgumentException(\"properties cannot be null\");\n            if (properties.Count == 0)\n                throw new ArgumentException(\"properties cannot be empty\");\n            properties.SetOfKeyValuePairs().ToList().ForEach(entry =>\n            {\n                var (key, value) = entry;\n                if (string.IsNullOrWhiteSpace(key) || string.IsNullOrWhiteSpace(value))\n                {\n                    throw new ArgumentException(\"properties' key/value cannot be blank\");\n                }\n\n                _conf.Properties.Add(key, value);\n            });\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> Schema(ISchema<T> schema)\n        {\n            if (schema == null)\n                throw new ArgumentException(\"Schema is null\");\n            _schema = schema;\n            return this;\n        }\n\n        public ProducerConfigBuilder<T> Intercept(params IProducerInterceptor<T>[] interceptors)\n        {\n            if (_interceptorList == null)\n            {\n                _interceptorList = new List<IProducerInterceptor<T>>();\n            }\n            _interceptorList.AddRange(interceptors);\n            return this;\n        }\n        public ProducerConfigBuilder<T> AutoUpdatePartitions(bool autoUpdate)\n        {\n            _conf.AutoUpdatePartitions = autoUpdate;\n            return this;\n        }\n        public ProducerConfigBuilder<T> AutoUpdatePartitionsInterval(TimeSpan interval)\n        {\n            _conf.SetAutoUpdatePartitionsIntervalSeconds(interval);\n            return this;\n        }\n\n        public List<IProducerInterceptor<T>> GetInterceptors => _interceptorList;\n\n        public ISchema<T> GetSchema => _schema;\n\n        public ProducerConfigBuilder<T> EnableMultiSchema(bool multiSchema)\n        {\n            _conf.MultiSchema = multiSchema;\n            return this;\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        public ProducerConfigBuilder<T> EnableLazyStartPartitionedProducers(bool lazyStartPartitionedProducers)\n        {\n            _conf.LazyStartPartitionedProducers =  lazyStartPartitionedProducers;\n            return this;\n        }\n        public override string ToString()\n        {\n            return _conf?.ToString();\n        }\n\n    }\n\n    public interface IProducerEventListener\n    {\n        public void MessageSent(SentReceipt receipt);\n        public void Log(object log);\n    }\n}\n'SharpPulsar/src/SharpPulsar/Extension/ListPartition.cs'\n:﻿using System.Collections.Generic;\nusing System.Collections.Immutable;\nusing System.Linq;\nusing SharpPulsar.Messages;\nusing SharpPulsar.Interfaces;\n\nnamespace SharpPulsar.Extension\n{\n    internal static class ListPartition\n    {\n        public static IEnumerable<IList<MessageIdAdv>> PartitionMessageId(this IList<IMessageId> source, int chunkSize)\n        {\n            return source\n                .Select((x, i) => new { Index = i, Value = (MessageIdAdv)x })\n                .GroupBy(x => x.Index / chunkSize)\n                .Select(x => x.Select(v => v.Value).ToList())\n                .ToList();\n        }\n        public static IEnumerable<IList<TopicMessageId>> Collect(this IEnumerable<TopicMessageId> source)\n        {\n            return source\n                .GroupBy(x => x.TopicPartitionName)\n                .Select(x => x.Select(v => v).ToList())\n                .ToList();\n        }\n        public static List<List<MessageIdAdv>> PartitionMessageId(this ISet<IMessageId> source, int chunkSize)\n        {\n            return source\n                .Select((x, i) => new { Index = i, Value = (MessageIdAdv)x })\n                .GroupBy(x => chunkSize)\n                .Select(x => x.Select(v => v.Value).ToList())\n                .ToList();\n        }\n        public static List<List<Unacked>> PartitionMessageId(this ImmutableHashSet<Unacked> source)\n        {\n            return source\n                .Select((x, i) => new { Index = i, Value = x })\n                .GroupBy(x => x.Value.PartitionIndex)\n                .Select(x => x.Select(v => v.Value).ToList())\n                .ToList();\n        }\n        public static ISet<IMessageId> RemoveMessageId(this LinkedList<HashSet<IMessageId>> source, int chunkSize)\n        {\n            var first = source.First;\n            source.RemoveFirst();\n            return first.Value;\n        }\n    }\n}\n\n'SharpPulsar/src/SharpPulsar/Interfaces/IConsumerInterceptor.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing Akka.Actor;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nnamespace SharpPulsar.Interfaces\n{\n\n\n\n\n\n\n\n\n\n\n\n\n\n    public interface IConsumerInterceptor<T>: IDisposable\n\t{\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\t\tIMessage<T> BeforeConsume(IActorRef consumer, IMessage<T> message);\n\n\n\n\n\n\n\n\n\n\n\n\t\tvoid OnAcknowledge(IActorRef consumer, IMessageId messageId, Exception exception);\n\n\n\n\n\n\n\n\n\n\n\n\t\tvoid OnAcknowledgeCumulative(IActorRef consumer, IMessageId messageId, Exception exception);\n\n\n\n\n\n\n\n\n\n\n\t\tvoid OnNegativeAcksSend(IActorRef consumer, ISet<IMessageId> messageIds);\n\n\n\n\n\n\n\n\n\n\n\t\tvoid OnAckTimeoutSend(IActorRef consumer, ISet<IMessageId> messageIds);\n\n\n\n\n\n\n\t\tvoid OnPartitionsChange(string topicName, int partitions)\n        {\n        }\n\n    }\n\n}\n'SharpPulsar/src/SharpPulsar.Test/TokenTests.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing SharpPulsar.Auth;\nusing SharpPulsar.Builder;\nusing SharpPulsar.Interfaces;\nusing SharpPulsar.Schemas;\nusing SharpPulsar.Test.Fixture;\nusing SharpPulsar.TestContainer;\nusing Xunit;\nusing Xunit.Abstractions;\n\nnamespace SharpPulsar.Test\n{\n    [Collection(nameof(PulsarCollection))]\n    public class TokenTests : IDisposable\n    {\n        private readonly CancellationTokenSource _cts;\n        private readonly ITestOutputHelper _output;\n        private PulsarSystem _system;\n        private PulsarClientConfigBuilder _configBuilder;\n        private PulsarFixture _fixture;\n        public TokenTests(ITestOutputHelper output, PulsarFixture fixture)\n        {\n            _cts = new CancellationTokenSource(TimeSpan.FromMinutes(1));\n            _fixture = fixture;\n            _output = output;\n            _system = fixture.System;\n        }\n\n        [Fact]\n        public virtual async Task Token_ProducerInstantiation()\n        {\n            var c = await CreateCient();\n            var client = await _system.NewClient(c.builder);\n            var producer = new ProducerConfigBuilder<string>();\n            producer.Topic(c.topic);\n            var stringProducerBuilder = await client!.NewProducerAsync(new StringSchema(), producer);\n            Assert.NotNull(stringProducerBuilder);\n            await stringProducerBuilder.CloseAsync();\n\n        }\n        [Fact]\n        public virtual async Task Token_ConsumerInstantiation()\n        {\n            var c = await CreateCient();\n            var client = await _system.NewClient(c.builder);\n            var consumer = new ConsumerConfigBuilder<string>();\n            consumer.Topic(c.topic);\n            consumer.SubscriptionName($\"token-test-sub-{Guid.NewGuid()}\");\n            var stringConsumerBuilder = await client!.NewConsumerAsync(new StringSchema(), consumer);\n            Assert.NotNull(stringConsumerBuilder);\n            await stringConsumerBuilder.CloseAsync();\n\n        }\n        [Fact]\n        public virtual async Task Token_ReaderInstantiation()\n        {\n            var c = await CreateCient();\n            var client = await _system.NewClient(c.builder);\n            var reader = new ReaderConfigBuilder<string>();\n            reader.Topic(c.topic);\n            reader.StartMessageId(IMessageId.Earliest);\n            var stringReaderBuilder = await client!.NewReaderAsync(new StringSchema(), reader);\n            Assert.NotNull(stringReaderBuilder);\n            await stringReaderBuilder.CloseAsync();\n\n        }\n\n        [Fact]\n        public async Task Token_ProduceAndConsume()\n        {\n            var c = await CreateCient();\n            var client = await _system.NewClient(c.builder);\n\n            var r = new Random(0);\n            var byteKey = new byte[1000];\n            r.NextBytes(byteKey);\n\n            var producerBuilder = new ProducerConfigBuilder<byte[]>();\n            producerBuilder.Topic(c.topic);\n            var producer = await client!.NewProducerAsync(producerBuilder);\n\n            await producer.NewMessage().KeyBytes(byteKey)\n               .Properties(new Dictionary<string, string> { { \"KeyBytes\", Encoding.UTF8.GetString(byteKey) } })\n               .Value(Encoding.UTF8.GetBytes(\"TestMessage\"))\n               .SendAsync();\n\n            var consumerBuilder = new ConsumerConfigBuilder<byte[]>()\n                .Topic(c.topic)\n\n                .SubscriptionInitialPosition(Common.SubscriptionInitialPosition.Earliest)\n                .SubscriptionName($\"ByteKeysTest-subscriber-{Guid.NewGuid()}\");\n            var consumer = await client.NewConsumerAsync(consumerBuilder);\n\n            await Task.Delay(TimeSpan.FromSeconds(10));\n            var message = (Message<byte[]>)await consumer.ReceiveAsync();\n\n            if (message != null)\n                _output.WriteLine($\"BrokerEntryMetadata[timestamp:{message.BrokerEntryMetadata?.BrokerTimestamp} index: {message.BrokerEntryMetadata?.Index.ToString()}\");\n\n            Assert.Equal(byteKey, message!.KeyBytes);\n\n            Assert.True(message.HasBase64EncodedKey());\n            var receivedMessage = Encoding.UTF8.GetString(message.Data);\n            _output.WriteLine($\"Received message: [{receivedMessage}]\");\n            Assert.Equal(\"TestMessage\", receivedMessage);\n\n            await consumer.CloseAsync();\n\n        }\n        [Fact]\n        public async Task Token_ProduceAndConsumeBatch()\n        {\n            var c = await CreateCient();\n            var client = await _system.NewClient(c.builder);\n            var r = new Random(0);\n            var byteKey = new byte[1000];\n            r.NextBytes(byteKey);\n\n            var consumerBuilder = new ConsumerConfigBuilder<byte[]>()\n                .Topic(c.topic)\n                .ForceTopicCreation(true)\n                .SubscriptionName($\"Batch-subscriber-{Guid.NewGuid()}\");\n            var consumer = await client!.NewConsumerAsync(consumerBuilder);\n\n\n            var producerBuilder = new ProducerConfigBuilder<byte[]>()\n                .Topic(c.topic)\n                .SendTimeout(TimeSpan.FromMilliseconds(10000))\n                .EnableBatching(true)\n                .BatchingMaxPublishDelay(TimeSpan.FromMilliseconds(120000))\n                .BatchingMaxMessages(5);\n\n            var producer = await client.NewProducerAsync(producerBuilder);\n\n            for (var i = 0; i < 5; i++)\n            {\n                var id = await producer.NewMessage().KeyBytes(byteKey)\n                   .Properties(new Dictionary<string, string> { { \"KeyBytes\", Encoding.UTF8.GetString(byteKey) } })\n                   .Value(Encoding.UTF8.GetBytes($\"TestMessage-{i}\"))\n                   .SendAsync();\n                if (id == null)\n                    _output.WriteLine($\"Id is null\");\n                else\n                    _output.WriteLine($\"Id: {id}\");\n            }\n            producer.Flush();\n            await Task.Delay(TimeSpan.FromSeconds(10));\n            for (var i = 0; i < 5; i++)\n            {\n                var message = (Message<byte[]>)await consumer.ReceiveAsync();\n                if (message != null)\n                    _output.WriteLine($\"BrokerEntryMetadata[timestamp:{message.BrokerEntryMetadata.BrokerTimestamp} index: {message.BrokerEntryMetadata?.Index.ToString()}\");\n\n                Assert.Equal(byteKey, message?.KeyBytes);\n                Assert.True(message?.HasBase64EncodedKey());\n                var receivedMessage = Encoding.UTF8.GetString(message!.Data);\n                _output.WriteLine($\"Received message: [{receivedMessage}]\");\n                Assert.Equal($\"TestMessage-{i}\", receivedMessage);\n            }\n\n            await producer.CloseAsync();\n            await consumer.CloseAsync();\n\n        }\n\n        private async Task<string> CreateToken()\n        {\n            var token = await _fixture.Container!.ExecAsync(new List<string> { @\"./bin/pulsar\", \"tokens\", \"create\", \"--secret-key\", \"/pulsar/secret.key\", \"--subject\", \"test-user\" });\n            return token.Stdout;\n        }\n        private async ValueTask<(PulsarClientConfigBuilder builder, string topic)> CreateCient()\n        {\n            var client = new PulsarClientConfigBuilder();\n            var serviceUrl = \"pulsar:\n\n            client.ServiceUrl(serviceUrl);\n\n\n            client.Authentication(AuthenticationFactory.Token(await CreateToken()));\n            client.ServiceUrl(serviceUrl);\n\n            _configBuilder = client;\n            var topic = $\"persistent:\n            return (client, topic);\n        }\n        public void Dispose() => _cts.Dispose();\n    }\n}\n",
        "gt": [
            "'SharpPulsar/src/SharpPulsar/Interfaces/IConsumerInterceptor.cs'",
            "'SharpPulsar/src/SharpPulsar/Extension/ListPartition.cs'",
            "'SharpPulsar/src/SharpPulsar/Builder/ProducerConfigBuilder.cs'",
            "'SharpPulsar/src/SharpPulsar.Test/TokenTests.cs'"
        ]
    },
    {
        "files": [
            "'OpenC1/OpenC1/Physics/VehicleChassis.cs'",
            "'OpenC1/OpenC1/Parsers/Funks/WindscreenFunk.cs'",
            "'OpenC1/OpenC1/VehicleModel.cs'",
            "'OpenC1/OpenC1/SpecialVolume.cs'"
        ],
        "content": "'OpenC1/OpenC1/Physics/VehicleChassis.cs'\n:﻿using System;\nusing System.IO;\nusing System.Xml.Serialization;\nusing System.Collections.Generic;\nusing Microsoft.Xna.Framework;\nusing Microsoft.Xna.Framework.Graphics;\nusing StillDesign.PhysX;\nusing OneamEngine;\nusing OpenC1;\nusing OpenC1.Parsers;\nusing OneAmEngine;\n\nnamespace OpenC1.Physics\n{\n\n    class VehicleChassis\n    {\n        public Vehicle Vehicle { get; set; }\n        public Actor Actor { get { return _physXActor; } }\n        public List<VehicleWheel> Wheels {get; private set; }\n        public Motor Motor { get; private set; }\n\n        public bool Backwards {get; private set; }\n        public float Speed { get; private set; }\n\n        public CircularList LastSpeeds = new CircularList(5);\n\n        private Actor _physXActor;\n        float _currentTorque;\n        float _desiredSteerAngle = 0f;\n        float _handbrake;\n        public float _steerAngle = 0.0f;\n        float _motorTorque = 0.0f;\n        float _brakeTorque = 0.0f;\n        TireFunctionDescription _frontLateralTireFn, _rearLateralTireFn;\n        public float _heightOffset;\n        private Vector3 _massPos;\n\n\n        public VehicleChassis(Vehicle vehicle)\n        {\n            Vehicle = vehicle;\n\n            Wheels = new List<VehicleWheel>();\n\n            VehicleFile carFile = vehicle.Config;\n\n            ActorDescription actorDesc = new ActorDescription();\n\n            actorDesc.BodyDescription = new BodyDescription();\n            actorDesc.BodyDescription.Mass = carFile.Mass;\n            var boxDesc = new BoxShapeDescription();\n            boxDesc.Size = carFile.BoundingBox.GetSize();\n            boxDesc.LocalPosition = carFile.BoundingBox.GetCenter();\n            boxDesc.Name = PhysXConsts.VehicleBody;\n            boxDesc.Flags |= ShapeFlag.PointContactForce;\n            actorDesc.Shapes.Add(boxDesc);\n\n            foreach (Vector3 extraPoint in carFile.ExtraBoundingBoxPoints)\n            {\n                var extraDesc = new SphereShapeDescription(0.2f);\n                extraDesc.LocalPosition = extraPoint;\n                extraDesc.Mass = 0;\n                actorDesc.Shapes.Add(extraDesc);\n            }\n\n            using (UtilitiesLibrary lib = new UtilitiesLibrary())\n            {\n                Vector3 size = carFile.Size;\n                Vector3 inertiaTensor = lib.ComputeBoxInteriaTensor(Vector3.Zero, carFile.Mass, size);\n\n            }\n\n\n            TireFunctionDescription lngTFD = new TireFunctionDescription();\n            lngTFD.ExtremumSlip = 0.1f;\n            lngTFD.ExtremumValue = 4f;\n            lngTFD.AsymptoteSlip = 2.0f;\n            lngTFD.AsymptoteValue = 3.2f;\n\n            _rearLateralTireFn = new TireFunctionDescription();\n\n            _rearLateralTireFn.ExtremumSlip = 0.2f;\n            _rearLateralTireFn.ExtremumValue = 2.1f;\n            _rearLateralTireFn.AsymptoteSlip = 0.0013f * carFile.Mass;\n            _rearLateralTireFn.AsymptoteValue = 0.02f;\n\n            _frontLateralTireFn = _rearLateralTireFn;\n            _frontLateralTireFn.ExtremumValue = 1.9f;\n\n            MaterialDescription md = new MaterialDescription();\n            md.Flags = MaterialFlag.DisableFriction;\n            Material m = PhysX.Instance.Scene.CreateMaterial(md);\n\n            int wheelIndex = 0;\n\n            foreach (CWheelActor wheel in carFile.WheelActors)\n            {\n                WheelShapeDescription wheelDesc = new WheelShapeDescription();\n                wheelDesc.InverseWheelMass = 0.08f;\n                wheelDesc.LongitudalTireForceFunction = lngTFD;\n                wheelDesc.Flags = WheelShapeFlag.ClampedFriction;\n                wheelDesc.Material = m;\n\n                wheelDesc.Radius = wheel.IsDriven ? carFile.DrivenWheelRadius : carFile.NonDrivenWheelRadius;\n                wheelDesc.SuspensionTravel = (wheel.IsFront ? carFile.SuspensionGiveFront : carFile.SuspensionGiveRear) * 18;\n\n                float heightModifier = (wheelDesc.SuspensionTravel + wheelDesc.Radius) / wheelDesc.SuspensionTravel;\n\n                SpringDescription spring = new SpringDescription();\n                if (carFile.Mass > 3000)\n                    spring.SpringCoefficient = 10.5f * heightModifier * carFile.Mass;\n                else\n                    spring.SpringCoefficient = 6.5f * heightModifier * Math.Min(1000, carFile.Mass);\n                spring.DamperCoefficient = carFile.SuspensionDamping * 6f;\n\n                wheelDesc.Suspension = spring;\n                wheelDesc.LocalPosition = wheel.Position;\n                wheelDesc.Name = (wheelIndex).ToString();\n                wheelIndex++;\n\n                wheelDesc.LateralTireForceFunction = wheel.IsFront ? _frontLateralTireFn : _rearLateralTireFn;\n                actorDesc.Shapes.Add(wheelDesc);\n            }\n\n            _physXActor = PhysX.Instance.Scene.CreateActor(actorDesc);\n\n\n            _heightOffset = _physXActor.Shapes[0].LocalPosition.Y * -2;\n            if (_heightOffset < 0) _heightOffset = 0;\n\n            foreach (Shape shape in _physXActor.Shapes)\n            {\n                shape.LocalPosition += new Vector3(0, _heightOffset, 0);\n                if (shape is WheelShape)\n                {\n                    wheelIndex = int.Parse(shape.Name);\n                    Wheels.Add(new VehicleWheel(this, carFile.WheelActors[wheelIndex], (WheelShape)shape, carFile.WheelActors[wheelIndex].IsLeft ? 0.17f : -0.17f) { Index = wheelIndex });\n                }\n            }\n\n            _physXActor.Group = PhysXConsts.VehicleId;\n            _physXActor.UserData = vehicle;\n\n            _physXActor.WakeUp(60.0f);\n\n\n\n\n            Vector3 massPos = carFile.CenterOfMass;\n            massPos.Y = carFile.WheelActors[0].Position.Y - carFile.NonDrivenWheelRadius + _heightOffset + 0.35f;\n            _massPos = massPos;\n            _physXActor.SetCenterOfMassOffsetLocalPosition(massPos);\n\n\n            List<float> power = new List<float>(new float[] { 0.5f, 0.5f, 0.5f, 1f, 1f, 1.0f, 1.0f, 0 });\n            List<float> ratios = new List<float>(new float[] { 3.227f, 2.360f, 1.685f, 1.312f, 1.000f, 0.793f });\n\n            BaseGearbox gearbox = BaseGearbox.Create(false, ratios, 0.4f);\n            Motor = new Motor(power, carFile.EnginePower, 6f, carFile.TopSpeed, gearbox);\n            Motor.Gearbox.CurrentGear = 0;\n        }\n\n\n\n\n\n        public void FixSuspension()\n        {\n            foreach (VehicleWheel wheel in this.Wheels)\n            {\n                Vector3 localPos = wheel.Shape.LocalPosition;\n                localPos.Y += wheel.CurrentSuspensionTravel;\n                wheel.Shape.LocalPosition = localPos;\n            }\n        }\n\n        public void Delete()\n        {\n            _physXActor.Dispose();\n            _physXActor = null;\n        }\n\n\n        public float SteerRatio\n        {\n            get { return _steerAngle / 0.5f; }\n        }\n\n\n        public void Update()\n        {\n            LastSpeeds.Add(Speed);\n\n            GameConsole.WriteLine(\"Height\", Actor.GlobalPosition.Y);\n\n\n\n\n\n\n\n            Vector3 vDirection = _physXActor.GlobalOrientation.Forward;\n            Vector3 vNormal = _physXActor.LinearVelocity * vDirection;\n            Speed = vNormal.Length() * 2.9f;\n\n            float endLocal = _desiredSteerAngle;\n\n            float diff = Math.Abs(endLocal - _steerAngle);\n            float max = 0.0017f;\n            if (diff > 0.0025f)\n            {\n\n                if (diff > max)\n                    diff = max;\n                else\n                    diff *= 0.05f;\n\n                diff *= Engine.ElapsedSeconds * 1000;\n                if (endLocal > _steerAngle)\n                {\n                    _steerAngle += diff;\n                }\n                else\n                {\n                    _steerAngle -= diff;\n                }\n\n\n                float steerFactor = Vehicle.Driver.ModerateSteeringAtSpeed ? Math.Min(Math.Max(0.1f, (1 - Speed / 175)), 1) : 1;\n\n                foreach (VehicleWheel wheel in Wheels)\n                {\n                    if (wheel.CActor.IsSteerable)\n                        wheel.Shape.SteeringAngle = _steerAngle * steerFactor;\n                }\n            }\n\n            if (Speed < 1f)\n            {\n                if (Backwards && _currentTorque > 0.01f)\n                {\n                    Backwards = false;\n                    Motor.Gearbox.CurrentGear = 1;\n                }\n                else if (!Backwards && _currentTorque < -0.01f)\n                {\n                    Backwards = true;\n                    Motor.Gearbox.CurrentGear = -1;\n                }\n            }\n\n            bool isSkiddingTooMuch = false;\n            Motor.WheelsSpinning = false;\n            float maxlat = 0;\n            bool allWheelsInAir = true;\n            foreach (VehicleWheel wheel in Wheels)\n            {\n                wheel.Update();\n                if (!wheel.InAir) allWheelsInAir = false;\n                if (wheel.CActor.IsDriven && (wheel.IsSkiddingLng || wheel.InAir))\n                {\n                    Motor.WheelsSpinning = true;\n                }\n                if (maxlat < Math.Abs(wheel.LatSlip)) maxlat = Math.Abs(wheel.LatSlip);\n                if (Math.Abs(wheel.LatSlip) > 0.8f && !wheel.InAir) isSkiddingTooMuch = true;\n            }\n\n            if (!InAir)\n            {\n                _physXActor.MaximumAngularVelocity = 3.5f;\n\n                if (Speed < 10)\n                {\n                    _physXActor.LinearDamping = Motor.IsAccelerating ? 1 : 4;\n                    _physXActor.AngularDamping = 0.02f;\n                    GameConsole.WriteLine(\"mode slow\");\n                }\n                else if ((_steerAngle < -0.1f && Wheels[0].LatSlip > 0.35f) || (_steerAngle > 0.1f && Wheels[0].LatSlip < -0.35f))\n                {\n                    _physXActor.AngularDamping = maxlat * 2.05f;\n                    _physXActor.LinearDamping = maxlat * 1.3f;\n                    Motor.WheelsSpinning = true;\n                    GameConsole.WriteLine(\"mode alt steer\");\n                }\n                else if ((_steerAngle < -0.1f && Wheels[0].LatSlip < -0.4f) || (_steerAngle > 0.1f && Wheels[0].LatSlip > 0.4f))\n                {\n                    _physXActor.AngularDamping = 0;\n                    _physXActor.LinearDamping = Speed > 20 ? maxlat * 1.18f : maxlat * 0.9f;\n                    GameConsole.WriteLine(\"mode steer into\");\n                }\n                else if ((Math.Abs(_steerAngle) < 0.1f && Math.Abs(Wheels[0].LatSlip) > 0.4f))\n                {\n                    _physXActor.AngularDamping = Speed > 20 ? maxlat * 0.6f : maxlat * 1.9f;\n                    _physXActor.LinearDamping = Speed > 20 ? maxlat * 1.18f : maxlat * 0.8f;\n                    GameConsole.WriteLine(\"no steer\");\n                }\n                else if (isSkiddingTooMuch)\n                {\n                    if (Speed < 20)\n                        _physXActor.LinearDamping = maxlat * 0.8f;\n                    else\n                        _physXActor.LinearDamping = maxlat * 0.4f;\n                    _physXActor.AngularDamping = 0.01f;\n                    GameConsole.WriteLine(\"mode overskid\");\n                }\n                else\n                {\n                    _physXActor.LinearDamping = 0;\n                    _physXActor.AngularDamping = 0.01f;\n                }\n\n                if (_physXActor.GlobalOrientation.Up.Y < 0)\n                {\n                    _physXActor.LinearDamping = 7f;\n                    _physXActor.AngularDamping = 2f;\n                    GameConsole.WriteLine(\"mode on roof\");\n                }\n            }\n            if (allWheelsInAir)\n            {\n                _physXActor.AngularDamping = 0.00f;\n                _physXActor.MaximumAngularVelocity = 10f;\n                _physXActor.LinearDamping = 0;\n                GameConsole.WriteLine(\"mode in air\");\n            }\n        }\n\n\n        public void OutputDebugInfo()\n        {\n            GameConsole.WriteLine(\"Speed\", Speed);\n            GameConsole.WriteLine(\"Brake\", _brakeTorque);\n        }\n\n\n        public void Brake(float value)\n        {\n            Motor.Throttle = -value;\n            Motor.Update(Speed);\n            float motorTorque = Motor.CurrentPowerOutput;\n            _currentTorque = motorTorque;\n\n            if (Backwards)\n            {\n                _motorTorque = motorTorque;\n                _brakeTorque = 0f;\n            }\n            else\n            {\n                _motorTorque = 0.0f;\n                _brakeTorque = Math.Max(870, _brakeTorque + 0.9f);\n            }\n            UpdateTorque();\n\n        }\n\n        public void Accelerate(float value)\n        {\n            Motor.Throttle = value;\n            Motor.Update(Speed);\n            float motorTorque = Motor.CurrentPowerOutput;\n            _currentTorque = motorTorque;\n\n            if (motorTorque > 0.0001f)\n            {\n                if (Backwards)\n                {\n                    _motorTorque = 0f;\n                    _brakeTorque = Math.Max(700, _brakeTorque + 0.7f);\n                }\n                else\n                {\n                    _motorTorque = motorTorque;\n                    _brakeTorque = 0.0f;\n                }\n            }\n            else\n            {\n                _motorTorque = 0.0f;\n                _brakeTorque = Motor.CurrentFriction;\n            }\n\n            UpdateTorque();\n            _physXActor.WakeUp();\n        }\n\n        public void Steer(float angle)\n        {\n            _desiredSteerAngle = angle*0.33f;\n        }\n\n        public void PullHandbrake()\n        {\n\n\n            _handbrake = 1;\n        }\n\n        public void ReleaseHandbrake()\n        {\n            if (_handbrake == 0) return;\n            _handbrake -= Engine.ElapsedSeconds * 1.8f;\n            if (_handbrake < 0) _handbrake = 0;\n        }\n\n\n        private void UpdateTorque()\n        {\n            foreach (VehicleWheel wheel in Wheels)\n            {\n                if (wheel.CActor.IsDriven)\n                    wheel.Shape.MotorTorque = -_motorTorque;\n                if (wheel.IsRear)\n                    wheel.ApplyHandbrake(_handbrake);\n            }\n\n            if (_handbrake == 1) return;\n\n\n            foreach (VehicleWheel wheel in Wheels)\n            {\n                wheel.Shape.BrakeTorque = _brakeTorque;\n            }\n        }\n\n\n        public void Reset()\n        {\n            Matrix m = _physXActor.GlobalOrientation;\n            m.Up = Vector3.Up;\n\n            _physXActor.GlobalOrientation = m;\n            _physXActor.GlobalPosition += new Vector3(0.0f, 1.5f, 0.0f);\n            _physXActor.LinearMomentum = _physXActor.LinearVelocity = Vector3.Zero;\n            _physXActor.AngularMomentum = _physXActor.AngularVelocity = Vector3.Zero;\n        }\n\n        public bool InAir\n        {\n            get\n            {\n                foreach (VehicleWheel wheel in Wheels)\n                    if (!wheel.InAir) return false;\n                return true;\n            }\n        }\n\n        internal void Boost()\n        {\n            _physXActor.AddForce(_physXActor.GlobalOrientation.Forward * 1000, ForceMode.Force);\n        }\n    }\n}\n\n\n'OpenC1/OpenC1/Parsers/Funks/WindscreenFunk.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing Microsoft.Xna.Framework.Graphics;\nusing Microsoft.Xna.Framework;\nusing OneAmEngine;\n\nnamespace OpenC1.Parsers.Funks\n{\n    class WindscreenFunk : BaseFunk\n    {\n        public Vector2 Speed;\n        Vector2 _uvOffset;\n        TextureAddressMode _lastMode;\n        Vehicle _vehicle;\n        Texture2D _origTexture;\n\n        public WindscreenFunk(string materialName, Vehicle vehicle)\n        {\n            _vehicle = vehicle;\n            MaterialName = materialName;\n            Speed = new Vector2(0.3f);\n        }\n\n        public override void Resolve()\n        {\n            base.Resolve();\n            if (Material != null)\n                _origTexture = Material.Texture;\n        }\n\n        public override void BeforeRender()\n        {\n            _lastMode = Engine.Device.SamplerStates[0].AddressU;\n            if (_lastMode != TextureAddressMode.Wrap)\n                Engine.Device.SamplerStates[0].AddressU = Engine.Device.SamplerStates[0].AddressV = TextureAddressMode.Wrap;\n\n            GameVars.CurrentEffect.TexCoordsOffset = _uvOffset;\n            GameVars.CurrentEffect.TexCoordsMultiplier = 0.1f;\n            GameVars.CurrentEffect.CommitChanges();\n        }\n\n        public override void AfterRender()\n        {\n            if (_lastMode != TextureAddressMode.Wrap)\n                Engine.Device.SamplerStates[0].AddressU = Engine.Device.SamplerStates[0].AddressV = _lastMode;\n\n            GameVars.CurrentEffect.TexCoordsOffset = Vector2.Zero;\n            GameVars.CurrentEffect.TexCoordsMultiplier = 1;\n            GameVars.CurrentEffect.CommitChanges();\n        }\n\n        public override void Update()\n        {\n            float y = Math.Min(1, _vehicle.Chassis.Actor.AngularVelocity.Y / 10);\n            Speed.X = y;\n            Speed.Y = Math.Min(1, _vehicle.Chassis.Actor.LinearVelocity.Length() / 10);\n            _uvOffset += Speed * Engine.ElapsedSeconds;\n            if (_uvOffset.X > 10) _uvOffset.X = 10 - _uvOffset.X;\n            if (_uvOffset.Y > 10) _uvOffset.Y = 10 - _uvOffset.Y;\n\n            if (_vehicle.CurrentSpecialVolume.Count > 0)\n            {\n                SpecialVolume vol = _vehicle.CurrentSpecialVolume.Peek();\n                CMaterial mat = ResourceCache.GetMaterial(vol.WindscreenMaterial);\n                if (mat != null)\n                    this.Material.Texture = mat.Texture;\n            }\n            else\n            {\n                this.Material.Texture = _origTexture;\n            }\n        }\n    }\n}\n\n'OpenC1/OpenC1/VehicleModel.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing OpenC1.Parsers;\nusing OpenC1.Parsers.Grooves;\nusing OpenC1.Parsers.Funks;\nusing Microsoft.Xna.Framework;\nusing System.IO;\n\nnamespace OpenC1\n{\n    class VehicleModel\n    {\n        CActorHierarchy _actors;\n        List<BaseGroove> _grooves;\n        VehicleFile Config;\n        public string ModelName;\n\n        public VehicleModel(VehicleFile file, bool forDisplayOnly)\n        {\n            Config = file;\n\n\t\t\tif (file.DrivenWheelRefs.Count == 0 || file.NonDrivenWheelRefs.Count == 0)\n\t\t\t\tthrow new Exception(\"No wheel refs specified\");\n\n            foreach (string pixFileName in file.PixFiles)\n            {\n                PixFile pixFile = new PixFile(pixFileName);\n                ResourceCache.Add(pixFile);\n            }\n\n            foreach (string matFileName in file.MaterialFiles)\n            {\n                MatFile matFile = new MatFile(matFileName);\n                ResourceCache.Add(matFile);\n            }\n\n            foreach (string matFileName in file.CrashMaterialFiles)\n            {\n                MatFile matFile = new MatFile(matFileName);\n                ResourceCache.Add(matFile);\n            }\n\n            ResourceCache.ResolveMaterials();\n\n            _grooves = new List<BaseGroove>();\n            foreach (BaseGroove g in file.Grooves)\n                if (!g.IsWheelActor) _grooves.Add(g);\n\n            ActFile actFile = new ActFile(file.ActorFile);\n            _actors = actFile.Hierarchy;\n            DatFile modelFile = new DatFile(_actors.Root.ModelName, !forDisplayOnly);\n            ModelName = _actors.Root.ModelName;\n\n            _actors.AttachModels(modelFile.Models);\n            _actors.ResolveTransforms(!forDisplayOnly, _grooves);\n\n            foreach (BaseGroove g in _grooves)\n                g.SetActor(_actors.GetByName(g.ActorName));\n\n\n            foreach (BaseFunk f in file.Funks)\n                f.Resolve();\n\n            Vector3 tireWidth = new Vector3(0.034f, 0, 0) * GameVars.Scale;\n\n            foreach (int id in file.DrivenWheelRefs)\n            {\n                BaseGroove g = file.Grooves.Find(a => a.Id == id);\n                if (g == null) continue;\n                CActor actor = _actors.GetByName(g.ActorName);\n                CWheelActor ca = new CWheelActor(actor, true, false);\n                ca.Position = actor.Matrix.Translation + (ca.IsLeft ? -1 * tireWidth : tireWidth);\n                file.WheelActors.Add(ca);\n            }\n            foreach (int id in file.NonDrivenWheelRefs)\n            {\n                BaseGroove g = file.Grooves.Find(a => a.Id == id);\n                CActor actor = _actors.GetByName(g.ActorName);\n                if (actor == null) continue;\n                CWheelActor ca = new CWheelActor(actor, false, true);\n                ca.Position = actor.Matrix.Translation + (ca.IsLeft ? -1 * tireWidth : tireWidth);\n                file.WheelActors.Add(ca);\n            }\n\n            if (forDisplayOnly) _actors.RenderWheelsSeparately = false;\n        }\n\n        public void Update()\n        {\n            foreach (BaseGroove groove in _grooves)\n            {\n                groove.Update();\n            }\n\n            foreach (BaseFunk funk in Config.Funks)\n            {\n                funk.Update();\n            }\n        }\n\n        public void Render(Matrix pose)\n        {\n            _actors.Render(pose, null);\n        }\n\n        public void RenderSinglePart(CActor actor)\n        {\n            _actors.RenderSingle(actor);\n        }\n\n        public CActor GetActor(string name)\n        {\n            return _actors.GetByName(name);\n        }\n    }\n}\n\n'OpenC1/OpenC1/SpecialVolume.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Text;\nusing Microsoft.Xna.Framework;\nusing OpenC1.Physics;\nusing StillDesign.PhysX;\n\nnamespace OpenC1\n{\n    class SpecialVolume\n    {\n        public int Id;\n        public Matrix Matrix;\n        public float Gravity, Viscosity, CarDamagePerMs, PedDamagePerMs;\n        public int CameraEffectIndex, SkyColor, EntrySoundId, ExitSoundId;\n        public int EngineSoundIndex, MaterialIndex;\n        public string WindscreenMaterial;\n\n        public SpecialVolume Copy()\n        {\n            SpecialVolume vol2 = new SpecialVolume();\n            vol2.Id = Id;\n            vol2.Gravity = Gravity;\n            vol2.Viscosity = Viscosity;\n            vol2.CarDamagePerMs = CarDamagePerMs;\n            vol2.PedDamagePerMs = PedDamagePerMs;\n            vol2.CameraEffectIndex = CameraEffectIndex;\n            vol2.SkyColor = SkyColor;\n            vol2.EntrySoundId = EntrySoundId;\n            vol2.ExitSoundId = ExitSoundId;\n            vol2.EngineSoundIndex = EngineSoundIndex;\n            vol2.MaterialIndex = MaterialIndex;\n            vol2.WindscreenMaterial = WindscreenMaterial;\n            return vol2;\n        }\n\n        public void Enter(Vehicle vehicle)\n        {\n            if (Gravity < 1)\n                vehicle.Chassis.Actor.RaiseBodyFlag(StillDesign.PhysX.BodyFlag.DisableGravity);\n            else\n                vehicle.Chassis.Actor.ClearBodyFlag(StillDesign.PhysX.BodyFlag.DisableGravity);\n            vehicle.Audio.SetSound(EngineSoundIndex);\n\n\n\n\n\n\n\n            if (EntrySoundId > 0)\n            {\n                SoundCache.Play(EntrySoundId, vehicle, true);\n            }\n        }\n\n        public void Update(Vehicle vehicle)\n        {\n            if (Gravity < 1)\n            {\n                vehicle.Chassis.Actor.AddForce(new Vector3(0, PhysX.Instance.Gravity * Gravity * 20f, 0), ForceMode.SmoothImpulse);\n            }\n        }\n\n        public void Exit(Vehicle vehicle)\n        {\n            if (ExitSoundId > 0)\n                SoundCache.Play(ExitSoundId, vehicle, true);\n        }\n\n        public void Reset(Vehicle vehicle)\n        {\n            vehicle.Chassis.Actor.ClearBodyFlag(StillDesign.PhysX.BodyFlag.DisableGravity);\n            vehicle.Audio.SetSound(0);\n\n\n\n\n        }\n    }\n}\n",
        "gt": [
            "'OpenC1/OpenC1/Parsers/Funks/WindscreenFunk.cs'",
            "'OpenC1/OpenC1/VehicleModel.cs'",
            "'OpenC1/OpenC1/Physics/VehicleChassis.cs'",
            "'OpenC1/OpenC1/SpecialVolume.cs'"
        ]
    },
    {
        "files": [
            "'ClusterDisplay/TestProjects/MissionControlTests/Assets/Tests/CatalogBuilderTests.cs'",
            "'ClusterDisplay/source/com.unity.cluster-display/Runtime/MissionControl/Shared/LaunchCatalog/Launchable.cs'",
            "'ClusterDisplay/source/com.unity.cluster-display.graphics/Runtime/Projections/CameraScope.cs'",
            "'ClusterDisplay/source/com.unity.cluster-display.graphics/Runtime/ClusterRendererCommandLineUtils.cs'"
        ],
        "content": "'ClusterDisplay/TestProjects/MissionControlTests/Assets/Tests/CatalogBuilderTests.cs'\n:using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Security.Cryptography;\nusing NUnit.Framework;\nusing Unity.ClusterDisplay.MissionControl.LaunchCatalog;\nusing UnityEngine;\n\nnamespace Unity.ClusterDisplay.MissionControl\n{\n    public class CatalogBuilderTests\n    {\n        [TearDown]\n        public void TearDown()\n        {\n            foreach (string folder in m_StorageFolders)\n            {\n                try\n                {\n                    Directory.Delete(folder, true);\n                }\n                catch\n                {\n\n                }\n            }\n\n            m_StorageFolders.Clear();\n        }\n\n        [Test]\n        [TestCase(false)]\n        [TestCase(true)]\n        public void MainUseCase(bool withFilter)\n        {\n            string testFolder = GetNewStorageFolder();\n\n            string capcomMainFileMd5 = GenerateTestFile(testFolder, \"folder1/capcom.exe\", 100);\n            string sharedFile1Md5 = GenerateTestFile(testFolder, \"folder1/shared1.dll\", 100);\n            string sharedFile2Md5 = GenerateTestFile(testFolder, \"folder1/shared2.dll\", 100);\n            string otherDllMd5 = GenerateTestFile(testFolder, \"folder1/other.dll\", 100);\n            string clusterDisplayMainExeMd5 = GenerateTestFile(testFolder, \"main.exe\", 100);\n            if (withFilter)\n            {\n                GenerateTestFile(testFolder, \"unrelated.exe\", 100);\n                GenerateTestFile(testFolder, \"folder2/something.bin\", 100);\n                GenerateTestFile(testFolder, \"folder2/that.bin\", 100);\n                GenerateTestFile(testFolder, \"folder2/shouldn't.bin\", 100);\n                GenerateTestFile(testFolder, \"folder2/be.bin\", 100);\n                GenerateTestFile(testFolder, \"folder2/included.bin\", 100);\n            }\n\n            var directives = new[]\n            {\n                new CatalogBuilderDirective()\n                {\n                    Launchable = new()\n                    {\n                        Name = \"ClusterDisplay Capcom\",\n                        Type = \"capcom\",\n                        LaunchPath = \"folder1/capcom.exe\"\n                    },\n                    ExclusiveFiles = new[] {\"folder1/capcom.exe\"},\n                    Files = new[] {\"folder1/*.dll\"},\n                    ExcludedFiles = new[] {\"folder1/o*.dll\"}\n                },\n                new CatalogBuilderDirective()\n                {\n                    Launchable = new()\n                    {\n                        Name = \"My Project!\",\n                        Type = Launchable.ClusterNodeType,\n                        LaunchPath = \"main.exe\"\n                    },\n                    Files = new[] {\"*\"},\n                }\n            };\n\n            var catalog = withFilter ? CatalogBuilder.Build(testFolder, directives, TestFilter) :\n                CatalogBuilder.Build(testFolder, directives);\n            Assert.That(catalog.Payloads.Count, Is.EqualTo(3));\n\n            var payload = catalog.Payloads[0];\n            Assert.That(payload.Name, Is.EqualTo(directives[0].Launchable.Name));\n            Assert.That(payload.Files.Count, Is.EqualTo(1));\n            TestFile(payload.Files[0], \"folder1/capcom.exe\", capcomMainFileMd5);\n\n            payload = catalog.Payloads[1];\n            Assert.That(payload.Name, Is.EqualTo(directives[1].Launchable.Name));\n            Assert.That(payload.Files.Count, Is.EqualTo(2));\n            TestFile(payload.Files[0], \"folder1/other.dll\", otherDllMd5);\n            TestFile(payload.Files[1], \"main.exe\", clusterDisplayMainExeMd5);\n\n            payload = catalog.Payloads[2];\n            Assert.That(payload.Name, Is.EqualTo(\"shared\"));\n            Assert.That(payload.Files.Count, Is.EqualTo(2));\n            TestFile(payload.Files[0], \"folder1/shared1.dll\", sharedFile1Md5);\n            TestFile(payload.Files[1], \"folder1/shared2.dll\", sharedFile2Md5);\n\n            Assert.That(catalog.Launchables.Count, Is.EqualTo(2));\n\n            var launchable = catalog.Launchables[0];\n            Assert.That(launchable.Name, Is.EqualTo(directives[0].Launchable.Name));\n            Assert.That(launchable.Payloads.Count, Is.EqualTo(2));\n            Assert.That(launchable.Payloads[0], Is.EqualTo(launchable.Name));\n            Assert.That(launchable.Payloads[1], Is.EqualTo(\"shared\"));\n\n            launchable = catalog.Launchables[1];\n            Assert.That(launchable.Name, Is.EqualTo(directives[1].Launchable.Name));\n            Assert.That(launchable.Payloads.Count, Is.EqualTo(2));\n            Assert.That(launchable.Payloads[0], Is.EqualTo(launchable.Name));\n            Assert.That(launchable.Payloads[1], Is.EqualTo(\"shared\"));\n        }\n\n        static bool TestFilter(string filePath)\n        {\n\n            var testPath = filePath.Replace('\\\\', '/');\n            return !(testPath.Contains(\"/folder2/\") || testPath.EndsWith(\"unrelated.exe\"));\n        }\n\n        [Test]\n        public void MultipleShared()\n        {\n            string testFolder = GetNewStorageFolder();\n\n            string launchable1Md5 = GenerateTestFile(testFolder, \"launchable1.exe\", 100);\n            string launchable2Md5 = GenerateTestFile(testFolder, \"launchable2.exe\", 100);\n            string launchable3Md5 = GenerateTestFile(testFolder, \"launchable3.exe\", 100);\n            string shared12Md5 = GenerateTestFile(testFolder, \"shared/shared12.dll\", 100);\n            string shared13Md5 = GenerateTestFile(testFolder, \"shared/shared13.dll\", 100);\n            string shared23Md5 = GenerateTestFile(testFolder, \"shared/shared23.dll\", 100);\n\n            var directives = new[]\n            {\n                new CatalogBuilderDirective()\n                {\n                    Launchable = new()\n                    {\n                        Name = \"launchable1\",\n                        Type = \"test\",\n                        LaunchPath = \"launchable1.exe\"\n                    },\n                    Files = new[] {\"launchable1.exe\", \"shared/shared12.dll\", \"shared/shared13.dll\"}\n                },\n                new CatalogBuilderDirective()\n                {\n                    Launchable = new()\n                    {\n                        Name = \"launchable2\",\n                        Type = \"test\",\n                        LaunchPath = \"launchable2.exe\"\n                    },\n                    Files = new[] {\"launchable2.exe\", \"shared/shared12.dll\", \"shared/shared23.dll\"}\n                },\n                new CatalogBuilderDirective()\n                {\n                    Launchable = new()\n                    {\n                        Name = \"launchable3\",\n                        Type = \"test\",\n                        LaunchPath = \"launchable3.exe\"\n                    },\n                    Files = new[] {\"launchable3.exe\", \"shared/shared13.dll\", \"shared/shared23.dll\"}\n                }\n            };\n\n            var catalog = CatalogBuilder.Build(testFolder, directives);\n            Assert.That(catalog.Payloads.Count, Is.EqualTo(6));\n\n            var payload = catalog.Payloads[0];\n            Assert.That(payload.Name, Is.EqualTo(directives[0].Launchable.Name));\n            Assert.That(payload.Files.Count, Is.EqualTo(1));\n            TestFile(payload.Files[0], \"launchable1.exe\", launchable1Md5);\n\n            payload = catalog.Payloads[1];\n            Assert.That(payload.Name, Is.EqualTo(directives[1].Launchable.Name));\n            Assert.That(payload.Files.Count, Is.EqualTo(1));\n            TestFile(payload.Files[0], \"launchable2.exe\", launchable2Md5);\n\n            payload = catalog.Payloads[2];\n            Assert.That(payload.Name, Is.EqualTo(directives[2].Launchable.Name));\n            Assert.That(payload.Files.Count, Is.EqualTo(1));\n            TestFile(payload.Files[0], \"launchable3.exe\", launchable3Md5);\n\n            payload = catalog.Payloads[3];\n            Assert.That(payload.Name, Is.EqualTo(\"shared0\"));\n            Assert.That(payload.Files.Count, Is.EqualTo(1));\n            TestFile(payload.Files[0], \"shared/shared12.dll\", shared12Md5);\n\n            payload = catalog.Payloads[4];\n            Assert.That(payload.Name, Is.EqualTo(\"shared1\"));\n            Assert.That(payload.Files.Count, Is.EqualTo(1));\n            TestFile(payload.Files[0], \"shared/shared13.dll\", shared13Md5);\n\n            payload = catalog.Payloads[5];\n            Assert.That(payload.Name, Is.EqualTo(\"shared2\"));\n            Assert.That(payload.Files.Count, Is.EqualTo(1));\n            TestFile(payload.Files[0], \"shared/shared23.dll\", shared23Md5);\n\n            Assert.That(catalog.Launchables.Count, Is.EqualTo(3));\n\n            var launchable = catalog.Launchables[0];\n            Assert.That(launchable.Name, Is.EqualTo(directives[0].Launchable.Name));\n            Assert.That(launchable.Payloads.Count, Is.EqualTo(3));\n            Assert.That(launchable.Payloads[0], Is.EqualTo(launchable.Name));\n            Assert.That(launchable.Payloads[1], Is.EqualTo(\"shared0\"));\n            Assert.That(launchable.Payloads[2], Is.EqualTo(\"shared1\"));\n\n            launchable = catalog.Launchables[1];\n            Assert.That(launchable.Name, Is.EqualTo(directives[1].Launchable.Name));\n            Assert.That(launchable.Payloads.Count, Is.EqualTo(3));\n            Assert.That(launchable.Payloads[0], Is.EqualTo(launchable.Name));\n            Assert.That(launchable.Payloads[1], Is.EqualTo(\"shared0\"));\n            Assert.That(launchable.Payloads[2], Is.EqualTo(\"shared2\"));\n\n            launchable = catalog.Launchables[2];\n            Assert.That(launchable.Name, Is.EqualTo(directives[2].Launchable.Name));\n            Assert.That(launchable.Payloads.Count, Is.EqualTo(3));\n            Assert.That(launchable.Payloads[0], Is.EqualTo(launchable.Name));\n            Assert.That(launchable.Payloads[1], Is.EqualTo(\"shared1\"));\n            Assert.That(launchable.Payloads[2], Is.EqualTo(\"shared2\"));\n        }\n\n        [Test]\n        public void NullLaunchable()\n        {\n            string testFolder = GetNewStorageFolder();\n\n            var directives = new[]\n            {\n                new CatalogBuilderDirective()\n                {\n                    Files = new[] {\"launchable1.exe\", \"shared/shared12.dll\", \"shared/shared13.dll\"}\n                }\n            };\n\n            Assert.That(() => CatalogBuilder.Build(testFolder, directives),\n                Throws.TypeOf<ArgumentException>().With.Message.StartsWith(\"Every directive need to have a Launchable.\"));\n        }\n\n        [Test]\n        public void SameNameLaunchable()\n        {\n            string testFolder = GetNewStorageFolder();\n\n            var directives = new[]\n            {\n                new CatalogBuilderDirective()\n                {\n                    Launchable = new()\n                    {\n                        Name = \"launchableName\",\n                        Type = \"test\",\n                        LaunchPath = \"launchable1.exe\"\n                    },\n                    Files = new[] {\"launchable1.exe\", \"shared/shared12.dll\", \"shared/shared13.dll\"}\n                },\n                new CatalogBuilderDirective()\n                {\n                    Launchable = new()\n                    {\n                        Name = \"launchableName\",\n                        Type = \"test\",\n                        LaunchPath = \"launchable2.exe\"\n                    },\n                    Files = new[] {\"launchable2.exe\", \"shared/shared12.dll\", \"shared/shared23.dll\"}\n                }\n            };\n\n            Assert.That(() => CatalogBuilder.Build(testFolder, directives),\n                Throws.TypeOf<ArgumentException>().With.Message.StartsWith(\"Some launchable share the same name, \" +\n                    \"every launchable must have a unique name within the LaunchCatalog.\"));\n        }\n\n        [Test]\n        public void EmptyLaunchableName()\n        {\n            string testFolder = GetNewStorageFolder();\n\n            var directives = new[]\n            {\n                new CatalogBuilderDirective()\n                {\n                    Launchable = new()\n                    {\n                        Type = \"test\",\n                        LaunchPath = \"launchable1.exe\"\n                    },\n                    Files = new[] {\"launchable1.exe\", \"shared/shared12.dll\", \"shared/shared13.dll\"}\n                }\n            };\n\n            Assert.That(() => CatalogBuilder.Build(testFolder, directives),\n                Throws.TypeOf<ArgumentException>().With.Message.StartsWith(\"Launchable name cannot be empty.\"));\n        }\n\n        [Test]\n        public void EmptyLaunchableType()\n        {\n            string testFolder = GetNewStorageFolder();\n\n            var directives = new[]\n            {\n                new CatalogBuilderDirective()\n                {\n                    Launchable = new()\n                    {\n                        Name = \"TestName\",\n                        LaunchPath = \"launchable1.exe\"\n                    },\n                    Files = new[] {\"launchable1.exe\", \"shared/shared12.dll\", \"shared/shared13.dll\"}\n                }\n            };\n\n            Assert.That(() => CatalogBuilder.Build(testFolder, directives),\n                Throws.TypeOf<ArgumentException>().With.Message.StartsWith(\"Launchable type cannot be empty.\"));\n        }\n\n        [Test]\n        public void EmptyLaunchPath()\n        {\n            string testFolder = GetNewStorageFolder();\n\n            var directives = new[]\n            {\n                new CatalogBuilderDirective()\n                {\n                    Launchable = new()\n                    {\n                        Name = \"TestName\",\n                        Type = \"test\"\n                    },\n                    Files = new[] {\"launchable1.exe\", \"shared/shared12.dll\", \"shared/shared13.dll\"}\n                }\n            };\n\n            Assert.That(() => CatalogBuilder.Build(testFolder, directives),\n                Throws.TypeOf<ArgumentException>().With.Message.StartsWith(\"Launchable launchPath cannot be empty.\"));\n        }\n\n        [Test]\n        public void BigFileChecksum()\n        {\n            string testFolder = GetNewStorageFolder();\n\n            string bigFileMd5 = GenerateTestFile(testFolder, \"bigfile.bin\", 10 * 1024 * 1024);\n\n            var directives = new[]\n            {\n                new CatalogBuilderDirective()\n                {\n                    Launchable = new()\n                    {\n                        Name = \"Some name\",\n                        Type = \"test\",\n                        LaunchPath = \"bigfile.bin\"\n                    },\n                    Files = new[] {\"bigfile.bin\"}\n                }\n            };\n\n            var catalog = CatalogBuilder.Build(testFolder, directives);\n            Assert.That(catalog.Payloads.Count, Is.EqualTo(1));\n\n            var payload = catalog.Payloads[0];\n            Assert.That(payload.Name, Is.EqualTo(directives[0].Launchable.Name));\n            Assert.That(payload.Files.Count, Is.EqualTo(1));\n            TestFile(payload.Files[0], \"bigfile.bin\", bigFileMd5);\n\n            Assert.That(catalog.Launchables.Count, Is.EqualTo(1));\n\n            var launchable = catalog.Launchables[0];\n            Assert.That(launchable.Name, Is.EqualTo(directives[0].Launchable.Name));\n            Assert.That(launchable.Payloads.Count, Is.EqualTo(1));\n            Assert.That(launchable.Payloads[0], Is.EqualTo(launchable.Name));\n        }\n\n        [Test]\n        public void DropsLaunchableWithoutFiles()\n        {\n            string testFolder = GetNewStorageFolder();\n\n            string capcomMainFileMd5 = GenerateTestFile(testFolder, \"folder1/capcom.exe\", 100);\n            string sharedFile1Md5 = GenerateTestFile(testFolder, \"folder1/shared1.dll\", 100);\n            string sharedFile2Md5 = GenerateTestFile(testFolder, \"folder1/shared2.dll\", 100);\n            GenerateTestFile(testFolder, \"folder1/other.dll\", 100);\n            GenerateTestFile(testFolder, \"main.exe\", 100);\n\n            var directives = new[]\n            {\n                new CatalogBuilderDirective()\n                {\n                    Launchable = new()\n                    {\n                        Name = \"ClusterDisplay Capcom\",\n                        Type = \"capcom\",\n                        LaunchPath = \"folder1/capcom.exe\"\n                    },\n                    ExclusiveFiles = new[] {\"folder1/capcom.exe\"},\n                    Files = new[] {\"folder1/*.dll\"},\n                    ExcludedFiles = new[] {\"folder1/o*.dll\"}\n                },\n                new CatalogBuilderDirective()\n                {\n                    Launchable = new()\n                    {\n                        Name = \"My Project!\",\n                        Type = Launchable.ClusterNodeType,\n                        LaunchPath = \"main.exe\"\n                    },\n                    Files = new[] {\"*\"},\n                    ExcludedFiles = new[] {\"*.dll\", \"*.exe\"}\n                }\n            };\n\n            var catalog = CatalogBuilder.Build(testFolder, directives);\n            Assert.That(catalog.Payloads.Count, Is.EqualTo(1));\n\n            var payload = catalog.Payloads[0];\n            Assert.That(payload.Name, Is.EqualTo(directives[0].Launchable.Name));\n            Assert.That(payload.Files.Count, Is.EqualTo(3));\n            TestFile(payload.Files[0], \"folder1/capcom.exe\", capcomMainFileMd5);\n            TestFile(payload.Files[1], \"folder1/shared1.dll\", sharedFile1Md5);\n            TestFile(payload.Files[2], \"folder1/shared2.dll\", sharedFile2Md5);\n\n            Assert.That(catalog.Launchables.Count, Is.EqualTo(1));\n\n            var launchable = catalog.Launchables[0];\n            Assert.That(launchable.Name, Is.EqualTo(directives[0].Launchable.Name));\n            Assert.That(launchable.Payloads.Count, Is.EqualTo(1));\n            Assert.That(launchable.Payloads[0], Is.EqualTo(launchable.Name));\n        }\n\n        static void TestFile(PayloadFile payloadFile, string expectedPath, string expectedMd5)\n        {\n            Assert.That(payloadFile.Path, Is.EqualTo(expectedPath));\n            Assert.That(payloadFile.Md5, Is.EqualTo(expectedMd5));\n        }\n\n        static byte[] GetRandomBytes(int size)\n        {\n            byte[] ret = new byte[size];\n            for (int currentPos = 0; currentPos < size;)\n            {\n                const int bytesInGuid = 16;\n                int copyLength = Math.Min(size - currentPos, bytesInGuid);\n                byte[] guidBytes = Guid.NewGuid().ToByteArray();\n                Span<byte> guidSpan = new(guidBytes, 0, copyLength);\n                guidSpan.CopyTo(new Span<byte>(ret, currentPos, copyLength));\n                currentPos += copyLength;\n            }\n\n            return ret;\n        }\n\n        static string ComputeMd5String(byte[] bytes)\n        {\n            using var md5 = MD5.Create();\n            var bytesHash = md5.ComputeHash(bytes);\n            return ConvertHelpers.ToHexString(bytesHash);\n        }\n\n        static string GenerateTestFile(string basePath, string fileRelativePath, int length)\n        {\n            byte[] bytes = GetRandomBytes(length);\n            string fullPath = Path.Combine(basePath, fileRelativePath);\n            string directory = Path.GetDirectoryName(fullPath)!;\n            if (!Directory.Exists(directory))\n            {\n                Directory.CreateDirectory(directory);\n            }\n\n            File.WriteAllBytes(fullPath, bytes);\n            return ComputeMd5String(bytes);\n        }\n\n        string GetNewStorageFolder()\n        {\n            var folderPath = Path.Combine(Path.GetTempPath(), \"CatalogBuilderTests\" + Guid.NewGuid().ToString());\n            m_StorageFolders.Add(folderPath);\n            return folderPath;\n        }\n\n        List<string> m_StorageFolders = new();\n    }\n}\n\n'ClusterDisplay/source/com.unity.cluster-display/Runtime/MissionControl/Shared/LaunchCatalog/Launchable.cs'\n:﻿using System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing Newtonsoft.Json;\nusing Newtonsoft.Json.Linq;\nusing UnityEngine;\n\nnamespace Unity.ClusterDisplay.MissionControl.LaunchCatalog\n{\n\n\n\n\n\n\n    public class Launchable: IEquatable<Launchable>\n    {\n\n\n\n\n        public string Name { get; set; } = \"\";\n\n\n\n\n        public string Type { get; set; } = \"\";\n\n\n\n\n\n\n\n\n\n        public JToken Data { get; set; }\n\n\n\n\n\n        public List<LaunchParameter> GlobalParameters { get; set; } = new();\n\n\n\n\n\n        public List<LaunchParameter> LaunchComplexParameters { get; set; } = new();\n\n\n\n\n\n        public List<LaunchParameter> LaunchPadParameters { get; set; } = new();\n\n\n\n\n\n\n\n        public string PreLaunchPath { get; set; } = \"\";\n\n\n\n\n\n\n        public string LaunchPath { get; set; } = \"\";\n\n\n\n\n        [JsonConverter(typeof(TimeSpanToSecondsJsonConverter))]\n        [JsonProperty(\"landingTimeSec\")]\n        public TimeSpan LandingTime { get; set; } = TimeSpan.Zero;\n\n\n\n\n        public List<string> Payloads { get; set; } = new();\n\n        public bool Equals(Launchable other)\n        {\n            return other != null &&\n                Name == other.Name &&\n                Type == other.Type &&\n                ReferenceEquals(Data, null) == ReferenceEquals(other.Data, null) &&\n                (ReferenceEquals(Data, null) || Data.ToString() == other.Data!.ToString()) &&\n                GlobalParameters.SequenceEqual(other.GlobalParameters) &&\n                LaunchComplexParameters.SequenceEqual(other.LaunchComplexParameters) &&\n                LaunchPadParameters.SequenceEqual(other.LaunchPadParameters) &&\n                PreLaunchPath == other.PreLaunchPath &&\n                LaunchPath == other.LaunchPath &&\n                LandingTime == other.LandingTime &&\n                Payloads.SequenceEqual(other.Payloads);\n        }\n\n\n\n\n        public const string CapcomType = \"capcom\";\n\n\n\n\n        public const string ClusterNodeType = \"clusterNode\";\n    }\n}\n\n'ClusterDisplay/source/com.unity.cluster-display.graphics/Runtime/Projections/CameraScope.cs'\n:using System;\nusing UnityEngine;\nusing Unity.ClusterDisplay.Graphics;\n\nreadonly struct CameraScope : IDisposable\n{\n    readonly Camera m_Camera;\n    readonly int m_cullingMask;\n    static readonly int k_ClusterDisplayParams = Shader.PropertyToID(\"_ClusterDisplayParams\");\n\n    CameraScope(Camera camera)\n    {\n        m_Camera = camera;\n        m_cullingMask = camera.cullingMask;\n    }\n\n    public void Render(Matrix4x4 projection, Matrix4x4 clusterParams, RenderTexture target)\n    {\n\n\n        Shader.SetGlobalMatrix(k_ClusterDisplayParams, clusterParams);\n\n        Render(projection, target);\n    }\n\n    public void Render(Matrix4x4 projection, RenderTexture target)\n    {\n\n        var mask = m_Camera.cullingMask;\n        mask &= ~(1 << ClusterRenderer.VirtualObjectLayer);\n        m_Camera.cullingMask = mask;\n\n        m_Camera.targetTexture = target;\n        m_Camera.projectionMatrix = projection;\n        m_Camera.cullingMatrix = projection * m_Camera.worldToCameraMatrix;\n\n        m_Camera.Render();\n    }\n\n    public void Dispose()\n    {\n        m_Camera.ResetAspect();\n        m_Camera.ResetProjectionMatrix();\n        m_Camera.ResetCullingMatrix();\n        m_Camera.cullingMask = m_cullingMask;\n    }\n}\n\n'ClusterDisplay/source/com.unity.cluster-display.graphics/Runtime/ClusterRendererCommandLineUtils.cs'\n:﻿using System;\nusing System.Runtime.CompilerServices;\nusing Unity.ClusterDisplay.MissionControl;\nusing Unity.ClusterDisplay.Utils;\nusing UnityEngine;\nusing UnityEngine.Assertions;\n\nnamespace Unity.ClusterDisplay.Graphics\n{\n\n\n\n    [DisallowMultipleComponent]\n    [RequireComponent(typeof(ClusterRenderer))]\n    class ClusterRendererCommandLineUtils : MonoBehaviour\n    {\n\n\n\n        void OnEnable()\n        {\n            var renderer = GetComponent<ClusterRenderer>();\n            Assert.IsNotNull(renderer);\n\n            if (ServiceLocator.TryGet(out IClusterSyncState clusterSync) &&\n                clusterSync.NodeRole is NodeRole.Emitter &&\n                clusterSync.EmitterIsHeadless)\n            {\n                renderer.enabled = false;\n                return;\n            }\n\n            renderer.DelayPresentByOneFrame = clusterSync.NodeRole is NodeRole.Emitter && clusterSync.RepeatersDelayedOneFrame;\n            renderer.Settings.RenderTestPattern = CommandLineParser.testPattern.Defined;\n\n            if (Application.isPlaying && renderer.ProjectionPolicy is { } projectionPolicy)\n            {\n                ApplyCmdLineSettings(projectionPolicy);\n            }\n        }\n\n        [MethodImpl(MethodImplOptions.AggressiveInlining)]\n        static void TrySet<T>(ref T dest, T? maybeValue) where T : struct\n        {\n            dest = maybeValue ?? dest;\n        }\n\n        static void ApplyCmdLineSettings(ProjectionPolicy projection)\n        {\n            switch (projection)\n            {\n                case TiledProjection tiledProjection:\n                    var settings = tiledProjection.Settings;\n                    ParseSettings(ref settings);\n                    tiledProjection.Settings = settings;\n                    break;\n            }\n        }\n\n        static void ParseSettings(ref TiledProjectionSettings baseSettings)\n        {\n            if (CommandLineParser.bezel.Defined)\n                TrySet(ref baseSettings.Bezel, CommandLineParser.bezel.Value);\n\n            if (CommandLineParser.gridSize.Defined)\n                TrySet(ref baseSettings.GridSize, CommandLineParser.gridSize.Value);\n\n            if (CommandLineParser.physicalScreenSize.Defined)\n                TrySet(ref baseSettings.PhysicalScreenSize, CommandLineParser.physicalScreenSize.Value);\n        }\n    }\n}\n",
        "gt": [
            "'ClusterDisplay/source/com.unity.cluster-display/Runtime/MissionControl/Shared/LaunchCatalog/Launchable.cs'",
            "'ClusterDisplay/TestProjects/MissionControlTests/Assets/Tests/CatalogBuilderTests.cs'",
            "'ClusterDisplay/source/com.unity.cluster-display.graphics/Runtime/ClusterRendererCommandLineUtils.cs'",
            "'ClusterDisplay/source/com.unity.cluster-display.graphics/Runtime/Projections/CameraScope.cs'"
        ]
    }
]