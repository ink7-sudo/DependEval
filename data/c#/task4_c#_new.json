[
    {
        "repo": "DotNetDetour",
        "description": "DotNetDetour is a library for hooking methods in .NET applications.",
        "function": "Supports hooking static, instance, property, and generic methods in both 32-bit and 64-bit .NET applications. Allows modification of method behavior without altering original source code, and provides features for managing hooks and interacting with original methods.",
        "files": [
            {
                "file": "DotNetDetour/DotNetDetour/AssemblyUtil.cs",
                "function": "This file provides utility methods for creating instances of types via reflection, retrieving types that implement specific interfaces or base classes, cloning objects using binary serialization, copying properties between objects, and loading assemblies or retrieving their versions."
            },
            {
                "file": "DotNetDetour/DotNetDetour/DetourFactory.cs",
                "function": "The file defines a factory class `DetourFactory` that creates a native detour engine (`IDetour`) based on the system's architecture (32-bit or 64-bit)."
            },
            {
                "file": "DotNetDetour/DotNetDetour/IDetour.cs",
                "function": "This file defines an interface `IDetour` with a method `Patch` that allows hooking into a target method, replacing it with a user-defined method, and providing access to the original method."
            },
            {
                "file": "DotNetDetour/DotNetDetour/IMethodMonitor.cs",
                "function": "This file defines interfaces for method hooking in .NET, including `IMethodHook` and `IMethodHookWithSet`, which supports callbacks during hook initialization and allows retrieval of the original method being hooked."
            },
            {
                "file": "DotNetDetour/DotNetDetour/LDasm.cs",
                "function": "The file defines a C# class `LDasm` that calculates the length of x86/x64 assembly instructions, using a translation of the BlackBone LDasm algorithm. It supports parsing prefixes, opcodes, ModR/M, SIB, displacement, and immediate data to determine the total instruction length."
            },
            {
                "file": "DotNetDetour/DotNetDetour/Monitor.cs",
                "function": "This file defines a method hooking mechanism that intercepts and redirects method calls in .NET applications, allowing custom methods to replace or augment original methods. It dynamically loads assemblies, identifies hook and original methods using custom attributes, and patches the target methods to redirect their execution."
            },
            {
                "file": "DotNetDetour/DotNetDetour/MonitorAttribute.cs",
                "function": "The file defines a `HookMethodAttribute` to mark methods as replacements for target methods, allowing redirection of method execution. It also includes deprecated attributes `MonitorAttribute` and `RelocatedMethodAttribute` for backward compatibility."
            },
            {
                "file": "DotNetDetour/DotNetDetour/NativeAPI.cs",
                "function": "This file defines an enumeration for memory protection constants and a class that provides a method to change memory protection using the `VirtualProtect` function from the Windows API."
            },
            {
                "file": "DotNetDetour/DotNetDetour/OriginalAttribute.cs",
                "function": "This file defines custom attributes for marking methods and parameters in C# for hooking and type tracking purposes, with deprecated attributes for backward compatibility."
            },
            {
                "file": "DotNetDetour/DotNetDetour/DetourWays/MethodTableDetour.cs",
                "function": "The `MethodTableDetour` class implements method hooking by modifying the jitted code pointers of methods, allowing redirection of method calls to a different implementation. It supports both 32-bit and 64-bit architectures and handles dynamic methods as well."
            },
            {
                "file": "DotNetDetour/DotNetDetour/DetourWays/NativeDetourFor32Bit.cs",
                "function": "This file implements a 32-bit inline hook mechanism by patching the first 5 bytes of a target function with a jump instruction to redirect execution to a user-defined function, while also enabling calls to the original function through a placeholder method."
            },
            {
                "file": "DotNetDetour/DotNetDetour/DetourWays/NativeDetourFor64Bit.cs",
                "function": "This file defines a class `NativeDetourFor64Bit` that extends `NativeDetourFor32Bit` to create a placeholder method call that redirects to a raw method using assembly instructions and memory manipulation for 64-bit systems."
            },
            {
                "file": "DotNetDetour/DotNetDetour/Properties/AssemblyInfo.cs",
                "function": "This file defines metadata and configuration settings for a .NET assembly named \"DotNetDetour,\" including versioning, COM visibility, and assembly attributes."
            },
            {
                "file": "DotNetDetour/Test/MonitorTest.cs",
                "function": "The file contains unit tests for various methods and functionalities of a `Computer` class, including static methods, instance methods, constructors, properties, and generic methods. It verifies that method hooks are correctly installed and that the expected results are returned for each test case."
            },
            {
                "file": "DotNetDetour/Test/Samples.cs",
                "function": "The file defines a `Computer` class with properties and methods for managing computer attributes and operations, including CPU and RAM information, OS details, and various work methods. It also includes a `ComputerDetour` class that implements method hooking to intercept and modify the behavior of certain `Computer` methods, such as `GetCpu`, `GetRAMSize`, and `Work`, allowing for custom logic to be executed instead of the original methods."
            },
            {
                "file": "DotNetDetour/Test/Properties/AssemblyInfo.cs",
                "function": "This file defines assembly-level attributes for a .NET project, including metadata like title, version, and visibility to COM components."
            }
        ],
        "gt": "[['DotNetDetour/DotNetDetour/NativeAPI.cs', 'DotNetDetour/Test/MonitorTest.cs'], ['DotNetDetour/Test/Samples.cs'], ['DotNetDetour/Test/Properties/AssemblyInfo.cs'], ['DotNetDetour/Test/MonitorTest.cs'], ['DotNetDetour/DotNetDetour/IMethodMonitor.cs', 'DotNetDetour/Test/MonitorTest.cs'], ['DotNetDetour/DotNetDetour/DetourWays/NativeDetourFor64Bit.cs'], ['DotNetDetour/DotNetDetour/LDasm.cs', 'DotNetDetour/Test/MonitorTest.cs'], ['DotNetDetour/DotNetDetour/Monitor.cs', 'DotNetDetour/Test/MonitorTest.cs'], ['DotNetDetour/DotNetDetour/AssemblyUtil.cs', 'DotNetDetour/Test/MonitorTest.cs'], ['DotNetDetour/DotNetDetour/OriginalAttribute.cs', 'DotNetDetour/Test/MonitorTest.cs'], ['DotNetDetour/DotNetDetour/Properties/AssemblyInfo.cs'], ['DotNetDetour/DotNetDetour/MonitorAttribute.cs', 'DotNetDetour/Test/MonitorTest.cs'], ['DotNetDetour/DotNetDetour/DetourWays/MethodTableDetour.cs'], ['DotNetDetour/DotNetDetour/DetourWays/NativeDetourFor32Bit.cs'], ['DotNetDetour/DotNetDetour/DetourFactory.cs', 'DotNetDetour/Test/MonitorTest.cs'], ['DotNetDetour/DotNetDetour/IDetour.cs', 'DotNetDetour/Test/MonitorTest.cs']]"
    },
    {
        "repo": "SignalR",
        "description": "A package that provides a SignalR client library for Blazor, enabling real-time communication between Blazor applications and SignalR hubs.",
        "function": "Implements most features of the SignalR TypeScript client, allowing Blazor applications to connect to SignalR hubs, send and receive messages, and invoke server methods. Streaming APIs are not yet implemented.",
        "files": [
            {
                "file": "SignalR/src/Blazor.Extensions.SignalR/HttpConnectionOptions.cs",
                "function": "The file defines `HttpConnectionOptions`, a class for configuring SignalR connections in Blazor, with properties and methods that can be invoked from JavaScript."
            },
            {
                "file": "SignalR/src/Blazor.Extensions.SignalR/HttpTransportType.cs",
                "function": "Defines an enumeration for specifying HTTP transport types, including WebSockets, Server-Sent Events, and Long Polling, with the ability to combine options using bitwise operations."
            },
            {
                "file": "SignalR/src/Blazor.Extensions.SignalR/HubCloseCallback.cs",
                "function": "The file defines a `HubCloseCallback` class that handles a callback function for hub closure in Blazor, invoking the callback with an exception when the hub closes."
            },
            {
                "file": "SignalR/src/Blazor.Extensions.SignalR/HubConnection.cs",
                "function": "The `HubConnection` class facilitates real-time communication with a SignalR hub, allowing methods to be registered for handling incoming messages, managing connection start/stop, and invoking hub methods asynchronously. It also supports handling connection closures and disposing of the connection."
            },
            {
                "file": "SignalR/src/Blazor.Extensions.SignalR/HubConnectionBuilder.cs",
                "function": "The `HubConnectionBuilder` class is used to configure and build a SignalR `HubConnection`, allowing for HTTP-based transport and optional MessagePack protocol support. The `WithUrl` method configures the connection URL, while `AddMessagePackProtocol` enables MessagePack for the connection."
            },
            {
                "file": "SignalR/src/Blazor.Extensions.SignalR/HubMethodCallback.cs",
                "function": "The `HubMethodCallback` class facilitates handling and invoking callbacks for specific methods in a SignalR hub connection, allowing JavaScript to invoke .NET methods and manage the connection lifecycle."
            },
            {
                "file": "SignalR/src/Blazor.Extensions.SignalR/JSRuntimeExtensions.cs",
                "function": "This file extends the `IJSRuntime` interface to provide a synchronous method, `InvokeSync`, for invoking JavaScript functions from Blazor, handling both in-process and asynchronous runtime scenarios."
            },
            {
                "file": "SignalR/src/Blazor.Extensions.SignalR/SignalRLogLevel.cs",
                "function": "Defines an enumeration for SignalR log levels, ranging from Trace to None, to control the verbosity of logging in a Blazor application."
            },
            {
                "file": "SignalR/test/Blazor.Extensions.SignalR.Test.Client/DemoData.cs",
                "function": "The file defines a `DemoData` class with properties for various data types, including ID, string, decimal, date, boolean, and an enum. It also includes an `EnumType` enumeration with values A and B."
            },
            {
                "file": "SignalR/test/Blazor.Extensions.SignalR.Test.Client/Program.cs",
                "function": "This file initializes and runs a Blazor WebAssembly application using the `BlazorWebAssemblyHost` and sets up the application with the `Startup` class."
            },
            {
                "file": "SignalR/test/Blazor.Extensions.SignalR.Test.Client/Startup.cs",
                "function": "This file configures a Blazor client application by setting up services and adding a root component for rendering."
            },
            {
                "file": "SignalR/test/Blazor.Extensions.SignalR.Test.Client/Pages/ChatComponent.cs",
                "function": "The `ChatComponent` class is a Blazor component that facilitates real-time communication via SignalR. It handles various types of messages and data, including objects, lists, byte arrays, and multiple arguments, and supports broadcasting, sending messages to specific connections or groups, and managing group membership."
            },
            {
                "file": "SignalR/test/Blazor.Extensions.SignalR.Test.Server/Program.cs",
                "function": "The file defines the entry point for a Blazor SignalR test server application, configuring and running a web host using ASP.NET Core."
            },
            {
                "file": "SignalR/test/Blazor.Extensions.SignalR.Test.Server/Startup.cs",
                "function": "The file configures a server application using ASP.NET Core, setting up SignalR for real-time communication, JWT-based authentication, and response compression. It also defines routes for a chat hub and client-side Blazor files."
            },
            {
                "file": "SignalR/test/Blazor.Extensions.SignalR.Test.Server/Controllers/TokenController.cs",
                "function": "The file defines a controller that generates a JWT token for a user named \"TestUser,\" which expires after one day and is signed using a secret key."
            },
            {
                "file": "SignalR/test/Blazor.Extensions.SignalR.Test.Server/Hubs/ChatHub.cs",
                "function": "The `ChatHub` class is a SignalR hub that facilitates real-time communication by allowing clients to send and receive messages, join and leave groups, and handle various types of data and arguments. It supports broadcasting messages to all clients, sending private messages, and managing group interactions."
            }
        ],
        "gt": "[['SignalR/test/Blazor.Extensions.SignalR.Test.Client/Startup.cs', 'SignalR/test/Blazor.Extensions.SignalR.Test.Server/Hubs/ChatHub.cs', 'SignalR/test/Blazor.Extensions.SignalR.Test.Server/Startup.cs'], ['SignalR/src/Blazor.Extensions.SignalR/JSRuntimeExtensions.cs'], ['SignalR/src/Blazor.Extensions.SignalR/HttpConnectionOptions.cs'], ['SignalR/test/Blazor.Extensions.SignalR.Test.Server/Program.cs'], ['SignalR/src/Blazor.Extensions.SignalR/HubConnectionBuilder.cs'], ['SignalR/test/Blazor.Extensions.SignalR.Test.Server/Controllers/TokenController.cs'], ['SignalR/src/Blazor.Extensions.SignalR/SignalRLogLevel.cs'], ['SignalR/src/Blazor.Extensions.SignalR/HubCloseCallback.cs'], ['SignalR/src/Blazor.Extensions.SignalR/HubConnection.cs'], ['SignalR/test/Blazor.Extensions.SignalR.Test.Client/Program.cs', 'SignalR/test/Blazor.Extensions.SignalR.Test.Server/Hubs/ChatHub.cs', 'SignalR/test/Blazor.Extensions.SignalR.Test.Server/Startup.cs'], ['SignalR/test/Blazor.Extensions.SignalR.Test.Client/DemoData.cs', 'SignalR/test/Blazor.Extensions.SignalR.Test.Server/Hubs/ChatHub.cs', 'SignalR/test/Blazor.Extensions.SignalR.Test.Server/Startup.cs'], ['SignalR/test/Blazor.Extensions.SignalR.Test.Client/Pages/ChatComponent.cs'], ['SignalR/src/Blazor.Extensions.SignalR/HttpTransportType.cs'], ['SignalR/src/Blazor.Extensions.SignalR/HubMethodCallback.cs'], ['SignalR/test/Blazor.Extensions.SignalR.Test.Server/Hubs/ChatHub.cs', 'SignalR/test/Blazor.Extensions.SignalR.Test.Server/Startup.cs'], ['SignalR/test/Blazor.Extensions.SignalR.Test.Server/Startup.cs']]"
    },
    {
        "repo": "unity-raw-input",
        "description": "A Unity wrapper for the Windows Raw Input API to capture keyboard and mouse input.",
        "function": "Allows Unity applications to receive input events even when not in focus, supporting background input processing and event handling for keyboard and mouse actions.",
        "files": [
            {
                "file": "unity-raw-input/Assets/Editor/LogRawInputEditor.cs",
                "function": "This script extends Unity's custom editor to display pressed keys in real-time and provides a help box for disabling intercept in play mode."
            },
            {
                "file": "unity-raw-input/Assets/Editor/PackageExporter.cs",
                "function": "The `PackageExporter` class is a Unity Editor tool that facilitates the export of Unity packages, allowing customization of package settings, handling of ignored assets, and optional integration with Git for publishing. It also supports modifying scripts with custom namespaces and copyright notices during the export process."
            },
            {
                "file": "unity-raw-input/Assets/Runtime/LogRawInput.cs",
                "function": "This script logs keyboard input events (key up and key down) in Unity and allows disabling message interception when the Escape key is pressed."
            },
            {
                "file": "unity-raw-input/Assets/UnityRawInput/Runtime/HookArgs.cs",
                "function": "This file defines structures and enums for handling keyboard and mouse input events in Unity, including conversion methods for interoperability with native code."
            },
            {
                "file": "unity-raw-input/Assets/UnityRawInput/Runtime/HookType.cs",
                "function": "This file defines an enumeration of hook types used for monitoring and intercepting system events in a Windows environment."
            },
            {
                "file": "unity-raw-input/Assets/UnityRawInput/Runtime/RawInput.cs",
                "function": "This file provides a raw input handling service for Unity, capturing keyboard and mouse events, and allowing customization of event handling behavior, including background processing and message interception."
            },
            {
                "file": "unity-raw-input/Assets/UnityRawInput/Runtime/RawKey.cs",
                "function": "This file defines an enumeration of virtual key codes for various keyboard and mouse inputs, mapping them to their respective hexadecimal values."
            },
            {
                "file": "unity-raw-input/Assets/UnityRawInput/Runtime/RawKeyState.cs",
                "function": "Defines an enumeration for keyboard event states, including key down, key up, system key down, and system key up."
            },
            {
                "file": "unity-raw-input/Assets/UnityRawInput/Runtime/RawMouseState.cs",
                "function": "This file defines an enumeration `RawMouseState` that represents various mouse input states and events, such as button presses, releases, and mouse movements."
            },
            {
                "file": "unity-raw-input/Assets/UnityRawInput/Runtime/Win32API.cs",
                "function": "This file provides a wrapper for several Windows API functions related to setting up and managing hooks for keyboard and mouse input in a Windows application."
            }
        ],
        "gt": "[['unity-raw-input/Assets/Editor/PackageExporter.cs'], ['unity-raw-input/Assets/UnityRawInput/Runtime/RawInput.cs', 'unity-raw-input/Assets/Editor/LogRawInputEditor.cs'], ['unity-raw-input/Assets/UnityRawInput/Runtime/HookType.cs'], ['unity-raw-input/Assets/Runtime/LogRawInput.cs'], ['unity-raw-input/Assets/UnityRawInput/Runtime/RawKey.cs'], ['unity-raw-input/Assets/UnityRawInput/Runtime/RawMouseState.cs'], ['unity-raw-input/Assets/UnityRawInput/Runtime/HookArgs.cs', 'unity-raw-input/Assets/Editor/LogRawInputEditor.cs'], ['unity-raw-input/Assets/UnityRawInput/Runtime/Win32API.cs', 'unity-raw-input/Assets/Runtime/LogRawInput.cs'], ['unity-raw-input/Assets/UnityRawInput/Runtime/HookArgs.cs', 'unity-raw-input/Assets/Runtime/LogRawInput.cs'], ['unity-raw-input/Assets/Editor/LogRawInputEditor.cs'], ['unity-raw-input/Assets/UnityRawInput/Runtime/RawKeyState.cs'], ['unity-raw-input/Assets/UnityRawInput/Runtime/RawInput.cs', 'unity-raw-input/Assets/Runtime/LogRawInput.cs'], ['unity-raw-input/Assets/UnityRawInput/Runtime/Win32API.cs', 'unity-raw-input/Assets/Editor/LogRawInputEditor.cs']]"
    },
    {
        "repo": "NoAmci",
        "description": "A proof-of-concept project for bypassing AMSI detections by patching AMSI.dll using DInvoke.",
        "function": "The project allows loading .NET tradecraft, compressed and encoded, into memory after patching AMSI.dll to avoid detection. It includes helper methods for compressing and encoding assemblies, and has been tested with Cobalt Strike's execute-assembly on Windows builds and against an EDR product.",
        "files": [
            {
                "file": "NoAmci/NoAmci/NoAmci/Helper.cs",
                "function": "This file provides compression and decompression utilities using Deflate and GZip algorithms, allowing data to be compressed into byte arrays or files and decompressed from streams or byte arrays."
            },
            {
                "file": "NoAmci/NoAmci/NoAmci/Native.cs",
                "function": "This file defines various structures and enumerations related to native Windows system data types and status codes, primarily used for interoperating with unmanaged code."
            },
            {
                "file": "NoAmci/NoAmci/NoAmci/PE.cs",
                "function": "This file defines a class for parsing and interacting with Portable Executable (PE) files, including reading headers, sections, and exporting functions by name."
            },
            {
                "file": "NoAmci/NoAmci/NoAmci/Program.cs",
                "function": "This program decodes and decompresses a hidden assembly from a resource file, bypasses AMSI (Antimalware Scan Interface) by patching its memory, and then loads and executes the decoded assembly."
            },
            {
                "file": "NoAmci/NoAmci/NoAmci/Win32.cs",
                "function": "The file defines a collection of constants, enums, and structs related to Windows API functionality, including memory management, process and thread control, file access, and security settings, primarily for interop with native Windows libraries."
            },
            {
                "file": "NoAmci/NoAmci/NoAmci/API/Generic.cs",
                "function": "This file provides functionality to dynamically invoke functions from DLLs by resolving their addresses, either by name or by hash, and supports loading DLLs from disk if necessary."
            },
            {
                "file": "NoAmci/NoAmci/NoAmci/API/Native.cs",
                "function": "This file provides methods to interact with native Windows API functions, including initializing Unicode strings, loading DLLs, querying process information, and zeroing memory."
            },
            {
                "file": "NoAmci/NoAmci/NoAmci/API/Win32.cs",
                "function": "This file defines a method `VirtualProtect` in the `Win32` class that wraps the Windows API function `VirtualProtect` to change memory protection settings for a specified region of memory."
            },
            {
                "file": "NoAmci/NoAmci/NoAmci/Properties/AssemblyInfo.cs",
                "function": "The file defines assembly-level attributes for a .NET project named \"NoAmci,\" including versioning, visibility to COM, and general metadata."
            }
        ],
        "gt": "[['NoAmci/NoAmci/NoAmci/Properties/AssemblyInfo.cs'], ['NoAmci/NoAmci/NoAmci/API/Native.cs'], ['NoAmci/NoAmci/NoAmci/API/Win32.cs'], ['NoAmci/NoAmci/NoAmci/PE.cs', 'NoAmci/NoAmci/NoAmci/API/Generic.cs'], ['NoAmci/NoAmci/NoAmci/Program.cs'], ['NoAmci/NoAmci/NoAmci/Native.cs', 'NoAmci/NoAmci/NoAmci/API/Generic.cs'], ['NoAmci/NoAmci/NoAmci/Helper.cs'], ['NoAmci/NoAmci/NoAmci/Win32.cs', 'NoAmci/NoAmci/NoAmci/API/Generic.cs'], ['NoAmci/NoAmci/NoAmci/API/Generic.cs'], ['NoAmci/NoAmci/NoAmci/Win32.cs']]"
    },
    {
        "repo": "Lynda-Decryptor",
        "description": "A tool for decrypting Video2Brain videos and organizing them into a user-friendly folder structure.",
        "function": "Decrypts encrypted Video2Brain video files, renames them with normal titles, and supports additional features like subtitle conversion and database integration for better organization.",
        "files": [
            {
                "file": "Lynda-Decryptor/LyndaDecryptor/CaptionToSrt.cs",
                "function": "The file defines a class `CaptionToSrt` that converts `.caption` subtitle files to `.srt` format by parsing timestamps and subtitle text, ensuring proper formatting, and writing the output to an `.srt` file."
            },
            {
                "file": "Lynda-Decryptor/LyndaDecryptor/Decryptor.cs",
                "function": "The file defines a `Decryptor` class that decrypts encrypted `.lynda` and `.ldcw` files, optionally retrieves metadata from a SQLite database, and converts associated captions to SRT format. It supports multi-threaded decryption with a semaphore for concurrency control and can remove source files after decryption based on user options."
            },
            {
                "file": "Lynda-Decryptor/LyndaDecryptor/DecryptorOptions.cs",
                "function": "The file defines a `DecryptorOptions` class that configures decryption settings, including usage mode, paths for input, output, and database, and options for file handling and output management."
            },
            {
                "file": "Lynda-Decryptor/LyndaDecryptor/Program.cs",
                "function": "The file defines a program for decrypting files or folders using a specified encryption key, with options to remove files after decryption and customize output paths. It supports command-line arguments for specifying decryption mode and additional settings."
            },
            {
                "file": "Lynda-Decryptor/LyndaDecryptor/Utils.cs",
                "function": "This file provides utility functions for a decryption tool, including writing to the console with color, parsing command-line arguments to configure decryption options, and defining an encryption key."
            },
            {
                "file": "Lynda-Decryptor/LyndaDecryptor/VideoInfo.cs",
                "function": "The file defines a `VideoInfo` class that stores metadata about a video, including course and chapter titles, video title, IDs, and indices."
            },
            {
                "file": "Lynda-Decryptor/LyndaDecryptor/Properties/AssemblyInfo.cs",
                "function": "The file defines assembly-level attributes for a tool named \"LyndaDecryptor,\" including its title, version, and visibility to COM components."
            },
            {
                "file": "Lynda-Decryptor/LyndaDecryptorTests/CommandLineParserTest.cs",
                "function": "This file contains unit tests for parsing command-line arguments in a decryption tool, ensuring correct handling of file and folder modes, optional parameters, and error conditions."
            },
            {
                "file": "Lynda-Decryptor/LyndaDecryptorTests/DecryptionTest.cs",
                "function": "This file contains unit tests for the LyndaDecryptor tool, focusing on testing the decryption of single files and folders, with and without database integration."
            },
            {
                "file": "Lynda-Decryptor/LyndaDecryptorTests/Properties/AssemblyInfo.cs",
                "function": "The file defines assembly-level attributes for a project named \"LyndaDecryptorTests,\" including title, description, version, and COM visibility settings."
            }
        ],
        "gt": "[['Lynda-Decryptor/LyndaDecryptor/Decryptor.cs', 'Lynda-Decryptor/LyndaDecryptorTests/CommandLineParserTest.cs'], ['Lynda-Decryptor/LyndaDecryptor/DecryptorOptions.cs'], ['Lynda-Decryptor/LyndaDecryptor/Program.cs', 'Lynda-Decryptor/LyndaDecryptorTests/CommandLineParserTest.cs'], ['Lynda-Decryptor/LyndaDecryptor/CaptionToSrt.cs', 'Lynda-Decryptor/LyndaDecryptorTests/DecryptionTest.cs'], ['Lynda-Decryptor/LyndaDecryptor/VideoInfo.cs', 'Lynda-Decryptor/LyndaDecryptorTests/CommandLineParserTest.cs'], ['Lynda-Decryptor/LyndaDecryptor/Decryptor.cs', 'Lynda-Decryptor/LyndaDecryptorTests/DecryptionTest.cs'], ['Lynda-Decryptor/LyndaDecryptorTests/CommandLineParserTest.cs'], ['Lynda-Decryptor/LyndaDecryptorTests/DecryptionTest.cs'], ['Lynda-Decryptor/LyndaDecryptor/Utils.cs', 'Lynda-Decryptor/LyndaDecryptorTests/CommandLineParserTest.cs'], ['Lynda-Decryptor/LyndaDecryptor/CaptionToSrt.cs', 'Lynda-Decryptor/LyndaDecryptorTests/CommandLineParserTest.cs'], ['Lynda-Decryptor/LyndaDecryptor/Properties/AssemblyInfo.cs'], ['Lynda-Decryptor/LyndaDecryptor/VideoInfo.cs', 'Lynda-Decryptor/LyndaDecryptorTests/DecryptionTest.cs'], ['Lynda-Decryptor/LyndaDecryptor/Utils.cs', 'Lynda-Decryptor/LyndaDecryptorTests/DecryptionTest.cs'], ['Lynda-Decryptor/LyndaDecryptorTests/Properties/AssemblyInfo.cs'], ['Lynda-Decryptor/LyndaDecryptor/Program.cs', 'Lynda-Decryptor/LyndaDecryptorTests/DecryptionTest.cs']]"
    },
    {
        "repo": "TinyPinyin.Net",
        "description": "TinyPinyin.Net \u662f\u4e00\u4e2a\u9002\u7528\u4e8e .Net \u5e73\u53f0\u7684\u6c49\u5b57\u8f6c\u62fc\u97f3\u5e93\u3002",
        "function": "\u8be5\u5e93\u63d0\u4f9b\u9ad8\u6548\u7684\u6c49\u5b57\u8f6c\u62fc\u97f3\u529f\u80fd\uff0c\u751f\u6210\u7684\u62fc\u97f3\u4e0d\u5e26\u58f0\u8c03\u4e14\u4e3a\u5927\u5199\uff0c\u652f\u6301\u83b7\u53d6\u62fc\u97f3\u9996\u5b57\u6bcd\uff0c\u5177\u6709\u9ad8\u6267\u884c\u6548\u7387\u548c\u4f4e\u5185\u5b58\u5360\u7528\u7684\u7279\u70b9\u3002",
        "files": [
            {
                "file": "TinyPinyin.Net/TinyPinyin.DataProcessor/Program.cs",
                "function": "The program processes pinyin code data, converts it into byte arrays, and writes them to separate text files for padding and code data."
            },
            {
                "file": "TinyPinyin.Net/TinyPinyin.DataProcessor/OriginalData/PinyinCode1.cs",
                "function": "The file defines two arrays, `PINYIN_CODE_PADDING` and `PINYIN_CODE`, containing integer values used for pinyin encoding in the TinyPinyin library. These arrays are likely used for mapping characters to their corresponding pinyin representations."
            },
            {
                "file": "TinyPinyin.Net/TinyPinyin.DataProcessor/OriginalData/PinyinCode2.cs",
                "function": "The file defines two static arrays, `PINYIN_CODE` and `PINYIN_CODE_PADDING`, containing integer values used for pinyin code mappings. These arrays are likely part of a library or utility for handling pinyin-related operations, such as converting Chinese characters to their pinyin representations."
            },
            {
                "file": "TinyPinyin.Net/TinyPinyin.DataProcessor/OriginalData/PinyinCode3.cs",
                "function": "The file defines two arrays, `PINYIN_CODE_PADDING` and `PINYIN_CODE`, containing integer values used for pinyin encoding or decoding. These arrays are likely part of a library or tool for processing Chinese pinyin data."
            },
            {
                "file": "TinyPinyin.Net/TinyPinyin.Demo/Program.cs",
                "function": "The file converts Chinese text into Pinyin using the TinyPinyin library and prints the original text alongside its Pinyin equivalent."
            },
            {
                "file": "TinyPinyin.Net/TinyPinyin.Tests/PinyinTest.cs",
                "function": "This file contains unit tests for a Pinyin conversion library, verifying the functionality of converting Chinese characters to Pinyin (phonetic representation) and extracting Pinyin initials, with various scenarios including single characters, phrases, and long texts."
            },
            {
                "file": "TinyPinyin.Net/TinyPinyin/Engine.cs",
                "function": "This file provides functionality to convert Chinese characters to their corresponding Pinyin (Romanized form). It includes methods to handle single characters, check if a character is Chinese, and convert entire strings based on provided dictionaries and separators."
            },
            {
                "file": "TinyPinyin.Net/TinyPinyin/IPinyinDict.cs",
                "function": "The file defines an interface `IPinyinDict` for converting text to pinyin and retrieving a list of supported words."
            },
            {
                "file": "TinyPinyin.Net/TinyPinyin/PinyinDict.cs",
                "function": "The file defines an abstract class `PinyinDict` that provides methods to convert Chinese words to their Pinyin representations and retrieve a list of supported words using a mapping dictionary."
            },
            {
                "file": "TinyPinyin.Net/TinyPinyin/PinyinHelper.cs",
                "function": "The file provides methods to determine if a character is Chinese, retrieve the pinyin of a single character or a string, and extract the initials of pinyin characters from a string."
            },
            {
                "file": "TinyPinyin.Net/TinyPinyin/Data/PinyinCode1.cs",
                "function": "The file defines two byte arrays, `PINYIN_CODE_PADDING` and `PINYIN_CODE`, which store binary data used for pinyin conversion in the TinyPinyin library."
            },
            {
                "file": "TinyPinyin.Net/TinyPinyin/Data/PinyinCode2.cs",
                "function": "The file defines two byte arrays, `PINYIN_CODE_PADDING` and `PINYIN_CODE`, which store binary data used for pinyin conversion in the TinyPinyin library."
            },
            {
                "file": "TinyPinyin.Net/TinyPinyin/Data/PinyinCode3.cs",
                "function": "The file defines two byte arrays, `PINYIN_CODE_PADDING` and `PINYIN_CODE`, which store binary data used for pinyin conversion in the TinyPinyin library."
            },
            {
                "file": "TinyPinyin.Net/TinyPinyin/Data/PinyinData.cs",
                "function": "The file defines constants and a lookup table for converting Chinese characters to their corresponding Pinyin representations, including Unicode ranges and specific mappings for Pinyin codes."
            }
        ],
        "gt": "[['TinyPinyin.Net/TinyPinyin.Tests/PinyinTest.cs'], ['TinyPinyin.Net/TinyPinyin.DataProcessor/Program.cs'], ['TinyPinyin.Net/TinyPinyin/PinyinDict.cs', 'TinyPinyin.Net/TinyPinyin.Demo/Program.cs'], ['TinyPinyin.Net/TinyPinyin.Demo/Program.cs'], ['TinyPinyin.Net/TinyPinyin/Data/PinyinCode1.cs'], ['TinyPinyin.Net/TinyPinyin/Data/PinyinCode3.cs'], ['TinyPinyin.Net/TinyPinyin.DataProcessor/OriginalData/PinyinCode3.cs'], ['TinyPinyin.Net/TinyPinyin.DataProcessor/OriginalData/PinyinCode1.cs'], ['TinyPinyin.Net/TinyPinyin/IPinyinDict.cs', 'TinyPinyin.Net/TinyPinyin.Demo/Program.cs'], ['TinyPinyin.Net/TinyPinyin/Data/PinyinCode2.cs'], ['TinyPinyin.Net/TinyPinyin/PinyinHelper.cs', 'TinyPinyin.Net/TinyPinyin.Demo/Program.cs'], ['TinyPinyin.Net/TinyPinyin.DataProcessor/OriginalData/PinyinCode2.cs'], ['TinyPinyin.Net/TinyPinyin/Engine.cs', 'TinyPinyin.Net/TinyPinyin.Demo/Program.cs'], ['TinyPinyin.Net/TinyPinyin/Data/PinyinData.cs', 'TinyPinyin.Net/TinyPinyin/Engine.cs', 'TinyPinyin.Net/TinyPinyin.Demo/Program.cs']]"
    },
    {
        "repo": "4D-Raymarching",
        "description": "A Unity framework for creating 4D spatial games using raymarching.",
        "function": "Expands objects into the 4th dimension (x, y, z, w) and renders them in 3D space by fixing the W axis. Allows placement of objects with customizable 4D transformations and boolean operations, and provides rendering controls for colors, shadows, and visual settings.",
        "files": [
            {
                "file": "4D-Raymarching/Assets/Plugins/GitHub/Editor/ExtensionLoader.cs",
                "function": "The file defines an extension loader for Unity that initializes and toggles the compatibility of GitHub-related assemblies based on the environment and source mode. It ensures the correct assemblies are enabled or disabled for the editor."
            },
            {
                "file": "4D-Raymarching/Assets/Plugins/GitHub/Editor/UnityAPIWrapper.cs",
                "function": "The file defines a wrapper class `UnityAPIWrapper` that hooks into Unity's `Editor.finishedDefaultHeaderGUI` event to call a corresponding method in `UnityShim` for Unity 2018.2 or newer versions."
            },
            {
                "file": "4D-Raymarching/Assets/Scripts/DistanceFunctions.cs",
                "function": "The file defines a collection of distance functions for various geometric shapes, including spheres, boxes, hypercubes, and 4D shapes, as well as operations for combining and blending these shapes."
            },
            {
                "file": "4D-Raymarching/Assets/Scripts/PlayerController.cs",
                "function": "This script controls a 3D player's movement in Unity, allowing horizontal and vertical input to move the player and resetting the player's position if they fall below a specified death distance."
            },
            {
                "file": "4D-Raymarching/Assets/Scripts/PlayerRayMarchCollider.cs",
                "function": "This script implements a player collision detection system using raymarching, allowing the player to interact with 4D shapes by calculating distances and adjusting the player's position accordingly. It also includes functionality to move the player to the ground based on the distance field."
            },
            {
                "file": "4D-Raymarching/Assets/Scripts/RaymarchCam.cs",
                "function": "The script connects a Unity camera to a raymarching shader, rendering 3D shapes by sending camera and scene data to the shader, and handles the rendering process by updating shader parameters and managing compute buffers for shape data."
            },
            {
                "file": "4D-Raymarching/Assets/Scripts/SceneViewFilter.cs",
                "function": "This script synchronizes filters between the main camera and the SceneView camera in the Unity Editor, ensuring that any changes to filters on the main camera are reflected in the SceneView."
            },
            {
                "file": "4D-Raymarching/Assets/Scripts/Shape4D.cs",
                "function": "The `Shape4D` class extends Unity's `MonoBehaviour` to handle 4D shapes and transformations, including position, rotation, and scale in four dimensions, with support for various shape types and operations."
            },
            {
                "file": "4D-Raymarching/Assets/Scripts/WSlider.cs",
                "function": "The script allows a slider to control the W position of a RaymarchCam, updating it in real-time based on the slider's value."
            }
        ],
        "gt": "[['4D-Raymarching/Assets/Scripts/DistanceFunctions.cs', '4D-Raymarching/Assets/Scripts/PlayerController.cs'], ['4D-Raymarching/Assets/Scripts/Shape4D.cs'], ['4D-Raymarching/Assets/Plugins/GitHub/Editor/UnityAPIWrapper.cs'], ['4D-Raymarching/Assets/Scripts/SceneViewFilter.cs'], ['4D-Raymarching/Assets/Scripts/WSlider.cs'], ['4D-Raymarching/Assets/Scripts/PlayerController.cs'], ['4D-Raymarching/Assets/Plugins/GitHub/Editor/ExtensionLoader.cs'], ['4D-Raymarching/Assets/Scripts/RaymarchCam.cs'], ['4D-Raymarching/Assets/Scripts/PlayerRayMarchCollider.cs', '4D-Raymarching/Assets/Scripts/PlayerController.cs']]"
    },
    {
        "repo": "ValueObject",
        "description": "A micro library for creating C# classes with value semantics.",
        "function": "Provides an abstract base class that overrides equality methods and operators, allowing easy implementation of value objects. Supports ignoring specific properties or fields in comparisons using the `IgnoreMember` attribute.",
        "files": [
            {
                "file": "ValueObject/ValueObject/IgnoreMemberAttribute.cs",
                "function": "The file defines a custom `IgnoreMemberAttribute` attribute that can be applied to properties and fields to indicate they should be ignored in certain operations."
            },
            {
                "file": "ValueObject/ValueObject/ValueObject.cs",
                "function": "This file defines an abstract `ValueObject` class that implements value object equality by comparing properties and fields, and provides custom equality and hash code generation logic."
            },
            {
                "file": "ValueObject/ValueObjectTests/ValueObjectTests.cs",
                "function": "The file defines unit tests for a `ValueObject` class, ensuring that equality comparisons, hash code generation, and member consideration (including ignoring private and ignored members) work as expected. It tests scenarios like equality between objects, handling null values, and comparing nested objects."
            }
        ],
        "gt": "[['ValueObject/ValueObjectTests/ValueObjectTests.cs'], ['ValueObject/ValueObject/IgnoreMemberAttribute.cs', 'ValueObject/ValueObjectTests/ValueObjectTests.cs'], ['ValueObject/ValueObject/ValueObject.cs', 'ValueObject/ValueObjectTests/ValueObjectTests.cs'], ['ValueObject/ValueObject/IgnoreMemberAttribute.cs']]"
    },
    {
        "repo": "ZenSharp",
        "description": "A plugin for ReSharper that provides a language for defining custom live templates.",
        "function": "Allows users to create and expand custom code snippets using flexible shortcuts, enhancing productivity in C# development. Includes predefined templates for properties, methods, classes, and more.",
        "files": [
            {
                "file": "ZenSharp/ZenSharp.Core/ZenSharp.Core.Tests/ExpandTestGenerator.cs",
                "function": "The file defines test cases for parsing and expanding templates in C# and other contexts, using a custom parser and matcher. It tests the functionality of generating and validating template expansions based on predefined rules and scopes."
            },
            {
                "file": "ZenSharp/ZenSharp.Core/ZenSharp.Core.Tests/GetContextTests.cs",
                "function": "The file contains a test class that iterates through positions in a test file string and prints the context retrieved by the `ErrorContextLocator.GetContext` method for each position."
            },
            {
                "file": "ZenSharp/ZenSharp.Core/ZenSharp.Core.Tests/LeafRulesMatchTest.cs",
                "function": "This file contains unit tests for the `LeafRule` class, focusing on verifying the functionality of different rule types (`ExpandRule`, `NonTerminal`, `Substitution`, and `String`) and their matching behavior."
            },
            {
                "file": "ZenSharp/ZenSharp.Core/ZenSharp.Core.Tests/LiveTemplateMatcherTests.cs",
                "function": "This file contains unit tests for the `LiveTemplateMatcher` class, focusing on validating the matching functionality of live templates using rules and scopes."
            },
            {
                "file": "ZenSharp/ZenSharp.Core/ZenSharp.Core.Tests/TestParser.cs",
                "function": "The file defines a test class for testing a parser (`LtgParser`) using NUnit, but the test method is incomplete and lacks actual test logic."
            },
            {
                "file": "ZenSharp/ZenSharp.Core/ZenSharp.Core.Tests/Doc/RailroadGenerator.cs",
                "function": "The file defines a test class `RailroadGenerator` that generates an HTML file (`out.html`) to visualize railroad diagrams based on grammar rules parsed from a template file. It processes and formats these rules into a structured HTML document with embedded JavaScript for rendering."
            },
            {
                "file": "ZenSharp/ZenSharp.Core/ZenSharp.Core.Tests/Properties/AssemblyInfo.cs",
                "function": "This file defines assembly-level attributes for the \"ZenSharp.Core.Tests\" project, including versioning, visibility to COM, and general metadata."
            },
            {
                "file": "ZenSharp/ZenSharp.Integration/CSharpExtendedScopeProvider.cs",
                "function": "The file defines a `CSharpExtendedScopeProvider` class that identifies and provides scope points for live template contexts in C# code, determining the specific context (e.g., within a class, enum, or expression) based on the caret position and surrounding code structure."
            },
            {
                "file": "ZenSharp/ZenSharp.Integration/EditConfigActionHandler.cs",
                "function": "The file defines a group and an action handler for editing ZenSharp templates in a JetBrains IDE. The action checks for an active solution and opens the ZenSharp template file for editing."
            },
            {
                "file": "ZenSharp/ZenSharp.Integration/LtgConfigWatcher.cs",
                "function": "The `LtgConfigWatcher` class monitors a configuration file for changes, automatically reloading it when modified. It also ensures default templates are written if the file does not exist and sets up a `FileSystemWatcher` to track changes in the file."
            },
            {
                "file": "ZenSharp/ZenSharp.Integration/ZenSharpItemsProvider.cs",
                "function": "The file defines a code completion provider for ZenSharp, integrating with ReSharper to suggest and add lookup items based on predefined templates and scopes, if they match the current context."
            },
            {
                "file": "ZenSharp/ZenSharp.Integration/ZenSharpLookupItem.cs",
                "function": "The `ZenSharpLookupItem` class extends `TemplateLookupItem` to provide dynamic code completion and template matching functionality within specified scopes, leveraging a `GenerateTree` for matching and expanding templates based on user input."
            },
            {
                "file": "ZenSharp/ZenSharp.Integration/ZenSharpSettings.cs",
                "function": "The file defines a settings class for ZenSharp, managing the path to a template file (`ltg`). It provides a method to resolve the absolute path of the file, using a default directory if the path is not rooted."
            },
            {
                "file": "ZenSharp/ZenSharp.Integration/ZoneMarker.cs",
                "function": "Defines a zone for integrating ZenSharp auto-completion functionality into a development environment, requiring text controls, Visual Studio backend support, and C# language features."
            },
            {
                "file": "ZenSharp/ZenSharp.Integration/Extension/LeafSubstitution.cs",
                "function": "The file defines an extension method `Macros` for the `LeafRule.Substitution` class, allowing retrieval of the \"macros\" value from the rule."
            },
            {
                "file": "ZenSharp/ZenSharp.Integration/Extension/MatchResultExtension.cs",
                "function": "The file defines an extension method `ExpandDisplay` for `LiveTemplateMatcher.MatchResult` that expands a matched template with a given prefix and removes the `$END$` placeholder."
            },
            {
                "file": "ZenSharp/ZenSharp.Integration/Option/ExceptionConverter.cs",
                "function": "This file defines an `ExceptionConverter` class that implements `IValueConverter` to convert an `Exception` object into a formatted string containing the exception message and stack trace."
            },
            {
                "file": "ZenSharp/ZenSharp.Integration/Option/ZenSettingsPage.xaml.cs",
                "function": "The file defines a settings page (`ZenSettingsPage`) for configuring ZenSharp in a WPF application, allowing users to set a file path via a file dialog and handle navigation events."
            }
        ],
        "gt": "[['ZenSharp/ZenSharp.Core/ZenSharp.Core.Tests/Properties/AssemblyInfo.cs'], ['ZenSharp/ZenSharp.Core/ZenSharp.Core.Tests/TestParser.cs'], ['ZenSharp/ZenSharp.Integration/Extension/MatchResultExtension.cs', 'ZenSharp/ZenSharp.Integration/ZenSharpLookupItem.cs'], ['ZenSharp/ZenSharp.Core/ZenSharp.Core.Tests/GetContextTests.cs'], ['ZenSharp/ZenSharp.Integration/ZenSharpSettings.cs'], ['ZenSharp/ZenSharp.Integration/ZenSharpItemsProvider.cs'], ['ZenSharp/ZenSharp.Integration/Option/ExceptionConverter.cs'], ['ZenSharp/ZenSharp.Integration/Extension/LeafSubstitution.cs', 'ZenSharp/ZenSharp.Integration/ZenSharpLookupItem.cs'], ['ZenSharp/ZenSharp.Core/ZenSharp.Core.Tests/LeafRulesMatchTest.cs'], ['ZenSharp/ZenSharp.Integration/CSharpExtendedScopeProvider.cs'], ['ZenSharp/ZenSharp.Core/ZenSharp.Core.Tests/ExpandTestGenerator.cs'], ['ZenSharp/ZenSharp.Integration/EditConfigActionHandler.cs'], ['ZenSharp/ZenSharp.Integration/LtgConfigWatcher.cs'], ['ZenSharp/ZenSharp.Core/ZenSharp.Core.Tests/Doc/RailroadGenerator.cs'], ['ZenSharp/ZenSharp.Integration/ZoneMarker.cs'], ['ZenSharp/ZenSharp.Core/ZenSharp.Core.Tests/LiveTemplateMatcherTests.cs'], ['ZenSharp/ZenSharp.Integration/Option/ZenSettingsPage.xaml.cs'], ['ZenSharp/ZenSharp.Integration/ZenSharpLookupItem.cs']]"
    },
    {
        "repo": "Editise",
        "description": "A lightweight .NET C# Blazor CMS for building microsites and brochure websites.",
        "function": "Allows content to be sourced from Word DOCX files, with sections defined by H1 headers. It is designed to be fast, cross-platform, and suitable for serverless environments.",
        "files": [
            {
                "file": "Editise/Docusert/ExampleJsInterop.cs",
                "function": "The file defines a .NET class `ExampleJsInterop` that wraps JavaScript functionality for use in Blazor components, allowing asynchronous interaction with a JavaScript module."
            },
            {
                "file": "Editise/Docusert/Components/Docusert.razor.cs",
                "function": "The file defines a Blazor component named `Docusert` with parameters for document and block selection, and a boolean for plaintext output. It includes a method to strip HTML tags from a given string using a regular expression."
            },
            {
                "file": "Editise/Editise/Program.cs",
                "function": "This file sets up a Blazor server-side application, configuring services like Razor Pages, a content service, and Blazor, and defining the HTTP request pipeline for handling routes and static files."
            },
            {
                "file": "Editise/Editise/Pages/Error.cshtml.cs",
                "function": "The file defines an `ErrorModel` Razor Page in an ASP.NET Core application, handling error display by capturing and displaying the current request ID, and logging errors."
            },
            {
                "file": "Editise/Editise/Shared/MainLayout.razor.cs",
                "function": "This code dynamically adds a CSS class to the main div based on the current page's type, using the page name in lowercase."
            },
            {
                "file": "Editise/Editiser/Components/ClearCache.razor.cs",
                "function": "The file defines a component that clears the application cache and refreshes the current page."
            },
            {
                "file": "Editise/Editiser/Components/Docusert.razor.cs",
                "function": "The file defines a Blazor component named `Docusert` with parameters for document and block selection, and a boolean for plaintext mode. It includes a method `StripHTML` to remove HTML tags from a given string."
            },
            {
                "file": "Editise/Editiser/Services/ContentService.cs",
                "function": "The file defines a `ContentService` class that reads and parses `.docx` files, extracting content such as paragraphs and tables, and converting them into HTML format. It stores the parsed content in a dictionary for later use and provides methods to manage and check the content cache."
            },
            {
                "file": "Editise/Editiser/Services/IContentService.cs",
                "function": "The file defines an interface `IContentService` for managing content blocks, including properties for a dictionary of blocks, a development mode flag, and methods to clear the cache and check for the presence of specific blocks."
            }
        ],
        "gt": "[['Editise/Editiser/Components/Docusert.razor.cs'], ['Editise/Editiser/Services/IContentService.cs', 'Editise/Editise/Program.cs'], ['Editise/Editiser/Services/ContentService.cs', 'Editise/Editise/Program.cs'], ['Editise/Editise/Program.cs'], ['Editise/Editise/Pages/Error.cshtml.cs'], ['Editise/Docusert/Components/Docusert.razor.cs'], ['Editise/Docusert/ExampleJsInterop.cs'], ['Editise/Editiser/Components/ClearCache.razor.cs'], ['Editise/Editise/Shared/MainLayout.razor.cs']]"
    },
    {
        "repo": "Kling",
        "description": "Kling is a visual keylogger for Windows that displays pressed keys on the screen.",
        "function": "It visually displays keys, detects multiple keys and key holds, and allows customization of display location and duration.",
        "files": [
            {
                "file": "Kling/Context.cs",
                "function": "The file defines a keylogger application that captures and displays keyboard inputs, manages settings, and provides a system tray icon for controlling the application's functionality. It also logs key presses to a file and allows toggling recording, showing settings, and restarting the application."
            },
            {
                "file": "Kling/Program.cs",
                "function": "This file defines a Windows Forms application that ensures only one instance runs at a time using a mutex. It initializes the application and handles exceptions by displaying error messages in a message box."
            },
            {
                "file": "Kling/display.Designer.cs",
                "function": "The file defines a Windows Form named `display` with a single label (`label1`) that displays \"CTRL + X\" in large white text on a black background. The form has no border and can be manually positioned."
            },
            {
                "file": "Kling/display.cs",
                "function": "This file defines a Windows Forms application that creates a transparent, topmost window with customizable text, which does not appear in the taskbar."
            },
            {
                "file": "Kling/Components/AboutUI.xaml.cs",
                "function": "The file defines a WPF `AboutUI` window that includes a button to open the GitHub repository for the \"Kling\" project when clicked."
            },
            {
                "file": "Kling/Components/CodeUI.xaml.cs",
                "function": "The file defines a `CodeUI` class that extends a WPF `Window`, allowing it to display text and automatically close after a specified time. It also provides methods to set the window's text, location, and move it upwards."
            },
            {
                "file": "Kling/Components/IniFile.cs",
                "function": "The file defines a class `IniFile` for managing INI configuration files, providing methods to read, write, delete keys and sections, and check for key existence."
            },
            {
                "file": "Kling/Components/SettingsUI.xaml.cs",
                "function": "The `SettingsUI` class provides a settings window for configuring display options, including location, opacity, display time, and key logging. It allows users to save and load these settings to/from a `config.ini` file and provides validation for numeric inputs."
            },
            {
                "file": "Kling/Components/Properties/AssemblyInfo.cs",
                "function": "This file defines assembly-level attributes for a .NET project, including metadata, versioning, and resource handling, while configuring visibility to COM and theme resource dictionaries."
            },
            {
                "file": "Kling/Components/Properties/Resources.Designer.cs",
                "function": "This file defines a strongly-typed resource class for managing localized resources such as bitmaps (e.g., `github`, `keyboard`, `visitweb`) within the `Components.Properties` namespace."
            },
            {
                "file": "Kling/Components/Properties/Settings.Designer.cs",
                "function": "The file defines a `Settings` class for managing application settings, providing a default instance accessible via the `Default` property."
            },
            {
                "file": "Kling/Properties/AssemblyInfo.cs",
                "function": "The file defines assembly-level attributes for a project named \"Kling,\" including metadata such as title, description, company, and version information, while also configuring COM visibility and a unique GUID for identification."
            },
            {
                "file": "Kling/Properties/Resources.Designer.cs",
                "function": "The file defines a strongly-typed resource class for managing localized resources such as icons and bitmaps, providing methods to access and retrieve these resources."
            },
            {
                "file": "Kling/Properties/Settings.Designer.cs",
                "function": "The file defines a settings class for an application, allowing access to default settings through a static instance."
            }
        ],
        "gt": "[['Kling/Components/IniFile.cs', 'Kling/Context.cs'], ['Kling/Components/Properties/Settings.Designer.cs'], ['Kling/Properties/AssemblyInfo.cs'], ['Kling/Properties/Resources.Designer.cs'], ['Kling/Components/AboutUI.xaml.cs', 'Kling/Context.cs'], ['Kling/Context.cs'], ['Kling/display.cs'], ['Kling/display.Designer.cs'], ['Kling/Program.cs'], ['Kling/Components/Properties/Resources.Designer.cs'], ['Kling/Components/SettingsUI.xaml.cs', 'Kling/Context.cs'], ['Kling/Components/Properties/AssemblyInfo.cs'], ['Kling/Components/CodeUI.xaml.cs', 'Kling/Context.cs'], ['Kling/Properties/Settings.Designer.cs'], ['Kling/Components/IniFile.cs']]"
    },
    {
        "repo": "OSCmooth",
        "description": "OSCmooth is a VRCSDK tool designed to smooth out animations for OSC-controlled parameters in VRChat avatars.",
        "function": "It automates the creation of smoothing blendtrees to fix choppy face-tracking and stuttery animations, providing a seamless experience for both local and remote users.",
        "files": [
            {
                "file": "OSCmooth/Packages/dev.azmidi.oscmooth/Script/OSCmoothBehavior.cs",
                "function": "The file defines an `OSCmoothBehavior` class in Unity, which is used for managing OSCmooth setup and custom animation layers, primarily for avatar customization in VRChat."
            },
            {
                "file": "OSCmooth/Packages/dev.azmidi.oscmooth/Script/OSCmoothFilters.cs",
                "function": "The `OSCmNameManager` class manages naming conventions for various prefixes and suffixes used in OSCmooth, including handling legacy naming formats and generating shuffled strings for parameters."
            },
            {
                "file": "OSCmooth/Packages/dev.azmidi.oscmooth/Script/OSCmoothTypes.cs",
                "function": "This file defines a setup for OSCmooth, including parameters for smoothing and encoding/decoding options, and provides an enum and extension methods for handling animation layer types."
            },
            {
                "file": "OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothAnimationHandler.cs",
                "function": "The `OSCmoothAnimationHandler` class manages the creation, modification, and removal of animation layers and parameters in Unity's Animator Controller, specifically for handling OSCmooth-related animations. It supports creating binary encoders, smoothing layers, and direct drive layers, as well as renaming and cleaning up parameters and layers within the Animator Controller."
            },
            {
                "file": "OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs",
                "function": "The file defines a custom Unity editor for the `OSCmoothBehavior` script, allowing users to configure and manage OSCmooth parameters for avatars, including binary parameter settings, animation layer selection, and parameter usage tracking. It provides tools for debugging, cleaning up old setups, and managing expression parameters."
            },
            {
                "file": "OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothCallbacks.cs",
                "function": "The file defines pre- and post-processing steps for VRChat avatars using the OSCmooth system. The `OSCmoothPreprocessor` applies custom animation layers and expression parameters to the avatar during preprocessing, while the `OSCmoothPostprocessor` restores the original animation layers and expression parameters after processing."
            },
            {
                "file": "OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothParameterUtil.cs",
                "function": "This file provides utility methods for managing and manipulating VRChat avatar expression parameters, including adding, removing, and calculating their costs, as well as creating and managing AnimatorController parameters."
            }
        ],
        "gt": "[['OSCmooth/Packages/dev.azmidi.oscmooth/Script/OSCmoothTypes.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/OSCmoothFilters.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothCallbacks.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/OSCmoothBehavior.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothParameterUtil.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothAnimationHandler.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothAnimationHandler.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/OSCmoothTypes.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/OSCmoothBehavior.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothParameterUtil.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothCallbacks.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/OSCmoothTypes.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothParameterUtil.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothCallbacks.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothParameterUtil.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothAnimationHandler.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothCallbacks.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/OSCmoothTypes.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothAnimationHandler.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothAnimationHandler.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothCallbacks.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/OSCmoothTypes.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothCallbacks.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/OSCmoothTypes.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothParameterUtil.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothAnimationHandler.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothCallbacks.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/OSCmoothTypes.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothAnimationHandler.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothCallbacks.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs'], ['OSCmooth/Packages/dev.azmidi.oscmooth/Script/OSCmoothTypes.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothParameterUtil.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothAnimationHandler.cs', 'OSCmooth/Packages/dev.azmidi.oscmooth/Script/Editor/OSCmoothBehaviorEditor.cs']]"
    },
    {
        "repo": "jsonp_info_leak",
        "description": "A tool for identifying privacy leaks through vulnerable JSONP (JSON with Padding) endpoints.",
        "function": "Helps discover sensitive JSONP interfaces that may expose user privacy by analyzing and exploiting JSONP vulnerabilities.",
        "files": [
            {
                "file": "jsonp_info_leak/FiddlerCoreAPI/SampleApp/Program.cs",
                "function": "This program demonstrates how to use the FiddlerCore library to capture and manipulate HTTP/HTTPS traffic, including handling sessions, managing secure endpoints, and optionally saving/loading sessions to/from SAZ files."
            },
            {
                "file": "jsonp_info_leak/FiddlerCoreAPI/SampleApp/SAZ-DotNetZip.cs",
                "function": "The file defines classes for creating and reading encrypted SAZ archives, which are used to store web session data. It supports encryption, password handling, and managing file streams within the archive."
            },
            {
                "file": "jsonp_info_leak/FiddlerCoreAPI/SampleApp/Properties/AssemblyInfo.cs",
                "function": "This file defines assembly metadata for a product named \"Demo,\" including title, description, version, and copyright information."
            }
        ],
        "gt": "[['jsonp_info_leak/FiddlerCoreAPI/SampleApp/Program.cs'], ['jsonp_info_leak/FiddlerCoreAPI/SampleApp/Properties/AssemblyInfo.cs'], ['jsonp_info_leak/FiddlerCoreAPI/SampleApp/SAZ-DotNetZip.cs', 'jsonp_info_leak/FiddlerCoreAPI/SampleApp/Program.cs']]"
    },
    {
        "repo": "UnityTerrainErosionGPU",
        "description": "A Unity project implementing hydraulic and thermal erosion using compute shaders for terrain simulation.",
        "function": "Simulates hydraulic and thermal erosion on terrains, allowing water flow and sediment transport. Features include water flow computation, sediment erosion and deposition, and thermal erosion effects. The simulation is GPU-accelerated using compute shaders.",
        "files": [
            {
                "file": "UnityTerrainErosionGPU/Assets/Scripts/ChunkedPlane.cs",
                "function": "The `ChunkedPlane` script generates a terrain divided into chunks with customizable LOD (Level of Detail) settings, allowing for efficient rendering and dynamic cross-fading transitions. It supports shadow casting, receiving shadows, and dynamic occlusion, and can instantiate materials for each chunk."
            },
            {
                "file": "UnityTerrainErosionGPU/Assets/Scripts/Simulation.cs",
                "function": "The `Simulation` class manages a terrain erosion simulation using a compute shader, handling hydraulic and thermal erosion processes. It allows real-time interaction with the terrain, such as adding or removing water and terrain, and visualizes the results through render textures and materials."
            },
            {
                "file": "UnityTerrainErosionGPU/Assets/Scripts/UnityTerrainAdapter.cs",
                "function": "The script adapts a Unity Terrain component to interface with a simulation, updating the simulation's surface data with the terrain's data during runtime."
            },
            {
                "file": "UnityTerrainErosionGPU/Assets/Scripts/WaterBoundary.cs",
                "function": "The `WaterBoundary` class generates a boundary plane with specified size and resolution, using a custom shader material to create water-like effects in Unity. It dynamically creates and positions four planes to form the boundary."
            },
            {
                "file": "UnityTerrainErosionGPU/Assets/Scripts/Utils/Debugger.cs",
                "function": "The file defines a debugging utility for Unity, providing a customizable GUI for displaying and interacting with various data types, including strings, numbers, textures, and complex objects. It supports hierarchical display, logging, and reflection-based inspection of objects, with widgets for rendering different data types."
            },
            {
                "file": "UnityTerrainErosionGPU/Assets/Scripts/Utils/FixedSizeStack.cs",
                "function": "This file defines a `FixedSizeStack<T>` class, which implements a stack with a fixed capacity, supporting operations like push, pop, peek, and enumeration."
            },
            {
                "file": "UnityTerrainErosionGPU/Assets/Scripts/Utils/FlyingCamera.cs",
                "function": "The script implements a flying camera in Unity, allowing the user to control camera movement with keyboard inputs and rotation with mouse movement, with adjustable speed and sensitivity."
            },
            {
                "file": "UnityTerrainErosionGPU/Assets/Scripts/Utils/LazySingleton.cs",
                "function": "The file defines a generic LazySingleton class for Unity, ensuring that only one instance of a given MonoBehaviour-derived class exists, creating it if necessary."
            },
            {
                "file": "UnityTerrainErosionGPU/Assets/Scripts/Utils/MeshUtils.cs",
                "function": "This utility generates a customizable plane mesh in Unity, allowing specification of origin, axes, vertex counts, and UV mapping."
            },
            {
                "file": "UnityTerrainErosionGPU/Assets/Scripts/Utils/ShowRendererBounds.cs",
                "function": "This script visualizes the bounding box of a GameObject's renderer in Unity using Gizmos, with the color of the bounding box configurable."
            }
        ],
        "gt": "[['UnityTerrainErosionGPU/Assets/Scripts/ChunkedPlane.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/UnityTerrainAdapter.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/Utils/Debugger.cs', 'UnityTerrainErosionGPU/Assets/Scripts/Simulation.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/Utils/LazySingleton.cs', 'UnityTerrainErosionGPU/Assets/Scripts/Simulation.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/Utils/FixedSizeStack.cs', 'UnityTerrainErosionGPU/Assets/Scripts/ChunkedPlane.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/WaterBoundary.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/Utils/ShowRendererBounds.cs', 'UnityTerrainErosionGPU/Assets/Scripts/Simulation.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/Utils/ShowRendererBounds.cs', 'UnityTerrainErosionGPU/Assets/Scripts/ChunkedPlane.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/Utils/Debugger.cs', 'UnityTerrainErosionGPU/Assets/Scripts/ChunkedPlane.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/Simulation.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/Utils/FixedSizeStack.cs', 'UnityTerrainErosionGPU/Assets/Scripts/Simulation.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/Utils/FlyingCamera.cs', 'UnityTerrainErosionGPU/Assets/Scripts/ChunkedPlane.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/Utils/MeshUtils.cs', 'UnityTerrainErosionGPU/Assets/Scripts/WaterBoundary.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/Utils/FlyingCamera.cs', 'UnityTerrainErosionGPU/Assets/Scripts/Simulation.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/Utils/LazySingleton.cs', 'UnityTerrainErosionGPU/Assets/Scripts/ChunkedPlane.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/Utils/MeshUtils.cs', 'UnityTerrainErosionGPU/Assets/Scripts/ChunkedPlane.cs'], ['UnityTerrainErosionGPU/Assets/Scripts/Utils/ShowRendererBounds.cs']]"
    },
    {
        "repo": "elevate.metabase.tools",
        "description": "A tool for managing and versioning Metabase data.",
        "function": "Enables the export and import of Metabase collections, dashboards, and SQL-defined questions to/from JSON files for version control. Supports command-line, JSON, and environment variable configurations.",
        "files": [
            {
                "file": "elevate.metabase.tools/Tests/Tests.cs",
                "function": "The file contains integration tests for importing, testing, and exporting data using Metabase and PostgreSQL within Docker containers. It verifies that the exported data matches the imported data after processing."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/ApiObjectIds.cs",
                "function": "The file defines several readonly structs (CardId, CollectionId, DashboardId, DashboardCardId, DatabaseId) that encapsulate integer values, providing comparison, equality, and JSON serialization functionality."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/ApiObjects.cs",
                "function": "The file defines classes to represent and manage data structures for a Metabase exporter, including cards, dashboards, collections, and their associated metadata, queries, and visualization settings. It supports native query types and embedding configurations."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/Config.cs",
                "function": "This file defines a configuration system for a Metabase exporter, supporting three main operations: exporting data to a file, importing data from a file, and testing questions. Each operation is represented as a sealed record with specific properties and a `Switch` method for type-specific behavior."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/GeneralExtensions.cs",
                "function": "This file provides utility methods for traversing and sequencing tasks, generating MD5 hashes in Base64 format, and retrieving values from dictionaries with error handling."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/JObj.cs",
                "function": "The file provides utility methods to construct and manipulate JSON objects and properties using the Newtonsoft.Json library, ensuring safer and more controlled JSON creation."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/MetabaseApi.cs",
                "function": "The file defines a class `MetabaseApi` that interacts with a Metabase API to perform CRUD operations on cards, dashboards, and collections, including creating, updating, deleting, and retrieving these entities, as well as running queries on cards."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/MetabaseApiException.cs",
                "function": "Defines a custom exception class, `MetabaseApiException`, for handling errors specific to the Metabase API, allowing for detailed error messages and inner exceptions."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/MetabaseApiExport.cs",
                "function": "The file defines a static class `MetabaseApiExport` that provides methods to export and map Metabase data, including collections, cards, and dashboards, while excluding archived items and optionally personal collections. It ensures that IDs are renumbered and mapped correctly during the export process."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/MetabaseApiImport.cs",
                "function": "This file provides functionality to import and synchronize Metabase data, including collections, cards, and dashboards, by deleting existing data and recreating it based on a provided state."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/MetabaseApiSettings.cs",
                "function": "The file defines a record named `MetabaseApiSettings` to store configuration settings for connecting to a Metabase API, including the API URL, credentials, SSL error handling, and timeout."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/MetabaseApiTestQuestions.cs",
                "function": "This file defines a method to test Metabase API cards, categorizing results as Passed, Failed, or Crashed, and outputs the counts of each result type."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/MetabaseSessionTokenManager.cs",
                "function": "The `MetabaseSessionTokenManager` class manages and renews Metabase session tokens, handling token expiration and ensuring authenticated API requests by automatically refreshing the token when necessary."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/MetabaseState.cs",
                "function": "The file defines a `MetabaseState` class to structure Metabase data for import/export operations, including collections, dashboards, and cards."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/NewType.cs",
                "function": "Defines interfaces for creating new types with equality and comparison capabilities, and implements a JSON converter for serializing and deserializing objects of these types."
            },
            {
                "file": "elevate.metabase.tools/metabase-exporter/Program.cs",
                "function": "The file provides functionality to export and import data from a Metabase instance, handling configuration parsing, API initialization, and operations like exporting the current state to a file or importing data from a file into the Metabase instance. It also supports testing questions and managing API settings and session tokens."
            }
        ],
        "gt": "[['elevate.metabase.tools/metabase-exporter/JObj.cs', 'elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/metabase-exporter/Program.cs', 'elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/metabase-exporter/NewType.cs', 'elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/metabase-exporter/ApiObjectIds.cs', 'elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/metabase-exporter/MetabaseApiSettings.cs', 'elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/metabase-exporter/MetabaseApiImport.cs', 'elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/metabase-exporter/MetabaseApiExport.cs', 'elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/metabase-exporter/Config.cs', 'elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/metabase-exporter/MetabaseApi.cs', 'elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/metabase-exporter/MetabaseSessionTokenManager.cs', 'elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/metabase-exporter/MetabaseApiTestQuestions.cs', 'elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/metabase-exporter/GeneralExtensions.cs', 'elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/metabase-exporter/MetabaseState.cs', 'elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/metabase-exporter/ApiObjects.cs', 'elevate.metabase.tools/Tests/Tests.cs'], ['elevate.metabase.tools/metabase-exporter/MetabaseApiException.cs', 'elevate.metabase.tools/Tests/Tests.cs']]"
    },
    {
        "repo": "Unity-Netcode.IO",
        "description": "A Unity plugin enabling secure UDP communication using the Netcode.IO protocol.",
        "function": "Provides client and server APIs for creating, connecting, and managing secure UDP connections. Supports platform-specific implementations and includes utilities for handling byte buffers and memory pooling.",
        "files": [
            {
                "file": "Unity-Netcode.IO/Assets/UnityNetcodeIO/Plugins/NetcodePluginWrapper.cs",
                "function": "The file provides a wrapper for the Netcode.IO API, enabling network communication in Unity. It includes methods for initializing, creating, and managing client connections, sending data, and handling callbacks, with platform-specific implementations for WebGL and other platforms."
            },
            {
                "file": "Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Core/NetcodeClient.cs",
                "function": "The file defines a `NetcodeClient` class in Unity for handling network communication, supporting both WebGL and non-WebGL platforms. It manages client status, packet handling, and connection to a server using a connection token, with methods for sending data and querying client status."
            },
            {
                "file": "Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Core/NetcodePacket.cs",
                "function": "The `NetcodePacket` struct represents a packet of data containing a client ID and a buffer. It provides a method to release the buffer back to a pool after use."
            },
            {
                "file": "Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Core/NetcodeServer.cs",
                "function": "The file defines a `NetcodeServer` class in Unity, which manages a netcode.io server, handling client connections, disconnections, and message events. It provides methods to start, stop, and send payloads to clients, and uses queues to process incoming packets and connection events during the Unity `Update` loop."
            },
            {
                "file": "Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Core/UnityNetcode.cs",
                "function": "This file defines a Unity-based manager for the Netcode.IO networking API, handling client and server creation, support status queries, and message handling, with specific implementations for WebGL."
            },
            {
                "file": "Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Utils/BufferPool.cs",
                "function": "The `BufferPool` class provides a pool of reusable `ByteBuffer` objects, allowing efficient allocation and deallocation of buffers by retrieving them from or returning them to the pool."
            },
            {
                "file": "Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Utils/ByteBuffer.cs",
                "function": "The `ByteBuffer` class provides a resizable array of bytes with methods to resize, copy data, and access individual bytes. It supports efficient memory operations and bounds checking."
            },
            {
                "file": "Unity-Netcode.IO/Assets/UnityNetcodeIO/Test/Scripts/TestNetcodeIOClient.cs",
                "function": "This script initializes and manages a Netcode.IO client in Unity, connecting to a server, handling network messages, and updating UI elements to display connection status, sent packets, and received packets."
            },
            {
                "file": "Unity-Netcode.IO/Assets/UnityNetcodeIO/Test/Scripts/TestNetcodeIOServer.cs",
                "function": "This script sets up a Unity-based server using NetcodeIO to handle client connections, manage client disconnections, and echo back client messages. It also updates the UI to display the number of connected clients."
            }
        ],
        "gt": "[['Unity-Netcode.IO/Assets/UnityNetcodeIO/Test/Scripts/TestNetcodeIOServer.cs'], ['Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Utils/BufferPool.cs'], ['Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Core/UnityNetcode.cs', 'Unity-Netcode.IO/Assets/UnityNetcodeIO/Test/Scripts/TestNetcodeIOClient.cs'], ['Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Core/NetcodePacket.cs'], ['Unity-Netcode.IO/Assets/UnityNetcodeIO/Plugins/NetcodePluginWrapper.cs'], ['Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Core/NetcodeClient.cs', 'Unity-Netcode.IO/Assets/UnityNetcodeIO/Test/Scripts/TestNetcodeIOServer.cs'], ['Unity-Netcode.IO/Assets/UnityNetcodeIO/Test/Scripts/TestNetcodeIOClient.cs'], ['Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Core/NetcodeClient.cs', 'Unity-Netcode.IO/Assets/UnityNetcodeIO/Test/Scripts/TestNetcodeIOClient.cs'], ['Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Core/UnityNetcode.cs', 'Unity-Netcode.IO/Assets/UnityNetcodeIO/Test/Scripts/TestNetcodeIOServer.cs'], ['Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Core/NetcodeServer.cs', 'Unity-Netcode.IO/Assets/UnityNetcodeIO/Test/Scripts/TestNetcodeIOServer.cs'], ['Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Utils/ByteBuffer.cs'], ['Unity-Netcode.IO/Assets/UnityNetcodeIO/Scripts/Core/NetcodeServer.cs', 'Unity-Netcode.IO/Assets/UnityNetcodeIO/Test/Scripts/TestNetcodeIOClient.cs']]"
    },
    {
        "repo": "ULiteWebView",
        "description": "ULiteWebView is a lightweight Unity plugin for embedding WebView functionality.",
        "function": "Supports web browsing, HTML5, Unity-JS interaction, URL schemes, and customizable window sizes. Provides simple APIs for easy integration and usage.",
        "files": [
            {
                "file": "ULiteWebView/Assets/Demo/Demo.cs",
                "function": "This script manages a web view interface in Unity, allowing users to load URLs, display local HTML files, and interact with JavaScript functions, while controlling button visibility and handling UI updates."
            },
            {
                "file": "ULiteWebView/Assets/ULiteWevView/ULiteWebView.cs",
                "function": "The file defines a Unity-based web view component, `ULiteWebView`, which provides functionality to load URLs, display web content, interact with JavaScript, and manage platform-specific implementations for Android and iOS. It supports showing, loading, and closing web views, as well as registering and unregistering JavaScript callbacks."
            }
        ],
        "gt": "[['ULiteWebView/Assets/ULiteWevView/ULiteWebView.cs', 'ULiteWebView/Assets/Demo/Demo.cs'], ['ULiteWebView/Assets/Demo/Demo.cs']]"
    },
    {
        "repo": "JumpList",
        "description": "A tool for parsing and analyzing jump lists, which are used to track recently accessed files and destinations.",
        "function": "Automatically parses and customizes Windows jump lists to extract information about recently accessed files and destinations, aiding in forensic investigations.",
        "files": [
            {
                "file": "JumpList/JumpList.Test/TestMain.cs",
                "function": "This file contains unit tests for parsing and validating Windows Jump List files, specifically for \"automaticDestinations\" and \"customDestinations\" formats, ensuring their structure and content are correctly interpreted."
            },
            {
                "file": "JumpList/JumpList/AppIDList.cs",
                "function": "The file defines an `AppIdList` class that loads and manages a dictionary of application IDs and their descriptions. It can retrieve descriptions by ID and load additional app IDs from a file."
            },
            {
                "file": "JumpList/JumpList/AppIdInfo.cs",
                "function": "The `AppIdInfo` class represents an application identifier with a description, providing a string representation of the app ID and its associated description."
            },
            {
                "file": "JumpList/JumpList/JumpList.cs",
                "function": "The file defines a static class `JumpList` that provides methods to load automatic and custom jump lists from files, parsing them into respective objects."
            },
            {
                "file": "JumpList/JumpList/Automatic/AutomaticDestination.cs",
                "function": "The file defines a class `AutomaticDestination` that processes and extracts information from an OLE container file, specifically focusing on Jump List data. It parses the container to retrieve and organize details about application IDs, destination lists, and associated LNK files, providing methods to dump LNK files and generate a detailed summary of the parsed data."
            },
            {
                "file": "JumpList/JumpList/Automatic/DestList.cs",
                "function": "The `DestList` class parses a byte array representing a destination list, extracting header information and entries based on the version (1 or 3). It processes each entry, determining its size and any additional data, and stores them in a list for further use."
            },
            {
                "file": "JumpList/JumpList/Automatic/DestListEntry.cs",
                "function": "The file defines a `DestListEntry` class that parses and represents metadata from raw byte data, including checksums, GUIDs, timestamps, and file paths, providing detailed information about file access and modification."
            },
            {
                "file": "JumpList/JumpList/Automatic/DestListHeader.cs",
                "function": "The `DestListHeader` class parses and stores metadata from a byte array, including version, entry counts, and revision numbers, and provides a formatted string representation of the data."
            },
            {
                "file": "JumpList/JumpList/Custom/CustomDestination.cs",
                "function": "This class parses and interprets custom destination jump list data, validating signatures, extracting entries, and providing detailed information about the source file, AppId, and individual entries."
            },
            {
                "file": "JumpList/JumpList/Custom/Entry.cs",
                "function": "This class parses and extracts information from raw byte data, specifically identifying and processing `.lnk` file headers, and can dump these `.lnk` files to a specified directory."
            },
            {
                "file": "JumpList/JumpList/Properties/Resources.Designer.cs",
                "function": "The file defines a strongly-typed resource class for managing localized strings and other resources, specifically containing a list of application IDs."
            }
        ],
        "gt": "[['JumpList/JumpList/Automatic/AutomaticDestination.cs'], ['JumpList/JumpList/Automatic/DestListEntry.cs'], ['JumpList/JumpList/AppIdInfo.cs'], ['JumpList/JumpList/Custom/CustomDestination.cs'], ['JumpList/JumpList.Test/TestMain.cs'], ['JumpList/JumpList/Automatic/DestListHeader.cs'], ['JumpList/JumpList/Properties/Resources.Designer.cs', 'JumpList/JumpList/AppIDList.cs'], ['JumpList/JumpList/Automatic/DestList.cs'], ['JumpList/JumpList/AppIDList.cs'], ['JumpList/JumpList/JumpList.cs'], ['JumpList/JumpList/Custom/Entry.cs']]"
    },
    {
        "repo": "geetest",
        "description": "A C# project aimed at cracking Geetest validation.",
        "function": "Utilizes the ServiceStack.Text library to interact with Geetest and retrieve validation data. Provides a simple interface to fetch and display the validation result.",
        "files": [
            {
                "file": "geetest/Geek.cs",
                "function": "The file defines a class `Geek` that interacts with the Geetest API to automate the process of solving captchas. It fetches configuration data, processes images to determine the correct position for solving the captcha, and sends the solution back to the server for validation."
            },
            {
                "file": "geetest/demo/Geek.cs",
                "function": "The file defines a class `Geek` that interacts with the Geetest API to automate the process of solving captchas. It fetches configuration data, loads and processes images, calculates the position of a sliding puzzle, and sends responses to validate the solution."
            },
            {
                "file": "geetest/demo/Program.cs",
                "function": "This file demonstrates a basic usage of the GeetestCrack library to interact with the Geetest API, retrieving and displaying a validation token."
            },
            {
                "file": "geetest/demo/Properties/AssemblyInfo.cs",
                "function": "This file defines metadata and configuration settings for a .NET assembly named \"demo,\" including versioning, COM visibility, and other assembly-level attributes."
            }
        ],
        "gt": "[['geetest/Geek.cs', 'geetest/demo/Program.cs'], ['geetest/demo/Program.cs'], ['geetest/demo/Geek.cs', 'geetest/demo/Program.cs'], ['geetest/demo/Properties/AssemblyInfo.cs'], ['geetest/Geek.cs']]"
    },
    {
        "repo": "SwipeListView",
        "description": "A customizable list view with item swiping functionality for Runtime and Silverlight platforms.",
        "function": "Enables items in a list to be swiped to reveal customizable side options. Supports behaviors like Collapse, Expand, and Disabled, and allows customization of background colors and templates for side items. Includes an event for handling swipe actions.",
        "files": [
            {
                "file": "SwipeListView/Demo/App.xaml.cs",
                "function": "This file defines the main application class for a UWP app, handling initialization, navigation, suspension, and error handling. It sets up the app's lifecycle events and ensures proper navigation to the main page upon launch."
            },
            {
                "file": "SwipeListView/Demo/MainPage.xaml.cs",
                "function": "The file defines a `MainPage` class for a UWP application, handling swipe gestures on a list view to mark emails as unread or delete them, and displaying email details in a message dialog upon click."
            },
            {
                "file": "SwipeListView/Demo/Converters/LeftTextConverter.cs",
                "function": "The `LeftTextConverter` class implements the `IValueConverter` interface to convert a boolean value into a corresponding string (\"Mark as Read\" or \"Mark as Unread\") based on its state. The `ConvertBack` method is not implemented."
            },
            {
                "file": "SwipeListView/Demo/Converters/SubjectForegroundConverter.cs",
                "function": "The `SubjectForegroundConverter` class is a value converter for XAML that changes the foreground color based on a boolean value, using an accent color if true and a specified parameter color if false."
            },
            {
                "file": "SwipeListView/Demo/Properties/AssemblyInfo.cs",
                "function": "This file defines assembly-level attributes for a .NET project named \"Demo,\" including versioning and visibility settings."
            },
            {
                "file": "SwipeListView/Demo/ViewModels/EmailCollection.cs",
                "function": "The `EmailCollection` class is a specialized `ObservableCollection` that initializes and populates a collection of `EmailObject` instances with sample email data."
            },
            {
                "file": "SwipeListView/Demo/ViewModels/EmailObject.cs",
                "function": "The file defines a `EmailObject` class representing an email with properties like sender, subject, body, time, and unread status, implementing `INotifyPropertyChanged` for property change notifications."
            },
            {
                "file": "SwipeListView/Runtime/Universal.UI.Xaml.Controls/ItemSwipeEventArgs.cs",
                "function": "The `ItemSwipeEventArgs` class provides event data for the `SwipeListView.ItemSwipe` event, including the swiped item and the swipe direction."
            },
            {
                "file": "SwipeListView/Runtime/Universal.UI.Xaml.Controls/ItemSwipeEventHandler.cs",
                "function": "Defines a delegate for handling `ItemSwipe` events in a `SwipeListView` control, specifying the sender and event arguments."
            },
            {
                "file": "SwipeListView/Runtime/Universal.UI.Xaml.Controls/SwipeListBehavior.cs",
                "function": "This file defines an enumeration `SwipeListBehavior` with options for controlling swipe actions in a list item, including expanding, collapsing, or disabling swipe functionality."
            },
            {
                "file": "SwipeListView/Runtime/Universal.UI.Xaml.Controls/SwipeListDirection.cs",
                "function": "Defines an enumeration for swipe directions in a swipeable list control, including left, right, and a non-specific direction."
            },
            {
                "file": "SwipeListView/Runtime/Universal.UI.Xaml.Controls/SwipeListView.cs",
                "function": "The file defines a `SwipeListView` control that extends `ListBox` or `ListView` to support swipe gestures on items, allowing customization of left and right swipe behaviors, content templates, and backgrounds, and triggering corresponding commands or events."
            },
            {
                "file": "SwipeListView/Runtime/Universal.UI.Xaml.Controls/SwipeListViewItem.cs",
                "function": "The `SwipeListViewItem` class extends `ListViewItem` to enable swipe gestures for list items, allowing users to swipe left or right to reveal additional content or actions. It supports customizable swipe behaviors, animations, and event handling for swipe actions."
            },
            {
                "file": "SwipeListView/Runtime/Universal.UI.Xaml.Controls/Properties/AssemblyInfo.cs",
                "function": "This file defines assembly attributes for a library named \"Universal.UI.Xaml.Controls,\" including versioning and visibility settings."
            },
            {
                "file": "SwipeListView/Silverlight/Universal.UI.Xaml.Controls/Properties/AssemblyInfo.cs",
                "function": "This file defines assembly attributes for a XAML controls library, including versioning, visibility to COM, and resource language."
            },
            {
                "file": "SwipeListView/Universal/Universal.UI.Xaml.Controls/Properties/AssemblyInfo.cs",
                "function": "This file defines assembly attributes for a library named \"Universal.UI.Xaml.Controls,\" including versioning and visibility settings."
            }
        ],
        "gt": "[['SwipeListView/Runtime/Universal.UI.Xaml.Controls/Properties/AssemblyInfo.cs'], ['SwipeListView/Universal/Universal.UI.Xaml.Controls/Properties/AssemblyInfo.cs'], ['SwipeListView/Demo/Converters/LeftTextConverter.cs'], ['SwipeListView/Demo/ViewModels/EmailObject.cs'], ['SwipeListView/Demo/Properties/AssemblyInfo.cs'], ['SwipeListView/Runtime/Universal.UI.Xaml.Controls/ItemSwipeEventHandler.cs', 'SwipeListView/Demo/MainPage.xaml.cs'], ['SwipeListView/Runtime/Universal.UI.Xaml.Controls/SwipeListBehavior.cs', 'SwipeListView/Demo/MainPage.xaml.cs'], ['SwipeListView/Demo/ViewModels/EmailCollection.cs'], ['SwipeListView/Runtime/Universal.UI.Xaml.Controls/SwipeListViewItem.cs', 'SwipeListView/Demo/MainPage.xaml.cs'], ['SwipeListView/Runtime/Universal.UI.Xaml.Controls/ItemSwipeEventArgs.cs', 'SwipeListView/Demo/MainPage.xaml.cs'], ['SwipeListView/Demo/Converters/SubjectForegroundConverter.cs'], ['SwipeListView/Demo/MainPage.xaml.cs'], ['SwipeListView/Runtime/Universal.UI.Xaml.Controls/SwipeListView.cs', 'SwipeListView/Demo/MainPage.xaml.cs'], ['SwipeListView/Demo/App.xaml.cs'], ['SwipeListView/Silverlight/Universal.UI.Xaml.Controls/Properties/AssemblyInfo.cs'], ['SwipeListView/Runtime/Universal.UI.Xaml.Controls/SwipeListDirection.cs', 'SwipeListView/Demo/MainPage.xaml.cs'], ['SwipeListView/Runtime/Universal.UI.Xaml.Controls/SwipeListView.cs']]"
    },
    {
        "repo": "ACNESCreator",
        "description": "ACNESCreator is a tool for creating GameCube GCI save files with NES ROMs to play on Animal Crossing.",
        "function": "Allows users to generate GCI save files containing NES ROMs for Animal Crossing, enabling gameplay on the in-game NES console. Also supports creating memory patches and injecting custom code into the game.",
        "files": [
            {
                "file": "ACNESCreator/ACNESCreator.CommandLine/Program.cs",
                "function": "The program processes a NES ROM file, applies specified options (like region, compression, and tags), and generates a GCI file for use on a GameCube. It also calculates and prints a checksum for the generated file."
            },
            {
                "file": "ACNESCreator/ACNESCreator.Core/GCI.cs",
                "function": "This file defines a `GCI` class for handling GameCube memory card image files, including headers, comments, image data, and game data. It supports creating, modifying, and exporting GCI files with various formats and attributes."
            },
            {
                "file": "ACNESCreator/ACNESCreator.Core/NES.cs",
                "function": "This file defines a class for creating and managing NES ROM files, including handling compression, region-specific data, and generating GCI files for use in Animal Crossing. It supports various ROM formats, custom tags, and banner data, and ensures compatibility with different regions and save functionalities."
            },
            {
                "file": "ACNESCreator/ACNESCreator.Core/Patch.cs",
                "function": "The file defines a static class `Patch` containing a large array of hexadecimal values (`PatcherData`) and a constant `PatcherEntryPointData`, likely used for patching or modifying code at a specific entry point."
            },
            {
                "file": "ACNESCreator/ACNESCreator.Core/Utility.cs",
                "function": "This file provides utility functions for data manipulation, including padding data, finding matches in byte arrays, calculating CRC checksums, and converting FDS format data to QD format."
            },
            {
                "file": "ACNESCreator/ACNESCreator.Core/Yaz0.cs",
                "function": "This file provides functionality for compressing and decompressing data using the Yaz0 algorithm, including methods to verify Yaz0 compression, decompress Yaz0 data, and compress data into Yaz0 format."
            },
            {
                "file": "ACNESCreator/ACNESCreator.FrontEnd/App.xaml.cs",
                "function": "This file defines the main application class `App` for a WPF application, inheriting from `Application` to handle the application's lifecycle and startup."
            },
            {
                "file": "ACNESCreator/ACNESCreator.FrontEnd/MainWindow.xaml.cs",
                "function": "The file defines a WPF application for creating GameCube GCI save files from NES ROMs, allowing users to select ROMs, configure settings, and generate save files with custom icons and metadata."
            },
            {
                "file": "ACNESCreator/ACNESCreator.FrontEnd/Properties/AssemblyInfo.cs",
                "function": "This file defines assembly-level attributes for a .NET application named \"ACNESCreator,\" including versioning, theme information, and COM visibility settings."
            },
            {
                "file": "ACNESCreator/ACNESCreator.FrontEnd/Properties/Resources.Designer.cs",
                "function": "This file defines a strongly-typed resource class for managing localized strings and other resources in the `ACNESCreator.FrontEnd` application."
            },
            {
                "file": "ACNESCreator/ACNESCreator.FrontEnd/Properties/Settings.Designer.cs",
                "function": "The file defines a settings class for the ACNESCreator.FrontEnd application, providing a default instance for managing application settings."
            },
            {
                "file": "ACNESCreator/ACNESCreator.FrontEnd/Tags/TagInfo.cs",
                "function": "The file defines a static class `TagInfo` containing a list of `TagDescription` structures, which describe various tags used in a tag parser system. Each tag has a unique identifier, name, and description, detailing its functionality within the parser."
            }
        ],
        "gt": "[['ACNESCreator/ACNESCreator.Core/NES.cs', 'ACNESCreator/ACNESCreator.FrontEnd/MainWindow.xaml.cs'], ['ACNESCreator/ACNESCreator.Core/Utility.cs', 'ACNESCreator/ACNESCreator.FrontEnd/MainWindow.xaml.cs'], ['ACNESCreator/ACNESCreator.FrontEnd/Tags/TagInfo.cs'], ['ACNESCreator/ACNESCreator.FrontEnd/MainWindow.xaml.cs'], ['ACNESCreator/ACNESCreator.FrontEnd/Properties/Resources.Designer.cs'], ['ACNESCreator/ACNESCreator.CommandLine/Program.cs'], ['ACNESCreator/ACNESCreator.FrontEnd/App.xaml.cs'], ['ACNESCreator/ACNESCreator.FrontEnd/Properties/AssemblyInfo.cs'], ['ACNESCreator/ACNESCreator.Core/Yaz0.cs', 'ACNESCreator/ACNESCreator.FrontEnd/MainWindow.xaml.cs'], ['ACNESCreator/ACNESCreator.Core/Patch.cs'], ['ACNESCreator/ACNESCreator.Core/GCI.cs', 'ACNESCreator/ACNESCreator.FrontEnd/MainWindow.xaml.cs'], ['ACNESCreator/ACNESCreator.FrontEnd/Properties/Settings.Designer.cs'], ['ACNESCreator/ACNESCreator.Core/GCI.cs']]"
    },
    {
        "repo": "VulnInjector",
        "description": "A tool for creating vulnerable machines using the user's own setup files and product keys.",
        "function": "Generates a vulnerable environment by leveraging the user's existing configuration files and product keys, allowing for controlled testing and learning in a safe environment.",
        "files": [
            {
                "file": "VulnInjector/VulnInjector/AboutBox.Designer.cs",
                "function": "The file defines an \"About\" dialog box for the VulnInjector application, displaying product details such as name, version, copyright, company, and description, with an \"OK\" button to close the dialog."
            },
            {
                "file": "VulnInjector/VulnInjector/AboutBox.cs",
                "function": "The file defines an \"AboutBox\" form in a Windows application, displaying information about the software, including its title, version, copyright, company, and legal agreements. It also lists third-party licenses and trademarks used in the application."
            },
            {
                "file": "VulnInjector/VulnInjector/FAQ.Designer.cs",
                "function": "The file defines a Windows Form named \"FAQ\" with a read-only text box for displaying information, an \"OK\" button to close the form, and a \"WebSite\" button to open a website."
            },
            {
                "file": "VulnInjector/VulnInjector/FAQ.cs",
                "function": "The file defines a `FAQ` form in a Windows application that provides information about the VulnInjector tool, which creates a vulnerable Windows installation image for testing purposes. It includes answers to common questions about the tool's usage, requirements, and recommendations for safe testing environments."
            },
            {
                "file": "VulnInjector/VulnInjector/Main.Designer.cs",
                "function": "The file defines a Windows Forms application for generating an ISO image, allowing users to select a source, input a product key, and view system details. It includes functionality for scanning drives, opening image files, and displaying status updates during the process."
            },
            {
                "file": "VulnInjector/VulnInjector/Main.cs",
                "function": "VulnInjector is a tool that creates a \"vulnerable\" Windows machine by integrating user-provided setup files and product keys into an ISO image. It automates the process of copying files, integrating service packs, and generating a bootable ISO with vulnerabilities for testing purposes."
            },
            {
                "file": "VulnInjector/VulnInjector/Program.cs",
                "function": "This file initializes a Windows Forms application, enabling visual styles and running the main form named `Main`."
            },
            {
                "file": "VulnInjector/VulnInjector/Properties/AssemblyInfo.cs",
                "function": "The file defines assembly metadata for a tool named \"VulnInjector,\" including its title, description, company, and version information, while also specifying its visibility to COM components."
            },
            {
                "file": "VulnInjector/VulnInjector/Properties/Resources.Designer.cs",
                "function": "The file defines a strongly-typed resource class for managing localized strings and bitmap resources in the `VulnInjector` application."
            },
            {
                "file": "VulnInjector/VulnInjector/Properties/Settings.Designer.cs",
                "function": "The file defines a settings class for the VulnInjector application, allowing access to default application settings."
            }
        ],
        "gt": "[['VulnInjector/VulnInjector/Main.Designer.cs'], ['VulnInjector/VulnInjector/Properties/Resources.Designer.cs', 'VulnInjector/VulnInjector/Main.cs'], ['VulnInjector/VulnInjector/Program.cs'], ['VulnInjector/VulnInjector/AboutBox.Designer.cs'], ['VulnInjector/VulnInjector/FAQ.Designer.cs'], ['VulnInjector/VulnInjector/FAQ.cs'], ['VulnInjector/VulnInjector/Properties/Settings.Designer.cs', 'VulnInjector/VulnInjector/Main.cs'], ['VulnInjector/VulnInjector/AboutBox.cs'], ['VulnInjector/VulnInjector/Main.cs'], ['VulnInjector/VulnInjector/Properties/AssemblyInfo.cs']]"
    },
    {
        "repo": "IconExtractor",
        "description": "A .NET library for extracting icons from .DLL and .EXE files.",
        "function": "Allows extraction of all icon variations, including those not accessible via ExtractIconEx(). Provides methods to extract, save, and manipulate icons, and convert them to bitmaps while preserving transparency.",
        "files": [
            {
                "file": "IconExtractor/IconExtractor/IconExtractor.cs",
                "function": "The `IconExtractor` class is designed to extract icons from a specified file, such as an executable or DLL, and provides methods to retrieve individual icons or all icons as `System.Drawing.Icon` objects. It also allows saving icons to a stream."
            },
            {
                "file": "IconExtractor/IconExtractor/IconUtil.cs",
                "function": "The file provides utility methods for working with icons in .NET, including splitting multi-icon files into individual icons, converting icons to bitmaps, and retrieving the bit depth of an icon."
            },
            {
                "file": "IconExtractor/IconExtractor/NativeMethods.cs",
                "function": "The file defines a set of native methods for interacting with Windows API functions, primarily for loading, managing, and accessing resources such as icons from DLLs or EXEs."
            },
            {
                "file": "IconExtractor/IconExtractor/Properties/AssemblyInfo.cs",
                "function": "This file defines metadata and configuration for the \"IconExtractor.dll\" assembly, including its title, description, company, product, and version information, while also specifying its visibility to COM components."
            },
            {
                "file": "IconExtractor/SampleApp/Form1.Designer.cs",
                "function": "The file defines a Windows Form application for selecting and managing icons, allowing users to pick icons, view them in a tiled list, and save them as either a single .ico file or multiple .png files."
            },
            {
                "file": "IconExtractor/SampleApp/Form1.cs",
                "function": "This file defines a Windows Forms application that allows users to pick and extract icons from files, display them, and save them as ICO or PNG files."
            },
            {
                "file": "IconExtractor/SampleApp/IconListView.cs",
                "function": "The file defines a custom `IconListView` control that extends `ListView` to display icons with high-quality rendering and tooltips. It also includes an `IconListViewItem` class to associate bitmap images with list view items."
            },
            {
                "file": "IconExtractor/SampleApp/IconPickerDialog.cs",
                "function": "The file defines an `IconPickerDialog` class that allows users to select an icon from a dialog box, leveraging a native Windows API method to display the icon picker and retrieve the selected icon's file path and index."
            },
            {
                "file": "IconExtractor/SampleApp/Program.cs",
                "function": "This file initializes a Windows Forms application, enabling visual styles and running the main form (Form1)."
            },
            {
                "file": "IconExtractor/SampleApp/Properties/AssemblyInfo.cs",
                "function": "This file defines assembly-level attributes for a .NET application named \"SampleApp,\" including versioning, visibility to COM, and copyright information."
            },
            {
                "file": "IconExtractor/SampleApp/Properties/Resources.Designer.cs",
                "function": "The file defines a strongly-typed resource class for managing localized strings and resources, such as a bitmap named \"Checker,\" within the SampleApp application."
            }
        ],
        "gt": "[['IconExtractor/SampleApp/IconListView.cs'], ['IconExtractor/SampleApp/Properties/AssemblyInfo.cs'], ['IconExtractor/SampleApp/IconPickerDialog.cs'], ['IconExtractor/SampleApp/Form1.Designer.cs'], ['IconExtractor/SampleApp/Properties/Resources.Designer.cs'], ['IconExtractor/IconExtractor/NativeMethods.cs', 'IconExtractor/SampleApp/IconListView.cs'], ['IconExtractor/IconExtractor/IconExtractor.cs', 'IconExtractor/SampleApp/IconListView.cs'], ['IconExtractor/IconExtractor/NativeMethods.cs', 'IconExtractor/SampleApp/Form1.cs'], ['IconExtractor/IconExtractor/Properties/AssemblyInfo.cs'], ['IconExtractor/SampleApp/Form1.cs'], ['IconExtractor/IconExtractor/IconUtil.cs', 'IconExtractor/SampleApp/IconListView.cs'], ['IconExtractor/IconExtractor/IconUtil.cs', 'IconExtractor/SampleApp/Form1.cs'], ['IconExtractor/IconExtractor/IconExtractor.cs', 'IconExtractor/SampleApp/Form1.cs'], ['IconExtractor/SampleApp/Program.cs']]"
    },
    {
        "repo": "Texture64",
        "description": "A multiplatform tool for ripping and editing textures from Nintendo 64 games.",
        "function": "Supports importing and exporting various N64 texture formats, including RGBA16, RGBA32, IA16, and more. Features palette management, split palette mode, and external palette support. Allows image manipulation, scrolling, and file operations with keyboard shortcuts and context menus.",
        "files": [
            {
                "file": "Texture64/Texture64/AboutBox.Designer.cs",
                "function": "The file defines an \"AboutBox\" form in a Windows application, displaying product information such as name, version, copyright, and description, with an animated logo and an \"OK\" button to close the dialog."
            },
            {
                "file": "Texture64/Texture64/AboutBox.cs",
                "function": "The file defines an \"About\" dialog box for a Windows Forms application, displaying assembly information and animating a sequence of images in a loop."
            },
            {
                "file": "Texture64/Texture64/GraphicsViewer.Designer.cs",
                "function": "The file defines a partial class `GraphicsViewer` for a graphical component in a Windows Forms application, handling painting and resizing events."
            },
            {
                "file": "Texture64/Texture64/GraphicsViewer.cs",
                "function": "The `GraphicsViewer` class is a custom `UserControl` in a Windows Forms application that displays graphical data from a byte array, applying a specified codec, palette, and scaling. It supports automatic or manual pixel size adjustment and renders the graphics on a canvas, updating the display when data, palette, or offset changes."
            },
            {
                "file": "Texture64/Texture64/ImageForm.Designer.cs",
                "function": "The file defines a Windows Forms application for viewing and editing textures, particularly for the Nintendo 64 (N64) platform. It includes tools for opening, inserting, and saving images, selecting codecs, adjusting scaling, and managing palettes, with support for various texture sizes and formats."
            },
            {
                "file": "Texture64/Texture64/ImageForm.cs",
                "function": "The file defines a Windows Forms application for viewing, editing, and managing N64 texture data. It supports loading, saving, and modifying ROM and palette data, with features for inserting images, changing codecs, and exporting textures. The application also includes drag-and-drop functionality and handles various user interactions for navigation and editing."
            },
            {
                "file": "Texture64/Texture64/N64Graphics.cs",
                "function": "The file provides functionality for decoding and encoding graphics data in various N64-specific formats, including RGBA, IA, CI, and 1-bit-per-pixel formats, and supports rendering and conversion of these formats to and from Bitmap images."
            },
            {
                "file": "Texture64/Texture64/Program.cs",
                "function": "This file initializes a Windows Forms application, enabling visual styles and running the `ImageForm` as the main form."
            },
            {
                "file": "Texture64/Texture64/TestForm.Designer.cs",
                "function": "The file defines a Windows Form (`TestForm`) for running texture format tests, allowing users to select a test type from a dropdown menu and view logs in a text box."
            },
            {
                "file": "Texture64/Texture64/TestForm.cs",
                "function": "This file defines a Windows Forms application for testing N64 texture codecs by generating random inputs, processing them, and comparing the results visually and in a log."
            },
            {
                "file": "Texture64/Texture64/Properties/AssemblyInfo.cs",
                "function": "The file defines assembly attributes for a tool named \"Texture64,\" which is a N64 Texture Ripper and Editor, specifying its title, description, version, and other metadata."
            },
            {
                "file": "Texture64/Texture64/Properties/Resources.Designer.cs",
                "function": "This file defines a strongly-typed resource class for managing and accessing localized bitmap resources, such as icons and images, within the `Texture64` application."
            },
            {
                "file": "Texture64/Texture64/Properties/Settings.Designer.cs",
                "function": "The file defines a settings class for an application, allowing users to configure and save preferences such as background color, custom dimensions, window state, location, size, and scale index."
            }
        ],
        "gt": "[['Texture64/Texture64/GraphicsViewer.Designer.cs'], ['Texture64/Texture64/ImageForm.Designer.cs'], ['Texture64/Texture64/GraphicsViewer.cs'], ['Texture64/Texture64/ImageForm.cs'], ['Texture64/Texture64/Properties/Resources.Designer.cs', 'Texture64/Texture64/AboutBox.cs'], ['Texture64/Texture64/N64Graphics.cs'], ['Texture64/Texture64/Properties/AssemblyInfo.cs'], ['Texture64/Texture64/AboutBox.Designer.cs'], ['Texture64/Texture64/Properties/Settings.Designer.cs', 'Texture64/Texture64/AboutBox.cs'], ['Texture64/Texture64/TestForm.Designer.cs'], ['Texture64/Texture64/AboutBox.cs'], ['Texture64/Texture64/TestForm.cs'], ['Texture64/Texture64/Program.cs']]"
    },
    {
        "repo": "CawkVM-Unpacker",
        "description": "A tool for restoring code protected by CawkVM without using reflection.",
        "function": "The tool unpacks CawkVM-protected code by directly processing the method data, avoiding the use of reflection to prevent unintended code execution. It supports specifying resource names for method data to enhance error handling.",
        "files": [
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/DnlibUtils.cs",
                "function": "The file provides utility methods for working with dnlib, a .NET decompilation library. It includes functions to find specific instructions in a method's body, identify methods based on their signature, and extract raw IL bytes from a method definition."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/ILogger.cs",
                "function": "The file defines an interface `ILogger` with methods for logging informational, debug, warning, and error messages."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/string2.cs",
                "function": "The file defines a static class `string2` with a method `IsNullOrEmpty` that checks if a string is null or empty, using aggressive inlining for performance optimization."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/CLI/CLIUtils.cs",
                "function": "The file provides utility methods to write text in specified console colors, with an option to disable colors based on an environment variable."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/CLI/CommandLineArguments.cs",
                "function": "The file defines a class `CommandLineArguments` that implements `IUnpackerParameters`, used to manage command-line arguments for an unpacker tool, including options for file paths, metadata preservation, and extra PE data handling."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/CLI/CommandLineParser.cs",
                "function": "The file defines a `CommandLineParser` class that parses command-line arguments for a CLI tool, handling options like file path, metadata preservation, and extra PE data retention, while providing error messages for invalid inputs."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/CLI/ConsoleLogger.cs",
                "function": "The file defines a `ConsoleLogger` class that implements the `ILogger` interface, providing methods to log messages with different severity levels (Info, Debug, Warn, Error) and display them in the console with appropriate colors."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/CLI/Program.cs",
                "function": "This file is a command-line interface (CLI) program that unpacks CawkVM-protected files, handling command-line arguments and displaying help or error messages based on user input."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/Unpacking/CawkVMEncryption.cs",
                "function": "This file provides encryption and decryption methods, including a seeded XOR operation, a custom native decryption algorithm, and Rijndael (AES) decryption."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/Unpacking/CawkVMMethodDataReader.cs",
                "function": "The file defines a method to read and parse virtual machine (VM) method data from a byte array, extracting VM instructions and exception handlers. It uses a binary reader to decode the data structure and populate lists of VM instructions and exception handlers."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/Unpacking/CawkVMToCilBodyConverter.cs",
                "function": "The file defines a class `CawkVMToCilBodyConverter` that converts virtual machine (VM) instructions and exception handlers into Common Intermediate Language (CIL) instructions and exception handlers, preparing them for execution in a .NET environment."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/Unpacking/DnlibLogger.cs",
                "function": "The file defines a custom logger (`DnlibLogger`) for logging errors in a .NET assembly unpacking tool, ensuring that duplicate error messages are not logged multiple times."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/Unpacking/IUnpackerParameters.cs",
                "function": "The file defines an interface `IUnpackerParameters` for unpacking operations, specifying properties for file path, metadata preservation, extra PE data handling, and a data resource name."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/Unpacking/MemberLocator.cs",
                "function": "The `MemberLocator` class is responsible for locating and identifying specific resources and methods within a module. It searches for an embedded resource by name or by analyzing method bodies, and identifies a \"runner method\" based on call frequency and signature criteria."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/Unpacking/RawMethodData.cs",
                "function": "The file defines a record named `RawMethodData` to store the offset and length of raw method data within a file."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/Unpacking/Unpacker.cs",
                "function": "The file defines an unpacker tool that decrypts and restores protected methods in a .NET module. It locates, decrypts, and converts protected methods from a custom VM format back to CIL, then writes the modified module to a new file."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/Unpacking/VMExceptionHandler.cs",
                "function": "The file defines a record `VMExceptionHandler` to manage exception handling in a virtual machine, storing metadata tokens and offsets for try, catch, and filter blocks."
            },
            {
                "file": "CawkVM-Unpacker/CawkVMUnpacker/Unpacking/VMInstruction.cs",
                "function": "The file defines a record `VMInstruction` to represent virtual machine instructions, including an opcode, operand type, and operand value."
            }
        ],
        "gt": "[['CawkVM-Unpacker/CawkVMUnpacker/ILogger.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/CLI/CLIUtils.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/Unpacking/CawkVMEncryption.cs', 'CawkVM-Unpacker/CawkVMUnpacker/CLI/Program.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/Unpacking/RawMethodData.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/string2.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/DnlibUtils.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/Unpacking/CawkVMMethodDataReader.cs', 'CawkVM-Unpacker/CawkVMUnpacker/CLI/Program.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/Unpacking/CawkVMToCilBodyConverter.cs', 'CawkVM-Unpacker/CawkVMUnpacker/CLI/Program.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/Unpacking/Unpacker.cs', 'CawkVM-Unpacker/CawkVMUnpacker/CLI/Program.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/Unpacking/VMInstruction.cs', 'CawkVM-Unpacker/CawkVMUnpacker/CLI/Program.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/CLI/ConsoleLogger.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/Unpacking/IUnpackerParameters.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/Unpacking/MemberLocator.cs', 'CawkVM-Unpacker/CawkVMUnpacker/CLI/Program.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/Unpacking/VMExceptionHandler.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/CLI/CommandLineArguments.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/CLI/CommandLineParser.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/CLI/Program.cs'], ['CawkVM-Unpacker/CawkVMUnpacker/Unpacking/DnlibLogger.cs', 'CawkVM-Unpacker/CawkVMUnpacker/CLI/Program.cs']]"
    },
    {
        "repo": "YahooFinanceAPI",
        "description": "A .NET library for downloading historical end-of-day (EOD) stock price data from Yahoo Finance.",
        "function": "The library handles authentication by obtaining the required 'crumb' and cookie, and provides methods to fetch historical stock prices in both processed and raw CSV formats.",
        "files": [
            {
                "file": "YahooFinanceAPI/YahooFinanceAPI/Historical.cs",
                "function": "This file provides functionality to fetch and parse historical stock prices and dividends from Yahoo Finance, returning them as lists of structured data."
            },
            {
                "file": "YahooFinanceAPI/YahooFinanceAPI/Quote.cs",
                "function": "This file provides functionality to fetch and parse stock quote data from Yahoo Finance, returning the price and other details for a given stock symbol."
            },
            {
                "file": "YahooFinanceAPI/YahooFinanceAPI/Token.cs",
                "function": "This class fetches and updates Yahoo Finance tokens (cookie and crumb) for a given stock ticker symbol, enabling access to financial data."
            },
            {
                "file": "YahooFinanceAPI/YahooFinanceAPI/Models/Dividend.cs",
                "function": "The file defines a `Dividend` class with properties for the dividend date and amount."
            },
            {
                "file": "YahooFinanceAPI/YahooFinanceAPI/Models/HistoryPrice.cs",
                "function": "The file defines a `HistoryPrice` class representing historical stock price data, including properties for date, open, high, low, close prices, volume, and adjusted close price."
            },
            {
                "file": "YahooFinanceAPI/YahooFinanceAPI/Models/QuotePrice.cs",
                "function": "The file defines a `QuotePrice` class in C# that represents stock market data, including properties for symbol, exchange, price details (open, high, low, close), volume, and timestamp."
            },
            {
                "file": "YahooFinanceAPI/YahooFinanceAPI/Models/YahooQuote.cs",
                "function": "The file defines a model for representing stock quote data from Yahoo Finance, including details such as market prices, averages, and exchange information. It structures the data into nested classes for easier handling and organization."
            },
            {
                "file": "YahooFinanceAPI/YahooFinanceAPI/Properties/AssemblyInfo.cs",
                "function": "This file defines assembly metadata and attributes for a .NET library named \"YahooFinanceAPI,\" including versioning, company information, and COM visibility settings."
            },
            {
                "file": "YahooFinanceAPI/YahooFinanceAPI/Utils/DateTimeConverter.cs",
                "function": "The file provides utility methods to convert Unix timestamps to DateTime and vice versa."
            },
            {
                "file": "YahooFinanceAPI/YahooFinanceAPI/Utils/Json.cs",
                "function": "The file provides asynchronous JSON serialization and deserialization methods, converting JSON strings, readers, and JTokens to objects and vice versa, with camelCase property names."
            }
        ],
        "gt": "[['YahooFinanceAPI/YahooFinanceAPI/Models/Dividend.cs', 'YahooFinanceAPI/YahooFinanceAPI/Quote.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Models/HistoryPrice.cs', 'YahooFinanceAPI/YahooFinanceAPI/Historical.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Properties/AssemblyInfo.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Models/QuotePrice.cs', 'YahooFinanceAPI/YahooFinanceAPI/Historical.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Quote.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Token.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Historical.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Utils/DateTimeConverter.cs', 'YahooFinanceAPI/YahooFinanceAPI/Historical.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Utils/Json.cs', 'YahooFinanceAPI/YahooFinanceAPI/Quote.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Utils/Json.cs', 'YahooFinanceAPI/YahooFinanceAPI/Historical.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Models/YahooQuote.cs', 'YahooFinanceAPI/YahooFinanceAPI/Quote.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Models/QuotePrice.cs', 'YahooFinanceAPI/YahooFinanceAPI/Quote.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Models/Dividend.cs', 'YahooFinanceAPI/YahooFinanceAPI/Historical.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Models/HistoryPrice.cs', 'YahooFinanceAPI/YahooFinanceAPI/Quote.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Models/YahooQuote.cs', 'YahooFinanceAPI/YahooFinanceAPI/Historical.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Utils/DateTimeConverter.cs', 'YahooFinanceAPI/YahooFinanceAPI/Quote.cs'], ['YahooFinanceAPI/YahooFinanceAPI/Models/QuotePrice.cs']]"
    },
    {
        "repo": "aspnetcore-modular-monolith",
        "description": "A modular monolith architecture implementation using ASP.NET Core.",
        "function": "Demonstrates how to structure a monolithic application into modular components while maintaining a cohesive architecture, leveraging ASP.NET Core for backend development.",
        "files": [
            {
                "file": "aspnetcore-modular-monolith/Monolith.Host/InternalControllerFeatureProvider.cs",
                "function": "The file defines a custom feature provider, `InternalControllerFeatureProvider`, that allows internal controllers to be recognized by the ASP.NET Core MVC framework. It overrides the `IsController` method to include internal types that inherit from `ControllerBase`."
            },
            {
                "file": "aspnetcore-modular-monolith/Monolith.Host/Program.cs",
                "function": "The file defines the entry point for an ASP.NET Core application, setting up and running the host using the `Startup` class for configuration."
            },
            {
                "file": "aspnetcore-modular-monolith/Monolith.Host/Startup.cs",
                "function": "This file configures a modular monolith application in ASP.NET Core, setting up services, routing, and Swagger documentation. It integrates multiple modules with prefixed routes and custom controller handling."
            },
            {
                "file": "aspnetcore-modular-monolith/Monolith.Host/ModuleIntegration/Module.cs",
                "function": "The `Module` class represents a module with a route prefix and a startup class, providing access to the module's assembly."
            },
            {
                "file": "aspnetcore-modular-monolith/Monolith.Host/ModuleIntegration/ModuleRoutingConvention.cs",
                "function": "The file defines a routing convention that adds a route prefix to all actions based on the module they belong to, using the `ModuleRoutingConvention` class."
            },
            {
                "file": "aspnetcore-modular-monolith/Monolith.Host/ModuleIntegration/ModuleRoutingMvcOptionsPostConfigure.cs",
                "function": "The file defines a class `ModuleRoutingMvcOptionsPostConfigure` that implements `IPostConfigureOptions<MvcOptions>` to inject modules and add a `ModuleRoutingConvention` to the MVC options during post-configuration."
            },
            {
                "file": "aspnetcore-modular-monolith/Monolith.Host/ModuleIntegration/ModuleServiceCollection.cs",
                "function": "This file defines a static method `AddModule` that registers a module's controllers and services in an ASP.NET Core application, using a specified route prefix and startup class."
            },
            {
                "file": "aspnetcore-modular-monolith/Monolith.Module1.Shared/ITestService.cs",
                "function": "Defines an interface `ITestService` with a method `SayHello` that returns a string."
            },
            {
                "file": "aspnetcore-modular-monolith/Monolith.Module1/Startup.cs",
                "function": "This file defines a startup configuration for a module in an ASP.NET Core application, registering a singleton service and configuring an endpoint that requires authorization to return a \"Hello World\" message."
            },
            {
                "file": "aspnetcore-modular-monolith/Monolith.Module1/TestController.cs",
                "function": "The file defines a controller named `TestController` in the `Monolith.Module1` namespace, which handles HTTP GET requests and uses an injected `ITestService` to return a formatted string response."
            },
            {
                "file": "aspnetcore-modular-monolith/Monolith.Module1/TestService.cs",
                "function": "The file defines a `TestService` class implementing the `ITestService` interface, providing a method `SayHello` that returns a greeting message."
            },
            {
                "file": "aspnetcore-modular-monolith/Monolith.Module2/Startup.cs",
                "function": "This file defines a startup class for a module in an ASP.NET Core application, configuring an endpoint that responds with \"Hello World from TestEndpoint in Module 2\" when accessed."
            },
            {
                "file": "aspnetcore-modular-monolith/Monolith.Module2/TestController.cs",
                "function": "The file defines a controller named `TestController` in the `Monolith.Module2` namespace, exposing two HTTP GET endpoints: one for returning a simple message and another for interacting with a shared service from `Monolith.Module1.Shared`."
            },
            {
                "file": "aspnetcore-modular-monolith/Monolith.Shared/IStartup.cs",
                "function": "This file defines an interface `IStartup` for configuring services and the application pipeline in an ASP.NET Core application."
            }
        ],
        "gt": "[['aspnetcore-modular-monolith/Monolith.Module2/TestController.cs'], ['aspnetcore-modular-monolith/Monolith.Host/Program.cs'], ['aspnetcore-modular-monolith/Monolith.Module2/Startup.cs'], ['aspnetcore-modular-monolith/Monolith.Host/ModuleIntegration/ModuleRoutingConvention.cs'], ['aspnetcore-modular-monolith/Monolith.Module1/Startup.cs'], ['aspnetcore-modular-monolith/Monolith.Host/ModuleIntegration/Module.cs'], ['aspnetcore-modular-monolith/Monolith.Module1.Shared/ITestService.cs', 'aspnetcore-modular-monolith/Monolith.Module1/TestController.cs'], ['aspnetcore-modular-monolith/Monolith.Module1/TestService.cs'], ['aspnetcore-modular-monolith/Monolith.Host/ModuleIntegration/ModuleRoutingMvcOptionsPostConfigure.cs'], ['aspnetcore-modular-monolith/Monolith.Host/ModuleIntegration/ModuleServiceCollection.cs'], ['aspnetcore-modular-monolith/Monolith.Shared/IStartup.cs', 'aspnetcore-modular-monolith/Monolith.Host/ModuleIntegration/Module.cs'], ['aspnetcore-modular-monolith/Monolith.Shared/IStartup.cs', 'aspnetcore-modular-monolith/Monolith.Host/ModuleIntegration/ModuleServiceCollection.cs'], ['aspnetcore-modular-monolith/Monolith.Module1/TestController.cs'], ['aspnetcore-modular-monolith/Monolith.Host/Startup.cs'], ['aspnetcore-modular-monolith/Monolith.Module1.Shared/ITestService.cs', 'aspnetcore-modular-monolith/Monolith.Module1/TestService.cs'], ['aspnetcore-modular-monolith/Monolith.Host/InternalControllerFeatureProvider.cs'], ['aspnetcore-modular-monolith/Monolith.Module1.Shared/ITestService.cs', 'aspnetcore-modular-monolith/Monolith.Module2/TestController.cs'], ['aspnetcore-modular-monolith/Monolith.Module1.Shared/ITestService.cs', 'aspnetcore-modular-monolith/Monolith.Module1/Startup.cs']]"
    },
    {
        "repo": "SMPatcher",
        "description": "A tool for applying patches to Pokemon Sun/Moon code.bin files.",
        "function": "Allows users to apply patches from the SunMoonPatches repository to modify the game's code.bin file, leveraging IPS patch generation code from Tiny IPS.",
        "files": [
            {
                "file": "SMPatcher/SMPatcher/Program.cs",
                "function": "This program patches Pok\u00e9mon Sun and Moon game binaries to enable debug features, modify QR code functionality, and adjust game behavior based on version detection. It also generates patch files in IPS format for the modified binaries."
            },
            {
                "file": "SMPatcher/SMPatcher/Libips.Net/Creator.cs",
                "function": "This file defines a class `Creator` that generates IPS patch files by comparing a source file with a target file, identifying differences, and optimizing the patch using RLE (Run-Length Encoding) for efficiency."
            },
            {
                "file": "SMPatcher/SMPatcher/Libips.Net/Patcher.cs",
                "function": "The file defines a `Patcher` class that applies IPS patches to source files, either directly or after studying the patch. It supports both file and stream-based patching, ensuring the target file is updated with the patch data while handling RLE (Run-Length Encoding) and normal patching scenarios."
            },
            {
                "file": "SMPatcher/SMPatcher/Libips.Net/Studier.cs",
                "function": "The file defines a class `Studier` that analyzes IPS patch files to determine their validity and potential errors, such as being scrambled, invalid, or not intended for a specific ROM. It calculates the minimum and maximum output lengths based on the patch content."
            },
            {
                "file": "SMPatcher/SMPatcher/Libips.Net/Exceptions/Ips16MegabytesException.cs",
                "function": "Defines a custom exception class `Ips16MegabytesException` for handling errors related to exceeding the 16MB limit in the LibIpsNet library."
            },
            {
                "file": "SMPatcher/SMPatcher/Libips.Net/Exceptions/IpsIdenticalException.cs",
                "function": "This file defines a custom exception class, `IpsIdenticalException`, which is used to handle cases where two files or data are identical."
            },
            {
                "file": "SMPatcher/SMPatcher/Libips.Net/Exceptions/IpsInvalidException.cs",
                "function": "This file defines a custom exception class, `IpsInvalidException`, which extends the base `Exception` class to handle specific error scenarios related to invalid IPS files."
            },
            {
                "file": "SMPatcher/SMPatcher/Libips.Net/Exceptions/IpsNotThisException.cs",
                "function": "Defines a custom exception class `IpsNotThisException` for handling specific error scenarios, supporting various constructors for flexibility in exception handling."
            },
            {
                "file": "SMPatcher/SMPatcher/Libips.Net/Exceptions/IpsScrambledException.cs",
                "function": "Defines a custom exception class `IpsScrambledException` for handling errors related to scrambled IPS files, with various constructors for different use cases."
            },
            {
                "file": "SMPatcher/SMPatcher/Libips.Net/Utils/Reader.cs",
                "function": "The file provides utility methods to read 8-bit, 16-bit, and 24-bit data from a stream, with optional offset seeking and boundary checks."
            },
            {
                "file": "SMPatcher/SMPatcher/Libips.Net/Utils/Writer.cs",
                "function": "The file provides utility methods to write 8-bit, 16-bit, and 24-bit integer values to a stream."
            },
            {
                "file": "SMPatcher/SMPatcher/Properties/AssemblyInfo.cs",
                "function": "The file defines assembly-level attributes for a project named \"SMPatcher,\" including versioning, visibility to COM, and general metadata."
            },
            {
                "file": "SMPatcher/SMPatcher/Properties/Resources.Designer.cs",
                "function": "This file defines a strongly-typed resource class for managing and accessing localized byte array resources in the `SMPatcher` application."
            }
        ],
        "gt": "[['SMPatcher/SMPatcher/Libips.Net/Utils/Reader.cs', 'SMPatcher/SMPatcher/Libips.Net/Creator.cs', 'SMPatcher/SMPatcher/Program.cs'], ['SMPatcher/SMPatcher/Libips.Net/Utils/Reader.cs', 'SMPatcher/SMPatcher/Libips.Net/Patcher.cs', 'SMPatcher/SMPatcher/Program.cs'], ['SMPatcher/SMPatcher/Libips.Net/Creator.cs', 'SMPatcher/SMPatcher/Program.cs'], ['SMPatcher/SMPatcher/Libips.Net/Exceptions/IpsNotThisException.cs'], ['SMPatcher/SMPatcher/Properties/Resources.Designer.cs', 'SMPatcher/SMPatcher/Program.cs'], ['SMPatcher/SMPatcher/Libips.Net/Utils/Reader.cs', 'SMPatcher/SMPatcher/Libips.Net/Studier.cs', 'SMPatcher/SMPatcher/Program.cs'], ['SMPatcher/SMPatcher/Libips.Net/Exceptions/IpsIdenticalException.cs'], ['SMPatcher/SMPatcher/Libips.Net/Exceptions/IpsInvalidException.cs'], ['SMPatcher/SMPatcher/Program.cs'], ['SMPatcher/SMPatcher/Properties/AssemblyInfo.cs'], ['SMPatcher/SMPatcher/Libips.Net/Patcher.cs', 'SMPatcher/SMPatcher/Program.cs'], ['SMPatcher/SMPatcher/Libips.Net/Exceptions/Ips16MegabytesException.cs'], ['SMPatcher/SMPatcher/Libips.Net/Utils/Writer.cs', 'SMPatcher/SMPatcher/Libips.Net/Studier.cs', 'SMPatcher/SMPatcher/Program.cs'], ['SMPatcher/SMPatcher/Libips.Net/Exceptions/IpsScrambledException.cs'], ['SMPatcher/SMPatcher/Libips.Net/Studier.cs', 'SMPatcher/SMPatcher/Program.cs'], ['SMPatcher/SMPatcher/Libips.Net/Utils/Writer.cs', 'SMPatcher/SMPatcher/Libips.Net/Patcher.cs', 'SMPatcher/SMPatcher/Program.cs'], ['SMPatcher/SMPatcher/Libips.Net/Utils/Writer.cs', 'SMPatcher/SMPatcher/Libips.Net/Creator.cs', 'SMPatcher/SMPatcher/Program.cs'], ['SMPatcher/SMPatcher/Libips.Net/Patcher.cs']]"
    },
    {
        "repo": "Justin.AspNetCore.LdapAuthentication",
        "description": "An LDAP password authentication extension for ASP.NET Core Identity.",
        "function": "Enables LDAP bind-based password authentication for existing ASP.NET Core Identity user stores without requiring an LDAP-based UserStore. Supports custom UserManager configurations and integrates with standard Identity sign-in methods.",
        "files": [
            {
                "file": "Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/IUserLdapStore.cs",
                "function": "This file defines an interface `IUserLdapStore<TUser>` that provides a method to retrieve the Distinguished Name (DN) for an LDAP user, used for password validation."
            },
            {
                "file": "Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/LdapAuthentication.cs",
                "function": "The file defines an LDAP authentication class that verifies user passwords by attempting to bind to an LDAP server. It handles connection management and resource cleanup, ensuring proper disposal of resources."
            },
            {
                "file": "Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/LdapAuthenticationOptions.cs",
                "function": "The file defines `LdapAuthenticationOptions`, a class used to configure LDAP authentication by specifying the server hostname, port, and domain."
            },
            {
                "file": "Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/LdapUserManager.cs",
                "function": "The file defines a custom `LdapUserManager` class that extends the default `UserManager` in ASP.NET Core Identity, overriding password-related methods to validate user passwords against an LDAP server. It does not support password changes, additions, or resets, and always assumes the user has a password."
            },
            {
                "file": "Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/ServiceCollectionExtensions.cs",
                "function": "This file provides an extension method to configure LDAP authentication options in an ASP.NET Core application using dependency injection."
            },
            {
                "file": "Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/Properties/AssemblyInfo.cs",
                "function": "This file defines assembly-level attributes for a .NET project, including configuration, company, product, and COM visibility settings."
            }
        ],
        "gt": "[['Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/LdapUserManager.cs', 'Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/ServiceCollectionExtensions.cs'], ['Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/LdapAuthenticationOptions.cs'], ['Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/LdapAuthentication.cs', 'Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/ServiceCollectionExtensions.cs'], ['Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/Properties/AssemblyInfo.cs'], ['Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/IUserLdapStore.cs', 'Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/ServiceCollectionExtensions.cs'], ['Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/ServiceCollectionExtensions.cs'], ['Justin.AspNetCore.LdapAuthentication/src/Justin.AspNetCore.LdapAuthentication/LdapAuthentication.cs']]"
    },
    {
        "repo": "opentelemetry-tracing-demo",
        "description": "A demonstration of using OpenTelemetry for tracing in a distributed .NET 8 application setup.",
        "function": "The project showcases four .NET 8 applications interacting via HTTP and RabbitMQ queues, with tracing enabled using OpenTelemetry. It includes a docker-compose setup for running the applications along with external dependencies like Jaeger, RabbitMQ, MSSQL Server, and Redis.",
        "files": [
            {
                "file": "opentelemetry-tracing-demo/App1.WebApi/Program.cs",
                "function": "This file sets up an ASP.NET Core web application, configuring controllers, HTTP clients, and OpenTelemetry tracing with Jaeger integration for monitoring and exporting traces."
            },
            {
                "file": "opentelemetry-tracing-demo/App1.WebApi/Controllers/CallApiController.cs",
                "function": "The file defines a controller in an ASP.NET Core Web API that makes an HTTP GET request to an external service using `IHttpClientFactory`. It logs the call, checks the response status, and returns the content if successful; otherwise, it returns a 500 status code."
            },
            {
                "file": "opentelemetry-tracing-demo/App1.WebApi/Controllers/PublishMessageController.cs",
                "function": "This controller publishes a message to a RabbitMQ queue named \"sample\" when accessed via an HTTP GET request, while also logging the activity and injecting trace context into the message headers."
            },
            {
                "file": "opentelemetry-tracing-demo/App2.RabbitConsumer.Console/Program.cs",
                "function": "This program sets up a RabbitMQ consumer that listens to a \"sample\" queue, processes incoming messages by sending them to an HTTP endpoint, and logs the activity using OpenTelemetry for tracing and Jaeger for exporting traces."
            },
            {
                "file": "opentelemetry-tracing-demo/App3.WebApi/Program.cs",
                "function": "This file sets up a .NET Core Web API application with OpenTelemetry tracing, integrates SQL and RabbitMQ repositories, and defines endpoints for logging activity and processing messages by persisting them to a SQL database and publishing events to RabbitMQ."
            },
            {
                "file": "opentelemetry-tracing-demo/App3.WebApi/Events/MessagePersistedEvent.cs",
                "function": "The file defines a `MessagePersistedEvent` class that represents an event containing a message string, and an `IEvent` interface for event types."
            },
            {
                "file": "opentelemetry-tracing-demo/App3.WebApi/Repository/IRabbitRepository.cs",
                "function": "The file defines an interface `IRabbitRepository` with a method `Publish` to send events (`IEvent`) to a RabbitMQ message broker."
            },
            {
                "file": "opentelemetry-tracing-demo/App3.WebApi/Repository/ISqlRepository.cs",
                "function": "The file defines an interface `ISqlRepository` with a method `Persist` to asynchronously save a message to a SQL database."
            },
            {
                "file": "opentelemetry-tracing-demo/App3.WebApi/Repository/RabbitRepository.cs",
                "function": "This file defines a repository class `RabbitRepository` that publishes events to a RabbitMQ queue named \"sample_2\" and logs the process using OpenTelemetry for tracing and logging."
            },
            {
                "file": "opentelemetry-tracing-demo/App3.WebApi/Repository/SqlRepository.cs",
                "function": "The file defines a repository class `SqlRepository` that connects to a SQL database using a connection string from configuration. It executes a simple query to retrieve the current date and time asynchronously."
            },
            {
                "file": "opentelemetry-tracing-demo/App4.RabbitConsumer.HostedService/Program.cs",
                "function": "This file sets up a .NET application with a hosted service, integrates FusionCache for distributed caching using Redis, and configures OpenTelemetry for tracing with Jaeger."
            },
            {
                "file": "opentelemetry-tracing-demo/App4.RabbitConsumer.HostedService/Worker.cs",
                "function": "The file defines a background service that consumes messages from a RabbitMQ queue, processes them, and caches the messages in Redis using FusionCache. It also integrates OpenTelemetry for tracing and logging message processing."
            },
            {
                "file": "opentelemetry-tracing-demo/App4.RabbitConsumer.HostedService/Helpers/ActivityHelper.cs",
                "function": "The file defines a helper class for working with RabbitMQ message properties and activity tags, including extracting trace context from message headers and adding RabbitMQ-specific tags to an activity."
            }
        ],
        "gt": "[['opentelemetry-tracing-demo/App1.WebApi/Program.cs'], ['opentelemetry-tracing-demo/App2.RabbitConsumer.Console/Program.cs'], ['opentelemetry-tracing-demo/App3.WebApi/Repository/SqlRepository.cs', 'opentelemetry-tracing-demo/App3.WebApi/Program.cs'], ['opentelemetry-tracing-demo/App3.WebApi/Repository/RabbitRepository.cs', 'opentelemetry-tracing-demo/App3.WebApi/Program.cs'], ['opentelemetry-tracing-demo/App3.WebApi/Program.cs'], ['opentelemetry-tracing-demo/App1.WebApi/Controllers/CallApiController.cs', 'opentelemetry-tracing-demo/App1.WebApi/Program.cs'], ['opentelemetry-tracing-demo/App4.RabbitConsumer.HostedService/Program.cs'], ['opentelemetry-tracing-demo/App3.WebApi/Repository/ISqlRepository.cs', 'opentelemetry-tracing-demo/App3.WebApi/Program.cs'], ['opentelemetry-tracing-demo/App3.WebApi/Repository/IRabbitRepository.cs', 'opentelemetry-tracing-demo/App3.WebApi/Program.cs'], ['opentelemetry-tracing-demo/App4.RabbitConsumer.HostedService/Helpers/ActivityHelper.cs', 'opentelemetry-tracing-demo/App4.RabbitConsumer.HostedService/Worker.cs'], ['opentelemetry-tracing-demo/App1.WebApi/Controllers/PublishMessageController.cs', 'opentelemetry-tracing-demo/App1.WebApi/Program.cs'], ['opentelemetry-tracing-demo/App4.RabbitConsumer.HostedService/Worker.cs'], ['opentelemetry-tracing-demo/App3.WebApi/Events/MessagePersistedEvent.cs']]"
    },
    {
        "repo": "BehaviorLibrary",
        "description": "A framework for creating behavior trees for game AI.",
        "function": "Allows developers to define and execute complex AI behaviors using conditional checks and actions, enabling efficient and modular AI design for games.",
        "files": [
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Behavior.cs",
                "function": "The file defines a `Behavior` class that manages and executes a behavior tree, using a `RootSelector` to determine the outcome of the behavior, which can be `Failure`, `Success`, or `Running`."
            },
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Components/BehaviorComponent.cs",
                "function": "The file defines an abstract class `BehaviorComponent` for creating behavior components in a behavior tree, providing a base for implementing specific behaviors and a method to execute them, returning a `BehaviorReturnCode`."
            },
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Components/Actions/BehaviorAction.cs",
                "function": "The file defines a `BehaviorAction` class that executes a specified action and returns a `BehaviorReturnCode` indicating success, failure, or running status. It handles exceptions by returning a failure code."
            },
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Components/Composites/ParallelSelector.cs",
                "function": "The `ParallelSelector` class evaluates multiple behavior components in sequence, returning `Success` if any component succeeds, `Running` if any component is running, or `Failure` if all components fail."
            },
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Components/Composites/ParallelSequence.cs",
                "function": "The `ParallelSequence` class executes multiple behaviors in a single cycle, returning success only if all behaviors succeed and failure if any behavior fails or an error occurs."
            },
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Components/Composites/RandomSelector.cs",
                "function": "The `RandomSelector` class randomly selects and executes one of the provided behavior components, returning the result of the selected behavior (Success, Failure, or Running)."
            },
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Components/Composites/RootSelector.cs",
                "function": "The `RootSelector` class selects and executes a behavior from a list of behavior branches based on an index provided by a function, returning the execution status of the chosen behavior."
            },
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Components/Composites/Selector.cs",
                "function": "The `Selector` class is a behavior tree component that evaluates multiple behavior components in sequence, returning success if any component succeeds, running if any component is running, or failure if all components fail."
            },
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Components/Composites/Sequence.cs",
                "function": "The `Sequence` class executes a series of behavior components sequentially, returning `Success` only if all components succeed, `Running` if any component is running, and `Failure` if any component fails or an error occurs."
            },
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Components/Conditionals/Conditional.cs",
                "function": "The file defines a `Conditional` class that evaluates a boolean function and returns a behavior status of `Success` if the function returns `true`, or `Failure` if it returns `false`."
            },
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Components/Decorators/Counter.cs",
                "function": "The `Counter` class is a decorator that executes a behavior only after a specified number of calls (`maxCount`). It increments a counter each time it is called and runs the behavior when the counter reaches the maximum count, resetting the counter afterward."
            },
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Components/Decorators/Inverter.cs",
                "function": "The `Inverter` class inverts the result of a given behavior: it returns `Success` on `Failure`, `Failure` on `Success`, and `Running` on `Running`. If an exception occurs, it returns `Success`."
            },
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Components/Decorators/RandomDecorator.cs",
                "function": "The `RandomDecorator` class executes a behavior based on a specified probability, determined by a random function, and handles exceptions by returning a failure status."
            },
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Components/Decorators/Timer.cs",
                "function": "The `Timer` class delays the execution of a specified behavior until a specified amount of time has elapsed, updating the elapsed time using a provided function and executing the behavior once the time threshold is reached."
            },
            {
                "file": "BehaviorLibrary/BehaviorLibrary/Properties/AssemblyInfo.cs",
                "function": "This file defines assembly-level attributes for a .NET library named \"BehaviorLibrary,\" including versioning, visibility to COM, and other metadata."
            }
        ],
        "gt": "[['BehaviorLibrary/BehaviorLibrary/Components/Conditionals/Conditional.cs'], ['BehaviorLibrary/BehaviorLibrary/Components/Decorators/Counter.cs'], ['BehaviorLibrary/BehaviorLibrary/Properties/AssemblyInfo.cs'], ['BehaviorLibrary/BehaviorLibrary/Components/Decorators/Timer.cs'], ['BehaviorLibrary/BehaviorLibrary/Components/BehaviorComponent.cs', 'BehaviorLibrary/BehaviorLibrary/Behavior.cs'], ['BehaviorLibrary/BehaviorLibrary/Components/Composites/Selector.cs', 'BehaviorLibrary/BehaviorLibrary/Behavior.cs'], ['BehaviorLibrary/BehaviorLibrary/Components/Composites/ParallelSelector.cs', 'BehaviorLibrary/BehaviorLibrary/Behavior.cs'], ['BehaviorLibrary/BehaviorLibrary/Components/Composites/RandomSelector.cs', 'BehaviorLibrary/BehaviorLibrary/Behavior.cs'], ['BehaviorLibrary/BehaviorLibrary/Components/Composites/RootSelector.cs', 'BehaviorLibrary/BehaviorLibrary/Behavior.cs'], ['BehaviorLibrary/BehaviorLibrary/Components/Actions/BehaviorAction.cs'], ['BehaviorLibrary/BehaviorLibrary/Behavior.cs'], ['BehaviorLibrary/BehaviorLibrary/Components/Decorators/RandomDecorator.cs'], ['BehaviorLibrary/BehaviorLibrary/Components/Decorators/Inverter.cs'], ['BehaviorLibrary/BehaviorLibrary/Components/Composites/ParallelSequence.cs', 'BehaviorLibrary/BehaviorLibrary/Behavior.cs'], ['BehaviorLibrary/BehaviorLibrary/Components/Composites/Sequence.cs', 'BehaviorLibrary/BehaviorLibrary/Behavior.cs']]"
    },
    {
        "repo": "unityroom-tweet",
        "description": "A sample code for tweeting from WebGL games on the unityroom game submission site.",
        "function": "Allows developers to integrate tweet functionality into their WebGL games, supporting both text-only and image-based tweets. Includes setup instructions and sample code for easy integration.",
        "files": [
            {
                "file": "unityroom-tweet/Assets/naichilab/unityroom-tweet/Sample/Scripts/TweetSample.cs",
                "function": "This script provides methods to send tweets with various options, including text, hashtags, and images, using the UnityRoomTweet class."
            },
            {
                "file": "unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/UnityRoomTweet.cs",
                "function": "The file provides functionality to tweet messages and optionally images from a Unity game, handling both text-only tweets and image uploads with appropriate error handling and platform-specific behavior."
            },
            {
                "file": "unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/Internal/CoroutineHandler.cs",
                "function": "The file defines a `CoroutineHandler` class in Unity, which manages and starts coroutines globally by ensuring a persistent instance of the handler across scenes."
            },
            {
                "file": "unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/Internal/GyazoResponse.cs",
                "function": "The file defines a `GyazoResponse` class representing the response data from a Gyazo API call, including fields for image ID, URLs, and type."
            },
            {
                "file": "unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/Internal/GyazoSetting.cs",
                "function": "The file defines a Unity ScriptableObject named `GyazoSetting` used to store a Gyazo access token for uploading images."
            },
            {
                "file": "unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/Internal/GyazoUploader.cs",
                "function": "This file defines a static class `GyazoUploader` that captures a screenshot, encodes it as a JPEG, and uploads it to the Gyazo service using a provided access token. It also supports optional title and description fields for the upload."
            },
            {
                "file": "unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/Internal/ITweetData.cs",
                "function": "The file defines an interface `ITweetData` with a single method `GetShareUrl()` that returns a URL for sharing content."
            },
            {
                "file": "unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/Internal/TweetData.cs",
                "function": "This file defines a `TweetData` class that constructs a Twitter share URL with customizable game ID, text, hashtags, and optional image URL, allowing for sharing game-related content on Twitter."
            }
        ],
        "gt": "[['unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/Internal/CoroutineHandler.cs', 'unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/UnityRoomTweet.cs'], ['unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/Internal/GyazoSetting.cs', 'unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/UnityRoomTweet.cs'], ['unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/UnityRoomTweet.cs'], ['unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/Internal/GyazoUploader.cs', 'unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/UnityRoomTweet.cs'], ['unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/Internal/GyazoResponse.cs', 'unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/UnityRoomTweet.cs'], ['unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/Internal/TweetData.cs', 'unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/UnityRoomTweet.cs'], ['unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/Internal/ITweetData.cs'], ['unityroom-tweet/Assets/naichilab/unityroom-tweet/Sample/Scripts/TweetSample.cs'], ['unityroom-tweet/Assets/naichilab/unityroom-tweet/Scripts/Internal/GyazoResponse.cs']]"
    },
    {
        "repo": "Cheeseknife",
        "description": "Cheeseknife is a view injection library for Xamarin.Android, inspired by Java's Butter Knife.",
        "function": "It simplifies Android view and event injection using C# attributes, reducing boilerplate code and eliminating the need for repetitive `FindViewById` calls. Supports common Android view events and allows for easy extension with custom events.",
        "files": [
            {
                "file": "Cheeseknife/Cheeseknife/Cheeseknife.cs",
                "function": "This file defines a library for Android view and event injection in Xamarin.Android, allowing developers to annotate fields, properties, and methods with attributes to automatically bind views and event handlers at runtime."
            },
            {
                "file": "Cheeseknife/SampleApp/ListSampleActivity.cs",
                "function": "The file defines a ListSampleActivity in an Android app, which sets a layout and initializes a ListSampleFragment when the activity is created."
            },
            {
                "file": "Cheeseknife/SampleApp/ListSampleAdapter.cs",
                "function": "The `ListSampleAdapter` class is an Android list adapter that populates a list with dummy data and uses the ViewHolder pattern with Cheeseknife for view injection to optimize list item rendering."
            },
            {
                "file": "Cheeseknife/SampleApp/ListSampleFragment.cs",
                "function": "This fragment demonstrates the use of Cheeseknife for view injection and event handling within an Android fragment, showcasing how to manage a ListView and its item click events while adhering to the fragment lifecycle."
            },
            {
                "file": "Cheeseknife/SampleApp/MainActivity.cs",
                "function": "This file defines a main activity for an Android app, using Cheeseknife for view injection and event handling. It sets up a button click event to start a new activity and updates a text view's content."
            },
            {
                "file": "Cheeseknife/SampleApp/MainApplication.cs",
                "function": "The file defines a custom `MainApplication` class in an Android app, inheriting from the base `Application` class to handle application-level initialization."
            },
            {
                "file": "Cheeseknife/SampleApp/Properties/AssemblyInfo.cs",
                "function": "This file defines assembly-level attributes for an Android application, including metadata such as title, version, and copyright information."
            },
            {
                "file": "Cheeseknife/SampleApp/Resources/Resource.designer.cs",
                "function": "This file defines resources for an Android application, including animations, attributes, colors, dimensions, drawables, IDs, integers, layouts, strings, and styles. It is auto-generated and used to manage and reference various UI elements and themes in the app."
            }
        ],
        "gt": "[['Cheeseknife/Cheeseknife/Cheeseknife.cs', 'Cheeseknife/SampleApp/ListSampleAdapter.cs'], ['Cheeseknife/SampleApp/Properties/AssemblyInfo.cs'], ['Cheeseknife/Cheeseknife/Cheeseknife.cs', 'Cheeseknife/SampleApp/MainActivity.cs'], ['Cheeseknife/SampleApp/ListSampleFragment.cs'], ['Cheeseknife/SampleApp/MainApplication.cs'], ['Cheeseknife/Cheeseknife/Cheeseknife.cs', 'Cheeseknife/SampleApp/ListSampleFragment.cs'], ['Cheeseknife/SampleApp/MainActivity.cs'], ['Cheeseknife/SampleApp/ListSampleActivity.cs'], ['Cheeseknife/SampleApp/ListSampleAdapter.cs'], ['Cheeseknife/SampleApp/Resources/Resource.designer.cs'], ['Cheeseknife/Cheeseknife/Cheeseknife.cs']]"
    },
    {
        "repo": "SslCertBinding.Net",
        "description": "SslCertBinding.Net is a .NET library for managing SSL certificate bindings on Windows.",
        "function": "Provides an API to add, remove, or retrieve SSL certificate bindings for HTTPS ports, serving as a programmatic alternative to Windows command-line tools.",
        "files": [
            {
                "file": "SslCertBinding.Net/src/SslCertBinding.Net.Sample/Program.cs",
                "function": "This file provides a command-line tool to manage SSL certificate bindings on Windows, allowing users to show, bind, or delete SSL certificate bindings for specific IP addresses and ports."
            },
            {
                "file": "SslCertBinding.Net/src/SslCertBinding.Net.Tests/CertConfigCmd.cs",
                "function": "This file provides functionality to manage SSL certificate bindings for IP endpoints using `netsh` commands, including adding, removing, and querying SSL certificate configurations."
            },
            {
                "file": "SslCertBinding.Net/src/SslCertBinding.Net.Tests/CertificateBindingConfigurationLinuxTests.cs",
                "function": "This file contains unit tests for Linux that verify the `CertificateBindingConfiguration` class throws `PlatformNotSupportedException` with an inner `DllNotFoundException` when attempting to query, delete, or bind SSL certificate configurations."
            },
            {
                "file": "SslCertBinding.Net/src/SslCertBinding.Net.Tests/CertificateBindingConfigurationTests.cs",
                "function": "This file contains unit tests for managing SSL certificate bindings on Windows, including querying, adding, updating, and deleting bindings, as well as handling edge cases like null or empty collections."
            },
            {
                "file": "SslCertBinding.Net/src/SslCertBinding.Net.Tests/CertificateBindingTests.cs",
                "function": "This file contains unit tests for the `CertificateBinding` class, verifying that its constructor throws exceptions when invalid parameters (empty certificate thumbprint or null IP endpoint) are provided."
            },
            {
                "file": "SslCertBinding.Net/src/SslCertBinding.Net.Tests/IpEndpointTools.cs",
                "function": "The file provides utility methods to check if an IP endpoint is available for listening and to parse a string into an IPEndPoint object."
            },
            {
                "file": "SslCertBinding.Net/src/SslCertBinding.Net.Tests/ProcessExtensions.cs",
                "function": "The file provides an extension method for the `Process` class in .NET, allowing asynchronous waiting for a process to exit using a `CancellationToken`."
            },
            {
                "file": "SslCertBinding.Net/src/SslCertBinding.Net.Tests/Properties/Resources.Designer.cs",
                "function": "The file defines a strongly-typed resource class for managing localized resources, specifically a byte array representing a certificate (certCA), and provides methods to access and override the current UI culture for resource lookups."
            },
            {
                "file": "SslCertBinding.Net/src/SslCertBinding.Net/BindingOptions.cs",
                "function": "The `BindingOptions` class configures SSL certificate binding settings, including revocation list updates, certificate issuer trust, client certificate handling, and SSL request processing options."
            },
            {
                "file": "SslCertBinding.Net/src/SslCertBinding.Net/CertificateBinding.cs",
                "function": "The `CertificateBinding` class defines a record for SSL certificate configuration, associating a certificate with an IP address and port, and specifying the certificate store and application identifier."
            },
            {
                "file": "SslCertBinding.Net/src/SslCertBinding.Net/CertificateBindingConfiguration.cs",
                "function": "This file provides functionality to manage SSL certificate bindings for IP endpoints on Windows, allowing querying, binding, and deleting SSL certificates."
            },
            {
                "file": "SslCertBinding.Net/src/SslCertBinding.Net/HttpApi.cs",
                "function": "This file provides a wrapper for interacting with the Windows HTTP Server API, enabling initialization, configuration, and termination of HTTP services, along with managing SSL certificates and configurations."
            },
            {
                "file": "SslCertBinding.Net/src/SslCertBinding.Net/ICertificateBindingConfiguration.cs",
                "function": "The file defines an interface `ICertificateBindingConfiguration` for managing SSL certificate bindings, allowing querying, binding, and deleting certificate bindings for specific IP endpoints."
            },
            {
                "file": "SslCertBinding.Net/src/SslCertBinding.Net/SockaddrInterop.cs",
                "function": "This file provides methods to create and read unmanaged `sockaddr` structures for IP endpoints, facilitating interoperability with WinAPI functions."
            }
        ],
        "gt": "[['SslCertBinding.Net/src/SslCertBinding.Net.Tests/CertificateBindingConfigurationTests.cs'], ['SslCertBinding.Net/src/SslCertBinding.Net/HttpApi.cs'], ['SslCertBinding.Net/src/SslCertBinding.Net.Tests/IpEndpointTools.cs'], ['SslCertBinding.Net/src/SslCertBinding.Net/ICertificateBindingConfiguration.cs'], ['SslCertBinding.Net/src/SslCertBinding.Net.Tests/CertificateBindingConfigurationLinuxTests.cs'], ['SslCertBinding.Net/src/SslCertBinding.Net.Tests/ProcessExtensions.cs'], ['SslCertBinding.Net/src/SslCertBinding.Net/SockaddrInterop.cs'], ['SslCertBinding.Net/src/SslCertBinding.Net.Tests/Properties/Resources.Designer.cs', 'SslCertBinding.Net/src/SslCertBinding.Net.Tests/CertificateBindingConfigurationTests.cs'], ['SslCertBinding.Net/src/SslCertBinding.Net.Sample/Program.cs'], ['SslCertBinding.Net/src/SslCertBinding.Net/CertificateBinding.cs'], ['SslCertBinding.Net/src/SslCertBinding.Net/CertificateBindingConfiguration.cs'], ['SslCertBinding.Net/src/SslCertBinding.Net/BindingOptions.cs'], ['SslCertBinding.Net/src/SslCertBinding.Net.Tests/CertConfigCmd.cs'], ['SslCertBinding.Net/src/SslCertBinding.Net.Tests/CertificateBindingTests.cs']]"
    },
    {
        "repo": "NStrip",
        "description": "NStrip is a utility tool for modifying .NET assemblies, including publicizing and stripping functionalities.",
        "function": "Allows users to make types, methods, properties, and fields public, strip method bodies, manage dependencies, and control serialization in Unity. It also supports various stripping options and customization for handling compiler-generated members.",
        "files": [
            {
                "file": "NStrip/NStrip/AssemblyStripper.cs",
                "function": "The file defines an assembly manipulation tool that strips or modifies method bodies in .NET assemblies based on specified options, and can also make types and members public while optionally excluding certain types or compiler-generated items."
            },
            {
                "file": "NStrip/NStrip/NArgs.cs",
                "function": "The file defines a command-line argument parser that parses and validates command-line arguments, mapping them to a specified object type. It also includes functionality to generate help text for command-line options."
            },
            {
                "file": "NStrip/NStrip/Program.cs",
                "function": "This program processes .NET assemblies, either stripping them of unnecessary code or making their types and members public, based on command-line arguments. It supports batch processing of directories and can overwrite or append to file names for output."
            },
            {
                "file": "NStrip/NStrip/Properties/AssemblyInfo.cs",
                "function": "The file defines assembly-level attributes for a .NET utility tool, specifying its description, copyright, trademark, and culture information."
            }
        ],
        "gt": "[['NStrip/NStrip/AssemblyStripper.cs'], ['NStrip/NStrip/Program.cs'], ['NStrip/NStrip/NArgs.cs', 'NStrip/NStrip/Program.cs'], ['NStrip/NStrip/Properties/AssemblyInfo.cs']]"
    },
    {
        "repo": "osc-websocket-example",
        "description": "A collection of examples demonstrating how to receive OSC data via WebSocket.",
        "function": "Provides examples for receiving OSC data through WebSocket in various environments like p5js, Processing, MaxMSP, Unity, and Pure Data. Utilizes libraries like osc.js and custom WebSocket implementations to handle binary OSC packets.",
        "files": [
            {
                "file": "osc-websocket-example/unity/osc-websocket/Assets/WebSocketOSC.cs",
                "function": "The file defines a WebSocket server in Unity that communicates with a client (e.g., p5js) using WebSocket and OSC protocols. It handles text and binary messages, logs connections and errors, and sends OSC messages from Unity to the client."
            },
            {
                "file": "osc-websocket-example/unity/osc-websocket/Assets/vvvvosc/OSCBundle.cs",
                "function": "The `OSCBundle` class in the `VVVV_OSC` namespace is designed to handle OSC (Open Sound Control) bundles, which group multiple OSC messages together with a timestamp. It provides methods for packing and unpacking OSC bundles, managing timestamps, and appending OSC packets to the bundle."
            },
            {
                "file": "osc-websocket-example/unity/osc-websocket/Assets/vvvvosc/OSCMessage.cs",
                "function": "The `OSCMessage` class in the `VVVV_OSC` namespace is designed to create and manipulate Open Sound Control (OSC) messages, which consist of an address, type tags, and associated data. It supports various data types and provides methods for packing and unpacking OSC messages in binary format."
            },
            {
                "file": "osc-websocket-example/unity/osc-websocket/Assets/vvvvosc/OSCPacket.cs",
                "function": "The file defines an abstract class `OSCPacket` for handling Open Sound Control (OSC) packets, providing methods for packing and unpacking various data types, managing binary data, and handling OSC message and bundle structures."
            },
            {
                "file": "osc-websocket-example/unity/osc-websocket/Assets/vvvvosc/OSCReceiver.cs",
                "function": "The `OSCReceiver` class is designed to receive Open Sound Control (OSC) packets over UDP, unpack them, and handle casting of received data to float values. It initializes a UDP client on a specified local port, listens for incoming OSC messages, and processes them into usable data."
            },
            {
                "file": "osc-websocket-example/unity/osc-websocket/Assets/vvvvosc/OSCTimeTag.cs",
                "function": "The `OscTimeTag` class provides functionality for handling OSC (Open Sound Control) time tags, allowing conversion between OSC time tags and `DateTime` objects, validation of time stamps, and comparison of time tags."
            },
            {
                "file": "osc-websocket-example/unity/osc-websocket/Assets/vvvvosc/OSCTransmitter.cs",
                "function": "The `OSCTransmitter` class provides functionality to send OSC (Open Sound Control) packets over UDP to a specified remote host and port. It handles connection management and packet transmission."
            }
        ],
        "gt": "[['osc-websocket-example/unity/osc-websocket/Assets/vvvvosc/OSCTransmitter.cs', 'osc-websocket-example/unity/osc-websocket/Assets/WebSocketOSC.cs'], ['osc-websocket-example/unity/osc-websocket/Assets/vvvvosc/OSCTimeTag.cs', 'osc-websocket-example/unity/osc-websocket/Assets/WebSocketOSC.cs'], ['osc-websocket-example/unity/osc-websocket/Assets/WebSocketOSC.cs'], ['osc-websocket-example/unity/osc-websocket/Assets/vvvvosc/OSCMessage.cs', 'osc-websocket-example/unity/osc-websocket/Assets/WebSocketOSC.cs'], ['osc-websocket-example/unity/osc-websocket/Assets/vvvvosc/OSCBundle.cs', 'osc-websocket-example/unity/osc-websocket/Assets/WebSocketOSC.cs'], ['osc-websocket-example/unity/osc-websocket/Assets/vvvvosc/OSCPacket.cs', 'osc-websocket-example/unity/osc-websocket/Assets/WebSocketOSC.cs'], ['osc-websocket-example/unity/osc-websocket/Assets/vvvvosc/OSCReceiver.cs', 'osc-websocket-example/unity/osc-websocket/Assets/WebSocketOSC.cs'], ['osc-websocket-example/unity/osc-websocket/Assets/vvvvosc/OSCReceiver.cs']]"
    },
    {
        "repo": "MAUIWebViewExample",
        "description": "A MAUI project demonstrating a custom Hybrid WebView component with JavaScript to Native interoperability.",
        "function": "Enables JavaScript to Native communication on Android, iOS, and Windows platforms. Includes a workaround for Windows using HttpListener and implements EvaluateJavaScriptAsync for all platforms.",
        "files": [
            {
                "file": "MAUIWebViewExample/WebViewHostExample/App.xaml.cs",
                "function": "The file defines a basic application class (`App`) for a .NET MAUI project, initializing the main page to `AppShell`."
            },
            {
                "file": "MAUIWebViewExample/WebViewHostExample/AppShell.xaml.cs",
                "function": "The file defines a `AppShell` class in a .NET MAUI application, which inherits from `Shell` and initializes its components."
            },
            {
                "file": "MAUIWebViewExample/WebViewHostExample/MainPage.xaml.cs",
                "function": "The MainPage class integrates a WebView to display HTML content, allowing JavaScript in the WebView to interact with the C# backend. It handles button clicks in the WebView, updates the UI, and enables communication between the WebView and the native app."
            },
            {
                "file": "MAUIWebViewExample/WebViewHostExample/MauiProgram.cs",
                "function": "This file configures a Maui application, setting up fonts and registering a custom handler for a `HybridWebView` control across different platforms."
            },
            {
                "file": "MAUIWebViewExample/WebViewHostExample/Controls/HybridWebView.cs",
                "function": "This file defines a `HybridWebView` control that extends the functionality of a standard web view, allowing for JavaScript evaluation, source changes, and event handling for JavaScript actions."
            },
            {
                "file": "MAUIWebViewExample/WebViewHostExample/Platforms/Android/MainActivity.cs",
                "function": "The file defines a `MainActivity` class for an Android app, inheriting from `MauiAppCompatActivity`, and sets it as the main launcher with specific configuration changes supported."
            },
            {
                "file": "MAUIWebViewExample/WebViewHostExample/Platforms/Android/MainApplication.cs",
                "function": "The file defines a `MainApplication` class for an Android app, inheriting from `MauiApplication`, and overrides the `CreateMauiApp` method to initialize the app using `MauiProgram`."
            },
            {
                "file": "MAUIWebViewExample/WebViewHostExample/Platforms/Android/Handlers/HybridWebViewHandler.cs",
                "function": "The file defines a `HybridWebViewHandler` for Android, enabling a WebView to interact with JavaScript by loading HTML or URLs, evaluating JavaScript, and invoking C# actions from JavaScript via a bridge."
            },
            {
                "file": "MAUIWebViewExample/WebViewHostExample/Platforms/Windows/App.xaml.cs",
                "function": "The file defines a WinUI application class (`App`) that initializes a singleton application object and creates a Maui application using `MauiProgram.CreateMauiApp()`."
            },
            {
                "file": "MAUIWebViewExample/WebViewHostExample/Platforms/Windows/Handlers/HybridWebViewHandler.cs",
                "function": "The file defines a `HybridWebViewHandler` for handling web view interactions in a hybrid application, enabling communication between JavaScript and native code via an HTTP listener. It includes a `HybridSocket` class to manage HTTP requests, allowing JavaScript to send data to the native side, which is then processed and acted upon by the handler."
            },
            {
                "file": "MAUIWebViewExample/WebViewHostExample/Platforms/iOS/AppDelegate.cs",
                "function": "The file defines an `AppDelegate` class for a Maui application, responsible for initializing the app and handling the launch process. It integrates AppCenter for analytics and crash reporting."
            },
            {
                "file": "MAUIWebViewExample/WebViewHostExample/Platforms/iOS/Program.cs",
                "function": "The file defines the main entry point of an iOS application using UIKit, specifying the `AppDelegate` class to handle application-level events."
            },
            {
                "file": "MAUIWebViewExample/WebViewHostExample/Platforms/iOS/Handlers/HybridWebViewHandler.cs",
                "function": "The `HybridWebViewHandler` class provides a custom renderer for integrating a `WKWebView` in an iOS application, enabling communication between JavaScript and C# via a JavaScript bridge. It handles loading HTML or URL sources, evaluating JavaScript, and managing the lifecycle of the web view."
            },
            {
                "file": "MAUIWebViewExample/WebViewHostExample/ViewModels/MainPageViewModel.cs",
                "function": "The file defines a `MainPageViewModel` class that implements `INotifyPropertyChanged` to manage a `WebViewSource` property, notifying listeners of changes to the property."
            }
        ],
        "gt": "[['MAUIWebViewExample/WebViewHostExample/Platforms/Windows/Handlers/HybridWebViewHandler.cs'], ['MAUIWebViewExample/WebViewHostExample/MauiProgram.cs'], ['MAUIWebViewExample/WebViewHostExample/Platforms/Android/Handlers/HybridWebViewHandler.cs', 'MAUIWebViewExample/WebViewHostExample/MauiProgram.cs'], ['MAUIWebViewExample/WebViewHostExample/Platforms/Android/MainApplication.cs'], ['MAUIWebViewExample/WebViewHostExample/Controls/HybridWebView.cs', 'MAUIWebViewExample/WebViewHostExample/Platforms/Windows/Handlers/HybridWebViewHandler.cs'], ['MAUIWebViewExample/WebViewHostExample/ViewModels/MainPageViewModel.cs'], ['MAUIWebViewExample/WebViewHostExample/Platforms/iOS/Program.cs'], ['MAUIWebViewExample/WebViewHostExample/Controls/HybridWebView.cs', 'MAUIWebViewExample/WebViewHostExample/Platforms/Android/Handlers/HybridWebViewHandler.cs', 'MAUIWebViewExample/WebViewHostExample/MauiProgram.cs'], ['MAUIWebViewExample/WebViewHostExample/Platforms/iOS/Handlers/HybridWebViewHandler.cs', 'MAUIWebViewExample/WebViewHostExample/MauiProgram.cs'], ['MAUIWebViewExample/WebViewHostExample/Platforms/Windows/App.xaml.cs'], ['MAUIWebViewExample/WebViewHostExample/Platforms/Android/MainActivity.cs'], ['MAUIWebViewExample/WebViewHostExample/App.xaml.cs'], ['MAUIWebViewExample/WebViewHostExample/Platforms/iOS/AppDelegate.cs'], ['MAUIWebViewExample/WebViewHostExample/Controls/HybridWebView.cs', 'MAUIWebViewExample/WebViewHostExample/Platforms/iOS/Handlers/HybridWebViewHandler.cs', 'MAUIWebViewExample/WebViewHostExample/MauiProgram.cs'], ['MAUIWebViewExample/WebViewHostExample/MainPage.xaml.cs'], ['MAUIWebViewExample/WebViewHostExample/AppShell.xaml.cs'], ['MAUIWebViewExample/WebViewHostExample/Controls/HybridWebView.cs', 'MAUIWebViewExample/WebViewHostExample/MauiProgram.cs']]"
    },
    {
        "repo": "PredicateLib",
        "description": "PredicateLib is an extension library for creating complex and flexible Expression<Func<T, bool>> predicates.",
        "function": "Allows creation of true/false predicates, property-based predicates, and logical extensions. Supports converting conditions into predicates, enabling dynamic query generation for ORM frameworks like EF and MongoDB Driver.",
        "files": [
            {
                "file": "PredicateLib/PredicateLib/Condition.cs",
                "function": "The file defines a `Condition<T>` class that manages and manipulates query conditions, allowing for the creation of complex predicates using AND or OR logic. It supports adding, removing, and configuring conditions, and can convert these conditions into LINQ expression predicates for filtering data."
            },
            {
                "file": "PredicateLib/PredicateLib/ConditionItem.cs",
                "function": "This file defines a `ConditionItem` class that represents a condition for filtering data, allowing for the creation of predicate expressions based on property names, values, and comparison operators. It supports generic types and handles type conversion for different data types."
            },
            {
                "file": "PredicateLib/PredicateLib/Operator.cs",
                "function": "This file defines an enumeration of comparison operators, including standard equality and inequality checks, as well as string-specific operations like Contains, EndsWith, and StartsWith."
            },
            {
                "file": "PredicateLib/PredicateLib/Predicate.cs",
                "function": "This file provides a library for generating predicate filtering expressions in C#, allowing for the creation of complex filtering logic such as OR/AND conditions, equality checks, and custom operations based on property values."
            },
            {
                "file": "PredicateLib/PredicateLib/Extensions/ConditionExtensions.cs",
                "function": "This file provides extension methods to convert URIs and key-value pairs into query conditions of a specified type, facilitating the creation of query conditions for data retrieval."
            },
            {
                "file": "PredicateLib/PredicateLib/Extensions/ExpressionExtensions.cs",
                "function": "This file provides extension methods for combining and manipulating predicate expressions, allowing for logical operations like AND and OR, as well as handling property comparisons and parameter replacements."
            },
            {
                "file": "PredicateLib/PredicateLib/Extensions/TypeExtensions.cs",
                "function": "This file provides extension methods for the `Type` class, including methods to check if a type can be derived from a base type and to return or convert a type to its detailed form."
            },
            {
                "file": "PredicateLib/PredicateLib/Extensions/UriExtensions.cs",
                "function": "This file provides an extension method for `Uri` to extract and decode query parameters, along with a helper method for URL decoding."
            },
            {
                "file": "PredicateLib/Usage/Program.cs",
                "function": "The file defines a `User` class with properties and demonstrates how to create a predicate for filtering users based on conditions derived from a URI, using operators and ignoring specific properties."
            }
        ],
        "gt": "[['PredicateLib/PredicateLib/Extensions/TypeExtensions.cs'], ['PredicateLib/PredicateLib/Condition.cs', 'PredicateLib/PredicateLib/Extensions/ExpressionExtensions.cs'], ['PredicateLib/PredicateLib/Predicate.cs', 'PredicateLib/PredicateLib/Extensions/ExpressionExtensions.cs'], ['PredicateLib/PredicateLib/Extensions/ConditionExtensions.cs'], ['PredicateLib/PredicateLib/Operator.cs', 'PredicateLib/PredicateLib/Extensions/ExpressionExtensions.cs'], ['PredicateLib/Usage/Program.cs'], ['PredicateLib/PredicateLib/Extensions/ExpressionExtensions.cs'], ['PredicateLib/PredicateLib/Extensions/UriExtensions.cs'], ['PredicateLib/PredicateLib/ConditionItem.cs', 'PredicateLib/PredicateLib/Extensions/ExpressionExtensions.cs']]"
    },
    {
        "repo": "BuilderTestSample",
        "description": "A project demonstrating the use of the Builder Pattern in unit testing.",
        "function": "Provides a sample implementation of the Builder Pattern for creating test data, specifically for the `Order` class. It includes instructions and a kata to practice building additional builders for `Customer` and `Address`, and to implement and test new functionality in the `OrderService` class.",
        "files": [
            {
                "file": "BuilderTestSample/src/BuilderTestSample/Exceptions/InsufficientCreditException.cs",
                "function": "Defines a custom exception named `InsufficientCreditException` for handling cases where credit is insufficient, with constructors for different usage scenarios."
            },
            {
                "file": "BuilderTestSample/src/BuilderTestSample/Exceptions/InvalidAddressException.cs",
                "function": "Defines a custom exception, `InvalidAddressException`, for handling errors related to invalid addresses, with constructors for different usage scenarios."
            },
            {
                "file": "BuilderTestSample/src/BuilderTestSample/Exceptions/InvalidCustomerException.cs",
                "function": "Defines a custom exception, `InvalidCustomerException`, for handling errors related to invalid customer data."
            },
            {
                "file": "BuilderTestSample/src/BuilderTestSample/Exceptions/InvalidOrderException.cs",
                "function": "Defines a custom exception named `InvalidOrderException` for handling invalid order scenarios, with constructors for custom messages and inner exceptions."
            },
            {
                "file": "BuilderTestSample/src/BuilderTestSample/Model/Address.cs",
                "function": "Defines a class `Address` with properties for storing street addresses, city, state, postal code, and country."
            },
            {
                "file": "BuilderTestSample/src/BuilderTestSample/Model/Customer.cs",
                "function": "Defines a `Customer` class with properties for personal details, credit rating, purchase history, and associated orders."
            },
            {
                "file": "BuilderTestSample/src/BuilderTestSample/Model/Order.cs",
                "function": "The file defines a class `Order` with properties for an order's ID, associated customer, total amount, and whether the order is expedited."
            },
            {
                "file": "BuilderTestSample/src/BuilderTestSample/Services/OrderService.cs",
                "function": "The `OrderService` class manages placing orders by validating the order and customer details, expediting orders based on customer criteria, and updating customer history and total purchases."
            },
            {
                "file": "BuilderTestSample/src/BuilderTestSample/Tests/OrderServicePlaceOrder.cs",
                "function": "This test verifies that the `OrderService` throws an `InvalidOrderException` when attempting to place an order with an existing ID."
            },
            {
                "file": "BuilderTestSample/src/BuilderTestSample/Tests/TestBuilders/OrderBuilder.cs",
                "function": "The `OrderBuilder` class is a test data builder that facilitates the creation of `Order` objects with predefined or customizable properties, such as setting an order ID, for use in unit tests."
            }
        ],
        "gt": "[['BuilderTestSample/src/BuilderTestSample/Exceptions/InvalidAddressException.cs', 'BuilderTestSample/src/BuilderTestSample/Tests/OrderServicePlaceOrder.cs'], ['BuilderTestSample/src/BuilderTestSample/Model/Customer.cs', 'BuilderTestSample/src/BuilderTestSample/Services/OrderService.cs', 'BuilderTestSample/src/BuilderTestSample/Tests/OrderServicePlaceOrder.cs'], ['BuilderTestSample/src/BuilderTestSample/Model/Address.cs', 'BuilderTestSample/src/BuilderTestSample/Services/OrderService.cs', 'BuilderTestSample/src/BuilderTestSample/Tests/OrderServicePlaceOrder.cs'], ['BuilderTestSample/src/BuilderTestSample/Exceptions/InvalidOrderException.cs', 'BuilderTestSample/src/BuilderTestSample/Tests/OrderServicePlaceOrder.cs'], ['BuilderTestSample/src/BuilderTestSample/Services/OrderService.cs', 'BuilderTestSample/src/BuilderTestSample/Tests/OrderServicePlaceOrder.cs'], ['BuilderTestSample/src/BuilderTestSample/Exceptions/InsufficientCreditException.cs', 'BuilderTestSample/src/BuilderTestSample/Tests/OrderServicePlaceOrder.cs'], ['BuilderTestSample/src/BuilderTestSample/Model/Order.cs'], ['BuilderTestSample/src/BuilderTestSample/Tests/OrderServicePlaceOrder.cs'], ['BuilderTestSample/src/BuilderTestSample/Exceptions/InvalidCustomerException.cs', 'BuilderTestSample/src/BuilderTestSample/Tests/OrderServicePlaceOrder.cs'], ['BuilderTestSample/src/BuilderTestSample/Tests/TestBuilders/OrderBuilder.cs', 'BuilderTestSample/src/BuilderTestSample/Tests/OrderServicePlaceOrder.cs'], ['BuilderTestSample/src/BuilderTestSample/Model/Customer.cs']]"
    },
    {
        "repo": "Lean-Batch-Launcher",
        "description": "LEAN Batch Launcher is an alternative tool for QuantConnect's LEAN Engine, designed for batch processing of algorithms.",
        "function": "Enables parallel execution of algorithms with varying parameters, start/end dates, securities, Alphas, and data resolutions. It supports custom configurations and parallel processing based on CPU capabilities.",
        "files": [
            {
                "file": "Lean-Batch-Launcher/Algorithm/BasicTemplateFrameworkAlgorithm.cs",
                "function": "The file defines a basic trading algorithm for QuantConnect, using framework components to set up data resolution, trading universe, alpha models, portfolio construction, execution, and risk management. It initializes with a manual universe selection and an EMA cross alpha model, and logs filled orders."
            },
            {
                "file": "Lean-Batch-Launcher/Instance/Program.cs",
                "function": "This file defines a program that runs a backtest instance by configuring and executing a trading algorithm using provided parameters and settings, while ensuring thread safety and handling logging and resource management."
            },
            {
                "file": "Lean-Batch-Launcher/Launcher/Configuration.cs",
                "function": "This file defines a `Configuration` class that manages backtest settings, including generating parameter ranges, creating date ranges, and producing all possible combinations of parameters for batch backtesting. It also includes properties for API credentials, parallel processing, and other backtest configurations."
            },
            {
                "file": "Lean-Batch-Launcher/Launcher/Program.cs",
                "function": "The file provides functionality to run multiple instances of a QC engine in parallel, reading configurations from JSON files, generating parameter combinations, and launching backtests with specified parameters. It measures execution time and manages parallel processing limits."
            },
            {
                "file": "Lean-Batch-Launcher/Launcher/Queue.cs",
                "function": "This file implements a job queue handler for launching backtesting jobs, reading configuration settings, and preparing the job with specified parameters and limits."
            },
            {
                "file": "Lean-Batch-Launcher/Util/EnumerableUtils.cs",
                "function": "The file provides utility methods for generating custom enumerable ranges: `SteppedRange` generates a range with a custom step size, and `ProductRange` generates a range by multiplying the start value by a factor repeatedly."
            },
            {
                "file": "Lean-Batch-Launcher/Util/StringExtensions.cs",
                "function": "This file provides string extension methods, including `SafelyWriteToFile` for thread-safe file writing using a Mutex lock and `GetTypeIfIntOrDecimal` to determine if a string contains an integer or decimal value."
            },
            {
                "file": "Lean-Batch-Launcher/Util/ThreadSafe.cs",
                "function": "The file provides a thread-safe method `Execute` that uses a Mutex lock to ensure a delegate action runs safely across threads. It handles potential exceptions and retries the action if an `IOException` occurs."
            },
            {
                "file": "Lean-Batch-Launcher/Util/Utils.cs",
                "function": "This file provides utility methods for encoding and decoding text, specifically handling newlines, quotes, and backslashes in command-line arguments. It includes functions to escape and unescape special characters for proper formatting."
            }
        ],
        "gt": "[['Lean-Batch-Launcher/Launcher/Program.cs'], ['Lean-Batch-Launcher/Util/ThreadSafe.cs', 'Lean-Batch-Launcher/Instance/Program.cs'], ['Lean-Batch-Launcher/Launcher/Configuration.cs'], ['Lean-Batch-Launcher/Util/StringExtensions.cs', 'Lean-Batch-Launcher/Launcher/Program.cs'], ['Lean-Batch-Launcher/Util/Utils.cs'], ['Lean-Batch-Launcher/Algorithm/BasicTemplateFrameworkAlgorithm.cs'], ['Lean-Batch-Launcher/Util/EnumerableUtils.cs', 'Lean-Batch-Launcher/Launcher/Configuration.cs'], ['Lean-Batch-Launcher/Util/ThreadSafe.cs', 'Lean-Batch-Launcher/Launcher/Program.cs'], ['Lean-Batch-Launcher/Instance/Program.cs'], ['Lean-Batch-Launcher/Util/EnumerableUtils.cs', 'Lean-Batch-Launcher/Instance/Program.cs'], ['Lean-Batch-Launcher/Launcher/Queue.cs'], ['Lean-Batch-Launcher/Util/EnumerableUtils.cs', 'Lean-Batch-Launcher/Launcher/Program.cs'], ['Lean-Batch-Launcher/Util/ThreadSafe.cs', 'Lean-Batch-Launcher/Launcher/Configuration.cs'], ['Lean-Batch-Launcher/Util/StringExtensions.cs', 'Lean-Batch-Launcher/Instance/Program.cs'], ['Lean-Batch-Launcher/Util/StringExtensions.cs', 'Lean-Batch-Launcher/Launcher/Configuration.cs']]"
    },
    {
        "repo": "aspnetcore-grpc-rest",
        "description": "A hybrid RESTful and gRPC service built using ASP.NET Core 5.0.",
        "function": "The project allows running both REST and gRPC services simultaneously, enabling compatibility with legacy REST clients while introducing gRPC for modern clients. It supports deployment via Docker and Kubernetes, with detailed instructions for local testing using Minikube.",
        "files": [
            {
                "file": "aspnetcore-grpc-rest/aspnetapp/Program.cs",
                "function": "This file defines the entry point of an ASP.NET Core application, configuring Kestrel to listen on ports 4999 for HTTP/1 and 5000 for HTTP/2, and setting up the application startup."
            },
            {
                "file": "aspnetcore-grpc-rest/aspnetapp/Startup.cs",
                "function": "This file configures an ASP.NET Core application, setting up services like API versioning, Swagger documentation, and gRPC support, and defines the HTTP request pipeline for routing and error handling."
            },
            {
                "file": "aspnetcore-grpc-rest/aspnetapp/Controllers/HelloController.cs",
                "function": "The file defines a REST API controller named `HelloController` that handles a GET request to greet a user by name. It interacts with a `IGreeterService` to process the greeting and returns a JSON response."
            },
            {
                "file": "aspnetcore-grpc-rest/aspnetapp/Services/GreeterService.cs",
                "function": "The file defines a gRPC service named `GreeterService` that implements a method `SayHello`, which takes a `HelloRequest` containing a name and returns a `HelloReply` with a greeting message."
            },
            {
                "file": "aspnetcore-grpc-rest/aspnetapp/Services/IGreeterService.cs",
                "function": "The file defines an interface `IGreeterService` with a method `SayHello` that takes a `HelloRequest` and `ServerCallContext` as parameters and returns a `HelloReply` asynchronously."
            }
        ],
        "gt": "[['aspnetcore-grpc-rest/aspnetapp/Controllers/HelloController.cs'], ['aspnetcore-grpc-rest/aspnetapp/Startup.cs'], ['aspnetcore-grpc-rest/aspnetapp/Services/GreeterService.cs', 'aspnetcore-grpc-rest/aspnetapp/Controllers/HelloController.cs'], ['aspnetcore-grpc-rest/aspnetapp/Services/IGreeterService.cs', 'aspnetcore-grpc-rest/aspnetapp/Startup.cs'], ['aspnetcore-grpc-rest/aspnetapp/Services/GreeterService.cs', 'aspnetcore-grpc-rest/aspnetapp/Startup.cs'], ['aspnetcore-grpc-rest/aspnetapp/Services/IGreeterService.cs', 'aspnetcore-grpc-rest/aspnetapp/Controllers/HelloController.cs'], ['aspnetcore-grpc-rest/aspnetapp/Program.cs'], ['aspnetcore-grpc-rest/aspnetapp/Services/IGreeterService.cs']]"
    }
]